<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_234.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sqlite3VdbeExec<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(
  <parameter><decl><type><name pos:line="2" pos:column="3">Vdbe<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">p<pos:position pos:line="2" pos:column="10"/></name></decl></parameter>                    <comment type="block" pos:line="2" pos:column="30">/* The VDBE */</comment>
)<pos:position pos:line="3" pos:column="2"/></parameter_list><block pos:line="3" pos:column="2">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">Op<pos:position pos:line="4" pos:column="5"/></name> <modifier pos:line="4" pos:column="6">*<pos:position pos:line="4" pos:column="7"/></modifier></type><name pos:line="4" pos:column="7">aOp<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><name><name pos:line="4" pos:column="13">p<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">-&gt;<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="16">aOp<pos:position pos:line="4" pos:column="19"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>          <comment type="block" pos:line="4" pos:column="30">/* Copy of p-&gt;aOp */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">Op<pos:position pos:line="5" pos:column="5"/></name> <modifier pos:line="5" pos:column="6">*<pos:position pos:line="5" pos:column="7"/></modifier></type><name pos:line="5" pos:column="7">pOp<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><name pos:line="5" pos:column="13">aOp<pos:position pos:line="5" pos:column="16"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="5" pos:column="30">/* Current operation */</comment>
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><call><name pos:line="6" pos:column="5">defined<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">SQLITE_DEBUG<pos:position pos:line="6" pos:column="25"/></name></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call> <operator pos:line="6" pos:column="27">||<pos:position pos:line="6" pos:column="29"/></operator> <call><name pos:line="6" pos:column="30">defined<pos:position pos:line="6" pos:column="37"/></name><argument_list pos:line="6" pos:column="37">(<argument><expr><name pos:line="6" pos:column="38">VDBE_PROFILE<pos:position pos:line="6" pos:column="50"/></name></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">Op<pos:position pos:line="7" pos:column="5"/></name> <modifier pos:line="7" pos:column="6">*<pos:position pos:line="7" pos:column="7"/></modifier></type><name pos:line="7" pos:column="7">pOrigOp<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>               <comment type="block" pos:line="7" pos:column="30">/* Value of pOp at the top of the loop */</comment>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">SQLITE_DEBUG<pos:position pos:line="9" pos:column="20"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">nExtraDelete<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>      <comment type="block" pos:line="10" pos:column="30">/* Verifies FORDELETE and AUXDELETE flags */</comment>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">rc<pos:position pos:line="12" pos:column="9"/></name> <init pos:line="12" pos:column="10">= <expr><name pos:line="12" pos:column="12">SQLITE_OK<pos:position pos:line="12" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>        <comment type="block" pos:line="12" pos:column="30">/* Value to return */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">sqlite3<pos:position pos:line="13" pos:column="10"/></name> <modifier pos:line="13" pos:column="11">*<pos:position pos:line="13" pos:column="12"/></modifier></type><name pos:line="13" pos:column="12">db<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><name><name pos:line="13" pos:column="17">p<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">-&gt;<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="20">db<pos:position pos:line="13" pos:column="22"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>       <comment type="block" pos:line="13" pos:column="30">/* The database */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">u8<pos:position pos:line="14" pos:column="5"/></name></type> <name pos:line="14" pos:column="6">resetSchemaOnFault<pos:position pos:line="14" pos:column="24"/></name> <init pos:line="14" pos:column="25">= <expr><literal type="number" pos:line="14" pos:column="27">0<pos:position pos:line="14" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="29"/></decl_stmt> <comment type="block" pos:line="14" pos:column="30">/* Reset schema after an error if positive */</comment>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">u8<pos:position pos:line="15" pos:column="5"/></name></type> <name pos:line="15" pos:column="6">encoding<pos:position pos:line="15" pos:column="14"/></name> <init pos:line="15" pos:column="15">= <expr><call><name pos:line="15" pos:column="17">ENC<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">db<pos:position pos:line="15" pos:column="23"/></name></expr></argument>)<pos:position pos:line="15" pos:column="24"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>     <comment type="block" pos:line="15" pos:column="30">/* The database encoding */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">iCompare<pos:position pos:line="16" pos:column="15"/></name> <init pos:line="16" pos:column="16">= <expr><literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="20"/></decl_stmt>          <comment type="block" pos:line="16" pos:column="30">/* Result of last comparison */</comment>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">unsigned<pos:position pos:line="17" pos:column="11"/></name></type> <name pos:line="17" pos:column="12">nVmStep<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><literal type="number" pos:line="17" pos:column="22">0<pos:position pos:line="17" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="24"/></decl_stmt>      <comment type="block" pos:line="17" pos:column="30">/* Number of virtual machine steps */</comment>
<cpp:ifndef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifndef<pos:position pos:line="18" pos:column="8"/></cpp:directive> <name pos:line="18" pos:column="9">SQLITE_OMIT_PROGRESS_CALLBACK<pos:position pos:line="18" pos:column="38"/></name></cpp:ifndef>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">unsigned<pos:position pos:line="19" pos:column="11"/></name></type> <name pos:line="19" pos:column="12">nProgressLimit<pos:position pos:line="19" pos:column="26"/></name></decl>;<pos:position pos:line="19" pos:column="27"/></decl_stmt>   <comment type="block" pos:line="19" pos:column="30">/* Invoke xProgress() when nVmStep reaches this */</comment>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">Mem<pos:position pos:line="21" pos:column="6"/></name> <modifier pos:line="21" pos:column="7">*<pos:position pos:line="21" pos:column="8"/></modifier></type><name pos:line="21" pos:column="8">aMem<pos:position pos:line="21" pos:column="12"/></name> <init pos:line="21" pos:column="13">= <expr><name><name pos:line="21" pos:column="15">p<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">aMem<pos:position pos:line="21" pos:column="22"/></name></name></expr></init></decl>;<pos:position pos:line="21" pos:column="23"/></decl_stmt>       <comment type="block" pos:line="21" pos:column="30">/* Copy of p-&gt;aMem */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">Mem<pos:position pos:line="22" pos:column="6"/></name> <modifier pos:line="22" pos:column="7">*<pos:position pos:line="22" pos:column="8"/></modifier></type><name pos:line="22" pos:column="8">pIn1<pos:position pos:line="22" pos:column="12"/></name> <init pos:line="22" pos:column="13">= <expr><literal type="number" pos:line="22" pos:column="15">0<pos:position pos:line="22" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="22" pos:column="30">/* 1st input operand */</comment>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">Mem<pos:position pos:line="23" pos:column="6"/></name> <modifier pos:line="23" pos:column="7">*<pos:position pos:line="23" pos:column="8"/></modifier></type><name pos:line="23" pos:column="8">pIn2<pos:position pos:line="23" pos:column="12"/></name> <init pos:line="23" pos:column="13">= <expr><literal type="number" pos:line="23" pos:column="15">0<pos:position pos:line="23" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="23" pos:column="30">/* 2nd input operand */</comment>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">Mem<pos:position pos:line="24" pos:column="6"/></name> <modifier pos:line="24" pos:column="7">*<pos:position pos:line="24" pos:column="8"/></modifier></type><name pos:line="24" pos:column="8">pIn3<pos:position pos:line="24" pos:column="12"/></name> <init pos:line="24" pos:column="13">= <expr><literal type="number" pos:line="24" pos:column="15">0<pos:position pos:line="24" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="24" pos:column="30">/* 3rd input operand */</comment>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">Mem<pos:position pos:line="25" pos:column="6"/></name> <modifier pos:line="25" pos:column="7">*<pos:position pos:line="25" pos:column="8"/></modifier></type><name pos:line="25" pos:column="8">pOut<pos:position pos:line="25" pos:column="12"/></name> <init pos:line="25" pos:column="13">= <expr><literal type="number" pos:line="25" pos:column="15">0<pos:position pos:line="25" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="25" pos:column="30">/* Output operand */</comment>
<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">VDBE_PROFILE<pos:position pos:line="26" pos:column="20"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">u64<pos:position pos:line="27" pos:column="6"/></name></type> <name pos:line="27" pos:column="7">start<pos:position pos:line="27" pos:column="12"/></name></decl>;<pos:position pos:line="27" pos:column="13"/></decl_stmt>                 <comment type="block" pos:line="27" pos:column="30">/* CPU clock count at start of opcode */</comment>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" format="doxygen" pos:line="29" pos:column="3">/*** INSERT STACK UNION HERE ***/</comment>

  <expr_stmt><expr><call><name pos:line="31" pos:column="3">assert<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">( <argument><expr><name><name pos:line="31" pos:column="11">p<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">magic<pos:position pos:line="31" pos:column="19"/></name></name><operator pos:line="31" pos:column="19">==<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">VDBE_MAGIC_RUN<pos:position pos:line="31" pos:column="35"/></name></expr></argument> )<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>  <comment type="block" pos:line="31" pos:column="40">/* sqlite3_step() verifies this */</comment>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">sqlite3VdbeEnter<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">p<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">( <expr><name><name pos:line="33" pos:column="7">p<pos:position pos:line="33" pos:column="8"/></name><operator pos:line="33" pos:column="8">-&gt;<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="10">rc<pos:position pos:line="33" pos:column="12"/></name></name><operator pos:line="33" pos:column="12">==<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">SQLITE_NOMEM<pos:position pos:line="33" pos:column="26"/></name></expr> )<pos:position pos:line="33" pos:column="28"/></condition><then><block pos:line="33" pos:column="28">{
    <comment type="block" pos:line="34" pos:column="5">/* This happens if a malloc() inside a call to sqlite3_column_text() or
    ** sqlite3_column_text16() failed.  */</comment>
    <goto pos:line="36" pos:column="5">goto <name pos:line="36" pos:column="10">no_mem<pos:position pos:line="36" pos:column="16"/></name>;<pos:position pos:line="36" pos:column="17"/></goto>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">assert<pos:position pos:line="38" pos:column="9"/></name><argument_list pos:line="38" pos:column="9">( <argument><expr><name><name pos:line="38" pos:column="11">p<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">rc<pos:position pos:line="38" pos:column="16"/></name></name><operator pos:line="38" pos:column="16">==<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">SQLITE_OK<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">||<pos:position pos:line="38" pos:column="30"/></operator> <operator pos:line="38" pos:column="31">(<pos:position pos:line="38" pos:column="32"/></operator><name><name pos:line="38" pos:column="32">p<pos:position pos:line="38" pos:column="33"/></name><operator pos:line="38" pos:column="33">-&gt;<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="35">rc<pos:position pos:line="38" pos:column="37"/></name></name><operator pos:line="38" pos:column="37">&amp;<pos:position pos:line="38" pos:column="42"/></operator><literal type="number" pos:line="38" pos:column="38">0xff<pos:position pos:line="38" pos:column="42"/></literal><operator pos:line="38" pos:column="42">)<pos:position pos:line="38" pos:column="43"/></operator><operator pos:line="38" pos:column="43">==<pos:position pos:line="38" pos:column="45"/></operator><name pos:line="38" pos:column="45">SQLITE_BUSY<pos:position pos:line="38" pos:column="56"/></name></expr></argument> )<pos:position pos:line="38" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">assert<pos:position pos:line="39" pos:column="9"/></name><argument_list pos:line="39" pos:column="9">( <argument><expr><name><name pos:line="39" pos:column="11">p<pos:position pos:line="39" pos:column="12"/></name><operator pos:line="39" pos:column="12">-&gt;<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="14">bIsReader<pos:position pos:line="39" pos:column="23"/></name></name> <operator pos:line="39" pos:column="24">||<pos:position pos:line="39" pos:column="26"/></operator> <name><name pos:line="39" pos:column="27">p<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">-&gt;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="30">readOnly<pos:position pos:line="39" pos:column="38"/></name></name><operator pos:line="39" pos:column="38">!=<pos:position pos:line="39" pos:column="40"/></operator><literal type="number" pos:line="39" pos:column="40">0<pos:position pos:line="39" pos:column="41"/></literal></expr></argument> )<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">p<pos:position pos:line="40" pos:column="4"/></name><operator pos:line="40" pos:column="4">-&gt;<pos:position pos:line="40" pos:column="9"/></operator><name pos:line="40" pos:column="6">iCurrentTime<pos:position pos:line="40" pos:column="18"/></name></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <literal type="number" pos:line="40" pos:column="21">0<pos:position pos:line="40" pos:column="22"/></literal></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">assert<pos:position pos:line="41" pos:column="9"/></name><argument_list pos:line="41" pos:column="9">( <argument><expr><name><name pos:line="41" pos:column="11">p<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">explain<pos:position pos:line="41" pos:column="21"/></name></name><operator pos:line="41" pos:column="21">==<pos:position pos:line="41" pos:column="23"/></operator><literal type="number" pos:line="41" pos:column="23">0<pos:position pos:line="41" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="42" pos:column="3">p<pos:position pos:line="42" pos:column="4"/></name><operator pos:line="42" pos:column="4">-&gt;<pos:position pos:line="42" pos:column="9"/></operator><name pos:line="42" pos:column="6">pResultSet<pos:position pos:line="42" pos:column="16"/></name></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <literal type="number" pos:line="42" pos:column="19">0<pos:position pos:line="42" pos:column="20"/></literal></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">db<pos:position pos:line="43" pos:column="5"/></name><operator pos:line="43" pos:column="5">-&gt;<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="7">busyHandler<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">.<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">nBusy<pos:position pos:line="43" pos:column="24"/></name></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <literal type="number" pos:line="43" pos:column="27">0<pos:position pos:line="43" pos:column="28"/></literal></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">( <expr><name><name pos:line="44" pos:column="7">db<pos:position pos:line="44" pos:column="9"/></name><operator pos:line="44" pos:column="9">-&gt;<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="11">u1<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">.<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">isInterrupted<pos:position pos:line="44" pos:column="27"/></name></name></expr> )<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29"> <block type="pseudo"><goto pos:line="44" pos:column="30">goto <name pos:line="44" pos:column="35">abort_due_to_interrupt<pos:position pos:line="44" pos:column="57"/></name>;<pos:position pos:line="44" pos:column="58"/></goto></block></then></if>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">sqlite3VdbeIOTraceSql<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">p<pos:position pos:line="45" pos:column="26"/></name></expr></argument>)<pos:position pos:line="45" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
<cpp:ifndef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifndef<pos:position pos:line="46" pos:column="8"/></cpp:directive> <name pos:line="46" pos:column="9">SQLITE_OMIT_PROGRESS_CALLBACK<pos:position pos:line="46" pos:column="38"/></name></cpp:ifndef>
  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">( <expr><name><name pos:line="47" pos:column="7">db<pos:position pos:line="47" pos:column="9"/></name><operator pos:line="47" pos:column="9">-&gt;<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="11">xProgress<pos:position pos:line="47" pos:column="20"/></name></name></expr> )<pos:position pos:line="47" pos:column="22"/></condition><then><block pos:line="47" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="48" pos:column="5">u32<pos:position pos:line="48" pos:column="8"/></name></type> <name pos:line="48" pos:column="9">iPrior<pos:position pos:line="48" pos:column="15"/></name> <init pos:line="48" pos:column="16">= <expr><name><name pos:line="48" pos:column="18">p<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">-&gt;<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="21">aCounter<pos:position pos:line="48" pos:column="29"/></name><index pos:line="48" pos:column="29">[<expr><name pos:line="48" pos:column="30">SQLITE_STMTSTATUS_VM_STEP<pos:position pos:line="48" pos:column="55"/></name></expr>]<pos:position pos:line="48" pos:column="56"/></index></name></expr></init></decl>;<pos:position pos:line="48" pos:column="57"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">assert<pos:position pos:line="49" pos:column="11"/></name><argument_list pos:line="49" pos:column="11">( <argument><expr><literal type="number" pos:line="49" pos:column="13">0<pos:position pos:line="49" pos:column="14"/></literal> <operator pos:line="49" pos:column="15">&lt;<pos:position pos:line="49" pos:column="19"/></operator> <name><name pos:line="49" pos:column="17">db<pos:position pos:line="49" pos:column="19"/></name><operator pos:line="49" pos:column="19">-&gt;<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="21">nProgressOps<pos:position pos:line="49" pos:column="33"/></name></name></expr></argument> )<pos:position pos:line="49" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="50" pos:column="5">nProgressLimit<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <name><name pos:line="50" pos:column="22">db<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">-&gt;<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="26">nProgressOps<pos:position pos:line="50" pos:column="38"/></name></name> <operator pos:line="50" pos:column="39">-<pos:position pos:line="50" pos:column="40"/></operator> <operator pos:line="50" pos:column="41">(<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="42">iPrior<pos:position pos:line="50" pos:column="48"/></name> <operator pos:line="50" pos:column="49">%<pos:position pos:line="50" pos:column="50"/></operator> <name><name pos:line="50" pos:column="51">db<pos:position pos:line="50" pos:column="53"/></name><operator pos:line="50" pos:column="53">-&gt;<pos:position pos:line="50" pos:column="58"/></operator><name pos:line="50" pos:column="55">nProgressOps<pos:position pos:line="50" pos:column="67"/></name></name><operator pos:line="50" pos:column="67">)<pos:position pos:line="50" pos:column="68"/></operator></expr>;<pos:position pos:line="50" pos:column="69"/></expr_stmt>
  }<pos:position pos:line="51" pos:column="4"/></block></then><else pos:line="51" pos:column="4">else<block pos:line="51" pos:column="8">{
    <expr_stmt><expr><name pos:line="52" pos:column="5">nProgressLimit<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">=<pos:position pos:line="52" pos:column="21"/></operator> <literal type="number" pos:line="52" pos:column="22">0xffffffff<pos:position pos:line="52" pos:column="32"/></literal></expr>;<pos:position pos:line="52" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="53" pos:column="4"/></block></else></if>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">ifdef<pos:position pos:line="55" pos:column="7"/></cpp:directive> <name pos:line="55" pos:column="8">SQLITE_DEBUG<pos:position pos:line="55" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="56" pos:column="3">sqlite3BeginBenignMalloc<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">()<pos:position pos:line="56" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="30"/></expr_stmt>
  <if pos:line="57" pos:column="3">if<condition pos:line="57" pos:column="5">( <expr><name><name pos:line="57" pos:column="7">p<pos:position pos:line="57" pos:column="8"/></name><operator pos:line="57" pos:column="8">-&gt;<pos:position pos:line="57" pos:column="13"/></operator><name pos:line="57" pos:column="10">pc<pos:position pos:line="57" pos:column="12"/></name></name><operator pos:line="57" pos:column="12">==<pos:position pos:line="57" pos:column="14"/></operator><literal type="number" pos:line="57" pos:column="14">0<pos:position pos:line="57" pos:column="15"/></literal>
   <operator pos:line="58" pos:column="4">&amp;&amp;<pos:position pos:line="58" pos:column="14"/></operator> <operator pos:line="58" pos:column="7">(<pos:position pos:line="58" pos:column="8"/></operator><name><name pos:line="58" pos:column="8">p<pos:position pos:line="58" pos:column="9"/></name><operator pos:line="58" pos:column="9">-&gt;<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="11">db<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">flags<pos:position pos:line="58" pos:column="20"/></name></name> <operator pos:line="58" pos:column="21">&amp;<pos:position pos:line="58" pos:column="26"/></operator> <operator pos:line="58" pos:column="23">(<pos:position pos:line="58" pos:column="24"/></operator><name pos:line="58" pos:column="24">SQLITE_VdbeListing<pos:position pos:line="58" pos:column="42"/></name><operator pos:line="58" pos:column="42">|<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="43">SQLITE_VdbeEQP<pos:position pos:line="58" pos:column="57"/></name><operator pos:line="58" pos:column="57">|<pos:position pos:line="58" pos:column="58"/></operator><name pos:line="58" pos:column="58">SQLITE_VdbeTrace<pos:position pos:line="58" pos:column="74"/></name><operator pos:line="58" pos:column="74">)<pos:position pos:line="58" pos:column="75"/></operator><operator pos:line="58" pos:column="75">)<pos:position pos:line="58" pos:column="76"/></operator><operator pos:line="58" pos:column="76">!=<pos:position pos:line="58" pos:column="78"/></operator><literal type="number" pos:line="58" pos:column="78">0<pos:position pos:line="58" pos:column="79"/></literal></expr>
  )<pos:position pos:line="59" pos:column="4"/></condition><then><block pos:line="59" pos:column="4">{
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">int<pos:position pos:line="60" pos:column="8"/></name></type> <name pos:line="60" pos:column="9">i<pos:position pos:line="60" pos:column="10"/></name></decl>;<pos:position pos:line="60" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="61" pos:column="5">int<pos:position pos:line="61" pos:column="8"/></name></type> <name pos:line="61" pos:column="9">once<pos:position pos:line="61" pos:column="13"/></name> <init pos:line="61" pos:column="14">= <expr><literal type="number" pos:line="61" pos:column="16">1<pos:position pos:line="61" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="61" pos:column="18"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">sqlite3VdbePrintSql<pos:position pos:line="62" pos:column="24"/></name><argument_list pos:line="62" pos:column="24">(<argument><expr><name pos:line="62" pos:column="25">p<pos:position pos:line="62" pos:column="26"/></name></expr></argument>)<pos:position pos:line="62" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
    <if pos:line="63" pos:column="5">if<condition pos:line="63" pos:column="7">( <expr><name><name pos:line="63" pos:column="9">p<pos:position pos:line="63" pos:column="10"/></name><operator pos:line="63" pos:column="10">-&gt;<pos:position pos:line="63" pos:column="15"/></operator><name pos:line="63" pos:column="12">db<pos:position pos:line="63" pos:column="14"/></name><operator pos:line="63" pos:column="14">-&gt;<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="16">flags<pos:position pos:line="63" pos:column="21"/></name></name> <operator pos:line="63" pos:column="22">&amp;<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="24">SQLITE_VdbeListing<pos:position pos:line="63" pos:column="42"/></name></expr> )<pos:position pos:line="63" pos:column="44"/></condition><then><block pos:line="63" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">printf<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><literal type="string" pos:line="64" pos:column="14">"VDBE Program Listing:\n"<pos:position pos:line="64" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt>
      <for pos:line="65" pos:column="7">for<control pos:line="65" pos:column="10">(<init><expr><name pos:line="65" pos:column="11">i<pos:position pos:line="65" pos:column="12"/></name><operator pos:line="65" pos:column="12">=<pos:position pos:line="65" pos:column="13"/></operator><literal type="number" pos:line="65" pos:column="13">0<pos:position pos:line="65" pos:column="14"/></literal></expr>;<pos:position pos:line="65" pos:column="15"/></init> <condition><expr><name pos:line="65" pos:column="16">i<pos:position pos:line="65" pos:column="17"/></name><operator pos:line="65" pos:column="17">&lt;<pos:position pos:line="65" pos:column="21"/></operator><name><name pos:line="65" pos:column="18">p<pos:position pos:line="65" pos:column="19"/></name><operator pos:line="65" pos:column="19">-&gt;<pos:position pos:line="65" pos:column="24"/></operator><name pos:line="65" pos:column="21">nOp<pos:position pos:line="65" pos:column="24"/></name></name></expr>;<pos:position pos:line="65" pos:column="25"/></condition> <incr><expr><name pos:line="65" pos:column="26">i<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">++<pos:position pos:line="65" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="65" pos:column="30"/></control><block pos:line="65" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">sqlite3VdbePrintOp<pos:position pos:line="66" pos:column="27"/></name><argument_list pos:line="66" pos:column="27">(<argument><expr><name pos:line="66" pos:column="28">stdout<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="36">i<pos:position pos:line="66" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="39">&amp;<pos:position pos:line="66" pos:column="44"/></operator><name><name pos:line="66" pos:column="40">aOp<pos:position pos:line="66" pos:column="43"/></name><index pos:line="66" pos:column="43">[<expr><name pos:line="66" pos:column="44">i<pos:position pos:line="66" pos:column="45"/></name></expr>]<pos:position pos:line="66" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="66" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="67" pos:column="8"/></block></for>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>
    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">( <expr><name><name pos:line="69" pos:column="9">p<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">db<pos:position pos:line="69" pos:column="14"/></name><operator pos:line="69" pos:column="14">-&gt;<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="16">flags<pos:position pos:line="69" pos:column="21"/></name></name> <operator pos:line="69" pos:column="22">&amp;<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="24">SQLITE_VdbeEQP<pos:position pos:line="69" pos:column="38"/></name></expr> )<pos:position pos:line="69" pos:column="40"/></condition><then><block pos:line="69" pos:column="40">{
      <for pos:line="70" pos:column="7">for<control pos:line="70" pos:column="10">(<init><expr><name pos:line="70" pos:column="11">i<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">=<pos:position pos:line="70" pos:column="13"/></operator><literal type="number" pos:line="70" pos:column="13">0<pos:position pos:line="70" pos:column="14"/></literal></expr>;<pos:position pos:line="70" pos:column="15"/></init> <condition><expr><name pos:line="70" pos:column="16">i<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">&lt;<pos:position pos:line="70" pos:column="21"/></operator><name><name pos:line="70" pos:column="18">p<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">-&gt;<pos:position pos:line="70" pos:column="24"/></operator><name pos:line="70" pos:column="21">nOp<pos:position pos:line="70" pos:column="24"/></name></name></expr>;<pos:position pos:line="70" pos:column="25"/></condition> <incr><expr><name pos:line="70" pos:column="26">i<pos:position pos:line="70" pos:column="27"/></name><operator pos:line="70" pos:column="27">++<pos:position pos:line="70" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="30"/></control><block pos:line="70" pos:column="30">{
        <if pos:line="71" pos:column="9">if<condition pos:line="71" pos:column="11">( <expr><name><name pos:line="71" pos:column="13">aOp<pos:position pos:line="71" pos:column="16"/></name><index pos:line="71" pos:column="16">[<expr><name pos:line="71" pos:column="17">i<pos:position pos:line="71" pos:column="18"/></name></expr>]<pos:position pos:line="71" pos:column="19"/></index></name><operator pos:line="71" pos:column="19">.<pos:position pos:line="71" pos:column="20"/></operator><name pos:line="71" pos:column="20">opcode<pos:position pos:line="71" pos:column="26"/></name><operator pos:line="71" pos:column="26">==<pos:position pos:line="71" pos:column="28"/></operator><name pos:line="71" pos:column="28">OP_Explain<pos:position pos:line="71" pos:column="38"/></name></expr> )<pos:position pos:line="71" pos:column="40"/></condition><then><block pos:line="71" pos:column="40">{
          <if pos:line="72" pos:column="11">if<condition pos:line="72" pos:column="13">( <expr><name pos:line="72" pos:column="15">once<pos:position pos:line="72" pos:column="19"/></name></expr> )<pos:position pos:line="72" pos:column="21"/></condition><then pos:line="72" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="22">printf<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><literal type="string" pos:line="72" pos:column="29">"VDBE Query Plan:\n"<pos:position pos:line="72" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="51"/></expr_stmt></block></then></if>
          <expr_stmt><expr><call><name pos:line="73" pos:column="11">printf<pos:position pos:line="73" pos:column="17"/></name><argument_list pos:line="73" pos:column="17">(<argument><expr><literal type="string" pos:line="73" pos:column="18">"%s\n"<pos:position pos:line="73" pos:column="24"/></literal></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="26">aOp<pos:position pos:line="73" pos:column="29"/></name><index pos:line="73" pos:column="29">[<expr><name pos:line="73" pos:column="30">i<pos:position pos:line="73" pos:column="31"/></name></expr>]<pos:position pos:line="73" pos:column="32"/></index></name><operator pos:line="73" pos:column="32">.<pos:position pos:line="73" pos:column="33"/></operator><name><name pos:line="73" pos:column="33">p4<pos:position pos:line="73" pos:column="35"/></name><operator pos:line="73" pos:column="35">.<pos:position pos:line="73" pos:column="36"/></operator><name pos:line="73" pos:column="36">z<pos:position pos:line="73" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="39"/></expr_stmt>
          <expr_stmt><expr><name pos:line="74" pos:column="11">once<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">=<pos:position pos:line="74" pos:column="17"/></operator> <literal type="number" pos:line="74" pos:column="18">0<pos:position pos:line="74" pos:column="19"/></literal></expr>;<pos:position pos:line="74" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if>
      }<pos:position pos:line="76" pos:column="8"/></block></for>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>
    <if pos:line="78" pos:column="5">if<condition pos:line="78" pos:column="7">( <expr><name><name pos:line="78" pos:column="9">p<pos:position pos:line="78" pos:column="10"/></name><operator pos:line="78" pos:column="10">-&gt;<pos:position pos:line="78" pos:column="15"/></operator><name pos:line="78" pos:column="12">db<pos:position pos:line="78" pos:column="14"/></name><operator pos:line="78" pos:column="14">-&gt;<pos:position pos:line="78" pos:column="19"/></operator><name pos:line="78" pos:column="16">flags<pos:position pos:line="78" pos:column="21"/></name></name> <operator pos:line="78" pos:column="22">&amp;<pos:position pos:line="78" pos:column="27"/></operator> <name pos:line="78" pos:column="24">SQLITE_VdbeTrace<pos:position pos:line="78" pos:column="40"/></name></expr> )<pos:position pos:line="78" pos:column="42"/></condition><then pos:line="78" pos:column="42">  <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="44">printf<pos:position pos:line="78" pos:column="50"/></name><argument_list pos:line="78" pos:column="50">(<argument><expr><literal type="string" pos:line="78" pos:column="51">"VDBE Trace:\n"<pos:position pos:line="78" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="68"/></expr_stmt></block></then></if>
  }<pos:position pos:line="79" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="80" pos:column="3">sqlite3EndBenignMalloc<pos:position pos:line="80" pos:column="25"/></name><argument_list pos:line="80" pos:column="25">()<pos:position pos:line="80" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif>
  <for pos:line="82" pos:column="3">for<control pos:line="82" pos:column="6">(<init><expr><name pos:line="82" pos:column="7">pOp<pos:position pos:line="82" pos:column="10"/></name><operator pos:line="82" pos:column="10">=<pos:position pos:line="82" pos:column="11"/></operator><operator pos:line="82" pos:column="11">&amp;<pos:position pos:line="82" pos:column="16"/></operator><name><name pos:line="82" pos:column="12">aOp<pos:position pos:line="82" pos:column="15"/></name><index pos:line="82" pos:column="15">[<expr><name><name pos:line="82" pos:column="16">p<pos:position pos:line="82" pos:column="17"/></name><operator pos:line="82" pos:column="17">-&gt;<pos:position pos:line="82" pos:column="22"/></operator><name pos:line="82" pos:column="19">pc<pos:position pos:line="82" pos:column="21"/></name></name></expr>]<pos:position pos:line="82" pos:column="22"/></index></name></expr>;<pos:position pos:line="82" pos:column="23"/></init> <condition><expr><literal type="number" pos:line="82" pos:column="24">1<pos:position pos:line="82" pos:column="25"/></literal></expr>;<pos:position pos:line="82" pos:column="26"/></condition> <incr><expr><name pos:line="82" pos:column="27">pOp<pos:position pos:line="82" pos:column="30"/></name><operator pos:line="82" pos:column="30">++<pos:position pos:line="82" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="82" pos:column="33"/></control><block pos:line="82" pos:column="33">{
    <comment type="block" pos:line="83" pos:column="5">/* Errors are detected by individual opcodes, with an immediate
    ** jumps to abort_due_to_error. */</comment>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">assert<pos:position pos:line="85" pos:column="11"/></name><argument_list pos:line="85" pos:column="11">( <argument><expr><name pos:line="85" pos:column="13">rc<pos:position pos:line="85" pos:column="15"/></name><operator pos:line="85" pos:column="15">==<pos:position pos:line="85" pos:column="17"/></operator><name pos:line="85" pos:column="17">SQLITE_OK<pos:position pos:line="85" pos:column="26"/></name></expr></argument> )<pos:position pos:line="85" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="87" pos:column="5">assert<pos:position pos:line="87" pos:column="11"/></name><argument_list pos:line="87" pos:column="11">( <argument><expr><name pos:line="87" pos:column="13">pOp<pos:position pos:line="87" pos:column="16"/></name><operator pos:line="87" pos:column="16">&gt;=<pos:position pos:line="87" pos:column="21"/></operator><name pos:line="87" pos:column="18">aOp<pos:position pos:line="87" pos:column="21"/></name> <operator pos:line="87" pos:column="22">&amp;&amp;<pos:position pos:line="87" pos:column="32"/></operator> <name pos:line="87" pos:column="25">pOp<pos:position pos:line="87" pos:column="28"/></name><operator pos:line="87" pos:column="28">&lt;<pos:position pos:line="87" pos:column="32"/></operator><operator pos:line="87" pos:column="29">&amp;<pos:position pos:line="87" pos:column="34"/></operator><name><name pos:line="87" pos:column="30">aOp<pos:position pos:line="87" pos:column="33"/></name><index pos:line="87" pos:column="33">[<expr><name><name pos:line="87" pos:column="34">p<pos:position pos:line="87" pos:column="35"/></name><operator pos:line="87" pos:column="35">-&gt;<pos:position pos:line="87" pos:column="40"/></operator><name pos:line="87" pos:column="37">nOp<pos:position pos:line="87" pos:column="40"/></name></name></expr>]<pos:position pos:line="87" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="87" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="43"/></expr_stmt>
<cpp:ifdef pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">ifdef<pos:position pos:line="88" pos:column="7"/></cpp:directive> <name pos:line="88" pos:column="8">VDBE_PROFILE<pos:position pos:line="88" pos:column="20"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="89" pos:column="5">start<pos:position pos:line="89" pos:column="10"/></name> <operator pos:line="89" pos:column="11">=<pos:position pos:line="89" pos:column="12"/></operator> <call><name pos:line="89" pos:column="13">sqlite3Hwtime<pos:position pos:line="89" pos:column="26"/></name><argument_list pos:line="89" pos:column="26">()<pos:position pos:line="89" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">endif<pos:position pos:line="90" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="91" pos:column="5">nVmStep<pos:position pos:line="91" pos:column="12"/></name><operator pos:line="91" pos:column="12">++<pos:position pos:line="91" pos:column="14"/></operator></expr>;<pos:position pos:line="91" pos:column="15"/></expr_stmt>
<cpp:ifdef pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">ifdef<pos:position pos:line="92" pos:column="7"/></cpp:directive> <name pos:line="92" pos:column="8">SQLITE_ENABLE_STMT_SCANSTATUS<pos:position pos:line="92" pos:column="37"/></name></cpp:ifdef>
    <if pos:line="93" pos:column="5">if<condition pos:line="93" pos:column="7">( <expr><name><name pos:line="93" pos:column="9">p<pos:position pos:line="93" pos:column="10"/></name><operator pos:line="93" pos:column="10">-&gt;<pos:position pos:line="93" pos:column="15"/></operator><name pos:line="93" pos:column="12">anExec<pos:position pos:line="93" pos:column="18"/></name></name></expr> )<pos:position pos:line="93" pos:column="20"/></condition><then pos:line="93" pos:column="20"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="93" pos:column="21">p<pos:position pos:line="93" pos:column="22"/></name><operator pos:line="93" pos:column="22">-&gt;<pos:position pos:line="93" pos:column="27"/></operator><name pos:line="93" pos:column="24">anExec<pos:position pos:line="93" pos:column="30"/></name><index pos:line="93" pos:column="30">[<expr><call pos:line="93" pos:column="31">(<name pos:line="93" pos:column="32">int<pos:position pos:line="93" pos:column="35"/></name>)<argument_list pos:line="93" pos:column="36">(<argument><expr><name pos:line="93" pos:column="37">pOp<pos:position pos:line="93" pos:column="40"/></name><operator pos:line="93" pos:column="40">-<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="41">aOp<pos:position pos:line="93" pos:column="44"/></name></expr></argument>)<pos:position pos:line="93" pos:column="45"/></argument_list></call></expr>]<pos:position pos:line="93" pos:column="46"/></index></name><operator pos:line="93" pos:column="46">++<pos:position pos:line="93" pos:column="48"/></operator></expr>;<pos:position pos:line="93" pos:column="49"/></expr_stmt></block></then></if>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="96" pos:column="5">/* Only allow tracing if SQLITE_DEBUG is defined.
    */</comment>
<cpp:ifdef pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">ifdef<pos:position pos:line="98" pos:column="7"/></cpp:directive> <name pos:line="98" pos:column="8">SQLITE_DEBUG<pos:position pos:line="98" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="99" pos:column="5">if<condition pos:line="99" pos:column="7">( <expr><name><name pos:line="99" pos:column="9">db<pos:position pos:line="99" pos:column="11"/></name><operator pos:line="99" pos:column="11">-&gt;<pos:position pos:line="99" pos:column="16"/></operator><name pos:line="99" pos:column="13">flags<pos:position pos:line="99" pos:column="18"/></name></name> <operator pos:line="99" pos:column="19">&amp;<pos:position pos:line="99" pos:column="24"/></operator> <name pos:line="99" pos:column="21">SQLITE_VdbeTrace<pos:position pos:line="99" pos:column="37"/></name></expr> )<pos:position pos:line="99" pos:column="39"/></condition><then><block pos:line="99" pos:column="39">{
      <expr_stmt><expr><call><name pos:line="100" pos:column="7">sqlite3VdbePrintOp<pos:position pos:line="100" pos:column="25"/></name><argument_list pos:line="100" pos:column="25">(<argument><expr><name pos:line="100" pos:column="26">stdout<pos:position pos:line="100" pos:column="32"/></name></expr></argument>, <argument><expr><call pos:line="100" pos:column="34">(<name pos:line="100" pos:column="35">int<pos:position pos:line="100" pos:column="38"/></name>)<argument_list pos:line="100" pos:column="39">(<argument><expr><name pos:line="100" pos:column="40">pOp<pos:position pos:line="100" pos:column="43"/></name> <operator pos:line="100" pos:column="44">-<pos:position pos:line="100" pos:column="45"/></operator> <name pos:line="100" pos:column="46">aOp<pos:position pos:line="100" pos:column="49"/></name></expr></argument>)<pos:position pos:line="100" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="100" pos:column="52">pOp<pos:position pos:line="100" pos:column="55"/></name></expr></argument>)<pos:position pos:line="100" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>
<cpp:endif pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">endif<pos:position pos:line="102" pos:column="7"/></cpp:directive></cpp:endif>
      

    <comment type="block" pos:line="105" pos:column="5">/* Check to see if we need to simulate an interrupt.  This only happens
    ** if we have a special test build.
    */</comment>
<cpp:ifdef pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">ifdef<pos:position pos:line="108" pos:column="7"/></cpp:directive> <name pos:line="108" pos:column="8">SQLITE_TEST<pos:position pos:line="108" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="109" pos:column="5">if<condition pos:line="109" pos:column="7">( <expr><name pos:line="109" pos:column="9">sqlite3_interrupt_count<pos:position pos:line="109" pos:column="32"/></name><operator pos:line="109" pos:column="32">&gt;<pos:position pos:line="109" pos:column="36"/></operator><literal type="number" pos:line="109" pos:column="33">0<pos:position pos:line="109" pos:column="34"/></literal></expr> )<pos:position pos:line="109" pos:column="36"/></condition><then><block pos:line="109" pos:column="36">{
      <expr_stmt><expr><name pos:line="110" pos:column="7">sqlite3_interrupt_count<pos:position pos:line="110" pos:column="30"/></name><operator pos:line="110" pos:column="30">--<pos:position pos:line="110" pos:column="32"/></operator></expr>;<pos:position pos:line="110" pos:column="33"/></expr_stmt>
      <if pos:line="111" pos:column="7">if<condition pos:line="111" pos:column="9">( <expr><name pos:line="111" pos:column="11">sqlite3_interrupt_count<pos:position pos:line="111" pos:column="34"/></name><operator pos:line="111" pos:column="34">==<pos:position pos:line="111" pos:column="36"/></operator><literal type="number" pos:line="111" pos:column="36">0<pos:position pos:line="111" pos:column="37"/></literal></expr> )<pos:position pos:line="111" pos:column="39"/></condition><then><block pos:line="111" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="112" pos:column="9">sqlite3_interrupt<pos:position pos:line="112" pos:column="26"/></name><argument_list pos:line="112" pos:column="26">(<argument><expr><name pos:line="112" pos:column="27">db<pos:position pos:line="112" pos:column="29"/></name></expr></argument>)<pos:position pos:line="112" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="113" pos:column="8"/></block></then></if>
    }<pos:position pos:line="114" pos:column="6"/></block></then></if>
<cpp:endif pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">endif<pos:position pos:line="115" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="117" pos:column="5">/* Sanity checking on other operands */</comment>
<cpp:ifdef pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">ifdef<pos:position pos:line="118" pos:column="7"/></cpp:directive> <name pos:line="118" pos:column="8">SQLITE_DEBUG<pos:position pos:line="118" pos:column="20"/></name></cpp:ifdef>
    <block pos:line="119" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="120" pos:column="7">u8<pos:position pos:line="120" pos:column="9"/></name></type> <name pos:line="120" pos:column="10">opProperty<pos:position pos:line="120" pos:column="20"/></name> <init pos:line="120" pos:column="21">= <expr><name><name pos:line="120" pos:column="23">sqlite3OpcodeProperty<pos:position pos:line="120" pos:column="44"/></name><index pos:line="120" pos:column="44">[<expr><name><name pos:line="120" pos:column="45">pOp<pos:position pos:line="120" pos:column="48"/></name><operator pos:line="120" pos:column="48">-&gt;<pos:position pos:line="120" pos:column="53"/></operator><name pos:line="120" pos:column="50">opcode<pos:position pos:line="120" pos:column="56"/></name></name></expr>]<pos:position pos:line="120" pos:column="57"/></index></name></expr></init></decl>;<pos:position pos:line="120" pos:column="58"/></decl_stmt>
      <if pos:line="121" pos:column="7">if<condition pos:line="121" pos:column="9">( <expr><operator pos:line="121" pos:column="11">(<pos:position pos:line="121" pos:column="12"/></operator><name pos:line="121" pos:column="12">opProperty<pos:position pos:line="121" pos:column="22"/></name> <operator pos:line="121" pos:column="23">&amp;<pos:position pos:line="121" pos:column="28"/></operator> <name pos:line="121" pos:column="25">OPFLG_IN1<pos:position pos:line="121" pos:column="34"/></name><operator pos:line="121" pos:column="34">)<pos:position pos:line="121" pos:column="35"/></operator><operator pos:line="121" pos:column="35">!=<pos:position pos:line="121" pos:column="37"/></operator><literal type="number" pos:line="121" pos:column="37">0<pos:position pos:line="121" pos:column="38"/></literal></expr> )<pos:position pos:line="121" pos:column="40"/></condition><then><block pos:line="121" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">assert<pos:position pos:line="122" pos:column="15"/></name><argument_list pos:line="122" pos:column="15">( <argument><expr><name><name pos:line="122" pos:column="17">pOp<pos:position pos:line="122" pos:column="20"/></name><operator pos:line="122" pos:column="20">-&gt;<pos:position pos:line="122" pos:column="25"/></operator><name pos:line="122" pos:column="22">p1<pos:position pos:line="122" pos:column="24"/></name></name><operator pos:line="122" pos:column="24">&gt;<pos:position pos:line="122" pos:column="28"/></operator><literal type="number" pos:line="122" pos:column="25">0<pos:position pos:line="122" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="122" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">assert<pos:position pos:line="123" pos:column="15"/></name><argument_list pos:line="123" pos:column="15">( <argument><expr><name><name pos:line="123" pos:column="17">pOp<pos:position pos:line="123" pos:column="20"/></name><operator pos:line="123" pos:column="20">-&gt;<pos:position pos:line="123" pos:column="25"/></operator><name pos:line="123" pos:column="22">p1<pos:position pos:line="123" pos:column="24"/></name></name><operator pos:line="123" pos:column="24">&lt;=<pos:position pos:line="123" pos:column="29"/></operator><operator pos:line="123" pos:column="26">(<pos:position pos:line="123" pos:column="27"/></operator><name><name pos:line="123" pos:column="27">p<pos:position pos:line="123" pos:column="28"/></name><operator pos:line="123" pos:column="28">-&gt;<pos:position pos:line="123" pos:column="33"/></operator><name pos:line="123" pos:column="30">nMem<pos:position pos:line="123" pos:column="34"/></name></name><operator pos:line="123" pos:column="34">+<pos:position pos:line="123" pos:column="35"/></operator><literal type="number" pos:line="123" pos:column="35">1<pos:position pos:line="123" pos:column="36"/></literal> <operator pos:line="123" pos:column="37">-<pos:position pos:line="123" pos:column="38"/></operator> <name><name pos:line="123" pos:column="39">p<pos:position pos:line="123" pos:column="40"/></name><operator pos:line="123" pos:column="40">-&gt;<pos:position pos:line="123" pos:column="45"/></operator><name pos:line="123" pos:column="42">nCursor<pos:position pos:line="123" pos:column="49"/></name></name><operator pos:line="123" pos:column="49">)<pos:position pos:line="123" pos:column="50"/></operator></expr></argument> )<pos:position pos:line="123" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="124" pos:column="9">assert<pos:position pos:line="124" pos:column="15"/></name><argument_list pos:line="124" pos:column="15">( <argument><expr><call><name pos:line="124" pos:column="17">memIsValid<pos:position pos:line="124" pos:column="27"/></name><argument_list pos:line="124" pos:column="27">(<argument><expr><operator pos:line="124" pos:column="28">&amp;<pos:position pos:line="124" pos:column="33"/></operator><name><name pos:line="124" pos:column="29">aMem<pos:position pos:line="124" pos:column="33"/></name><index pos:line="124" pos:column="33">[<expr><name><name pos:line="124" pos:column="34">pOp<pos:position pos:line="124" pos:column="37"/></name><operator pos:line="124" pos:column="37">-&gt;<pos:position pos:line="124" pos:column="42"/></operator><name pos:line="124" pos:column="39">p1<pos:position pos:line="124" pos:column="41"/></name></name></expr>]<pos:position pos:line="124" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="124" pos:column="43"/></argument_list></call></expr></argument> )<pos:position pos:line="124" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="125" pos:column="9">assert<pos:position pos:line="125" pos:column="15"/></name><argument_list pos:line="125" pos:column="15">( <argument><expr><call><name pos:line="125" pos:column="17">sqlite3VdbeCheckMemInvariants<pos:position pos:line="125" pos:column="46"/></name><argument_list pos:line="125" pos:column="46">(<argument><expr><operator pos:line="125" pos:column="47">&amp;<pos:position pos:line="125" pos:column="52"/></operator><name><name pos:line="125" pos:column="48">aMem<pos:position pos:line="125" pos:column="52"/></name><index pos:line="125" pos:column="52">[<expr><name><name pos:line="125" pos:column="53">pOp<pos:position pos:line="125" pos:column="56"/></name><operator pos:line="125" pos:column="56">-&gt;<pos:position pos:line="125" pos:column="61"/></operator><name pos:line="125" pos:column="58">p1<pos:position pos:line="125" pos:column="60"/></name></name></expr>]<pos:position pos:line="125" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="125" pos:column="62"/></argument_list></call></expr></argument> )<pos:position pos:line="125" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">REGISTER_TRACE<pos:position pos:line="126" pos:column="23"/></name><argument_list pos:line="126" pos:column="23">(<argument><expr><name><name pos:line="126" pos:column="24">pOp<pos:position pos:line="126" pos:column="27"/></name><operator pos:line="126" pos:column="27">-&gt;<pos:position pos:line="126" pos:column="32"/></operator><name pos:line="126" pos:column="29">p1<pos:position pos:line="126" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="33">&amp;<pos:position pos:line="126" pos:column="38"/></operator><name><name pos:line="126" pos:column="34">aMem<pos:position pos:line="126" pos:column="38"/></name><index pos:line="126" pos:column="38">[<expr><name><name pos:line="126" pos:column="39">pOp<pos:position pos:line="126" pos:column="42"/></name><operator pos:line="126" pos:column="42">-&gt;<pos:position pos:line="126" pos:column="47"/></operator><name pos:line="126" pos:column="44">p1<pos:position pos:line="126" pos:column="46"/></name></name></expr>]<pos:position pos:line="126" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="126" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="49"/></expr_stmt>
      }<pos:position pos:line="127" pos:column="8"/></block></then></if>
      <if pos:line="128" pos:column="7">if<condition pos:line="128" pos:column="9">( <expr><operator pos:line="128" pos:column="11">(<pos:position pos:line="128" pos:column="12"/></operator><name pos:line="128" pos:column="12">opProperty<pos:position pos:line="128" pos:column="22"/></name> <operator pos:line="128" pos:column="23">&amp;<pos:position pos:line="128" pos:column="28"/></operator> <name pos:line="128" pos:column="25">OPFLG_IN2<pos:position pos:line="128" pos:column="34"/></name><operator pos:line="128" pos:column="34">)<pos:position pos:line="128" pos:column="35"/></operator><operator pos:line="128" pos:column="35">!=<pos:position pos:line="128" pos:column="37"/></operator><literal type="number" pos:line="128" pos:column="37">0<pos:position pos:line="128" pos:column="38"/></literal></expr> )<pos:position pos:line="128" pos:column="40"/></condition><then><block pos:line="128" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="129" pos:column="9">assert<pos:position pos:line="129" pos:column="15"/></name><argument_list pos:line="129" pos:column="15">( <argument><expr><name><name pos:line="129" pos:column="17">pOp<pos:position pos:line="129" pos:column="20"/></name><operator pos:line="129" pos:column="20">-&gt;<pos:position pos:line="129" pos:column="25"/></operator><name pos:line="129" pos:column="22">p2<pos:position pos:line="129" pos:column="24"/></name></name><operator pos:line="129" pos:column="24">&gt;<pos:position pos:line="129" pos:column="28"/></operator><literal type="number" pos:line="129" pos:column="25">0<pos:position pos:line="129" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="129" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">assert<pos:position pos:line="130" pos:column="15"/></name><argument_list pos:line="130" pos:column="15">( <argument><expr><name><name pos:line="130" pos:column="17">pOp<pos:position pos:line="130" pos:column="20"/></name><operator pos:line="130" pos:column="20">-&gt;<pos:position pos:line="130" pos:column="25"/></operator><name pos:line="130" pos:column="22">p2<pos:position pos:line="130" pos:column="24"/></name></name><operator pos:line="130" pos:column="24">&lt;=<pos:position pos:line="130" pos:column="29"/></operator><operator pos:line="130" pos:column="26">(<pos:position pos:line="130" pos:column="27"/></operator><name><name pos:line="130" pos:column="27">p<pos:position pos:line="130" pos:column="28"/></name><operator pos:line="130" pos:column="28">-&gt;<pos:position pos:line="130" pos:column="33"/></operator><name pos:line="130" pos:column="30">nMem<pos:position pos:line="130" pos:column="34"/></name></name><operator pos:line="130" pos:column="34">+<pos:position pos:line="130" pos:column="35"/></operator><literal type="number" pos:line="130" pos:column="35">1<pos:position pos:line="130" pos:column="36"/></literal> <operator pos:line="130" pos:column="37">-<pos:position pos:line="130" pos:column="38"/></operator> <name><name pos:line="130" pos:column="39">p<pos:position pos:line="130" pos:column="40"/></name><operator pos:line="130" pos:column="40">-&gt;<pos:position pos:line="130" pos:column="45"/></operator><name pos:line="130" pos:column="42">nCursor<pos:position pos:line="130" pos:column="49"/></name></name><operator pos:line="130" pos:column="49">)<pos:position pos:line="130" pos:column="50"/></operator></expr></argument> )<pos:position pos:line="130" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="131" pos:column="9">assert<pos:position pos:line="131" pos:column="15"/></name><argument_list pos:line="131" pos:column="15">( <argument><expr><call><name pos:line="131" pos:column="17">memIsValid<pos:position pos:line="131" pos:column="27"/></name><argument_list pos:line="131" pos:column="27">(<argument><expr><operator pos:line="131" pos:column="28">&amp;<pos:position pos:line="131" pos:column="33"/></operator><name><name pos:line="131" pos:column="29">aMem<pos:position pos:line="131" pos:column="33"/></name><index pos:line="131" pos:column="33">[<expr><name><name pos:line="131" pos:column="34">pOp<pos:position pos:line="131" pos:column="37"/></name><operator pos:line="131" pos:column="37">-&gt;<pos:position pos:line="131" pos:column="42"/></operator><name pos:line="131" pos:column="39">p2<pos:position pos:line="131" pos:column="41"/></name></name></expr>]<pos:position pos:line="131" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="131" pos:column="43"/></argument_list></call></expr></argument> )<pos:position pos:line="131" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="132" pos:column="9">assert<pos:position pos:line="132" pos:column="15"/></name><argument_list pos:line="132" pos:column="15">( <argument><expr><call><name pos:line="132" pos:column="17">sqlite3VdbeCheckMemInvariants<pos:position pos:line="132" pos:column="46"/></name><argument_list pos:line="132" pos:column="46">(<argument><expr><operator pos:line="132" pos:column="47">&amp;<pos:position pos:line="132" pos:column="52"/></operator><name><name pos:line="132" pos:column="48">aMem<pos:position pos:line="132" pos:column="52"/></name><index pos:line="132" pos:column="52">[<expr><name><name pos:line="132" pos:column="53">pOp<pos:position pos:line="132" pos:column="56"/></name><operator pos:line="132" pos:column="56">-&gt;<pos:position pos:line="132" pos:column="61"/></operator><name pos:line="132" pos:column="58">p2<pos:position pos:line="132" pos:column="60"/></name></name></expr>]<pos:position pos:line="132" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="132" pos:column="62"/></argument_list></call></expr></argument> )<pos:position pos:line="132" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="133" pos:column="9">REGISTER_TRACE<pos:position pos:line="133" pos:column="23"/></name><argument_list pos:line="133" pos:column="23">(<argument><expr><name><name pos:line="133" pos:column="24">pOp<pos:position pos:line="133" pos:column="27"/></name><operator pos:line="133" pos:column="27">-&gt;<pos:position pos:line="133" pos:column="32"/></operator><name pos:line="133" pos:column="29">p2<pos:position pos:line="133" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="133" pos:column="33">&amp;<pos:position pos:line="133" pos:column="38"/></operator><name><name pos:line="133" pos:column="34">aMem<pos:position pos:line="133" pos:column="38"/></name><index pos:line="133" pos:column="38">[<expr><name><name pos:line="133" pos:column="39">pOp<pos:position pos:line="133" pos:column="42"/></name><operator pos:line="133" pos:column="42">-&gt;<pos:position pos:line="133" pos:column="47"/></operator><name pos:line="133" pos:column="44">p2<pos:position pos:line="133" pos:column="46"/></name></name></expr>]<pos:position pos:line="133" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="133" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="49"/></expr_stmt>
      }<pos:position pos:line="134" pos:column="8"/></block></then></if>
      <if pos:line="135" pos:column="7">if<condition pos:line="135" pos:column="9">( <expr><operator pos:line="135" pos:column="11">(<pos:position pos:line="135" pos:column="12"/></operator><name pos:line="135" pos:column="12">opProperty<pos:position pos:line="135" pos:column="22"/></name> <operator pos:line="135" pos:column="23">&amp;<pos:position pos:line="135" pos:column="28"/></operator> <name pos:line="135" pos:column="25">OPFLG_IN3<pos:position pos:line="135" pos:column="34"/></name><operator pos:line="135" pos:column="34">)<pos:position pos:line="135" pos:column="35"/></operator><operator pos:line="135" pos:column="35">!=<pos:position pos:line="135" pos:column="37"/></operator><literal type="number" pos:line="135" pos:column="37">0<pos:position pos:line="135" pos:column="38"/></literal></expr> )<pos:position pos:line="135" pos:column="40"/></condition><then><block pos:line="135" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="136" pos:column="9">assert<pos:position pos:line="136" pos:column="15"/></name><argument_list pos:line="136" pos:column="15">( <argument><expr><name><name pos:line="136" pos:column="17">pOp<pos:position pos:line="136" pos:column="20"/></name><operator pos:line="136" pos:column="20">-&gt;<pos:position pos:line="136" pos:column="25"/></operator><name pos:line="136" pos:column="22">p3<pos:position pos:line="136" pos:column="24"/></name></name><operator pos:line="136" pos:column="24">&gt;<pos:position pos:line="136" pos:column="28"/></operator><literal type="number" pos:line="136" pos:column="25">0<pos:position pos:line="136" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="136" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="137" pos:column="9">assert<pos:position pos:line="137" pos:column="15"/></name><argument_list pos:line="137" pos:column="15">( <argument><expr><name><name pos:line="137" pos:column="17">pOp<pos:position pos:line="137" pos:column="20"/></name><operator pos:line="137" pos:column="20">-&gt;<pos:position pos:line="137" pos:column="25"/></operator><name pos:line="137" pos:column="22">p3<pos:position pos:line="137" pos:column="24"/></name></name><operator pos:line="137" pos:column="24">&lt;=<pos:position pos:line="137" pos:column="29"/></operator><operator pos:line="137" pos:column="26">(<pos:position pos:line="137" pos:column="27"/></operator><name><name pos:line="137" pos:column="27">p<pos:position pos:line="137" pos:column="28"/></name><operator pos:line="137" pos:column="28">-&gt;<pos:position pos:line="137" pos:column="33"/></operator><name pos:line="137" pos:column="30">nMem<pos:position pos:line="137" pos:column="34"/></name></name><operator pos:line="137" pos:column="34">+<pos:position pos:line="137" pos:column="35"/></operator><literal type="number" pos:line="137" pos:column="35">1<pos:position pos:line="137" pos:column="36"/></literal> <operator pos:line="137" pos:column="37">-<pos:position pos:line="137" pos:column="38"/></operator> <name><name pos:line="137" pos:column="39">p<pos:position pos:line="137" pos:column="40"/></name><operator pos:line="137" pos:column="40">-&gt;<pos:position pos:line="137" pos:column="45"/></operator><name pos:line="137" pos:column="42">nCursor<pos:position pos:line="137" pos:column="49"/></name></name><operator pos:line="137" pos:column="49">)<pos:position pos:line="137" pos:column="50"/></operator></expr></argument> )<pos:position pos:line="137" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">assert<pos:position pos:line="138" pos:column="15"/></name><argument_list pos:line="138" pos:column="15">( <argument><expr><call><name pos:line="138" pos:column="17">memIsValid<pos:position pos:line="138" pos:column="27"/></name><argument_list pos:line="138" pos:column="27">(<argument><expr><operator pos:line="138" pos:column="28">&amp;<pos:position pos:line="138" pos:column="33"/></operator><name><name pos:line="138" pos:column="29">aMem<pos:position pos:line="138" pos:column="33"/></name><index pos:line="138" pos:column="33">[<expr><name><name pos:line="138" pos:column="34">pOp<pos:position pos:line="138" pos:column="37"/></name><operator pos:line="138" pos:column="37">-&gt;<pos:position pos:line="138" pos:column="42"/></operator><name pos:line="138" pos:column="39">p3<pos:position pos:line="138" pos:column="41"/></name></name></expr>]<pos:position pos:line="138" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="138" pos:column="43"/></argument_list></call></expr></argument> )<pos:position pos:line="138" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="139" pos:column="9">assert<pos:position pos:line="139" pos:column="15"/></name><argument_list pos:line="139" pos:column="15">( <argument><expr><call><name pos:line="139" pos:column="17">sqlite3VdbeCheckMemInvariants<pos:position pos:line="139" pos:column="46"/></name><argument_list pos:line="139" pos:column="46">(<argument><expr><operator pos:line="139" pos:column="47">&amp;<pos:position pos:line="139" pos:column="52"/></operator><name><name pos:line="139" pos:column="48">aMem<pos:position pos:line="139" pos:column="52"/></name><index pos:line="139" pos:column="52">[<expr><name><name pos:line="139" pos:column="53">pOp<pos:position pos:line="139" pos:column="56"/></name><operator pos:line="139" pos:column="56">-&gt;<pos:position pos:line="139" pos:column="61"/></operator><name pos:line="139" pos:column="58">p3<pos:position pos:line="139" pos:column="60"/></name></name></expr>]<pos:position pos:line="139" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="139" pos:column="62"/></argument_list></call></expr></argument> )<pos:position pos:line="139" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="140" pos:column="9">REGISTER_TRACE<pos:position pos:line="140" pos:column="23"/></name><argument_list pos:line="140" pos:column="23">(<argument><expr><name><name pos:line="140" pos:column="24">pOp<pos:position pos:line="140" pos:column="27"/></name><operator pos:line="140" pos:column="27">-&gt;<pos:position pos:line="140" pos:column="32"/></operator><name pos:line="140" pos:column="29">p3<pos:position pos:line="140" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="140" pos:column="33">&amp;<pos:position pos:line="140" pos:column="38"/></operator><name><name pos:line="140" pos:column="34">aMem<pos:position pos:line="140" pos:column="38"/></name><index pos:line="140" pos:column="38">[<expr><name><name pos:line="140" pos:column="39">pOp<pos:position pos:line="140" pos:column="42"/></name><operator pos:line="140" pos:column="42">-&gt;<pos:position pos:line="140" pos:column="47"/></operator><name pos:line="140" pos:column="44">p3<pos:position pos:line="140" pos:column="46"/></name></name></expr>]<pos:position pos:line="140" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="140" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="49"/></expr_stmt>
      }<pos:position pos:line="141" pos:column="8"/></block></then></if>
      <if pos:line="142" pos:column="7">if<condition pos:line="142" pos:column="9">( <expr><operator pos:line="142" pos:column="11">(<pos:position pos:line="142" pos:column="12"/></operator><name pos:line="142" pos:column="12">opProperty<pos:position pos:line="142" pos:column="22"/></name> <operator pos:line="142" pos:column="23">&amp;<pos:position pos:line="142" pos:column="28"/></operator> <name pos:line="142" pos:column="25">OPFLG_OUT2<pos:position pos:line="142" pos:column="35"/></name><operator pos:line="142" pos:column="35">)<pos:position pos:line="142" pos:column="36"/></operator><operator pos:line="142" pos:column="36">!=<pos:position pos:line="142" pos:column="38"/></operator><literal type="number" pos:line="142" pos:column="38">0<pos:position pos:line="142" pos:column="39"/></literal></expr> )<pos:position pos:line="142" pos:column="41"/></condition><then><block pos:line="142" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="143" pos:column="9">assert<pos:position pos:line="143" pos:column="15"/></name><argument_list pos:line="143" pos:column="15">( <argument><expr><name><name pos:line="143" pos:column="17">pOp<pos:position pos:line="143" pos:column="20"/></name><operator pos:line="143" pos:column="20">-&gt;<pos:position pos:line="143" pos:column="25"/></operator><name pos:line="143" pos:column="22">p2<pos:position pos:line="143" pos:column="24"/></name></name><operator pos:line="143" pos:column="24">&gt;<pos:position pos:line="143" pos:column="28"/></operator><literal type="number" pos:line="143" pos:column="25">0<pos:position pos:line="143" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="143" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="144" pos:column="9">assert<pos:position pos:line="144" pos:column="15"/></name><argument_list pos:line="144" pos:column="15">( <argument><expr><name><name pos:line="144" pos:column="17">pOp<pos:position pos:line="144" pos:column="20"/></name><operator pos:line="144" pos:column="20">-&gt;<pos:position pos:line="144" pos:column="25"/></operator><name pos:line="144" pos:column="22">p2<pos:position pos:line="144" pos:column="24"/></name></name><operator pos:line="144" pos:column="24">&lt;=<pos:position pos:line="144" pos:column="29"/></operator><operator pos:line="144" pos:column="26">(<pos:position pos:line="144" pos:column="27"/></operator><name><name pos:line="144" pos:column="27">p<pos:position pos:line="144" pos:column="28"/></name><operator pos:line="144" pos:column="28">-&gt;<pos:position pos:line="144" pos:column="33"/></operator><name pos:line="144" pos:column="30">nMem<pos:position pos:line="144" pos:column="34"/></name></name><operator pos:line="144" pos:column="34">+<pos:position pos:line="144" pos:column="35"/></operator><literal type="number" pos:line="144" pos:column="35">1<pos:position pos:line="144" pos:column="36"/></literal> <operator pos:line="144" pos:column="37">-<pos:position pos:line="144" pos:column="38"/></operator> <name><name pos:line="144" pos:column="39">p<pos:position pos:line="144" pos:column="40"/></name><operator pos:line="144" pos:column="40">-&gt;<pos:position pos:line="144" pos:column="45"/></operator><name pos:line="144" pos:column="42">nCursor<pos:position pos:line="144" pos:column="49"/></name></name><operator pos:line="144" pos:column="49">)<pos:position pos:line="144" pos:column="50"/></operator></expr></argument> )<pos:position pos:line="144" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">memAboutToChange<pos:position pos:line="145" pos:column="25"/></name><argument_list pos:line="145" pos:column="25">(<argument><expr><name pos:line="145" pos:column="26">p<pos:position pos:line="145" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="145" pos:column="29">&amp;<pos:position pos:line="145" pos:column="34"/></operator><name><name pos:line="145" pos:column="30">aMem<pos:position pos:line="145" pos:column="34"/></name><index pos:line="145" pos:column="34">[<expr><name><name pos:line="145" pos:column="35">pOp<pos:position pos:line="145" pos:column="38"/></name><operator pos:line="145" pos:column="38">-&gt;<pos:position pos:line="145" pos:column="43"/></operator><name pos:line="145" pos:column="40">p2<pos:position pos:line="145" pos:column="42"/></name></name></expr>]<pos:position pos:line="145" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="145" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="45"/></expr_stmt>
      }<pos:position pos:line="146" pos:column="8"/></block></then></if>
      <if pos:line="147" pos:column="7">if<condition pos:line="147" pos:column="9">( <expr><operator pos:line="147" pos:column="11">(<pos:position pos:line="147" pos:column="12"/></operator><name pos:line="147" pos:column="12">opProperty<pos:position pos:line="147" pos:column="22"/></name> <operator pos:line="147" pos:column="23">&amp;<pos:position pos:line="147" pos:column="28"/></operator> <name pos:line="147" pos:column="25">OPFLG_OUT3<pos:position pos:line="147" pos:column="35"/></name><operator pos:line="147" pos:column="35">)<pos:position pos:line="147" pos:column="36"/></operator><operator pos:line="147" pos:column="36">!=<pos:position pos:line="147" pos:column="38"/></operator><literal type="number" pos:line="147" pos:column="38">0<pos:position pos:line="147" pos:column="39"/></literal></expr> )<pos:position pos:line="147" pos:column="41"/></condition><then><block pos:line="147" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="148" pos:column="9">assert<pos:position pos:line="148" pos:column="15"/></name><argument_list pos:line="148" pos:column="15">( <argument><expr><name><name pos:line="148" pos:column="17">pOp<pos:position pos:line="148" pos:column="20"/></name><operator pos:line="148" pos:column="20">-&gt;<pos:position pos:line="148" pos:column="25"/></operator><name pos:line="148" pos:column="22">p3<pos:position pos:line="148" pos:column="24"/></name></name><operator pos:line="148" pos:column="24">&gt;<pos:position pos:line="148" pos:column="28"/></operator><literal type="number" pos:line="148" pos:column="25">0<pos:position pos:line="148" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="148" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="149" pos:column="9">assert<pos:position pos:line="149" pos:column="15"/></name><argument_list pos:line="149" pos:column="15">( <argument><expr><name><name pos:line="149" pos:column="17">pOp<pos:position pos:line="149" pos:column="20"/></name><operator pos:line="149" pos:column="20">-&gt;<pos:position pos:line="149" pos:column="25"/></operator><name pos:line="149" pos:column="22">p3<pos:position pos:line="149" pos:column="24"/></name></name><operator pos:line="149" pos:column="24">&lt;=<pos:position pos:line="149" pos:column="29"/></operator><operator pos:line="149" pos:column="26">(<pos:position pos:line="149" pos:column="27"/></operator><name><name pos:line="149" pos:column="27">p<pos:position pos:line="149" pos:column="28"/></name><operator pos:line="149" pos:column="28">-&gt;<pos:position pos:line="149" pos:column="33"/></operator><name pos:line="149" pos:column="30">nMem<pos:position pos:line="149" pos:column="34"/></name></name><operator pos:line="149" pos:column="34">+<pos:position pos:line="149" pos:column="35"/></operator><literal type="number" pos:line="149" pos:column="35">1<pos:position pos:line="149" pos:column="36"/></literal> <operator pos:line="149" pos:column="37">-<pos:position pos:line="149" pos:column="38"/></operator> <name><name pos:line="149" pos:column="39">p<pos:position pos:line="149" pos:column="40"/></name><operator pos:line="149" pos:column="40">-&gt;<pos:position pos:line="149" pos:column="45"/></operator><name pos:line="149" pos:column="42">nCursor<pos:position pos:line="149" pos:column="49"/></name></name><operator pos:line="149" pos:column="49">)<pos:position pos:line="149" pos:column="50"/></operator></expr></argument> )<pos:position pos:line="149" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="150" pos:column="9">memAboutToChange<pos:position pos:line="150" pos:column="25"/></name><argument_list pos:line="150" pos:column="25">(<argument><expr><name pos:line="150" pos:column="26">p<pos:position pos:line="150" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="150" pos:column="29">&amp;<pos:position pos:line="150" pos:column="34"/></operator><name><name pos:line="150" pos:column="30">aMem<pos:position pos:line="150" pos:column="34"/></name><index pos:line="150" pos:column="34">[<expr><name><name pos:line="150" pos:column="35">pOp<pos:position pos:line="150" pos:column="38"/></name><operator pos:line="150" pos:column="38">-&gt;<pos:position pos:line="150" pos:column="43"/></operator><name pos:line="150" pos:column="40">p3<pos:position pos:line="150" pos:column="42"/></name></name></expr>]<pos:position pos:line="150" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="150" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="45"/></expr_stmt>
      }<pos:position pos:line="151" pos:column="8"/></block></then></if>
    }<pos:position pos:line="152" pos:column="6"/></block>
<cpp:endif pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">endif<pos:position pos:line="153" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="154" pos:column="1">#<cpp:directive pos:line="154" pos:column="2">if<pos:position pos:line="154" pos:column="4"/></cpp:directive> <expr><call><name pos:line="154" pos:column="5">defined<pos:position pos:line="154" pos:column="12"/></name><argument_list pos:line="154" pos:column="12">(<argument><expr><name pos:line="154" pos:column="13">SQLITE_DEBUG<pos:position pos:line="154" pos:column="25"/></name></expr></argument>)<pos:position pos:line="154" pos:column="26"/></argument_list></call> <operator pos:line="154" pos:column="27">||<pos:position pos:line="154" pos:column="29"/></operator> <call><name pos:line="154" pos:column="30">defined<pos:position pos:line="154" pos:column="37"/></name><argument_list pos:line="154" pos:column="37">(<argument><expr><name pos:line="154" pos:column="38">VDBE_PROFILE<pos:position pos:line="154" pos:column="50"/></name></expr></argument>)<pos:position pos:line="154" pos:column="51"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name pos:line="155" pos:column="5">pOrigOp<pos:position pos:line="155" pos:column="12"/></name> <operator pos:line="155" pos:column="13">=<pos:position pos:line="155" pos:column="14"/></operator> <name pos:line="155" pos:column="15">pOp<pos:position pos:line="155" pos:column="18"/></name></expr>;<pos:position pos:line="155" pos:column="19"/></expr_stmt>
<cpp:endif pos:line="156" pos:column="1">#<cpp:directive pos:line="156" pos:column="2">endif<pos:position pos:line="156" pos:column="7"/></cpp:directive></cpp:endif>
  
    <switch pos:line="158" pos:column="5">switch<condition pos:line="158" pos:column="11">( <expr><name><name pos:line="158" pos:column="13">pOp<pos:position pos:line="158" pos:column="16"/></name><operator pos:line="158" pos:column="16">-&gt;<pos:position pos:line="158" pos:column="21"/></operator><name pos:line="158" pos:column="18">opcode<pos:position pos:line="158" pos:column="24"/></name></name></expr> )<pos:position pos:line="158" pos:column="26"/></condition><block pos:line="158" pos:column="26">{

<comment type="block" format="doxygen" pos:line="160" pos:column="1">/*****************************************************************************
** What follows is a massive switch statement where each case implements a
** separate instruction in the virtual machine.  If we follow the usual
** indentation conventions, each case should be indented by 6 spaces.  But
** that is a lot of wasted space on the left margin.  So the code within
** the switch statement will break with convention and be flush-left. Another
** big comment (similar to this one) will mark the point in the code where
** we transition back to normal indentation.
**
** The formatting of each case is important.  The makefile for SQLite
** generates two C files "opcodes.h" and "opcodes.c" by scanning this
** file looking for lines that begin with "case OP_".  The opcodes.h files
** will be filled with #defines that give unique integer values to each
** opcode and the opcodes.c file is filled with an array of strings where
** each string is the symbolic name for the corresponding opcode.  If the
** case statement is followed by a comment of the form "/# same as ... #/"
** that comment is used to determine the particular value of the opcode.
**
** Other keywords in the comment that follows each case are used to
** construct the OPFLG_INITIALIZER value that initializes opcodeProperty[].
** Keywords include: in1, in2, in3, out2, out3.  See
** the mkopcodeh.awk script for additional information.
**
** Documentation about VDBE opcodes is generated by scanning this file
** for lines of that contain "Opcode:".  That line and all subsequent
** comment lines are used in the generation of the opcode.html documentation
** file.
**
** SUMMARY:
**
**     Formatting is important to scripts that scan this file.
**     Do not deviate from the formatting style currently in use.
**
*****************************************************************************/</comment>

<comment type="block" pos:line="195" pos:column="1">/* Opcode:  Goto * P2 * * *
**
** An unconditional jump to address P2.
** The next instruction executed will be 
** the one at index P2 from the beginning of
** the program.
**
** The P1 parameter is not actually used by this opcode.  However, it
** is sometimes set to 1 instead of 0 as a hint to the command-line shell
** that this Goto is the bottom of a loop and that the lines from P2 down
** to the current line should be indented for EXPLAIN output.
*/</comment>
<case pos:line="207" pos:column="1">case <expr><name pos:line="207" pos:column="6">OP_Goto<pos:position pos:line="207" pos:column="13"/></name></expr>:<pos:position pos:line="207" pos:column="14"/></case> <block pos:line="207" pos:column="15">{             <comment type="block" pos:line="207" pos:column="29">/* jump */</comment>
<label><name pos:line="208" pos:column="1">jump_to_p2_and_check_for_interrupt<pos:position pos:line="208" pos:column="35"/></name>:<pos:position pos:line="208" pos:column="36"/></label>
  <expr_stmt><expr><name pos:line="209" pos:column="3">pOp<pos:position pos:line="209" pos:column="6"/></name> <operator pos:line="209" pos:column="7">=<pos:position pos:line="209" pos:column="8"/></operator> <operator pos:line="209" pos:column="9">&amp;<pos:position pos:line="209" pos:column="14"/></operator><name><name pos:line="209" pos:column="10">aOp<pos:position pos:line="209" pos:column="13"/></name><index pos:line="209" pos:column="13">[<expr><name><name pos:line="209" pos:column="14">pOp<pos:position pos:line="209" pos:column="17"/></name><operator pos:line="209" pos:column="17">-&gt;<pos:position pos:line="209" pos:column="22"/></operator><name pos:line="209" pos:column="19">p2<pos:position pos:line="209" pos:column="21"/></name></name> <operator pos:line="209" pos:column="22">-<pos:position pos:line="209" pos:column="23"/></operator> <literal type="number" pos:line="209" pos:column="24">1<pos:position pos:line="209" pos:column="25"/></literal></expr>]<pos:position pos:line="209" pos:column="26"/></index></name></expr>;<pos:position pos:line="209" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="211" pos:column="3">/* Opcodes that are used as the bottom of a loop (OP_Next, OP_Prev,
  ** OP_VNext, or OP_SorterNext) all jump here upon
  ** completion.  Check to see if sqlite3_interrupt() has been called
  ** or if the progress callback needs to be invoked. 
  **
  ** This code uses unstructured "goto" statements and does not look clean.
  ** But that is not due to sloppy coding habits. The code is written this
  ** way for performance, to avoid having to run the interrupt and progress
  ** checks on every opcode.  This helps sqlite3_step() to run about 1.5%
  ** faster according to "valgrind --tool=cachegrind" */</comment>
<label><name pos:line="221" pos:column="1">check_for_interrupt<pos:position pos:line="221" pos:column="20"/></name>:<pos:position pos:line="221" pos:column="21"/></label>
  <if pos:line="222" pos:column="3">if<condition pos:line="222" pos:column="5">( <expr><name><name pos:line="222" pos:column="7">db<pos:position pos:line="222" pos:column="9"/></name><operator pos:line="222" pos:column="9">-&gt;<pos:position pos:line="222" pos:column="14"/></operator><name pos:line="222" pos:column="11">u1<pos:position pos:line="222" pos:column="13"/></name><operator pos:line="222" pos:column="13">.<pos:position pos:line="222" pos:column="14"/></operator><name pos:line="222" pos:column="14">isInterrupted<pos:position pos:line="222" pos:column="27"/></name></name></expr> )<pos:position pos:line="222" pos:column="29"/></condition><then pos:line="222" pos:column="29"> <block type="pseudo"><goto pos:line="222" pos:column="30">goto <name pos:line="222" pos:column="35">abort_due_to_interrupt<pos:position pos:line="222" pos:column="57"/></name>;<pos:position pos:line="222" pos:column="58"/></goto></block></then></if>
<cpp:ifndef pos:line="223" pos:column="1">#<cpp:directive pos:line="223" pos:column="2">ifndef<pos:position pos:line="223" pos:column="8"/></cpp:directive> <name pos:line="223" pos:column="9">SQLITE_OMIT_PROGRESS_CALLBACK<pos:position pos:line="223" pos:column="38"/></name></cpp:ifndef>
  <comment type="block" pos:line="224" pos:column="3">/* Call the progress callback if it is configured and the required number
  ** of VDBE ops have been executed (either since this invocation of
  ** sqlite3VdbeExec() or since last time the progress callback was called).
  ** If the progress callback returns non-zero, exit the virtual machine with
  ** a return code SQLITE_ABORT.
  */</comment>
  <if pos:line="230" pos:column="3">if<condition pos:line="230" pos:column="5">( <expr><name pos:line="230" pos:column="7">nVmStep<pos:position pos:line="230" pos:column="14"/></name><operator pos:line="230" pos:column="14">&gt;=<pos:position pos:line="230" pos:column="19"/></operator><name pos:line="230" pos:column="16">nProgressLimit<pos:position pos:line="230" pos:column="30"/></name> <operator pos:line="230" pos:column="31">&amp;&amp;<pos:position pos:line="230" pos:column="41"/></operator> <name><name pos:line="230" pos:column="34">db<pos:position pos:line="230" pos:column="36"/></name><operator pos:line="230" pos:column="36">-&gt;<pos:position pos:line="230" pos:column="41"/></operator><name pos:line="230" pos:column="38">xProgress<pos:position pos:line="230" pos:column="47"/></name></name><operator pos:line="230" pos:column="47">!=<pos:position pos:line="230" pos:column="49"/></operator><literal type="number" pos:line="230" pos:column="49">0<pos:position pos:line="230" pos:column="50"/></literal></expr> )<pos:position pos:line="230" pos:column="52"/></condition><then><block pos:line="230" pos:column="52">{
    <expr_stmt><expr><call><name pos:line="231" pos:column="5">assert<pos:position pos:line="231" pos:column="11"/></name><argument_list pos:line="231" pos:column="11">( <argument><expr><name><name pos:line="231" pos:column="13">db<pos:position pos:line="231" pos:column="15"/></name><operator pos:line="231" pos:column="15">-&gt;<pos:position pos:line="231" pos:column="20"/></operator><name pos:line="231" pos:column="17">nProgressOps<pos:position pos:line="231" pos:column="29"/></name></name><operator pos:line="231" pos:column="29">!=<pos:position pos:line="231" pos:column="31"/></operator><literal type="number" pos:line="231" pos:column="31">0<pos:position pos:line="231" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="231" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="232" pos:column="5">nProgressLimit<pos:position pos:line="232" pos:column="19"/></name> <operator pos:line="232" pos:column="20">=<pos:position pos:line="232" pos:column="21"/></operator> <name pos:line="232" pos:column="22">nVmStep<pos:position pos:line="232" pos:column="29"/></name> <operator pos:line="232" pos:column="30">+<pos:position pos:line="232" pos:column="31"/></operator> <name><name pos:line="232" pos:column="32">db<pos:position pos:line="232" pos:column="34"/></name><operator pos:line="232" pos:column="34">-&gt;<pos:position pos:line="232" pos:column="39"/></operator><name pos:line="232" pos:column="36">nProgressOps<pos:position pos:line="232" pos:column="48"/></name></name> <operator pos:line="232" pos:column="49">-<pos:position pos:line="232" pos:column="50"/></operator> <operator pos:line="232" pos:column="51">(<pos:position pos:line="232" pos:column="52"/></operator><name pos:line="232" pos:column="52">nVmStep<pos:position pos:line="232" pos:column="59"/></name><operator pos:line="232" pos:column="59">%<pos:position pos:line="232" pos:column="60"/></operator><name><name pos:line="232" pos:column="60">db<pos:position pos:line="232" pos:column="62"/></name><operator pos:line="232" pos:column="62">-&gt;<pos:position pos:line="232" pos:column="67"/></operator><name pos:line="232" pos:column="64">nProgressOps<pos:position pos:line="232" pos:column="76"/></name></name><operator pos:line="232" pos:column="76">)<pos:position pos:line="232" pos:column="77"/></operator></expr>;<pos:position pos:line="232" pos:column="78"/></expr_stmt>
    <if pos:line="233" pos:column="5">if<condition pos:line="233" pos:column="7">( <expr><call><name><name pos:line="233" pos:column="9">db<pos:position pos:line="233" pos:column="11"/></name><operator pos:line="233" pos:column="11">-&gt;<pos:position pos:line="233" pos:column="16"/></operator><name pos:line="233" pos:column="13">xProgress<pos:position pos:line="233" pos:column="22"/></name></name><argument_list pos:line="233" pos:column="22">(<argument><expr><name><name pos:line="233" pos:column="23">db<pos:position pos:line="233" pos:column="25"/></name><operator pos:line="233" pos:column="25">-&gt;<pos:position pos:line="233" pos:column="30"/></operator><name pos:line="233" pos:column="27">pProgressArg<pos:position pos:line="233" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="233" pos:column="40"/></argument_list></call></expr> )<pos:position pos:line="233" pos:column="42"/></condition><then><block pos:line="233" pos:column="42">{
      <expr_stmt><expr><name pos:line="234" pos:column="7">rc<pos:position pos:line="234" pos:column="9"/></name> <operator pos:line="234" pos:column="10">=<pos:position pos:line="234" pos:column="11"/></operator> <name pos:line="234" pos:column="12">SQLITE_INTERRUPT<pos:position pos:line="234" pos:column="28"/></name></expr>;<pos:position pos:line="234" pos:column="29"/></expr_stmt>
      <goto pos:line="235" pos:column="7">goto <name pos:line="235" pos:column="12">abort_due_to_error<pos:position pos:line="235" pos:column="30"/></name>;<pos:position pos:line="235" pos:column="31"/></goto>
    }<pos:position pos:line="236" pos:column="6"/></block></then></if>
  }<pos:position pos:line="237" pos:column="4"/></block></then></if>
<cpp:endif pos:line="238" pos:column="1">#<cpp:directive pos:line="238" pos:column="2">endif<pos:position pos:line="238" pos:column="7"/></cpp:directive></cpp:endif>
  
  <break pos:line="240" pos:column="3">break;<pos:position pos:line="240" pos:column="9"/></break>
}<pos:position pos:line="241" pos:column="2"/></block>

<comment type="block" pos:line="243" pos:column="1">/* Opcode:  Gosub P1 P2 * * *
**
** Write the current address onto register P1
** and then jump to address P2.
*/</comment>
<case pos:line="248" pos:column="1">case <expr><name pos:line="248" pos:column="6">OP_Gosub<pos:position pos:line="248" pos:column="14"/></name></expr>:<pos:position pos:line="248" pos:column="15"/></case> <block pos:line="248" pos:column="16">{            <comment type="block" pos:line="248" pos:column="29">/* jump */</comment>
  <expr_stmt><expr><call><name pos:line="249" pos:column="3">assert<pos:position pos:line="249" pos:column="9"/></name><argument_list pos:line="249" pos:column="9">( <argument><expr><name><name pos:line="249" pos:column="11">pOp<pos:position pos:line="249" pos:column="14"/></name><operator pos:line="249" pos:column="14">-&gt;<pos:position pos:line="249" pos:column="19"/></operator><name pos:line="249" pos:column="16">p1<pos:position pos:line="249" pos:column="18"/></name></name><operator pos:line="249" pos:column="18">&gt;<pos:position pos:line="249" pos:column="22"/></operator><literal type="number" pos:line="249" pos:column="19">0<pos:position pos:line="249" pos:column="20"/></literal> <operator pos:line="249" pos:column="21">&amp;&amp;<pos:position pos:line="249" pos:column="31"/></operator> <name><name pos:line="249" pos:column="24">pOp<pos:position pos:line="249" pos:column="27"/></name><operator pos:line="249" pos:column="27">-&gt;<pos:position pos:line="249" pos:column="32"/></operator><name pos:line="249" pos:column="29">p1<pos:position pos:line="249" pos:column="31"/></name></name><operator pos:line="249" pos:column="31">&lt;=<pos:position pos:line="249" pos:column="36"/></operator><operator pos:line="249" pos:column="33">(<pos:position pos:line="249" pos:column="34"/></operator><name><name pos:line="249" pos:column="34">p<pos:position pos:line="249" pos:column="35"/></name><operator pos:line="249" pos:column="35">-&gt;<pos:position pos:line="249" pos:column="40"/></operator><name pos:line="249" pos:column="37">nMem<pos:position pos:line="249" pos:column="41"/></name></name><operator pos:line="249" pos:column="41">+<pos:position pos:line="249" pos:column="42"/></operator><literal type="number" pos:line="249" pos:column="42">1<pos:position pos:line="249" pos:column="43"/></literal> <operator pos:line="249" pos:column="44">-<pos:position pos:line="249" pos:column="45"/></operator> <name><name pos:line="249" pos:column="46">p<pos:position pos:line="249" pos:column="47"/></name><operator pos:line="249" pos:column="47">-&gt;<pos:position pos:line="249" pos:column="52"/></operator><name pos:line="249" pos:column="49">nCursor<pos:position pos:line="249" pos:column="56"/></name></name><operator pos:line="249" pos:column="56">)<pos:position pos:line="249" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="249" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="250" pos:column="3">pIn1<pos:position pos:line="250" pos:column="7"/></name> <operator pos:line="250" pos:column="8">=<pos:position pos:line="250" pos:column="9"/></operator> <operator pos:line="250" pos:column="10">&amp;<pos:position pos:line="250" pos:column="15"/></operator><name><name pos:line="250" pos:column="11">aMem<pos:position pos:line="250" pos:column="15"/></name><index pos:line="250" pos:column="15">[<expr><name><name pos:line="250" pos:column="16">pOp<pos:position pos:line="250" pos:column="19"/></name><operator pos:line="250" pos:column="19">-&gt;<pos:position pos:line="250" pos:column="24"/></operator><name pos:line="250" pos:column="21">p1<pos:position pos:line="250" pos:column="23"/></name></name></expr>]<pos:position pos:line="250" pos:column="24"/></index></name></expr>;<pos:position pos:line="250" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="251" pos:column="3">assert<pos:position pos:line="251" pos:column="9"/></name><argument_list pos:line="251" pos:column="9">( <argument><expr><call><name pos:line="251" pos:column="11">VdbeMemDynamic<pos:position pos:line="251" pos:column="25"/></name><argument_list pos:line="251" pos:column="25">(<argument><expr><name pos:line="251" pos:column="26">pIn1<pos:position pos:line="251" pos:column="30"/></name></expr></argument>)<pos:position pos:line="251" pos:column="31"/></argument_list></call><operator pos:line="251" pos:column="31">==<pos:position pos:line="251" pos:column="33"/></operator><literal type="number" pos:line="251" pos:column="33">0<pos:position pos:line="251" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="251" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="252" pos:column="3">memAboutToChange<pos:position pos:line="252" pos:column="19"/></name><argument_list pos:line="252" pos:column="19">(<argument><expr><name pos:line="252" pos:column="20">p<pos:position pos:line="252" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="23">pIn1<pos:position pos:line="252" pos:column="27"/></name></expr></argument>)<pos:position pos:line="252" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="253" pos:column="3">pIn1<pos:position pos:line="253" pos:column="7"/></name><operator pos:line="253" pos:column="7">-&gt;<pos:position pos:line="253" pos:column="12"/></operator><name pos:line="253" pos:column="9">flags<pos:position pos:line="253" pos:column="14"/></name></name> <operator pos:line="253" pos:column="15">=<pos:position pos:line="253" pos:column="16"/></operator> <name pos:line="253" pos:column="17">MEM_Int<pos:position pos:line="253" pos:column="24"/></name></expr>;<pos:position pos:line="253" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="254" pos:column="3">pIn1<pos:position pos:line="254" pos:column="7"/></name><operator pos:line="254" pos:column="7">-&gt;<pos:position pos:line="254" pos:column="12"/></operator><name pos:line="254" pos:column="9">u<pos:position pos:line="254" pos:column="10"/></name><operator pos:line="254" pos:column="10">.<pos:position pos:line="254" pos:column="11"/></operator><name pos:line="254" pos:column="11">i<pos:position pos:line="254" pos:column="12"/></name></name> <operator pos:line="254" pos:column="13">=<pos:position pos:line="254" pos:column="14"/></operator> <call pos:line="254" pos:column="15">(<name pos:line="254" pos:column="16">int<pos:position pos:line="254" pos:column="19"/></name>)<argument_list pos:line="254" pos:column="20">(<argument><expr><name pos:line="254" pos:column="21">pOp<pos:position pos:line="254" pos:column="24"/></name><operator pos:line="254" pos:column="24">-<pos:position pos:line="254" pos:column="25"/></operator><name pos:line="254" pos:column="25">aOp<pos:position pos:line="254" pos:column="28"/></name></expr></argument>)<pos:position pos:line="254" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="255" pos:column="3">REGISTER_TRACE<pos:position pos:line="255" pos:column="17"/></name><argument_list pos:line="255" pos:column="17">(<argument><expr><name><name pos:line="255" pos:column="18">pOp<pos:position pos:line="255" pos:column="21"/></name><operator pos:line="255" pos:column="21">-&gt;<pos:position pos:line="255" pos:column="26"/></operator><name pos:line="255" pos:column="23">p1<pos:position pos:line="255" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="255" pos:column="27">pIn1<pos:position pos:line="255" pos:column="31"/></name></expr></argument>)<pos:position pos:line="255" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="257" pos:column="3">/* Most jump operations do a goto to this spot in order to update
  ** the pOp pointer. */</comment>
<label><name pos:line="259" pos:column="1">jump_to_p2<pos:position pos:line="259" pos:column="11"/></name>:<pos:position pos:line="259" pos:column="12"/></label>
  <expr_stmt><expr><name pos:line="260" pos:column="3">pOp<pos:position pos:line="260" pos:column="6"/></name> <operator pos:line="260" pos:column="7">=<pos:position pos:line="260" pos:column="8"/></operator> <operator pos:line="260" pos:column="9">&amp;<pos:position pos:line="260" pos:column="14"/></operator><name><name pos:line="260" pos:column="10">aOp<pos:position pos:line="260" pos:column="13"/></name><index pos:line="260" pos:column="13">[<expr><name><name pos:line="260" pos:column="14">pOp<pos:position pos:line="260" pos:column="17"/></name><operator pos:line="260" pos:column="17">-&gt;<pos:position pos:line="260" pos:column="22"/></operator><name pos:line="260" pos:column="19">p2<pos:position pos:line="260" pos:column="21"/></name></name> <operator pos:line="260" pos:column="22">-<pos:position pos:line="260" pos:column="23"/></operator> <literal type="number" pos:line="260" pos:column="24">1<pos:position pos:line="260" pos:column="25"/></literal></expr>]<pos:position pos:line="260" pos:column="26"/></index></name></expr>;<pos:position pos:line="260" pos:column="27"/></expr_stmt>
  <break pos:line="261" pos:column="3">break;<pos:position pos:line="261" pos:column="9"/></break>
}<pos:position pos:line="262" pos:column="2"/></block>

<comment type="block" pos:line="264" pos:column="1">/* Opcode:  Return P1 * * * *
**
** Jump to the next instruction after the address in register P1.  After
** the jump, register P1 becomes undefined.
*/</comment>
<case pos:line="269" pos:column="1">case <expr><name pos:line="269" pos:column="6">OP_Return<pos:position pos:line="269" pos:column="15"/></name></expr>:<pos:position pos:line="269" pos:column="16"/></case> <block pos:line="269" pos:column="17">{           <comment type="block" pos:line="269" pos:column="29">/* in1 */</comment>
  <expr_stmt><expr><name pos:line="270" pos:column="3">pIn1<pos:position pos:line="270" pos:column="7"/></name> <operator pos:line="270" pos:column="8">=<pos:position pos:line="270" pos:column="9"/></operator> <operator pos:line="270" pos:column="10">&amp;<pos:position pos:line="270" pos:column="15"/></operator><name><name pos:line="270" pos:column="11">aMem<pos:position pos:line="270" pos:column="15"/></name><index pos:line="270" pos:column="15">[<expr><name><name pos:line="270" pos:column="16">pOp<pos:position pos:line="270" pos:column="19"/></name><operator pos:line="270" pos:column="19">-&gt;<pos:position pos:line="270" pos:column="24"/></operator><name pos:line="270" pos:column="21">p1<pos:position pos:line="270" pos:column="23"/></name></name></expr>]<pos:position pos:line="270" pos:column="24"/></index></name></expr>;<pos:position pos:line="270" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="271" pos:column="3">assert<pos:position pos:line="271" pos:column="9"/></name><argument_list pos:line="271" pos:column="9">( <argument><expr><name><name pos:line="271" pos:column="11">pIn1<pos:position pos:line="271" pos:column="15"/></name><operator pos:line="271" pos:column="15">-&gt;<pos:position pos:line="271" pos:column="20"/></operator><name pos:line="271" pos:column="17">flags<pos:position pos:line="271" pos:column="22"/></name></name><operator pos:line="271" pos:column="22">==<pos:position pos:line="271" pos:column="24"/></operator><name pos:line="271" pos:column="24">MEM_Int<pos:position pos:line="271" pos:column="31"/></name></expr></argument> )<pos:position pos:line="271" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="272" pos:column="3">pOp<pos:position pos:line="272" pos:column="6"/></name> <operator pos:line="272" pos:column="7">=<pos:position pos:line="272" pos:column="8"/></operator> <operator pos:line="272" pos:column="9">&amp;<pos:position pos:line="272" pos:column="14"/></operator><name><name pos:line="272" pos:column="10">aOp<pos:position pos:line="272" pos:column="13"/></name><index pos:line="272" pos:column="13">[<expr><name><name pos:line="272" pos:column="14">pIn1<pos:position pos:line="272" pos:column="18"/></name><operator pos:line="272" pos:column="18">-&gt;<pos:position pos:line="272" pos:column="23"/></operator><name pos:line="272" pos:column="20">u<pos:position pos:line="272" pos:column="21"/></name><operator pos:line="272" pos:column="21">.<pos:position pos:line="272" pos:column="22"/></operator><name pos:line="272" pos:column="22">i<pos:position pos:line="272" pos:column="23"/></name></name></expr>]<pos:position pos:line="272" pos:column="24"/></index></name></expr>;<pos:position pos:line="272" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="273" pos:column="3">pIn1<pos:position pos:line="273" pos:column="7"/></name><operator pos:line="273" pos:column="7">-&gt;<pos:position pos:line="273" pos:column="12"/></operator><name pos:line="273" pos:column="9">flags<pos:position pos:line="273" pos:column="14"/></name></name> <operator pos:line="273" pos:column="15">=<pos:position pos:line="273" pos:column="16"/></operator> <name pos:line="273" pos:column="17">MEM_Undefined<pos:position pos:line="273" pos:column="30"/></name></expr>;<pos:position pos:line="273" pos:column="31"/></expr_stmt>
  <break pos:line="274" pos:column="3">break;<pos:position pos:line="274" pos:column="9"/></break>
}<pos:position pos:line="275" pos:column="2"/></block>

<comment type="block" pos:line="277" pos:column="1">/* Opcode: InitCoroutine P1 P2 P3 * *
**
** Set up register P1 so that it will Yield to the coroutine
** located at address P3.
**
** If P2!=0 then the coroutine implementation immediately follows
** this opcode.  So jump over the coroutine implementation to
** address P2.
**
** See also: EndCoroutine
*/</comment>
<case pos:line="288" pos:column="1">case <expr><name pos:line="288" pos:column="6">OP_InitCoroutine<pos:position pos:line="288" pos:column="22"/></name></expr>:<pos:position pos:line="288" pos:column="23"/></case> <block pos:line="288" pos:column="24">{     <comment type="block" pos:line="288" pos:column="30">/* jump */</comment>
  <expr_stmt><expr><call><name pos:line="289" pos:column="3">assert<pos:position pos:line="289" pos:column="9"/></name><argument_list pos:line="289" pos:column="9">( <argument><expr><name><name pos:line="289" pos:column="11">pOp<pos:position pos:line="289" pos:column="14"/></name><operator pos:line="289" pos:column="14">-&gt;<pos:position pos:line="289" pos:column="19"/></operator><name pos:line="289" pos:column="16">p1<pos:position pos:line="289" pos:column="18"/></name></name><operator pos:line="289" pos:column="18">&gt;<pos:position pos:line="289" pos:column="22"/></operator><literal type="number" pos:line="289" pos:column="19">0<pos:position pos:line="289" pos:column="20"/></literal> <operator pos:line="289" pos:column="21">&amp;&amp;<pos:position pos:line="289" pos:column="31"/></operator>  <name><name pos:line="289" pos:column="25">pOp<pos:position pos:line="289" pos:column="28"/></name><operator pos:line="289" pos:column="28">-&gt;<pos:position pos:line="289" pos:column="33"/></operator><name pos:line="289" pos:column="30">p1<pos:position pos:line="289" pos:column="32"/></name></name><operator pos:line="289" pos:column="32">&lt;=<pos:position pos:line="289" pos:column="37"/></operator><operator pos:line="289" pos:column="34">(<pos:position pos:line="289" pos:column="35"/></operator><name><name pos:line="289" pos:column="35">p<pos:position pos:line="289" pos:column="36"/></name><operator pos:line="289" pos:column="36">-&gt;<pos:position pos:line="289" pos:column="41"/></operator><name pos:line="289" pos:column="38">nMem<pos:position pos:line="289" pos:column="42"/></name></name><operator pos:line="289" pos:column="42">+<pos:position pos:line="289" pos:column="43"/></operator><literal type="number" pos:line="289" pos:column="43">1<pos:position pos:line="289" pos:column="44"/></literal> <operator pos:line="289" pos:column="45">-<pos:position pos:line="289" pos:column="46"/></operator> <name><name pos:line="289" pos:column="47">p<pos:position pos:line="289" pos:column="48"/></name><operator pos:line="289" pos:column="48">-&gt;<pos:position pos:line="289" pos:column="53"/></operator><name pos:line="289" pos:column="50">nCursor<pos:position pos:line="289" pos:column="57"/></name></name><operator pos:line="289" pos:column="57">)<pos:position pos:line="289" pos:column="58"/></operator></expr></argument> )<pos:position pos:line="289" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="290" pos:column="3">assert<pos:position pos:line="290" pos:column="9"/></name><argument_list pos:line="290" pos:column="9">( <argument><expr><name><name pos:line="290" pos:column="11">pOp<pos:position pos:line="290" pos:column="14"/></name><operator pos:line="290" pos:column="14">-&gt;<pos:position pos:line="290" pos:column="19"/></operator><name pos:line="290" pos:column="16">p2<pos:position pos:line="290" pos:column="18"/></name></name><operator pos:line="290" pos:column="18">&gt;=<pos:position pos:line="290" pos:column="23"/></operator><literal type="number" pos:line="290" pos:column="20">0<pos:position pos:line="290" pos:column="21"/></literal> <operator pos:line="290" pos:column="22">&amp;&amp;<pos:position pos:line="290" pos:column="32"/></operator> <name><name pos:line="290" pos:column="25">pOp<pos:position pos:line="290" pos:column="28"/></name><operator pos:line="290" pos:column="28">-&gt;<pos:position pos:line="290" pos:column="33"/></operator><name pos:line="290" pos:column="30">p2<pos:position pos:line="290" pos:column="32"/></name></name><operator pos:line="290" pos:column="32">&lt;<pos:position pos:line="290" pos:column="36"/></operator><name><name pos:line="290" pos:column="33">p<pos:position pos:line="290" pos:column="34"/></name><operator pos:line="290" pos:column="34">-&gt;<pos:position pos:line="290" pos:column="39"/></operator><name pos:line="290" pos:column="36">nOp<pos:position pos:line="290" pos:column="39"/></name></name></expr></argument> )<pos:position pos:line="290" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="291" pos:column="3">assert<pos:position pos:line="291" pos:column="9"/></name><argument_list pos:line="291" pos:column="9">( <argument><expr><name><name pos:line="291" pos:column="11">pOp<pos:position pos:line="291" pos:column="14"/></name><operator pos:line="291" pos:column="14">-&gt;<pos:position pos:line="291" pos:column="19"/></operator><name pos:line="291" pos:column="16">p3<pos:position pos:line="291" pos:column="18"/></name></name><operator pos:line="291" pos:column="18">&gt;=<pos:position pos:line="291" pos:column="23"/></operator><literal type="number" pos:line="291" pos:column="20">0<pos:position pos:line="291" pos:column="21"/></literal> <operator pos:line="291" pos:column="22">&amp;&amp;<pos:position pos:line="291" pos:column="32"/></operator> <name><name pos:line="291" pos:column="25">pOp<pos:position pos:line="291" pos:column="28"/></name><operator pos:line="291" pos:column="28">-&gt;<pos:position pos:line="291" pos:column="33"/></operator><name pos:line="291" pos:column="30">p3<pos:position pos:line="291" pos:column="32"/></name></name><operator pos:line="291" pos:column="32">&lt;<pos:position pos:line="291" pos:column="36"/></operator><name><name pos:line="291" pos:column="33">p<pos:position pos:line="291" pos:column="34"/></name><operator pos:line="291" pos:column="34">-&gt;<pos:position pos:line="291" pos:column="39"/></operator><name pos:line="291" pos:column="36">nOp<pos:position pos:line="291" pos:column="39"/></name></name></expr></argument> )<pos:position pos:line="291" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name pos:line="292" pos:column="3">pOut<pos:position pos:line="292" pos:column="7"/></name> <operator pos:line="292" pos:column="8">=<pos:position pos:line="292" pos:column="9"/></operator> <operator pos:line="292" pos:column="10">&amp;<pos:position pos:line="292" pos:column="15"/></operator><name><name pos:line="292" pos:column="11">aMem<pos:position pos:line="292" pos:column="15"/></name><index pos:line="292" pos:column="15">[<expr><name><name pos:line="292" pos:column="16">pOp<pos:position pos:line="292" pos:column="19"/></name><operator pos:line="292" pos:column="19">-&gt;<pos:position pos:line="292" pos:column="24"/></operator><name pos:line="292" pos:column="21">p1<pos:position pos:line="292" pos:column="23"/></name></name></expr>]<pos:position pos:line="292" pos:column="24"/></index></name></expr>;<pos:position pos:line="292" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="293" pos:column="3">assert<pos:position pos:line="293" pos:column="9"/></name><argument_list pos:line="293" pos:column="9">( <argument><expr><operator pos:line="293" pos:column="11">!<pos:position pos:line="293" pos:column="12"/></operator><call><name pos:line="293" pos:column="12">VdbeMemDynamic<pos:position pos:line="293" pos:column="26"/></name><argument_list pos:line="293" pos:column="26">(<argument><expr><name pos:line="293" pos:column="27">pOut<pos:position pos:line="293" pos:column="31"/></name></expr></argument>)<pos:position pos:line="293" pos:column="32"/></argument_list></call></expr></argument> )<pos:position pos:line="293" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="294" pos:column="3">pOut<pos:position pos:line="294" pos:column="7"/></name><operator pos:line="294" pos:column="7">-&gt;<pos:position pos:line="294" pos:column="12"/></operator><name pos:line="294" pos:column="9">u<pos:position pos:line="294" pos:column="10"/></name><operator pos:line="294" pos:column="10">.<pos:position pos:line="294" pos:column="11"/></operator><name pos:line="294" pos:column="11">i<pos:position pos:line="294" pos:column="12"/></name></name> <operator pos:line="294" pos:column="13">=<pos:position pos:line="294" pos:column="14"/></operator> <name><name pos:line="294" pos:column="15">pOp<pos:position pos:line="294" pos:column="18"/></name><operator pos:line="294" pos:column="18">-&gt;<pos:position pos:line="294" pos:column="23"/></operator><name pos:line="294" pos:column="20">p3<pos:position pos:line="294" pos:column="22"/></name></name> <operator pos:line="294" pos:column="23">-<pos:position pos:line="294" pos:column="24"/></operator> <literal type="number" pos:line="294" pos:column="25">1<pos:position pos:line="294" pos:column="26"/></literal></expr>;<pos:position pos:line="294" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="295" pos:column="3">pOut<pos:position pos:line="295" pos:column="7"/></name><operator pos:line="295" pos:column="7">-&gt;<pos:position pos:line="295" pos:column="12"/></operator><name pos:line="295" pos:column="9">flags<pos:position pos:line="295" pos:column="14"/></name></name> <operator pos:line="295" pos:column="15">=<pos:position pos:line="295" pos:column="16"/></operator> <name pos:line="295" pos:column="17">MEM_Int<pos:position pos:line="295" pos:column="24"/></name></expr>;<pos:position pos:line="295" pos:column="25"/></expr_stmt>
  <if pos:line="296" pos:column="3">if<condition pos:line="296" pos:column="5">( <expr><name><name pos:line="296" pos:column="7">pOp<pos:position pos:line="296" pos:column="10"/></name><operator pos:line="296" pos:column="10">-&gt;<pos:position pos:line="296" pos:column="15"/></operator><name pos:line="296" pos:column="12">p2<pos:position pos:line="296" pos:column="14"/></name></name></expr> )<pos:position pos:line="296" pos:column="16"/></condition><then pos:line="296" pos:column="16"> <block type="pseudo"><goto pos:line="296" pos:column="17">goto <name pos:line="296" pos:column="22">jump_to_p2<pos:position pos:line="296" pos:column="32"/></name>;<pos:position pos:line="296" pos:column="33"/></goto></block></then></if>
  <break pos:line="297" pos:column="3">break;<pos:position pos:line="297" pos:column="9"/></break>
}<pos:position pos:line="298" pos:column="2"/></block>

<comment type="block" pos:line="300" pos:column="1">/* Opcode:  EndCoroutine P1 * * * *
**
** The instruction at the address in register P1 is a Yield.
** Jump to the P2 parameter of that Yield.
** After the jump, register P1 becomes undefined.
**
** See also: InitCoroutine
*/</comment>
<case pos:line="308" pos:column="1">case <expr><name pos:line="308" pos:column="6">OP_EndCoroutine<pos:position pos:line="308" pos:column="21"/></name></expr>:<pos:position pos:line="308" pos:column="22"/></case> <block pos:line="308" pos:column="23">{           <comment type="block" pos:line="308" pos:column="35">/* in1 */</comment>
  <decl_stmt><decl><type><name pos:line="309" pos:column="3">VdbeOp<pos:position pos:line="309" pos:column="9"/></name> <modifier pos:line="309" pos:column="10">*<pos:position pos:line="309" pos:column="11"/></modifier></type><name pos:line="309" pos:column="11">pCaller<pos:position pos:line="309" pos:column="18"/></name></decl>;<pos:position pos:line="309" pos:column="19"/></decl_stmt>
  <expr_stmt><expr><name pos:line="310" pos:column="3">pIn1<pos:position pos:line="310" pos:column="7"/></name> <operator pos:line="310" pos:column="8">=<pos:position pos:line="310" pos:column="9"/></operator> <operator pos:line="310" pos:column="10">&amp;<pos:position pos:line="310" pos:column="15"/></operator><name><name pos:line="310" pos:column="11">aMem<pos:position pos:line="310" pos:column="15"/></name><index pos:line="310" pos:column="15">[<expr><name><name pos:line="310" pos:column="16">pOp<pos:position pos:line="310" pos:column="19"/></name><operator pos:line="310" pos:column="19">-&gt;<pos:position pos:line="310" pos:column="24"/></operator><name pos:line="310" pos:column="21">p1<pos:position pos:line="310" pos:column="23"/></name></name></expr>]<pos:position pos:line="310" pos:column="24"/></index></name></expr>;<pos:position pos:line="310" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="311" pos:column="3">assert<pos:position pos:line="311" pos:column="9"/></name><argument_list pos:line="311" pos:column="9">( <argument><expr><name><name pos:line="311" pos:column="11">pIn1<pos:position pos:line="311" pos:column="15"/></name><operator pos:line="311" pos:column="15">-&gt;<pos:position pos:line="311" pos:column="20"/></operator><name pos:line="311" pos:column="17">flags<pos:position pos:line="311" pos:column="22"/></name></name><operator pos:line="311" pos:column="22">==<pos:position pos:line="311" pos:column="24"/></operator><name pos:line="311" pos:column="24">MEM_Int<pos:position pos:line="311" pos:column="31"/></name></expr></argument> )<pos:position pos:line="311" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="312" pos:column="3">assert<pos:position pos:line="312" pos:column="9"/></name><argument_list pos:line="312" pos:column="9">( <argument><expr><name><name pos:line="312" pos:column="11">pIn1<pos:position pos:line="312" pos:column="15"/></name><operator pos:line="312" pos:column="15">-&gt;<pos:position pos:line="312" pos:column="20"/></operator><name pos:line="312" pos:column="17">u<pos:position pos:line="312" pos:column="18"/></name><operator pos:line="312" pos:column="18">.<pos:position pos:line="312" pos:column="19"/></operator><name pos:line="312" pos:column="19">i<pos:position pos:line="312" pos:column="20"/></name></name><operator pos:line="312" pos:column="20">&gt;=<pos:position pos:line="312" pos:column="25"/></operator><literal type="number" pos:line="312" pos:column="22">0<pos:position pos:line="312" pos:column="23"/></literal> <operator pos:line="312" pos:column="24">&amp;&amp;<pos:position pos:line="312" pos:column="34"/></operator> <name><name pos:line="312" pos:column="27">pIn1<pos:position pos:line="312" pos:column="31"/></name><operator pos:line="312" pos:column="31">-&gt;<pos:position pos:line="312" pos:column="36"/></operator><name pos:line="312" pos:column="33">u<pos:position pos:line="312" pos:column="34"/></name><operator pos:line="312" pos:column="34">.<pos:position pos:line="312" pos:column="35"/></operator><name pos:line="312" pos:column="35">i<pos:position pos:line="312" pos:column="36"/></name></name><operator pos:line="312" pos:column="36">&lt;<pos:position pos:line="312" pos:column="40"/></operator><name><name pos:line="312" pos:column="37">p<pos:position pos:line="312" pos:column="38"/></name><operator pos:line="312" pos:column="38">-&gt;<pos:position pos:line="312" pos:column="43"/></operator><name pos:line="312" pos:column="40">nOp<pos:position pos:line="312" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="312" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="313" pos:column="3">pCaller<pos:position pos:line="313" pos:column="10"/></name> <operator pos:line="313" pos:column="11">=<pos:position pos:line="313" pos:column="12"/></operator> <operator pos:line="313" pos:column="13">&amp;<pos:position pos:line="313" pos:column="18"/></operator><name><name pos:line="313" pos:column="14">aOp<pos:position pos:line="313" pos:column="17"/></name><index pos:line="313" pos:column="17">[<expr><name><name pos:line="313" pos:column="18">pIn1<pos:position pos:line="313" pos:column="22"/></name><operator pos:line="313" pos:column="22">-&gt;<pos:position pos:line="313" pos:column="27"/></operator><name pos:line="313" pos:column="24">u<pos:position pos:line="313" pos:column="25"/></name><operator pos:line="313" pos:column="25">.<pos:position pos:line="313" pos:column="26"/></operator><name pos:line="313" pos:column="26">i<pos:position pos:line="313" pos:column="27"/></name></name></expr>]<pos:position pos:line="313" pos:column="28"/></index></name></expr>;<pos:position pos:line="313" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="314" pos:column="3">assert<pos:position pos:line="314" pos:column="9"/></name><argument_list pos:line="314" pos:column="9">( <argument><expr><name><name pos:line="314" pos:column="11">pCaller<pos:position pos:line="314" pos:column="18"/></name><operator pos:line="314" pos:column="18">-&gt;<pos:position pos:line="314" pos:column="23"/></operator><name pos:line="314" pos:column="20">opcode<pos:position pos:line="314" pos:column="26"/></name></name><operator pos:line="314" pos:column="26">==<pos:position pos:line="314" pos:column="28"/></operator><name pos:line="314" pos:column="28">OP_Yield<pos:position pos:line="314" pos:column="36"/></name></expr></argument> )<pos:position pos:line="314" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="314" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="315" pos:column="3">assert<pos:position pos:line="315" pos:column="9"/></name><argument_list pos:line="315" pos:column="9">( <argument><expr><name><name pos:line="315" pos:column="11">pCaller<pos:position pos:line="315" pos:column="18"/></name><operator pos:line="315" pos:column="18">-&gt;<pos:position pos:line="315" pos:column="23"/></operator><name pos:line="315" pos:column="20">p2<pos:position pos:line="315" pos:column="22"/></name></name><operator pos:line="315" pos:column="22">&gt;=<pos:position pos:line="315" pos:column="27"/></operator><literal type="number" pos:line="315" pos:column="24">0<pos:position pos:line="315" pos:column="25"/></literal> <operator pos:line="315" pos:column="26">&amp;&amp;<pos:position pos:line="315" pos:column="36"/></operator> <name><name pos:line="315" pos:column="29">pCaller<pos:position pos:line="315" pos:column="36"/></name><operator pos:line="315" pos:column="36">-&gt;<pos:position pos:line="315" pos:column="41"/></operator><name pos:line="315" pos:column="38">p2<pos:position pos:line="315" pos:column="40"/></name></name><operator pos:line="315" pos:column="40">&lt;<pos:position pos:line="315" pos:column="44"/></operator><name><name pos:line="315" pos:column="41">p<pos:position pos:line="315" pos:column="42"/></name><operator pos:line="315" pos:column="42">-&gt;<pos:position pos:line="315" pos:column="47"/></operator><name pos:line="315" pos:column="44">nOp<pos:position pos:line="315" pos:column="47"/></name></name></expr></argument> )<pos:position pos:line="315" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name pos:line="316" pos:column="3">pOp<pos:position pos:line="316" pos:column="6"/></name> <operator pos:line="316" pos:column="7">=<pos:position pos:line="316" pos:column="8"/></operator> <operator pos:line="316" pos:column="9">&amp;<pos:position pos:line="316" pos:column="14"/></operator><name><name pos:line="316" pos:column="10">aOp<pos:position pos:line="316" pos:column="13"/></name><index pos:line="316" pos:column="13">[<expr><name><name pos:line="316" pos:column="14">pCaller<pos:position pos:line="316" pos:column="21"/></name><operator pos:line="316" pos:column="21">-&gt;<pos:position pos:line="316" pos:column="26"/></operator><name pos:line="316" pos:column="23">p2<pos:position pos:line="316" pos:column="25"/></name></name> <operator pos:line="316" pos:column="26">-<pos:position pos:line="316" pos:column="27"/></operator> <literal type="number" pos:line="316" pos:column="28">1<pos:position pos:line="316" pos:column="29"/></literal></expr>]<pos:position pos:line="316" pos:column="30"/></index></name></expr>;<pos:position pos:line="316" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="317" pos:column="3">pIn1<pos:position pos:line="317" pos:column="7"/></name><operator pos:line="317" pos:column="7">-&gt;<pos:position pos:line="317" pos:column="12"/></operator><name pos:line="317" pos:column="9">flags<pos:position pos:line="317" pos:column="14"/></name></name> <operator pos:line="317" pos:column="15">=<pos:position pos:line="317" pos:column="16"/></operator> <name pos:line="317" pos:column="17">MEM_Undefined<pos:position pos:line="317" pos:column="30"/></name></expr>;<pos:position pos:line="317" pos:column="31"/></expr_stmt>
  <break pos:line="318" pos:column="3">break;<pos:position pos:line="318" pos:column="9"/></break>
}<pos:position pos:line="319" pos:column="2"/></block>

<comment type="block" pos:line="321" pos:column="1">/* Opcode:  Yield P1 P2 * * *
**
** Swap the program counter with the value in register P1.  This
** has the effect of yielding to a coroutine.
**
** If the coroutine that is launched by this instruction ends with
** Yield or Return then continue to the next instruction.  But if
** the coroutine launched by this instruction ends with
** EndCoroutine, then jump to P2 rather than continuing with the
** next instruction.
**
** See also: InitCoroutine
*/</comment>
<case pos:line="334" pos:column="1">case <expr><name pos:line="334" pos:column="6">OP_Yield<pos:position pos:line="334" pos:column="14"/></name></expr>:<pos:position pos:line="334" pos:column="15"/></case> <block pos:line="334" pos:column="16">{            <comment type="block" pos:line="334" pos:column="29">/* in1, jump */</comment>
  <decl_stmt><decl><type><name pos:line="335" pos:column="3">int<pos:position pos:line="335" pos:column="6"/></name></type> <name pos:line="335" pos:column="7">pcDest<pos:position pos:line="335" pos:column="13"/></name></decl>;<pos:position pos:line="335" pos:column="14"/></decl_stmt>
  <expr_stmt><expr><name pos:line="336" pos:column="3">pIn1<pos:position pos:line="336" pos:column="7"/></name> <operator pos:line="336" pos:column="8">=<pos:position pos:line="336" pos:column="9"/></operator> <operator pos:line="336" pos:column="10">&amp;<pos:position pos:line="336" pos:column="15"/></operator><name><name pos:line="336" pos:column="11">aMem<pos:position pos:line="336" pos:column="15"/></name><index pos:line="336" pos:column="15">[<expr><name><name pos:line="336" pos:column="16">pOp<pos:position pos:line="336" pos:column="19"/></name><operator pos:line="336" pos:column="19">-&gt;<pos:position pos:line="336" pos:column="24"/></operator><name pos:line="336" pos:column="21">p1<pos:position pos:line="336" pos:column="23"/></name></name></expr>]<pos:position pos:line="336" pos:column="24"/></index></name></expr>;<pos:position pos:line="336" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="337" pos:column="3">assert<pos:position pos:line="337" pos:column="9"/></name><argument_list pos:line="337" pos:column="9">( <argument><expr><call><name pos:line="337" pos:column="11">VdbeMemDynamic<pos:position pos:line="337" pos:column="25"/></name><argument_list pos:line="337" pos:column="25">(<argument><expr><name pos:line="337" pos:column="26">pIn1<pos:position pos:line="337" pos:column="30"/></name></expr></argument>)<pos:position pos:line="337" pos:column="31"/></argument_list></call><operator pos:line="337" pos:column="31">==<pos:position pos:line="337" pos:column="33"/></operator><literal type="number" pos:line="337" pos:column="33">0<pos:position pos:line="337" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="337" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="338" pos:column="3">pIn1<pos:position pos:line="338" pos:column="7"/></name><operator pos:line="338" pos:column="7">-&gt;<pos:position pos:line="338" pos:column="12"/></operator><name pos:line="338" pos:column="9">flags<pos:position pos:line="338" pos:column="14"/></name></name> <operator pos:line="338" pos:column="15">=<pos:position pos:line="338" pos:column="16"/></operator> <name pos:line="338" pos:column="17">MEM_Int<pos:position pos:line="338" pos:column="24"/></name></expr>;<pos:position pos:line="338" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="339" pos:column="3">pcDest<pos:position pos:line="339" pos:column="9"/></name> <operator pos:line="339" pos:column="10">=<pos:position pos:line="339" pos:column="11"/></operator> <operator pos:line="339" pos:column="12">(<pos:position pos:line="339" pos:column="13"/></operator><name pos:line="339" pos:column="13">int<pos:position pos:line="339" pos:column="16"/></name><operator pos:line="339" pos:column="16">)<pos:position pos:line="339" pos:column="17"/></operator><name><name pos:line="339" pos:column="17">pIn1<pos:position pos:line="339" pos:column="21"/></name><operator pos:line="339" pos:column="21">-&gt;<pos:position pos:line="339" pos:column="26"/></operator><name pos:line="339" pos:column="23">u<pos:position pos:line="339" pos:column="24"/></name><operator pos:line="339" pos:column="24">.<pos:position pos:line="339" pos:column="25"/></operator><name pos:line="339" pos:column="25">i<pos:position pos:line="339" pos:column="26"/></name></name></expr>;<pos:position pos:line="339" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="340" pos:column="3">pIn1<pos:position pos:line="340" pos:column="7"/></name><operator pos:line="340" pos:column="7">-&gt;<pos:position pos:line="340" pos:column="12"/></operator><name pos:line="340" pos:column="9">u<pos:position pos:line="340" pos:column="10"/></name><operator pos:line="340" pos:column="10">.<pos:position pos:line="340" pos:column="11"/></operator><name pos:line="340" pos:column="11">i<pos:position pos:line="340" pos:column="12"/></name></name> <operator pos:line="340" pos:column="13">=<pos:position pos:line="340" pos:column="14"/></operator> <call pos:line="340" pos:column="15">(<name pos:line="340" pos:column="16">int<pos:position pos:line="340" pos:column="19"/></name>)<argument_list pos:line="340" pos:column="20">(<argument><expr><name pos:line="340" pos:column="21">pOp<pos:position pos:line="340" pos:column="24"/></name> <operator pos:line="340" pos:column="25">-<pos:position pos:line="340" pos:column="26"/></operator> <name pos:line="340" pos:column="27">aOp<pos:position pos:line="340" pos:column="30"/></name></expr></argument>)<pos:position pos:line="340" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="340" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="341" pos:column="3">REGISTER_TRACE<pos:position pos:line="341" pos:column="17"/></name><argument_list pos:line="341" pos:column="17">(<argument><expr><name><name pos:line="341" pos:column="18">pOp<pos:position pos:line="341" pos:column="21"/></name><operator pos:line="341" pos:column="21">-&gt;<pos:position pos:line="341" pos:column="26"/></operator><name pos:line="341" pos:column="23">p1<pos:position pos:line="341" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="341" pos:column="27">pIn1<pos:position pos:line="341" pos:column="31"/></name></expr></argument>)<pos:position pos:line="341" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="342" pos:column="3">pOp<pos:position pos:line="342" pos:column="6"/></name> <operator pos:line="342" pos:column="7">=<pos:position pos:line="342" pos:column="8"/></operator> <operator pos:line="342" pos:column="9">&amp;<pos:position pos:line="342" pos:column="14"/></operator><name><name pos:line="342" pos:column="10">aOp<pos:position pos:line="342" pos:column="13"/></name><index pos:line="342" pos:column="13">[<expr><name pos:line="342" pos:column="14">pcDest<pos:position pos:line="342" pos:column="20"/></name></expr>]<pos:position pos:line="342" pos:column="21"/></index></name></expr>;<pos:position pos:line="342" pos:column="22"/></expr_stmt>
  <break pos:line="343" pos:column="3">break;<pos:position pos:line="343" pos:column="9"/></break>
}<pos:position pos:line="344" pos:column="2"/></block>

<comment type="block" pos:line="346" pos:column="1">/* Opcode:  HaltIfNull  P1 P2 P3 P4 P5
** Synopsis: if r[P3]=null halt
**
** Check the value in register P3.  If it is NULL then Halt using
** parameter P1, P2, and P4 as if this were a Halt instruction.  If the
** value in register P3 is not NULL, then this routine is a no-op.
** The P5 parameter should be 1.
*/</comment>
<case pos:line="354" pos:column="1">case <expr><name pos:line="354" pos:column="6">OP_HaltIfNull<pos:position pos:line="354" pos:column="19"/></name></expr>:<pos:position pos:line="354" pos:column="20"/></case> <block pos:line="354" pos:column="21">{      <comment type="block" pos:line="354" pos:column="28">/* in3 */</comment>
  <expr_stmt><expr><name pos:line="355" pos:column="3">pIn3<pos:position pos:line="355" pos:column="7"/></name> <operator pos:line="355" pos:column="8">=<pos:position pos:line="355" pos:column="9"/></operator> <operator pos:line="355" pos:column="10">&amp;<pos:position pos:line="355" pos:column="15"/></operator><name><name pos:line="355" pos:column="11">aMem<pos:position pos:line="355" pos:column="15"/></name><index pos:line="355" pos:column="15">[<expr><name><name pos:line="355" pos:column="16">pOp<pos:position pos:line="355" pos:column="19"/></name><operator pos:line="355" pos:column="19">-&gt;<pos:position pos:line="355" pos:column="24"/></operator><name pos:line="355" pos:column="21">p3<pos:position pos:line="355" pos:column="23"/></name></name></expr>]<pos:position pos:line="355" pos:column="24"/></index></name></expr>;<pos:position pos:line="355" pos:column="25"/></expr_stmt>
  <if pos:line="356" pos:column="3">if<condition pos:line="356" pos:column="5">( <expr><operator pos:line="356" pos:column="7">(<pos:position pos:line="356" pos:column="8"/></operator><name><name pos:line="356" pos:column="8">pIn3<pos:position pos:line="356" pos:column="12"/></name><operator pos:line="356" pos:column="12">-&gt;<pos:position pos:line="356" pos:column="17"/></operator><name pos:line="356" pos:column="14">flags<pos:position pos:line="356" pos:column="19"/></name></name> <operator pos:line="356" pos:column="20">&amp;<pos:position pos:line="356" pos:column="25"/></operator> <name pos:line="356" pos:column="22">MEM_Null<pos:position pos:line="356" pos:column="30"/></name><operator pos:line="356" pos:column="30">)<pos:position pos:line="356" pos:column="31"/></operator><operator pos:line="356" pos:column="31">==<pos:position pos:line="356" pos:column="33"/></operator><literal type="number" pos:line="356" pos:column="33">0<pos:position pos:line="356" pos:column="34"/></literal></expr> )<pos:position pos:line="356" pos:column="36"/></condition><then pos:line="356" pos:column="36"> <block type="pseudo"><break pos:line="356" pos:column="37">break;<pos:position pos:line="356" pos:column="43"/></break></block></then></if>
  <comment type="block" pos:line="357" pos:column="3">/* Fall through into OP_Halt */</comment>
}<pos:position pos:line="358" pos:column="2"/></block>

<comment type="block" pos:line="360" pos:column="1">/* Opcode:  Halt P1 P2 * P4 P5
**
** Exit immediately.  All open cursors, etc are closed
** automatically.
**
** P1 is the result code returned by sqlite3_exec(), sqlite3_reset(),
** or sqlite3_finalize().  For a normal halt, this should be SQLITE_OK (0).
** For errors, it can be some other value.  If P1!=0 then P2 will determine
** whether or not to rollback the current transaction.  Do not rollback
** if P2==OE_Fail. Do the rollback if P2==OE_Rollback.  If P2==OE_Abort,
** then back out all changes that have occurred during this execution of the
** VDBE, but do not rollback the transaction. 
**
** If P4 is not null then it is an error message string.
**
** P5 is a value between 0 and 4, inclusive, that modifies the P4 string.
**
**    0:  (no change)
**    1:  NOT NULL contraint failed: P4
**    2:  UNIQUE constraint failed: P4
**    3:  CHECK constraint failed: P4
**    4:  FOREIGN KEY constraint failed: P4
**
** If P5 is not zero and P4 is NULL, then everything after the ":" is
** omitted.
**
** There is an implied "Halt 0 0 0" instruction inserted at the very end of
** every program.  So a jump past the last instruction of the program
** is the same as executing Halt.
*/</comment>
<case pos:line="390" pos:column="1">case <expr><name pos:line="390" pos:column="6">OP_Halt<pos:position pos:line="390" pos:column="13"/></name></expr>:<pos:position pos:line="390" pos:column="14"/></case> <block pos:line="390" pos:column="15">{
  <decl_stmt><decl><type><name pos:line="391" pos:column="3">VdbeFrame<pos:position pos:line="391" pos:column="12"/></name> <modifier pos:line="391" pos:column="13">*<pos:position pos:line="391" pos:column="14"/></modifier></type><name pos:line="391" pos:column="14">pFrame<pos:position pos:line="391" pos:column="20"/></name></decl>;<pos:position pos:line="391" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="392" pos:column="3">int<pos:position pos:line="392" pos:column="6"/></name></type> <name pos:line="392" pos:column="7">pcx<pos:position pos:line="392" pos:column="10"/></name></decl>;<pos:position pos:line="392" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="394" pos:column="3">pcx<pos:position pos:line="394" pos:column="6"/></name> <operator pos:line="394" pos:column="7">=<pos:position pos:line="394" pos:column="8"/></operator> <call pos:line="394" pos:column="9">(<name pos:line="394" pos:column="10">int<pos:position pos:line="394" pos:column="13"/></name>)<argument_list pos:line="394" pos:column="14">(<argument><expr><name pos:line="394" pos:column="15">pOp<pos:position pos:line="394" pos:column="18"/></name> <operator pos:line="394" pos:column="19">-<pos:position pos:line="394" pos:column="20"/></operator> <name pos:line="394" pos:column="21">aOp<pos:position pos:line="394" pos:column="24"/></name></expr></argument>)<pos:position pos:line="394" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="394" pos:column="26"/></expr_stmt>
  <if pos:line="395" pos:column="3">if<condition pos:line="395" pos:column="5">( <expr><name><name pos:line="395" pos:column="7">pOp<pos:position pos:line="395" pos:column="10"/></name><operator pos:line="395" pos:column="10">-&gt;<pos:position pos:line="395" pos:column="15"/></operator><name pos:line="395" pos:column="12">p1<pos:position pos:line="395" pos:column="14"/></name></name><operator pos:line="395" pos:column="14">==<pos:position pos:line="395" pos:column="16"/></operator><name pos:line="395" pos:column="16">SQLITE_OK<pos:position pos:line="395" pos:column="25"/></name> <operator pos:line="395" pos:column="26">&amp;&amp;<pos:position pos:line="395" pos:column="36"/></operator> <name><name pos:line="395" pos:column="29">p<pos:position pos:line="395" pos:column="30"/></name><operator pos:line="395" pos:column="30">-&gt;<pos:position pos:line="395" pos:column="35"/></operator><name pos:line="395" pos:column="32">pFrame<pos:position pos:line="395" pos:column="38"/></name></name></expr> )<pos:position pos:line="395" pos:column="40"/></condition><then><block pos:line="395" pos:column="40">{
    <comment type="block" pos:line="396" pos:column="5">/* Halt the sub-program. Return control to the parent frame. */</comment>
    <expr_stmt><expr><name pos:line="397" pos:column="5">pFrame<pos:position pos:line="397" pos:column="11"/></name> <operator pos:line="397" pos:column="12">=<pos:position pos:line="397" pos:column="13"/></operator> <name><name pos:line="397" pos:column="14">p<pos:position pos:line="397" pos:column="15"/></name><operator pos:line="397" pos:column="15">-&gt;<pos:position pos:line="397" pos:column="20"/></operator><name pos:line="397" pos:column="17">pFrame<pos:position pos:line="397" pos:column="23"/></name></name></expr>;<pos:position pos:line="397" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="398" pos:column="5">p<pos:position pos:line="398" pos:column="6"/></name><operator pos:line="398" pos:column="6">-&gt;<pos:position pos:line="398" pos:column="11"/></operator><name pos:line="398" pos:column="8">pFrame<pos:position pos:line="398" pos:column="14"/></name></name> <operator pos:line="398" pos:column="15">=<pos:position pos:line="398" pos:column="16"/></operator> <name><name pos:line="398" pos:column="17">pFrame<pos:position pos:line="398" pos:column="23"/></name><operator pos:line="398" pos:column="23">-&gt;<pos:position pos:line="398" pos:column="28"/></operator><name pos:line="398" pos:column="25">pParent<pos:position pos:line="398" pos:column="32"/></name></name></expr>;<pos:position pos:line="398" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="399" pos:column="5">p<pos:position pos:line="399" pos:column="6"/></name><operator pos:line="399" pos:column="6">-&gt;<pos:position pos:line="399" pos:column="11"/></operator><name pos:line="399" pos:column="8">nFrame<pos:position pos:line="399" pos:column="14"/></name></name><operator pos:line="399" pos:column="14">--<pos:position pos:line="399" pos:column="16"/></operator></expr>;<pos:position pos:line="399" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="400" pos:column="5">sqlite3VdbeSetChanges<pos:position pos:line="400" pos:column="26"/></name><argument_list pos:line="400" pos:column="26">(<argument><expr><name pos:line="400" pos:column="27">db<pos:position pos:line="400" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="400" pos:column="31">p<pos:position pos:line="400" pos:column="32"/></name><operator pos:line="400" pos:column="32">-&gt;<pos:position pos:line="400" pos:column="37"/></operator><name pos:line="400" pos:column="34">nChange<pos:position pos:line="400" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="400" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="400" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="401" pos:column="5">pcx<pos:position pos:line="401" pos:column="8"/></name> <operator pos:line="401" pos:column="9">=<pos:position pos:line="401" pos:column="10"/></operator> <call><name pos:line="401" pos:column="11">sqlite3VdbeFrameRestore<pos:position pos:line="401" pos:column="34"/></name><argument_list pos:line="401" pos:column="34">(<argument><expr><name pos:line="401" pos:column="35">pFrame<pos:position pos:line="401" pos:column="41"/></name></expr></argument>)<pos:position pos:line="401" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="401" pos:column="43"/></expr_stmt>
    <if pos:line="402" pos:column="5">if<condition pos:line="402" pos:column="7">( <expr><name><name pos:line="402" pos:column="9">pOp<pos:position pos:line="402" pos:column="12"/></name><operator pos:line="402" pos:column="12">-&gt;<pos:position pos:line="402" pos:column="17"/></operator><name pos:line="402" pos:column="14">p2<pos:position pos:line="402" pos:column="16"/></name></name><operator pos:line="402" pos:column="16">==<pos:position pos:line="402" pos:column="18"/></operator><name pos:line="402" pos:column="18">OE_Ignore<pos:position pos:line="402" pos:column="27"/></name></expr> )<pos:position pos:line="402" pos:column="29"/></condition><then><block pos:line="402" pos:column="29">{
      <comment type="block" pos:line="403" pos:column="7">/* Instruction pcx is the OP_Program that invoked the sub-program 
      ** currently being halted. If the p2 instruction of this OP_Halt
      ** instruction is set to OE_Ignore, then the sub-program is throwing
      ** an IGNORE exception. In this case jump to the address specified
      ** as the p2 of the calling OP_Program.  */</comment>
      <expr_stmt><expr><name pos:line="408" pos:column="7">pcx<pos:position pos:line="408" pos:column="10"/></name> <operator pos:line="408" pos:column="11">=<pos:position pos:line="408" pos:column="12"/></operator> <name><name pos:line="408" pos:column="13">p<pos:position pos:line="408" pos:column="14"/></name><operator pos:line="408" pos:column="14">-&gt;<pos:position pos:line="408" pos:column="19"/></operator><name pos:line="408" pos:column="16">aOp<pos:position pos:line="408" pos:column="19"/></name><index pos:line="408" pos:column="19">[<expr><name pos:line="408" pos:column="20">pcx<pos:position pos:line="408" pos:column="23"/></name></expr>]<pos:position pos:line="408" pos:column="24"/></index></name><operator pos:line="408" pos:column="24">.<pos:position pos:line="408" pos:column="25"/></operator><name pos:line="408" pos:column="25">p2<pos:position pos:line="408" pos:column="27"/></name><operator pos:line="408" pos:column="27">-<pos:position pos:line="408" pos:column="28"/></operator><literal type="number" pos:line="408" pos:column="28">1<pos:position pos:line="408" pos:column="29"/></literal></expr>;<pos:position pos:line="408" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="409" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="410" pos:column="5">aOp<pos:position pos:line="410" pos:column="8"/></name> <operator pos:line="410" pos:column="9">=<pos:position pos:line="410" pos:column="10"/></operator> <name><name pos:line="410" pos:column="11">p<pos:position pos:line="410" pos:column="12"/></name><operator pos:line="410" pos:column="12">-&gt;<pos:position pos:line="410" pos:column="17"/></operator><name pos:line="410" pos:column="14">aOp<pos:position pos:line="410" pos:column="17"/></name></name></expr>;<pos:position pos:line="410" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="411" pos:column="5">aMem<pos:position pos:line="411" pos:column="9"/></name> <operator pos:line="411" pos:column="10">=<pos:position pos:line="411" pos:column="11"/></operator> <name><name pos:line="411" pos:column="12">p<pos:position pos:line="411" pos:column="13"/></name><operator pos:line="411" pos:column="13">-&gt;<pos:position pos:line="411" pos:column="18"/></operator><name pos:line="411" pos:column="15">aMem<pos:position pos:line="411" pos:column="19"/></name></name></expr>;<pos:position pos:line="411" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="412" pos:column="5">pOp<pos:position pos:line="412" pos:column="8"/></name> <operator pos:line="412" pos:column="9">=<pos:position pos:line="412" pos:column="10"/></operator> <operator pos:line="412" pos:column="11">&amp;<pos:position pos:line="412" pos:column="16"/></operator><name><name pos:line="412" pos:column="12">aOp<pos:position pos:line="412" pos:column="15"/></name><index pos:line="412" pos:column="15">[<expr><name pos:line="412" pos:column="16">pcx<pos:position pos:line="412" pos:column="19"/></name></expr>]<pos:position pos:line="412" pos:column="20"/></index></name></expr>;<pos:position pos:line="412" pos:column="21"/></expr_stmt>
    <break pos:line="413" pos:column="5">break;<pos:position pos:line="413" pos:column="11"/></break>
  }<pos:position pos:line="414" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="415" pos:column="3">p<pos:position pos:line="415" pos:column="4"/></name><operator pos:line="415" pos:column="4">-&gt;<pos:position pos:line="415" pos:column="9"/></operator><name pos:line="415" pos:column="6">rc<pos:position pos:line="415" pos:column="8"/></name></name> <operator pos:line="415" pos:column="9">=<pos:position pos:line="415" pos:column="10"/></operator> <name><name pos:line="415" pos:column="11">pOp<pos:position pos:line="415" pos:column="14"/></name><operator pos:line="415" pos:column="14">-&gt;<pos:position pos:line="415" pos:column="19"/></operator><name pos:line="415" pos:column="16">p1<pos:position pos:line="415" pos:column="18"/></name></name></expr>;<pos:position pos:line="415" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="416" pos:column="3">p<pos:position pos:line="416" pos:column="4"/></name><operator pos:line="416" pos:column="4">-&gt;<pos:position pos:line="416" pos:column="9"/></operator><name pos:line="416" pos:column="6">errorAction<pos:position pos:line="416" pos:column="17"/></name></name> <operator pos:line="416" pos:column="18">=<pos:position pos:line="416" pos:column="19"/></operator> <operator pos:line="416" pos:column="20">(<pos:position pos:line="416" pos:column="21"/></operator><name pos:line="416" pos:column="21">u8<pos:position pos:line="416" pos:column="23"/></name><operator pos:line="416" pos:column="23">)<pos:position pos:line="416" pos:column="24"/></operator><name><name pos:line="416" pos:column="24">pOp<pos:position pos:line="416" pos:column="27"/></name><operator pos:line="416" pos:column="27">-&gt;<pos:position pos:line="416" pos:column="32"/></operator><name pos:line="416" pos:column="29">p2<pos:position pos:line="416" pos:column="31"/></name></name></expr>;<pos:position pos:line="416" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="417" pos:column="3">p<pos:position pos:line="417" pos:column="4"/></name><operator pos:line="417" pos:column="4">-&gt;<pos:position pos:line="417" pos:column="9"/></operator><name pos:line="417" pos:column="6">pc<pos:position pos:line="417" pos:column="8"/></name></name> <operator pos:line="417" pos:column="9">=<pos:position pos:line="417" pos:column="10"/></operator> <name pos:line="417" pos:column="11">pcx<pos:position pos:line="417" pos:column="14"/></name></expr>;<pos:position pos:line="417" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="418" pos:column="3">assert<pos:position pos:line="418" pos:column="9"/></name><argument_list pos:line="418" pos:column="9">( <argument><expr><name><name pos:line="418" pos:column="11">pOp<pos:position pos:line="418" pos:column="14"/></name><operator pos:line="418" pos:column="14">-&gt;<pos:position pos:line="418" pos:column="19"/></operator><name pos:line="418" pos:column="16">p5<pos:position pos:line="418" pos:column="18"/></name></name><operator pos:line="418" pos:column="18">&lt;=<pos:position pos:line="418" pos:column="23"/></operator><literal type="number" pos:line="418" pos:column="20">4<pos:position pos:line="418" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="418" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="418" pos:column="24"/></expr_stmt>
  <if pos:line="419" pos:column="3">if<condition pos:line="419" pos:column="5">( <expr><name><name pos:line="419" pos:column="7">p<pos:position pos:line="419" pos:column="8"/></name><operator pos:line="419" pos:column="8">-&gt;<pos:position pos:line="419" pos:column="13"/></operator><name pos:line="419" pos:column="10">rc<pos:position pos:line="419" pos:column="12"/></name></name></expr> )<pos:position pos:line="419" pos:column="14"/></condition><then><block pos:line="419" pos:column="14">{
    <if pos:line="420" pos:column="5">if<condition pos:line="420" pos:column="7">( <expr><name><name pos:line="420" pos:column="9">pOp<pos:position pos:line="420" pos:column="12"/></name><operator pos:line="420" pos:column="12">-&gt;<pos:position pos:line="420" pos:column="17"/></operator><name pos:line="420" pos:column="14">p5<pos:position pos:line="420" pos:column="16"/></name></name></expr> )<pos:position pos:line="420" pos:column="18"/></condition><then><block pos:line="420" pos:column="18">{
      <decl_stmt><decl><specifier pos:line="421" pos:column="7">static<pos:position pos:line="421" pos:column="13"/></specifier> <type><specifier pos:line="421" pos:column="14">const<pos:position pos:line="421" pos:column="19"/></specifier> <name pos:line="421" pos:column="20">char<pos:position pos:line="421" pos:column="24"/></name> <modifier pos:line="421" pos:column="25">*<pos:position pos:line="421" pos:column="26"/></modifier> <specifier pos:line="421" pos:column="27">const<pos:position pos:line="421" pos:column="32"/></specifier></type> <name><name pos:line="421" pos:column="33">azType<pos:position pos:line="421" pos:column="39"/></name><index pos:line="421" pos:column="39">[]<pos:position pos:line="421" pos:column="41"/></index></name> <init pos:line="421" pos:column="42">= <expr><block pos:line="421" pos:column="44">{ <expr><literal type="string" pos:line="421" pos:column="46">"NOT NULL"<pos:position pos:line="421" pos:column="56"/></literal></expr>, <expr><literal type="string" pos:line="421" pos:column="58">"UNIQUE"<pos:position pos:line="421" pos:column="66"/></literal></expr>, <expr><literal type="string" pos:line="421" pos:column="68">"CHECK"<pos:position pos:line="421" pos:column="75"/></literal></expr>,
                                             <expr><literal type="string" pos:line="422" pos:column="46">"FOREIGN KEY"<pos:position pos:line="422" pos:column="59"/></literal></expr> }<pos:position pos:line="422" pos:column="61"/></block></expr></init></decl>;<pos:position pos:line="422" pos:column="62"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="423" pos:column="7">testcase<pos:position pos:line="423" pos:column="15"/></name><argument_list pos:line="423" pos:column="15">( <argument><expr><name><name pos:line="423" pos:column="17">pOp<pos:position pos:line="423" pos:column="20"/></name><operator pos:line="423" pos:column="20">-&gt;<pos:position pos:line="423" pos:column="25"/></operator><name pos:line="423" pos:column="22">p5<pos:position pos:line="423" pos:column="24"/></name></name><operator pos:line="423" pos:column="24">==<pos:position pos:line="423" pos:column="26"/></operator><literal type="number" pos:line="423" pos:column="26">1<pos:position pos:line="423" pos:column="27"/></literal></expr></argument> )<pos:position pos:line="423" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="423" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="424" pos:column="7">testcase<pos:position pos:line="424" pos:column="15"/></name><argument_list pos:line="424" pos:column="15">( <argument><expr><name><name pos:line="424" pos:column="17">pOp<pos:position pos:line="424" pos:column="20"/></name><operator pos:line="424" pos:column="20">-&gt;<pos:position pos:line="424" pos:column="25"/></operator><name pos:line="424" pos:column="22">p5<pos:position pos:line="424" pos:column="24"/></name></name><operator pos:line="424" pos:column="24">==<pos:position pos:line="424" pos:column="26"/></operator><literal type="number" pos:line="424" pos:column="26">2<pos:position pos:line="424" pos:column="27"/></literal></expr></argument> )<pos:position pos:line="424" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="424" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="425" pos:column="7">testcase<pos:position pos:line="425" pos:column="15"/></name><argument_list pos:line="425" pos:column="15">( <argument><expr><name><name pos:line="425" pos:column="17">pOp<pos:position pos:line="425" pos:column="20"/></name><operator pos:line="425" pos:column="20">-&gt;<pos:position pos:line="425" pos:column="25"/></operator><name pos:line="425" pos:column="22">p5<pos:position pos:line="425" pos:column="24"/></name></name><operator pos:line="425" pos:column="24">==<pos:position pos:line="425" pos:column="26"/></operator><literal type="number" pos:line="425" pos:column="26">3<pos:position pos:line="425" pos:column="27"/></literal></expr></argument> )<pos:position pos:line="425" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="425" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="426" pos:column="7">testcase<pos:position pos:line="426" pos:column="15"/></name><argument_list pos:line="426" pos:column="15">( <argument><expr><name><name pos:line="426" pos:column="17">pOp<pos:position pos:line="426" pos:column="20"/></name><operator pos:line="426" pos:column="20">-&gt;<pos:position pos:line="426" pos:column="25"/></operator><name pos:line="426" pos:column="22">p5<pos:position pos:line="426" pos:column="24"/></name></name><operator pos:line="426" pos:column="24">==<pos:position pos:line="426" pos:column="26"/></operator><literal type="number" pos:line="426" pos:column="26">4<pos:position pos:line="426" pos:column="27"/></literal></expr></argument> )<pos:position pos:line="426" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="426" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="427" pos:column="7">sqlite3VdbeError<pos:position pos:line="427" pos:column="23"/></name><argument_list pos:line="427" pos:column="23">(<argument><expr><name pos:line="427" pos:column="24">p<pos:position pos:line="427" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="427" pos:column="27">"%s constraint failed"<pos:position pos:line="427" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="427" pos:column="51">azType<pos:position pos:line="427" pos:column="57"/></name><index pos:line="427" pos:column="57">[<expr><name><name pos:line="427" pos:column="58">pOp<pos:position pos:line="427" pos:column="61"/></name><operator pos:line="427" pos:column="61">-&gt;<pos:position pos:line="427" pos:column="66"/></operator><name pos:line="427" pos:column="63">p5<pos:position pos:line="427" pos:column="65"/></name></name><operator pos:line="427" pos:column="65">-<pos:position pos:line="427" pos:column="66"/></operator><literal type="number" pos:line="427" pos:column="66">1<pos:position pos:line="427" pos:column="67"/></literal></expr>]<pos:position pos:line="427" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="427" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="427" pos:column="70"/></expr_stmt>
      <if pos:line="428" pos:column="7">if<condition pos:line="428" pos:column="9">( <expr><name><name pos:line="428" pos:column="11">pOp<pos:position pos:line="428" pos:column="14"/></name><operator pos:line="428" pos:column="14">-&gt;<pos:position pos:line="428" pos:column="19"/></operator><name pos:line="428" pos:column="16">p4<pos:position pos:line="428" pos:column="18"/></name><operator pos:line="428" pos:column="18">.<pos:position pos:line="428" pos:column="19"/></operator><name pos:line="428" pos:column="19">z<pos:position pos:line="428" pos:column="20"/></name></name></expr> )<pos:position pos:line="428" pos:column="22"/></condition><then><block pos:line="428" pos:column="22">{
        <expr_stmt><expr><name><name pos:line="429" pos:column="9">p<pos:position pos:line="429" pos:column="10"/></name><operator pos:line="429" pos:column="10">-&gt;<pos:position pos:line="429" pos:column="15"/></operator><name pos:line="429" pos:column="12">zErrMsg<pos:position pos:line="429" pos:column="19"/></name></name> <operator pos:line="429" pos:column="20">=<pos:position pos:line="429" pos:column="21"/></operator> <call><name pos:line="429" pos:column="22">sqlite3MPrintf<pos:position pos:line="429" pos:column="36"/></name><argument_list pos:line="429" pos:column="36">(<argument><expr><name pos:line="429" pos:column="37">db<pos:position pos:line="429" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="429" pos:column="41">"%z: %s"<pos:position pos:line="429" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="429" pos:column="51">p<pos:position pos:line="429" pos:column="52"/></name><operator pos:line="429" pos:column="52">-&gt;<pos:position pos:line="429" pos:column="57"/></operator><name pos:line="429" pos:column="54">zErrMsg<pos:position pos:line="429" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="429" pos:column="63">pOp<pos:position pos:line="429" pos:column="66"/></name><operator pos:line="429" pos:column="66">-&gt;<pos:position pos:line="429" pos:column="71"/></operator><name pos:line="429" pos:column="68">p4<pos:position pos:line="429" pos:column="70"/></name><operator pos:line="429" pos:column="70">.<pos:position pos:line="429" pos:column="71"/></operator><name pos:line="429" pos:column="71">z<pos:position pos:line="429" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="429" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="429" pos:column="74"/></expr_stmt>
      }<pos:position pos:line="430" pos:column="8"/></block></then></if>
    }<pos:position pos:line="431" pos:column="6"/></block></then><else pos:line="431" pos:column="6">else<block pos:line="431" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="432" pos:column="7">sqlite3VdbeError<pos:position pos:line="432" pos:column="23"/></name><argument_list pos:line="432" pos:column="23">(<argument><expr><name pos:line="432" pos:column="24">p<pos:position pos:line="432" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="432" pos:column="27">"%s"<pos:position pos:line="432" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="432" pos:column="33">pOp<pos:position pos:line="432" pos:column="36"/></name><operator pos:line="432" pos:column="36">-&gt;<pos:position pos:line="432" pos:column="41"/></operator><name pos:line="432" pos:column="38">p4<pos:position pos:line="432" pos:column="40"/></name><operator pos:line="432" pos:column="40">.<pos:position pos:line="432" pos:column="41"/></operator><name pos:line="432" pos:column="41">z<pos:position pos:line="432" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="432" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="432" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="433" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="434" pos:column="5">sqlite3_log<pos:position pos:line="434" pos:column="16"/></name><argument_list pos:line="434" pos:column="16">(<argument><expr><name><name pos:line="434" pos:column="17">pOp<pos:position pos:line="434" pos:column="20"/></name><operator pos:line="434" pos:column="20">-&gt;<pos:position pos:line="434" pos:column="25"/></operator><name pos:line="434" pos:column="22">p1<pos:position pos:line="434" pos:column="24"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="434" pos:column="26">"abort at %d in [%s]: %s"<pos:position pos:line="434" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="434" pos:column="53">pcx<pos:position pos:line="434" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="434" pos:column="58">p<pos:position pos:line="434" pos:column="59"/></name><operator pos:line="434" pos:column="59">-&gt;<pos:position pos:line="434" pos:column="64"/></operator><name pos:line="434" pos:column="61">zSql<pos:position pos:line="434" pos:column="65"/></name></name></expr></argument>, <argument><expr><name><name pos:line="434" pos:column="67">p<pos:position pos:line="434" pos:column="68"/></name><operator pos:line="434" pos:column="68">-&gt;<pos:position pos:line="434" pos:column="73"/></operator><name pos:line="434" pos:column="70">zErrMsg<pos:position pos:line="434" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="434" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="434" pos:column="79"/></expr_stmt>
  }<pos:position pos:line="435" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="436" pos:column="3">rc<pos:position pos:line="436" pos:column="5"/></name> <operator pos:line="436" pos:column="6">=<pos:position pos:line="436" pos:column="7"/></operator> <call><name pos:line="436" pos:column="8">sqlite3VdbeHalt<pos:position pos:line="436" pos:column="23"/></name><argument_list pos:line="436" pos:column="23">(<argument><expr><name pos:line="436" pos:column="24">p<pos:position pos:line="436" pos:column="25"/></name></expr></argument>)<pos:position pos:line="436" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="436" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="437" pos:column="3">assert<pos:position pos:line="437" pos:column="9"/></name><argument_list pos:line="437" pos:column="9">( <argument><expr><name pos:line="437" pos:column="11">rc<pos:position pos:line="437" pos:column="13"/></name><operator pos:line="437" pos:column="13">==<pos:position pos:line="437" pos:column="15"/></operator><name pos:line="437" pos:column="15">SQLITE_BUSY<pos:position pos:line="437" pos:column="26"/></name> <operator pos:line="437" pos:column="27">||<pos:position pos:line="437" pos:column="29"/></operator> <name pos:line="437" pos:column="30">rc<pos:position pos:line="437" pos:column="32"/></name><operator pos:line="437" pos:column="32">==<pos:position pos:line="437" pos:column="34"/></operator><name pos:line="437" pos:column="34">SQLITE_OK<pos:position pos:line="437" pos:column="43"/></name> <operator pos:line="437" pos:column="44">||<pos:position pos:line="437" pos:column="46"/></operator> <name pos:line="437" pos:column="47">rc<pos:position pos:line="437" pos:column="49"/></name><operator pos:line="437" pos:column="49">==<pos:position pos:line="437" pos:column="51"/></operator><name pos:line="437" pos:column="51">SQLITE_ERROR<pos:position pos:line="437" pos:column="63"/></name></expr></argument> )<pos:position pos:line="437" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="437" pos:column="66"/></expr_stmt>
  <if pos:line="438" pos:column="3">if<condition pos:line="438" pos:column="5">( <expr><name pos:line="438" pos:column="7">rc<pos:position pos:line="438" pos:column="9"/></name><operator pos:line="438" pos:column="9">==<pos:position pos:line="438" pos:column="11"/></operator><name pos:line="438" pos:column="11">SQLITE_BUSY<pos:position pos:line="438" pos:column="22"/></name></expr> )<pos:position pos:line="438" pos:column="24"/></condition><then><block pos:line="438" pos:column="24">{
    <expr_stmt><expr><name><name pos:line="439" pos:column="5">p<pos:position pos:line="439" pos:column="6"/></name><operator pos:line="439" pos:column="6">-&gt;<pos:position pos:line="439" pos:column="11"/></operator><name pos:line="439" pos:column="8">rc<pos:position pos:line="439" pos:column="10"/></name></name> <operator pos:line="439" pos:column="11">=<pos:position pos:line="439" pos:column="12"/></operator> <name pos:line="439" pos:column="13">SQLITE_BUSY<pos:position pos:line="439" pos:column="24"/></name></expr>;<pos:position pos:line="439" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="440" pos:column="4"/></block></then><else pos:line="440" pos:column="4">else<block pos:line="440" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="441" pos:column="5">assert<pos:position pos:line="441" pos:column="11"/></name><argument_list pos:line="441" pos:column="11">( <argument><expr><name pos:line="441" pos:column="13">rc<pos:position pos:line="441" pos:column="15"/></name><operator pos:line="441" pos:column="15">==<pos:position pos:line="441" pos:column="17"/></operator><name pos:line="441" pos:column="17">SQLITE_OK<pos:position pos:line="441" pos:column="26"/></name> <operator pos:line="441" pos:column="27">||<pos:position pos:line="441" pos:column="29"/></operator> <operator pos:line="441" pos:column="30">(<pos:position pos:line="441" pos:column="31"/></operator><name><name pos:line="441" pos:column="31">p<pos:position pos:line="441" pos:column="32"/></name><operator pos:line="441" pos:column="32">-&gt;<pos:position pos:line="441" pos:column="37"/></operator><name pos:line="441" pos:column="34">rc<pos:position pos:line="441" pos:column="36"/></name></name><operator pos:line="441" pos:column="36">&amp;<pos:position pos:line="441" pos:column="41"/></operator><literal type="number" pos:line="441" pos:column="37">0xff<pos:position pos:line="441" pos:column="41"/></literal><operator pos:line="441" pos:column="41">)<pos:position pos:line="441" pos:column="42"/></operator><operator pos:line="441" pos:column="42">==<pos:position pos:line="441" pos:column="44"/></operator><name pos:line="441" pos:column="44">SQLITE_CONSTRAINT<pos:position pos:line="441" pos:column="61"/></name></expr></argument> )<pos:position pos:line="441" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="441" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="442" pos:column="5">assert<pos:position pos:line="442" pos:column="11"/></name><argument_list pos:line="442" pos:column="11">( <argument><expr><name pos:line="442" pos:column="13">rc<pos:position pos:line="442" pos:column="15"/></name><operator pos:line="442" pos:column="15">==<pos:position pos:line="442" pos:column="17"/></operator><name pos:line="442" pos:column="17">SQLITE_OK<pos:position pos:line="442" pos:column="26"/></name> <operator pos:line="442" pos:column="27">||<pos:position pos:line="442" pos:column="29"/></operator> <name><name pos:line="442" pos:column="30">db<pos:position pos:line="442" pos:column="32"/></name><operator pos:line="442" pos:column="32">-&gt;<pos:position pos:line="442" pos:column="37"/></operator><name pos:line="442" pos:column="34">nDeferredCons<pos:position pos:line="442" pos:column="47"/></name></name><operator pos:line="442" pos:column="47">&gt;<pos:position pos:line="442" pos:column="51"/></operator><literal type="number" pos:line="442" pos:column="48">0<pos:position pos:line="442" pos:column="49"/></literal> <operator pos:line="442" pos:column="50">||<pos:position pos:line="442" pos:column="52"/></operator> <name><name pos:line="442" pos:column="53">db<pos:position pos:line="442" pos:column="55"/></name><operator pos:line="442" pos:column="55">-&gt;<pos:position pos:line="442" pos:column="60"/></operator><name pos:line="442" pos:column="57">nDeferredImmCons<pos:position pos:line="442" pos:column="73"/></name></name><operator pos:line="442" pos:column="73">&gt;<pos:position pos:line="442" pos:column="77"/></operator><literal type="number" pos:line="442" pos:column="74">0<pos:position pos:line="442" pos:column="75"/></literal></expr></argument> )<pos:position pos:line="442" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="442" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><name pos:line="443" pos:column="5">rc<pos:position pos:line="443" pos:column="7"/></name> <operator pos:line="443" pos:column="8">=<pos:position pos:line="443" pos:column="9"/></operator> <ternary><condition><expr><name><name pos:line="443" pos:column="10">p<pos:position pos:line="443" pos:column="11"/></name><operator pos:line="443" pos:column="11">-&gt;<pos:position pos:line="443" pos:column="16"/></operator><name pos:line="443" pos:column="13">rc<pos:position pos:line="443" pos:column="15"/></name></name></expr> ?<pos:position pos:line="443" pos:column="17"/></condition><then pos:line="443" pos:column="17"> <expr><name pos:line="443" pos:column="18">SQLITE_ERROR<pos:position pos:line="443" pos:column="30"/></name></expr> <pos:position pos:line="443" pos:column="31"/></then><else pos:line="443" pos:column="31">: <expr><name pos:line="443" pos:column="33">SQLITE_DONE<pos:position pos:line="443" pos:column="44"/></name></expr></else></ternary></expr>;<pos:position pos:line="443" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="444" pos:column="4"/></block></else></if>
  <goto pos:line="445" pos:column="3">goto <name pos:line="445" pos:column="8">vdbe_return<pos:position pos:line="445" pos:column="19"/></name>;<pos:position pos:line="445" pos:column="20"/></goto>
}<pos:position pos:line="446" pos:column="2"/></block>

<comment type="block" pos:line="448" pos:column="1">/* Opcode: Integer P1 P2 * * *
** Synopsis: r[P2]=P1
**
** The 32-bit integer value P1 is written into register P2.
*/</comment>
<case pos:line="453" pos:column="1">case <expr><name pos:line="453" pos:column="6">OP_Integer<pos:position pos:line="453" pos:column="16"/></name></expr>:<pos:position pos:line="453" pos:column="17"/></case> <block pos:line="453" pos:column="18">{         <comment type="block" pos:line="453" pos:column="28">/* out2 */</comment>
  <expr_stmt><expr><name pos:line="454" pos:column="3">pOut<pos:position pos:line="454" pos:column="7"/></name> <operator pos:line="454" pos:column="8">=<pos:position pos:line="454" pos:column="9"/></operator> <call><name pos:line="454" pos:column="10">out2Prerelease<pos:position pos:line="454" pos:column="24"/></name><argument_list pos:line="454" pos:column="24">(<argument><expr><name pos:line="454" pos:column="25">p<pos:position pos:line="454" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="454" pos:column="28">pOp<pos:position pos:line="454" pos:column="31"/></name></expr></argument>)<pos:position pos:line="454" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="454" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="455" pos:column="3">pOut<pos:position pos:line="455" pos:column="7"/></name><operator pos:line="455" pos:column="7">-&gt;<pos:position pos:line="455" pos:column="12"/></operator><name pos:line="455" pos:column="9">u<pos:position pos:line="455" pos:column="10"/></name><operator pos:line="455" pos:column="10">.<pos:position pos:line="455" pos:column="11"/></operator><name pos:line="455" pos:column="11">i<pos:position pos:line="455" pos:column="12"/></name></name> <operator pos:line="455" pos:column="13">=<pos:position pos:line="455" pos:column="14"/></operator> <name><name pos:line="455" pos:column="15">pOp<pos:position pos:line="455" pos:column="18"/></name><operator pos:line="455" pos:column="18">-&gt;<pos:position pos:line="455" pos:column="23"/></operator><name pos:line="455" pos:column="20">p1<pos:position pos:line="455" pos:column="22"/></name></name></expr>;<pos:position pos:line="455" pos:column="23"/></expr_stmt>
  <break pos:line="456" pos:column="3">break;<pos:position pos:line="456" pos:column="9"/></break>
}<pos:position pos:line="457" pos:column="2"/></block>

<comment type="block" pos:line="459" pos:column="1">/* Opcode: Int64 * P2 * P4 *
** Synopsis: r[P2]=P4
**
** P4 is a pointer to a 64-bit integer value.
** Write that value into register P2.
*/</comment>
<case pos:line="465" pos:column="1">case <expr><name pos:line="465" pos:column="6">OP_Int64<pos:position pos:line="465" pos:column="14"/></name></expr>:<pos:position pos:line="465" pos:column="15"/></case> <block pos:line="465" pos:column="16">{           <comment type="block" pos:line="465" pos:column="28">/* out2 */</comment>
  <expr_stmt><expr><name pos:line="466" pos:column="3">pOut<pos:position pos:line="466" pos:column="7"/></name> <operator pos:line="466" pos:column="8">=<pos:position pos:line="466" pos:column="9"/></operator> <call><name pos:line="466" pos:column="10">out2Prerelease<pos:position pos:line="466" pos:column="24"/></name><argument_list pos:line="466" pos:column="24">(<argument><expr><name pos:line="466" pos:column="25">p<pos:position pos:line="466" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="466" pos:column="28">pOp<pos:position pos:line="466" pos:column="31"/></name></expr></argument>)<pos:position pos:line="466" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="466" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="467" pos:column="3">assert<pos:position pos:line="467" pos:column="9"/></name><argument_list pos:line="467" pos:column="9">( <argument><expr><name><name pos:line="467" pos:column="11">pOp<pos:position pos:line="467" pos:column="14"/></name><operator pos:line="467" pos:column="14">-&gt;<pos:position pos:line="467" pos:column="19"/></operator><name pos:line="467" pos:column="16">p4<pos:position pos:line="467" pos:column="18"/></name><operator pos:line="467" pos:column="18">.<pos:position pos:line="467" pos:column="19"/></operator><name pos:line="467" pos:column="19">pI64<pos:position pos:line="467" pos:column="23"/></name></name><operator pos:line="467" pos:column="23">!=<pos:position pos:line="467" pos:column="25"/></operator><literal type="number" pos:line="467" pos:column="25">0<pos:position pos:line="467" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="467" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="467" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="468" pos:column="3">pOut<pos:position pos:line="468" pos:column="7"/></name><operator pos:line="468" pos:column="7">-&gt;<pos:position pos:line="468" pos:column="12"/></operator><name pos:line="468" pos:column="9">u<pos:position pos:line="468" pos:column="10"/></name><operator pos:line="468" pos:column="10">.<pos:position pos:line="468" pos:column="11"/></operator><name pos:line="468" pos:column="11">i<pos:position pos:line="468" pos:column="12"/></name></name> <operator pos:line="468" pos:column="13">=<pos:position pos:line="468" pos:column="14"/></operator> <operator pos:line="468" pos:column="15">*<pos:position pos:line="468" pos:column="16"/></operator><name><name pos:line="468" pos:column="16">pOp<pos:position pos:line="468" pos:column="19"/></name><operator pos:line="468" pos:column="19">-&gt;<pos:position pos:line="468" pos:column="24"/></operator><name pos:line="468" pos:column="21">p4<pos:position pos:line="468" pos:column="23"/></name><operator pos:line="468" pos:column="23">.<pos:position pos:line="468" pos:column="24"/></operator><name pos:line="468" pos:column="24">pI64<pos:position pos:line="468" pos:column="28"/></name></name></expr>;<pos:position pos:line="468" pos:column="29"/></expr_stmt>
  <break pos:line="469" pos:column="3">break;<pos:position pos:line="469" pos:column="9"/></break>
}<pos:position pos:line="470" pos:column="2"/></block>

<cpp:ifndef pos:line="472" pos:column="1">#<cpp:directive pos:line="472" pos:column="2">ifndef<pos:position pos:line="472" pos:column="8"/></cpp:directive> <name pos:line="472" pos:column="9">SQLITE_OMIT_FLOATING_POINT<pos:position pos:line="472" pos:column="35"/></name></cpp:ifndef>
<comment type="block" pos:line="473" pos:column="1">/* Opcode: Real * P2 * P4 *
** Synopsis: r[P2]=P4
**
** P4 is a pointer to a 64-bit floating point value.
** Write that value into register P2.
*/</comment>
<case pos:line="479" pos:column="1">case <expr><name pos:line="479" pos:column="6">OP_Real<pos:position pos:line="479" pos:column="13"/></name></expr>:<pos:position pos:line="479" pos:column="14"/></case> <block pos:line="479" pos:column="15">{            <comment type="block" pos:line="479" pos:column="28">/* same as TK_FLOAT, out2 */</comment>
  <expr_stmt><expr><name pos:line="480" pos:column="3">pOut<pos:position pos:line="480" pos:column="7"/></name> <operator pos:line="480" pos:column="8">=<pos:position pos:line="480" pos:column="9"/></operator> <call><name pos:line="480" pos:column="10">out2Prerelease<pos:position pos:line="480" pos:column="24"/></name><argument_list pos:line="480" pos:column="24">(<argument><expr><name pos:line="480" pos:column="25">p<pos:position pos:line="480" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="480" pos:column="28">pOp<pos:position pos:line="480" pos:column="31"/></name></expr></argument>)<pos:position pos:line="480" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="480" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="481" pos:column="3">pOut<pos:position pos:line="481" pos:column="7"/></name><operator pos:line="481" pos:column="7">-&gt;<pos:position pos:line="481" pos:column="12"/></operator><name pos:line="481" pos:column="9">flags<pos:position pos:line="481" pos:column="14"/></name></name> <operator pos:line="481" pos:column="15">=<pos:position pos:line="481" pos:column="16"/></operator> <name pos:line="481" pos:column="17">MEM_Real<pos:position pos:line="481" pos:column="25"/></name></expr>;<pos:position pos:line="481" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="482" pos:column="3">assert<pos:position pos:line="482" pos:column="9"/></name><argument_list pos:line="482" pos:column="9">( <argument><expr><operator pos:line="482" pos:column="11">!<pos:position pos:line="482" pos:column="12"/></operator><call><name pos:line="482" pos:column="12">sqlite3IsNaN<pos:position pos:line="482" pos:column="24"/></name><argument_list pos:line="482" pos:column="24">(<argument><expr><operator pos:line="482" pos:column="25">*<pos:position pos:line="482" pos:column="26"/></operator><name><name pos:line="482" pos:column="26">pOp<pos:position pos:line="482" pos:column="29"/></name><operator pos:line="482" pos:column="29">-&gt;<pos:position pos:line="482" pos:column="34"/></operator><name pos:line="482" pos:column="31">p4<pos:position pos:line="482" pos:column="33"/></name><operator pos:line="482" pos:column="33">.<pos:position pos:line="482" pos:column="34"/></operator><name pos:line="482" pos:column="34">pReal<pos:position pos:line="482" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="482" pos:column="40"/></argument_list></call></expr></argument> )<pos:position pos:line="482" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="482" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="483" pos:column="3">pOut<pos:position pos:line="483" pos:column="7"/></name><operator pos:line="483" pos:column="7">-&gt;<pos:position pos:line="483" pos:column="12"/></operator><name pos:line="483" pos:column="9">u<pos:position pos:line="483" pos:column="10"/></name><operator pos:line="483" pos:column="10">.<pos:position pos:line="483" pos:column="11"/></operator><name pos:line="483" pos:column="11">r<pos:position pos:line="483" pos:column="12"/></name></name> <operator pos:line="483" pos:column="13">=<pos:position pos:line="483" pos:column="14"/></operator> <operator pos:line="483" pos:column="15">*<pos:position pos:line="483" pos:column="16"/></operator><name><name pos:line="483" pos:column="16">pOp<pos:position pos:line="483" pos:column="19"/></name><operator pos:line="483" pos:column="19">-&gt;<pos:position pos:line="483" pos:column="24"/></operator><name pos:line="483" pos:column="21">p4<pos:position pos:line="483" pos:column="23"/></name><operator pos:line="483" pos:column="23">.<pos:position pos:line="483" pos:column="24"/></operator><name pos:line="483" pos:column="24">pReal<pos:position pos:line="483" pos:column="29"/></name></name></expr>;<pos:position pos:line="483" pos:column="30"/></expr_stmt>
  <break pos:line="484" pos:column="3">break;<pos:position pos:line="484" pos:column="9"/></break>
}<pos:position pos:line="485" pos:column="2"/></block>
<cpp:endif pos:line="486" pos:column="1">#<cpp:directive pos:line="486" pos:column="2">endif<pos:position pos:line="486" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="488" pos:column="1">/* Opcode: String8 * P2 * P4 *
** Synopsis: r[P2]='P4'
**
** P4 points to a nul terminated UTF-8 string. This opcode is transformed 
** into a String opcode before it is executed for the first time.  During
** this transformation, the length of string P4 is computed and stored
** as the P1 parameter.
*/</comment>
<case pos:line="496" pos:column="1">case <expr><name pos:line="496" pos:column="6">OP_String8<pos:position pos:line="496" pos:column="16"/></name></expr>:<pos:position pos:line="496" pos:column="17"/></case> <block pos:line="496" pos:column="18">{         <comment type="block" pos:line="496" pos:column="28">/* same as TK_STRING, out2 */</comment>
  <expr_stmt><expr><call><name pos:line="497" pos:column="3">assert<pos:position pos:line="497" pos:column="9"/></name><argument_list pos:line="497" pos:column="9">( <argument><expr><name><name pos:line="497" pos:column="11">pOp<pos:position pos:line="497" pos:column="14"/></name><operator pos:line="497" pos:column="14">-&gt;<pos:position pos:line="497" pos:column="19"/></operator><name pos:line="497" pos:column="16">p4<pos:position pos:line="497" pos:column="18"/></name><operator pos:line="497" pos:column="18">.<pos:position pos:line="497" pos:column="19"/></operator><name pos:line="497" pos:column="19">z<pos:position pos:line="497" pos:column="20"/></name></name><operator pos:line="497" pos:column="20">!=<pos:position pos:line="497" pos:column="22"/></operator><literal type="number" pos:line="497" pos:column="22">0<pos:position pos:line="497" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="497" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="497" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="498" pos:column="3">pOut<pos:position pos:line="498" pos:column="7"/></name> <operator pos:line="498" pos:column="8">=<pos:position pos:line="498" pos:column="9"/></operator> <call><name pos:line="498" pos:column="10">out2Prerelease<pos:position pos:line="498" pos:column="24"/></name><argument_list pos:line="498" pos:column="24">(<argument><expr><name pos:line="498" pos:column="25">p<pos:position pos:line="498" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="498" pos:column="28">pOp<pos:position pos:line="498" pos:column="31"/></name></expr></argument>)<pos:position pos:line="498" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="498" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="499" pos:column="3">pOp<pos:position pos:line="499" pos:column="6"/></name><operator pos:line="499" pos:column="6">-&gt;<pos:position pos:line="499" pos:column="11"/></operator><name pos:line="499" pos:column="8">opcode<pos:position pos:line="499" pos:column="14"/></name></name> <operator pos:line="499" pos:column="15">=<pos:position pos:line="499" pos:column="16"/></operator> <name pos:line="499" pos:column="17">OP_String<pos:position pos:line="499" pos:column="26"/></name></expr>;<pos:position pos:line="499" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="500" pos:column="3">pOp<pos:position pos:line="500" pos:column="6"/></name><operator pos:line="500" pos:column="6">-&gt;<pos:position pos:line="500" pos:column="11"/></operator><name pos:line="500" pos:column="8">p1<pos:position pos:line="500" pos:column="10"/></name></name> <operator pos:line="500" pos:column="11">=<pos:position pos:line="500" pos:column="12"/></operator> <call><name pos:line="500" pos:column="13">sqlite3Strlen30<pos:position pos:line="500" pos:column="28"/></name><argument_list pos:line="500" pos:column="28">(<argument><expr><name><name pos:line="500" pos:column="29">pOp<pos:position pos:line="500" pos:column="32"/></name><operator pos:line="500" pos:column="32">-&gt;<pos:position pos:line="500" pos:column="37"/></operator><name pos:line="500" pos:column="34">p4<pos:position pos:line="500" pos:column="36"/></name><operator pos:line="500" pos:column="36">.<pos:position pos:line="500" pos:column="37"/></operator><name pos:line="500" pos:column="37">z<pos:position pos:line="500" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="500" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="500" pos:column="40"/></expr_stmt>

<cpp:ifndef pos:line="502" pos:column="1">#<cpp:directive pos:line="502" pos:column="2">ifndef<pos:position pos:line="502" pos:column="8"/></cpp:directive> <name pos:line="502" pos:column="9">SQLITE_OMIT_UTF16<pos:position pos:line="502" pos:column="26"/></name></cpp:ifndef>
  <if pos:line="503" pos:column="3">if<condition pos:line="503" pos:column="5">( <expr><name pos:line="503" pos:column="7">encoding<pos:position pos:line="503" pos:column="15"/></name><operator pos:line="503" pos:column="15">!=<pos:position pos:line="503" pos:column="17"/></operator><name pos:line="503" pos:column="17">SQLITE_UTF8<pos:position pos:line="503" pos:column="28"/></name></expr> )<pos:position pos:line="503" pos:column="30"/></condition><then><block pos:line="503" pos:column="30">{
    <expr_stmt><expr><name pos:line="504" pos:column="5">rc<pos:position pos:line="504" pos:column="7"/></name> <operator pos:line="504" pos:column="8">=<pos:position pos:line="504" pos:column="9"/></operator> <call><name pos:line="504" pos:column="10">sqlite3VdbeMemSetStr<pos:position pos:line="504" pos:column="30"/></name><argument_list pos:line="504" pos:column="30">(<argument><expr><name pos:line="504" pos:column="31">pOut<pos:position pos:line="504" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="504" pos:column="37">pOp<pos:position pos:line="504" pos:column="40"/></name><operator pos:line="504" pos:column="40">-&gt;<pos:position pos:line="504" pos:column="45"/></operator><name pos:line="504" pos:column="42">p4<pos:position pos:line="504" pos:column="44"/></name><operator pos:line="504" pos:column="44">.<pos:position pos:line="504" pos:column="45"/></operator><name pos:line="504" pos:column="45">z<pos:position pos:line="504" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="504" pos:column="48">-<pos:position pos:line="504" pos:column="49"/></operator><literal type="number" pos:line="504" pos:column="49">1<pos:position pos:line="504" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="504" pos:column="52">SQLITE_UTF8<pos:position pos:line="504" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="504" pos:column="65">SQLITE_STATIC<pos:position pos:line="504" pos:column="78"/></name></expr></argument>)<pos:position pos:line="504" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="504" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="505" pos:column="5">assert<pos:position pos:line="505" pos:column="11"/></name><argument_list pos:line="505" pos:column="11">( <argument><expr><name pos:line="505" pos:column="13">rc<pos:position pos:line="505" pos:column="15"/></name><operator pos:line="505" pos:column="15">==<pos:position pos:line="505" pos:column="17"/></operator><name pos:line="505" pos:column="17">SQLITE_OK<pos:position pos:line="505" pos:column="26"/></name> <operator pos:line="505" pos:column="27">||<pos:position pos:line="505" pos:column="29"/></operator> <name pos:line="505" pos:column="30">rc<pos:position pos:line="505" pos:column="32"/></name><operator pos:line="505" pos:column="32">==<pos:position pos:line="505" pos:column="34"/></operator><name pos:line="505" pos:column="34">SQLITE_TOOBIG<pos:position pos:line="505" pos:column="47"/></name></expr></argument> )<pos:position pos:line="505" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="505" pos:column="50"/></expr_stmt>
    <if pos:line="506" pos:column="5">if<condition pos:line="506" pos:column="7">( <expr><name pos:line="506" pos:column="9">SQLITE_OK<pos:position pos:line="506" pos:column="18"/></name><operator pos:line="506" pos:column="18">!=<pos:position pos:line="506" pos:column="20"/></operator><call><name pos:line="506" pos:column="20">sqlite3VdbeChangeEncoding<pos:position pos:line="506" pos:column="45"/></name><argument_list pos:line="506" pos:column="45">(<argument><expr><name pos:line="506" pos:column="46">pOut<pos:position pos:line="506" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="506" pos:column="52">encoding<pos:position pos:line="506" pos:column="60"/></name></expr></argument>)<pos:position pos:line="506" pos:column="61"/></argument_list></call></expr> )<pos:position pos:line="506" pos:column="63"/></condition><then pos:line="506" pos:column="63"> <block type="pseudo"><goto pos:line="506" pos:column="64">goto <name pos:line="506" pos:column="69">no_mem<pos:position pos:line="506" pos:column="75"/></name>;<pos:position pos:line="506" pos:column="76"/></goto></block></then></if>
    <expr_stmt><expr><call><name pos:line="507" pos:column="5">assert<pos:position pos:line="507" pos:column="11"/></name><argument_list pos:line="507" pos:column="11">( <argument><expr><name><name pos:line="507" pos:column="13">pOut<pos:position pos:line="507" pos:column="17"/></name><operator pos:line="507" pos:column="17">-&gt;<pos:position pos:line="507" pos:column="22"/></operator><name pos:line="507" pos:column="19">szMalloc<pos:position pos:line="507" pos:column="27"/></name></name><operator pos:line="507" pos:column="27">&gt;<pos:position pos:line="507" pos:column="31"/></operator><literal type="number" pos:line="507" pos:column="28">0<pos:position pos:line="507" pos:column="29"/></literal> <operator pos:line="507" pos:column="30">&amp;&amp;<pos:position pos:line="507" pos:column="40"/></operator> <name><name pos:line="507" pos:column="33">pOut<pos:position pos:line="507" pos:column="37"/></name><operator pos:line="507" pos:column="37">-&gt;<pos:position pos:line="507" pos:column="42"/></operator><name pos:line="507" pos:column="39">zMalloc<pos:position pos:line="507" pos:column="46"/></name></name><operator pos:line="507" pos:column="46">==<pos:position pos:line="507" pos:column="48"/></operator><name><name pos:line="507" pos:column="48">pOut<pos:position pos:line="507" pos:column="52"/></name><operator pos:line="507" pos:column="52">-&gt;<pos:position pos:line="507" pos:column="57"/></operator><name pos:line="507" pos:column="54">z<pos:position pos:line="507" pos:column="55"/></name></name></expr></argument> )<pos:position pos:line="507" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="507" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="508" pos:column="5">assert<pos:position pos:line="508" pos:column="11"/></name><argument_list pos:line="508" pos:column="11">( <argument><expr><call><name pos:line="508" pos:column="13">VdbeMemDynamic<pos:position pos:line="508" pos:column="27"/></name><argument_list pos:line="508" pos:column="27">(<argument><expr><name pos:line="508" pos:column="28">pOut<pos:position pos:line="508" pos:column="32"/></name></expr></argument>)<pos:position pos:line="508" pos:column="33"/></argument_list></call><operator pos:line="508" pos:column="33">==<pos:position pos:line="508" pos:column="35"/></operator><literal type="number" pos:line="508" pos:column="35">0<pos:position pos:line="508" pos:column="36"/></literal></expr></argument> )<pos:position pos:line="508" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="508" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="509" pos:column="5">pOut<pos:position pos:line="509" pos:column="9"/></name><operator pos:line="509" pos:column="9">-&gt;<pos:position pos:line="509" pos:column="14"/></operator><name pos:line="509" pos:column="11">szMalloc<pos:position pos:line="509" pos:column="19"/></name></name> <operator pos:line="509" pos:column="20">=<pos:position pos:line="509" pos:column="21"/></operator> <literal type="number" pos:line="509" pos:column="22">0<pos:position pos:line="509" pos:column="23"/></literal></expr>;<pos:position pos:line="509" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="510" pos:column="5">pOut<pos:position pos:line="510" pos:column="9"/></name><operator pos:line="510" pos:column="9">-&gt;<pos:position pos:line="510" pos:column="14"/></operator><name pos:line="510" pos:column="11">flags<pos:position pos:line="510" pos:column="16"/></name></name> <operator pos:line="510" pos:column="17">|=<pos:position pos:line="510" pos:column="19"/></operator> <name pos:line="510" pos:column="20">MEM_Static<pos:position pos:line="510" pos:column="30"/></name></expr>;<pos:position pos:line="510" pos:column="31"/></expr_stmt>
    <if pos:line="511" pos:column="5">if<condition pos:line="511" pos:column="7">( <expr><name><name pos:line="511" pos:column="9">pOp<pos:position pos:line="511" pos:column="12"/></name><operator pos:line="511" pos:column="12">-&gt;<pos:position pos:line="511" pos:column="17"/></operator><name pos:line="511" pos:column="14">p4type<pos:position pos:line="511" pos:column="20"/></name></name><operator pos:line="511" pos:column="20">==<pos:position pos:line="511" pos:column="22"/></operator><name pos:line="511" pos:column="22">P4_DYNAMIC<pos:position pos:line="511" pos:column="32"/></name></expr> )<pos:position pos:line="511" pos:column="34"/></condition><then><block pos:line="511" pos:column="34">{
      <expr_stmt><expr><call><name pos:line="512" pos:column="7">sqlite3DbFree<pos:position pos:line="512" pos:column="20"/></name><argument_list pos:line="512" pos:column="20">(<argument><expr><name pos:line="512" pos:column="21">db<pos:position pos:line="512" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="512" pos:column="25">pOp<pos:position pos:line="512" pos:column="28"/></name><operator pos:line="512" pos:column="28">-&gt;<pos:position pos:line="512" pos:column="33"/></operator><name pos:line="512" pos:column="30">p4<pos:position pos:line="512" pos:column="32"/></name><operator pos:line="512" pos:column="32">.<pos:position pos:line="512" pos:column="33"/></operator><name pos:line="512" pos:column="33">z<pos:position pos:line="512" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="512" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="512" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="513" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="514" pos:column="5">pOp<pos:position pos:line="514" pos:column="8"/></name><operator pos:line="514" pos:column="8">-&gt;<pos:position pos:line="514" pos:column="13"/></operator><name pos:line="514" pos:column="10">p4type<pos:position pos:line="514" pos:column="16"/></name></name> <operator pos:line="514" pos:column="17">=<pos:position pos:line="514" pos:column="18"/></operator> <name pos:line="514" pos:column="19">P4_DYNAMIC<pos:position pos:line="514" pos:column="29"/></name></expr>;<pos:position pos:line="514" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="515" pos:column="5">pOp<pos:position pos:line="515" pos:column="8"/></name><operator pos:line="515" pos:column="8">-&gt;<pos:position pos:line="515" pos:column="13"/></operator><name pos:line="515" pos:column="10">p4<pos:position pos:line="515" pos:column="12"/></name><operator pos:line="515" pos:column="12">.<pos:position pos:line="515" pos:column="13"/></operator><name pos:line="515" pos:column="13">z<pos:position pos:line="515" pos:column="14"/></name></name> <operator pos:line="515" pos:column="15">=<pos:position pos:line="515" pos:column="16"/></operator> <name><name pos:line="515" pos:column="17">pOut<pos:position pos:line="515" pos:column="21"/></name><operator pos:line="515" pos:column="21">-&gt;<pos:position pos:line="515" pos:column="26"/></operator><name pos:line="515" pos:column="23">z<pos:position pos:line="515" pos:column="24"/></name></name></expr>;<pos:position pos:line="515" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="516" pos:column="5">pOp<pos:position pos:line="516" pos:column="8"/></name><operator pos:line="516" pos:column="8">-&gt;<pos:position pos:line="516" pos:column="13"/></operator><name pos:line="516" pos:column="10">p1<pos:position pos:line="516" pos:column="12"/></name></name> <operator pos:line="516" pos:column="13">=<pos:position pos:line="516" pos:column="14"/></operator> <name><name pos:line="516" pos:column="15">pOut<pos:position pos:line="516" pos:column="19"/></name><operator pos:line="516" pos:column="19">-&gt;<pos:position pos:line="516" pos:column="24"/></operator><name pos:line="516" pos:column="21">n<pos:position pos:line="516" pos:column="22"/></name></name></expr>;<pos:position pos:line="516" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="517" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="518" pos:column="3">testcase<pos:position pos:line="518" pos:column="11"/></name><argument_list pos:line="518" pos:column="11">( <argument><expr><name pos:line="518" pos:column="13">rc<pos:position pos:line="518" pos:column="15"/></name><operator pos:line="518" pos:column="15">==<pos:position pos:line="518" pos:column="17"/></operator><name pos:line="518" pos:column="17">SQLITE_TOOBIG<pos:position pos:line="518" pos:column="30"/></name></expr></argument> )<pos:position pos:line="518" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="518" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="519" pos:column="1">#<cpp:directive pos:line="519" pos:column="2">endif<pos:position pos:line="519" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="520" pos:column="3">if<condition pos:line="520" pos:column="5">( <expr><name><name pos:line="520" pos:column="7">pOp<pos:position pos:line="520" pos:column="10"/></name><operator pos:line="520" pos:column="10">-&gt;<pos:position pos:line="520" pos:column="15"/></operator><name pos:line="520" pos:column="12">p1<pos:position pos:line="520" pos:column="14"/></name></name><operator pos:line="520" pos:column="14">&gt;<pos:position pos:line="520" pos:column="18"/></operator><name><name pos:line="520" pos:column="15">db<pos:position pos:line="520" pos:column="17"/></name><operator pos:line="520" pos:column="17">-&gt;<pos:position pos:line="520" pos:column="22"/></operator><name pos:line="520" pos:column="19">aLimit<pos:position pos:line="520" pos:column="25"/></name><index pos:line="520" pos:column="25">[<expr><name pos:line="520" pos:column="26">SQLITE_LIMIT_LENGTH<pos:position pos:line="520" pos:column="45"/></name></expr>]<pos:position pos:line="520" pos:column="46"/></index></name></expr> )<pos:position pos:line="520" pos:column="48"/></condition><then><block pos:line="520" pos:column="48">{
    <goto pos:line="521" pos:column="5">goto <name pos:line="521" pos:column="10">too_big<pos:position pos:line="521" pos:column="17"/></name>;<pos:position pos:line="521" pos:column="18"/></goto>
  }<pos:position pos:line="522" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="523" pos:column="3">assert<pos:position pos:line="523" pos:column="9"/></name><argument_list pos:line="523" pos:column="9">( <argument><expr><name pos:line="523" pos:column="11">rc<pos:position pos:line="523" pos:column="13"/></name><operator pos:line="523" pos:column="13">==<pos:position pos:line="523" pos:column="15"/></operator><name pos:line="523" pos:column="15">SQLITE_OK<pos:position pos:line="523" pos:column="24"/></name></expr></argument> )<pos:position pos:line="523" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="523" pos:column="27"/></expr_stmt>
  <comment type="block" pos:line="524" pos:column="3">/* Fall through to the next case, OP_String */</comment>
}<pos:position pos:line="525" pos:column="2"/></block>
  
<comment type="block" pos:line="527" pos:column="1">/* Opcode: String P1 P2 P3 P4 P5
** Synopsis: r[P2]='P4' (len=P1)
**
** The string value P4 of length P1 (bytes) is stored in register P2.
**
** If P3 is not zero and the content of register P3 is equal to P5, then
** the datatype of the register P2 is converted to BLOB.  The content is
** the same sequence of bytes, it is merely interpreted as a BLOB instead
** of a string, as if it had been CAST.  In other words:
**
** if( P3!=0 and reg[P3]==P5 ) reg[P2] := CAST(reg[P2] as BLOB)
*/</comment>
<case pos:line="539" pos:column="1">case <expr><name pos:line="539" pos:column="6">OP_String<pos:position pos:line="539" pos:column="15"/></name></expr>:<pos:position pos:line="539" pos:column="16"/></case> <block pos:line="539" pos:column="17">{          <comment type="block" pos:line="539" pos:column="28">/* out2 */</comment>
  <expr_stmt><expr><call><name pos:line="540" pos:column="3">assert<pos:position pos:line="540" pos:column="9"/></name><argument_list pos:line="540" pos:column="9">( <argument><expr><name><name pos:line="540" pos:column="11">pOp<pos:position pos:line="540" pos:column="14"/></name><operator pos:line="540" pos:column="14">-&gt;<pos:position pos:line="540" pos:column="19"/></operator><name pos:line="540" pos:column="16">p4<pos:position pos:line="540" pos:column="18"/></name><operator pos:line="540" pos:column="18">.<pos:position pos:line="540" pos:column="19"/></operator><name pos:line="540" pos:column="19">z<pos:position pos:line="540" pos:column="20"/></name></name><operator pos:line="540" pos:column="20">!=<pos:position pos:line="540" pos:column="22"/></operator><literal type="number" pos:line="540" pos:column="22">0<pos:position pos:line="540" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="540" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="540" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="541" pos:column="3">pOut<pos:position pos:line="541" pos:column="7"/></name> <operator pos:line="541" pos:column="8">=<pos:position pos:line="541" pos:column="9"/></operator> <call><name pos:line="541" pos:column="10">out2Prerelease<pos:position pos:line="541" pos:column="24"/></name><argument_list pos:line="541" pos:column="24">(<argument><expr><name pos:line="541" pos:column="25">p<pos:position pos:line="541" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="541" pos:column="28">pOp<pos:position pos:line="541" pos:column="31"/></name></expr></argument>)<pos:position pos:line="541" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="541" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="542" pos:column="3">pOut<pos:position pos:line="542" pos:column="7"/></name><operator pos:line="542" pos:column="7">-&gt;<pos:position pos:line="542" pos:column="12"/></operator><name pos:line="542" pos:column="9">flags<pos:position pos:line="542" pos:column="14"/></name></name> <operator pos:line="542" pos:column="15">=<pos:position pos:line="542" pos:column="16"/></operator> <name pos:line="542" pos:column="17">MEM_Str<pos:position pos:line="542" pos:column="24"/></name><operator pos:line="542" pos:column="24">|<pos:position pos:line="542" pos:column="25"/></operator><name pos:line="542" pos:column="25">MEM_Static<pos:position pos:line="542" pos:column="35"/></name><operator pos:line="542" pos:column="35">|<pos:position pos:line="542" pos:column="36"/></operator><name pos:line="542" pos:column="36">MEM_Term<pos:position pos:line="542" pos:column="44"/></name></expr>;<pos:position pos:line="542" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="543" pos:column="3">pOut<pos:position pos:line="543" pos:column="7"/></name><operator pos:line="543" pos:column="7">-&gt;<pos:position pos:line="543" pos:column="12"/></operator><name pos:line="543" pos:column="9">z<pos:position pos:line="543" pos:column="10"/></name></name> <operator pos:line="543" pos:column="11">=<pos:position pos:line="543" pos:column="12"/></operator> <name><name pos:line="543" pos:column="13">pOp<pos:position pos:line="543" pos:column="16"/></name><operator pos:line="543" pos:column="16">-&gt;<pos:position pos:line="543" pos:column="21"/></operator><name pos:line="543" pos:column="18">p4<pos:position pos:line="543" pos:column="20"/></name><operator pos:line="543" pos:column="20">.<pos:position pos:line="543" pos:column="21"/></operator><name pos:line="543" pos:column="21">z<pos:position pos:line="543" pos:column="22"/></name></name></expr>;<pos:position pos:line="543" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="544" pos:column="3">pOut<pos:position pos:line="544" pos:column="7"/></name><operator pos:line="544" pos:column="7">-&gt;<pos:position pos:line="544" pos:column="12"/></operator><name pos:line="544" pos:column="9">n<pos:position pos:line="544" pos:column="10"/></name></name> <operator pos:line="544" pos:column="11">=<pos:position pos:line="544" pos:column="12"/></operator> <name><name pos:line="544" pos:column="13">pOp<pos:position pos:line="544" pos:column="16"/></name><operator pos:line="544" pos:column="16">-&gt;<pos:position pos:line="544" pos:column="21"/></operator><name pos:line="544" pos:column="18">p1<pos:position pos:line="544" pos:column="20"/></name></name></expr>;<pos:position pos:line="544" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="545" pos:column="3">pOut<pos:position pos:line="545" pos:column="7"/></name><operator pos:line="545" pos:column="7">-&gt;<pos:position pos:line="545" pos:column="12"/></operator><name pos:line="545" pos:column="9">enc<pos:position pos:line="545" pos:column="12"/></name></name> <operator pos:line="545" pos:column="13">=<pos:position pos:line="545" pos:column="14"/></operator> <name pos:line="545" pos:column="15">encoding<pos:position pos:line="545" pos:column="23"/></name></expr>;<pos:position pos:line="545" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="546" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="546" pos:column="22"/></name><argument_list pos:line="546" pos:column="22">(<argument><expr><name pos:line="546" pos:column="23">pOut<pos:position pos:line="546" pos:column="27"/></name></expr></argument>)<pos:position pos:line="546" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="546" pos:column="29"/></expr_stmt>
<cpp:ifndef pos:line="547" pos:column="1">#<cpp:directive pos:line="547" pos:column="2">ifndef<pos:position pos:line="547" pos:column="8"/></cpp:directive> <name pos:line="547" pos:column="9">SQLITE_LIKE_DOESNT_MATCH_BLOBS<pos:position pos:line="547" pos:column="39"/></name></cpp:ifndef>
  <if pos:line="548" pos:column="3">if<condition pos:line="548" pos:column="5">( <expr><name><name pos:line="548" pos:column="7">pOp<pos:position pos:line="548" pos:column="10"/></name><operator pos:line="548" pos:column="10">-&gt;<pos:position pos:line="548" pos:column="15"/></operator><name pos:line="548" pos:column="12">p3<pos:position pos:line="548" pos:column="14"/></name></name><operator pos:line="548" pos:column="14">&gt;<pos:position pos:line="548" pos:column="18"/></operator><literal type="number" pos:line="548" pos:column="15">0<pos:position pos:line="548" pos:column="16"/></literal></expr> )<pos:position pos:line="548" pos:column="18"/></condition><then><block pos:line="548" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="549" pos:column="5">assert<pos:position pos:line="549" pos:column="11"/></name><argument_list pos:line="549" pos:column="11">( <argument><expr><name><name pos:line="549" pos:column="13">pOp<pos:position pos:line="549" pos:column="16"/></name><operator pos:line="549" pos:column="16">-&gt;<pos:position pos:line="549" pos:column="21"/></operator><name pos:line="549" pos:column="18">p3<pos:position pos:line="549" pos:column="20"/></name></name><operator pos:line="549" pos:column="20">&lt;=<pos:position pos:line="549" pos:column="25"/></operator><operator pos:line="549" pos:column="22">(<pos:position pos:line="549" pos:column="23"/></operator><name><name pos:line="549" pos:column="23">p<pos:position pos:line="549" pos:column="24"/></name><operator pos:line="549" pos:column="24">-&gt;<pos:position pos:line="549" pos:column="29"/></operator><name pos:line="549" pos:column="26">nMem<pos:position pos:line="549" pos:column="30"/></name></name><operator pos:line="549" pos:column="30">+<pos:position pos:line="549" pos:column="31"/></operator><literal type="number" pos:line="549" pos:column="31">1<pos:position pos:line="549" pos:column="32"/></literal> <operator pos:line="549" pos:column="33">-<pos:position pos:line="549" pos:column="34"/></operator> <name><name pos:line="549" pos:column="35">p<pos:position pos:line="549" pos:column="36"/></name><operator pos:line="549" pos:column="36">-&gt;<pos:position pos:line="549" pos:column="41"/></operator><name pos:line="549" pos:column="38">nCursor<pos:position pos:line="549" pos:column="45"/></name></name><operator pos:line="549" pos:column="45">)<pos:position pos:line="549" pos:column="46"/></operator></expr></argument> )<pos:position pos:line="549" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="549" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="550" pos:column="5">pIn3<pos:position pos:line="550" pos:column="9"/></name> <operator pos:line="550" pos:column="10">=<pos:position pos:line="550" pos:column="11"/></operator> <operator pos:line="550" pos:column="12">&amp;<pos:position pos:line="550" pos:column="17"/></operator><name><name pos:line="550" pos:column="13">aMem<pos:position pos:line="550" pos:column="17"/></name><index pos:line="550" pos:column="17">[<expr><name><name pos:line="550" pos:column="18">pOp<pos:position pos:line="550" pos:column="21"/></name><operator pos:line="550" pos:column="21">-&gt;<pos:position pos:line="550" pos:column="26"/></operator><name pos:line="550" pos:column="23">p3<pos:position pos:line="550" pos:column="25"/></name></name></expr>]<pos:position pos:line="550" pos:column="26"/></index></name></expr>;<pos:position pos:line="550" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="551" pos:column="5">assert<pos:position pos:line="551" pos:column="11"/></name><argument_list pos:line="551" pos:column="11">( <argument><expr><name><name pos:line="551" pos:column="13">pIn3<pos:position pos:line="551" pos:column="17"/></name><operator pos:line="551" pos:column="17">-&gt;<pos:position pos:line="551" pos:column="22"/></operator><name pos:line="551" pos:column="19">flags<pos:position pos:line="551" pos:column="24"/></name></name> <operator pos:line="551" pos:column="25">&amp;<pos:position pos:line="551" pos:column="30"/></operator> <name pos:line="551" pos:column="27">MEM_Int<pos:position pos:line="551" pos:column="34"/></name></expr></argument> )<pos:position pos:line="551" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="551" pos:column="37"/></expr_stmt>
    <if pos:line="552" pos:column="5">if<condition pos:line="552" pos:column="7">( <expr><name><name pos:line="552" pos:column="9">pIn3<pos:position pos:line="552" pos:column="13"/></name><operator pos:line="552" pos:column="13">-&gt;<pos:position pos:line="552" pos:column="18"/></operator><name pos:line="552" pos:column="15">u<pos:position pos:line="552" pos:column="16"/></name><operator pos:line="552" pos:column="16">.<pos:position pos:line="552" pos:column="17"/></operator><name pos:line="552" pos:column="17">i<pos:position pos:line="552" pos:column="18"/></name></name><operator pos:line="552" pos:column="18">==<pos:position pos:line="552" pos:column="20"/></operator><name><name pos:line="552" pos:column="20">pOp<pos:position pos:line="552" pos:column="23"/></name><operator pos:line="552" pos:column="23">-&gt;<pos:position pos:line="552" pos:column="28"/></operator><name pos:line="552" pos:column="25">p5<pos:position pos:line="552" pos:column="27"/></name></name></expr> )<pos:position pos:line="552" pos:column="29"/></condition><then pos:line="552" pos:column="29"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="552" pos:column="30">pOut<pos:position pos:line="552" pos:column="34"/></name><operator pos:line="552" pos:column="34">-&gt;<pos:position pos:line="552" pos:column="39"/></operator><name pos:line="552" pos:column="36">flags<pos:position pos:line="552" pos:column="41"/></name></name> <operator pos:line="552" pos:column="42">=<pos:position pos:line="552" pos:column="43"/></operator> <name pos:line="552" pos:column="44">MEM_Blob<pos:position pos:line="552" pos:column="52"/></name><operator pos:line="552" pos:column="52">|<pos:position pos:line="552" pos:column="53"/></operator><name pos:line="552" pos:column="53">MEM_Static<pos:position pos:line="552" pos:column="63"/></name><operator pos:line="552" pos:column="63">|<pos:position pos:line="552" pos:column="64"/></operator><name pos:line="552" pos:column="64">MEM_Term<pos:position pos:line="552" pos:column="72"/></name></expr>;<pos:position pos:line="552" pos:column="73"/></expr_stmt></block></then></if>
  }<pos:position pos:line="553" pos:column="4"/></block></then></if>
<cpp:endif pos:line="554" pos:column="1">#<cpp:directive pos:line="554" pos:column="2">endif<pos:position pos:line="554" pos:column="7"/></cpp:directive></cpp:endif>
  <break pos:line="555" pos:column="3">break;<pos:position pos:line="555" pos:column="9"/></break>
}<pos:position pos:line="556" pos:column="2"/></block>

<comment type="block" pos:line="558" pos:column="1">/* Opcode: Null P1 P2 P3 * *
** Synopsis: r[P2..P3]=NULL
**
** Write a NULL into registers P2.  If P3 greater than P2, then also write
** NULL into register P3 and every register in between P2 and P3.  If P3
** is less than P2 (typically P3 is zero) then only register P2 is
** set to NULL.
**
** If the P1 value is non-zero, then also set the MEM_Cleared flag so that
** NULL values will not compare equal even if SQLITE_NULLEQ is set on
** OP_Ne or OP_Eq.
*/</comment>
<case pos:line="570" pos:column="1">case <expr><name pos:line="570" pos:column="6">OP_Null<pos:position pos:line="570" pos:column="13"/></name></expr>:<pos:position pos:line="570" pos:column="14"/></case> <block pos:line="570" pos:column="15">{           <comment type="block" pos:line="570" pos:column="27">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="571" pos:column="3">int<pos:position pos:line="571" pos:column="6"/></name></type> <name pos:line="571" pos:column="7">cnt<pos:position pos:line="571" pos:column="10"/></name></decl>;<pos:position pos:line="571" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="572" pos:column="3">u16<pos:position pos:line="572" pos:column="6"/></name></type> <name pos:line="572" pos:column="7">nullFlag<pos:position pos:line="572" pos:column="15"/></name></decl>;<pos:position pos:line="572" pos:column="16"/></decl_stmt>
  <expr_stmt><expr><name pos:line="573" pos:column="3">pOut<pos:position pos:line="573" pos:column="7"/></name> <operator pos:line="573" pos:column="8">=<pos:position pos:line="573" pos:column="9"/></operator> <call><name pos:line="573" pos:column="10">out2Prerelease<pos:position pos:line="573" pos:column="24"/></name><argument_list pos:line="573" pos:column="24">(<argument><expr><name pos:line="573" pos:column="25">p<pos:position pos:line="573" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="573" pos:column="28">pOp<pos:position pos:line="573" pos:column="31"/></name></expr></argument>)<pos:position pos:line="573" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="573" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="574" pos:column="3">cnt<pos:position pos:line="574" pos:column="6"/></name> <operator pos:line="574" pos:column="7">=<pos:position pos:line="574" pos:column="8"/></operator> <name><name pos:line="574" pos:column="9">pOp<pos:position pos:line="574" pos:column="12"/></name><operator pos:line="574" pos:column="12">-&gt;<pos:position pos:line="574" pos:column="17"/></operator><name pos:line="574" pos:column="14">p3<pos:position pos:line="574" pos:column="16"/></name></name><operator pos:line="574" pos:column="16">-<pos:position pos:line="574" pos:column="17"/></operator><name><name pos:line="574" pos:column="17">pOp<pos:position pos:line="574" pos:column="20"/></name><operator pos:line="574" pos:column="20">-&gt;<pos:position pos:line="574" pos:column="25"/></operator><name pos:line="574" pos:column="22">p2<pos:position pos:line="574" pos:column="24"/></name></name></expr>;<pos:position pos:line="574" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="575" pos:column="3">assert<pos:position pos:line="575" pos:column="9"/></name><argument_list pos:line="575" pos:column="9">( <argument><expr><name><name pos:line="575" pos:column="11">pOp<pos:position pos:line="575" pos:column="14"/></name><operator pos:line="575" pos:column="14">-&gt;<pos:position pos:line="575" pos:column="19"/></operator><name pos:line="575" pos:column="16">p3<pos:position pos:line="575" pos:column="18"/></name></name><operator pos:line="575" pos:column="18">&lt;=<pos:position pos:line="575" pos:column="23"/></operator><operator pos:line="575" pos:column="20">(<pos:position pos:line="575" pos:column="21"/></operator><name><name pos:line="575" pos:column="21">p<pos:position pos:line="575" pos:column="22"/></name><operator pos:line="575" pos:column="22">-&gt;<pos:position pos:line="575" pos:column="27"/></operator><name pos:line="575" pos:column="24">nMem<pos:position pos:line="575" pos:column="28"/></name></name><operator pos:line="575" pos:column="28">+<pos:position pos:line="575" pos:column="29"/></operator><literal type="number" pos:line="575" pos:column="29">1<pos:position pos:line="575" pos:column="30"/></literal> <operator pos:line="575" pos:column="31">-<pos:position pos:line="575" pos:column="32"/></operator> <name><name pos:line="575" pos:column="33">p<pos:position pos:line="575" pos:column="34"/></name><operator pos:line="575" pos:column="34">-&gt;<pos:position pos:line="575" pos:column="39"/></operator><name pos:line="575" pos:column="36">nCursor<pos:position pos:line="575" pos:column="43"/></name></name><operator pos:line="575" pos:column="43">)<pos:position pos:line="575" pos:column="44"/></operator></expr></argument> )<pos:position pos:line="575" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="575" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="576" pos:column="3">pOut<pos:position pos:line="576" pos:column="7"/></name><operator pos:line="576" pos:column="7">-&gt;<pos:position pos:line="576" pos:column="12"/></operator><name pos:line="576" pos:column="9">flags<pos:position pos:line="576" pos:column="14"/></name></name> <operator pos:line="576" pos:column="15">=<pos:position pos:line="576" pos:column="16"/></operator> <name pos:line="576" pos:column="17">nullFlag<pos:position pos:line="576" pos:column="25"/></name> <operator pos:line="576" pos:column="26">=<pos:position pos:line="576" pos:column="27"/></operator> <ternary><condition><expr><name><name pos:line="576" pos:column="28">pOp<pos:position pos:line="576" pos:column="31"/></name><operator pos:line="576" pos:column="31">-&gt;<pos:position pos:line="576" pos:column="36"/></operator><name pos:line="576" pos:column="33">p1<pos:position pos:line="576" pos:column="35"/></name></name></expr> ?<pos:position pos:line="576" pos:column="37"/></condition><then pos:line="576" pos:column="37"> <expr><operator pos:line="576" pos:column="38">(<pos:position pos:line="576" pos:column="39"/></operator><name pos:line="576" pos:column="39">MEM_Null<pos:position pos:line="576" pos:column="47"/></name><operator pos:line="576" pos:column="47">|<pos:position pos:line="576" pos:column="48"/></operator><name pos:line="576" pos:column="48">MEM_Cleared<pos:position pos:line="576" pos:column="59"/></name><operator pos:line="576" pos:column="59">)<pos:position pos:line="576" pos:column="60"/></operator></expr> <pos:position pos:line="576" pos:column="61"/></then><else pos:line="576" pos:column="61">: <expr><name pos:line="576" pos:column="63">MEM_Null<pos:position pos:line="576" pos:column="71"/></name></expr></else></ternary></expr>;<pos:position pos:line="576" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="577" pos:column="3">pOut<pos:position pos:line="577" pos:column="7"/></name><operator pos:line="577" pos:column="7">-&gt;<pos:position pos:line="577" pos:column="12"/></operator><name pos:line="577" pos:column="9">n<pos:position pos:line="577" pos:column="10"/></name></name> <operator pos:line="577" pos:column="11">=<pos:position pos:line="577" pos:column="12"/></operator> <literal type="number" pos:line="577" pos:column="13">0<pos:position pos:line="577" pos:column="14"/></literal></expr>;<pos:position pos:line="577" pos:column="15"/></expr_stmt>
  <while pos:line="578" pos:column="3">while<condition pos:line="578" pos:column="8">( <expr><name pos:line="578" pos:column="10">cnt<pos:position pos:line="578" pos:column="13"/></name><operator pos:line="578" pos:column="13">&gt;<pos:position pos:line="578" pos:column="17"/></operator><literal type="number" pos:line="578" pos:column="14">0<pos:position pos:line="578" pos:column="15"/></literal></expr> )<pos:position pos:line="578" pos:column="17"/></condition><block pos:line="578" pos:column="17">{
    <expr_stmt><expr><name pos:line="579" pos:column="5">pOut<pos:position pos:line="579" pos:column="9"/></name><operator pos:line="579" pos:column="9">++<pos:position pos:line="579" pos:column="11"/></operator></expr>;<pos:position pos:line="579" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="580" pos:column="5">memAboutToChange<pos:position pos:line="580" pos:column="21"/></name><argument_list pos:line="580" pos:column="21">(<argument><expr><name pos:line="580" pos:column="22">p<pos:position pos:line="580" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="580" pos:column="25">pOut<pos:position pos:line="580" pos:column="29"/></name></expr></argument>)<pos:position pos:line="580" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="580" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="581" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="581" pos:column="26"/></name><argument_list pos:line="581" pos:column="26">(<argument><expr><name pos:line="581" pos:column="27">pOut<pos:position pos:line="581" pos:column="31"/></name></expr></argument>)<pos:position pos:line="581" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="581" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="582" pos:column="5">pOut<pos:position pos:line="582" pos:column="9"/></name><operator pos:line="582" pos:column="9">-&gt;<pos:position pos:line="582" pos:column="14"/></operator><name pos:line="582" pos:column="11">flags<pos:position pos:line="582" pos:column="16"/></name></name> <operator pos:line="582" pos:column="17">=<pos:position pos:line="582" pos:column="18"/></operator> <name pos:line="582" pos:column="19">nullFlag<pos:position pos:line="582" pos:column="27"/></name></expr>;<pos:position pos:line="582" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="583" pos:column="5">pOut<pos:position pos:line="583" pos:column="9"/></name><operator pos:line="583" pos:column="9">-&gt;<pos:position pos:line="583" pos:column="14"/></operator><name pos:line="583" pos:column="11">n<pos:position pos:line="583" pos:column="12"/></name></name> <operator pos:line="583" pos:column="13">=<pos:position pos:line="583" pos:column="14"/></operator> <literal type="number" pos:line="583" pos:column="15">0<pos:position pos:line="583" pos:column="16"/></literal></expr>;<pos:position pos:line="583" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="584" pos:column="5">cnt<pos:position pos:line="584" pos:column="8"/></name><operator pos:line="584" pos:column="8">--<pos:position pos:line="584" pos:column="10"/></operator></expr>;<pos:position pos:line="584" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="585" pos:column="4"/></block></while>
  <break pos:line="586" pos:column="3">break;<pos:position pos:line="586" pos:column="9"/></break>
}<pos:position pos:line="587" pos:column="2"/></block>

<comment type="block" pos:line="589" pos:column="1">/* Opcode: SoftNull P1 * * * *
** Synopsis: r[P1]=NULL
**
** Set register P1 to have the value NULL as seen by the OP_MakeRecord
** instruction, but do not free any string or blob memory associated with
** the register, so that if the value was a string or blob that was
** previously copied using OP_SCopy, the copies will continue to be valid.
*/</comment>
<case pos:line="597" pos:column="1">case <expr><name pos:line="597" pos:column="6">OP_SoftNull<pos:position pos:line="597" pos:column="17"/></name></expr>:<pos:position pos:line="597" pos:column="18"/></case> <block pos:line="597" pos:column="19">{
  <expr_stmt><expr><call><name pos:line="598" pos:column="3">assert<pos:position pos:line="598" pos:column="9"/></name><argument_list pos:line="598" pos:column="9">( <argument><expr><name><name pos:line="598" pos:column="11">pOp<pos:position pos:line="598" pos:column="14"/></name><operator pos:line="598" pos:column="14">-&gt;<pos:position pos:line="598" pos:column="19"/></operator><name pos:line="598" pos:column="16">p1<pos:position pos:line="598" pos:column="18"/></name></name><operator pos:line="598" pos:column="18">&gt;<pos:position pos:line="598" pos:column="22"/></operator><literal type="number" pos:line="598" pos:column="19">0<pos:position pos:line="598" pos:column="20"/></literal> <operator pos:line="598" pos:column="21">&amp;&amp;<pos:position pos:line="598" pos:column="31"/></operator> <name><name pos:line="598" pos:column="24">pOp<pos:position pos:line="598" pos:column="27"/></name><operator pos:line="598" pos:column="27">-&gt;<pos:position pos:line="598" pos:column="32"/></operator><name pos:line="598" pos:column="29">p1<pos:position pos:line="598" pos:column="31"/></name></name><operator pos:line="598" pos:column="31">&lt;=<pos:position pos:line="598" pos:column="36"/></operator><operator pos:line="598" pos:column="33">(<pos:position pos:line="598" pos:column="34"/></operator><name><name pos:line="598" pos:column="34">p<pos:position pos:line="598" pos:column="35"/></name><operator pos:line="598" pos:column="35">-&gt;<pos:position pos:line="598" pos:column="40"/></operator><name pos:line="598" pos:column="37">nMem<pos:position pos:line="598" pos:column="41"/></name></name><operator pos:line="598" pos:column="41">+<pos:position pos:line="598" pos:column="42"/></operator><literal type="number" pos:line="598" pos:column="42">1<pos:position pos:line="598" pos:column="43"/></literal> <operator pos:line="598" pos:column="44">-<pos:position pos:line="598" pos:column="45"/></operator> <name><name pos:line="598" pos:column="46">p<pos:position pos:line="598" pos:column="47"/></name><operator pos:line="598" pos:column="47">-&gt;<pos:position pos:line="598" pos:column="52"/></operator><name pos:line="598" pos:column="49">nCursor<pos:position pos:line="598" pos:column="56"/></name></name><operator pos:line="598" pos:column="56">)<pos:position pos:line="598" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="598" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="598" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="599" pos:column="3">pOut<pos:position pos:line="599" pos:column="7"/></name> <operator pos:line="599" pos:column="8">=<pos:position pos:line="599" pos:column="9"/></operator> <operator pos:line="599" pos:column="10">&amp;<pos:position pos:line="599" pos:column="15"/></operator><name><name pos:line="599" pos:column="11">aMem<pos:position pos:line="599" pos:column="15"/></name><index pos:line="599" pos:column="15">[<expr><name><name pos:line="599" pos:column="16">pOp<pos:position pos:line="599" pos:column="19"/></name><operator pos:line="599" pos:column="19">-&gt;<pos:position pos:line="599" pos:column="24"/></operator><name pos:line="599" pos:column="21">p1<pos:position pos:line="599" pos:column="23"/></name></name></expr>]<pos:position pos:line="599" pos:column="24"/></index></name></expr>;<pos:position pos:line="599" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="600" pos:column="3">pOut<pos:position pos:line="600" pos:column="7"/></name><operator pos:line="600" pos:column="7">-&gt;<pos:position pos:line="600" pos:column="12"/></operator><name pos:line="600" pos:column="9">flags<pos:position pos:line="600" pos:column="14"/></name></name> <operator pos:line="600" pos:column="15">=<pos:position pos:line="600" pos:column="16"/></operator> <operator pos:line="600" pos:column="17">(<pos:position pos:line="600" pos:column="18"/></operator><name><name pos:line="600" pos:column="18">pOut<pos:position pos:line="600" pos:column="22"/></name><operator pos:line="600" pos:column="22">-&gt;<pos:position pos:line="600" pos:column="27"/></operator><name pos:line="600" pos:column="24">flags<pos:position pos:line="600" pos:column="29"/></name></name><operator pos:line="600" pos:column="29">&amp;<pos:position pos:line="600" pos:column="34"/></operator><operator pos:line="600" pos:column="30">~<pos:position pos:line="600" pos:column="31"/></operator><operator pos:line="600" pos:column="31">(<pos:position pos:line="600" pos:column="32"/></operator><name pos:line="600" pos:column="32">MEM_Undefined<pos:position pos:line="600" pos:column="45"/></name><operator pos:line="600" pos:column="45">|<pos:position pos:line="600" pos:column="46"/></operator><name pos:line="600" pos:column="46">MEM_AffMask<pos:position pos:line="600" pos:column="57"/></name><operator pos:line="600" pos:column="57">)<pos:position pos:line="600" pos:column="58"/></operator><operator pos:line="600" pos:column="58">)<pos:position pos:line="600" pos:column="59"/></operator><operator pos:line="600" pos:column="59">|<pos:position pos:line="600" pos:column="60"/></operator><name pos:line="600" pos:column="60">MEM_Null<pos:position pos:line="600" pos:column="68"/></name></expr>;<pos:position pos:line="600" pos:column="69"/></expr_stmt>
  <break pos:line="601" pos:column="3">break;<pos:position pos:line="601" pos:column="9"/></break>
}<pos:position pos:line="602" pos:column="2"/></block>

<comment type="block" pos:line="604" pos:column="1">/* Opcode: Blob P1 P2 * P4 *
** Synopsis: r[P2]=P4 (len=P1)
**
** P4 points to a blob of data P1 bytes long.  Store this
** blob in register P2.
*/</comment>
<case pos:line="610" pos:column="1">case <expr><name pos:line="610" pos:column="6">OP_Blob<pos:position pos:line="610" pos:column="13"/></name></expr>:<pos:position pos:line="610" pos:column="14"/></case> <block pos:line="610" pos:column="15">{                <comment type="block" pos:line="610" pos:column="32">/* out2 */</comment>
  <expr_stmt><expr><call><name pos:line="611" pos:column="3">assert<pos:position pos:line="611" pos:column="9"/></name><argument_list pos:line="611" pos:column="9">( <argument><expr><name><name pos:line="611" pos:column="11">pOp<pos:position pos:line="611" pos:column="14"/></name><operator pos:line="611" pos:column="14">-&gt;<pos:position pos:line="611" pos:column="19"/></operator><name pos:line="611" pos:column="16">p1<pos:position pos:line="611" pos:column="18"/></name></name> <operator pos:line="611" pos:column="19">&lt;=<pos:position pos:line="611" pos:column="24"/></operator> <name pos:line="611" pos:column="22">SQLITE_MAX_LENGTH<pos:position pos:line="611" pos:column="39"/></name></expr></argument> )<pos:position pos:line="611" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="611" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name pos:line="612" pos:column="3">pOut<pos:position pos:line="612" pos:column="7"/></name> <operator pos:line="612" pos:column="8">=<pos:position pos:line="612" pos:column="9"/></operator> <call><name pos:line="612" pos:column="10">out2Prerelease<pos:position pos:line="612" pos:column="24"/></name><argument_list pos:line="612" pos:column="24">(<argument><expr><name pos:line="612" pos:column="25">p<pos:position pos:line="612" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="612" pos:column="28">pOp<pos:position pos:line="612" pos:column="31"/></name></expr></argument>)<pos:position pos:line="612" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="612" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="613" pos:column="3">sqlite3VdbeMemSetStr<pos:position pos:line="613" pos:column="23"/></name><argument_list pos:line="613" pos:column="23">(<argument><expr><name pos:line="613" pos:column="24">pOut<pos:position pos:line="613" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="613" pos:column="30">pOp<pos:position pos:line="613" pos:column="33"/></name><operator pos:line="613" pos:column="33">-&gt;<pos:position pos:line="613" pos:column="38"/></operator><name pos:line="613" pos:column="35">p4<pos:position pos:line="613" pos:column="37"/></name><operator pos:line="613" pos:column="37">.<pos:position pos:line="613" pos:column="38"/></operator><name pos:line="613" pos:column="38">z<pos:position pos:line="613" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="613" pos:column="41">pOp<pos:position pos:line="613" pos:column="44"/></name><operator pos:line="613" pos:column="44">-&gt;<pos:position pos:line="613" pos:column="49"/></operator><name pos:line="613" pos:column="46">p1<pos:position pos:line="613" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="613" pos:column="50">0<pos:position pos:line="613" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="613" pos:column="53">0<pos:position pos:line="613" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="613" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="613" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="614" pos:column="3">pOut<pos:position pos:line="614" pos:column="7"/></name><operator pos:line="614" pos:column="7">-&gt;<pos:position pos:line="614" pos:column="12"/></operator><name pos:line="614" pos:column="9">enc<pos:position pos:line="614" pos:column="12"/></name></name> <operator pos:line="614" pos:column="13">=<pos:position pos:line="614" pos:column="14"/></operator> <name pos:line="614" pos:column="15">encoding<pos:position pos:line="614" pos:column="23"/></name></expr>;<pos:position pos:line="614" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="615" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="615" pos:column="22"/></name><argument_list pos:line="615" pos:column="22">(<argument><expr><name pos:line="615" pos:column="23">pOut<pos:position pos:line="615" pos:column="27"/></name></expr></argument>)<pos:position pos:line="615" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="615" pos:column="29"/></expr_stmt>
  <break pos:line="616" pos:column="3">break;<pos:position pos:line="616" pos:column="9"/></break>
}<pos:position pos:line="617" pos:column="2"/></block>

<comment type="block" pos:line="619" pos:column="1">/* Opcode: Variable P1 P2 * P4 *
** Synopsis: r[P2]=parameter(P1,P4)
**
** Transfer the values of bound parameter P1 into register P2
**
** If the parameter is named, then its name appears in P4.
** The P4 value is used by sqlite3_bind_parameter_name().
*/</comment>
<case pos:line="627" pos:column="1">case <expr><name pos:line="627" pos:column="6">OP_Variable<pos:position pos:line="627" pos:column="17"/></name></expr>:<pos:position pos:line="627" pos:column="18"/></case> <block pos:line="627" pos:column="19">{            <comment type="block" pos:line="627" pos:column="32">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="628" pos:column="3">Mem<pos:position pos:line="628" pos:column="6"/></name> <modifier pos:line="628" pos:column="7">*<pos:position pos:line="628" pos:column="8"/></modifier></type><name pos:line="628" pos:column="8">pVar<pos:position pos:line="628" pos:column="12"/></name></decl>;<pos:position pos:line="628" pos:column="13"/></decl_stmt>       <comment type="block" pos:line="628" pos:column="20">/* Value being transferred */</comment>

  <expr_stmt><expr><call><name pos:line="630" pos:column="3">assert<pos:position pos:line="630" pos:column="9"/></name><argument_list pos:line="630" pos:column="9">( <argument><expr><name><name pos:line="630" pos:column="11">pOp<pos:position pos:line="630" pos:column="14"/></name><operator pos:line="630" pos:column="14">-&gt;<pos:position pos:line="630" pos:column="19"/></operator><name pos:line="630" pos:column="16">p1<pos:position pos:line="630" pos:column="18"/></name></name><operator pos:line="630" pos:column="18">&gt;<pos:position pos:line="630" pos:column="22"/></operator><literal type="number" pos:line="630" pos:column="19">0<pos:position pos:line="630" pos:column="20"/></literal> <operator pos:line="630" pos:column="21">&amp;&amp;<pos:position pos:line="630" pos:column="31"/></operator> <name><name pos:line="630" pos:column="24">pOp<pos:position pos:line="630" pos:column="27"/></name><operator pos:line="630" pos:column="27">-&gt;<pos:position pos:line="630" pos:column="32"/></operator><name pos:line="630" pos:column="29">p1<pos:position pos:line="630" pos:column="31"/></name></name><operator pos:line="630" pos:column="31">&lt;=<pos:position pos:line="630" pos:column="36"/></operator><name><name pos:line="630" pos:column="33">p<pos:position pos:line="630" pos:column="34"/></name><operator pos:line="630" pos:column="34">-&gt;<pos:position pos:line="630" pos:column="39"/></operator><name pos:line="630" pos:column="36">nVar<pos:position pos:line="630" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="630" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="630" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="631" pos:column="3">assert<pos:position pos:line="631" pos:column="9"/></name><argument_list pos:line="631" pos:column="9">( <argument><expr><name><name pos:line="631" pos:column="11">pOp<pos:position pos:line="631" pos:column="14"/></name><operator pos:line="631" pos:column="14">-&gt;<pos:position pos:line="631" pos:column="19"/></operator><name pos:line="631" pos:column="16">p4<pos:position pos:line="631" pos:column="18"/></name><operator pos:line="631" pos:column="18">.<pos:position pos:line="631" pos:column="19"/></operator><name pos:line="631" pos:column="19">z<pos:position pos:line="631" pos:column="20"/></name></name><operator pos:line="631" pos:column="20">==<pos:position pos:line="631" pos:column="22"/></operator><literal type="number" pos:line="631" pos:column="22">0<pos:position pos:line="631" pos:column="23"/></literal> <operator pos:line="631" pos:column="24">||<pos:position pos:line="631" pos:column="26"/></operator> <name><name pos:line="631" pos:column="27">pOp<pos:position pos:line="631" pos:column="30"/></name><operator pos:line="631" pos:column="30">-&gt;<pos:position pos:line="631" pos:column="35"/></operator><name pos:line="631" pos:column="32">p4<pos:position pos:line="631" pos:column="34"/></name><operator pos:line="631" pos:column="34">.<pos:position pos:line="631" pos:column="35"/></operator><name pos:line="631" pos:column="35">z<pos:position pos:line="631" pos:column="36"/></name></name><operator pos:line="631" pos:column="36">==<pos:position pos:line="631" pos:column="38"/></operator><call><name pos:line="631" pos:column="38">sqlite3VListNumToName<pos:position pos:line="631" pos:column="59"/></name><argument_list pos:line="631" pos:column="59">(<argument><expr><name><name pos:line="631" pos:column="60">p<pos:position pos:line="631" pos:column="61"/></name><operator pos:line="631" pos:column="61">-&gt;<pos:position pos:line="631" pos:column="66"/></operator><name pos:line="631" pos:column="63">pVList<pos:position pos:line="631" pos:column="69"/></name></name></expr></argument>,<argument><expr><name><name pos:line="631" pos:column="70">pOp<pos:position pos:line="631" pos:column="73"/></name><operator pos:line="631" pos:column="73">-&gt;<pos:position pos:line="631" pos:column="78"/></operator><name pos:line="631" pos:column="75">p1<pos:position pos:line="631" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="631" pos:column="78"/></argument_list></call></expr></argument> )<pos:position pos:line="631" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="631" pos:column="81"/></expr_stmt>
  <expr_stmt><expr><name pos:line="632" pos:column="3">pVar<pos:position pos:line="632" pos:column="7"/></name> <operator pos:line="632" pos:column="8">=<pos:position pos:line="632" pos:column="9"/></operator> <operator pos:line="632" pos:column="10">&amp;<pos:position pos:line="632" pos:column="15"/></operator><name><name pos:line="632" pos:column="11">p<pos:position pos:line="632" pos:column="12"/></name><operator pos:line="632" pos:column="12">-&gt;<pos:position pos:line="632" pos:column="17"/></operator><name pos:line="632" pos:column="14">aVar<pos:position pos:line="632" pos:column="18"/></name><index pos:line="632" pos:column="18">[<expr><name><name pos:line="632" pos:column="19">pOp<pos:position pos:line="632" pos:column="22"/></name><operator pos:line="632" pos:column="22">-&gt;<pos:position pos:line="632" pos:column="27"/></operator><name pos:line="632" pos:column="24">p1<pos:position pos:line="632" pos:column="26"/></name></name> <operator pos:line="632" pos:column="27">-<pos:position pos:line="632" pos:column="28"/></operator> <literal type="number" pos:line="632" pos:column="29">1<pos:position pos:line="632" pos:column="30"/></literal></expr>]<pos:position pos:line="632" pos:column="31"/></index></name></expr>;<pos:position pos:line="632" pos:column="32"/></expr_stmt>
  <if pos:line="633" pos:column="3">if<condition pos:line="633" pos:column="5">( <expr><call><name pos:line="633" pos:column="7">sqlite3VdbeMemTooBig<pos:position pos:line="633" pos:column="27"/></name><argument_list pos:line="633" pos:column="27">(<argument><expr><name pos:line="633" pos:column="28">pVar<pos:position pos:line="633" pos:column="32"/></name></expr></argument>)<pos:position pos:line="633" pos:column="33"/></argument_list></call></expr> )<pos:position pos:line="633" pos:column="35"/></condition><then><block pos:line="633" pos:column="35">{
    <goto pos:line="634" pos:column="5">goto <name pos:line="634" pos:column="10">too_big<pos:position pos:line="634" pos:column="17"/></name>;<pos:position pos:line="634" pos:column="18"/></goto>
  }<pos:position pos:line="635" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="636" pos:column="3">pOut<pos:position pos:line="636" pos:column="7"/></name> <operator pos:line="636" pos:column="8">=<pos:position pos:line="636" pos:column="9"/></operator> <operator pos:line="636" pos:column="10">&amp;<pos:position pos:line="636" pos:column="15"/></operator><name><name pos:line="636" pos:column="11">aMem<pos:position pos:line="636" pos:column="15"/></name><index pos:line="636" pos:column="15">[<expr><name><name pos:line="636" pos:column="16">pOp<pos:position pos:line="636" pos:column="19"/></name><operator pos:line="636" pos:column="19">-&gt;<pos:position pos:line="636" pos:column="24"/></operator><name pos:line="636" pos:column="21">p2<pos:position pos:line="636" pos:column="23"/></name></name></expr>]<pos:position pos:line="636" pos:column="24"/></index></name></expr>;<pos:position pos:line="636" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="637" pos:column="3">sqlite3VdbeMemShallowCopy<pos:position pos:line="637" pos:column="28"/></name><argument_list pos:line="637" pos:column="28">(<argument><expr><name pos:line="637" pos:column="29">pOut<pos:position pos:line="637" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="637" pos:column="35">pVar<pos:position pos:line="637" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="637" pos:column="41">MEM_Static<pos:position pos:line="637" pos:column="51"/></name></expr></argument>)<pos:position pos:line="637" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="637" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="638" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="638" pos:column="22"/></name><argument_list pos:line="638" pos:column="22">(<argument><expr><name pos:line="638" pos:column="23">pOut<pos:position pos:line="638" pos:column="27"/></name></expr></argument>)<pos:position pos:line="638" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="638" pos:column="29"/></expr_stmt>
  <break pos:line="639" pos:column="3">break;<pos:position pos:line="639" pos:column="9"/></break>
}<pos:position pos:line="640" pos:column="2"/></block>

<comment type="block" pos:line="642" pos:column="1">/* Opcode: Move P1 P2 P3 * *
** Synopsis: r[P2@P3]=r[P1@P3]
**
** Move the P3 values in register P1..P1+P3-1 over into
** registers P2..P2+P3-1.  Registers P1..P1+P3-1 are
** left holding a NULL.  It is an error for register ranges
** P1..P1+P3-1 and P2..P2+P3-1 to overlap.  It is an error
** for P3 to be less than 1.
*/</comment>
<case pos:line="651" pos:column="1">case <expr><name pos:line="651" pos:column="6">OP_Move<pos:position pos:line="651" pos:column="13"/></name></expr>:<pos:position pos:line="651" pos:column="14"/></case> <block pos:line="651" pos:column="15">{
  <decl_stmt><decl><type><name pos:line="652" pos:column="3">int<pos:position pos:line="652" pos:column="6"/></name></type> <name pos:line="652" pos:column="7">n<pos:position pos:line="652" pos:column="8"/></name></decl>;<pos:position pos:line="652" pos:column="9"/></decl_stmt>           <comment type="block" pos:line="652" pos:column="20">/* Number of registers left to copy */</comment>
  <decl_stmt><decl><type><name pos:line="653" pos:column="3">int<pos:position pos:line="653" pos:column="6"/></name></type> <name pos:line="653" pos:column="7">p1<pos:position pos:line="653" pos:column="9"/></name></decl>;<pos:position pos:line="653" pos:column="10"/></decl_stmt>          <comment type="block" pos:line="653" pos:column="20">/* Register to copy from */</comment>
  <decl_stmt><decl><type><name pos:line="654" pos:column="3">int<pos:position pos:line="654" pos:column="6"/></name></type> <name pos:line="654" pos:column="7">p2<pos:position pos:line="654" pos:column="9"/></name></decl>;<pos:position pos:line="654" pos:column="10"/></decl_stmt>          <comment type="block" pos:line="654" pos:column="20">/* Register to copy to */</comment>

  <expr_stmt><expr><name pos:line="656" pos:column="3">n<pos:position pos:line="656" pos:column="4"/></name> <operator pos:line="656" pos:column="5">=<pos:position pos:line="656" pos:column="6"/></operator> <name><name pos:line="656" pos:column="7">pOp<pos:position pos:line="656" pos:column="10"/></name><operator pos:line="656" pos:column="10">-&gt;<pos:position pos:line="656" pos:column="15"/></operator><name pos:line="656" pos:column="12">p3<pos:position pos:line="656" pos:column="14"/></name></name></expr>;<pos:position pos:line="656" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="657" pos:column="3">p1<pos:position pos:line="657" pos:column="5"/></name> <operator pos:line="657" pos:column="6">=<pos:position pos:line="657" pos:column="7"/></operator> <name><name pos:line="657" pos:column="8">pOp<pos:position pos:line="657" pos:column="11"/></name><operator pos:line="657" pos:column="11">-&gt;<pos:position pos:line="657" pos:column="16"/></operator><name pos:line="657" pos:column="13">p1<pos:position pos:line="657" pos:column="15"/></name></name></expr>;<pos:position pos:line="657" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="658" pos:column="3">p2<pos:position pos:line="658" pos:column="5"/></name> <operator pos:line="658" pos:column="6">=<pos:position pos:line="658" pos:column="7"/></operator> <name><name pos:line="658" pos:column="8">pOp<pos:position pos:line="658" pos:column="11"/></name><operator pos:line="658" pos:column="11">-&gt;<pos:position pos:line="658" pos:column="16"/></operator><name pos:line="658" pos:column="13">p2<pos:position pos:line="658" pos:column="15"/></name></name></expr>;<pos:position pos:line="658" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="659" pos:column="3">assert<pos:position pos:line="659" pos:column="9"/></name><argument_list pos:line="659" pos:column="9">( <argument><expr><name pos:line="659" pos:column="11">n<pos:position pos:line="659" pos:column="12"/></name><operator pos:line="659" pos:column="12">&gt;<pos:position pos:line="659" pos:column="16"/></operator><literal type="number" pos:line="659" pos:column="13">0<pos:position pos:line="659" pos:column="14"/></literal> <operator pos:line="659" pos:column="15">&amp;&amp;<pos:position pos:line="659" pos:column="25"/></operator> <name pos:line="659" pos:column="18">p1<pos:position pos:line="659" pos:column="20"/></name><operator pos:line="659" pos:column="20">&gt;<pos:position pos:line="659" pos:column="24"/></operator><literal type="number" pos:line="659" pos:column="21">0<pos:position pos:line="659" pos:column="22"/></literal> <operator pos:line="659" pos:column="23">&amp;&amp;<pos:position pos:line="659" pos:column="33"/></operator> <name pos:line="659" pos:column="26">p2<pos:position pos:line="659" pos:column="28"/></name><operator pos:line="659" pos:column="28">&gt;<pos:position pos:line="659" pos:column="32"/></operator><literal type="number" pos:line="659" pos:column="29">0<pos:position pos:line="659" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="659" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="659" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="660" pos:column="3">assert<pos:position pos:line="660" pos:column="9"/></name><argument_list pos:line="660" pos:column="9">( <argument><expr><name pos:line="660" pos:column="11">p1<pos:position pos:line="660" pos:column="13"/></name><operator pos:line="660" pos:column="13">+<pos:position pos:line="660" pos:column="14"/></operator><name pos:line="660" pos:column="14">n<pos:position pos:line="660" pos:column="15"/></name><operator pos:line="660" pos:column="15">&lt;=<pos:position pos:line="660" pos:column="20"/></operator><name pos:line="660" pos:column="17">p2<pos:position pos:line="660" pos:column="19"/></name> <operator pos:line="660" pos:column="20">||<pos:position pos:line="660" pos:column="22"/></operator> <name pos:line="660" pos:column="23">p2<pos:position pos:line="660" pos:column="25"/></name><operator pos:line="660" pos:column="25">+<pos:position pos:line="660" pos:column="26"/></operator><name pos:line="660" pos:column="26">n<pos:position pos:line="660" pos:column="27"/></name><operator pos:line="660" pos:column="27">&lt;=<pos:position pos:line="660" pos:column="32"/></operator><name pos:line="660" pos:column="29">p1<pos:position pos:line="660" pos:column="31"/></name></expr></argument> )<pos:position pos:line="660" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="660" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="662" pos:column="3">pIn1<pos:position pos:line="662" pos:column="7"/></name> <operator pos:line="662" pos:column="8">=<pos:position pos:line="662" pos:column="9"/></operator> <operator pos:line="662" pos:column="10">&amp;<pos:position pos:line="662" pos:column="15"/></operator><name><name pos:line="662" pos:column="11">aMem<pos:position pos:line="662" pos:column="15"/></name><index pos:line="662" pos:column="15">[<expr><name pos:line="662" pos:column="16">p1<pos:position pos:line="662" pos:column="18"/></name></expr>]<pos:position pos:line="662" pos:column="19"/></index></name></expr>;<pos:position pos:line="662" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="663" pos:column="3">pOut<pos:position pos:line="663" pos:column="7"/></name> <operator pos:line="663" pos:column="8">=<pos:position pos:line="663" pos:column="9"/></operator> <operator pos:line="663" pos:column="10">&amp;<pos:position pos:line="663" pos:column="15"/></operator><name><name pos:line="663" pos:column="11">aMem<pos:position pos:line="663" pos:column="15"/></name><index pos:line="663" pos:column="15">[<expr><name pos:line="663" pos:column="16">p2<pos:position pos:line="663" pos:column="18"/></name></expr>]<pos:position pos:line="663" pos:column="19"/></index></name></expr>;<pos:position pos:line="663" pos:column="20"/></expr_stmt>
  <do pos:line="664" pos:column="3">do<block pos:line="664" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="665" pos:column="5">assert<pos:position pos:line="665" pos:column="11"/></name><argument_list pos:line="665" pos:column="11">( <argument><expr><name pos:line="665" pos:column="13">pOut<pos:position pos:line="665" pos:column="17"/></name><operator pos:line="665" pos:column="17">&lt;=<pos:position pos:line="665" pos:column="22"/></operator><operator pos:line="665" pos:column="19">&amp;<pos:position pos:line="665" pos:column="24"/></operator><name><name pos:line="665" pos:column="20">aMem<pos:position pos:line="665" pos:column="24"/></name><index pos:line="665" pos:column="24">[<expr><operator pos:line="665" pos:column="25">(<pos:position pos:line="665" pos:column="26"/></operator><name><name pos:line="665" pos:column="26">p<pos:position pos:line="665" pos:column="27"/></name><operator pos:line="665" pos:column="27">-&gt;<pos:position pos:line="665" pos:column="32"/></operator><name pos:line="665" pos:column="29">nMem<pos:position pos:line="665" pos:column="33"/></name></name><operator pos:line="665" pos:column="33">+<pos:position pos:line="665" pos:column="34"/></operator><literal type="number" pos:line="665" pos:column="34">1<pos:position pos:line="665" pos:column="35"/></literal> <operator pos:line="665" pos:column="36">-<pos:position pos:line="665" pos:column="37"/></operator> <name><name pos:line="665" pos:column="38">p<pos:position pos:line="665" pos:column="39"/></name><operator pos:line="665" pos:column="39">-&gt;<pos:position pos:line="665" pos:column="44"/></operator><name pos:line="665" pos:column="41">nCursor<pos:position pos:line="665" pos:column="48"/></name></name><operator pos:line="665" pos:column="48">)<pos:position pos:line="665" pos:column="49"/></operator></expr>]<pos:position pos:line="665" pos:column="50"/></index></name></expr></argument> )<pos:position pos:line="665" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="665" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="666" pos:column="5">assert<pos:position pos:line="666" pos:column="11"/></name><argument_list pos:line="666" pos:column="11">( <argument><expr><name pos:line="666" pos:column="13">pIn1<pos:position pos:line="666" pos:column="17"/></name><operator pos:line="666" pos:column="17">&lt;=<pos:position pos:line="666" pos:column="22"/></operator><operator pos:line="666" pos:column="19">&amp;<pos:position pos:line="666" pos:column="24"/></operator><name><name pos:line="666" pos:column="20">aMem<pos:position pos:line="666" pos:column="24"/></name><index pos:line="666" pos:column="24">[<expr><operator pos:line="666" pos:column="25">(<pos:position pos:line="666" pos:column="26"/></operator><name><name pos:line="666" pos:column="26">p<pos:position pos:line="666" pos:column="27"/></name><operator pos:line="666" pos:column="27">-&gt;<pos:position pos:line="666" pos:column="32"/></operator><name pos:line="666" pos:column="29">nMem<pos:position pos:line="666" pos:column="33"/></name></name><operator pos:line="666" pos:column="33">+<pos:position pos:line="666" pos:column="34"/></operator><literal type="number" pos:line="666" pos:column="34">1<pos:position pos:line="666" pos:column="35"/></literal> <operator pos:line="666" pos:column="36">-<pos:position pos:line="666" pos:column="37"/></operator> <name><name pos:line="666" pos:column="38">p<pos:position pos:line="666" pos:column="39"/></name><operator pos:line="666" pos:column="39">-&gt;<pos:position pos:line="666" pos:column="44"/></operator><name pos:line="666" pos:column="41">nCursor<pos:position pos:line="666" pos:column="48"/></name></name><operator pos:line="666" pos:column="48">)<pos:position pos:line="666" pos:column="49"/></operator></expr>]<pos:position pos:line="666" pos:column="50"/></index></name></expr></argument> )<pos:position pos:line="666" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="666" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="667" pos:column="5">assert<pos:position pos:line="667" pos:column="11"/></name><argument_list pos:line="667" pos:column="11">( <argument><expr><call><name pos:line="667" pos:column="13">memIsValid<pos:position pos:line="667" pos:column="23"/></name><argument_list pos:line="667" pos:column="23">(<argument><expr><name pos:line="667" pos:column="24">pIn1<pos:position pos:line="667" pos:column="28"/></name></expr></argument>)<pos:position pos:line="667" pos:column="29"/></argument_list></call></expr></argument> )<pos:position pos:line="667" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="667" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="668" pos:column="5">memAboutToChange<pos:position pos:line="668" pos:column="21"/></name><argument_list pos:line="668" pos:column="21">(<argument><expr><name pos:line="668" pos:column="22">p<pos:position pos:line="668" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="668" pos:column="25">pOut<pos:position pos:line="668" pos:column="29"/></name></expr></argument>)<pos:position pos:line="668" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="668" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="669" pos:column="5">sqlite3VdbeMemMove<pos:position pos:line="669" pos:column="23"/></name><argument_list pos:line="669" pos:column="23">(<argument><expr><name pos:line="669" pos:column="24">pOut<pos:position pos:line="669" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="669" pos:column="30">pIn1<pos:position pos:line="669" pos:column="34"/></name></expr></argument>)<pos:position pos:line="669" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="669" pos:column="36"/></expr_stmt>
<cpp:ifdef pos:line="670" pos:column="1">#<cpp:directive pos:line="670" pos:column="2">ifdef<pos:position pos:line="670" pos:column="7"/></cpp:directive> <name pos:line="670" pos:column="8">SQLITE_DEBUG<pos:position pos:line="670" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="671" pos:column="5">if<condition pos:line="671" pos:column="7">( <expr><name><name pos:line="671" pos:column="9">pOut<pos:position pos:line="671" pos:column="13"/></name><operator pos:line="671" pos:column="13">-&gt;<pos:position pos:line="671" pos:column="18"/></operator><name pos:line="671" pos:column="15">pScopyFrom<pos:position pos:line="671" pos:column="25"/></name></name><operator pos:line="671" pos:column="25">&gt;=<pos:position pos:line="671" pos:column="30"/></operator><operator pos:line="671" pos:column="27">&amp;<pos:position pos:line="671" pos:column="32"/></operator><name><name pos:line="671" pos:column="28">aMem<pos:position pos:line="671" pos:column="32"/></name><index pos:line="671" pos:column="32">[<expr><name pos:line="671" pos:column="33">p1<pos:position pos:line="671" pos:column="35"/></name></expr>]<pos:position pos:line="671" pos:column="36"/></index></name> <operator pos:line="671" pos:column="37">&amp;&amp;<pos:position pos:line="671" pos:column="47"/></operator> <name><name pos:line="671" pos:column="40">pOut<pos:position pos:line="671" pos:column="44"/></name><operator pos:line="671" pos:column="44">-&gt;<pos:position pos:line="671" pos:column="49"/></operator><name pos:line="671" pos:column="46">pScopyFrom<pos:position pos:line="671" pos:column="56"/></name></name><operator pos:line="671" pos:column="56">&lt;<pos:position pos:line="671" pos:column="60"/></operator><name pos:line="671" pos:column="57">pOut<pos:position pos:line="671" pos:column="61"/></name></expr> )<pos:position pos:line="671" pos:column="63"/></condition><then><block pos:line="671" pos:column="63">{
      <expr_stmt><expr><name><name pos:line="672" pos:column="7">pOut<pos:position pos:line="672" pos:column="11"/></name><operator pos:line="672" pos:column="11">-&gt;<pos:position pos:line="672" pos:column="16"/></operator><name pos:line="672" pos:column="13">pScopyFrom<pos:position pos:line="672" pos:column="23"/></name></name> <operator pos:line="672" pos:column="24">+=<pos:position pos:line="672" pos:column="26"/></operator> <name><name pos:line="672" pos:column="27">pOp<pos:position pos:line="672" pos:column="30"/></name><operator pos:line="672" pos:column="30">-&gt;<pos:position pos:line="672" pos:column="35"/></operator><name pos:line="672" pos:column="32">p2<pos:position pos:line="672" pos:column="34"/></name></name> <operator pos:line="672" pos:column="35">-<pos:position pos:line="672" pos:column="36"/></operator> <name pos:line="672" pos:column="37">p1<pos:position pos:line="672" pos:column="39"/></name></expr>;<pos:position pos:line="672" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="673" pos:column="6"/></block></then></if>
<cpp:endif pos:line="674" pos:column="1">#<cpp:directive pos:line="674" pos:column="2">endif<pos:position pos:line="674" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="675" pos:column="5">Deephemeralize<pos:position pos:line="675" pos:column="19"/></name><argument_list pos:line="675" pos:column="19">(<argument><expr><name pos:line="675" pos:column="20">pOut<pos:position pos:line="675" pos:column="24"/></name></expr></argument>)<pos:position pos:line="675" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="675" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="676" pos:column="5">REGISTER_TRACE<pos:position pos:line="676" pos:column="19"/></name><argument_list pos:line="676" pos:column="19">(<argument><expr><name pos:line="676" pos:column="20">p2<pos:position pos:line="676" pos:column="22"/></name><operator pos:line="676" pos:column="22">++<pos:position pos:line="676" pos:column="24"/></operator></expr></argument>, <argument><expr><name pos:line="676" pos:column="26">pOut<pos:position pos:line="676" pos:column="30"/></name></expr></argument>)<pos:position pos:line="676" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="676" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="677" pos:column="5">pIn1<pos:position pos:line="677" pos:column="9"/></name><operator pos:line="677" pos:column="9">++<pos:position pos:line="677" pos:column="11"/></operator></expr>;<pos:position pos:line="677" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="678" pos:column="5">pOut<pos:position pos:line="678" pos:column="9"/></name><operator pos:line="678" pos:column="9">++<pos:position pos:line="678" pos:column="11"/></operator></expr>;<pos:position pos:line="678" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="679" pos:column="4"/></block>while<condition pos:line="679" pos:column="9">( <expr><operator pos:line="679" pos:column="11">--<pos:position pos:line="679" pos:column="13"/></operator><name pos:line="679" pos:column="13">n<pos:position pos:line="679" pos:column="14"/></name></expr> )<pos:position pos:line="679" pos:column="16"/></condition>;<pos:position pos:line="679" pos:column="17"/></do>
  <break pos:line="680" pos:column="3">break;<pos:position pos:line="680" pos:column="9"/></break>
}<pos:position pos:line="681" pos:column="2"/></block>

<comment type="block" pos:line="683" pos:column="1">/* Opcode: Copy P1 P2 P3 * *
** Synopsis: r[P2@P3+1]=r[P1@P3+1]
**
** Make a copy of registers P1..P1+P3 into registers P2..P2+P3.
**
** This instruction makes a deep copy of the value.  A duplicate
** is made of any string or blob constant.  See also OP_SCopy.
*/</comment>
<case pos:line="691" pos:column="1">case <expr><name pos:line="691" pos:column="6">OP_Copy<pos:position pos:line="691" pos:column="13"/></name></expr>:<pos:position pos:line="691" pos:column="14"/></case> <block pos:line="691" pos:column="15">{
  <decl_stmt><decl><type><name pos:line="692" pos:column="3">int<pos:position pos:line="692" pos:column="6"/></name></type> <name pos:line="692" pos:column="7">n<pos:position pos:line="692" pos:column="8"/></name></decl>;<pos:position pos:line="692" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name pos:line="694" pos:column="3">n<pos:position pos:line="694" pos:column="4"/></name> <operator pos:line="694" pos:column="5">=<pos:position pos:line="694" pos:column="6"/></operator> <name><name pos:line="694" pos:column="7">pOp<pos:position pos:line="694" pos:column="10"/></name><operator pos:line="694" pos:column="10">-&gt;<pos:position pos:line="694" pos:column="15"/></operator><name pos:line="694" pos:column="12">p3<pos:position pos:line="694" pos:column="14"/></name></name></expr>;<pos:position pos:line="694" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="695" pos:column="3">pIn1<pos:position pos:line="695" pos:column="7"/></name> <operator pos:line="695" pos:column="8">=<pos:position pos:line="695" pos:column="9"/></operator> <operator pos:line="695" pos:column="10">&amp;<pos:position pos:line="695" pos:column="15"/></operator><name><name pos:line="695" pos:column="11">aMem<pos:position pos:line="695" pos:column="15"/></name><index pos:line="695" pos:column="15">[<expr><name><name pos:line="695" pos:column="16">pOp<pos:position pos:line="695" pos:column="19"/></name><operator pos:line="695" pos:column="19">-&gt;<pos:position pos:line="695" pos:column="24"/></operator><name pos:line="695" pos:column="21">p1<pos:position pos:line="695" pos:column="23"/></name></name></expr>]<pos:position pos:line="695" pos:column="24"/></index></name></expr>;<pos:position pos:line="695" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="696" pos:column="3">pOut<pos:position pos:line="696" pos:column="7"/></name> <operator pos:line="696" pos:column="8">=<pos:position pos:line="696" pos:column="9"/></operator> <operator pos:line="696" pos:column="10">&amp;<pos:position pos:line="696" pos:column="15"/></operator><name><name pos:line="696" pos:column="11">aMem<pos:position pos:line="696" pos:column="15"/></name><index pos:line="696" pos:column="15">[<expr><name><name pos:line="696" pos:column="16">pOp<pos:position pos:line="696" pos:column="19"/></name><operator pos:line="696" pos:column="19">-&gt;<pos:position pos:line="696" pos:column="24"/></operator><name pos:line="696" pos:column="21">p2<pos:position pos:line="696" pos:column="23"/></name></name></expr>]<pos:position pos:line="696" pos:column="24"/></index></name></expr>;<pos:position pos:line="696" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="697" pos:column="3">assert<pos:position pos:line="697" pos:column="9"/></name><argument_list pos:line="697" pos:column="9">( <argument><expr><name pos:line="697" pos:column="11">pOut<pos:position pos:line="697" pos:column="15"/></name><operator pos:line="697" pos:column="15">!=<pos:position pos:line="697" pos:column="17"/></operator><name pos:line="697" pos:column="17">pIn1<pos:position pos:line="697" pos:column="21"/></name></expr></argument> )<pos:position pos:line="697" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="697" pos:column="24"/></expr_stmt>
  <while pos:line="698" pos:column="3">while<condition pos:line="698" pos:column="8">( <expr><literal type="number" pos:line="698" pos:column="10">1<pos:position pos:line="698" pos:column="11"/></literal></expr> )<pos:position pos:line="698" pos:column="13"/></condition><block pos:line="698" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="699" pos:column="5">sqlite3VdbeMemShallowCopy<pos:position pos:line="699" pos:column="30"/></name><argument_list pos:line="699" pos:column="30">(<argument><expr><name pos:line="699" pos:column="31">pOut<pos:position pos:line="699" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="699" pos:column="37">pIn1<pos:position pos:line="699" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="699" pos:column="43">MEM_Ephem<pos:position pos:line="699" pos:column="52"/></name></expr></argument>)<pos:position pos:line="699" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="699" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="700" pos:column="5">Deephemeralize<pos:position pos:line="700" pos:column="19"/></name><argument_list pos:line="700" pos:column="19">(<argument><expr><name pos:line="700" pos:column="20">pOut<pos:position pos:line="700" pos:column="24"/></name></expr></argument>)<pos:position pos:line="700" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="700" pos:column="26"/></expr_stmt>
<cpp:ifdef pos:line="701" pos:column="1">#<cpp:directive pos:line="701" pos:column="2">ifdef<pos:position pos:line="701" pos:column="7"/></cpp:directive> <name pos:line="701" pos:column="8">SQLITE_DEBUG<pos:position pos:line="701" pos:column="20"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="702" pos:column="5">pOut<pos:position pos:line="702" pos:column="9"/></name><operator pos:line="702" pos:column="9">-&gt;<pos:position pos:line="702" pos:column="14"/></operator><name pos:line="702" pos:column="11">pScopyFrom<pos:position pos:line="702" pos:column="21"/></name></name> <operator pos:line="702" pos:column="22">=<pos:position pos:line="702" pos:column="23"/></operator> <literal type="number" pos:line="702" pos:column="24">0<pos:position pos:line="702" pos:column="25"/></literal></expr>;<pos:position pos:line="702" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="703" pos:column="1">#<cpp:directive pos:line="703" pos:column="2">endif<pos:position pos:line="703" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="704" pos:column="5">REGISTER_TRACE<pos:position pos:line="704" pos:column="19"/></name><argument_list pos:line="704" pos:column="19">(<argument><expr><name><name pos:line="704" pos:column="20">pOp<pos:position pos:line="704" pos:column="23"/></name><operator pos:line="704" pos:column="23">-&gt;<pos:position pos:line="704" pos:column="28"/></operator><name pos:line="704" pos:column="25">p2<pos:position pos:line="704" pos:column="27"/></name></name><operator pos:line="704" pos:column="27">+<pos:position pos:line="704" pos:column="28"/></operator><name><name pos:line="704" pos:column="28">pOp<pos:position pos:line="704" pos:column="31"/></name><operator pos:line="704" pos:column="31">-&gt;<pos:position pos:line="704" pos:column="36"/></operator><name pos:line="704" pos:column="33">p3<pos:position pos:line="704" pos:column="35"/></name></name><operator pos:line="704" pos:column="35">-<pos:position pos:line="704" pos:column="36"/></operator><name pos:line="704" pos:column="36">n<pos:position pos:line="704" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="704" pos:column="39">pOut<pos:position pos:line="704" pos:column="43"/></name></expr></argument>)<pos:position pos:line="704" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="704" pos:column="45"/></expr_stmt>
    <if pos:line="705" pos:column="5">if<condition pos:line="705" pos:column="7">( <expr><operator pos:line="705" pos:column="9">(<pos:position pos:line="705" pos:column="10"/></operator><name pos:line="705" pos:column="10">n<pos:position pos:line="705" pos:column="11"/></name><operator pos:line="705" pos:column="11">--<pos:position pos:line="705" pos:column="13"/></operator><operator pos:line="705" pos:column="13">)<pos:position pos:line="705" pos:column="14"/></operator><operator pos:line="705" pos:column="14">==<pos:position pos:line="705" pos:column="16"/></operator><literal type="number" pos:line="705" pos:column="16">0<pos:position pos:line="705" pos:column="17"/></literal></expr> )<pos:position pos:line="705" pos:column="19"/></condition><then pos:line="705" pos:column="19"> <block type="pseudo"><break pos:line="705" pos:column="20">break;<pos:position pos:line="705" pos:column="26"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="706" pos:column="5">pOut<pos:position pos:line="706" pos:column="9"/></name><operator pos:line="706" pos:column="9">++<pos:position pos:line="706" pos:column="11"/></operator></expr>;<pos:position pos:line="706" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="707" pos:column="5">pIn1<pos:position pos:line="707" pos:column="9"/></name><operator pos:line="707" pos:column="9">++<pos:position pos:line="707" pos:column="11"/></operator></expr>;<pos:position pos:line="707" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="708" pos:column="4"/></block></while>
  <break pos:line="709" pos:column="3">break;<pos:position pos:line="709" pos:column="9"/></break>
}<pos:position pos:line="710" pos:column="2"/></block>

<comment type="block" pos:line="712" pos:column="1">/* Opcode: SCopy P1 P2 * * *
** Synopsis: r[P2]=r[P1]
**
** Make a shallow copy of register P1 into register P2.
**
** This instruction makes a shallow copy of the value.  If the value
** is a string or blob, then the copy is only a pointer to the
** original and hence if the original changes so will the copy.
** Worse, if the original is deallocated, the copy becomes invalid.
** Thus the program must guarantee that the original will not change
** during the lifetime of the copy.  Use OP_Copy to make a complete
** copy.
*/</comment>
<case pos:line="725" pos:column="1">case <expr><name pos:line="725" pos:column="6">OP_SCopy<pos:position pos:line="725" pos:column="14"/></name></expr>:<pos:position pos:line="725" pos:column="15"/></case> <block pos:line="725" pos:column="16">{            <comment type="block" pos:line="725" pos:column="29">/* out2 */</comment>
  <expr_stmt><expr><name pos:line="726" pos:column="3">pIn1<pos:position pos:line="726" pos:column="7"/></name> <operator pos:line="726" pos:column="8">=<pos:position pos:line="726" pos:column="9"/></operator> <operator pos:line="726" pos:column="10">&amp;<pos:position pos:line="726" pos:column="15"/></operator><name><name pos:line="726" pos:column="11">aMem<pos:position pos:line="726" pos:column="15"/></name><index pos:line="726" pos:column="15">[<expr><name><name pos:line="726" pos:column="16">pOp<pos:position pos:line="726" pos:column="19"/></name><operator pos:line="726" pos:column="19">-&gt;<pos:position pos:line="726" pos:column="24"/></operator><name pos:line="726" pos:column="21">p1<pos:position pos:line="726" pos:column="23"/></name></name></expr>]<pos:position pos:line="726" pos:column="24"/></index></name></expr>;<pos:position pos:line="726" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="727" pos:column="3">pOut<pos:position pos:line="727" pos:column="7"/></name> <operator pos:line="727" pos:column="8">=<pos:position pos:line="727" pos:column="9"/></operator> <operator pos:line="727" pos:column="10">&amp;<pos:position pos:line="727" pos:column="15"/></operator><name><name pos:line="727" pos:column="11">aMem<pos:position pos:line="727" pos:column="15"/></name><index pos:line="727" pos:column="15">[<expr><name><name pos:line="727" pos:column="16">pOp<pos:position pos:line="727" pos:column="19"/></name><operator pos:line="727" pos:column="19">-&gt;<pos:position pos:line="727" pos:column="24"/></operator><name pos:line="727" pos:column="21">p2<pos:position pos:line="727" pos:column="23"/></name></name></expr>]<pos:position pos:line="727" pos:column="24"/></index></name></expr>;<pos:position pos:line="727" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="728" pos:column="3">assert<pos:position pos:line="728" pos:column="9"/></name><argument_list pos:line="728" pos:column="9">( <argument><expr><name pos:line="728" pos:column="11">pOut<pos:position pos:line="728" pos:column="15"/></name><operator pos:line="728" pos:column="15">!=<pos:position pos:line="728" pos:column="17"/></operator><name pos:line="728" pos:column="17">pIn1<pos:position pos:line="728" pos:column="21"/></name></expr></argument> )<pos:position pos:line="728" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="728" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="729" pos:column="3">sqlite3VdbeMemShallowCopy<pos:position pos:line="729" pos:column="28"/></name><argument_list pos:line="729" pos:column="28">(<argument><expr><name pos:line="729" pos:column="29">pOut<pos:position pos:line="729" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="729" pos:column="35">pIn1<pos:position pos:line="729" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="729" pos:column="41">MEM_Ephem<pos:position pos:line="729" pos:column="50"/></name></expr></argument>)<pos:position pos:line="729" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="729" pos:column="52"/></expr_stmt>
<cpp:ifdef pos:line="730" pos:column="1">#<cpp:directive pos:line="730" pos:column="2">ifdef<pos:position pos:line="730" pos:column="7"/></cpp:directive> <name pos:line="730" pos:column="8">SQLITE_DEBUG<pos:position pos:line="730" pos:column="20"/></name></cpp:ifdef>
  <if pos:line="731" pos:column="3">if<condition pos:line="731" pos:column="5">( <expr><name><name pos:line="731" pos:column="7">pOut<pos:position pos:line="731" pos:column="11"/></name><operator pos:line="731" pos:column="11">-&gt;<pos:position pos:line="731" pos:column="16"/></operator><name pos:line="731" pos:column="13">pScopyFrom<pos:position pos:line="731" pos:column="23"/></name></name><operator pos:line="731" pos:column="23">==<pos:position pos:line="731" pos:column="25"/></operator><literal type="number" pos:line="731" pos:column="25">0<pos:position pos:line="731" pos:column="26"/></literal></expr> )<pos:position pos:line="731" pos:column="28"/></condition><then pos:line="731" pos:column="28"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="731" pos:column="29">pOut<pos:position pos:line="731" pos:column="33"/></name><operator pos:line="731" pos:column="33">-&gt;<pos:position pos:line="731" pos:column="38"/></operator><name pos:line="731" pos:column="35">pScopyFrom<pos:position pos:line="731" pos:column="45"/></name></name> <operator pos:line="731" pos:column="46">=<pos:position pos:line="731" pos:column="47"/></operator> <name pos:line="731" pos:column="48">pIn1<pos:position pos:line="731" pos:column="52"/></name></expr>;<pos:position pos:line="731" pos:column="53"/></expr_stmt></block></then></if>
<cpp:endif pos:line="732" pos:column="1">#<cpp:directive pos:line="732" pos:column="2">endif<pos:position pos:line="732" pos:column="7"/></cpp:directive></cpp:endif>
  <break pos:line="733" pos:column="3">break;<pos:position pos:line="733" pos:column="9"/></break>
}<pos:position pos:line="734" pos:column="2"/></block>

<comment type="block" pos:line="736" pos:column="1">/* Opcode: IntCopy P1 P2 * * *
** Synopsis: r[P2]=r[P1]
**
** Transfer the integer value held in register P1 into register P2.
**
** This is an optimized version of SCopy that works only for integer
** values.
*/</comment>
<case pos:line="744" pos:column="1">case <expr><name pos:line="744" pos:column="6">OP_IntCopy<pos:position pos:line="744" pos:column="16"/></name></expr>:<pos:position pos:line="744" pos:column="17"/></case> <block pos:line="744" pos:column="18">{            <comment type="block" pos:line="744" pos:column="31">/* out2 */</comment>
  <expr_stmt><expr><name pos:line="745" pos:column="3">pIn1<pos:position pos:line="745" pos:column="7"/></name> <operator pos:line="745" pos:column="8">=<pos:position pos:line="745" pos:column="9"/></operator> <operator pos:line="745" pos:column="10">&amp;<pos:position pos:line="745" pos:column="15"/></operator><name><name pos:line="745" pos:column="11">aMem<pos:position pos:line="745" pos:column="15"/></name><index pos:line="745" pos:column="15">[<expr><name><name pos:line="745" pos:column="16">pOp<pos:position pos:line="745" pos:column="19"/></name><operator pos:line="745" pos:column="19">-&gt;<pos:position pos:line="745" pos:column="24"/></operator><name pos:line="745" pos:column="21">p1<pos:position pos:line="745" pos:column="23"/></name></name></expr>]<pos:position pos:line="745" pos:column="24"/></index></name></expr>;<pos:position pos:line="745" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="746" pos:column="3">assert<pos:position pos:line="746" pos:column="9"/></name><argument_list pos:line="746" pos:column="9">( <argument><expr><operator pos:line="746" pos:column="11">(<pos:position pos:line="746" pos:column="12"/></operator><name><name pos:line="746" pos:column="12">pIn1<pos:position pos:line="746" pos:column="16"/></name><operator pos:line="746" pos:column="16">-&gt;<pos:position pos:line="746" pos:column="21"/></operator><name pos:line="746" pos:column="18">flags<pos:position pos:line="746" pos:column="23"/></name></name> <operator pos:line="746" pos:column="24">&amp;<pos:position pos:line="746" pos:column="29"/></operator> <name pos:line="746" pos:column="26">MEM_Int<pos:position pos:line="746" pos:column="33"/></name><operator pos:line="746" pos:column="33">)<pos:position pos:line="746" pos:column="34"/></operator><operator pos:line="746" pos:column="34">!=<pos:position pos:line="746" pos:column="36"/></operator><literal type="number" pos:line="746" pos:column="36">0<pos:position pos:line="746" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="746" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="746" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name pos:line="747" pos:column="3">pOut<pos:position pos:line="747" pos:column="7"/></name> <operator pos:line="747" pos:column="8">=<pos:position pos:line="747" pos:column="9"/></operator> <operator pos:line="747" pos:column="10">&amp;<pos:position pos:line="747" pos:column="15"/></operator><name><name pos:line="747" pos:column="11">aMem<pos:position pos:line="747" pos:column="15"/></name><index pos:line="747" pos:column="15">[<expr><name><name pos:line="747" pos:column="16">pOp<pos:position pos:line="747" pos:column="19"/></name><operator pos:line="747" pos:column="19">-&gt;<pos:position pos:line="747" pos:column="24"/></operator><name pos:line="747" pos:column="21">p2<pos:position pos:line="747" pos:column="23"/></name></name></expr>]<pos:position pos:line="747" pos:column="24"/></index></name></expr>;<pos:position pos:line="747" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="748" pos:column="3">sqlite3VdbeMemSetInt64<pos:position pos:line="748" pos:column="25"/></name><argument_list pos:line="748" pos:column="25">(<argument><expr><name pos:line="748" pos:column="26">pOut<pos:position pos:line="748" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="748" pos:column="32">pIn1<pos:position pos:line="748" pos:column="36"/></name><operator pos:line="748" pos:column="36">-&gt;<pos:position pos:line="748" pos:column="41"/></operator><name pos:line="748" pos:column="38">u<pos:position pos:line="748" pos:column="39"/></name><operator pos:line="748" pos:column="39">.<pos:position pos:line="748" pos:column="40"/></operator><name pos:line="748" pos:column="40">i<pos:position pos:line="748" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="748" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="748" pos:column="43"/></expr_stmt>
  <break pos:line="749" pos:column="3">break;<pos:position pos:line="749" pos:column="9"/></break>
}<pos:position pos:line="750" pos:column="2"/></block>

<comment type="block" pos:line="752" pos:column="1">/* Opcode: ResultRow P1 P2 * * *
** Synopsis: output=r[P1@P2]
**
** The registers P1 through P1+P2-1 contain a single row of
** results. This opcode causes the sqlite3_step() call to terminate
** with an SQLITE_ROW return code and it sets up the sqlite3_stmt
** structure to provide access to the r(P1)..r(P1+P2-1) values as
** the result row.
*/</comment>
<case pos:line="761" pos:column="1">case <expr><name pos:line="761" pos:column="6">OP_ResultRow<pos:position pos:line="761" pos:column="18"/></name></expr>:<pos:position pos:line="761" pos:column="19"/></case> <block pos:line="761" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="762" pos:column="3">Mem<pos:position pos:line="762" pos:column="6"/></name> <modifier pos:line="762" pos:column="7">*<pos:position pos:line="762" pos:column="8"/></modifier></type><name pos:line="762" pos:column="8">pMem<pos:position pos:line="762" pos:column="12"/></name></decl>;<pos:position pos:line="762" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="763" pos:column="3">int<pos:position pos:line="763" pos:column="6"/></name></type> <name pos:line="763" pos:column="7">i<pos:position pos:line="763" pos:column="8"/></name></decl>;<pos:position pos:line="763" pos:column="9"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="764" pos:column="3">assert<pos:position pos:line="764" pos:column="9"/></name><argument_list pos:line="764" pos:column="9">( <argument><expr><name><name pos:line="764" pos:column="11">p<pos:position pos:line="764" pos:column="12"/></name><operator pos:line="764" pos:column="12">-&gt;<pos:position pos:line="764" pos:column="17"/></operator><name pos:line="764" pos:column="14">nResColumn<pos:position pos:line="764" pos:column="24"/></name></name><operator pos:line="764" pos:column="24">==<pos:position pos:line="764" pos:column="26"/></operator><name><name pos:line="764" pos:column="26">pOp<pos:position pos:line="764" pos:column="29"/></name><operator pos:line="764" pos:column="29">-&gt;<pos:position pos:line="764" pos:column="34"/></operator><name pos:line="764" pos:column="31">p2<pos:position pos:line="764" pos:column="33"/></name></name></expr></argument> )<pos:position pos:line="764" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="764" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="765" pos:column="3">assert<pos:position pos:line="765" pos:column="9"/></name><argument_list pos:line="765" pos:column="9">( <argument><expr><name><name pos:line="765" pos:column="11">pOp<pos:position pos:line="765" pos:column="14"/></name><operator pos:line="765" pos:column="14">-&gt;<pos:position pos:line="765" pos:column="19"/></operator><name pos:line="765" pos:column="16">p1<pos:position pos:line="765" pos:column="18"/></name></name><operator pos:line="765" pos:column="18">&gt;<pos:position pos:line="765" pos:column="22"/></operator><literal type="number" pos:line="765" pos:column="19">0<pos:position pos:line="765" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="765" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="765" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="766" pos:column="3">assert<pos:position pos:line="766" pos:column="9"/></name><argument_list pos:line="766" pos:column="9">( <argument><expr><name><name pos:line="766" pos:column="11">pOp<pos:position pos:line="766" pos:column="14"/></name><operator pos:line="766" pos:column="14">-&gt;<pos:position pos:line="766" pos:column="19"/></operator><name pos:line="766" pos:column="16">p1<pos:position pos:line="766" pos:column="18"/></name></name><operator pos:line="766" pos:column="18">+<pos:position pos:line="766" pos:column="19"/></operator><name><name pos:line="766" pos:column="19">pOp<pos:position pos:line="766" pos:column="22"/></name><operator pos:line="766" pos:column="22">-&gt;<pos:position pos:line="766" pos:column="27"/></operator><name pos:line="766" pos:column="24">p2<pos:position pos:line="766" pos:column="26"/></name></name><operator pos:line="766" pos:column="26">&lt;=<pos:position pos:line="766" pos:column="31"/></operator><operator pos:line="766" pos:column="28">(<pos:position pos:line="766" pos:column="29"/></operator><name><name pos:line="766" pos:column="29">p<pos:position pos:line="766" pos:column="30"/></name><operator pos:line="766" pos:column="30">-&gt;<pos:position pos:line="766" pos:column="35"/></operator><name pos:line="766" pos:column="32">nMem<pos:position pos:line="766" pos:column="36"/></name></name><operator pos:line="766" pos:column="36">+<pos:position pos:line="766" pos:column="37"/></operator><literal type="number" pos:line="766" pos:column="37">1<pos:position pos:line="766" pos:column="38"/></literal> <operator pos:line="766" pos:column="39">-<pos:position pos:line="766" pos:column="40"/></operator> <name><name pos:line="766" pos:column="41">p<pos:position pos:line="766" pos:column="42"/></name><operator pos:line="766" pos:column="42">-&gt;<pos:position pos:line="766" pos:column="47"/></operator><name pos:line="766" pos:column="44">nCursor<pos:position pos:line="766" pos:column="51"/></name></name><operator pos:line="766" pos:column="51">)<pos:position pos:line="766" pos:column="52"/></operator><operator pos:line="766" pos:column="52">+<pos:position pos:line="766" pos:column="53"/></operator><literal type="number" pos:line="766" pos:column="53">1<pos:position pos:line="766" pos:column="54"/></literal></expr></argument> )<pos:position pos:line="766" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="766" pos:column="57"/></expr_stmt>

<cpp:ifndef pos:line="768" pos:column="1">#<cpp:directive pos:line="768" pos:column="2">ifndef<pos:position pos:line="768" pos:column="8"/></cpp:directive> <name pos:line="768" pos:column="9">SQLITE_OMIT_PROGRESS_CALLBACK<pos:position pos:line="768" pos:column="38"/></name></cpp:ifndef>
  <comment type="block" pos:line="769" pos:column="3">/* Run the progress counter just before returning.
  */</comment>
  <if pos:line="771" pos:column="3">if<condition pos:line="771" pos:column="5">( <expr><name><name pos:line="771" pos:column="7">db<pos:position pos:line="771" pos:column="9"/></name><operator pos:line="771" pos:column="9">-&gt;<pos:position pos:line="771" pos:column="14"/></operator><name pos:line="771" pos:column="11">xProgress<pos:position pos:line="771" pos:column="20"/></name></name><operator pos:line="771" pos:column="20">!=<pos:position pos:line="771" pos:column="22"/></operator><literal type="number" pos:line="771" pos:column="22">0<pos:position pos:line="771" pos:column="23"/></literal>
   <operator pos:line="772" pos:column="4">&amp;&amp;<pos:position pos:line="772" pos:column="14"/></operator> <name pos:line="772" pos:column="7">nVmStep<pos:position pos:line="772" pos:column="14"/></name><operator pos:line="772" pos:column="14">&gt;=<pos:position pos:line="772" pos:column="19"/></operator><name pos:line="772" pos:column="16">nProgressLimit<pos:position pos:line="772" pos:column="30"/></name> 
   <operator pos:line="773" pos:column="4">&amp;&amp;<pos:position pos:line="773" pos:column="14"/></operator> <call><name><name pos:line="773" pos:column="7">db<pos:position pos:line="773" pos:column="9"/></name><operator pos:line="773" pos:column="9">-&gt;<pos:position pos:line="773" pos:column="14"/></operator><name pos:line="773" pos:column="11">xProgress<pos:position pos:line="773" pos:column="20"/></name></name><argument_list pos:line="773" pos:column="20">(<argument><expr><name><name pos:line="773" pos:column="21">db<pos:position pos:line="773" pos:column="23"/></name><operator pos:line="773" pos:column="23">-&gt;<pos:position pos:line="773" pos:column="28"/></operator><name pos:line="773" pos:column="25">pProgressArg<pos:position pos:line="773" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="773" pos:column="38"/></argument_list></call><operator pos:line="773" pos:column="38">!=<pos:position pos:line="773" pos:column="40"/></operator><literal type="number" pos:line="773" pos:column="40">0<pos:position pos:line="773" pos:column="41"/></literal></expr>
  )<pos:position pos:line="774" pos:column="4"/></condition><then><block pos:line="774" pos:column="4">{
    <expr_stmt><expr><name pos:line="775" pos:column="5">rc<pos:position pos:line="775" pos:column="7"/></name> <operator pos:line="775" pos:column="8">=<pos:position pos:line="775" pos:column="9"/></operator> <name pos:line="775" pos:column="10">SQLITE_INTERRUPT<pos:position pos:line="775" pos:column="26"/></name></expr>;<pos:position pos:line="775" pos:column="27"/></expr_stmt>
    <goto pos:line="776" pos:column="5">goto <name pos:line="776" pos:column="10">abort_due_to_error<pos:position pos:line="776" pos:column="28"/></name>;<pos:position pos:line="776" pos:column="29"/></goto>
  }<pos:position pos:line="777" pos:column="4"/></block></then></if>
<cpp:endif pos:line="778" pos:column="1">#<cpp:directive pos:line="778" pos:column="2">endif<pos:position pos:line="778" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="780" pos:column="3">/* If this statement has violated immediate foreign key constraints, do
  ** not return the number of rows modified. And do not RELEASE the statement
  ** transaction. It needs to be rolled back.  */</comment>
  <if pos:line="783" pos:column="3">if<condition pos:line="783" pos:column="5">( <expr><name pos:line="783" pos:column="7">SQLITE_OK<pos:position pos:line="783" pos:column="16"/></name><operator pos:line="783" pos:column="16">!=<pos:position pos:line="783" pos:column="18"/></operator><operator pos:line="783" pos:column="18">(<pos:position pos:line="783" pos:column="19"/></operator><name pos:line="783" pos:column="19">rc<pos:position pos:line="783" pos:column="21"/></name> <operator pos:line="783" pos:column="22">=<pos:position pos:line="783" pos:column="23"/></operator> <call><name pos:line="783" pos:column="24">sqlite3VdbeCheckFk<pos:position pos:line="783" pos:column="42"/></name><argument_list pos:line="783" pos:column="42">(<argument><expr><name pos:line="783" pos:column="43">p<pos:position pos:line="783" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="783" pos:column="46">0<pos:position pos:line="783" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="783" pos:column="48"/></argument_list></call><operator pos:line="783" pos:column="48">)<pos:position pos:line="783" pos:column="49"/></operator></expr> )<pos:position pos:line="783" pos:column="51"/></condition><then><block pos:line="783" pos:column="51">{
    <expr_stmt><expr><call><name pos:line="784" pos:column="5">assert<pos:position pos:line="784" pos:column="11"/></name><argument_list pos:line="784" pos:column="11">( <argument><expr><name><name pos:line="784" pos:column="13">db<pos:position pos:line="784" pos:column="15"/></name><operator pos:line="784" pos:column="15">-&gt;<pos:position pos:line="784" pos:column="20"/></operator><name pos:line="784" pos:column="17">flags<pos:position pos:line="784" pos:column="22"/></name></name><operator pos:line="784" pos:column="22">&amp;<pos:position pos:line="784" pos:column="27"/></operator><name pos:line="784" pos:column="23">SQLITE_CountRows<pos:position pos:line="784" pos:column="39"/></name></expr></argument> )<pos:position pos:line="784" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="784" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="785" pos:column="5">assert<pos:position pos:line="785" pos:column="11"/></name><argument_list pos:line="785" pos:column="11">( <argument><expr><name><name pos:line="785" pos:column="13">p<pos:position pos:line="785" pos:column="14"/></name><operator pos:line="785" pos:column="14">-&gt;<pos:position pos:line="785" pos:column="19"/></operator><name pos:line="785" pos:column="16">usesStmtJournal<pos:position pos:line="785" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="785" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="785" pos:column="34"/></expr_stmt>
    <goto pos:line="786" pos:column="5">goto <name pos:line="786" pos:column="10">abort_due_to_error<pos:position pos:line="786" pos:column="28"/></name>;<pos:position pos:line="786" pos:column="29"/></goto>
  }<pos:position pos:line="787" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="789" pos:column="3">/* If the SQLITE_CountRows flag is set in sqlite3.flags mask, then 
  ** DML statements invoke this opcode to return the number of rows 
  ** modified to the user. This is the only way that a VM that
  ** opens a statement transaction may invoke this opcode.
  **
  ** In case this is such a statement, close any statement transaction
  ** opened by this VM before returning control to the user. This is to
  ** ensure that statement-transactions are always nested, not overlapping.
  ** If the open statement-transaction is not closed here, then the user
  ** may step another VM that opens its own statement transaction. This
  ** may lead to overlapping statement transactions.
  **
  ** The statement transaction is never a top-level transaction.  Hence
  ** the RELEASE call below can never fail.
  */</comment>
  <expr_stmt><expr><call><name pos:line="804" pos:column="3">assert<pos:position pos:line="804" pos:column="9"/></name><argument_list pos:line="804" pos:column="9">( <argument><expr><name><name pos:line="804" pos:column="11">p<pos:position pos:line="804" pos:column="12"/></name><operator pos:line="804" pos:column="12">-&gt;<pos:position pos:line="804" pos:column="17"/></operator><name pos:line="804" pos:column="14">iStatement<pos:position pos:line="804" pos:column="24"/></name></name><operator pos:line="804" pos:column="24">==<pos:position pos:line="804" pos:column="26"/></operator><literal type="number" pos:line="804" pos:column="26">0<pos:position pos:line="804" pos:column="27"/></literal> <operator pos:line="804" pos:column="28">||<pos:position pos:line="804" pos:column="30"/></operator> <name><name pos:line="804" pos:column="31">db<pos:position pos:line="804" pos:column="33"/></name><operator pos:line="804" pos:column="33">-&gt;<pos:position pos:line="804" pos:column="38"/></operator><name pos:line="804" pos:column="35">flags<pos:position pos:line="804" pos:column="40"/></name></name><operator pos:line="804" pos:column="40">&amp;<pos:position pos:line="804" pos:column="45"/></operator><name pos:line="804" pos:column="41">SQLITE_CountRows<pos:position pos:line="804" pos:column="57"/></name></expr></argument> )<pos:position pos:line="804" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="804" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="805" pos:column="3">rc<pos:position pos:line="805" pos:column="5"/></name> <operator pos:line="805" pos:column="6">=<pos:position pos:line="805" pos:column="7"/></operator> <call><name pos:line="805" pos:column="8">sqlite3VdbeCloseStatement<pos:position pos:line="805" pos:column="33"/></name><argument_list pos:line="805" pos:column="33">(<argument><expr><name pos:line="805" pos:column="34">p<pos:position pos:line="805" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="805" pos:column="37">SAVEPOINT_RELEASE<pos:position pos:line="805" pos:column="54"/></name></expr></argument>)<pos:position pos:line="805" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="805" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="806" pos:column="3">assert<pos:position pos:line="806" pos:column="9"/></name><argument_list pos:line="806" pos:column="9">( <argument><expr><name pos:line="806" pos:column="11">rc<pos:position pos:line="806" pos:column="13"/></name><operator pos:line="806" pos:column="13">==<pos:position pos:line="806" pos:column="15"/></operator><name pos:line="806" pos:column="15">SQLITE_OK<pos:position pos:line="806" pos:column="24"/></name></expr></argument> )<pos:position pos:line="806" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="806" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="808" pos:column="3">/* Invalidate all ephemeral cursor row caches */</comment>
  <expr_stmt><expr><name><name pos:line="809" pos:column="3">p<pos:position pos:line="809" pos:column="4"/></name><operator pos:line="809" pos:column="4">-&gt;<pos:position pos:line="809" pos:column="9"/></operator><name pos:line="809" pos:column="6">cacheCtr<pos:position pos:line="809" pos:column="14"/></name></name> <operator pos:line="809" pos:column="15">=<pos:position pos:line="809" pos:column="16"/></operator> <operator pos:line="809" pos:column="17">(<pos:position pos:line="809" pos:column="18"/></operator><name><name pos:line="809" pos:column="18">p<pos:position pos:line="809" pos:column="19"/></name><operator pos:line="809" pos:column="19">-&gt;<pos:position pos:line="809" pos:column="24"/></operator><name pos:line="809" pos:column="21">cacheCtr<pos:position pos:line="809" pos:column="29"/></name></name> <operator pos:line="809" pos:column="30">+<pos:position pos:line="809" pos:column="31"/></operator> <literal type="number" pos:line="809" pos:column="32">2<pos:position pos:line="809" pos:column="33"/></literal><operator pos:line="809" pos:column="33">)<pos:position pos:line="809" pos:column="34"/></operator><operator pos:line="809" pos:column="34">|<pos:position pos:line="809" pos:column="35"/></operator><literal type="number" pos:line="809" pos:column="35">1<pos:position pos:line="809" pos:column="36"/></literal></expr>;<pos:position pos:line="809" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="811" pos:column="3">/* Make sure the results of the current row are \000 terminated
  ** and have an assigned type.  The results are de-ephemeralized as
  ** a side effect.
  */</comment>
  <expr_stmt><expr><name pos:line="815" pos:column="3">pMem<pos:position pos:line="815" pos:column="7"/></name> <operator pos:line="815" pos:column="8">=<pos:position pos:line="815" pos:column="9"/></operator> <name><name pos:line="815" pos:column="10">p<pos:position pos:line="815" pos:column="11"/></name><operator pos:line="815" pos:column="11">-&gt;<pos:position pos:line="815" pos:column="16"/></operator><name pos:line="815" pos:column="13">pResultSet<pos:position pos:line="815" pos:column="23"/></name></name> <operator pos:line="815" pos:column="24">=<pos:position pos:line="815" pos:column="25"/></operator> <operator pos:line="815" pos:column="26">&amp;<pos:position pos:line="815" pos:column="31"/></operator><name><name pos:line="815" pos:column="27">aMem<pos:position pos:line="815" pos:column="31"/></name><index pos:line="815" pos:column="31">[<expr><name><name pos:line="815" pos:column="32">pOp<pos:position pos:line="815" pos:column="35"/></name><operator pos:line="815" pos:column="35">-&gt;<pos:position pos:line="815" pos:column="40"/></operator><name pos:line="815" pos:column="37">p1<pos:position pos:line="815" pos:column="39"/></name></name></expr>]<pos:position pos:line="815" pos:column="40"/></index></name></expr>;<pos:position pos:line="815" pos:column="41"/></expr_stmt>
  <for pos:line="816" pos:column="3">for<control pos:line="816" pos:column="6">(<init><expr><name pos:line="816" pos:column="7">i<pos:position pos:line="816" pos:column="8"/></name><operator pos:line="816" pos:column="8">=<pos:position pos:line="816" pos:column="9"/></operator><literal type="number" pos:line="816" pos:column="9">0<pos:position pos:line="816" pos:column="10"/></literal></expr>;<pos:position pos:line="816" pos:column="11"/></init> <condition><expr><name pos:line="816" pos:column="12">i<pos:position pos:line="816" pos:column="13"/></name><operator pos:line="816" pos:column="13">&lt;<pos:position pos:line="816" pos:column="17"/></operator><name><name pos:line="816" pos:column="14">pOp<pos:position pos:line="816" pos:column="17"/></name><operator pos:line="816" pos:column="17">-&gt;<pos:position pos:line="816" pos:column="22"/></operator><name pos:line="816" pos:column="19">p2<pos:position pos:line="816" pos:column="21"/></name></name></expr>;<pos:position pos:line="816" pos:column="22"/></condition> <incr><expr><name pos:line="816" pos:column="23">i<pos:position pos:line="816" pos:column="24"/></name><operator pos:line="816" pos:column="24">++<pos:position pos:line="816" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="816" pos:column="27"/></control><block pos:line="816" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="817" pos:column="5">assert<pos:position pos:line="817" pos:column="11"/></name><argument_list pos:line="817" pos:column="11">( <argument><expr><call><name pos:line="817" pos:column="13">memIsValid<pos:position pos:line="817" pos:column="23"/></name><argument_list pos:line="817" pos:column="23">(<argument><expr><operator pos:line="817" pos:column="24">&amp;<pos:position pos:line="817" pos:column="29"/></operator><name><name pos:line="817" pos:column="25">pMem<pos:position pos:line="817" pos:column="29"/></name><index pos:line="817" pos:column="29">[<expr><name pos:line="817" pos:column="30">i<pos:position pos:line="817" pos:column="31"/></name></expr>]<pos:position pos:line="817" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="817" pos:column="33"/></argument_list></call></expr></argument> )<pos:position pos:line="817" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="817" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="818" pos:column="5">Deephemeralize<pos:position pos:line="818" pos:column="19"/></name><argument_list pos:line="818" pos:column="19">(<argument><expr><operator pos:line="818" pos:column="20">&amp;<pos:position pos:line="818" pos:column="25"/></operator><name><name pos:line="818" pos:column="21">pMem<pos:position pos:line="818" pos:column="25"/></name><index pos:line="818" pos:column="25">[<expr><name pos:line="818" pos:column="26">i<pos:position pos:line="818" pos:column="27"/></name></expr>]<pos:position pos:line="818" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="818" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="818" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="819" pos:column="5">assert<pos:position pos:line="819" pos:column="11"/></name><argument_list pos:line="819" pos:column="11">( <argument><expr><operator pos:line="819" pos:column="13">(<pos:position pos:line="819" pos:column="14"/></operator><name><name pos:line="819" pos:column="14">pMem<pos:position pos:line="819" pos:column="18"/></name><index pos:line="819" pos:column="18">[<expr><name pos:line="819" pos:column="19">i<pos:position pos:line="819" pos:column="20"/></name></expr>]<pos:position pos:line="819" pos:column="21"/></index></name><operator pos:line="819" pos:column="21">.<pos:position pos:line="819" pos:column="22"/></operator><name pos:line="819" pos:column="22">flags<pos:position pos:line="819" pos:column="27"/></name> <operator pos:line="819" pos:column="28">&amp;<pos:position pos:line="819" pos:column="33"/></operator> <name pos:line="819" pos:column="30">MEM_Ephem<pos:position pos:line="819" pos:column="39"/></name><operator pos:line="819" pos:column="39">)<pos:position pos:line="819" pos:column="40"/></operator><operator pos:line="819" pos:column="40">==<pos:position pos:line="819" pos:column="42"/></operator><literal type="number" pos:line="819" pos:column="42">0<pos:position pos:line="819" pos:column="43"/></literal>
            <operator pos:line="820" pos:column="13">||<pos:position pos:line="820" pos:column="15"/></operator> <operator pos:line="820" pos:column="16">(<pos:position pos:line="820" pos:column="17"/></operator><name><name pos:line="820" pos:column="17">pMem<pos:position pos:line="820" pos:column="21"/></name><index pos:line="820" pos:column="21">[<expr><name pos:line="820" pos:column="22">i<pos:position pos:line="820" pos:column="23"/></name></expr>]<pos:position pos:line="820" pos:column="24"/></index></name><operator pos:line="820" pos:column="24">.<pos:position pos:line="820" pos:column="25"/></operator><name pos:line="820" pos:column="25">flags<pos:position pos:line="820" pos:column="30"/></name> <operator pos:line="820" pos:column="31">&amp;<pos:position pos:line="820" pos:column="36"/></operator> <operator pos:line="820" pos:column="33">(<pos:position pos:line="820" pos:column="34"/></operator><name pos:line="820" pos:column="34">MEM_Str<pos:position pos:line="820" pos:column="41"/></name><operator pos:line="820" pos:column="41">|<pos:position pos:line="820" pos:column="42"/></operator><name pos:line="820" pos:column="42">MEM_Blob<pos:position pos:line="820" pos:column="50"/></name><operator pos:line="820" pos:column="50">)<pos:position pos:line="820" pos:column="51"/></operator><operator pos:line="820" pos:column="51">)<pos:position pos:line="820" pos:column="52"/></operator><operator pos:line="820" pos:column="52">==<pos:position pos:line="820" pos:column="54"/></operator><literal type="number" pos:line="820" pos:column="54">0<pos:position pos:line="820" pos:column="55"/></literal></expr></argument> )<pos:position pos:line="820" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="820" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="821" pos:column="5">sqlite3VdbeMemNulTerminate<pos:position pos:line="821" pos:column="31"/></name><argument_list pos:line="821" pos:column="31">(<argument><expr><operator pos:line="821" pos:column="32">&amp;<pos:position pos:line="821" pos:column="37"/></operator><name><name pos:line="821" pos:column="33">pMem<pos:position pos:line="821" pos:column="37"/></name><index pos:line="821" pos:column="37">[<expr><name pos:line="821" pos:column="38">i<pos:position pos:line="821" pos:column="39"/></name></expr>]<pos:position pos:line="821" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="821" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="821" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="822" pos:column="5">REGISTER_TRACE<pos:position pos:line="822" pos:column="19"/></name><argument_list pos:line="822" pos:column="19">(<argument><expr><name><name pos:line="822" pos:column="20">pOp<pos:position pos:line="822" pos:column="23"/></name><operator pos:line="822" pos:column="23">-&gt;<pos:position pos:line="822" pos:column="28"/></operator><name pos:line="822" pos:column="25">p1<pos:position pos:line="822" pos:column="27"/></name></name><operator pos:line="822" pos:column="27">+<pos:position pos:line="822" pos:column="28"/></operator><name pos:line="822" pos:column="28">i<pos:position pos:line="822" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="822" pos:column="31">&amp;<pos:position pos:line="822" pos:column="36"/></operator><name><name pos:line="822" pos:column="32">pMem<pos:position pos:line="822" pos:column="36"/></name><index pos:line="822" pos:column="36">[<expr><name pos:line="822" pos:column="37">i<pos:position pos:line="822" pos:column="38"/></name></expr>]<pos:position pos:line="822" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="822" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="822" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="823" pos:column="4"/></block></for>
  <if pos:line="824" pos:column="3">if<condition pos:line="824" pos:column="5">( <expr><name><name pos:line="824" pos:column="7">db<pos:position pos:line="824" pos:column="9"/></name><operator pos:line="824" pos:column="9">-&gt;<pos:position pos:line="824" pos:column="14"/></operator><name pos:line="824" pos:column="11">mallocFailed<pos:position pos:line="824" pos:column="23"/></name></name></expr> )<pos:position pos:line="824" pos:column="25"/></condition><then pos:line="824" pos:column="25"> <block type="pseudo"><goto pos:line="824" pos:column="26">goto <name pos:line="824" pos:column="31">no_mem<pos:position pos:line="824" pos:column="37"/></name>;<pos:position pos:line="824" pos:column="38"/></goto></block></then></if>

  <if pos:line="826" pos:column="3">if<condition pos:line="826" pos:column="5">( <expr><name><name pos:line="826" pos:column="7">db<pos:position pos:line="826" pos:column="9"/></name><operator pos:line="826" pos:column="9">-&gt;<pos:position pos:line="826" pos:column="14"/></operator><name pos:line="826" pos:column="11">mTrace<pos:position pos:line="826" pos:column="17"/></name></name> <operator pos:line="826" pos:column="18">&amp;<pos:position pos:line="826" pos:column="23"/></operator> <name pos:line="826" pos:column="20">SQLITE_TRACE_ROW<pos:position pos:line="826" pos:column="36"/></name></expr> )<pos:position pos:line="826" pos:column="38"/></condition><then><block pos:line="826" pos:column="38">{
    <expr_stmt><expr><call><name><name pos:line="827" pos:column="5">db<pos:position pos:line="827" pos:column="7"/></name><operator pos:line="827" pos:column="7">-&gt;<pos:position pos:line="827" pos:column="12"/></operator><name pos:line="827" pos:column="9">xTrace<pos:position pos:line="827" pos:column="15"/></name></name><argument_list pos:line="827" pos:column="15">(<argument><expr><name pos:line="827" pos:column="16">SQLITE_TRACE_ROW<pos:position pos:line="827" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="827" pos:column="34">db<pos:position pos:line="827" pos:column="36"/></name><operator pos:line="827" pos:column="36">-&gt;<pos:position pos:line="827" pos:column="41"/></operator><name pos:line="827" pos:column="38">pTraceArg<pos:position pos:line="827" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="827" pos:column="49">p<pos:position pos:line="827" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="827" pos:column="52">0<pos:position pos:line="827" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="827" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="827" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="828" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="830" pos:column="3">/* Return SQLITE_ROW
  */</comment>
  <expr_stmt><expr><name><name pos:line="832" pos:column="3">p<pos:position pos:line="832" pos:column="4"/></name><operator pos:line="832" pos:column="4">-&gt;<pos:position pos:line="832" pos:column="9"/></operator><name pos:line="832" pos:column="6">pc<pos:position pos:line="832" pos:column="8"/></name></name> <operator pos:line="832" pos:column="9">=<pos:position pos:line="832" pos:column="10"/></operator> <call pos:line="832" pos:column="11">(<name pos:line="832" pos:column="12">int<pos:position pos:line="832" pos:column="15"/></name>)<argument_list pos:line="832" pos:column="16">(<argument><expr><name pos:line="832" pos:column="17">pOp<pos:position pos:line="832" pos:column="20"/></name> <operator pos:line="832" pos:column="21">-<pos:position pos:line="832" pos:column="22"/></operator> <name pos:line="832" pos:column="23">aOp<pos:position pos:line="832" pos:column="26"/></name></expr></argument>)<pos:position pos:line="832" pos:column="27"/></argument_list></call> <operator pos:line="832" pos:column="28">+<pos:position pos:line="832" pos:column="29"/></operator> <literal type="number" pos:line="832" pos:column="30">1<pos:position pos:line="832" pos:column="31"/></literal></expr>;<pos:position pos:line="832" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name pos:line="833" pos:column="3">rc<pos:position pos:line="833" pos:column="5"/></name> <operator pos:line="833" pos:column="6">=<pos:position pos:line="833" pos:column="7"/></operator> <name pos:line="833" pos:column="8">SQLITE_ROW<pos:position pos:line="833" pos:column="18"/></name></expr>;<pos:position pos:line="833" pos:column="19"/></expr_stmt>
  <goto pos:line="834" pos:column="3">goto <name pos:line="834" pos:column="8">vdbe_return<pos:position pos:line="834" pos:column="19"/></name>;<pos:position pos:line="834" pos:column="20"/></goto>
}<pos:position pos:line="835" pos:column="2"/></block>

<comment type="block" pos:line="837" pos:column="1">/* Opcode: Concat P1 P2 P3 * *
** Synopsis: r[P3]=r[P2]+r[P1]
**
** Add the text in register P1 onto the end of the text in
** register P2 and store the result in register P3.
** If either the P1 or P2 text are NULL then store NULL in P3.
**
**   P3 = P2 || P1
**
** It is illegal for P1 and P3 to be the same register. Sometimes,
** if P3 is the same register as P2, the implementation is able
** to avoid a memcpy().
*/</comment>
<case pos:line="850" pos:column="1">case <expr><name pos:line="850" pos:column="6">OP_Concat<pos:position pos:line="850" pos:column="15"/></name></expr>:<pos:position pos:line="850" pos:column="16"/></case> <block pos:line="850" pos:column="17">{           <comment type="block" pos:line="850" pos:column="29">/* same as TK_CONCAT, in1, in2, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="851" pos:column="3">i64<pos:position pos:line="851" pos:column="6"/></name></type> <name pos:line="851" pos:column="7">nByte<pos:position pos:line="851" pos:column="12"/></name></decl>;<pos:position pos:line="851" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="853" pos:column="3">pIn1<pos:position pos:line="853" pos:column="7"/></name> <operator pos:line="853" pos:column="8">=<pos:position pos:line="853" pos:column="9"/></operator> <operator pos:line="853" pos:column="10">&amp;<pos:position pos:line="853" pos:column="15"/></operator><name><name pos:line="853" pos:column="11">aMem<pos:position pos:line="853" pos:column="15"/></name><index pos:line="853" pos:column="15">[<expr><name><name pos:line="853" pos:column="16">pOp<pos:position pos:line="853" pos:column="19"/></name><operator pos:line="853" pos:column="19">-&gt;<pos:position pos:line="853" pos:column="24"/></operator><name pos:line="853" pos:column="21">p1<pos:position pos:line="853" pos:column="23"/></name></name></expr>]<pos:position pos:line="853" pos:column="24"/></index></name></expr>;<pos:position pos:line="853" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="854" pos:column="3">pIn2<pos:position pos:line="854" pos:column="7"/></name> <operator pos:line="854" pos:column="8">=<pos:position pos:line="854" pos:column="9"/></operator> <operator pos:line="854" pos:column="10">&amp;<pos:position pos:line="854" pos:column="15"/></operator><name><name pos:line="854" pos:column="11">aMem<pos:position pos:line="854" pos:column="15"/></name><index pos:line="854" pos:column="15">[<expr><name><name pos:line="854" pos:column="16">pOp<pos:position pos:line="854" pos:column="19"/></name><operator pos:line="854" pos:column="19">-&gt;<pos:position pos:line="854" pos:column="24"/></operator><name pos:line="854" pos:column="21">p2<pos:position pos:line="854" pos:column="23"/></name></name></expr>]<pos:position pos:line="854" pos:column="24"/></index></name></expr>;<pos:position pos:line="854" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="855" pos:column="3">pOut<pos:position pos:line="855" pos:column="7"/></name> <operator pos:line="855" pos:column="8">=<pos:position pos:line="855" pos:column="9"/></operator> <operator pos:line="855" pos:column="10">&amp;<pos:position pos:line="855" pos:column="15"/></operator><name><name pos:line="855" pos:column="11">aMem<pos:position pos:line="855" pos:column="15"/></name><index pos:line="855" pos:column="15">[<expr><name><name pos:line="855" pos:column="16">pOp<pos:position pos:line="855" pos:column="19"/></name><operator pos:line="855" pos:column="19">-&gt;<pos:position pos:line="855" pos:column="24"/></operator><name pos:line="855" pos:column="21">p3<pos:position pos:line="855" pos:column="23"/></name></name></expr>]<pos:position pos:line="855" pos:column="24"/></index></name></expr>;<pos:position pos:line="855" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="856" pos:column="3">assert<pos:position pos:line="856" pos:column="9"/></name><argument_list pos:line="856" pos:column="9">( <argument><expr><name pos:line="856" pos:column="11">pIn1<pos:position pos:line="856" pos:column="15"/></name><operator pos:line="856" pos:column="15">!=<pos:position pos:line="856" pos:column="17"/></operator><name pos:line="856" pos:column="17">pOut<pos:position pos:line="856" pos:column="21"/></name></expr></argument> )<pos:position pos:line="856" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="856" pos:column="24"/></expr_stmt>
  <if pos:line="857" pos:column="3">if<condition pos:line="857" pos:column="5">( <expr><operator pos:line="857" pos:column="7">(<pos:position pos:line="857" pos:column="8"/></operator><name><name pos:line="857" pos:column="8">pIn1<pos:position pos:line="857" pos:column="12"/></name><operator pos:line="857" pos:column="12">-&gt;<pos:position pos:line="857" pos:column="17"/></operator><name pos:line="857" pos:column="14">flags<pos:position pos:line="857" pos:column="19"/></name></name> <operator pos:line="857" pos:column="20">|<pos:position pos:line="857" pos:column="21"/></operator> <name><name pos:line="857" pos:column="22">pIn2<pos:position pos:line="857" pos:column="26"/></name><operator pos:line="857" pos:column="26">-&gt;<pos:position pos:line="857" pos:column="31"/></operator><name pos:line="857" pos:column="28">flags<pos:position pos:line="857" pos:column="33"/></name></name><operator pos:line="857" pos:column="33">)<pos:position pos:line="857" pos:column="34"/></operator> <operator pos:line="857" pos:column="35">&amp;<pos:position pos:line="857" pos:column="40"/></operator> <name pos:line="857" pos:column="37">MEM_Null<pos:position pos:line="857" pos:column="45"/></name></expr> )<pos:position pos:line="857" pos:column="47"/></condition><then><block pos:line="857" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="858" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="858" pos:column="26"/></name><argument_list pos:line="858" pos:column="26">(<argument><expr><name pos:line="858" pos:column="27">pOut<pos:position pos:line="858" pos:column="31"/></name></expr></argument>)<pos:position pos:line="858" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="858" pos:column="33"/></expr_stmt>
    <break pos:line="859" pos:column="5">break;<pos:position pos:line="859" pos:column="11"/></break>
  }<pos:position pos:line="860" pos:column="4"/></block></then></if>
  <if pos:line="861" pos:column="3">if<condition pos:line="861" pos:column="5">( <expr><call><name pos:line="861" pos:column="7">ExpandBlob<pos:position pos:line="861" pos:column="17"/></name><argument_list pos:line="861" pos:column="17">(<argument><expr><name pos:line="861" pos:column="18">pIn1<pos:position pos:line="861" pos:column="22"/></name></expr></argument>)<pos:position pos:line="861" pos:column="23"/></argument_list></call> <operator pos:line="861" pos:column="24">||<pos:position pos:line="861" pos:column="26"/></operator> <call><name pos:line="861" pos:column="27">ExpandBlob<pos:position pos:line="861" pos:column="37"/></name><argument_list pos:line="861" pos:column="37">(<argument><expr><name pos:line="861" pos:column="38">pIn2<pos:position pos:line="861" pos:column="42"/></name></expr></argument>)<pos:position pos:line="861" pos:column="43"/></argument_list></call></expr> )<pos:position pos:line="861" pos:column="45"/></condition><then pos:line="861" pos:column="45"> <block type="pseudo"><goto pos:line="861" pos:column="46">goto <name pos:line="861" pos:column="51">no_mem<pos:position pos:line="861" pos:column="57"/></name>;<pos:position pos:line="861" pos:column="58"/></goto></block></then></if>
  <expr_stmt><expr><call><name pos:line="862" pos:column="3">Stringify<pos:position pos:line="862" pos:column="12"/></name><argument_list pos:line="862" pos:column="12">(<argument><expr><name pos:line="862" pos:column="13">pIn1<pos:position pos:line="862" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="862" pos:column="19">encoding<pos:position pos:line="862" pos:column="27"/></name></expr></argument>)<pos:position pos:line="862" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="862" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="863" pos:column="3">Stringify<pos:position pos:line="863" pos:column="12"/></name><argument_list pos:line="863" pos:column="12">(<argument><expr><name pos:line="863" pos:column="13">pIn2<pos:position pos:line="863" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="863" pos:column="19">encoding<pos:position pos:line="863" pos:column="27"/></name></expr></argument>)<pos:position pos:line="863" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="863" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="864" pos:column="3">nByte<pos:position pos:line="864" pos:column="8"/></name> <operator pos:line="864" pos:column="9">=<pos:position pos:line="864" pos:column="10"/></operator> <name><name pos:line="864" pos:column="11">pIn1<pos:position pos:line="864" pos:column="15"/></name><operator pos:line="864" pos:column="15">-&gt;<pos:position pos:line="864" pos:column="20"/></operator><name pos:line="864" pos:column="17">n<pos:position pos:line="864" pos:column="18"/></name></name> <operator pos:line="864" pos:column="19">+<pos:position pos:line="864" pos:column="20"/></operator> <name><name pos:line="864" pos:column="21">pIn2<pos:position pos:line="864" pos:column="25"/></name><operator pos:line="864" pos:column="25">-&gt;<pos:position pos:line="864" pos:column="30"/></operator><name pos:line="864" pos:column="27">n<pos:position pos:line="864" pos:column="28"/></name></name></expr>;<pos:position pos:line="864" pos:column="29"/></expr_stmt>
  <if pos:line="865" pos:column="3">if<condition pos:line="865" pos:column="5">( <expr><name pos:line="865" pos:column="7">nByte<pos:position pos:line="865" pos:column="12"/></name><operator pos:line="865" pos:column="12">&gt;<pos:position pos:line="865" pos:column="16"/></operator><name><name pos:line="865" pos:column="13">db<pos:position pos:line="865" pos:column="15"/></name><operator pos:line="865" pos:column="15">-&gt;<pos:position pos:line="865" pos:column="20"/></operator><name pos:line="865" pos:column="17">aLimit<pos:position pos:line="865" pos:column="23"/></name><index pos:line="865" pos:column="23">[<expr><name pos:line="865" pos:column="24">SQLITE_LIMIT_LENGTH<pos:position pos:line="865" pos:column="43"/></name></expr>]<pos:position pos:line="865" pos:column="44"/></index></name></expr> )<pos:position pos:line="865" pos:column="46"/></condition><then><block pos:line="865" pos:column="46">{
    <goto pos:line="866" pos:column="5">goto <name pos:line="866" pos:column="10">too_big<pos:position pos:line="866" pos:column="17"/></name>;<pos:position pos:line="866" pos:column="18"/></goto>
  }<pos:position pos:line="867" pos:column="4"/></block></then></if>
  <if pos:line="868" pos:column="3">if<condition pos:line="868" pos:column="5">( <expr><call><name pos:line="868" pos:column="7">sqlite3VdbeMemGrow<pos:position pos:line="868" pos:column="25"/></name><argument_list pos:line="868" pos:column="25">(<argument><expr><name pos:line="868" pos:column="26">pOut<pos:position pos:line="868" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="868" pos:column="32">(<pos:position pos:line="868" pos:column="33"/></operator><name pos:line="868" pos:column="33">int<pos:position pos:line="868" pos:column="36"/></name><operator pos:line="868" pos:column="36">)<pos:position pos:line="868" pos:column="37"/></operator><name pos:line="868" pos:column="37">nByte<pos:position pos:line="868" pos:column="42"/></name><operator pos:line="868" pos:column="42">+<pos:position pos:line="868" pos:column="43"/></operator><literal type="number" pos:line="868" pos:column="43">2<pos:position pos:line="868" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="868" pos:column="46">pOut<pos:position pos:line="868" pos:column="50"/></name><operator pos:line="868" pos:column="50">==<pos:position pos:line="868" pos:column="52"/></operator><name pos:line="868" pos:column="52">pIn2<pos:position pos:line="868" pos:column="56"/></name></expr></argument>)<pos:position pos:line="868" pos:column="57"/></argument_list></call></expr> )<pos:position pos:line="868" pos:column="59"/></condition><then><block pos:line="868" pos:column="59">{
    <goto pos:line="869" pos:column="5">goto <name pos:line="869" pos:column="10">no_mem<pos:position pos:line="869" pos:column="16"/></name>;<pos:position pos:line="869" pos:column="17"/></goto>
  }<pos:position pos:line="870" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="871" pos:column="3">MemSetTypeFlag<pos:position pos:line="871" pos:column="17"/></name><argument_list pos:line="871" pos:column="17">(<argument><expr><name pos:line="871" pos:column="18">pOut<pos:position pos:line="871" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="871" pos:column="24">MEM_Str<pos:position pos:line="871" pos:column="31"/></name></expr></argument>)<pos:position pos:line="871" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="871" pos:column="33"/></expr_stmt>
  <if pos:line="872" pos:column="3">if<condition pos:line="872" pos:column="5">( <expr><name pos:line="872" pos:column="7">pOut<pos:position pos:line="872" pos:column="11"/></name><operator pos:line="872" pos:column="11">!=<pos:position pos:line="872" pos:column="13"/></operator><name pos:line="872" pos:column="13">pIn2<pos:position pos:line="872" pos:column="17"/></name></expr> )<pos:position pos:line="872" pos:column="19"/></condition><then><block pos:line="872" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="873" pos:column="5">memcpy<pos:position pos:line="873" pos:column="11"/></name><argument_list pos:line="873" pos:column="11">(<argument><expr><name><name pos:line="873" pos:column="12">pOut<pos:position pos:line="873" pos:column="16"/></name><operator pos:line="873" pos:column="16">-&gt;<pos:position pos:line="873" pos:column="21"/></operator><name pos:line="873" pos:column="18">z<pos:position pos:line="873" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="873" pos:column="21">pIn2<pos:position pos:line="873" pos:column="25"/></name><operator pos:line="873" pos:column="25">-&gt;<pos:position pos:line="873" pos:column="30"/></operator><name pos:line="873" pos:column="27">z<pos:position pos:line="873" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="873" pos:column="30">pIn2<pos:position pos:line="873" pos:column="34"/></name><operator pos:line="873" pos:column="34">-&gt;<pos:position pos:line="873" pos:column="39"/></operator><name pos:line="873" pos:column="36">n<pos:position pos:line="873" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="873" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="873" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="874" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="875" pos:column="3">memcpy<pos:position pos:line="875" pos:column="9"/></name><argument_list pos:line="875" pos:column="9">(<argument><expr><operator pos:line="875" pos:column="10">&amp;<pos:position pos:line="875" pos:column="15"/></operator><name><name pos:line="875" pos:column="11">pOut<pos:position pos:line="875" pos:column="15"/></name><operator pos:line="875" pos:column="15">-&gt;<pos:position pos:line="875" pos:column="20"/></operator><name pos:line="875" pos:column="17">z<pos:position pos:line="875" pos:column="18"/></name><index pos:line="875" pos:column="18">[<expr><name><name pos:line="875" pos:column="19">pIn2<pos:position pos:line="875" pos:column="23"/></name><operator pos:line="875" pos:column="23">-&gt;<pos:position pos:line="875" pos:column="28"/></operator><name pos:line="875" pos:column="25">n<pos:position pos:line="875" pos:column="26"/></name></name></expr>]<pos:position pos:line="875" pos:column="27"/></index></name></expr></argument>, <argument><expr><name><name pos:line="875" pos:column="29">pIn1<pos:position pos:line="875" pos:column="33"/></name><operator pos:line="875" pos:column="33">-&gt;<pos:position pos:line="875" pos:column="38"/></operator><name pos:line="875" pos:column="35">z<pos:position pos:line="875" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="875" pos:column="38">pIn1<pos:position pos:line="875" pos:column="42"/></name><operator pos:line="875" pos:column="42">-&gt;<pos:position pos:line="875" pos:column="47"/></operator><name pos:line="875" pos:column="44">n<pos:position pos:line="875" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="875" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="875" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="876" pos:column="3">pOut<pos:position pos:line="876" pos:column="7"/></name><operator pos:line="876" pos:column="7">-&gt;<pos:position pos:line="876" pos:column="12"/></operator><name pos:line="876" pos:column="9">z<pos:position pos:line="876" pos:column="10"/></name><index pos:line="876" pos:column="10">[<expr><name pos:line="876" pos:column="11">nByte<pos:position pos:line="876" pos:column="16"/></name></expr>]<pos:position pos:line="876" pos:column="17"/></index></name><operator pos:line="876" pos:column="17">=<pos:position pos:line="876" pos:column="18"/></operator><literal type="number" pos:line="876" pos:column="18">0<pos:position pos:line="876" pos:column="19"/></literal></expr>;<pos:position pos:line="876" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="877" pos:column="3">pOut<pos:position pos:line="877" pos:column="7"/></name><operator pos:line="877" pos:column="7">-&gt;<pos:position pos:line="877" pos:column="12"/></operator><name pos:line="877" pos:column="9">z<pos:position pos:line="877" pos:column="10"/></name><index pos:line="877" pos:column="10">[<expr><name pos:line="877" pos:column="11">nByte<pos:position pos:line="877" pos:column="16"/></name><operator pos:line="877" pos:column="16">+<pos:position pos:line="877" pos:column="17"/></operator><literal type="number" pos:line="877" pos:column="17">1<pos:position pos:line="877" pos:column="18"/></literal></expr>]<pos:position pos:line="877" pos:column="19"/></index></name> <operator pos:line="877" pos:column="20">=<pos:position pos:line="877" pos:column="21"/></operator> <literal type="number" pos:line="877" pos:column="22">0<pos:position pos:line="877" pos:column="23"/></literal></expr>;<pos:position pos:line="877" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="878" pos:column="3">pOut<pos:position pos:line="878" pos:column="7"/></name><operator pos:line="878" pos:column="7">-&gt;<pos:position pos:line="878" pos:column="12"/></operator><name pos:line="878" pos:column="9">flags<pos:position pos:line="878" pos:column="14"/></name></name> <operator pos:line="878" pos:column="15">|=<pos:position pos:line="878" pos:column="17"/></operator> <name pos:line="878" pos:column="18">MEM_Term<pos:position pos:line="878" pos:column="26"/></name></expr>;<pos:position pos:line="878" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="879" pos:column="3">pOut<pos:position pos:line="879" pos:column="7"/></name><operator pos:line="879" pos:column="7">-&gt;<pos:position pos:line="879" pos:column="12"/></operator><name pos:line="879" pos:column="9">n<pos:position pos:line="879" pos:column="10"/></name></name> <operator pos:line="879" pos:column="11">=<pos:position pos:line="879" pos:column="12"/></operator> <operator pos:line="879" pos:column="13">(<pos:position pos:line="879" pos:column="14"/></operator><name pos:line="879" pos:column="14">int<pos:position pos:line="879" pos:column="17"/></name><operator pos:line="879" pos:column="17">)<pos:position pos:line="879" pos:column="18"/></operator><name pos:line="879" pos:column="18">nByte<pos:position pos:line="879" pos:column="23"/></name></expr>;<pos:position pos:line="879" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="880" pos:column="3">pOut<pos:position pos:line="880" pos:column="7"/></name><operator pos:line="880" pos:column="7">-&gt;<pos:position pos:line="880" pos:column="12"/></operator><name pos:line="880" pos:column="9">enc<pos:position pos:line="880" pos:column="12"/></name></name> <operator pos:line="880" pos:column="13">=<pos:position pos:line="880" pos:column="14"/></operator> <name pos:line="880" pos:column="15">encoding<pos:position pos:line="880" pos:column="23"/></name></expr>;<pos:position pos:line="880" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="881" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="881" pos:column="22"/></name><argument_list pos:line="881" pos:column="22">(<argument><expr><name pos:line="881" pos:column="23">pOut<pos:position pos:line="881" pos:column="27"/></name></expr></argument>)<pos:position pos:line="881" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="881" pos:column="29"/></expr_stmt>
  <break pos:line="882" pos:column="3">break;<pos:position pos:line="882" pos:column="9"/></break>
}<pos:position pos:line="883" pos:column="2"/></block>

<comment type="block" pos:line="885" pos:column="1">/* Opcode: Add P1 P2 P3 * *
** Synopsis: r[P3]=r[P1]+r[P2]
**
** Add the value in register P1 to the value in register P2
** and store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="892" pos:column="1">/* Opcode: Multiply P1 P2 P3 * *
** Synopsis: r[P3]=r[P1]*r[P2]
**
**
** Multiply the value in register P1 by the value in register P2
** and store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="900" pos:column="1">/* Opcode: Subtract P1 P2 P3 * *
** Synopsis: r[P3]=r[P2]-r[P1]
**
** Subtract the value in register P1 from the value in register P2
** and store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="907" pos:column="1">/* Opcode: Divide P1 P2 P3 * *
** Synopsis: r[P3]=r[P2]/r[P1]
**
** Divide the value in register P1 by the value in register P2
** and store the result in register P3 (P3=P2/P1). If the value in 
** register P1 is zero, then the result is NULL. If either input is 
** NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="915" pos:column="1">/* Opcode: Remainder P1 P2 P3 * *
** Synopsis: r[P3]=r[P2]%r[P1]
**
** Compute the remainder after integer register P2 is divided by 
** register P1 and store the result in register P3. 
** If the value in register P1 is zero the result is NULL.
** If either operand is NULL, the result is NULL.
*/</comment>
<case pos:line="923" pos:column="1">case <expr><name pos:line="923" pos:column="6">OP_Add<pos:position pos:line="923" pos:column="12"/></name></expr>:<pos:position pos:line="923" pos:column="13"/></case>                   <comment type="block" pos:line="923" pos:column="32">/* same as TK_PLUS, in1, in2, out3 */</comment>
<case pos:line="924" pos:column="1">case <expr><name pos:line="924" pos:column="6">OP_Subtract<pos:position pos:line="924" pos:column="17"/></name></expr>:<pos:position pos:line="924" pos:column="18"/></case>              <comment type="block" pos:line="924" pos:column="32">/* same as TK_MINUS, in1, in2, out3 */</comment>
<case pos:line="925" pos:column="1">case <expr><name pos:line="925" pos:column="6">OP_Multiply<pos:position pos:line="925" pos:column="17"/></name></expr>:<pos:position pos:line="925" pos:column="18"/></case>              <comment type="block" pos:line="925" pos:column="32">/* same as TK_STAR, in1, in2, out3 */</comment>
<case pos:line="926" pos:column="1">case <expr><name pos:line="926" pos:column="6">OP_Divide<pos:position pos:line="926" pos:column="15"/></name></expr>:<pos:position pos:line="926" pos:column="16"/></case>                <comment type="block" pos:line="926" pos:column="32">/* same as TK_SLASH, in1, in2, out3 */</comment>
<case pos:line="927" pos:column="1">case <expr><name pos:line="927" pos:column="6">OP_Remainder<pos:position pos:line="927" pos:column="18"/></name></expr>:<pos:position pos:line="927" pos:column="19"/></case> <block pos:line="927" pos:column="20">{           <comment type="block" pos:line="927" pos:column="32">/* same as TK_REM, in1, in2, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="928" pos:column="3">char<pos:position pos:line="928" pos:column="7"/></name></type> <name pos:line="928" pos:column="8">bIntint<pos:position pos:line="928" pos:column="15"/></name></decl>;<pos:position pos:line="928" pos:column="16"/></decl_stmt>   <comment type="block" pos:line="928" pos:column="19">/* Started out as two integer operands */</comment>
  <decl_stmt><decl><type><name pos:line="929" pos:column="3">u16<pos:position pos:line="929" pos:column="6"/></name></type> <name pos:line="929" pos:column="7">flags<pos:position pos:line="929" pos:column="12"/></name></decl>;<pos:position pos:line="929" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="929" pos:column="19">/* Combined MEM_* flags from both inputs */</comment>
  <decl_stmt><decl><type><name pos:line="930" pos:column="3">u16<pos:position pos:line="930" pos:column="6"/></name></type> <name pos:line="930" pos:column="7">type1<pos:position pos:line="930" pos:column="12"/></name></decl>;<pos:position pos:line="930" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="930" pos:column="19">/* Numeric type of left operand */</comment>
  <decl_stmt><decl><type><name pos:line="931" pos:column="3">u16<pos:position pos:line="931" pos:column="6"/></name></type> <name pos:line="931" pos:column="7">type2<pos:position pos:line="931" pos:column="12"/></name></decl>;<pos:position pos:line="931" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="931" pos:column="19">/* Numeric type of right operand */</comment>
  <decl_stmt><decl><type><name pos:line="932" pos:column="3">i64<pos:position pos:line="932" pos:column="6"/></name></type> <name pos:line="932" pos:column="7">iA<pos:position pos:line="932" pos:column="9"/></name></decl>;<pos:position pos:line="932" pos:column="10"/></decl_stmt>         <comment type="block" pos:line="932" pos:column="19">/* Integer value of left operand */</comment>
  <decl_stmt><decl><type><name pos:line="933" pos:column="3">i64<pos:position pos:line="933" pos:column="6"/></name></type> <name pos:line="933" pos:column="7">iB<pos:position pos:line="933" pos:column="9"/></name></decl>;<pos:position pos:line="933" pos:column="10"/></decl_stmt>         <comment type="block" pos:line="933" pos:column="19">/* Integer value of right operand */</comment>
  <decl_stmt><decl><type><name pos:line="934" pos:column="3">double<pos:position pos:line="934" pos:column="9"/></name></type> <name pos:line="934" pos:column="10">rA<pos:position pos:line="934" pos:column="12"/></name></decl>;<pos:position pos:line="934" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="934" pos:column="19">/* Real value of left operand */</comment>
  <decl_stmt><decl><type><name pos:line="935" pos:column="3">double<pos:position pos:line="935" pos:column="9"/></name></type> <name pos:line="935" pos:column="10">rB<pos:position pos:line="935" pos:column="12"/></name></decl>;<pos:position pos:line="935" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="935" pos:column="19">/* Real value of right operand */</comment>

  <expr_stmt><expr><name pos:line="937" pos:column="3">pIn1<pos:position pos:line="937" pos:column="7"/></name> <operator pos:line="937" pos:column="8">=<pos:position pos:line="937" pos:column="9"/></operator> <operator pos:line="937" pos:column="10">&amp;<pos:position pos:line="937" pos:column="15"/></operator><name><name pos:line="937" pos:column="11">aMem<pos:position pos:line="937" pos:column="15"/></name><index pos:line="937" pos:column="15">[<expr><name><name pos:line="937" pos:column="16">pOp<pos:position pos:line="937" pos:column="19"/></name><operator pos:line="937" pos:column="19">-&gt;<pos:position pos:line="937" pos:column="24"/></operator><name pos:line="937" pos:column="21">p1<pos:position pos:line="937" pos:column="23"/></name></name></expr>]<pos:position pos:line="937" pos:column="24"/></index></name></expr>;<pos:position pos:line="937" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="938" pos:column="3">type1<pos:position pos:line="938" pos:column="8"/></name> <operator pos:line="938" pos:column="9">=<pos:position pos:line="938" pos:column="10"/></operator> <call><name pos:line="938" pos:column="11">numericType<pos:position pos:line="938" pos:column="22"/></name><argument_list pos:line="938" pos:column="22">(<argument><expr><name pos:line="938" pos:column="23">pIn1<pos:position pos:line="938" pos:column="27"/></name></expr></argument>)<pos:position pos:line="938" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="938" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="939" pos:column="3">pIn2<pos:position pos:line="939" pos:column="7"/></name> <operator pos:line="939" pos:column="8">=<pos:position pos:line="939" pos:column="9"/></operator> <operator pos:line="939" pos:column="10">&amp;<pos:position pos:line="939" pos:column="15"/></operator><name><name pos:line="939" pos:column="11">aMem<pos:position pos:line="939" pos:column="15"/></name><index pos:line="939" pos:column="15">[<expr><name><name pos:line="939" pos:column="16">pOp<pos:position pos:line="939" pos:column="19"/></name><operator pos:line="939" pos:column="19">-&gt;<pos:position pos:line="939" pos:column="24"/></operator><name pos:line="939" pos:column="21">p2<pos:position pos:line="939" pos:column="23"/></name></name></expr>]<pos:position pos:line="939" pos:column="24"/></index></name></expr>;<pos:position pos:line="939" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="940" pos:column="3">type2<pos:position pos:line="940" pos:column="8"/></name> <operator pos:line="940" pos:column="9">=<pos:position pos:line="940" pos:column="10"/></operator> <call><name pos:line="940" pos:column="11">numericType<pos:position pos:line="940" pos:column="22"/></name><argument_list pos:line="940" pos:column="22">(<argument><expr><name pos:line="940" pos:column="23">pIn2<pos:position pos:line="940" pos:column="27"/></name></expr></argument>)<pos:position pos:line="940" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="940" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="941" pos:column="3">pOut<pos:position pos:line="941" pos:column="7"/></name> <operator pos:line="941" pos:column="8">=<pos:position pos:line="941" pos:column="9"/></operator> <operator pos:line="941" pos:column="10">&amp;<pos:position pos:line="941" pos:column="15"/></operator><name><name pos:line="941" pos:column="11">aMem<pos:position pos:line="941" pos:column="15"/></name><index pos:line="941" pos:column="15">[<expr><name><name pos:line="941" pos:column="16">pOp<pos:position pos:line="941" pos:column="19"/></name><operator pos:line="941" pos:column="19">-&gt;<pos:position pos:line="941" pos:column="24"/></operator><name pos:line="941" pos:column="21">p3<pos:position pos:line="941" pos:column="23"/></name></name></expr>]<pos:position pos:line="941" pos:column="24"/></index></name></expr>;<pos:position pos:line="941" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="942" pos:column="3">flags<pos:position pos:line="942" pos:column="8"/></name> <operator pos:line="942" pos:column="9">=<pos:position pos:line="942" pos:column="10"/></operator> <name><name pos:line="942" pos:column="11">pIn1<pos:position pos:line="942" pos:column="15"/></name><operator pos:line="942" pos:column="15">-&gt;<pos:position pos:line="942" pos:column="20"/></operator><name pos:line="942" pos:column="17">flags<pos:position pos:line="942" pos:column="22"/></name></name> <operator pos:line="942" pos:column="23">|<pos:position pos:line="942" pos:column="24"/></operator> <name><name pos:line="942" pos:column="25">pIn2<pos:position pos:line="942" pos:column="29"/></name><operator pos:line="942" pos:column="29">-&gt;<pos:position pos:line="942" pos:column="34"/></operator><name pos:line="942" pos:column="31">flags<pos:position pos:line="942" pos:column="36"/></name></name></expr>;<pos:position pos:line="942" pos:column="37"/></expr_stmt>
  <if pos:line="943" pos:column="3">if<condition pos:line="943" pos:column="5">( <expr><operator pos:line="943" pos:column="7">(<pos:position pos:line="943" pos:column="8"/></operator><name pos:line="943" pos:column="8">type1<pos:position pos:line="943" pos:column="13"/></name> <operator pos:line="943" pos:column="14">&amp;<pos:position pos:line="943" pos:column="19"/></operator> <name pos:line="943" pos:column="16">type2<pos:position pos:line="943" pos:column="21"/></name> <operator pos:line="943" pos:column="22">&amp;<pos:position pos:line="943" pos:column="27"/></operator> <name pos:line="943" pos:column="24">MEM_Int<pos:position pos:line="943" pos:column="31"/></name><operator pos:line="943" pos:column="31">)<pos:position pos:line="943" pos:column="32"/></operator><operator pos:line="943" pos:column="32">!=<pos:position pos:line="943" pos:column="34"/></operator><literal type="number" pos:line="943" pos:column="34">0<pos:position pos:line="943" pos:column="35"/></literal></expr> )<pos:position pos:line="943" pos:column="37"/></condition><then><block pos:line="943" pos:column="37">{
    <expr_stmt><expr><name pos:line="944" pos:column="5">iA<pos:position pos:line="944" pos:column="7"/></name> <operator pos:line="944" pos:column="8">=<pos:position pos:line="944" pos:column="9"/></operator> <name><name pos:line="944" pos:column="10">pIn1<pos:position pos:line="944" pos:column="14"/></name><operator pos:line="944" pos:column="14">-&gt;<pos:position pos:line="944" pos:column="19"/></operator><name pos:line="944" pos:column="16">u<pos:position pos:line="944" pos:column="17"/></name><operator pos:line="944" pos:column="17">.<pos:position pos:line="944" pos:column="18"/></operator><name pos:line="944" pos:column="18">i<pos:position pos:line="944" pos:column="19"/></name></name></expr>;<pos:position pos:line="944" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="945" pos:column="5">iB<pos:position pos:line="945" pos:column="7"/></name> <operator pos:line="945" pos:column="8">=<pos:position pos:line="945" pos:column="9"/></operator> <name><name pos:line="945" pos:column="10">pIn2<pos:position pos:line="945" pos:column="14"/></name><operator pos:line="945" pos:column="14">-&gt;<pos:position pos:line="945" pos:column="19"/></operator><name pos:line="945" pos:column="16">u<pos:position pos:line="945" pos:column="17"/></name><operator pos:line="945" pos:column="17">.<pos:position pos:line="945" pos:column="18"/></operator><name pos:line="945" pos:column="18">i<pos:position pos:line="945" pos:column="19"/></name></name></expr>;<pos:position pos:line="945" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="946" pos:column="5">bIntint<pos:position pos:line="946" pos:column="12"/></name> <operator pos:line="946" pos:column="13">=<pos:position pos:line="946" pos:column="14"/></operator> <literal type="number" pos:line="946" pos:column="15">1<pos:position pos:line="946" pos:column="16"/></literal></expr>;<pos:position pos:line="946" pos:column="17"/></expr_stmt>
    <switch pos:line="947" pos:column="5">switch<condition pos:line="947" pos:column="11">( <expr><name><name pos:line="947" pos:column="13">pOp<pos:position pos:line="947" pos:column="16"/></name><operator pos:line="947" pos:column="16">-&gt;<pos:position pos:line="947" pos:column="21"/></operator><name pos:line="947" pos:column="18">opcode<pos:position pos:line="947" pos:column="24"/></name></name></expr> )<pos:position pos:line="947" pos:column="26"/></condition><block pos:line="947" pos:column="26">{
      <case pos:line="948" pos:column="7">case <expr><name pos:line="948" pos:column="12">OP_Add<pos:position pos:line="948" pos:column="18"/></name></expr>:<pos:position pos:line="948" pos:column="19"/></case>       <if pos:line="948" pos:column="26">if<condition pos:line="948" pos:column="28">( <expr><call><name pos:line="948" pos:column="30">sqlite3AddInt64<pos:position pos:line="948" pos:column="45"/></name><argument_list pos:line="948" pos:column="45">(<argument><expr><operator pos:line="948" pos:column="46">&amp;<pos:position pos:line="948" pos:column="51"/></operator><name pos:line="948" pos:column="47">iB<pos:position pos:line="948" pos:column="49"/></name></expr></argument>,<argument><expr><name pos:line="948" pos:column="50">iA<pos:position pos:line="948" pos:column="52"/></name></expr></argument>)<pos:position pos:line="948" pos:column="53"/></argument_list></call></expr> )<pos:position pos:line="948" pos:column="55"/></condition><then pos:line="948" pos:column="55"> <block type="pseudo"><goto pos:line="948" pos:column="56">goto <name pos:line="948" pos:column="61">fp_math<pos:position pos:line="948" pos:column="68"/></name>;<pos:position pos:line="948" pos:column="69"/></goto></block></then></if>  <break pos:line="948" pos:column="71">break;<pos:position pos:line="948" pos:column="77"/></break>
      <case pos:line="949" pos:column="7">case <expr><name pos:line="949" pos:column="12">OP_Subtract<pos:position pos:line="949" pos:column="23"/></name></expr>:<pos:position pos:line="949" pos:column="24"/></case>  <if pos:line="949" pos:column="26">if<condition pos:line="949" pos:column="28">( <expr><call><name pos:line="949" pos:column="30">sqlite3SubInt64<pos:position pos:line="949" pos:column="45"/></name><argument_list pos:line="949" pos:column="45">(<argument><expr><operator pos:line="949" pos:column="46">&amp;<pos:position pos:line="949" pos:column="51"/></operator><name pos:line="949" pos:column="47">iB<pos:position pos:line="949" pos:column="49"/></name></expr></argument>,<argument><expr><name pos:line="949" pos:column="50">iA<pos:position pos:line="949" pos:column="52"/></name></expr></argument>)<pos:position pos:line="949" pos:column="53"/></argument_list></call></expr> )<pos:position pos:line="949" pos:column="55"/></condition><then pos:line="949" pos:column="55"> <block type="pseudo"><goto pos:line="949" pos:column="56">goto <name pos:line="949" pos:column="61">fp_math<pos:position pos:line="949" pos:column="68"/></name>;<pos:position pos:line="949" pos:column="69"/></goto></block></then></if>  <break pos:line="949" pos:column="71">break;<pos:position pos:line="949" pos:column="77"/></break>
      <case pos:line="950" pos:column="7">case <expr><name pos:line="950" pos:column="12">OP_Multiply<pos:position pos:line="950" pos:column="23"/></name></expr>:<pos:position pos:line="950" pos:column="24"/></case>  <if pos:line="950" pos:column="26">if<condition pos:line="950" pos:column="28">( <expr><call><name pos:line="950" pos:column="30">sqlite3MulInt64<pos:position pos:line="950" pos:column="45"/></name><argument_list pos:line="950" pos:column="45">(<argument><expr><operator pos:line="950" pos:column="46">&amp;<pos:position pos:line="950" pos:column="51"/></operator><name pos:line="950" pos:column="47">iB<pos:position pos:line="950" pos:column="49"/></name></expr></argument>,<argument><expr><name pos:line="950" pos:column="50">iA<pos:position pos:line="950" pos:column="52"/></name></expr></argument>)<pos:position pos:line="950" pos:column="53"/></argument_list></call></expr> )<pos:position pos:line="950" pos:column="55"/></condition><then pos:line="950" pos:column="55"> <block type="pseudo"><goto pos:line="950" pos:column="56">goto <name pos:line="950" pos:column="61">fp_math<pos:position pos:line="950" pos:column="68"/></name>;<pos:position pos:line="950" pos:column="69"/></goto></block></then></if>  <break pos:line="950" pos:column="71">break;<pos:position pos:line="950" pos:column="77"/></break>
      <case pos:line="951" pos:column="7">case <expr><name pos:line="951" pos:column="12">OP_Divide<pos:position pos:line="951" pos:column="21"/></name></expr>:<pos:position pos:line="951" pos:column="22"/></case> <block pos:line="951" pos:column="23">{
        <if pos:line="952" pos:column="9">if<condition pos:line="952" pos:column="11">( <expr><name pos:line="952" pos:column="13">iA<pos:position pos:line="952" pos:column="15"/></name><operator pos:line="952" pos:column="15">==<pos:position pos:line="952" pos:column="17"/></operator><literal type="number" pos:line="952" pos:column="17">0<pos:position pos:line="952" pos:column="18"/></literal></expr> )<pos:position pos:line="952" pos:column="20"/></condition><then pos:line="952" pos:column="20"> <block type="pseudo"><goto pos:line="952" pos:column="21">goto <name pos:line="952" pos:column="26">arithmetic_result_is_null<pos:position pos:line="952" pos:column="51"/></name>;<pos:position pos:line="952" pos:column="52"/></goto></block></then></if>
        <if pos:line="953" pos:column="9">if<condition pos:line="953" pos:column="11">( <expr><name pos:line="953" pos:column="13">iA<pos:position pos:line="953" pos:column="15"/></name><operator pos:line="953" pos:column="15">==<pos:position pos:line="953" pos:column="17"/></operator><operator pos:line="953" pos:column="17">-<pos:position pos:line="953" pos:column="18"/></operator><literal type="number" pos:line="953" pos:column="18">1<pos:position pos:line="953" pos:column="19"/></literal> <operator pos:line="953" pos:column="20">&amp;&amp;<pos:position pos:line="953" pos:column="30"/></operator> <name pos:line="953" pos:column="23">iB<pos:position pos:line="953" pos:column="25"/></name><operator pos:line="953" pos:column="25">==<pos:position pos:line="953" pos:column="27"/></operator><name pos:line="953" pos:column="27">SMALLEST_INT64<pos:position pos:line="953" pos:column="41"/></name></expr> )<pos:position pos:line="953" pos:column="43"/></condition><then pos:line="953" pos:column="43"> <block type="pseudo"><goto pos:line="953" pos:column="44">goto <name pos:line="953" pos:column="49">fp_math<pos:position pos:line="953" pos:column="56"/></name>;<pos:position pos:line="953" pos:column="57"/></goto></block></then></if>
        <expr_stmt><expr><name pos:line="954" pos:column="9">iB<pos:position pos:line="954" pos:column="11"/></name> <operator pos:line="954" pos:column="12">/=<pos:position pos:line="954" pos:column="14"/></operator> <name pos:line="954" pos:column="15">iA<pos:position pos:line="954" pos:column="17"/></name></expr>;<pos:position pos:line="954" pos:column="18"/></expr_stmt>
        <break pos:line="955" pos:column="9">break;<pos:position pos:line="955" pos:column="15"/></break>
      }<pos:position pos:line="956" pos:column="8"/></block>
      <default pos:line="957" pos:column="7">default:<pos:position pos:line="957" pos:column="15"/></default> <block pos:line="957" pos:column="16">{
        <if pos:line="958" pos:column="9">if<condition pos:line="958" pos:column="11">( <expr><name pos:line="958" pos:column="13">iA<pos:position pos:line="958" pos:column="15"/></name><operator pos:line="958" pos:column="15">==<pos:position pos:line="958" pos:column="17"/></operator><literal type="number" pos:line="958" pos:column="17">0<pos:position pos:line="958" pos:column="18"/></literal></expr> )<pos:position pos:line="958" pos:column="20"/></condition><then pos:line="958" pos:column="20"> <block type="pseudo"><goto pos:line="958" pos:column="21">goto <name pos:line="958" pos:column="26">arithmetic_result_is_null<pos:position pos:line="958" pos:column="51"/></name>;<pos:position pos:line="958" pos:column="52"/></goto></block></then></if>
        <if pos:line="959" pos:column="9">if<condition pos:line="959" pos:column="11">( <expr><name pos:line="959" pos:column="13">iA<pos:position pos:line="959" pos:column="15"/></name><operator pos:line="959" pos:column="15">==<pos:position pos:line="959" pos:column="17"/></operator><operator pos:line="959" pos:column="17">-<pos:position pos:line="959" pos:column="18"/></operator><literal type="number" pos:line="959" pos:column="18">1<pos:position pos:line="959" pos:column="19"/></literal></expr> )<pos:position pos:line="959" pos:column="21"/></condition><then pos:line="959" pos:column="21"> <block type="pseudo"><expr_stmt><expr><name pos:line="959" pos:column="22">iA<pos:position pos:line="959" pos:column="24"/></name> <operator pos:line="959" pos:column="25">=<pos:position pos:line="959" pos:column="26"/></operator> <literal type="number" pos:line="959" pos:column="27">1<pos:position pos:line="959" pos:column="28"/></literal></expr>;<pos:position pos:line="959" pos:column="29"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="960" pos:column="9">iB<pos:position pos:line="960" pos:column="11"/></name> <operator pos:line="960" pos:column="12">%=<pos:position pos:line="960" pos:column="14"/></operator> <name pos:line="960" pos:column="15">iA<pos:position pos:line="960" pos:column="17"/></name></expr>;<pos:position pos:line="960" pos:column="18"/></expr_stmt>
        <break pos:line="961" pos:column="9">break;<pos:position pos:line="961" pos:column="15"/></break>
      }<pos:position pos:line="962" pos:column="8"/></block>
    }<pos:position pos:line="963" pos:column="6"/></block></switch>
    <expr_stmt><expr><name><name pos:line="964" pos:column="5">pOut<pos:position pos:line="964" pos:column="9"/></name><operator pos:line="964" pos:column="9">-&gt;<pos:position pos:line="964" pos:column="14"/></operator><name pos:line="964" pos:column="11">u<pos:position pos:line="964" pos:column="12"/></name><operator pos:line="964" pos:column="12">.<pos:position pos:line="964" pos:column="13"/></operator><name pos:line="964" pos:column="13">i<pos:position pos:line="964" pos:column="14"/></name></name> <operator pos:line="964" pos:column="15">=<pos:position pos:line="964" pos:column="16"/></operator> <name pos:line="964" pos:column="17">iB<pos:position pos:line="964" pos:column="19"/></name></expr>;<pos:position pos:line="964" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="965" pos:column="5">MemSetTypeFlag<pos:position pos:line="965" pos:column="19"/></name><argument_list pos:line="965" pos:column="19">(<argument><expr><name pos:line="965" pos:column="20">pOut<pos:position pos:line="965" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="965" pos:column="26">MEM_Int<pos:position pos:line="965" pos:column="33"/></name></expr></argument>)<pos:position pos:line="965" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="965" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="966" pos:column="4"/></block></then><elseif pos:line="966" pos:column="4">else <if pos:line="966" pos:column="9">if<condition pos:line="966" pos:column="11">( <expr><operator pos:line="966" pos:column="13">(<pos:position pos:line="966" pos:column="14"/></operator><name pos:line="966" pos:column="14">flags<pos:position pos:line="966" pos:column="19"/></name> <operator pos:line="966" pos:column="20">&amp;<pos:position pos:line="966" pos:column="25"/></operator> <name pos:line="966" pos:column="22">MEM_Null<pos:position pos:line="966" pos:column="30"/></name><operator pos:line="966" pos:column="30">)<pos:position pos:line="966" pos:column="31"/></operator><operator pos:line="966" pos:column="31">!=<pos:position pos:line="966" pos:column="33"/></operator><literal type="number" pos:line="966" pos:column="33">0<pos:position pos:line="966" pos:column="34"/></literal></expr> )<pos:position pos:line="966" pos:column="36"/></condition><then><block pos:line="966" pos:column="36">{
    <goto pos:line="967" pos:column="5">goto <name pos:line="967" pos:column="10">arithmetic_result_is_null<pos:position pos:line="967" pos:column="35"/></name>;<pos:position pos:line="967" pos:column="36"/></goto>
  }<pos:position pos:line="968" pos:column="4"/></block></then></if></elseif><else pos:line="968" pos:column="4">else<block pos:line="968" pos:column="8">{
    <expr_stmt><expr><name pos:line="969" pos:column="5">bIntint<pos:position pos:line="969" pos:column="12"/></name> <operator pos:line="969" pos:column="13">=<pos:position pos:line="969" pos:column="14"/></operator> <literal type="number" pos:line="969" pos:column="15">0<pos:position pos:line="969" pos:column="16"/></literal></expr>;<pos:position pos:line="969" pos:column="17"/></expr_stmt>
<label><name pos:line="970" pos:column="1">fp_math<pos:position pos:line="970" pos:column="8"/></name>:<pos:position pos:line="970" pos:column="9"/></label>
    <expr_stmt><expr><name pos:line="971" pos:column="5">rA<pos:position pos:line="971" pos:column="7"/></name> <operator pos:line="971" pos:column="8">=<pos:position pos:line="971" pos:column="9"/></operator> <call><name pos:line="971" pos:column="10">sqlite3VdbeRealValue<pos:position pos:line="971" pos:column="30"/></name><argument_list pos:line="971" pos:column="30">(<argument><expr><name pos:line="971" pos:column="31">pIn1<pos:position pos:line="971" pos:column="35"/></name></expr></argument>)<pos:position pos:line="971" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="971" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="972" pos:column="5">rB<pos:position pos:line="972" pos:column="7"/></name> <operator pos:line="972" pos:column="8">=<pos:position pos:line="972" pos:column="9"/></operator> <call><name pos:line="972" pos:column="10">sqlite3VdbeRealValue<pos:position pos:line="972" pos:column="30"/></name><argument_list pos:line="972" pos:column="30">(<argument><expr><name pos:line="972" pos:column="31">pIn2<pos:position pos:line="972" pos:column="35"/></name></expr></argument>)<pos:position pos:line="972" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="972" pos:column="37"/></expr_stmt>
    <switch pos:line="973" pos:column="5">switch<condition pos:line="973" pos:column="11">( <expr><name><name pos:line="973" pos:column="13">pOp<pos:position pos:line="973" pos:column="16"/></name><operator pos:line="973" pos:column="16">-&gt;<pos:position pos:line="973" pos:column="21"/></operator><name pos:line="973" pos:column="18">opcode<pos:position pos:line="973" pos:column="24"/></name></name></expr> )<pos:position pos:line="973" pos:column="26"/></condition><block pos:line="973" pos:column="26">{
      <case pos:line="974" pos:column="7">case <expr><name pos:line="974" pos:column="12">OP_Add<pos:position pos:line="974" pos:column="18"/></name></expr>:<pos:position pos:line="974" pos:column="19"/></case>         <expr_stmt><expr><name pos:line="974" pos:column="28">rB<pos:position pos:line="974" pos:column="30"/></name> <operator pos:line="974" pos:column="31">+=<pos:position pos:line="974" pos:column="33"/></operator> <name pos:line="974" pos:column="34">rA<pos:position pos:line="974" pos:column="36"/></name></expr>;<pos:position pos:line="974" pos:column="37"/></expr_stmt>       <break pos:line="974" pos:column="44">break;<pos:position pos:line="974" pos:column="50"/></break>
      <case pos:line="975" pos:column="7">case <expr><name pos:line="975" pos:column="12">OP_Subtract<pos:position pos:line="975" pos:column="23"/></name></expr>:<pos:position pos:line="975" pos:column="24"/></case>    <expr_stmt><expr><name pos:line="975" pos:column="28">rB<pos:position pos:line="975" pos:column="30"/></name> <operator pos:line="975" pos:column="31">-=<pos:position pos:line="975" pos:column="33"/></operator> <name pos:line="975" pos:column="34">rA<pos:position pos:line="975" pos:column="36"/></name></expr>;<pos:position pos:line="975" pos:column="37"/></expr_stmt>       <break pos:line="975" pos:column="44">break;<pos:position pos:line="975" pos:column="50"/></break>
      <case pos:line="976" pos:column="7">case <expr><name pos:line="976" pos:column="12">OP_Multiply<pos:position pos:line="976" pos:column="23"/></name></expr>:<pos:position pos:line="976" pos:column="24"/></case>    <expr_stmt><expr><name pos:line="976" pos:column="28">rB<pos:position pos:line="976" pos:column="30"/></name> <operator pos:line="976" pos:column="31">*=<pos:position pos:line="976" pos:column="33"/></operator> <name pos:line="976" pos:column="34">rA<pos:position pos:line="976" pos:column="36"/></name></expr>;<pos:position pos:line="976" pos:column="37"/></expr_stmt>       <break pos:line="976" pos:column="44">break;<pos:position pos:line="976" pos:column="50"/></break>
      <case pos:line="977" pos:column="7">case <expr><name pos:line="977" pos:column="12">OP_Divide<pos:position pos:line="977" pos:column="21"/></name></expr>:<pos:position pos:line="977" pos:column="22"/></case> <block pos:line="977" pos:column="23">{
        <comment type="block" pos:line="978" pos:column="9">/* (double)0 In case of SQLITE_OMIT_FLOATING_POINT... */</comment>
        <if pos:line="979" pos:column="9">if<condition pos:line="979" pos:column="11">( <expr><name pos:line="979" pos:column="13">rA<pos:position pos:line="979" pos:column="15"/></name><operator pos:line="979" pos:column="15">==<pos:position pos:line="979" pos:column="17"/></operator><operator pos:line="979" pos:column="17">(<pos:position pos:line="979" pos:column="18"/></operator><name pos:line="979" pos:column="18">double<pos:position pos:line="979" pos:column="24"/></name><operator pos:line="979" pos:column="24">)<pos:position pos:line="979" pos:column="25"/></operator><literal type="number" pos:line="979" pos:column="25">0<pos:position pos:line="979" pos:column="26"/></literal></expr> )<pos:position pos:line="979" pos:column="28"/></condition><then pos:line="979" pos:column="28"> <block type="pseudo"><goto pos:line="979" pos:column="29">goto <name pos:line="979" pos:column="34">arithmetic_result_is_null<pos:position pos:line="979" pos:column="59"/></name>;<pos:position pos:line="979" pos:column="60"/></goto></block></then></if>
        <expr_stmt><expr><name pos:line="980" pos:column="9">rB<pos:position pos:line="980" pos:column="11"/></name> <operator pos:line="980" pos:column="12">/=<pos:position pos:line="980" pos:column="14"/></operator> <name pos:line="980" pos:column="15">rA<pos:position pos:line="980" pos:column="17"/></name></expr>;<pos:position pos:line="980" pos:column="18"/></expr_stmt>
        <break pos:line="981" pos:column="9">break;<pos:position pos:line="981" pos:column="15"/></break>
      }<pos:position pos:line="982" pos:column="8"/></block>
      <default pos:line="983" pos:column="7">default:<pos:position pos:line="983" pos:column="15"/></default> <block pos:line="983" pos:column="16">{
        <expr_stmt><expr><name pos:line="984" pos:column="9">iA<pos:position pos:line="984" pos:column="11"/></name> <operator pos:line="984" pos:column="12">=<pos:position pos:line="984" pos:column="13"/></operator> <operator pos:line="984" pos:column="14">(<pos:position pos:line="984" pos:column="15"/></operator><name pos:line="984" pos:column="15">i64<pos:position pos:line="984" pos:column="18"/></name><operator pos:line="984" pos:column="18">)<pos:position pos:line="984" pos:column="19"/></operator><name pos:line="984" pos:column="19">rA<pos:position pos:line="984" pos:column="21"/></name></expr>;<pos:position pos:line="984" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="985" pos:column="9">iB<pos:position pos:line="985" pos:column="11"/></name> <operator pos:line="985" pos:column="12">=<pos:position pos:line="985" pos:column="13"/></operator> <operator pos:line="985" pos:column="14">(<pos:position pos:line="985" pos:column="15"/></operator><name pos:line="985" pos:column="15">i64<pos:position pos:line="985" pos:column="18"/></name><operator pos:line="985" pos:column="18">)<pos:position pos:line="985" pos:column="19"/></operator><name pos:line="985" pos:column="19">rB<pos:position pos:line="985" pos:column="21"/></name></expr>;<pos:position pos:line="985" pos:column="22"/></expr_stmt>
        <if pos:line="986" pos:column="9">if<condition pos:line="986" pos:column="11">( <expr><name pos:line="986" pos:column="13">iA<pos:position pos:line="986" pos:column="15"/></name><operator pos:line="986" pos:column="15">==<pos:position pos:line="986" pos:column="17"/></operator><literal type="number" pos:line="986" pos:column="17">0<pos:position pos:line="986" pos:column="18"/></literal></expr> )<pos:position pos:line="986" pos:column="20"/></condition><then pos:line="986" pos:column="20"> <block type="pseudo"><goto pos:line="986" pos:column="21">goto <name pos:line="986" pos:column="26">arithmetic_result_is_null<pos:position pos:line="986" pos:column="51"/></name>;<pos:position pos:line="986" pos:column="52"/></goto></block></then></if>
        <if pos:line="987" pos:column="9">if<condition pos:line="987" pos:column="11">( <expr><name pos:line="987" pos:column="13">iA<pos:position pos:line="987" pos:column="15"/></name><operator pos:line="987" pos:column="15">==<pos:position pos:line="987" pos:column="17"/></operator><operator pos:line="987" pos:column="17">-<pos:position pos:line="987" pos:column="18"/></operator><literal type="number" pos:line="987" pos:column="18">1<pos:position pos:line="987" pos:column="19"/></literal></expr> )<pos:position pos:line="987" pos:column="21"/></condition><then pos:line="987" pos:column="21"> <block type="pseudo"><expr_stmt><expr><name pos:line="987" pos:column="22">iA<pos:position pos:line="987" pos:column="24"/></name> <operator pos:line="987" pos:column="25">=<pos:position pos:line="987" pos:column="26"/></operator> <literal type="number" pos:line="987" pos:column="27">1<pos:position pos:line="987" pos:column="28"/></literal></expr>;<pos:position pos:line="987" pos:column="29"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="988" pos:column="9">rB<pos:position pos:line="988" pos:column="11"/></name> <operator pos:line="988" pos:column="12">=<pos:position pos:line="988" pos:column="13"/></operator> <call pos:line="988" pos:column="14">(<name pos:line="988" pos:column="15">double<pos:position pos:line="988" pos:column="21"/></name>)<argument_list pos:line="988" pos:column="22">(<argument><expr><name pos:line="988" pos:column="23">iB<pos:position pos:line="988" pos:column="25"/></name> <operator pos:line="988" pos:column="26">%<pos:position pos:line="988" pos:column="27"/></operator> <name pos:line="988" pos:column="28">iA<pos:position pos:line="988" pos:column="30"/></name></expr></argument>)<pos:position pos:line="988" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="988" pos:column="32"/></expr_stmt>
        <break pos:line="989" pos:column="9">break;<pos:position pos:line="989" pos:column="15"/></break>
      }<pos:position pos:line="990" pos:column="8"/></block>
    }<pos:position pos:line="991" pos:column="6"/></block></switch>
<cpp:ifdef pos:line="992" pos:column="1">#<cpp:directive pos:line="992" pos:column="2">ifdef<pos:position pos:line="992" pos:column="7"/></cpp:directive> <name pos:line="992" pos:column="8">SQLITE_OMIT_FLOATING_POINT<pos:position pos:line="992" pos:column="34"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="993" pos:column="5">pOut<pos:position pos:line="993" pos:column="9"/></name><operator pos:line="993" pos:column="9">-&gt;<pos:position pos:line="993" pos:column="14"/></operator><name pos:line="993" pos:column="11">u<pos:position pos:line="993" pos:column="12"/></name><operator pos:line="993" pos:column="12">.<pos:position pos:line="993" pos:column="13"/></operator><name pos:line="993" pos:column="13">i<pos:position pos:line="993" pos:column="14"/></name></name> <operator pos:line="993" pos:column="15">=<pos:position pos:line="993" pos:column="16"/></operator> <name pos:line="993" pos:column="17">rB<pos:position pos:line="993" pos:column="19"/></name></expr>;<pos:position pos:line="993" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="994" pos:column="5">MemSetTypeFlag<pos:position pos:line="994" pos:column="19"/></name><argument_list pos:line="994" pos:column="19">(<argument><expr><name pos:line="994" pos:column="20">pOut<pos:position pos:line="994" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="994" pos:column="26">MEM_Int<pos:position pos:line="994" pos:column="33"/></name></expr></argument>)<pos:position pos:line="994" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="994" pos:column="35"/></expr_stmt>
<cpp:else pos:line="995" pos:column="1">#<cpp:directive pos:line="995" pos:column="2">else<pos:position pos:line="995" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="996" pos:column="5">if<condition pos:line="996" pos:column="7">( <expr><call><name pos:line="996" pos:column="9">sqlite3IsNaN<pos:position pos:line="996" pos:column="21"/></name><argument_list pos:line="996" pos:column="21">(<argument><expr><name pos:line="996" pos:column="22">rB<pos:position pos:line="996" pos:column="24"/></name></expr></argument>)<pos:position pos:line="996" pos:column="25"/></argument_list></call></expr> )<pos:position pos:line="996" pos:column="27"/></condition><then><block pos:line="996" pos:column="27">{
      <goto pos:line="997" pos:column="7">goto <name pos:line="997" pos:column="12">arithmetic_result_is_null<pos:position pos:line="997" pos:column="37"/></name>;<pos:position pos:line="997" pos:column="38"/></goto>
    }<pos:position pos:line="998" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="999" pos:column="5">pOut<pos:position pos:line="999" pos:column="9"/></name><operator pos:line="999" pos:column="9">-&gt;<pos:position pos:line="999" pos:column="14"/></operator><name pos:line="999" pos:column="11">u<pos:position pos:line="999" pos:column="12"/></name><operator pos:line="999" pos:column="12">.<pos:position pos:line="999" pos:column="13"/></operator><name pos:line="999" pos:column="13">r<pos:position pos:line="999" pos:column="14"/></name></name> <operator pos:line="999" pos:column="15">=<pos:position pos:line="999" pos:column="16"/></operator> <name pos:line="999" pos:column="17">rB<pos:position pos:line="999" pos:column="19"/></name></expr>;<pos:position pos:line="999" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1000" pos:column="5">MemSetTypeFlag<pos:position pos:line="1000" pos:column="19"/></name><argument_list pos:line="1000" pos:column="19">(<argument><expr><name pos:line="1000" pos:column="20">pOut<pos:position pos:line="1000" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1000" pos:column="26">MEM_Real<pos:position pos:line="1000" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1000" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1000" pos:column="36"/></expr_stmt>
    <if pos:line="1001" pos:column="5">if<condition pos:line="1001" pos:column="7">( <expr><operator pos:line="1001" pos:column="9">(<pos:position pos:line="1001" pos:column="10"/></operator><operator pos:line="1001" pos:column="10">(<pos:position pos:line="1001" pos:column="11"/></operator><name pos:line="1001" pos:column="11">type1<pos:position pos:line="1001" pos:column="16"/></name><operator pos:line="1001" pos:column="16">|<pos:position pos:line="1001" pos:column="17"/></operator><name pos:line="1001" pos:column="17">type2<pos:position pos:line="1001" pos:column="22"/></name><operator pos:line="1001" pos:column="22">)<pos:position pos:line="1001" pos:column="23"/></operator><operator pos:line="1001" pos:column="23">&amp;<pos:position pos:line="1001" pos:column="28"/></operator><name pos:line="1001" pos:column="24">MEM_Real<pos:position pos:line="1001" pos:column="32"/></name><operator pos:line="1001" pos:column="32">)<pos:position pos:line="1001" pos:column="33"/></operator><operator pos:line="1001" pos:column="33">==<pos:position pos:line="1001" pos:column="35"/></operator><literal type="number" pos:line="1001" pos:column="35">0<pos:position pos:line="1001" pos:column="36"/></literal> <operator pos:line="1001" pos:column="37">&amp;&amp;<pos:position pos:line="1001" pos:column="47"/></operator> <operator pos:line="1001" pos:column="40">!<pos:position pos:line="1001" pos:column="41"/></operator><name pos:line="1001" pos:column="41">bIntint<pos:position pos:line="1001" pos:column="48"/></name></expr> )<pos:position pos:line="1001" pos:column="50"/></condition><then><block pos:line="1001" pos:column="50">{
      <expr_stmt><expr><call><name pos:line="1002" pos:column="7">sqlite3VdbeIntegerAffinity<pos:position pos:line="1002" pos:column="33"/></name><argument_list pos:line="1002" pos:column="33">(<argument><expr><name pos:line="1002" pos:column="34">pOut<pos:position pos:line="1002" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1002" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1002" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="1003" pos:column="6"/></block></then></if>
<cpp:endif pos:line="1004" pos:column="1">#<cpp:directive pos:line="1004" pos:column="2">endif<pos:position pos:line="1004" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="1005" pos:column="4"/></block></else></if>
  <break pos:line="1006" pos:column="3">break;<pos:position pos:line="1006" pos:column="9"/></break>

<label><name pos:line="1008" pos:column="1">arithmetic_result_is_null<pos:position pos:line="1008" pos:column="26"/></name>:<pos:position pos:line="1008" pos:column="27"/></label>
  <expr_stmt><expr><call><name pos:line="1009" pos:column="3">sqlite3VdbeMemSetNull<pos:position pos:line="1009" pos:column="24"/></name><argument_list pos:line="1009" pos:column="24">(<argument><expr><name pos:line="1009" pos:column="25">pOut<pos:position pos:line="1009" pos:column="29"/></name></expr></argument>)<pos:position pos:line="1009" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1009" pos:column="31"/></expr_stmt>
  <break pos:line="1010" pos:column="3">break;<pos:position pos:line="1010" pos:column="9"/></break>
}<pos:position pos:line="1011" pos:column="2"/></block>

<comment type="block" pos:line="1013" pos:column="1">/* Opcode: CollSeq P1 * * P4
**
** P4 is a pointer to a CollSeq object. If the next call to a user function
** or aggregate calls sqlite3GetFuncCollSeq(), this collation sequence will
** be returned. This is used by the built-in min(), max() and nullif()
** functions.
**
** If P1 is not zero, then it is a register that a subsequent min() or
** max() aggregate will set to 1 if the current row is not the minimum or
** maximum.  The P1 register is initialized to 0 by this instruction.
**
** The interface used by the implementation of the aforementioned functions
** to retrieve the collation sequence set by this opcode is not available
** publicly.  Only built-in functions have access to this feature.
*/</comment>
<case pos:line="1028" pos:column="1">case <expr><name pos:line="1028" pos:column="6">OP_CollSeq<pos:position pos:line="1028" pos:column="16"/></name></expr>:<pos:position pos:line="1028" pos:column="17"/></case> <block pos:line="1028" pos:column="18">{
  <expr_stmt><expr><call><name pos:line="1029" pos:column="3">assert<pos:position pos:line="1029" pos:column="9"/></name><argument_list pos:line="1029" pos:column="9">( <argument><expr><name><name pos:line="1029" pos:column="11">pOp<pos:position pos:line="1029" pos:column="14"/></name><operator pos:line="1029" pos:column="14">-&gt;<pos:position pos:line="1029" pos:column="19"/></operator><name pos:line="1029" pos:column="16">p4type<pos:position pos:line="1029" pos:column="22"/></name></name><operator pos:line="1029" pos:column="22">==<pos:position pos:line="1029" pos:column="24"/></operator><name pos:line="1029" pos:column="24">P4_COLLSEQ<pos:position pos:line="1029" pos:column="34"/></name></expr></argument> )<pos:position pos:line="1029" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1029" pos:column="37"/></expr_stmt>
  <if pos:line="1030" pos:column="3">if<condition pos:line="1030" pos:column="5">( <expr><name><name pos:line="1030" pos:column="7">pOp<pos:position pos:line="1030" pos:column="10"/></name><operator pos:line="1030" pos:column="10">-&gt;<pos:position pos:line="1030" pos:column="15"/></operator><name pos:line="1030" pos:column="12">p1<pos:position pos:line="1030" pos:column="14"/></name></name></expr> )<pos:position pos:line="1030" pos:column="16"/></condition><then><block pos:line="1030" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="1031" pos:column="5">sqlite3VdbeMemSetInt64<pos:position pos:line="1031" pos:column="27"/></name><argument_list pos:line="1031" pos:column="27">(<argument><expr><operator pos:line="1031" pos:column="28">&amp;<pos:position pos:line="1031" pos:column="33"/></operator><name><name pos:line="1031" pos:column="29">aMem<pos:position pos:line="1031" pos:column="33"/></name><index pos:line="1031" pos:column="33">[<expr><name><name pos:line="1031" pos:column="34">pOp<pos:position pos:line="1031" pos:column="37"/></name><operator pos:line="1031" pos:column="37">-&gt;<pos:position pos:line="1031" pos:column="42"/></operator><name pos:line="1031" pos:column="39">p1<pos:position pos:line="1031" pos:column="41"/></name></name></expr>]<pos:position pos:line="1031" pos:column="42"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="1031" pos:column="44">0<pos:position pos:line="1031" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="1031" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1031" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="1032" pos:column="4"/></block></then></if>
  <break pos:line="1033" pos:column="3">break;<pos:position pos:line="1033" pos:column="9"/></break>
}<pos:position pos:line="1034" pos:column="2"/></block>

<comment type="block" pos:line="1036" pos:column="1">/* Opcode: BitAnd P1 P2 P3 * *
** Synopsis: r[P3]=r[P1]&amp;r[P2]
**
** Take the bit-wise AND of the values in register P1 and P2 and
** store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="1043" pos:column="1">/* Opcode: BitOr P1 P2 P3 * *
** Synopsis: r[P3]=r[P1]|r[P2]
**
** Take the bit-wise OR of the values in register P1 and P2 and
** store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="1050" pos:column="1">/* Opcode: ShiftLeft P1 P2 P3 * *
** Synopsis: r[P3]=r[P2]&lt;&lt;r[P1]
**
** Shift the integer value in register P2 to the left by the
** number of bits specified by the integer in register P1.
** Store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="1058" pos:column="1">/* Opcode: ShiftRight P1 P2 P3 * *
** Synopsis: r[P3]=r[P2]&gt;&gt;r[P1]
**
** Shift the integer value in register P2 to the right by the
** number of bits specified by the integer in register P1.
** Store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<case pos:line="1066" pos:column="1">case <expr><name pos:line="1066" pos:column="6">OP_BitAnd<pos:position pos:line="1066" pos:column="15"/></name></expr>:<pos:position pos:line="1066" pos:column="16"/></case>                 <comment type="block" pos:line="1066" pos:column="33">/* same as TK_BITAND, in1, in2, out3 */</comment>
<case pos:line="1067" pos:column="1">case <expr><name pos:line="1067" pos:column="6">OP_BitOr<pos:position pos:line="1067" pos:column="14"/></name></expr>:<pos:position pos:line="1067" pos:column="15"/></case>                  <comment type="block" pos:line="1067" pos:column="33">/* same as TK_BITOR, in1, in2, out3 */</comment>
<case pos:line="1068" pos:column="1">case <expr><name pos:line="1068" pos:column="6">OP_ShiftLeft<pos:position pos:line="1068" pos:column="18"/></name></expr>:<pos:position pos:line="1068" pos:column="19"/></case>              <comment type="block" pos:line="1068" pos:column="33">/* same as TK_LSHIFT, in1, in2, out3 */</comment>
<case pos:line="1069" pos:column="1">case <expr><name pos:line="1069" pos:column="6">OP_ShiftRight<pos:position pos:line="1069" pos:column="19"/></name></expr>:<pos:position pos:line="1069" pos:column="20"/></case> <block pos:line="1069" pos:column="21">{           <comment type="block" pos:line="1069" pos:column="33">/* same as TK_RSHIFT, in1, in2, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="1070" pos:column="3">i64<pos:position pos:line="1070" pos:column="6"/></name></type> <name pos:line="1070" pos:column="7">iA<pos:position pos:line="1070" pos:column="9"/></name></decl>;<pos:position pos:line="1070" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1071" pos:column="3">u64<pos:position pos:line="1071" pos:column="6"/></name></type> <name pos:line="1071" pos:column="7">uA<pos:position pos:line="1071" pos:column="9"/></name></decl>;<pos:position pos:line="1071" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1072" pos:column="3">i64<pos:position pos:line="1072" pos:column="6"/></name></type> <name pos:line="1072" pos:column="7">iB<pos:position pos:line="1072" pos:column="9"/></name></decl>;<pos:position pos:line="1072" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1073" pos:column="3">u8<pos:position pos:line="1073" pos:column="5"/></name></type> <name pos:line="1073" pos:column="6">op<pos:position pos:line="1073" pos:column="8"/></name></decl>;<pos:position pos:line="1073" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name pos:line="1075" pos:column="3">pIn1<pos:position pos:line="1075" pos:column="7"/></name> <operator pos:line="1075" pos:column="8">=<pos:position pos:line="1075" pos:column="9"/></operator> <operator pos:line="1075" pos:column="10">&amp;<pos:position pos:line="1075" pos:column="15"/></operator><name><name pos:line="1075" pos:column="11">aMem<pos:position pos:line="1075" pos:column="15"/></name><index pos:line="1075" pos:column="15">[<expr><name><name pos:line="1075" pos:column="16">pOp<pos:position pos:line="1075" pos:column="19"/></name><operator pos:line="1075" pos:column="19">-&gt;<pos:position pos:line="1075" pos:column="24"/></operator><name pos:line="1075" pos:column="21">p1<pos:position pos:line="1075" pos:column="23"/></name></name></expr>]<pos:position pos:line="1075" pos:column="24"/></index></name></expr>;<pos:position pos:line="1075" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1076" pos:column="3">pIn2<pos:position pos:line="1076" pos:column="7"/></name> <operator pos:line="1076" pos:column="8">=<pos:position pos:line="1076" pos:column="9"/></operator> <operator pos:line="1076" pos:column="10">&amp;<pos:position pos:line="1076" pos:column="15"/></operator><name><name pos:line="1076" pos:column="11">aMem<pos:position pos:line="1076" pos:column="15"/></name><index pos:line="1076" pos:column="15">[<expr><name><name pos:line="1076" pos:column="16">pOp<pos:position pos:line="1076" pos:column="19"/></name><operator pos:line="1076" pos:column="19">-&gt;<pos:position pos:line="1076" pos:column="24"/></operator><name pos:line="1076" pos:column="21">p2<pos:position pos:line="1076" pos:column="23"/></name></name></expr>]<pos:position pos:line="1076" pos:column="24"/></index></name></expr>;<pos:position pos:line="1076" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1077" pos:column="3">pOut<pos:position pos:line="1077" pos:column="7"/></name> <operator pos:line="1077" pos:column="8">=<pos:position pos:line="1077" pos:column="9"/></operator> <operator pos:line="1077" pos:column="10">&amp;<pos:position pos:line="1077" pos:column="15"/></operator><name><name pos:line="1077" pos:column="11">aMem<pos:position pos:line="1077" pos:column="15"/></name><index pos:line="1077" pos:column="15">[<expr><name><name pos:line="1077" pos:column="16">pOp<pos:position pos:line="1077" pos:column="19"/></name><operator pos:line="1077" pos:column="19">-&gt;<pos:position pos:line="1077" pos:column="24"/></operator><name pos:line="1077" pos:column="21">p3<pos:position pos:line="1077" pos:column="23"/></name></name></expr>]<pos:position pos:line="1077" pos:column="24"/></index></name></expr>;<pos:position pos:line="1077" pos:column="25"/></expr_stmt>
  <if pos:line="1078" pos:column="3">if<condition pos:line="1078" pos:column="5">( <expr><operator pos:line="1078" pos:column="7">(<pos:position pos:line="1078" pos:column="8"/></operator><name><name pos:line="1078" pos:column="8">pIn1<pos:position pos:line="1078" pos:column="12"/></name><operator pos:line="1078" pos:column="12">-&gt;<pos:position pos:line="1078" pos:column="17"/></operator><name pos:line="1078" pos:column="14">flags<pos:position pos:line="1078" pos:column="19"/></name></name> <operator pos:line="1078" pos:column="20">|<pos:position pos:line="1078" pos:column="21"/></operator> <name><name pos:line="1078" pos:column="22">pIn2<pos:position pos:line="1078" pos:column="26"/></name><operator pos:line="1078" pos:column="26">-&gt;<pos:position pos:line="1078" pos:column="31"/></operator><name pos:line="1078" pos:column="28">flags<pos:position pos:line="1078" pos:column="33"/></name></name><operator pos:line="1078" pos:column="33">)<pos:position pos:line="1078" pos:column="34"/></operator> <operator pos:line="1078" pos:column="35">&amp;<pos:position pos:line="1078" pos:column="40"/></operator> <name pos:line="1078" pos:column="37">MEM_Null<pos:position pos:line="1078" pos:column="45"/></name></expr> )<pos:position pos:line="1078" pos:column="47"/></condition><then><block pos:line="1078" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="1079" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="1079" pos:column="26"/></name><argument_list pos:line="1079" pos:column="26">(<argument><expr><name pos:line="1079" pos:column="27">pOut<pos:position pos:line="1079" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1079" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1079" pos:column="33"/></expr_stmt>
    <break pos:line="1080" pos:column="5">break;<pos:position pos:line="1080" pos:column="11"/></break>
  }<pos:position pos:line="1081" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="1082" pos:column="3">iA<pos:position pos:line="1082" pos:column="5"/></name> <operator pos:line="1082" pos:column="6">=<pos:position pos:line="1082" pos:column="7"/></operator> <call><name pos:line="1082" pos:column="8">sqlite3VdbeIntValue<pos:position pos:line="1082" pos:column="27"/></name><argument_list pos:line="1082" pos:column="27">(<argument><expr><name pos:line="1082" pos:column="28">pIn2<pos:position pos:line="1082" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1082" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1082" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1083" pos:column="3">iB<pos:position pos:line="1083" pos:column="5"/></name> <operator pos:line="1083" pos:column="6">=<pos:position pos:line="1083" pos:column="7"/></operator> <call><name pos:line="1083" pos:column="8">sqlite3VdbeIntValue<pos:position pos:line="1083" pos:column="27"/></name><argument_list pos:line="1083" pos:column="27">(<argument><expr><name pos:line="1083" pos:column="28">pIn1<pos:position pos:line="1083" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1083" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1083" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1084" pos:column="3">op<pos:position pos:line="1084" pos:column="5"/></name> <operator pos:line="1084" pos:column="6">=<pos:position pos:line="1084" pos:column="7"/></operator> <name><name pos:line="1084" pos:column="8">pOp<pos:position pos:line="1084" pos:column="11"/></name><operator pos:line="1084" pos:column="11">-&gt;<pos:position pos:line="1084" pos:column="16"/></operator><name pos:line="1084" pos:column="13">opcode<pos:position pos:line="1084" pos:column="19"/></name></name></expr>;<pos:position pos:line="1084" pos:column="20"/></expr_stmt>
  <if pos:line="1085" pos:column="3">if<condition pos:line="1085" pos:column="5">( <expr><name pos:line="1085" pos:column="7">op<pos:position pos:line="1085" pos:column="9"/></name><operator pos:line="1085" pos:column="9">==<pos:position pos:line="1085" pos:column="11"/></operator><name pos:line="1085" pos:column="11">OP_BitAnd<pos:position pos:line="1085" pos:column="20"/></name></expr> )<pos:position pos:line="1085" pos:column="22"/></condition><then><block pos:line="1085" pos:column="22">{
    <expr_stmt><expr><name pos:line="1086" pos:column="5">iA<pos:position pos:line="1086" pos:column="7"/></name> <operator pos:line="1086" pos:column="8">&amp;=<pos:position pos:line="1086" pos:column="14"/></operator> <name pos:line="1086" pos:column="11">iB<pos:position pos:line="1086" pos:column="13"/></name></expr>;<pos:position pos:line="1086" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="1087" pos:column="4"/></block></then><elseif pos:line="1087" pos:column="4">else <if pos:line="1087" pos:column="9">if<condition pos:line="1087" pos:column="11">( <expr><name pos:line="1087" pos:column="13">op<pos:position pos:line="1087" pos:column="15"/></name><operator pos:line="1087" pos:column="15">==<pos:position pos:line="1087" pos:column="17"/></operator><name pos:line="1087" pos:column="17">OP_BitOr<pos:position pos:line="1087" pos:column="25"/></name></expr> )<pos:position pos:line="1087" pos:column="27"/></condition><then><block pos:line="1087" pos:column="27">{
    <expr_stmt><expr><name pos:line="1088" pos:column="5">iA<pos:position pos:line="1088" pos:column="7"/></name> <operator pos:line="1088" pos:column="8">|=<pos:position pos:line="1088" pos:column="10"/></operator> <name pos:line="1088" pos:column="11">iB<pos:position pos:line="1088" pos:column="13"/></name></expr>;<pos:position pos:line="1088" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="1089" pos:column="4"/></block></then></if></elseif><elseif pos:line="1089" pos:column="4">else <if pos:line="1089" pos:column="9">if<condition pos:line="1089" pos:column="11">( <expr><name pos:line="1089" pos:column="13">iB<pos:position pos:line="1089" pos:column="15"/></name><operator pos:line="1089" pos:column="15">!=<pos:position pos:line="1089" pos:column="17"/></operator><literal type="number" pos:line="1089" pos:column="17">0<pos:position pos:line="1089" pos:column="18"/></literal></expr> )<pos:position pos:line="1089" pos:column="20"/></condition><then><block pos:line="1089" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="1090" pos:column="5">assert<pos:position pos:line="1090" pos:column="11"/></name><argument_list pos:line="1090" pos:column="11">( <argument><expr><name pos:line="1090" pos:column="13">op<pos:position pos:line="1090" pos:column="15"/></name><operator pos:line="1090" pos:column="15">==<pos:position pos:line="1090" pos:column="17"/></operator><name pos:line="1090" pos:column="17">OP_ShiftRight<pos:position pos:line="1090" pos:column="30"/></name> <operator pos:line="1090" pos:column="31">||<pos:position pos:line="1090" pos:column="33"/></operator> <name pos:line="1090" pos:column="34">op<pos:position pos:line="1090" pos:column="36"/></name><operator pos:line="1090" pos:column="36">==<pos:position pos:line="1090" pos:column="38"/></operator><name pos:line="1090" pos:column="38">OP_ShiftLeft<pos:position pos:line="1090" pos:column="50"/></name></expr></argument> )<pos:position pos:line="1090" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="1090" pos:column="53"/></expr_stmt>

    <comment type="block" pos:line="1092" pos:column="5">/* If shifting by a negative amount, shift in the other direction */</comment>
    <if pos:line="1093" pos:column="5">if<condition pos:line="1093" pos:column="7">( <expr><name pos:line="1093" pos:column="9">iB<pos:position pos:line="1093" pos:column="11"/></name><operator pos:line="1093" pos:column="11">&lt;<pos:position pos:line="1093" pos:column="15"/></operator><literal type="number" pos:line="1093" pos:column="12">0<pos:position pos:line="1093" pos:column="13"/></literal></expr> )<pos:position pos:line="1093" pos:column="15"/></condition><then><block pos:line="1093" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="1094" pos:column="7">assert<pos:position pos:line="1094" pos:column="13"/></name><argument_list pos:line="1094" pos:column="13">( <argument><expr><name pos:line="1094" pos:column="15">OP_ShiftRight<pos:position pos:line="1094" pos:column="28"/></name><operator pos:line="1094" pos:column="28">==<pos:position pos:line="1094" pos:column="30"/></operator><name pos:line="1094" pos:column="30">OP_ShiftLeft<pos:position pos:line="1094" pos:column="42"/></name><operator pos:line="1094" pos:column="42">+<pos:position pos:line="1094" pos:column="43"/></operator><literal type="number" pos:line="1094" pos:column="43">1<pos:position pos:line="1094" pos:column="44"/></literal></expr></argument> )<pos:position pos:line="1094" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1094" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1095" pos:column="7">op<pos:position pos:line="1095" pos:column="9"/></name> <operator pos:line="1095" pos:column="10">=<pos:position pos:line="1095" pos:column="11"/></operator> <literal type="number" pos:line="1095" pos:column="12">2<pos:position pos:line="1095" pos:column="13"/></literal><operator pos:line="1095" pos:column="13">*<pos:position pos:line="1095" pos:column="14"/></operator><name pos:line="1095" pos:column="14">OP_ShiftLeft<pos:position pos:line="1095" pos:column="26"/></name> <operator pos:line="1095" pos:column="27">+<pos:position pos:line="1095" pos:column="28"/></operator> <literal type="number" pos:line="1095" pos:column="29">1<pos:position pos:line="1095" pos:column="30"/></literal> <operator pos:line="1095" pos:column="31">-<pos:position pos:line="1095" pos:column="32"/></operator> <name pos:line="1095" pos:column="33">op<pos:position pos:line="1095" pos:column="35"/></name></expr>;<pos:position pos:line="1095" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1096" pos:column="7">iB<pos:position pos:line="1096" pos:column="9"/></name> <operator pos:line="1096" pos:column="10">=<pos:position pos:line="1096" pos:column="11"/></operator> <ternary><condition><expr><name pos:line="1096" pos:column="12">iB<pos:position pos:line="1096" pos:column="14"/></name><operator pos:line="1096" pos:column="14">&gt;<pos:position pos:line="1096" pos:column="18"/></operator><operator pos:line="1096" pos:column="15">(<pos:position pos:line="1096" pos:column="16"/></operator><operator pos:line="1096" pos:column="16">-<pos:position pos:line="1096" pos:column="17"/></operator><literal type="number" pos:line="1096" pos:column="17">64<pos:position pos:line="1096" pos:column="19"/></literal><operator pos:line="1096" pos:column="19">)<pos:position pos:line="1096" pos:column="20"/></operator></expr> ?<pos:position pos:line="1096" pos:column="22"/></condition><then pos:line="1096" pos:column="22"> <expr><operator pos:line="1096" pos:column="23">-<pos:position pos:line="1096" pos:column="24"/></operator><name pos:line="1096" pos:column="24">iB<pos:position pos:line="1096" pos:column="26"/></name></expr> <pos:position pos:line="1096" pos:column="27"/></then><else pos:line="1096" pos:column="27">: <expr><literal type="number" pos:line="1096" pos:column="29">64<pos:position pos:line="1096" pos:column="31"/></literal></expr></else></ternary></expr>;<pos:position pos:line="1096" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="1097" pos:column="6"/></block></then></if>

    <if pos:line="1099" pos:column="5">if<condition pos:line="1099" pos:column="7">( <expr><name pos:line="1099" pos:column="9">iB<pos:position pos:line="1099" pos:column="11"/></name><operator pos:line="1099" pos:column="11">&gt;=<pos:position pos:line="1099" pos:column="16"/></operator><literal type="number" pos:line="1099" pos:column="13">64<pos:position pos:line="1099" pos:column="15"/></literal></expr> )<pos:position pos:line="1099" pos:column="17"/></condition><then><block pos:line="1099" pos:column="17">{
      <expr_stmt><expr><name pos:line="1100" pos:column="7">iA<pos:position pos:line="1100" pos:column="9"/></name> <operator pos:line="1100" pos:column="10">=<pos:position pos:line="1100" pos:column="11"/></operator> <ternary><condition><expr><operator pos:line="1100" pos:column="12">(<pos:position pos:line="1100" pos:column="13"/></operator><name pos:line="1100" pos:column="13">iA<pos:position pos:line="1100" pos:column="15"/></name><operator pos:line="1100" pos:column="15">&gt;=<pos:position pos:line="1100" pos:column="20"/></operator><literal type="number" pos:line="1100" pos:column="17">0<pos:position pos:line="1100" pos:column="18"/></literal> <operator pos:line="1100" pos:column="19">||<pos:position pos:line="1100" pos:column="21"/></operator> <name pos:line="1100" pos:column="22">op<pos:position pos:line="1100" pos:column="24"/></name><operator pos:line="1100" pos:column="24">==<pos:position pos:line="1100" pos:column="26"/></operator><name pos:line="1100" pos:column="26">OP_ShiftLeft<pos:position pos:line="1100" pos:column="38"/></name><operator pos:line="1100" pos:column="38">)<pos:position pos:line="1100" pos:column="39"/></operator></expr> ?<pos:position pos:line="1100" pos:column="41"/></condition><then pos:line="1100" pos:column="41"> <expr><literal type="number" pos:line="1100" pos:column="42">0<pos:position pos:line="1100" pos:column="43"/></literal></expr> <pos:position pos:line="1100" pos:column="44"/></then><else pos:line="1100" pos:column="44">: <expr><operator pos:line="1100" pos:column="46">-<pos:position pos:line="1100" pos:column="47"/></operator><literal type="number" pos:line="1100" pos:column="47">1<pos:position pos:line="1100" pos:column="48"/></literal></expr></else></ternary></expr>;<pos:position pos:line="1100" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="1101" pos:column="6"/></block></then><else pos:line="1101" pos:column="6">else<block pos:line="1101" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="1102" pos:column="7">memcpy<pos:position pos:line="1102" pos:column="13"/></name><argument_list pos:line="1102" pos:column="13">(<argument><expr><operator pos:line="1102" pos:column="14">&amp;<pos:position pos:line="1102" pos:column="19"/></operator><name pos:line="1102" pos:column="15">uA<pos:position pos:line="1102" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="1102" pos:column="19">&amp;<pos:position pos:line="1102" pos:column="24"/></operator><name pos:line="1102" pos:column="20">iA<pos:position pos:line="1102" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="1102" pos:column="24">sizeof<argument_list pos:line="1102" pos:column="30">(<argument><expr><name pos:line="1102" pos:column="31">uA<pos:position pos:line="1102" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1102" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1102" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1102" pos:column="36"/></expr_stmt>
      <if pos:line="1103" pos:column="7">if<condition pos:line="1103" pos:column="9">( <expr><name pos:line="1103" pos:column="11">op<pos:position pos:line="1103" pos:column="13"/></name><operator pos:line="1103" pos:column="13">==<pos:position pos:line="1103" pos:column="15"/></operator><name pos:line="1103" pos:column="15">OP_ShiftLeft<pos:position pos:line="1103" pos:column="27"/></name></expr> )<pos:position pos:line="1103" pos:column="29"/></condition><then><block pos:line="1103" pos:column="29">{
        <expr_stmt><expr><name pos:line="1104" pos:column="9">uA<pos:position pos:line="1104" pos:column="11"/></name> <operator pos:line="1104" pos:column="12">&lt;&lt;=<pos:position pos:line="1104" pos:column="21"/></operator> <name pos:line="1104" pos:column="16">iB<pos:position pos:line="1104" pos:column="18"/></name></expr>;<pos:position pos:line="1104" pos:column="19"/></expr_stmt>
      }<pos:position pos:line="1105" pos:column="8"/></block></then><else pos:line="1105" pos:column="8">else<block pos:line="1105" pos:column="12">{
        <expr_stmt><expr><name pos:line="1106" pos:column="9">uA<pos:position pos:line="1106" pos:column="11"/></name> <operator pos:line="1106" pos:column="12">&gt;&gt;=<pos:position pos:line="1106" pos:column="21"/></operator> <name pos:line="1106" pos:column="16">iB<pos:position pos:line="1106" pos:column="18"/></name></expr>;<pos:position pos:line="1106" pos:column="19"/></expr_stmt>
        <comment type="block" pos:line="1107" pos:column="9">/* Sign-extend on a right shift of a negative number */</comment>
        <if pos:line="1108" pos:column="9">if<condition pos:line="1108" pos:column="11">( <expr><name pos:line="1108" pos:column="13">iA<pos:position pos:line="1108" pos:column="15"/></name><operator pos:line="1108" pos:column="15">&lt;<pos:position pos:line="1108" pos:column="19"/></operator><literal type="number" pos:line="1108" pos:column="16">0<pos:position pos:line="1108" pos:column="17"/></literal></expr> )<pos:position pos:line="1108" pos:column="19"/></condition><then pos:line="1108" pos:column="19"> <block type="pseudo"><expr_stmt><expr><name pos:line="1108" pos:column="20">uA<pos:position pos:line="1108" pos:column="22"/></name> <operator pos:line="1108" pos:column="23">|=<pos:position pos:line="1108" pos:column="25"/></operator> <operator pos:line="1108" pos:column="26">(<pos:position pos:line="1108" pos:column="27"/></operator><operator pos:line="1108" pos:column="27">(<pos:position pos:line="1108" pos:column="28"/></operator><operator pos:line="1108" pos:column="28">(<pos:position pos:line="1108" pos:column="29"/></operator><operator pos:line="1108" pos:column="29">(<pos:position pos:line="1108" pos:column="30"/></operator><name pos:line="1108" pos:column="30">u64<pos:position pos:line="1108" pos:column="33"/></name><operator pos:line="1108" pos:column="33">)<pos:position pos:line="1108" pos:column="34"/></operator><literal type="number" pos:line="1108" pos:column="34">0xffffffff<pos:position pos:line="1108" pos:column="44"/></literal><operator pos:line="1108" pos:column="44">)<pos:position pos:line="1108" pos:column="45"/></operator><operator pos:line="1108" pos:column="45">&lt;&lt;<pos:position pos:line="1108" pos:column="53"/></operator><literal type="number" pos:line="1108" pos:column="47">32<pos:position pos:line="1108" pos:column="49"/></literal><operator pos:line="1108" pos:column="49">)<pos:position pos:line="1108" pos:column="50"/></operator><operator pos:line="1108" pos:column="50">|<pos:position pos:line="1108" pos:column="51"/></operator><literal type="number" pos:line="1108" pos:column="51">0xffffffff<pos:position pos:line="1108" pos:column="61"/></literal><operator pos:line="1108" pos:column="61">)<pos:position pos:line="1108" pos:column="62"/></operator> <operator pos:line="1108" pos:column="63">&lt;&lt;<pos:position pos:line="1108" pos:column="71"/></operator> <operator pos:line="1108" pos:column="66">(<pos:position pos:line="1108" pos:column="67"/></operator><literal type="number" pos:line="1108" pos:column="67">64<pos:position pos:line="1108" pos:column="69"/></literal><operator pos:line="1108" pos:column="69">-<pos:position pos:line="1108" pos:column="70"/></operator><name pos:line="1108" pos:column="70">iB<pos:position pos:line="1108" pos:column="72"/></name><operator pos:line="1108" pos:column="72">)<pos:position pos:line="1108" pos:column="73"/></operator></expr>;<pos:position pos:line="1108" pos:column="74"/></expr_stmt></block></then></if>
      }<pos:position pos:line="1109" pos:column="8"/></block></else></if>
      <expr_stmt><expr><call><name pos:line="1110" pos:column="7">memcpy<pos:position pos:line="1110" pos:column="13"/></name><argument_list pos:line="1110" pos:column="13">(<argument><expr><operator pos:line="1110" pos:column="14">&amp;<pos:position pos:line="1110" pos:column="19"/></operator><name pos:line="1110" pos:column="15">iA<pos:position pos:line="1110" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="1110" pos:column="19">&amp;<pos:position pos:line="1110" pos:column="24"/></operator><name pos:line="1110" pos:column="20">uA<pos:position pos:line="1110" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="1110" pos:column="24">sizeof<argument_list pos:line="1110" pos:column="30">(<argument><expr><name pos:line="1110" pos:column="31">iA<pos:position pos:line="1110" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1110" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1110" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1110" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="1111" pos:column="6"/></block></else></if>
  }<pos:position pos:line="1112" pos:column="4"/></block></then></if></elseif></if>
  <expr_stmt><expr><name><name pos:line="1113" pos:column="3">pOut<pos:position pos:line="1113" pos:column="7"/></name><operator pos:line="1113" pos:column="7">-&gt;<pos:position pos:line="1113" pos:column="12"/></operator><name pos:line="1113" pos:column="9">u<pos:position pos:line="1113" pos:column="10"/></name><operator pos:line="1113" pos:column="10">.<pos:position pos:line="1113" pos:column="11"/></operator><name pos:line="1113" pos:column="11">i<pos:position pos:line="1113" pos:column="12"/></name></name> <operator pos:line="1113" pos:column="13">=<pos:position pos:line="1113" pos:column="14"/></operator> <name pos:line="1113" pos:column="15">iA<pos:position pos:line="1113" pos:column="17"/></name></expr>;<pos:position pos:line="1113" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1114" pos:column="3">MemSetTypeFlag<pos:position pos:line="1114" pos:column="17"/></name><argument_list pos:line="1114" pos:column="17">(<argument><expr><name pos:line="1114" pos:column="18">pOut<pos:position pos:line="1114" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="1114" pos:column="24">MEM_Int<pos:position pos:line="1114" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1114" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1114" pos:column="33"/></expr_stmt>
  <break pos:line="1115" pos:column="3">break;<pos:position pos:line="1115" pos:column="9"/></break>
}<pos:position pos:line="1116" pos:column="2"/></block>

<comment type="block" pos:line="1118" pos:column="1">/* Opcode: AddImm  P1 P2 * * *
** Synopsis: r[P1]=r[P1]+P2
** 
** Add the constant P2 to the value in register P1.
** The result is always an integer.
**
** To force any register to be an integer, just add 0.
*/</comment>
<case pos:line="1126" pos:column="1">case <expr><name pos:line="1126" pos:column="6">OP_AddImm<pos:position pos:line="1126" pos:column="15"/></name></expr>:<pos:position pos:line="1126" pos:column="16"/></case> <block pos:line="1126" pos:column="17">{            <comment type="block" pos:line="1126" pos:column="30">/* in1 */</comment>
  <expr_stmt><expr><name pos:line="1127" pos:column="3">pIn1<pos:position pos:line="1127" pos:column="7"/></name> <operator pos:line="1127" pos:column="8">=<pos:position pos:line="1127" pos:column="9"/></operator> <operator pos:line="1127" pos:column="10">&amp;<pos:position pos:line="1127" pos:column="15"/></operator><name><name pos:line="1127" pos:column="11">aMem<pos:position pos:line="1127" pos:column="15"/></name><index pos:line="1127" pos:column="15">[<expr><name><name pos:line="1127" pos:column="16">pOp<pos:position pos:line="1127" pos:column="19"/></name><operator pos:line="1127" pos:column="19">-&gt;<pos:position pos:line="1127" pos:column="24"/></operator><name pos:line="1127" pos:column="21">p1<pos:position pos:line="1127" pos:column="23"/></name></name></expr>]<pos:position pos:line="1127" pos:column="24"/></index></name></expr>;<pos:position pos:line="1127" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1128" pos:column="3">memAboutToChange<pos:position pos:line="1128" pos:column="19"/></name><argument_list pos:line="1128" pos:column="19">(<argument><expr><name pos:line="1128" pos:column="20">p<pos:position pos:line="1128" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="1128" pos:column="23">pIn1<pos:position pos:line="1128" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1128" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1128" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1129" pos:column="3">sqlite3VdbeMemIntegerify<pos:position pos:line="1129" pos:column="27"/></name><argument_list pos:line="1129" pos:column="27">(<argument><expr><name pos:line="1129" pos:column="28">pIn1<pos:position pos:line="1129" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1129" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1129" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1130" pos:column="3">pIn1<pos:position pos:line="1130" pos:column="7"/></name><operator pos:line="1130" pos:column="7">-&gt;<pos:position pos:line="1130" pos:column="12"/></operator><name pos:line="1130" pos:column="9">u<pos:position pos:line="1130" pos:column="10"/></name><operator pos:line="1130" pos:column="10">.<pos:position pos:line="1130" pos:column="11"/></operator><name pos:line="1130" pos:column="11">i<pos:position pos:line="1130" pos:column="12"/></name></name> <operator pos:line="1130" pos:column="13">+=<pos:position pos:line="1130" pos:column="15"/></operator> <name><name pos:line="1130" pos:column="16">pOp<pos:position pos:line="1130" pos:column="19"/></name><operator pos:line="1130" pos:column="19">-&gt;<pos:position pos:line="1130" pos:column="24"/></operator><name pos:line="1130" pos:column="21">p2<pos:position pos:line="1130" pos:column="23"/></name></name></expr>;<pos:position pos:line="1130" pos:column="24"/></expr_stmt>
  <break pos:line="1131" pos:column="3">break;<pos:position pos:line="1131" pos:column="9"/></break>
}<pos:position pos:line="1132" pos:column="2"/></block>

<comment type="block" pos:line="1134" pos:column="1">/* Opcode: MustBeInt P1 P2 * * *
** 
** Force the value in register P1 to be an integer.  If the value
** in P1 is not an integer and cannot be converted into an integer
** without data loss, then jump immediately to P2, or if P2==0
** raise an SQLITE_MISMATCH exception.
*/</comment>
<case pos:line="1141" pos:column="1">case <expr><name pos:line="1141" pos:column="6">OP_MustBeInt<pos:position pos:line="1141" pos:column="18"/></name></expr>:<pos:position pos:line="1141" pos:column="19"/></case> <block pos:line="1141" pos:column="20">{            <comment type="block" pos:line="1141" pos:column="33">/* jump, in1 */</comment>
  <expr_stmt><expr><name pos:line="1142" pos:column="3">pIn1<pos:position pos:line="1142" pos:column="7"/></name> <operator pos:line="1142" pos:column="8">=<pos:position pos:line="1142" pos:column="9"/></operator> <operator pos:line="1142" pos:column="10">&amp;<pos:position pos:line="1142" pos:column="15"/></operator><name><name pos:line="1142" pos:column="11">aMem<pos:position pos:line="1142" pos:column="15"/></name><index pos:line="1142" pos:column="15">[<expr><name><name pos:line="1142" pos:column="16">pOp<pos:position pos:line="1142" pos:column="19"/></name><operator pos:line="1142" pos:column="19">-&gt;<pos:position pos:line="1142" pos:column="24"/></operator><name pos:line="1142" pos:column="21">p1<pos:position pos:line="1142" pos:column="23"/></name></name></expr>]<pos:position pos:line="1142" pos:column="24"/></index></name></expr>;<pos:position pos:line="1142" pos:column="25"/></expr_stmt>
  <if pos:line="1143" pos:column="3">if<condition pos:line="1143" pos:column="5">( <expr><operator pos:line="1143" pos:column="7">(<pos:position pos:line="1143" pos:column="8"/></operator><name><name pos:line="1143" pos:column="8">pIn1<pos:position pos:line="1143" pos:column="12"/></name><operator pos:line="1143" pos:column="12">-&gt;<pos:position pos:line="1143" pos:column="17"/></operator><name pos:line="1143" pos:column="14">flags<pos:position pos:line="1143" pos:column="19"/></name></name> <operator pos:line="1143" pos:column="20">&amp;<pos:position pos:line="1143" pos:column="25"/></operator> <name pos:line="1143" pos:column="22">MEM_Int<pos:position pos:line="1143" pos:column="29"/></name><operator pos:line="1143" pos:column="29">)<pos:position pos:line="1143" pos:column="30"/></operator><operator pos:line="1143" pos:column="30">==<pos:position pos:line="1143" pos:column="32"/></operator><literal type="number" pos:line="1143" pos:column="32">0<pos:position pos:line="1143" pos:column="33"/></literal></expr> )<pos:position pos:line="1143" pos:column="35"/></condition><then><block pos:line="1143" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="1144" pos:column="5">applyAffinity<pos:position pos:line="1144" pos:column="18"/></name><argument_list pos:line="1144" pos:column="18">(<argument><expr><name pos:line="1144" pos:column="19">pIn1<pos:position pos:line="1144" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1144" pos:column="25">SQLITE_AFF_NUMERIC<pos:position pos:line="1144" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1144" pos:column="45">encoding<pos:position pos:line="1144" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1144" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1144" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1145" pos:column="5">VdbeBranchTaken<pos:position pos:line="1145" pos:column="20"/></name><argument_list pos:line="1145" pos:column="20">(<argument><expr><operator pos:line="1145" pos:column="21">(<pos:position pos:line="1145" pos:column="22"/></operator><name><name pos:line="1145" pos:column="22">pIn1<pos:position pos:line="1145" pos:column="26"/></name><operator pos:line="1145" pos:column="26">-&gt;<pos:position pos:line="1145" pos:column="31"/></operator><name pos:line="1145" pos:column="28">flags<pos:position pos:line="1145" pos:column="33"/></name></name><operator pos:line="1145" pos:column="33">&amp;<pos:position pos:line="1145" pos:column="38"/></operator><name pos:line="1145" pos:column="34">MEM_Int<pos:position pos:line="1145" pos:column="41"/></name><operator pos:line="1145" pos:column="41">)<pos:position pos:line="1145" pos:column="42"/></operator><operator pos:line="1145" pos:column="42">==<pos:position pos:line="1145" pos:column="44"/></operator><literal type="number" pos:line="1145" pos:column="44">0<pos:position pos:line="1145" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1145" pos:column="47">2<pos:position pos:line="1145" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="1145" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1145" pos:column="50"/></expr_stmt>
    <if pos:line="1146" pos:column="5">if<condition pos:line="1146" pos:column="7">( <expr><operator pos:line="1146" pos:column="9">(<pos:position pos:line="1146" pos:column="10"/></operator><name><name pos:line="1146" pos:column="10">pIn1<pos:position pos:line="1146" pos:column="14"/></name><operator pos:line="1146" pos:column="14">-&gt;<pos:position pos:line="1146" pos:column="19"/></operator><name pos:line="1146" pos:column="16">flags<pos:position pos:line="1146" pos:column="21"/></name></name> <operator pos:line="1146" pos:column="22">&amp;<pos:position pos:line="1146" pos:column="27"/></operator> <name pos:line="1146" pos:column="24">MEM_Int<pos:position pos:line="1146" pos:column="31"/></name><operator pos:line="1146" pos:column="31">)<pos:position pos:line="1146" pos:column="32"/></operator><operator pos:line="1146" pos:column="32">==<pos:position pos:line="1146" pos:column="34"/></operator><literal type="number" pos:line="1146" pos:column="34">0<pos:position pos:line="1146" pos:column="35"/></literal></expr> )<pos:position pos:line="1146" pos:column="37"/></condition><then><block pos:line="1146" pos:column="37">{
      <if pos:line="1147" pos:column="7">if<condition pos:line="1147" pos:column="9">( <expr><name><name pos:line="1147" pos:column="11">pOp<pos:position pos:line="1147" pos:column="14"/></name><operator pos:line="1147" pos:column="14">-&gt;<pos:position pos:line="1147" pos:column="19"/></operator><name pos:line="1147" pos:column="16">p2<pos:position pos:line="1147" pos:column="18"/></name></name><operator pos:line="1147" pos:column="18">==<pos:position pos:line="1147" pos:column="20"/></operator><literal type="number" pos:line="1147" pos:column="20">0<pos:position pos:line="1147" pos:column="21"/></literal></expr> )<pos:position pos:line="1147" pos:column="23"/></condition><then><block pos:line="1147" pos:column="23">{
        <expr_stmt><expr><name pos:line="1148" pos:column="9">rc<pos:position pos:line="1148" pos:column="11"/></name> <operator pos:line="1148" pos:column="12">=<pos:position pos:line="1148" pos:column="13"/></operator> <name pos:line="1148" pos:column="14">SQLITE_MISMATCH<pos:position pos:line="1148" pos:column="29"/></name></expr>;<pos:position pos:line="1148" pos:column="30"/></expr_stmt>
        <goto pos:line="1149" pos:column="9">goto <name pos:line="1149" pos:column="14">abort_due_to_error<pos:position pos:line="1149" pos:column="32"/></name>;<pos:position pos:line="1149" pos:column="33"/></goto>
      }<pos:position pos:line="1150" pos:column="8"/></block></then><else pos:line="1150" pos:column="8">else<block pos:line="1150" pos:column="12">{
        <goto pos:line="1151" pos:column="9">goto <name pos:line="1151" pos:column="14">jump_to_p2<pos:position pos:line="1151" pos:column="24"/></name>;<pos:position pos:line="1151" pos:column="25"/></goto>
      }<pos:position pos:line="1152" pos:column="8"/></block></else></if>
    }<pos:position pos:line="1153" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1154" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="1155" pos:column="3">MemSetTypeFlag<pos:position pos:line="1155" pos:column="17"/></name><argument_list pos:line="1155" pos:column="17">(<argument><expr><name pos:line="1155" pos:column="18">pIn1<pos:position pos:line="1155" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="1155" pos:column="24">MEM_Int<pos:position pos:line="1155" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1155" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1155" pos:column="33"/></expr_stmt>
  <break pos:line="1156" pos:column="3">break;<pos:position pos:line="1156" pos:column="9"/></break>
}<pos:position pos:line="1157" pos:column="2"/></block>

<cpp:ifndef pos:line="1159" pos:column="1">#<cpp:directive pos:line="1159" pos:column="2">ifndef<pos:position pos:line="1159" pos:column="8"/></cpp:directive> <name pos:line="1159" pos:column="9">SQLITE_OMIT_FLOATING_POINT<pos:position pos:line="1159" pos:column="35"/></name></cpp:ifndef>
<comment type="block" pos:line="1160" pos:column="1">/* Opcode: RealAffinity P1 * * * *
**
** If register P1 holds an integer convert it to a real value.
**
** This opcode is used when extracting information from a column that
** has REAL affinity.  Such column values may still be stored as
** integers, for space efficiency, but after extraction we want them
** to have only a real value.
*/</comment>
<case pos:line="1169" pos:column="1">case <expr><name pos:line="1169" pos:column="6">OP_RealAffinity<pos:position pos:line="1169" pos:column="21"/></name></expr>:<pos:position pos:line="1169" pos:column="22"/></case> <block pos:line="1169" pos:column="23">{                  <comment type="block" pos:line="1169" pos:column="42">/* in1 */</comment>
  <expr_stmt><expr><name pos:line="1170" pos:column="3">pIn1<pos:position pos:line="1170" pos:column="7"/></name> <operator pos:line="1170" pos:column="8">=<pos:position pos:line="1170" pos:column="9"/></operator> <operator pos:line="1170" pos:column="10">&amp;<pos:position pos:line="1170" pos:column="15"/></operator><name><name pos:line="1170" pos:column="11">aMem<pos:position pos:line="1170" pos:column="15"/></name><index pos:line="1170" pos:column="15">[<expr><name><name pos:line="1170" pos:column="16">pOp<pos:position pos:line="1170" pos:column="19"/></name><operator pos:line="1170" pos:column="19">-&gt;<pos:position pos:line="1170" pos:column="24"/></operator><name pos:line="1170" pos:column="21">p1<pos:position pos:line="1170" pos:column="23"/></name></name></expr>]<pos:position pos:line="1170" pos:column="24"/></index></name></expr>;<pos:position pos:line="1170" pos:column="25"/></expr_stmt>
  <if pos:line="1171" pos:column="3">if<condition pos:line="1171" pos:column="5">( <expr><name><name pos:line="1171" pos:column="7">pIn1<pos:position pos:line="1171" pos:column="11"/></name><operator pos:line="1171" pos:column="11">-&gt;<pos:position pos:line="1171" pos:column="16"/></operator><name pos:line="1171" pos:column="13">flags<pos:position pos:line="1171" pos:column="18"/></name></name> <operator pos:line="1171" pos:column="19">&amp;<pos:position pos:line="1171" pos:column="24"/></operator> <name pos:line="1171" pos:column="21">MEM_Int<pos:position pos:line="1171" pos:column="28"/></name></expr> )<pos:position pos:line="1171" pos:column="30"/></condition><then><block pos:line="1171" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="1172" pos:column="5">sqlite3VdbeMemRealify<pos:position pos:line="1172" pos:column="26"/></name><argument_list pos:line="1172" pos:column="26">(<argument><expr><name pos:line="1172" pos:column="27">pIn1<pos:position pos:line="1172" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1172" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1172" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="1173" pos:column="4"/></block></then></if>
  <break pos:line="1174" pos:column="3">break;<pos:position pos:line="1174" pos:column="9"/></break>
}<pos:position pos:line="1175" pos:column="2"/></block>
<cpp:endif pos:line="1176" pos:column="1">#<cpp:directive pos:line="1176" pos:column="2">endif<pos:position pos:line="1176" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="1178" pos:column="1">#<cpp:directive pos:line="1178" pos:column="2">ifndef<pos:position pos:line="1178" pos:column="8"/></cpp:directive> <name pos:line="1178" pos:column="9">SQLITE_OMIT_CAST<pos:position pos:line="1178" pos:column="25"/></name></cpp:ifndef>
<comment type="block" pos:line="1179" pos:column="1">/* Opcode: Cast P1 P2 * * *
** Synopsis: affinity(r[P1])
**
** Force the value in register P1 to be the type defined by P2.
** 
** &lt;ul&gt;
** &lt;li&gt; P2=='A' &amp;rarr; BLOB
** &lt;li&gt; P2=='B' &amp;rarr; TEXT
** &lt;li&gt; P2=='C' &amp;rarr; NUMERIC
** &lt;li&gt; P2=='D' &amp;rarr; INTEGER
** &lt;li&gt; P2=='E' &amp;rarr; REAL
** &lt;/ul&gt;
**
** A NULL value is not changed by this routine.  It remains NULL.
*/</comment>
<case pos:line="1194" pos:column="1">case <expr><name pos:line="1194" pos:column="6">OP_Cast<pos:position pos:line="1194" pos:column="13"/></name></expr>:<pos:position pos:line="1194" pos:column="14"/></case> <block pos:line="1194" pos:column="15">{                  <comment type="block" pos:line="1194" pos:column="34">/* in1 */</comment>
  <expr_stmt><expr><call><name pos:line="1195" pos:column="3">assert<pos:position pos:line="1195" pos:column="9"/></name><argument_list pos:line="1195" pos:column="9">( <argument><expr><name><name pos:line="1195" pos:column="11">pOp<pos:position pos:line="1195" pos:column="14"/></name><operator pos:line="1195" pos:column="14">-&gt;<pos:position pos:line="1195" pos:column="19"/></operator><name pos:line="1195" pos:column="16">p2<pos:position pos:line="1195" pos:column="18"/></name></name><operator pos:line="1195" pos:column="18">&gt;=<pos:position pos:line="1195" pos:column="23"/></operator><name pos:line="1195" pos:column="20">SQLITE_AFF_BLOB<pos:position pos:line="1195" pos:column="35"/></name> <operator pos:line="1195" pos:column="36">&amp;&amp;<pos:position pos:line="1195" pos:column="46"/></operator> <name><name pos:line="1195" pos:column="39">pOp<pos:position pos:line="1195" pos:column="42"/></name><operator pos:line="1195" pos:column="42">-&gt;<pos:position pos:line="1195" pos:column="47"/></operator><name pos:line="1195" pos:column="44">p2<pos:position pos:line="1195" pos:column="46"/></name></name><operator pos:line="1195" pos:column="46">&lt;=<pos:position pos:line="1195" pos:column="51"/></operator><name pos:line="1195" pos:column="48">SQLITE_AFF_REAL<pos:position pos:line="1195" pos:column="63"/></name></expr></argument> )<pos:position pos:line="1195" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="1195" pos:column="66"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1196" pos:column="3">testcase<pos:position pos:line="1196" pos:column="11"/></name><argument_list pos:line="1196" pos:column="11">( <argument><expr><name><name pos:line="1196" pos:column="13">pOp<pos:position pos:line="1196" pos:column="16"/></name><operator pos:line="1196" pos:column="16">-&gt;<pos:position pos:line="1196" pos:column="21"/></operator><name pos:line="1196" pos:column="18">p2<pos:position pos:line="1196" pos:column="20"/></name></name><operator pos:line="1196" pos:column="20">==<pos:position pos:line="1196" pos:column="22"/></operator><name pos:line="1196" pos:column="22">SQLITE_AFF_TEXT<pos:position pos:line="1196" pos:column="37"/></name></expr></argument> )<pos:position pos:line="1196" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1196" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1197" pos:column="3">testcase<pos:position pos:line="1197" pos:column="11"/></name><argument_list pos:line="1197" pos:column="11">( <argument><expr><name><name pos:line="1197" pos:column="13">pOp<pos:position pos:line="1197" pos:column="16"/></name><operator pos:line="1197" pos:column="16">-&gt;<pos:position pos:line="1197" pos:column="21"/></operator><name pos:line="1197" pos:column="18">p2<pos:position pos:line="1197" pos:column="20"/></name></name><operator pos:line="1197" pos:column="20">==<pos:position pos:line="1197" pos:column="22"/></operator><name pos:line="1197" pos:column="22">SQLITE_AFF_BLOB<pos:position pos:line="1197" pos:column="37"/></name></expr></argument> )<pos:position pos:line="1197" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1197" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1198" pos:column="3">testcase<pos:position pos:line="1198" pos:column="11"/></name><argument_list pos:line="1198" pos:column="11">( <argument><expr><name><name pos:line="1198" pos:column="13">pOp<pos:position pos:line="1198" pos:column="16"/></name><operator pos:line="1198" pos:column="16">-&gt;<pos:position pos:line="1198" pos:column="21"/></operator><name pos:line="1198" pos:column="18">p2<pos:position pos:line="1198" pos:column="20"/></name></name><operator pos:line="1198" pos:column="20">==<pos:position pos:line="1198" pos:column="22"/></operator><name pos:line="1198" pos:column="22">SQLITE_AFF_NUMERIC<pos:position pos:line="1198" pos:column="40"/></name></expr></argument> )<pos:position pos:line="1198" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1198" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1199" pos:column="3">testcase<pos:position pos:line="1199" pos:column="11"/></name><argument_list pos:line="1199" pos:column="11">( <argument><expr><name><name pos:line="1199" pos:column="13">pOp<pos:position pos:line="1199" pos:column="16"/></name><operator pos:line="1199" pos:column="16">-&gt;<pos:position pos:line="1199" pos:column="21"/></operator><name pos:line="1199" pos:column="18">p2<pos:position pos:line="1199" pos:column="20"/></name></name><operator pos:line="1199" pos:column="20">==<pos:position pos:line="1199" pos:column="22"/></operator><name pos:line="1199" pos:column="22">SQLITE_AFF_INTEGER<pos:position pos:line="1199" pos:column="40"/></name></expr></argument> )<pos:position pos:line="1199" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1199" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1200" pos:column="3">testcase<pos:position pos:line="1200" pos:column="11"/></name><argument_list pos:line="1200" pos:column="11">( <argument><expr><name><name pos:line="1200" pos:column="13">pOp<pos:position pos:line="1200" pos:column="16"/></name><operator pos:line="1200" pos:column="16">-&gt;<pos:position pos:line="1200" pos:column="21"/></operator><name pos:line="1200" pos:column="18">p2<pos:position pos:line="1200" pos:column="20"/></name></name><operator pos:line="1200" pos:column="20">==<pos:position pos:line="1200" pos:column="22"/></operator><name pos:line="1200" pos:column="22">SQLITE_AFF_REAL<pos:position pos:line="1200" pos:column="37"/></name></expr></argument> )<pos:position pos:line="1200" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1200" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1201" pos:column="3">pIn1<pos:position pos:line="1201" pos:column="7"/></name> <operator pos:line="1201" pos:column="8">=<pos:position pos:line="1201" pos:column="9"/></operator> <operator pos:line="1201" pos:column="10">&amp;<pos:position pos:line="1201" pos:column="15"/></operator><name><name pos:line="1201" pos:column="11">aMem<pos:position pos:line="1201" pos:column="15"/></name><index pos:line="1201" pos:column="15">[<expr><name><name pos:line="1201" pos:column="16">pOp<pos:position pos:line="1201" pos:column="19"/></name><operator pos:line="1201" pos:column="19">-&gt;<pos:position pos:line="1201" pos:column="24"/></operator><name pos:line="1201" pos:column="21">p1<pos:position pos:line="1201" pos:column="23"/></name></name></expr>]<pos:position pos:line="1201" pos:column="24"/></index></name></expr>;<pos:position pos:line="1201" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1202" pos:column="3">memAboutToChange<pos:position pos:line="1202" pos:column="19"/></name><argument_list pos:line="1202" pos:column="19">(<argument><expr><name pos:line="1202" pos:column="20">p<pos:position pos:line="1202" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="1202" pos:column="23">pIn1<pos:position pos:line="1202" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1202" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1202" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1203" pos:column="3">rc<pos:position pos:line="1203" pos:column="5"/></name> <operator pos:line="1203" pos:column="6">=<pos:position pos:line="1203" pos:column="7"/></operator> <call><name pos:line="1203" pos:column="8">ExpandBlob<pos:position pos:line="1203" pos:column="18"/></name><argument_list pos:line="1203" pos:column="18">(<argument><expr><name pos:line="1203" pos:column="19">pIn1<pos:position pos:line="1203" pos:column="23"/></name></expr></argument>)<pos:position pos:line="1203" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1203" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1204" pos:column="3">sqlite3VdbeMemCast<pos:position pos:line="1204" pos:column="21"/></name><argument_list pos:line="1204" pos:column="21">(<argument><expr><name pos:line="1204" pos:column="22">pIn1<pos:position pos:line="1204" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="1204" pos:column="28">pOp<pos:position pos:line="1204" pos:column="31"/></name><operator pos:line="1204" pos:column="31">-&gt;<pos:position pos:line="1204" pos:column="36"/></operator><name pos:line="1204" pos:column="33">p2<pos:position pos:line="1204" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="1204" pos:column="37">encoding<pos:position pos:line="1204" pos:column="45"/></name></expr></argument>)<pos:position pos:line="1204" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1204" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1205" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="1205" pos:column="22"/></name><argument_list pos:line="1205" pos:column="22">(<argument><expr><name pos:line="1205" pos:column="23">pIn1<pos:position pos:line="1205" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1205" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1205" pos:column="29"/></expr_stmt>
  <if pos:line="1206" pos:column="3">if<condition pos:line="1206" pos:column="5">( <expr><name pos:line="1206" pos:column="7">rc<pos:position pos:line="1206" pos:column="9"/></name></expr> )<pos:position pos:line="1206" pos:column="11"/></condition><then pos:line="1206" pos:column="11"> <block type="pseudo"><goto pos:line="1206" pos:column="12">goto <name pos:line="1206" pos:column="17">abort_due_to_error<pos:position pos:line="1206" pos:column="35"/></name>;<pos:position pos:line="1206" pos:column="36"/></goto></block></then></if>
  <break pos:line="1207" pos:column="3">break;<pos:position pos:line="1207" pos:column="9"/></break>
}<pos:position pos:line="1208" pos:column="2"/></block>
<cpp:endif pos:line="1209" pos:column="1">#<cpp:directive pos:line="1209" pos:column="2">endif<pos:position pos:line="1209" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1209" pos:column="8">/* SQLITE_OMIT_CAST */</comment>

<comment type="block" pos:line="1211" pos:column="1">/* Opcode: Eq P1 P2 P3 P4 P5
** Synopsis: IF r[P3]==r[P1]
**
** Compare the values in register P1 and P3.  If reg(P3)==reg(P1) then
** jump to address P2.  Or if the SQLITE_STOREP2 flag is set in P5, then
** store the result of comparison in register P2.
**
** The SQLITE_AFF_MASK portion of P5 must be an affinity character -
** SQLITE_AFF_TEXT, SQLITE_AFF_INTEGER, and so forth. An attempt is made 
** to coerce both inputs according to this affinity before the
** comparison is made. If the SQLITE_AFF_MASK is 0x00, then numeric
** affinity is used. Note that the affinity conversions are stored
** back into the input registers P1 and P3.  So this opcode can cause
** persistent changes to registers P1 and P3.
**
** Once any conversions have taken place, and neither value is NULL, 
** the values are compared. If both values are blobs then memcmp() is
** used to determine the results of the comparison.  If both values
** are text, then the appropriate collating function specified in
** P4 is used to do the comparison.  If P4 is not specified then
** memcmp() is used to compare text string.  If both values are
** numeric, then a numeric comparison is used. If the two values
** are of different types, then numbers are considered less than
** strings and strings are considered less than blobs.
**
** If SQLITE_NULLEQ is set in P5 then the result of comparison is always either
** true or false and is never NULL.  If both operands are NULL then the result
** of comparison is true.  If either operand is NULL then the result is false.
** If neither operand is NULL the result is the same as it would be if
** the SQLITE_NULLEQ flag were omitted from P5.
**
** If both SQLITE_STOREP2 and SQLITE_KEEPNULL flags are set then the
** content of r[P2] is only changed if the new value is NULL or 0 (false).
** In other words, a prior r[P2] value will not be overwritten by 1 (true).
*/</comment>
<comment type="block" pos:line="1246" pos:column="1">/* Opcode: Ne P1 P2 P3 P4 P5
** Synopsis: IF r[P3]!=r[P1]
**
** This works just like the Eq opcode except that the jump is taken if
** the operands in registers P1 and P3 are not equal.  See the Eq opcode for
** additional information.
**
** If both SQLITE_STOREP2 and SQLITE_KEEPNULL flags are set then the
** content of r[P2] is only changed if the new value is NULL or 1 (true).
** In other words, a prior r[P2] value will not be overwritten by 0 (false).
*/</comment>
<comment type="block" pos:line="1257" pos:column="1">/* Opcode: Lt P1 P2 P3 P4 P5
** Synopsis: IF r[P3]&lt;r[P1]
**
** Compare the values in register P1 and P3.  If reg(P3)&lt;reg(P1) then
** jump to address P2.  Or if the SQLITE_STOREP2 flag is set in P5 store
** the result of comparison (0 or 1 or NULL) into register P2.
**
** If the SQLITE_JUMPIFNULL bit of P5 is set and either reg(P1) or
** reg(P3) is NULL then the take the jump.  If the SQLITE_JUMPIFNULL 
** bit is clear then fall through if either operand is NULL.
**
** The SQLITE_AFF_MASK portion of P5 must be an affinity character -
** SQLITE_AFF_TEXT, SQLITE_AFF_INTEGER, and so forth. An attempt is made 
** to coerce both inputs according to this affinity before the
** comparison is made. If the SQLITE_AFF_MASK is 0x00, then numeric
** affinity is used. Note that the affinity conversions are stored
** back into the input registers P1 and P3.  So this opcode can cause
** persistent changes to registers P1 and P3.
**
** Once any conversions have taken place, and neither value is NULL, 
** the values are compared. If both values are blobs then memcmp() is
** used to determine the results of the comparison.  If both values
** are text, then the appropriate collating function specified in
** P4 is  used to do the comparison.  If P4 is not specified then
** memcmp() is used to compare text string.  If both values are
** numeric, then a numeric comparison is used. If the two values
** are of different types, then numbers are considered less than
** strings and strings are considered less than blobs.
*/</comment>
<comment type="block" pos:line="1286" pos:column="1">/* Opcode: Le P1 P2 P3 P4 P5
** Synopsis: IF r[P3]&lt;=r[P1]
**
** This works just like the Lt opcode except that the jump is taken if
** the content of register P3 is less than or equal to the content of
** register P1.  See the Lt opcode for additional information.
*/</comment>
<comment type="block" pos:line="1293" pos:column="1">/* Opcode: Gt P1 P2 P3 P4 P5
** Synopsis: IF r[P3]&gt;r[P1]
**
** This works just like the Lt opcode except that the jump is taken if
** the content of register P3 is greater than the content of
** register P1.  See the Lt opcode for additional information.
*/</comment>
<comment type="block" pos:line="1300" pos:column="1">/* Opcode: Ge P1 P2 P3 P4 P5
** Synopsis: IF r[P3]&gt;=r[P1]
**
** This works just like the Lt opcode except that the jump is taken if
** the content of register P3 is greater than or equal to the content of
** register P1.  See the Lt opcode for additional information.
*/</comment>
<case pos:line="1307" pos:column="1">case <expr><name pos:line="1307" pos:column="6">OP_Eq<pos:position pos:line="1307" pos:column="11"/></name></expr>:<pos:position pos:line="1307" pos:column="12"/></case>               <comment type="block" pos:line="1307" pos:column="27">/* same as TK_EQ, jump, in1, in3 */</comment>
<case pos:line="1308" pos:column="1">case <expr><name pos:line="1308" pos:column="6">OP_Ne<pos:position pos:line="1308" pos:column="11"/></name></expr>:<pos:position pos:line="1308" pos:column="12"/></case>               <comment type="block" pos:line="1308" pos:column="27">/* same as TK_NE, jump, in1, in3 */</comment>
<case pos:line="1309" pos:column="1">case <expr><name pos:line="1309" pos:column="6">OP_Lt<pos:position pos:line="1309" pos:column="11"/></name></expr>:<pos:position pos:line="1309" pos:column="12"/></case>               <comment type="block" pos:line="1309" pos:column="27">/* same as TK_LT, jump, in1, in3 */</comment>
<case pos:line="1310" pos:column="1">case <expr><name pos:line="1310" pos:column="6">OP_Le<pos:position pos:line="1310" pos:column="11"/></name></expr>:<pos:position pos:line="1310" pos:column="12"/></case>               <comment type="block" pos:line="1310" pos:column="27">/* same as TK_LE, jump, in1, in3 */</comment>
<case pos:line="1311" pos:column="1">case <expr><name pos:line="1311" pos:column="6">OP_Gt<pos:position pos:line="1311" pos:column="11"/></name></expr>:<pos:position pos:line="1311" pos:column="12"/></case>               <comment type="block" pos:line="1311" pos:column="27">/* same as TK_GT, jump, in1, in3 */</comment>
<case pos:line="1312" pos:column="1">case <expr><name pos:line="1312" pos:column="6">OP_Ge<pos:position pos:line="1312" pos:column="11"/></name></expr>:<pos:position pos:line="1312" pos:column="12"/></case> <block pos:line="1312" pos:column="13">{             <comment type="block" pos:line="1312" pos:column="27">/* same as TK_GE, jump, in1, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="1313" pos:column="3">int<pos:position pos:line="1313" pos:column="6"/></name></type> <name pos:line="1313" pos:column="7">res<pos:position pos:line="1313" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="1313" pos:column="12">res2<pos:position pos:line="1313" pos:column="16"/></name></decl>;<pos:position pos:line="1313" pos:column="17"/></decl_stmt>      <comment type="block" pos:line="1313" pos:column="23">/* Result of the comparison of pIn1 against pIn3 */</comment>
  <decl_stmt><decl><type><name pos:line="1314" pos:column="3">char<pos:position pos:line="1314" pos:column="7"/></name></type> <name pos:line="1314" pos:column="8">affinity<pos:position pos:line="1314" pos:column="16"/></name></decl>;<pos:position pos:line="1314" pos:column="17"/></decl_stmt>      <comment type="block" pos:line="1314" pos:column="23">/* Affinity to use for comparison */</comment>
  <decl_stmt><decl><type><name pos:line="1315" pos:column="3">u16<pos:position pos:line="1315" pos:column="6"/></name></type> <name pos:line="1315" pos:column="7">flags1<pos:position pos:line="1315" pos:column="13"/></name></decl>;<pos:position pos:line="1315" pos:column="14"/></decl_stmt>         <comment type="block" pos:line="1315" pos:column="23">/* Copy of initial value of pIn1-&gt;flags */</comment>
  <decl_stmt><decl><type><name pos:line="1316" pos:column="3">u16<pos:position pos:line="1316" pos:column="6"/></name></type> <name pos:line="1316" pos:column="7">flags3<pos:position pos:line="1316" pos:column="13"/></name></decl>;<pos:position pos:line="1316" pos:column="14"/></decl_stmt>         <comment type="block" pos:line="1316" pos:column="23">/* Copy of initial value of pIn3-&gt;flags */</comment>

  <expr_stmt><expr><name pos:line="1318" pos:column="3">pIn1<pos:position pos:line="1318" pos:column="7"/></name> <operator pos:line="1318" pos:column="8">=<pos:position pos:line="1318" pos:column="9"/></operator> <operator pos:line="1318" pos:column="10">&amp;<pos:position pos:line="1318" pos:column="15"/></operator><name><name pos:line="1318" pos:column="11">aMem<pos:position pos:line="1318" pos:column="15"/></name><index pos:line="1318" pos:column="15">[<expr><name><name pos:line="1318" pos:column="16">pOp<pos:position pos:line="1318" pos:column="19"/></name><operator pos:line="1318" pos:column="19">-&gt;<pos:position pos:line="1318" pos:column="24"/></operator><name pos:line="1318" pos:column="21">p1<pos:position pos:line="1318" pos:column="23"/></name></name></expr>]<pos:position pos:line="1318" pos:column="24"/></index></name></expr>;<pos:position pos:line="1318" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1319" pos:column="3">pIn3<pos:position pos:line="1319" pos:column="7"/></name> <operator pos:line="1319" pos:column="8">=<pos:position pos:line="1319" pos:column="9"/></operator> <operator pos:line="1319" pos:column="10">&amp;<pos:position pos:line="1319" pos:column="15"/></operator><name><name pos:line="1319" pos:column="11">aMem<pos:position pos:line="1319" pos:column="15"/></name><index pos:line="1319" pos:column="15">[<expr><name><name pos:line="1319" pos:column="16">pOp<pos:position pos:line="1319" pos:column="19"/></name><operator pos:line="1319" pos:column="19">-&gt;<pos:position pos:line="1319" pos:column="24"/></operator><name pos:line="1319" pos:column="21">p3<pos:position pos:line="1319" pos:column="23"/></name></name></expr>]<pos:position pos:line="1319" pos:column="24"/></index></name></expr>;<pos:position pos:line="1319" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1320" pos:column="3">flags1<pos:position pos:line="1320" pos:column="9"/></name> <operator pos:line="1320" pos:column="10">=<pos:position pos:line="1320" pos:column="11"/></operator> <name><name pos:line="1320" pos:column="12">pIn1<pos:position pos:line="1320" pos:column="16"/></name><operator pos:line="1320" pos:column="16">-&gt;<pos:position pos:line="1320" pos:column="21"/></operator><name pos:line="1320" pos:column="18">flags<pos:position pos:line="1320" pos:column="23"/></name></name></expr>;<pos:position pos:line="1320" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1321" pos:column="3">flags3<pos:position pos:line="1321" pos:column="9"/></name> <operator pos:line="1321" pos:column="10">=<pos:position pos:line="1321" pos:column="11"/></operator> <name><name pos:line="1321" pos:column="12">pIn3<pos:position pos:line="1321" pos:column="16"/></name><operator pos:line="1321" pos:column="16">-&gt;<pos:position pos:line="1321" pos:column="21"/></operator><name pos:line="1321" pos:column="18">flags<pos:position pos:line="1321" pos:column="23"/></name></name></expr>;<pos:position pos:line="1321" pos:column="24"/></expr_stmt>
  <if pos:line="1322" pos:column="3">if<condition pos:line="1322" pos:column="5">( <expr><operator pos:line="1322" pos:column="7">(<pos:position pos:line="1322" pos:column="8"/></operator><name pos:line="1322" pos:column="8">flags1<pos:position pos:line="1322" pos:column="14"/></name> <operator pos:line="1322" pos:column="15">|<pos:position pos:line="1322" pos:column="16"/></operator> <name pos:line="1322" pos:column="17">flags3<pos:position pos:line="1322" pos:column="23"/></name><operator pos:line="1322" pos:column="23">)<pos:position pos:line="1322" pos:column="24"/></operator><operator pos:line="1322" pos:column="24">&amp;<pos:position pos:line="1322" pos:column="29"/></operator><name pos:line="1322" pos:column="25">MEM_Null<pos:position pos:line="1322" pos:column="33"/></name></expr> )<pos:position pos:line="1322" pos:column="35"/></condition><then><block pos:line="1322" pos:column="35">{
    <comment type="block" pos:line="1323" pos:column="5">/* One or both operands are NULL */</comment>
    <if pos:line="1324" pos:column="5">if<condition pos:line="1324" pos:column="7">( <expr><name><name pos:line="1324" pos:column="9">pOp<pos:position pos:line="1324" pos:column="12"/></name><operator pos:line="1324" pos:column="12">-&gt;<pos:position pos:line="1324" pos:column="17"/></operator><name pos:line="1324" pos:column="14">p5<pos:position pos:line="1324" pos:column="16"/></name></name> <operator pos:line="1324" pos:column="17">&amp;<pos:position pos:line="1324" pos:column="22"/></operator> <name pos:line="1324" pos:column="19">SQLITE_NULLEQ<pos:position pos:line="1324" pos:column="32"/></name></expr> )<pos:position pos:line="1324" pos:column="34"/></condition><then><block pos:line="1324" pos:column="34">{
      <comment type="block" pos:line="1325" pos:column="7">/* If SQLITE_NULLEQ is set (which will only happen if the operator is
      ** OP_Eq or OP_Ne) then take the jump or not depending on whether
      ** or not both operands are null.
      */</comment>
      <expr_stmt><expr><call><name pos:line="1329" pos:column="7">assert<pos:position pos:line="1329" pos:column="13"/></name><argument_list pos:line="1329" pos:column="13">( <argument><expr><name><name pos:line="1329" pos:column="15">pOp<pos:position pos:line="1329" pos:column="18"/></name><operator pos:line="1329" pos:column="18">-&gt;<pos:position pos:line="1329" pos:column="23"/></operator><name pos:line="1329" pos:column="20">opcode<pos:position pos:line="1329" pos:column="26"/></name></name><operator pos:line="1329" pos:column="26">==<pos:position pos:line="1329" pos:column="28"/></operator><name pos:line="1329" pos:column="28">OP_Eq<pos:position pos:line="1329" pos:column="33"/></name> <operator pos:line="1329" pos:column="34">||<pos:position pos:line="1329" pos:column="36"/></operator> <name><name pos:line="1329" pos:column="37">pOp<pos:position pos:line="1329" pos:column="40"/></name><operator pos:line="1329" pos:column="40">-&gt;<pos:position pos:line="1329" pos:column="45"/></operator><name pos:line="1329" pos:column="42">opcode<pos:position pos:line="1329" pos:column="48"/></name></name><operator pos:line="1329" pos:column="48">==<pos:position pos:line="1329" pos:column="50"/></operator><name pos:line="1329" pos:column="50">OP_Ne<pos:position pos:line="1329" pos:column="55"/></name></expr></argument> )<pos:position pos:line="1329" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1329" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1330" pos:column="7">assert<pos:position pos:line="1330" pos:column="13"/></name><argument_list pos:line="1330" pos:column="13">( <argument><expr><operator pos:line="1330" pos:column="15">(<pos:position pos:line="1330" pos:column="16"/></operator><name pos:line="1330" pos:column="16">flags1<pos:position pos:line="1330" pos:column="22"/></name> <operator pos:line="1330" pos:column="23">&amp;<pos:position pos:line="1330" pos:column="28"/></operator> <name pos:line="1330" pos:column="25">MEM_Cleared<pos:position pos:line="1330" pos:column="36"/></name><operator pos:line="1330" pos:column="36">)<pos:position pos:line="1330" pos:column="37"/></operator><operator pos:line="1330" pos:column="37">==<pos:position pos:line="1330" pos:column="39"/></operator><literal type="number" pos:line="1330" pos:column="39">0<pos:position pos:line="1330" pos:column="40"/></literal></expr></argument> )<pos:position pos:line="1330" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1330" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1331" pos:column="7">assert<pos:position pos:line="1331" pos:column="13"/></name><argument_list pos:line="1331" pos:column="13">( <argument><expr><operator pos:line="1331" pos:column="15">(<pos:position pos:line="1331" pos:column="16"/></operator><name><name pos:line="1331" pos:column="16">pOp<pos:position pos:line="1331" pos:column="19"/></name><operator pos:line="1331" pos:column="19">-&gt;<pos:position pos:line="1331" pos:column="24"/></operator><name pos:line="1331" pos:column="21">p5<pos:position pos:line="1331" pos:column="23"/></name></name> <operator pos:line="1331" pos:column="24">&amp;<pos:position pos:line="1331" pos:column="29"/></operator> <name pos:line="1331" pos:column="26">SQLITE_JUMPIFNULL<pos:position pos:line="1331" pos:column="43"/></name><operator pos:line="1331" pos:column="43">)<pos:position pos:line="1331" pos:column="44"/></operator><operator pos:line="1331" pos:column="44">==<pos:position pos:line="1331" pos:column="46"/></operator><literal type="number" pos:line="1331" pos:column="46">0<pos:position pos:line="1331" pos:column="47"/></literal></expr></argument> )<pos:position pos:line="1331" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1331" pos:column="50"/></expr_stmt>
      <if pos:line="1332" pos:column="7">if<condition pos:line="1332" pos:column="9">( <expr><operator pos:line="1332" pos:column="11">(<pos:position pos:line="1332" pos:column="12"/></operator><name pos:line="1332" pos:column="12">flags1<pos:position pos:line="1332" pos:column="18"/></name><operator pos:line="1332" pos:column="18">&amp;<pos:position pos:line="1332" pos:column="23"/></operator><name pos:line="1332" pos:column="19">flags3<pos:position pos:line="1332" pos:column="25"/></name><operator pos:line="1332" pos:column="25">&amp;<pos:position pos:line="1332" pos:column="30"/></operator><name pos:line="1332" pos:column="26">MEM_Null<pos:position pos:line="1332" pos:column="34"/></name><operator pos:line="1332" pos:column="34">)<pos:position pos:line="1332" pos:column="35"/></operator><operator pos:line="1332" pos:column="35">!=<pos:position pos:line="1332" pos:column="37"/></operator><literal type="number" pos:line="1332" pos:column="37">0<pos:position pos:line="1332" pos:column="38"/></literal>
       <operator pos:line="1333" pos:column="8">&amp;&amp;<pos:position pos:line="1333" pos:column="18"/></operator> <operator pos:line="1333" pos:column="11">(<pos:position pos:line="1333" pos:column="12"/></operator><name pos:line="1333" pos:column="12">flags3<pos:position pos:line="1333" pos:column="18"/></name><operator pos:line="1333" pos:column="18">&amp;<pos:position pos:line="1333" pos:column="23"/></operator><name pos:line="1333" pos:column="19">MEM_Cleared<pos:position pos:line="1333" pos:column="30"/></name><operator pos:line="1333" pos:column="30">)<pos:position pos:line="1333" pos:column="31"/></operator><operator pos:line="1333" pos:column="31">==<pos:position pos:line="1333" pos:column="33"/></operator><literal type="number" pos:line="1333" pos:column="33">0<pos:position pos:line="1333" pos:column="34"/></literal></expr>
      )<pos:position pos:line="1334" pos:column="8"/></condition><then><block pos:line="1334" pos:column="8">{
        <expr_stmt><expr><name pos:line="1335" pos:column="9">res<pos:position pos:line="1335" pos:column="12"/></name> <operator pos:line="1335" pos:column="13">=<pos:position pos:line="1335" pos:column="14"/></operator> <literal type="number" pos:line="1335" pos:column="15">0<pos:position pos:line="1335" pos:column="16"/></literal></expr>;<pos:position pos:line="1335" pos:column="17"/></expr_stmt>  <comment type="block" pos:line="1335" pos:column="19">/* Operands are equal */</comment>
      }<pos:position pos:line="1336" pos:column="8"/></block></then><else pos:line="1336" pos:column="8">else<block pos:line="1336" pos:column="12">{
        <expr_stmt><expr><name pos:line="1337" pos:column="9">res<pos:position pos:line="1337" pos:column="12"/></name> <operator pos:line="1337" pos:column="13">=<pos:position pos:line="1337" pos:column="14"/></operator> <literal type="number" pos:line="1337" pos:column="15">1<pos:position pos:line="1337" pos:column="16"/></literal></expr>;<pos:position pos:line="1337" pos:column="17"/></expr_stmt>  <comment type="block" pos:line="1337" pos:column="19">/* Operands are not equal */</comment>
      }<pos:position pos:line="1338" pos:column="8"/></block></else></if>
    }<pos:position pos:line="1339" pos:column="6"/></block></then><else pos:line="1339" pos:column="6">else<block pos:line="1339" pos:column="10">{
      <comment type="block" pos:line="1340" pos:column="7">/* SQLITE_NULLEQ is clear and at least one operand is NULL,
      ** then the result is always NULL.
      ** The jump is taken if the SQLITE_JUMPIFNULL bit is set.
      */</comment>
      <if pos:line="1344" pos:column="7">if<condition pos:line="1344" pos:column="9">( <expr><name><name pos:line="1344" pos:column="11">pOp<pos:position pos:line="1344" pos:column="14"/></name><operator pos:line="1344" pos:column="14">-&gt;<pos:position pos:line="1344" pos:column="19"/></operator><name pos:line="1344" pos:column="16">p5<pos:position pos:line="1344" pos:column="18"/></name></name> <operator pos:line="1344" pos:column="19">&amp;<pos:position pos:line="1344" pos:column="24"/></operator> <name pos:line="1344" pos:column="21">SQLITE_STOREP2<pos:position pos:line="1344" pos:column="35"/></name></expr> )<pos:position pos:line="1344" pos:column="37"/></condition><then><block pos:line="1344" pos:column="37">{
        <expr_stmt><expr><name pos:line="1345" pos:column="9">pOut<pos:position pos:line="1345" pos:column="13"/></name> <operator pos:line="1345" pos:column="14">=<pos:position pos:line="1345" pos:column="15"/></operator> <operator pos:line="1345" pos:column="16">&amp;<pos:position pos:line="1345" pos:column="21"/></operator><name><name pos:line="1345" pos:column="17">aMem<pos:position pos:line="1345" pos:column="21"/></name><index pos:line="1345" pos:column="21">[<expr><name><name pos:line="1345" pos:column="22">pOp<pos:position pos:line="1345" pos:column="25"/></name><operator pos:line="1345" pos:column="25">-&gt;<pos:position pos:line="1345" pos:column="30"/></operator><name pos:line="1345" pos:column="27">p2<pos:position pos:line="1345" pos:column="29"/></name></name></expr>]<pos:position pos:line="1345" pos:column="30"/></index></name></expr>;<pos:position pos:line="1345" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1346" pos:column="9">iCompare<pos:position pos:line="1346" pos:column="17"/></name> <operator pos:line="1346" pos:column="18">=<pos:position pos:line="1346" pos:column="19"/></operator> <literal type="number" pos:line="1346" pos:column="20">1<pos:position pos:line="1346" pos:column="21"/></literal></expr>;<pos:position pos:line="1346" pos:column="22"/></expr_stmt>    <comment type="block" pos:line="1346" pos:column="26">/* Operands are not equal */</comment>
        <expr_stmt><expr><call><name pos:line="1347" pos:column="9">memAboutToChange<pos:position pos:line="1347" pos:column="25"/></name><argument_list pos:line="1347" pos:column="25">(<argument><expr><name pos:line="1347" pos:column="26">p<pos:position pos:line="1347" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1347" pos:column="29">pOut<pos:position pos:line="1347" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1347" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1347" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1348" pos:column="9">MemSetTypeFlag<pos:position pos:line="1348" pos:column="23"/></name><argument_list pos:line="1348" pos:column="23">(<argument><expr><name pos:line="1348" pos:column="24">pOut<pos:position pos:line="1348" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="1348" pos:column="30">MEM_Null<pos:position pos:line="1348" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1348" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1348" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1349" pos:column="9">REGISTER_TRACE<pos:position pos:line="1349" pos:column="23"/></name><argument_list pos:line="1349" pos:column="23">(<argument><expr><name><name pos:line="1349" pos:column="24">pOp<pos:position pos:line="1349" pos:column="27"/></name><operator pos:line="1349" pos:column="27">-&gt;<pos:position pos:line="1349" pos:column="32"/></operator><name pos:line="1349" pos:column="29">p2<pos:position pos:line="1349" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="1349" pos:column="33">pOut<pos:position pos:line="1349" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1349" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1349" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="1350" pos:column="8"/></block></then><else pos:line="1350" pos:column="8">else<block pos:line="1350" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="1351" pos:column="9">VdbeBranchTaken<pos:position pos:line="1351" pos:column="24"/></name><argument_list pos:line="1351" pos:column="24">(<argument><expr><literal type="number" pos:line="1351" pos:column="25">2<pos:position pos:line="1351" pos:column="26"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="1351" pos:column="27">3<pos:position pos:line="1351" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="1351" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="1351" pos:column="30"/></expr_stmt>
        <if pos:line="1352" pos:column="9">if<condition pos:line="1352" pos:column="11">( <expr><name><name pos:line="1352" pos:column="13">pOp<pos:position pos:line="1352" pos:column="16"/></name><operator pos:line="1352" pos:column="16">-&gt;<pos:position pos:line="1352" pos:column="21"/></operator><name pos:line="1352" pos:column="18">p5<pos:position pos:line="1352" pos:column="20"/></name></name> <operator pos:line="1352" pos:column="21">&amp;<pos:position pos:line="1352" pos:column="26"/></operator> <name pos:line="1352" pos:column="23">SQLITE_JUMPIFNULL<pos:position pos:line="1352" pos:column="40"/></name></expr> )<pos:position pos:line="1352" pos:column="42"/></condition><then><block pos:line="1352" pos:column="42">{
          <goto pos:line="1353" pos:column="11">goto <name pos:line="1353" pos:column="16">jump_to_p2<pos:position pos:line="1353" pos:column="26"/></name>;<pos:position pos:line="1353" pos:column="27"/></goto>
        }<pos:position pos:line="1354" pos:column="10"/></block></then></if>
      }<pos:position pos:line="1355" pos:column="8"/></block></else></if>
      <break pos:line="1356" pos:column="7">break;<pos:position pos:line="1356" pos:column="13"/></break>
    }<pos:position pos:line="1357" pos:column="6"/></block></else></if>
  }<pos:position pos:line="1358" pos:column="4"/></block></then><else pos:line="1358" pos:column="4">else<block pos:line="1358" pos:column="8">{
    <comment type="block" pos:line="1359" pos:column="5">/* Neither operand is NULL.  Do a comparison. */</comment>
    <expr_stmt><expr><name pos:line="1360" pos:column="5">affinity<pos:position pos:line="1360" pos:column="13"/></name> <operator pos:line="1360" pos:column="14">=<pos:position pos:line="1360" pos:column="15"/></operator> <name><name pos:line="1360" pos:column="16">pOp<pos:position pos:line="1360" pos:column="19"/></name><operator pos:line="1360" pos:column="19">-&gt;<pos:position pos:line="1360" pos:column="24"/></operator><name pos:line="1360" pos:column="21">p5<pos:position pos:line="1360" pos:column="23"/></name></name> <operator pos:line="1360" pos:column="24">&amp;<pos:position pos:line="1360" pos:column="29"/></operator> <name pos:line="1360" pos:column="26">SQLITE_AFF_MASK<pos:position pos:line="1360" pos:column="41"/></name></expr>;<pos:position pos:line="1360" pos:column="42"/></expr_stmt>
    <if pos:line="1361" pos:column="5">if<condition pos:line="1361" pos:column="7">( <expr><name pos:line="1361" pos:column="9">affinity<pos:position pos:line="1361" pos:column="17"/></name><operator pos:line="1361" pos:column="17">&gt;=<pos:position pos:line="1361" pos:column="22"/></operator><name pos:line="1361" pos:column="19">SQLITE_AFF_NUMERIC<pos:position pos:line="1361" pos:column="37"/></name></expr> )<pos:position pos:line="1361" pos:column="39"/></condition><then><block pos:line="1361" pos:column="39">{
      <if pos:line="1362" pos:column="7">if<condition pos:line="1362" pos:column="9">( <expr><operator pos:line="1362" pos:column="11">(<pos:position pos:line="1362" pos:column="12"/></operator><name pos:line="1362" pos:column="12">flags1<pos:position pos:line="1362" pos:column="18"/></name> <operator pos:line="1362" pos:column="19">|<pos:position pos:line="1362" pos:column="20"/></operator> <name pos:line="1362" pos:column="21">flags3<pos:position pos:line="1362" pos:column="27"/></name><operator pos:line="1362" pos:column="27">)<pos:position pos:line="1362" pos:column="28"/></operator><operator pos:line="1362" pos:column="28">&amp;<pos:position pos:line="1362" pos:column="33"/></operator><name pos:line="1362" pos:column="29">MEM_Str<pos:position pos:line="1362" pos:column="36"/></name></expr> )<pos:position pos:line="1362" pos:column="38"/></condition><then><block pos:line="1362" pos:column="38">{
        <if pos:line="1363" pos:column="9">if<condition pos:line="1363" pos:column="11">( <expr><operator pos:line="1363" pos:column="13">(<pos:position pos:line="1363" pos:column="14"/></operator><name pos:line="1363" pos:column="14">flags1<pos:position pos:line="1363" pos:column="20"/></name> <operator pos:line="1363" pos:column="21">&amp;<pos:position pos:line="1363" pos:column="26"/></operator> <operator pos:line="1363" pos:column="23">(<pos:position pos:line="1363" pos:column="24"/></operator><name pos:line="1363" pos:column="24">MEM_Int<pos:position pos:line="1363" pos:column="31"/></name><operator pos:line="1363" pos:column="31">|<pos:position pos:line="1363" pos:column="32"/></operator><name pos:line="1363" pos:column="32">MEM_Real<pos:position pos:line="1363" pos:column="40"/></name><operator pos:line="1363" pos:column="40">|<pos:position pos:line="1363" pos:column="41"/></operator><name pos:line="1363" pos:column="41">MEM_Str<pos:position pos:line="1363" pos:column="48"/></name><operator pos:line="1363" pos:column="48">)<pos:position pos:line="1363" pos:column="49"/></operator><operator pos:line="1363" pos:column="49">)<pos:position pos:line="1363" pos:column="50"/></operator><operator pos:line="1363" pos:column="50">==<pos:position pos:line="1363" pos:column="52"/></operator><name pos:line="1363" pos:column="52">MEM_Str<pos:position pos:line="1363" pos:column="59"/></name></expr> )<pos:position pos:line="1363" pos:column="61"/></condition><then><block pos:line="1363" pos:column="61">{
          <expr_stmt><expr><call><name pos:line="1364" pos:column="11">applyNumericAffinity<pos:position pos:line="1364" pos:column="31"/></name><argument_list pos:line="1364" pos:column="31">(<argument><expr><name pos:line="1364" pos:column="32">pIn1<pos:position pos:line="1364" pos:column="36"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="1364" pos:column="37">0<pos:position pos:line="1364" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="1364" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1364" pos:column="40"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1365" pos:column="11">testcase<pos:position pos:line="1365" pos:column="19"/></name><argument_list pos:line="1365" pos:column="19">( <argument><expr><name pos:line="1365" pos:column="21">flags3<pos:position pos:line="1365" pos:column="27"/></name><operator pos:line="1365" pos:column="27">!=<pos:position pos:line="1365" pos:column="29"/></operator><name><name pos:line="1365" pos:column="29">pIn3<pos:position pos:line="1365" pos:column="33"/></name><operator pos:line="1365" pos:column="33">-&gt;<pos:position pos:line="1365" pos:column="38"/></operator><name pos:line="1365" pos:column="35">flags<pos:position pos:line="1365" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="1365" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1365" pos:column="43"/></expr_stmt> <comment type="block" pos:line="1365" pos:column="44">/* Possible if pIn1==pIn3 */</comment>
          <expr_stmt><expr><name pos:line="1366" pos:column="11">flags3<pos:position pos:line="1366" pos:column="17"/></name> <operator pos:line="1366" pos:column="18">=<pos:position pos:line="1366" pos:column="19"/></operator> <name><name pos:line="1366" pos:column="20">pIn3<pos:position pos:line="1366" pos:column="24"/></name><operator pos:line="1366" pos:column="24">-&gt;<pos:position pos:line="1366" pos:column="29"/></operator><name pos:line="1366" pos:column="26">flags<pos:position pos:line="1366" pos:column="31"/></name></name></expr>;<pos:position pos:line="1366" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="1367" pos:column="10"/></block></then></if>
        <if pos:line="1368" pos:column="9">if<condition pos:line="1368" pos:column="11">( <expr><operator pos:line="1368" pos:column="13">(<pos:position pos:line="1368" pos:column="14"/></operator><name pos:line="1368" pos:column="14">flags3<pos:position pos:line="1368" pos:column="20"/></name> <operator pos:line="1368" pos:column="21">&amp;<pos:position pos:line="1368" pos:column="26"/></operator> <operator pos:line="1368" pos:column="23">(<pos:position pos:line="1368" pos:column="24"/></operator><name pos:line="1368" pos:column="24">MEM_Int<pos:position pos:line="1368" pos:column="31"/></name><operator pos:line="1368" pos:column="31">|<pos:position pos:line="1368" pos:column="32"/></operator><name pos:line="1368" pos:column="32">MEM_Real<pos:position pos:line="1368" pos:column="40"/></name><operator pos:line="1368" pos:column="40">|<pos:position pos:line="1368" pos:column="41"/></operator><name pos:line="1368" pos:column="41">MEM_Str<pos:position pos:line="1368" pos:column="48"/></name><operator pos:line="1368" pos:column="48">)<pos:position pos:line="1368" pos:column="49"/></operator><operator pos:line="1368" pos:column="49">)<pos:position pos:line="1368" pos:column="50"/></operator><operator pos:line="1368" pos:column="50">==<pos:position pos:line="1368" pos:column="52"/></operator><name pos:line="1368" pos:column="52">MEM_Str<pos:position pos:line="1368" pos:column="59"/></name></expr> )<pos:position pos:line="1368" pos:column="61"/></condition><then><block pos:line="1368" pos:column="61">{
          <expr_stmt><expr><call><name pos:line="1369" pos:column="11">applyNumericAffinity<pos:position pos:line="1369" pos:column="31"/></name><argument_list pos:line="1369" pos:column="31">(<argument><expr><name pos:line="1369" pos:column="32">pIn3<pos:position pos:line="1369" pos:column="36"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="1369" pos:column="37">0<pos:position pos:line="1369" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="1369" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1369" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="1370" pos:column="10"/></block></then></if>
      }<pos:position pos:line="1371" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="1372" pos:column="7">/* Handle the common case of integer comparison here, as an
      ** optimization, to avoid a call to sqlite3MemCompare() */</comment>
      <if pos:line="1374" pos:column="7">if<condition pos:line="1374" pos:column="9">( <expr><operator pos:line="1374" pos:column="11">(<pos:position pos:line="1374" pos:column="12"/></operator><name><name pos:line="1374" pos:column="12">pIn1<pos:position pos:line="1374" pos:column="16"/></name><operator pos:line="1374" pos:column="16">-&gt;<pos:position pos:line="1374" pos:column="21"/></operator><name pos:line="1374" pos:column="18">flags<pos:position pos:line="1374" pos:column="23"/></name></name> <operator pos:line="1374" pos:column="24">&amp;<pos:position pos:line="1374" pos:column="29"/></operator> <name><name pos:line="1374" pos:column="26">pIn3<pos:position pos:line="1374" pos:column="30"/></name><operator pos:line="1374" pos:column="30">-&gt;<pos:position pos:line="1374" pos:column="35"/></operator><name pos:line="1374" pos:column="32">flags<pos:position pos:line="1374" pos:column="37"/></name></name> <operator pos:line="1374" pos:column="38">&amp;<pos:position pos:line="1374" pos:column="43"/></operator> <name pos:line="1374" pos:column="40">MEM_Int<pos:position pos:line="1374" pos:column="47"/></name><operator pos:line="1374" pos:column="47">)<pos:position pos:line="1374" pos:column="48"/></operator><operator pos:line="1374" pos:column="48">!=<pos:position pos:line="1374" pos:column="50"/></operator><literal type="number" pos:line="1374" pos:column="50">0<pos:position pos:line="1374" pos:column="51"/></literal></expr> )<pos:position pos:line="1374" pos:column="53"/></condition><then><block pos:line="1374" pos:column="53">{
        <if pos:line="1375" pos:column="9">if<condition pos:line="1375" pos:column="11">( <expr><name><name pos:line="1375" pos:column="13">pIn3<pos:position pos:line="1375" pos:column="17"/></name><operator pos:line="1375" pos:column="17">-&gt;<pos:position pos:line="1375" pos:column="22"/></operator><name pos:line="1375" pos:column="19">u<pos:position pos:line="1375" pos:column="20"/></name><operator pos:line="1375" pos:column="20">.<pos:position pos:line="1375" pos:column="21"/></operator><name pos:line="1375" pos:column="21">i<pos:position pos:line="1375" pos:column="22"/></name></name> <operator pos:line="1375" pos:column="23">&gt;<pos:position pos:line="1375" pos:column="27"/></operator> <name><name pos:line="1375" pos:column="25">pIn1<pos:position pos:line="1375" pos:column="29"/></name><operator pos:line="1375" pos:column="29">-&gt;<pos:position pos:line="1375" pos:column="34"/></operator><name pos:line="1375" pos:column="31">u<pos:position pos:line="1375" pos:column="32"/></name><operator pos:line="1375" pos:column="32">.<pos:position pos:line="1375" pos:column="33"/></operator><name pos:line="1375" pos:column="33">i<pos:position pos:line="1375" pos:column="34"/></name></name></expr> )<pos:position pos:line="1375" pos:column="36"/></condition><then><block pos:line="1375" pos:column="36">{ <expr_stmt><expr><name pos:line="1375" pos:column="38">res<pos:position pos:line="1375" pos:column="41"/></name> <operator pos:line="1375" pos:column="42">=<pos:position pos:line="1375" pos:column="43"/></operator> <operator pos:line="1375" pos:column="44">+<pos:position pos:line="1375" pos:column="45"/></operator><literal type="number" pos:line="1375" pos:column="45">1<pos:position pos:line="1375" pos:column="46"/></literal></expr>;<pos:position pos:line="1375" pos:column="47"/></expr_stmt> <goto pos:line="1375" pos:column="48">goto <name pos:line="1375" pos:column="53">compare_op<pos:position pos:line="1375" pos:column="63"/></name>;<pos:position pos:line="1375" pos:column="64"/></goto> }<pos:position pos:line="1375" pos:column="66"/></block></then></if>
        <if pos:line="1376" pos:column="9">if<condition pos:line="1376" pos:column="11">( <expr><name><name pos:line="1376" pos:column="13">pIn3<pos:position pos:line="1376" pos:column="17"/></name><operator pos:line="1376" pos:column="17">-&gt;<pos:position pos:line="1376" pos:column="22"/></operator><name pos:line="1376" pos:column="19">u<pos:position pos:line="1376" pos:column="20"/></name><operator pos:line="1376" pos:column="20">.<pos:position pos:line="1376" pos:column="21"/></operator><name pos:line="1376" pos:column="21">i<pos:position pos:line="1376" pos:column="22"/></name></name> <operator pos:line="1376" pos:column="23">&lt;<pos:position pos:line="1376" pos:column="27"/></operator> <name><name pos:line="1376" pos:column="25">pIn1<pos:position pos:line="1376" pos:column="29"/></name><operator pos:line="1376" pos:column="29">-&gt;<pos:position pos:line="1376" pos:column="34"/></operator><name pos:line="1376" pos:column="31">u<pos:position pos:line="1376" pos:column="32"/></name><operator pos:line="1376" pos:column="32">.<pos:position pos:line="1376" pos:column="33"/></operator><name pos:line="1376" pos:column="33">i<pos:position pos:line="1376" pos:column="34"/></name></name></expr> )<pos:position pos:line="1376" pos:column="36"/></condition><then><block pos:line="1376" pos:column="36">{ <expr_stmt><expr><name pos:line="1376" pos:column="38">res<pos:position pos:line="1376" pos:column="41"/></name> <operator pos:line="1376" pos:column="42">=<pos:position pos:line="1376" pos:column="43"/></operator> <operator pos:line="1376" pos:column="44">-<pos:position pos:line="1376" pos:column="45"/></operator><literal type="number" pos:line="1376" pos:column="45">1<pos:position pos:line="1376" pos:column="46"/></literal></expr>;<pos:position pos:line="1376" pos:column="47"/></expr_stmt> <goto pos:line="1376" pos:column="48">goto <name pos:line="1376" pos:column="53">compare_op<pos:position pos:line="1376" pos:column="63"/></name>;<pos:position pos:line="1376" pos:column="64"/></goto> }<pos:position pos:line="1376" pos:column="66"/></block></then></if>
        <expr_stmt><expr><name pos:line="1377" pos:column="9">res<pos:position pos:line="1377" pos:column="12"/></name> <operator pos:line="1377" pos:column="13">=<pos:position pos:line="1377" pos:column="14"/></operator> <literal type="number" pos:line="1377" pos:column="15">0<pos:position pos:line="1377" pos:column="16"/></literal></expr>;<pos:position pos:line="1377" pos:column="17"/></expr_stmt>
        <goto pos:line="1378" pos:column="9">goto <name pos:line="1378" pos:column="14">compare_op<pos:position pos:line="1378" pos:column="24"/></name>;<pos:position pos:line="1378" pos:column="25"/></goto>
      }<pos:position pos:line="1379" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1380" pos:column="6"/></block></then><elseif pos:line="1380" pos:column="6">else <if pos:line="1380" pos:column="11">if<condition pos:line="1380" pos:column="13">( <expr><name pos:line="1380" pos:column="15">affinity<pos:position pos:line="1380" pos:column="23"/></name><operator pos:line="1380" pos:column="23">==<pos:position pos:line="1380" pos:column="25"/></operator><name pos:line="1380" pos:column="25">SQLITE_AFF_TEXT<pos:position pos:line="1380" pos:column="40"/></name></expr> )<pos:position pos:line="1380" pos:column="42"/></condition><then><block pos:line="1380" pos:column="42">{
      <if pos:line="1381" pos:column="7">if<condition pos:line="1381" pos:column="9">( <expr><operator pos:line="1381" pos:column="11">(<pos:position pos:line="1381" pos:column="12"/></operator><name pos:line="1381" pos:column="12">flags1<pos:position pos:line="1381" pos:column="18"/></name> <operator pos:line="1381" pos:column="19">&amp;<pos:position pos:line="1381" pos:column="24"/></operator> <name pos:line="1381" pos:column="21">MEM_Str<pos:position pos:line="1381" pos:column="28"/></name><operator pos:line="1381" pos:column="28">)<pos:position pos:line="1381" pos:column="29"/></operator><operator pos:line="1381" pos:column="29">==<pos:position pos:line="1381" pos:column="31"/></operator><literal type="number" pos:line="1381" pos:column="31">0<pos:position pos:line="1381" pos:column="32"/></literal> <operator pos:line="1381" pos:column="33">&amp;&amp;<pos:position pos:line="1381" pos:column="43"/></operator> <operator pos:line="1381" pos:column="36">(<pos:position pos:line="1381" pos:column="37"/></operator><name pos:line="1381" pos:column="37">flags1<pos:position pos:line="1381" pos:column="43"/></name> <operator pos:line="1381" pos:column="44">&amp;<pos:position pos:line="1381" pos:column="49"/></operator> <operator pos:line="1381" pos:column="46">(<pos:position pos:line="1381" pos:column="47"/></operator><name pos:line="1381" pos:column="47">MEM_Int<pos:position pos:line="1381" pos:column="54"/></name><operator pos:line="1381" pos:column="54">|<pos:position pos:line="1381" pos:column="55"/></operator><name pos:line="1381" pos:column="55">MEM_Real<pos:position pos:line="1381" pos:column="63"/></name><operator pos:line="1381" pos:column="63">)<pos:position pos:line="1381" pos:column="64"/></operator><operator pos:line="1381" pos:column="64">)<pos:position pos:line="1381" pos:column="65"/></operator><operator pos:line="1381" pos:column="65">!=<pos:position pos:line="1381" pos:column="67"/></operator><literal type="number" pos:line="1381" pos:column="67">0<pos:position pos:line="1381" pos:column="68"/></literal></expr> )<pos:position pos:line="1381" pos:column="70"/></condition><then><block pos:line="1381" pos:column="70">{
        <expr_stmt><expr><call><name pos:line="1382" pos:column="9">testcase<pos:position pos:line="1382" pos:column="17"/></name><argument_list pos:line="1382" pos:column="17">( <argument><expr><name><name pos:line="1382" pos:column="19">pIn1<pos:position pos:line="1382" pos:column="23"/></name><operator pos:line="1382" pos:column="23">-&gt;<pos:position pos:line="1382" pos:column="28"/></operator><name pos:line="1382" pos:column="25">flags<pos:position pos:line="1382" pos:column="30"/></name></name> <operator pos:line="1382" pos:column="31">&amp;<pos:position pos:line="1382" pos:column="36"/></operator> <name pos:line="1382" pos:column="33">MEM_Int<pos:position pos:line="1382" pos:column="40"/></name></expr></argument> )<pos:position pos:line="1382" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1382" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1383" pos:column="9">testcase<pos:position pos:line="1383" pos:column="17"/></name><argument_list pos:line="1383" pos:column="17">( <argument><expr><name><name pos:line="1383" pos:column="19">pIn1<pos:position pos:line="1383" pos:column="23"/></name><operator pos:line="1383" pos:column="23">-&gt;<pos:position pos:line="1383" pos:column="28"/></operator><name pos:line="1383" pos:column="25">flags<pos:position pos:line="1383" pos:column="30"/></name></name> <operator pos:line="1383" pos:column="31">&amp;<pos:position pos:line="1383" pos:column="36"/></operator> <name pos:line="1383" pos:column="33">MEM_Real<pos:position pos:line="1383" pos:column="41"/></name></expr></argument> )<pos:position pos:line="1383" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1383" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1384" pos:column="9">sqlite3VdbeMemStringify<pos:position pos:line="1384" pos:column="32"/></name><argument_list pos:line="1384" pos:column="32">(<argument><expr><name pos:line="1384" pos:column="33">pIn1<pos:position pos:line="1384" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="1384" pos:column="39">encoding<pos:position pos:line="1384" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1384" pos:column="49">1<pos:position pos:line="1384" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="1384" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1384" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1385" pos:column="9">testcase<pos:position pos:line="1385" pos:column="17"/></name><argument_list pos:line="1385" pos:column="17">( <argument><expr><operator pos:line="1385" pos:column="19">(<pos:position pos:line="1385" pos:column="20"/></operator><name pos:line="1385" pos:column="20">flags1<pos:position pos:line="1385" pos:column="26"/></name><operator pos:line="1385" pos:column="26">&amp;<pos:position pos:line="1385" pos:column="31"/></operator><name pos:line="1385" pos:column="27">MEM_Dyn<pos:position pos:line="1385" pos:column="34"/></name><operator pos:line="1385" pos:column="34">)<pos:position pos:line="1385" pos:column="35"/></operator> <operator pos:line="1385" pos:column="36">!=<pos:position pos:line="1385" pos:column="38"/></operator> <operator pos:line="1385" pos:column="39">(<pos:position pos:line="1385" pos:column="40"/></operator><name><name pos:line="1385" pos:column="40">pIn1<pos:position pos:line="1385" pos:column="44"/></name><operator pos:line="1385" pos:column="44">-&gt;<pos:position pos:line="1385" pos:column="49"/></operator><name pos:line="1385" pos:column="46">flags<pos:position pos:line="1385" pos:column="51"/></name></name><operator pos:line="1385" pos:column="51">&amp;<pos:position pos:line="1385" pos:column="56"/></operator><name pos:line="1385" pos:column="52">MEM_Dyn<pos:position pos:line="1385" pos:column="59"/></name><operator pos:line="1385" pos:column="59">)<pos:position pos:line="1385" pos:column="60"/></operator></expr></argument> )<pos:position pos:line="1385" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="1385" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1386" pos:column="9">flags1<pos:position pos:line="1386" pos:column="15"/></name> <operator pos:line="1386" pos:column="16">=<pos:position pos:line="1386" pos:column="17"/></operator> <operator pos:line="1386" pos:column="18">(<pos:position pos:line="1386" pos:column="19"/></operator><name><name pos:line="1386" pos:column="19">pIn1<pos:position pos:line="1386" pos:column="23"/></name><operator pos:line="1386" pos:column="23">-&gt;<pos:position pos:line="1386" pos:column="28"/></operator><name pos:line="1386" pos:column="25">flags<pos:position pos:line="1386" pos:column="30"/></name></name> <operator pos:line="1386" pos:column="31">&amp;<pos:position pos:line="1386" pos:column="36"/></operator> <operator pos:line="1386" pos:column="33">~<pos:position pos:line="1386" pos:column="34"/></operator><name pos:line="1386" pos:column="34">MEM_TypeMask<pos:position pos:line="1386" pos:column="46"/></name><operator pos:line="1386" pos:column="46">)<pos:position pos:line="1386" pos:column="47"/></operator> <operator pos:line="1386" pos:column="48">|<pos:position pos:line="1386" pos:column="49"/></operator> <operator pos:line="1386" pos:column="50">(<pos:position pos:line="1386" pos:column="51"/></operator><name pos:line="1386" pos:column="51">flags1<pos:position pos:line="1386" pos:column="57"/></name> <operator pos:line="1386" pos:column="58">&amp;<pos:position pos:line="1386" pos:column="63"/></operator> <name pos:line="1386" pos:column="60">MEM_TypeMask<pos:position pos:line="1386" pos:column="72"/></name><operator pos:line="1386" pos:column="72">)<pos:position pos:line="1386" pos:column="73"/></operator></expr>;<pos:position pos:line="1386" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1387" pos:column="9">assert<pos:position pos:line="1387" pos:column="15"/></name><argument_list pos:line="1387" pos:column="15">( <argument><expr><name pos:line="1387" pos:column="17">pIn1<pos:position pos:line="1387" pos:column="21"/></name><operator pos:line="1387" pos:column="21">!=<pos:position pos:line="1387" pos:column="23"/></operator><name pos:line="1387" pos:column="23">pIn3<pos:position pos:line="1387" pos:column="27"/></name></expr></argument> )<pos:position pos:line="1387" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="1387" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="1388" pos:column="8"/></block></then></if>
      <if pos:line="1389" pos:column="7">if<condition pos:line="1389" pos:column="9">( <expr><operator pos:line="1389" pos:column="11">(<pos:position pos:line="1389" pos:column="12"/></operator><name pos:line="1389" pos:column="12">flags3<pos:position pos:line="1389" pos:column="18"/></name> <operator pos:line="1389" pos:column="19">&amp;<pos:position pos:line="1389" pos:column="24"/></operator> <name pos:line="1389" pos:column="21">MEM_Str<pos:position pos:line="1389" pos:column="28"/></name><operator pos:line="1389" pos:column="28">)<pos:position pos:line="1389" pos:column="29"/></operator><operator pos:line="1389" pos:column="29">==<pos:position pos:line="1389" pos:column="31"/></operator><literal type="number" pos:line="1389" pos:column="31">0<pos:position pos:line="1389" pos:column="32"/></literal> <operator pos:line="1389" pos:column="33">&amp;&amp;<pos:position pos:line="1389" pos:column="43"/></operator> <operator pos:line="1389" pos:column="36">(<pos:position pos:line="1389" pos:column="37"/></operator><name pos:line="1389" pos:column="37">flags3<pos:position pos:line="1389" pos:column="43"/></name> <operator pos:line="1389" pos:column="44">&amp;<pos:position pos:line="1389" pos:column="49"/></operator> <operator pos:line="1389" pos:column="46">(<pos:position pos:line="1389" pos:column="47"/></operator><name pos:line="1389" pos:column="47">MEM_Int<pos:position pos:line="1389" pos:column="54"/></name><operator pos:line="1389" pos:column="54">|<pos:position pos:line="1389" pos:column="55"/></operator><name pos:line="1389" pos:column="55">MEM_Real<pos:position pos:line="1389" pos:column="63"/></name><operator pos:line="1389" pos:column="63">)<pos:position pos:line="1389" pos:column="64"/></operator><operator pos:line="1389" pos:column="64">)<pos:position pos:line="1389" pos:column="65"/></operator><operator pos:line="1389" pos:column="65">!=<pos:position pos:line="1389" pos:column="67"/></operator><literal type="number" pos:line="1389" pos:column="67">0<pos:position pos:line="1389" pos:column="68"/></literal></expr> )<pos:position pos:line="1389" pos:column="70"/></condition><then><block pos:line="1389" pos:column="70">{
        <expr_stmt><expr><call><name pos:line="1390" pos:column="9">testcase<pos:position pos:line="1390" pos:column="17"/></name><argument_list pos:line="1390" pos:column="17">( <argument><expr><name><name pos:line="1390" pos:column="19">pIn3<pos:position pos:line="1390" pos:column="23"/></name><operator pos:line="1390" pos:column="23">-&gt;<pos:position pos:line="1390" pos:column="28"/></operator><name pos:line="1390" pos:column="25">flags<pos:position pos:line="1390" pos:column="30"/></name></name> <operator pos:line="1390" pos:column="31">&amp;<pos:position pos:line="1390" pos:column="36"/></operator> <name pos:line="1390" pos:column="33">MEM_Int<pos:position pos:line="1390" pos:column="40"/></name></expr></argument> )<pos:position pos:line="1390" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1390" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1391" pos:column="9">testcase<pos:position pos:line="1391" pos:column="17"/></name><argument_list pos:line="1391" pos:column="17">( <argument><expr><name><name pos:line="1391" pos:column="19">pIn3<pos:position pos:line="1391" pos:column="23"/></name><operator pos:line="1391" pos:column="23">-&gt;<pos:position pos:line="1391" pos:column="28"/></operator><name pos:line="1391" pos:column="25">flags<pos:position pos:line="1391" pos:column="30"/></name></name> <operator pos:line="1391" pos:column="31">&amp;<pos:position pos:line="1391" pos:column="36"/></operator> <name pos:line="1391" pos:column="33">MEM_Real<pos:position pos:line="1391" pos:column="41"/></name></expr></argument> )<pos:position pos:line="1391" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1391" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1392" pos:column="9">sqlite3VdbeMemStringify<pos:position pos:line="1392" pos:column="32"/></name><argument_list pos:line="1392" pos:column="32">(<argument><expr><name pos:line="1392" pos:column="33">pIn3<pos:position pos:line="1392" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="1392" pos:column="39">encoding<pos:position pos:line="1392" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1392" pos:column="49">1<pos:position pos:line="1392" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="1392" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1392" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1393" pos:column="9">testcase<pos:position pos:line="1393" pos:column="17"/></name><argument_list pos:line="1393" pos:column="17">( <argument><expr><operator pos:line="1393" pos:column="19">(<pos:position pos:line="1393" pos:column="20"/></operator><name pos:line="1393" pos:column="20">flags3<pos:position pos:line="1393" pos:column="26"/></name><operator pos:line="1393" pos:column="26">&amp;<pos:position pos:line="1393" pos:column="31"/></operator><name pos:line="1393" pos:column="27">MEM_Dyn<pos:position pos:line="1393" pos:column="34"/></name><operator pos:line="1393" pos:column="34">)<pos:position pos:line="1393" pos:column="35"/></operator> <operator pos:line="1393" pos:column="36">!=<pos:position pos:line="1393" pos:column="38"/></operator> <operator pos:line="1393" pos:column="39">(<pos:position pos:line="1393" pos:column="40"/></operator><name><name pos:line="1393" pos:column="40">pIn3<pos:position pos:line="1393" pos:column="44"/></name><operator pos:line="1393" pos:column="44">-&gt;<pos:position pos:line="1393" pos:column="49"/></operator><name pos:line="1393" pos:column="46">flags<pos:position pos:line="1393" pos:column="51"/></name></name><operator pos:line="1393" pos:column="51">&amp;<pos:position pos:line="1393" pos:column="56"/></operator><name pos:line="1393" pos:column="52">MEM_Dyn<pos:position pos:line="1393" pos:column="59"/></name><operator pos:line="1393" pos:column="59">)<pos:position pos:line="1393" pos:column="60"/></operator></expr></argument> )<pos:position pos:line="1393" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="1393" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1394" pos:column="9">flags3<pos:position pos:line="1394" pos:column="15"/></name> <operator pos:line="1394" pos:column="16">=<pos:position pos:line="1394" pos:column="17"/></operator> <operator pos:line="1394" pos:column="18">(<pos:position pos:line="1394" pos:column="19"/></operator><name><name pos:line="1394" pos:column="19">pIn3<pos:position pos:line="1394" pos:column="23"/></name><operator pos:line="1394" pos:column="23">-&gt;<pos:position pos:line="1394" pos:column="28"/></operator><name pos:line="1394" pos:column="25">flags<pos:position pos:line="1394" pos:column="30"/></name></name> <operator pos:line="1394" pos:column="31">&amp;<pos:position pos:line="1394" pos:column="36"/></operator> <operator pos:line="1394" pos:column="33">~<pos:position pos:line="1394" pos:column="34"/></operator><name pos:line="1394" pos:column="34">MEM_TypeMask<pos:position pos:line="1394" pos:column="46"/></name><operator pos:line="1394" pos:column="46">)<pos:position pos:line="1394" pos:column="47"/></operator> <operator pos:line="1394" pos:column="48">|<pos:position pos:line="1394" pos:column="49"/></operator> <operator pos:line="1394" pos:column="50">(<pos:position pos:line="1394" pos:column="51"/></operator><name pos:line="1394" pos:column="51">flags3<pos:position pos:line="1394" pos:column="57"/></name> <operator pos:line="1394" pos:column="58">&amp;<pos:position pos:line="1394" pos:column="63"/></operator> <name pos:line="1394" pos:column="60">MEM_TypeMask<pos:position pos:line="1394" pos:column="72"/></name><operator pos:line="1394" pos:column="72">)<pos:position pos:line="1394" pos:column="73"/></operator></expr>;<pos:position pos:line="1394" pos:column="74"/></expr_stmt>
      }<pos:position pos:line="1395" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1396" pos:column="6"/></block></then></if></elseif></if>
    <expr_stmt><expr><call><name pos:line="1397" pos:column="5">assert<pos:position pos:line="1397" pos:column="11"/></name><argument_list pos:line="1397" pos:column="11">( <argument><expr><name><name pos:line="1397" pos:column="13">pOp<pos:position pos:line="1397" pos:column="16"/></name><operator pos:line="1397" pos:column="16">-&gt;<pos:position pos:line="1397" pos:column="21"/></operator><name pos:line="1397" pos:column="18">p4type<pos:position pos:line="1397" pos:column="24"/></name></name><operator pos:line="1397" pos:column="24">==<pos:position pos:line="1397" pos:column="26"/></operator><name pos:line="1397" pos:column="26">P4_COLLSEQ<pos:position pos:line="1397" pos:column="36"/></name> <operator pos:line="1397" pos:column="37">||<pos:position pos:line="1397" pos:column="39"/></operator> <name><name pos:line="1397" pos:column="40">pOp<pos:position pos:line="1397" pos:column="43"/></name><operator pos:line="1397" pos:column="43">-&gt;<pos:position pos:line="1397" pos:column="48"/></operator><name pos:line="1397" pos:column="45">p4<pos:position pos:line="1397" pos:column="47"/></name><operator pos:line="1397" pos:column="47">.<pos:position pos:line="1397" pos:column="48"/></operator><name pos:line="1397" pos:column="48">pColl<pos:position pos:line="1397" pos:column="53"/></name></name><operator pos:line="1397" pos:column="53">==<pos:position pos:line="1397" pos:column="55"/></operator><literal type="number" pos:line="1397" pos:column="55">0<pos:position pos:line="1397" pos:column="56"/></literal></expr></argument> )<pos:position pos:line="1397" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1397" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1398" pos:column="5">res<pos:position pos:line="1398" pos:column="8"/></name> <operator pos:line="1398" pos:column="9">=<pos:position pos:line="1398" pos:column="10"/></operator> <call><name pos:line="1398" pos:column="11">sqlite3MemCompare<pos:position pos:line="1398" pos:column="28"/></name><argument_list pos:line="1398" pos:column="28">(<argument><expr><name pos:line="1398" pos:column="29">pIn3<pos:position pos:line="1398" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1398" pos:column="35">pIn1<pos:position pos:line="1398" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="1398" pos:column="41">pOp<pos:position pos:line="1398" pos:column="44"/></name><operator pos:line="1398" pos:column="44">-&gt;<pos:position pos:line="1398" pos:column="49"/></operator><name pos:line="1398" pos:column="46">p4<pos:position pos:line="1398" pos:column="48"/></name><operator pos:line="1398" pos:column="48">.<pos:position pos:line="1398" pos:column="49"/></operator><name pos:line="1398" pos:column="49">pColl<pos:position pos:line="1398" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="1398" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1398" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="1399" pos:column="4"/></block></else></if>
<label><name pos:line="1400" pos:column="1">compare_op<pos:position pos:line="1400" pos:column="11"/></name>:<pos:position pos:line="1400" pos:column="12"/></label>
  <comment type="block" pos:line="1401" pos:column="3">/* At this point, res is negative, zero, or positive if reg[P1] is
  ** less than, equal to, or greater than reg[P3], respectively.  Compute
  ** the answer to this operator in res2, depending on what the comparison
  ** operator actually is.  The next block of code depends on the fact
  ** that the 6 comparison operators are consecutive integers in this
  ** order:  NE, EQ, GT, LE, LT, GE */</comment>
  <expr_stmt><expr><call><name pos:line="1407" pos:column="3">assert<pos:position pos:line="1407" pos:column="9"/></name><argument_list pos:line="1407" pos:column="9">( <argument><expr><name pos:line="1407" pos:column="11">OP_Eq<pos:position pos:line="1407" pos:column="16"/></name><operator pos:line="1407" pos:column="16">==<pos:position pos:line="1407" pos:column="18"/></operator><name pos:line="1407" pos:column="18">OP_Ne<pos:position pos:line="1407" pos:column="23"/></name><operator pos:line="1407" pos:column="23">+<pos:position pos:line="1407" pos:column="24"/></operator><literal type="number" pos:line="1407" pos:column="24">1<pos:position pos:line="1407" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="1407" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1407" pos:column="28"/></expr_stmt> <expr_stmt><expr><call><name pos:line="1407" pos:column="29">assert<pos:position pos:line="1407" pos:column="35"/></name><argument_list pos:line="1407" pos:column="35">( <argument><expr><name pos:line="1407" pos:column="37">OP_Gt<pos:position pos:line="1407" pos:column="42"/></name><operator pos:line="1407" pos:column="42">==<pos:position pos:line="1407" pos:column="44"/></operator><name pos:line="1407" pos:column="44">OP_Ne<pos:position pos:line="1407" pos:column="49"/></name><operator pos:line="1407" pos:column="49">+<pos:position pos:line="1407" pos:column="50"/></operator><literal type="number" pos:line="1407" pos:column="50">2<pos:position pos:line="1407" pos:column="51"/></literal></expr></argument> )<pos:position pos:line="1407" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1407" pos:column="54"/></expr_stmt> <expr_stmt><expr><call><name pos:line="1407" pos:column="55">assert<pos:position pos:line="1407" pos:column="61"/></name><argument_list pos:line="1407" pos:column="61">( <argument><expr><name pos:line="1407" pos:column="63">OP_Le<pos:position pos:line="1407" pos:column="68"/></name><operator pos:line="1407" pos:column="68">==<pos:position pos:line="1407" pos:column="70"/></operator><name pos:line="1407" pos:column="70">OP_Ne<pos:position pos:line="1407" pos:column="75"/></name><operator pos:line="1407" pos:column="75">+<pos:position pos:line="1407" pos:column="76"/></operator><literal type="number" pos:line="1407" pos:column="76">3<pos:position pos:line="1407" pos:column="77"/></literal></expr></argument> )<pos:position pos:line="1407" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="1407" pos:column="80"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1408" pos:column="3">assert<pos:position pos:line="1408" pos:column="9"/></name><argument_list pos:line="1408" pos:column="9">( <argument><expr><name pos:line="1408" pos:column="11">OP_Lt<pos:position pos:line="1408" pos:column="16"/></name><operator pos:line="1408" pos:column="16">==<pos:position pos:line="1408" pos:column="18"/></operator><name pos:line="1408" pos:column="18">OP_Ne<pos:position pos:line="1408" pos:column="23"/></name><operator pos:line="1408" pos:column="23">+<pos:position pos:line="1408" pos:column="24"/></operator><literal type="number" pos:line="1408" pos:column="24">4<pos:position pos:line="1408" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="1408" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1408" pos:column="28"/></expr_stmt> <expr_stmt><expr><call><name pos:line="1408" pos:column="29">assert<pos:position pos:line="1408" pos:column="35"/></name><argument_list pos:line="1408" pos:column="35">( <argument><expr><name pos:line="1408" pos:column="37">OP_Ge<pos:position pos:line="1408" pos:column="42"/></name><operator pos:line="1408" pos:column="42">==<pos:position pos:line="1408" pos:column="44"/></operator><name pos:line="1408" pos:column="44">OP_Ne<pos:position pos:line="1408" pos:column="49"/></name><operator pos:line="1408" pos:column="49">+<pos:position pos:line="1408" pos:column="50"/></operator><literal type="number" pos:line="1408" pos:column="50">5<pos:position pos:line="1408" pos:column="51"/></literal></expr></argument> )<pos:position pos:line="1408" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1408" pos:column="54"/></expr_stmt>
  <if pos:line="1409" pos:column="3">if<condition pos:line="1409" pos:column="5">( <expr><name pos:line="1409" pos:column="7">res<pos:position pos:line="1409" pos:column="10"/></name><operator pos:line="1409" pos:column="10">&lt;<pos:position pos:line="1409" pos:column="14"/></operator><literal type="number" pos:line="1409" pos:column="11">0<pos:position pos:line="1409" pos:column="12"/></literal></expr> )<pos:position pos:line="1409" pos:column="14"/></condition><then><block pos:line="1409" pos:column="14">{                        <comment type="block" pos:line="1409" pos:column="39">/* ne, eq, gt, le, lt, ge */</comment>
    <decl_stmt><decl><specifier pos:line="1410" pos:column="5">static<pos:position pos:line="1410" pos:column="11"/></specifier> <type><specifier pos:line="1410" pos:column="12">const<pos:position pos:line="1410" pos:column="17"/></specifier> <name pos:line="1410" pos:column="18">unsigned<pos:position pos:line="1410" pos:column="26"/></name> <name pos:line="1410" pos:column="27">char<pos:position pos:line="1410" pos:column="31"/></name></type> <name><name pos:line="1410" pos:column="32">aLTb<pos:position pos:line="1410" pos:column="36"/></name><index pos:line="1410" pos:column="36">[]<pos:position pos:line="1410" pos:column="38"/></index></name> <init pos:line="1410" pos:column="39">= <expr><block pos:line="1410" pos:column="41">{ <expr><literal type="number" pos:line="1410" pos:column="43">1<pos:position pos:line="1410" pos:column="44"/></literal></expr>,  <expr><literal type="number" pos:line="1410" pos:column="47">0<pos:position pos:line="1410" pos:column="48"/></literal></expr>,  <expr><literal type="number" pos:line="1410" pos:column="51">0<pos:position pos:line="1410" pos:column="52"/></literal></expr>,  <expr><literal type="number" pos:line="1410" pos:column="55">1<pos:position pos:line="1410" pos:column="56"/></literal></expr>,  <expr><literal type="number" pos:line="1410" pos:column="59">1<pos:position pos:line="1410" pos:column="60"/></literal></expr>,  <expr><literal type="number" pos:line="1410" pos:column="63">0<pos:position pos:line="1410" pos:column="64"/></literal></expr> }<pos:position pos:line="1410" pos:column="66"/></block></expr></init></decl>;<pos:position pos:line="1410" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><name pos:line="1411" pos:column="5">res2<pos:position pos:line="1411" pos:column="9"/></name> <operator pos:line="1411" pos:column="10">=<pos:position pos:line="1411" pos:column="11"/></operator> <name><name pos:line="1411" pos:column="12">aLTb<pos:position pos:line="1411" pos:column="16"/></name><index pos:line="1411" pos:column="16">[<expr><name><name pos:line="1411" pos:column="17">pOp<pos:position pos:line="1411" pos:column="20"/></name><operator pos:line="1411" pos:column="20">-&gt;<pos:position pos:line="1411" pos:column="25"/></operator><name pos:line="1411" pos:column="22">opcode<pos:position pos:line="1411" pos:column="28"/></name></name> <operator pos:line="1411" pos:column="29">-<pos:position pos:line="1411" pos:column="30"/></operator> <name pos:line="1411" pos:column="31">OP_Ne<pos:position pos:line="1411" pos:column="36"/></name></expr>]<pos:position pos:line="1411" pos:column="37"/></index></name></expr>;<pos:position pos:line="1411" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="1412" pos:column="4"/></block></then><elseif pos:line="1412" pos:column="4">else <if pos:line="1412" pos:column="9">if<condition pos:line="1412" pos:column="11">( <expr><name pos:line="1412" pos:column="13">res<pos:position pos:line="1412" pos:column="16"/></name><operator pos:line="1412" pos:column="16">==<pos:position pos:line="1412" pos:column="18"/></operator><literal type="number" pos:line="1412" pos:column="18">0<pos:position pos:line="1412" pos:column="19"/></literal></expr> )<pos:position pos:line="1412" pos:column="21"/></condition><then><block pos:line="1412" pos:column="21">{
    <decl_stmt><decl><specifier pos:line="1413" pos:column="5">static<pos:position pos:line="1413" pos:column="11"/></specifier> <type><specifier pos:line="1413" pos:column="12">const<pos:position pos:line="1413" pos:column="17"/></specifier> <name pos:line="1413" pos:column="18">unsigned<pos:position pos:line="1413" pos:column="26"/></name> <name pos:line="1413" pos:column="27">char<pos:position pos:line="1413" pos:column="31"/></name></type> <name><name pos:line="1413" pos:column="32">aEQb<pos:position pos:line="1413" pos:column="36"/></name><index pos:line="1413" pos:column="36">[]<pos:position pos:line="1413" pos:column="38"/></index></name> <init pos:line="1413" pos:column="39">= <expr><block pos:line="1413" pos:column="41">{ <expr><literal type="number" pos:line="1413" pos:column="43">0<pos:position pos:line="1413" pos:column="44"/></literal></expr>,  <expr><literal type="number" pos:line="1413" pos:column="47">1<pos:position pos:line="1413" pos:column="48"/></literal></expr>,  <expr><literal type="number" pos:line="1413" pos:column="51">0<pos:position pos:line="1413" pos:column="52"/></literal></expr>,  <expr><literal type="number" pos:line="1413" pos:column="55">1<pos:position pos:line="1413" pos:column="56"/></literal></expr>,  <expr><literal type="number" pos:line="1413" pos:column="59">0<pos:position pos:line="1413" pos:column="60"/></literal></expr>,  <expr><literal type="number" pos:line="1413" pos:column="63">1<pos:position pos:line="1413" pos:column="64"/></literal></expr> }<pos:position pos:line="1413" pos:column="66"/></block></expr></init></decl>;<pos:position pos:line="1413" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><name pos:line="1414" pos:column="5">res2<pos:position pos:line="1414" pos:column="9"/></name> <operator pos:line="1414" pos:column="10">=<pos:position pos:line="1414" pos:column="11"/></operator> <name><name pos:line="1414" pos:column="12">aEQb<pos:position pos:line="1414" pos:column="16"/></name><index pos:line="1414" pos:column="16">[<expr><name><name pos:line="1414" pos:column="17">pOp<pos:position pos:line="1414" pos:column="20"/></name><operator pos:line="1414" pos:column="20">-&gt;<pos:position pos:line="1414" pos:column="25"/></operator><name pos:line="1414" pos:column="22">opcode<pos:position pos:line="1414" pos:column="28"/></name></name> <operator pos:line="1414" pos:column="29">-<pos:position pos:line="1414" pos:column="30"/></operator> <name pos:line="1414" pos:column="31">OP_Ne<pos:position pos:line="1414" pos:column="36"/></name></expr>]<pos:position pos:line="1414" pos:column="37"/></index></name></expr>;<pos:position pos:line="1414" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="1415" pos:column="4"/></block></then></if></elseif><else pos:line="1415" pos:column="4">else<block pos:line="1415" pos:column="8">{
    <decl_stmt><decl><specifier pos:line="1416" pos:column="5">static<pos:position pos:line="1416" pos:column="11"/></specifier> <type><specifier pos:line="1416" pos:column="12">const<pos:position pos:line="1416" pos:column="17"/></specifier> <name pos:line="1416" pos:column="18">unsigned<pos:position pos:line="1416" pos:column="26"/></name> <name pos:line="1416" pos:column="27">char<pos:position pos:line="1416" pos:column="31"/></name></type> <name><name pos:line="1416" pos:column="32">aGTb<pos:position pos:line="1416" pos:column="36"/></name><index pos:line="1416" pos:column="36">[]<pos:position pos:line="1416" pos:column="38"/></index></name> <init pos:line="1416" pos:column="39">= <expr><block pos:line="1416" pos:column="41">{ <expr><literal type="number" pos:line="1416" pos:column="43">1<pos:position pos:line="1416" pos:column="44"/></literal></expr>,  <expr><literal type="number" pos:line="1416" pos:column="47">0<pos:position pos:line="1416" pos:column="48"/></literal></expr>,  <expr><literal type="number" pos:line="1416" pos:column="51">1<pos:position pos:line="1416" pos:column="52"/></literal></expr>,  <expr><literal type="number" pos:line="1416" pos:column="55">0<pos:position pos:line="1416" pos:column="56"/></literal></expr>,  <expr><literal type="number" pos:line="1416" pos:column="59">0<pos:position pos:line="1416" pos:column="60"/></literal></expr>,  <expr><literal type="number" pos:line="1416" pos:column="63">1<pos:position pos:line="1416" pos:column="64"/></literal></expr> }<pos:position pos:line="1416" pos:column="66"/></block></expr></init></decl>;<pos:position pos:line="1416" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><name pos:line="1417" pos:column="5">res2<pos:position pos:line="1417" pos:column="9"/></name> <operator pos:line="1417" pos:column="10">=<pos:position pos:line="1417" pos:column="11"/></operator> <name><name pos:line="1417" pos:column="12">aGTb<pos:position pos:line="1417" pos:column="16"/></name><index pos:line="1417" pos:column="16">[<expr><name><name pos:line="1417" pos:column="17">pOp<pos:position pos:line="1417" pos:column="20"/></name><operator pos:line="1417" pos:column="20">-&gt;<pos:position pos:line="1417" pos:column="25"/></operator><name pos:line="1417" pos:column="22">opcode<pos:position pos:line="1417" pos:column="28"/></name></name> <operator pos:line="1417" pos:column="29">-<pos:position pos:line="1417" pos:column="30"/></operator> <name pos:line="1417" pos:column="31">OP_Ne<pos:position pos:line="1417" pos:column="36"/></name></expr>]<pos:position pos:line="1417" pos:column="37"/></index></name></expr>;<pos:position pos:line="1417" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="1418" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="1420" pos:column="3">/* Undo any changes made by applyAffinity() to the input registers. */</comment>
  <expr_stmt><expr><call><name pos:line="1421" pos:column="3">assert<pos:position pos:line="1421" pos:column="9"/></name><argument_list pos:line="1421" pos:column="9">( <argument><expr><operator pos:line="1421" pos:column="11">(<pos:position pos:line="1421" pos:column="12"/></operator><name><name pos:line="1421" pos:column="12">pIn1<pos:position pos:line="1421" pos:column="16"/></name><operator pos:line="1421" pos:column="16">-&gt;<pos:position pos:line="1421" pos:column="21"/></operator><name pos:line="1421" pos:column="18">flags<pos:position pos:line="1421" pos:column="23"/></name></name> <operator pos:line="1421" pos:column="24">&amp;<pos:position pos:line="1421" pos:column="29"/></operator> <name pos:line="1421" pos:column="26">MEM_Dyn<pos:position pos:line="1421" pos:column="33"/></name><operator pos:line="1421" pos:column="33">)<pos:position pos:line="1421" pos:column="34"/></operator> <operator pos:line="1421" pos:column="35">==<pos:position pos:line="1421" pos:column="37"/></operator> <operator pos:line="1421" pos:column="38">(<pos:position pos:line="1421" pos:column="39"/></operator><name pos:line="1421" pos:column="39">flags1<pos:position pos:line="1421" pos:column="45"/></name> <operator pos:line="1421" pos:column="46">&amp;<pos:position pos:line="1421" pos:column="51"/></operator> <name pos:line="1421" pos:column="48">MEM_Dyn<pos:position pos:line="1421" pos:column="55"/></name><operator pos:line="1421" pos:column="55">)<pos:position pos:line="1421" pos:column="56"/></operator></expr></argument> )<pos:position pos:line="1421" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1421" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1422" pos:column="3">pIn1<pos:position pos:line="1422" pos:column="7"/></name><operator pos:line="1422" pos:column="7">-&gt;<pos:position pos:line="1422" pos:column="12"/></operator><name pos:line="1422" pos:column="9">flags<pos:position pos:line="1422" pos:column="14"/></name></name> <operator pos:line="1422" pos:column="15">=<pos:position pos:line="1422" pos:column="16"/></operator> <name pos:line="1422" pos:column="17">flags1<pos:position pos:line="1422" pos:column="23"/></name></expr>;<pos:position pos:line="1422" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1423" pos:column="3">assert<pos:position pos:line="1423" pos:column="9"/></name><argument_list pos:line="1423" pos:column="9">( <argument><expr><operator pos:line="1423" pos:column="11">(<pos:position pos:line="1423" pos:column="12"/></operator><name><name pos:line="1423" pos:column="12">pIn3<pos:position pos:line="1423" pos:column="16"/></name><operator pos:line="1423" pos:column="16">-&gt;<pos:position pos:line="1423" pos:column="21"/></operator><name pos:line="1423" pos:column="18">flags<pos:position pos:line="1423" pos:column="23"/></name></name> <operator pos:line="1423" pos:column="24">&amp;<pos:position pos:line="1423" pos:column="29"/></operator> <name pos:line="1423" pos:column="26">MEM_Dyn<pos:position pos:line="1423" pos:column="33"/></name><operator pos:line="1423" pos:column="33">)<pos:position pos:line="1423" pos:column="34"/></operator> <operator pos:line="1423" pos:column="35">==<pos:position pos:line="1423" pos:column="37"/></operator> <operator pos:line="1423" pos:column="38">(<pos:position pos:line="1423" pos:column="39"/></operator><name pos:line="1423" pos:column="39">flags3<pos:position pos:line="1423" pos:column="45"/></name> <operator pos:line="1423" pos:column="46">&amp;<pos:position pos:line="1423" pos:column="51"/></operator> <name pos:line="1423" pos:column="48">MEM_Dyn<pos:position pos:line="1423" pos:column="55"/></name><operator pos:line="1423" pos:column="55">)<pos:position pos:line="1423" pos:column="56"/></operator></expr></argument> )<pos:position pos:line="1423" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1423" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1424" pos:column="3">pIn3<pos:position pos:line="1424" pos:column="7"/></name><operator pos:line="1424" pos:column="7">-&gt;<pos:position pos:line="1424" pos:column="12"/></operator><name pos:line="1424" pos:column="9">flags<pos:position pos:line="1424" pos:column="14"/></name></name> <operator pos:line="1424" pos:column="15">=<pos:position pos:line="1424" pos:column="16"/></operator> <name pos:line="1424" pos:column="17">flags3<pos:position pos:line="1424" pos:column="23"/></name></expr>;<pos:position pos:line="1424" pos:column="24"/></expr_stmt>

  <if pos:line="1426" pos:column="3">if<condition pos:line="1426" pos:column="5">( <expr><name><name pos:line="1426" pos:column="7">pOp<pos:position pos:line="1426" pos:column="10"/></name><operator pos:line="1426" pos:column="10">-&gt;<pos:position pos:line="1426" pos:column="15"/></operator><name pos:line="1426" pos:column="12">p5<pos:position pos:line="1426" pos:column="14"/></name></name> <operator pos:line="1426" pos:column="15">&amp;<pos:position pos:line="1426" pos:column="20"/></operator> <name pos:line="1426" pos:column="17">SQLITE_STOREP2<pos:position pos:line="1426" pos:column="31"/></name></expr> )<pos:position pos:line="1426" pos:column="33"/></condition><then><block pos:line="1426" pos:column="33">{
    <expr_stmt><expr><name pos:line="1427" pos:column="5">pOut<pos:position pos:line="1427" pos:column="9"/></name> <operator pos:line="1427" pos:column="10">=<pos:position pos:line="1427" pos:column="11"/></operator> <operator pos:line="1427" pos:column="12">&amp;<pos:position pos:line="1427" pos:column="17"/></operator><name><name pos:line="1427" pos:column="13">aMem<pos:position pos:line="1427" pos:column="17"/></name><index pos:line="1427" pos:column="17">[<expr><name><name pos:line="1427" pos:column="18">pOp<pos:position pos:line="1427" pos:column="21"/></name><operator pos:line="1427" pos:column="21">-&gt;<pos:position pos:line="1427" pos:column="26"/></operator><name pos:line="1427" pos:column="23">p2<pos:position pos:line="1427" pos:column="25"/></name></name></expr>]<pos:position pos:line="1427" pos:column="26"/></index></name></expr>;<pos:position pos:line="1427" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1428" pos:column="5">iCompare<pos:position pos:line="1428" pos:column="13"/></name> <operator pos:line="1428" pos:column="14">=<pos:position pos:line="1428" pos:column="15"/></operator> <name pos:line="1428" pos:column="16">res<pos:position pos:line="1428" pos:column="19"/></name></expr>;<pos:position pos:line="1428" pos:column="20"/></expr_stmt>
    <if pos:line="1429" pos:column="5">if<condition pos:line="1429" pos:column="7">( <expr><operator pos:line="1429" pos:column="9">(<pos:position pos:line="1429" pos:column="10"/></operator><name><name pos:line="1429" pos:column="10">pOp<pos:position pos:line="1429" pos:column="13"/></name><operator pos:line="1429" pos:column="13">-&gt;<pos:position pos:line="1429" pos:column="18"/></operator><name pos:line="1429" pos:column="15">p5<pos:position pos:line="1429" pos:column="17"/></name></name> <operator pos:line="1429" pos:column="18">&amp;<pos:position pos:line="1429" pos:column="23"/></operator> <name pos:line="1429" pos:column="20">SQLITE_KEEPNULL<pos:position pos:line="1429" pos:column="35"/></name><operator pos:line="1429" pos:column="35">)<pos:position pos:line="1429" pos:column="36"/></operator><operator pos:line="1429" pos:column="36">!=<pos:position pos:line="1429" pos:column="38"/></operator><literal type="number" pos:line="1429" pos:column="38">0<pos:position pos:line="1429" pos:column="39"/></literal></expr> )<pos:position pos:line="1429" pos:column="41"/></condition><then><block pos:line="1429" pos:column="41">{
      <comment type="block" pos:line="1430" pos:column="7">/* The KEEPNULL flag prevents OP_Eq from overwriting a NULL with 1
      ** and prevents OP_Ne from overwriting NULL with 0.  This flag
      ** is only used in contexts where either:
      **   (1) op==OP_Eq &amp;&amp; (r[P2]==NULL || r[P2]==0)
      **   (2) op==OP_Ne &amp;&amp; (r[P2]==NULL || r[P2]==1)
      ** Therefore it is not necessary to check the content of r[P2] for
      ** NULL. */</comment>
      <expr_stmt><expr><call><name pos:line="1437" pos:column="7">assert<pos:position pos:line="1437" pos:column="13"/></name><argument_list pos:line="1437" pos:column="13">( <argument><expr><name><name pos:line="1437" pos:column="15">pOp<pos:position pos:line="1437" pos:column="18"/></name><operator pos:line="1437" pos:column="18">-&gt;<pos:position pos:line="1437" pos:column="23"/></operator><name pos:line="1437" pos:column="20">opcode<pos:position pos:line="1437" pos:column="26"/></name></name><operator pos:line="1437" pos:column="26">==<pos:position pos:line="1437" pos:column="28"/></operator><name pos:line="1437" pos:column="28">OP_Ne<pos:position pos:line="1437" pos:column="33"/></name> <operator pos:line="1437" pos:column="34">||<pos:position pos:line="1437" pos:column="36"/></operator> <name><name pos:line="1437" pos:column="37">pOp<pos:position pos:line="1437" pos:column="40"/></name><operator pos:line="1437" pos:column="40">-&gt;<pos:position pos:line="1437" pos:column="45"/></operator><name pos:line="1437" pos:column="42">opcode<pos:position pos:line="1437" pos:column="48"/></name></name><operator pos:line="1437" pos:column="48">==<pos:position pos:line="1437" pos:column="50"/></operator><name pos:line="1437" pos:column="50">OP_Eq<pos:position pos:line="1437" pos:column="55"/></name></expr></argument> )<pos:position pos:line="1437" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1437" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1438" pos:column="7">assert<pos:position pos:line="1438" pos:column="13"/></name><argument_list pos:line="1438" pos:column="13">( <argument><expr><name pos:line="1438" pos:column="15">res2<pos:position pos:line="1438" pos:column="19"/></name><operator pos:line="1438" pos:column="19">==<pos:position pos:line="1438" pos:column="21"/></operator><literal type="number" pos:line="1438" pos:column="21">0<pos:position pos:line="1438" pos:column="22"/></literal> <operator pos:line="1438" pos:column="23">||<pos:position pos:line="1438" pos:column="25"/></operator> <name pos:line="1438" pos:column="26">res2<pos:position pos:line="1438" pos:column="30"/></name><operator pos:line="1438" pos:column="30">==<pos:position pos:line="1438" pos:column="32"/></operator><literal type="number" pos:line="1438" pos:column="32">1<pos:position pos:line="1438" pos:column="33"/></literal></expr></argument> )<pos:position pos:line="1438" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1438" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1439" pos:column="7">testcase<pos:position pos:line="1439" pos:column="15"/></name><argument_list pos:line="1439" pos:column="15">( <argument><expr><name pos:line="1439" pos:column="17">res2<pos:position pos:line="1439" pos:column="21"/></name><operator pos:line="1439" pos:column="21">==<pos:position pos:line="1439" pos:column="23"/></operator><literal type="number" pos:line="1439" pos:column="23">0<pos:position pos:line="1439" pos:column="24"/></literal> <operator pos:line="1439" pos:column="25">&amp;&amp;<pos:position pos:line="1439" pos:column="35"/></operator> <name><name pos:line="1439" pos:column="28">pOp<pos:position pos:line="1439" pos:column="31"/></name><operator pos:line="1439" pos:column="31">-&gt;<pos:position pos:line="1439" pos:column="36"/></operator><name pos:line="1439" pos:column="33">opcode<pos:position pos:line="1439" pos:column="39"/></name></name><operator pos:line="1439" pos:column="39">==<pos:position pos:line="1439" pos:column="41"/></operator><name pos:line="1439" pos:column="41">OP_Eq<pos:position pos:line="1439" pos:column="46"/></name></expr></argument> )<pos:position pos:line="1439" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1439" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1440" pos:column="7">testcase<pos:position pos:line="1440" pos:column="15"/></name><argument_list pos:line="1440" pos:column="15">( <argument><expr><name pos:line="1440" pos:column="17">res2<pos:position pos:line="1440" pos:column="21"/></name><operator pos:line="1440" pos:column="21">==<pos:position pos:line="1440" pos:column="23"/></operator><literal type="number" pos:line="1440" pos:column="23">1<pos:position pos:line="1440" pos:column="24"/></literal> <operator pos:line="1440" pos:column="25">&amp;&amp;<pos:position pos:line="1440" pos:column="35"/></operator> <name><name pos:line="1440" pos:column="28">pOp<pos:position pos:line="1440" pos:column="31"/></name><operator pos:line="1440" pos:column="31">-&gt;<pos:position pos:line="1440" pos:column="36"/></operator><name pos:line="1440" pos:column="33">opcode<pos:position pos:line="1440" pos:column="39"/></name></name><operator pos:line="1440" pos:column="39">==<pos:position pos:line="1440" pos:column="41"/></operator><name pos:line="1440" pos:column="41">OP_Eq<pos:position pos:line="1440" pos:column="46"/></name></expr></argument> )<pos:position pos:line="1440" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1440" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1441" pos:column="7">testcase<pos:position pos:line="1441" pos:column="15"/></name><argument_list pos:line="1441" pos:column="15">( <argument><expr><name pos:line="1441" pos:column="17">res2<pos:position pos:line="1441" pos:column="21"/></name><operator pos:line="1441" pos:column="21">==<pos:position pos:line="1441" pos:column="23"/></operator><literal type="number" pos:line="1441" pos:column="23">0<pos:position pos:line="1441" pos:column="24"/></literal> <operator pos:line="1441" pos:column="25">&amp;&amp;<pos:position pos:line="1441" pos:column="35"/></operator> <name><name pos:line="1441" pos:column="28">pOp<pos:position pos:line="1441" pos:column="31"/></name><operator pos:line="1441" pos:column="31">-&gt;<pos:position pos:line="1441" pos:column="36"/></operator><name pos:line="1441" pos:column="33">opcode<pos:position pos:line="1441" pos:column="39"/></name></name><operator pos:line="1441" pos:column="39">==<pos:position pos:line="1441" pos:column="41"/></operator><name pos:line="1441" pos:column="41">OP_Ne<pos:position pos:line="1441" pos:column="46"/></name></expr></argument> )<pos:position pos:line="1441" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1441" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1442" pos:column="7">testcase<pos:position pos:line="1442" pos:column="15"/></name><argument_list pos:line="1442" pos:column="15">( <argument><expr><name pos:line="1442" pos:column="17">res2<pos:position pos:line="1442" pos:column="21"/></name><operator pos:line="1442" pos:column="21">==<pos:position pos:line="1442" pos:column="23"/></operator><literal type="number" pos:line="1442" pos:column="23">1<pos:position pos:line="1442" pos:column="24"/></literal> <operator pos:line="1442" pos:column="25">&amp;&amp;<pos:position pos:line="1442" pos:column="35"/></operator> <name><name pos:line="1442" pos:column="28">pOp<pos:position pos:line="1442" pos:column="31"/></name><operator pos:line="1442" pos:column="31">-&gt;<pos:position pos:line="1442" pos:column="36"/></operator><name pos:line="1442" pos:column="33">opcode<pos:position pos:line="1442" pos:column="39"/></name></name><operator pos:line="1442" pos:column="39">==<pos:position pos:line="1442" pos:column="41"/></operator><name pos:line="1442" pos:column="41">OP_Ne<pos:position pos:line="1442" pos:column="46"/></name></expr></argument> )<pos:position pos:line="1442" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1442" pos:column="49"/></expr_stmt>
      <if pos:line="1443" pos:column="7">if<condition pos:line="1443" pos:column="9">( <expr><operator pos:line="1443" pos:column="11">(<pos:position pos:line="1443" pos:column="12"/></operator><name><name pos:line="1443" pos:column="12">pOp<pos:position pos:line="1443" pos:column="15"/></name><operator pos:line="1443" pos:column="15">-&gt;<pos:position pos:line="1443" pos:column="20"/></operator><name pos:line="1443" pos:column="17">opcode<pos:position pos:line="1443" pos:column="23"/></name></name><operator pos:line="1443" pos:column="23">==<pos:position pos:line="1443" pos:column="25"/></operator><name pos:line="1443" pos:column="25">OP_Eq<pos:position pos:line="1443" pos:column="30"/></name><operator pos:line="1443" pos:column="30">)<pos:position pos:line="1443" pos:column="31"/></operator><operator pos:line="1443" pos:column="31">==<pos:position pos:line="1443" pos:column="33"/></operator><name pos:line="1443" pos:column="33">res2<pos:position pos:line="1443" pos:column="37"/></name></expr> )<pos:position pos:line="1443" pos:column="39"/></condition><then pos:line="1443" pos:column="39"> <block type="pseudo"><break pos:line="1443" pos:column="40">break;<pos:position pos:line="1443" pos:column="46"/></break></block></then></if>
    }<pos:position pos:line="1444" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="1445" pos:column="5">memAboutToChange<pos:position pos:line="1445" pos:column="21"/></name><argument_list pos:line="1445" pos:column="21">(<argument><expr><name pos:line="1445" pos:column="22">p<pos:position pos:line="1445" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1445" pos:column="25">pOut<pos:position pos:line="1445" pos:column="29"/></name></expr></argument>)<pos:position pos:line="1445" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1445" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1446" pos:column="5">MemSetTypeFlag<pos:position pos:line="1446" pos:column="19"/></name><argument_list pos:line="1446" pos:column="19">(<argument><expr><name pos:line="1446" pos:column="20">pOut<pos:position pos:line="1446" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1446" pos:column="26">MEM_Int<pos:position pos:line="1446" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1446" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1446" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1447" pos:column="5">pOut<pos:position pos:line="1447" pos:column="9"/></name><operator pos:line="1447" pos:column="9">-&gt;<pos:position pos:line="1447" pos:column="14"/></operator><name pos:line="1447" pos:column="11">u<pos:position pos:line="1447" pos:column="12"/></name><operator pos:line="1447" pos:column="12">.<pos:position pos:line="1447" pos:column="13"/></operator><name pos:line="1447" pos:column="13">i<pos:position pos:line="1447" pos:column="14"/></name></name> <operator pos:line="1447" pos:column="15">=<pos:position pos:line="1447" pos:column="16"/></operator> <name pos:line="1447" pos:column="17">res2<pos:position pos:line="1447" pos:column="21"/></name></expr>;<pos:position pos:line="1447" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1448" pos:column="5">REGISTER_TRACE<pos:position pos:line="1448" pos:column="19"/></name><argument_list pos:line="1448" pos:column="19">(<argument><expr><name><name pos:line="1448" pos:column="20">pOp<pos:position pos:line="1448" pos:column="23"/></name><operator pos:line="1448" pos:column="23">-&gt;<pos:position pos:line="1448" pos:column="28"/></operator><name pos:line="1448" pos:column="25">p2<pos:position pos:line="1448" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="1448" pos:column="29">pOut<pos:position pos:line="1448" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1448" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1448" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="1449" pos:column="4"/></block></then><else pos:line="1449" pos:column="4">else<block pos:line="1449" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="1450" pos:column="5">VdbeBranchTaken<pos:position pos:line="1450" pos:column="20"/></name><argument_list pos:line="1450" pos:column="20">(<argument><expr><name pos:line="1450" pos:column="21">res<pos:position pos:line="1450" pos:column="24"/></name><operator pos:line="1450" pos:column="24">!=<pos:position pos:line="1450" pos:column="26"/></operator><literal type="number" pos:line="1450" pos:column="26">0<pos:position pos:line="1450" pos:column="27"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="1450" pos:column="29">(<pos:position pos:line="1450" pos:column="30"/></operator><name><name pos:line="1450" pos:column="30">pOp<pos:position pos:line="1450" pos:column="33"/></name><operator pos:line="1450" pos:column="33">-&gt;<pos:position pos:line="1450" pos:column="38"/></operator><name pos:line="1450" pos:column="35">p5<pos:position pos:line="1450" pos:column="37"/></name></name> <operator pos:line="1450" pos:column="38">&amp;<pos:position pos:line="1450" pos:column="43"/></operator> <name pos:line="1450" pos:column="40">SQLITE_NULLEQ<pos:position pos:line="1450" pos:column="53"/></name><operator pos:line="1450" pos:column="53">)<pos:position pos:line="1450" pos:column="54"/></operator></expr>?<pos:position pos:line="1450" pos:column="55"/></condition><then><expr><literal type="number" pos:line="1450" pos:column="55">2<pos:position pos:line="1450" pos:column="56"/></literal></expr></then><else pos:line="1450" pos:column="56">:<expr><literal type="number" pos:line="1450" pos:column="57">3<pos:position pos:line="1450" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="1450" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1450" pos:column="60"/></expr_stmt>
    <if pos:line="1451" pos:column="5">if<condition pos:line="1451" pos:column="7">( <expr><name pos:line="1451" pos:column="9">res2<pos:position pos:line="1451" pos:column="13"/></name></expr> )<pos:position pos:line="1451" pos:column="15"/></condition><then><block pos:line="1451" pos:column="15">{
      <goto pos:line="1452" pos:column="7">goto <name pos:line="1452" pos:column="12">jump_to_p2<pos:position pos:line="1452" pos:column="22"/></name>;<pos:position pos:line="1452" pos:column="23"/></goto>
    }<pos:position pos:line="1453" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1454" pos:column="4"/></block></else></if>
  <break pos:line="1455" pos:column="3">break;<pos:position pos:line="1455" pos:column="9"/></break>
}<pos:position pos:line="1456" pos:column="2"/></block>

<comment type="block" pos:line="1458" pos:column="1">/* Opcode: ElseNotEq * P2 * * *
**
** This opcode must immediately follow an OP_Lt or OP_Gt comparison operator.
** If result of an OP_Eq comparison on the same two operands
** would have be NULL or false (0), then then jump to P2. 
** If the result of an OP_Eq comparison on the two previous operands
** would have been true (1), then fall through.
*/</comment>
<case pos:line="1466" pos:column="1">case <expr><name pos:line="1466" pos:column="6">OP_ElseNotEq<pos:position pos:line="1466" pos:column="18"/></name></expr>:<pos:position pos:line="1466" pos:column="19"/></case> <block pos:line="1466" pos:column="20">{       <comment type="block" pos:line="1466" pos:column="28">/* same as TK_ESCAPE, jump */</comment>
  <expr_stmt><expr><call><name pos:line="1467" pos:column="3">assert<pos:position pos:line="1467" pos:column="9"/></name><argument_list pos:line="1467" pos:column="9">( <argument><expr><name pos:line="1467" pos:column="11">pOp<pos:position pos:line="1467" pos:column="14"/></name><operator pos:line="1467" pos:column="14">&gt;<pos:position pos:line="1467" pos:column="18"/></operator><name pos:line="1467" pos:column="15">aOp<pos:position pos:line="1467" pos:column="18"/></name></expr></argument> )<pos:position pos:line="1467" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="1467" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1468" pos:column="3">assert<pos:position pos:line="1468" pos:column="9"/></name><argument_list pos:line="1468" pos:column="9">( <argument><expr><name><name pos:line="1468" pos:column="11">pOp<pos:position pos:line="1468" pos:column="14"/></name><index pos:line="1468" pos:column="14">[<expr><operator pos:line="1468" pos:column="15">-<pos:position pos:line="1468" pos:column="16"/></operator><literal type="number" pos:line="1468" pos:column="16">1<pos:position pos:line="1468" pos:column="17"/></literal></expr>]<pos:position pos:line="1468" pos:column="18"/></index></name><operator pos:line="1468" pos:column="18">.<pos:position pos:line="1468" pos:column="19"/></operator><name pos:line="1468" pos:column="19">opcode<pos:position pos:line="1468" pos:column="25"/></name><operator pos:line="1468" pos:column="25">==<pos:position pos:line="1468" pos:column="27"/></operator><name pos:line="1468" pos:column="27">OP_Lt<pos:position pos:line="1468" pos:column="32"/></name> <operator pos:line="1468" pos:column="33">||<pos:position pos:line="1468" pos:column="35"/></operator> <name><name pos:line="1468" pos:column="36">pOp<pos:position pos:line="1468" pos:column="39"/></name><index pos:line="1468" pos:column="39">[<expr><operator pos:line="1468" pos:column="40">-<pos:position pos:line="1468" pos:column="41"/></operator><literal type="number" pos:line="1468" pos:column="41">1<pos:position pos:line="1468" pos:column="42"/></literal></expr>]<pos:position pos:line="1468" pos:column="43"/></index></name><operator pos:line="1468" pos:column="43">.<pos:position pos:line="1468" pos:column="44"/></operator><name pos:line="1468" pos:column="44">opcode<pos:position pos:line="1468" pos:column="50"/></name><operator pos:line="1468" pos:column="50">==<pos:position pos:line="1468" pos:column="52"/></operator><name pos:line="1468" pos:column="52">OP_Gt<pos:position pos:line="1468" pos:column="57"/></name></expr></argument> )<pos:position pos:line="1468" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1468" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1469" pos:column="3">assert<pos:position pos:line="1469" pos:column="9"/></name><argument_list pos:line="1469" pos:column="9">( <argument><expr><name><name pos:line="1469" pos:column="11">pOp<pos:position pos:line="1469" pos:column="14"/></name><index pos:line="1469" pos:column="14">[<expr><operator pos:line="1469" pos:column="15">-<pos:position pos:line="1469" pos:column="16"/></operator><literal type="number" pos:line="1469" pos:column="16">1<pos:position pos:line="1469" pos:column="17"/></literal></expr>]<pos:position pos:line="1469" pos:column="18"/></index></name><operator pos:line="1469" pos:column="18">.<pos:position pos:line="1469" pos:column="19"/></operator><name pos:line="1469" pos:column="19">p5<pos:position pos:line="1469" pos:column="21"/></name> <operator pos:line="1469" pos:column="22">&amp;<pos:position pos:line="1469" pos:column="27"/></operator> <name pos:line="1469" pos:column="24">SQLITE_STOREP2<pos:position pos:line="1469" pos:column="38"/></name></expr></argument> )<pos:position pos:line="1469" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1469" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1470" pos:column="3">VdbeBranchTaken<pos:position pos:line="1470" pos:column="18"/></name><argument_list pos:line="1470" pos:column="18">(<argument><expr><name pos:line="1470" pos:column="19">iCompare<pos:position pos:line="1470" pos:column="27"/></name><operator pos:line="1470" pos:column="27">!=<pos:position pos:line="1470" pos:column="29"/></operator><literal type="number" pos:line="1470" pos:column="29">0<pos:position pos:line="1470" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1470" pos:column="32">2<pos:position pos:line="1470" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="1470" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1470" pos:column="35"/></expr_stmt>
  <if pos:line="1471" pos:column="3">if<condition pos:line="1471" pos:column="5">( <expr><name pos:line="1471" pos:column="7">iCompare<pos:position pos:line="1471" pos:column="15"/></name><operator pos:line="1471" pos:column="15">!=<pos:position pos:line="1471" pos:column="17"/></operator><literal type="number" pos:line="1471" pos:column="17">0<pos:position pos:line="1471" pos:column="18"/></literal></expr> )<pos:position pos:line="1471" pos:column="20"/></condition><then pos:line="1471" pos:column="20"> <block type="pseudo"><goto pos:line="1471" pos:column="21">goto <name pos:line="1471" pos:column="26">jump_to_p2<pos:position pos:line="1471" pos:column="36"/></name>;<pos:position pos:line="1471" pos:column="37"/></goto></block></then></if>
  <break pos:line="1472" pos:column="3">break;<pos:position pos:line="1472" pos:column="9"/></break>
}<pos:position pos:line="1473" pos:column="2"/></block>


<comment type="block" pos:line="1476" pos:column="1">/* Opcode: Permutation * * * P4 *
**
** Set the permutation used by the OP_Compare operator in the next
** instruction.  The permutation is stored in the P4 operand.
**
** The permutation is only valid until the next OP_Compare that has
** the OPFLAG_PERMUTE bit set in P5. Typically the OP_Permutation should 
** occur immediately prior to the OP_Compare.
**
** The first integer in the P4 integer array is the length of the array
** and does not become part of the permutation.
*/</comment>
<case pos:line="1488" pos:column="1">case <expr><name pos:line="1488" pos:column="6">OP_Permutation<pos:position pos:line="1488" pos:column="20"/></name></expr>:<pos:position pos:line="1488" pos:column="21"/></case> <block pos:line="1488" pos:column="22">{
  <expr_stmt><expr><call><name pos:line="1489" pos:column="3">assert<pos:position pos:line="1489" pos:column="9"/></name><argument_list pos:line="1489" pos:column="9">( <argument><expr><name><name pos:line="1489" pos:column="11">pOp<pos:position pos:line="1489" pos:column="14"/></name><operator pos:line="1489" pos:column="14">-&gt;<pos:position pos:line="1489" pos:column="19"/></operator><name pos:line="1489" pos:column="16">p4type<pos:position pos:line="1489" pos:column="22"/></name></name><operator pos:line="1489" pos:column="22">==<pos:position pos:line="1489" pos:column="24"/></operator><name pos:line="1489" pos:column="24">P4_INTARRAY<pos:position pos:line="1489" pos:column="35"/></name></expr></argument> )<pos:position pos:line="1489" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1489" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1490" pos:column="3">assert<pos:position pos:line="1490" pos:column="9"/></name><argument_list pos:line="1490" pos:column="9">( <argument><expr><name><name pos:line="1490" pos:column="11">pOp<pos:position pos:line="1490" pos:column="14"/></name><operator pos:line="1490" pos:column="14">-&gt;<pos:position pos:line="1490" pos:column="19"/></operator><name pos:line="1490" pos:column="16">p4<pos:position pos:line="1490" pos:column="18"/></name><operator pos:line="1490" pos:column="18">.<pos:position pos:line="1490" pos:column="19"/></operator><name pos:line="1490" pos:column="19">ai<pos:position pos:line="1490" pos:column="21"/></name></name></expr></argument> )<pos:position pos:line="1490" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="1490" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1491" pos:column="3">assert<pos:position pos:line="1491" pos:column="9"/></name><argument_list pos:line="1491" pos:column="9">( <argument><expr><name><name pos:line="1491" pos:column="11">pOp<pos:position pos:line="1491" pos:column="14"/></name><index pos:line="1491" pos:column="14">[<expr><literal type="number" pos:line="1491" pos:column="15">1<pos:position pos:line="1491" pos:column="16"/></literal></expr>]<pos:position pos:line="1491" pos:column="17"/></index></name><operator pos:line="1491" pos:column="17">.<pos:position pos:line="1491" pos:column="18"/></operator><name pos:line="1491" pos:column="18">opcode<pos:position pos:line="1491" pos:column="24"/></name><operator pos:line="1491" pos:column="24">==<pos:position pos:line="1491" pos:column="26"/></operator><name pos:line="1491" pos:column="26">OP_Compare<pos:position pos:line="1491" pos:column="36"/></name></expr></argument> )<pos:position pos:line="1491" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1491" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1492" pos:column="3">assert<pos:position pos:line="1492" pos:column="9"/></name><argument_list pos:line="1492" pos:column="9">( <argument><expr><name><name pos:line="1492" pos:column="11">pOp<pos:position pos:line="1492" pos:column="14"/></name><index pos:line="1492" pos:column="14">[<expr><literal type="number" pos:line="1492" pos:column="15">1<pos:position pos:line="1492" pos:column="16"/></literal></expr>]<pos:position pos:line="1492" pos:column="17"/></index></name><operator pos:line="1492" pos:column="17">.<pos:position pos:line="1492" pos:column="18"/></operator><name pos:line="1492" pos:column="18">p5<pos:position pos:line="1492" pos:column="20"/></name> <operator pos:line="1492" pos:column="21">&amp;<pos:position pos:line="1492" pos:column="26"/></operator> <name pos:line="1492" pos:column="23">OPFLAG_PERMUTE<pos:position pos:line="1492" pos:column="37"/></name></expr></argument> )<pos:position pos:line="1492" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1492" pos:column="40"/></expr_stmt>
  <break pos:line="1493" pos:column="3">break;<pos:position pos:line="1493" pos:column="9"/></break>
}<pos:position pos:line="1494" pos:column="2"/></block>

<comment type="block" pos:line="1496" pos:column="1">/* Opcode: Compare P1 P2 P3 P4 P5
** Synopsis: r[P1@P3] &lt;-&gt; r[P2@P3]
**
** Compare two vectors of registers in reg(P1)..reg(P1+P3-1) (call this
** vector "A") and in reg(P2)..reg(P2+P3-1) ("B").  Save the result of
** the comparison for use by the next OP_Jump instruct.
**
** If P5 has the OPFLAG_PERMUTE bit set, then the order of comparison is
** determined by the most recent OP_Permutation operator.  If the
** OPFLAG_PERMUTE bit is clear, then register are compared in sequential
** order.
**
** P4 is a KeyInfo structure that defines collating sequences and sort
** orders for the comparison.  The permutation applies to registers
** only.  The KeyInfo elements are used sequentially.
**
** The comparison is a sort comparison, so NULLs compare equal,
** NULLs are less than numbers, numbers are less than strings,
** and strings are less than blobs.
*/</comment>
<case pos:line="1516" pos:column="1">case <expr><name pos:line="1516" pos:column="6">OP_Compare<pos:position pos:line="1516" pos:column="16"/></name></expr>:<pos:position pos:line="1516" pos:column="17"/></case> <block pos:line="1516" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="1517" pos:column="3">int<pos:position pos:line="1517" pos:column="6"/></name></type> <name pos:line="1517" pos:column="7">n<pos:position pos:line="1517" pos:column="8"/></name></decl>;<pos:position pos:line="1517" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1518" pos:column="3">int<pos:position pos:line="1518" pos:column="6"/></name></type> <name pos:line="1518" pos:column="7">i<pos:position pos:line="1518" pos:column="8"/></name></decl>;<pos:position pos:line="1518" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1519" pos:column="3">int<pos:position pos:line="1519" pos:column="6"/></name></type> <name pos:line="1519" pos:column="7">p1<pos:position pos:line="1519" pos:column="9"/></name></decl>;<pos:position pos:line="1519" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1520" pos:column="3">int<pos:position pos:line="1520" pos:column="6"/></name></type> <name pos:line="1520" pos:column="7">p2<pos:position pos:line="1520" pos:column="9"/></name></decl>;<pos:position pos:line="1520" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="1521" pos:column="3">const<pos:position pos:line="1521" pos:column="8"/></specifier> <name pos:line="1521" pos:column="9">KeyInfo<pos:position pos:line="1521" pos:column="16"/></name> <modifier pos:line="1521" pos:column="17">*<pos:position pos:line="1521" pos:column="18"/></modifier></type><name pos:line="1521" pos:column="18">pKeyInfo<pos:position pos:line="1521" pos:column="26"/></name></decl>;<pos:position pos:line="1521" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1522" pos:column="3">int<pos:position pos:line="1522" pos:column="6"/></name></type> <name pos:line="1522" pos:column="7">idx<pos:position pos:line="1522" pos:column="10"/></name></decl>;<pos:position pos:line="1522" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1523" pos:column="3">CollSeq<pos:position pos:line="1523" pos:column="10"/></name> <modifier pos:line="1523" pos:column="11">*<pos:position pos:line="1523" pos:column="12"/></modifier></type><name pos:line="1523" pos:column="12">pColl<pos:position pos:line="1523" pos:column="17"/></name></decl>;<pos:position pos:line="1523" pos:column="18"/></decl_stmt>    <comment type="block" pos:line="1523" pos:column="22">/* Collating sequence to use on this term */</comment>
  <decl_stmt><decl><type><name pos:line="1524" pos:column="3">int<pos:position pos:line="1524" pos:column="6"/></name></type> <name pos:line="1524" pos:column="7">bRev<pos:position pos:line="1524" pos:column="11"/></name></decl>;<pos:position pos:line="1524" pos:column="12"/></decl_stmt>          <comment type="block" pos:line="1524" pos:column="22">/* True for DESCENDING sort order */</comment>
  <decl_stmt><decl><type><name pos:line="1525" pos:column="3">int<pos:position pos:line="1525" pos:column="6"/></name> <modifier pos:line="1525" pos:column="7">*<pos:position pos:line="1525" pos:column="8"/></modifier></type><name pos:line="1525" pos:column="8">aPermute<pos:position pos:line="1525" pos:column="16"/></name></decl>;<pos:position pos:line="1525" pos:column="17"/></decl_stmt>     <comment type="block" pos:line="1525" pos:column="22">/* The permutation */</comment>

  <if pos:line="1527" pos:column="3">if<condition pos:line="1527" pos:column="5">( <expr><operator pos:line="1527" pos:column="7">(<pos:position pos:line="1527" pos:column="8"/></operator><name><name pos:line="1527" pos:column="8">pOp<pos:position pos:line="1527" pos:column="11"/></name><operator pos:line="1527" pos:column="11">-&gt;<pos:position pos:line="1527" pos:column="16"/></operator><name pos:line="1527" pos:column="13">p5<pos:position pos:line="1527" pos:column="15"/></name></name> <operator pos:line="1527" pos:column="16">&amp;<pos:position pos:line="1527" pos:column="21"/></operator> <name pos:line="1527" pos:column="18">OPFLAG_PERMUTE<pos:position pos:line="1527" pos:column="32"/></name><operator pos:line="1527" pos:column="32">)<pos:position pos:line="1527" pos:column="33"/></operator><operator pos:line="1527" pos:column="33">==<pos:position pos:line="1527" pos:column="35"/></operator><literal type="number" pos:line="1527" pos:column="35">0<pos:position pos:line="1527" pos:column="36"/></literal></expr> )<pos:position pos:line="1527" pos:column="38"/></condition><then><block pos:line="1527" pos:column="38">{
    <expr_stmt><expr><name pos:line="1528" pos:column="5">aPermute<pos:position pos:line="1528" pos:column="13"/></name> <operator pos:line="1528" pos:column="14">=<pos:position pos:line="1528" pos:column="15"/></operator> <literal type="number" pos:line="1528" pos:column="16">0<pos:position pos:line="1528" pos:column="17"/></literal></expr>;<pos:position pos:line="1528" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="1529" pos:column="4"/></block></then><else pos:line="1529" pos:column="4">else<block pos:line="1529" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="1530" pos:column="5">assert<pos:position pos:line="1530" pos:column="11"/></name><argument_list pos:line="1530" pos:column="11">( <argument><expr><name pos:line="1530" pos:column="13">pOp<pos:position pos:line="1530" pos:column="16"/></name><operator pos:line="1530" pos:column="16">&gt;<pos:position pos:line="1530" pos:column="20"/></operator><name pos:line="1530" pos:column="17">aOp<pos:position pos:line="1530" pos:column="20"/></name></expr></argument> )<pos:position pos:line="1530" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="1530" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1531" pos:column="5">assert<pos:position pos:line="1531" pos:column="11"/></name><argument_list pos:line="1531" pos:column="11">( <argument><expr><name><name pos:line="1531" pos:column="13">pOp<pos:position pos:line="1531" pos:column="16"/></name><index pos:line="1531" pos:column="16">[<expr><operator pos:line="1531" pos:column="17">-<pos:position pos:line="1531" pos:column="18"/></operator><literal type="number" pos:line="1531" pos:column="18">1<pos:position pos:line="1531" pos:column="19"/></literal></expr>]<pos:position pos:line="1531" pos:column="20"/></index></name><operator pos:line="1531" pos:column="20">.<pos:position pos:line="1531" pos:column="21"/></operator><name pos:line="1531" pos:column="21">opcode<pos:position pos:line="1531" pos:column="27"/></name><operator pos:line="1531" pos:column="27">==<pos:position pos:line="1531" pos:column="29"/></operator><name pos:line="1531" pos:column="29">OP_Permutation<pos:position pos:line="1531" pos:column="43"/></name></expr></argument> )<pos:position pos:line="1531" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1531" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1532" pos:column="5">assert<pos:position pos:line="1532" pos:column="11"/></name><argument_list pos:line="1532" pos:column="11">( <argument><expr><name><name pos:line="1532" pos:column="13">pOp<pos:position pos:line="1532" pos:column="16"/></name><index pos:line="1532" pos:column="16">[<expr><operator pos:line="1532" pos:column="17">-<pos:position pos:line="1532" pos:column="18"/></operator><literal type="number" pos:line="1532" pos:column="18">1<pos:position pos:line="1532" pos:column="19"/></literal></expr>]<pos:position pos:line="1532" pos:column="20"/></index></name><operator pos:line="1532" pos:column="20">.<pos:position pos:line="1532" pos:column="21"/></operator><name pos:line="1532" pos:column="21">p4type<pos:position pos:line="1532" pos:column="27"/></name><operator pos:line="1532" pos:column="27">==<pos:position pos:line="1532" pos:column="29"/></operator><name pos:line="1532" pos:column="29">P4_INTARRAY<pos:position pos:line="1532" pos:column="40"/></name></expr></argument> )<pos:position pos:line="1532" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1532" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1533" pos:column="5">aPermute<pos:position pos:line="1533" pos:column="13"/></name> <operator pos:line="1533" pos:column="14">=<pos:position pos:line="1533" pos:column="15"/></operator> <name><name pos:line="1533" pos:column="16">pOp<pos:position pos:line="1533" pos:column="19"/></name><index pos:line="1533" pos:column="19">[<expr><operator pos:line="1533" pos:column="20">-<pos:position pos:line="1533" pos:column="21"/></operator><literal type="number" pos:line="1533" pos:column="21">1<pos:position pos:line="1533" pos:column="22"/></literal></expr>]<pos:position pos:line="1533" pos:column="23"/></index></name><operator pos:line="1533" pos:column="23">.<pos:position pos:line="1533" pos:column="24"/></operator><name><name pos:line="1533" pos:column="24">p4<pos:position pos:line="1533" pos:column="26"/></name><operator pos:line="1533" pos:column="26">.<pos:position pos:line="1533" pos:column="27"/></operator><name pos:line="1533" pos:column="27">ai<pos:position pos:line="1533" pos:column="29"/></name></name> <operator pos:line="1533" pos:column="30">+<pos:position pos:line="1533" pos:column="31"/></operator> <literal type="number" pos:line="1533" pos:column="32">1<pos:position pos:line="1533" pos:column="33"/></literal></expr>;<pos:position pos:line="1533" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1534" pos:column="5">assert<pos:position pos:line="1534" pos:column="11"/></name><argument_list pos:line="1534" pos:column="11">( <argument><expr><name pos:line="1534" pos:column="13">aPermute<pos:position pos:line="1534" pos:column="21"/></name><operator pos:line="1534" pos:column="21">!=<pos:position pos:line="1534" pos:column="23"/></operator><literal type="number" pos:line="1534" pos:column="23">0<pos:position pos:line="1534" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="1534" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="1534" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="1535" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name pos:line="1536" pos:column="3">n<pos:position pos:line="1536" pos:column="4"/></name> <operator pos:line="1536" pos:column="5">=<pos:position pos:line="1536" pos:column="6"/></operator> <name><name pos:line="1536" pos:column="7">pOp<pos:position pos:line="1536" pos:column="10"/></name><operator pos:line="1536" pos:column="10">-&gt;<pos:position pos:line="1536" pos:column="15"/></operator><name pos:line="1536" pos:column="12">p3<pos:position pos:line="1536" pos:column="14"/></name></name></expr>;<pos:position pos:line="1536" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1537" pos:column="3">pKeyInfo<pos:position pos:line="1537" pos:column="11"/></name> <operator pos:line="1537" pos:column="12">=<pos:position pos:line="1537" pos:column="13"/></operator> <name><name pos:line="1537" pos:column="14">pOp<pos:position pos:line="1537" pos:column="17"/></name><operator pos:line="1537" pos:column="17">-&gt;<pos:position pos:line="1537" pos:column="22"/></operator><name pos:line="1537" pos:column="19">p4<pos:position pos:line="1537" pos:column="21"/></name><operator pos:line="1537" pos:column="21">.<pos:position pos:line="1537" pos:column="22"/></operator><name pos:line="1537" pos:column="22">pKeyInfo<pos:position pos:line="1537" pos:column="30"/></name></name></expr>;<pos:position pos:line="1537" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1538" pos:column="3">assert<pos:position pos:line="1538" pos:column="9"/></name><argument_list pos:line="1538" pos:column="9">( <argument><expr><name pos:line="1538" pos:column="11">n<pos:position pos:line="1538" pos:column="12"/></name><operator pos:line="1538" pos:column="12">&gt;<pos:position pos:line="1538" pos:column="16"/></operator><literal type="number" pos:line="1538" pos:column="13">0<pos:position pos:line="1538" pos:column="14"/></literal></expr></argument> )<pos:position pos:line="1538" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="1538" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1539" pos:column="3">assert<pos:position pos:line="1539" pos:column="9"/></name><argument_list pos:line="1539" pos:column="9">( <argument><expr><name pos:line="1539" pos:column="11">pKeyInfo<pos:position pos:line="1539" pos:column="19"/></name><operator pos:line="1539" pos:column="19">!=<pos:position pos:line="1539" pos:column="21"/></operator><literal type="number" pos:line="1539" pos:column="21">0<pos:position pos:line="1539" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="1539" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1539" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1540" pos:column="3">p1<pos:position pos:line="1540" pos:column="5"/></name> <operator pos:line="1540" pos:column="6">=<pos:position pos:line="1540" pos:column="7"/></operator> <name><name pos:line="1540" pos:column="8">pOp<pos:position pos:line="1540" pos:column="11"/></name><operator pos:line="1540" pos:column="11">-&gt;<pos:position pos:line="1540" pos:column="16"/></operator><name pos:line="1540" pos:column="13">p1<pos:position pos:line="1540" pos:column="15"/></name></name></expr>;<pos:position pos:line="1540" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1541" pos:column="3">p2<pos:position pos:line="1541" pos:column="5"/></name> <operator pos:line="1541" pos:column="6">=<pos:position pos:line="1541" pos:column="7"/></operator> <name><name pos:line="1541" pos:column="8">pOp<pos:position pos:line="1541" pos:column="11"/></name><operator pos:line="1541" pos:column="11">-&gt;<pos:position pos:line="1541" pos:column="16"/></operator><name pos:line="1541" pos:column="13">p2<pos:position pos:line="1541" pos:column="15"/></name></name></expr>;<pos:position pos:line="1541" pos:column="16"/></expr_stmt>
<cpp:ifdef pos:line="1542" pos:column="1">#<cpp:directive pos:line="1542" pos:column="2">ifdef<pos:position pos:line="1542" pos:column="7"/></cpp:directive> <name pos:line="1542" pos:column="8">SQLITE_DEBUG<pos:position pos:line="1542" pos:column="20"/></name></cpp:ifdef>
  <if pos:line="1543" pos:column="3">if<condition pos:line="1543" pos:column="5">( <expr><name pos:line="1543" pos:column="7">aPermute<pos:position pos:line="1543" pos:column="15"/></name></expr> )<pos:position pos:line="1543" pos:column="17"/></condition><then><block pos:line="1543" pos:column="17">{
    <decl_stmt><decl><type><name pos:line="1544" pos:column="5">int<pos:position pos:line="1544" pos:column="8"/></name></type> <name pos:line="1544" pos:column="9">k<pos:position pos:line="1544" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="1544" pos:column="12">mx<pos:position pos:line="1544" pos:column="14"/></name> <init pos:line="1544" pos:column="15">= <expr><literal type="number" pos:line="1544" pos:column="17">0<pos:position pos:line="1544" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="1544" pos:column="19"/></decl_stmt>
    <for pos:line="1545" pos:column="5">for<control pos:line="1545" pos:column="8">(<init><expr><name pos:line="1545" pos:column="9">k<pos:position pos:line="1545" pos:column="10"/></name><operator pos:line="1545" pos:column="10">=<pos:position pos:line="1545" pos:column="11"/></operator><literal type="number" pos:line="1545" pos:column="11">0<pos:position pos:line="1545" pos:column="12"/></literal></expr>;<pos:position pos:line="1545" pos:column="13"/></init> <condition><expr><name pos:line="1545" pos:column="14">k<pos:position pos:line="1545" pos:column="15"/></name><operator pos:line="1545" pos:column="15">&lt;<pos:position pos:line="1545" pos:column="19"/></operator><name pos:line="1545" pos:column="16">n<pos:position pos:line="1545" pos:column="17"/></name></expr>;<pos:position pos:line="1545" pos:column="18"/></condition> <incr><expr><name pos:line="1545" pos:column="19">k<pos:position pos:line="1545" pos:column="20"/></name><operator pos:line="1545" pos:column="20">++<pos:position pos:line="1545" pos:column="22"/></operator></expr></incr>)<pos:position pos:line="1545" pos:column="23"/></control> <block type="pseudo"><if pos:line="1545" pos:column="24">if<condition pos:line="1545" pos:column="26">( <expr><name><name pos:line="1545" pos:column="28">aPermute<pos:position pos:line="1545" pos:column="36"/></name><index pos:line="1545" pos:column="36">[<expr><name pos:line="1545" pos:column="37">k<pos:position pos:line="1545" pos:column="38"/></name></expr>]<pos:position pos:line="1545" pos:column="39"/></index></name><operator pos:line="1545" pos:column="39">&gt;<pos:position pos:line="1545" pos:column="43"/></operator><name pos:line="1545" pos:column="40">mx<pos:position pos:line="1545" pos:column="42"/></name></expr> )<pos:position pos:line="1545" pos:column="44"/></condition><then pos:line="1545" pos:column="44"> <block type="pseudo"><expr_stmt><expr><name pos:line="1545" pos:column="45">mx<pos:position pos:line="1545" pos:column="47"/></name> <operator pos:line="1545" pos:column="48">=<pos:position pos:line="1545" pos:column="49"/></operator> <name><name pos:line="1545" pos:column="50">aPermute<pos:position pos:line="1545" pos:column="58"/></name><index pos:line="1545" pos:column="58">[<expr><name pos:line="1545" pos:column="59">k<pos:position pos:line="1545" pos:column="60"/></name></expr>]<pos:position pos:line="1545" pos:column="61"/></index></name></expr>;<pos:position pos:line="1545" pos:column="62"/></expr_stmt></block></then></if></block></for>
    <expr_stmt><expr><call><name pos:line="1546" pos:column="5">assert<pos:position pos:line="1546" pos:column="11"/></name><argument_list pos:line="1546" pos:column="11">( <argument><expr><name pos:line="1546" pos:column="13">p1<pos:position pos:line="1546" pos:column="15"/></name><operator pos:line="1546" pos:column="15">&gt;<pos:position pos:line="1546" pos:column="19"/></operator><literal type="number" pos:line="1546" pos:column="16">0<pos:position pos:line="1546" pos:column="17"/></literal> <operator pos:line="1546" pos:column="18">&amp;&amp;<pos:position pos:line="1546" pos:column="28"/></operator> <name pos:line="1546" pos:column="21">p1<pos:position pos:line="1546" pos:column="23"/></name><operator pos:line="1546" pos:column="23">+<pos:position pos:line="1546" pos:column="24"/></operator><name pos:line="1546" pos:column="24">mx<pos:position pos:line="1546" pos:column="26"/></name><operator pos:line="1546" pos:column="26">&lt;=<pos:position pos:line="1546" pos:column="31"/></operator><operator pos:line="1546" pos:column="28">(<pos:position pos:line="1546" pos:column="29"/></operator><name><name pos:line="1546" pos:column="29">p<pos:position pos:line="1546" pos:column="30"/></name><operator pos:line="1546" pos:column="30">-&gt;<pos:position pos:line="1546" pos:column="35"/></operator><name pos:line="1546" pos:column="32">nMem<pos:position pos:line="1546" pos:column="36"/></name></name><operator pos:line="1546" pos:column="36">+<pos:position pos:line="1546" pos:column="37"/></operator><literal type="number" pos:line="1546" pos:column="37">1<pos:position pos:line="1546" pos:column="38"/></literal> <operator pos:line="1546" pos:column="39">-<pos:position pos:line="1546" pos:column="40"/></operator> <name><name pos:line="1546" pos:column="41">p<pos:position pos:line="1546" pos:column="42"/></name><operator pos:line="1546" pos:column="42">-&gt;<pos:position pos:line="1546" pos:column="47"/></operator><name pos:line="1546" pos:column="44">nCursor<pos:position pos:line="1546" pos:column="51"/></name></name><operator pos:line="1546" pos:column="51">)<pos:position pos:line="1546" pos:column="52"/></operator><operator pos:line="1546" pos:column="52">+<pos:position pos:line="1546" pos:column="53"/></operator><literal type="number" pos:line="1546" pos:column="53">1<pos:position pos:line="1546" pos:column="54"/></literal></expr></argument> )<pos:position pos:line="1546" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1546" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1547" pos:column="5">assert<pos:position pos:line="1547" pos:column="11"/></name><argument_list pos:line="1547" pos:column="11">( <argument><expr><name pos:line="1547" pos:column="13">p2<pos:position pos:line="1547" pos:column="15"/></name><operator pos:line="1547" pos:column="15">&gt;<pos:position pos:line="1547" pos:column="19"/></operator><literal type="number" pos:line="1547" pos:column="16">0<pos:position pos:line="1547" pos:column="17"/></literal> <operator pos:line="1547" pos:column="18">&amp;&amp;<pos:position pos:line="1547" pos:column="28"/></operator> <name pos:line="1547" pos:column="21">p2<pos:position pos:line="1547" pos:column="23"/></name><operator pos:line="1547" pos:column="23">+<pos:position pos:line="1547" pos:column="24"/></operator><name pos:line="1547" pos:column="24">mx<pos:position pos:line="1547" pos:column="26"/></name><operator pos:line="1547" pos:column="26">&lt;=<pos:position pos:line="1547" pos:column="31"/></operator><operator pos:line="1547" pos:column="28">(<pos:position pos:line="1547" pos:column="29"/></operator><name><name pos:line="1547" pos:column="29">p<pos:position pos:line="1547" pos:column="30"/></name><operator pos:line="1547" pos:column="30">-&gt;<pos:position pos:line="1547" pos:column="35"/></operator><name pos:line="1547" pos:column="32">nMem<pos:position pos:line="1547" pos:column="36"/></name></name><operator pos:line="1547" pos:column="36">+<pos:position pos:line="1547" pos:column="37"/></operator><literal type="number" pos:line="1547" pos:column="37">1<pos:position pos:line="1547" pos:column="38"/></literal> <operator pos:line="1547" pos:column="39">-<pos:position pos:line="1547" pos:column="40"/></operator> <name><name pos:line="1547" pos:column="41">p<pos:position pos:line="1547" pos:column="42"/></name><operator pos:line="1547" pos:column="42">-&gt;<pos:position pos:line="1547" pos:column="47"/></operator><name pos:line="1547" pos:column="44">nCursor<pos:position pos:line="1547" pos:column="51"/></name></name><operator pos:line="1547" pos:column="51">)<pos:position pos:line="1547" pos:column="52"/></operator><operator pos:line="1547" pos:column="52">+<pos:position pos:line="1547" pos:column="53"/></operator><literal type="number" pos:line="1547" pos:column="53">1<pos:position pos:line="1547" pos:column="54"/></literal></expr></argument> )<pos:position pos:line="1547" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1547" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="1548" pos:column="4"/></block></then><else pos:line="1548" pos:column="4">else<block pos:line="1548" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="1549" pos:column="5">assert<pos:position pos:line="1549" pos:column="11"/></name><argument_list pos:line="1549" pos:column="11">( <argument><expr><name pos:line="1549" pos:column="13">p1<pos:position pos:line="1549" pos:column="15"/></name><operator pos:line="1549" pos:column="15">&gt;<pos:position pos:line="1549" pos:column="19"/></operator><literal type="number" pos:line="1549" pos:column="16">0<pos:position pos:line="1549" pos:column="17"/></literal> <operator pos:line="1549" pos:column="18">&amp;&amp;<pos:position pos:line="1549" pos:column="28"/></operator> <name pos:line="1549" pos:column="21">p1<pos:position pos:line="1549" pos:column="23"/></name><operator pos:line="1549" pos:column="23">+<pos:position pos:line="1549" pos:column="24"/></operator><name pos:line="1549" pos:column="24">n<pos:position pos:line="1549" pos:column="25"/></name><operator pos:line="1549" pos:column="25">&lt;=<pos:position pos:line="1549" pos:column="30"/></operator><operator pos:line="1549" pos:column="27">(<pos:position pos:line="1549" pos:column="28"/></operator><name><name pos:line="1549" pos:column="28">p<pos:position pos:line="1549" pos:column="29"/></name><operator pos:line="1549" pos:column="29">-&gt;<pos:position pos:line="1549" pos:column="34"/></operator><name pos:line="1549" pos:column="31">nMem<pos:position pos:line="1549" pos:column="35"/></name></name><operator pos:line="1549" pos:column="35">+<pos:position pos:line="1549" pos:column="36"/></operator><literal type="number" pos:line="1549" pos:column="36">1<pos:position pos:line="1549" pos:column="37"/></literal> <operator pos:line="1549" pos:column="38">-<pos:position pos:line="1549" pos:column="39"/></operator> <name><name pos:line="1549" pos:column="40">p<pos:position pos:line="1549" pos:column="41"/></name><operator pos:line="1549" pos:column="41">-&gt;<pos:position pos:line="1549" pos:column="46"/></operator><name pos:line="1549" pos:column="43">nCursor<pos:position pos:line="1549" pos:column="50"/></name></name><operator pos:line="1549" pos:column="50">)<pos:position pos:line="1549" pos:column="51"/></operator><operator pos:line="1549" pos:column="51">+<pos:position pos:line="1549" pos:column="52"/></operator><literal type="number" pos:line="1549" pos:column="52">1<pos:position pos:line="1549" pos:column="53"/></literal></expr></argument> )<pos:position pos:line="1549" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1549" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1550" pos:column="5">assert<pos:position pos:line="1550" pos:column="11"/></name><argument_list pos:line="1550" pos:column="11">( <argument><expr><name pos:line="1550" pos:column="13">p2<pos:position pos:line="1550" pos:column="15"/></name><operator pos:line="1550" pos:column="15">&gt;<pos:position pos:line="1550" pos:column="19"/></operator><literal type="number" pos:line="1550" pos:column="16">0<pos:position pos:line="1550" pos:column="17"/></literal> <operator pos:line="1550" pos:column="18">&amp;&amp;<pos:position pos:line="1550" pos:column="28"/></operator> <name pos:line="1550" pos:column="21">p2<pos:position pos:line="1550" pos:column="23"/></name><operator pos:line="1550" pos:column="23">+<pos:position pos:line="1550" pos:column="24"/></operator><name pos:line="1550" pos:column="24">n<pos:position pos:line="1550" pos:column="25"/></name><operator pos:line="1550" pos:column="25">&lt;=<pos:position pos:line="1550" pos:column="30"/></operator><operator pos:line="1550" pos:column="27">(<pos:position pos:line="1550" pos:column="28"/></operator><name><name pos:line="1550" pos:column="28">p<pos:position pos:line="1550" pos:column="29"/></name><operator pos:line="1550" pos:column="29">-&gt;<pos:position pos:line="1550" pos:column="34"/></operator><name pos:line="1550" pos:column="31">nMem<pos:position pos:line="1550" pos:column="35"/></name></name><operator pos:line="1550" pos:column="35">+<pos:position pos:line="1550" pos:column="36"/></operator><literal type="number" pos:line="1550" pos:column="36">1<pos:position pos:line="1550" pos:column="37"/></literal> <operator pos:line="1550" pos:column="38">-<pos:position pos:line="1550" pos:column="39"/></operator> <name><name pos:line="1550" pos:column="40">p<pos:position pos:line="1550" pos:column="41"/></name><operator pos:line="1550" pos:column="41">-&gt;<pos:position pos:line="1550" pos:column="46"/></operator><name pos:line="1550" pos:column="43">nCursor<pos:position pos:line="1550" pos:column="50"/></name></name><operator pos:line="1550" pos:column="50">)<pos:position pos:line="1550" pos:column="51"/></operator><operator pos:line="1550" pos:column="51">+<pos:position pos:line="1550" pos:column="52"/></operator><literal type="number" pos:line="1550" pos:column="52">1<pos:position pos:line="1550" pos:column="53"/></literal></expr></argument> )<pos:position pos:line="1550" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1550" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="1551" pos:column="4"/></block></else></if>
<cpp:endif pos:line="1552" pos:column="1">#<cpp:directive pos:line="1552" pos:column="2">endif<pos:position pos:line="1552" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1552" pos:column="8">/* SQLITE_DEBUG */</comment>
  <for pos:line="1553" pos:column="3">for<control pos:line="1553" pos:column="6">(<init><expr><name pos:line="1553" pos:column="7">i<pos:position pos:line="1553" pos:column="8"/></name><operator pos:line="1553" pos:column="8">=<pos:position pos:line="1553" pos:column="9"/></operator><literal type="number" pos:line="1553" pos:column="9">0<pos:position pos:line="1553" pos:column="10"/></literal></expr>;<pos:position pos:line="1553" pos:column="11"/></init> <condition><expr><name pos:line="1553" pos:column="12">i<pos:position pos:line="1553" pos:column="13"/></name><operator pos:line="1553" pos:column="13">&lt;<pos:position pos:line="1553" pos:column="17"/></operator><name pos:line="1553" pos:column="14">n<pos:position pos:line="1553" pos:column="15"/></name></expr>;<pos:position pos:line="1553" pos:column="16"/></condition> <incr><expr><name pos:line="1553" pos:column="17">i<pos:position pos:line="1553" pos:column="18"/></name><operator pos:line="1553" pos:column="18">++<pos:position pos:line="1553" pos:column="20"/></operator></expr></incr>)<pos:position pos:line="1553" pos:column="21"/></control><block pos:line="1553" pos:column="21">{
    <expr_stmt><expr><name pos:line="1554" pos:column="5">idx<pos:position pos:line="1554" pos:column="8"/></name> <operator pos:line="1554" pos:column="9">=<pos:position pos:line="1554" pos:column="10"/></operator> <ternary><condition><expr><name pos:line="1554" pos:column="11">aPermute<pos:position pos:line="1554" pos:column="19"/></name></expr> ?<pos:position pos:line="1554" pos:column="21"/></condition><then pos:line="1554" pos:column="21"> <expr><name><name pos:line="1554" pos:column="22">aPermute<pos:position pos:line="1554" pos:column="30"/></name><index pos:line="1554" pos:column="30">[<expr><name pos:line="1554" pos:column="31">i<pos:position pos:line="1554" pos:column="32"/></name></expr>]<pos:position pos:line="1554" pos:column="33"/></index></name></expr> <pos:position pos:line="1554" pos:column="34"/></then><else pos:line="1554" pos:column="34">: <expr><name pos:line="1554" pos:column="36">i<pos:position pos:line="1554" pos:column="37"/></name></expr></else></ternary></expr>;<pos:position pos:line="1554" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1555" pos:column="5">assert<pos:position pos:line="1555" pos:column="11"/></name><argument_list pos:line="1555" pos:column="11">( <argument><expr><call><name pos:line="1555" pos:column="13">memIsValid<pos:position pos:line="1555" pos:column="23"/></name><argument_list pos:line="1555" pos:column="23">(<argument><expr><operator pos:line="1555" pos:column="24">&amp;<pos:position pos:line="1555" pos:column="29"/></operator><name><name pos:line="1555" pos:column="25">aMem<pos:position pos:line="1555" pos:column="29"/></name><index pos:line="1555" pos:column="29">[<expr><name pos:line="1555" pos:column="30">p1<pos:position pos:line="1555" pos:column="32"/></name><operator pos:line="1555" pos:column="32">+<pos:position pos:line="1555" pos:column="33"/></operator><name pos:line="1555" pos:column="33">idx<pos:position pos:line="1555" pos:column="36"/></name></expr>]<pos:position pos:line="1555" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="1555" pos:column="38"/></argument_list></call></expr></argument> )<pos:position pos:line="1555" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1555" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1556" pos:column="5">assert<pos:position pos:line="1556" pos:column="11"/></name><argument_list pos:line="1556" pos:column="11">( <argument><expr><call><name pos:line="1556" pos:column="13">memIsValid<pos:position pos:line="1556" pos:column="23"/></name><argument_list pos:line="1556" pos:column="23">(<argument><expr><operator pos:line="1556" pos:column="24">&amp;<pos:position pos:line="1556" pos:column="29"/></operator><name><name pos:line="1556" pos:column="25">aMem<pos:position pos:line="1556" pos:column="29"/></name><index pos:line="1556" pos:column="29">[<expr><name pos:line="1556" pos:column="30">p2<pos:position pos:line="1556" pos:column="32"/></name><operator pos:line="1556" pos:column="32">+<pos:position pos:line="1556" pos:column="33"/></operator><name pos:line="1556" pos:column="33">idx<pos:position pos:line="1556" pos:column="36"/></name></expr>]<pos:position pos:line="1556" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="1556" pos:column="38"/></argument_list></call></expr></argument> )<pos:position pos:line="1556" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1556" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1557" pos:column="5">REGISTER_TRACE<pos:position pos:line="1557" pos:column="19"/></name><argument_list pos:line="1557" pos:column="19">(<argument><expr><name pos:line="1557" pos:column="20">p1<pos:position pos:line="1557" pos:column="22"/></name><operator pos:line="1557" pos:column="22">+<pos:position pos:line="1557" pos:column="23"/></operator><name pos:line="1557" pos:column="23">idx<pos:position pos:line="1557" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="1557" pos:column="28">&amp;<pos:position pos:line="1557" pos:column="33"/></operator><name><name pos:line="1557" pos:column="29">aMem<pos:position pos:line="1557" pos:column="33"/></name><index pos:line="1557" pos:column="33">[<expr><name pos:line="1557" pos:column="34">p1<pos:position pos:line="1557" pos:column="36"/></name><operator pos:line="1557" pos:column="36">+<pos:position pos:line="1557" pos:column="37"/></operator><name pos:line="1557" pos:column="37">idx<pos:position pos:line="1557" pos:column="40"/></name></expr>]<pos:position pos:line="1557" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="1557" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1557" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1558" pos:column="5">REGISTER_TRACE<pos:position pos:line="1558" pos:column="19"/></name><argument_list pos:line="1558" pos:column="19">(<argument><expr><name pos:line="1558" pos:column="20">p2<pos:position pos:line="1558" pos:column="22"/></name><operator pos:line="1558" pos:column="22">+<pos:position pos:line="1558" pos:column="23"/></operator><name pos:line="1558" pos:column="23">idx<pos:position pos:line="1558" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="1558" pos:column="28">&amp;<pos:position pos:line="1558" pos:column="33"/></operator><name><name pos:line="1558" pos:column="29">aMem<pos:position pos:line="1558" pos:column="33"/></name><index pos:line="1558" pos:column="33">[<expr><name pos:line="1558" pos:column="34">p2<pos:position pos:line="1558" pos:column="36"/></name><operator pos:line="1558" pos:column="36">+<pos:position pos:line="1558" pos:column="37"/></operator><name pos:line="1558" pos:column="37">idx<pos:position pos:line="1558" pos:column="40"/></name></expr>]<pos:position pos:line="1558" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="1558" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1558" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1559" pos:column="5">assert<pos:position pos:line="1559" pos:column="11"/></name><argument_list pos:line="1559" pos:column="11">( <argument><expr><name pos:line="1559" pos:column="13">i<pos:position pos:line="1559" pos:column="14"/></name><operator pos:line="1559" pos:column="14">&lt;<pos:position pos:line="1559" pos:column="18"/></operator><name><name pos:line="1559" pos:column="15">pKeyInfo<pos:position pos:line="1559" pos:column="23"/></name><operator pos:line="1559" pos:column="23">-&gt;<pos:position pos:line="1559" pos:column="28"/></operator><name pos:line="1559" pos:column="25">nKeyField<pos:position pos:line="1559" pos:column="34"/></name></name></expr></argument> )<pos:position pos:line="1559" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1559" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1560" pos:column="5">pColl<pos:position pos:line="1560" pos:column="10"/></name> <operator pos:line="1560" pos:column="11">=<pos:position pos:line="1560" pos:column="12"/></operator> <name><name pos:line="1560" pos:column="13">pKeyInfo<pos:position pos:line="1560" pos:column="21"/></name><operator pos:line="1560" pos:column="21">-&gt;<pos:position pos:line="1560" pos:column="26"/></operator><name pos:line="1560" pos:column="23">aColl<pos:position pos:line="1560" pos:column="28"/></name><index pos:line="1560" pos:column="28">[<expr><name pos:line="1560" pos:column="29">i<pos:position pos:line="1560" pos:column="30"/></name></expr>]<pos:position pos:line="1560" pos:column="31"/></index></name></expr>;<pos:position pos:line="1560" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1561" pos:column="5">bRev<pos:position pos:line="1561" pos:column="9"/></name> <operator pos:line="1561" pos:column="10">=<pos:position pos:line="1561" pos:column="11"/></operator> <name><name pos:line="1561" pos:column="12">pKeyInfo<pos:position pos:line="1561" pos:column="20"/></name><operator pos:line="1561" pos:column="20">-&gt;<pos:position pos:line="1561" pos:column="25"/></operator><name pos:line="1561" pos:column="22">aSortOrder<pos:position pos:line="1561" pos:column="32"/></name><index pos:line="1561" pos:column="32">[<expr><name pos:line="1561" pos:column="33">i<pos:position pos:line="1561" pos:column="34"/></name></expr>]<pos:position pos:line="1561" pos:column="35"/></index></name></expr>;<pos:position pos:line="1561" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1562" pos:column="5">iCompare<pos:position pos:line="1562" pos:column="13"/></name> <operator pos:line="1562" pos:column="14">=<pos:position pos:line="1562" pos:column="15"/></operator> <call><name pos:line="1562" pos:column="16">sqlite3MemCompare<pos:position pos:line="1562" pos:column="33"/></name><argument_list pos:line="1562" pos:column="33">(<argument><expr><operator pos:line="1562" pos:column="34">&amp;<pos:position pos:line="1562" pos:column="39"/></operator><name><name pos:line="1562" pos:column="35">aMem<pos:position pos:line="1562" pos:column="39"/></name><index pos:line="1562" pos:column="39">[<expr><name pos:line="1562" pos:column="40">p1<pos:position pos:line="1562" pos:column="42"/></name><operator pos:line="1562" pos:column="42">+<pos:position pos:line="1562" pos:column="43"/></operator><name pos:line="1562" pos:column="43">idx<pos:position pos:line="1562" pos:column="46"/></name></expr>]<pos:position pos:line="1562" pos:column="47"/></index></name></expr></argument>, <argument><expr><operator pos:line="1562" pos:column="49">&amp;<pos:position pos:line="1562" pos:column="54"/></operator><name><name pos:line="1562" pos:column="50">aMem<pos:position pos:line="1562" pos:column="54"/></name><index pos:line="1562" pos:column="54">[<expr><name pos:line="1562" pos:column="55">p2<pos:position pos:line="1562" pos:column="57"/></name><operator pos:line="1562" pos:column="57">+<pos:position pos:line="1562" pos:column="58"/></operator><name pos:line="1562" pos:column="58">idx<pos:position pos:line="1562" pos:column="61"/></name></expr>]<pos:position pos:line="1562" pos:column="62"/></index></name></expr></argument>, <argument><expr><name pos:line="1562" pos:column="64">pColl<pos:position pos:line="1562" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1562" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="1562" pos:column="71"/></expr_stmt>
    <if pos:line="1563" pos:column="5">if<condition pos:line="1563" pos:column="7">( <expr><name pos:line="1563" pos:column="9">iCompare<pos:position pos:line="1563" pos:column="17"/></name></expr> )<pos:position pos:line="1563" pos:column="19"/></condition><then><block pos:line="1563" pos:column="19">{
      <if pos:line="1564" pos:column="7">if<condition pos:line="1564" pos:column="9">( <expr><name pos:line="1564" pos:column="11">bRev<pos:position pos:line="1564" pos:column="15"/></name></expr> )<pos:position pos:line="1564" pos:column="17"/></condition><then pos:line="1564" pos:column="17"> <block type="pseudo"><expr_stmt><expr><name pos:line="1564" pos:column="18">iCompare<pos:position pos:line="1564" pos:column="26"/></name> <operator pos:line="1564" pos:column="27">=<pos:position pos:line="1564" pos:column="28"/></operator> <operator pos:line="1564" pos:column="29">-<pos:position pos:line="1564" pos:column="30"/></operator><name pos:line="1564" pos:column="30">iCompare<pos:position pos:line="1564" pos:column="38"/></name></expr>;<pos:position pos:line="1564" pos:column="39"/></expr_stmt></block></then></if>
      <break pos:line="1565" pos:column="7">break;<pos:position pos:line="1565" pos:column="13"/></break>
    }<pos:position pos:line="1566" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1567" pos:column="4"/></block></for>
  <break pos:line="1568" pos:column="3">break;<pos:position pos:line="1568" pos:column="9"/></break>
}<pos:position pos:line="1569" pos:column="2"/></block>

<comment type="block" pos:line="1571" pos:column="1">/* Opcode: Jump P1 P2 P3 * *
**
** Jump to the instruction at address P1, P2, or P3 depending on whether
** in the most recent OP_Compare instruction the P1 vector was less than
** equal to, or greater than the P2 vector, respectively.
*/</comment>
<case pos:line="1577" pos:column="1">case <expr><name pos:line="1577" pos:column="6">OP_Jump<pos:position pos:line="1577" pos:column="13"/></name></expr>:<pos:position pos:line="1577" pos:column="14"/></case> <block pos:line="1577" pos:column="15">{             <comment type="block" pos:line="1577" pos:column="29">/* jump */</comment>
  <if pos:line="1578" pos:column="3">if<condition pos:line="1578" pos:column="5">( <expr><name pos:line="1578" pos:column="7">iCompare<pos:position pos:line="1578" pos:column="15"/></name><operator pos:line="1578" pos:column="15">&lt;<pos:position pos:line="1578" pos:column="19"/></operator><literal type="number" pos:line="1578" pos:column="16">0<pos:position pos:line="1578" pos:column="17"/></literal></expr> )<pos:position pos:line="1578" pos:column="19"/></condition><then><block pos:line="1578" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="1579" pos:column="5">VdbeBranchTaken<pos:position pos:line="1579" pos:column="20"/></name><argument_list pos:line="1579" pos:column="20">(<argument><expr><literal type="number" pos:line="1579" pos:column="21">0<pos:position pos:line="1579" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="1579" pos:column="23">3<pos:position pos:line="1579" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="1579" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1579" pos:column="26"/></expr_stmt> <expr_stmt><expr><name pos:line="1579" pos:column="27">pOp<pos:position pos:line="1579" pos:column="30"/></name> <operator pos:line="1579" pos:column="31">=<pos:position pos:line="1579" pos:column="32"/></operator> <operator pos:line="1579" pos:column="33">&amp;<pos:position pos:line="1579" pos:column="38"/></operator><name><name pos:line="1579" pos:column="34">aOp<pos:position pos:line="1579" pos:column="37"/></name><index pos:line="1579" pos:column="37">[<expr><name><name pos:line="1579" pos:column="38">pOp<pos:position pos:line="1579" pos:column="41"/></name><operator pos:line="1579" pos:column="41">-&gt;<pos:position pos:line="1579" pos:column="46"/></operator><name pos:line="1579" pos:column="43">p1<pos:position pos:line="1579" pos:column="45"/></name></name> <operator pos:line="1579" pos:column="46">-<pos:position pos:line="1579" pos:column="47"/></operator> <literal type="number" pos:line="1579" pos:column="48">1<pos:position pos:line="1579" pos:column="49"/></literal></expr>]<pos:position pos:line="1579" pos:column="50"/></index></name></expr>;<pos:position pos:line="1579" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="1580" pos:column="4"/></block></then><elseif pos:line="1580" pos:column="4">else <if pos:line="1580" pos:column="9">if<condition pos:line="1580" pos:column="11">( <expr><name pos:line="1580" pos:column="13">iCompare<pos:position pos:line="1580" pos:column="21"/></name><operator pos:line="1580" pos:column="21">==<pos:position pos:line="1580" pos:column="23"/></operator><literal type="number" pos:line="1580" pos:column="23">0<pos:position pos:line="1580" pos:column="24"/></literal></expr> )<pos:position pos:line="1580" pos:column="26"/></condition><then><block pos:line="1580" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="1581" pos:column="5">VdbeBranchTaken<pos:position pos:line="1581" pos:column="20"/></name><argument_list pos:line="1581" pos:column="20">(<argument><expr><literal type="number" pos:line="1581" pos:column="21">1<pos:position pos:line="1581" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="1581" pos:column="23">3<pos:position pos:line="1581" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="1581" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1581" pos:column="26"/></expr_stmt> <expr_stmt><expr><name pos:line="1581" pos:column="27">pOp<pos:position pos:line="1581" pos:column="30"/></name> <operator pos:line="1581" pos:column="31">=<pos:position pos:line="1581" pos:column="32"/></operator> <operator pos:line="1581" pos:column="33">&amp;<pos:position pos:line="1581" pos:column="38"/></operator><name><name pos:line="1581" pos:column="34">aOp<pos:position pos:line="1581" pos:column="37"/></name><index pos:line="1581" pos:column="37">[<expr><name><name pos:line="1581" pos:column="38">pOp<pos:position pos:line="1581" pos:column="41"/></name><operator pos:line="1581" pos:column="41">-&gt;<pos:position pos:line="1581" pos:column="46"/></operator><name pos:line="1581" pos:column="43">p2<pos:position pos:line="1581" pos:column="45"/></name></name> <operator pos:line="1581" pos:column="46">-<pos:position pos:line="1581" pos:column="47"/></operator> <literal type="number" pos:line="1581" pos:column="48">1<pos:position pos:line="1581" pos:column="49"/></literal></expr>]<pos:position pos:line="1581" pos:column="50"/></index></name></expr>;<pos:position pos:line="1581" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="1582" pos:column="4"/></block></then></if></elseif><else pos:line="1582" pos:column="4">else<block pos:line="1582" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="1583" pos:column="5">VdbeBranchTaken<pos:position pos:line="1583" pos:column="20"/></name><argument_list pos:line="1583" pos:column="20">(<argument><expr><literal type="number" pos:line="1583" pos:column="21">2<pos:position pos:line="1583" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="1583" pos:column="23">3<pos:position pos:line="1583" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="1583" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1583" pos:column="26"/></expr_stmt> <expr_stmt><expr><name pos:line="1583" pos:column="27">pOp<pos:position pos:line="1583" pos:column="30"/></name> <operator pos:line="1583" pos:column="31">=<pos:position pos:line="1583" pos:column="32"/></operator> <operator pos:line="1583" pos:column="33">&amp;<pos:position pos:line="1583" pos:column="38"/></operator><name><name pos:line="1583" pos:column="34">aOp<pos:position pos:line="1583" pos:column="37"/></name><index pos:line="1583" pos:column="37">[<expr><name><name pos:line="1583" pos:column="38">pOp<pos:position pos:line="1583" pos:column="41"/></name><operator pos:line="1583" pos:column="41">-&gt;<pos:position pos:line="1583" pos:column="46"/></operator><name pos:line="1583" pos:column="43">p3<pos:position pos:line="1583" pos:column="45"/></name></name> <operator pos:line="1583" pos:column="46">-<pos:position pos:line="1583" pos:column="47"/></operator> <literal type="number" pos:line="1583" pos:column="48">1<pos:position pos:line="1583" pos:column="49"/></literal></expr>]<pos:position pos:line="1583" pos:column="50"/></index></name></expr>;<pos:position pos:line="1583" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="1584" pos:column="4"/></block></else></if>
  <break pos:line="1585" pos:column="3">break;<pos:position pos:line="1585" pos:column="9"/></break>
}<pos:position pos:line="1586" pos:column="2"/></block>

<comment type="block" pos:line="1588" pos:column="1">/* Opcode: And P1 P2 P3 * *
** Synopsis: r[P3]=(r[P1] &amp;&amp; r[P2])
**
** Take the logical AND of the values in registers P1 and P2 and
** write the result into register P3.
**
** If either P1 or P2 is 0 (false) then the result is 0 even if
** the other input is NULL.  A NULL and true or two NULLs give
** a NULL output.
*/</comment>
<comment type="block" pos:line="1598" pos:column="1">/* Opcode: Or P1 P2 P3 * *
** Synopsis: r[P3]=(r[P1] || r[P2])
**
** Take the logical OR of the values in register P1 and P2 and
** store the answer in register P3.
**
** If either P1 or P2 is nonzero (true) then the result is 1 (true)
** even if the other input is NULL.  A NULL and false or two NULLs
** give a NULL output.
*/</comment>
<case pos:line="1608" pos:column="1">case <expr><name pos:line="1608" pos:column="6">OP_And<pos:position pos:line="1608" pos:column="12"/></name></expr>:<pos:position pos:line="1608" pos:column="13"/></case>              <comment type="block" pos:line="1608" pos:column="27">/* same as TK_AND, in1, in2, out3 */</comment>
<case pos:line="1609" pos:column="1">case <expr><name pos:line="1609" pos:column="6">OP_Or<pos:position pos:line="1609" pos:column="11"/></name></expr>:<pos:position pos:line="1609" pos:column="12"/></case> <block pos:line="1609" pos:column="13">{             <comment type="block" pos:line="1609" pos:column="27">/* same as TK_OR, in1, in2, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="1610" pos:column="3">int<pos:position pos:line="1610" pos:column="6"/></name></type> <name pos:line="1610" pos:column="7">v1<pos:position pos:line="1610" pos:column="9"/></name></decl>;<pos:position pos:line="1610" pos:column="10"/></decl_stmt>    <comment type="block" pos:line="1610" pos:column="14">/* Left operand:  0==FALSE, 1==TRUE, 2==UNKNOWN or NULL */</comment>
  <decl_stmt><decl><type><name pos:line="1611" pos:column="3">int<pos:position pos:line="1611" pos:column="6"/></name></type> <name pos:line="1611" pos:column="7">v2<pos:position pos:line="1611" pos:column="9"/></name></decl>;<pos:position pos:line="1611" pos:column="10"/></decl_stmt>    <comment type="block" pos:line="1611" pos:column="14">/* Right operand: 0==FALSE, 1==TRUE, 2==UNKNOWN or NULL */</comment>

  <expr_stmt><expr><name pos:line="1613" pos:column="3">pIn1<pos:position pos:line="1613" pos:column="7"/></name> <operator pos:line="1613" pos:column="8">=<pos:position pos:line="1613" pos:column="9"/></operator> <operator pos:line="1613" pos:column="10">&amp;<pos:position pos:line="1613" pos:column="15"/></operator><name><name pos:line="1613" pos:column="11">aMem<pos:position pos:line="1613" pos:column="15"/></name><index pos:line="1613" pos:column="15">[<expr><name><name pos:line="1613" pos:column="16">pOp<pos:position pos:line="1613" pos:column="19"/></name><operator pos:line="1613" pos:column="19">-&gt;<pos:position pos:line="1613" pos:column="24"/></operator><name pos:line="1613" pos:column="21">p1<pos:position pos:line="1613" pos:column="23"/></name></name></expr>]<pos:position pos:line="1613" pos:column="24"/></index></name></expr>;<pos:position pos:line="1613" pos:column="25"/></expr_stmt>
  <if pos:line="1614" pos:column="3">if<condition pos:line="1614" pos:column="5">( <expr><name><name pos:line="1614" pos:column="7">pIn1<pos:position pos:line="1614" pos:column="11"/></name><operator pos:line="1614" pos:column="11">-&gt;<pos:position pos:line="1614" pos:column="16"/></operator><name pos:line="1614" pos:column="13">flags<pos:position pos:line="1614" pos:column="18"/></name></name> <operator pos:line="1614" pos:column="19">&amp;<pos:position pos:line="1614" pos:column="24"/></operator> <name pos:line="1614" pos:column="21">MEM_Null<pos:position pos:line="1614" pos:column="29"/></name></expr> )<pos:position pos:line="1614" pos:column="31"/></condition><then><block pos:line="1614" pos:column="31">{
    <expr_stmt><expr><name pos:line="1615" pos:column="5">v1<pos:position pos:line="1615" pos:column="7"/></name> <operator pos:line="1615" pos:column="8">=<pos:position pos:line="1615" pos:column="9"/></operator> <literal type="number" pos:line="1615" pos:column="10">2<pos:position pos:line="1615" pos:column="11"/></literal></expr>;<pos:position pos:line="1615" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="1616" pos:column="4"/></block></then><else pos:line="1616" pos:column="4">else<block pos:line="1616" pos:column="8">{
    <expr_stmt><expr><name pos:line="1617" pos:column="5">v1<pos:position pos:line="1617" pos:column="7"/></name> <operator pos:line="1617" pos:column="8">=<pos:position pos:line="1617" pos:column="9"/></operator> <call><name pos:line="1617" pos:column="10">sqlite3VdbeIntValue<pos:position pos:line="1617" pos:column="29"/></name><argument_list pos:line="1617" pos:column="29">(<argument><expr><name pos:line="1617" pos:column="30">pIn1<pos:position pos:line="1617" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1617" pos:column="35"/></argument_list></call><operator pos:line="1617" pos:column="35">!=<pos:position pos:line="1617" pos:column="37"/></operator><literal type="number" pos:line="1617" pos:column="37">0<pos:position pos:line="1617" pos:column="38"/></literal></expr>;<pos:position pos:line="1617" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="1618" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name pos:line="1619" pos:column="3">pIn2<pos:position pos:line="1619" pos:column="7"/></name> <operator pos:line="1619" pos:column="8">=<pos:position pos:line="1619" pos:column="9"/></operator> <operator pos:line="1619" pos:column="10">&amp;<pos:position pos:line="1619" pos:column="15"/></operator><name><name pos:line="1619" pos:column="11">aMem<pos:position pos:line="1619" pos:column="15"/></name><index pos:line="1619" pos:column="15">[<expr><name><name pos:line="1619" pos:column="16">pOp<pos:position pos:line="1619" pos:column="19"/></name><operator pos:line="1619" pos:column="19">-&gt;<pos:position pos:line="1619" pos:column="24"/></operator><name pos:line="1619" pos:column="21">p2<pos:position pos:line="1619" pos:column="23"/></name></name></expr>]<pos:position pos:line="1619" pos:column="24"/></index></name></expr>;<pos:position pos:line="1619" pos:column="25"/></expr_stmt>
  <if pos:line="1620" pos:column="3">if<condition pos:line="1620" pos:column="5">( <expr><name><name pos:line="1620" pos:column="7">pIn2<pos:position pos:line="1620" pos:column="11"/></name><operator pos:line="1620" pos:column="11">-&gt;<pos:position pos:line="1620" pos:column="16"/></operator><name pos:line="1620" pos:column="13">flags<pos:position pos:line="1620" pos:column="18"/></name></name> <operator pos:line="1620" pos:column="19">&amp;<pos:position pos:line="1620" pos:column="24"/></operator> <name pos:line="1620" pos:column="21">MEM_Null<pos:position pos:line="1620" pos:column="29"/></name></expr> )<pos:position pos:line="1620" pos:column="31"/></condition><then><block pos:line="1620" pos:column="31">{
    <expr_stmt><expr><name pos:line="1621" pos:column="5">v2<pos:position pos:line="1621" pos:column="7"/></name> <operator pos:line="1621" pos:column="8">=<pos:position pos:line="1621" pos:column="9"/></operator> <literal type="number" pos:line="1621" pos:column="10">2<pos:position pos:line="1621" pos:column="11"/></literal></expr>;<pos:position pos:line="1621" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="1622" pos:column="4"/></block></then><else pos:line="1622" pos:column="4">else<block pos:line="1622" pos:column="8">{
    <expr_stmt><expr><name pos:line="1623" pos:column="5">v2<pos:position pos:line="1623" pos:column="7"/></name> <operator pos:line="1623" pos:column="8">=<pos:position pos:line="1623" pos:column="9"/></operator> <call><name pos:line="1623" pos:column="10">sqlite3VdbeIntValue<pos:position pos:line="1623" pos:column="29"/></name><argument_list pos:line="1623" pos:column="29">(<argument><expr><name pos:line="1623" pos:column="30">pIn2<pos:position pos:line="1623" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1623" pos:column="35"/></argument_list></call><operator pos:line="1623" pos:column="35">!=<pos:position pos:line="1623" pos:column="37"/></operator><literal type="number" pos:line="1623" pos:column="37">0<pos:position pos:line="1623" pos:column="38"/></literal></expr>;<pos:position pos:line="1623" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="1624" pos:column="4"/></block></else></if>
  <if pos:line="1625" pos:column="3">if<condition pos:line="1625" pos:column="5">( <expr><name><name pos:line="1625" pos:column="7">pOp<pos:position pos:line="1625" pos:column="10"/></name><operator pos:line="1625" pos:column="10">-&gt;<pos:position pos:line="1625" pos:column="15"/></operator><name pos:line="1625" pos:column="12">opcode<pos:position pos:line="1625" pos:column="18"/></name></name><operator pos:line="1625" pos:column="18">==<pos:position pos:line="1625" pos:column="20"/></operator><name pos:line="1625" pos:column="20">OP_And<pos:position pos:line="1625" pos:column="26"/></name></expr> )<pos:position pos:line="1625" pos:column="28"/></condition><then><block pos:line="1625" pos:column="28">{
    <decl_stmt><decl><specifier pos:line="1626" pos:column="5">static<pos:position pos:line="1626" pos:column="11"/></specifier> <type><specifier pos:line="1626" pos:column="12">const<pos:position pos:line="1626" pos:column="17"/></specifier> <name pos:line="1626" pos:column="18">unsigned<pos:position pos:line="1626" pos:column="26"/></name> <name pos:line="1626" pos:column="27">char<pos:position pos:line="1626" pos:column="31"/></name></type> <name><name pos:line="1626" pos:column="32">and_logic<pos:position pos:line="1626" pos:column="41"/></name><index pos:line="1626" pos:column="41">[]<pos:position pos:line="1626" pos:column="43"/></index></name> <init pos:line="1626" pos:column="44">= <expr><block pos:line="1626" pos:column="46">{ <expr><literal type="number" pos:line="1626" pos:column="48">0<pos:position pos:line="1626" pos:column="49"/></literal></expr>, <expr><literal type="number" pos:line="1626" pos:column="51">0<pos:position pos:line="1626" pos:column="52"/></literal></expr>, <expr><literal type="number" pos:line="1626" pos:column="54">0<pos:position pos:line="1626" pos:column="55"/></literal></expr>, <expr><literal type="number" pos:line="1626" pos:column="57">0<pos:position pos:line="1626" pos:column="58"/></literal></expr>, <expr><literal type="number" pos:line="1626" pos:column="60">1<pos:position pos:line="1626" pos:column="61"/></literal></expr>, <expr><literal type="number" pos:line="1626" pos:column="63">2<pos:position pos:line="1626" pos:column="64"/></literal></expr>, <expr><literal type="number" pos:line="1626" pos:column="66">0<pos:position pos:line="1626" pos:column="67"/></literal></expr>, <expr><literal type="number" pos:line="1626" pos:column="69">2<pos:position pos:line="1626" pos:column="70"/></literal></expr>, <expr><literal type="number" pos:line="1626" pos:column="72">2<pos:position pos:line="1626" pos:column="73"/></literal></expr> }<pos:position pos:line="1626" pos:column="75"/></block></expr></init></decl>;<pos:position pos:line="1626" pos:column="76"/></decl_stmt>
    <expr_stmt><expr><name pos:line="1627" pos:column="5">v1<pos:position pos:line="1627" pos:column="7"/></name> <operator pos:line="1627" pos:column="8">=<pos:position pos:line="1627" pos:column="9"/></operator> <name><name pos:line="1627" pos:column="10">and_logic<pos:position pos:line="1627" pos:column="19"/></name><index pos:line="1627" pos:column="19">[<expr><name pos:line="1627" pos:column="20">v1<pos:position pos:line="1627" pos:column="22"/></name><operator pos:line="1627" pos:column="22">*<pos:position pos:line="1627" pos:column="23"/></operator><literal type="number" pos:line="1627" pos:column="23">3<pos:position pos:line="1627" pos:column="24"/></literal><operator pos:line="1627" pos:column="24">+<pos:position pos:line="1627" pos:column="25"/></operator><name pos:line="1627" pos:column="25">v2<pos:position pos:line="1627" pos:column="27"/></name></expr>]<pos:position pos:line="1627" pos:column="28"/></index></name></expr>;<pos:position pos:line="1627" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="1628" pos:column="4"/></block></then><else pos:line="1628" pos:column="4">else<block pos:line="1628" pos:column="8">{
    <decl_stmt><decl><specifier pos:line="1629" pos:column="5">static<pos:position pos:line="1629" pos:column="11"/></specifier> <type><specifier pos:line="1629" pos:column="12">const<pos:position pos:line="1629" pos:column="17"/></specifier> <name pos:line="1629" pos:column="18">unsigned<pos:position pos:line="1629" pos:column="26"/></name> <name pos:line="1629" pos:column="27">char<pos:position pos:line="1629" pos:column="31"/></name></type> <name><name pos:line="1629" pos:column="32">or_logic<pos:position pos:line="1629" pos:column="40"/></name><index pos:line="1629" pos:column="40">[]<pos:position pos:line="1629" pos:column="42"/></index></name> <init pos:line="1629" pos:column="43">= <expr><block pos:line="1629" pos:column="45">{ <expr><literal type="number" pos:line="1629" pos:column="47">0<pos:position pos:line="1629" pos:column="48"/></literal></expr>, <expr><literal type="number" pos:line="1629" pos:column="50">1<pos:position pos:line="1629" pos:column="51"/></literal></expr>, <expr><literal type="number" pos:line="1629" pos:column="53">2<pos:position pos:line="1629" pos:column="54"/></literal></expr>, <expr><literal type="number" pos:line="1629" pos:column="56">1<pos:position pos:line="1629" pos:column="57"/></literal></expr>, <expr><literal type="number" pos:line="1629" pos:column="59">1<pos:position pos:line="1629" pos:column="60"/></literal></expr>, <expr><literal type="number" pos:line="1629" pos:column="62">1<pos:position pos:line="1629" pos:column="63"/></literal></expr>, <expr><literal type="number" pos:line="1629" pos:column="65">2<pos:position pos:line="1629" pos:column="66"/></literal></expr>, <expr><literal type="number" pos:line="1629" pos:column="68">1<pos:position pos:line="1629" pos:column="69"/></literal></expr>, <expr><literal type="number" pos:line="1629" pos:column="71">2<pos:position pos:line="1629" pos:column="72"/></literal></expr> }<pos:position pos:line="1629" pos:column="74"/></block></expr></init></decl>;<pos:position pos:line="1629" pos:column="75"/></decl_stmt>
    <expr_stmt><expr><name pos:line="1630" pos:column="5">v1<pos:position pos:line="1630" pos:column="7"/></name> <operator pos:line="1630" pos:column="8">=<pos:position pos:line="1630" pos:column="9"/></operator> <name><name pos:line="1630" pos:column="10">or_logic<pos:position pos:line="1630" pos:column="18"/></name><index pos:line="1630" pos:column="18">[<expr><name pos:line="1630" pos:column="19">v1<pos:position pos:line="1630" pos:column="21"/></name><operator pos:line="1630" pos:column="21">*<pos:position pos:line="1630" pos:column="22"/></operator><literal type="number" pos:line="1630" pos:column="22">3<pos:position pos:line="1630" pos:column="23"/></literal><operator pos:line="1630" pos:column="23">+<pos:position pos:line="1630" pos:column="24"/></operator><name pos:line="1630" pos:column="24">v2<pos:position pos:line="1630" pos:column="26"/></name></expr>]<pos:position pos:line="1630" pos:column="27"/></index></name></expr>;<pos:position pos:line="1630" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="1631" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name pos:line="1632" pos:column="3">pOut<pos:position pos:line="1632" pos:column="7"/></name> <operator pos:line="1632" pos:column="8">=<pos:position pos:line="1632" pos:column="9"/></operator> <operator pos:line="1632" pos:column="10">&amp;<pos:position pos:line="1632" pos:column="15"/></operator><name><name pos:line="1632" pos:column="11">aMem<pos:position pos:line="1632" pos:column="15"/></name><index pos:line="1632" pos:column="15">[<expr><name><name pos:line="1632" pos:column="16">pOp<pos:position pos:line="1632" pos:column="19"/></name><operator pos:line="1632" pos:column="19">-&gt;<pos:position pos:line="1632" pos:column="24"/></operator><name pos:line="1632" pos:column="21">p3<pos:position pos:line="1632" pos:column="23"/></name></name></expr>]<pos:position pos:line="1632" pos:column="24"/></index></name></expr>;<pos:position pos:line="1632" pos:column="25"/></expr_stmt>
  <if pos:line="1633" pos:column="3">if<condition pos:line="1633" pos:column="5">( <expr><name pos:line="1633" pos:column="7">v1<pos:position pos:line="1633" pos:column="9"/></name><operator pos:line="1633" pos:column="9">==<pos:position pos:line="1633" pos:column="11"/></operator><literal type="number" pos:line="1633" pos:column="11">2<pos:position pos:line="1633" pos:column="12"/></literal></expr> )<pos:position pos:line="1633" pos:column="14"/></condition><then><block pos:line="1633" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="1634" pos:column="5">MemSetTypeFlag<pos:position pos:line="1634" pos:column="19"/></name><argument_list pos:line="1634" pos:column="19">(<argument><expr><name pos:line="1634" pos:column="20">pOut<pos:position pos:line="1634" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1634" pos:column="26">MEM_Null<pos:position pos:line="1634" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1634" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1634" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="1635" pos:column="4"/></block></then><else pos:line="1635" pos:column="4">else<block pos:line="1635" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="1636" pos:column="5">pOut<pos:position pos:line="1636" pos:column="9"/></name><operator pos:line="1636" pos:column="9">-&gt;<pos:position pos:line="1636" pos:column="14"/></operator><name pos:line="1636" pos:column="11">u<pos:position pos:line="1636" pos:column="12"/></name><operator pos:line="1636" pos:column="12">.<pos:position pos:line="1636" pos:column="13"/></operator><name pos:line="1636" pos:column="13">i<pos:position pos:line="1636" pos:column="14"/></name></name> <operator pos:line="1636" pos:column="15">=<pos:position pos:line="1636" pos:column="16"/></operator> <name pos:line="1636" pos:column="17">v1<pos:position pos:line="1636" pos:column="19"/></name></expr>;<pos:position pos:line="1636" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1637" pos:column="5">MemSetTypeFlag<pos:position pos:line="1637" pos:column="19"/></name><argument_list pos:line="1637" pos:column="19">(<argument><expr><name pos:line="1637" pos:column="20">pOut<pos:position pos:line="1637" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1637" pos:column="26">MEM_Int<pos:position pos:line="1637" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1637" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1637" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="1638" pos:column="4"/></block></else></if>
  <break pos:line="1639" pos:column="3">break;<pos:position pos:line="1639" pos:column="9"/></break>
}<pos:position pos:line="1640" pos:column="2"/></block>

<comment type="block" pos:line="1642" pos:column="1">/* Opcode: Not P1 P2 * * *
** Synopsis: r[P2]= !r[P1]
**
** Interpret the value in register P1 as a boolean value.  Store the
** boolean complement in register P2.  If the value in register P1 is 
** NULL, then a NULL is stored in P2.
*/</comment>
<case pos:line="1649" pos:column="1">case <expr><name pos:line="1649" pos:column="6">OP_Not<pos:position pos:line="1649" pos:column="12"/></name></expr>:<pos:position pos:line="1649" pos:column="13"/></case> <block pos:line="1649" pos:column="14">{                <comment type="block" pos:line="1649" pos:column="31">/* same as TK_NOT, in1, out2 */</comment>
  <expr_stmt><expr><name pos:line="1650" pos:column="3">pIn1<pos:position pos:line="1650" pos:column="7"/></name> <operator pos:line="1650" pos:column="8">=<pos:position pos:line="1650" pos:column="9"/></operator> <operator pos:line="1650" pos:column="10">&amp;<pos:position pos:line="1650" pos:column="15"/></operator><name><name pos:line="1650" pos:column="11">aMem<pos:position pos:line="1650" pos:column="15"/></name><index pos:line="1650" pos:column="15">[<expr><name><name pos:line="1650" pos:column="16">pOp<pos:position pos:line="1650" pos:column="19"/></name><operator pos:line="1650" pos:column="19">-&gt;<pos:position pos:line="1650" pos:column="24"/></operator><name pos:line="1650" pos:column="21">p1<pos:position pos:line="1650" pos:column="23"/></name></name></expr>]<pos:position pos:line="1650" pos:column="24"/></index></name></expr>;<pos:position pos:line="1650" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1651" pos:column="3">pOut<pos:position pos:line="1651" pos:column="7"/></name> <operator pos:line="1651" pos:column="8">=<pos:position pos:line="1651" pos:column="9"/></operator> <operator pos:line="1651" pos:column="10">&amp;<pos:position pos:line="1651" pos:column="15"/></operator><name><name pos:line="1651" pos:column="11">aMem<pos:position pos:line="1651" pos:column="15"/></name><index pos:line="1651" pos:column="15">[<expr><name><name pos:line="1651" pos:column="16">pOp<pos:position pos:line="1651" pos:column="19"/></name><operator pos:line="1651" pos:column="19">-&gt;<pos:position pos:line="1651" pos:column="24"/></operator><name pos:line="1651" pos:column="21">p2<pos:position pos:line="1651" pos:column="23"/></name></name></expr>]<pos:position pos:line="1651" pos:column="24"/></index></name></expr>;<pos:position pos:line="1651" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1652" pos:column="3">sqlite3VdbeMemSetNull<pos:position pos:line="1652" pos:column="24"/></name><argument_list pos:line="1652" pos:column="24">(<argument><expr><name pos:line="1652" pos:column="25">pOut<pos:position pos:line="1652" pos:column="29"/></name></expr></argument>)<pos:position pos:line="1652" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1652" pos:column="31"/></expr_stmt>
  <if pos:line="1653" pos:column="3">if<condition pos:line="1653" pos:column="5">( <expr><operator pos:line="1653" pos:column="7">(<pos:position pos:line="1653" pos:column="8"/></operator><name><name pos:line="1653" pos:column="8">pIn1<pos:position pos:line="1653" pos:column="12"/></name><operator pos:line="1653" pos:column="12">-&gt;<pos:position pos:line="1653" pos:column="17"/></operator><name pos:line="1653" pos:column="14">flags<pos:position pos:line="1653" pos:column="19"/></name></name> <operator pos:line="1653" pos:column="20">&amp;<pos:position pos:line="1653" pos:column="25"/></operator> <name pos:line="1653" pos:column="22">MEM_Null<pos:position pos:line="1653" pos:column="30"/></name><operator pos:line="1653" pos:column="30">)<pos:position pos:line="1653" pos:column="31"/></operator><operator pos:line="1653" pos:column="31">==<pos:position pos:line="1653" pos:column="33"/></operator><literal type="number" pos:line="1653" pos:column="33">0<pos:position pos:line="1653" pos:column="34"/></literal></expr> )<pos:position pos:line="1653" pos:column="36"/></condition><then><block pos:line="1653" pos:column="36">{
    <expr_stmt><expr><name><name pos:line="1654" pos:column="5">pOut<pos:position pos:line="1654" pos:column="9"/></name><operator pos:line="1654" pos:column="9">-&gt;<pos:position pos:line="1654" pos:column="14"/></operator><name pos:line="1654" pos:column="11">flags<pos:position pos:line="1654" pos:column="16"/></name></name> <operator pos:line="1654" pos:column="17">=<pos:position pos:line="1654" pos:column="18"/></operator> <name pos:line="1654" pos:column="19">MEM_Int<pos:position pos:line="1654" pos:column="26"/></name></expr>;<pos:position pos:line="1654" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1655" pos:column="5">pOut<pos:position pos:line="1655" pos:column="9"/></name><operator pos:line="1655" pos:column="9">-&gt;<pos:position pos:line="1655" pos:column="14"/></operator><name pos:line="1655" pos:column="11">u<pos:position pos:line="1655" pos:column="12"/></name><operator pos:line="1655" pos:column="12">.<pos:position pos:line="1655" pos:column="13"/></operator><name pos:line="1655" pos:column="13">i<pos:position pos:line="1655" pos:column="14"/></name></name> <operator pos:line="1655" pos:column="15">=<pos:position pos:line="1655" pos:column="16"/></operator> <operator pos:line="1655" pos:column="17">!<pos:position pos:line="1655" pos:column="18"/></operator><call><name pos:line="1655" pos:column="18">sqlite3VdbeIntValue<pos:position pos:line="1655" pos:column="37"/></name><argument_list pos:line="1655" pos:column="37">(<argument><expr><name pos:line="1655" pos:column="38">pIn1<pos:position pos:line="1655" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1655" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1655" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="1656" pos:column="4"/></block></then></if>
  <break pos:line="1657" pos:column="3">break;<pos:position pos:line="1657" pos:column="9"/></break>
}<pos:position pos:line="1658" pos:column="2"/></block>

<comment type="block" pos:line="1660" pos:column="1">/* Opcode: BitNot P1 P2 * * *
** Synopsis: r[P1]= ~r[P1]
**
** Interpret the content of register P1 as an integer.  Store the
** ones-complement of the P1 value into register P2.  If P1 holds
** a NULL then store a NULL in P2.
*/</comment>
<case pos:line="1667" pos:column="1">case <expr><name pos:line="1667" pos:column="6">OP_BitNot<pos:position pos:line="1667" pos:column="15"/></name></expr>:<pos:position pos:line="1667" pos:column="16"/></case> <block pos:line="1667" pos:column="17">{             <comment type="block" pos:line="1667" pos:column="31">/* same as TK_BITNOT, in1, out2 */</comment>
  <expr_stmt><expr><name pos:line="1668" pos:column="3">pIn1<pos:position pos:line="1668" pos:column="7"/></name> <operator pos:line="1668" pos:column="8">=<pos:position pos:line="1668" pos:column="9"/></operator> <operator pos:line="1668" pos:column="10">&amp;<pos:position pos:line="1668" pos:column="15"/></operator><name><name pos:line="1668" pos:column="11">aMem<pos:position pos:line="1668" pos:column="15"/></name><index pos:line="1668" pos:column="15">[<expr><name><name pos:line="1668" pos:column="16">pOp<pos:position pos:line="1668" pos:column="19"/></name><operator pos:line="1668" pos:column="19">-&gt;<pos:position pos:line="1668" pos:column="24"/></operator><name pos:line="1668" pos:column="21">p1<pos:position pos:line="1668" pos:column="23"/></name></name></expr>]<pos:position pos:line="1668" pos:column="24"/></index></name></expr>;<pos:position pos:line="1668" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1669" pos:column="3">pOut<pos:position pos:line="1669" pos:column="7"/></name> <operator pos:line="1669" pos:column="8">=<pos:position pos:line="1669" pos:column="9"/></operator> <operator pos:line="1669" pos:column="10">&amp;<pos:position pos:line="1669" pos:column="15"/></operator><name><name pos:line="1669" pos:column="11">aMem<pos:position pos:line="1669" pos:column="15"/></name><index pos:line="1669" pos:column="15">[<expr><name><name pos:line="1669" pos:column="16">pOp<pos:position pos:line="1669" pos:column="19"/></name><operator pos:line="1669" pos:column="19">-&gt;<pos:position pos:line="1669" pos:column="24"/></operator><name pos:line="1669" pos:column="21">p2<pos:position pos:line="1669" pos:column="23"/></name></name></expr>]<pos:position pos:line="1669" pos:column="24"/></index></name></expr>;<pos:position pos:line="1669" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1670" pos:column="3">sqlite3VdbeMemSetNull<pos:position pos:line="1670" pos:column="24"/></name><argument_list pos:line="1670" pos:column="24">(<argument><expr><name pos:line="1670" pos:column="25">pOut<pos:position pos:line="1670" pos:column="29"/></name></expr></argument>)<pos:position pos:line="1670" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1670" pos:column="31"/></expr_stmt>
  <if pos:line="1671" pos:column="3">if<condition pos:line="1671" pos:column="5">( <expr><operator pos:line="1671" pos:column="7">(<pos:position pos:line="1671" pos:column="8"/></operator><name><name pos:line="1671" pos:column="8">pIn1<pos:position pos:line="1671" pos:column="12"/></name><operator pos:line="1671" pos:column="12">-&gt;<pos:position pos:line="1671" pos:column="17"/></operator><name pos:line="1671" pos:column="14">flags<pos:position pos:line="1671" pos:column="19"/></name></name> <operator pos:line="1671" pos:column="20">&amp;<pos:position pos:line="1671" pos:column="25"/></operator> <name pos:line="1671" pos:column="22">MEM_Null<pos:position pos:line="1671" pos:column="30"/></name><operator pos:line="1671" pos:column="30">)<pos:position pos:line="1671" pos:column="31"/></operator><operator pos:line="1671" pos:column="31">==<pos:position pos:line="1671" pos:column="33"/></operator><literal type="number" pos:line="1671" pos:column="33">0<pos:position pos:line="1671" pos:column="34"/></literal></expr> )<pos:position pos:line="1671" pos:column="36"/></condition><then><block pos:line="1671" pos:column="36">{
    <expr_stmt><expr><name><name pos:line="1672" pos:column="5">pOut<pos:position pos:line="1672" pos:column="9"/></name><operator pos:line="1672" pos:column="9">-&gt;<pos:position pos:line="1672" pos:column="14"/></operator><name pos:line="1672" pos:column="11">flags<pos:position pos:line="1672" pos:column="16"/></name></name> <operator pos:line="1672" pos:column="17">=<pos:position pos:line="1672" pos:column="18"/></operator> <name pos:line="1672" pos:column="19">MEM_Int<pos:position pos:line="1672" pos:column="26"/></name></expr>;<pos:position pos:line="1672" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1673" pos:column="5">pOut<pos:position pos:line="1673" pos:column="9"/></name><operator pos:line="1673" pos:column="9">-&gt;<pos:position pos:line="1673" pos:column="14"/></operator><name pos:line="1673" pos:column="11">u<pos:position pos:line="1673" pos:column="12"/></name><operator pos:line="1673" pos:column="12">.<pos:position pos:line="1673" pos:column="13"/></operator><name pos:line="1673" pos:column="13">i<pos:position pos:line="1673" pos:column="14"/></name></name> <operator pos:line="1673" pos:column="15">=<pos:position pos:line="1673" pos:column="16"/></operator> <operator pos:line="1673" pos:column="17">~<pos:position pos:line="1673" pos:column="18"/></operator><call><name pos:line="1673" pos:column="18">sqlite3VdbeIntValue<pos:position pos:line="1673" pos:column="37"/></name><argument_list pos:line="1673" pos:column="37">(<argument><expr><name pos:line="1673" pos:column="38">pIn1<pos:position pos:line="1673" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1673" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1673" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="1674" pos:column="4"/></block></then></if>
  <break pos:line="1675" pos:column="3">break;<pos:position pos:line="1675" pos:column="9"/></break>
}<pos:position pos:line="1676" pos:column="2"/></block>

<comment type="block" pos:line="1678" pos:column="1">/* Opcode: Once P1 P2 * * *
**
** Fall through to the next instruction the first time this opcode is
** encountered on each invocation of the byte-code program.  Jump to P2
** on the second and all subsequent encounters during the same invocation.
**
** Top-level programs determine first invocation by comparing the P1
** operand against the P1 operand on the OP_Init opcode at the beginning
** of the program.  If the P1 values differ, then fall through and make
** the P1 of this opcode equal to the P1 of OP_Init.  If P1 values are
** the same then take the jump.
**
** For subprograms, there is a bitmask in the VdbeFrame that determines
** whether or not the jump should be taken.  The bitmask is necessary
** because the self-altering code trick does not work for recursive
** triggers.
*/</comment>
<case pos:line="1695" pos:column="1">case <expr><name pos:line="1695" pos:column="6">OP_Once<pos:position pos:line="1695" pos:column="13"/></name></expr>:<pos:position pos:line="1695" pos:column="14"/></case> <block pos:line="1695" pos:column="15">{             <comment type="block" pos:line="1695" pos:column="29">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="1696" pos:column="3">u32<pos:position pos:line="1696" pos:column="6"/></name></type> <name pos:line="1696" pos:column="7">iAddr<pos:position pos:line="1696" pos:column="12"/></name></decl>;<pos:position pos:line="1696" pos:column="13"/></decl_stmt>                <comment type="block" pos:line="1696" pos:column="29">/* Address of this instruction */</comment>
  <expr_stmt><expr><call><name pos:line="1697" pos:column="3">assert<pos:position pos:line="1697" pos:column="9"/></name><argument_list pos:line="1697" pos:column="9">( <argument><expr><name><name pos:line="1697" pos:column="11">p<pos:position pos:line="1697" pos:column="12"/></name><operator pos:line="1697" pos:column="12">-&gt;<pos:position pos:line="1697" pos:column="17"/></operator><name pos:line="1697" pos:column="14">aOp<pos:position pos:line="1697" pos:column="17"/></name><index pos:line="1697" pos:column="17">[<expr><literal type="number" pos:line="1697" pos:column="18">0<pos:position pos:line="1697" pos:column="19"/></literal></expr>]<pos:position pos:line="1697" pos:column="20"/></index></name><operator pos:line="1697" pos:column="20">.<pos:position pos:line="1697" pos:column="21"/></operator><name pos:line="1697" pos:column="21">opcode<pos:position pos:line="1697" pos:column="27"/></name><operator pos:line="1697" pos:column="27">==<pos:position pos:line="1697" pos:column="29"/></operator><name pos:line="1697" pos:column="29">OP_Init<pos:position pos:line="1697" pos:column="36"/></name></expr></argument> )<pos:position pos:line="1697" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1697" pos:column="39"/></expr_stmt>
  <if pos:line="1698" pos:column="3">if<condition pos:line="1698" pos:column="5">( <expr><name><name pos:line="1698" pos:column="7">p<pos:position pos:line="1698" pos:column="8"/></name><operator pos:line="1698" pos:column="8">-&gt;<pos:position pos:line="1698" pos:column="13"/></operator><name pos:line="1698" pos:column="10">pFrame<pos:position pos:line="1698" pos:column="16"/></name></name></expr> )<pos:position pos:line="1698" pos:column="18"/></condition><then><block pos:line="1698" pos:column="18">{
    <expr_stmt><expr><name pos:line="1699" pos:column="5">iAddr<pos:position pos:line="1699" pos:column="10"/></name> <operator pos:line="1699" pos:column="11">=<pos:position pos:line="1699" pos:column="12"/></operator> <call pos:line="1699" pos:column="13">(<name pos:line="1699" pos:column="14">int<pos:position pos:line="1699" pos:column="17"/></name>)<argument_list pos:line="1699" pos:column="18">(<argument><expr><name pos:line="1699" pos:column="19">pOp<pos:position pos:line="1699" pos:column="22"/></name> <operator pos:line="1699" pos:column="23">-<pos:position pos:line="1699" pos:column="24"/></operator> <name><name pos:line="1699" pos:column="25">p<pos:position pos:line="1699" pos:column="26"/></name><operator pos:line="1699" pos:column="26">-&gt;<pos:position pos:line="1699" pos:column="31"/></operator><name pos:line="1699" pos:column="28">aOp<pos:position pos:line="1699" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="1699" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1699" pos:column="33"/></expr_stmt>
    <if pos:line="1700" pos:column="5">if<condition pos:line="1700" pos:column="7">( <expr><operator pos:line="1700" pos:column="9">(<pos:position pos:line="1700" pos:column="10"/></operator><name><name pos:line="1700" pos:column="10">p<pos:position pos:line="1700" pos:column="11"/></name><operator pos:line="1700" pos:column="11">-&gt;<pos:position pos:line="1700" pos:column="16"/></operator><name pos:line="1700" pos:column="13">pFrame<pos:position pos:line="1700" pos:column="19"/></name><operator pos:line="1700" pos:column="19">-&gt;<pos:position pos:line="1700" pos:column="24"/></operator><name pos:line="1700" pos:column="21">aOnce<pos:position pos:line="1700" pos:column="26"/></name><index pos:line="1700" pos:column="26">[<expr><name pos:line="1700" pos:column="27">iAddr<pos:position pos:line="1700" pos:column="32"/></name><operator pos:line="1700" pos:column="32">/<pos:position pos:line="1700" pos:column="33"/></operator><literal type="number" pos:line="1700" pos:column="33">8<pos:position pos:line="1700" pos:column="34"/></literal></expr>]<pos:position pos:line="1700" pos:column="35"/></index></name> <operator pos:line="1700" pos:column="36">&amp;<pos:position pos:line="1700" pos:column="41"/></operator> <operator pos:line="1700" pos:column="38">(<pos:position pos:line="1700" pos:column="39"/></operator><literal type="number" pos:line="1700" pos:column="39">1<pos:position pos:line="1700" pos:column="40"/></literal><operator pos:line="1700" pos:column="40">&lt;&lt;<pos:position pos:line="1700" pos:column="48"/></operator><operator pos:line="1700" pos:column="42">(<pos:position pos:line="1700" pos:column="43"/></operator><name pos:line="1700" pos:column="43">iAddr<pos:position pos:line="1700" pos:column="48"/></name> <operator pos:line="1700" pos:column="49">&amp;<pos:position pos:line="1700" pos:column="54"/></operator> <literal type="number" pos:line="1700" pos:column="51">7<pos:position pos:line="1700" pos:column="52"/></literal><operator pos:line="1700" pos:column="52">)<pos:position pos:line="1700" pos:column="53"/></operator><operator pos:line="1700" pos:column="53">)<pos:position pos:line="1700" pos:column="54"/></operator><operator pos:line="1700" pos:column="54">)<pos:position pos:line="1700" pos:column="55"/></operator><operator pos:line="1700" pos:column="55">!=<pos:position pos:line="1700" pos:column="57"/></operator><literal type="number" pos:line="1700" pos:column="57">0<pos:position pos:line="1700" pos:column="58"/></literal></expr> )<pos:position pos:line="1700" pos:column="60"/></condition><then><block pos:line="1700" pos:column="60">{
      <expr_stmt><expr><call><name pos:line="1701" pos:column="7">VdbeBranchTaken<pos:position pos:line="1701" pos:column="22"/></name><argument_list pos:line="1701" pos:column="22">(<argument><expr><literal type="number" pos:line="1701" pos:column="23">1<pos:position pos:line="1701" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1701" pos:column="26">2<pos:position pos:line="1701" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="1701" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1701" pos:column="29"/></expr_stmt>
      <goto pos:line="1702" pos:column="7">goto <name pos:line="1702" pos:column="12">jump_to_p2<pos:position pos:line="1702" pos:column="22"/></name>;<pos:position pos:line="1702" pos:column="23"/></goto>
    }<pos:position pos:line="1703" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="1704" pos:column="5">p<pos:position pos:line="1704" pos:column="6"/></name><operator pos:line="1704" pos:column="6">-&gt;<pos:position pos:line="1704" pos:column="11"/></operator><name pos:line="1704" pos:column="8">pFrame<pos:position pos:line="1704" pos:column="14"/></name><operator pos:line="1704" pos:column="14">-&gt;<pos:position pos:line="1704" pos:column="19"/></operator><name pos:line="1704" pos:column="16">aOnce<pos:position pos:line="1704" pos:column="21"/></name><index pos:line="1704" pos:column="21">[<expr><name pos:line="1704" pos:column="22">iAddr<pos:position pos:line="1704" pos:column="27"/></name><operator pos:line="1704" pos:column="27">/<pos:position pos:line="1704" pos:column="28"/></operator><literal type="number" pos:line="1704" pos:column="28">8<pos:position pos:line="1704" pos:column="29"/></literal></expr>]<pos:position pos:line="1704" pos:column="30"/></index></name> <operator pos:line="1704" pos:column="31">|=<pos:position pos:line="1704" pos:column="33"/></operator> <literal type="number" pos:line="1704" pos:column="34">1<pos:position pos:line="1704" pos:column="35"/></literal><operator pos:line="1704" pos:column="35">&lt;&lt;<pos:position pos:line="1704" pos:column="43"/></operator><operator pos:line="1704" pos:column="37">(<pos:position pos:line="1704" pos:column="38"/></operator><name pos:line="1704" pos:column="38">iAddr<pos:position pos:line="1704" pos:column="43"/></name> <operator pos:line="1704" pos:column="44">&amp;<pos:position pos:line="1704" pos:column="49"/></operator> <literal type="number" pos:line="1704" pos:column="46">7<pos:position pos:line="1704" pos:column="47"/></literal><operator pos:line="1704" pos:column="47">)<pos:position pos:line="1704" pos:column="48"/></operator></expr>;<pos:position pos:line="1704" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="1705" pos:column="4"/></block></then><else pos:line="1705" pos:column="4">else<block pos:line="1705" pos:column="8">{
    <if pos:line="1706" pos:column="5">if<condition pos:line="1706" pos:column="7">( <expr><name><name pos:line="1706" pos:column="9">p<pos:position pos:line="1706" pos:column="10"/></name><operator pos:line="1706" pos:column="10">-&gt;<pos:position pos:line="1706" pos:column="15"/></operator><name pos:line="1706" pos:column="12">aOp<pos:position pos:line="1706" pos:column="15"/></name><index pos:line="1706" pos:column="15">[<expr><literal type="number" pos:line="1706" pos:column="16">0<pos:position pos:line="1706" pos:column="17"/></literal></expr>]<pos:position pos:line="1706" pos:column="18"/></index></name><operator pos:line="1706" pos:column="18">.<pos:position pos:line="1706" pos:column="19"/></operator><name pos:line="1706" pos:column="19">p1<pos:position pos:line="1706" pos:column="21"/></name><operator pos:line="1706" pos:column="21">==<pos:position pos:line="1706" pos:column="23"/></operator><name><name pos:line="1706" pos:column="23">pOp<pos:position pos:line="1706" pos:column="26"/></name><operator pos:line="1706" pos:column="26">-&gt;<pos:position pos:line="1706" pos:column="31"/></operator><name pos:line="1706" pos:column="28">p1<pos:position pos:line="1706" pos:column="30"/></name></name></expr> )<pos:position pos:line="1706" pos:column="32"/></condition><then><block pos:line="1706" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="1707" pos:column="7">VdbeBranchTaken<pos:position pos:line="1707" pos:column="22"/></name><argument_list pos:line="1707" pos:column="22">(<argument><expr><literal type="number" pos:line="1707" pos:column="23">1<pos:position pos:line="1707" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1707" pos:column="26">2<pos:position pos:line="1707" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="1707" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1707" pos:column="29"/></expr_stmt>
      <goto pos:line="1708" pos:column="7">goto <name pos:line="1708" pos:column="12">jump_to_p2<pos:position pos:line="1708" pos:column="22"/></name>;<pos:position pos:line="1708" pos:column="23"/></goto>
    }<pos:position pos:line="1709" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1710" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="1711" pos:column="3">VdbeBranchTaken<pos:position pos:line="1711" pos:column="18"/></name><argument_list pos:line="1711" pos:column="18">(<argument><expr><literal type="number" pos:line="1711" pos:column="19">0<pos:position pos:line="1711" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1711" pos:column="22">2<pos:position pos:line="1711" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="1711" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1711" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1712" pos:column="3">pOp<pos:position pos:line="1712" pos:column="6"/></name><operator pos:line="1712" pos:column="6">-&gt;<pos:position pos:line="1712" pos:column="11"/></operator><name pos:line="1712" pos:column="8">p1<pos:position pos:line="1712" pos:column="10"/></name></name> <operator pos:line="1712" pos:column="11">=<pos:position pos:line="1712" pos:column="12"/></operator> <name><name pos:line="1712" pos:column="13">p<pos:position pos:line="1712" pos:column="14"/></name><operator pos:line="1712" pos:column="14">-&gt;<pos:position pos:line="1712" pos:column="19"/></operator><name pos:line="1712" pos:column="16">aOp<pos:position pos:line="1712" pos:column="19"/></name><index pos:line="1712" pos:column="19">[<expr><literal type="number" pos:line="1712" pos:column="20">0<pos:position pos:line="1712" pos:column="21"/></literal></expr>]<pos:position pos:line="1712" pos:column="22"/></index></name><operator pos:line="1712" pos:column="22">.<pos:position pos:line="1712" pos:column="23"/></operator><name pos:line="1712" pos:column="23">p1<pos:position pos:line="1712" pos:column="25"/></name></expr>;<pos:position pos:line="1712" pos:column="26"/></expr_stmt>
  <break pos:line="1713" pos:column="3">break;<pos:position pos:line="1713" pos:column="9"/></break>
}<pos:position pos:line="1714" pos:column="2"/></block>

<comment type="block" pos:line="1716" pos:column="1">/* Opcode: If P1 P2 P3 * *
**
** Jump to P2 if the value in register P1 is true.  The value
** is considered true if it is numeric and non-zero.  If the value
** in P1 is NULL then take the jump if and only if P3 is non-zero.
*/</comment>
<comment type="block" pos:line="1722" pos:column="1">/* Opcode: IfNot P1 P2 P3 * *
**
** Jump to P2 if the value in register P1 is False.  The value
** is considered false if it has a numeric value of zero.  If the value
** in P1 is NULL then take the jump if and only if P3 is non-zero.
*/</comment>
<case pos:line="1728" pos:column="1">case <expr><name pos:line="1728" pos:column="6">OP_If<pos:position pos:line="1728" pos:column="11"/></name></expr>:<pos:position pos:line="1728" pos:column="12"/></case>                 <comment type="block" pos:line="1728" pos:column="29">/* jump, in1 */</comment>
<case pos:line="1729" pos:column="1">case <expr><name pos:line="1729" pos:column="6">OP_IfNot<pos:position pos:line="1729" pos:column="14"/></name></expr>:<pos:position pos:line="1729" pos:column="15"/></case> <block pos:line="1729" pos:column="16">{            <comment type="block" pos:line="1729" pos:column="29">/* jump, in1 */</comment>
  <decl_stmt><decl><type><name pos:line="1730" pos:column="3">int<pos:position pos:line="1730" pos:column="6"/></name></type> <name pos:line="1730" pos:column="7">c<pos:position pos:line="1730" pos:column="8"/></name></decl>;<pos:position pos:line="1730" pos:column="9"/></decl_stmt>
  <expr_stmt><expr><name pos:line="1731" pos:column="3">pIn1<pos:position pos:line="1731" pos:column="7"/></name> <operator pos:line="1731" pos:column="8">=<pos:position pos:line="1731" pos:column="9"/></operator> <operator pos:line="1731" pos:column="10">&amp;<pos:position pos:line="1731" pos:column="15"/></operator><name><name pos:line="1731" pos:column="11">aMem<pos:position pos:line="1731" pos:column="15"/></name><index pos:line="1731" pos:column="15">[<expr><name><name pos:line="1731" pos:column="16">pOp<pos:position pos:line="1731" pos:column="19"/></name><operator pos:line="1731" pos:column="19">-&gt;<pos:position pos:line="1731" pos:column="24"/></operator><name pos:line="1731" pos:column="21">p1<pos:position pos:line="1731" pos:column="23"/></name></name></expr>]<pos:position pos:line="1731" pos:column="24"/></index></name></expr>;<pos:position pos:line="1731" pos:column="25"/></expr_stmt>
  <if pos:line="1732" pos:column="3">if<condition pos:line="1732" pos:column="5">( <expr><name><name pos:line="1732" pos:column="7">pIn1<pos:position pos:line="1732" pos:column="11"/></name><operator pos:line="1732" pos:column="11">-&gt;<pos:position pos:line="1732" pos:column="16"/></operator><name pos:line="1732" pos:column="13">flags<pos:position pos:line="1732" pos:column="18"/></name></name> <operator pos:line="1732" pos:column="19">&amp;<pos:position pos:line="1732" pos:column="24"/></operator> <name pos:line="1732" pos:column="21">MEM_Null<pos:position pos:line="1732" pos:column="29"/></name></expr> )<pos:position pos:line="1732" pos:column="31"/></condition><then><block pos:line="1732" pos:column="31">{
    <expr_stmt><expr><name pos:line="1733" pos:column="5">c<pos:position pos:line="1733" pos:column="6"/></name> <operator pos:line="1733" pos:column="7">=<pos:position pos:line="1733" pos:column="8"/></operator> <name><name pos:line="1733" pos:column="9">pOp<pos:position pos:line="1733" pos:column="12"/></name><operator pos:line="1733" pos:column="12">-&gt;<pos:position pos:line="1733" pos:column="17"/></operator><name pos:line="1733" pos:column="14">p3<pos:position pos:line="1733" pos:column="16"/></name></name></expr>;<pos:position pos:line="1733" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="1734" pos:column="4"/></block></then><else pos:line="1734" pos:column="4">else<block pos:line="1734" pos:column="8">{
<cpp:ifdef pos:line="1735" pos:column="1">#<cpp:directive pos:line="1735" pos:column="2">ifdef<pos:position pos:line="1735" pos:column="7"/></cpp:directive> <name pos:line="1735" pos:column="8">SQLITE_OMIT_FLOATING_POINT<pos:position pos:line="1735" pos:column="34"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="1736" pos:column="5">c<pos:position pos:line="1736" pos:column="6"/></name> <operator pos:line="1736" pos:column="7">=<pos:position pos:line="1736" pos:column="8"/></operator> <call><name pos:line="1736" pos:column="9">sqlite3VdbeIntValue<pos:position pos:line="1736" pos:column="28"/></name><argument_list pos:line="1736" pos:column="28">(<argument><expr><name pos:line="1736" pos:column="29">pIn1<pos:position pos:line="1736" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1736" pos:column="34"/></argument_list></call><operator pos:line="1736" pos:column="34">!=<pos:position pos:line="1736" pos:column="36"/></operator><literal type="number" pos:line="1736" pos:column="36">0<pos:position pos:line="1736" pos:column="37"/></literal></expr>;<pos:position pos:line="1736" pos:column="38"/></expr_stmt>
<cpp:else pos:line="1737" pos:column="1">#<cpp:directive pos:line="1737" pos:column="2">else<pos:position pos:line="1737" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="1738" pos:column="5">c<pos:position pos:line="1738" pos:column="6"/></name> <operator pos:line="1738" pos:column="7">=<pos:position pos:line="1738" pos:column="8"/></operator> <call><name pos:line="1738" pos:column="9">sqlite3VdbeRealValue<pos:position pos:line="1738" pos:column="29"/></name><argument_list pos:line="1738" pos:column="29">(<argument><expr><name pos:line="1738" pos:column="30">pIn1<pos:position pos:line="1738" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1738" pos:column="35"/></argument_list></call><operator pos:line="1738" pos:column="35">!=<pos:position pos:line="1738" pos:column="37"/></operator><literal type="number" pos:line="1738" pos:column="37">0.0<pos:position pos:line="1738" pos:column="40"/></literal></expr>;<pos:position pos:line="1738" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="1739" pos:column="1">#<cpp:directive pos:line="1739" pos:column="2">endif<pos:position pos:line="1739" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="1740" pos:column="5">if<condition pos:line="1740" pos:column="7">( <expr><name><name pos:line="1740" pos:column="9">pOp<pos:position pos:line="1740" pos:column="12"/></name><operator pos:line="1740" pos:column="12">-&gt;<pos:position pos:line="1740" pos:column="17"/></operator><name pos:line="1740" pos:column="14">opcode<pos:position pos:line="1740" pos:column="20"/></name></name><operator pos:line="1740" pos:column="20">==<pos:position pos:line="1740" pos:column="22"/></operator><name pos:line="1740" pos:column="22">OP_IfNot<pos:position pos:line="1740" pos:column="30"/></name></expr> )<pos:position pos:line="1740" pos:column="32"/></condition><then pos:line="1740" pos:column="32"> <block type="pseudo"><expr_stmt><expr><name pos:line="1740" pos:column="33">c<pos:position pos:line="1740" pos:column="34"/></name> <operator pos:line="1740" pos:column="35">=<pos:position pos:line="1740" pos:column="36"/></operator> <operator pos:line="1740" pos:column="37">!<pos:position pos:line="1740" pos:column="38"/></operator><name pos:line="1740" pos:column="38">c<pos:position pos:line="1740" pos:column="39"/></name></expr>;<pos:position pos:line="1740" pos:column="40"/></expr_stmt></block></then></if>
  }<pos:position pos:line="1741" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="1742" pos:column="3">VdbeBranchTaken<pos:position pos:line="1742" pos:column="18"/></name><argument_list pos:line="1742" pos:column="18">(<argument><expr><name pos:line="1742" pos:column="19">c<pos:position pos:line="1742" pos:column="20"/></name><operator pos:line="1742" pos:column="20">!=<pos:position pos:line="1742" pos:column="22"/></operator><literal type="number" pos:line="1742" pos:column="22">0<pos:position pos:line="1742" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1742" pos:column="25">2<pos:position pos:line="1742" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="1742" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1742" pos:column="28"/></expr_stmt>
  <if pos:line="1743" pos:column="3">if<condition pos:line="1743" pos:column="5">( <expr><name pos:line="1743" pos:column="7">c<pos:position pos:line="1743" pos:column="8"/></name></expr> )<pos:position pos:line="1743" pos:column="10"/></condition><then><block pos:line="1743" pos:column="10">{
    <goto pos:line="1744" pos:column="5">goto <name pos:line="1744" pos:column="10">jump_to_p2<pos:position pos:line="1744" pos:column="20"/></name>;<pos:position pos:line="1744" pos:column="21"/></goto>
  }<pos:position pos:line="1745" pos:column="4"/></block></then></if>
  <break pos:line="1746" pos:column="3">break;<pos:position pos:line="1746" pos:column="9"/></break>
}<pos:position pos:line="1747" pos:column="2"/></block>

<comment type="block" pos:line="1749" pos:column="1">/* Opcode: IsNull P1 P2 * * *
** Synopsis: if r[P1]==NULL goto P2
**
** Jump to P2 if the value in register P1 is NULL.
*/</comment>
<case pos:line="1754" pos:column="1">case <expr><name pos:line="1754" pos:column="6">OP_IsNull<pos:position pos:line="1754" pos:column="15"/></name></expr>:<pos:position pos:line="1754" pos:column="16"/></case> <block pos:line="1754" pos:column="17">{            <comment type="block" pos:line="1754" pos:column="30">/* same as TK_ISNULL, jump, in1 */</comment>
  <expr_stmt><expr><name pos:line="1755" pos:column="3">pIn1<pos:position pos:line="1755" pos:column="7"/></name> <operator pos:line="1755" pos:column="8">=<pos:position pos:line="1755" pos:column="9"/></operator> <operator pos:line="1755" pos:column="10">&amp;<pos:position pos:line="1755" pos:column="15"/></operator><name><name pos:line="1755" pos:column="11">aMem<pos:position pos:line="1755" pos:column="15"/></name><index pos:line="1755" pos:column="15">[<expr><name><name pos:line="1755" pos:column="16">pOp<pos:position pos:line="1755" pos:column="19"/></name><operator pos:line="1755" pos:column="19">-&gt;<pos:position pos:line="1755" pos:column="24"/></operator><name pos:line="1755" pos:column="21">p1<pos:position pos:line="1755" pos:column="23"/></name></name></expr>]<pos:position pos:line="1755" pos:column="24"/></index></name></expr>;<pos:position pos:line="1755" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1756" pos:column="3">VdbeBranchTaken<pos:position pos:line="1756" pos:column="18"/></name><argument_list pos:line="1756" pos:column="18">( <argument><expr><operator pos:line="1756" pos:column="20">(<pos:position pos:line="1756" pos:column="21"/></operator><name><name pos:line="1756" pos:column="21">pIn1<pos:position pos:line="1756" pos:column="25"/></name><operator pos:line="1756" pos:column="25">-&gt;<pos:position pos:line="1756" pos:column="30"/></operator><name pos:line="1756" pos:column="27">flags<pos:position pos:line="1756" pos:column="32"/></name></name> <operator pos:line="1756" pos:column="33">&amp;<pos:position pos:line="1756" pos:column="38"/></operator> <name pos:line="1756" pos:column="35">MEM_Null<pos:position pos:line="1756" pos:column="43"/></name><operator pos:line="1756" pos:column="43">)<pos:position pos:line="1756" pos:column="44"/></operator><operator pos:line="1756" pos:column="44">!=<pos:position pos:line="1756" pos:column="46"/></operator><literal type="number" pos:line="1756" pos:column="46">0<pos:position pos:line="1756" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1756" pos:column="49">2<pos:position pos:line="1756" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="1756" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1756" pos:column="52"/></expr_stmt>
  <if pos:line="1757" pos:column="3">if<condition pos:line="1757" pos:column="5">( <expr><operator pos:line="1757" pos:column="7">(<pos:position pos:line="1757" pos:column="8"/></operator><name><name pos:line="1757" pos:column="8">pIn1<pos:position pos:line="1757" pos:column="12"/></name><operator pos:line="1757" pos:column="12">-&gt;<pos:position pos:line="1757" pos:column="17"/></operator><name pos:line="1757" pos:column="14">flags<pos:position pos:line="1757" pos:column="19"/></name></name> <operator pos:line="1757" pos:column="20">&amp;<pos:position pos:line="1757" pos:column="25"/></operator> <name pos:line="1757" pos:column="22">MEM_Null<pos:position pos:line="1757" pos:column="30"/></name><operator pos:line="1757" pos:column="30">)<pos:position pos:line="1757" pos:column="31"/></operator><operator pos:line="1757" pos:column="31">!=<pos:position pos:line="1757" pos:column="33"/></operator><literal type="number" pos:line="1757" pos:column="33">0<pos:position pos:line="1757" pos:column="34"/></literal></expr> )<pos:position pos:line="1757" pos:column="36"/></condition><then><block pos:line="1757" pos:column="36">{
    <goto pos:line="1758" pos:column="5">goto <name pos:line="1758" pos:column="10">jump_to_p2<pos:position pos:line="1758" pos:column="20"/></name>;<pos:position pos:line="1758" pos:column="21"/></goto>
  }<pos:position pos:line="1759" pos:column="4"/></block></then></if>
  <break pos:line="1760" pos:column="3">break;<pos:position pos:line="1760" pos:column="9"/></break>
}<pos:position pos:line="1761" pos:column="2"/></block>

<comment type="block" pos:line="1763" pos:column="1">/* Opcode: NotNull P1 P2 * * *
** Synopsis: if r[P1]!=NULL goto P2
**
** Jump to P2 if the value in register P1 is not NULL.  
*/</comment>
<case pos:line="1768" pos:column="1">case <expr><name pos:line="1768" pos:column="6">OP_NotNull<pos:position pos:line="1768" pos:column="16"/></name></expr>:<pos:position pos:line="1768" pos:column="17"/></case> <block pos:line="1768" pos:column="18">{            <comment type="block" pos:line="1768" pos:column="31">/* same as TK_NOTNULL, jump, in1 */</comment>
  <expr_stmt><expr><name pos:line="1769" pos:column="3">pIn1<pos:position pos:line="1769" pos:column="7"/></name> <operator pos:line="1769" pos:column="8">=<pos:position pos:line="1769" pos:column="9"/></operator> <operator pos:line="1769" pos:column="10">&amp;<pos:position pos:line="1769" pos:column="15"/></operator><name><name pos:line="1769" pos:column="11">aMem<pos:position pos:line="1769" pos:column="15"/></name><index pos:line="1769" pos:column="15">[<expr><name><name pos:line="1769" pos:column="16">pOp<pos:position pos:line="1769" pos:column="19"/></name><operator pos:line="1769" pos:column="19">-&gt;<pos:position pos:line="1769" pos:column="24"/></operator><name pos:line="1769" pos:column="21">p1<pos:position pos:line="1769" pos:column="23"/></name></name></expr>]<pos:position pos:line="1769" pos:column="24"/></index></name></expr>;<pos:position pos:line="1769" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1770" pos:column="3">VdbeBranchTaken<pos:position pos:line="1770" pos:column="18"/></name><argument_list pos:line="1770" pos:column="18">( <argument><expr><operator pos:line="1770" pos:column="20">(<pos:position pos:line="1770" pos:column="21"/></operator><name><name pos:line="1770" pos:column="21">pIn1<pos:position pos:line="1770" pos:column="25"/></name><operator pos:line="1770" pos:column="25">-&gt;<pos:position pos:line="1770" pos:column="30"/></operator><name pos:line="1770" pos:column="27">flags<pos:position pos:line="1770" pos:column="32"/></name></name> <operator pos:line="1770" pos:column="33">&amp;<pos:position pos:line="1770" pos:column="38"/></operator> <name pos:line="1770" pos:column="35">MEM_Null<pos:position pos:line="1770" pos:column="43"/></name><operator pos:line="1770" pos:column="43">)<pos:position pos:line="1770" pos:column="44"/></operator><operator pos:line="1770" pos:column="44">==<pos:position pos:line="1770" pos:column="46"/></operator><literal type="number" pos:line="1770" pos:column="46">0<pos:position pos:line="1770" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1770" pos:column="49">2<pos:position pos:line="1770" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="1770" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1770" pos:column="52"/></expr_stmt>
  <if pos:line="1771" pos:column="3">if<condition pos:line="1771" pos:column="5">( <expr><operator pos:line="1771" pos:column="7">(<pos:position pos:line="1771" pos:column="8"/></operator><name><name pos:line="1771" pos:column="8">pIn1<pos:position pos:line="1771" pos:column="12"/></name><operator pos:line="1771" pos:column="12">-&gt;<pos:position pos:line="1771" pos:column="17"/></operator><name pos:line="1771" pos:column="14">flags<pos:position pos:line="1771" pos:column="19"/></name></name> <operator pos:line="1771" pos:column="20">&amp;<pos:position pos:line="1771" pos:column="25"/></operator> <name pos:line="1771" pos:column="22">MEM_Null<pos:position pos:line="1771" pos:column="30"/></name><operator pos:line="1771" pos:column="30">)<pos:position pos:line="1771" pos:column="31"/></operator><operator pos:line="1771" pos:column="31">==<pos:position pos:line="1771" pos:column="33"/></operator><literal type="number" pos:line="1771" pos:column="33">0<pos:position pos:line="1771" pos:column="34"/></literal></expr> )<pos:position pos:line="1771" pos:column="36"/></condition><then><block pos:line="1771" pos:column="36">{
    <goto pos:line="1772" pos:column="5">goto <name pos:line="1772" pos:column="10">jump_to_p2<pos:position pos:line="1772" pos:column="20"/></name>;<pos:position pos:line="1772" pos:column="21"/></goto>
  }<pos:position pos:line="1773" pos:column="4"/></block></then></if>
  <break pos:line="1774" pos:column="3">break;<pos:position pos:line="1774" pos:column="9"/></break>
}<pos:position pos:line="1775" pos:column="2"/></block>

<comment type="block" pos:line="1777" pos:column="1">/* Opcode: IfNullRow P1 P2 P3 * *
** Synopsis: if P1.nullRow then r[P3]=NULL, goto P2
**
** Check the cursor P1 to see if it is currently pointing at a NULL row.
** If it is, then set register P3 to NULL and jump immediately to P2.
** If P1 is not on a NULL row, then fall through without making any
** changes.
*/</comment>
<case pos:line="1785" pos:column="1">case <expr><name pos:line="1785" pos:column="6">OP_IfNullRow<pos:position pos:line="1785" pos:column="18"/></name></expr>:<pos:position pos:line="1785" pos:column="19"/></case> <block pos:line="1785" pos:column="20">{         <comment type="block" pos:line="1785" pos:column="30">/* jump */</comment>
  <expr_stmt><expr><call><name pos:line="1786" pos:column="3">assert<pos:position pos:line="1786" pos:column="9"/></name><argument_list pos:line="1786" pos:column="9">( <argument><expr><name><name pos:line="1786" pos:column="11">pOp<pos:position pos:line="1786" pos:column="14"/></name><operator pos:line="1786" pos:column="14">-&gt;<pos:position pos:line="1786" pos:column="19"/></operator><name pos:line="1786" pos:column="16">p1<pos:position pos:line="1786" pos:column="18"/></name></name><operator pos:line="1786" pos:column="18">&gt;=<pos:position pos:line="1786" pos:column="23"/></operator><literal type="number" pos:line="1786" pos:column="20">0<pos:position pos:line="1786" pos:column="21"/></literal> <operator pos:line="1786" pos:column="22">&amp;&amp;<pos:position pos:line="1786" pos:column="32"/></operator> <name><name pos:line="1786" pos:column="25">pOp<pos:position pos:line="1786" pos:column="28"/></name><operator pos:line="1786" pos:column="28">-&gt;<pos:position pos:line="1786" pos:column="33"/></operator><name pos:line="1786" pos:column="30">p1<pos:position pos:line="1786" pos:column="32"/></name></name><operator pos:line="1786" pos:column="32">&lt;<pos:position pos:line="1786" pos:column="36"/></operator><name><name pos:line="1786" pos:column="33">p<pos:position pos:line="1786" pos:column="34"/></name><operator pos:line="1786" pos:column="34">-&gt;<pos:position pos:line="1786" pos:column="39"/></operator><name pos:line="1786" pos:column="36">nCursor<pos:position pos:line="1786" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="1786" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1786" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1787" pos:column="3">assert<pos:position pos:line="1787" pos:column="9"/></name><argument_list pos:line="1787" pos:column="9">( <argument><expr><name><name pos:line="1787" pos:column="11">p<pos:position pos:line="1787" pos:column="12"/></name><operator pos:line="1787" pos:column="12">-&gt;<pos:position pos:line="1787" pos:column="17"/></operator><name pos:line="1787" pos:column="14">apCsr<pos:position pos:line="1787" pos:column="19"/></name><index pos:line="1787" pos:column="19">[<expr><name><name pos:line="1787" pos:column="20">pOp<pos:position pos:line="1787" pos:column="23"/></name><operator pos:line="1787" pos:column="23">-&gt;<pos:position pos:line="1787" pos:column="28"/></operator><name pos:line="1787" pos:column="25">p1<pos:position pos:line="1787" pos:column="27"/></name></name></expr>]<pos:position pos:line="1787" pos:column="28"/></index></name><operator pos:line="1787" pos:column="28">!=<pos:position pos:line="1787" pos:column="30"/></operator><literal type="number" pos:line="1787" pos:column="30">0<pos:position pos:line="1787" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="1787" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1787" pos:column="34"/></expr_stmt>
  <if pos:line="1788" pos:column="3">if<condition pos:line="1788" pos:column="5">( <expr><name><name pos:line="1788" pos:column="7">p<pos:position pos:line="1788" pos:column="8"/></name><operator pos:line="1788" pos:column="8">-&gt;<pos:position pos:line="1788" pos:column="13"/></operator><name pos:line="1788" pos:column="10">apCsr<pos:position pos:line="1788" pos:column="15"/></name><index pos:line="1788" pos:column="15">[<expr><name><name pos:line="1788" pos:column="16">pOp<pos:position pos:line="1788" pos:column="19"/></name><operator pos:line="1788" pos:column="19">-&gt;<pos:position pos:line="1788" pos:column="24"/></operator><name pos:line="1788" pos:column="21">p1<pos:position pos:line="1788" pos:column="23"/></name></name></expr>]<pos:position pos:line="1788" pos:column="24"/></index></name><operator pos:line="1788" pos:column="24">-&gt;<pos:position pos:line="1788" pos:column="29"/></operator><name pos:line="1788" pos:column="26">nullRow<pos:position pos:line="1788" pos:column="33"/></name></expr> )<pos:position pos:line="1788" pos:column="35"/></condition><then><block pos:line="1788" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="1789" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="1789" pos:column="26"/></name><argument_list pos:line="1789" pos:column="26">(<argument><expr><name pos:line="1789" pos:column="27">aMem<pos:position pos:line="1789" pos:column="31"/></name> <operator pos:line="1789" pos:column="32">+<pos:position pos:line="1789" pos:column="33"/></operator> <name><name pos:line="1789" pos:column="34">pOp<pos:position pos:line="1789" pos:column="37"/></name><operator pos:line="1789" pos:column="37">-&gt;<pos:position pos:line="1789" pos:column="42"/></operator><name pos:line="1789" pos:column="39">p3<pos:position pos:line="1789" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="1789" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1789" pos:column="43"/></expr_stmt>
    <goto pos:line="1790" pos:column="5">goto <name pos:line="1790" pos:column="10">jump_to_p2<pos:position pos:line="1790" pos:column="20"/></name>;<pos:position pos:line="1790" pos:column="21"/></goto>
  }<pos:position pos:line="1791" pos:column="4"/></block></then></if>
  <break pos:line="1792" pos:column="3">break;<pos:position pos:line="1792" pos:column="9"/></break>
}<pos:position pos:line="1793" pos:column="2"/></block>

<comment type="block" pos:line="1795" pos:column="1">/* Opcode: Column P1 P2 P3 P4 P5
** Synopsis: r[P3]=PX
**
** Interpret the data that cursor P1 points to as a structure built using
** the MakeRecord instruction.  (See the MakeRecord opcode for additional
** information about the format of the data.)  Extract the P2-th column
** from this record.  If there are less that (P2+1) 
** values in the record, extract a NULL.
**
** The value extracted is stored in register P3.
**
** If the record contains fewer than P2 fields, then extract a NULL.  Or,
** if the P4 argument is a P4_MEM use the value of the P4 argument as
** the result.
**
** If the OPFLAG_CLEARCACHE bit is set on P5 and P1 is a pseudo-table cursor,
** then the cache of the cursor is reset prior to extracting the column.
** The first OP_Column against a pseudo-table after the value of the content
** register has changed should have this bit set.
**
** If the OPFLAG_LENGTHARG and OPFLAG_TYPEOFARG bits are set on P5 then
** the result is guaranteed to only be used as the argument of a length()
** or typeof() function, respectively.  The loading of large blobs can be
** skipped for length() and all content loading can be skipped for typeof().
*/</comment>
<case pos:line="1820" pos:column="1">case <expr><name pos:line="1820" pos:column="6">OP_Column<pos:position pos:line="1820" pos:column="15"/></name></expr>:<pos:position pos:line="1820" pos:column="16"/></case> <block pos:line="1820" pos:column="17">{
  <decl_stmt><decl><type><name pos:line="1821" pos:column="3">int<pos:position pos:line="1821" pos:column="6"/></name></type> <name pos:line="1821" pos:column="7">p2<pos:position pos:line="1821" pos:column="9"/></name></decl>;<pos:position pos:line="1821" pos:column="10"/></decl_stmt>            <comment type="block" pos:line="1821" pos:column="22">/* column number to retrieve */</comment>
  <decl_stmt><decl><type><name pos:line="1822" pos:column="3">VdbeCursor<pos:position pos:line="1822" pos:column="13"/></name> <modifier pos:line="1822" pos:column="14">*<pos:position pos:line="1822" pos:column="15"/></modifier></type><name pos:line="1822" pos:column="15">pC<pos:position pos:line="1822" pos:column="17"/></name></decl>;<pos:position pos:line="1822" pos:column="18"/></decl_stmt>    <comment type="block" pos:line="1822" pos:column="22">/* The VDBE cursor */</comment>
  <decl_stmt><decl><type><name pos:line="1823" pos:column="3">BtCursor<pos:position pos:line="1823" pos:column="11"/></name> <modifier pos:line="1823" pos:column="12">*<pos:position pos:line="1823" pos:column="13"/></modifier></type><name pos:line="1823" pos:column="13">pCrsr<pos:position pos:line="1823" pos:column="18"/></name></decl>;<pos:position pos:line="1823" pos:column="19"/></decl_stmt>   <comment type="block" pos:line="1823" pos:column="22">/* The BTree cursor */</comment>
  <decl_stmt><decl><type><name pos:line="1824" pos:column="3">u32<pos:position pos:line="1824" pos:column="6"/></name> <modifier pos:line="1824" pos:column="7">*<pos:position pos:line="1824" pos:column="8"/></modifier></type><name pos:line="1824" pos:column="8">aOffset<pos:position pos:line="1824" pos:column="15"/></name></decl>;<pos:position pos:line="1824" pos:column="16"/></decl_stmt>      <comment type="block" pos:line="1824" pos:column="22">/* aOffset[i] is offset to start of data for i-th column */</comment>
  <decl_stmt><decl><type><name pos:line="1825" pos:column="3">int<pos:position pos:line="1825" pos:column="6"/></name></type> <name pos:line="1825" pos:column="7">len<pos:position pos:line="1825" pos:column="10"/></name></decl>;<pos:position pos:line="1825" pos:column="11"/></decl_stmt>           <comment type="block" pos:line="1825" pos:column="22">/* The length of the serialized data for the column */</comment>
  <decl_stmt><decl><type><name pos:line="1826" pos:column="3">int<pos:position pos:line="1826" pos:column="6"/></name></type> <name pos:line="1826" pos:column="7">i<pos:position pos:line="1826" pos:column="8"/></name></decl>;<pos:position pos:line="1826" pos:column="9"/></decl_stmt>             <comment type="block" pos:line="1826" pos:column="22">/* Loop counter */</comment>
  <decl_stmt><decl><type><name pos:line="1827" pos:column="3">Mem<pos:position pos:line="1827" pos:column="6"/></name> <modifier pos:line="1827" pos:column="7">*<pos:position pos:line="1827" pos:column="8"/></modifier></type><name pos:line="1827" pos:column="8">pDest<pos:position pos:line="1827" pos:column="13"/></name></decl>;<pos:position pos:line="1827" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="1827" pos:column="22">/* Where to write the extracted value */</comment>
  <decl_stmt><decl><type><name pos:line="1828" pos:column="3">Mem<pos:position pos:line="1828" pos:column="6"/></name></type> <name pos:line="1828" pos:column="7">sMem<pos:position pos:line="1828" pos:column="11"/></name></decl>;<pos:position pos:line="1828" pos:column="12"/></decl_stmt>          <comment type="block" pos:line="1828" pos:column="22">/* For storing the record being decoded */</comment>
  <decl_stmt><decl><type><specifier pos:line="1829" pos:column="3">const<pos:position pos:line="1829" pos:column="8"/></specifier> <name pos:line="1829" pos:column="9">u8<pos:position pos:line="1829" pos:column="11"/></name> <modifier pos:line="1829" pos:column="12">*<pos:position pos:line="1829" pos:column="13"/></modifier></type><name pos:line="1829" pos:column="13">zData<pos:position pos:line="1829" pos:column="18"/></name></decl>;<pos:position pos:line="1829" pos:column="19"/></decl_stmt>   <comment type="block" pos:line="1829" pos:column="22">/* Part of the record being decoded */</comment>
  <decl_stmt><decl><type><specifier pos:line="1830" pos:column="3">const<pos:position pos:line="1830" pos:column="8"/></specifier> <name pos:line="1830" pos:column="9">u8<pos:position pos:line="1830" pos:column="11"/></name> <modifier pos:line="1830" pos:column="12">*<pos:position pos:line="1830" pos:column="13"/></modifier></type><name pos:line="1830" pos:column="13">zHdr<pos:position pos:line="1830" pos:column="17"/></name></decl>;<pos:position pos:line="1830" pos:column="18"/></decl_stmt>    <comment type="block" pos:line="1830" pos:column="22">/* Next unparsed byte of the header */</comment>
  <decl_stmt><decl><type><specifier pos:line="1831" pos:column="3">const<pos:position pos:line="1831" pos:column="8"/></specifier> <name pos:line="1831" pos:column="9">u8<pos:position pos:line="1831" pos:column="11"/></name> <modifier pos:line="1831" pos:column="12">*<pos:position pos:line="1831" pos:column="13"/></modifier></type><name pos:line="1831" pos:column="13">zEndHdr<pos:position pos:line="1831" pos:column="20"/></name></decl>;<pos:position pos:line="1831" pos:column="21"/></decl_stmt> <comment type="block" pos:line="1831" pos:column="22">/* Pointer to first byte after the header */</comment>
  <decl_stmt><decl><type><name pos:line="1832" pos:column="3">u64<pos:position pos:line="1832" pos:column="6"/></name></type> <name pos:line="1832" pos:column="7">offset64<pos:position pos:line="1832" pos:column="15"/></name></decl>;<pos:position pos:line="1832" pos:column="16"/></decl_stmt>      <comment type="block" pos:line="1832" pos:column="22">/* 64-bit offset */</comment>
  <decl_stmt><decl><type><name pos:line="1833" pos:column="3">u32<pos:position pos:line="1833" pos:column="6"/></name></type> <name pos:line="1833" pos:column="7">t<pos:position pos:line="1833" pos:column="8"/></name></decl>;<pos:position pos:line="1833" pos:column="9"/></decl_stmt>             <comment type="block" pos:line="1833" pos:column="22">/* A type code from the record header */</comment>
  <decl_stmt><decl><type><name pos:line="1834" pos:column="3">Mem<pos:position pos:line="1834" pos:column="6"/></name> <modifier pos:line="1834" pos:column="7">*<pos:position pos:line="1834" pos:column="8"/></modifier></type><name pos:line="1834" pos:column="8">pReg<pos:position pos:line="1834" pos:column="12"/></name></decl>;<pos:position pos:line="1834" pos:column="13"/></decl_stmt>         <comment type="block" pos:line="1834" pos:column="22">/* PseudoTable input register */</comment>

  <expr_stmt><expr><name pos:line="1836" pos:column="3">pC<pos:position pos:line="1836" pos:column="5"/></name> <operator pos:line="1836" pos:column="6">=<pos:position pos:line="1836" pos:column="7"/></operator> <name><name pos:line="1836" pos:column="8">p<pos:position pos:line="1836" pos:column="9"/></name><operator pos:line="1836" pos:column="9">-&gt;<pos:position pos:line="1836" pos:column="14"/></operator><name pos:line="1836" pos:column="11">apCsr<pos:position pos:line="1836" pos:column="16"/></name><index pos:line="1836" pos:column="16">[<expr><name><name pos:line="1836" pos:column="17">pOp<pos:position pos:line="1836" pos:column="20"/></name><operator pos:line="1836" pos:column="20">-&gt;<pos:position pos:line="1836" pos:column="25"/></operator><name pos:line="1836" pos:column="22">p1<pos:position pos:line="1836" pos:column="24"/></name></name></expr>]<pos:position pos:line="1836" pos:column="25"/></index></name></expr>;<pos:position pos:line="1836" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1837" pos:column="3">p2<pos:position pos:line="1837" pos:column="5"/></name> <operator pos:line="1837" pos:column="6">=<pos:position pos:line="1837" pos:column="7"/></operator> <name><name pos:line="1837" pos:column="8">pOp<pos:position pos:line="1837" pos:column="11"/></name><operator pos:line="1837" pos:column="11">-&gt;<pos:position pos:line="1837" pos:column="16"/></operator><name pos:line="1837" pos:column="13">p2<pos:position pos:line="1837" pos:column="15"/></name></name></expr>;<pos:position pos:line="1837" pos:column="16"/></expr_stmt>

  <comment type="block" pos:line="1839" pos:column="3">/* If the cursor cache is stale (meaning it is not currently point at
  ** the correct row) then bring it up-to-date by doing the necessary 
  ** B-Tree seek. */</comment>
  <expr_stmt><expr><name pos:line="1842" pos:column="3">rc<pos:position pos:line="1842" pos:column="5"/></name> <operator pos:line="1842" pos:column="6">=<pos:position pos:line="1842" pos:column="7"/></operator> <call><name pos:line="1842" pos:column="8">sqlite3VdbeCursorMoveto<pos:position pos:line="1842" pos:column="31"/></name><argument_list pos:line="1842" pos:column="31">(<argument><expr><operator pos:line="1842" pos:column="32">&amp;<pos:position pos:line="1842" pos:column="37"/></operator><name pos:line="1842" pos:column="33">pC<pos:position pos:line="1842" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="1842" pos:column="37">&amp;<pos:position pos:line="1842" pos:column="42"/></operator><name pos:line="1842" pos:column="38">p2<pos:position pos:line="1842" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1842" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1842" pos:column="42"/></expr_stmt>
  <if pos:line="1843" pos:column="3">if<condition pos:line="1843" pos:column="5">( <expr><name pos:line="1843" pos:column="7">rc<pos:position pos:line="1843" pos:column="9"/></name></expr> )<pos:position pos:line="1843" pos:column="11"/></condition><then pos:line="1843" pos:column="11"> <block type="pseudo"><goto pos:line="1843" pos:column="12">goto <name pos:line="1843" pos:column="17">abort_due_to_error<pos:position pos:line="1843" pos:column="35"/></name>;<pos:position pos:line="1843" pos:column="36"/></goto></block></then></if>

  <expr_stmt><expr><call><name pos:line="1845" pos:column="3">assert<pos:position pos:line="1845" pos:column="9"/></name><argument_list pos:line="1845" pos:column="9">( <argument><expr><name><name pos:line="1845" pos:column="11">pOp<pos:position pos:line="1845" pos:column="14"/></name><operator pos:line="1845" pos:column="14">-&gt;<pos:position pos:line="1845" pos:column="19"/></operator><name pos:line="1845" pos:column="16">p3<pos:position pos:line="1845" pos:column="18"/></name></name><operator pos:line="1845" pos:column="18">&gt;<pos:position pos:line="1845" pos:column="22"/></operator><literal type="number" pos:line="1845" pos:column="19">0<pos:position pos:line="1845" pos:column="20"/></literal> <operator pos:line="1845" pos:column="21">&amp;&amp;<pos:position pos:line="1845" pos:column="31"/></operator> <name><name pos:line="1845" pos:column="24">pOp<pos:position pos:line="1845" pos:column="27"/></name><operator pos:line="1845" pos:column="27">-&gt;<pos:position pos:line="1845" pos:column="32"/></operator><name pos:line="1845" pos:column="29">p3<pos:position pos:line="1845" pos:column="31"/></name></name><operator pos:line="1845" pos:column="31">&lt;=<pos:position pos:line="1845" pos:column="36"/></operator><operator pos:line="1845" pos:column="33">(<pos:position pos:line="1845" pos:column="34"/></operator><name><name pos:line="1845" pos:column="34">p<pos:position pos:line="1845" pos:column="35"/></name><operator pos:line="1845" pos:column="35">-&gt;<pos:position pos:line="1845" pos:column="40"/></operator><name pos:line="1845" pos:column="37">nMem<pos:position pos:line="1845" pos:column="41"/></name></name><operator pos:line="1845" pos:column="41">+<pos:position pos:line="1845" pos:column="42"/></operator><literal type="number" pos:line="1845" pos:column="42">1<pos:position pos:line="1845" pos:column="43"/></literal> <operator pos:line="1845" pos:column="44">-<pos:position pos:line="1845" pos:column="45"/></operator> <name><name pos:line="1845" pos:column="46">p<pos:position pos:line="1845" pos:column="47"/></name><operator pos:line="1845" pos:column="47">-&gt;<pos:position pos:line="1845" pos:column="52"/></operator><name pos:line="1845" pos:column="49">nCursor<pos:position pos:line="1845" pos:column="56"/></name></name><operator pos:line="1845" pos:column="56">)<pos:position pos:line="1845" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="1845" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1845" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1846" pos:column="3">pDest<pos:position pos:line="1846" pos:column="8"/></name> <operator pos:line="1846" pos:column="9">=<pos:position pos:line="1846" pos:column="10"/></operator> <operator pos:line="1846" pos:column="11">&amp;<pos:position pos:line="1846" pos:column="16"/></operator><name><name pos:line="1846" pos:column="12">aMem<pos:position pos:line="1846" pos:column="16"/></name><index pos:line="1846" pos:column="16">[<expr><name><name pos:line="1846" pos:column="17">pOp<pos:position pos:line="1846" pos:column="20"/></name><operator pos:line="1846" pos:column="20">-&gt;<pos:position pos:line="1846" pos:column="25"/></operator><name pos:line="1846" pos:column="22">p3<pos:position pos:line="1846" pos:column="24"/></name></name></expr>]<pos:position pos:line="1846" pos:column="25"/></index></name></expr>;<pos:position pos:line="1846" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1847" pos:column="3">memAboutToChange<pos:position pos:line="1847" pos:column="19"/></name><argument_list pos:line="1847" pos:column="19">(<argument><expr><name pos:line="1847" pos:column="20">p<pos:position pos:line="1847" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="1847" pos:column="23">pDest<pos:position pos:line="1847" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1847" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="1847" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1848" pos:column="3">assert<pos:position pos:line="1848" pos:column="9"/></name><argument_list pos:line="1848" pos:column="9">( <argument><expr><name><name pos:line="1848" pos:column="11">pOp<pos:position pos:line="1848" pos:column="14"/></name><operator pos:line="1848" pos:column="14">-&gt;<pos:position pos:line="1848" pos:column="19"/></operator><name pos:line="1848" pos:column="16">p1<pos:position pos:line="1848" pos:column="18"/></name></name><operator pos:line="1848" pos:column="18">&gt;=<pos:position pos:line="1848" pos:column="23"/></operator><literal type="number" pos:line="1848" pos:column="20">0<pos:position pos:line="1848" pos:column="21"/></literal> <operator pos:line="1848" pos:column="22">&amp;&amp;<pos:position pos:line="1848" pos:column="32"/></operator> <name><name pos:line="1848" pos:column="25">pOp<pos:position pos:line="1848" pos:column="28"/></name><operator pos:line="1848" pos:column="28">-&gt;<pos:position pos:line="1848" pos:column="33"/></operator><name pos:line="1848" pos:column="30">p1<pos:position pos:line="1848" pos:column="32"/></name></name><operator pos:line="1848" pos:column="32">&lt;<pos:position pos:line="1848" pos:column="36"/></operator><name><name pos:line="1848" pos:column="33">p<pos:position pos:line="1848" pos:column="34"/></name><operator pos:line="1848" pos:column="34">-&gt;<pos:position pos:line="1848" pos:column="39"/></operator><name pos:line="1848" pos:column="36">nCursor<pos:position pos:line="1848" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="1848" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1848" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1849" pos:column="3">assert<pos:position pos:line="1849" pos:column="9"/></name><argument_list pos:line="1849" pos:column="9">( <argument><expr><name pos:line="1849" pos:column="11">pC<pos:position pos:line="1849" pos:column="13"/></name><operator pos:line="1849" pos:column="13">!=<pos:position pos:line="1849" pos:column="15"/></operator><literal type="number" pos:line="1849" pos:column="15">0<pos:position pos:line="1849" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="1849" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="1849" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1850" pos:column="3">assert<pos:position pos:line="1850" pos:column="9"/></name><argument_list pos:line="1850" pos:column="9">( <argument><expr><name pos:line="1850" pos:column="11">p2<pos:position pos:line="1850" pos:column="13"/></name><operator pos:line="1850" pos:column="13">&lt;<pos:position pos:line="1850" pos:column="17"/></operator><name><name pos:line="1850" pos:column="14">pC<pos:position pos:line="1850" pos:column="16"/></name><operator pos:line="1850" pos:column="16">-&gt;<pos:position pos:line="1850" pos:column="21"/></operator><name pos:line="1850" pos:column="18">nField<pos:position pos:line="1850" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="1850" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="1850" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1851" pos:column="3">aOffset<pos:position pos:line="1851" pos:column="10"/></name> <operator pos:line="1851" pos:column="11">=<pos:position pos:line="1851" pos:column="12"/></operator> <name><name pos:line="1851" pos:column="13">pC<pos:position pos:line="1851" pos:column="15"/></name><operator pos:line="1851" pos:column="15">-&gt;<pos:position pos:line="1851" pos:column="20"/></operator><name pos:line="1851" pos:column="17">aOffset<pos:position pos:line="1851" pos:column="24"/></name></name></expr>;<pos:position pos:line="1851" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1852" pos:column="3">assert<pos:position pos:line="1852" pos:column="9"/></name><argument_list pos:line="1852" pos:column="9">( <argument><expr><name><name pos:line="1852" pos:column="11">pC<pos:position pos:line="1852" pos:column="13"/></name><operator pos:line="1852" pos:column="13">-&gt;<pos:position pos:line="1852" pos:column="18"/></operator><name pos:line="1852" pos:column="15">eCurType<pos:position pos:line="1852" pos:column="23"/></name></name><operator pos:line="1852" pos:column="23">!=<pos:position pos:line="1852" pos:column="25"/></operator><name pos:line="1852" pos:column="25">CURTYPE_VTAB<pos:position pos:line="1852" pos:column="37"/></name></expr></argument> )<pos:position pos:line="1852" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1852" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1853" pos:column="3">assert<pos:position pos:line="1853" pos:column="9"/></name><argument_list pos:line="1853" pos:column="9">( <argument><expr><name><name pos:line="1853" pos:column="11">pC<pos:position pos:line="1853" pos:column="13"/></name><operator pos:line="1853" pos:column="13">-&gt;<pos:position pos:line="1853" pos:column="18"/></operator><name pos:line="1853" pos:column="15">eCurType<pos:position pos:line="1853" pos:column="23"/></name></name><operator pos:line="1853" pos:column="23">!=<pos:position pos:line="1853" pos:column="25"/></operator><name pos:line="1853" pos:column="25">CURTYPE_PSEUDO<pos:position pos:line="1853" pos:column="39"/></name> <operator pos:line="1853" pos:column="40">||<pos:position pos:line="1853" pos:column="42"/></operator> <name><name pos:line="1853" pos:column="43">pC<pos:position pos:line="1853" pos:column="45"/></name><operator pos:line="1853" pos:column="45">-&gt;<pos:position pos:line="1853" pos:column="50"/></operator><name pos:line="1853" pos:column="47">nullRow<pos:position pos:line="1853" pos:column="54"/></name></name></expr></argument> )<pos:position pos:line="1853" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1853" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1854" pos:column="3">assert<pos:position pos:line="1854" pos:column="9"/></name><argument_list pos:line="1854" pos:column="9">( <argument><expr><name><name pos:line="1854" pos:column="11">pC<pos:position pos:line="1854" pos:column="13"/></name><operator pos:line="1854" pos:column="13">-&gt;<pos:position pos:line="1854" pos:column="18"/></operator><name pos:line="1854" pos:column="15">eCurType<pos:position pos:line="1854" pos:column="23"/></name></name><operator pos:line="1854" pos:column="23">!=<pos:position pos:line="1854" pos:column="25"/></operator><name pos:line="1854" pos:column="25">CURTYPE_SORTER<pos:position pos:line="1854" pos:column="39"/></name></expr></argument> )<pos:position pos:line="1854" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1854" pos:column="42"/></expr_stmt>

  <if pos:line="1856" pos:column="3">if<condition pos:line="1856" pos:column="5">( <expr><name><name pos:line="1856" pos:column="7">pC<pos:position pos:line="1856" pos:column="9"/></name><operator pos:line="1856" pos:column="9">-&gt;<pos:position pos:line="1856" pos:column="14"/></operator><name pos:line="1856" pos:column="11">cacheStatus<pos:position pos:line="1856" pos:column="22"/></name></name><operator pos:line="1856" pos:column="22">!=<pos:position pos:line="1856" pos:column="24"/></operator><name><name pos:line="1856" pos:column="24">p<pos:position pos:line="1856" pos:column="25"/></name><operator pos:line="1856" pos:column="25">-&gt;<pos:position pos:line="1856" pos:column="30"/></operator><name pos:line="1856" pos:column="27">cacheCtr<pos:position pos:line="1856" pos:column="35"/></name></name></expr> )<pos:position pos:line="1856" pos:column="37"/></condition><then><block pos:line="1856" pos:column="37">{                <comment type="block" pos:line="1856" pos:column="54">/*OPTIMIZATION-IF-FALSE*/</comment>
    <if pos:line="1857" pos:column="5">if<condition pos:line="1857" pos:column="7">( <expr><name><name pos:line="1857" pos:column="9">pC<pos:position pos:line="1857" pos:column="11"/></name><operator pos:line="1857" pos:column="11">-&gt;<pos:position pos:line="1857" pos:column="16"/></operator><name pos:line="1857" pos:column="13">nullRow<pos:position pos:line="1857" pos:column="20"/></name></name></expr> )<pos:position pos:line="1857" pos:column="22"/></condition><then><block pos:line="1857" pos:column="22">{
      <if pos:line="1858" pos:column="7">if<condition pos:line="1858" pos:column="9">( <expr><name><name pos:line="1858" pos:column="11">pC<pos:position pos:line="1858" pos:column="13"/></name><operator pos:line="1858" pos:column="13">-&gt;<pos:position pos:line="1858" pos:column="18"/></operator><name pos:line="1858" pos:column="15">eCurType<pos:position pos:line="1858" pos:column="23"/></name></name><operator pos:line="1858" pos:column="23">==<pos:position pos:line="1858" pos:column="25"/></operator><name pos:line="1858" pos:column="25">CURTYPE_PSEUDO<pos:position pos:line="1858" pos:column="39"/></name></expr> )<pos:position pos:line="1858" pos:column="41"/></condition><then><block pos:line="1858" pos:column="41">{
        <comment type="block" pos:line="1859" pos:column="9">/* For the special case of as pseudo-cursor, the seekResult field
        ** identifies the register that holds the record */</comment>
        <expr_stmt><expr><call><name pos:line="1861" pos:column="9">assert<pos:position pos:line="1861" pos:column="15"/></name><argument_list pos:line="1861" pos:column="15">( <argument><expr><name><name pos:line="1861" pos:column="17">pC<pos:position pos:line="1861" pos:column="19"/></name><operator pos:line="1861" pos:column="19">-&gt;<pos:position pos:line="1861" pos:column="24"/></operator><name pos:line="1861" pos:column="21">seekResult<pos:position pos:line="1861" pos:column="31"/></name></name><operator pos:line="1861" pos:column="31">&gt;<pos:position pos:line="1861" pos:column="35"/></operator><literal type="number" pos:line="1861" pos:column="32">0<pos:position pos:line="1861" pos:column="33"/></literal></expr></argument> )<pos:position pos:line="1861" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1861" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1862" pos:column="9">pReg<pos:position pos:line="1862" pos:column="13"/></name> <operator pos:line="1862" pos:column="14">=<pos:position pos:line="1862" pos:column="15"/></operator> <operator pos:line="1862" pos:column="16">&amp;<pos:position pos:line="1862" pos:column="21"/></operator><name><name pos:line="1862" pos:column="17">aMem<pos:position pos:line="1862" pos:column="21"/></name><index pos:line="1862" pos:column="21">[<expr><name><name pos:line="1862" pos:column="22">pC<pos:position pos:line="1862" pos:column="24"/></name><operator pos:line="1862" pos:column="24">-&gt;<pos:position pos:line="1862" pos:column="29"/></operator><name pos:line="1862" pos:column="26">seekResult<pos:position pos:line="1862" pos:column="36"/></name></name></expr>]<pos:position pos:line="1862" pos:column="37"/></index></name></expr>;<pos:position pos:line="1862" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1863" pos:column="9">assert<pos:position pos:line="1863" pos:column="15"/></name><argument_list pos:line="1863" pos:column="15">( <argument><expr><name><name pos:line="1863" pos:column="17">pReg<pos:position pos:line="1863" pos:column="21"/></name><operator pos:line="1863" pos:column="21">-&gt;<pos:position pos:line="1863" pos:column="26"/></operator><name pos:line="1863" pos:column="23">flags<pos:position pos:line="1863" pos:column="28"/></name></name> <operator pos:line="1863" pos:column="29">&amp;<pos:position pos:line="1863" pos:column="34"/></operator> <name pos:line="1863" pos:column="31">MEM_Blob<pos:position pos:line="1863" pos:column="39"/></name></expr></argument> )<pos:position pos:line="1863" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1863" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1864" pos:column="9">assert<pos:position pos:line="1864" pos:column="15"/></name><argument_list pos:line="1864" pos:column="15">( <argument><expr><call><name pos:line="1864" pos:column="17">memIsValid<pos:position pos:line="1864" pos:column="27"/></name><argument_list pos:line="1864" pos:column="27">(<argument><expr><name pos:line="1864" pos:column="28">pReg<pos:position pos:line="1864" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1864" pos:column="33"/></argument_list></call></expr></argument> )<pos:position pos:line="1864" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1864" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="1865" pos:column="9">pC<pos:position pos:line="1865" pos:column="11"/></name><operator pos:line="1865" pos:column="11">-&gt;<pos:position pos:line="1865" pos:column="16"/></operator><name pos:line="1865" pos:column="13">payloadSize<pos:position pos:line="1865" pos:column="24"/></name></name> <operator pos:line="1865" pos:column="25">=<pos:position pos:line="1865" pos:column="26"/></operator> <name><name pos:line="1865" pos:column="27">pC<pos:position pos:line="1865" pos:column="29"/></name><operator pos:line="1865" pos:column="29">-&gt;<pos:position pos:line="1865" pos:column="34"/></operator><name pos:line="1865" pos:column="31">szRow<pos:position pos:line="1865" pos:column="36"/></name></name> <operator pos:line="1865" pos:column="37">=<pos:position pos:line="1865" pos:column="38"/></operator> <name><name pos:line="1865" pos:column="39">pReg<pos:position pos:line="1865" pos:column="43"/></name><operator pos:line="1865" pos:column="43">-&gt;<pos:position pos:line="1865" pos:column="48"/></operator><name pos:line="1865" pos:column="45">n<pos:position pos:line="1865" pos:column="46"/></name></name></expr>;<pos:position pos:line="1865" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="1866" pos:column="9">pC<pos:position pos:line="1866" pos:column="11"/></name><operator pos:line="1866" pos:column="11">-&gt;<pos:position pos:line="1866" pos:column="16"/></operator><name pos:line="1866" pos:column="13">aRow<pos:position pos:line="1866" pos:column="17"/></name></name> <operator pos:line="1866" pos:column="18">=<pos:position pos:line="1866" pos:column="19"/></operator> <operator pos:line="1866" pos:column="20">(<pos:position pos:line="1866" pos:column="21"/></operator><name pos:line="1866" pos:column="21">u8<pos:position pos:line="1866" pos:column="23"/></name><operator pos:line="1866" pos:column="23">*<pos:position pos:line="1866" pos:column="24"/></operator><operator pos:line="1866" pos:column="24">)<pos:position pos:line="1866" pos:column="25"/></operator><name><name pos:line="1866" pos:column="25">pReg<pos:position pos:line="1866" pos:column="29"/></name><operator pos:line="1866" pos:column="29">-&gt;<pos:position pos:line="1866" pos:column="34"/></operator><name pos:line="1866" pos:column="31">z<pos:position pos:line="1866" pos:column="32"/></name></name></expr>;<pos:position pos:line="1866" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="1867" pos:column="8"/></block></then><else pos:line="1867" pos:column="8">else<block pos:line="1867" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="1868" pos:column="9">sqlite3VdbeMemSetNull<pos:position pos:line="1868" pos:column="30"/></name><argument_list pos:line="1868" pos:column="30">(<argument><expr><name pos:line="1868" pos:column="31">pDest<pos:position pos:line="1868" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1868" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1868" pos:column="38"/></expr_stmt>
        <goto pos:line="1869" pos:column="9">goto <name pos:line="1869" pos:column="14">op_column_out<pos:position pos:line="1869" pos:column="27"/></name>;<pos:position pos:line="1869" pos:column="28"/></goto>
      }<pos:position pos:line="1870" pos:column="8"/></block></else></if>
    }<pos:position pos:line="1871" pos:column="6"/></block></then><else pos:line="1871" pos:column="6">else<block pos:line="1871" pos:column="10">{
      <expr_stmt><expr><name pos:line="1872" pos:column="7">pCrsr<pos:position pos:line="1872" pos:column="12"/></name> <operator pos:line="1872" pos:column="13">=<pos:position pos:line="1872" pos:column="14"/></operator> <name><name pos:line="1872" pos:column="15">pC<pos:position pos:line="1872" pos:column="17"/></name><operator pos:line="1872" pos:column="17">-&gt;<pos:position pos:line="1872" pos:column="22"/></operator><name pos:line="1872" pos:column="19">uc<pos:position pos:line="1872" pos:column="21"/></name><operator pos:line="1872" pos:column="21">.<pos:position pos:line="1872" pos:column="22"/></operator><name pos:line="1872" pos:column="22">pCursor<pos:position pos:line="1872" pos:column="29"/></name></name></expr>;<pos:position pos:line="1872" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1873" pos:column="7">assert<pos:position pos:line="1873" pos:column="13"/></name><argument_list pos:line="1873" pos:column="13">( <argument><expr><name><name pos:line="1873" pos:column="15">pC<pos:position pos:line="1873" pos:column="17"/></name><operator pos:line="1873" pos:column="17">-&gt;<pos:position pos:line="1873" pos:column="22"/></operator><name pos:line="1873" pos:column="19">eCurType<pos:position pos:line="1873" pos:column="27"/></name></name><operator pos:line="1873" pos:column="27">==<pos:position pos:line="1873" pos:column="29"/></operator><name pos:line="1873" pos:column="29">CURTYPE_BTREE<pos:position pos:line="1873" pos:column="42"/></name></expr></argument> )<pos:position pos:line="1873" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1873" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1874" pos:column="7">assert<pos:position pos:line="1874" pos:column="13"/></name><argument_list pos:line="1874" pos:column="13">( <argument><expr><name pos:line="1874" pos:column="15">pCrsr<pos:position pos:line="1874" pos:column="20"/></name></expr></argument> )<pos:position pos:line="1874" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="1874" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1875" pos:column="7">assert<pos:position pos:line="1875" pos:column="13"/></name><argument_list pos:line="1875" pos:column="13">( <argument><expr><call><name pos:line="1875" pos:column="15">sqlite3BtreeCursorIsValid<pos:position pos:line="1875" pos:column="40"/></name><argument_list pos:line="1875" pos:column="40">(<argument><expr><name pos:line="1875" pos:column="41">pCrsr<pos:position pos:line="1875" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1875" pos:column="47"/></argument_list></call></expr></argument> )<pos:position pos:line="1875" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1875" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1876" pos:column="7">pC<pos:position pos:line="1876" pos:column="9"/></name><operator pos:line="1876" pos:column="9">-&gt;<pos:position pos:line="1876" pos:column="14"/></operator><name pos:line="1876" pos:column="11">payloadSize<pos:position pos:line="1876" pos:column="22"/></name></name> <operator pos:line="1876" pos:column="23">=<pos:position pos:line="1876" pos:column="24"/></operator> <call><name pos:line="1876" pos:column="25">sqlite3BtreePayloadSize<pos:position pos:line="1876" pos:column="48"/></name><argument_list pos:line="1876" pos:column="48">(<argument><expr><name pos:line="1876" pos:column="49">pCrsr<pos:position pos:line="1876" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1876" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1876" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1877" pos:column="7">pC<pos:position pos:line="1877" pos:column="9"/></name><operator pos:line="1877" pos:column="9">-&gt;<pos:position pos:line="1877" pos:column="14"/></operator><name pos:line="1877" pos:column="11">aRow<pos:position pos:line="1877" pos:column="15"/></name></name> <operator pos:line="1877" pos:column="16">=<pos:position pos:line="1877" pos:column="17"/></operator> <call><name pos:line="1877" pos:column="18">sqlite3BtreePayloadFetch<pos:position pos:line="1877" pos:column="42"/></name><argument_list pos:line="1877" pos:column="42">(<argument><expr><name pos:line="1877" pos:column="43">pCrsr<pos:position pos:line="1877" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="1877" pos:column="50">&amp;<pos:position pos:line="1877" pos:column="55"/></operator><name><name pos:line="1877" pos:column="51">pC<pos:position pos:line="1877" pos:column="53"/></name><operator pos:line="1877" pos:column="53">-&gt;<pos:position pos:line="1877" pos:column="58"/></operator><name pos:line="1877" pos:column="55">szRow<pos:position pos:line="1877" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="1877" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="1877" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1878" pos:column="7">assert<pos:position pos:line="1878" pos:column="13"/></name><argument_list pos:line="1878" pos:column="13">( <argument><expr><name><name pos:line="1878" pos:column="15">pC<pos:position pos:line="1878" pos:column="17"/></name><operator pos:line="1878" pos:column="17">-&gt;<pos:position pos:line="1878" pos:column="22"/></operator><name pos:line="1878" pos:column="19">szRow<pos:position pos:line="1878" pos:column="24"/></name></name><operator pos:line="1878" pos:column="24">&lt;=<pos:position pos:line="1878" pos:column="29"/></operator><name><name pos:line="1878" pos:column="26">pC<pos:position pos:line="1878" pos:column="28"/></name><operator pos:line="1878" pos:column="28">-&gt;<pos:position pos:line="1878" pos:column="33"/></operator><name pos:line="1878" pos:column="30">payloadSize<pos:position pos:line="1878" pos:column="41"/></name></name></expr></argument> )<pos:position pos:line="1878" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1878" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1879" pos:column="7">assert<pos:position pos:line="1879" pos:column="13"/></name><argument_list pos:line="1879" pos:column="13">( <argument><expr><name><name pos:line="1879" pos:column="15">pC<pos:position pos:line="1879" pos:column="17"/></name><operator pos:line="1879" pos:column="17">-&gt;<pos:position pos:line="1879" pos:column="22"/></operator><name pos:line="1879" pos:column="19">szRow<pos:position pos:line="1879" pos:column="24"/></name></name><operator pos:line="1879" pos:column="24">&lt;=<pos:position pos:line="1879" pos:column="29"/></operator><literal type="number" pos:line="1879" pos:column="26">65536<pos:position pos:line="1879" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="1879" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1879" pos:column="34"/></expr_stmt>  <comment type="block" pos:line="1879" pos:column="36">/* Maximum page size is 64KiB */</comment>
      <if pos:line="1880" pos:column="7">if<condition pos:line="1880" pos:column="9">( <expr><name><name pos:line="1880" pos:column="11">pC<pos:position pos:line="1880" pos:column="13"/></name><operator pos:line="1880" pos:column="13">-&gt;<pos:position pos:line="1880" pos:column="18"/></operator><name pos:line="1880" pos:column="15">payloadSize<pos:position pos:line="1880" pos:column="26"/></name></name> <operator pos:line="1880" pos:column="27">&gt;<pos:position pos:line="1880" pos:column="31"/></operator> <operator pos:line="1880" pos:column="29">(<pos:position pos:line="1880" pos:column="30"/></operator><name pos:line="1880" pos:column="30">u32<pos:position pos:line="1880" pos:column="33"/></name><operator pos:line="1880" pos:column="33">)<pos:position pos:line="1880" pos:column="34"/></operator><name><name pos:line="1880" pos:column="34">db<pos:position pos:line="1880" pos:column="36"/></name><operator pos:line="1880" pos:column="36">-&gt;<pos:position pos:line="1880" pos:column="41"/></operator><name pos:line="1880" pos:column="38">aLimit<pos:position pos:line="1880" pos:column="44"/></name><index pos:line="1880" pos:column="44">[<expr><name pos:line="1880" pos:column="45">SQLITE_LIMIT_LENGTH<pos:position pos:line="1880" pos:column="64"/></name></expr>]<pos:position pos:line="1880" pos:column="65"/></index></name></expr> )<pos:position pos:line="1880" pos:column="67"/></condition><then><block pos:line="1880" pos:column="67">{
        <goto pos:line="1881" pos:column="9">goto <name pos:line="1881" pos:column="14">too_big<pos:position pos:line="1881" pos:column="21"/></name>;<pos:position pos:line="1881" pos:column="22"/></goto>
      }<pos:position pos:line="1882" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1883" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name><name pos:line="1884" pos:column="5">pC<pos:position pos:line="1884" pos:column="7"/></name><operator pos:line="1884" pos:column="7">-&gt;<pos:position pos:line="1884" pos:column="12"/></operator><name pos:line="1884" pos:column="9">cacheStatus<pos:position pos:line="1884" pos:column="20"/></name></name> <operator pos:line="1884" pos:column="21">=<pos:position pos:line="1884" pos:column="22"/></operator> <name><name pos:line="1884" pos:column="23">p<pos:position pos:line="1884" pos:column="24"/></name><operator pos:line="1884" pos:column="24">-&gt;<pos:position pos:line="1884" pos:column="29"/></operator><name pos:line="1884" pos:column="26">cacheCtr<pos:position pos:line="1884" pos:column="34"/></name></name></expr>;<pos:position pos:line="1884" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1885" pos:column="5">pC<pos:position pos:line="1885" pos:column="7"/></name><operator pos:line="1885" pos:column="7">-&gt;<pos:position pos:line="1885" pos:column="12"/></operator><name pos:line="1885" pos:column="9">iHdrOffset<pos:position pos:line="1885" pos:column="19"/></name></name> <operator pos:line="1885" pos:column="20">=<pos:position pos:line="1885" pos:column="21"/></operator> <call><name pos:line="1885" pos:column="22">getVarint32<pos:position pos:line="1885" pos:column="33"/></name><argument_list pos:line="1885" pos:column="33">(<argument><expr><name><name pos:line="1885" pos:column="34">pC<pos:position pos:line="1885" pos:column="36"/></name><operator pos:line="1885" pos:column="36">-&gt;<pos:position pos:line="1885" pos:column="41"/></operator><name pos:line="1885" pos:column="38">aRow<pos:position pos:line="1885" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1885" pos:column="44">aOffset<pos:position pos:line="1885" pos:column="51"/></name><index pos:line="1885" pos:column="51">[<expr><literal type="number" pos:line="1885" pos:column="52">0<pos:position pos:line="1885" pos:column="53"/></literal></expr>]<pos:position pos:line="1885" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="1885" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1885" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1886" pos:column="5">pC<pos:position pos:line="1886" pos:column="7"/></name><operator pos:line="1886" pos:column="7">-&gt;<pos:position pos:line="1886" pos:column="12"/></operator><name pos:line="1886" pos:column="9">nHdrParsed<pos:position pos:line="1886" pos:column="19"/></name></name> <operator pos:line="1886" pos:column="20">=<pos:position pos:line="1886" pos:column="21"/></operator> <literal type="number" pos:line="1886" pos:column="22">0<pos:position pos:line="1886" pos:column="23"/></literal></expr>;<pos:position pos:line="1886" pos:column="24"/></expr_stmt>


    <if pos:line="1889" pos:column="5">if<condition pos:line="1889" pos:column="7">( <expr><name><name pos:line="1889" pos:column="9">pC<pos:position pos:line="1889" pos:column="11"/></name><operator pos:line="1889" pos:column="11">-&gt;<pos:position pos:line="1889" pos:column="16"/></operator><name pos:line="1889" pos:column="13">szRow<pos:position pos:line="1889" pos:column="18"/></name></name><operator pos:line="1889" pos:column="18">&lt;<pos:position pos:line="1889" pos:column="22"/></operator><name><name pos:line="1889" pos:column="19">aOffset<pos:position pos:line="1889" pos:column="26"/></name><index pos:line="1889" pos:column="26">[<expr><literal type="number" pos:line="1889" pos:column="27">0<pos:position pos:line="1889" pos:column="28"/></literal></expr>]<pos:position pos:line="1889" pos:column="29"/></index></name></expr> )<pos:position pos:line="1889" pos:column="31"/></condition><then><block pos:line="1889" pos:column="31">{      <comment type="block" pos:line="1889" pos:column="38">/*OPTIMIZATION-IF-FALSE*/</comment>
      <comment type="block" pos:line="1890" pos:column="7">/* pC-&gt;aRow does not have to hold the entire row, but it does at least
      ** need to cover the header of the record.  If pC-&gt;aRow does not contain
      ** the complete header, then set it to zero, forcing the header to be
      ** dynamically allocated. */</comment>
      <expr_stmt><expr><name><name pos:line="1894" pos:column="7">pC<pos:position pos:line="1894" pos:column="9"/></name><operator pos:line="1894" pos:column="9">-&gt;<pos:position pos:line="1894" pos:column="14"/></operator><name pos:line="1894" pos:column="11">aRow<pos:position pos:line="1894" pos:column="15"/></name></name> <operator pos:line="1894" pos:column="16">=<pos:position pos:line="1894" pos:column="17"/></operator> <literal type="number" pos:line="1894" pos:column="18">0<pos:position pos:line="1894" pos:column="19"/></literal></expr>;<pos:position pos:line="1894" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1895" pos:column="7">pC<pos:position pos:line="1895" pos:column="9"/></name><operator pos:line="1895" pos:column="9">-&gt;<pos:position pos:line="1895" pos:column="14"/></operator><name pos:line="1895" pos:column="11">szRow<pos:position pos:line="1895" pos:column="16"/></name></name> <operator pos:line="1895" pos:column="17">=<pos:position pos:line="1895" pos:column="18"/></operator> <literal type="number" pos:line="1895" pos:column="19">0<pos:position pos:line="1895" pos:column="20"/></literal></expr>;<pos:position pos:line="1895" pos:column="21"/></expr_stmt>

      <comment type="block" pos:line="1897" pos:column="7">/* Make sure a corrupt database has not given us an oversize header.
      ** Do this now to avoid an oversize memory allocation.
      **
      ** Type entries can be between 1 and 5 bytes each.  But 4 and 5 byte
      ** types use so much data space that there can only be 4096 and 32 of
      ** them, respectively.  So the maximum header length results from a
      ** 3-byte type for each of the maximum of 32768 columns plus three
      ** extra bytes for the header length itself.  32768*3 + 3 = 98307.
      */</comment>
      <if pos:line="1906" pos:column="7">if<condition pos:line="1906" pos:column="9">( <expr><name><name pos:line="1906" pos:column="11">aOffset<pos:position pos:line="1906" pos:column="18"/></name><index pos:line="1906" pos:column="18">[<expr><literal type="number" pos:line="1906" pos:column="19">0<pos:position pos:line="1906" pos:column="20"/></literal></expr>]<pos:position pos:line="1906" pos:column="21"/></index></name> <operator pos:line="1906" pos:column="22">&gt;<pos:position pos:line="1906" pos:column="26"/></operator> <literal type="number" pos:line="1906" pos:column="24">98307<pos:position pos:line="1906" pos:column="29"/></literal> <operator pos:line="1906" pos:column="30">||<pos:position pos:line="1906" pos:column="32"/></operator> <name><name pos:line="1906" pos:column="33">aOffset<pos:position pos:line="1906" pos:column="40"/></name><index pos:line="1906" pos:column="40">[<expr><literal type="number" pos:line="1906" pos:column="41">0<pos:position pos:line="1906" pos:column="42"/></literal></expr>]<pos:position pos:line="1906" pos:column="43"/></index></name> <operator pos:line="1906" pos:column="44">&gt;<pos:position pos:line="1906" pos:column="48"/></operator> <name><name pos:line="1906" pos:column="46">pC<pos:position pos:line="1906" pos:column="48"/></name><operator pos:line="1906" pos:column="48">-&gt;<pos:position pos:line="1906" pos:column="53"/></operator><name pos:line="1906" pos:column="50">payloadSize<pos:position pos:line="1906" pos:column="61"/></name></name></expr> )<pos:position pos:line="1906" pos:column="63"/></condition><then><block pos:line="1906" pos:column="63">{
        <goto pos:line="1907" pos:column="9">goto <name pos:line="1907" pos:column="14">op_column_corrupt<pos:position pos:line="1907" pos:column="31"/></name>;<pos:position pos:line="1907" pos:column="32"/></goto>
      }<pos:position pos:line="1908" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1909" pos:column="6"/></block></then><else pos:line="1909" pos:column="6">else<block pos:line="1909" pos:column="10">{
      <comment type="block" pos:line="1910" pos:column="7">/* This is an optimization.  By skipping over the first few tests
      ** (ex: pC-&gt;nHdrParsed&lt;=p2) in the next section, we achieve a
      ** measurable performance gain.
      **
      ** This branch is taken even if aOffset[0]==0.  Such a record is never
      ** generated by SQLite, and could be considered corruption, but we
      ** accept it for historical reasons.  When aOffset[0]==0, the code this
      ** branch jumps to reads past the end of the record, but never more
      ** than a few bytes.  Even if the record occurs at the end of the page
      ** content area, the "page header" comes after the page content and so
      ** this overread is harmless.  Similar overreads can occur for a corrupt
      ** database file.
      */</comment>
      <expr_stmt><expr><name pos:line="1923" pos:column="7">zData<pos:position pos:line="1923" pos:column="12"/></name> <operator pos:line="1923" pos:column="13">=<pos:position pos:line="1923" pos:column="14"/></operator> <name><name pos:line="1923" pos:column="15">pC<pos:position pos:line="1923" pos:column="17"/></name><operator pos:line="1923" pos:column="17">-&gt;<pos:position pos:line="1923" pos:column="22"/></operator><name pos:line="1923" pos:column="19">aRow<pos:position pos:line="1923" pos:column="23"/></name></name></expr>;<pos:position pos:line="1923" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1924" pos:column="7">assert<pos:position pos:line="1924" pos:column="13"/></name><argument_list pos:line="1924" pos:column="13">( <argument><expr><name><name pos:line="1924" pos:column="15">pC<pos:position pos:line="1924" pos:column="17"/></name><operator pos:line="1924" pos:column="17">-&gt;<pos:position pos:line="1924" pos:column="22"/></operator><name pos:line="1924" pos:column="19">nHdrParsed<pos:position pos:line="1924" pos:column="29"/></name></name><operator pos:line="1924" pos:column="29">&lt;=<pos:position pos:line="1924" pos:column="34"/></operator><name pos:line="1924" pos:column="31">p2<pos:position pos:line="1924" pos:column="33"/></name></expr></argument> )<pos:position pos:line="1924" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1924" pos:column="36"/></expr_stmt>         <comment type="block" pos:line="1924" pos:column="45">/* Conditional skipped */</comment>
      <expr_stmt><expr><call><name pos:line="1925" pos:column="7">testcase<pos:position pos:line="1925" pos:column="15"/></name><argument_list pos:line="1925" pos:column="15">( <argument><expr><name><name pos:line="1925" pos:column="17">aOffset<pos:position pos:line="1925" pos:column="24"/></name><index pos:line="1925" pos:column="24">[<expr><literal type="number" pos:line="1925" pos:column="25">0<pos:position pos:line="1925" pos:column="26"/></literal></expr>]<pos:position pos:line="1925" pos:column="27"/></index></name><operator pos:line="1925" pos:column="27">==<pos:position pos:line="1925" pos:column="29"/></operator><literal type="number" pos:line="1925" pos:column="29">0<pos:position pos:line="1925" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="1925" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1925" pos:column="33"/></expr_stmt>
      <goto pos:line="1926" pos:column="7">goto <name pos:line="1926" pos:column="12">op_column_read_header<pos:position pos:line="1926" pos:column="33"/></name>;<pos:position pos:line="1926" pos:column="34"/></goto>
    }<pos:position pos:line="1927" pos:column="6"/></block></else></if>
  }<pos:position pos:line="1928" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="1930" pos:column="3">/* Make sure at least the first p2+1 entries of the header have been
  ** parsed and valid information is in aOffset[] and pC-&gt;aType[].
  */</comment>
  <if pos:line="1933" pos:column="3">if<condition pos:line="1933" pos:column="5">( <expr><name><name pos:line="1933" pos:column="7">pC<pos:position pos:line="1933" pos:column="9"/></name><operator pos:line="1933" pos:column="9">-&gt;<pos:position pos:line="1933" pos:column="14"/></operator><name pos:line="1933" pos:column="11">nHdrParsed<pos:position pos:line="1933" pos:column="21"/></name></name><operator pos:line="1933" pos:column="21">&lt;=<pos:position pos:line="1933" pos:column="26"/></operator><name pos:line="1933" pos:column="23">p2<pos:position pos:line="1933" pos:column="25"/></name></expr> )<pos:position pos:line="1933" pos:column="27"/></condition><then><block pos:line="1933" pos:column="27">{
    <comment type="block" pos:line="1934" pos:column="5">/* If there is more header available for parsing in the record, try
    ** to extract additional fields up through the p2+1-th field 
    */</comment>
    <if pos:line="1937" pos:column="5">if<condition pos:line="1937" pos:column="7">( <expr><name><name pos:line="1937" pos:column="9">pC<pos:position pos:line="1937" pos:column="11"/></name><operator pos:line="1937" pos:column="11">-&gt;<pos:position pos:line="1937" pos:column="16"/></operator><name pos:line="1937" pos:column="13">iHdrOffset<pos:position pos:line="1937" pos:column="23"/></name></name><operator pos:line="1937" pos:column="23">&lt;<pos:position pos:line="1937" pos:column="27"/></operator><name><name pos:line="1937" pos:column="24">aOffset<pos:position pos:line="1937" pos:column="31"/></name><index pos:line="1937" pos:column="31">[<expr><literal type="number" pos:line="1937" pos:column="32">0<pos:position pos:line="1937" pos:column="33"/></literal></expr>]<pos:position pos:line="1937" pos:column="34"/></index></name></expr> )<pos:position pos:line="1937" pos:column="36"/></condition><then><block pos:line="1937" pos:column="36">{
      <comment type="block" pos:line="1938" pos:column="7">/* Make sure zData points to enough of the record to cover the header. */</comment>
      <if pos:line="1939" pos:column="7">if<condition pos:line="1939" pos:column="9">( <expr><name><name pos:line="1939" pos:column="11">pC<pos:position pos:line="1939" pos:column="13"/></name><operator pos:line="1939" pos:column="13">-&gt;<pos:position pos:line="1939" pos:column="18"/></operator><name pos:line="1939" pos:column="15">aRow<pos:position pos:line="1939" pos:column="19"/></name></name><operator pos:line="1939" pos:column="19">==<pos:position pos:line="1939" pos:column="21"/></operator><literal type="number" pos:line="1939" pos:column="21">0<pos:position pos:line="1939" pos:column="22"/></literal></expr> )<pos:position pos:line="1939" pos:column="24"/></condition><then><block pos:line="1939" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="1940" pos:column="9">memset<pos:position pos:line="1940" pos:column="15"/></name><argument_list pos:line="1940" pos:column="15">(<argument><expr><operator pos:line="1940" pos:column="16">&amp;<pos:position pos:line="1940" pos:column="21"/></operator><name pos:line="1940" pos:column="17">sMem<pos:position pos:line="1940" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1940" pos:column="23">0<pos:position pos:line="1940" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="1940" pos:column="26">sizeof<argument_list pos:line="1940" pos:column="32">(<argument><expr><name pos:line="1940" pos:column="33">sMem<pos:position pos:line="1940" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1940" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1940" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1940" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1941" pos:column="9">rc<pos:position pos:line="1941" pos:column="11"/></name> <operator pos:line="1941" pos:column="12">=<pos:position pos:line="1941" pos:column="13"/></operator> <call><name pos:line="1941" pos:column="14">sqlite3VdbeMemFromBtree<pos:position pos:line="1941" pos:column="37"/></name><argument_list pos:line="1941" pos:column="37">(<argument><expr><name><name pos:line="1941" pos:column="38">pC<pos:position pos:line="1941" pos:column="40"/></name><operator pos:line="1941" pos:column="40">-&gt;<pos:position pos:line="1941" pos:column="45"/></operator><name pos:line="1941" pos:column="42">uc<pos:position pos:line="1941" pos:column="44"/></name><operator pos:line="1941" pos:column="44">.<pos:position pos:line="1941" pos:column="45"/></operator><name pos:line="1941" pos:column="45">pCursor<pos:position pos:line="1941" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="1941" pos:column="54">0<pos:position pos:line="1941" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="1941" pos:column="57">aOffset<pos:position pos:line="1941" pos:column="64"/></name><index pos:line="1941" pos:column="64">[<expr><literal type="number" pos:line="1941" pos:column="65">0<pos:position pos:line="1941" pos:column="66"/></literal></expr>]<pos:position pos:line="1941" pos:column="67"/></index></name></expr></argument>, <argument><expr><operator pos:line="1941" pos:column="69">&amp;<pos:position pos:line="1941" pos:column="74"/></operator><name pos:line="1941" pos:column="70">sMem<pos:position pos:line="1941" pos:column="74"/></name></expr></argument>)<pos:position pos:line="1941" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="1941" pos:column="76"/></expr_stmt>
        <if pos:line="1942" pos:column="9">if<condition pos:line="1942" pos:column="11">( <expr><name pos:line="1942" pos:column="13">rc<pos:position pos:line="1942" pos:column="15"/></name><operator pos:line="1942" pos:column="15">!=<pos:position pos:line="1942" pos:column="17"/></operator><name pos:line="1942" pos:column="17">SQLITE_OK<pos:position pos:line="1942" pos:column="26"/></name></expr> )<pos:position pos:line="1942" pos:column="28"/></condition><then pos:line="1942" pos:column="28"> <block type="pseudo"><goto pos:line="1942" pos:column="29">goto <name pos:line="1942" pos:column="34">abort_due_to_error<pos:position pos:line="1942" pos:column="52"/></name>;<pos:position pos:line="1942" pos:column="53"/></goto></block></then></if>
        <expr_stmt><expr><name pos:line="1943" pos:column="9">zData<pos:position pos:line="1943" pos:column="14"/></name> <operator pos:line="1943" pos:column="15">=<pos:position pos:line="1943" pos:column="16"/></operator> <operator pos:line="1943" pos:column="17">(<pos:position pos:line="1943" pos:column="18"/></operator><name pos:line="1943" pos:column="18">u8<pos:position pos:line="1943" pos:column="20"/></name><operator pos:line="1943" pos:column="20">*<pos:position pos:line="1943" pos:column="21"/></operator><operator pos:line="1943" pos:column="21">)<pos:position pos:line="1943" pos:column="22"/></operator><name><name pos:line="1943" pos:column="22">sMem<pos:position pos:line="1943" pos:column="26"/></name><operator pos:line="1943" pos:column="26">.<pos:position pos:line="1943" pos:column="27"/></operator><name pos:line="1943" pos:column="27">z<pos:position pos:line="1943" pos:column="28"/></name></name></expr>;<pos:position pos:line="1943" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="1944" pos:column="8"/></block></then><else pos:line="1944" pos:column="8">else<block pos:line="1944" pos:column="12">{
        <expr_stmt><expr><name pos:line="1945" pos:column="9">zData<pos:position pos:line="1945" pos:column="14"/></name> <operator pos:line="1945" pos:column="15">=<pos:position pos:line="1945" pos:column="16"/></operator> <name><name pos:line="1945" pos:column="17">pC<pos:position pos:line="1945" pos:column="19"/></name><operator pos:line="1945" pos:column="19">-&gt;<pos:position pos:line="1945" pos:column="24"/></operator><name pos:line="1945" pos:column="21">aRow<pos:position pos:line="1945" pos:column="25"/></name></name></expr>;<pos:position pos:line="1945" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="1946" pos:column="8"/></block></else></if>
  
      <comment type="block" pos:line="1948" pos:column="7">/* Fill in pC-&gt;aType[i] and aOffset[i] values through the p2-th field. */</comment>
    <label><name pos:line="1949" pos:column="5">op_column_read_header<pos:position pos:line="1949" pos:column="26"/></name>:<pos:position pos:line="1949" pos:column="27"/></label>
      <expr_stmt><expr><name pos:line="1950" pos:column="7">i<pos:position pos:line="1950" pos:column="8"/></name> <operator pos:line="1950" pos:column="9">=<pos:position pos:line="1950" pos:column="10"/></operator> <name><name pos:line="1950" pos:column="11">pC<pos:position pos:line="1950" pos:column="13"/></name><operator pos:line="1950" pos:column="13">-&gt;<pos:position pos:line="1950" pos:column="18"/></operator><name pos:line="1950" pos:column="15">nHdrParsed<pos:position pos:line="1950" pos:column="25"/></name></name></expr>;<pos:position pos:line="1950" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1951" pos:column="7">offset64<pos:position pos:line="1951" pos:column="15"/></name> <operator pos:line="1951" pos:column="16">=<pos:position pos:line="1951" pos:column="17"/></operator> <name><name pos:line="1951" pos:column="18">aOffset<pos:position pos:line="1951" pos:column="25"/></name><index pos:line="1951" pos:column="25">[<expr><name pos:line="1951" pos:column="26">i<pos:position pos:line="1951" pos:column="27"/></name></expr>]<pos:position pos:line="1951" pos:column="28"/></index></name></expr>;<pos:position pos:line="1951" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1952" pos:column="7">zHdr<pos:position pos:line="1952" pos:column="11"/></name> <operator pos:line="1952" pos:column="12">=<pos:position pos:line="1952" pos:column="13"/></operator> <name pos:line="1952" pos:column="14">zData<pos:position pos:line="1952" pos:column="19"/></name> <operator pos:line="1952" pos:column="20">+<pos:position pos:line="1952" pos:column="21"/></operator> <name><name pos:line="1952" pos:column="22">pC<pos:position pos:line="1952" pos:column="24"/></name><operator pos:line="1952" pos:column="24">-&gt;<pos:position pos:line="1952" pos:column="29"/></operator><name pos:line="1952" pos:column="26">iHdrOffset<pos:position pos:line="1952" pos:column="36"/></name></name></expr>;<pos:position pos:line="1952" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1953" pos:column="7">zEndHdr<pos:position pos:line="1953" pos:column="14"/></name> <operator pos:line="1953" pos:column="15">=<pos:position pos:line="1953" pos:column="16"/></operator> <name pos:line="1953" pos:column="17">zData<pos:position pos:line="1953" pos:column="22"/></name> <operator pos:line="1953" pos:column="23">+<pos:position pos:line="1953" pos:column="24"/></operator> <name><name pos:line="1953" pos:column="25">aOffset<pos:position pos:line="1953" pos:column="32"/></name><index pos:line="1953" pos:column="32">[<expr><literal type="number" pos:line="1953" pos:column="33">0<pos:position pos:line="1953" pos:column="34"/></literal></expr>]<pos:position pos:line="1953" pos:column="35"/></index></name></expr>;<pos:position pos:line="1953" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1954" pos:column="7">testcase<pos:position pos:line="1954" pos:column="15"/></name><argument_list pos:line="1954" pos:column="15">( <argument><expr><name pos:line="1954" pos:column="17">zHdr<pos:position pos:line="1954" pos:column="21"/></name><operator pos:line="1954" pos:column="21">&gt;=<pos:position pos:line="1954" pos:column="26"/></operator><name pos:line="1954" pos:column="23">zEndHdr<pos:position pos:line="1954" pos:column="30"/></name></expr></argument> )<pos:position pos:line="1954" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1954" pos:column="33"/></expr_stmt>
      <do pos:line="1955" pos:column="7">do<block pos:line="1955" pos:column="9">{
        <if pos:line="1956" pos:column="9">if<condition pos:line="1956" pos:column="11">( <expr><operator pos:line="1956" pos:column="13">(<pos:position pos:line="1956" pos:column="14"/></operator><name pos:line="1956" pos:column="14">t<pos:position pos:line="1956" pos:column="15"/></name> <operator pos:line="1956" pos:column="16">=<pos:position pos:line="1956" pos:column="17"/></operator> <name><name pos:line="1956" pos:column="18">zHdr<pos:position pos:line="1956" pos:column="22"/></name><index pos:line="1956" pos:column="22">[<expr><literal type="number" pos:line="1956" pos:column="23">0<pos:position pos:line="1956" pos:column="24"/></literal></expr>]<pos:position pos:line="1956" pos:column="25"/></index></name><operator pos:line="1956" pos:column="25">)<pos:position pos:line="1956" pos:column="26"/></operator><operator pos:line="1956" pos:column="26">&lt;<pos:position pos:line="1956" pos:column="30"/></operator><literal type="number" pos:line="1956" pos:column="27">0x80<pos:position pos:line="1956" pos:column="31"/></literal></expr> )<pos:position pos:line="1956" pos:column="33"/></condition><then><block pos:line="1956" pos:column="33">{
          <expr_stmt><expr><name pos:line="1957" pos:column="11">zHdr<pos:position pos:line="1957" pos:column="15"/></name><operator pos:line="1957" pos:column="15">++<pos:position pos:line="1957" pos:column="17"/></operator></expr>;<pos:position pos:line="1957" pos:column="18"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1958" pos:column="11">offset64<pos:position pos:line="1958" pos:column="19"/></name> <operator pos:line="1958" pos:column="20">+=<pos:position pos:line="1958" pos:column="22"/></operator> <call><name pos:line="1958" pos:column="23">sqlite3VdbeOneByteSerialTypeLen<pos:position pos:line="1958" pos:column="54"/></name><argument_list pos:line="1958" pos:column="54">(<argument><expr><name pos:line="1958" pos:column="55">t<pos:position pos:line="1958" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1958" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1958" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="1959" pos:column="10"/></block></then><else pos:line="1959" pos:column="10">else<block pos:line="1959" pos:column="14">{
          <expr_stmt><expr><name pos:line="1960" pos:column="11">zHdr<pos:position pos:line="1960" pos:column="15"/></name> <operator pos:line="1960" pos:column="16">+=<pos:position pos:line="1960" pos:column="18"/></operator> <call><name pos:line="1960" pos:column="19">sqlite3GetVarint32<pos:position pos:line="1960" pos:column="37"/></name><argument_list pos:line="1960" pos:column="37">(<argument><expr><name pos:line="1960" pos:column="38">zHdr<pos:position pos:line="1960" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="1960" pos:column="44">&amp;<pos:position pos:line="1960" pos:column="49"/></operator><name pos:line="1960" pos:column="45">t<pos:position pos:line="1960" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1960" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="1960" pos:column="48"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1961" pos:column="11">offset64<pos:position pos:line="1961" pos:column="19"/></name> <operator pos:line="1961" pos:column="20">+=<pos:position pos:line="1961" pos:column="22"/></operator> <call><name pos:line="1961" pos:column="23">sqlite3VdbeSerialTypeLen<pos:position pos:line="1961" pos:column="47"/></name><argument_list pos:line="1961" pos:column="47">(<argument><expr><name pos:line="1961" pos:column="48">t<pos:position pos:line="1961" pos:column="49"/></name></expr></argument>)<pos:position pos:line="1961" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1961" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="1962" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name><name pos:line="1963" pos:column="9">pC<pos:position pos:line="1963" pos:column="11"/></name><operator pos:line="1963" pos:column="11">-&gt;<pos:position pos:line="1963" pos:column="16"/></operator><name pos:line="1963" pos:column="13">aType<pos:position pos:line="1963" pos:column="18"/></name><index pos:line="1963" pos:column="18">[<expr><name pos:line="1963" pos:column="19">i<pos:position pos:line="1963" pos:column="20"/></name><operator pos:line="1963" pos:column="20">++<pos:position pos:line="1963" pos:column="22"/></operator></expr>]<pos:position pos:line="1963" pos:column="23"/></index></name> <operator pos:line="1963" pos:column="24">=<pos:position pos:line="1963" pos:column="25"/></operator> <name pos:line="1963" pos:column="26">t<pos:position pos:line="1963" pos:column="27"/></name></expr>;<pos:position pos:line="1963" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="1964" pos:column="9">aOffset<pos:position pos:line="1964" pos:column="16"/></name><index pos:line="1964" pos:column="16">[<expr><name pos:line="1964" pos:column="17">i<pos:position pos:line="1964" pos:column="18"/></name></expr>]<pos:position pos:line="1964" pos:column="19"/></index></name> <operator pos:line="1964" pos:column="20">=<pos:position pos:line="1964" pos:column="21"/></operator> <call pos:line="1964" pos:column="22">(<name pos:line="1964" pos:column="23">u32<pos:position pos:line="1964" pos:column="26"/></name>)<argument_list pos:line="1964" pos:column="27">(<argument><expr><name pos:line="1964" pos:column="28">offset64<pos:position pos:line="1964" pos:column="36"/></name> <operator pos:line="1964" pos:column="37">&amp;<pos:position pos:line="1964" pos:column="42"/></operator> <literal type="number" pos:line="1964" pos:column="39">0xffffffff<pos:position pos:line="1964" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="1964" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1964" pos:column="51"/></expr_stmt>
      }<pos:position pos:line="1965" pos:column="8"/></block>while<condition pos:line="1965" pos:column="13">( <expr><name pos:line="1965" pos:column="15">i<pos:position pos:line="1965" pos:column="16"/></name><operator pos:line="1965" pos:column="16">&lt;=<pos:position pos:line="1965" pos:column="21"/></operator><name pos:line="1965" pos:column="18">p2<pos:position pos:line="1965" pos:column="20"/></name> <operator pos:line="1965" pos:column="21">&amp;&amp;<pos:position pos:line="1965" pos:column="31"/></operator> <name pos:line="1965" pos:column="24">zHdr<pos:position pos:line="1965" pos:column="28"/></name><operator pos:line="1965" pos:column="28">&lt;<pos:position pos:line="1965" pos:column="32"/></operator><name pos:line="1965" pos:column="29">zEndHdr<pos:position pos:line="1965" pos:column="36"/></name></expr> )<pos:position pos:line="1965" pos:column="38"/></condition>;<pos:position pos:line="1965" pos:column="39"/></do>

      <comment type="block" pos:line="1967" pos:column="7">/* The record is corrupt if any of the following are true:
      ** (1) the bytes of the header extend past the declared header size
      ** (2) the entire header was used but not all data was used
      ** (3) the end of the data extends beyond the end of the record.
      */</comment>
      <if pos:line="1972" pos:column="7">if<condition pos:line="1972" pos:column="9">( <expr><operator pos:line="1972" pos:column="11">(<pos:position pos:line="1972" pos:column="12"/></operator><name pos:line="1972" pos:column="12">zHdr<pos:position pos:line="1972" pos:column="16"/></name><operator pos:line="1972" pos:column="16">&gt;=<pos:position pos:line="1972" pos:column="21"/></operator><name pos:line="1972" pos:column="18">zEndHdr<pos:position pos:line="1972" pos:column="25"/></name> <operator pos:line="1972" pos:column="26">&amp;&amp;<pos:position pos:line="1972" pos:column="36"/></operator> <operator pos:line="1972" pos:column="29">(<pos:position pos:line="1972" pos:column="30"/></operator><name pos:line="1972" pos:column="30">zHdr<pos:position pos:line="1972" pos:column="34"/></name><operator pos:line="1972" pos:column="34">&gt;<pos:position pos:line="1972" pos:column="38"/></operator><name pos:line="1972" pos:column="35">zEndHdr<pos:position pos:line="1972" pos:column="42"/></name> <operator pos:line="1972" pos:column="43">||<pos:position pos:line="1972" pos:column="45"/></operator> <name pos:line="1972" pos:column="46">offset64<pos:position pos:line="1972" pos:column="54"/></name><operator pos:line="1972" pos:column="54">!=<pos:position pos:line="1972" pos:column="56"/></operator><name><name pos:line="1972" pos:column="56">pC<pos:position pos:line="1972" pos:column="58"/></name><operator pos:line="1972" pos:column="58">-&gt;<pos:position pos:line="1972" pos:column="63"/></operator><name pos:line="1972" pos:column="60">payloadSize<pos:position pos:line="1972" pos:column="71"/></name></name><operator pos:line="1972" pos:column="71">)<pos:position pos:line="1972" pos:column="72"/></operator><operator pos:line="1972" pos:column="72">)<pos:position pos:line="1972" pos:column="73"/></operator>
       <operator pos:line="1973" pos:column="8">||<pos:position pos:line="1973" pos:column="10"/></operator> <operator pos:line="1973" pos:column="11">(<pos:position pos:line="1973" pos:column="12"/></operator><name pos:line="1973" pos:column="12">offset64<pos:position pos:line="1973" pos:column="20"/></name> <operator pos:line="1973" pos:column="21">&gt;<pos:position pos:line="1973" pos:column="25"/></operator> <name><name pos:line="1973" pos:column="23">pC<pos:position pos:line="1973" pos:column="25"/></name><operator pos:line="1973" pos:column="25">-&gt;<pos:position pos:line="1973" pos:column="30"/></operator><name pos:line="1973" pos:column="27">payloadSize<pos:position pos:line="1973" pos:column="38"/></name></name><operator pos:line="1973" pos:column="38">)<pos:position pos:line="1973" pos:column="39"/></operator></expr>
      )<pos:position pos:line="1974" pos:column="8"/></condition><then><block pos:line="1974" pos:column="8">{
        <if pos:line="1975" pos:column="9">if<condition pos:line="1975" pos:column="11">( <expr><name><name pos:line="1975" pos:column="13">aOffset<pos:position pos:line="1975" pos:column="20"/></name><index pos:line="1975" pos:column="20">[<expr><literal type="number" pos:line="1975" pos:column="21">0<pos:position pos:line="1975" pos:column="22"/></literal></expr>]<pos:position pos:line="1975" pos:column="23"/></index></name><operator pos:line="1975" pos:column="23">==<pos:position pos:line="1975" pos:column="25"/></operator><literal type="number" pos:line="1975" pos:column="25">0<pos:position pos:line="1975" pos:column="26"/></literal></expr> )<pos:position pos:line="1975" pos:column="28"/></condition><then><block pos:line="1975" pos:column="28">{
          <expr_stmt><expr><name pos:line="1976" pos:column="11">i<pos:position pos:line="1976" pos:column="12"/></name> <operator pos:line="1976" pos:column="13">=<pos:position pos:line="1976" pos:column="14"/></operator> <literal type="number" pos:line="1976" pos:column="15">0<pos:position pos:line="1976" pos:column="16"/></literal></expr>;<pos:position pos:line="1976" pos:column="17"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1977" pos:column="11">zHdr<pos:position pos:line="1977" pos:column="15"/></name> <operator pos:line="1977" pos:column="16">=<pos:position pos:line="1977" pos:column="17"/></operator> <name pos:line="1977" pos:column="18">zEndHdr<pos:position pos:line="1977" pos:column="25"/></name></expr>;<pos:position pos:line="1977" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="1978" pos:column="10"/></block></then><else pos:line="1978" pos:column="10">else<block pos:line="1978" pos:column="14">{
          <if pos:line="1979" pos:column="11">if<condition pos:line="1979" pos:column="13">( <expr><name><name pos:line="1979" pos:column="15">pC<pos:position pos:line="1979" pos:column="17"/></name><operator pos:line="1979" pos:column="17">-&gt;<pos:position pos:line="1979" pos:column="22"/></operator><name pos:line="1979" pos:column="19">aRow<pos:position pos:line="1979" pos:column="23"/></name></name><operator pos:line="1979" pos:column="23">==<pos:position pos:line="1979" pos:column="25"/></operator><literal type="number" pos:line="1979" pos:column="25">0<pos:position pos:line="1979" pos:column="26"/></literal></expr> )<pos:position pos:line="1979" pos:column="28"/></condition><then pos:line="1979" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="1979" pos:column="29">sqlite3VdbeMemRelease<pos:position pos:line="1979" pos:column="50"/></name><argument_list pos:line="1979" pos:column="50">(<argument><expr><operator pos:line="1979" pos:column="51">&amp;<pos:position pos:line="1979" pos:column="56"/></operator><name pos:line="1979" pos:column="52">sMem<pos:position pos:line="1979" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1979" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1979" pos:column="58"/></expr_stmt></block></then></if>
          <goto pos:line="1980" pos:column="11">goto <name pos:line="1980" pos:column="16">op_column_corrupt<pos:position pos:line="1980" pos:column="33"/></name>;<pos:position pos:line="1980" pos:column="34"/></goto>
        }<pos:position pos:line="1981" pos:column="10"/></block></else></if>
      }<pos:position pos:line="1982" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="1984" pos:column="7">pC<pos:position pos:line="1984" pos:column="9"/></name><operator pos:line="1984" pos:column="9">-&gt;<pos:position pos:line="1984" pos:column="14"/></operator><name pos:line="1984" pos:column="11">nHdrParsed<pos:position pos:line="1984" pos:column="21"/></name></name> <operator pos:line="1984" pos:column="22">=<pos:position pos:line="1984" pos:column="23"/></operator> <name pos:line="1984" pos:column="24">i<pos:position pos:line="1984" pos:column="25"/></name></expr>;<pos:position pos:line="1984" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1985" pos:column="7">pC<pos:position pos:line="1985" pos:column="9"/></name><operator pos:line="1985" pos:column="9">-&gt;<pos:position pos:line="1985" pos:column="14"/></operator><name pos:line="1985" pos:column="11">iHdrOffset<pos:position pos:line="1985" pos:column="21"/></name></name> <operator pos:line="1985" pos:column="22">=<pos:position pos:line="1985" pos:column="23"/></operator> <call pos:line="1985" pos:column="24">(<name pos:line="1985" pos:column="25">u32<pos:position pos:line="1985" pos:column="28"/></name>)<argument_list pos:line="1985" pos:column="29">(<argument><expr><name pos:line="1985" pos:column="30">zHdr<pos:position pos:line="1985" pos:column="34"/></name> <operator pos:line="1985" pos:column="35">-<pos:position pos:line="1985" pos:column="36"/></operator> <name pos:line="1985" pos:column="37">zData<pos:position pos:line="1985" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1985" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1985" pos:column="44"/></expr_stmt>
      <if pos:line="1986" pos:column="7">if<condition pos:line="1986" pos:column="9">( <expr><name><name pos:line="1986" pos:column="11">pC<pos:position pos:line="1986" pos:column="13"/></name><operator pos:line="1986" pos:column="13">-&gt;<pos:position pos:line="1986" pos:column="18"/></operator><name pos:line="1986" pos:column="15">aRow<pos:position pos:line="1986" pos:column="19"/></name></name><operator pos:line="1986" pos:column="19">==<pos:position pos:line="1986" pos:column="21"/></operator><literal type="number" pos:line="1986" pos:column="21">0<pos:position pos:line="1986" pos:column="22"/></literal></expr> )<pos:position pos:line="1986" pos:column="24"/></condition><then pos:line="1986" pos:column="24"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="1986" pos:column="25">sqlite3VdbeMemRelease<pos:position pos:line="1986" pos:column="46"/></name><argument_list pos:line="1986" pos:column="46">(<argument><expr><operator pos:line="1986" pos:column="47">&amp;<pos:position pos:line="1986" pos:column="52"/></operator><name pos:line="1986" pos:column="48">sMem<pos:position pos:line="1986" pos:column="52"/></name></expr></argument>)<pos:position pos:line="1986" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1986" pos:column="54"/></expr_stmt></block></then></if>
    }<pos:position pos:line="1987" pos:column="6"/></block></then><else pos:line="1987" pos:column="6">else<block pos:line="1987" pos:column="10">{
      <expr_stmt><expr><name pos:line="1988" pos:column="7">t<pos:position pos:line="1988" pos:column="8"/></name> <operator pos:line="1988" pos:column="9">=<pos:position pos:line="1988" pos:column="10"/></operator> <literal type="number" pos:line="1988" pos:column="11">0<pos:position pos:line="1988" pos:column="12"/></literal></expr>;<pos:position pos:line="1988" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="1989" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="1991" pos:column="5">/* If after trying to extract new entries from the header, nHdrParsed is
    ** still not up to p2, that means that the record has fewer than p2
    ** columns.  So the result will be either the default value or a NULL.
    */</comment>
    <if pos:line="1995" pos:column="5">if<condition pos:line="1995" pos:column="7">( <expr><name><name pos:line="1995" pos:column="9">pC<pos:position pos:line="1995" pos:column="11"/></name><operator pos:line="1995" pos:column="11">-&gt;<pos:position pos:line="1995" pos:column="16"/></operator><name pos:line="1995" pos:column="13">nHdrParsed<pos:position pos:line="1995" pos:column="23"/></name></name><operator pos:line="1995" pos:column="23">&lt;=<pos:position pos:line="1995" pos:column="28"/></operator><name pos:line="1995" pos:column="25">p2<pos:position pos:line="1995" pos:column="27"/></name></expr> )<pos:position pos:line="1995" pos:column="29"/></condition><then><block pos:line="1995" pos:column="29">{
      <if pos:line="1996" pos:column="7">if<condition pos:line="1996" pos:column="9">( <expr><name><name pos:line="1996" pos:column="11">pOp<pos:position pos:line="1996" pos:column="14"/></name><operator pos:line="1996" pos:column="14">-&gt;<pos:position pos:line="1996" pos:column="19"/></operator><name pos:line="1996" pos:column="16">p4type<pos:position pos:line="1996" pos:column="22"/></name></name><operator pos:line="1996" pos:column="22">==<pos:position pos:line="1996" pos:column="24"/></operator><name pos:line="1996" pos:column="24">P4_MEM<pos:position pos:line="1996" pos:column="30"/></name></expr> )<pos:position pos:line="1996" pos:column="32"/></condition><then><block pos:line="1996" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="1997" pos:column="9">sqlite3VdbeMemShallowCopy<pos:position pos:line="1997" pos:column="34"/></name><argument_list pos:line="1997" pos:column="34">(<argument><expr><name pos:line="1997" pos:column="35">pDest<pos:position pos:line="1997" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="1997" pos:column="42">pOp<pos:position pos:line="1997" pos:column="45"/></name><operator pos:line="1997" pos:column="45">-&gt;<pos:position pos:line="1997" pos:column="50"/></operator><name pos:line="1997" pos:column="47">p4<pos:position pos:line="1997" pos:column="49"/></name><operator pos:line="1997" pos:column="49">.<pos:position pos:line="1997" pos:column="50"/></operator><name pos:line="1997" pos:column="50">pMem<pos:position pos:line="1997" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="1997" pos:column="56">MEM_Static<pos:position pos:line="1997" pos:column="66"/></name></expr></argument>)<pos:position pos:line="1997" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="1997" pos:column="68"/></expr_stmt>
      }<pos:position pos:line="1998" pos:column="8"/></block></then><else pos:line="1998" pos:column="8">else<block pos:line="1998" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="1999" pos:column="9">sqlite3VdbeMemSetNull<pos:position pos:line="1999" pos:column="30"/></name><argument_list pos:line="1999" pos:column="30">(<argument><expr><name pos:line="1999" pos:column="31">pDest<pos:position pos:line="1999" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1999" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1999" pos:column="38"/></expr_stmt>
      }<pos:position pos:line="2000" pos:column="8"/></block></else></if>
      <goto pos:line="2001" pos:column="7">goto <name pos:line="2001" pos:column="12">op_column_out<pos:position pos:line="2001" pos:column="25"/></name>;<pos:position pos:line="2001" pos:column="26"/></goto>
    }<pos:position pos:line="2002" pos:column="6"/></block></then></if>
  }<pos:position pos:line="2003" pos:column="4"/></block></then><else pos:line="2003" pos:column="4">else<block pos:line="2003" pos:column="8">{
    <expr_stmt><expr><name pos:line="2004" pos:column="5">t<pos:position pos:line="2004" pos:column="6"/></name> <operator pos:line="2004" pos:column="7">=<pos:position pos:line="2004" pos:column="8"/></operator> <name><name pos:line="2004" pos:column="9">pC<pos:position pos:line="2004" pos:column="11"/></name><operator pos:line="2004" pos:column="11">-&gt;<pos:position pos:line="2004" pos:column="16"/></operator><name pos:line="2004" pos:column="13">aType<pos:position pos:line="2004" pos:column="18"/></name><index pos:line="2004" pos:column="18">[<expr><name pos:line="2004" pos:column="19">p2<pos:position pos:line="2004" pos:column="21"/></name></expr>]<pos:position pos:line="2004" pos:column="22"/></index></name></expr>;<pos:position pos:line="2004" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="2005" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="2007" pos:column="3">/* Extract the content for the p2+1-th column.  Control can only
  ** reach this point if aOffset[p2], aOffset[p2+1], and pC-&gt;aType[p2] are
  ** all valid.
  */</comment>
  <expr_stmt><expr><call><name pos:line="2011" pos:column="3">assert<pos:position pos:line="2011" pos:column="9"/></name><argument_list pos:line="2011" pos:column="9">( <argument><expr><name pos:line="2011" pos:column="11">p2<pos:position pos:line="2011" pos:column="13"/></name><operator pos:line="2011" pos:column="13">&lt;<pos:position pos:line="2011" pos:column="17"/></operator><name><name pos:line="2011" pos:column="14">pC<pos:position pos:line="2011" pos:column="16"/></name><operator pos:line="2011" pos:column="16">-&gt;<pos:position pos:line="2011" pos:column="21"/></operator><name pos:line="2011" pos:column="18">nHdrParsed<pos:position pos:line="2011" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="2011" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="2011" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2012" pos:column="3">assert<pos:position pos:line="2012" pos:column="9"/></name><argument_list pos:line="2012" pos:column="9">( <argument><expr><name pos:line="2012" pos:column="11">rc<pos:position pos:line="2012" pos:column="13"/></name><operator pos:line="2012" pos:column="13">==<pos:position pos:line="2012" pos:column="15"/></operator><name pos:line="2012" pos:column="15">SQLITE_OK<pos:position pos:line="2012" pos:column="24"/></name></expr></argument> )<pos:position pos:line="2012" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2012" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2013" pos:column="3">assert<pos:position pos:line="2013" pos:column="9"/></name><argument_list pos:line="2013" pos:column="9">( <argument><expr><call><name pos:line="2013" pos:column="11">sqlite3VdbeCheckMemInvariants<pos:position pos:line="2013" pos:column="40"/></name><argument_list pos:line="2013" pos:column="40">(<argument><expr><name pos:line="2013" pos:column="41">pDest<pos:position pos:line="2013" pos:column="46"/></name></expr></argument>)<pos:position pos:line="2013" pos:column="47"/></argument_list></call></expr></argument> )<pos:position pos:line="2013" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2013" pos:column="50"/></expr_stmt>
  <if pos:line="2014" pos:column="3">if<condition pos:line="2014" pos:column="5">( <expr><call><name pos:line="2014" pos:column="7">VdbeMemDynamic<pos:position pos:line="2014" pos:column="21"/></name><argument_list pos:line="2014" pos:column="21">(<argument><expr><name pos:line="2014" pos:column="22">pDest<pos:position pos:line="2014" pos:column="27"/></name></expr></argument>)<pos:position pos:line="2014" pos:column="28"/></argument_list></call></expr> )<pos:position pos:line="2014" pos:column="30"/></condition><then><block pos:line="2014" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="2015" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="2015" pos:column="26"/></name><argument_list pos:line="2015" pos:column="26">(<argument><expr><name pos:line="2015" pos:column="27">pDest<pos:position pos:line="2015" pos:column="32"/></name></expr></argument>)<pos:position pos:line="2015" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2015" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="2016" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="2017" pos:column="3">assert<pos:position pos:line="2017" pos:column="9"/></name><argument_list pos:line="2017" pos:column="9">( <argument><expr><name pos:line="2017" pos:column="11">t<pos:position pos:line="2017" pos:column="12"/></name><operator pos:line="2017" pos:column="12">==<pos:position pos:line="2017" pos:column="14"/></operator><name><name pos:line="2017" pos:column="14">pC<pos:position pos:line="2017" pos:column="16"/></name><operator pos:line="2017" pos:column="16">-&gt;<pos:position pos:line="2017" pos:column="21"/></operator><name pos:line="2017" pos:column="18">aType<pos:position pos:line="2017" pos:column="23"/></name><index pos:line="2017" pos:column="23">[<expr><name pos:line="2017" pos:column="24">p2<pos:position pos:line="2017" pos:column="26"/></name></expr>]<pos:position pos:line="2017" pos:column="27"/></index></name></expr></argument> )<pos:position pos:line="2017" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="2017" pos:column="30"/></expr_stmt>
  <if pos:line="2018" pos:column="3">if<condition pos:line="2018" pos:column="5">( <expr><name><name pos:line="2018" pos:column="7">pC<pos:position pos:line="2018" pos:column="9"/></name><operator pos:line="2018" pos:column="9">-&gt;<pos:position pos:line="2018" pos:column="14"/></operator><name pos:line="2018" pos:column="11">szRow<pos:position pos:line="2018" pos:column="16"/></name></name><operator pos:line="2018" pos:column="16">&gt;=<pos:position pos:line="2018" pos:column="21"/></operator><name><name pos:line="2018" pos:column="18">aOffset<pos:position pos:line="2018" pos:column="25"/></name><index pos:line="2018" pos:column="25">[<expr><name pos:line="2018" pos:column="26">p2<pos:position pos:line="2018" pos:column="28"/></name><operator pos:line="2018" pos:column="28">+<pos:position pos:line="2018" pos:column="29"/></operator><literal type="number" pos:line="2018" pos:column="29">1<pos:position pos:line="2018" pos:column="30"/></literal></expr>]<pos:position pos:line="2018" pos:column="31"/></index></name></expr> )<pos:position pos:line="2018" pos:column="33"/></condition><then><block pos:line="2018" pos:column="33">{
    <comment type="block" pos:line="2019" pos:column="5">/* This is the common case where the desired content fits on the original
    ** page - where the content is not on an overflow page */</comment>
    <expr_stmt><expr><name pos:line="2021" pos:column="5">zData<pos:position pos:line="2021" pos:column="10"/></name> <operator pos:line="2021" pos:column="11">=<pos:position pos:line="2021" pos:column="12"/></operator> <name><name pos:line="2021" pos:column="13">pC<pos:position pos:line="2021" pos:column="15"/></name><operator pos:line="2021" pos:column="15">-&gt;<pos:position pos:line="2021" pos:column="20"/></operator><name pos:line="2021" pos:column="17">aRow<pos:position pos:line="2021" pos:column="21"/></name></name> <operator pos:line="2021" pos:column="22">+<pos:position pos:line="2021" pos:column="23"/></operator> <name><name pos:line="2021" pos:column="24">aOffset<pos:position pos:line="2021" pos:column="31"/></name><index pos:line="2021" pos:column="31">[<expr><name pos:line="2021" pos:column="32">p2<pos:position pos:line="2021" pos:column="34"/></name></expr>]<pos:position pos:line="2021" pos:column="35"/></index></name></expr>;<pos:position pos:line="2021" pos:column="36"/></expr_stmt>
    <if pos:line="2022" pos:column="5">if<condition pos:line="2022" pos:column="7">( <expr><name pos:line="2022" pos:column="9">t<pos:position pos:line="2022" pos:column="10"/></name><operator pos:line="2022" pos:column="10">&lt;<pos:position pos:line="2022" pos:column="14"/></operator><literal type="number" pos:line="2022" pos:column="11">12<pos:position pos:line="2022" pos:column="13"/></literal></expr> )<pos:position pos:line="2022" pos:column="15"/></condition><then><block pos:line="2022" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="2023" pos:column="7">sqlite3VdbeSerialGet<pos:position pos:line="2023" pos:column="27"/></name><argument_list pos:line="2023" pos:column="27">(<argument><expr><name pos:line="2023" pos:column="28">zData<pos:position pos:line="2023" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="2023" pos:column="35">t<pos:position pos:line="2023" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="2023" pos:column="38">pDest<pos:position pos:line="2023" pos:column="43"/></name></expr></argument>)<pos:position pos:line="2023" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="2023" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="2024" pos:column="6"/></block></then><else pos:line="2024" pos:column="6">else<block pos:line="2024" pos:column="10">{
      <comment type="block" pos:line="2025" pos:column="7">/* If the column value is a string, we need a persistent value, not
      ** a MEM_Ephem value.  This branch is a fast short-cut that is equivalent
      ** to calling sqlite3VdbeSerialGet() and sqlite3VdbeDeephemeralize().
      */</comment>
      <decl_stmt><decl><specifier pos:line="2029" pos:column="7">static<pos:position pos:line="2029" pos:column="13"/></specifier> <type><specifier pos:line="2029" pos:column="14">const<pos:position pos:line="2029" pos:column="19"/></specifier> <name pos:line="2029" pos:column="20">u16<pos:position pos:line="2029" pos:column="23"/></name></type> <name><name pos:line="2029" pos:column="24">aFlag<pos:position pos:line="2029" pos:column="29"/></name><index pos:line="2029" pos:column="29">[]<pos:position pos:line="2029" pos:column="31"/></index></name> <init pos:line="2029" pos:column="32">= <expr><block pos:line="2029" pos:column="34">{ <expr><name pos:line="2029" pos:column="36">MEM_Blob<pos:position pos:line="2029" pos:column="44"/></name></expr>, <expr><name pos:line="2029" pos:column="46">MEM_Str<pos:position pos:line="2029" pos:column="53"/></name><operator pos:line="2029" pos:column="53">|<pos:position pos:line="2029" pos:column="54"/></operator><name pos:line="2029" pos:column="54">MEM_Term<pos:position pos:line="2029" pos:column="62"/></name></expr> }<pos:position pos:line="2029" pos:column="64"/></block></expr></init></decl>;<pos:position pos:line="2029" pos:column="65"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="2030" pos:column="7">pDest<pos:position pos:line="2030" pos:column="12"/></name><operator pos:line="2030" pos:column="12">-&gt;<pos:position pos:line="2030" pos:column="17"/></operator><name pos:line="2030" pos:column="14">n<pos:position pos:line="2030" pos:column="15"/></name></name> <operator pos:line="2030" pos:column="16">=<pos:position pos:line="2030" pos:column="17"/></operator> <name pos:line="2030" pos:column="18">len<pos:position pos:line="2030" pos:column="21"/></name> <operator pos:line="2030" pos:column="22">=<pos:position pos:line="2030" pos:column="23"/></operator> <operator pos:line="2030" pos:column="24">(<pos:position pos:line="2030" pos:column="25"/></operator><name pos:line="2030" pos:column="25">t<pos:position pos:line="2030" pos:column="26"/></name><operator pos:line="2030" pos:column="26">-<pos:position pos:line="2030" pos:column="27"/></operator><literal type="number" pos:line="2030" pos:column="27">12<pos:position pos:line="2030" pos:column="29"/></literal><operator pos:line="2030" pos:column="29">)<pos:position pos:line="2030" pos:column="30"/></operator><operator pos:line="2030" pos:column="30">/<pos:position pos:line="2030" pos:column="31"/></operator><literal type="number" pos:line="2030" pos:column="31">2<pos:position pos:line="2030" pos:column="32"/></literal></expr>;<pos:position pos:line="2030" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2031" pos:column="7">pDest<pos:position pos:line="2031" pos:column="12"/></name><operator pos:line="2031" pos:column="12">-&gt;<pos:position pos:line="2031" pos:column="17"/></operator><name pos:line="2031" pos:column="14">enc<pos:position pos:line="2031" pos:column="17"/></name></name> <operator pos:line="2031" pos:column="18">=<pos:position pos:line="2031" pos:column="19"/></operator> <name pos:line="2031" pos:column="20">encoding<pos:position pos:line="2031" pos:column="28"/></name></expr>;<pos:position pos:line="2031" pos:column="29"/></expr_stmt>
      <if pos:line="2032" pos:column="7">if<condition pos:line="2032" pos:column="9">( <expr><name><name pos:line="2032" pos:column="11">pDest<pos:position pos:line="2032" pos:column="16"/></name><operator pos:line="2032" pos:column="16">-&gt;<pos:position pos:line="2032" pos:column="21"/></operator><name pos:line="2032" pos:column="18">szMalloc<pos:position pos:line="2032" pos:column="26"/></name></name> <operator pos:line="2032" pos:column="27">&lt;<pos:position pos:line="2032" pos:column="31"/></operator> <name pos:line="2032" pos:column="29">len<pos:position pos:line="2032" pos:column="32"/></name><operator pos:line="2032" pos:column="32">+<pos:position pos:line="2032" pos:column="33"/></operator><literal type="number" pos:line="2032" pos:column="33">2<pos:position pos:line="2032" pos:column="34"/></literal></expr> )<pos:position pos:line="2032" pos:column="36"/></condition><then><block pos:line="2032" pos:column="36">{
        <expr_stmt><expr><name><name pos:line="2033" pos:column="9">pDest<pos:position pos:line="2033" pos:column="14"/></name><operator pos:line="2033" pos:column="14">-&gt;<pos:position pos:line="2033" pos:column="19"/></operator><name pos:line="2033" pos:column="16">flags<pos:position pos:line="2033" pos:column="21"/></name></name> <operator pos:line="2033" pos:column="22">=<pos:position pos:line="2033" pos:column="23"/></operator> <name pos:line="2033" pos:column="24">MEM_Null<pos:position pos:line="2033" pos:column="32"/></name></expr>;<pos:position pos:line="2033" pos:column="33"/></expr_stmt>
        <if pos:line="2034" pos:column="9">if<condition pos:line="2034" pos:column="11">( <expr><call><name pos:line="2034" pos:column="13">sqlite3VdbeMemGrow<pos:position pos:line="2034" pos:column="31"/></name><argument_list pos:line="2034" pos:column="31">(<argument><expr><name pos:line="2034" pos:column="32">pDest<pos:position pos:line="2034" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="39">len<pos:position pos:line="2034" pos:column="42"/></name><operator pos:line="2034" pos:column="42">+<pos:position pos:line="2034" pos:column="43"/></operator><literal type="number" pos:line="2034" pos:column="43">2<pos:position pos:line="2034" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2034" pos:column="46">0<pos:position pos:line="2034" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="2034" pos:column="48"/></argument_list></call></expr> )<pos:position pos:line="2034" pos:column="50"/></condition><then pos:line="2034" pos:column="50"> <block type="pseudo"><goto pos:line="2034" pos:column="51">goto <name pos:line="2034" pos:column="56">no_mem<pos:position pos:line="2034" pos:column="62"/></name>;<pos:position pos:line="2034" pos:column="63"/></goto></block></then></if>
      }<pos:position pos:line="2035" pos:column="8"/></block></then><else pos:line="2035" pos:column="8">else<block pos:line="2035" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="2036" pos:column="9">pDest<pos:position pos:line="2036" pos:column="14"/></name><operator pos:line="2036" pos:column="14">-&gt;<pos:position pos:line="2036" pos:column="19"/></operator><name pos:line="2036" pos:column="16">z<pos:position pos:line="2036" pos:column="17"/></name></name> <operator pos:line="2036" pos:column="18">=<pos:position pos:line="2036" pos:column="19"/></operator> <name><name pos:line="2036" pos:column="20">pDest<pos:position pos:line="2036" pos:column="25"/></name><operator pos:line="2036" pos:column="25">-&gt;<pos:position pos:line="2036" pos:column="30"/></operator><name pos:line="2036" pos:column="27">zMalloc<pos:position pos:line="2036" pos:column="34"/></name></name></expr>;<pos:position pos:line="2036" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="2037" pos:column="8"/></block></else></if>
      <expr_stmt><expr><call><name pos:line="2038" pos:column="7">memcpy<pos:position pos:line="2038" pos:column="13"/></name><argument_list pos:line="2038" pos:column="13">(<argument><expr><name><name pos:line="2038" pos:column="14">pDest<pos:position pos:line="2038" pos:column="19"/></name><operator pos:line="2038" pos:column="19">-&gt;<pos:position pos:line="2038" pos:column="24"/></operator><name pos:line="2038" pos:column="21">z<pos:position pos:line="2038" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="2038" pos:column="24">zData<pos:position pos:line="2038" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2038" pos:column="31">len<pos:position pos:line="2038" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2038" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2038" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2039" pos:column="7">pDest<pos:position pos:line="2039" pos:column="12"/></name><operator pos:line="2039" pos:column="12">-&gt;<pos:position pos:line="2039" pos:column="17"/></operator><name pos:line="2039" pos:column="14">z<pos:position pos:line="2039" pos:column="15"/></name><index pos:line="2039" pos:column="15">[<expr><name pos:line="2039" pos:column="16">len<pos:position pos:line="2039" pos:column="19"/></name></expr>]<pos:position pos:line="2039" pos:column="20"/></index></name> <operator pos:line="2039" pos:column="21">=<pos:position pos:line="2039" pos:column="22"/></operator> <literal type="number" pos:line="2039" pos:column="23">0<pos:position pos:line="2039" pos:column="24"/></literal></expr>;<pos:position pos:line="2039" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2040" pos:column="7">pDest<pos:position pos:line="2040" pos:column="12"/></name><operator pos:line="2040" pos:column="12">-&gt;<pos:position pos:line="2040" pos:column="17"/></operator><name pos:line="2040" pos:column="14">z<pos:position pos:line="2040" pos:column="15"/></name><index pos:line="2040" pos:column="15">[<expr><name pos:line="2040" pos:column="16">len<pos:position pos:line="2040" pos:column="19"/></name><operator pos:line="2040" pos:column="19">+<pos:position pos:line="2040" pos:column="20"/></operator><literal type="number" pos:line="2040" pos:column="20">1<pos:position pos:line="2040" pos:column="21"/></literal></expr>]<pos:position pos:line="2040" pos:column="22"/></index></name> <operator pos:line="2040" pos:column="23">=<pos:position pos:line="2040" pos:column="24"/></operator> <literal type="number" pos:line="2040" pos:column="25">0<pos:position pos:line="2040" pos:column="26"/></literal></expr>;<pos:position pos:line="2040" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2041" pos:column="7">pDest<pos:position pos:line="2041" pos:column="12"/></name><operator pos:line="2041" pos:column="12">-&gt;<pos:position pos:line="2041" pos:column="17"/></operator><name pos:line="2041" pos:column="14">flags<pos:position pos:line="2041" pos:column="19"/></name></name> <operator pos:line="2041" pos:column="20">=<pos:position pos:line="2041" pos:column="21"/></operator> <name><name pos:line="2041" pos:column="22">aFlag<pos:position pos:line="2041" pos:column="27"/></name><index pos:line="2041" pos:column="27">[<expr><name pos:line="2041" pos:column="28">t<pos:position pos:line="2041" pos:column="29"/></name><operator pos:line="2041" pos:column="29">&amp;<pos:position pos:line="2041" pos:column="34"/></operator><literal type="number" pos:line="2041" pos:column="30">1<pos:position pos:line="2041" pos:column="31"/></literal></expr>]<pos:position pos:line="2041" pos:column="32"/></index></name></expr>;<pos:position pos:line="2041" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="2042" pos:column="6"/></block></else></if>
  }<pos:position pos:line="2043" pos:column="4"/></block></then><else pos:line="2043" pos:column="4">else<block pos:line="2043" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="2044" pos:column="5">pDest<pos:position pos:line="2044" pos:column="10"/></name><operator pos:line="2044" pos:column="10">-&gt;<pos:position pos:line="2044" pos:column="15"/></operator><name pos:line="2044" pos:column="12">enc<pos:position pos:line="2044" pos:column="15"/></name></name> <operator pos:line="2044" pos:column="16">=<pos:position pos:line="2044" pos:column="17"/></operator> <name pos:line="2044" pos:column="18">encoding<pos:position pos:line="2044" pos:column="26"/></name></expr>;<pos:position pos:line="2044" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="2045" pos:column="5">/* This branch happens only when content is on overflow pages */</comment>
    <if pos:line="2046" pos:column="5">if<condition pos:line="2046" pos:column="7">( <expr><operator pos:line="2046" pos:column="9">(<pos:position pos:line="2046" pos:column="10"/></operator><operator pos:line="2046" pos:column="10">(<pos:position pos:line="2046" pos:column="11"/></operator><name><name pos:line="2046" pos:column="11">pOp<pos:position pos:line="2046" pos:column="14"/></name><operator pos:line="2046" pos:column="14">-&gt;<pos:position pos:line="2046" pos:column="19"/></operator><name pos:line="2046" pos:column="16">p5<pos:position pos:line="2046" pos:column="18"/></name></name> <operator pos:line="2046" pos:column="19">&amp;<pos:position pos:line="2046" pos:column="24"/></operator> <operator pos:line="2046" pos:column="21">(<pos:position pos:line="2046" pos:column="22"/></operator><name pos:line="2046" pos:column="22">OPFLAG_LENGTHARG<pos:position pos:line="2046" pos:column="38"/></name><operator pos:line="2046" pos:column="38">|<pos:position pos:line="2046" pos:column="39"/></operator><name pos:line="2046" pos:column="39">OPFLAG_TYPEOFARG<pos:position pos:line="2046" pos:column="55"/></name><operator pos:line="2046" pos:column="55">)<pos:position pos:line="2046" pos:column="56"/></operator><operator pos:line="2046" pos:column="56">)<pos:position pos:line="2046" pos:column="57"/></operator><operator pos:line="2046" pos:column="57">!=<pos:position pos:line="2046" pos:column="59"/></operator><literal type="number" pos:line="2046" pos:column="59">0<pos:position pos:line="2046" pos:column="60"/></literal>
          <operator pos:line="2047" pos:column="11">&amp;&amp;<pos:position pos:line="2047" pos:column="21"/></operator> <operator pos:line="2047" pos:column="14">(<pos:position pos:line="2047" pos:column="15"/></operator><operator pos:line="2047" pos:column="15">(<pos:position pos:line="2047" pos:column="16"/></operator><name pos:line="2047" pos:column="16">t<pos:position pos:line="2047" pos:column="17"/></name><operator pos:line="2047" pos:column="17">&gt;=<pos:position pos:line="2047" pos:column="22"/></operator><literal type="number" pos:line="2047" pos:column="19">12<pos:position pos:line="2047" pos:column="21"/></literal> <operator pos:line="2047" pos:column="22">&amp;&amp;<pos:position pos:line="2047" pos:column="32"/></operator> <operator pos:line="2047" pos:column="25">(<pos:position pos:line="2047" pos:column="26"/></operator><name pos:line="2047" pos:column="26">t<pos:position pos:line="2047" pos:column="27"/></name><operator pos:line="2047" pos:column="27">&amp;<pos:position pos:line="2047" pos:column="32"/></operator><literal type="number" pos:line="2047" pos:column="28">1<pos:position pos:line="2047" pos:column="29"/></literal><operator pos:line="2047" pos:column="29">)<pos:position pos:line="2047" pos:column="30"/></operator><operator pos:line="2047" pos:column="30">==<pos:position pos:line="2047" pos:column="32"/></operator><literal type="number" pos:line="2047" pos:column="32">0<pos:position pos:line="2047" pos:column="33"/></literal><operator pos:line="2047" pos:column="33">)<pos:position pos:line="2047" pos:column="34"/></operator> <operator pos:line="2047" pos:column="35">||<pos:position pos:line="2047" pos:column="37"/></operator> <operator pos:line="2047" pos:column="38">(<pos:position pos:line="2047" pos:column="39"/></operator><name><name pos:line="2047" pos:column="39">pOp<pos:position pos:line="2047" pos:column="42"/></name><operator pos:line="2047" pos:column="42">-&gt;<pos:position pos:line="2047" pos:column="47"/></operator><name pos:line="2047" pos:column="44">p5<pos:position pos:line="2047" pos:column="46"/></name></name> <operator pos:line="2047" pos:column="47">&amp;<pos:position pos:line="2047" pos:column="52"/></operator> <name pos:line="2047" pos:column="49">OPFLAG_TYPEOFARG<pos:position pos:line="2047" pos:column="65"/></name><operator pos:line="2047" pos:column="65">)<pos:position pos:line="2047" pos:column="66"/></operator><operator pos:line="2047" pos:column="66">!=<pos:position pos:line="2047" pos:column="68"/></operator><literal type="number" pos:line="2047" pos:column="68">0<pos:position pos:line="2047" pos:column="69"/></literal><operator pos:line="2047" pos:column="69">)<pos:position pos:line="2047" pos:column="70"/></operator><operator pos:line="2047" pos:column="70">)<pos:position pos:line="2047" pos:column="71"/></operator>
     <operator pos:line="2048" pos:column="6">||<pos:position pos:line="2048" pos:column="8"/></operator> <operator pos:line="2048" pos:column="9">(<pos:position pos:line="2048" pos:column="10"/></operator><name pos:line="2048" pos:column="10">len<pos:position pos:line="2048" pos:column="13"/></name> <operator pos:line="2048" pos:column="14">=<pos:position pos:line="2048" pos:column="15"/></operator> <call><name pos:line="2048" pos:column="16">sqlite3VdbeSerialTypeLen<pos:position pos:line="2048" pos:column="40"/></name><argument_list pos:line="2048" pos:column="40">(<argument><expr><name pos:line="2048" pos:column="41">t<pos:position pos:line="2048" pos:column="42"/></name></expr></argument>)<pos:position pos:line="2048" pos:column="43"/></argument_list></call><operator pos:line="2048" pos:column="43">)<pos:position pos:line="2048" pos:column="44"/></operator><operator pos:line="2048" pos:column="44">==<pos:position pos:line="2048" pos:column="46"/></operator><literal type="number" pos:line="2048" pos:column="46">0<pos:position pos:line="2048" pos:column="47"/></literal></expr>
    )<pos:position pos:line="2049" pos:column="6"/></condition><then><block pos:line="2049" pos:column="6">{
      <comment type="block" pos:line="2050" pos:column="7">/* Content is irrelevant for
      **    1. the typeof() function,
      **    2. the length(X) function if X is a blob, and
      **    3. if the content length is zero.
      ** So we might as well use bogus content rather than reading
      ** content from disk. 
      **
      ** Although sqlite3VdbeSerialGet() may read at most 8 bytes from the
      ** buffer passed to it, debugging function VdbeMemPrettyPrint() may
      ** read up to 16. So 16 bytes of bogus content is supplied.
      */</comment>
      <decl_stmt><decl><specifier pos:line="2061" pos:column="7">static<pos:position pos:line="2061" pos:column="13"/></specifier> <type><name pos:line="2061" pos:column="14">u8<pos:position pos:line="2061" pos:column="16"/></name></type> <name><name pos:line="2061" pos:column="17">aZero<pos:position pos:line="2061" pos:column="22"/></name><index pos:line="2061" pos:column="22">[<expr><literal type="number" pos:line="2061" pos:column="23">16<pos:position pos:line="2061" pos:column="25"/></literal></expr>]<pos:position pos:line="2061" pos:column="26"/></index></name></decl>;<pos:position pos:line="2061" pos:column="27"/></decl_stmt>  <comment type="block" pos:line="2061" pos:column="29">/* This is the bogus content */</comment>
      <expr_stmt><expr><call><name pos:line="2062" pos:column="7">sqlite3VdbeSerialGet<pos:position pos:line="2062" pos:column="27"/></name><argument_list pos:line="2062" pos:column="27">(<argument><expr><name pos:line="2062" pos:column="28">aZero<pos:position pos:line="2062" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="2062" pos:column="35">t<pos:position pos:line="2062" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="2062" pos:column="38">pDest<pos:position pos:line="2062" pos:column="43"/></name></expr></argument>)<pos:position pos:line="2062" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="2062" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="2063" pos:column="6"/></block></then><else pos:line="2063" pos:column="6">else<block pos:line="2063" pos:column="10">{
      <expr_stmt><expr><name pos:line="2064" pos:column="7">rc<pos:position pos:line="2064" pos:column="9"/></name> <operator pos:line="2064" pos:column="10">=<pos:position pos:line="2064" pos:column="11"/></operator> <call><name pos:line="2064" pos:column="12">sqlite3VdbeMemFromBtree<pos:position pos:line="2064" pos:column="35"/></name><argument_list pos:line="2064" pos:column="35">(<argument><expr><name><name pos:line="2064" pos:column="36">pC<pos:position pos:line="2064" pos:column="38"/></name><operator pos:line="2064" pos:column="38">-&gt;<pos:position pos:line="2064" pos:column="43"/></operator><name pos:line="2064" pos:column="40">uc<pos:position pos:line="2064" pos:column="42"/></name><operator pos:line="2064" pos:column="42">.<pos:position pos:line="2064" pos:column="43"/></operator><name pos:line="2064" pos:column="43">pCursor<pos:position pos:line="2064" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2064" pos:column="52">aOffset<pos:position pos:line="2064" pos:column="59"/></name><index pos:line="2064" pos:column="59">[<expr><name pos:line="2064" pos:column="60">p2<pos:position pos:line="2064" pos:column="62"/></name></expr>]<pos:position pos:line="2064" pos:column="63"/></index></name></expr></argument>, <argument><expr><name pos:line="2064" pos:column="65">len<pos:position pos:line="2064" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="2064" pos:column="70">pDest<pos:position pos:line="2064" pos:column="75"/></name></expr></argument>)<pos:position pos:line="2064" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="2064" pos:column="77"/></expr_stmt>
      <if pos:line="2065" pos:column="7">if<condition pos:line="2065" pos:column="9">( <expr><name pos:line="2065" pos:column="11">rc<pos:position pos:line="2065" pos:column="13"/></name><operator pos:line="2065" pos:column="13">!=<pos:position pos:line="2065" pos:column="15"/></operator><name pos:line="2065" pos:column="15">SQLITE_OK<pos:position pos:line="2065" pos:column="24"/></name></expr> )<pos:position pos:line="2065" pos:column="26"/></condition><then pos:line="2065" pos:column="26"> <block type="pseudo"><goto pos:line="2065" pos:column="27">goto <name pos:line="2065" pos:column="32">abort_due_to_error<pos:position pos:line="2065" pos:column="50"/></name>;<pos:position pos:line="2065" pos:column="51"/></goto></block></then></if>
      <expr_stmt><expr><call><name pos:line="2066" pos:column="7">sqlite3VdbeSerialGet<pos:position pos:line="2066" pos:column="27"/></name><argument_list pos:line="2066" pos:column="27">(<argument><expr><operator pos:line="2066" pos:column="28">(<pos:position pos:line="2066" pos:column="29"/></operator><specifier pos:line="2066" pos:column="29">const<pos:position pos:line="2066" pos:column="34"/></specifier> <name pos:line="2066" pos:column="35">u8<pos:position pos:line="2066" pos:column="37"/></name><operator pos:line="2066" pos:column="37">*<pos:position pos:line="2066" pos:column="38"/></operator><operator pos:line="2066" pos:column="38">)<pos:position pos:line="2066" pos:column="39"/></operator><name><name pos:line="2066" pos:column="39">pDest<pos:position pos:line="2066" pos:column="44"/></name><operator pos:line="2066" pos:column="44">-&gt;<pos:position pos:line="2066" pos:column="49"/></operator><name pos:line="2066" pos:column="46">z<pos:position pos:line="2066" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="2066" pos:column="49">t<pos:position pos:line="2066" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="2066" pos:column="52">pDest<pos:position pos:line="2066" pos:column="57"/></name></expr></argument>)<pos:position pos:line="2066" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="2066" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2067" pos:column="7">pDest<pos:position pos:line="2067" pos:column="12"/></name><operator pos:line="2067" pos:column="12">-&gt;<pos:position pos:line="2067" pos:column="17"/></operator><name pos:line="2067" pos:column="14">flags<pos:position pos:line="2067" pos:column="19"/></name></name> <operator pos:line="2067" pos:column="20">&amp;=<pos:position pos:line="2067" pos:column="26"/></operator> <operator pos:line="2067" pos:column="23">~<pos:position pos:line="2067" pos:column="24"/></operator><name pos:line="2067" pos:column="24">MEM_Ephem<pos:position pos:line="2067" pos:column="33"/></name></expr>;<pos:position pos:line="2067" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="2068" pos:column="6"/></block></else></if>
  }<pos:position pos:line="2069" pos:column="4"/></block></else></if>

<label><name pos:line="2071" pos:column="1">op_column_out<pos:position pos:line="2071" pos:column="14"/></name>:<pos:position pos:line="2071" pos:column="15"/></label>
  <expr_stmt><expr><call><name pos:line="2072" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="2072" pos:column="22"/></name><argument_list pos:line="2072" pos:column="22">(<argument><expr><name pos:line="2072" pos:column="23">pDest<pos:position pos:line="2072" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2072" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="2072" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2073" pos:column="3">REGISTER_TRACE<pos:position pos:line="2073" pos:column="17"/></name><argument_list pos:line="2073" pos:column="17">(<argument><expr><name><name pos:line="2073" pos:column="18">pOp<pos:position pos:line="2073" pos:column="21"/></name><operator pos:line="2073" pos:column="21">-&gt;<pos:position pos:line="2073" pos:column="26"/></operator><name pos:line="2073" pos:column="23">p3<pos:position pos:line="2073" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="2073" pos:column="27">pDest<pos:position pos:line="2073" pos:column="32"/></name></expr></argument>)<pos:position pos:line="2073" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2073" pos:column="34"/></expr_stmt>
  <break pos:line="2074" pos:column="3">break;<pos:position pos:line="2074" pos:column="9"/></break>

<label><name pos:line="2076" pos:column="1">op_column_corrupt<pos:position pos:line="2076" pos:column="18"/></name>:<pos:position pos:line="2076" pos:column="19"/></label>
  <if pos:line="2077" pos:column="3">if<condition pos:line="2077" pos:column="5">( <expr><name><name pos:line="2077" pos:column="7">aOp<pos:position pos:line="2077" pos:column="10"/></name><index pos:line="2077" pos:column="10">[<expr><literal type="number" pos:line="2077" pos:column="11">0<pos:position pos:line="2077" pos:column="12"/></literal></expr>]<pos:position pos:line="2077" pos:column="13"/></index></name><operator pos:line="2077" pos:column="13">.<pos:position pos:line="2077" pos:column="14"/></operator><name pos:line="2077" pos:column="14">p3<pos:position pos:line="2077" pos:column="16"/></name><operator pos:line="2077" pos:column="16">&gt;<pos:position pos:line="2077" pos:column="20"/></operator><literal type="number" pos:line="2077" pos:column="17">0<pos:position pos:line="2077" pos:column="18"/></literal></expr> )<pos:position pos:line="2077" pos:column="20"/></condition><then><block pos:line="2077" pos:column="20">{
    <expr_stmt><expr><name pos:line="2078" pos:column="5">pOp<pos:position pos:line="2078" pos:column="8"/></name> <operator pos:line="2078" pos:column="9">=<pos:position pos:line="2078" pos:column="10"/></operator> <operator pos:line="2078" pos:column="11">&amp;<pos:position pos:line="2078" pos:column="16"/></operator><name><name pos:line="2078" pos:column="12">aOp<pos:position pos:line="2078" pos:column="15"/></name><index pos:line="2078" pos:column="15">[<expr><name><name pos:line="2078" pos:column="16">aOp<pos:position pos:line="2078" pos:column="19"/></name><index pos:line="2078" pos:column="19">[<expr><literal type="number" pos:line="2078" pos:column="20">0<pos:position pos:line="2078" pos:column="21"/></literal></expr>]<pos:position pos:line="2078" pos:column="22"/></index></name><operator pos:line="2078" pos:column="22">.<pos:position pos:line="2078" pos:column="23"/></operator><name pos:line="2078" pos:column="23">p3<pos:position pos:line="2078" pos:column="25"/></name><operator pos:line="2078" pos:column="25">-<pos:position pos:line="2078" pos:column="26"/></operator><literal type="number" pos:line="2078" pos:column="26">1<pos:position pos:line="2078" pos:column="27"/></literal></expr>]<pos:position pos:line="2078" pos:column="28"/></index></name></expr>;<pos:position pos:line="2078" pos:column="29"/></expr_stmt>
    <break pos:line="2079" pos:column="5">break;<pos:position pos:line="2079" pos:column="11"/></break>
  }<pos:position pos:line="2080" pos:column="4"/></block></then><else pos:line="2080" pos:column="4">else<block pos:line="2080" pos:column="8">{
    <expr_stmt><expr><name pos:line="2081" pos:column="5">rc<pos:position pos:line="2081" pos:column="7"/></name> <operator pos:line="2081" pos:column="8">=<pos:position pos:line="2081" pos:column="9"/></operator> <name pos:line="2081" pos:column="10">SQLITE_CORRUPT_BKPT<pos:position pos:line="2081" pos:column="29"/></name></expr>;<pos:position pos:line="2081" pos:column="30"/></expr_stmt>
    <goto pos:line="2082" pos:column="5">goto <name pos:line="2082" pos:column="10">abort_due_to_error<pos:position pos:line="2082" pos:column="28"/></name>;<pos:position pos:line="2082" pos:column="29"/></goto>
  }<pos:position pos:line="2083" pos:column="4"/></block></else></if>
}<pos:position pos:line="2084" pos:column="2"/></block>

<comment type="block" pos:line="2086" pos:column="1">/* Opcode: Affinity P1 P2 * P4 *
** Synopsis: affinity(r[P1@P2])
**
** Apply affinities to a range of P2 registers starting with P1.
**
** P4 is a string that is P2 characters long. The N-th character of the
** string indicates the column affinity that should be used for the N-th
** memory cell in the range.
*/</comment>
<case pos:line="2095" pos:column="1">case <expr><name pos:line="2095" pos:column="6">OP_Affinity<pos:position pos:line="2095" pos:column="17"/></name></expr>:<pos:position pos:line="2095" pos:column="18"/></case> <block pos:line="2095" pos:column="19">{
  <decl_stmt><decl><type><specifier pos:line="2096" pos:column="3">const<pos:position pos:line="2096" pos:column="8"/></specifier> <name pos:line="2096" pos:column="9">char<pos:position pos:line="2096" pos:column="13"/></name> <modifier pos:line="2096" pos:column="14">*<pos:position pos:line="2096" pos:column="15"/></modifier></type><name pos:line="2096" pos:column="15">zAffinity<pos:position pos:line="2096" pos:column="24"/></name></decl>;<pos:position pos:line="2096" pos:column="25"/></decl_stmt>   <comment type="block" pos:line="2096" pos:column="28">/* The affinity to be applied */</comment>

  <expr_stmt><expr><name pos:line="2098" pos:column="3">zAffinity<pos:position pos:line="2098" pos:column="12"/></name> <operator pos:line="2098" pos:column="13">=<pos:position pos:line="2098" pos:column="14"/></operator> <name><name pos:line="2098" pos:column="15">pOp<pos:position pos:line="2098" pos:column="18"/></name><operator pos:line="2098" pos:column="18">-&gt;<pos:position pos:line="2098" pos:column="23"/></operator><name pos:line="2098" pos:column="20">p4<pos:position pos:line="2098" pos:column="22"/></name><operator pos:line="2098" pos:column="22">.<pos:position pos:line="2098" pos:column="23"/></operator><name pos:line="2098" pos:column="23">z<pos:position pos:line="2098" pos:column="24"/></name></name></expr>;<pos:position pos:line="2098" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2099" pos:column="3">assert<pos:position pos:line="2099" pos:column="9"/></name><argument_list pos:line="2099" pos:column="9">( <argument><expr><name pos:line="2099" pos:column="11">zAffinity<pos:position pos:line="2099" pos:column="20"/></name><operator pos:line="2099" pos:column="20">!=<pos:position pos:line="2099" pos:column="22"/></operator><literal type="number" pos:line="2099" pos:column="22">0<pos:position pos:line="2099" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="2099" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="2099" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2100" pos:column="3">assert<pos:position pos:line="2100" pos:column="9"/></name><argument_list pos:line="2100" pos:column="9">( <argument><expr><name><name pos:line="2100" pos:column="11">pOp<pos:position pos:line="2100" pos:column="14"/></name><operator pos:line="2100" pos:column="14">-&gt;<pos:position pos:line="2100" pos:column="19"/></operator><name pos:line="2100" pos:column="16">p2<pos:position pos:line="2100" pos:column="18"/></name></name><operator pos:line="2100" pos:column="18">&gt;<pos:position pos:line="2100" pos:column="22"/></operator><literal type="number" pos:line="2100" pos:column="19">0<pos:position pos:line="2100" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="2100" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="2100" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2101" pos:column="3">assert<pos:position pos:line="2101" pos:column="9"/></name><argument_list pos:line="2101" pos:column="9">( <argument><expr><name><name pos:line="2101" pos:column="11">zAffinity<pos:position pos:line="2101" pos:column="20"/></name><index pos:line="2101" pos:column="20">[<expr><name><name pos:line="2101" pos:column="21">pOp<pos:position pos:line="2101" pos:column="24"/></name><operator pos:line="2101" pos:column="24">-&gt;<pos:position pos:line="2101" pos:column="29"/></operator><name pos:line="2101" pos:column="26">p2<pos:position pos:line="2101" pos:column="28"/></name></name></expr>]<pos:position pos:line="2101" pos:column="29"/></index></name><operator pos:line="2101" pos:column="29">==<pos:position pos:line="2101" pos:column="31"/></operator><literal type="number" pos:line="2101" pos:column="31">0<pos:position pos:line="2101" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="2101" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2101" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2102" pos:column="3">pIn1<pos:position pos:line="2102" pos:column="7"/></name> <operator pos:line="2102" pos:column="8">=<pos:position pos:line="2102" pos:column="9"/></operator> <operator pos:line="2102" pos:column="10">&amp;<pos:position pos:line="2102" pos:column="15"/></operator><name><name pos:line="2102" pos:column="11">aMem<pos:position pos:line="2102" pos:column="15"/></name><index pos:line="2102" pos:column="15">[<expr><name><name pos:line="2102" pos:column="16">pOp<pos:position pos:line="2102" pos:column="19"/></name><operator pos:line="2102" pos:column="19">-&gt;<pos:position pos:line="2102" pos:column="24"/></operator><name pos:line="2102" pos:column="21">p1<pos:position pos:line="2102" pos:column="23"/></name></name></expr>]<pos:position pos:line="2102" pos:column="24"/></index></name></expr>;<pos:position pos:line="2102" pos:column="25"/></expr_stmt>
  <do pos:line="2103" pos:column="3">do<block pos:line="2103" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="2104" pos:column="5">assert<pos:position pos:line="2104" pos:column="11"/></name><argument_list pos:line="2104" pos:column="11">( <argument><expr><name pos:line="2104" pos:column="13">pIn1<pos:position pos:line="2104" pos:column="17"/></name> <operator pos:line="2104" pos:column="18">&lt;=<pos:position pos:line="2104" pos:column="23"/></operator> <operator pos:line="2104" pos:column="21">&amp;<pos:position pos:line="2104" pos:column="26"/></operator><name><name pos:line="2104" pos:column="22">p<pos:position pos:line="2104" pos:column="23"/></name><operator pos:line="2104" pos:column="23">-&gt;<pos:position pos:line="2104" pos:column="28"/></operator><name pos:line="2104" pos:column="25">aMem<pos:position pos:line="2104" pos:column="29"/></name><index pos:line="2104" pos:column="29">[<expr><operator pos:line="2104" pos:column="30">(<pos:position pos:line="2104" pos:column="31"/></operator><name><name pos:line="2104" pos:column="31">p<pos:position pos:line="2104" pos:column="32"/></name><operator pos:line="2104" pos:column="32">-&gt;<pos:position pos:line="2104" pos:column="37"/></operator><name pos:line="2104" pos:column="34">nMem<pos:position pos:line="2104" pos:column="38"/></name></name><operator pos:line="2104" pos:column="38">+<pos:position pos:line="2104" pos:column="39"/></operator><literal type="number" pos:line="2104" pos:column="39">1<pos:position pos:line="2104" pos:column="40"/></literal> <operator pos:line="2104" pos:column="41">-<pos:position pos:line="2104" pos:column="42"/></operator> <name><name pos:line="2104" pos:column="43">p<pos:position pos:line="2104" pos:column="44"/></name><operator pos:line="2104" pos:column="44">-&gt;<pos:position pos:line="2104" pos:column="49"/></operator><name pos:line="2104" pos:column="46">nCursor<pos:position pos:line="2104" pos:column="53"/></name></name><operator pos:line="2104" pos:column="53">)<pos:position pos:line="2104" pos:column="54"/></operator></expr>]<pos:position pos:line="2104" pos:column="55"/></index></name></expr></argument> )<pos:position pos:line="2104" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="2104" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2105" pos:column="5">assert<pos:position pos:line="2105" pos:column="11"/></name><argument_list pos:line="2105" pos:column="11">( <argument><expr><call><name pos:line="2105" pos:column="13">memIsValid<pos:position pos:line="2105" pos:column="23"/></name><argument_list pos:line="2105" pos:column="23">(<argument><expr><name pos:line="2105" pos:column="24">pIn1<pos:position pos:line="2105" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2105" pos:column="29"/></argument_list></call></expr></argument> )<pos:position pos:line="2105" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2105" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2106" pos:column="5">applyAffinity<pos:position pos:line="2106" pos:column="18"/></name><argument_list pos:line="2106" pos:column="18">(<argument><expr><name pos:line="2106" pos:column="19">pIn1<pos:position pos:line="2106" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="2106" pos:column="25">*<pos:position pos:line="2106" pos:column="26"/></operator><operator pos:line="2106" pos:column="26">(<pos:position pos:line="2106" pos:column="27"/></operator><name pos:line="2106" pos:column="27">zAffinity<pos:position pos:line="2106" pos:column="36"/></name><operator pos:line="2106" pos:column="36">++<pos:position pos:line="2106" pos:column="38"/></operator><operator pos:line="2106" pos:column="38">)<pos:position pos:line="2106" pos:column="39"/></operator></expr></argument>, <argument><expr><name pos:line="2106" pos:column="41">encoding<pos:position pos:line="2106" pos:column="49"/></name></expr></argument>)<pos:position pos:line="2106" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="2106" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2107" pos:column="5">pIn1<pos:position pos:line="2107" pos:column="9"/></name><operator pos:line="2107" pos:column="9">++<pos:position pos:line="2107" pos:column="11"/></operator></expr>;<pos:position pos:line="2107" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="2108" pos:column="4"/></block>while<condition pos:line="2108" pos:column="9">( <expr><name><name pos:line="2108" pos:column="11">zAffinity<pos:position pos:line="2108" pos:column="20"/></name><index pos:line="2108" pos:column="20">[<expr><literal type="number" pos:line="2108" pos:column="21">0<pos:position pos:line="2108" pos:column="22"/></literal></expr>]<pos:position pos:line="2108" pos:column="23"/></index></name></expr> )<pos:position pos:line="2108" pos:column="25"/></condition>;<pos:position pos:line="2108" pos:column="26"/></do>
  <break pos:line="2109" pos:column="3">break;<pos:position pos:line="2109" pos:column="9"/></break>
}<pos:position pos:line="2110" pos:column="2"/></block>

<comment type="block" pos:line="2112" pos:column="1">/* Opcode: MakeRecord P1 P2 P3 P4 *
** Synopsis: r[P3]=mkrec(r[P1@P2])
**
** Convert P2 registers beginning with P1 into the [record format]
** use as a data record in a database table or as a key
** in an index.  The OP_Column opcode can decode the record later.
**
** P4 may be a string that is P2 characters long.  The N-th character of the
** string indicates the column affinity that should be used for the N-th
** field of the index key.
**
** The mapping from character to affinity is given by the SQLITE_AFF_
** macros defined in sqliteInt.h.
**
** If P4 is NULL then all index fields have the affinity BLOB.
*/</comment>
<case pos:line="2128" pos:column="1">case <expr><name pos:line="2128" pos:column="6">OP_MakeRecord<pos:position pos:line="2128" pos:column="19"/></name></expr>:<pos:position pos:line="2128" pos:column="20"/></case> <block pos:line="2128" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="2129" pos:column="3">u8<pos:position pos:line="2129" pos:column="5"/></name> <modifier pos:line="2129" pos:column="6">*<pos:position pos:line="2129" pos:column="7"/></modifier></type><name pos:line="2129" pos:column="7">zNewRecord<pos:position pos:line="2129" pos:column="17"/></name></decl>;<pos:position pos:line="2129" pos:column="18"/></decl_stmt>        <comment type="block" pos:line="2129" pos:column="26">/* A buffer to hold the data for the new record */</comment>
  <decl_stmt><decl><type><name pos:line="2130" pos:column="3">Mem<pos:position pos:line="2130" pos:column="6"/></name> <modifier pos:line="2130" pos:column="7">*<pos:position pos:line="2130" pos:column="8"/></modifier></type><name pos:line="2130" pos:column="8">pRec<pos:position pos:line="2130" pos:column="12"/></name></decl>;<pos:position pos:line="2130" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="2130" pos:column="26">/* The new record */</comment>
  <decl_stmt><decl><type><name pos:line="2131" pos:column="3">u64<pos:position pos:line="2131" pos:column="6"/></name></type> <name pos:line="2131" pos:column="7">nData<pos:position pos:line="2131" pos:column="12"/></name></decl>;<pos:position pos:line="2131" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="2131" pos:column="26">/* Number of bytes of data space */</comment>
  <decl_stmt><decl><type><name pos:line="2132" pos:column="3">int<pos:position pos:line="2132" pos:column="6"/></name></type> <name pos:line="2132" pos:column="7">nHdr<pos:position pos:line="2132" pos:column="11"/></name></decl>;<pos:position pos:line="2132" pos:column="12"/></decl_stmt>              <comment type="block" pos:line="2132" pos:column="26">/* Number of bytes of header space */</comment>
  <decl_stmt><decl><type><name pos:line="2133" pos:column="3">i64<pos:position pos:line="2133" pos:column="6"/></name></type> <name pos:line="2133" pos:column="7">nByte<pos:position pos:line="2133" pos:column="12"/></name></decl>;<pos:position pos:line="2133" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="2133" pos:column="26">/* Data space required for this record */</comment>
  <decl_stmt><decl><type><name pos:line="2134" pos:column="3">i64<pos:position pos:line="2134" pos:column="6"/></name></type> <name pos:line="2134" pos:column="7">nZero<pos:position pos:line="2134" pos:column="12"/></name></decl>;<pos:position pos:line="2134" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="2134" pos:column="26">/* Number of zero bytes at the end of the record */</comment>
  <decl_stmt><decl><type><name pos:line="2135" pos:column="3">int<pos:position pos:line="2135" pos:column="6"/></name></type> <name pos:line="2135" pos:column="7">nVarint<pos:position pos:line="2135" pos:column="14"/></name></decl>;<pos:position pos:line="2135" pos:column="15"/></decl_stmt>           <comment type="block" pos:line="2135" pos:column="26">/* Number of bytes in a varint */</comment>
  <decl_stmt><decl><type><name pos:line="2136" pos:column="3">u32<pos:position pos:line="2136" pos:column="6"/></name></type> <name pos:line="2136" pos:column="7">serial_type<pos:position pos:line="2136" pos:column="18"/></name></decl>;<pos:position pos:line="2136" pos:column="19"/></decl_stmt>       <comment type="block" pos:line="2136" pos:column="26">/* Type field */</comment>
  <decl_stmt><decl><type><name pos:line="2137" pos:column="3">Mem<pos:position pos:line="2137" pos:column="6"/></name> <modifier pos:line="2137" pos:column="7">*<pos:position pos:line="2137" pos:column="8"/></modifier></type><name pos:line="2137" pos:column="8">pData0<pos:position pos:line="2137" pos:column="14"/></name></decl>;<pos:position pos:line="2137" pos:column="15"/></decl_stmt>           <comment type="block" pos:line="2137" pos:column="26">/* First field to be combined into the record */</comment>
  <decl_stmt><decl><type><name pos:line="2138" pos:column="3">Mem<pos:position pos:line="2138" pos:column="6"/></name> <modifier pos:line="2138" pos:column="7">*<pos:position pos:line="2138" pos:column="8"/></modifier></type><name pos:line="2138" pos:column="8">pLast<pos:position pos:line="2138" pos:column="13"/></name></decl>;<pos:position pos:line="2138" pos:column="14"/></decl_stmt>            <comment type="block" pos:line="2138" pos:column="26">/* Last field of the record */</comment>
  <decl_stmt><decl><type><name pos:line="2139" pos:column="3">int<pos:position pos:line="2139" pos:column="6"/></name></type> <name pos:line="2139" pos:column="7">nField<pos:position pos:line="2139" pos:column="13"/></name></decl>;<pos:position pos:line="2139" pos:column="14"/></decl_stmt>            <comment type="block" pos:line="2139" pos:column="26">/* Number of fields in the record */</comment>
  <decl_stmt><decl><type><name pos:line="2140" pos:column="3">char<pos:position pos:line="2140" pos:column="7"/></name> <modifier pos:line="2140" pos:column="8">*<pos:position pos:line="2140" pos:column="9"/></modifier></type><name pos:line="2140" pos:column="9">zAffinity<pos:position pos:line="2140" pos:column="18"/></name></decl>;<pos:position pos:line="2140" pos:column="19"/></decl_stmt>       <comment type="block" pos:line="2140" pos:column="26">/* The affinity string for the record */</comment>
  <decl_stmt><decl><type><name pos:line="2141" pos:column="3">int<pos:position pos:line="2141" pos:column="6"/></name></type> <name pos:line="2141" pos:column="7">file_format<pos:position pos:line="2141" pos:column="18"/></name></decl>;<pos:position pos:line="2141" pos:column="19"/></decl_stmt>       <comment type="block" pos:line="2141" pos:column="26">/* File format to use for encoding */</comment>
  <decl_stmt><decl><type><name pos:line="2142" pos:column="3">int<pos:position pos:line="2142" pos:column="6"/></name></type> <name pos:line="2142" pos:column="7">i<pos:position pos:line="2142" pos:column="8"/></name></decl>;<pos:position pos:line="2142" pos:column="9"/></decl_stmt>                 <comment type="block" pos:line="2142" pos:column="26">/* Space used in zNewRecord[] header */</comment>
  <decl_stmt><decl><type><name pos:line="2143" pos:column="3">int<pos:position pos:line="2143" pos:column="6"/></name></type> <name pos:line="2143" pos:column="7">j<pos:position pos:line="2143" pos:column="8"/></name></decl>;<pos:position pos:line="2143" pos:column="9"/></decl_stmt>                 <comment type="block" pos:line="2143" pos:column="26">/* Space used in zNewRecord[] content */</comment>
  <decl_stmt><decl><type><name pos:line="2144" pos:column="3">u32<pos:position pos:line="2144" pos:column="6"/></name></type> <name pos:line="2144" pos:column="7">len<pos:position pos:line="2144" pos:column="10"/></name></decl>;<pos:position pos:line="2144" pos:column="11"/></decl_stmt>               <comment type="block" pos:line="2144" pos:column="26">/* Length of a field */</comment>

  <comment type="block" pos:line="2146" pos:column="3">/* Assuming the record contains N fields, the record format looks
  ** like this:
  **
  ** ------------------------------------------------------------------------
  ** | hdr-size | type 0 | type 1 | ... | type N-1 | data0 | ... | data N-1 | 
  ** ------------------------------------------------------------------------
  **
  ** Data(0) is taken from register P1.  Data(1) comes from register P1+1
  ** and so forth.
  **
  ** Each type field is a varint representing the serial type of the 
  ** corresponding data element (see sqlite3VdbeSerialType()). The
  ** hdr-size field is also a varint which is the offset from the beginning
  ** of the record to data0.
  */</comment>
  <expr_stmt><expr><name pos:line="2161" pos:column="3">nData<pos:position pos:line="2161" pos:column="8"/></name> <operator pos:line="2161" pos:column="9">=<pos:position pos:line="2161" pos:column="10"/></operator> <literal type="number" pos:line="2161" pos:column="11">0<pos:position pos:line="2161" pos:column="12"/></literal></expr>;<pos:position pos:line="2161" pos:column="13"/></expr_stmt>         <comment type="block" pos:line="2161" pos:column="22">/* Number of bytes of data space */</comment>
  <expr_stmt><expr><name pos:line="2162" pos:column="3">nHdr<pos:position pos:line="2162" pos:column="7"/></name> <operator pos:line="2162" pos:column="8">=<pos:position pos:line="2162" pos:column="9"/></operator> <literal type="number" pos:line="2162" pos:column="10">0<pos:position pos:line="2162" pos:column="11"/></literal></expr>;<pos:position pos:line="2162" pos:column="12"/></expr_stmt>          <comment type="block" pos:line="2162" pos:column="22">/* Number of bytes of header space */</comment>
  <expr_stmt><expr><name pos:line="2163" pos:column="3">nZero<pos:position pos:line="2163" pos:column="8"/></name> <operator pos:line="2163" pos:column="9">=<pos:position pos:line="2163" pos:column="10"/></operator> <literal type="number" pos:line="2163" pos:column="11">0<pos:position pos:line="2163" pos:column="12"/></literal></expr>;<pos:position pos:line="2163" pos:column="13"/></expr_stmt>         <comment type="block" pos:line="2163" pos:column="22">/* Number of zero bytes at the end of the record */</comment>
  <expr_stmt><expr><name pos:line="2164" pos:column="3">nField<pos:position pos:line="2164" pos:column="9"/></name> <operator pos:line="2164" pos:column="10">=<pos:position pos:line="2164" pos:column="11"/></operator> <name><name pos:line="2164" pos:column="12">pOp<pos:position pos:line="2164" pos:column="15"/></name><operator pos:line="2164" pos:column="15">-&gt;<pos:position pos:line="2164" pos:column="20"/></operator><name pos:line="2164" pos:column="17">p1<pos:position pos:line="2164" pos:column="19"/></name></name></expr>;<pos:position pos:line="2164" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2165" pos:column="3">zAffinity<pos:position pos:line="2165" pos:column="12"/></name> <operator pos:line="2165" pos:column="13">=<pos:position pos:line="2165" pos:column="14"/></operator> <name><name pos:line="2165" pos:column="15">pOp<pos:position pos:line="2165" pos:column="18"/></name><operator pos:line="2165" pos:column="18">-&gt;<pos:position pos:line="2165" pos:column="23"/></operator><name pos:line="2165" pos:column="20">p4<pos:position pos:line="2165" pos:column="22"/></name><operator pos:line="2165" pos:column="22">.<pos:position pos:line="2165" pos:column="23"/></operator><name pos:line="2165" pos:column="23">z<pos:position pos:line="2165" pos:column="24"/></name></name></expr>;<pos:position pos:line="2165" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2166" pos:column="3">assert<pos:position pos:line="2166" pos:column="9"/></name><argument_list pos:line="2166" pos:column="9">( <argument><expr><name pos:line="2166" pos:column="11">nField<pos:position pos:line="2166" pos:column="17"/></name><operator pos:line="2166" pos:column="17">&gt;<pos:position pos:line="2166" pos:column="21"/></operator><literal type="number" pos:line="2166" pos:column="18">0<pos:position pos:line="2166" pos:column="19"/></literal> <operator pos:line="2166" pos:column="20">&amp;&amp;<pos:position pos:line="2166" pos:column="30"/></operator> <name><name pos:line="2166" pos:column="23">pOp<pos:position pos:line="2166" pos:column="26"/></name><operator pos:line="2166" pos:column="26">-&gt;<pos:position pos:line="2166" pos:column="31"/></operator><name pos:line="2166" pos:column="28">p2<pos:position pos:line="2166" pos:column="30"/></name></name><operator pos:line="2166" pos:column="30">&gt;<pos:position pos:line="2166" pos:column="34"/></operator><literal type="number" pos:line="2166" pos:column="31">0<pos:position pos:line="2166" pos:column="32"/></literal> <operator pos:line="2166" pos:column="33">&amp;&amp;<pos:position pos:line="2166" pos:column="43"/></operator> <name><name pos:line="2166" pos:column="36">pOp<pos:position pos:line="2166" pos:column="39"/></name><operator pos:line="2166" pos:column="39">-&gt;<pos:position pos:line="2166" pos:column="44"/></operator><name pos:line="2166" pos:column="41">p2<pos:position pos:line="2166" pos:column="43"/></name></name><operator pos:line="2166" pos:column="43">+<pos:position pos:line="2166" pos:column="44"/></operator><name pos:line="2166" pos:column="44">nField<pos:position pos:line="2166" pos:column="50"/></name><operator pos:line="2166" pos:column="50">&lt;=<pos:position pos:line="2166" pos:column="55"/></operator><operator pos:line="2166" pos:column="52">(<pos:position pos:line="2166" pos:column="53"/></operator><name><name pos:line="2166" pos:column="53">p<pos:position pos:line="2166" pos:column="54"/></name><operator pos:line="2166" pos:column="54">-&gt;<pos:position pos:line="2166" pos:column="59"/></operator><name pos:line="2166" pos:column="56">nMem<pos:position pos:line="2166" pos:column="60"/></name></name><operator pos:line="2166" pos:column="60">+<pos:position pos:line="2166" pos:column="61"/></operator><literal type="number" pos:line="2166" pos:column="61">1<pos:position pos:line="2166" pos:column="62"/></literal> <operator pos:line="2166" pos:column="63">-<pos:position pos:line="2166" pos:column="64"/></operator> <name><name pos:line="2166" pos:column="65">p<pos:position pos:line="2166" pos:column="66"/></name><operator pos:line="2166" pos:column="66">-&gt;<pos:position pos:line="2166" pos:column="71"/></operator><name pos:line="2166" pos:column="68">nCursor<pos:position pos:line="2166" pos:column="75"/></name></name><operator pos:line="2166" pos:column="75">)<pos:position pos:line="2166" pos:column="76"/></operator><operator pos:line="2166" pos:column="76">+<pos:position pos:line="2166" pos:column="77"/></operator><literal type="number" pos:line="2166" pos:column="77">1<pos:position pos:line="2166" pos:column="78"/></literal></expr></argument> )<pos:position pos:line="2166" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="2166" pos:column="81"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2167" pos:column="3">pData0<pos:position pos:line="2167" pos:column="9"/></name> <operator pos:line="2167" pos:column="10">=<pos:position pos:line="2167" pos:column="11"/></operator> <operator pos:line="2167" pos:column="12">&amp;<pos:position pos:line="2167" pos:column="17"/></operator><name><name pos:line="2167" pos:column="13">aMem<pos:position pos:line="2167" pos:column="17"/></name><index pos:line="2167" pos:column="17">[<expr><name pos:line="2167" pos:column="18">nField<pos:position pos:line="2167" pos:column="24"/></name></expr>]<pos:position pos:line="2167" pos:column="25"/></index></name></expr>;<pos:position pos:line="2167" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2168" pos:column="3">nField<pos:position pos:line="2168" pos:column="9"/></name> <operator pos:line="2168" pos:column="10">=<pos:position pos:line="2168" pos:column="11"/></operator> <name><name pos:line="2168" pos:column="12">pOp<pos:position pos:line="2168" pos:column="15"/></name><operator pos:line="2168" pos:column="15">-&gt;<pos:position pos:line="2168" pos:column="20"/></operator><name pos:line="2168" pos:column="17">p2<pos:position pos:line="2168" pos:column="19"/></name></name></expr>;<pos:position pos:line="2168" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2169" pos:column="3">pLast<pos:position pos:line="2169" pos:column="8"/></name> <operator pos:line="2169" pos:column="9">=<pos:position pos:line="2169" pos:column="10"/></operator> <operator pos:line="2169" pos:column="11">&amp;<pos:position pos:line="2169" pos:column="16"/></operator><name><name pos:line="2169" pos:column="12">pData0<pos:position pos:line="2169" pos:column="18"/></name><index pos:line="2169" pos:column="18">[<expr><name pos:line="2169" pos:column="19">nField<pos:position pos:line="2169" pos:column="25"/></name><operator pos:line="2169" pos:column="25">-<pos:position pos:line="2169" pos:column="26"/></operator><literal type="number" pos:line="2169" pos:column="26">1<pos:position pos:line="2169" pos:column="27"/></literal></expr>]<pos:position pos:line="2169" pos:column="28"/></index></name></expr>;<pos:position pos:line="2169" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2170" pos:column="3">file_format<pos:position pos:line="2170" pos:column="14"/></name> <operator pos:line="2170" pos:column="15">=<pos:position pos:line="2170" pos:column="16"/></operator> <name><name pos:line="2170" pos:column="17">p<pos:position pos:line="2170" pos:column="18"/></name><operator pos:line="2170" pos:column="18">-&gt;<pos:position pos:line="2170" pos:column="23"/></operator><name pos:line="2170" pos:column="20">minWriteFileFormat<pos:position pos:line="2170" pos:column="38"/></name></name></expr>;<pos:position pos:line="2170" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="2172" pos:column="3">/* Identify the output register */</comment>
  <expr_stmt><expr><call><name pos:line="2173" pos:column="3">assert<pos:position pos:line="2173" pos:column="9"/></name><argument_list pos:line="2173" pos:column="9">( <argument><expr><name><name pos:line="2173" pos:column="11">pOp<pos:position pos:line="2173" pos:column="14"/></name><operator pos:line="2173" pos:column="14">-&gt;<pos:position pos:line="2173" pos:column="19"/></operator><name pos:line="2173" pos:column="16">p3<pos:position pos:line="2173" pos:column="18"/></name></name><operator pos:line="2173" pos:column="18">&lt;<pos:position pos:line="2173" pos:column="22"/></operator><name><name pos:line="2173" pos:column="19">pOp<pos:position pos:line="2173" pos:column="22"/></name><operator pos:line="2173" pos:column="22">-&gt;<pos:position pos:line="2173" pos:column="27"/></operator><name pos:line="2173" pos:column="24">p1<pos:position pos:line="2173" pos:column="26"/></name></name> <operator pos:line="2173" pos:column="27">||<pos:position pos:line="2173" pos:column="29"/></operator> <name><name pos:line="2173" pos:column="30">pOp<pos:position pos:line="2173" pos:column="33"/></name><operator pos:line="2173" pos:column="33">-&gt;<pos:position pos:line="2173" pos:column="38"/></operator><name pos:line="2173" pos:column="35">p3<pos:position pos:line="2173" pos:column="37"/></name></name><operator pos:line="2173" pos:column="37">&gt;=<pos:position pos:line="2173" pos:column="42"/></operator><name><name pos:line="2173" pos:column="39">pOp<pos:position pos:line="2173" pos:column="42"/></name><operator pos:line="2173" pos:column="42">-&gt;<pos:position pos:line="2173" pos:column="47"/></operator><name pos:line="2173" pos:column="44">p1<pos:position pos:line="2173" pos:column="46"/></name></name><operator pos:line="2173" pos:column="46">+<pos:position pos:line="2173" pos:column="47"/></operator><name><name pos:line="2173" pos:column="47">pOp<pos:position pos:line="2173" pos:column="50"/></name><operator pos:line="2173" pos:column="50">-&gt;<pos:position pos:line="2173" pos:column="55"/></operator><name pos:line="2173" pos:column="52">p2<pos:position pos:line="2173" pos:column="54"/></name></name></expr></argument> )<pos:position pos:line="2173" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2173" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2174" pos:column="3">pOut<pos:position pos:line="2174" pos:column="7"/></name> <operator pos:line="2174" pos:column="8">=<pos:position pos:line="2174" pos:column="9"/></operator> <operator pos:line="2174" pos:column="10">&amp;<pos:position pos:line="2174" pos:column="15"/></operator><name><name pos:line="2174" pos:column="11">aMem<pos:position pos:line="2174" pos:column="15"/></name><index pos:line="2174" pos:column="15">[<expr><name><name pos:line="2174" pos:column="16">pOp<pos:position pos:line="2174" pos:column="19"/></name><operator pos:line="2174" pos:column="19">-&gt;<pos:position pos:line="2174" pos:column="24"/></operator><name pos:line="2174" pos:column="21">p3<pos:position pos:line="2174" pos:column="23"/></name></name></expr>]<pos:position pos:line="2174" pos:column="24"/></index></name></expr>;<pos:position pos:line="2174" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2175" pos:column="3">memAboutToChange<pos:position pos:line="2175" pos:column="19"/></name><argument_list pos:line="2175" pos:column="19">(<argument><expr><name pos:line="2175" pos:column="20">p<pos:position pos:line="2175" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="2175" pos:column="23">pOut<pos:position pos:line="2175" pos:column="27"/></name></expr></argument>)<pos:position pos:line="2175" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="2175" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="2177" pos:column="3">/* Apply the requested affinity to all inputs
  */</comment>
  <expr_stmt><expr><call><name pos:line="2179" pos:column="3">assert<pos:position pos:line="2179" pos:column="9"/></name><argument_list pos:line="2179" pos:column="9">( <argument><expr><name pos:line="2179" pos:column="11">pData0<pos:position pos:line="2179" pos:column="17"/></name><operator pos:line="2179" pos:column="17">&lt;=<pos:position pos:line="2179" pos:column="22"/></operator><name pos:line="2179" pos:column="19">pLast<pos:position pos:line="2179" pos:column="24"/></name></expr></argument> )<pos:position pos:line="2179" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2179" pos:column="27"/></expr_stmt>
  <if pos:line="2180" pos:column="3">if<condition pos:line="2180" pos:column="5">( <expr><name pos:line="2180" pos:column="7">zAffinity<pos:position pos:line="2180" pos:column="16"/></name></expr> )<pos:position pos:line="2180" pos:column="18"/></condition><then><block pos:line="2180" pos:column="18">{
    <expr_stmt><expr><name pos:line="2181" pos:column="5">pRec<pos:position pos:line="2181" pos:column="9"/></name> <operator pos:line="2181" pos:column="10">=<pos:position pos:line="2181" pos:column="11"/></operator> <name pos:line="2181" pos:column="12">pData0<pos:position pos:line="2181" pos:column="18"/></name></expr>;<pos:position pos:line="2181" pos:column="19"/></expr_stmt>
    <do pos:line="2182" pos:column="5">do<block pos:line="2182" pos:column="7">{
      <expr_stmt><expr><call><name pos:line="2183" pos:column="7">applyAffinity<pos:position pos:line="2183" pos:column="20"/></name><argument_list pos:line="2183" pos:column="20">(<argument><expr><name pos:line="2183" pos:column="21">pRec<pos:position pos:line="2183" pos:column="25"/></name><operator pos:line="2183" pos:column="25">++<pos:position pos:line="2183" pos:column="27"/></operator></expr></argument>, <argument><expr><operator pos:line="2183" pos:column="29">*<pos:position pos:line="2183" pos:column="30"/></operator><operator pos:line="2183" pos:column="30">(<pos:position pos:line="2183" pos:column="31"/></operator><name pos:line="2183" pos:column="31">zAffinity<pos:position pos:line="2183" pos:column="40"/></name><operator pos:line="2183" pos:column="40">++<pos:position pos:line="2183" pos:column="42"/></operator><operator pos:line="2183" pos:column="42">)<pos:position pos:line="2183" pos:column="43"/></operator></expr></argument>, <argument><expr><name pos:line="2183" pos:column="45">encoding<pos:position pos:line="2183" pos:column="53"/></name></expr></argument>)<pos:position pos:line="2183" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="2183" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="2184" pos:column="7">assert<pos:position pos:line="2184" pos:column="13"/></name><argument_list pos:line="2184" pos:column="13">( <argument><expr><name><name pos:line="2184" pos:column="15">zAffinity<pos:position pos:line="2184" pos:column="24"/></name><index pos:line="2184" pos:column="24">[<expr><literal type="number" pos:line="2184" pos:column="25">0<pos:position pos:line="2184" pos:column="26"/></literal></expr>]<pos:position pos:line="2184" pos:column="27"/></index></name><operator pos:line="2184" pos:column="27">==<pos:position pos:line="2184" pos:column="29"/></operator><literal type="number" pos:line="2184" pos:column="29">0<pos:position pos:line="2184" pos:column="30"/></literal> <operator pos:line="2184" pos:column="31">||<pos:position pos:line="2184" pos:column="33"/></operator> <name pos:line="2184" pos:column="34">pRec<pos:position pos:line="2184" pos:column="38"/></name><operator pos:line="2184" pos:column="38">&lt;=<pos:position pos:line="2184" pos:column="43"/></operator><name pos:line="2184" pos:column="40">pLast<pos:position pos:line="2184" pos:column="45"/></name></expr></argument> )<pos:position pos:line="2184" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="2184" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="2185" pos:column="6"/></block>while<condition pos:line="2185" pos:column="11">( <expr><name><name pos:line="2185" pos:column="13">zAffinity<pos:position pos:line="2185" pos:column="22"/></name><index pos:line="2185" pos:column="22">[<expr><literal type="number" pos:line="2185" pos:column="23">0<pos:position pos:line="2185" pos:column="24"/></literal></expr>]<pos:position pos:line="2185" pos:column="25"/></index></name></expr> )<pos:position pos:line="2185" pos:column="27"/></condition>;<pos:position pos:line="2185" pos:column="28"/></do>
  }<pos:position pos:line="2186" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="2188" pos:column="1">#<cpp:directive pos:line="2188" pos:column="2">ifdef<pos:position pos:line="2188" pos:column="7"/></cpp:directive> <name pos:line="2188" pos:column="8">SQLITE_ENABLE_NULL_TRIM<pos:position pos:line="2188" pos:column="31"/></name></cpp:ifdef>
  <comment type="block" pos:line="2189" pos:column="3">/* NULLs can be safely trimmed from the end of the record, as long as
  ** as the schema format is 2 or more and none of the omitted columns
  ** have a non-NULL default value.  Also, the record must be left with
  ** at least one field.  If P5&gt;0 then it will be one more than the
  ** index of the right-most column with a non-NULL default value */</comment>
  <if pos:line="2194" pos:column="3">if<condition pos:line="2194" pos:column="5">( <expr><name><name pos:line="2194" pos:column="7">pOp<pos:position pos:line="2194" pos:column="10"/></name><operator pos:line="2194" pos:column="10">-&gt;<pos:position pos:line="2194" pos:column="15"/></operator><name pos:line="2194" pos:column="12">p5<pos:position pos:line="2194" pos:column="14"/></name></name></expr> )<pos:position pos:line="2194" pos:column="16"/></condition><then><block pos:line="2194" pos:column="16">{
    <while pos:line="2195" pos:column="5">while<condition pos:line="2195" pos:column="10">( <expr><operator pos:line="2195" pos:column="12">(<pos:position pos:line="2195" pos:column="13"/></operator><name><name pos:line="2195" pos:column="13">pLast<pos:position pos:line="2195" pos:column="18"/></name><operator pos:line="2195" pos:column="18">-&gt;<pos:position pos:line="2195" pos:column="23"/></operator><name pos:line="2195" pos:column="20">flags<pos:position pos:line="2195" pos:column="25"/></name></name> <operator pos:line="2195" pos:column="26">&amp;<pos:position pos:line="2195" pos:column="31"/></operator> <name pos:line="2195" pos:column="28">MEM_Null<pos:position pos:line="2195" pos:column="36"/></name><operator pos:line="2195" pos:column="36">)<pos:position pos:line="2195" pos:column="37"/></operator><operator pos:line="2195" pos:column="37">!=<pos:position pos:line="2195" pos:column="39"/></operator><literal type="number" pos:line="2195" pos:column="39">0<pos:position pos:line="2195" pos:column="40"/></literal> <operator pos:line="2195" pos:column="41">&amp;&amp;<pos:position pos:line="2195" pos:column="51"/></operator> <name pos:line="2195" pos:column="44">nField<pos:position pos:line="2195" pos:column="50"/></name><operator pos:line="2195" pos:column="50">&gt;<pos:position pos:line="2195" pos:column="54"/></operator><name><name pos:line="2195" pos:column="51">pOp<pos:position pos:line="2195" pos:column="54"/></name><operator pos:line="2195" pos:column="54">-&gt;<pos:position pos:line="2195" pos:column="59"/></operator><name pos:line="2195" pos:column="56">p5<pos:position pos:line="2195" pos:column="58"/></name></name></expr> )<pos:position pos:line="2195" pos:column="60"/></condition><block pos:line="2195" pos:column="60">{
      <expr_stmt><expr><name pos:line="2196" pos:column="7">pLast<pos:position pos:line="2196" pos:column="12"/></name><operator pos:line="2196" pos:column="12">--<pos:position pos:line="2196" pos:column="14"/></operator></expr>;<pos:position pos:line="2196" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2197" pos:column="7">nField<pos:position pos:line="2197" pos:column="13"/></name><operator pos:line="2197" pos:column="13">--<pos:position pos:line="2197" pos:column="15"/></operator></expr>;<pos:position pos:line="2197" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="2198" pos:column="6"/></block></while>
  }<pos:position pos:line="2199" pos:column="4"/></block></then></if>
<cpp:endif pos:line="2200" pos:column="1">#<cpp:directive pos:line="2200" pos:column="2">endif<pos:position pos:line="2200" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="2202" pos:column="3">/* Loop through the elements that will make up the record to figure
  ** out how much space is required for the new record.
  */</comment>
  <expr_stmt><expr><name pos:line="2205" pos:column="3">pRec<pos:position pos:line="2205" pos:column="7"/></name> <operator pos:line="2205" pos:column="8">=<pos:position pos:line="2205" pos:column="9"/></operator> <name pos:line="2205" pos:column="10">pLast<pos:position pos:line="2205" pos:column="15"/></name></expr>;<pos:position pos:line="2205" pos:column="16"/></expr_stmt>
  <do pos:line="2206" pos:column="3">do<block pos:line="2206" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="2207" pos:column="5">assert<pos:position pos:line="2207" pos:column="11"/></name><argument_list pos:line="2207" pos:column="11">( <argument><expr><call><name pos:line="2207" pos:column="13">memIsValid<pos:position pos:line="2207" pos:column="23"/></name><argument_list pos:line="2207" pos:column="23">(<argument><expr><name pos:line="2207" pos:column="24">pRec<pos:position pos:line="2207" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2207" pos:column="29"/></argument_list></call></expr></argument> )<pos:position pos:line="2207" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2207" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2208" pos:column="5">pRec<pos:position pos:line="2208" pos:column="9"/></name><operator pos:line="2208" pos:column="9">-&gt;<pos:position pos:line="2208" pos:column="14"/></operator><name pos:line="2208" pos:column="11">uTemp<pos:position pos:line="2208" pos:column="16"/></name></name> <operator pos:line="2208" pos:column="17">=<pos:position pos:line="2208" pos:column="18"/></operator> <name pos:line="2208" pos:column="19">serial_type<pos:position pos:line="2208" pos:column="30"/></name> <operator pos:line="2208" pos:column="31">=<pos:position pos:line="2208" pos:column="32"/></operator> <call><name pos:line="2208" pos:column="33">sqlite3VdbeSerialType<pos:position pos:line="2208" pos:column="54"/></name><argument_list pos:line="2208" pos:column="54">(<argument><expr><name pos:line="2208" pos:column="55">pRec<pos:position pos:line="2208" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="2208" pos:column="61">file_format<pos:position pos:line="2208" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="2208" pos:column="74">&amp;<pos:position pos:line="2208" pos:column="79"/></operator><name pos:line="2208" pos:column="75">len<pos:position pos:line="2208" pos:column="78"/></name></expr></argument>)<pos:position pos:line="2208" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="2208" pos:column="80"/></expr_stmt>
    <if pos:line="2209" pos:column="5">if<condition pos:line="2209" pos:column="7">( <expr><name><name pos:line="2209" pos:column="9">pRec<pos:position pos:line="2209" pos:column="13"/></name><operator pos:line="2209" pos:column="13">-&gt;<pos:position pos:line="2209" pos:column="18"/></operator><name pos:line="2209" pos:column="15">flags<pos:position pos:line="2209" pos:column="20"/></name></name> <operator pos:line="2209" pos:column="21">&amp;<pos:position pos:line="2209" pos:column="26"/></operator> <name pos:line="2209" pos:column="23">MEM_Zero<pos:position pos:line="2209" pos:column="31"/></name></expr> )<pos:position pos:line="2209" pos:column="33"/></condition><then><block pos:line="2209" pos:column="33">{
      <if pos:line="2210" pos:column="7">if<condition pos:line="2210" pos:column="9">( <expr><name pos:line="2210" pos:column="11">nData<pos:position pos:line="2210" pos:column="16"/></name></expr> )<pos:position pos:line="2210" pos:column="18"/></condition><then><block pos:line="2210" pos:column="18">{
        <if pos:line="2211" pos:column="9">if<condition pos:line="2211" pos:column="11">( <expr><call><name pos:line="2211" pos:column="13">sqlite3VdbeMemExpandBlob<pos:position pos:line="2211" pos:column="37"/></name><argument_list pos:line="2211" pos:column="37">(<argument><expr><name pos:line="2211" pos:column="38">pRec<pos:position pos:line="2211" pos:column="42"/></name></expr></argument>)<pos:position pos:line="2211" pos:column="43"/></argument_list></call></expr> )<pos:position pos:line="2211" pos:column="45"/></condition><then pos:line="2211" pos:column="45"> <block type="pseudo"><goto pos:line="2211" pos:column="46">goto <name pos:line="2211" pos:column="51">no_mem<pos:position pos:line="2211" pos:column="57"/></name>;<pos:position pos:line="2211" pos:column="58"/></goto></block></then></if>
      }<pos:position pos:line="2212" pos:column="8"/></block></then><else pos:line="2212" pos:column="8">else<block pos:line="2212" pos:column="12">{
        <expr_stmt><expr><name pos:line="2213" pos:column="9">nZero<pos:position pos:line="2213" pos:column="14"/></name> <operator pos:line="2213" pos:column="15">+=<pos:position pos:line="2213" pos:column="17"/></operator> <name><name pos:line="2213" pos:column="18">pRec<pos:position pos:line="2213" pos:column="22"/></name><operator pos:line="2213" pos:column="22">-&gt;<pos:position pos:line="2213" pos:column="27"/></operator><name pos:line="2213" pos:column="24">u<pos:position pos:line="2213" pos:column="25"/></name><operator pos:line="2213" pos:column="25">.<pos:position pos:line="2213" pos:column="26"/></operator><name pos:line="2213" pos:column="26">nZero<pos:position pos:line="2213" pos:column="31"/></name></name></expr>;<pos:position pos:line="2213" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="2214" pos:column="9">len<pos:position pos:line="2214" pos:column="12"/></name> <operator pos:line="2214" pos:column="13">-=<pos:position pos:line="2214" pos:column="15"/></operator> <name><name pos:line="2214" pos:column="16">pRec<pos:position pos:line="2214" pos:column="20"/></name><operator pos:line="2214" pos:column="20">-&gt;<pos:position pos:line="2214" pos:column="25"/></operator><name pos:line="2214" pos:column="22">u<pos:position pos:line="2214" pos:column="23"/></name><operator pos:line="2214" pos:column="23">.<pos:position pos:line="2214" pos:column="24"/></operator><name pos:line="2214" pos:column="24">nZero<pos:position pos:line="2214" pos:column="29"/></name></name></expr>;<pos:position pos:line="2214" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="2215" pos:column="8"/></block></else></if>
    }<pos:position pos:line="2216" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="2217" pos:column="5">nData<pos:position pos:line="2217" pos:column="10"/></name> <operator pos:line="2217" pos:column="11">+=<pos:position pos:line="2217" pos:column="13"/></operator> <name pos:line="2217" pos:column="14">len<pos:position pos:line="2217" pos:column="17"/></name></expr>;<pos:position pos:line="2217" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2218" pos:column="5">testcase<pos:position pos:line="2218" pos:column="13"/></name><argument_list pos:line="2218" pos:column="13">( <argument><expr><name pos:line="2218" pos:column="15">serial_type<pos:position pos:line="2218" pos:column="26"/></name><operator pos:line="2218" pos:column="26">==<pos:position pos:line="2218" pos:column="28"/></operator><literal type="number" pos:line="2218" pos:column="28">127<pos:position pos:line="2218" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="2218" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2218" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2219" pos:column="5">testcase<pos:position pos:line="2219" pos:column="13"/></name><argument_list pos:line="2219" pos:column="13">( <argument><expr><name pos:line="2219" pos:column="15">serial_type<pos:position pos:line="2219" pos:column="26"/></name><operator pos:line="2219" pos:column="26">==<pos:position pos:line="2219" pos:column="28"/></operator><literal type="number" pos:line="2219" pos:column="28">128<pos:position pos:line="2219" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="2219" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2219" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2220" pos:column="5">nHdr<pos:position pos:line="2220" pos:column="9"/></name> <operator pos:line="2220" pos:column="10">+=<pos:position pos:line="2220" pos:column="12"/></operator> <ternary><condition><expr><name pos:line="2220" pos:column="13">serial_type<pos:position pos:line="2220" pos:column="24"/></name><operator pos:line="2220" pos:column="24">&lt;=<pos:position pos:line="2220" pos:column="29"/></operator><literal type="number" pos:line="2220" pos:column="26">127<pos:position pos:line="2220" pos:column="29"/></literal></expr> ?<pos:position pos:line="2220" pos:column="31"/></condition><then pos:line="2220" pos:column="31"> <expr><literal type="number" pos:line="2220" pos:column="32">1<pos:position pos:line="2220" pos:column="33"/></literal></expr> <pos:position pos:line="2220" pos:column="34"/></then><else pos:line="2220" pos:column="34">: <expr><call><name pos:line="2220" pos:column="36">sqlite3VarintLen<pos:position pos:line="2220" pos:column="52"/></name><argument_list pos:line="2220" pos:column="52">(<argument><expr><name pos:line="2220" pos:column="53">serial_type<pos:position pos:line="2220" pos:column="64"/></name></expr></argument>)<pos:position pos:line="2220" pos:column="65"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="2220" pos:column="66"/></expr_stmt>
    <if pos:line="2221" pos:column="5">if<condition pos:line="2221" pos:column="7">( <expr><name pos:line="2221" pos:column="9">pRec<pos:position pos:line="2221" pos:column="13"/></name><operator pos:line="2221" pos:column="13">==<pos:position pos:line="2221" pos:column="15"/></operator><name pos:line="2221" pos:column="15">pData0<pos:position pos:line="2221" pos:column="21"/></name></expr> )<pos:position pos:line="2221" pos:column="23"/></condition><then pos:line="2221" pos:column="23"> <block type="pseudo"><break pos:line="2221" pos:column="24">break;<pos:position pos:line="2221" pos:column="30"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="2222" pos:column="5">pRec<pos:position pos:line="2222" pos:column="9"/></name><operator pos:line="2222" pos:column="9">--<pos:position pos:line="2222" pos:column="11"/></operator></expr>;<pos:position pos:line="2222" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="2223" pos:column="4"/></block>while<condition pos:line="2223" pos:column="9">(<expr><literal type="number" pos:line="2223" pos:column="10">1<pos:position pos:line="2223" pos:column="11"/></literal></expr>)<pos:position pos:line="2223" pos:column="12"/></condition>;<pos:position pos:line="2223" pos:column="13"/></do>

  <comment type="block" pos:line="2225" pos:column="3">/* EVIDENCE-OF: R-22564-11647 The header begins with a single varint
  ** which determines the total number of bytes in the header. The varint
  ** value is the size of the header in bytes including the size varint
  ** itself. */</comment>
  <expr_stmt><expr><call><name pos:line="2229" pos:column="3">testcase<pos:position pos:line="2229" pos:column="11"/></name><argument_list pos:line="2229" pos:column="11">( <argument><expr><name pos:line="2229" pos:column="13">nHdr<pos:position pos:line="2229" pos:column="17"/></name><operator pos:line="2229" pos:column="17">==<pos:position pos:line="2229" pos:column="19"/></operator><literal type="number" pos:line="2229" pos:column="19">126<pos:position pos:line="2229" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="2229" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="2229" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2230" pos:column="3">testcase<pos:position pos:line="2230" pos:column="11"/></name><argument_list pos:line="2230" pos:column="11">( <argument><expr><name pos:line="2230" pos:column="13">nHdr<pos:position pos:line="2230" pos:column="17"/></name><operator pos:line="2230" pos:column="17">==<pos:position pos:line="2230" pos:column="19"/></operator><literal type="number" pos:line="2230" pos:column="19">127<pos:position pos:line="2230" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="2230" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="2230" pos:column="25"/></expr_stmt>
  <if pos:line="2231" pos:column="3">if<condition pos:line="2231" pos:column="5">( <expr><name pos:line="2231" pos:column="7">nHdr<pos:position pos:line="2231" pos:column="11"/></name><operator pos:line="2231" pos:column="11">&lt;=<pos:position pos:line="2231" pos:column="16"/></operator><literal type="number" pos:line="2231" pos:column="13">126<pos:position pos:line="2231" pos:column="16"/></literal></expr> )<pos:position pos:line="2231" pos:column="18"/></condition><then><block pos:line="2231" pos:column="18">{
    <comment type="block" pos:line="2232" pos:column="5">/* The common case */</comment>
    <expr_stmt><expr><name pos:line="2233" pos:column="5">nHdr<pos:position pos:line="2233" pos:column="9"/></name> <operator pos:line="2233" pos:column="10">+=<pos:position pos:line="2233" pos:column="12"/></operator> <literal type="number" pos:line="2233" pos:column="13">1<pos:position pos:line="2233" pos:column="14"/></literal></expr>;<pos:position pos:line="2233" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="2234" pos:column="4"/></block></then><else pos:line="2234" pos:column="4">else<block pos:line="2234" pos:column="8">{
    <comment type="block" pos:line="2235" pos:column="5">/* Rare case of a really large header */</comment>
    <expr_stmt><expr><name pos:line="2236" pos:column="5">nVarint<pos:position pos:line="2236" pos:column="12"/></name> <operator pos:line="2236" pos:column="13">=<pos:position pos:line="2236" pos:column="14"/></operator> <call><name pos:line="2236" pos:column="15">sqlite3VarintLen<pos:position pos:line="2236" pos:column="31"/></name><argument_list pos:line="2236" pos:column="31">(<argument><expr><name pos:line="2236" pos:column="32">nHdr<pos:position pos:line="2236" pos:column="36"/></name></expr></argument>)<pos:position pos:line="2236" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="2236" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2237" pos:column="5">nHdr<pos:position pos:line="2237" pos:column="9"/></name> <operator pos:line="2237" pos:column="10">+=<pos:position pos:line="2237" pos:column="12"/></operator> <name pos:line="2237" pos:column="13">nVarint<pos:position pos:line="2237" pos:column="20"/></name></expr>;<pos:position pos:line="2237" pos:column="21"/></expr_stmt>
    <if pos:line="2238" pos:column="5">if<condition pos:line="2238" pos:column="7">( <expr><name pos:line="2238" pos:column="9">nVarint<pos:position pos:line="2238" pos:column="16"/></name><operator pos:line="2238" pos:column="16">&lt;<pos:position pos:line="2238" pos:column="20"/></operator><call><name pos:line="2238" pos:column="17">sqlite3VarintLen<pos:position pos:line="2238" pos:column="33"/></name><argument_list pos:line="2238" pos:column="33">(<argument><expr><name pos:line="2238" pos:column="34">nHdr<pos:position pos:line="2238" pos:column="38"/></name></expr></argument>)<pos:position pos:line="2238" pos:column="39"/></argument_list></call></expr> )<pos:position pos:line="2238" pos:column="41"/></condition><then pos:line="2238" pos:column="41"> <block type="pseudo"><expr_stmt><expr><name pos:line="2238" pos:column="42">nHdr<pos:position pos:line="2238" pos:column="46"/></name><operator pos:line="2238" pos:column="46">++<pos:position pos:line="2238" pos:column="48"/></operator></expr>;<pos:position pos:line="2238" pos:column="49"/></expr_stmt></block></then></if>
  }<pos:position pos:line="2239" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name pos:line="2240" pos:column="3">nByte<pos:position pos:line="2240" pos:column="8"/></name> <operator pos:line="2240" pos:column="9">=<pos:position pos:line="2240" pos:column="10"/></operator> <name pos:line="2240" pos:column="11">nHdr<pos:position pos:line="2240" pos:column="15"/></name><operator pos:line="2240" pos:column="15">+<pos:position pos:line="2240" pos:column="16"/></operator><name pos:line="2240" pos:column="16">nData<pos:position pos:line="2240" pos:column="21"/></name></expr>;<pos:position pos:line="2240" pos:column="22"/></expr_stmt>
  <if pos:line="2241" pos:column="3">if<condition pos:line="2241" pos:column="5">( <expr><name pos:line="2241" pos:column="7">nByte<pos:position pos:line="2241" pos:column="12"/></name><operator pos:line="2241" pos:column="12">+<pos:position pos:line="2241" pos:column="13"/></operator><name pos:line="2241" pos:column="13">nZero<pos:position pos:line="2241" pos:column="18"/></name><operator pos:line="2241" pos:column="18">&gt;<pos:position pos:line="2241" pos:column="22"/></operator><name><name pos:line="2241" pos:column="19">db<pos:position pos:line="2241" pos:column="21"/></name><operator pos:line="2241" pos:column="21">-&gt;<pos:position pos:line="2241" pos:column="26"/></operator><name pos:line="2241" pos:column="23">aLimit<pos:position pos:line="2241" pos:column="29"/></name><index pos:line="2241" pos:column="29">[<expr><name pos:line="2241" pos:column="30">SQLITE_LIMIT_LENGTH<pos:position pos:line="2241" pos:column="49"/></name></expr>]<pos:position pos:line="2241" pos:column="50"/></index></name></expr> )<pos:position pos:line="2241" pos:column="52"/></condition><then><block pos:line="2241" pos:column="52">{
    <goto pos:line="2242" pos:column="5">goto <name pos:line="2242" pos:column="10">too_big<pos:position pos:line="2242" pos:column="17"/></name>;<pos:position pos:line="2242" pos:column="18"/></goto>
  }<pos:position pos:line="2243" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="2245" pos:column="3">/* Make sure the output register has a buffer large enough to store 
  ** the new record. The output register (pOp-&gt;p3) is not allowed to
  ** be one of the input registers (because the following call to
  ** sqlite3VdbeMemClearAndResize() could clobber the value before it is used).
  */</comment>
  <if pos:line="2250" pos:column="3">if<condition pos:line="2250" pos:column="5">( <expr><call><name pos:line="2250" pos:column="7">sqlite3VdbeMemClearAndResize<pos:position pos:line="2250" pos:column="35"/></name><argument_list pos:line="2250" pos:column="35">(<argument><expr><name pos:line="2250" pos:column="36">pOut<pos:position pos:line="2250" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="2250" pos:column="42">(<pos:position pos:line="2250" pos:column="43"/></operator><name pos:line="2250" pos:column="43">int<pos:position pos:line="2250" pos:column="46"/></name><operator pos:line="2250" pos:column="46">)<pos:position pos:line="2250" pos:column="47"/></operator><name pos:line="2250" pos:column="47">nByte<pos:position pos:line="2250" pos:column="52"/></name></expr></argument>)<pos:position pos:line="2250" pos:column="53"/></argument_list></call></expr> )<pos:position pos:line="2250" pos:column="55"/></condition><then><block pos:line="2250" pos:column="55">{
    <goto pos:line="2251" pos:column="5">goto <name pos:line="2251" pos:column="10">no_mem<pos:position pos:line="2251" pos:column="16"/></name>;<pos:position pos:line="2251" pos:column="17"/></goto>
  }<pos:position pos:line="2252" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="2253" pos:column="3">zNewRecord<pos:position pos:line="2253" pos:column="13"/></name> <operator pos:line="2253" pos:column="14">=<pos:position pos:line="2253" pos:column="15"/></operator> <operator pos:line="2253" pos:column="16">(<pos:position pos:line="2253" pos:column="17"/></operator><name pos:line="2253" pos:column="17">u8<pos:position pos:line="2253" pos:column="19"/></name> <operator pos:line="2253" pos:column="20">*<pos:position pos:line="2253" pos:column="21"/></operator><operator pos:line="2253" pos:column="21">)<pos:position pos:line="2253" pos:column="22"/></operator><name><name pos:line="2253" pos:column="22">pOut<pos:position pos:line="2253" pos:column="26"/></name><operator pos:line="2253" pos:column="26">-&gt;<pos:position pos:line="2253" pos:column="31"/></operator><name pos:line="2253" pos:column="28">z<pos:position pos:line="2253" pos:column="29"/></name></name></expr>;<pos:position pos:line="2253" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="2255" pos:column="3">/* Write the record */</comment>
  <expr_stmt><expr><name pos:line="2256" pos:column="3">i<pos:position pos:line="2256" pos:column="4"/></name> <operator pos:line="2256" pos:column="5">=<pos:position pos:line="2256" pos:column="6"/></operator> <call><name pos:line="2256" pos:column="7">putVarint32<pos:position pos:line="2256" pos:column="18"/></name><argument_list pos:line="2256" pos:column="18">(<argument><expr><name pos:line="2256" pos:column="19">zNewRecord<pos:position pos:line="2256" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2256" pos:column="31">nHdr<pos:position pos:line="2256" pos:column="35"/></name></expr></argument>)<pos:position pos:line="2256" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="2256" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2257" pos:column="3">j<pos:position pos:line="2257" pos:column="4"/></name> <operator pos:line="2257" pos:column="5">=<pos:position pos:line="2257" pos:column="6"/></operator> <name pos:line="2257" pos:column="7">nHdr<pos:position pos:line="2257" pos:column="11"/></name></expr>;<pos:position pos:line="2257" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2258" pos:column="3">assert<pos:position pos:line="2258" pos:column="9"/></name><argument_list pos:line="2258" pos:column="9">( <argument><expr><name pos:line="2258" pos:column="11">pData0<pos:position pos:line="2258" pos:column="17"/></name><operator pos:line="2258" pos:column="17">&lt;=<pos:position pos:line="2258" pos:column="22"/></operator><name pos:line="2258" pos:column="19">pLast<pos:position pos:line="2258" pos:column="24"/></name></expr></argument> )<pos:position pos:line="2258" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2258" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2259" pos:column="3">pRec<pos:position pos:line="2259" pos:column="7"/></name> <operator pos:line="2259" pos:column="8">=<pos:position pos:line="2259" pos:column="9"/></operator> <name pos:line="2259" pos:column="10">pData0<pos:position pos:line="2259" pos:column="16"/></name></expr>;<pos:position pos:line="2259" pos:column="17"/></expr_stmt>
  <do pos:line="2260" pos:column="3">do<block pos:line="2260" pos:column="5">{
    <expr_stmt><expr><name pos:line="2261" pos:column="5">serial_type<pos:position pos:line="2261" pos:column="16"/></name> <operator pos:line="2261" pos:column="17">=<pos:position pos:line="2261" pos:column="18"/></operator> <name><name pos:line="2261" pos:column="19">pRec<pos:position pos:line="2261" pos:column="23"/></name><operator pos:line="2261" pos:column="23">-&gt;<pos:position pos:line="2261" pos:column="28"/></operator><name pos:line="2261" pos:column="25">uTemp<pos:position pos:line="2261" pos:column="30"/></name></name></expr>;<pos:position pos:line="2261" pos:column="31"/></expr_stmt>
    <comment type="block" pos:line="2262" pos:column="5">/* EVIDENCE-OF: R-06529-47362 Following the size varint are one or more
    ** additional varints, one per column. */</comment>
    <expr_stmt><expr><name pos:line="2264" pos:column="5">i<pos:position pos:line="2264" pos:column="6"/></name> <operator pos:line="2264" pos:column="7">+=<pos:position pos:line="2264" pos:column="9"/></operator> <call><name pos:line="2264" pos:column="10">putVarint32<pos:position pos:line="2264" pos:column="21"/></name><argument_list pos:line="2264" pos:column="21">(<argument><expr><operator pos:line="2264" pos:column="22">&amp;<pos:position pos:line="2264" pos:column="27"/></operator><name><name pos:line="2264" pos:column="23">zNewRecord<pos:position pos:line="2264" pos:column="33"/></name><index pos:line="2264" pos:column="33">[<expr><name pos:line="2264" pos:column="34">i<pos:position pos:line="2264" pos:column="35"/></name></expr>]<pos:position pos:line="2264" pos:column="36"/></index></name></expr></argument>, <argument><expr><name pos:line="2264" pos:column="38">serial_type<pos:position pos:line="2264" pos:column="49"/></name></expr></argument>)<pos:position pos:line="2264" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="2264" pos:column="51"/></expr_stmt>            <comment type="block" pos:line="2264" pos:column="63">/* serial type */</comment>
    <comment type="block" pos:line="2265" pos:column="5">/* EVIDENCE-OF: R-64536-51728 The values for each column in the record
    ** immediately follow the header. */</comment>
    <expr_stmt><expr><name pos:line="2267" pos:column="5">j<pos:position pos:line="2267" pos:column="6"/></name> <operator pos:line="2267" pos:column="7">+=<pos:position pos:line="2267" pos:column="9"/></operator> <call><name pos:line="2267" pos:column="10">sqlite3VdbeSerialPut<pos:position pos:line="2267" pos:column="30"/></name><argument_list pos:line="2267" pos:column="30">(<argument><expr><operator pos:line="2267" pos:column="31">&amp;<pos:position pos:line="2267" pos:column="36"/></operator><name><name pos:line="2267" pos:column="32">zNewRecord<pos:position pos:line="2267" pos:column="42"/></name><index pos:line="2267" pos:column="42">[<expr><name pos:line="2267" pos:column="43">j<pos:position pos:line="2267" pos:column="44"/></name></expr>]<pos:position pos:line="2267" pos:column="45"/></index></name></expr></argument>, <argument><expr><name pos:line="2267" pos:column="47">pRec<pos:position pos:line="2267" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="2267" pos:column="53">serial_type<pos:position pos:line="2267" pos:column="64"/></name></expr></argument>)<pos:position pos:line="2267" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="2267" pos:column="66"/></expr_stmt> <comment type="block" pos:line="2267" pos:column="67">/* content */</comment>
  }<pos:position pos:line="2268" pos:column="4"/></block>while<condition pos:line="2268" pos:column="9">( <expr><operator pos:line="2268" pos:column="11">(<pos:position pos:line="2268" pos:column="12"/></operator><operator pos:line="2268" pos:column="12">++<pos:position pos:line="2268" pos:column="14"/></operator><name pos:line="2268" pos:column="14">pRec<pos:position pos:line="2268" pos:column="18"/></name><operator pos:line="2268" pos:column="18">)<pos:position pos:line="2268" pos:column="19"/></operator><operator pos:line="2268" pos:column="19">&lt;=<pos:position pos:line="2268" pos:column="24"/></operator><name pos:line="2268" pos:column="21">pLast<pos:position pos:line="2268" pos:column="26"/></name></expr> )<pos:position pos:line="2268" pos:column="28"/></condition>;<pos:position pos:line="2268" pos:column="29"/></do>
  <expr_stmt><expr><call><name pos:line="2269" pos:column="3">assert<pos:position pos:line="2269" pos:column="9"/></name><argument_list pos:line="2269" pos:column="9">( <argument><expr><name pos:line="2269" pos:column="11">i<pos:position pos:line="2269" pos:column="12"/></name><operator pos:line="2269" pos:column="12">==<pos:position pos:line="2269" pos:column="14"/></operator><name pos:line="2269" pos:column="14">nHdr<pos:position pos:line="2269" pos:column="18"/></name></expr></argument> )<pos:position pos:line="2269" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="2269" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2270" pos:column="3">assert<pos:position pos:line="2270" pos:column="9"/></name><argument_list pos:line="2270" pos:column="9">( <argument><expr><name pos:line="2270" pos:column="11">j<pos:position pos:line="2270" pos:column="12"/></name><operator pos:line="2270" pos:column="12">==<pos:position pos:line="2270" pos:column="14"/></operator><name pos:line="2270" pos:column="14">nByte<pos:position pos:line="2270" pos:column="19"/></name></expr></argument> )<pos:position pos:line="2270" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="2270" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="2272" pos:column="3">assert<pos:position pos:line="2272" pos:column="9"/></name><argument_list pos:line="2272" pos:column="9">( <argument><expr><name><name pos:line="2272" pos:column="11">pOp<pos:position pos:line="2272" pos:column="14"/></name><operator pos:line="2272" pos:column="14">-&gt;<pos:position pos:line="2272" pos:column="19"/></operator><name pos:line="2272" pos:column="16">p3<pos:position pos:line="2272" pos:column="18"/></name></name><operator pos:line="2272" pos:column="18">&gt;<pos:position pos:line="2272" pos:column="22"/></operator><literal type="number" pos:line="2272" pos:column="19">0<pos:position pos:line="2272" pos:column="20"/></literal> <operator pos:line="2272" pos:column="21">&amp;&amp;<pos:position pos:line="2272" pos:column="31"/></operator> <name><name pos:line="2272" pos:column="24">pOp<pos:position pos:line="2272" pos:column="27"/></name><operator pos:line="2272" pos:column="27">-&gt;<pos:position pos:line="2272" pos:column="32"/></operator><name pos:line="2272" pos:column="29">p3<pos:position pos:line="2272" pos:column="31"/></name></name><operator pos:line="2272" pos:column="31">&lt;=<pos:position pos:line="2272" pos:column="36"/></operator><operator pos:line="2272" pos:column="33">(<pos:position pos:line="2272" pos:column="34"/></operator><name><name pos:line="2272" pos:column="34">p<pos:position pos:line="2272" pos:column="35"/></name><operator pos:line="2272" pos:column="35">-&gt;<pos:position pos:line="2272" pos:column="40"/></operator><name pos:line="2272" pos:column="37">nMem<pos:position pos:line="2272" pos:column="41"/></name></name><operator pos:line="2272" pos:column="41">+<pos:position pos:line="2272" pos:column="42"/></operator><literal type="number" pos:line="2272" pos:column="42">1<pos:position pos:line="2272" pos:column="43"/></literal> <operator pos:line="2272" pos:column="44">-<pos:position pos:line="2272" pos:column="45"/></operator> <name><name pos:line="2272" pos:column="46">p<pos:position pos:line="2272" pos:column="47"/></name><operator pos:line="2272" pos:column="47">-&gt;<pos:position pos:line="2272" pos:column="52"/></operator><name pos:line="2272" pos:column="49">nCursor<pos:position pos:line="2272" pos:column="56"/></name></name><operator pos:line="2272" pos:column="56">)<pos:position pos:line="2272" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="2272" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="2272" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2273" pos:column="3">pOut<pos:position pos:line="2273" pos:column="7"/></name><operator pos:line="2273" pos:column="7">-&gt;<pos:position pos:line="2273" pos:column="12"/></operator><name pos:line="2273" pos:column="9">n<pos:position pos:line="2273" pos:column="10"/></name></name> <operator pos:line="2273" pos:column="11">=<pos:position pos:line="2273" pos:column="12"/></operator> <operator pos:line="2273" pos:column="13">(<pos:position pos:line="2273" pos:column="14"/></operator><name pos:line="2273" pos:column="14">int<pos:position pos:line="2273" pos:column="17"/></name><operator pos:line="2273" pos:column="17">)<pos:position pos:line="2273" pos:column="18"/></operator><name pos:line="2273" pos:column="18">nByte<pos:position pos:line="2273" pos:column="23"/></name></expr>;<pos:position pos:line="2273" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2274" pos:column="3">pOut<pos:position pos:line="2274" pos:column="7"/></name><operator pos:line="2274" pos:column="7">-&gt;<pos:position pos:line="2274" pos:column="12"/></operator><name pos:line="2274" pos:column="9">flags<pos:position pos:line="2274" pos:column="14"/></name></name> <operator pos:line="2274" pos:column="15">=<pos:position pos:line="2274" pos:column="16"/></operator> <name pos:line="2274" pos:column="17">MEM_Blob<pos:position pos:line="2274" pos:column="25"/></name></expr>;<pos:position pos:line="2274" pos:column="26"/></expr_stmt>
  <if pos:line="2275" pos:column="3">if<condition pos:line="2275" pos:column="5">( <expr><name pos:line="2275" pos:column="7">nZero<pos:position pos:line="2275" pos:column="12"/></name></expr> )<pos:position pos:line="2275" pos:column="14"/></condition><then><block pos:line="2275" pos:column="14">{
    <expr_stmt><expr><name><name pos:line="2276" pos:column="5">pOut<pos:position pos:line="2276" pos:column="9"/></name><operator pos:line="2276" pos:column="9">-&gt;<pos:position pos:line="2276" pos:column="14"/></operator><name pos:line="2276" pos:column="11">u<pos:position pos:line="2276" pos:column="12"/></name><operator pos:line="2276" pos:column="12">.<pos:position pos:line="2276" pos:column="13"/></operator><name pos:line="2276" pos:column="13">nZero<pos:position pos:line="2276" pos:column="18"/></name></name> <operator pos:line="2276" pos:column="19">=<pos:position pos:line="2276" pos:column="20"/></operator> <name pos:line="2276" pos:column="21">nZero<pos:position pos:line="2276" pos:column="26"/></name></expr>;<pos:position pos:line="2276" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2277" pos:column="5">pOut<pos:position pos:line="2277" pos:column="9"/></name><operator pos:line="2277" pos:column="9">-&gt;<pos:position pos:line="2277" pos:column="14"/></operator><name pos:line="2277" pos:column="11">flags<pos:position pos:line="2277" pos:column="16"/></name></name> <operator pos:line="2277" pos:column="17">|=<pos:position pos:line="2277" pos:column="19"/></operator> <name pos:line="2277" pos:column="20">MEM_Zero<pos:position pos:line="2277" pos:column="28"/></name></expr>;<pos:position pos:line="2277" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="2278" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="2279" pos:column="3">REGISTER_TRACE<pos:position pos:line="2279" pos:column="17"/></name><argument_list pos:line="2279" pos:column="17">(<argument><expr><name><name pos:line="2279" pos:column="18">pOp<pos:position pos:line="2279" pos:column="21"/></name><operator pos:line="2279" pos:column="21">-&gt;<pos:position pos:line="2279" pos:column="26"/></operator><name pos:line="2279" pos:column="23">p3<pos:position pos:line="2279" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="2279" pos:column="27">pOut<pos:position pos:line="2279" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2279" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2279" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2280" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="2280" pos:column="22"/></name><argument_list pos:line="2280" pos:column="22">(<argument><expr><name pos:line="2280" pos:column="23">pOut<pos:position pos:line="2280" pos:column="27"/></name></expr></argument>)<pos:position pos:line="2280" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="2280" pos:column="29"/></expr_stmt>
  <break pos:line="2281" pos:column="3">break;<pos:position pos:line="2281" pos:column="9"/></break>
}<pos:position pos:line="2282" pos:column="2"/></block>

<comment type="block" pos:line="2284" pos:column="1">/* Opcode: Count P1 P2 * * *
** Synopsis: r[P2]=count()
**
** Store the number of entries (an integer value) in the table or index 
** opened by cursor P1 in register P2
*/</comment>
<cpp:ifndef pos:line="2290" pos:column="1">#<cpp:directive pos:line="2290" pos:column="2">ifndef<pos:position pos:line="2290" pos:column="8"/></cpp:directive> <name pos:line="2290" pos:column="9">SQLITE_OMIT_BTREECOUNT<pos:position pos:line="2290" pos:column="31"/></name></cpp:ifndef>
<case pos:line="2291" pos:column="1">case <expr><name pos:line="2291" pos:column="6">OP_Count<pos:position pos:line="2291" pos:column="14"/></name></expr>:<pos:position pos:line="2291" pos:column="15"/></case> <block pos:line="2291" pos:column="16">{         <comment type="block" pos:line="2291" pos:column="26">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="2292" pos:column="3">i64<pos:position pos:line="2292" pos:column="6"/></name></type> <name pos:line="2292" pos:column="7">nEntry<pos:position pos:line="2292" pos:column="13"/></name></decl>;<pos:position pos:line="2292" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2293" pos:column="3">BtCursor<pos:position pos:line="2293" pos:column="11"/></name> <modifier pos:line="2293" pos:column="12">*<pos:position pos:line="2293" pos:column="13"/></modifier></type><name pos:line="2293" pos:column="13">pCrsr<pos:position pos:line="2293" pos:column="18"/></name></decl>;<pos:position pos:line="2293" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="2295" pos:column="3">assert<pos:position pos:line="2295" pos:column="9"/></name><argument_list pos:line="2295" pos:column="9">( <argument><expr><name><name pos:line="2295" pos:column="11">p<pos:position pos:line="2295" pos:column="12"/></name><operator pos:line="2295" pos:column="12">-&gt;<pos:position pos:line="2295" pos:column="17"/></operator><name pos:line="2295" pos:column="14">apCsr<pos:position pos:line="2295" pos:column="19"/></name><index pos:line="2295" pos:column="19">[<expr><name><name pos:line="2295" pos:column="20">pOp<pos:position pos:line="2295" pos:column="23"/></name><operator pos:line="2295" pos:column="23">-&gt;<pos:position pos:line="2295" pos:column="28"/></operator><name pos:line="2295" pos:column="25">p1<pos:position pos:line="2295" pos:column="27"/></name></name></expr>]<pos:position pos:line="2295" pos:column="28"/></index></name><operator pos:line="2295" pos:column="28">-&gt;<pos:position pos:line="2295" pos:column="33"/></operator><name pos:line="2295" pos:column="30">eCurType<pos:position pos:line="2295" pos:column="38"/></name><operator pos:line="2295" pos:column="38">==<pos:position pos:line="2295" pos:column="40"/></operator><name pos:line="2295" pos:column="40">CURTYPE_BTREE<pos:position pos:line="2295" pos:column="53"/></name></expr></argument> )<pos:position pos:line="2295" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="2295" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2296" pos:column="3">pCrsr<pos:position pos:line="2296" pos:column="8"/></name> <operator pos:line="2296" pos:column="9">=<pos:position pos:line="2296" pos:column="10"/></operator> <name><name pos:line="2296" pos:column="11">p<pos:position pos:line="2296" pos:column="12"/></name><operator pos:line="2296" pos:column="12">-&gt;<pos:position pos:line="2296" pos:column="17"/></operator><name pos:line="2296" pos:column="14">apCsr<pos:position pos:line="2296" pos:column="19"/></name><index pos:line="2296" pos:column="19">[<expr><name><name pos:line="2296" pos:column="20">pOp<pos:position pos:line="2296" pos:column="23"/></name><operator pos:line="2296" pos:column="23">-&gt;<pos:position pos:line="2296" pos:column="28"/></operator><name pos:line="2296" pos:column="25">p1<pos:position pos:line="2296" pos:column="27"/></name></name></expr>]<pos:position pos:line="2296" pos:column="28"/></index></name><operator pos:line="2296" pos:column="28">-&gt;<pos:position pos:line="2296" pos:column="33"/></operator><name><name pos:line="2296" pos:column="30">uc<pos:position pos:line="2296" pos:column="32"/></name><operator pos:line="2296" pos:column="32">.<pos:position pos:line="2296" pos:column="33"/></operator><name pos:line="2296" pos:column="33">pCursor<pos:position pos:line="2296" pos:column="40"/></name></name></expr>;<pos:position pos:line="2296" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2297" pos:column="3">assert<pos:position pos:line="2297" pos:column="9"/></name><argument_list pos:line="2297" pos:column="9">( <argument><expr><name pos:line="2297" pos:column="11">pCrsr<pos:position pos:line="2297" pos:column="16"/></name></expr></argument> )<pos:position pos:line="2297" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="2297" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2298" pos:column="3">nEntry<pos:position pos:line="2298" pos:column="9"/></name> <operator pos:line="2298" pos:column="10">=<pos:position pos:line="2298" pos:column="11"/></operator> <literal type="number" pos:line="2298" pos:column="12">0<pos:position pos:line="2298" pos:column="13"/></literal></expr>;<pos:position pos:line="2298" pos:column="14"/></expr_stmt>  <comment type="block" pos:line="2298" pos:column="16">/* Not needed.  Only used to silence a warning. */</comment>
  <expr_stmt><expr><name pos:line="2299" pos:column="3">rc<pos:position pos:line="2299" pos:column="5"/></name> <operator pos:line="2299" pos:column="6">=<pos:position pos:line="2299" pos:column="7"/></operator> <call><name pos:line="2299" pos:column="8">sqlite3BtreeCount<pos:position pos:line="2299" pos:column="25"/></name><argument_list pos:line="2299" pos:column="25">(<argument><expr><name pos:line="2299" pos:column="26">pCrsr<pos:position pos:line="2299" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="2299" pos:column="33">&amp;<pos:position pos:line="2299" pos:column="38"/></operator><name pos:line="2299" pos:column="34">nEntry<pos:position pos:line="2299" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2299" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2299" pos:column="42"/></expr_stmt>
  <if pos:line="2300" pos:column="3">if<condition pos:line="2300" pos:column="5">( <expr><name pos:line="2300" pos:column="7">rc<pos:position pos:line="2300" pos:column="9"/></name></expr> )<pos:position pos:line="2300" pos:column="11"/></condition><then pos:line="2300" pos:column="11"> <block type="pseudo"><goto pos:line="2300" pos:column="12">goto <name pos:line="2300" pos:column="17">abort_due_to_error<pos:position pos:line="2300" pos:column="35"/></name>;<pos:position pos:line="2300" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><name pos:line="2301" pos:column="3">pOut<pos:position pos:line="2301" pos:column="7"/></name> <operator pos:line="2301" pos:column="8">=<pos:position pos:line="2301" pos:column="9"/></operator> <call><name pos:line="2301" pos:column="10">out2Prerelease<pos:position pos:line="2301" pos:column="24"/></name><argument_list pos:line="2301" pos:column="24">(<argument><expr><name pos:line="2301" pos:column="25">p<pos:position pos:line="2301" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="2301" pos:column="28">pOp<pos:position pos:line="2301" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2301" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2301" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2302" pos:column="3">pOut<pos:position pos:line="2302" pos:column="7"/></name><operator pos:line="2302" pos:column="7">-&gt;<pos:position pos:line="2302" pos:column="12"/></operator><name pos:line="2302" pos:column="9">u<pos:position pos:line="2302" pos:column="10"/></name><operator pos:line="2302" pos:column="10">.<pos:position pos:line="2302" pos:column="11"/></operator><name pos:line="2302" pos:column="11">i<pos:position pos:line="2302" pos:column="12"/></name></name> <operator pos:line="2302" pos:column="13">=<pos:position pos:line="2302" pos:column="14"/></operator> <name pos:line="2302" pos:column="15">nEntry<pos:position pos:line="2302" pos:column="21"/></name></expr>;<pos:position pos:line="2302" pos:column="22"/></expr_stmt>
  <break pos:line="2303" pos:column="3">break;<pos:position pos:line="2303" pos:column="9"/></break>
}<pos:position pos:line="2304" pos:column="2"/></block>
<cpp:endif pos:line="2305" pos:column="1">#<cpp:directive pos:line="2305" pos:column="2">endif<pos:position pos:line="2305" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="2307" pos:column="1">/* Opcode: Savepoint P1 * * P4 *
**
** Open, release or rollback the savepoint named by parameter P4, depending
** on the value of P1. To open a new savepoint, P1==0. To release (commit) an
** existing savepoint, P1==1, or to rollback an existing savepoint P1==2.
*/</comment>
<case pos:line="2313" pos:column="1">case <expr><name pos:line="2313" pos:column="6">OP_Savepoint<pos:position pos:line="2313" pos:column="18"/></name></expr>:<pos:position pos:line="2313" pos:column="19"/></case> <block pos:line="2313" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="2314" pos:column="3">int<pos:position pos:line="2314" pos:column="6"/></name></type> <name pos:line="2314" pos:column="7">p1<pos:position pos:line="2314" pos:column="9"/></name></decl>;<pos:position pos:line="2314" pos:column="10"/></decl_stmt>                         <comment type="block" pos:line="2314" pos:column="35">/* Value of P1 operand */</comment>
  <decl_stmt><decl><type><name pos:line="2315" pos:column="3">char<pos:position pos:line="2315" pos:column="7"/></name> <modifier pos:line="2315" pos:column="8">*<pos:position pos:line="2315" pos:column="9"/></modifier></type><name pos:line="2315" pos:column="9">zName<pos:position pos:line="2315" pos:column="14"/></name></decl>;<pos:position pos:line="2315" pos:column="15"/></decl_stmt>                    <comment type="block" pos:line="2315" pos:column="35">/* Name of savepoint */</comment>
  <decl_stmt><decl><type><name pos:line="2316" pos:column="3">int<pos:position pos:line="2316" pos:column="6"/></name></type> <name pos:line="2316" pos:column="7">nName<pos:position pos:line="2316" pos:column="12"/></name></decl>;<pos:position pos:line="2316" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2317" pos:column="3">Savepoint<pos:position pos:line="2317" pos:column="12"/></name> <modifier pos:line="2317" pos:column="13">*<pos:position pos:line="2317" pos:column="14"/></modifier></type><name pos:line="2317" pos:column="14">pNew<pos:position pos:line="2317" pos:column="18"/></name></decl>;<pos:position pos:line="2317" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2318" pos:column="3">Savepoint<pos:position pos:line="2318" pos:column="12"/></name> <modifier pos:line="2318" pos:column="13">*<pos:position pos:line="2318" pos:column="14"/></modifier></type><name pos:line="2318" pos:column="14">pSavepoint<pos:position pos:line="2318" pos:column="24"/></name></decl>;<pos:position pos:line="2318" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2319" pos:column="3">Savepoint<pos:position pos:line="2319" pos:column="12"/></name> <modifier pos:line="2319" pos:column="13">*<pos:position pos:line="2319" pos:column="14"/></modifier></type><name pos:line="2319" pos:column="14">pTmp<pos:position pos:line="2319" pos:column="18"/></name></decl>;<pos:position pos:line="2319" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2320" pos:column="3">int<pos:position pos:line="2320" pos:column="6"/></name></type> <name pos:line="2320" pos:column="7">iSavepoint<pos:position pos:line="2320" pos:column="17"/></name></decl>;<pos:position pos:line="2320" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2321" pos:column="3">int<pos:position pos:line="2321" pos:column="6"/></name></type> <name pos:line="2321" pos:column="7">ii<pos:position pos:line="2321" pos:column="9"/></name></decl>;<pos:position pos:line="2321" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2323" pos:column="3">p1<pos:position pos:line="2323" pos:column="5"/></name> <operator pos:line="2323" pos:column="6">=<pos:position pos:line="2323" pos:column="7"/></operator> <name><name pos:line="2323" pos:column="8">pOp<pos:position pos:line="2323" pos:column="11"/></name><operator pos:line="2323" pos:column="11">-&gt;<pos:position pos:line="2323" pos:column="16"/></operator><name pos:line="2323" pos:column="13">p1<pos:position pos:line="2323" pos:column="15"/></name></name></expr>;<pos:position pos:line="2323" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2324" pos:column="3">zName<pos:position pos:line="2324" pos:column="8"/></name> <operator pos:line="2324" pos:column="9">=<pos:position pos:line="2324" pos:column="10"/></operator> <name><name pos:line="2324" pos:column="11">pOp<pos:position pos:line="2324" pos:column="14"/></name><operator pos:line="2324" pos:column="14">-&gt;<pos:position pos:line="2324" pos:column="19"/></operator><name pos:line="2324" pos:column="16">p4<pos:position pos:line="2324" pos:column="18"/></name><operator pos:line="2324" pos:column="18">.<pos:position pos:line="2324" pos:column="19"/></operator><name pos:line="2324" pos:column="19">z<pos:position pos:line="2324" pos:column="20"/></name></name></expr>;<pos:position pos:line="2324" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="2326" pos:column="3">/* Assert that the p1 parameter is valid. Also that if there is no open
  ** transaction, then there cannot be any savepoints. 
  */</comment>
  <expr_stmt><expr><call><name pos:line="2329" pos:column="3">assert<pos:position pos:line="2329" pos:column="9"/></name><argument_list pos:line="2329" pos:column="9">( <argument><expr><name><name pos:line="2329" pos:column="11">db<pos:position pos:line="2329" pos:column="13"/></name><operator pos:line="2329" pos:column="13">-&gt;<pos:position pos:line="2329" pos:column="18"/></operator><name pos:line="2329" pos:column="15">pSavepoint<pos:position pos:line="2329" pos:column="25"/></name></name><operator pos:line="2329" pos:column="25">==<pos:position pos:line="2329" pos:column="27"/></operator><literal type="number" pos:line="2329" pos:column="27">0<pos:position pos:line="2329" pos:column="28"/></literal> <operator pos:line="2329" pos:column="29">||<pos:position pos:line="2329" pos:column="31"/></operator> <name><name pos:line="2329" pos:column="32">db<pos:position pos:line="2329" pos:column="34"/></name><operator pos:line="2329" pos:column="34">-&gt;<pos:position pos:line="2329" pos:column="39"/></operator><name pos:line="2329" pos:column="36">autoCommit<pos:position pos:line="2329" pos:column="46"/></name></name><operator pos:line="2329" pos:column="46">==<pos:position pos:line="2329" pos:column="48"/></operator><literal type="number" pos:line="2329" pos:column="48">0<pos:position pos:line="2329" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="2329" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="2329" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2330" pos:column="3">assert<pos:position pos:line="2330" pos:column="9"/></name><argument_list pos:line="2330" pos:column="9">( <argument><expr><name pos:line="2330" pos:column="11">p1<pos:position pos:line="2330" pos:column="13"/></name><operator pos:line="2330" pos:column="13">==<pos:position pos:line="2330" pos:column="15"/></operator><name pos:line="2330" pos:column="15">SAVEPOINT_BEGIN<pos:position pos:line="2330" pos:column="30"/></name><operator pos:line="2330" pos:column="30">||<pos:position pos:line="2330" pos:column="32"/></operator><name pos:line="2330" pos:column="32">p1<pos:position pos:line="2330" pos:column="34"/></name><operator pos:line="2330" pos:column="34">==<pos:position pos:line="2330" pos:column="36"/></operator><name pos:line="2330" pos:column="36">SAVEPOINT_RELEASE<pos:position pos:line="2330" pos:column="53"/></name><operator pos:line="2330" pos:column="53">||<pos:position pos:line="2330" pos:column="55"/></operator><name pos:line="2330" pos:column="55">p1<pos:position pos:line="2330" pos:column="57"/></name><operator pos:line="2330" pos:column="57">==<pos:position pos:line="2330" pos:column="59"/></operator><name pos:line="2330" pos:column="59">SAVEPOINT_ROLLBACK<pos:position pos:line="2330" pos:column="77"/></name></expr></argument> )<pos:position pos:line="2330" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="2330" pos:column="80"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2331" pos:column="3">assert<pos:position pos:line="2331" pos:column="9"/></name><argument_list pos:line="2331" pos:column="9">( <argument><expr><name><name pos:line="2331" pos:column="11">db<pos:position pos:line="2331" pos:column="13"/></name><operator pos:line="2331" pos:column="13">-&gt;<pos:position pos:line="2331" pos:column="18"/></operator><name pos:line="2331" pos:column="15">pSavepoint<pos:position pos:line="2331" pos:column="25"/></name></name> <operator pos:line="2331" pos:column="26">||<pos:position pos:line="2331" pos:column="28"/></operator> <name><name pos:line="2331" pos:column="29">db<pos:position pos:line="2331" pos:column="31"/></name><operator pos:line="2331" pos:column="31">-&gt;<pos:position pos:line="2331" pos:column="36"/></operator><name pos:line="2331" pos:column="33">isTransactionSavepoint<pos:position pos:line="2331" pos:column="55"/></name></name><operator pos:line="2331" pos:column="55">==<pos:position pos:line="2331" pos:column="57"/></operator><literal type="number" pos:line="2331" pos:column="57">0<pos:position pos:line="2331" pos:column="58"/></literal></expr></argument> )<pos:position pos:line="2331" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="2331" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2332" pos:column="3">assert<pos:position pos:line="2332" pos:column="9"/></name><argument_list pos:line="2332" pos:column="9">( <argument><expr><call><name pos:line="2332" pos:column="11">checkSavepointCount<pos:position pos:line="2332" pos:column="30"/></name><argument_list pos:line="2332" pos:column="30">(<argument><expr><name pos:line="2332" pos:column="31">db<pos:position pos:line="2332" pos:column="33"/></name></expr></argument>)<pos:position pos:line="2332" pos:column="34"/></argument_list></call></expr></argument> )<pos:position pos:line="2332" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="2332" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2333" pos:column="3">assert<pos:position pos:line="2333" pos:column="9"/></name><argument_list pos:line="2333" pos:column="9">( <argument><expr><name><name pos:line="2333" pos:column="11">p<pos:position pos:line="2333" pos:column="12"/></name><operator pos:line="2333" pos:column="12">-&gt;<pos:position pos:line="2333" pos:column="17"/></operator><name pos:line="2333" pos:column="14">bIsReader<pos:position pos:line="2333" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="2333" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="2333" pos:column="26"/></expr_stmt>

  <if pos:line="2335" pos:column="3">if<condition pos:line="2335" pos:column="5">( <expr><name pos:line="2335" pos:column="7">p1<pos:position pos:line="2335" pos:column="9"/></name><operator pos:line="2335" pos:column="9">==<pos:position pos:line="2335" pos:column="11"/></operator><name pos:line="2335" pos:column="11">SAVEPOINT_BEGIN<pos:position pos:line="2335" pos:column="26"/></name></expr> )<pos:position pos:line="2335" pos:column="28"/></condition><then><block pos:line="2335" pos:column="28">{
    <if pos:line="2336" pos:column="5">if<condition pos:line="2336" pos:column="7">( <expr><name><name pos:line="2336" pos:column="9">db<pos:position pos:line="2336" pos:column="11"/></name><operator pos:line="2336" pos:column="11">-&gt;<pos:position pos:line="2336" pos:column="16"/></operator><name pos:line="2336" pos:column="13">nVdbeWrite<pos:position pos:line="2336" pos:column="23"/></name></name><operator pos:line="2336" pos:column="23">&gt;<pos:position pos:line="2336" pos:column="27"/></operator><literal type="number" pos:line="2336" pos:column="24">0<pos:position pos:line="2336" pos:column="25"/></literal></expr> )<pos:position pos:line="2336" pos:column="27"/></condition><then><block pos:line="2336" pos:column="27">{
      <comment type="block" pos:line="2337" pos:column="7">/* A new savepoint cannot be created if there are active write 
      ** statements (i.e. open read/write incremental blob handles).
      */</comment>
      <expr_stmt><expr><call><name pos:line="2340" pos:column="7">sqlite3VdbeError<pos:position pos:line="2340" pos:column="23"/></name><argument_list pos:line="2340" pos:column="23">(<argument><expr><name pos:line="2340" pos:column="24">p<pos:position pos:line="2340" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2340" pos:column="27">"cannot open savepoint - SQL statements in progress"<pos:position pos:line="2340" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="2340" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="2340" pos:column="81"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2341" pos:column="7">rc<pos:position pos:line="2341" pos:column="9"/></name> <operator pos:line="2341" pos:column="10">=<pos:position pos:line="2341" pos:column="11"/></operator> <name pos:line="2341" pos:column="12">SQLITE_BUSY<pos:position pos:line="2341" pos:column="23"/></name></expr>;<pos:position pos:line="2341" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2342" pos:column="6"/></block></then><else pos:line="2342" pos:column="6">else<block pos:line="2342" pos:column="10">{
      <expr_stmt><expr><name pos:line="2343" pos:column="7">nName<pos:position pos:line="2343" pos:column="12"/></name> <operator pos:line="2343" pos:column="13">=<pos:position pos:line="2343" pos:column="14"/></operator> <call><name pos:line="2343" pos:column="15">sqlite3Strlen30<pos:position pos:line="2343" pos:column="30"/></name><argument_list pos:line="2343" pos:column="30">(<argument><expr><name pos:line="2343" pos:column="31">zName<pos:position pos:line="2343" pos:column="36"/></name></expr></argument>)<pos:position pos:line="2343" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="2343" pos:column="38"/></expr_stmt>

<cpp:ifndef pos:line="2345" pos:column="1">#<cpp:directive pos:line="2345" pos:column="2">ifndef<pos:position pos:line="2345" pos:column="8"/></cpp:directive> <name pos:line="2345" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="2345" pos:column="33"/></name></cpp:ifndef>
      <comment type="block" pos:line="2346" pos:column="7">/* This call is Ok even if this savepoint is actually a transaction
      ** savepoint (and therefore should not prompt xSavepoint()) callbacks.
      ** If this is a transaction savepoint being opened, it is guaranteed
      ** that the db-&gt;aVTrans[] array is empty.  */</comment>
      <expr_stmt><expr><call><name pos:line="2350" pos:column="7">assert<pos:position pos:line="2350" pos:column="13"/></name><argument_list pos:line="2350" pos:column="13">( <argument><expr><name><name pos:line="2350" pos:column="15">db<pos:position pos:line="2350" pos:column="17"/></name><operator pos:line="2350" pos:column="17">-&gt;<pos:position pos:line="2350" pos:column="22"/></operator><name pos:line="2350" pos:column="19">autoCommit<pos:position pos:line="2350" pos:column="29"/></name></name><operator pos:line="2350" pos:column="29">==<pos:position pos:line="2350" pos:column="31"/></operator><literal type="number" pos:line="2350" pos:column="31">0<pos:position pos:line="2350" pos:column="32"/></literal> <operator pos:line="2350" pos:column="33">||<pos:position pos:line="2350" pos:column="35"/></operator> <name><name pos:line="2350" pos:column="36">db<pos:position pos:line="2350" pos:column="38"/></name><operator pos:line="2350" pos:column="38">-&gt;<pos:position pos:line="2350" pos:column="43"/></operator><name pos:line="2350" pos:column="40">nVTrans<pos:position pos:line="2350" pos:column="47"/></name></name><operator pos:line="2350" pos:column="47">==<pos:position pos:line="2350" pos:column="49"/></operator><literal type="number" pos:line="2350" pos:column="49">0<pos:position pos:line="2350" pos:column="50"/></literal></expr></argument> )<pos:position pos:line="2350" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="2350" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2351" pos:column="7">rc<pos:position pos:line="2351" pos:column="9"/></name> <operator pos:line="2351" pos:column="10">=<pos:position pos:line="2351" pos:column="11"/></operator> <call><name pos:line="2351" pos:column="12">sqlite3VtabSavepoint<pos:position pos:line="2351" pos:column="32"/></name><argument_list pos:line="2351" pos:column="32">(<argument><expr><name pos:line="2351" pos:column="33">db<pos:position pos:line="2351" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="2351" pos:column="37">SAVEPOINT_BEGIN<pos:position pos:line="2351" pos:column="52"/></name></expr></argument>,
                                <argument><expr><name><name pos:line="2352" pos:column="33">db<pos:position pos:line="2352" pos:column="35"/></name><operator pos:line="2352" pos:column="35">-&gt;<pos:position pos:line="2352" pos:column="40"/></operator><name pos:line="2352" pos:column="37">nStatement<pos:position pos:line="2352" pos:column="47"/></name></name><operator pos:line="2352" pos:column="47">+<pos:position pos:line="2352" pos:column="48"/></operator><name><name pos:line="2352" pos:column="48">db<pos:position pos:line="2352" pos:column="50"/></name><operator pos:line="2352" pos:column="50">-&gt;<pos:position pos:line="2352" pos:column="55"/></operator><name pos:line="2352" pos:column="52">nSavepoint<pos:position pos:line="2352" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="2352" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="2352" pos:column="64"/></expr_stmt>
      <if pos:line="2353" pos:column="7">if<condition pos:line="2353" pos:column="9">( <expr><name pos:line="2353" pos:column="11">rc<pos:position pos:line="2353" pos:column="13"/></name><operator pos:line="2353" pos:column="13">!=<pos:position pos:line="2353" pos:column="15"/></operator><name pos:line="2353" pos:column="15">SQLITE_OK<pos:position pos:line="2353" pos:column="24"/></name></expr> )<pos:position pos:line="2353" pos:column="26"/></condition><then pos:line="2353" pos:column="26"> <block type="pseudo"><goto pos:line="2353" pos:column="27">goto <name pos:line="2353" pos:column="32">abort_due_to_error<pos:position pos:line="2353" pos:column="50"/></name>;<pos:position pos:line="2353" pos:column="51"/></goto></block></then></if>
<cpp:endif pos:line="2354" pos:column="1">#<cpp:directive pos:line="2354" pos:column="2">endif<pos:position pos:line="2354" pos:column="7"/></cpp:directive></cpp:endif>

      <comment type="block" pos:line="2356" pos:column="7">/* Create a new savepoint structure. */</comment>
      <expr_stmt><expr><name pos:line="2357" pos:column="7">pNew<pos:position pos:line="2357" pos:column="11"/></name> <operator pos:line="2357" pos:column="12">=<pos:position pos:line="2357" pos:column="13"/></operator> <call><name pos:line="2357" pos:column="14">sqlite3DbMallocRawNN<pos:position pos:line="2357" pos:column="34"/></name><argument_list pos:line="2357" pos:column="34">(<argument><expr><name pos:line="2357" pos:column="35">db<pos:position pos:line="2357" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="2357" pos:column="39">sizeof<argument_list pos:line="2357" pos:column="45">(<argument><expr><name pos:line="2357" pos:column="46">Savepoint<pos:position pos:line="2357" pos:column="55"/></name></expr></argument>)<pos:position pos:line="2357" pos:column="56"/></argument_list></sizeof><operator pos:line="2357" pos:column="56">+<pos:position pos:line="2357" pos:column="57"/></operator><name pos:line="2357" pos:column="57">nName<pos:position pos:line="2357" pos:column="62"/></name><operator pos:line="2357" pos:column="62">+<pos:position pos:line="2357" pos:column="63"/></operator><literal type="number" pos:line="2357" pos:column="63">1<pos:position pos:line="2357" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="2357" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="2357" pos:column="66"/></expr_stmt>
      <if pos:line="2358" pos:column="7">if<condition pos:line="2358" pos:column="9">( <expr><name pos:line="2358" pos:column="11">pNew<pos:position pos:line="2358" pos:column="15"/></name></expr> )<pos:position pos:line="2358" pos:column="17"/></condition><then><block pos:line="2358" pos:column="17">{
        <expr_stmt><expr><name><name pos:line="2359" pos:column="9">pNew<pos:position pos:line="2359" pos:column="13"/></name><operator pos:line="2359" pos:column="13">-&gt;<pos:position pos:line="2359" pos:column="18"/></operator><name pos:line="2359" pos:column="15">zName<pos:position pos:line="2359" pos:column="20"/></name></name> <operator pos:line="2359" pos:column="21">=<pos:position pos:line="2359" pos:column="22"/></operator> <operator pos:line="2359" pos:column="23">(<pos:position pos:line="2359" pos:column="24"/></operator><name pos:line="2359" pos:column="24">char<pos:position pos:line="2359" pos:column="28"/></name> <operator pos:line="2359" pos:column="29">*<pos:position pos:line="2359" pos:column="30"/></operator><operator pos:line="2359" pos:column="30">)<pos:position pos:line="2359" pos:column="31"/></operator><operator pos:line="2359" pos:column="31">&amp;<pos:position pos:line="2359" pos:column="36"/></operator><name><name pos:line="2359" pos:column="32">pNew<pos:position pos:line="2359" pos:column="36"/></name><index pos:line="2359" pos:column="36">[<expr><literal type="number" pos:line="2359" pos:column="37">1<pos:position pos:line="2359" pos:column="38"/></literal></expr>]<pos:position pos:line="2359" pos:column="39"/></index></name></expr>;<pos:position pos:line="2359" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="2360" pos:column="9">memcpy<pos:position pos:line="2360" pos:column="15"/></name><argument_list pos:line="2360" pos:column="15">(<argument><expr><name><name pos:line="2360" pos:column="16">pNew<pos:position pos:line="2360" pos:column="20"/></name><operator pos:line="2360" pos:column="20">-&gt;<pos:position pos:line="2360" pos:column="25"/></operator><name pos:line="2360" pos:column="22">zName<pos:position pos:line="2360" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="2360" pos:column="29">zName<pos:position pos:line="2360" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="2360" pos:column="36">nName<pos:position pos:line="2360" pos:column="41"/></name><operator pos:line="2360" pos:column="41">+<pos:position pos:line="2360" pos:column="42"/></operator><literal type="number" pos:line="2360" pos:column="42">1<pos:position pos:line="2360" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="2360" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="2360" pos:column="45"/></expr_stmt>
    
        <comment type="block" pos:line="2362" pos:column="9">/* If there is no open transaction, then mark this as a special
        ** "transaction savepoint". */</comment>
        <if pos:line="2364" pos:column="9">if<condition pos:line="2364" pos:column="11">( <expr><name><name pos:line="2364" pos:column="13">db<pos:position pos:line="2364" pos:column="15"/></name><operator pos:line="2364" pos:column="15">-&gt;<pos:position pos:line="2364" pos:column="20"/></operator><name pos:line="2364" pos:column="17">autoCommit<pos:position pos:line="2364" pos:column="27"/></name></name></expr> )<pos:position pos:line="2364" pos:column="29"/></condition><then><block pos:line="2364" pos:column="29">{
          <expr_stmt><expr><name><name pos:line="2365" pos:column="11">db<pos:position pos:line="2365" pos:column="13"/></name><operator pos:line="2365" pos:column="13">-&gt;<pos:position pos:line="2365" pos:column="18"/></operator><name pos:line="2365" pos:column="15">autoCommit<pos:position pos:line="2365" pos:column="25"/></name></name> <operator pos:line="2365" pos:column="26">=<pos:position pos:line="2365" pos:column="27"/></operator> <literal type="number" pos:line="2365" pos:column="28">0<pos:position pos:line="2365" pos:column="29"/></literal></expr>;<pos:position pos:line="2365" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="2366" pos:column="11">db<pos:position pos:line="2366" pos:column="13"/></name><operator pos:line="2366" pos:column="13">-&gt;<pos:position pos:line="2366" pos:column="18"/></operator><name pos:line="2366" pos:column="15">isTransactionSavepoint<pos:position pos:line="2366" pos:column="37"/></name></name> <operator pos:line="2366" pos:column="38">=<pos:position pos:line="2366" pos:column="39"/></operator> <literal type="number" pos:line="2366" pos:column="40">1<pos:position pos:line="2366" pos:column="41"/></literal></expr>;<pos:position pos:line="2366" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="2367" pos:column="10"/></block></then><else pos:line="2367" pos:column="10">else<block pos:line="2367" pos:column="14">{
          <expr_stmt><expr><name><name pos:line="2368" pos:column="11">db<pos:position pos:line="2368" pos:column="13"/></name><operator pos:line="2368" pos:column="13">-&gt;<pos:position pos:line="2368" pos:column="18"/></operator><name pos:line="2368" pos:column="15">nSavepoint<pos:position pos:line="2368" pos:column="25"/></name></name><operator pos:line="2368" pos:column="25">++<pos:position pos:line="2368" pos:column="27"/></operator></expr>;<pos:position pos:line="2368" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="2369" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="2371" pos:column="9">/* Link the new savepoint into the database handle's list. */</comment>
        <expr_stmt><expr><name><name pos:line="2372" pos:column="9">pNew<pos:position pos:line="2372" pos:column="13"/></name><operator pos:line="2372" pos:column="13">-&gt;<pos:position pos:line="2372" pos:column="18"/></operator><name pos:line="2372" pos:column="15">pNext<pos:position pos:line="2372" pos:column="20"/></name></name> <operator pos:line="2372" pos:column="21">=<pos:position pos:line="2372" pos:column="22"/></operator> <name><name pos:line="2372" pos:column="23">db<pos:position pos:line="2372" pos:column="25"/></name><operator pos:line="2372" pos:column="25">-&gt;<pos:position pos:line="2372" pos:column="30"/></operator><name pos:line="2372" pos:column="27">pSavepoint<pos:position pos:line="2372" pos:column="37"/></name></name></expr>;<pos:position pos:line="2372" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2373" pos:column="9">db<pos:position pos:line="2373" pos:column="11"/></name><operator pos:line="2373" pos:column="11">-&gt;<pos:position pos:line="2373" pos:column="16"/></operator><name pos:line="2373" pos:column="13">pSavepoint<pos:position pos:line="2373" pos:column="23"/></name></name> <operator pos:line="2373" pos:column="24">=<pos:position pos:line="2373" pos:column="25"/></operator> <name pos:line="2373" pos:column="26">pNew<pos:position pos:line="2373" pos:column="30"/></name></expr>;<pos:position pos:line="2373" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2374" pos:column="9">pNew<pos:position pos:line="2374" pos:column="13"/></name><operator pos:line="2374" pos:column="13">-&gt;<pos:position pos:line="2374" pos:column="18"/></operator><name pos:line="2374" pos:column="15">nDeferredCons<pos:position pos:line="2374" pos:column="28"/></name></name> <operator pos:line="2374" pos:column="29">=<pos:position pos:line="2374" pos:column="30"/></operator> <name><name pos:line="2374" pos:column="31">db<pos:position pos:line="2374" pos:column="33"/></name><operator pos:line="2374" pos:column="33">-&gt;<pos:position pos:line="2374" pos:column="38"/></operator><name pos:line="2374" pos:column="35">nDeferredCons<pos:position pos:line="2374" pos:column="48"/></name></name></expr>;<pos:position pos:line="2374" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2375" pos:column="9">pNew<pos:position pos:line="2375" pos:column="13"/></name><operator pos:line="2375" pos:column="13">-&gt;<pos:position pos:line="2375" pos:column="18"/></operator><name pos:line="2375" pos:column="15">nDeferredImmCons<pos:position pos:line="2375" pos:column="31"/></name></name> <operator pos:line="2375" pos:column="32">=<pos:position pos:line="2375" pos:column="33"/></operator> <name><name pos:line="2375" pos:column="34">db<pos:position pos:line="2375" pos:column="36"/></name><operator pos:line="2375" pos:column="36">-&gt;<pos:position pos:line="2375" pos:column="41"/></operator><name pos:line="2375" pos:column="38">nDeferredImmCons<pos:position pos:line="2375" pos:column="54"/></name></name></expr>;<pos:position pos:line="2375" pos:column="55"/></expr_stmt>
      }<pos:position pos:line="2376" pos:column="8"/></block></then></if>
    }<pos:position pos:line="2377" pos:column="6"/></block></else></if>
  }<pos:position pos:line="2378" pos:column="4"/></block></then><else pos:line="2378" pos:column="4">else<block pos:line="2378" pos:column="8">{
    <expr_stmt><expr><name pos:line="2379" pos:column="5">iSavepoint<pos:position pos:line="2379" pos:column="15"/></name> <operator pos:line="2379" pos:column="16">=<pos:position pos:line="2379" pos:column="17"/></operator> <literal type="number" pos:line="2379" pos:column="18">0<pos:position pos:line="2379" pos:column="19"/></literal></expr>;<pos:position pos:line="2379" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="2381" pos:column="5">/* Find the named savepoint. If there is no such savepoint, then an
    ** an error is returned to the user.  */</comment>
    <for pos:line="2383" pos:column="5">for<control pos:line="2383" pos:column="8">(
      <init><expr><name pos:line="2384" pos:column="7">pSavepoint<pos:position pos:line="2384" pos:column="17"/></name> <operator pos:line="2384" pos:column="18">=<pos:position pos:line="2384" pos:column="19"/></operator> <name><name pos:line="2384" pos:column="20">db<pos:position pos:line="2384" pos:column="22"/></name><operator pos:line="2384" pos:column="22">-&gt;<pos:position pos:line="2384" pos:column="27"/></operator><name pos:line="2384" pos:column="24">pSavepoint<pos:position pos:line="2384" pos:column="34"/></name></name></expr>;<pos:position pos:line="2384" pos:column="35"/></init> 
      <condition><expr><name pos:line="2385" pos:column="7">pSavepoint<pos:position pos:line="2385" pos:column="17"/></name> <operator pos:line="2385" pos:column="18">&amp;&amp;<pos:position pos:line="2385" pos:column="28"/></operator> <call><name pos:line="2385" pos:column="21">sqlite3StrICmp<pos:position pos:line="2385" pos:column="35"/></name><argument_list pos:line="2385" pos:column="35">(<argument><expr><name><name pos:line="2385" pos:column="36">pSavepoint<pos:position pos:line="2385" pos:column="46"/></name><operator pos:line="2385" pos:column="46">-&gt;<pos:position pos:line="2385" pos:column="51"/></operator><name pos:line="2385" pos:column="48">zName<pos:position pos:line="2385" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="2385" pos:column="55">zName<pos:position pos:line="2385" pos:column="60"/></name></expr></argument>)<pos:position pos:line="2385" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="2385" pos:column="62"/></condition>
      <incr><expr><name pos:line="2386" pos:column="7">pSavepoint<pos:position pos:line="2386" pos:column="17"/></name> <operator pos:line="2386" pos:column="18">=<pos:position pos:line="2386" pos:column="19"/></operator> <name><name pos:line="2386" pos:column="20">pSavepoint<pos:position pos:line="2386" pos:column="30"/></name><operator pos:line="2386" pos:column="30">-&gt;<pos:position pos:line="2386" pos:column="35"/></operator><name pos:line="2386" pos:column="32">pNext<pos:position pos:line="2386" pos:column="37"/></name></name></expr></incr>
    )<pos:position pos:line="2387" pos:column="6"/></control><block pos:line="2387" pos:column="6">{
      <expr_stmt><expr><name pos:line="2388" pos:column="7">iSavepoint<pos:position pos:line="2388" pos:column="17"/></name><operator pos:line="2388" pos:column="17">++<pos:position pos:line="2388" pos:column="19"/></operator></expr>;<pos:position pos:line="2388" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="2389" pos:column="6"/></block></for>
    <if pos:line="2390" pos:column="5">if<condition pos:line="2390" pos:column="7">( <expr><operator pos:line="2390" pos:column="9">!<pos:position pos:line="2390" pos:column="10"/></operator><name pos:line="2390" pos:column="10">pSavepoint<pos:position pos:line="2390" pos:column="20"/></name></expr> )<pos:position pos:line="2390" pos:column="22"/></condition><then><block pos:line="2390" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="2391" pos:column="7">sqlite3VdbeError<pos:position pos:line="2391" pos:column="23"/></name><argument_list pos:line="2391" pos:column="23">(<argument><expr><name pos:line="2391" pos:column="24">p<pos:position pos:line="2391" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2391" pos:column="27">"no such savepoint: %s"<pos:position pos:line="2391" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="2391" pos:column="52">zName<pos:position pos:line="2391" pos:column="57"/></name></expr></argument>)<pos:position pos:line="2391" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="2391" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2392" pos:column="7">rc<pos:position pos:line="2392" pos:column="9"/></name> <operator pos:line="2392" pos:column="10">=<pos:position pos:line="2392" pos:column="11"/></operator> <name pos:line="2392" pos:column="12">SQLITE_ERROR<pos:position pos:line="2392" pos:column="24"/></name></expr>;<pos:position pos:line="2392" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="2393" pos:column="6"/></block></then><elseif pos:line="2393" pos:column="6">else <if pos:line="2393" pos:column="11">if<condition pos:line="2393" pos:column="13">( <expr><name><name pos:line="2393" pos:column="15">db<pos:position pos:line="2393" pos:column="17"/></name><operator pos:line="2393" pos:column="17">-&gt;<pos:position pos:line="2393" pos:column="22"/></operator><name pos:line="2393" pos:column="19">nVdbeWrite<pos:position pos:line="2393" pos:column="29"/></name></name><operator pos:line="2393" pos:column="29">&gt;<pos:position pos:line="2393" pos:column="33"/></operator><literal type="number" pos:line="2393" pos:column="30">0<pos:position pos:line="2393" pos:column="31"/></literal> <operator pos:line="2393" pos:column="32">&amp;&amp;<pos:position pos:line="2393" pos:column="42"/></operator> <name pos:line="2393" pos:column="35">p1<pos:position pos:line="2393" pos:column="37"/></name><operator pos:line="2393" pos:column="37">==<pos:position pos:line="2393" pos:column="39"/></operator><name pos:line="2393" pos:column="39">SAVEPOINT_RELEASE<pos:position pos:line="2393" pos:column="56"/></name></expr> )<pos:position pos:line="2393" pos:column="58"/></condition><then><block pos:line="2393" pos:column="58">{
      <comment type="block" pos:line="2394" pos:column="7">/* It is not possible to release (commit) a savepoint if there are 
      ** active write statements.
      */</comment>
      <expr_stmt><expr><call><name pos:line="2397" pos:column="7">sqlite3VdbeError<pos:position pos:line="2397" pos:column="23"/></name><argument_list pos:line="2397" pos:column="23">(<argument><expr><name pos:line="2397" pos:column="24">p<pos:position pos:line="2397" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2397" pos:column="27">"cannot release savepoint - "<pos:position pos:line="2397" pos:column="56"/></literal>
                          <literal type="string" pos:line="2398" pos:column="27">"SQL statements in progress"<pos:position pos:line="2398" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2398" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2398" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2399" pos:column="7">rc<pos:position pos:line="2399" pos:column="9"/></name> <operator pos:line="2399" pos:column="10">=<pos:position pos:line="2399" pos:column="11"/></operator> <name pos:line="2399" pos:column="12">SQLITE_BUSY<pos:position pos:line="2399" pos:column="23"/></name></expr>;<pos:position pos:line="2399" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2400" pos:column="6"/></block></then></if></elseif><else pos:line="2400" pos:column="6">else<block pos:line="2400" pos:column="10">{

      <comment type="block" pos:line="2402" pos:column="7">/* Determine whether or not this is a transaction savepoint. If so,
      ** and this is a RELEASE command, then the current transaction 
      ** is committed. 
      */</comment>
      <decl_stmt><decl><type><name pos:line="2406" pos:column="7">int<pos:position pos:line="2406" pos:column="10"/></name></type> <name pos:line="2406" pos:column="11">isTransaction<pos:position pos:line="2406" pos:column="24"/></name> <init pos:line="2406" pos:column="25">= <expr><name><name pos:line="2406" pos:column="27">pSavepoint<pos:position pos:line="2406" pos:column="37"/></name><operator pos:line="2406" pos:column="37">-&gt;<pos:position pos:line="2406" pos:column="42"/></operator><name pos:line="2406" pos:column="39">pNext<pos:position pos:line="2406" pos:column="44"/></name></name><operator pos:line="2406" pos:column="44">==<pos:position pos:line="2406" pos:column="46"/></operator><literal type="number" pos:line="2406" pos:column="46">0<pos:position pos:line="2406" pos:column="47"/></literal> <operator pos:line="2406" pos:column="48">&amp;&amp;<pos:position pos:line="2406" pos:column="58"/></operator> <name><name pos:line="2406" pos:column="51">db<pos:position pos:line="2406" pos:column="53"/></name><operator pos:line="2406" pos:column="53">-&gt;<pos:position pos:line="2406" pos:column="58"/></operator><name pos:line="2406" pos:column="55">isTransactionSavepoint<pos:position pos:line="2406" pos:column="77"/></name></name></expr></init></decl>;<pos:position pos:line="2406" pos:column="78"/></decl_stmt>
      <if pos:line="2407" pos:column="7">if<condition pos:line="2407" pos:column="9">( <expr><name pos:line="2407" pos:column="11">isTransaction<pos:position pos:line="2407" pos:column="24"/></name> <operator pos:line="2407" pos:column="25">&amp;&amp;<pos:position pos:line="2407" pos:column="35"/></operator> <name pos:line="2407" pos:column="28">p1<pos:position pos:line="2407" pos:column="30"/></name><operator pos:line="2407" pos:column="30">==<pos:position pos:line="2407" pos:column="32"/></operator><name pos:line="2407" pos:column="32">SAVEPOINT_RELEASE<pos:position pos:line="2407" pos:column="49"/></name></expr> )<pos:position pos:line="2407" pos:column="51"/></condition><then><block pos:line="2407" pos:column="51">{
        <if pos:line="2408" pos:column="9">if<condition pos:line="2408" pos:column="11">( <expr><operator pos:line="2408" pos:column="13">(<pos:position pos:line="2408" pos:column="14"/></operator><name pos:line="2408" pos:column="14">rc<pos:position pos:line="2408" pos:column="16"/></name> <operator pos:line="2408" pos:column="17">=<pos:position pos:line="2408" pos:column="18"/></operator> <call><name pos:line="2408" pos:column="19">sqlite3VdbeCheckFk<pos:position pos:line="2408" pos:column="37"/></name><argument_list pos:line="2408" pos:column="37">(<argument><expr><name pos:line="2408" pos:column="38">p<pos:position pos:line="2408" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2408" pos:column="41">1<pos:position pos:line="2408" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="2408" pos:column="43"/></argument_list></call><operator pos:line="2408" pos:column="43">)<pos:position pos:line="2408" pos:column="44"/></operator><operator pos:line="2408" pos:column="44">!=<pos:position pos:line="2408" pos:column="46"/></operator><name pos:line="2408" pos:column="46">SQLITE_OK<pos:position pos:line="2408" pos:column="55"/></name></expr> )<pos:position pos:line="2408" pos:column="57"/></condition><then><block pos:line="2408" pos:column="57">{
          <goto pos:line="2409" pos:column="11">goto <name pos:line="2409" pos:column="16">vdbe_return<pos:position pos:line="2409" pos:column="27"/></name>;<pos:position pos:line="2409" pos:column="28"/></goto>
        }<pos:position pos:line="2410" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="2411" pos:column="9">db<pos:position pos:line="2411" pos:column="11"/></name><operator pos:line="2411" pos:column="11">-&gt;<pos:position pos:line="2411" pos:column="16"/></operator><name pos:line="2411" pos:column="13">autoCommit<pos:position pos:line="2411" pos:column="23"/></name></name> <operator pos:line="2411" pos:column="24">=<pos:position pos:line="2411" pos:column="25"/></operator> <literal type="number" pos:line="2411" pos:column="26">1<pos:position pos:line="2411" pos:column="27"/></literal></expr>;<pos:position pos:line="2411" pos:column="28"/></expr_stmt>
        <if pos:line="2412" pos:column="9">if<condition pos:line="2412" pos:column="11">( <expr><call><name pos:line="2412" pos:column="13">sqlite3VdbeHalt<pos:position pos:line="2412" pos:column="28"/></name><argument_list pos:line="2412" pos:column="28">(<argument><expr><name pos:line="2412" pos:column="29">p<pos:position pos:line="2412" pos:column="30"/></name></expr></argument>)<pos:position pos:line="2412" pos:column="31"/></argument_list></call><operator pos:line="2412" pos:column="31">==<pos:position pos:line="2412" pos:column="33"/></operator><name pos:line="2412" pos:column="33">SQLITE_BUSY<pos:position pos:line="2412" pos:column="44"/></name></expr> )<pos:position pos:line="2412" pos:column="46"/></condition><then><block pos:line="2412" pos:column="46">{
          <expr_stmt><expr><name><name pos:line="2413" pos:column="11">p<pos:position pos:line="2413" pos:column="12"/></name><operator pos:line="2413" pos:column="12">-&gt;<pos:position pos:line="2413" pos:column="17"/></operator><name pos:line="2413" pos:column="14">pc<pos:position pos:line="2413" pos:column="16"/></name></name> <operator pos:line="2413" pos:column="17">=<pos:position pos:line="2413" pos:column="18"/></operator> <call pos:line="2413" pos:column="19">(<name pos:line="2413" pos:column="20">int<pos:position pos:line="2413" pos:column="23"/></name>)<argument_list pos:line="2413" pos:column="24">(<argument><expr><name pos:line="2413" pos:column="25">pOp<pos:position pos:line="2413" pos:column="28"/></name> <operator pos:line="2413" pos:column="29">-<pos:position pos:line="2413" pos:column="30"/></operator> <name pos:line="2413" pos:column="31">aOp<pos:position pos:line="2413" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2413" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2413" pos:column="36"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="2414" pos:column="11">db<pos:position pos:line="2414" pos:column="13"/></name><operator pos:line="2414" pos:column="13">-&gt;<pos:position pos:line="2414" pos:column="18"/></operator><name pos:line="2414" pos:column="15">autoCommit<pos:position pos:line="2414" pos:column="25"/></name></name> <operator pos:line="2414" pos:column="26">=<pos:position pos:line="2414" pos:column="27"/></operator> <literal type="number" pos:line="2414" pos:column="28">0<pos:position pos:line="2414" pos:column="29"/></literal></expr>;<pos:position pos:line="2414" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="2415" pos:column="11">p<pos:position pos:line="2415" pos:column="12"/></name><operator pos:line="2415" pos:column="12">-&gt;<pos:position pos:line="2415" pos:column="17"/></operator><name pos:line="2415" pos:column="14">rc<pos:position pos:line="2415" pos:column="16"/></name></name> <operator pos:line="2415" pos:column="17">=<pos:position pos:line="2415" pos:column="18"/></operator> <name pos:line="2415" pos:column="19">rc<pos:position pos:line="2415" pos:column="21"/></name> <operator pos:line="2415" pos:column="22">=<pos:position pos:line="2415" pos:column="23"/></operator> <name pos:line="2415" pos:column="24">SQLITE_BUSY<pos:position pos:line="2415" pos:column="35"/></name></expr>;<pos:position pos:line="2415" pos:column="36"/></expr_stmt>
          <goto pos:line="2416" pos:column="11">goto <name pos:line="2416" pos:column="16">vdbe_return<pos:position pos:line="2416" pos:column="27"/></name>;<pos:position pos:line="2416" pos:column="28"/></goto>
        }<pos:position pos:line="2417" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="2418" pos:column="9">db<pos:position pos:line="2418" pos:column="11"/></name><operator pos:line="2418" pos:column="11">-&gt;<pos:position pos:line="2418" pos:column="16"/></operator><name pos:line="2418" pos:column="13">isTransactionSavepoint<pos:position pos:line="2418" pos:column="35"/></name></name> <operator pos:line="2418" pos:column="36">=<pos:position pos:line="2418" pos:column="37"/></operator> <literal type="number" pos:line="2418" pos:column="38">0<pos:position pos:line="2418" pos:column="39"/></literal></expr>;<pos:position pos:line="2418" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="2419" pos:column="9">rc<pos:position pos:line="2419" pos:column="11"/></name> <operator pos:line="2419" pos:column="12">=<pos:position pos:line="2419" pos:column="13"/></operator> <name><name pos:line="2419" pos:column="14">p<pos:position pos:line="2419" pos:column="15"/></name><operator pos:line="2419" pos:column="15">-&gt;<pos:position pos:line="2419" pos:column="20"/></operator><name pos:line="2419" pos:column="17">rc<pos:position pos:line="2419" pos:column="19"/></name></name></expr>;<pos:position pos:line="2419" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="2420" pos:column="8"/></block></then><else pos:line="2420" pos:column="8">else<block pos:line="2420" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="2421" pos:column="9">int<pos:position pos:line="2421" pos:column="12"/></name></type> <name pos:line="2421" pos:column="13">isSchemaChange<pos:position pos:line="2421" pos:column="27"/></name></decl>;<pos:position pos:line="2421" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><name pos:line="2422" pos:column="9">iSavepoint<pos:position pos:line="2422" pos:column="19"/></name> <operator pos:line="2422" pos:column="20">=<pos:position pos:line="2422" pos:column="21"/></operator> <name><name pos:line="2422" pos:column="22">db<pos:position pos:line="2422" pos:column="24"/></name><operator pos:line="2422" pos:column="24">-&gt;<pos:position pos:line="2422" pos:column="29"/></operator><name pos:line="2422" pos:column="26">nSavepoint<pos:position pos:line="2422" pos:column="36"/></name></name> <operator pos:line="2422" pos:column="37">-<pos:position pos:line="2422" pos:column="38"/></operator> <name pos:line="2422" pos:column="39">iSavepoint<pos:position pos:line="2422" pos:column="49"/></name> <operator pos:line="2422" pos:column="50">-<pos:position pos:line="2422" pos:column="51"/></operator> <literal type="number" pos:line="2422" pos:column="52">1<pos:position pos:line="2422" pos:column="53"/></literal></expr>;<pos:position pos:line="2422" pos:column="54"/></expr_stmt>
        <if pos:line="2423" pos:column="9">if<condition pos:line="2423" pos:column="11">( <expr><name pos:line="2423" pos:column="13">p1<pos:position pos:line="2423" pos:column="15"/></name><operator pos:line="2423" pos:column="15">==<pos:position pos:line="2423" pos:column="17"/></operator><name pos:line="2423" pos:column="17">SAVEPOINT_ROLLBACK<pos:position pos:line="2423" pos:column="35"/></name></expr> )<pos:position pos:line="2423" pos:column="37"/></condition><then><block pos:line="2423" pos:column="37">{
          <expr_stmt><expr><name pos:line="2424" pos:column="11">isSchemaChange<pos:position pos:line="2424" pos:column="25"/></name> <operator pos:line="2424" pos:column="26">=<pos:position pos:line="2424" pos:column="27"/></operator> <operator pos:line="2424" pos:column="28">(<pos:position pos:line="2424" pos:column="29"/></operator><name><name pos:line="2424" pos:column="29">db<pos:position pos:line="2424" pos:column="31"/></name><operator pos:line="2424" pos:column="31">-&gt;<pos:position pos:line="2424" pos:column="36"/></operator><name pos:line="2424" pos:column="33">mDbFlags<pos:position pos:line="2424" pos:column="41"/></name></name> <operator pos:line="2424" pos:column="42">&amp;<pos:position pos:line="2424" pos:column="47"/></operator> <name pos:line="2424" pos:column="44">DBFLAG_SchemaChange<pos:position pos:line="2424" pos:column="63"/></name><operator pos:line="2424" pos:column="63">)<pos:position pos:line="2424" pos:column="64"/></operator><operator pos:line="2424" pos:column="64">!=<pos:position pos:line="2424" pos:column="66"/></operator><literal type="number" pos:line="2424" pos:column="66">0<pos:position pos:line="2424" pos:column="67"/></literal></expr>;<pos:position pos:line="2424" pos:column="68"/></expr_stmt>
          <for pos:line="2425" pos:column="11">for<control pos:line="2425" pos:column="14">(<init><expr><name pos:line="2425" pos:column="15">ii<pos:position pos:line="2425" pos:column="17"/></name><operator pos:line="2425" pos:column="17">=<pos:position pos:line="2425" pos:column="18"/></operator><literal type="number" pos:line="2425" pos:column="18">0<pos:position pos:line="2425" pos:column="19"/></literal></expr>;<pos:position pos:line="2425" pos:column="20"/></init> <condition><expr><name pos:line="2425" pos:column="21">ii<pos:position pos:line="2425" pos:column="23"/></name><operator pos:line="2425" pos:column="23">&lt;<pos:position pos:line="2425" pos:column="27"/></operator><name><name pos:line="2425" pos:column="24">db<pos:position pos:line="2425" pos:column="26"/></name><operator pos:line="2425" pos:column="26">-&gt;<pos:position pos:line="2425" pos:column="31"/></operator><name pos:line="2425" pos:column="28">nDb<pos:position pos:line="2425" pos:column="31"/></name></name></expr>;<pos:position pos:line="2425" pos:column="32"/></condition> <incr><expr><name pos:line="2425" pos:column="33">ii<pos:position pos:line="2425" pos:column="35"/></name><operator pos:line="2425" pos:column="35">++<pos:position pos:line="2425" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="2425" pos:column="38"/></control><block pos:line="2425" pos:column="38">{
            <expr_stmt><expr><name pos:line="2426" pos:column="13">rc<pos:position pos:line="2426" pos:column="15"/></name> <operator pos:line="2426" pos:column="16">=<pos:position pos:line="2426" pos:column="17"/></operator> <call><name pos:line="2426" pos:column="18">sqlite3BtreeTripAllCursors<pos:position pos:line="2426" pos:column="44"/></name><argument_list pos:line="2426" pos:column="44">(<argument><expr><name><name pos:line="2426" pos:column="45">db<pos:position pos:line="2426" pos:column="47"/></name><operator pos:line="2426" pos:column="47">-&gt;<pos:position pos:line="2426" pos:column="52"/></operator><name pos:line="2426" pos:column="49">aDb<pos:position pos:line="2426" pos:column="52"/></name><index pos:line="2426" pos:column="52">[<expr><name pos:line="2426" pos:column="53">ii<pos:position pos:line="2426" pos:column="55"/></name></expr>]<pos:position pos:line="2426" pos:column="56"/></index></name><operator pos:line="2426" pos:column="56">.<pos:position pos:line="2426" pos:column="57"/></operator><name pos:line="2426" pos:column="57">pBt<pos:position pos:line="2426" pos:column="60"/></name></expr></argument>,
                                       <argument><expr><name pos:line="2427" pos:column="40">SQLITE_ABORT_ROLLBACK<pos:position pos:line="2427" pos:column="61"/></name></expr></argument>,
                                       <argument><expr><name pos:line="2428" pos:column="40">isSchemaChange<pos:position pos:line="2428" pos:column="54"/></name><operator pos:line="2428" pos:column="54">==<pos:position pos:line="2428" pos:column="56"/></operator><literal type="number" pos:line="2428" pos:column="56">0<pos:position pos:line="2428" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="2428" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="2428" pos:column="59"/></expr_stmt>
            <if pos:line="2429" pos:column="13">if<condition pos:line="2429" pos:column="15">( <expr><name pos:line="2429" pos:column="17">rc<pos:position pos:line="2429" pos:column="19"/></name><operator pos:line="2429" pos:column="19">!=<pos:position pos:line="2429" pos:column="21"/></operator><name pos:line="2429" pos:column="21">SQLITE_OK<pos:position pos:line="2429" pos:column="30"/></name></expr> )<pos:position pos:line="2429" pos:column="32"/></condition><then pos:line="2429" pos:column="32"> <block type="pseudo"><goto pos:line="2429" pos:column="33">goto <name pos:line="2429" pos:column="38">abort_due_to_error<pos:position pos:line="2429" pos:column="56"/></name>;<pos:position pos:line="2429" pos:column="57"/></goto></block></then></if>
          }<pos:position pos:line="2430" pos:column="12"/></block></for>
        }<pos:position pos:line="2431" pos:column="10"/></block></then><else pos:line="2431" pos:column="10">else<block pos:line="2431" pos:column="14">{
          <expr_stmt><expr><name pos:line="2432" pos:column="11">isSchemaChange<pos:position pos:line="2432" pos:column="25"/></name> <operator pos:line="2432" pos:column="26">=<pos:position pos:line="2432" pos:column="27"/></operator> <literal type="number" pos:line="2432" pos:column="28">0<pos:position pos:line="2432" pos:column="29"/></literal></expr>;<pos:position pos:line="2432" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="2433" pos:column="10"/></block></else></if>
        <for pos:line="2434" pos:column="9">for<control pos:line="2434" pos:column="12">(<init><expr><name pos:line="2434" pos:column="13">ii<pos:position pos:line="2434" pos:column="15"/></name><operator pos:line="2434" pos:column="15">=<pos:position pos:line="2434" pos:column="16"/></operator><literal type="number" pos:line="2434" pos:column="16">0<pos:position pos:line="2434" pos:column="17"/></literal></expr>;<pos:position pos:line="2434" pos:column="18"/></init> <condition><expr><name pos:line="2434" pos:column="19">ii<pos:position pos:line="2434" pos:column="21"/></name><operator pos:line="2434" pos:column="21">&lt;<pos:position pos:line="2434" pos:column="25"/></operator><name><name pos:line="2434" pos:column="22">db<pos:position pos:line="2434" pos:column="24"/></name><operator pos:line="2434" pos:column="24">-&gt;<pos:position pos:line="2434" pos:column="29"/></operator><name pos:line="2434" pos:column="26">nDb<pos:position pos:line="2434" pos:column="29"/></name></name></expr>;<pos:position pos:line="2434" pos:column="30"/></condition> <incr><expr><name pos:line="2434" pos:column="31">ii<pos:position pos:line="2434" pos:column="33"/></name><operator pos:line="2434" pos:column="33">++<pos:position pos:line="2434" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="2434" pos:column="36"/></control><block pos:line="2434" pos:column="36">{
          <expr_stmt><expr><name pos:line="2435" pos:column="11">rc<pos:position pos:line="2435" pos:column="13"/></name> <operator pos:line="2435" pos:column="14">=<pos:position pos:line="2435" pos:column="15"/></operator> <call><name pos:line="2435" pos:column="16">sqlite3BtreeSavepoint<pos:position pos:line="2435" pos:column="37"/></name><argument_list pos:line="2435" pos:column="37">(<argument><expr><name><name pos:line="2435" pos:column="38">db<pos:position pos:line="2435" pos:column="40"/></name><operator pos:line="2435" pos:column="40">-&gt;<pos:position pos:line="2435" pos:column="45"/></operator><name pos:line="2435" pos:column="42">aDb<pos:position pos:line="2435" pos:column="45"/></name><index pos:line="2435" pos:column="45">[<expr><name pos:line="2435" pos:column="46">ii<pos:position pos:line="2435" pos:column="48"/></name></expr>]<pos:position pos:line="2435" pos:column="49"/></index></name><operator pos:line="2435" pos:column="49">.<pos:position pos:line="2435" pos:column="50"/></operator><name pos:line="2435" pos:column="50">pBt<pos:position pos:line="2435" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="2435" pos:column="55">p1<pos:position pos:line="2435" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="2435" pos:column="59">iSavepoint<pos:position pos:line="2435" pos:column="69"/></name></expr></argument>)<pos:position pos:line="2435" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="2435" pos:column="71"/></expr_stmt>
          <if pos:line="2436" pos:column="11">if<condition pos:line="2436" pos:column="13">( <expr><name pos:line="2436" pos:column="15">rc<pos:position pos:line="2436" pos:column="17"/></name><operator pos:line="2436" pos:column="17">!=<pos:position pos:line="2436" pos:column="19"/></operator><name pos:line="2436" pos:column="19">SQLITE_OK<pos:position pos:line="2436" pos:column="28"/></name></expr> )<pos:position pos:line="2436" pos:column="30"/></condition><then><block pos:line="2436" pos:column="30">{
            <goto pos:line="2437" pos:column="13">goto <name pos:line="2437" pos:column="18">abort_due_to_error<pos:position pos:line="2437" pos:column="36"/></name>;<pos:position pos:line="2437" pos:column="37"/></goto>
          }<pos:position pos:line="2438" pos:column="12"/></block></then></if>
        }<pos:position pos:line="2439" pos:column="10"/></block></for>
        <if pos:line="2440" pos:column="9">if<condition pos:line="2440" pos:column="11">( <expr><name pos:line="2440" pos:column="13">isSchemaChange<pos:position pos:line="2440" pos:column="27"/></name></expr> )<pos:position pos:line="2440" pos:column="29"/></condition><then><block pos:line="2440" pos:column="29">{
          <expr_stmt><expr><call><name pos:line="2441" pos:column="11">sqlite3ExpirePreparedStatements<pos:position pos:line="2441" pos:column="42"/></name><argument_list pos:line="2441" pos:column="42">(<argument><expr><name pos:line="2441" pos:column="43">db<pos:position pos:line="2441" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2441" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2441" pos:column="47"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="2442" pos:column="11">sqlite3ResetAllSchemasOfConnection<pos:position pos:line="2442" pos:column="45"/></name><argument_list pos:line="2442" pos:column="45">(<argument><expr><name pos:line="2442" pos:column="46">db<pos:position pos:line="2442" pos:column="48"/></name></expr></argument>)<pos:position pos:line="2442" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2442" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="2443" pos:column="11">db<pos:position pos:line="2443" pos:column="13"/></name><operator pos:line="2443" pos:column="13">-&gt;<pos:position pos:line="2443" pos:column="18"/></operator><name pos:line="2443" pos:column="15">mDbFlags<pos:position pos:line="2443" pos:column="23"/></name></name> <operator pos:line="2443" pos:column="24">|=<pos:position pos:line="2443" pos:column="26"/></operator> <name pos:line="2443" pos:column="27">DBFLAG_SchemaChange<pos:position pos:line="2443" pos:column="46"/></name></expr>;<pos:position pos:line="2443" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="2444" pos:column="10"/></block></then></if>
      }<pos:position pos:line="2445" pos:column="8"/></block></else></if>
  
      <comment type="block" pos:line="2447" pos:column="7">/* Regardless of whether this is a RELEASE or ROLLBACK, destroy all 
      ** savepoints nested inside of the savepoint being operated on. */</comment>
      <while pos:line="2449" pos:column="7">while<condition pos:line="2449" pos:column="12">( <expr><name><name pos:line="2449" pos:column="14">db<pos:position pos:line="2449" pos:column="16"/></name><operator pos:line="2449" pos:column="16">-&gt;<pos:position pos:line="2449" pos:column="21"/></operator><name pos:line="2449" pos:column="18">pSavepoint<pos:position pos:line="2449" pos:column="28"/></name></name><operator pos:line="2449" pos:column="28">!=<pos:position pos:line="2449" pos:column="30"/></operator><name pos:line="2449" pos:column="30">pSavepoint<pos:position pos:line="2449" pos:column="40"/></name></expr> )<pos:position pos:line="2449" pos:column="42"/></condition><block pos:line="2449" pos:column="42">{
        <expr_stmt><expr><name pos:line="2450" pos:column="9">pTmp<pos:position pos:line="2450" pos:column="13"/></name> <operator pos:line="2450" pos:column="14">=<pos:position pos:line="2450" pos:column="15"/></operator> <name><name pos:line="2450" pos:column="16">db<pos:position pos:line="2450" pos:column="18"/></name><operator pos:line="2450" pos:column="18">-&gt;<pos:position pos:line="2450" pos:column="23"/></operator><name pos:line="2450" pos:column="20">pSavepoint<pos:position pos:line="2450" pos:column="30"/></name></name></expr>;<pos:position pos:line="2450" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2451" pos:column="9">db<pos:position pos:line="2451" pos:column="11"/></name><operator pos:line="2451" pos:column="11">-&gt;<pos:position pos:line="2451" pos:column="16"/></operator><name pos:line="2451" pos:column="13">pSavepoint<pos:position pos:line="2451" pos:column="23"/></name></name> <operator pos:line="2451" pos:column="24">=<pos:position pos:line="2451" pos:column="25"/></operator> <name><name pos:line="2451" pos:column="26">pTmp<pos:position pos:line="2451" pos:column="30"/></name><operator pos:line="2451" pos:column="30">-&gt;<pos:position pos:line="2451" pos:column="35"/></operator><name pos:line="2451" pos:column="32">pNext<pos:position pos:line="2451" pos:column="37"/></name></name></expr>;<pos:position pos:line="2451" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="2452" pos:column="9">sqlite3DbFree<pos:position pos:line="2452" pos:column="22"/></name><argument_list pos:line="2452" pos:column="22">(<argument><expr><name pos:line="2452" pos:column="23">db<pos:position pos:line="2452" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="2452" pos:column="27">pTmp<pos:position pos:line="2452" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2452" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2452" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2453" pos:column="9">db<pos:position pos:line="2453" pos:column="11"/></name><operator pos:line="2453" pos:column="11">-&gt;<pos:position pos:line="2453" pos:column="16"/></operator><name pos:line="2453" pos:column="13">nSavepoint<pos:position pos:line="2453" pos:column="23"/></name></name><operator pos:line="2453" pos:column="23">--<pos:position pos:line="2453" pos:column="25"/></operator></expr>;<pos:position pos:line="2453" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="2454" pos:column="8"/></block></while>

      <comment type="block" pos:line="2456" pos:column="7">/* If it is a RELEASE, then destroy the savepoint being operated on 
      ** too. If it is a ROLLBACK TO, then set the number of deferred 
      ** constraint violations present in the database to the value stored
      ** when the savepoint was created.  */</comment>
      <if pos:line="2460" pos:column="7">if<condition pos:line="2460" pos:column="9">( <expr><name pos:line="2460" pos:column="11">p1<pos:position pos:line="2460" pos:column="13"/></name><operator pos:line="2460" pos:column="13">==<pos:position pos:line="2460" pos:column="15"/></operator><name pos:line="2460" pos:column="15">SAVEPOINT_RELEASE<pos:position pos:line="2460" pos:column="32"/></name></expr> )<pos:position pos:line="2460" pos:column="34"/></condition><then><block pos:line="2460" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="2461" pos:column="9">assert<pos:position pos:line="2461" pos:column="15"/></name><argument_list pos:line="2461" pos:column="15">( <argument><expr><name pos:line="2461" pos:column="17">pSavepoint<pos:position pos:line="2461" pos:column="27"/></name><operator pos:line="2461" pos:column="27">==<pos:position pos:line="2461" pos:column="29"/></operator><name><name pos:line="2461" pos:column="29">db<pos:position pos:line="2461" pos:column="31"/></name><operator pos:line="2461" pos:column="31">-&gt;<pos:position pos:line="2461" pos:column="36"/></operator><name pos:line="2461" pos:column="33">pSavepoint<pos:position pos:line="2461" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="2461" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2461" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2462" pos:column="9">db<pos:position pos:line="2462" pos:column="11"/></name><operator pos:line="2462" pos:column="11">-&gt;<pos:position pos:line="2462" pos:column="16"/></operator><name pos:line="2462" pos:column="13">pSavepoint<pos:position pos:line="2462" pos:column="23"/></name></name> <operator pos:line="2462" pos:column="24">=<pos:position pos:line="2462" pos:column="25"/></operator> <name><name pos:line="2462" pos:column="26">pSavepoint<pos:position pos:line="2462" pos:column="36"/></name><operator pos:line="2462" pos:column="36">-&gt;<pos:position pos:line="2462" pos:column="41"/></operator><name pos:line="2462" pos:column="38">pNext<pos:position pos:line="2462" pos:column="43"/></name></name></expr>;<pos:position pos:line="2462" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="2463" pos:column="9">sqlite3DbFree<pos:position pos:line="2463" pos:column="22"/></name><argument_list pos:line="2463" pos:column="22">(<argument><expr><name pos:line="2463" pos:column="23">db<pos:position pos:line="2463" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="2463" pos:column="27">pSavepoint<pos:position pos:line="2463" pos:column="37"/></name></expr></argument>)<pos:position pos:line="2463" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2463" pos:column="39"/></expr_stmt>
        <if pos:line="2464" pos:column="9">if<condition pos:line="2464" pos:column="11">( <expr><operator pos:line="2464" pos:column="13">!<pos:position pos:line="2464" pos:column="14"/></operator><name pos:line="2464" pos:column="14">isTransaction<pos:position pos:line="2464" pos:column="27"/></name></expr> )<pos:position pos:line="2464" pos:column="29"/></condition><then><block pos:line="2464" pos:column="29">{
          <expr_stmt><expr><name><name pos:line="2465" pos:column="11">db<pos:position pos:line="2465" pos:column="13"/></name><operator pos:line="2465" pos:column="13">-&gt;<pos:position pos:line="2465" pos:column="18"/></operator><name pos:line="2465" pos:column="15">nSavepoint<pos:position pos:line="2465" pos:column="25"/></name></name><operator pos:line="2465" pos:column="25">--<pos:position pos:line="2465" pos:column="27"/></operator></expr>;<pos:position pos:line="2465" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="2466" pos:column="10"/></block></then></if>
      }<pos:position pos:line="2467" pos:column="8"/></block></then><else pos:line="2467" pos:column="8">else<block pos:line="2467" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="2468" pos:column="9">db<pos:position pos:line="2468" pos:column="11"/></name><operator pos:line="2468" pos:column="11">-&gt;<pos:position pos:line="2468" pos:column="16"/></operator><name pos:line="2468" pos:column="13">nDeferredCons<pos:position pos:line="2468" pos:column="26"/></name></name> <operator pos:line="2468" pos:column="27">=<pos:position pos:line="2468" pos:column="28"/></operator> <name><name pos:line="2468" pos:column="29">pSavepoint<pos:position pos:line="2468" pos:column="39"/></name><operator pos:line="2468" pos:column="39">-&gt;<pos:position pos:line="2468" pos:column="44"/></operator><name pos:line="2468" pos:column="41">nDeferredCons<pos:position pos:line="2468" pos:column="54"/></name></name></expr>;<pos:position pos:line="2468" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2469" pos:column="9">db<pos:position pos:line="2469" pos:column="11"/></name><operator pos:line="2469" pos:column="11">-&gt;<pos:position pos:line="2469" pos:column="16"/></operator><name pos:line="2469" pos:column="13">nDeferredImmCons<pos:position pos:line="2469" pos:column="29"/></name></name> <operator pos:line="2469" pos:column="30">=<pos:position pos:line="2469" pos:column="31"/></operator> <name><name pos:line="2469" pos:column="32">pSavepoint<pos:position pos:line="2469" pos:column="42"/></name><operator pos:line="2469" pos:column="42">-&gt;<pos:position pos:line="2469" pos:column="47"/></operator><name pos:line="2469" pos:column="44">nDeferredImmCons<pos:position pos:line="2469" pos:column="60"/></name></name></expr>;<pos:position pos:line="2469" pos:column="61"/></expr_stmt>
      }<pos:position pos:line="2470" pos:column="8"/></block></else></if>

      <if pos:line="2472" pos:column="7">if<condition pos:line="2472" pos:column="9">( <expr><operator pos:line="2472" pos:column="11">!<pos:position pos:line="2472" pos:column="12"/></operator><name pos:line="2472" pos:column="12">isTransaction<pos:position pos:line="2472" pos:column="25"/></name> <operator pos:line="2472" pos:column="26">||<pos:position pos:line="2472" pos:column="28"/></operator> <name pos:line="2472" pos:column="29">p1<pos:position pos:line="2472" pos:column="31"/></name><operator pos:line="2472" pos:column="31">==<pos:position pos:line="2472" pos:column="33"/></operator><name pos:line="2472" pos:column="33">SAVEPOINT_ROLLBACK<pos:position pos:line="2472" pos:column="51"/></name></expr> )<pos:position pos:line="2472" pos:column="53"/></condition><then><block pos:line="2472" pos:column="53">{
        <expr_stmt><expr><name pos:line="2473" pos:column="9">rc<pos:position pos:line="2473" pos:column="11"/></name> <operator pos:line="2473" pos:column="12">=<pos:position pos:line="2473" pos:column="13"/></operator> <call><name pos:line="2473" pos:column="14">sqlite3VtabSavepoint<pos:position pos:line="2473" pos:column="34"/></name><argument_list pos:line="2473" pos:column="34">(<argument><expr><name pos:line="2473" pos:column="35">db<pos:position pos:line="2473" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2473" pos:column="39">p1<pos:position pos:line="2473" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="2473" pos:column="43">iSavepoint<pos:position pos:line="2473" pos:column="53"/></name></expr></argument>)<pos:position pos:line="2473" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="2473" pos:column="55"/></expr_stmt>
        <if pos:line="2474" pos:column="9">if<condition pos:line="2474" pos:column="11">( <expr><name pos:line="2474" pos:column="13">rc<pos:position pos:line="2474" pos:column="15"/></name><operator pos:line="2474" pos:column="15">!=<pos:position pos:line="2474" pos:column="17"/></operator><name pos:line="2474" pos:column="17">SQLITE_OK<pos:position pos:line="2474" pos:column="26"/></name></expr> )<pos:position pos:line="2474" pos:column="28"/></condition><then pos:line="2474" pos:column="28"> <block type="pseudo"><goto pos:line="2474" pos:column="29">goto <name pos:line="2474" pos:column="34">abort_due_to_error<pos:position pos:line="2474" pos:column="52"/></name>;<pos:position pos:line="2474" pos:column="53"/></goto></block></then></if>
      }<pos:position pos:line="2475" pos:column="8"/></block></then></if>
    }<pos:position pos:line="2476" pos:column="6"/></block></else></if>
  }<pos:position pos:line="2477" pos:column="4"/></block></else></if>
  <if pos:line="2478" pos:column="3">if<condition pos:line="2478" pos:column="5">( <expr><name pos:line="2478" pos:column="7">rc<pos:position pos:line="2478" pos:column="9"/></name></expr> )<pos:position pos:line="2478" pos:column="11"/></condition><then pos:line="2478" pos:column="11"> <block type="pseudo"><goto pos:line="2478" pos:column="12">goto <name pos:line="2478" pos:column="17">abort_due_to_error<pos:position pos:line="2478" pos:column="35"/></name>;<pos:position pos:line="2478" pos:column="36"/></goto></block></then></if>

  <break pos:line="2480" pos:column="3">break;<pos:position pos:line="2480" pos:column="9"/></break>
}<pos:position pos:line="2481" pos:column="2"/></block>

<comment type="block" pos:line="2483" pos:column="1">/* Opcode: AutoCommit P1 P2 * * *
**
** Set the database auto-commit flag to P1 (1 or 0). If P2 is true, roll
** back any currently active btree transactions. If there are any active
** VMs (apart from this one), then a ROLLBACK fails.  A COMMIT fails if
** there are active writing VMs or active VMs that use shared cache.
**
** This instruction causes the VM to halt.
*/</comment>
<case pos:line="2492" pos:column="1">case <expr><name pos:line="2492" pos:column="6">OP_AutoCommit<pos:position pos:line="2492" pos:column="19"/></name></expr>:<pos:position pos:line="2492" pos:column="20"/></case> <block pos:line="2492" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="2493" pos:column="3">int<pos:position pos:line="2493" pos:column="6"/></name></type> <name pos:line="2493" pos:column="7">desiredAutoCommit<pos:position pos:line="2493" pos:column="24"/></name></decl>;<pos:position pos:line="2493" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2494" pos:column="3">int<pos:position pos:line="2494" pos:column="6"/></name></type> <name pos:line="2494" pos:column="7">iRollback<pos:position pos:line="2494" pos:column="16"/></name></decl>;<pos:position pos:line="2494" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2496" pos:column="3">desiredAutoCommit<pos:position pos:line="2496" pos:column="20"/></name> <operator pos:line="2496" pos:column="21">=<pos:position pos:line="2496" pos:column="22"/></operator> <name><name pos:line="2496" pos:column="23">pOp<pos:position pos:line="2496" pos:column="26"/></name><operator pos:line="2496" pos:column="26">-&gt;<pos:position pos:line="2496" pos:column="31"/></operator><name pos:line="2496" pos:column="28">p1<pos:position pos:line="2496" pos:column="30"/></name></name></expr>;<pos:position pos:line="2496" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2497" pos:column="3">iRollback<pos:position pos:line="2497" pos:column="12"/></name> <operator pos:line="2497" pos:column="13">=<pos:position pos:line="2497" pos:column="14"/></operator> <name><name pos:line="2497" pos:column="15">pOp<pos:position pos:line="2497" pos:column="18"/></name><operator pos:line="2497" pos:column="18">-&gt;<pos:position pos:line="2497" pos:column="23"/></operator><name pos:line="2497" pos:column="20">p2<pos:position pos:line="2497" pos:column="22"/></name></name></expr>;<pos:position pos:line="2497" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2498" pos:column="3">assert<pos:position pos:line="2498" pos:column="9"/></name><argument_list pos:line="2498" pos:column="9">( <argument><expr><name pos:line="2498" pos:column="11">desiredAutoCommit<pos:position pos:line="2498" pos:column="28"/></name><operator pos:line="2498" pos:column="28">==<pos:position pos:line="2498" pos:column="30"/></operator><literal type="number" pos:line="2498" pos:column="30">1<pos:position pos:line="2498" pos:column="31"/></literal> <operator pos:line="2498" pos:column="32">||<pos:position pos:line="2498" pos:column="34"/></operator> <name pos:line="2498" pos:column="35">desiredAutoCommit<pos:position pos:line="2498" pos:column="52"/></name><operator pos:line="2498" pos:column="52">==<pos:position pos:line="2498" pos:column="54"/></operator><literal type="number" pos:line="2498" pos:column="54">0<pos:position pos:line="2498" pos:column="55"/></literal></expr></argument> )<pos:position pos:line="2498" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="2498" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2499" pos:column="3">assert<pos:position pos:line="2499" pos:column="9"/></name><argument_list pos:line="2499" pos:column="9">( <argument><expr><name pos:line="2499" pos:column="11">desiredAutoCommit<pos:position pos:line="2499" pos:column="28"/></name><operator pos:line="2499" pos:column="28">==<pos:position pos:line="2499" pos:column="30"/></operator><literal type="number" pos:line="2499" pos:column="30">1<pos:position pos:line="2499" pos:column="31"/></literal> <operator pos:line="2499" pos:column="32">||<pos:position pos:line="2499" pos:column="34"/></operator> <name pos:line="2499" pos:column="35">iRollback<pos:position pos:line="2499" pos:column="44"/></name><operator pos:line="2499" pos:column="44">==<pos:position pos:line="2499" pos:column="46"/></operator><literal type="number" pos:line="2499" pos:column="46">0<pos:position pos:line="2499" pos:column="47"/></literal></expr></argument> )<pos:position pos:line="2499" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2499" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2500" pos:column="3">assert<pos:position pos:line="2500" pos:column="9"/></name><argument_list pos:line="2500" pos:column="9">( <argument><expr><name><name pos:line="2500" pos:column="11">db<pos:position pos:line="2500" pos:column="13"/></name><operator pos:line="2500" pos:column="13">-&gt;<pos:position pos:line="2500" pos:column="18"/></operator><name pos:line="2500" pos:column="15">nVdbeActive<pos:position pos:line="2500" pos:column="26"/></name></name><operator pos:line="2500" pos:column="26">&gt;<pos:position pos:line="2500" pos:column="30"/></operator><literal type="number" pos:line="2500" pos:column="27">0<pos:position pos:line="2500" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="2500" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="2500" pos:column="31"/></expr_stmt>  <comment type="block" pos:line="2500" pos:column="33">/* At least this one VM is active */</comment>
  <expr_stmt><expr><call><name pos:line="2501" pos:column="3">assert<pos:position pos:line="2501" pos:column="9"/></name><argument_list pos:line="2501" pos:column="9">( <argument><expr><name><name pos:line="2501" pos:column="11">p<pos:position pos:line="2501" pos:column="12"/></name><operator pos:line="2501" pos:column="12">-&gt;<pos:position pos:line="2501" pos:column="17"/></operator><name pos:line="2501" pos:column="14">bIsReader<pos:position pos:line="2501" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="2501" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="2501" pos:column="26"/></expr_stmt>

  <if pos:line="2503" pos:column="3">if<condition pos:line="2503" pos:column="5">( <expr><name pos:line="2503" pos:column="7">desiredAutoCommit<pos:position pos:line="2503" pos:column="24"/></name><operator pos:line="2503" pos:column="24">!=<pos:position pos:line="2503" pos:column="26"/></operator><name><name pos:line="2503" pos:column="26">db<pos:position pos:line="2503" pos:column="28"/></name><operator pos:line="2503" pos:column="28">-&gt;<pos:position pos:line="2503" pos:column="33"/></operator><name pos:line="2503" pos:column="30">autoCommit<pos:position pos:line="2503" pos:column="40"/></name></name></expr> )<pos:position pos:line="2503" pos:column="42"/></condition><then><block pos:line="2503" pos:column="42">{
    <if pos:line="2504" pos:column="5">if<condition pos:line="2504" pos:column="7">( <expr><name pos:line="2504" pos:column="9">iRollback<pos:position pos:line="2504" pos:column="18"/></name></expr> )<pos:position pos:line="2504" pos:column="20"/></condition><then><block pos:line="2504" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="2505" pos:column="7">assert<pos:position pos:line="2505" pos:column="13"/></name><argument_list pos:line="2505" pos:column="13">( <argument><expr><name pos:line="2505" pos:column="15">desiredAutoCommit<pos:position pos:line="2505" pos:column="32"/></name><operator pos:line="2505" pos:column="32">==<pos:position pos:line="2505" pos:column="34"/></operator><literal type="number" pos:line="2505" pos:column="34">1<pos:position pos:line="2505" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="2505" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="2505" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="2506" pos:column="7">sqlite3RollbackAll<pos:position pos:line="2506" pos:column="25"/></name><argument_list pos:line="2506" pos:column="25">(<argument><expr><name pos:line="2506" pos:column="26">db<pos:position pos:line="2506" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="2506" pos:column="30">SQLITE_ABORT_ROLLBACK<pos:position pos:line="2506" pos:column="51"/></name></expr></argument>)<pos:position pos:line="2506" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="2506" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2507" pos:column="7">db<pos:position pos:line="2507" pos:column="9"/></name><operator pos:line="2507" pos:column="9">-&gt;<pos:position pos:line="2507" pos:column="14"/></operator><name pos:line="2507" pos:column="11">autoCommit<pos:position pos:line="2507" pos:column="21"/></name></name> <operator pos:line="2507" pos:column="22">=<pos:position pos:line="2507" pos:column="23"/></operator> <literal type="number" pos:line="2507" pos:column="24">1<pos:position pos:line="2507" pos:column="25"/></literal></expr>;<pos:position pos:line="2507" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="2508" pos:column="6"/></block></then><elseif pos:line="2508" pos:column="6">else <if pos:line="2508" pos:column="11">if<condition pos:line="2508" pos:column="13">( <expr><name pos:line="2508" pos:column="15">desiredAutoCommit<pos:position pos:line="2508" pos:column="32"/></name> <operator pos:line="2508" pos:column="33">&amp;&amp;<pos:position pos:line="2508" pos:column="43"/></operator> <name><name pos:line="2508" pos:column="36">db<pos:position pos:line="2508" pos:column="38"/></name><operator pos:line="2508" pos:column="38">-&gt;<pos:position pos:line="2508" pos:column="43"/></operator><name pos:line="2508" pos:column="40">nVdbeWrite<pos:position pos:line="2508" pos:column="50"/></name></name><operator pos:line="2508" pos:column="50">&gt;<pos:position pos:line="2508" pos:column="54"/></operator><literal type="number" pos:line="2508" pos:column="51">0<pos:position pos:line="2508" pos:column="52"/></literal></expr> )<pos:position pos:line="2508" pos:column="54"/></condition><then><block pos:line="2508" pos:column="54">{
      <comment type="block" pos:line="2509" pos:column="7">/* If this instruction implements a COMMIT and other VMs are writing
      ** return an error indicating that the other VMs must complete first. 
      */</comment>
      <expr_stmt><expr><call><name pos:line="2512" pos:column="7">sqlite3VdbeError<pos:position pos:line="2512" pos:column="23"/></name><argument_list pos:line="2512" pos:column="23">(<argument><expr><name pos:line="2512" pos:column="24">p<pos:position pos:line="2512" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2512" pos:column="27">"cannot commit transaction - "<pos:position pos:line="2512" pos:column="57"/></literal>
                          <literal type="string" pos:line="2513" pos:column="27">"SQL statements in progress"<pos:position pos:line="2513" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2513" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2513" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2514" pos:column="7">rc<pos:position pos:line="2514" pos:column="9"/></name> <operator pos:line="2514" pos:column="10">=<pos:position pos:line="2514" pos:column="11"/></operator> <name pos:line="2514" pos:column="12">SQLITE_BUSY<pos:position pos:line="2514" pos:column="23"/></name></expr>;<pos:position pos:line="2514" pos:column="24"/></expr_stmt>
      <goto pos:line="2515" pos:column="7">goto <name pos:line="2515" pos:column="12">abort_due_to_error<pos:position pos:line="2515" pos:column="30"/></name>;<pos:position pos:line="2515" pos:column="31"/></goto>
    }<pos:position pos:line="2516" pos:column="6"/></block></then></if></elseif><elseif pos:line="2516" pos:column="6">else <if pos:line="2516" pos:column="11">if<condition pos:line="2516" pos:column="13">( <expr><operator pos:line="2516" pos:column="15">(<pos:position pos:line="2516" pos:column="16"/></operator><name pos:line="2516" pos:column="16">rc<pos:position pos:line="2516" pos:column="18"/></name> <operator pos:line="2516" pos:column="19">=<pos:position pos:line="2516" pos:column="20"/></operator> <call><name pos:line="2516" pos:column="21">sqlite3VdbeCheckFk<pos:position pos:line="2516" pos:column="39"/></name><argument_list pos:line="2516" pos:column="39">(<argument><expr><name pos:line="2516" pos:column="40">p<pos:position pos:line="2516" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2516" pos:column="43">1<pos:position pos:line="2516" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="2516" pos:column="45"/></argument_list></call><operator pos:line="2516" pos:column="45">)<pos:position pos:line="2516" pos:column="46"/></operator><operator pos:line="2516" pos:column="46">!=<pos:position pos:line="2516" pos:column="48"/></operator><name pos:line="2516" pos:column="48">SQLITE_OK<pos:position pos:line="2516" pos:column="57"/></name></expr> )<pos:position pos:line="2516" pos:column="59"/></condition><then><block pos:line="2516" pos:column="59">{
      <goto pos:line="2517" pos:column="7">goto <name pos:line="2517" pos:column="12">vdbe_return<pos:position pos:line="2517" pos:column="23"/></name>;<pos:position pos:line="2517" pos:column="24"/></goto>
    }<pos:position pos:line="2518" pos:column="6"/></block></then></if></elseif><else pos:line="2518" pos:column="6">else<block pos:line="2518" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="2519" pos:column="7">db<pos:position pos:line="2519" pos:column="9"/></name><operator pos:line="2519" pos:column="9">-&gt;<pos:position pos:line="2519" pos:column="14"/></operator><name pos:line="2519" pos:column="11">autoCommit<pos:position pos:line="2519" pos:column="21"/></name></name> <operator pos:line="2519" pos:column="22">=<pos:position pos:line="2519" pos:column="23"/></operator> <operator pos:line="2519" pos:column="24">(<pos:position pos:line="2519" pos:column="25"/></operator><name pos:line="2519" pos:column="25">u8<pos:position pos:line="2519" pos:column="27"/></name><operator pos:line="2519" pos:column="27">)<pos:position pos:line="2519" pos:column="28"/></operator><name pos:line="2519" pos:column="28">desiredAutoCommit<pos:position pos:line="2519" pos:column="45"/></name></expr>;<pos:position pos:line="2519" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="2520" pos:column="6"/></block></else></if>
    <if pos:line="2521" pos:column="5">if<condition pos:line="2521" pos:column="7">( <expr><call><name pos:line="2521" pos:column="9">sqlite3VdbeHalt<pos:position pos:line="2521" pos:column="24"/></name><argument_list pos:line="2521" pos:column="24">(<argument><expr><name pos:line="2521" pos:column="25">p<pos:position pos:line="2521" pos:column="26"/></name></expr></argument>)<pos:position pos:line="2521" pos:column="27"/></argument_list></call><operator pos:line="2521" pos:column="27">==<pos:position pos:line="2521" pos:column="29"/></operator><name pos:line="2521" pos:column="29">SQLITE_BUSY<pos:position pos:line="2521" pos:column="40"/></name></expr> )<pos:position pos:line="2521" pos:column="42"/></condition><then><block pos:line="2521" pos:column="42">{
      <expr_stmt><expr><name><name pos:line="2522" pos:column="7">p<pos:position pos:line="2522" pos:column="8"/></name><operator pos:line="2522" pos:column="8">-&gt;<pos:position pos:line="2522" pos:column="13"/></operator><name pos:line="2522" pos:column="10">pc<pos:position pos:line="2522" pos:column="12"/></name></name> <operator pos:line="2522" pos:column="13">=<pos:position pos:line="2522" pos:column="14"/></operator> <call pos:line="2522" pos:column="15">(<name pos:line="2522" pos:column="16">int<pos:position pos:line="2522" pos:column="19"/></name>)<argument_list pos:line="2522" pos:column="20">(<argument><expr><name pos:line="2522" pos:column="21">pOp<pos:position pos:line="2522" pos:column="24"/></name> <operator pos:line="2522" pos:column="25">-<pos:position pos:line="2522" pos:column="26"/></operator> <name pos:line="2522" pos:column="27">aOp<pos:position pos:line="2522" pos:column="30"/></name></expr></argument>)<pos:position pos:line="2522" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2522" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2523" pos:column="7">db<pos:position pos:line="2523" pos:column="9"/></name><operator pos:line="2523" pos:column="9">-&gt;<pos:position pos:line="2523" pos:column="14"/></operator><name pos:line="2523" pos:column="11">autoCommit<pos:position pos:line="2523" pos:column="21"/></name></name> <operator pos:line="2523" pos:column="22">=<pos:position pos:line="2523" pos:column="23"/></operator> <call pos:line="2523" pos:column="24">(<name pos:line="2523" pos:column="25">u8<pos:position pos:line="2523" pos:column="27"/></name>)<argument_list pos:line="2523" pos:column="28">(<argument><expr><literal type="number" pos:line="2523" pos:column="29">1<pos:position pos:line="2523" pos:column="30"/></literal><operator pos:line="2523" pos:column="30">-<pos:position pos:line="2523" pos:column="31"/></operator><name pos:line="2523" pos:column="31">desiredAutoCommit<pos:position pos:line="2523" pos:column="48"/></name></expr></argument>)<pos:position pos:line="2523" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2523" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2524" pos:column="7">p<pos:position pos:line="2524" pos:column="8"/></name><operator pos:line="2524" pos:column="8">-&gt;<pos:position pos:line="2524" pos:column="13"/></operator><name pos:line="2524" pos:column="10">rc<pos:position pos:line="2524" pos:column="12"/></name></name> <operator pos:line="2524" pos:column="13">=<pos:position pos:line="2524" pos:column="14"/></operator> <name pos:line="2524" pos:column="15">rc<pos:position pos:line="2524" pos:column="17"/></name> <operator pos:line="2524" pos:column="18">=<pos:position pos:line="2524" pos:column="19"/></operator> <name pos:line="2524" pos:column="20">SQLITE_BUSY<pos:position pos:line="2524" pos:column="31"/></name></expr>;<pos:position pos:line="2524" pos:column="32"/></expr_stmt>
      <goto pos:line="2525" pos:column="7">goto <name pos:line="2525" pos:column="12">vdbe_return<pos:position pos:line="2525" pos:column="23"/></name>;<pos:position pos:line="2525" pos:column="24"/></goto>
    }<pos:position pos:line="2526" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="2527" pos:column="5">assert<pos:position pos:line="2527" pos:column="11"/></name><argument_list pos:line="2527" pos:column="11">( <argument><expr><name><name pos:line="2527" pos:column="13">db<pos:position pos:line="2527" pos:column="15"/></name><operator pos:line="2527" pos:column="15">-&gt;<pos:position pos:line="2527" pos:column="20"/></operator><name pos:line="2527" pos:column="17">nStatement<pos:position pos:line="2527" pos:column="27"/></name></name><operator pos:line="2527" pos:column="27">==<pos:position pos:line="2527" pos:column="29"/></operator><literal type="number" pos:line="2527" pos:column="29">0<pos:position pos:line="2527" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="2527" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2527" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2528" pos:column="5">sqlite3CloseSavepoints<pos:position pos:line="2528" pos:column="27"/></name><argument_list pos:line="2528" pos:column="27">(<argument><expr><name pos:line="2528" pos:column="28">db<pos:position pos:line="2528" pos:column="30"/></name></expr></argument>)<pos:position pos:line="2528" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2528" pos:column="32"/></expr_stmt>
    <if pos:line="2529" pos:column="5">if<condition pos:line="2529" pos:column="7">( <expr><name><name pos:line="2529" pos:column="9">p<pos:position pos:line="2529" pos:column="10"/></name><operator pos:line="2529" pos:column="10">-&gt;<pos:position pos:line="2529" pos:column="15"/></operator><name pos:line="2529" pos:column="12">rc<pos:position pos:line="2529" pos:column="14"/></name></name><operator pos:line="2529" pos:column="14">==<pos:position pos:line="2529" pos:column="16"/></operator><name pos:line="2529" pos:column="16">SQLITE_OK<pos:position pos:line="2529" pos:column="25"/></name></expr> )<pos:position pos:line="2529" pos:column="27"/></condition><then><block pos:line="2529" pos:column="27">{
      <expr_stmt><expr><name pos:line="2530" pos:column="7">rc<pos:position pos:line="2530" pos:column="9"/></name> <operator pos:line="2530" pos:column="10">=<pos:position pos:line="2530" pos:column="11"/></operator> <name pos:line="2530" pos:column="12">SQLITE_DONE<pos:position pos:line="2530" pos:column="23"/></name></expr>;<pos:position pos:line="2530" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2531" pos:column="6"/></block></then><else pos:line="2531" pos:column="6">else<block pos:line="2531" pos:column="10">{
      <expr_stmt><expr><name pos:line="2532" pos:column="7">rc<pos:position pos:line="2532" pos:column="9"/></name> <operator pos:line="2532" pos:column="10">=<pos:position pos:line="2532" pos:column="11"/></operator> <name pos:line="2532" pos:column="12">SQLITE_ERROR<pos:position pos:line="2532" pos:column="24"/></name></expr>;<pos:position pos:line="2532" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="2533" pos:column="6"/></block></else></if>
    <goto pos:line="2534" pos:column="5">goto <name pos:line="2534" pos:column="10">vdbe_return<pos:position pos:line="2534" pos:column="21"/></name>;<pos:position pos:line="2534" pos:column="22"/></goto>
  }<pos:position pos:line="2535" pos:column="4"/></block></then><else pos:line="2535" pos:column="4">else<block pos:line="2535" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="2536" pos:column="5">sqlite3VdbeError<pos:position pos:line="2536" pos:column="21"/></name><argument_list pos:line="2536" pos:column="21">(<argument><expr><name pos:line="2536" pos:column="22">p<pos:position pos:line="2536" pos:column="23"/></name></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="2537" pos:column="9">(<pos:position pos:line="2537" pos:column="10"/></operator><operator pos:line="2537" pos:column="10">!<pos:position pos:line="2537" pos:column="11"/></operator><name pos:line="2537" pos:column="11">desiredAutoCommit<pos:position pos:line="2537" pos:column="28"/></name><operator pos:line="2537" pos:column="28">)<pos:position pos:line="2537" pos:column="29"/></operator></expr>?<pos:position pos:line="2537" pos:column="30"/></condition><then><expr><literal type="string" pos:line="2537" pos:column="30">"cannot start a transaction within a transaction"<pos:position pos:line="2537" pos:column="79"/></literal></expr></then><else pos:line="2537" pos:column="79">:<expr><operator pos:line="2537" pos:column="80">(<pos:position pos:line="2537" pos:column="81"/></operator>
        <ternary><condition><expr><operator pos:line="2538" pos:column="9">(<pos:position pos:line="2538" pos:column="10"/></operator><name pos:line="2538" pos:column="10">iRollback<pos:position pos:line="2538" pos:column="19"/></name><operator pos:line="2538" pos:column="19">)<pos:position pos:line="2538" pos:column="20"/></operator></expr>?<pos:position pos:line="2538" pos:column="21"/></condition><then><expr><literal type="string" pos:line="2538" pos:column="21">"cannot rollback - no transaction is active"<pos:position pos:line="2538" pos:column="65"/></literal></expr></then><else pos:line="2538" pos:column="65">:
                   <expr><literal type="string" pos:line="2539" pos:column="20">"cannot commit - no transaction is active"<pos:position pos:line="2539" pos:column="62"/></literal></expr></else></ternary><operator pos:line="2539" pos:column="62">)<pos:position pos:line="2539" pos:column="63"/></operator></expr></else></ternary></expr></argument>)<pos:position pos:line="2539" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="2539" pos:column="65"/></expr_stmt>
         
    <expr_stmt><expr><name pos:line="2541" pos:column="5">rc<pos:position pos:line="2541" pos:column="7"/></name> <operator pos:line="2541" pos:column="8">=<pos:position pos:line="2541" pos:column="9"/></operator> <name pos:line="2541" pos:column="10">SQLITE_ERROR<pos:position pos:line="2541" pos:column="22"/></name></expr>;<pos:position pos:line="2541" pos:column="23"/></expr_stmt>
    <goto pos:line="2542" pos:column="5">goto <name pos:line="2542" pos:column="10">abort_due_to_error<pos:position pos:line="2542" pos:column="28"/></name>;<pos:position pos:line="2542" pos:column="29"/></goto>
  }<pos:position pos:line="2543" pos:column="4"/></block></else></if>
  <break pos:line="2544" pos:column="3">break;<pos:position pos:line="2544" pos:column="9"/></break>
}<pos:position pos:line="2545" pos:column="2"/></block>

<comment type="block" pos:line="2547" pos:column="1">/* Opcode: Transaction P1 P2 P3 P4 P5
**
** Begin a transaction on database P1 if a transaction is not already
** active.
** If P2 is non-zero, then a write-transaction is started, or if a 
** read-transaction is already active, it is upgraded to a write-transaction.
** If P2 is zero, then a read-transaction is started.
**
** P1 is the index of the database file on which the transaction is
** started.  Index 0 is the main database file and index 1 is the
** file used for temporary tables.  Indices of 2 or more are used for
** attached databases.
**
** If a write-transaction is started and the Vdbe.usesStmtJournal flag is
** true (this flag is set if the Vdbe may modify more than one row and may
** throw an ABORT exception), a statement transaction may also be opened.
** More specifically, a statement transaction is opened iff the database
** connection is currently not in autocommit mode, or if there are other
** active statements. A statement transaction allows the changes made by this
** VDBE to be rolled back after an error without having to roll back the
** entire transaction. If no error is encountered, the statement transaction
** will automatically commit when the VDBE halts.
**
** If P5!=0 then this opcode also checks the schema cookie against P3
** and the schema generation counter against P4.
** The cookie changes its value whenever the database schema changes.
** This operation is used to detect when that the cookie has changed
** and that the current process needs to reread the schema.  If the schema
** cookie in P3 differs from the schema cookie in the database header or
** if the schema generation counter in P4 differs from the current
** generation counter, then an SQLITE_SCHEMA error is raised and execution
** halts.  The sqlite3_step() wrapper function might then reprepare the
** statement and rerun it from the beginning.
*/</comment>
<case pos:line="2581" pos:column="1">case <expr><name pos:line="2581" pos:column="6">OP_Transaction<pos:position pos:line="2581" pos:column="20"/></name></expr>:<pos:position pos:line="2581" pos:column="21"/></case> <block pos:line="2581" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="2582" pos:column="3">Btree<pos:position pos:line="2582" pos:column="8"/></name> <modifier pos:line="2582" pos:column="9">*<pos:position pos:line="2582" pos:column="10"/></modifier></type><name pos:line="2582" pos:column="10">pBt<pos:position pos:line="2582" pos:column="13"/></name></decl>;<pos:position pos:line="2582" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2583" pos:column="3">int<pos:position pos:line="2583" pos:column="6"/></name></type> <name pos:line="2583" pos:column="7">iMeta<pos:position pos:line="2583" pos:column="12"/></name></decl>;<pos:position pos:line="2583" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2584" pos:column="3">int<pos:position pos:line="2584" pos:column="6"/></name></type> <name pos:line="2584" pos:column="7">iGen<pos:position pos:line="2584" pos:column="11"/></name></decl>;<pos:position pos:line="2584" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="2586" pos:column="3">assert<pos:position pos:line="2586" pos:column="9"/></name><argument_list pos:line="2586" pos:column="9">( <argument><expr><name><name pos:line="2586" pos:column="11">p<pos:position pos:line="2586" pos:column="12"/></name><operator pos:line="2586" pos:column="12">-&gt;<pos:position pos:line="2586" pos:column="17"/></operator><name pos:line="2586" pos:column="14">bIsReader<pos:position pos:line="2586" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="2586" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="2586" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2587" pos:column="3">assert<pos:position pos:line="2587" pos:column="9"/></name><argument_list pos:line="2587" pos:column="9">( <argument><expr><name><name pos:line="2587" pos:column="11">p<pos:position pos:line="2587" pos:column="12"/></name><operator pos:line="2587" pos:column="12">-&gt;<pos:position pos:line="2587" pos:column="17"/></operator><name pos:line="2587" pos:column="14">readOnly<pos:position pos:line="2587" pos:column="22"/></name></name><operator pos:line="2587" pos:column="22">==<pos:position pos:line="2587" pos:column="24"/></operator><literal type="number" pos:line="2587" pos:column="24">0<pos:position pos:line="2587" pos:column="25"/></literal> <operator pos:line="2587" pos:column="26">||<pos:position pos:line="2587" pos:column="28"/></operator> <name><name pos:line="2587" pos:column="29">pOp<pos:position pos:line="2587" pos:column="32"/></name><operator pos:line="2587" pos:column="32">-&gt;<pos:position pos:line="2587" pos:column="37"/></operator><name pos:line="2587" pos:column="34">p2<pos:position pos:line="2587" pos:column="36"/></name></name><operator pos:line="2587" pos:column="36">==<pos:position pos:line="2587" pos:column="38"/></operator><literal type="number" pos:line="2587" pos:column="38">0<pos:position pos:line="2587" pos:column="39"/></literal></expr></argument> )<pos:position pos:line="2587" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2587" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2588" pos:column="3">assert<pos:position pos:line="2588" pos:column="9"/></name><argument_list pos:line="2588" pos:column="9">( <argument><expr><name><name pos:line="2588" pos:column="11">pOp<pos:position pos:line="2588" pos:column="14"/></name><operator pos:line="2588" pos:column="14">-&gt;<pos:position pos:line="2588" pos:column="19"/></operator><name pos:line="2588" pos:column="16">p1<pos:position pos:line="2588" pos:column="18"/></name></name><operator pos:line="2588" pos:column="18">&gt;=<pos:position pos:line="2588" pos:column="23"/></operator><literal type="number" pos:line="2588" pos:column="20">0<pos:position pos:line="2588" pos:column="21"/></literal> <operator pos:line="2588" pos:column="22">&amp;&amp;<pos:position pos:line="2588" pos:column="32"/></operator> <name><name pos:line="2588" pos:column="25">pOp<pos:position pos:line="2588" pos:column="28"/></name><operator pos:line="2588" pos:column="28">-&gt;<pos:position pos:line="2588" pos:column="33"/></operator><name pos:line="2588" pos:column="30">p1<pos:position pos:line="2588" pos:column="32"/></name></name><operator pos:line="2588" pos:column="32">&lt;<pos:position pos:line="2588" pos:column="36"/></operator><name><name pos:line="2588" pos:column="33">db<pos:position pos:line="2588" pos:column="35"/></name><operator pos:line="2588" pos:column="35">-&gt;<pos:position pos:line="2588" pos:column="40"/></operator><name pos:line="2588" pos:column="37">nDb<pos:position pos:line="2588" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="2588" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="2588" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2589" pos:column="3">assert<pos:position pos:line="2589" pos:column="9"/></name><argument_list pos:line="2589" pos:column="9">( <argument><expr><call><name pos:line="2589" pos:column="11">DbMaskTest<pos:position pos:line="2589" pos:column="21"/></name><argument_list pos:line="2589" pos:column="21">(<argument><expr><name><name pos:line="2589" pos:column="22">p<pos:position pos:line="2589" pos:column="23"/></name><operator pos:line="2589" pos:column="23">-&gt;<pos:position pos:line="2589" pos:column="28"/></operator><name pos:line="2589" pos:column="25">btreeMask<pos:position pos:line="2589" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2589" pos:column="36">pOp<pos:position pos:line="2589" pos:column="39"/></name><operator pos:line="2589" pos:column="39">-&gt;<pos:position pos:line="2589" pos:column="44"/></operator><name pos:line="2589" pos:column="41">p1<pos:position pos:line="2589" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="2589" pos:column="44"/></argument_list></call></expr></argument> )<pos:position pos:line="2589" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2589" pos:column="47"/></expr_stmt>
  <if pos:line="2590" pos:column="3">if<condition pos:line="2590" pos:column="5">( <expr><name><name pos:line="2590" pos:column="7">pOp<pos:position pos:line="2590" pos:column="10"/></name><operator pos:line="2590" pos:column="10">-&gt;<pos:position pos:line="2590" pos:column="15"/></operator><name pos:line="2590" pos:column="12">p2<pos:position pos:line="2590" pos:column="14"/></name></name> <operator pos:line="2590" pos:column="15">&amp;&amp;<pos:position pos:line="2590" pos:column="25"/></operator> <operator pos:line="2590" pos:column="18">(<pos:position pos:line="2590" pos:column="19"/></operator><name><name pos:line="2590" pos:column="19">db<pos:position pos:line="2590" pos:column="21"/></name><operator pos:line="2590" pos:column="21">-&gt;<pos:position pos:line="2590" pos:column="26"/></operator><name pos:line="2590" pos:column="23">flags<pos:position pos:line="2590" pos:column="28"/></name></name> <operator pos:line="2590" pos:column="29">&amp;<pos:position pos:line="2590" pos:column="34"/></operator> <name pos:line="2590" pos:column="31">SQLITE_QueryOnly<pos:position pos:line="2590" pos:column="47"/></name><operator pos:line="2590" pos:column="47">)<pos:position pos:line="2590" pos:column="48"/></operator><operator pos:line="2590" pos:column="48">!=<pos:position pos:line="2590" pos:column="50"/></operator><literal type="number" pos:line="2590" pos:column="50">0<pos:position pos:line="2590" pos:column="51"/></literal></expr> )<pos:position pos:line="2590" pos:column="53"/></condition><then><block pos:line="2590" pos:column="53">{
    <expr_stmt><expr><name pos:line="2591" pos:column="5">rc<pos:position pos:line="2591" pos:column="7"/></name> <operator pos:line="2591" pos:column="8">=<pos:position pos:line="2591" pos:column="9"/></operator> <name pos:line="2591" pos:column="10">SQLITE_READONLY<pos:position pos:line="2591" pos:column="25"/></name></expr>;<pos:position pos:line="2591" pos:column="26"/></expr_stmt>
    <goto pos:line="2592" pos:column="5">goto <name pos:line="2592" pos:column="10">abort_due_to_error<pos:position pos:line="2592" pos:column="28"/></name>;<pos:position pos:line="2592" pos:column="29"/></goto>
  }<pos:position pos:line="2593" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="2594" pos:column="3">pBt<pos:position pos:line="2594" pos:column="6"/></name> <operator pos:line="2594" pos:column="7">=<pos:position pos:line="2594" pos:column="8"/></operator> <name><name pos:line="2594" pos:column="9">db<pos:position pos:line="2594" pos:column="11"/></name><operator pos:line="2594" pos:column="11">-&gt;<pos:position pos:line="2594" pos:column="16"/></operator><name pos:line="2594" pos:column="13">aDb<pos:position pos:line="2594" pos:column="16"/></name><index pos:line="2594" pos:column="16">[<expr><name><name pos:line="2594" pos:column="17">pOp<pos:position pos:line="2594" pos:column="20"/></name><operator pos:line="2594" pos:column="20">-&gt;<pos:position pos:line="2594" pos:column="25"/></operator><name pos:line="2594" pos:column="22">p1<pos:position pos:line="2594" pos:column="24"/></name></name></expr>]<pos:position pos:line="2594" pos:column="25"/></index></name><operator pos:line="2594" pos:column="25">.<pos:position pos:line="2594" pos:column="26"/></operator><name pos:line="2594" pos:column="26">pBt<pos:position pos:line="2594" pos:column="29"/></name></expr>;<pos:position pos:line="2594" pos:column="30"/></expr_stmt>

  <if pos:line="2596" pos:column="3">if<condition pos:line="2596" pos:column="5">( <expr><name pos:line="2596" pos:column="7">pBt<pos:position pos:line="2596" pos:column="10"/></name></expr> )<pos:position pos:line="2596" pos:column="12"/></condition><then><block pos:line="2596" pos:column="12">{
    <expr_stmt><expr><name pos:line="2597" pos:column="5">rc<pos:position pos:line="2597" pos:column="7"/></name> <operator pos:line="2597" pos:column="8">=<pos:position pos:line="2597" pos:column="9"/></operator> <call><name pos:line="2597" pos:column="10">sqlite3BtreeBeginTrans<pos:position pos:line="2597" pos:column="32"/></name><argument_list pos:line="2597" pos:column="32">(<argument><expr><name pos:line="2597" pos:column="33">pBt<pos:position pos:line="2597" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="2597" pos:column="38">pOp<pos:position pos:line="2597" pos:column="41"/></name><operator pos:line="2597" pos:column="41">-&gt;<pos:position pos:line="2597" pos:column="46"/></operator><name pos:line="2597" pos:column="43">p2<pos:position pos:line="2597" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="2597" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2597" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2598" pos:column="5">testcase<pos:position pos:line="2598" pos:column="13"/></name><argument_list pos:line="2598" pos:column="13">( <argument><expr><name pos:line="2598" pos:column="15">rc<pos:position pos:line="2598" pos:column="17"/></name><operator pos:line="2598" pos:column="17">==<pos:position pos:line="2598" pos:column="19"/></operator><name pos:line="2598" pos:column="19">SQLITE_BUSY_SNAPSHOT<pos:position pos:line="2598" pos:column="39"/></name></expr></argument> )<pos:position pos:line="2598" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2598" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2599" pos:column="5">testcase<pos:position pos:line="2599" pos:column="13"/></name><argument_list pos:line="2599" pos:column="13">( <argument><expr><name pos:line="2599" pos:column="15">rc<pos:position pos:line="2599" pos:column="17"/></name><operator pos:line="2599" pos:column="17">==<pos:position pos:line="2599" pos:column="19"/></operator><name pos:line="2599" pos:column="19">SQLITE_BUSY_RECOVERY<pos:position pos:line="2599" pos:column="39"/></name></expr></argument> )<pos:position pos:line="2599" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2599" pos:column="42"/></expr_stmt>
    <if pos:line="2600" pos:column="5">if<condition pos:line="2600" pos:column="7">( <expr><name pos:line="2600" pos:column="9">rc<pos:position pos:line="2600" pos:column="11"/></name><operator pos:line="2600" pos:column="11">!=<pos:position pos:line="2600" pos:column="13"/></operator><name pos:line="2600" pos:column="13">SQLITE_OK<pos:position pos:line="2600" pos:column="22"/></name></expr> )<pos:position pos:line="2600" pos:column="24"/></condition><then><block pos:line="2600" pos:column="24">{
      <if pos:line="2601" pos:column="7">if<condition pos:line="2601" pos:column="9">( <expr><operator pos:line="2601" pos:column="11">(<pos:position pos:line="2601" pos:column="12"/></operator><name pos:line="2601" pos:column="12">rc<pos:position pos:line="2601" pos:column="14"/></name><operator pos:line="2601" pos:column="14">&amp;<pos:position pos:line="2601" pos:column="19"/></operator><literal type="number" pos:line="2601" pos:column="15">0xff<pos:position pos:line="2601" pos:column="19"/></literal><operator pos:line="2601" pos:column="19">)<pos:position pos:line="2601" pos:column="20"/></operator><operator pos:line="2601" pos:column="20">==<pos:position pos:line="2601" pos:column="22"/></operator><name pos:line="2601" pos:column="22">SQLITE_BUSY<pos:position pos:line="2601" pos:column="33"/></name></expr> )<pos:position pos:line="2601" pos:column="35"/></condition><then><block pos:line="2601" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="2602" pos:column="9">p<pos:position pos:line="2602" pos:column="10"/></name><operator pos:line="2602" pos:column="10">-&gt;<pos:position pos:line="2602" pos:column="15"/></operator><name pos:line="2602" pos:column="12">pc<pos:position pos:line="2602" pos:column="14"/></name></name> <operator pos:line="2602" pos:column="15">=<pos:position pos:line="2602" pos:column="16"/></operator> <call pos:line="2602" pos:column="17">(<name pos:line="2602" pos:column="18">int<pos:position pos:line="2602" pos:column="21"/></name>)<argument_list pos:line="2602" pos:column="22">(<argument><expr><name pos:line="2602" pos:column="23">pOp<pos:position pos:line="2602" pos:column="26"/></name> <operator pos:line="2602" pos:column="27">-<pos:position pos:line="2602" pos:column="28"/></operator> <name pos:line="2602" pos:column="29">aOp<pos:position pos:line="2602" pos:column="32"/></name></expr></argument>)<pos:position pos:line="2602" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2602" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2603" pos:column="9">p<pos:position pos:line="2603" pos:column="10"/></name><operator pos:line="2603" pos:column="10">-&gt;<pos:position pos:line="2603" pos:column="15"/></operator><name pos:line="2603" pos:column="12">rc<pos:position pos:line="2603" pos:column="14"/></name></name> <operator pos:line="2603" pos:column="15">=<pos:position pos:line="2603" pos:column="16"/></operator> <name pos:line="2603" pos:column="17">rc<pos:position pos:line="2603" pos:column="19"/></name></expr>;<pos:position pos:line="2603" pos:column="20"/></expr_stmt>
        <goto pos:line="2604" pos:column="9">goto <name pos:line="2604" pos:column="14">vdbe_return<pos:position pos:line="2604" pos:column="25"/></name>;<pos:position pos:line="2604" pos:column="26"/></goto>
      }<pos:position pos:line="2605" pos:column="8"/></block></then></if>
      <goto pos:line="2606" pos:column="7">goto <name pos:line="2606" pos:column="12">abort_due_to_error<pos:position pos:line="2606" pos:column="30"/></name>;<pos:position pos:line="2606" pos:column="31"/></goto>
    }<pos:position pos:line="2607" pos:column="6"/></block></then></if>

    <if pos:line="2609" pos:column="5">if<condition pos:line="2609" pos:column="7">( <expr><name><name pos:line="2609" pos:column="9">pOp<pos:position pos:line="2609" pos:column="12"/></name><operator pos:line="2609" pos:column="12">-&gt;<pos:position pos:line="2609" pos:column="17"/></operator><name pos:line="2609" pos:column="14">p2<pos:position pos:line="2609" pos:column="16"/></name></name> <operator pos:line="2609" pos:column="17">&amp;&amp;<pos:position pos:line="2609" pos:column="27"/></operator> <name><name pos:line="2609" pos:column="20">p<pos:position pos:line="2609" pos:column="21"/></name><operator pos:line="2609" pos:column="21">-&gt;<pos:position pos:line="2609" pos:column="26"/></operator><name pos:line="2609" pos:column="23">usesStmtJournal<pos:position pos:line="2609" pos:column="38"/></name></name> 
     <operator pos:line="2610" pos:column="6">&amp;&amp;<pos:position pos:line="2610" pos:column="16"/></operator> <operator pos:line="2610" pos:column="9">(<pos:position pos:line="2610" pos:column="10"/></operator><name><name pos:line="2610" pos:column="10">db<pos:position pos:line="2610" pos:column="12"/></name><operator pos:line="2610" pos:column="12">-&gt;<pos:position pos:line="2610" pos:column="17"/></operator><name pos:line="2610" pos:column="14">autoCommit<pos:position pos:line="2610" pos:column="24"/></name></name><operator pos:line="2610" pos:column="24">==<pos:position pos:line="2610" pos:column="26"/></operator><literal type="number" pos:line="2610" pos:column="26">0<pos:position pos:line="2610" pos:column="27"/></literal> <operator pos:line="2610" pos:column="28">||<pos:position pos:line="2610" pos:column="30"/></operator> <name><name pos:line="2610" pos:column="31">db<pos:position pos:line="2610" pos:column="33"/></name><operator pos:line="2610" pos:column="33">-&gt;<pos:position pos:line="2610" pos:column="38"/></operator><name pos:line="2610" pos:column="35">nVdbeRead<pos:position pos:line="2610" pos:column="44"/></name></name><operator pos:line="2610" pos:column="44">&gt;<pos:position pos:line="2610" pos:column="48"/></operator><literal type="number" pos:line="2610" pos:column="45">1<pos:position pos:line="2610" pos:column="46"/></literal><operator pos:line="2610" pos:column="46">)<pos:position pos:line="2610" pos:column="47"/></operator></expr> 
    )<pos:position pos:line="2611" pos:column="6"/></condition><then><block pos:line="2611" pos:column="6">{
      <expr_stmt><expr><call><name pos:line="2612" pos:column="7">assert<pos:position pos:line="2612" pos:column="13"/></name><argument_list pos:line="2612" pos:column="13">( <argument><expr><call><name pos:line="2612" pos:column="15">sqlite3BtreeIsInTrans<pos:position pos:line="2612" pos:column="36"/></name><argument_list pos:line="2612" pos:column="36">(<argument><expr><name pos:line="2612" pos:column="37">pBt<pos:position pos:line="2612" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2612" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="2612" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="2612" pos:column="44"/></expr_stmt>
      <if pos:line="2613" pos:column="7">if<condition pos:line="2613" pos:column="9">( <expr><name><name pos:line="2613" pos:column="11">p<pos:position pos:line="2613" pos:column="12"/></name><operator pos:line="2613" pos:column="12">-&gt;<pos:position pos:line="2613" pos:column="17"/></operator><name pos:line="2613" pos:column="14">iStatement<pos:position pos:line="2613" pos:column="24"/></name></name><operator pos:line="2613" pos:column="24">==<pos:position pos:line="2613" pos:column="26"/></operator><literal type="number" pos:line="2613" pos:column="26">0<pos:position pos:line="2613" pos:column="27"/></literal></expr> )<pos:position pos:line="2613" pos:column="29"/></condition><then><block pos:line="2613" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="2614" pos:column="9">assert<pos:position pos:line="2614" pos:column="15"/></name><argument_list pos:line="2614" pos:column="15">( <argument><expr><name><name pos:line="2614" pos:column="17">db<pos:position pos:line="2614" pos:column="19"/></name><operator pos:line="2614" pos:column="19">-&gt;<pos:position pos:line="2614" pos:column="24"/></operator><name pos:line="2614" pos:column="21">nStatement<pos:position pos:line="2614" pos:column="31"/></name></name><operator pos:line="2614" pos:column="31">&gt;=<pos:position pos:line="2614" pos:column="36"/></operator><literal type="number" pos:line="2614" pos:column="33">0<pos:position pos:line="2614" pos:column="34"/></literal> <operator pos:line="2614" pos:column="35">&amp;&amp;<pos:position pos:line="2614" pos:column="45"/></operator> <name><name pos:line="2614" pos:column="38">db<pos:position pos:line="2614" pos:column="40"/></name><operator pos:line="2614" pos:column="40">-&gt;<pos:position pos:line="2614" pos:column="45"/></operator><name pos:line="2614" pos:column="42">nSavepoint<pos:position pos:line="2614" pos:column="52"/></name></name><operator pos:line="2614" pos:column="52">&gt;=<pos:position pos:line="2614" pos:column="57"/></operator><literal type="number" pos:line="2614" pos:column="54">0<pos:position pos:line="2614" pos:column="55"/></literal></expr></argument> )<pos:position pos:line="2614" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="2614" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2615" pos:column="9">db<pos:position pos:line="2615" pos:column="11"/></name><operator pos:line="2615" pos:column="11">-&gt;<pos:position pos:line="2615" pos:column="16"/></operator><name pos:line="2615" pos:column="13">nStatement<pos:position pos:line="2615" pos:column="23"/></name></name><operator pos:line="2615" pos:column="23">++<pos:position pos:line="2615" pos:column="25"/></operator></expr>;<pos:position pos:line="2615" pos:column="26"/></expr_stmt> 
        <expr_stmt><expr><name><name pos:line="2616" pos:column="9">p<pos:position pos:line="2616" pos:column="10"/></name><operator pos:line="2616" pos:column="10">-&gt;<pos:position pos:line="2616" pos:column="15"/></operator><name pos:line="2616" pos:column="12">iStatement<pos:position pos:line="2616" pos:column="22"/></name></name> <operator pos:line="2616" pos:column="23">=<pos:position pos:line="2616" pos:column="24"/></operator> <name><name pos:line="2616" pos:column="25">db<pos:position pos:line="2616" pos:column="27"/></name><operator pos:line="2616" pos:column="27">-&gt;<pos:position pos:line="2616" pos:column="32"/></operator><name pos:line="2616" pos:column="29">nSavepoint<pos:position pos:line="2616" pos:column="39"/></name></name> <operator pos:line="2616" pos:column="40">+<pos:position pos:line="2616" pos:column="41"/></operator> <name><name pos:line="2616" pos:column="42">db<pos:position pos:line="2616" pos:column="44"/></name><operator pos:line="2616" pos:column="44">-&gt;<pos:position pos:line="2616" pos:column="49"/></operator><name pos:line="2616" pos:column="46">nStatement<pos:position pos:line="2616" pos:column="56"/></name></name></expr>;<pos:position pos:line="2616" pos:column="57"/></expr_stmt>
      }<pos:position pos:line="2617" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="2619" pos:column="7">rc<pos:position pos:line="2619" pos:column="9"/></name> <operator pos:line="2619" pos:column="10">=<pos:position pos:line="2619" pos:column="11"/></operator> <call><name pos:line="2619" pos:column="12">sqlite3VtabSavepoint<pos:position pos:line="2619" pos:column="32"/></name><argument_list pos:line="2619" pos:column="32">(<argument><expr><name pos:line="2619" pos:column="33">db<pos:position pos:line="2619" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="2619" pos:column="37">SAVEPOINT_BEGIN<pos:position pos:line="2619" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="2619" pos:column="54">p<pos:position pos:line="2619" pos:column="55"/></name><operator pos:line="2619" pos:column="55">-&gt;<pos:position pos:line="2619" pos:column="60"/></operator><name pos:line="2619" pos:column="57">iStatement<pos:position pos:line="2619" pos:column="67"/></name></name><operator pos:line="2619" pos:column="67">-<pos:position pos:line="2619" pos:column="68"/></operator><literal type="number" pos:line="2619" pos:column="68">1<pos:position pos:line="2619" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="2619" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="2619" pos:column="71"/></expr_stmt>
      <if pos:line="2620" pos:column="7">if<condition pos:line="2620" pos:column="9">( <expr><name pos:line="2620" pos:column="11">rc<pos:position pos:line="2620" pos:column="13"/></name><operator pos:line="2620" pos:column="13">==<pos:position pos:line="2620" pos:column="15"/></operator><name pos:line="2620" pos:column="15">SQLITE_OK<pos:position pos:line="2620" pos:column="24"/></name></expr> )<pos:position pos:line="2620" pos:column="26"/></condition><then><block pos:line="2620" pos:column="26">{
        <expr_stmt><expr><name pos:line="2621" pos:column="9">rc<pos:position pos:line="2621" pos:column="11"/></name> <operator pos:line="2621" pos:column="12">=<pos:position pos:line="2621" pos:column="13"/></operator> <call><name pos:line="2621" pos:column="14">sqlite3BtreeBeginStmt<pos:position pos:line="2621" pos:column="35"/></name><argument_list pos:line="2621" pos:column="35">(<argument><expr><name pos:line="2621" pos:column="36">pBt<pos:position pos:line="2621" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="2621" pos:column="41">p<pos:position pos:line="2621" pos:column="42"/></name><operator pos:line="2621" pos:column="42">-&gt;<pos:position pos:line="2621" pos:column="47"/></operator><name pos:line="2621" pos:column="44">iStatement<pos:position pos:line="2621" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="2621" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="2621" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="2622" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="2624" pos:column="7">/* Store the current value of the database handles deferred constraint
      ** counter. If the statement transaction needs to be rolled back,
      ** the value of this counter needs to be restored too.  */</comment>
      <expr_stmt><expr><name><name pos:line="2627" pos:column="7">p<pos:position pos:line="2627" pos:column="8"/></name><operator pos:line="2627" pos:column="8">-&gt;<pos:position pos:line="2627" pos:column="13"/></operator><name pos:line="2627" pos:column="10">nStmtDefCons<pos:position pos:line="2627" pos:column="22"/></name></name> <operator pos:line="2627" pos:column="23">=<pos:position pos:line="2627" pos:column="24"/></operator> <name><name pos:line="2627" pos:column="25">db<pos:position pos:line="2627" pos:column="27"/></name><operator pos:line="2627" pos:column="27">-&gt;<pos:position pos:line="2627" pos:column="32"/></operator><name pos:line="2627" pos:column="29">nDeferredCons<pos:position pos:line="2627" pos:column="42"/></name></name></expr>;<pos:position pos:line="2627" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2628" pos:column="7">p<pos:position pos:line="2628" pos:column="8"/></name><operator pos:line="2628" pos:column="8">-&gt;<pos:position pos:line="2628" pos:column="13"/></operator><name pos:line="2628" pos:column="10">nStmtDefImmCons<pos:position pos:line="2628" pos:column="25"/></name></name> <operator pos:line="2628" pos:column="26">=<pos:position pos:line="2628" pos:column="27"/></operator> <name><name pos:line="2628" pos:column="28">db<pos:position pos:line="2628" pos:column="30"/></name><operator pos:line="2628" pos:column="30">-&gt;<pos:position pos:line="2628" pos:column="35"/></operator><name pos:line="2628" pos:column="32">nDeferredImmCons<pos:position pos:line="2628" pos:column="48"/></name></name></expr>;<pos:position pos:line="2628" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="2629" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="2631" pos:column="5">/* Gather the schema version number for checking:
    ** IMPLEMENTATION-OF: R-03189-51135 As each SQL statement runs, the schema
    ** version is checked to ensure that the schema has not changed since the
    ** SQL statement was prepared.
    */</comment>
    <expr_stmt><expr><call><name pos:line="2636" pos:column="5">sqlite3BtreeGetMeta<pos:position pos:line="2636" pos:column="24"/></name><argument_list pos:line="2636" pos:column="24">(<argument><expr><name pos:line="2636" pos:column="25">pBt<pos:position pos:line="2636" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="2636" pos:column="30">BTREE_SCHEMA_VERSION<pos:position pos:line="2636" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="2636" pos:column="52">(<pos:position pos:line="2636" pos:column="53"/></operator><name pos:line="2636" pos:column="53">u32<pos:position pos:line="2636" pos:column="56"/></name> <operator pos:line="2636" pos:column="57">*<pos:position pos:line="2636" pos:column="58"/></operator><operator pos:line="2636" pos:column="58">)<pos:position pos:line="2636" pos:column="59"/></operator><operator pos:line="2636" pos:column="59">&amp;<pos:position pos:line="2636" pos:column="64"/></operator><name pos:line="2636" pos:column="60">iMeta<pos:position pos:line="2636" pos:column="65"/></name></expr></argument>)<pos:position pos:line="2636" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="2636" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2637" pos:column="5">iGen<pos:position pos:line="2637" pos:column="9"/></name> <operator pos:line="2637" pos:column="10">=<pos:position pos:line="2637" pos:column="11"/></operator> <name><name pos:line="2637" pos:column="12">db<pos:position pos:line="2637" pos:column="14"/></name><operator pos:line="2637" pos:column="14">-&gt;<pos:position pos:line="2637" pos:column="19"/></operator><name pos:line="2637" pos:column="16">aDb<pos:position pos:line="2637" pos:column="19"/></name><index pos:line="2637" pos:column="19">[<expr><name><name pos:line="2637" pos:column="20">pOp<pos:position pos:line="2637" pos:column="23"/></name><operator pos:line="2637" pos:column="23">-&gt;<pos:position pos:line="2637" pos:column="28"/></operator><name pos:line="2637" pos:column="25">p1<pos:position pos:line="2637" pos:column="27"/></name></name></expr>]<pos:position pos:line="2637" pos:column="28"/></index></name><operator pos:line="2637" pos:column="28">.<pos:position pos:line="2637" pos:column="29"/></operator><name><name pos:line="2637" pos:column="29">pSchema<pos:position pos:line="2637" pos:column="36"/></name><operator pos:line="2637" pos:column="36">-&gt;<pos:position pos:line="2637" pos:column="41"/></operator><name pos:line="2637" pos:column="38">iGeneration<pos:position pos:line="2637" pos:column="49"/></name></name></expr>;<pos:position pos:line="2637" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="2638" pos:column="4"/></block></then><else pos:line="2638" pos:column="4">else<block pos:line="2638" pos:column="8">{
    <expr_stmt><expr><name pos:line="2639" pos:column="5">iGen<pos:position pos:line="2639" pos:column="9"/></name> <operator pos:line="2639" pos:column="10">=<pos:position pos:line="2639" pos:column="11"/></operator> <name pos:line="2639" pos:column="12">iMeta<pos:position pos:line="2639" pos:column="17"/></name> <operator pos:line="2639" pos:column="18">=<pos:position pos:line="2639" pos:column="19"/></operator> <literal type="number" pos:line="2639" pos:column="20">0<pos:position pos:line="2639" pos:column="21"/></literal></expr>;<pos:position pos:line="2639" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="2640" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="2641" pos:column="3">assert<pos:position pos:line="2641" pos:column="9"/></name><argument_list pos:line="2641" pos:column="9">( <argument><expr><name><name pos:line="2641" pos:column="11">pOp<pos:position pos:line="2641" pos:column="14"/></name><operator pos:line="2641" pos:column="14">-&gt;<pos:position pos:line="2641" pos:column="19"/></operator><name pos:line="2641" pos:column="16">p5<pos:position pos:line="2641" pos:column="18"/></name></name><operator pos:line="2641" pos:column="18">==<pos:position pos:line="2641" pos:column="20"/></operator><literal type="number" pos:line="2641" pos:column="20">0<pos:position pos:line="2641" pos:column="21"/></literal> <operator pos:line="2641" pos:column="22">||<pos:position pos:line="2641" pos:column="24"/></operator> <name><name pos:line="2641" pos:column="25">pOp<pos:position pos:line="2641" pos:column="28"/></name><operator pos:line="2641" pos:column="28">-&gt;<pos:position pos:line="2641" pos:column="33"/></operator><name pos:line="2641" pos:column="30">p4type<pos:position pos:line="2641" pos:column="36"/></name></name><operator pos:line="2641" pos:column="36">==<pos:position pos:line="2641" pos:column="38"/></operator><name pos:line="2641" pos:column="38">P4_INT32<pos:position pos:line="2641" pos:column="46"/></name></expr></argument> )<pos:position pos:line="2641" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="2641" pos:column="49"/></expr_stmt>
  <if pos:line="2642" pos:column="3">if<condition pos:line="2642" pos:column="5">( <expr><name><name pos:line="2642" pos:column="7">pOp<pos:position pos:line="2642" pos:column="10"/></name><operator pos:line="2642" pos:column="10">-&gt;<pos:position pos:line="2642" pos:column="15"/></operator><name pos:line="2642" pos:column="12">p5<pos:position pos:line="2642" pos:column="14"/></name></name> <operator pos:line="2642" pos:column="15">&amp;&amp;<pos:position pos:line="2642" pos:column="25"/></operator> <operator pos:line="2642" pos:column="18">(<pos:position pos:line="2642" pos:column="19"/></operator><name pos:line="2642" pos:column="19">iMeta<pos:position pos:line="2642" pos:column="24"/></name><operator pos:line="2642" pos:column="24">!=<pos:position pos:line="2642" pos:column="26"/></operator><name><name pos:line="2642" pos:column="26">pOp<pos:position pos:line="2642" pos:column="29"/></name><operator pos:line="2642" pos:column="29">-&gt;<pos:position pos:line="2642" pos:column="34"/></operator><name pos:line="2642" pos:column="31">p3<pos:position pos:line="2642" pos:column="33"/></name></name> <operator pos:line="2642" pos:column="34">||<pos:position pos:line="2642" pos:column="36"/></operator> <name pos:line="2642" pos:column="37">iGen<pos:position pos:line="2642" pos:column="41"/></name><operator pos:line="2642" pos:column="41">!=<pos:position pos:line="2642" pos:column="43"/></operator><name><name pos:line="2642" pos:column="43">pOp<pos:position pos:line="2642" pos:column="46"/></name><operator pos:line="2642" pos:column="46">-&gt;<pos:position pos:line="2642" pos:column="51"/></operator><name pos:line="2642" pos:column="48">p4<pos:position pos:line="2642" pos:column="50"/></name><operator pos:line="2642" pos:column="50">.<pos:position pos:line="2642" pos:column="51"/></operator><name pos:line="2642" pos:column="51">i<pos:position pos:line="2642" pos:column="52"/></name></name><operator pos:line="2642" pos:column="52">)<pos:position pos:line="2642" pos:column="53"/></operator></expr> )<pos:position pos:line="2642" pos:column="55"/></condition><then><block pos:line="2642" pos:column="55">{
    <expr_stmt><expr><call><name pos:line="2643" pos:column="5">sqlite3DbFree<pos:position pos:line="2643" pos:column="18"/></name><argument_list pos:line="2643" pos:column="18">(<argument><expr><name pos:line="2643" pos:column="19">db<pos:position pos:line="2643" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="2643" pos:column="23">p<pos:position pos:line="2643" pos:column="24"/></name><operator pos:line="2643" pos:column="24">-&gt;<pos:position pos:line="2643" pos:column="29"/></operator><name pos:line="2643" pos:column="26">zErrMsg<pos:position pos:line="2643" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="2643" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2643" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2644" pos:column="5">p<pos:position pos:line="2644" pos:column="6"/></name><operator pos:line="2644" pos:column="6">-&gt;<pos:position pos:line="2644" pos:column="11"/></operator><name pos:line="2644" pos:column="8">zErrMsg<pos:position pos:line="2644" pos:column="15"/></name></name> <operator pos:line="2644" pos:column="16">=<pos:position pos:line="2644" pos:column="17"/></operator> <call><name pos:line="2644" pos:column="18">sqlite3DbStrDup<pos:position pos:line="2644" pos:column="33"/></name><argument_list pos:line="2644" pos:column="33">(<argument><expr><name pos:line="2644" pos:column="34">db<pos:position pos:line="2644" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2644" pos:column="38">"database schema has changed"<pos:position pos:line="2644" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="2644" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="2644" pos:column="69"/></expr_stmt>
    <comment type="block" pos:line="2645" pos:column="5">/* If the schema-cookie from the database file matches the cookie 
    ** stored with the in-memory representation of the schema, do
    ** not reload the schema from the database file.
    **
    ** If virtual-tables are in use, this is not just an optimization.
    ** Often, v-tables store their data in other SQLite tables, which
    ** are queried from within xNext() and other v-table methods using
    ** prepared queries. If such a query is out-of-date, we do not want to
    ** discard the database schema, as the user code implementing the
    ** v-table would have to be ready for the sqlite3_vtab structure itself
    ** to be invalidated whenever sqlite3_step() is called from within 
    ** a v-table method.
    */</comment>
    <if pos:line="2658" pos:column="5">if<condition pos:line="2658" pos:column="7">( <expr><name><name pos:line="2658" pos:column="9">db<pos:position pos:line="2658" pos:column="11"/></name><operator pos:line="2658" pos:column="11">-&gt;<pos:position pos:line="2658" pos:column="16"/></operator><name pos:line="2658" pos:column="13">aDb<pos:position pos:line="2658" pos:column="16"/></name><index pos:line="2658" pos:column="16">[<expr><name><name pos:line="2658" pos:column="17">pOp<pos:position pos:line="2658" pos:column="20"/></name><operator pos:line="2658" pos:column="20">-&gt;<pos:position pos:line="2658" pos:column="25"/></operator><name pos:line="2658" pos:column="22">p1<pos:position pos:line="2658" pos:column="24"/></name></name></expr>]<pos:position pos:line="2658" pos:column="25"/></index></name><operator pos:line="2658" pos:column="25">.<pos:position pos:line="2658" pos:column="26"/></operator><name><name pos:line="2658" pos:column="26">pSchema<pos:position pos:line="2658" pos:column="33"/></name><operator pos:line="2658" pos:column="33">-&gt;<pos:position pos:line="2658" pos:column="38"/></operator><name pos:line="2658" pos:column="35">schema_cookie<pos:position pos:line="2658" pos:column="48"/></name></name><operator pos:line="2658" pos:column="48">!=<pos:position pos:line="2658" pos:column="50"/></operator><name pos:line="2658" pos:column="50">iMeta<pos:position pos:line="2658" pos:column="55"/></name></expr> )<pos:position pos:line="2658" pos:column="57"/></condition><then><block pos:line="2658" pos:column="57">{
      <expr_stmt><expr><call><name pos:line="2659" pos:column="7">sqlite3ResetOneSchema<pos:position pos:line="2659" pos:column="28"/></name><argument_list pos:line="2659" pos:column="28">(<argument><expr><name pos:line="2659" pos:column="29">db<pos:position pos:line="2659" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="2659" pos:column="33">pOp<pos:position pos:line="2659" pos:column="36"/></name><operator pos:line="2659" pos:column="36">-&gt;<pos:position pos:line="2659" pos:column="41"/></operator><name pos:line="2659" pos:column="38">p1<pos:position pos:line="2659" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="2659" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2659" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="2660" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="2661" pos:column="5">p<pos:position pos:line="2661" pos:column="6"/></name><operator pos:line="2661" pos:column="6">-&gt;<pos:position pos:line="2661" pos:column="11"/></operator><name pos:line="2661" pos:column="8">expired<pos:position pos:line="2661" pos:column="15"/></name></name> <operator pos:line="2661" pos:column="16">=<pos:position pos:line="2661" pos:column="17"/></operator> <literal type="number" pos:line="2661" pos:column="18">1<pos:position pos:line="2661" pos:column="19"/></literal></expr>;<pos:position pos:line="2661" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2662" pos:column="5">rc<pos:position pos:line="2662" pos:column="7"/></name> <operator pos:line="2662" pos:column="8">=<pos:position pos:line="2662" pos:column="9"/></operator> <name pos:line="2662" pos:column="10">SQLITE_SCHEMA<pos:position pos:line="2662" pos:column="23"/></name></expr>;<pos:position pos:line="2662" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="2663" pos:column="4"/></block></then></if>
  <if pos:line="2664" pos:column="3">if<condition pos:line="2664" pos:column="5">( <expr><name pos:line="2664" pos:column="7">rc<pos:position pos:line="2664" pos:column="9"/></name></expr> )<pos:position pos:line="2664" pos:column="11"/></condition><then pos:line="2664" pos:column="11"> <block type="pseudo"><goto pos:line="2664" pos:column="12">goto <name pos:line="2664" pos:column="17">abort_due_to_error<pos:position pos:line="2664" pos:column="35"/></name>;<pos:position pos:line="2664" pos:column="36"/></goto></block></then></if>
  <break pos:line="2665" pos:column="3">break;<pos:position pos:line="2665" pos:column="9"/></break>
}<pos:position pos:line="2666" pos:column="2"/></block>

<comment type="block" pos:line="2668" pos:column="1">/* Opcode: ReadCookie P1 P2 P3 * *
**
** Read cookie number P3 from database P1 and write it into register P2.
** P3==1 is the schema version.  P3==2 is the database format.
** P3==3 is the recommended pager cache size, and so forth.  P1==0 is
** the main database file and P1==1 is the database file used to store
** temporary tables.
**
** There must be a read-lock on the database (either a transaction
** must be started or there must be an open cursor) before
** executing this instruction.
*/</comment>
<case pos:line="2680" pos:column="1">case <expr><name pos:line="2680" pos:column="6">OP_ReadCookie<pos:position pos:line="2680" pos:column="19"/></name></expr>:<pos:position pos:line="2680" pos:column="20"/></case> <block pos:line="2680" pos:column="21">{               <comment type="block" pos:line="2680" pos:column="37">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="2681" pos:column="3">int<pos:position pos:line="2681" pos:column="6"/></name></type> <name pos:line="2681" pos:column="7">iMeta<pos:position pos:line="2681" pos:column="12"/></name></decl>;<pos:position pos:line="2681" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2682" pos:column="3">int<pos:position pos:line="2682" pos:column="6"/></name></type> <name pos:line="2682" pos:column="7">iDb<pos:position pos:line="2682" pos:column="10"/></name></decl>;<pos:position pos:line="2682" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2683" pos:column="3">int<pos:position pos:line="2683" pos:column="6"/></name></type> <name pos:line="2683" pos:column="7">iCookie<pos:position pos:line="2683" pos:column="14"/></name></decl>;<pos:position pos:line="2683" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="2685" pos:column="3">assert<pos:position pos:line="2685" pos:column="9"/></name><argument_list pos:line="2685" pos:column="9">( <argument><expr><name><name pos:line="2685" pos:column="11">p<pos:position pos:line="2685" pos:column="12"/></name><operator pos:line="2685" pos:column="12">-&gt;<pos:position pos:line="2685" pos:column="17"/></operator><name pos:line="2685" pos:column="14">bIsReader<pos:position pos:line="2685" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="2685" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="2685" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2686" pos:column="3">iDb<pos:position pos:line="2686" pos:column="6"/></name> <operator pos:line="2686" pos:column="7">=<pos:position pos:line="2686" pos:column="8"/></operator> <name><name pos:line="2686" pos:column="9">pOp<pos:position pos:line="2686" pos:column="12"/></name><operator pos:line="2686" pos:column="12">-&gt;<pos:position pos:line="2686" pos:column="17"/></operator><name pos:line="2686" pos:column="14">p1<pos:position pos:line="2686" pos:column="16"/></name></name></expr>;<pos:position pos:line="2686" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2687" pos:column="3">iCookie<pos:position pos:line="2687" pos:column="10"/></name> <operator pos:line="2687" pos:column="11">=<pos:position pos:line="2687" pos:column="12"/></operator> <name><name pos:line="2687" pos:column="13">pOp<pos:position pos:line="2687" pos:column="16"/></name><operator pos:line="2687" pos:column="16">-&gt;<pos:position pos:line="2687" pos:column="21"/></operator><name pos:line="2687" pos:column="18">p3<pos:position pos:line="2687" pos:column="20"/></name></name></expr>;<pos:position pos:line="2687" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2688" pos:column="3">assert<pos:position pos:line="2688" pos:column="9"/></name><argument_list pos:line="2688" pos:column="9">( <argument><expr><name><name pos:line="2688" pos:column="11">pOp<pos:position pos:line="2688" pos:column="14"/></name><operator pos:line="2688" pos:column="14">-&gt;<pos:position pos:line="2688" pos:column="19"/></operator><name pos:line="2688" pos:column="16">p3<pos:position pos:line="2688" pos:column="18"/></name></name><operator pos:line="2688" pos:column="18">&lt;<pos:position pos:line="2688" pos:column="22"/></operator><name pos:line="2688" pos:column="19">SQLITE_N_BTREE_META<pos:position pos:line="2688" pos:column="38"/></name></expr></argument> )<pos:position pos:line="2688" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2688" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2689" pos:column="3">assert<pos:position pos:line="2689" pos:column="9"/></name><argument_list pos:line="2689" pos:column="9">( <argument><expr><name pos:line="2689" pos:column="11">iDb<pos:position pos:line="2689" pos:column="14"/></name><operator pos:line="2689" pos:column="14">&gt;=<pos:position pos:line="2689" pos:column="19"/></operator><literal type="number" pos:line="2689" pos:column="16">0<pos:position pos:line="2689" pos:column="17"/></literal> <operator pos:line="2689" pos:column="18">&amp;&amp;<pos:position pos:line="2689" pos:column="28"/></operator> <name pos:line="2689" pos:column="21">iDb<pos:position pos:line="2689" pos:column="24"/></name><operator pos:line="2689" pos:column="24">&lt;<pos:position pos:line="2689" pos:column="28"/></operator><name><name pos:line="2689" pos:column="25">db<pos:position pos:line="2689" pos:column="27"/></name><operator pos:line="2689" pos:column="27">-&gt;<pos:position pos:line="2689" pos:column="32"/></operator><name pos:line="2689" pos:column="29">nDb<pos:position pos:line="2689" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="2689" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2689" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2690" pos:column="3">assert<pos:position pos:line="2690" pos:column="9"/></name><argument_list pos:line="2690" pos:column="9">( <argument><expr><name><name pos:line="2690" pos:column="11">db<pos:position pos:line="2690" pos:column="13"/></name><operator pos:line="2690" pos:column="13">-&gt;<pos:position pos:line="2690" pos:column="18"/></operator><name pos:line="2690" pos:column="15">aDb<pos:position pos:line="2690" pos:column="18"/></name><index pos:line="2690" pos:column="18">[<expr><name pos:line="2690" pos:column="19">iDb<pos:position pos:line="2690" pos:column="22"/></name></expr>]<pos:position pos:line="2690" pos:column="23"/></index></name><operator pos:line="2690" pos:column="23">.<pos:position pos:line="2690" pos:column="24"/></operator><name pos:line="2690" pos:column="24">pBt<pos:position pos:line="2690" pos:column="27"/></name><operator pos:line="2690" pos:column="27">!=<pos:position pos:line="2690" pos:column="29"/></operator><literal type="number" pos:line="2690" pos:column="29">0<pos:position pos:line="2690" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="2690" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2690" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2691" pos:column="3">assert<pos:position pos:line="2691" pos:column="9"/></name><argument_list pos:line="2691" pos:column="9">( <argument><expr><call><name pos:line="2691" pos:column="11">DbMaskTest<pos:position pos:line="2691" pos:column="21"/></name><argument_list pos:line="2691" pos:column="21">(<argument><expr><name><name pos:line="2691" pos:column="22">p<pos:position pos:line="2691" pos:column="23"/></name><operator pos:line="2691" pos:column="23">-&gt;<pos:position pos:line="2691" pos:column="28"/></operator><name pos:line="2691" pos:column="25">btreeMask<pos:position pos:line="2691" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="2691" pos:column="36">iDb<pos:position pos:line="2691" pos:column="39"/></name></expr></argument>)<pos:position pos:line="2691" pos:column="40"/></argument_list></call></expr></argument> )<pos:position pos:line="2691" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="2691" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="2693" pos:column="3">sqlite3BtreeGetMeta<pos:position pos:line="2693" pos:column="22"/></name><argument_list pos:line="2693" pos:column="22">(<argument><expr><name><name pos:line="2693" pos:column="23">db<pos:position pos:line="2693" pos:column="25"/></name><operator pos:line="2693" pos:column="25">-&gt;<pos:position pos:line="2693" pos:column="30"/></operator><name pos:line="2693" pos:column="27">aDb<pos:position pos:line="2693" pos:column="30"/></name><index pos:line="2693" pos:column="30">[<expr><name pos:line="2693" pos:column="31">iDb<pos:position pos:line="2693" pos:column="34"/></name></expr>]<pos:position pos:line="2693" pos:column="35"/></index></name><operator pos:line="2693" pos:column="35">.<pos:position pos:line="2693" pos:column="36"/></operator><name pos:line="2693" pos:column="36">pBt<pos:position pos:line="2693" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="2693" pos:column="41">iCookie<pos:position pos:line="2693" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="2693" pos:column="50">(<pos:position pos:line="2693" pos:column="51"/></operator><name pos:line="2693" pos:column="51">u32<pos:position pos:line="2693" pos:column="54"/></name> <operator pos:line="2693" pos:column="55">*<pos:position pos:line="2693" pos:column="56"/></operator><operator pos:line="2693" pos:column="56">)<pos:position pos:line="2693" pos:column="57"/></operator><operator pos:line="2693" pos:column="57">&amp;<pos:position pos:line="2693" pos:column="62"/></operator><name pos:line="2693" pos:column="58">iMeta<pos:position pos:line="2693" pos:column="63"/></name></expr></argument>)<pos:position pos:line="2693" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="2693" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2694" pos:column="3">pOut<pos:position pos:line="2694" pos:column="7"/></name> <operator pos:line="2694" pos:column="8">=<pos:position pos:line="2694" pos:column="9"/></operator> <call><name pos:line="2694" pos:column="10">out2Prerelease<pos:position pos:line="2694" pos:column="24"/></name><argument_list pos:line="2694" pos:column="24">(<argument><expr><name pos:line="2694" pos:column="25">p<pos:position pos:line="2694" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="2694" pos:column="28">pOp<pos:position pos:line="2694" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2694" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2694" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2695" pos:column="3">pOut<pos:position pos:line="2695" pos:column="7"/></name><operator pos:line="2695" pos:column="7">-&gt;<pos:position pos:line="2695" pos:column="12"/></operator><name pos:line="2695" pos:column="9">u<pos:position pos:line="2695" pos:column="10"/></name><operator pos:line="2695" pos:column="10">.<pos:position pos:line="2695" pos:column="11"/></operator><name pos:line="2695" pos:column="11">i<pos:position pos:line="2695" pos:column="12"/></name></name> <operator pos:line="2695" pos:column="13">=<pos:position pos:line="2695" pos:column="14"/></operator> <name pos:line="2695" pos:column="15">iMeta<pos:position pos:line="2695" pos:column="20"/></name></expr>;<pos:position pos:line="2695" pos:column="21"/></expr_stmt>
  <break pos:line="2696" pos:column="3">break;<pos:position pos:line="2696" pos:column="9"/></break>
}<pos:position pos:line="2697" pos:column="2"/></block>

<comment type="block" pos:line="2699" pos:column="1">/* Opcode: SetCookie P1 P2 P3 * *
**
** Write the integer value P3 into cookie number P2 of database P1.
** P2==1 is the schema version.  P2==2 is the database format.
** P2==3 is the recommended pager cache 
** size, and so forth.  P1==0 is the main database file and P1==1 is the 
** database file used to store temporary tables.
**
** A transaction must be started before executing this opcode.
*/</comment>
<case pos:line="2709" pos:column="1">case <expr><name pos:line="2709" pos:column="6">OP_SetCookie<pos:position pos:line="2709" pos:column="18"/></name></expr>:<pos:position pos:line="2709" pos:column="19"/></case> <block pos:line="2709" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="2710" pos:column="3">Db<pos:position pos:line="2710" pos:column="5"/></name> <modifier pos:line="2710" pos:column="6">*<pos:position pos:line="2710" pos:column="7"/></modifier></type><name pos:line="2710" pos:column="7">pDb<pos:position pos:line="2710" pos:column="10"/></name></decl>;<pos:position pos:line="2710" pos:column="11"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="2711" pos:column="3">assert<pos:position pos:line="2711" pos:column="9"/></name><argument_list pos:line="2711" pos:column="9">( <argument><expr><name><name pos:line="2711" pos:column="11">pOp<pos:position pos:line="2711" pos:column="14"/></name><operator pos:line="2711" pos:column="14">-&gt;<pos:position pos:line="2711" pos:column="19"/></operator><name pos:line="2711" pos:column="16">p2<pos:position pos:line="2711" pos:column="18"/></name></name><operator pos:line="2711" pos:column="18">&lt;<pos:position pos:line="2711" pos:column="22"/></operator><name pos:line="2711" pos:column="19">SQLITE_N_BTREE_META<pos:position pos:line="2711" pos:column="38"/></name></expr></argument> )<pos:position pos:line="2711" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2711" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2712" pos:column="3">assert<pos:position pos:line="2712" pos:column="9"/></name><argument_list pos:line="2712" pos:column="9">( <argument><expr><name><name pos:line="2712" pos:column="11">pOp<pos:position pos:line="2712" pos:column="14"/></name><operator pos:line="2712" pos:column="14">-&gt;<pos:position pos:line="2712" pos:column="19"/></operator><name pos:line="2712" pos:column="16">p1<pos:position pos:line="2712" pos:column="18"/></name></name><operator pos:line="2712" pos:column="18">&gt;=<pos:position pos:line="2712" pos:column="23"/></operator><literal type="number" pos:line="2712" pos:column="20">0<pos:position pos:line="2712" pos:column="21"/></literal> <operator pos:line="2712" pos:column="22">&amp;&amp;<pos:position pos:line="2712" pos:column="32"/></operator> <name><name pos:line="2712" pos:column="25">pOp<pos:position pos:line="2712" pos:column="28"/></name><operator pos:line="2712" pos:column="28">-&gt;<pos:position pos:line="2712" pos:column="33"/></operator><name pos:line="2712" pos:column="30">p1<pos:position pos:line="2712" pos:column="32"/></name></name><operator pos:line="2712" pos:column="32">&lt;<pos:position pos:line="2712" pos:column="36"/></operator><name><name pos:line="2712" pos:column="33">db<pos:position pos:line="2712" pos:column="35"/></name><operator pos:line="2712" pos:column="35">-&gt;<pos:position pos:line="2712" pos:column="40"/></operator><name pos:line="2712" pos:column="37">nDb<pos:position pos:line="2712" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="2712" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="2712" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2713" pos:column="3">assert<pos:position pos:line="2713" pos:column="9"/></name><argument_list pos:line="2713" pos:column="9">( <argument><expr><call><name pos:line="2713" pos:column="11">DbMaskTest<pos:position pos:line="2713" pos:column="21"/></name><argument_list pos:line="2713" pos:column="21">(<argument><expr><name><name pos:line="2713" pos:column="22">p<pos:position pos:line="2713" pos:column="23"/></name><operator pos:line="2713" pos:column="23">-&gt;<pos:position pos:line="2713" pos:column="28"/></operator><name pos:line="2713" pos:column="25">btreeMask<pos:position pos:line="2713" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2713" pos:column="36">pOp<pos:position pos:line="2713" pos:column="39"/></name><operator pos:line="2713" pos:column="39">-&gt;<pos:position pos:line="2713" pos:column="44"/></operator><name pos:line="2713" pos:column="41">p1<pos:position pos:line="2713" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="2713" pos:column="44"/></argument_list></call></expr></argument> )<pos:position pos:line="2713" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2713" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2714" pos:column="3">assert<pos:position pos:line="2714" pos:column="9"/></name><argument_list pos:line="2714" pos:column="9">( <argument><expr><name><name pos:line="2714" pos:column="11">p<pos:position pos:line="2714" pos:column="12"/></name><operator pos:line="2714" pos:column="12">-&gt;<pos:position pos:line="2714" pos:column="17"/></operator><name pos:line="2714" pos:column="14">readOnly<pos:position pos:line="2714" pos:column="22"/></name></name><operator pos:line="2714" pos:column="22">==<pos:position pos:line="2714" pos:column="24"/></operator><literal type="number" pos:line="2714" pos:column="24">0<pos:position pos:line="2714" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="2714" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="2714" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2715" pos:column="3">pDb<pos:position pos:line="2715" pos:column="6"/></name> <operator pos:line="2715" pos:column="7">=<pos:position pos:line="2715" pos:column="8"/></operator> <operator pos:line="2715" pos:column="9">&amp;<pos:position pos:line="2715" pos:column="14"/></operator><name><name pos:line="2715" pos:column="10">db<pos:position pos:line="2715" pos:column="12"/></name><operator pos:line="2715" pos:column="12">-&gt;<pos:position pos:line="2715" pos:column="17"/></operator><name pos:line="2715" pos:column="14">aDb<pos:position pos:line="2715" pos:column="17"/></name><index pos:line="2715" pos:column="17">[<expr><name><name pos:line="2715" pos:column="18">pOp<pos:position pos:line="2715" pos:column="21"/></name><operator pos:line="2715" pos:column="21">-&gt;<pos:position pos:line="2715" pos:column="26"/></operator><name pos:line="2715" pos:column="23">p1<pos:position pos:line="2715" pos:column="25"/></name></name></expr>]<pos:position pos:line="2715" pos:column="26"/></index></name></expr>;<pos:position pos:line="2715" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2716" pos:column="3">assert<pos:position pos:line="2716" pos:column="9"/></name><argument_list pos:line="2716" pos:column="9">( <argument><expr><name><name pos:line="2716" pos:column="11">pDb<pos:position pos:line="2716" pos:column="14"/></name><operator pos:line="2716" pos:column="14">-&gt;<pos:position pos:line="2716" pos:column="19"/></operator><name pos:line="2716" pos:column="16">pBt<pos:position pos:line="2716" pos:column="19"/></name></name><operator pos:line="2716" pos:column="19">!=<pos:position pos:line="2716" pos:column="21"/></operator><literal type="number" pos:line="2716" pos:column="21">0<pos:position pos:line="2716" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="2716" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="2716" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2717" pos:column="3">assert<pos:position pos:line="2717" pos:column="9"/></name><argument_list pos:line="2717" pos:column="9">( <argument><expr><call><name pos:line="2717" pos:column="11">sqlite3SchemaMutexHeld<pos:position pos:line="2717" pos:column="33"/></name><argument_list pos:line="2717" pos:column="33">(<argument><expr><name pos:line="2717" pos:column="34">db<pos:position pos:line="2717" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="2717" pos:column="38">pOp<pos:position pos:line="2717" pos:column="41"/></name><operator pos:line="2717" pos:column="41">-&gt;<pos:position pos:line="2717" pos:column="46"/></operator><name pos:line="2717" pos:column="43">p1<pos:position pos:line="2717" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="2717" pos:column="47">0<pos:position pos:line="2717" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="2717" pos:column="49"/></argument_list></call></expr></argument> )<pos:position pos:line="2717" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="2717" pos:column="52"/></expr_stmt>
  <comment type="block" pos:line="2718" pos:column="3">/* See note about index shifting on OP_ReadCookie */</comment>
  <expr_stmt><expr><name pos:line="2719" pos:column="3">rc<pos:position pos:line="2719" pos:column="5"/></name> <operator pos:line="2719" pos:column="6">=<pos:position pos:line="2719" pos:column="7"/></operator> <call><name pos:line="2719" pos:column="8">sqlite3BtreeUpdateMeta<pos:position pos:line="2719" pos:column="30"/></name><argument_list pos:line="2719" pos:column="30">(<argument><expr><name><name pos:line="2719" pos:column="31">pDb<pos:position pos:line="2719" pos:column="34"/></name><operator pos:line="2719" pos:column="34">-&gt;<pos:position pos:line="2719" pos:column="39"/></operator><name pos:line="2719" pos:column="36">pBt<pos:position pos:line="2719" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2719" pos:column="41">pOp<pos:position pos:line="2719" pos:column="44"/></name><operator pos:line="2719" pos:column="44">-&gt;<pos:position pos:line="2719" pos:column="49"/></operator><name pos:line="2719" pos:column="46">p2<pos:position pos:line="2719" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2719" pos:column="50">pOp<pos:position pos:line="2719" pos:column="53"/></name><operator pos:line="2719" pos:column="53">-&gt;<pos:position pos:line="2719" pos:column="58"/></operator><name pos:line="2719" pos:column="55">p3<pos:position pos:line="2719" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="2719" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="2719" pos:column="59"/></expr_stmt>
  <if pos:line="2720" pos:column="3">if<condition pos:line="2720" pos:column="5">( <expr><name><name pos:line="2720" pos:column="7">pOp<pos:position pos:line="2720" pos:column="10"/></name><operator pos:line="2720" pos:column="10">-&gt;<pos:position pos:line="2720" pos:column="15"/></operator><name pos:line="2720" pos:column="12">p2<pos:position pos:line="2720" pos:column="14"/></name></name><operator pos:line="2720" pos:column="14">==<pos:position pos:line="2720" pos:column="16"/></operator><name pos:line="2720" pos:column="16">BTREE_SCHEMA_VERSION<pos:position pos:line="2720" pos:column="36"/></name></expr> )<pos:position pos:line="2720" pos:column="38"/></condition><then><block pos:line="2720" pos:column="38">{
    <comment type="block" pos:line="2721" pos:column="5">/* When the schema cookie changes, record the new cookie internally */</comment>
    <expr_stmt><expr><name><name pos:line="2722" pos:column="5">pDb<pos:position pos:line="2722" pos:column="8"/></name><operator pos:line="2722" pos:column="8">-&gt;<pos:position pos:line="2722" pos:column="13"/></operator><name pos:line="2722" pos:column="10">pSchema<pos:position pos:line="2722" pos:column="17"/></name><operator pos:line="2722" pos:column="17">-&gt;<pos:position pos:line="2722" pos:column="22"/></operator><name pos:line="2722" pos:column="19">schema_cookie<pos:position pos:line="2722" pos:column="32"/></name></name> <operator pos:line="2722" pos:column="33">=<pos:position pos:line="2722" pos:column="34"/></operator> <name><name pos:line="2722" pos:column="35">pOp<pos:position pos:line="2722" pos:column="38"/></name><operator pos:line="2722" pos:column="38">-&gt;<pos:position pos:line="2722" pos:column="43"/></operator><name pos:line="2722" pos:column="40">p3<pos:position pos:line="2722" pos:column="42"/></name></name></expr>;<pos:position pos:line="2722" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2723" pos:column="5">db<pos:position pos:line="2723" pos:column="7"/></name><operator pos:line="2723" pos:column="7">-&gt;<pos:position pos:line="2723" pos:column="12"/></operator><name pos:line="2723" pos:column="9">mDbFlags<pos:position pos:line="2723" pos:column="17"/></name></name> <operator pos:line="2723" pos:column="18">|=<pos:position pos:line="2723" pos:column="20"/></operator> <name pos:line="2723" pos:column="21">DBFLAG_SchemaChange<pos:position pos:line="2723" pos:column="40"/></name></expr>;<pos:position pos:line="2723" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="2724" pos:column="4"/></block></then><elseif pos:line="2724" pos:column="4">else <if pos:line="2724" pos:column="9">if<condition pos:line="2724" pos:column="11">( <expr><name><name pos:line="2724" pos:column="13">pOp<pos:position pos:line="2724" pos:column="16"/></name><operator pos:line="2724" pos:column="16">-&gt;<pos:position pos:line="2724" pos:column="21"/></operator><name pos:line="2724" pos:column="18">p2<pos:position pos:line="2724" pos:column="20"/></name></name><operator pos:line="2724" pos:column="20">==<pos:position pos:line="2724" pos:column="22"/></operator><name pos:line="2724" pos:column="22">BTREE_FILE_FORMAT<pos:position pos:line="2724" pos:column="39"/></name></expr> )<pos:position pos:line="2724" pos:column="41"/></condition><then><block pos:line="2724" pos:column="41">{
    <comment type="block" pos:line="2725" pos:column="5">/* Record changes in the file format */</comment>
    <expr_stmt><expr><name><name pos:line="2726" pos:column="5">pDb<pos:position pos:line="2726" pos:column="8"/></name><operator pos:line="2726" pos:column="8">-&gt;<pos:position pos:line="2726" pos:column="13"/></operator><name pos:line="2726" pos:column="10">pSchema<pos:position pos:line="2726" pos:column="17"/></name><operator pos:line="2726" pos:column="17">-&gt;<pos:position pos:line="2726" pos:column="22"/></operator><name pos:line="2726" pos:column="19">file_format<pos:position pos:line="2726" pos:column="30"/></name></name> <operator pos:line="2726" pos:column="31">=<pos:position pos:line="2726" pos:column="32"/></operator> <name><name pos:line="2726" pos:column="33">pOp<pos:position pos:line="2726" pos:column="36"/></name><operator pos:line="2726" pos:column="36">-&gt;<pos:position pos:line="2726" pos:column="41"/></operator><name pos:line="2726" pos:column="38">p3<pos:position pos:line="2726" pos:column="40"/></name></name></expr>;<pos:position pos:line="2726" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="2727" pos:column="4"/></block></then></if></elseif></if>
  <if pos:line="2728" pos:column="3">if<condition pos:line="2728" pos:column="5">( <expr><name><name pos:line="2728" pos:column="7">pOp<pos:position pos:line="2728" pos:column="10"/></name><operator pos:line="2728" pos:column="10">-&gt;<pos:position pos:line="2728" pos:column="15"/></operator><name pos:line="2728" pos:column="12">p1<pos:position pos:line="2728" pos:column="14"/></name></name><operator pos:line="2728" pos:column="14">==<pos:position pos:line="2728" pos:column="16"/></operator><literal type="number" pos:line="2728" pos:column="16">1<pos:position pos:line="2728" pos:column="17"/></literal></expr> )<pos:position pos:line="2728" pos:column="19"/></condition><then><block pos:line="2728" pos:column="19">{
    <comment type="block" pos:line="2729" pos:column="5">/* Invalidate all prepared statements whenever the TEMP database
    ** schema is changed.  Ticket #1644 */</comment>
    <expr_stmt><expr><call><name pos:line="2731" pos:column="5">sqlite3ExpirePreparedStatements<pos:position pos:line="2731" pos:column="36"/></name><argument_list pos:line="2731" pos:column="36">(<argument><expr><name pos:line="2731" pos:column="37">db<pos:position pos:line="2731" pos:column="39"/></name></expr></argument>)<pos:position pos:line="2731" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2731" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2732" pos:column="5">p<pos:position pos:line="2732" pos:column="6"/></name><operator pos:line="2732" pos:column="6">-&gt;<pos:position pos:line="2732" pos:column="11"/></operator><name pos:line="2732" pos:column="8">expired<pos:position pos:line="2732" pos:column="15"/></name></name> <operator pos:line="2732" pos:column="16">=<pos:position pos:line="2732" pos:column="17"/></operator> <literal type="number" pos:line="2732" pos:column="18">0<pos:position pos:line="2732" pos:column="19"/></literal></expr>;<pos:position pos:line="2732" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="2733" pos:column="4"/></block></then></if>
  <if pos:line="2734" pos:column="3">if<condition pos:line="2734" pos:column="5">( <expr><name pos:line="2734" pos:column="7">rc<pos:position pos:line="2734" pos:column="9"/></name></expr> )<pos:position pos:line="2734" pos:column="11"/></condition><then pos:line="2734" pos:column="11"> <block type="pseudo"><goto pos:line="2734" pos:column="12">goto <name pos:line="2734" pos:column="17">abort_due_to_error<pos:position pos:line="2734" pos:column="35"/></name>;<pos:position pos:line="2734" pos:column="36"/></goto></block></then></if>
  <break pos:line="2735" pos:column="3">break;<pos:position pos:line="2735" pos:column="9"/></break>
}<pos:position pos:line="2736" pos:column="2"/></block>

<comment type="block" pos:line="2738" pos:column="1">/* Opcode: OpenRead P1 P2 P3 P4 P5
** Synopsis: root=P2 iDb=P3
**
** Open a read-only cursor for the database table whose root page is
** P2 in a database file.  The database file is determined by P3. 
** P3==0 means the main database, P3==1 means the database used for 
** temporary tables, and P3&gt;1 means used the corresponding attached
** database.  Give the new cursor an identifier of P1.  The P1
** values need not be contiguous but all P1 values should be small integers.
** It is an error for P1 to be negative.
**
** If P5!=0 then use the content of register P2 as the root page, not
** the value of P2 itself.
**
** There will be a read lock on the database whenever there is an
** open cursor.  If the database was unlocked prior to this instruction
** then a read lock is acquired as part of this instruction.  A read
** lock allows other processes to read the database but prohibits
** any other process from modifying the database.  The read lock is
** released when all cursors are closed.  If this instruction attempts
** to get a read lock but fails, the script terminates with an
** SQLITE_BUSY error code.
**
** The P4 value may be either an integer (P4_INT32) or a pointer to
** a KeyInfo structure (P4_KEYINFO). If it is a pointer to a KeyInfo 
** structure, then said structure defines the content and collating 
** sequence of the index being opened. Otherwise, if P4 is an integer 
** value, it is set to the number of columns in the table.
**
** See also: OpenWrite, ReopenIdx
*/</comment>
<comment type="block" pos:line="2769" pos:column="1">/* Opcode: ReopenIdx P1 P2 P3 P4 P5
** Synopsis: root=P2 iDb=P3
**
** The ReopenIdx opcode works exactly like ReadOpen except that it first
** checks to see if the cursor on P1 is already open with a root page
** number of P2 and if it is this opcode becomes a no-op.  In other words,
** if the cursor is already open, do not reopen it.
**
** The ReopenIdx opcode may only be used with P5==0 and with P4 being
** a P4_KEYINFO object.  Furthermore, the P3 value must be the same as
** every other ReopenIdx or OpenRead for the same cursor number.
**
** See the OpenRead opcode documentation for additional information.
*/</comment>
<comment type="block" pos:line="2783" pos:column="1">/* Opcode: OpenWrite P1 P2 P3 P4 P5
** Synopsis: root=P2 iDb=P3
**
** Open a read/write cursor named P1 on the table or index whose root
** page is P2.  Or if P5!=0 use the content of register P2 to find the
** root page.
**
** The P4 value may be either an integer (P4_INT32) or a pointer to
** a KeyInfo structure (P4_KEYINFO). If it is a pointer to a KeyInfo 
** structure, then said structure defines the content and collating 
** sequence of the index being opened. Otherwise, if P4 is an integer 
** value, it is set to the number of columns in the table, or to the
** largest index of any column of the table that is actually used.
**
** This instruction works just like OpenRead except that it opens the cursor
** in read/write mode.  For a given table, there can be one or more read-only
** cursors or a single read/write cursor but not both.
**
** See also OpenRead.
*/</comment>
<case pos:line="2803" pos:column="1">case <expr><name pos:line="2803" pos:column="6">OP_ReopenIdx<pos:position pos:line="2803" pos:column="18"/></name></expr>:<pos:position pos:line="2803" pos:column="19"/></case> <block pos:line="2803" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="2804" pos:column="3">int<pos:position pos:line="2804" pos:column="6"/></name></type> <name pos:line="2804" pos:column="7">nField<pos:position pos:line="2804" pos:column="13"/></name></decl>;<pos:position pos:line="2804" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2805" pos:column="3">KeyInfo<pos:position pos:line="2805" pos:column="10"/></name> <modifier pos:line="2805" pos:column="11">*<pos:position pos:line="2805" pos:column="12"/></modifier></type><name pos:line="2805" pos:column="12">pKeyInfo<pos:position pos:line="2805" pos:column="20"/></name></decl>;<pos:position pos:line="2805" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2806" pos:column="3">int<pos:position pos:line="2806" pos:column="6"/></name></type> <name pos:line="2806" pos:column="7">p2<pos:position pos:line="2806" pos:column="9"/></name></decl>;<pos:position pos:line="2806" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2807" pos:column="3">int<pos:position pos:line="2807" pos:column="6"/></name></type> <name pos:line="2807" pos:column="7">iDb<pos:position pos:line="2807" pos:column="10"/></name></decl>;<pos:position pos:line="2807" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2808" pos:column="3">int<pos:position pos:line="2808" pos:column="6"/></name></type> <name pos:line="2808" pos:column="7">wrFlag<pos:position pos:line="2808" pos:column="13"/></name></decl>;<pos:position pos:line="2808" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2809" pos:column="3">Btree<pos:position pos:line="2809" pos:column="8"/></name> <modifier pos:line="2809" pos:column="9">*<pos:position pos:line="2809" pos:column="10"/></modifier></type><name pos:line="2809" pos:column="10">pX<pos:position pos:line="2809" pos:column="12"/></name></decl>;<pos:position pos:line="2809" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2810" pos:column="3">VdbeCursor<pos:position pos:line="2810" pos:column="13"/></name> <modifier pos:line="2810" pos:column="14">*<pos:position pos:line="2810" pos:column="15"/></modifier></type><name pos:line="2810" pos:column="15">pCur<pos:position pos:line="2810" pos:column="19"/></name></decl>;<pos:position pos:line="2810" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2811" pos:column="3">Db<pos:position pos:line="2811" pos:column="5"/></name> <modifier pos:line="2811" pos:column="6">*<pos:position pos:line="2811" pos:column="7"/></modifier></type><name pos:line="2811" pos:column="7">pDb<pos:position pos:line="2811" pos:column="10"/></name></decl>;<pos:position pos:line="2811" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="2813" pos:column="3">assert<pos:position pos:line="2813" pos:column="9"/></name><argument_list pos:line="2813" pos:column="9">( <argument><expr><name><name pos:line="2813" pos:column="11">pOp<pos:position pos:line="2813" pos:column="14"/></name><operator pos:line="2813" pos:column="14">-&gt;<pos:position pos:line="2813" pos:column="19"/></operator><name pos:line="2813" pos:column="16">p5<pos:position pos:line="2813" pos:column="18"/></name></name><operator pos:line="2813" pos:column="18">==<pos:position pos:line="2813" pos:column="20"/></operator><literal type="number" pos:line="2813" pos:column="20">0<pos:position pos:line="2813" pos:column="21"/></literal> <operator pos:line="2813" pos:column="22">||<pos:position pos:line="2813" pos:column="24"/></operator> <name><name pos:line="2813" pos:column="25">pOp<pos:position pos:line="2813" pos:column="28"/></name><operator pos:line="2813" pos:column="28">-&gt;<pos:position pos:line="2813" pos:column="33"/></operator><name pos:line="2813" pos:column="30">p5<pos:position pos:line="2813" pos:column="32"/></name></name><operator pos:line="2813" pos:column="32">==<pos:position pos:line="2813" pos:column="34"/></operator><name pos:line="2813" pos:column="34">OPFLAG_SEEKEQ<pos:position pos:line="2813" pos:column="47"/></name></expr></argument> )<pos:position pos:line="2813" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2813" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2814" pos:column="3">assert<pos:position pos:line="2814" pos:column="9"/></name><argument_list pos:line="2814" pos:column="9">( <argument><expr><name><name pos:line="2814" pos:column="11">pOp<pos:position pos:line="2814" pos:column="14"/></name><operator pos:line="2814" pos:column="14">-&gt;<pos:position pos:line="2814" pos:column="19"/></operator><name pos:line="2814" pos:column="16">p4type<pos:position pos:line="2814" pos:column="22"/></name></name><operator pos:line="2814" pos:column="22">==<pos:position pos:line="2814" pos:column="24"/></operator><name pos:line="2814" pos:column="24">P4_KEYINFO<pos:position pos:line="2814" pos:column="34"/></name></expr></argument> )<pos:position pos:line="2814" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="2814" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2815" pos:column="3">pCur<pos:position pos:line="2815" pos:column="7"/></name> <operator pos:line="2815" pos:column="8">=<pos:position pos:line="2815" pos:column="9"/></operator> <name><name pos:line="2815" pos:column="10">p<pos:position pos:line="2815" pos:column="11"/></name><operator pos:line="2815" pos:column="11">-&gt;<pos:position pos:line="2815" pos:column="16"/></operator><name pos:line="2815" pos:column="13">apCsr<pos:position pos:line="2815" pos:column="18"/></name><index pos:line="2815" pos:column="18">[<expr><name><name pos:line="2815" pos:column="19">pOp<pos:position pos:line="2815" pos:column="22"/></name><operator pos:line="2815" pos:column="22">-&gt;<pos:position pos:line="2815" pos:column="27"/></operator><name pos:line="2815" pos:column="24">p1<pos:position pos:line="2815" pos:column="26"/></name></name></expr>]<pos:position pos:line="2815" pos:column="27"/></index></name></expr>;<pos:position pos:line="2815" pos:column="28"/></expr_stmt>
  <if pos:line="2816" pos:column="3">if<condition pos:line="2816" pos:column="5">( <expr><name pos:line="2816" pos:column="7">pCur<pos:position pos:line="2816" pos:column="11"/></name> <operator pos:line="2816" pos:column="12">&amp;&amp;<pos:position pos:line="2816" pos:column="22"/></operator> <name><name pos:line="2816" pos:column="15">pCur<pos:position pos:line="2816" pos:column="19"/></name><operator pos:line="2816" pos:column="19">-&gt;<pos:position pos:line="2816" pos:column="24"/></operator><name pos:line="2816" pos:column="21">pgnoRoot<pos:position pos:line="2816" pos:column="29"/></name></name><operator pos:line="2816" pos:column="29">==<pos:position pos:line="2816" pos:column="31"/></operator><operator pos:line="2816" pos:column="31">(<pos:position pos:line="2816" pos:column="32"/></operator><name pos:line="2816" pos:column="32">u32<pos:position pos:line="2816" pos:column="35"/></name><operator pos:line="2816" pos:column="35">)<pos:position pos:line="2816" pos:column="36"/></operator><name><name pos:line="2816" pos:column="36">pOp<pos:position pos:line="2816" pos:column="39"/></name><operator pos:line="2816" pos:column="39">-&gt;<pos:position pos:line="2816" pos:column="44"/></operator><name pos:line="2816" pos:column="41">p2<pos:position pos:line="2816" pos:column="43"/></name></name></expr> )<pos:position pos:line="2816" pos:column="45"/></condition><then><block pos:line="2816" pos:column="45">{
    <expr_stmt><expr><call><name pos:line="2817" pos:column="5">assert<pos:position pos:line="2817" pos:column="11"/></name><argument_list pos:line="2817" pos:column="11">( <argument><expr><name><name pos:line="2817" pos:column="13">pCur<pos:position pos:line="2817" pos:column="17"/></name><operator pos:line="2817" pos:column="17">-&gt;<pos:position pos:line="2817" pos:column="22"/></operator><name pos:line="2817" pos:column="19">iDb<pos:position pos:line="2817" pos:column="22"/></name></name><operator pos:line="2817" pos:column="22">==<pos:position pos:line="2817" pos:column="24"/></operator><name><name pos:line="2817" pos:column="24">pOp<pos:position pos:line="2817" pos:column="27"/></name><operator pos:line="2817" pos:column="27">-&gt;<pos:position pos:line="2817" pos:column="32"/></operator><name pos:line="2817" pos:column="29">p3<pos:position pos:line="2817" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="2817" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2817" pos:column="34"/></expr_stmt>      <comment type="block" pos:line="2817" pos:column="40">/* Guaranteed by the code generator */</comment>
    <goto pos:line="2818" pos:column="5">goto <name pos:line="2818" pos:column="10">open_cursor_set_hints<pos:position pos:line="2818" pos:column="31"/></name>;<pos:position pos:line="2818" pos:column="32"/></goto>
  }<pos:position pos:line="2819" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="2820" pos:column="3">/* If the cursor is not currently open or is open on a different
  ** index, then fall through into OP_OpenRead to force a reopen */</comment>
<case pos:line="2822" pos:column="1">case <expr><name pos:line="2822" pos:column="6">OP_OpenRead<pos:position pos:line="2822" pos:column="17"/></name></expr>:<pos:position pos:line="2822" pos:column="18"/></case>
<case pos:line="2823" pos:column="1">case <expr><name pos:line="2823" pos:column="6">OP_OpenWrite<pos:position pos:line="2823" pos:column="18"/></name></expr>:<pos:position pos:line="2823" pos:column="19"/></case>

  <expr_stmt><expr><call><name pos:line="2825" pos:column="3">assert<pos:position pos:line="2825" pos:column="9"/></name><argument_list pos:line="2825" pos:column="9">( <argument><expr><name><name pos:line="2825" pos:column="11">pOp<pos:position pos:line="2825" pos:column="14"/></name><operator pos:line="2825" pos:column="14">-&gt;<pos:position pos:line="2825" pos:column="19"/></operator><name pos:line="2825" pos:column="16">opcode<pos:position pos:line="2825" pos:column="22"/></name></name><operator pos:line="2825" pos:column="22">==<pos:position pos:line="2825" pos:column="24"/></operator><name pos:line="2825" pos:column="24">OP_OpenWrite<pos:position pos:line="2825" pos:column="36"/></name> <operator pos:line="2825" pos:column="37">||<pos:position pos:line="2825" pos:column="39"/></operator> <name><name pos:line="2825" pos:column="40">pOp<pos:position pos:line="2825" pos:column="43"/></name><operator pos:line="2825" pos:column="43">-&gt;<pos:position pos:line="2825" pos:column="48"/></operator><name pos:line="2825" pos:column="45">p5<pos:position pos:line="2825" pos:column="47"/></name></name><operator pos:line="2825" pos:column="47">==<pos:position pos:line="2825" pos:column="49"/></operator><literal type="number" pos:line="2825" pos:column="49">0<pos:position pos:line="2825" pos:column="50"/></literal> <operator pos:line="2825" pos:column="51">||<pos:position pos:line="2825" pos:column="53"/></operator> <name><name pos:line="2825" pos:column="54">pOp<pos:position pos:line="2825" pos:column="57"/></name><operator pos:line="2825" pos:column="57">-&gt;<pos:position pos:line="2825" pos:column="62"/></operator><name pos:line="2825" pos:column="59">p5<pos:position pos:line="2825" pos:column="61"/></name></name><operator pos:line="2825" pos:column="61">==<pos:position pos:line="2825" pos:column="63"/></operator><name pos:line="2825" pos:column="63">OPFLAG_SEEKEQ<pos:position pos:line="2825" pos:column="76"/></name></expr></argument> )<pos:position pos:line="2825" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="2825" pos:column="79"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2826" pos:column="3">assert<pos:position pos:line="2826" pos:column="9"/></name><argument_list pos:line="2826" pos:column="9">( <argument><expr><name><name pos:line="2826" pos:column="11">p<pos:position pos:line="2826" pos:column="12"/></name><operator pos:line="2826" pos:column="12">-&gt;<pos:position pos:line="2826" pos:column="17"/></operator><name pos:line="2826" pos:column="14">bIsReader<pos:position pos:line="2826" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="2826" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="2826" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2827" pos:column="3">assert<pos:position pos:line="2827" pos:column="9"/></name><argument_list pos:line="2827" pos:column="9">( <argument><expr><name><name pos:line="2827" pos:column="11">pOp<pos:position pos:line="2827" pos:column="14"/></name><operator pos:line="2827" pos:column="14">-&gt;<pos:position pos:line="2827" pos:column="19"/></operator><name pos:line="2827" pos:column="16">opcode<pos:position pos:line="2827" pos:column="22"/></name></name><operator pos:line="2827" pos:column="22">==<pos:position pos:line="2827" pos:column="24"/></operator><name pos:line="2827" pos:column="24">OP_OpenRead<pos:position pos:line="2827" pos:column="35"/></name> <operator pos:line="2827" pos:column="36">||<pos:position pos:line="2827" pos:column="38"/></operator> <name><name pos:line="2827" pos:column="39">pOp<pos:position pos:line="2827" pos:column="42"/></name><operator pos:line="2827" pos:column="42">-&gt;<pos:position pos:line="2827" pos:column="47"/></operator><name pos:line="2827" pos:column="44">opcode<pos:position pos:line="2827" pos:column="50"/></name></name><operator pos:line="2827" pos:column="50">==<pos:position pos:line="2827" pos:column="52"/></operator><name pos:line="2827" pos:column="52">OP_ReopenIdx<pos:position pos:line="2827" pos:column="64"/></name>
          <operator pos:line="2828" pos:column="11">||<pos:position pos:line="2828" pos:column="13"/></operator> <name><name pos:line="2828" pos:column="14">p<pos:position pos:line="2828" pos:column="15"/></name><operator pos:line="2828" pos:column="15">-&gt;<pos:position pos:line="2828" pos:column="20"/></operator><name pos:line="2828" pos:column="17">readOnly<pos:position pos:line="2828" pos:column="25"/></name></name><operator pos:line="2828" pos:column="25">==<pos:position pos:line="2828" pos:column="27"/></operator><literal type="number" pos:line="2828" pos:column="27">0<pos:position pos:line="2828" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="2828" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="2828" pos:column="31"/></expr_stmt>

  <if pos:line="2830" pos:column="3">if<condition pos:line="2830" pos:column="5">( <expr><name><name pos:line="2830" pos:column="7">p<pos:position pos:line="2830" pos:column="8"/></name><operator pos:line="2830" pos:column="8">-&gt;<pos:position pos:line="2830" pos:column="13"/></operator><name pos:line="2830" pos:column="10">expired<pos:position pos:line="2830" pos:column="17"/></name></name></expr> )<pos:position pos:line="2830" pos:column="19"/></condition><then><block pos:line="2830" pos:column="19">{
    <expr_stmt><expr><name pos:line="2831" pos:column="5">rc<pos:position pos:line="2831" pos:column="7"/></name> <operator pos:line="2831" pos:column="8">=<pos:position pos:line="2831" pos:column="9"/></operator> <name pos:line="2831" pos:column="10">SQLITE_ABORT_ROLLBACK<pos:position pos:line="2831" pos:column="31"/></name></expr>;<pos:position pos:line="2831" pos:column="32"/></expr_stmt>
    <goto pos:line="2832" pos:column="5">goto <name pos:line="2832" pos:column="10">abort_due_to_error<pos:position pos:line="2832" pos:column="28"/></name>;<pos:position pos:line="2832" pos:column="29"/></goto>
  }<pos:position pos:line="2833" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="2835" pos:column="3">nField<pos:position pos:line="2835" pos:column="9"/></name> <operator pos:line="2835" pos:column="10">=<pos:position pos:line="2835" pos:column="11"/></operator> <literal type="number" pos:line="2835" pos:column="12">0<pos:position pos:line="2835" pos:column="13"/></literal></expr>;<pos:position pos:line="2835" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2836" pos:column="3">pKeyInfo<pos:position pos:line="2836" pos:column="11"/></name> <operator pos:line="2836" pos:column="12">=<pos:position pos:line="2836" pos:column="13"/></operator> <literal type="number" pos:line="2836" pos:column="14">0<pos:position pos:line="2836" pos:column="15"/></literal></expr>;<pos:position pos:line="2836" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2837" pos:column="3">p2<pos:position pos:line="2837" pos:column="5"/></name> <operator pos:line="2837" pos:column="6">=<pos:position pos:line="2837" pos:column="7"/></operator> <name><name pos:line="2837" pos:column="8">pOp<pos:position pos:line="2837" pos:column="11"/></name><operator pos:line="2837" pos:column="11">-&gt;<pos:position pos:line="2837" pos:column="16"/></operator><name pos:line="2837" pos:column="13">p2<pos:position pos:line="2837" pos:column="15"/></name></name></expr>;<pos:position pos:line="2837" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2838" pos:column="3">iDb<pos:position pos:line="2838" pos:column="6"/></name> <operator pos:line="2838" pos:column="7">=<pos:position pos:line="2838" pos:column="8"/></operator> <name><name pos:line="2838" pos:column="9">pOp<pos:position pos:line="2838" pos:column="12"/></name><operator pos:line="2838" pos:column="12">-&gt;<pos:position pos:line="2838" pos:column="17"/></operator><name pos:line="2838" pos:column="14">p3<pos:position pos:line="2838" pos:column="16"/></name></name></expr>;<pos:position pos:line="2838" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2839" pos:column="3">assert<pos:position pos:line="2839" pos:column="9"/></name><argument_list pos:line="2839" pos:column="9">( <argument><expr><name pos:line="2839" pos:column="11">iDb<pos:position pos:line="2839" pos:column="14"/></name><operator pos:line="2839" pos:column="14">&gt;=<pos:position pos:line="2839" pos:column="19"/></operator><literal type="number" pos:line="2839" pos:column="16">0<pos:position pos:line="2839" pos:column="17"/></literal> <operator pos:line="2839" pos:column="18">&amp;&amp;<pos:position pos:line="2839" pos:column="28"/></operator> <name pos:line="2839" pos:column="21">iDb<pos:position pos:line="2839" pos:column="24"/></name><operator pos:line="2839" pos:column="24">&lt;<pos:position pos:line="2839" pos:column="28"/></operator><name><name pos:line="2839" pos:column="25">db<pos:position pos:line="2839" pos:column="27"/></name><operator pos:line="2839" pos:column="27">-&gt;<pos:position pos:line="2839" pos:column="32"/></operator><name pos:line="2839" pos:column="29">nDb<pos:position pos:line="2839" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="2839" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2839" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2840" pos:column="3">assert<pos:position pos:line="2840" pos:column="9"/></name><argument_list pos:line="2840" pos:column="9">( <argument><expr><call><name pos:line="2840" pos:column="11">DbMaskTest<pos:position pos:line="2840" pos:column="21"/></name><argument_list pos:line="2840" pos:column="21">(<argument><expr><name><name pos:line="2840" pos:column="22">p<pos:position pos:line="2840" pos:column="23"/></name><operator pos:line="2840" pos:column="23">-&gt;<pos:position pos:line="2840" pos:column="28"/></operator><name pos:line="2840" pos:column="25">btreeMask<pos:position pos:line="2840" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="2840" pos:column="36">iDb<pos:position pos:line="2840" pos:column="39"/></name></expr></argument>)<pos:position pos:line="2840" pos:column="40"/></argument_list></call></expr></argument> )<pos:position pos:line="2840" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="2840" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2841" pos:column="3">pDb<pos:position pos:line="2841" pos:column="6"/></name> <operator pos:line="2841" pos:column="7">=<pos:position pos:line="2841" pos:column="8"/></operator> <operator pos:line="2841" pos:column="9">&amp;<pos:position pos:line="2841" pos:column="14"/></operator><name><name pos:line="2841" pos:column="10">db<pos:position pos:line="2841" pos:column="12"/></name><operator pos:line="2841" pos:column="12">-&gt;<pos:position pos:line="2841" pos:column="17"/></operator><name pos:line="2841" pos:column="14">aDb<pos:position pos:line="2841" pos:column="17"/></name><index pos:line="2841" pos:column="17">[<expr><name pos:line="2841" pos:column="18">iDb<pos:position pos:line="2841" pos:column="21"/></name></expr>]<pos:position pos:line="2841" pos:column="22"/></index></name></expr>;<pos:position pos:line="2841" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2842" pos:column="3">pX<pos:position pos:line="2842" pos:column="5"/></name> <operator pos:line="2842" pos:column="6">=<pos:position pos:line="2842" pos:column="7"/></operator> <name><name pos:line="2842" pos:column="8">pDb<pos:position pos:line="2842" pos:column="11"/></name><operator pos:line="2842" pos:column="11">-&gt;<pos:position pos:line="2842" pos:column="16"/></operator><name pos:line="2842" pos:column="13">pBt<pos:position pos:line="2842" pos:column="16"/></name></name></expr>;<pos:position pos:line="2842" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2843" pos:column="3">assert<pos:position pos:line="2843" pos:column="9"/></name><argument_list pos:line="2843" pos:column="9">( <argument><expr><name pos:line="2843" pos:column="11">pX<pos:position pos:line="2843" pos:column="13"/></name><operator pos:line="2843" pos:column="13">!=<pos:position pos:line="2843" pos:column="15"/></operator><literal type="number" pos:line="2843" pos:column="15">0<pos:position pos:line="2843" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="2843" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="2843" pos:column="19"/></expr_stmt>
  <if pos:line="2844" pos:column="3">if<condition pos:line="2844" pos:column="5">( <expr><name><name pos:line="2844" pos:column="7">pOp<pos:position pos:line="2844" pos:column="10"/></name><operator pos:line="2844" pos:column="10">-&gt;<pos:position pos:line="2844" pos:column="15"/></operator><name pos:line="2844" pos:column="12">opcode<pos:position pos:line="2844" pos:column="18"/></name></name><operator pos:line="2844" pos:column="18">==<pos:position pos:line="2844" pos:column="20"/></operator><name pos:line="2844" pos:column="20">OP_OpenWrite<pos:position pos:line="2844" pos:column="32"/></name></expr> )<pos:position pos:line="2844" pos:column="34"/></condition><then><block pos:line="2844" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="2845" pos:column="5">assert<pos:position pos:line="2845" pos:column="11"/></name><argument_list pos:line="2845" pos:column="11">( <argument><expr><name pos:line="2845" pos:column="13">OPFLAG_FORDELETE<pos:position pos:line="2845" pos:column="29"/></name><operator pos:line="2845" pos:column="29">==<pos:position pos:line="2845" pos:column="31"/></operator><name pos:line="2845" pos:column="31">BTREE_FORDELETE<pos:position pos:line="2845" pos:column="46"/></name></expr></argument> )<pos:position pos:line="2845" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="2845" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2846" pos:column="5">wrFlag<pos:position pos:line="2846" pos:column="11"/></name> <operator pos:line="2846" pos:column="12">=<pos:position pos:line="2846" pos:column="13"/></operator> <name pos:line="2846" pos:column="14">BTREE_WRCSR<pos:position pos:line="2846" pos:column="25"/></name> <operator pos:line="2846" pos:column="26">|<pos:position pos:line="2846" pos:column="27"/></operator> <operator pos:line="2846" pos:column="28">(<pos:position pos:line="2846" pos:column="29"/></operator><name><name pos:line="2846" pos:column="29">pOp<pos:position pos:line="2846" pos:column="32"/></name><operator pos:line="2846" pos:column="32">-&gt;<pos:position pos:line="2846" pos:column="37"/></operator><name pos:line="2846" pos:column="34">p5<pos:position pos:line="2846" pos:column="36"/></name></name> <operator pos:line="2846" pos:column="37">&amp;<pos:position pos:line="2846" pos:column="42"/></operator> <name pos:line="2846" pos:column="39">OPFLAG_FORDELETE<pos:position pos:line="2846" pos:column="55"/></name><operator pos:line="2846" pos:column="55">)<pos:position pos:line="2846" pos:column="56"/></operator></expr>;<pos:position pos:line="2846" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2847" pos:column="5">assert<pos:position pos:line="2847" pos:column="11"/></name><argument_list pos:line="2847" pos:column="11">( <argument><expr><call><name pos:line="2847" pos:column="13">sqlite3SchemaMutexHeld<pos:position pos:line="2847" pos:column="35"/></name><argument_list pos:line="2847" pos:column="35">(<argument><expr><name pos:line="2847" pos:column="36">db<pos:position pos:line="2847" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="2847" pos:column="40">iDb<pos:position pos:line="2847" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2847" pos:column="45">0<pos:position pos:line="2847" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="2847" pos:column="47"/></argument_list></call></expr></argument> )<pos:position pos:line="2847" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2847" pos:column="50"/></expr_stmt>
    <if pos:line="2848" pos:column="5">if<condition pos:line="2848" pos:column="7">( <expr><name><name pos:line="2848" pos:column="9">pDb<pos:position pos:line="2848" pos:column="12"/></name><operator pos:line="2848" pos:column="12">-&gt;<pos:position pos:line="2848" pos:column="17"/></operator><name pos:line="2848" pos:column="14">pSchema<pos:position pos:line="2848" pos:column="21"/></name><operator pos:line="2848" pos:column="21">-&gt;<pos:position pos:line="2848" pos:column="26"/></operator><name pos:line="2848" pos:column="23">file_format<pos:position pos:line="2848" pos:column="34"/></name></name> <operator pos:line="2848" pos:column="35">&lt;<pos:position pos:line="2848" pos:column="39"/></operator> <name><name pos:line="2848" pos:column="37">p<pos:position pos:line="2848" pos:column="38"/></name><operator pos:line="2848" pos:column="38">-&gt;<pos:position pos:line="2848" pos:column="43"/></operator><name pos:line="2848" pos:column="40">minWriteFileFormat<pos:position pos:line="2848" pos:column="58"/></name></name></expr> )<pos:position pos:line="2848" pos:column="60"/></condition><then><block pos:line="2848" pos:column="60">{
      <expr_stmt><expr><name><name pos:line="2849" pos:column="7">p<pos:position pos:line="2849" pos:column="8"/></name><operator pos:line="2849" pos:column="8">-&gt;<pos:position pos:line="2849" pos:column="13"/></operator><name pos:line="2849" pos:column="10">minWriteFileFormat<pos:position pos:line="2849" pos:column="28"/></name></name> <operator pos:line="2849" pos:column="29">=<pos:position pos:line="2849" pos:column="30"/></operator> <name><name pos:line="2849" pos:column="31">pDb<pos:position pos:line="2849" pos:column="34"/></name><operator pos:line="2849" pos:column="34">-&gt;<pos:position pos:line="2849" pos:column="39"/></operator><name pos:line="2849" pos:column="36">pSchema<pos:position pos:line="2849" pos:column="43"/></name><operator pos:line="2849" pos:column="43">-&gt;<pos:position pos:line="2849" pos:column="48"/></operator><name pos:line="2849" pos:column="45">file_format<pos:position pos:line="2849" pos:column="56"/></name></name></expr>;<pos:position pos:line="2849" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="2850" pos:column="6"/></block></then></if>
  }<pos:position pos:line="2851" pos:column="4"/></block></then><else pos:line="2851" pos:column="4">else<block pos:line="2851" pos:column="8">{
    <expr_stmt><expr><name pos:line="2852" pos:column="5">wrFlag<pos:position pos:line="2852" pos:column="11"/></name> <operator pos:line="2852" pos:column="12">=<pos:position pos:line="2852" pos:column="13"/></operator> <literal type="number" pos:line="2852" pos:column="14">0<pos:position pos:line="2852" pos:column="15"/></literal></expr>;<pos:position pos:line="2852" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="2853" pos:column="4"/></block></else></if>
  <if pos:line="2854" pos:column="3">if<condition pos:line="2854" pos:column="5">( <expr><name><name pos:line="2854" pos:column="7">pOp<pos:position pos:line="2854" pos:column="10"/></name><operator pos:line="2854" pos:column="10">-&gt;<pos:position pos:line="2854" pos:column="15"/></operator><name pos:line="2854" pos:column="12">p5<pos:position pos:line="2854" pos:column="14"/></name></name> <operator pos:line="2854" pos:column="15">&amp;<pos:position pos:line="2854" pos:column="20"/></operator> <name pos:line="2854" pos:column="17">OPFLAG_P2ISREG<pos:position pos:line="2854" pos:column="31"/></name></expr> )<pos:position pos:line="2854" pos:column="33"/></condition><then><block pos:line="2854" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="2855" pos:column="5">assert<pos:position pos:line="2855" pos:column="11"/></name><argument_list pos:line="2855" pos:column="11">( <argument><expr><name pos:line="2855" pos:column="13">p2<pos:position pos:line="2855" pos:column="15"/></name><operator pos:line="2855" pos:column="15">&gt;<pos:position pos:line="2855" pos:column="19"/></operator><literal type="number" pos:line="2855" pos:column="16">0<pos:position pos:line="2855" pos:column="17"/></literal></expr></argument> )<pos:position pos:line="2855" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="2855" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2856" pos:column="5">assert<pos:position pos:line="2856" pos:column="11"/></name><argument_list pos:line="2856" pos:column="11">( <argument><expr><name pos:line="2856" pos:column="13">p2<pos:position pos:line="2856" pos:column="15"/></name><operator pos:line="2856" pos:column="15">&lt;=<pos:position pos:line="2856" pos:column="20"/></operator><operator pos:line="2856" pos:column="17">(<pos:position pos:line="2856" pos:column="18"/></operator><name><name pos:line="2856" pos:column="18">p<pos:position pos:line="2856" pos:column="19"/></name><operator pos:line="2856" pos:column="19">-&gt;<pos:position pos:line="2856" pos:column="24"/></operator><name pos:line="2856" pos:column="21">nMem<pos:position pos:line="2856" pos:column="25"/></name></name><operator pos:line="2856" pos:column="25">+<pos:position pos:line="2856" pos:column="26"/></operator><literal type="number" pos:line="2856" pos:column="26">1<pos:position pos:line="2856" pos:column="27"/></literal> <operator pos:line="2856" pos:column="28">-<pos:position pos:line="2856" pos:column="29"/></operator> <name><name pos:line="2856" pos:column="30">p<pos:position pos:line="2856" pos:column="31"/></name><operator pos:line="2856" pos:column="31">-&gt;<pos:position pos:line="2856" pos:column="36"/></operator><name pos:line="2856" pos:column="33">nCursor<pos:position pos:line="2856" pos:column="40"/></name></name><operator pos:line="2856" pos:column="40">)<pos:position pos:line="2856" pos:column="41"/></operator></expr></argument> )<pos:position pos:line="2856" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="2856" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2857" pos:column="5">pIn2<pos:position pos:line="2857" pos:column="9"/></name> <operator pos:line="2857" pos:column="10">=<pos:position pos:line="2857" pos:column="11"/></operator> <operator pos:line="2857" pos:column="12">&amp;<pos:position pos:line="2857" pos:column="17"/></operator><name><name pos:line="2857" pos:column="13">aMem<pos:position pos:line="2857" pos:column="17"/></name><index pos:line="2857" pos:column="17">[<expr><name pos:line="2857" pos:column="18">p2<pos:position pos:line="2857" pos:column="20"/></name></expr>]<pos:position pos:line="2857" pos:column="21"/></index></name></expr>;<pos:position pos:line="2857" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2858" pos:column="5">assert<pos:position pos:line="2858" pos:column="11"/></name><argument_list pos:line="2858" pos:column="11">( <argument><expr><call><name pos:line="2858" pos:column="13">memIsValid<pos:position pos:line="2858" pos:column="23"/></name><argument_list pos:line="2858" pos:column="23">(<argument><expr><name pos:line="2858" pos:column="24">pIn2<pos:position pos:line="2858" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2858" pos:column="29"/></argument_list></call></expr></argument> )<pos:position pos:line="2858" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2858" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2859" pos:column="5">assert<pos:position pos:line="2859" pos:column="11"/></name><argument_list pos:line="2859" pos:column="11">( <argument><expr><operator pos:line="2859" pos:column="13">(<pos:position pos:line="2859" pos:column="14"/></operator><name><name pos:line="2859" pos:column="14">pIn2<pos:position pos:line="2859" pos:column="18"/></name><operator pos:line="2859" pos:column="18">-&gt;<pos:position pos:line="2859" pos:column="23"/></operator><name pos:line="2859" pos:column="20">flags<pos:position pos:line="2859" pos:column="25"/></name></name> <operator pos:line="2859" pos:column="26">&amp;<pos:position pos:line="2859" pos:column="31"/></operator> <name pos:line="2859" pos:column="28">MEM_Int<pos:position pos:line="2859" pos:column="35"/></name><operator pos:line="2859" pos:column="35">)<pos:position pos:line="2859" pos:column="36"/></operator><operator pos:line="2859" pos:column="36">!=<pos:position pos:line="2859" pos:column="38"/></operator><literal type="number" pos:line="2859" pos:column="38">0<pos:position pos:line="2859" pos:column="39"/></literal></expr></argument> )<pos:position pos:line="2859" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2859" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2860" pos:column="5">sqlite3VdbeMemIntegerify<pos:position pos:line="2860" pos:column="29"/></name><argument_list pos:line="2860" pos:column="29">(<argument><expr><name pos:line="2860" pos:column="30">pIn2<pos:position pos:line="2860" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2860" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2860" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2861" pos:column="5">p2<pos:position pos:line="2861" pos:column="7"/></name> <operator pos:line="2861" pos:column="8">=<pos:position pos:line="2861" pos:column="9"/></operator> <operator pos:line="2861" pos:column="10">(<pos:position pos:line="2861" pos:column="11"/></operator><name pos:line="2861" pos:column="11">int<pos:position pos:line="2861" pos:column="14"/></name><operator pos:line="2861" pos:column="14">)<pos:position pos:line="2861" pos:column="15"/></operator><name><name pos:line="2861" pos:column="15">pIn2<pos:position pos:line="2861" pos:column="19"/></name><operator pos:line="2861" pos:column="19">-&gt;<pos:position pos:line="2861" pos:column="24"/></operator><name pos:line="2861" pos:column="21">u<pos:position pos:line="2861" pos:column="22"/></name><operator pos:line="2861" pos:column="22">.<pos:position pos:line="2861" pos:column="23"/></operator><name pos:line="2861" pos:column="23">i<pos:position pos:line="2861" pos:column="24"/></name></name></expr>;<pos:position pos:line="2861" pos:column="25"/></expr_stmt>
    <comment type="block" pos:line="2862" pos:column="5">/* The p2 value always comes from a prior OP_CreateBtree opcode and
    ** that opcode will always set the p2 value to 2 or more or else fail.
    ** If there were a failure, the prepared statement would have halted
    ** before reaching this instruction. */</comment>
    <expr_stmt><expr><call><name pos:line="2866" pos:column="5">assert<pos:position pos:line="2866" pos:column="11"/></name><argument_list pos:line="2866" pos:column="11">( <argument><expr><name pos:line="2866" pos:column="13">p2<pos:position pos:line="2866" pos:column="15"/></name><operator pos:line="2866" pos:column="15">&gt;=<pos:position pos:line="2866" pos:column="20"/></operator><literal type="number" pos:line="2866" pos:column="17">2<pos:position pos:line="2866" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="2866" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="2866" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="2867" pos:column="4"/></block></then></if>
  <if pos:line="2868" pos:column="3">if<condition pos:line="2868" pos:column="5">( <expr><name><name pos:line="2868" pos:column="7">pOp<pos:position pos:line="2868" pos:column="10"/></name><operator pos:line="2868" pos:column="10">-&gt;<pos:position pos:line="2868" pos:column="15"/></operator><name pos:line="2868" pos:column="12">p4type<pos:position pos:line="2868" pos:column="18"/></name></name><operator pos:line="2868" pos:column="18">==<pos:position pos:line="2868" pos:column="20"/></operator><name pos:line="2868" pos:column="20">P4_KEYINFO<pos:position pos:line="2868" pos:column="30"/></name></expr> )<pos:position pos:line="2868" pos:column="32"/></condition><then><block pos:line="2868" pos:column="32">{
    <expr_stmt><expr><name pos:line="2869" pos:column="5">pKeyInfo<pos:position pos:line="2869" pos:column="13"/></name> <operator pos:line="2869" pos:column="14">=<pos:position pos:line="2869" pos:column="15"/></operator> <name><name pos:line="2869" pos:column="16">pOp<pos:position pos:line="2869" pos:column="19"/></name><operator pos:line="2869" pos:column="19">-&gt;<pos:position pos:line="2869" pos:column="24"/></operator><name pos:line="2869" pos:column="21">p4<pos:position pos:line="2869" pos:column="23"/></name><operator pos:line="2869" pos:column="23">.<pos:position pos:line="2869" pos:column="24"/></operator><name pos:line="2869" pos:column="24">pKeyInfo<pos:position pos:line="2869" pos:column="32"/></name></name></expr>;<pos:position pos:line="2869" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2870" pos:column="5">assert<pos:position pos:line="2870" pos:column="11"/></name><argument_list pos:line="2870" pos:column="11">( <argument><expr><name><name pos:line="2870" pos:column="13">pKeyInfo<pos:position pos:line="2870" pos:column="21"/></name><operator pos:line="2870" pos:column="21">-&gt;<pos:position pos:line="2870" pos:column="26"/></operator><name pos:line="2870" pos:column="23">enc<pos:position pos:line="2870" pos:column="26"/></name></name><operator pos:line="2870" pos:column="26">==<pos:position pos:line="2870" pos:column="28"/></operator><call><name pos:line="2870" pos:column="28">ENC<pos:position pos:line="2870" pos:column="31"/></name><argument_list pos:line="2870" pos:column="31">(<argument><expr><name pos:line="2870" pos:column="32">db<pos:position pos:line="2870" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2870" pos:column="35"/></argument_list></call></expr></argument> )<pos:position pos:line="2870" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="2870" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2871" pos:column="5">assert<pos:position pos:line="2871" pos:column="11"/></name><argument_list pos:line="2871" pos:column="11">( <argument><expr><name><name pos:line="2871" pos:column="13">pKeyInfo<pos:position pos:line="2871" pos:column="21"/></name><operator pos:line="2871" pos:column="21">-&gt;<pos:position pos:line="2871" pos:column="26"/></operator><name pos:line="2871" pos:column="23">db<pos:position pos:line="2871" pos:column="25"/></name></name><operator pos:line="2871" pos:column="25">==<pos:position pos:line="2871" pos:column="27"/></operator><name pos:line="2871" pos:column="27">db<pos:position pos:line="2871" pos:column="29"/></name></expr></argument> )<pos:position pos:line="2871" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2871" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2872" pos:column="5">nField<pos:position pos:line="2872" pos:column="11"/></name> <operator pos:line="2872" pos:column="12">=<pos:position pos:line="2872" pos:column="13"/></operator> <name><name pos:line="2872" pos:column="14">pKeyInfo<pos:position pos:line="2872" pos:column="22"/></name><operator pos:line="2872" pos:column="22">-&gt;<pos:position pos:line="2872" pos:column="27"/></operator><name pos:line="2872" pos:column="24">nAllField<pos:position pos:line="2872" pos:column="33"/></name></name></expr>;<pos:position pos:line="2872" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="2873" pos:column="4"/></block></then><elseif pos:line="2873" pos:column="4">else <if pos:line="2873" pos:column="9">if<condition pos:line="2873" pos:column="11">( <expr><name><name pos:line="2873" pos:column="13">pOp<pos:position pos:line="2873" pos:column="16"/></name><operator pos:line="2873" pos:column="16">-&gt;<pos:position pos:line="2873" pos:column="21"/></operator><name pos:line="2873" pos:column="18">p4type<pos:position pos:line="2873" pos:column="24"/></name></name><operator pos:line="2873" pos:column="24">==<pos:position pos:line="2873" pos:column="26"/></operator><name pos:line="2873" pos:column="26">P4_INT32<pos:position pos:line="2873" pos:column="34"/></name></expr> )<pos:position pos:line="2873" pos:column="36"/></condition><then><block pos:line="2873" pos:column="36">{
    <expr_stmt><expr><name pos:line="2874" pos:column="5">nField<pos:position pos:line="2874" pos:column="11"/></name> <operator pos:line="2874" pos:column="12">=<pos:position pos:line="2874" pos:column="13"/></operator> <name><name pos:line="2874" pos:column="14">pOp<pos:position pos:line="2874" pos:column="17"/></name><operator pos:line="2874" pos:column="17">-&gt;<pos:position pos:line="2874" pos:column="22"/></operator><name pos:line="2874" pos:column="19">p4<pos:position pos:line="2874" pos:column="21"/></name><operator pos:line="2874" pos:column="21">.<pos:position pos:line="2874" pos:column="22"/></operator><name pos:line="2874" pos:column="22">i<pos:position pos:line="2874" pos:column="23"/></name></name></expr>;<pos:position pos:line="2874" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="2875" pos:column="4"/></block></then></if></elseif></if>
  <expr_stmt><expr><call><name pos:line="2876" pos:column="3">assert<pos:position pos:line="2876" pos:column="9"/></name><argument_list pos:line="2876" pos:column="9">( <argument><expr><name><name pos:line="2876" pos:column="11">pOp<pos:position pos:line="2876" pos:column="14"/></name><operator pos:line="2876" pos:column="14">-&gt;<pos:position pos:line="2876" pos:column="19"/></operator><name pos:line="2876" pos:column="16">p1<pos:position pos:line="2876" pos:column="18"/></name></name><operator pos:line="2876" pos:column="18">&gt;=<pos:position pos:line="2876" pos:column="23"/></operator><literal type="number" pos:line="2876" pos:column="20">0<pos:position pos:line="2876" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="2876" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="2876" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2877" pos:column="3">assert<pos:position pos:line="2877" pos:column="9"/></name><argument_list pos:line="2877" pos:column="9">( <argument><expr><name pos:line="2877" pos:column="11">nField<pos:position pos:line="2877" pos:column="17"/></name><operator pos:line="2877" pos:column="17">&gt;=<pos:position pos:line="2877" pos:column="22"/></operator><literal type="number" pos:line="2877" pos:column="19">0<pos:position pos:line="2877" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="2877" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="2877" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2878" pos:column="3">testcase<pos:position pos:line="2878" pos:column="11"/></name><argument_list pos:line="2878" pos:column="11">( <argument><expr><name pos:line="2878" pos:column="13">nField<pos:position pos:line="2878" pos:column="19"/></name><operator pos:line="2878" pos:column="19">==<pos:position pos:line="2878" pos:column="21"/></operator><literal type="number" pos:line="2878" pos:column="21">0<pos:position pos:line="2878" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="2878" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="2878" pos:column="25"/></expr_stmt>  <comment type="block" pos:line="2878" pos:column="27">/* Table with INTEGER PRIMARY KEY and nothing else */</comment>
  <expr_stmt><expr><name pos:line="2879" pos:column="3">pCur<pos:position pos:line="2879" pos:column="7"/></name> <operator pos:line="2879" pos:column="8">=<pos:position pos:line="2879" pos:column="9"/></operator> <call><name pos:line="2879" pos:column="10">allocateCursor<pos:position pos:line="2879" pos:column="24"/></name><argument_list pos:line="2879" pos:column="24">(<argument><expr><name pos:line="2879" pos:column="25">p<pos:position pos:line="2879" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="2879" pos:column="28">pOp<pos:position pos:line="2879" pos:column="31"/></name><operator pos:line="2879" pos:column="31">-&gt;<pos:position pos:line="2879" pos:column="36"/></operator><name pos:line="2879" pos:column="33">p1<pos:position pos:line="2879" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="2879" pos:column="37">nField<pos:position pos:line="2879" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="2879" pos:column="45">iDb<pos:position pos:line="2879" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="2879" pos:column="50">CURTYPE_BTREE<pos:position pos:line="2879" pos:column="63"/></name></expr></argument>)<pos:position pos:line="2879" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="2879" pos:column="65"/></expr_stmt>
  <if pos:line="2880" pos:column="3">if<condition pos:line="2880" pos:column="5">( <expr><name pos:line="2880" pos:column="7">pCur<pos:position pos:line="2880" pos:column="11"/></name><operator pos:line="2880" pos:column="11">==<pos:position pos:line="2880" pos:column="13"/></operator><literal type="number" pos:line="2880" pos:column="13">0<pos:position pos:line="2880" pos:column="14"/></literal></expr> )<pos:position pos:line="2880" pos:column="16"/></condition><then pos:line="2880" pos:column="16"> <block type="pseudo"><goto pos:line="2880" pos:column="17">goto <name pos:line="2880" pos:column="22">no_mem<pos:position pos:line="2880" pos:column="28"/></name>;<pos:position pos:line="2880" pos:column="29"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="2881" pos:column="3">pCur<pos:position pos:line="2881" pos:column="7"/></name><operator pos:line="2881" pos:column="7">-&gt;<pos:position pos:line="2881" pos:column="12"/></operator><name pos:line="2881" pos:column="9">nullRow<pos:position pos:line="2881" pos:column="16"/></name></name> <operator pos:line="2881" pos:column="17">=<pos:position pos:line="2881" pos:column="18"/></operator> <literal type="number" pos:line="2881" pos:column="19">1<pos:position pos:line="2881" pos:column="20"/></literal></expr>;<pos:position pos:line="2881" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2882" pos:column="3">pCur<pos:position pos:line="2882" pos:column="7"/></name><operator pos:line="2882" pos:column="7">-&gt;<pos:position pos:line="2882" pos:column="12"/></operator><name pos:line="2882" pos:column="9">isOrdered<pos:position pos:line="2882" pos:column="18"/></name></name> <operator pos:line="2882" pos:column="19">=<pos:position pos:line="2882" pos:column="20"/></operator> <literal type="number" pos:line="2882" pos:column="21">1<pos:position pos:line="2882" pos:column="22"/></literal></expr>;<pos:position pos:line="2882" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2883" pos:column="3">pCur<pos:position pos:line="2883" pos:column="7"/></name><operator pos:line="2883" pos:column="7">-&gt;<pos:position pos:line="2883" pos:column="12"/></operator><name pos:line="2883" pos:column="9">pgnoRoot<pos:position pos:line="2883" pos:column="17"/></name></name> <operator pos:line="2883" pos:column="18">=<pos:position pos:line="2883" pos:column="19"/></operator> <name pos:line="2883" pos:column="20">p2<pos:position pos:line="2883" pos:column="22"/></name></expr>;<pos:position pos:line="2883" pos:column="23"/></expr_stmt>
<cpp:ifdef pos:line="2884" pos:column="1">#<cpp:directive pos:line="2884" pos:column="2">ifdef<pos:position pos:line="2884" pos:column="7"/></cpp:directive> <name pos:line="2884" pos:column="8">SQLITE_DEBUG<pos:position pos:line="2884" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="2885" pos:column="3">pCur<pos:position pos:line="2885" pos:column="7"/></name><operator pos:line="2885" pos:column="7">-&gt;<pos:position pos:line="2885" pos:column="12"/></operator><name pos:line="2885" pos:column="9">wrFlag<pos:position pos:line="2885" pos:column="15"/></name></name> <operator pos:line="2885" pos:column="16">=<pos:position pos:line="2885" pos:column="17"/></operator> <name pos:line="2885" pos:column="18">wrFlag<pos:position pos:line="2885" pos:column="24"/></name></expr>;<pos:position pos:line="2885" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="2886" pos:column="1">#<cpp:directive pos:line="2886" pos:column="2">endif<pos:position pos:line="2886" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="2887" pos:column="3">rc<pos:position pos:line="2887" pos:column="5"/></name> <operator pos:line="2887" pos:column="6">=<pos:position pos:line="2887" pos:column="7"/></operator> <call><name pos:line="2887" pos:column="8">sqlite3BtreeCursor<pos:position pos:line="2887" pos:column="26"/></name><argument_list pos:line="2887" pos:column="26">(<argument><expr><name pos:line="2887" pos:column="27">pX<pos:position pos:line="2887" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2887" pos:column="31">p2<pos:position pos:line="2887" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="2887" pos:column="35">wrFlag<pos:position pos:line="2887" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="2887" pos:column="43">pKeyInfo<pos:position pos:line="2887" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="2887" pos:column="53">pCur<pos:position pos:line="2887" pos:column="57"/></name><operator pos:line="2887" pos:column="57">-&gt;<pos:position pos:line="2887" pos:column="62"/></operator><name pos:line="2887" pos:column="59">uc<pos:position pos:line="2887" pos:column="61"/></name><operator pos:line="2887" pos:column="61">.<pos:position pos:line="2887" pos:column="62"/></operator><name pos:line="2887" pos:column="62">pCursor<pos:position pos:line="2887" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="2887" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="2887" pos:column="71"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2888" pos:column="3">pCur<pos:position pos:line="2888" pos:column="7"/></name><operator pos:line="2888" pos:column="7">-&gt;<pos:position pos:line="2888" pos:column="12"/></operator><name pos:line="2888" pos:column="9">pKeyInfo<pos:position pos:line="2888" pos:column="17"/></name></name> <operator pos:line="2888" pos:column="18">=<pos:position pos:line="2888" pos:column="19"/></operator> <name pos:line="2888" pos:column="20">pKeyInfo<pos:position pos:line="2888" pos:column="28"/></name></expr>;<pos:position pos:line="2888" pos:column="29"/></expr_stmt>
  <comment type="block" pos:line="2889" pos:column="3">/* Set the VdbeCursor.isTable variable. Previous versions of
  ** SQLite used to check if the root-page flags were sane at this point
  ** and report database corruption if they were not, but this check has
  ** since moved into the btree layer.  */</comment>  
  <expr_stmt><expr><name><name pos:line="2893" pos:column="3">pCur<pos:position pos:line="2893" pos:column="7"/></name><operator pos:line="2893" pos:column="7">-&gt;<pos:position pos:line="2893" pos:column="12"/></operator><name pos:line="2893" pos:column="9">isTable<pos:position pos:line="2893" pos:column="16"/></name></name> <operator pos:line="2893" pos:column="17">=<pos:position pos:line="2893" pos:column="18"/></operator> <name><name pos:line="2893" pos:column="19">pOp<pos:position pos:line="2893" pos:column="22"/></name><operator pos:line="2893" pos:column="22">-&gt;<pos:position pos:line="2893" pos:column="27"/></operator><name pos:line="2893" pos:column="24">p4type<pos:position pos:line="2893" pos:column="30"/></name></name><operator pos:line="2893" pos:column="30">!=<pos:position pos:line="2893" pos:column="32"/></operator><name pos:line="2893" pos:column="32">P4_KEYINFO<pos:position pos:line="2893" pos:column="42"/></name></expr>;<pos:position pos:line="2893" pos:column="43"/></expr_stmt>

<label><name pos:line="2895" pos:column="1">open_cursor_set_hints<pos:position pos:line="2895" pos:column="22"/></name>:<pos:position pos:line="2895" pos:column="23"/></label>
  <expr_stmt><expr><call><name pos:line="2896" pos:column="3">assert<pos:position pos:line="2896" pos:column="9"/></name><argument_list pos:line="2896" pos:column="9">( <argument><expr><name pos:line="2896" pos:column="11">OPFLAG_BULKCSR<pos:position pos:line="2896" pos:column="25"/></name><operator pos:line="2896" pos:column="25">==<pos:position pos:line="2896" pos:column="27"/></operator><name pos:line="2896" pos:column="27">BTREE_BULKLOAD<pos:position pos:line="2896" pos:column="41"/></name></expr></argument> )<pos:position pos:line="2896" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="2896" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2897" pos:column="3">assert<pos:position pos:line="2897" pos:column="9"/></name><argument_list pos:line="2897" pos:column="9">( <argument><expr><name pos:line="2897" pos:column="11">OPFLAG_SEEKEQ<pos:position pos:line="2897" pos:column="24"/></name><operator pos:line="2897" pos:column="24">==<pos:position pos:line="2897" pos:column="26"/></operator><name pos:line="2897" pos:column="26">BTREE_SEEK_EQ<pos:position pos:line="2897" pos:column="39"/></name></expr></argument> )<pos:position pos:line="2897" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2897" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2898" pos:column="3">testcase<pos:position pos:line="2898" pos:column="11"/></name><argument_list pos:line="2898" pos:column="11">( <argument><expr><name><name pos:line="2898" pos:column="13">pOp<pos:position pos:line="2898" pos:column="16"/></name><operator pos:line="2898" pos:column="16">-&gt;<pos:position pos:line="2898" pos:column="21"/></operator><name pos:line="2898" pos:column="18">p5<pos:position pos:line="2898" pos:column="20"/></name></name> <operator pos:line="2898" pos:column="21">&amp;<pos:position pos:line="2898" pos:column="26"/></operator> <name pos:line="2898" pos:column="23">OPFLAG_BULKCSR<pos:position pos:line="2898" pos:column="37"/></name></expr></argument> )<pos:position pos:line="2898" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="2898" pos:column="40"/></expr_stmt>
<cpp:ifdef pos:line="2899" pos:column="1">#<cpp:directive pos:line="2899" pos:column="2">ifdef<pos:position pos:line="2899" pos:column="7"/></cpp:directive> <name pos:line="2899" pos:column="8">SQLITE_ENABLE_CURSOR_HINTS<pos:position pos:line="2899" pos:column="34"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="2900" pos:column="3">testcase<pos:position pos:line="2900" pos:column="11"/></name><argument_list pos:line="2900" pos:column="11">( <argument><expr><name><name pos:line="2900" pos:column="13">pOp<pos:position pos:line="2900" pos:column="16"/></name><operator pos:line="2900" pos:column="16">-&gt;<pos:position pos:line="2900" pos:column="21"/></operator><name pos:line="2900" pos:column="18">p2<pos:position pos:line="2900" pos:column="20"/></name></name> <operator pos:line="2900" pos:column="21">&amp;<pos:position pos:line="2900" pos:column="26"/></operator> <name pos:line="2900" pos:column="23">OPFLAG_SEEKEQ<pos:position pos:line="2900" pos:column="36"/></name></expr></argument> )<pos:position pos:line="2900" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2900" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="2901" pos:column="1">#<cpp:directive pos:line="2901" pos:column="2">endif<pos:position pos:line="2901" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="2902" pos:column="3">sqlite3BtreeCursorHintFlags<pos:position pos:line="2902" pos:column="30"/></name><argument_list pos:line="2902" pos:column="30">(<argument><expr><name><name pos:line="2902" pos:column="31">pCur<pos:position pos:line="2902" pos:column="35"/></name><operator pos:line="2902" pos:column="35">-&gt;<pos:position pos:line="2902" pos:column="40"/></operator><name pos:line="2902" pos:column="37">uc<pos:position pos:line="2902" pos:column="39"/></name><operator pos:line="2902" pos:column="39">.<pos:position pos:line="2902" pos:column="40"/></operator><name pos:line="2902" pos:column="40">pCursor<pos:position pos:line="2902" pos:column="47"/></name></name></expr></argument>,
                               <argument><expr><operator pos:line="2903" pos:column="32">(<pos:position pos:line="2903" pos:column="33"/></operator><name><name pos:line="2903" pos:column="33">pOp<pos:position pos:line="2903" pos:column="36"/></name><operator pos:line="2903" pos:column="36">-&gt;<pos:position pos:line="2903" pos:column="41"/></operator><name pos:line="2903" pos:column="38">p5<pos:position pos:line="2903" pos:column="40"/></name></name> <operator pos:line="2903" pos:column="41">&amp;<pos:position pos:line="2903" pos:column="46"/></operator> <operator pos:line="2903" pos:column="43">(<pos:position pos:line="2903" pos:column="44"/></operator><name pos:line="2903" pos:column="44">OPFLAG_BULKCSR<pos:position pos:line="2903" pos:column="58"/></name><operator pos:line="2903" pos:column="58">|<pos:position pos:line="2903" pos:column="59"/></operator><name pos:line="2903" pos:column="59">OPFLAG_SEEKEQ<pos:position pos:line="2903" pos:column="72"/></name><operator pos:line="2903" pos:column="72">)<pos:position pos:line="2903" pos:column="73"/></operator><operator pos:line="2903" pos:column="73">)<pos:position pos:line="2903" pos:column="74"/></operator></expr></argument>)<pos:position pos:line="2903" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="2903" pos:column="76"/></expr_stmt>
  <if pos:line="2904" pos:column="3">if<condition pos:line="2904" pos:column="5">( <expr><name pos:line="2904" pos:column="7">rc<pos:position pos:line="2904" pos:column="9"/></name></expr> )<pos:position pos:line="2904" pos:column="11"/></condition><then pos:line="2904" pos:column="11"> <block type="pseudo"><goto pos:line="2904" pos:column="12">goto <name pos:line="2904" pos:column="17">abort_due_to_error<pos:position pos:line="2904" pos:column="35"/></name>;<pos:position pos:line="2904" pos:column="36"/></goto></block></then></if>
  <break pos:line="2905" pos:column="3">break;<pos:position pos:line="2905" pos:column="9"/></break>
}<pos:position pos:line="2906" pos:column="2"/></block>

<comment type="block" pos:line="2908" pos:column="1">/* Opcode: OpenDup P1 P2 * * *
**
** Open a new cursor P1 that points to the same ephemeral table as
** cursor P2.  The P2 cursor must have been opened by a prior OP_OpenEphemeral
** opcode.  Only ephemeral cursors may be duplicated.
**
** Duplicate ephemeral cursors are used for self-joins of materialized views.
*/</comment>
<case pos:line="2916" pos:column="1">case <expr><name pos:line="2916" pos:column="6">OP_OpenDup<pos:position pos:line="2916" pos:column="16"/></name></expr>:<pos:position pos:line="2916" pos:column="17"/></case> <block pos:line="2916" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="2917" pos:column="3">VdbeCursor<pos:position pos:line="2917" pos:column="13"/></name> <modifier pos:line="2917" pos:column="14">*<pos:position pos:line="2917" pos:column="15"/></modifier></type><name pos:line="2917" pos:column="15">pOrig<pos:position pos:line="2917" pos:column="20"/></name></decl>;<pos:position pos:line="2917" pos:column="21"/></decl_stmt>    <comment type="block" pos:line="2917" pos:column="25">/* The original cursor to be duplicated */</comment>
  <decl_stmt><decl><type><name pos:line="2918" pos:column="3">VdbeCursor<pos:position pos:line="2918" pos:column="13"/></name> <modifier pos:line="2918" pos:column="14">*<pos:position pos:line="2918" pos:column="15"/></modifier></type><name pos:line="2918" pos:column="15">pCx<pos:position pos:line="2918" pos:column="18"/></name></decl>;<pos:position pos:line="2918" pos:column="19"/></decl_stmt>      <comment type="block" pos:line="2918" pos:column="25">/* The new cursor */</comment>

  <expr_stmt><expr><name pos:line="2920" pos:column="3">pOrig<pos:position pos:line="2920" pos:column="8"/></name> <operator pos:line="2920" pos:column="9">=<pos:position pos:line="2920" pos:column="10"/></operator> <name><name pos:line="2920" pos:column="11">p<pos:position pos:line="2920" pos:column="12"/></name><operator pos:line="2920" pos:column="12">-&gt;<pos:position pos:line="2920" pos:column="17"/></operator><name pos:line="2920" pos:column="14">apCsr<pos:position pos:line="2920" pos:column="19"/></name><index pos:line="2920" pos:column="19">[<expr><name><name pos:line="2920" pos:column="20">pOp<pos:position pos:line="2920" pos:column="23"/></name><operator pos:line="2920" pos:column="23">-&gt;<pos:position pos:line="2920" pos:column="28"/></operator><name pos:line="2920" pos:column="25">p2<pos:position pos:line="2920" pos:column="27"/></name></name></expr>]<pos:position pos:line="2920" pos:column="28"/></index></name></expr>;<pos:position pos:line="2920" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2921" pos:column="3">assert<pos:position pos:line="2921" pos:column="9"/></name><argument_list pos:line="2921" pos:column="9">( <argument><expr><name><name pos:line="2921" pos:column="11">pOrig<pos:position pos:line="2921" pos:column="16"/></name><operator pos:line="2921" pos:column="16">-&gt;<pos:position pos:line="2921" pos:column="21"/></operator><name pos:line="2921" pos:column="18">pBtx<pos:position pos:line="2921" pos:column="22"/></name></name><operator pos:line="2921" pos:column="22">!=<pos:position pos:line="2921" pos:column="24"/></operator><literal type="number" pos:line="2921" pos:column="24">0<pos:position pos:line="2921" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="2921" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="2921" pos:column="28"/></expr_stmt>  <comment type="block" pos:line="2921" pos:column="30">/* Only ephemeral cursors can be duplicated */</comment>

  <expr_stmt><expr><name pos:line="2923" pos:column="3">pCx<pos:position pos:line="2923" pos:column="6"/></name> <operator pos:line="2923" pos:column="7">=<pos:position pos:line="2923" pos:column="8"/></operator> <call><name pos:line="2923" pos:column="9">allocateCursor<pos:position pos:line="2923" pos:column="23"/></name><argument_list pos:line="2923" pos:column="23">(<argument><expr><name pos:line="2923" pos:column="24">p<pos:position pos:line="2923" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="2923" pos:column="27">pOp<pos:position pos:line="2923" pos:column="30"/></name><operator pos:line="2923" pos:column="30">-&gt;<pos:position pos:line="2923" pos:column="35"/></operator><name pos:line="2923" pos:column="32">p1<pos:position pos:line="2923" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2923" pos:column="36">pOrig<pos:position pos:line="2923" pos:column="41"/></name><operator pos:line="2923" pos:column="41">-&gt;<pos:position pos:line="2923" pos:column="46"/></operator><name pos:line="2923" pos:column="43">nField<pos:position pos:line="2923" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="2923" pos:column="51">-<pos:position pos:line="2923" pos:column="52"/></operator><literal type="number" pos:line="2923" pos:column="52">1<pos:position pos:line="2923" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="2923" pos:column="55">CURTYPE_BTREE<pos:position pos:line="2923" pos:column="68"/></name></expr></argument>)<pos:position pos:line="2923" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="2923" pos:column="70"/></expr_stmt>
  <if pos:line="2924" pos:column="3">if<condition pos:line="2924" pos:column="5">( <expr><name pos:line="2924" pos:column="7">pCx<pos:position pos:line="2924" pos:column="10"/></name><operator pos:line="2924" pos:column="10">==<pos:position pos:line="2924" pos:column="12"/></operator><literal type="number" pos:line="2924" pos:column="12">0<pos:position pos:line="2924" pos:column="13"/></literal></expr> )<pos:position pos:line="2924" pos:column="15"/></condition><then pos:line="2924" pos:column="15"> <block type="pseudo"><goto pos:line="2924" pos:column="16">goto <name pos:line="2924" pos:column="21">no_mem<pos:position pos:line="2924" pos:column="27"/></name>;<pos:position pos:line="2924" pos:column="28"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="2925" pos:column="3">pCx<pos:position pos:line="2925" pos:column="6"/></name><operator pos:line="2925" pos:column="6">-&gt;<pos:position pos:line="2925" pos:column="11"/></operator><name pos:line="2925" pos:column="8">nullRow<pos:position pos:line="2925" pos:column="15"/></name></name> <operator pos:line="2925" pos:column="16">=<pos:position pos:line="2925" pos:column="17"/></operator> <literal type="number" pos:line="2925" pos:column="18">1<pos:position pos:line="2925" pos:column="19"/></literal></expr>;<pos:position pos:line="2925" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2926" pos:column="3">pCx<pos:position pos:line="2926" pos:column="6"/></name><operator pos:line="2926" pos:column="6">-&gt;<pos:position pos:line="2926" pos:column="11"/></operator><name pos:line="2926" pos:column="8">isEphemeral<pos:position pos:line="2926" pos:column="19"/></name></name> <operator pos:line="2926" pos:column="20">=<pos:position pos:line="2926" pos:column="21"/></operator> <literal type="number" pos:line="2926" pos:column="22">1<pos:position pos:line="2926" pos:column="23"/></literal></expr>;<pos:position pos:line="2926" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2927" pos:column="3">pCx<pos:position pos:line="2927" pos:column="6"/></name><operator pos:line="2927" pos:column="6">-&gt;<pos:position pos:line="2927" pos:column="11"/></operator><name pos:line="2927" pos:column="8">pKeyInfo<pos:position pos:line="2927" pos:column="16"/></name></name> <operator pos:line="2927" pos:column="17">=<pos:position pos:line="2927" pos:column="18"/></operator> <name><name pos:line="2927" pos:column="19">pOrig<pos:position pos:line="2927" pos:column="24"/></name><operator pos:line="2927" pos:column="24">-&gt;<pos:position pos:line="2927" pos:column="29"/></operator><name pos:line="2927" pos:column="26">pKeyInfo<pos:position pos:line="2927" pos:column="34"/></name></name></expr>;<pos:position pos:line="2927" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2928" pos:column="3">pCx<pos:position pos:line="2928" pos:column="6"/></name><operator pos:line="2928" pos:column="6">-&gt;<pos:position pos:line="2928" pos:column="11"/></operator><name pos:line="2928" pos:column="8">isTable<pos:position pos:line="2928" pos:column="15"/></name></name> <operator pos:line="2928" pos:column="16">=<pos:position pos:line="2928" pos:column="17"/></operator> <name><name pos:line="2928" pos:column="18">pOrig<pos:position pos:line="2928" pos:column="23"/></name><operator pos:line="2928" pos:column="23">-&gt;<pos:position pos:line="2928" pos:column="28"/></operator><name pos:line="2928" pos:column="25">isTable<pos:position pos:line="2928" pos:column="32"/></name></name></expr>;<pos:position pos:line="2928" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2929" pos:column="3">rc<pos:position pos:line="2929" pos:column="5"/></name> <operator pos:line="2929" pos:column="6">=<pos:position pos:line="2929" pos:column="7"/></operator> <call><name pos:line="2929" pos:column="8">sqlite3BtreeCursor<pos:position pos:line="2929" pos:column="26"/></name><argument_list pos:line="2929" pos:column="26">(<argument><expr><name><name pos:line="2929" pos:column="27">pOrig<pos:position pos:line="2929" pos:column="32"/></name><operator pos:line="2929" pos:column="32">-&gt;<pos:position pos:line="2929" pos:column="37"/></operator><name pos:line="2929" pos:column="34">pBtx<pos:position pos:line="2929" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="2929" pos:column="40">MASTER_ROOT<pos:position pos:line="2929" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="2929" pos:column="53">BTREE_WRCSR<pos:position pos:line="2929" pos:column="64"/></name></expr></argument>,
                          <argument><expr><name><name pos:line="2930" pos:column="27">pCx<pos:position pos:line="2930" pos:column="30"/></name><operator pos:line="2930" pos:column="30">-&gt;<pos:position pos:line="2930" pos:column="35"/></operator><name pos:line="2930" pos:column="32">pKeyInfo<pos:position pos:line="2930" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2930" pos:column="42">pCx<pos:position pos:line="2930" pos:column="45"/></name><operator pos:line="2930" pos:column="45">-&gt;<pos:position pos:line="2930" pos:column="50"/></operator><name pos:line="2930" pos:column="47">uc<pos:position pos:line="2930" pos:column="49"/></name><operator pos:line="2930" pos:column="49">.<pos:position pos:line="2930" pos:column="50"/></operator><name pos:line="2930" pos:column="50">pCursor<pos:position pos:line="2930" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="2930" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="2930" pos:column="59"/></expr_stmt>
  <comment type="block" pos:line="2931" pos:column="3">/* The sqlite3BtreeCursor() routine can only fail for the first cursor
  ** opened for a database.  Since there is already an open cursor when this
  ** opcode is run, the sqlite3BtreeCursor() cannot fail */</comment>
  <expr_stmt><expr><call><name pos:line="2934" pos:column="3">assert<pos:position pos:line="2934" pos:column="9"/></name><argument_list pos:line="2934" pos:column="9">( <argument><expr><name pos:line="2934" pos:column="11">rc<pos:position pos:line="2934" pos:column="13"/></name><operator pos:line="2934" pos:column="13">==<pos:position pos:line="2934" pos:column="15"/></operator><name pos:line="2934" pos:column="15">SQLITE_OK<pos:position pos:line="2934" pos:column="24"/></name></expr></argument> )<pos:position pos:line="2934" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2934" pos:column="27"/></expr_stmt>
  <break pos:line="2935" pos:column="3">break;<pos:position pos:line="2935" pos:column="9"/></break>
}<pos:position pos:line="2936" pos:column="2"/></block>


<comment type="block" pos:line="2939" pos:column="1">/* Opcode: OpenEphemeral P1 P2 * P4 P5
** Synopsis: nColumn=P2
**
** Open a new cursor P1 to a transient table.
** The cursor is always opened read/write even if 
** the main database is read-only.  The ephemeral
** table is deleted automatically when the cursor is closed.
**
** P2 is the number of columns in the ephemeral table.
** The cursor points to a BTree table if P4==0 and to a BTree index
** if P4 is not 0.  If P4 is not NULL, it points to a KeyInfo structure
** that defines the format of keys in the index.
**
** The P5 parameter can be a mask of the BTREE_* flags defined
** in btree.h.  These flags control aspects of the operation of
** the btree.  The BTREE_OMIT_JOURNAL and BTREE_SINGLE flags are
** added automatically.
*/</comment>
<comment type="block" pos:line="2957" pos:column="1">/* Opcode: OpenAutoindex P1 P2 * P4 *
** Synopsis: nColumn=P2
**
** This opcode works the same as OP_OpenEphemeral.  It has a
** different name to distinguish its use.  Tables created using
** by this opcode will be used for automatically created transient
** indices in joins.
*/</comment>
<case pos:line="2965" pos:column="1">case <expr><name pos:line="2965" pos:column="6">OP_OpenAutoindex<pos:position pos:line="2965" pos:column="22"/></name></expr>:<pos:position pos:line="2965" pos:column="23"/></case> 
<case pos:line="2966" pos:column="1">case <expr><name pos:line="2966" pos:column="6">OP_OpenEphemeral<pos:position pos:line="2966" pos:column="22"/></name></expr>:<pos:position pos:line="2966" pos:column="23"/></case> <block pos:line="2966" pos:column="24">{
  <decl_stmt><decl><type><name pos:line="2967" pos:column="3">VdbeCursor<pos:position pos:line="2967" pos:column="13"/></name> <modifier pos:line="2967" pos:column="14">*<pos:position pos:line="2967" pos:column="15"/></modifier></type><name pos:line="2967" pos:column="15">pCx<pos:position pos:line="2967" pos:column="18"/></name></decl>;<pos:position pos:line="2967" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2968" pos:column="3">KeyInfo<pos:position pos:line="2968" pos:column="10"/></name> <modifier pos:line="2968" pos:column="11">*<pos:position pos:line="2968" pos:column="12"/></modifier></type><name pos:line="2968" pos:column="12">pKeyInfo<pos:position pos:line="2968" pos:column="20"/></name></decl>;<pos:position pos:line="2968" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><specifier pos:line="2970" pos:column="3">static<pos:position pos:line="2970" pos:column="9"/></specifier> <type><specifier pos:line="2970" pos:column="10">const<pos:position pos:line="2970" pos:column="15"/></specifier> <name pos:line="2970" pos:column="16">int<pos:position pos:line="2970" pos:column="19"/></name></type> <name pos:line="2970" pos:column="20">vfsFlags<pos:position pos:line="2970" pos:column="28"/></name> <init pos:line="2970" pos:column="29">= 
      <expr><name pos:line="2971" pos:column="7">SQLITE_OPEN_READWRITE<pos:position pos:line="2971" pos:column="28"/></name> <operator pos:line="2971" pos:column="29">|<pos:position pos:line="2971" pos:column="30"/></operator>
      <name pos:line="2972" pos:column="7">SQLITE_OPEN_CREATE<pos:position pos:line="2972" pos:column="25"/></name> <operator pos:line="2972" pos:column="26">|<pos:position pos:line="2972" pos:column="27"/></operator>
      <name pos:line="2973" pos:column="7">SQLITE_OPEN_EXCLUSIVE<pos:position pos:line="2973" pos:column="28"/></name> <operator pos:line="2973" pos:column="29">|<pos:position pos:line="2973" pos:column="30"/></operator>
      <name pos:line="2974" pos:column="7">SQLITE_OPEN_DELETEONCLOSE<pos:position pos:line="2974" pos:column="32"/></name> <operator pos:line="2974" pos:column="33">|<pos:position pos:line="2974" pos:column="34"/></operator>
      <name pos:line="2975" pos:column="7">SQLITE_OPEN_TRANSIENT_DB<pos:position pos:line="2975" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="2975" pos:column="32"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="2976" pos:column="3">assert<pos:position pos:line="2976" pos:column="9"/></name><argument_list pos:line="2976" pos:column="9">( <argument><expr><name><name pos:line="2976" pos:column="11">pOp<pos:position pos:line="2976" pos:column="14"/></name><operator pos:line="2976" pos:column="14">-&gt;<pos:position pos:line="2976" pos:column="19"/></operator><name pos:line="2976" pos:column="16">p1<pos:position pos:line="2976" pos:column="18"/></name></name><operator pos:line="2976" pos:column="18">&gt;=<pos:position pos:line="2976" pos:column="23"/></operator><literal type="number" pos:line="2976" pos:column="20">0<pos:position pos:line="2976" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="2976" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="2976" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2977" pos:column="3">assert<pos:position pos:line="2977" pos:column="9"/></name><argument_list pos:line="2977" pos:column="9">( <argument><expr><name><name pos:line="2977" pos:column="11">pOp<pos:position pos:line="2977" pos:column="14"/></name><operator pos:line="2977" pos:column="14">-&gt;<pos:position pos:line="2977" pos:column="19"/></operator><name pos:line="2977" pos:column="16">p2<pos:position pos:line="2977" pos:column="18"/></name></name><operator pos:line="2977" pos:column="18">&gt;=<pos:position pos:line="2977" pos:column="23"/></operator><literal type="number" pos:line="2977" pos:column="20">0<pos:position pos:line="2977" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="2977" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="2977" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2978" pos:column="3">pCx<pos:position pos:line="2978" pos:column="6"/></name> <operator pos:line="2978" pos:column="7">=<pos:position pos:line="2978" pos:column="8"/></operator> <call><name pos:line="2978" pos:column="9">allocateCursor<pos:position pos:line="2978" pos:column="23"/></name><argument_list pos:line="2978" pos:column="23">(<argument><expr><name pos:line="2978" pos:column="24">p<pos:position pos:line="2978" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="2978" pos:column="27">pOp<pos:position pos:line="2978" pos:column="30"/></name><operator pos:line="2978" pos:column="30">-&gt;<pos:position pos:line="2978" pos:column="35"/></operator><name pos:line="2978" pos:column="32">p1<pos:position pos:line="2978" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2978" pos:column="36">pOp<pos:position pos:line="2978" pos:column="39"/></name><operator pos:line="2978" pos:column="39">-&gt;<pos:position pos:line="2978" pos:column="44"/></operator><name pos:line="2978" pos:column="41">p2<pos:position pos:line="2978" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="2978" pos:column="45">-<pos:position pos:line="2978" pos:column="46"/></operator><literal type="number" pos:line="2978" pos:column="46">1<pos:position pos:line="2978" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="2978" pos:column="49">CURTYPE_BTREE<pos:position pos:line="2978" pos:column="62"/></name></expr></argument>)<pos:position pos:line="2978" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="2978" pos:column="64"/></expr_stmt>
  <if pos:line="2979" pos:column="3">if<condition pos:line="2979" pos:column="5">( <expr><name pos:line="2979" pos:column="7">pCx<pos:position pos:line="2979" pos:column="10"/></name><operator pos:line="2979" pos:column="10">==<pos:position pos:line="2979" pos:column="12"/></operator><literal type="number" pos:line="2979" pos:column="12">0<pos:position pos:line="2979" pos:column="13"/></literal></expr> )<pos:position pos:line="2979" pos:column="15"/></condition><then pos:line="2979" pos:column="15"> <block type="pseudo"><goto pos:line="2979" pos:column="16">goto <name pos:line="2979" pos:column="21">no_mem<pos:position pos:line="2979" pos:column="27"/></name>;<pos:position pos:line="2979" pos:column="28"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="2980" pos:column="3">pCx<pos:position pos:line="2980" pos:column="6"/></name><operator pos:line="2980" pos:column="6">-&gt;<pos:position pos:line="2980" pos:column="11"/></operator><name pos:line="2980" pos:column="8">nullRow<pos:position pos:line="2980" pos:column="15"/></name></name> <operator pos:line="2980" pos:column="16">=<pos:position pos:line="2980" pos:column="17"/></operator> <literal type="number" pos:line="2980" pos:column="18">1<pos:position pos:line="2980" pos:column="19"/></literal></expr>;<pos:position pos:line="2980" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2981" pos:column="3">pCx<pos:position pos:line="2981" pos:column="6"/></name><operator pos:line="2981" pos:column="6">-&gt;<pos:position pos:line="2981" pos:column="11"/></operator><name pos:line="2981" pos:column="8">isEphemeral<pos:position pos:line="2981" pos:column="19"/></name></name> <operator pos:line="2981" pos:column="20">=<pos:position pos:line="2981" pos:column="21"/></operator> <literal type="number" pos:line="2981" pos:column="22">1<pos:position pos:line="2981" pos:column="23"/></literal></expr>;<pos:position pos:line="2981" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2982" pos:column="3">rc<pos:position pos:line="2982" pos:column="5"/></name> <operator pos:line="2982" pos:column="6">=<pos:position pos:line="2982" pos:column="7"/></operator> <call><name pos:line="2982" pos:column="8">sqlite3BtreeOpen<pos:position pos:line="2982" pos:column="24"/></name><argument_list pos:line="2982" pos:column="24">(<argument><expr><name><name pos:line="2982" pos:column="25">db<pos:position pos:line="2982" pos:column="27"/></name><operator pos:line="2982" pos:column="27">-&gt;<pos:position pos:line="2982" pos:column="32"/></operator><name pos:line="2982" pos:column="29">pVfs<pos:position pos:line="2982" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="2982" pos:column="35">0<pos:position pos:line="2982" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="2982" pos:column="38">db<pos:position pos:line="2982" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="2982" pos:column="42">&amp;<pos:position pos:line="2982" pos:column="47"/></operator><name><name pos:line="2982" pos:column="43">pCx<pos:position pos:line="2982" pos:column="46"/></name><operator pos:line="2982" pos:column="46">-&gt;<pos:position pos:line="2982" pos:column="51"/></operator><name pos:line="2982" pos:column="48">pBtx<pos:position pos:line="2982" pos:column="52"/></name></name></expr></argument>, 
                        <argument><expr><name pos:line="2983" pos:column="25">BTREE_OMIT_JOURNAL<pos:position pos:line="2983" pos:column="43"/></name> <operator pos:line="2983" pos:column="44">|<pos:position pos:line="2983" pos:column="45"/></operator> <name pos:line="2983" pos:column="46">BTREE_SINGLE<pos:position pos:line="2983" pos:column="58"/></name> <operator pos:line="2983" pos:column="59">|<pos:position pos:line="2983" pos:column="60"/></operator> <name><name pos:line="2983" pos:column="61">pOp<pos:position pos:line="2983" pos:column="64"/></name><operator pos:line="2983" pos:column="64">-&gt;<pos:position pos:line="2983" pos:column="69"/></operator><name pos:line="2983" pos:column="66">p5<pos:position pos:line="2983" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="2983" pos:column="70">vfsFlags<pos:position pos:line="2983" pos:column="78"/></name></expr></argument>)<pos:position pos:line="2983" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="2983" pos:column="80"/></expr_stmt>
  <if pos:line="2984" pos:column="3">if<condition pos:line="2984" pos:column="5">( <expr><name pos:line="2984" pos:column="7">rc<pos:position pos:line="2984" pos:column="9"/></name><operator pos:line="2984" pos:column="9">==<pos:position pos:line="2984" pos:column="11"/></operator><name pos:line="2984" pos:column="11">SQLITE_OK<pos:position pos:line="2984" pos:column="20"/></name></expr> )<pos:position pos:line="2984" pos:column="22"/></condition><then><block pos:line="2984" pos:column="22">{
    <expr_stmt><expr><name pos:line="2985" pos:column="5">rc<pos:position pos:line="2985" pos:column="7"/></name> <operator pos:line="2985" pos:column="8">=<pos:position pos:line="2985" pos:column="9"/></operator> <call><name pos:line="2985" pos:column="10">sqlite3BtreeBeginTrans<pos:position pos:line="2985" pos:column="32"/></name><argument_list pos:line="2985" pos:column="32">(<argument><expr><name><name pos:line="2985" pos:column="33">pCx<pos:position pos:line="2985" pos:column="36"/></name><operator pos:line="2985" pos:column="36">-&gt;<pos:position pos:line="2985" pos:column="41"/></operator><name pos:line="2985" pos:column="38">pBtx<pos:position pos:line="2985" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="2985" pos:column="44">1<pos:position pos:line="2985" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="2985" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2985" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="2986" pos:column="4"/></block></then></if>
  <if pos:line="2987" pos:column="3">if<condition pos:line="2987" pos:column="5">( <expr><name pos:line="2987" pos:column="7">rc<pos:position pos:line="2987" pos:column="9"/></name><operator pos:line="2987" pos:column="9">==<pos:position pos:line="2987" pos:column="11"/></operator><name pos:line="2987" pos:column="11">SQLITE_OK<pos:position pos:line="2987" pos:column="20"/></name></expr> )<pos:position pos:line="2987" pos:column="22"/></condition><then><block pos:line="2987" pos:column="22">{
    <comment type="block" pos:line="2988" pos:column="5">/* If a transient index is required, create it by calling
    ** sqlite3BtreeCreateTable() with the BTREE_BLOBKEY flag before
    ** opening it. If a transient table is required, just use the
    ** automatically created table with root-page 1 (an BLOB_INTKEY table).
    */</comment>
    <if pos:line="2993" pos:column="5">if<condition pos:line="2993" pos:column="7">( <expr><operator pos:line="2993" pos:column="9">(<pos:position pos:line="2993" pos:column="10"/></operator><name><name pos:line="2993" pos:column="10">pCx<pos:position pos:line="2993" pos:column="13"/></name><operator pos:line="2993" pos:column="13">-&gt;<pos:position pos:line="2993" pos:column="18"/></operator><name pos:line="2993" pos:column="15">pKeyInfo<pos:position pos:line="2993" pos:column="23"/></name></name> <operator pos:line="2993" pos:column="24">=<pos:position pos:line="2993" pos:column="25"/></operator> <name pos:line="2993" pos:column="26">pKeyInfo<pos:position pos:line="2993" pos:column="34"/></name> <operator pos:line="2993" pos:column="35">=<pos:position pos:line="2993" pos:column="36"/></operator> <name><name pos:line="2993" pos:column="37">pOp<pos:position pos:line="2993" pos:column="40"/></name><operator pos:line="2993" pos:column="40">-&gt;<pos:position pos:line="2993" pos:column="45"/></operator><name pos:line="2993" pos:column="42">p4<pos:position pos:line="2993" pos:column="44"/></name><operator pos:line="2993" pos:column="44">.<pos:position pos:line="2993" pos:column="45"/></operator><name pos:line="2993" pos:column="45">pKeyInfo<pos:position pos:line="2993" pos:column="53"/></name></name><operator pos:line="2993" pos:column="53">)<pos:position pos:line="2993" pos:column="54"/></operator><operator pos:line="2993" pos:column="54">!=<pos:position pos:line="2993" pos:column="56"/></operator><literal type="number" pos:line="2993" pos:column="56">0<pos:position pos:line="2993" pos:column="57"/></literal></expr> )<pos:position pos:line="2993" pos:column="59"/></condition><then><block pos:line="2993" pos:column="59">{
      <decl_stmt><decl><type><name pos:line="2994" pos:column="7">int<pos:position pos:line="2994" pos:column="10"/></name></type> <name pos:line="2994" pos:column="11">pgno<pos:position pos:line="2994" pos:column="15"/></name></decl>;<pos:position pos:line="2994" pos:column="16"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="2995" pos:column="7">assert<pos:position pos:line="2995" pos:column="13"/></name><argument_list pos:line="2995" pos:column="13">( <argument><expr><name><name pos:line="2995" pos:column="15">pOp<pos:position pos:line="2995" pos:column="18"/></name><operator pos:line="2995" pos:column="18">-&gt;<pos:position pos:line="2995" pos:column="23"/></operator><name pos:line="2995" pos:column="20">p4type<pos:position pos:line="2995" pos:column="26"/></name></name><operator pos:line="2995" pos:column="26">==<pos:position pos:line="2995" pos:column="28"/></operator><name pos:line="2995" pos:column="28">P4_KEYINFO<pos:position pos:line="2995" pos:column="38"/></name></expr></argument> )<pos:position pos:line="2995" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2995" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2996" pos:column="7">rc<pos:position pos:line="2996" pos:column="9"/></name> <operator pos:line="2996" pos:column="10">=<pos:position pos:line="2996" pos:column="11"/></operator> <call><name pos:line="2996" pos:column="12">sqlite3BtreeCreateTable<pos:position pos:line="2996" pos:column="35"/></name><argument_list pos:line="2996" pos:column="35">(<argument><expr><name><name pos:line="2996" pos:column="36">pCx<pos:position pos:line="2996" pos:column="39"/></name><operator pos:line="2996" pos:column="39">-&gt;<pos:position pos:line="2996" pos:column="44"/></operator><name pos:line="2996" pos:column="41">pBtx<pos:position pos:line="2996" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="2996" pos:column="47">&amp;<pos:position pos:line="2996" pos:column="52"/></operator><name pos:line="2996" pos:column="48">pgno<pos:position pos:line="2996" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="2996" pos:column="54">BTREE_BLOBKEY<pos:position pos:line="2996" pos:column="67"/></name> <operator pos:line="2996" pos:column="68">|<pos:position pos:line="2996" pos:column="69"/></operator> <name><name pos:line="2996" pos:column="70">pOp<pos:position pos:line="2996" pos:column="73"/></name><operator pos:line="2996" pos:column="73">-&gt;<pos:position pos:line="2996" pos:column="78"/></operator><name pos:line="2996" pos:column="75">p5<pos:position pos:line="2996" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="2996" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="2996" pos:column="79"/></expr_stmt> 
      <if pos:line="2997" pos:column="7">if<condition pos:line="2997" pos:column="9">( <expr><name pos:line="2997" pos:column="11">rc<pos:position pos:line="2997" pos:column="13"/></name><operator pos:line="2997" pos:column="13">==<pos:position pos:line="2997" pos:column="15"/></operator><name pos:line="2997" pos:column="15">SQLITE_OK<pos:position pos:line="2997" pos:column="24"/></name></expr> )<pos:position pos:line="2997" pos:column="26"/></condition><then><block pos:line="2997" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="2998" pos:column="9">assert<pos:position pos:line="2998" pos:column="15"/></name><argument_list pos:line="2998" pos:column="15">( <argument><expr><name pos:line="2998" pos:column="17">pgno<pos:position pos:line="2998" pos:column="21"/></name><operator pos:line="2998" pos:column="21">==<pos:position pos:line="2998" pos:column="23"/></operator><name pos:line="2998" pos:column="23">MASTER_ROOT<pos:position pos:line="2998" pos:column="34"/></name><operator pos:line="2998" pos:column="34">+<pos:position pos:line="2998" pos:column="35"/></operator><literal type="number" pos:line="2998" pos:column="35">1<pos:position pos:line="2998" pos:column="36"/></literal></expr></argument> )<pos:position pos:line="2998" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2998" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="2999" pos:column="9">assert<pos:position pos:line="2999" pos:column="15"/></name><argument_list pos:line="2999" pos:column="15">( <argument><expr><name><name pos:line="2999" pos:column="17">pKeyInfo<pos:position pos:line="2999" pos:column="25"/></name><operator pos:line="2999" pos:column="25">-&gt;<pos:position pos:line="2999" pos:column="30"/></operator><name pos:line="2999" pos:column="27">db<pos:position pos:line="2999" pos:column="29"/></name></name><operator pos:line="2999" pos:column="29">==<pos:position pos:line="2999" pos:column="31"/></operator><name pos:line="2999" pos:column="31">db<pos:position pos:line="2999" pos:column="33"/></name></expr></argument> )<pos:position pos:line="2999" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2999" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="3000" pos:column="9">assert<pos:position pos:line="3000" pos:column="15"/></name><argument_list pos:line="3000" pos:column="15">( <argument><expr><name><name pos:line="3000" pos:column="17">pKeyInfo<pos:position pos:line="3000" pos:column="25"/></name><operator pos:line="3000" pos:column="25">-&gt;<pos:position pos:line="3000" pos:column="30"/></operator><name pos:line="3000" pos:column="27">enc<pos:position pos:line="3000" pos:column="30"/></name></name><operator pos:line="3000" pos:column="30">==<pos:position pos:line="3000" pos:column="32"/></operator><call><name pos:line="3000" pos:column="32">ENC<pos:position pos:line="3000" pos:column="35"/></name><argument_list pos:line="3000" pos:column="35">(<argument><expr><name pos:line="3000" pos:column="36">db<pos:position pos:line="3000" pos:column="38"/></name></expr></argument>)<pos:position pos:line="3000" pos:column="39"/></argument_list></call></expr></argument> )<pos:position pos:line="3000" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3000" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="3001" pos:column="9">rc<pos:position pos:line="3001" pos:column="11"/></name> <operator pos:line="3001" pos:column="12">=<pos:position pos:line="3001" pos:column="13"/></operator> <call><name pos:line="3001" pos:column="14">sqlite3BtreeCursor<pos:position pos:line="3001" pos:column="32"/></name><argument_list pos:line="3001" pos:column="32">(<argument><expr><name><name pos:line="3001" pos:column="33">pCx<pos:position pos:line="3001" pos:column="36"/></name><operator pos:line="3001" pos:column="36">-&gt;<pos:position pos:line="3001" pos:column="41"/></operator><name pos:line="3001" pos:column="38">pBtx<pos:position pos:line="3001" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="3001" pos:column="44">pgno<pos:position pos:line="3001" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="3001" pos:column="50">BTREE_WRCSR<pos:position pos:line="3001" pos:column="61"/></name></expr></argument>,
                                <argument><expr><name pos:line="3002" pos:column="33">pKeyInfo<pos:position pos:line="3002" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="3002" pos:column="43">pCx<pos:position pos:line="3002" pos:column="46"/></name><operator pos:line="3002" pos:column="46">-&gt;<pos:position pos:line="3002" pos:column="51"/></operator><name pos:line="3002" pos:column="48">uc<pos:position pos:line="3002" pos:column="50"/></name><operator pos:line="3002" pos:column="50">.<pos:position pos:line="3002" pos:column="51"/></operator><name pos:line="3002" pos:column="51">pCursor<pos:position pos:line="3002" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="3002" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="3002" pos:column="60"/></expr_stmt>
      }<pos:position pos:line="3003" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="3004" pos:column="7">pCx<pos:position pos:line="3004" pos:column="10"/></name><operator pos:line="3004" pos:column="10">-&gt;<pos:position pos:line="3004" pos:column="15"/></operator><name pos:line="3004" pos:column="12">isTable<pos:position pos:line="3004" pos:column="19"/></name></name> <operator pos:line="3004" pos:column="20">=<pos:position pos:line="3004" pos:column="21"/></operator> <literal type="number" pos:line="3004" pos:column="22">0<pos:position pos:line="3004" pos:column="23"/></literal></expr>;<pos:position pos:line="3004" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="3005" pos:column="6"/></block></then><else pos:line="3005" pos:column="6">else<block pos:line="3005" pos:column="10">{
      <expr_stmt><expr><name pos:line="3006" pos:column="7">rc<pos:position pos:line="3006" pos:column="9"/></name> <operator pos:line="3006" pos:column="10">=<pos:position pos:line="3006" pos:column="11"/></operator> <call><name pos:line="3006" pos:column="12">sqlite3BtreeCursor<pos:position pos:line="3006" pos:column="30"/></name><argument_list pos:line="3006" pos:column="30">(<argument><expr><name><name pos:line="3006" pos:column="31">pCx<pos:position pos:line="3006" pos:column="34"/></name><operator pos:line="3006" pos:column="34">-&gt;<pos:position pos:line="3006" pos:column="39"/></operator><name pos:line="3006" pos:column="36">pBtx<pos:position pos:line="3006" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="3006" pos:column="42">MASTER_ROOT<pos:position pos:line="3006" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="3006" pos:column="55">BTREE_WRCSR<pos:position pos:line="3006" pos:column="66"/></name></expr></argument>,
                              <argument><expr><literal type="number" pos:line="3007" pos:column="31">0<pos:position pos:line="3007" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="3007" pos:column="34">pCx<pos:position pos:line="3007" pos:column="37"/></name><operator pos:line="3007" pos:column="37">-&gt;<pos:position pos:line="3007" pos:column="42"/></operator><name pos:line="3007" pos:column="39">uc<pos:position pos:line="3007" pos:column="41"/></name><operator pos:line="3007" pos:column="41">.<pos:position pos:line="3007" pos:column="42"/></operator><name pos:line="3007" pos:column="42">pCursor<pos:position pos:line="3007" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="3007" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="3007" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="3008" pos:column="7">pCx<pos:position pos:line="3008" pos:column="10"/></name><operator pos:line="3008" pos:column="10">-&gt;<pos:position pos:line="3008" pos:column="15"/></operator><name pos:line="3008" pos:column="12">isTable<pos:position pos:line="3008" pos:column="19"/></name></name> <operator pos:line="3008" pos:column="20">=<pos:position pos:line="3008" pos:column="21"/></operator> <literal type="number" pos:line="3008" pos:column="22">1<pos:position pos:line="3008" pos:column="23"/></literal></expr>;<pos:position pos:line="3008" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="3009" pos:column="6"/></block></else></if>
  }<pos:position pos:line="3010" pos:column="4"/></block></then></if>
  <if pos:line="3011" pos:column="3">if<condition pos:line="3011" pos:column="5">( <expr><name pos:line="3011" pos:column="7">rc<pos:position pos:line="3011" pos:column="9"/></name></expr> )<pos:position pos:line="3011" pos:column="11"/></condition><then pos:line="3011" pos:column="11"> <block type="pseudo"><goto pos:line="3011" pos:column="12">goto <name pos:line="3011" pos:column="17">abort_due_to_error<pos:position pos:line="3011" pos:column="35"/></name>;<pos:position pos:line="3011" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="3012" pos:column="3">pCx<pos:position pos:line="3012" pos:column="6"/></name><operator pos:line="3012" pos:column="6">-&gt;<pos:position pos:line="3012" pos:column="11"/></operator><name pos:line="3012" pos:column="8">isOrdered<pos:position pos:line="3012" pos:column="17"/></name></name> <operator pos:line="3012" pos:column="18">=<pos:position pos:line="3012" pos:column="19"/></operator> <operator pos:line="3012" pos:column="20">(<pos:position pos:line="3012" pos:column="21"/></operator><name><name pos:line="3012" pos:column="21">pOp<pos:position pos:line="3012" pos:column="24"/></name><operator pos:line="3012" pos:column="24">-&gt;<pos:position pos:line="3012" pos:column="29"/></operator><name pos:line="3012" pos:column="26">p5<pos:position pos:line="3012" pos:column="28"/></name></name><operator pos:line="3012" pos:column="28">!=<pos:position pos:line="3012" pos:column="30"/></operator><name pos:line="3012" pos:column="30">BTREE_UNORDERED<pos:position pos:line="3012" pos:column="45"/></name><operator pos:line="3012" pos:column="45">)<pos:position pos:line="3012" pos:column="46"/></operator></expr>;<pos:position pos:line="3012" pos:column="47"/></expr_stmt>
  <break pos:line="3013" pos:column="3">break;<pos:position pos:line="3013" pos:column="9"/></break>
}<pos:position pos:line="3014" pos:column="2"/></block>

<comment type="block" pos:line="3016" pos:column="1">/* Opcode: SorterOpen P1 P2 P3 P4 *
**
** This opcode works like OP_OpenEphemeral except that it opens
** a transient index that is specifically designed to sort large
** tables using an external merge-sort algorithm.
**
** If argument P3 is non-zero, then it indicates that the sorter may
** assume that a stable sort considering the first P3 fields of each
** key is sufficient to produce the required results.
*/</comment>
<case pos:line="3026" pos:column="1">case <expr><name pos:line="3026" pos:column="6">OP_SorterOpen<pos:position pos:line="3026" pos:column="19"/></name></expr>:<pos:position pos:line="3026" pos:column="20"/></case> <block pos:line="3026" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="3027" pos:column="3">VdbeCursor<pos:position pos:line="3027" pos:column="13"/></name> <modifier pos:line="3027" pos:column="14">*<pos:position pos:line="3027" pos:column="15"/></modifier></type><name pos:line="3027" pos:column="15">pCx<pos:position pos:line="3027" pos:column="18"/></name></decl>;<pos:position pos:line="3027" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="3029" pos:column="3">assert<pos:position pos:line="3029" pos:column="9"/></name><argument_list pos:line="3029" pos:column="9">( <argument><expr><name><name pos:line="3029" pos:column="11">pOp<pos:position pos:line="3029" pos:column="14"/></name><operator pos:line="3029" pos:column="14">-&gt;<pos:position pos:line="3029" pos:column="19"/></operator><name pos:line="3029" pos:column="16">p1<pos:position pos:line="3029" pos:column="18"/></name></name><operator pos:line="3029" pos:column="18">&gt;=<pos:position pos:line="3029" pos:column="23"/></operator><literal type="number" pos:line="3029" pos:column="20">0<pos:position pos:line="3029" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="3029" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3029" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3030" pos:column="3">assert<pos:position pos:line="3030" pos:column="9"/></name><argument_list pos:line="3030" pos:column="9">( <argument><expr><name><name pos:line="3030" pos:column="11">pOp<pos:position pos:line="3030" pos:column="14"/></name><operator pos:line="3030" pos:column="14">-&gt;<pos:position pos:line="3030" pos:column="19"/></operator><name pos:line="3030" pos:column="16">p2<pos:position pos:line="3030" pos:column="18"/></name></name><operator pos:line="3030" pos:column="18">&gt;=<pos:position pos:line="3030" pos:column="23"/></operator><literal type="number" pos:line="3030" pos:column="20">0<pos:position pos:line="3030" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="3030" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3030" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3031" pos:column="3">pCx<pos:position pos:line="3031" pos:column="6"/></name> <operator pos:line="3031" pos:column="7">=<pos:position pos:line="3031" pos:column="8"/></operator> <call><name pos:line="3031" pos:column="9">allocateCursor<pos:position pos:line="3031" pos:column="23"/></name><argument_list pos:line="3031" pos:column="23">(<argument><expr><name pos:line="3031" pos:column="24">p<pos:position pos:line="3031" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="3031" pos:column="27">pOp<pos:position pos:line="3031" pos:column="30"/></name><operator pos:line="3031" pos:column="30">-&gt;<pos:position pos:line="3031" pos:column="35"/></operator><name pos:line="3031" pos:column="32">p1<pos:position pos:line="3031" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3031" pos:column="36">pOp<pos:position pos:line="3031" pos:column="39"/></name><operator pos:line="3031" pos:column="39">-&gt;<pos:position pos:line="3031" pos:column="44"/></operator><name pos:line="3031" pos:column="41">p2<pos:position pos:line="3031" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="3031" pos:column="45">-<pos:position pos:line="3031" pos:column="46"/></operator><literal type="number" pos:line="3031" pos:column="46">1<pos:position pos:line="3031" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="3031" pos:column="49">CURTYPE_SORTER<pos:position pos:line="3031" pos:column="63"/></name></expr></argument>)<pos:position pos:line="3031" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="3031" pos:column="65"/></expr_stmt>
  <if pos:line="3032" pos:column="3">if<condition pos:line="3032" pos:column="5">( <expr><name pos:line="3032" pos:column="7">pCx<pos:position pos:line="3032" pos:column="10"/></name><operator pos:line="3032" pos:column="10">==<pos:position pos:line="3032" pos:column="12"/></operator><literal type="number" pos:line="3032" pos:column="12">0<pos:position pos:line="3032" pos:column="13"/></literal></expr> )<pos:position pos:line="3032" pos:column="15"/></condition><then pos:line="3032" pos:column="15"> <block type="pseudo"><goto pos:line="3032" pos:column="16">goto <name pos:line="3032" pos:column="21">no_mem<pos:position pos:line="3032" pos:column="27"/></name>;<pos:position pos:line="3032" pos:column="28"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="3033" pos:column="3">pCx<pos:position pos:line="3033" pos:column="6"/></name><operator pos:line="3033" pos:column="6">-&gt;<pos:position pos:line="3033" pos:column="11"/></operator><name pos:line="3033" pos:column="8">pKeyInfo<pos:position pos:line="3033" pos:column="16"/></name></name> <operator pos:line="3033" pos:column="17">=<pos:position pos:line="3033" pos:column="18"/></operator> <name><name pos:line="3033" pos:column="19">pOp<pos:position pos:line="3033" pos:column="22"/></name><operator pos:line="3033" pos:column="22">-&gt;<pos:position pos:line="3033" pos:column="27"/></operator><name pos:line="3033" pos:column="24">p4<pos:position pos:line="3033" pos:column="26"/></name><operator pos:line="3033" pos:column="26">.<pos:position pos:line="3033" pos:column="27"/></operator><name pos:line="3033" pos:column="27">pKeyInfo<pos:position pos:line="3033" pos:column="35"/></name></name></expr>;<pos:position pos:line="3033" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3034" pos:column="3">assert<pos:position pos:line="3034" pos:column="9"/></name><argument_list pos:line="3034" pos:column="9">( <argument><expr><name><name pos:line="3034" pos:column="11">pCx<pos:position pos:line="3034" pos:column="14"/></name><operator pos:line="3034" pos:column="14">-&gt;<pos:position pos:line="3034" pos:column="19"/></operator><name pos:line="3034" pos:column="16">pKeyInfo<pos:position pos:line="3034" pos:column="24"/></name><operator pos:line="3034" pos:column="24">-&gt;<pos:position pos:line="3034" pos:column="29"/></operator><name pos:line="3034" pos:column="26">db<pos:position pos:line="3034" pos:column="28"/></name></name><operator pos:line="3034" pos:column="28">==<pos:position pos:line="3034" pos:column="30"/></operator><name pos:line="3034" pos:column="30">db<pos:position pos:line="3034" pos:column="32"/></name></expr></argument> )<pos:position pos:line="3034" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3034" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3035" pos:column="3">assert<pos:position pos:line="3035" pos:column="9"/></name><argument_list pos:line="3035" pos:column="9">( <argument><expr><name><name pos:line="3035" pos:column="11">pCx<pos:position pos:line="3035" pos:column="14"/></name><operator pos:line="3035" pos:column="14">-&gt;<pos:position pos:line="3035" pos:column="19"/></operator><name pos:line="3035" pos:column="16">pKeyInfo<pos:position pos:line="3035" pos:column="24"/></name><operator pos:line="3035" pos:column="24">-&gt;<pos:position pos:line="3035" pos:column="29"/></operator><name pos:line="3035" pos:column="26">enc<pos:position pos:line="3035" pos:column="29"/></name></name><operator pos:line="3035" pos:column="29">==<pos:position pos:line="3035" pos:column="31"/></operator><call><name pos:line="3035" pos:column="31">ENC<pos:position pos:line="3035" pos:column="34"/></name><argument_list pos:line="3035" pos:column="34">(<argument><expr><name pos:line="3035" pos:column="35">db<pos:position pos:line="3035" pos:column="37"/></name></expr></argument>)<pos:position pos:line="3035" pos:column="38"/></argument_list></call></expr></argument> )<pos:position pos:line="3035" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3035" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3036" pos:column="3">rc<pos:position pos:line="3036" pos:column="5"/></name> <operator pos:line="3036" pos:column="6">=<pos:position pos:line="3036" pos:column="7"/></operator> <call><name pos:line="3036" pos:column="8">sqlite3VdbeSorterInit<pos:position pos:line="3036" pos:column="29"/></name><argument_list pos:line="3036" pos:column="29">(<argument><expr><name pos:line="3036" pos:column="30">db<pos:position pos:line="3036" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="3036" pos:column="34">pOp<pos:position pos:line="3036" pos:column="37"/></name><operator pos:line="3036" pos:column="37">-&gt;<pos:position pos:line="3036" pos:column="42"/></operator><name pos:line="3036" pos:column="39">p3<pos:position pos:line="3036" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="3036" pos:column="43">pCx<pos:position pos:line="3036" pos:column="46"/></name></expr></argument>)<pos:position pos:line="3036" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="3036" pos:column="48"/></expr_stmt>
  <if pos:line="3037" pos:column="3">if<condition pos:line="3037" pos:column="5">( <expr><name pos:line="3037" pos:column="7">rc<pos:position pos:line="3037" pos:column="9"/></name></expr> )<pos:position pos:line="3037" pos:column="11"/></condition><then pos:line="3037" pos:column="11"> <block type="pseudo"><goto pos:line="3037" pos:column="12">goto <name pos:line="3037" pos:column="17">abort_due_to_error<pos:position pos:line="3037" pos:column="35"/></name>;<pos:position pos:line="3037" pos:column="36"/></goto></block></then></if>
  <break pos:line="3038" pos:column="3">break;<pos:position pos:line="3038" pos:column="9"/></break>
}<pos:position pos:line="3039" pos:column="2"/></block>

<comment type="block" pos:line="3041" pos:column="1">/* Opcode: SequenceTest P1 P2 * * *
** Synopsis: if( cursor[P1].ctr++ ) pc = P2
**
** P1 is a sorter cursor. If the sequence counter is currently zero, jump
** to P2. Regardless of whether or not the jump is taken, increment the
** the sequence value.
*/</comment>
<case pos:line="3048" pos:column="1">case <expr><name pos:line="3048" pos:column="6">OP_SequenceTest<pos:position pos:line="3048" pos:column="21"/></name></expr>:<pos:position pos:line="3048" pos:column="22"/></case> <block pos:line="3048" pos:column="23">{
  <decl_stmt><decl><type><name pos:line="3049" pos:column="3">VdbeCursor<pos:position pos:line="3049" pos:column="13"/></name> <modifier pos:line="3049" pos:column="14">*<pos:position pos:line="3049" pos:column="15"/></modifier></type><name pos:line="3049" pos:column="15">pC<pos:position pos:line="3049" pos:column="17"/></name></decl>;<pos:position pos:line="3049" pos:column="18"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="3050" pos:column="3">assert<pos:position pos:line="3050" pos:column="9"/></name><argument_list pos:line="3050" pos:column="9">( <argument><expr><name><name pos:line="3050" pos:column="11">pOp<pos:position pos:line="3050" pos:column="14"/></name><operator pos:line="3050" pos:column="14">-&gt;<pos:position pos:line="3050" pos:column="19"/></operator><name pos:line="3050" pos:column="16">p1<pos:position pos:line="3050" pos:column="18"/></name></name><operator pos:line="3050" pos:column="18">&gt;=<pos:position pos:line="3050" pos:column="23"/></operator><literal type="number" pos:line="3050" pos:column="20">0<pos:position pos:line="3050" pos:column="21"/></literal> <operator pos:line="3050" pos:column="22">&amp;&amp;<pos:position pos:line="3050" pos:column="32"/></operator> <name><name pos:line="3050" pos:column="25">pOp<pos:position pos:line="3050" pos:column="28"/></name><operator pos:line="3050" pos:column="28">-&gt;<pos:position pos:line="3050" pos:column="33"/></operator><name pos:line="3050" pos:column="30">p1<pos:position pos:line="3050" pos:column="32"/></name></name><operator pos:line="3050" pos:column="32">&lt;<pos:position pos:line="3050" pos:column="36"/></operator><name><name pos:line="3050" pos:column="33">p<pos:position pos:line="3050" pos:column="34"/></name><operator pos:line="3050" pos:column="34">-&gt;<pos:position pos:line="3050" pos:column="39"/></operator><name pos:line="3050" pos:column="36">nCursor<pos:position pos:line="3050" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3050" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3050" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3051" pos:column="3">pC<pos:position pos:line="3051" pos:column="5"/></name> <operator pos:line="3051" pos:column="6">=<pos:position pos:line="3051" pos:column="7"/></operator> <name><name pos:line="3051" pos:column="8">p<pos:position pos:line="3051" pos:column="9"/></name><operator pos:line="3051" pos:column="9">-&gt;<pos:position pos:line="3051" pos:column="14"/></operator><name pos:line="3051" pos:column="11">apCsr<pos:position pos:line="3051" pos:column="16"/></name><index pos:line="3051" pos:column="16">[<expr><name><name pos:line="3051" pos:column="17">pOp<pos:position pos:line="3051" pos:column="20"/></name><operator pos:line="3051" pos:column="20">-&gt;<pos:position pos:line="3051" pos:column="25"/></operator><name pos:line="3051" pos:column="22">p1<pos:position pos:line="3051" pos:column="24"/></name></name></expr>]<pos:position pos:line="3051" pos:column="25"/></index></name></expr>;<pos:position pos:line="3051" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3052" pos:column="3">assert<pos:position pos:line="3052" pos:column="9"/></name><argument_list pos:line="3052" pos:column="9">( <argument><expr><call><name pos:line="3052" pos:column="11">isSorter<pos:position pos:line="3052" pos:column="19"/></name><argument_list pos:line="3052" pos:column="19">(<argument><expr><name pos:line="3052" pos:column="20">pC<pos:position pos:line="3052" pos:column="22"/></name></expr></argument>)<pos:position pos:line="3052" pos:column="23"/></argument_list></call></expr></argument> )<pos:position pos:line="3052" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3052" pos:column="26"/></expr_stmt>
  <if pos:line="3053" pos:column="3">if<condition pos:line="3053" pos:column="5">( <expr><operator pos:line="3053" pos:column="7">(<pos:position pos:line="3053" pos:column="8"/></operator><name><name pos:line="3053" pos:column="8">pC<pos:position pos:line="3053" pos:column="10"/></name><operator pos:line="3053" pos:column="10">-&gt;<pos:position pos:line="3053" pos:column="15"/></operator><name pos:line="3053" pos:column="12">seqCount<pos:position pos:line="3053" pos:column="20"/></name></name><operator pos:line="3053" pos:column="20">++<pos:position pos:line="3053" pos:column="22"/></operator><operator pos:line="3053" pos:column="22">)<pos:position pos:line="3053" pos:column="23"/></operator><operator pos:line="3053" pos:column="23">==<pos:position pos:line="3053" pos:column="25"/></operator><literal type="number" pos:line="3053" pos:column="25">0<pos:position pos:line="3053" pos:column="26"/></literal></expr> )<pos:position pos:line="3053" pos:column="28"/></condition><then><block pos:line="3053" pos:column="28">{
    <goto pos:line="3054" pos:column="5">goto <name pos:line="3054" pos:column="10">jump_to_p2<pos:position pos:line="3054" pos:column="20"/></name>;<pos:position pos:line="3054" pos:column="21"/></goto>
  }<pos:position pos:line="3055" pos:column="4"/></block></then></if>
  <break pos:line="3056" pos:column="3">break;<pos:position pos:line="3056" pos:column="9"/></break>
}<pos:position pos:line="3057" pos:column="2"/></block>

<comment type="block" pos:line="3059" pos:column="1">/* Opcode: OpenPseudo P1 P2 P3 * *
** Synopsis: P3 columns in r[P2]
**
** Open a new cursor that points to a fake table that contains a single
** row of data.  The content of that one row is the content of memory
** register P2.  In other words, cursor P1 becomes an alias for the 
** MEM_Blob content contained in register P2.
**
** A pseudo-table created by this opcode is used to hold a single
** row output from the sorter so that the row can be decomposed into
** individual columns using the OP_Column opcode.  The OP_Column opcode
** is the only cursor opcode that works with a pseudo-table.
**
** P3 is the number of fields in the records that will be stored by
** the pseudo-table.
*/</comment>
<case pos:line="3075" pos:column="1">case <expr><name pos:line="3075" pos:column="6">OP_OpenPseudo<pos:position pos:line="3075" pos:column="19"/></name></expr>:<pos:position pos:line="3075" pos:column="20"/></case> <block pos:line="3075" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="3076" pos:column="3">VdbeCursor<pos:position pos:line="3076" pos:column="13"/></name> <modifier pos:line="3076" pos:column="14">*<pos:position pos:line="3076" pos:column="15"/></modifier></type><name pos:line="3076" pos:column="15">pCx<pos:position pos:line="3076" pos:column="18"/></name></decl>;<pos:position pos:line="3076" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="3078" pos:column="3">assert<pos:position pos:line="3078" pos:column="9"/></name><argument_list pos:line="3078" pos:column="9">( <argument><expr><name><name pos:line="3078" pos:column="11">pOp<pos:position pos:line="3078" pos:column="14"/></name><operator pos:line="3078" pos:column="14">-&gt;<pos:position pos:line="3078" pos:column="19"/></operator><name pos:line="3078" pos:column="16">p1<pos:position pos:line="3078" pos:column="18"/></name></name><operator pos:line="3078" pos:column="18">&gt;=<pos:position pos:line="3078" pos:column="23"/></operator><literal type="number" pos:line="3078" pos:column="20">0<pos:position pos:line="3078" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="3078" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3078" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3079" pos:column="3">assert<pos:position pos:line="3079" pos:column="9"/></name><argument_list pos:line="3079" pos:column="9">( <argument><expr><name><name pos:line="3079" pos:column="11">pOp<pos:position pos:line="3079" pos:column="14"/></name><operator pos:line="3079" pos:column="14">-&gt;<pos:position pos:line="3079" pos:column="19"/></operator><name pos:line="3079" pos:column="16">p3<pos:position pos:line="3079" pos:column="18"/></name></name><operator pos:line="3079" pos:column="18">&gt;=<pos:position pos:line="3079" pos:column="23"/></operator><literal type="number" pos:line="3079" pos:column="20">0<pos:position pos:line="3079" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="3079" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3079" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3080" pos:column="3">pCx<pos:position pos:line="3080" pos:column="6"/></name> <operator pos:line="3080" pos:column="7">=<pos:position pos:line="3080" pos:column="8"/></operator> <call><name pos:line="3080" pos:column="9">allocateCursor<pos:position pos:line="3080" pos:column="23"/></name><argument_list pos:line="3080" pos:column="23">(<argument><expr><name pos:line="3080" pos:column="24">p<pos:position pos:line="3080" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="3080" pos:column="27">pOp<pos:position pos:line="3080" pos:column="30"/></name><operator pos:line="3080" pos:column="30">-&gt;<pos:position pos:line="3080" pos:column="35"/></operator><name pos:line="3080" pos:column="32">p1<pos:position pos:line="3080" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3080" pos:column="36">pOp<pos:position pos:line="3080" pos:column="39"/></name><operator pos:line="3080" pos:column="39">-&gt;<pos:position pos:line="3080" pos:column="44"/></operator><name pos:line="3080" pos:column="41">p3<pos:position pos:line="3080" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="3080" pos:column="45">-<pos:position pos:line="3080" pos:column="46"/></operator><literal type="number" pos:line="3080" pos:column="46">1<pos:position pos:line="3080" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="3080" pos:column="49">CURTYPE_PSEUDO<pos:position pos:line="3080" pos:column="63"/></name></expr></argument>)<pos:position pos:line="3080" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="3080" pos:column="65"/></expr_stmt>
  <if pos:line="3081" pos:column="3">if<condition pos:line="3081" pos:column="5">( <expr><name pos:line="3081" pos:column="7">pCx<pos:position pos:line="3081" pos:column="10"/></name><operator pos:line="3081" pos:column="10">==<pos:position pos:line="3081" pos:column="12"/></operator><literal type="number" pos:line="3081" pos:column="12">0<pos:position pos:line="3081" pos:column="13"/></literal></expr> )<pos:position pos:line="3081" pos:column="15"/></condition><then pos:line="3081" pos:column="15"> <block type="pseudo"><goto pos:line="3081" pos:column="16">goto <name pos:line="3081" pos:column="21">no_mem<pos:position pos:line="3081" pos:column="27"/></name>;<pos:position pos:line="3081" pos:column="28"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="3082" pos:column="3">pCx<pos:position pos:line="3082" pos:column="6"/></name><operator pos:line="3082" pos:column="6">-&gt;<pos:position pos:line="3082" pos:column="11"/></operator><name pos:line="3082" pos:column="8">nullRow<pos:position pos:line="3082" pos:column="15"/></name></name> <operator pos:line="3082" pos:column="16">=<pos:position pos:line="3082" pos:column="17"/></operator> <literal type="number" pos:line="3082" pos:column="18">1<pos:position pos:line="3082" pos:column="19"/></literal></expr>;<pos:position pos:line="3082" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3083" pos:column="3">pCx<pos:position pos:line="3083" pos:column="6"/></name><operator pos:line="3083" pos:column="6">-&gt;<pos:position pos:line="3083" pos:column="11"/></operator><name pos:line="3083" pos:column="8">seekResult<pos:position pos:line="3083" pos:column="18"/></name></name> <operator pos:line="3083" pos:column="19">=<pos:position pos:line="3083" pos:column="20"/></operator> <name><name pos:line="3083" pos:column="21">pOp<pos:position pos:line="3083" pos:column="24"/></name><operator pos:line="3083" pos:column="24">-&gt;<pos:position pos:line="3083" pos:column="29"/></operator><name pos:line="3083" pos:column="26">p2<pos:position pos:line="3083" pos:column="28"/></name></name></expr>;<pos:position pos:line="3083" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3084" pos:column="3">pCx<pos:position pos:line="3084" pos:column="6"/></name><operator pos:line="3084" pos:column="6">-&gt;<pos:position pos:line="3084" pos:column="11"/></operator><name pos:line="3084" pos:column="8">isTable<pos:position pos:line="3084" pos:column="15"/></name></name> <operator pos:line="3084" pos:column="16">=<pos:position pos:line="3084" pos:column="17"/></operator> <literal type="number" pos:line="3084" pos:column="18">1<pos:position pos:line="3084" pos:column="19"/></literal></expr>;<pos:position pos:line="3084" pos:column="20"/></expr_stmt>
  <comment type="block" pos:line="3085" pos:column="3">/* Give this pseudo-cursor a fake BtCursor pointer so that pCx
  ** can be safely passed to sqlite3VdbeCursorMoveto().  This avoids a test
  ** for pCx-&gt;eCurType==CURTYPE_BTREE inside of sqlite3VdbeCursorMoveto()
  ** which is a performance optimization */</comment>
  <expr_stmt><expr><name><name pos:line="3089" pos:column="3">pCx<pos:position pos:line="3089" pos:column="6"/></name><operator pos:line="3089" pos:column="6">-&gt;<pos:position pos:line="3089" pos:column="11"/></operator><name pos:line="3089" pos:column="8">uc<pos:position pos:line="3089" pos:column="10"/></name><operator pos:line="3089" pos:column="10">.<pos:position pos:line="3089" pos:column="11"/></operator><name pos:line="3089" pos:column="11">pCursor<pos:position pos:line="3089" pos:column="18"/></name></name> <operator pos:line="3089" pos:column="19">=<pos:position pos:line="3089" pos:column="20"/></operator> <call><name pos:line="3089" pos:column="21">sqlite3BtreeFakeValidCursor<pos:position pos:line="3089" pos:column="48"/></name><argument_list pos:line="3089" pos:column="48">()<pos:position pos:line="3089" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="3089" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3090" pos:column="3">assert<pos:position pos:line="3090" pos:column="9"/></name><argument_list pos:line="3090" pos:column="9">( <argument><expr><name><name pos:line="3090" pos:column="11">pOp<pos:position pos:line="3090" pos:column="14"/></name><operator pos:line="3090" pos:column="14">-&gt;<pos:position pos:line="3090" pos:column="19"/></operator><name pos:line="3090" pos:column="16">p5<pos:position pos:line="3090" pos:column="18"/></name></name><operator pos:line="3090" pos:column="18">==<pos:position pos:line="3090" pos:column="20"/></operator><literal type="number" pos:line="3090" pos:column="20">0<pos:position pos:line="3090" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="3090" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3090" pos:column="24"/></expr_stmt>
  <break pos:line="3091" pos:column="3">break;<pos:position pos:line="3091" pos:column="9"/></break>
}<pos:position pos:line="3092" pos:column="2"/></block>

<comment type="block" pos:line="3094" pos:column="1">/* Opcode: Close P1 * * * *
**
** Close a cursor previously opened as P1.  If P1 is not
** currently open, this instruction is a no-op.
*/</comment>
<case pos:line="3099" pos:column="1">case <expr><name pos:line="3099" pos:column="6">OP_Close<pos:position pos:line="3099" pos:column="14"/></name></expr>:<pos:position pos:line="3099" pos:column="15"/></case> <block pos:line="3099" pos:column="16">{
  <expr_stmt><expr><call><name pos:line="3100" pos:column="3">assert<pos:position pos:line="3100" pos:column="9"/></name><argument_list pos:line="3100" pos:column="9">( <argument><expr><name><name pos:line="3100" pos:column="11">pOp<pos:position pos:line="3100" pos:column="14"/></name><operator pos:line="3100" pos:column="14">-&gt;<pos:position pos:line="3100" pos:column="19"/></operator><name pos:line="3100" pos:column="16">p1<pos:position pos:line="3100" pos:column="18"/></name></name><operator pos:line="3100" pos:column="18">&gt;=<pos:position pos:line="3100" pos:column="23"/></operator><literal type="number" pos:line="3100" pos:column="20">0<pos:position pos:line="3100" pos:column="21"/></literal> <operator pos:line="3100" pos:column="22">&amp;&amp;<pos:position pos:line="3100" pos:column="32"/></operator> <name><name pos:line="3100" pos:column="25">pOp<pos:position pos:line="3100" pos:column="28"/></name><operator pos:line="3100" pos:column="28">-&gt;<pos:position pos:line="3100" pos:column="33"/></operator><name pos:line="3100" pos:column="30">p1<pos:position pos:line="3100" pos:column="32"/></name></name><operator pos:line="3100" pos:column="32">&lt;<pos:position pos:line="3100" pos:column="36"/></operator><name><name pos:line="3100" pos:column="33">p<pos:position pos:line="3100" pos:column="34"/></name><operator pos:line="3100" pos:column="34">-&gt;<pos:position pos:line="3100" pos:column="39"/></operator><name pos:line="3100" pos:column="36">nCursor<pos:position pos:line="3100" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3100" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3100" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3101" pos:column="3">sqlite3VdbeFreeCursor<pos:position pos:line="3101" pos:column="24"/></name><argument_list pos:line="3101" pos:column="24">(<argument><expr><name pos:line="3101" pos:column="25">p<pos:position pos:line="3101" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="3101" pos:column="28">p<pos:position pos:line="3101" pos:column="29"/></name><operator pos:line="3101" pos:column="29">-&gt;<pos:position pos:line="3101" pos:column="34"/></operator><name pos:line="3101" pos:column="31">apCsr<pos:position pos:line="3101" pos:column="36"/></name><index pos:line="3101" pos:column="36">[<expr><name><name pos:line="3101" pos:column="37">pOp<pos:position pos:line="3101" pos:column="40"/></name><operator pos:line="3101" pos:column="40">-&gt;<pos:position pos:line="3101" pos:column="45"/></operator><name pos:line="3101" pos:column="42">p1<pos:position pos:line="3101" pos:column="44"/></name></name></expr>]<pos:position pos:line="3101" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="3101" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="3101" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3102" pos:column="3">p<pos:position pos:line="3102" pos:column="4"/></name><operator pos:line="3102" pos:column="4">-&gt;<pos:position pos:line="3102" pos:column="9"/></operator><name pos:line="3102" pos:column="6">apCsr<pos:position pos:line="3102" pos:column="11"/></name><index pos:line="3102" pos:column="11">[<expr><name><name pos:line="3102" pos:column="12">pOp<pos:position pos:line="3102" pos:column="15"/></name><operator pos:line="3102" pos:column="15">-&gt;<pos:position pos:line="3102" pos:column="20"/></operator><name pos:line="3102" pos:column="17">p1<pos:position pos:line="3102" pos:column="19"/></name></name></expr>]<pos:position pos:line="3102" pos:column="20"/></index></name> <operator pos:line="3102" pos:column="21">=<pos:position pos:line="3102" pos:column="22"/></operator> <literal type="number" pos:line="3102" pos:column="23">0<pos:position pos:line="3102" pos:column="24"/></literal></expr>;<pos:position pos:line="3102" pos:column="25"/></expr_stmt>
  <break pos:line="3103" pos:column="3">break;<pos:position pos:line="3103" pos:column="9"/></break>
}<pos:position pos:line="3104" pos:column="2"/></block>

<cpp:ifdef pos:line="3106" pos:column="1">#<cpp:directive pos:line="3106" pos:column="2">ifdef<pos:position pos:line="3106" pos:column="7"/></cpp:directive> <name pos:line="3106" pos:column="8">SQLITE_ENABLE_COLUMN_USED_MASK<pos:position pos:line="3106" pos:column="38"/></name></cpp:ifdef>
<comment type="block" pos:line="3107" pos:column="1">/* Opcode: ColumnsUsed P1 * * P4 *
**
** This opcode (which only exists if SQLite was compiled with
** SQLITE_ENABLE_COLUMN_USED_MASK) identifies which columns of the
** table or index for cursor P1 are used.  P4 is a 64-bit integer
** (P4_INT64) in which the first 63 bits are one for each of the
** first 63 columns of the table or index that are actually used
** by the cursor.  The high-order bit is set if any column after
** the 64th is used.
*/</comment>
<case pos:line="3117" pos:column="1">case <expr><name pos:line="3117" pos:column="6">OP_ColumnsUsed<pos:position pos:line="3117" pos:column="20"/></name></expr>:<pos:position pos:line="3117" pos:column="21"/></case> <block pos:line="3117" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="3118" pos:column="3">VdbeCursor<pos:position pos:line="3118" pos:column="13"/></name> <modifier pos:line="3118" pos:column="14">*<pos:position pos:line="3118" pos:column="15"/></modifier></type><name pos:line="3118" pos:column="15">pC<pos:position pos:line="3118" pos:column="17"/></name></decl>;<pos:position pos:line="3118" pos:column="18"/></decl_stmt>
  <expr_stmt><expr><name pos:line="3119" pos:column="3">pC<pos:position pos:line="3119" pos:column="5"/></name> <operator pos:line="3119" pos:column="6">=<pos:position pos:line="3119" pos:column="7"/></operator> <name><name pos:line="3119" pos:column="8">p<pos:position pos:line="3119" pos:column="9"/></name><operator pos:line="3119" pos:column="9">-&gt;<pos:position pos:line="3119" pos:column="14"/></operator><name pos:line="3119" pos:column="11">apCsr<pos:position pos:line="3119" pos:column="16"/></name><index pos:line="3119" pos:column="16">[<expr><name><name pos:line="3119" pos:column="17">pOp<pos:position pos:line="3119" pos:column="20"/></name><operator pos:line="3119" pos:column="20">-&gt;<pos:position pos:line="3119" pos:column="25"/></operator><name pos:line="3119" pos:column="22">p1<pos:position pos:line="3119" pos:column="24"/></name></name></expr>]<pos:position pos:line="3119" pos:column="25"/></index></name></expr>;<pos:position pos:line="3119" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3120" pos:column="3">assert<pos:position pos:line="3120" pos:column="9"/></name><argument_list pos:line="3120" pos:column="9">( <argument><expr><name><name pos:line="3120" pos:column="11">pC<pos:position pos:line="3120" pos:column="13"/></name><operator pos:line="3120" pos:column="13">-&gt;<pos:position pos:line="3120" pos:column="18"/></operator><name pos:line="3120" pos:column="15">eCurType<pos:position pos:line="3120" pos:column="23"/></name></name><operator pos:line="3120" pos:column="23">==<pos:position pos:line="3120" pos:column="25"/></operator><name pos:line="3120" pos:column="25">CURTYPE_BTREE<pos:position pos:line="3120" pos:column="38"/></name></expr></argument> )<pos:position pos:line="3120" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3120" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3121" pos:column="3">pC<pos:position pos:line="3121" pos:column="5"/></name><operator pos:line="3121" pos:column="5">-&gt;<pos:position pos:line="3121" pos:column="10"/></operator><name pos:line="3121" pos:column="7">maskUsed<pos:position pos:line="3121" pos:column="15"/></name></name> <operator pos:line="3121" pos:column="16">=<pos:position pos:line="3121" pos:column="17"/></operator> <operator pos:line="3121" pos:column="18">*<pos:position pos:line="3121" pos:column="19"/></operator><operator pos:line="3121" pos:column="19">(<pos:position pos:line="3121" pos:column="20"/></operator><name pos:line="3121" pos:column="20">u64<pos:position pos:line="3121" pos:column="23"/></name><operator pos:line="3121" pos:column="23">*<pos:position pos:line="3121" pos:column="24"/></operator><operator pos:line="3121" pos:column="24">)<pos:position pos:line="3121" pos:column="25"/></operator><name><name pos:line="3121" pos:column="25">pOp<pos:position pos:line="3121" pos:column="28"/></name><operator pos:line="3121" pos:column="28">-&gt;<pos:position pos:line="3121" pos:column="33"/></operator><name pos:line="3121" pos:column="30">p4<pos:position pos:line="3121" pos:column="32"/></name><operator pos:line="3121" pos:column="32">.<pos:position pos:line="3121" pos:column="33"/></operator><name pos:line="3121" pos:column="33">pI64<pos:position pos:line="3121" pos:column="37"/></name></name></expr>;<pos:position pos:line="3121" pos:column="38"/></expr_stmt>
  <break pos:line="3122" pos:column="3">break;<pos:position pos:line="3122" pos:column="9"/></break>
}<pos:position pos:line="3123" pos:column="2"/></block>
<cpp:endif pos:line="3124" pos:column="1">#<cpp:directive pos:line="3124" pos:column="2">endif<pos:position pos:line="3124" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="3126" pos:column="1">/* Opcode: SeekGE P1 P2 P3 P4 *
** Synopsis: key=r[P3@P4]
**
** If cursor P1 refers to an SQL table (B-Tree that uses integer keys), 
** use the value in register P3 as the key.  If cursor P1 refers 
** to an SQL index, then P3 is the first in an array of P4 registers 
** that are used as an unpacked index key. 
**
** Reposition cursor P1 so that  it points to the smallest entry that 
** is greater than or equal to the key value. If there are no records 
** greater than or equal to the key and P2 is not zero, then jump to P2.
**
** If the cursor P1 was opened using the OPFLAG_SEEKEQ flag, then this
** opcode will always land on a record that equally equals the key, or
** else jump immediately to P2.  When the cursor is OPFLAG_SEEKEQ, this
** opcode must be followed by an IdxLE opcode with the same arguments.
** The IdxLE opcode will be skipped if this opcode succeeds, but the
** IdxLE opcode will be used on subsequent loop iterations.
**
** This opcode leaves the cursor configured to move in forward order,
** from the beginning toward the end.  In other words, the cursor is
** configured to use Next, not Prev.
**
** See also: Found, NotFound, SeekLt, SeekGt, SeekLe
*/</comment>
<comment type="block" pos:line="3151" pos:column="1">/* Opcode: SeekGT P1 P2 P3 P4 *
** Synopsis: key=r[P3@P4]
**
** If cursor P1 refers to an SQL table (B-Tree that uses integer keys), 
** use the value in register P3 as a key. If cursor P1 refers 
** to an SQL index, then P3 is the first in an array of P4 registers 
** that are used as an unpacked index key. 
**
** Reposition cursor P1 so that  it points to the smallest entry that 
** is greater than the key value. If there are no records greater than 
** the key and P2 is not zero, then jump to P2.
**
** This opcode leaves the cursor configured to move in forward order,
** from the beginning toward the end.  In other words, the cursor is
** configured to use Next, not Prev.
**
** See also: Found, NotFound, SeekLt, SeekGe, SeekLe
*/</comment>
<comment type="block" pos:line="3169" pos:column="1">/* Opcode: SeekLT P1 P2 P3 P4 * 
** Synopsis: key=r[P3@P4]
**
** If cursor P1 refers to an SQL table (B-Tree that uses integer keys), 
** use the value in register P3 as a key. If cursor P1 refers 
** to an SQL index, then P3 is the first in an array of P4 registers 
** that are used as an unpacked index key. 
**
** Reposition cursor P1 so that  it points to the largest entry that 
** is less than the key value. If there are no records less than 
** the key and P2 is not zero, then jump to P2.
**
** This opcode leaves the cursor configured to move in reverse order,
** from the end toward the beginning.  In other words, the cursor is
** configured to use Prev, not Next.
**
** See also: Found, NotFound, SeekGt, SeekGe, SeekLe
*/</comment>
<comment type="block" pos:line="3187" pos:column="1">/* Opcode: SeekLE P1 P2 P3 P4 *
** Synopsis: key=r[P3@P4]
**
** If cursor P1 refers to an SQL table (B-Tree that uses integer keys), 
** use the value in register P3 as a key. If cursor P1 refers 
** to an SQL index, then P3 is the first in an array of P4 registers 
** that are used as an unpacked index key. 
**
** Reposition cursor P1 so that it points to the largest entry that 
** is less than or equal to the key value. If there are no records 
** less than or equal to the key and P2 is not zero, then jump to P2.
**
** This opcode leaves the cursor configured to move in reverse order,
** from the end toward the beginning.  In other words, the cursor is
** configured to use Prev, not Next.
**
** If the cursor P1 was opened using the OPFLAG_SEEKEQ flag, then this
** opcode will always land on a record that equally equals the key, or
** else jump immediately to P2.  When the cursor is OPFLAG_SEEKEQ, this
** opcode must be followed by an IdxGE opcode with the same arguments.
** The IdxGE opcode will be skipped if this opcode succeeds, but the
** IdxGE opcode will be used on subsequent loop iterations.
**
** See also: Found, NotFound, SeekGt, SeekGe, SeekLt
*/</comment>
<case pos:line="3212" pos:column="1">case <expr><name pos:line="3212" pos:column="6">OP_SeekLT<pos:position pos:line="3212" pos:column="15"/></name></expr>:<pos:position pos:line="3212" pos:column="16"/></case>         <comment type="block" pos:line="3212" pos:column="25">/* jump, in3 */</comment>
<case pos:line="3213" pos:column="1">case <expr><name pos:line="3213" pos:column="6">OP_SeekLE<pos:position pos:line="3213" pos:column="15"/></name></expr>:<pos:position pos:line="3213" pos:column="16"/></case>         <comment type="block" pos:line="3213" pos:column="25">/* jump, in3 */</comment>
<case pos:line="3214" pos:column="1">case <expr><name pos:line="3214" pos:column="6">OP_SeekGE<pos:position pos:line="3214" pos:column="15"/></name></expr>:<pos:position pos:line="3214" pos:column="16"/></case>         <comment type="block" pos:line="3214" pos:column="25">/* jump, in3 */</comment>
<case pos:line="3215" pos:column="1">case <expr><name pos:line="3215" pos:column="6">OP_SeekGT<pos:position pos:line="3215" pos:column="15"/></name></expr>:<pos:position pos:line="3215" pos:column="16"/></case> <block pos:line="3215" pos:column="17">{       <comment type="block" pos:line="3215" pos:column="25">/* jump, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="3216" pos:column="3">int<pos:position pos:line="3216" pos:column="6"/></name></type> <name pos:line="3216" pos:column="7">res<pos:position pos:line="3216" pos:column="10"/></name></decl>;<pos:position pos:line="3216" pos:column="11"/></decl_stmt>           <comment type="block" pos:line="3216" pos:column="22">/* Comparison result */</comment>
  <decl_stmt><decl><type><name pos:line="3217" pos:column="3">int<pos:position pos:line="3217" pos:column="6"/></name></type> <name pos:line="3217" pos:column="7">oc<pos:position pos:line="3217" pos:column="9"/></name></decl>;<pos:position pos:line="3217" pos:column="10"/></decl_stmt>            <comment type="block" pos:line="3217" pos:column="22">/* Opcode */</comment>
  <decl_stmt><decl><type><name pos:line="3218" pos:column="3">VdbeCursor<pos:position pos:line="3218" pos:column="13"/></name> <modifier pos:line="3218" pos:column="14">*<pos:position pos:line="3218" pos:column="15"/></modifier></type><name pos:line="3218" pos:column="15">pC<pos:position pos:line="3218" pos:column="17"/></name></decl>;<pos:position pos:line="3218" pos:column="18"/></decl_stmt>    <comment type="block" pos:line="3218" pos:column="22">/* The cursor to seek */</comment>
  <decl_stmt><decl><type><name pos:line="3219" pos:column="3">UnpackedRecord<pos:position pos:line="3219" pos:column="17"/></name></type> <name pos:line="3219" pos:column="18">r<pos:position pos:line="3219" pos:column="19"/></name></decl>;<pos:position pos:line="3219" pos:column="20"/></decl_stmt>  <comment type="block" pos:line="3219" pos:column="22">/* The key to seek for */</comment>
  <decl_stmt><decl><type><name pos:line="3220" pos:column="3">int<pos:position pos:line="3220" pos:column="6"/></name></type> <name pos:line="3220" pos:column="7">nField<pos:position pos:line="3220" pos:column="13"/></name></decl>;<pos:position pos:line="3220" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="3220" pos:column="22">/* Number of columns or fields in the key */</comment>
  <decl_stmt><decl><type><name pos:line="3221" pos:column="3">i64<pos:position pos:line="3221" pos:column="6"/></name></type> <name pos:line="3221" pos:column="7">iKey<pos:position pos:line="3221" pos:column="11"/></name></decl>;<pos:position pos:line="3221" pos:column="12"/></decl_stmt>          <comment type="block" pos:line="3221" pos:column="22">/* The rowid we are to seek to */</comment>
  <decl_stmt><decl><type><name pos:line="3222" pos:column="3">int<pos:position pos:line="3222" pos:column="6"/></name></type> <name pos:line="3222" pos:column="7">eqOnly<pos:position pos:line="3222" pos:column="13"/></name></decl>;<pos:position pos:line="3222" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="3222" pos:column="22">/* Only interested in == results */</comment>

  <expr_stmt><expr><call><name pos:line="3224" pos:column="3">assert<pos:position pos:line="3224" pos:column="9"/></name><argument_list pos:line="3224" pos:column="9">( <argument><expr><name><name pos:line="3224" pos:column="11">pOp<pos:position pos:line="3224" pos:column="14"/></name><operator pos:line="3224" pos:column="14">-&gt;<pos:position pos:line="3224" pos:column="19"/></operator><name pos:line="3224" pos:column="16">p1<pos:position pos:line="3224" pos:column="18"/></name></name><operator pos:line="3224" pos:column="18">&gt;=<pos:position pos:line="3224" pos:column="23"/></operator><literal type="number" pos:line="3224" pos:column="20">0<pos:position pos:line="3224" pos:column="21"/></literal> <operator pos:line="3224" pos:column="22">&amp;&amp;<pos:position pos:line="3224" pos:column="32"/></operator> <name><name pos:line="3224" pos:column="25">pOp<pos:position pos:line="3224" pos:column="28"/></name><operator pos:line="3224" pos:column="28">-&gt;<pos:position pos:line="3224" pos:column="33"/></operator><name pos:line="3224" pos:column="30">p1<pos:position pos:line="3224" pos:column="32"/></name></name><operator pos:line="3224" pos:column="32">&lt;<pos:position pos:line="3224" pos:column="36"/></operator><name><name pos:line="3224" pos:column="33">p<pos:position pos:line="3224" pos:column="34"/></name><operator pos:line="3224" pos:column="34">-&gt;<pos:position pos:line="3224" pos:column="39"/></operator><name pos:line="3224" pos:column="36">nCursor<pos:position pos:line="3224" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3224" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3224" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3225" pos:column="3">assert<pos:position pos:line="3225" pos:column="9"/></name><argument_list pos:line="3225" pos:column="9">( <argument><expr><name><name pos:line="3225" pos:column="11">pOp<pos:position pos:line="3225" pos:column="14"/></name><operator pos:line="3225" pos:column="14">-&gt;<pos:position pos:line="3225" pos:column="19"/></operator><name pos:line="3225" pos:column="16">p2<pos:position pos:line="3225" pos:column="18"/></name></name><operator pos:line="3225" pos:column="18">!=<pos:position pos:line="3225" pos:column="20"/></operator><literal type="number" pos:line="3225" pos:column="20">0<pos:position pos:line="3225" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="3225" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3225" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3226" pos:column="3">pC<pos:position pos:line="3226" pos:column="5"/></name> <operator pos:line="3226" pos:column="6">=<pos:position pos:line="3226" pos:column="7"/></operator> <name><name pos:line="3226" pos:column="8">p<pos:position pos:line="3226" pos:column="9"/></name><operator pos:line="3226" pos:column="9">-&gt;<pos:position pos:line="3226" pos:column="14"/></operator><name pos:line="3226" pos:column="11">apCsr<pos:position pos:line="3226" pos:column="16"/></name><index pos:line="3226" pos:column="16">[<expr><name><name pos:line="3226" pos:column="17">pOp<pos:position pos:line="3226" pos:column="20"/></name><operator pos:line="3226" pos:column="20">-&gt;<pos:position pos:line="3226" pos:column="25"/></operator><name pos:line="3226" pos:column="22">p1<pos:position pos:line="3226" pos:column="24"/></name></name></expr>]<pos:position pos:line="3226" pos:column="25"/></index></name></expr>;<pos:position pos:line="3226" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3227" pos:column="3">assert<pos:position pos:line="3227" pos:column="9"/></name><argument_list pos:line="3227" pos:column="9">( <argument><expr><name pos:line="3227" pos:column="11">pC<pos:position pos:line="3227" pos:column="13"/></name><operator pos:line="3227" pos:column="13">!=<pos:position pos:line="3227" pos:column="15"/></operator><literal type="number" pos:line="3227" pos:column="15">0<pos:position pos:line="3227" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3227" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3227" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3228" pos:column="3">assert<pos:position pos:line="3228" pos:column="9"/></name><argument_list pos:line="3228" pos:column="9">( <argument><expr><name><name pos:line="3228" pos:column="11">pC<pos:position pos:line="3228" pos:column="13"/></name><operator pos:line="3228" pos:column="13">-&gt;<pos:position pos:line="3228" pos:column="18"/></operator><name pos:line="3228" pos:column="15">eCurType<pos:position pos:line="3228" pos:column="23"/></name></name><operator pos:line="3228" pos:column="23">==<pos:position pos:line="3228" pos:column="25"/></operator><name pos:line="3228" pos:column="25">CURTYPE_BTREE<pos:position pos:line="3228" pos:column="38"/></name></expr></argument> )<pos:position pos:line="3228" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3228" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3229" pos:column="3">assert<pos:position pos:line="3229" pos:column="9"/></name><argument_list pos:line="3229" pos:column="9">( <argument><expr><name pos:line="3229" pos:column="11">OP_SeekLE<pos:position pos:line="3229" pos:column="20"/></name> <operator pos:line="3229" pos:column="21">==<pos:position pos:line="3229" pos:column="23"/></operator> <name pos:line="3229" pos:column="24">OP_SeekLT<pos:position pos:line="3229" pos:column="33"/></name><operator pos:line="3229" pos:column="33">+<pos:position pos:line="3229" pos:column="34"/></operator><literal type="number" pos:line="3229" pos:column="34">1<pos:position pos:line="3229" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="3229" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3229" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3230" pos:column="3">assert<pos:position pos:line="3230" pos:column="9"/></name><argument_list pos:line="3230" pos:column="9">( <argument><expr><name pos:line="3230" pos:column="11">OP_SeekGE<pos:position pos:line="3230" pos:column="20"/></name> <operator pos:line="3230" pos:column="21">==<pos:position pos:line="3230" pos:column="23"/></operator> <name pos:line="3230" pos:column="24">OP_SeekLT<pos:position pos:line="3230" pos:column="33"/></name><operator pos:line="3230" pos:column="33">+<pos:position pos:line="3230" pos:column="34"/></operator><literal type="number" pos:line="3230" pos:column="34">2<pos:position pos:line="3230" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="3230" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3230" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3231" pos:column="3">assert<pos:position pos:line="3231" pos:column="9"/></name><argument_list pos:line="3231" pos:column="9">( <argument><expr><name pos:line="3231" pos:column="11">OP_SeekGT<pos:position pos:line="3231" pos:column="20"/></name> <operator pos:line="3231" pos:column="21">==<pos:position pos:line="3231" pos:column="23"/></operator> <name pos:line="3231" pos:column="24">OP_SeekLT<pos:position pos:line="3231" pos:column="33"/></name><operator pos:line="3231" pos:column="33">+<pos:position pos:line="3231" pos:column="34"/></operator><literal type="number" pos:line="3231" pos:column="34">3<pos:position pos:line="3231" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="3231" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3231" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3232" pos:column="3">assert<pos:position pos:line="3232" pos:column="9"/></name><argument_list pos:line="3232" pos:column="9">( <argument><expr><name><name pos:line="3232" pos:column="11">pC<pos:position pos:line="3232" pos:column="13"/></name><operator pos:line="3232" pos:column="13">-&gt;<pos:position pos:line="3232" pos:column="18"/></operator><name pos:line="3232" pos:column="15">isOrdered<pos:position pos:line="3232" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="3232" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3232" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3233" pos:column="3">assert<pos:position pos:line="3233" pos:column="9"/></name><argument_list pos:line="3233" pos:column="9">( <argument><expr><name><name pos:line="3233" pos:column="11">pC<pos:position pos:line="3233" pos:column="13"/></name><operator pos:line="3233" pos:column="13">-&gt;<pos:position pos:line="3233" pos:column="18"/></operator><name pos:line="3233" pos:column="15">uc<pos:position pos:line="3233" pos:column="17"/></name><operator pos:line="3233" pos:column="17">.<pos:position pos:line="3233" pos:column="18"/></operator><name pos:line="3233" pos:column="18">pCursor<pos:position pos:line="3233" pos:column="25"/></name></name><operator pos:line="3233" pos:column="25">!=<pos:position pos:line="3233" pos:column="27"/></operator><literal type="number" pos:line="3233" pos:column="27">0<pos:position pos:line="3233" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="3233" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3233" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3234" pos:column="3">oc<pos:position pos:line="3234" pos:column="5"/></name> <operator pos:line="3234" pos:column="6">=<pos:position pos:line="3234" pos:column="7"/></operator> <name><name pos:line="3234" pos:column="8">pOp<pos:position pos:line="3234" pos:column="11"/></name><operator pos:line="3234" pos:column="11">-&gt;<pos:position pos:line="3234" pos:column="16"/></operator><name pos:line="3234" pos:column="13">opcode<pos:position pos:line="3234" pos:column="19"/></name></name></expr>;<pos:position pos:line="3234" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3235" pos:column="3">eqOnly<pos:position pos:line="3235" pos:column="9"/></name> <operator pos:line="3235" pos:column="10">=<pos:position pos:line="3235" pos:column="11"/></operator> <literal type="number" pos:line="3235" pos:column="12">0<pos:position pos:line="3235" pos:column="13"/></literal></expr>;<pos:position pos:line="3235" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3236" pos:column="3">pC<pos:position pos:line="3236" pos:column="5"/></name><operator pos:line="3236" pos:column="5">-&gt;<pos:position pos:line="3236" pos:column="10"/></operator><name pos:line="3236" pos:column="7">nullRow<pos:position pos:line="3236" pos:column="14"/></name></name> <operator pos:line="3236" pos:column="15">=<pos:position pos:line="3236" pos:column="16"/></operator> <literal type="number" pos:line="3236" pos:column="17">0<pos:position pos:line="3236" pos:column="18"/></literal></expr>;<pos:position pos:line="3236" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="3237" pos:column="1">#<cpp:directive pos:line="3237" pos:column="2">ifdef<pos:position pos:line="3237" pos:column="7"/></cpp:directive> <name pos:line="3237" pos:column="8">SQLITE_DEBUG<pos:position pos:line="3237" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="3238" pos:column="3">pC<pos:position pos:line="3238" pos:column="5"/></name><operator pos:line="3238" pos:column="5">-&gt;<pos:position pos:line="3238" pos:column="10"/></operator><name pos:line="3238" pos:column="7">seekOp<pos:position pos:line="3238" pos:column="13"/></name></name> <operator pos:line="3238" pos:column="14">=<pos:position pos:line="3238" pos:column="15"/></operator> <name><name pos:line="3238" pos:column="16">pOp<pos:position pos:line="3238" pos:column="19"/></name><operator pos:line="3238" pos:column="19">-&gt;<pos:position pos:line="3238" pos:column="24"/></operator><name pos:line="3238" pos:column="21">opcode<pos:position pos:line="3238" pos:column="27"/></name></name></expr>;<pos:position pos:line="3238" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="3239" pos:column="1">#<cpp:directive pos:line="3239" pos:column="2">endif<pos:position pos:line="3239" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="3241" pos:column="3">if<condition pos:line="3241" pos:column="5">( <expr><name><name pos:line="3241" pos:column="7">pC<pos:position pos:line="3241" pos:column="9"/></name><operator pos:line="3241" pos:column="9">-&gt;<pos:position pos:line="3241" pos:column="14"/></operator><name pos:line="3241" pos:column="11">isTable<pos:position pos:line="3241" pos:column="18"/></name></name></expr> )<pos:position pos:line="3241" pos:column="20"/></condition><then><block pos:line="3241" pos:column="20">{
    <comment type="block" pos:line="3242" pos:column="5">/* The BTREE_SEEK_EQ flag is only set on index cursors */</comment>
    <expr_stmt><expr><call><name pos:line="3243" pos:column="5">assert<pos:position pos:line="3243" pos:column="11"/></name><argument_list pos:line="3243" pos:column="11">( <argument><expr><call><name pos:line="3243" pos:column="13">sqlite3BtreeCursorHasHint<pos:position pos:line="3243" pos:column="38"/></name><argument_list pos:line="3243" pos:column="38">(<argument><expr><name><name pos:line="3243" pos:column="39">pC<pos:position pos:line="3243" pos:column="41"/></name><operator pos:line="3243" pos:column="41">-&gt;<pos:position pos:line="3243" pos:column="46"/></operator><name pos:line="3243" pos:column="43">uc<pos:position pos:line="3243" pos:column="45"/></name><operator pos:line="3243" pos:column="45">.<pos:position pos:line="3243" pos:column="46"/></operator><name pos:line="3243" pos:column="46">pCursor<pos:position pos:line="3243" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="3243" pos:column="55">BTREE_SEEK_EQ<pos:position pos:line="3243" pos:column="68"/></name></expr></argument>)<pos:position pos:line="3243" pos:column="69"/></argument_list></call><operator pos:line="3243" pos:column="69">==<pos:position pos:line="3243" pos:column="71"/></operator><literal type="number" pos:line="3243" pos:column="71">0<pos:position pos:line="3243" pos:column="72"/></literal>
              <operator pos:line="3244" pos:column="15">||<pos:position pos:line="3244" pos:column="17"/></operator> <name pos:line="3244" pos:column="18">CORRUPT_DB<pos:position pos:line="3244" pos:column="28"/></name></expr></argument> )<pos:position pos:line="3244" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3244" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="3246" pos:column="5">/* The input value in P3 might be of any type: integer, real, string,
    ** blob, or NULL.  But it needs to be an integer before we can do
    ** the seek, so convert it. */</comment>
    <expr_stmt><expr><name pos:line="3249" pos:column="5">pIn3<pos:position pos:line="3249" pos:column="9"/></name> <operator pos:line="3249" pos:column="10">=<pos:position pos:line="3249" pos:column="11"/></operator> <operator pos:line="3249" pos:column="12">&amp;<pos:position pos:line="3249" pos:column="17"/></operator><name><name pos:line="3249" pos:column="13">aMem<pos:position pos:line="3249" pos:column="17"/></name><index pos:line="3249" pos:column="17">[<expr><name><name pos:line="3249" pos:column="18">pOp<pos:position pos:line="3249" pos:column="21"/></name><operator pos:line="3249" pos:column="21">-&gt;<pos:position pos:line="3249" pos:column="26"/></operator><name pos:line="3249" pos:column="23">p3<pos:position pos:line="3249" pos:column="25"/></name></name></expr>]<pos:position pos:line="3249" pos:column="26"/></index></name></expr>;<pos:position pos:line="3249" pos:column="27"/></expr_stmt>
    <if pos:line="3250" pos:column="5">if<condition pos:line="3250" pos:column="7">( <expr><operator pos:line="3250" pos:column="9">(<pos:position pos:line="3250" pos:column="10"/></operator><name><name pos:line="3250" pos:column="10">pIn3<pos:position pos:line="3250" pos:column="14"/></name><operator pos:line="3250" pos:column="14">-&gt;<pos:position pos:line="3250" pos:column="19"/></operator><name pos:line="3250" pos:column="16">flags<pos:position pos:line="3250" pos:column="21"/></name></name> <operator pos:line="3250" pos:column="22">&amp;<pos:position pos:line="3250" pos:column="27"/></operator> <operator pos:line="3250" pos:column="24">(<pos:position pos:line="3250" pos:column="25"/></operator><name pos:line="3250" pos:column="25">MEM_Int<pos:position pos:line="3250" pos:column="32"/></name><operator pos:line="3250" pos:column="32">|<pos:position pos:line="3250" pos:column="33"/></operator><name pos:line="3250" pos:column="33">MEM_Real<pos:position pos:line="3250" pos:column="41"/></name><operator pos:line="3250" pos:column="41">|<pos:position pos:line="3250" pos:column="42"/></operator><name pos:line="3250" pos:column="42">MEM_Str<pos:position pos:line="3250" pos:column="49"/></name><operator pos:line="3250" pos:column="49">)<pos:position pos:line="3250" pos:column="50"/></operator><operator pos:line="3250" pos:column="50">)<pos:position pos:line="3250" pos:column="51"/></operator><operator pos:line="3250" pos:column="51">==<pos:position pos:line="3250" pos:column="53"/></operator><name pos:line="3250" pos:column="53">MEM_Str<pos:position pos:line="3250" pos:column="60"/></name></expr> )<pos:position pos:line="3250" pos:column="62"/></condition><then><block pos:line="3250" pos:column="62">{
      <expr_stmt><expr><call><name pos:line="3251" pos:column="7">applyNumericAffinity<pos:position pos:line="3251" pos:column="27"/></name><argument_list pos:line="3251" pos:column="27">(<argument><expr><name pos:line="3251" pos:column="28">pIn3<pos:position pos:line="3251" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3251" pos:column="34">0<pos:position pos:line="3251" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="3251" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3251" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="3252" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="3253" pos:column="5">iKey<pos:position pos:line="3253" pos:column="9"/></name> <operator pos:line="3253" pos:column="10">=<pos:position pos:line="3253" pos:column="11"/></operator> <call><name pos:line="3253" pos:column="12">sqlite3VdbeIntValue<pos:position pos:line="3253" pos:column="31"/></name><argument_list pos:line="3253" pos:column="31">(<argument><expr><name pos:line="3253" pos:column="32">pIn3<pos:position pos:line="3253" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3253" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3253" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="3255" pos:column="5">/* If the P3 value could not be converted into an integer without
    ** loss of information, then special processing is required... */</comment>
    <if pos:line="3257" pos:column="5">if<condition pos:line="3257" pos:column="7">( <expr><operator pos:line="3257" pos:column="9">(<pos:position pos:line="3257" pos:column="10"/></operator><name><name pos:line="3257" pos:column="10">pIn3<pos:position pos:line="3257" pos:column="14"/></name><operator pos:line="3257" pos:column="14">-&gt;<pos:position pos:line="3257" pos:column="19"/></operator><name pos:line="3257" pos:column="16">flags<pos:position pos:line="3257" pos:column="21"/></name></name> <operator pos:line="3257" pos:column="22">&amp;<pos:position pos:line="3257" pos:column="27"/></operator> <name pos:line="3257" pos:column="24">MEM_Int<pos:position pos:line="3257" pos:column="31"/></name><operator pos:line="3257" pos:column="31">)<pos:position pos:line="3257" pos:column="32"/></operator><operator pos:line="3257" pos:column="32">==<pos:position pos:line="3257" pos:column="34"/></operator><literal type="number" pos:line="3257" pos:column="34">0<pos:position pos:line="3257" pos:column="35"/></literal></expr> )<pos:position pos:line="3257" pos:column="37"/></condition><then><block pos:line="3257" pos:column="37">{
      <if pos:line="3258" pos:column="7">if<condition pos:line="3258" pos:column="9">( <expr><operator pos:line="3258" pos:column="11">(<pos:position pos:line="3258" pos:column="12"/></operator><name><name pos:line="3258" pos:column="12">pIn3<pos:position pos:line="3258" pos:column="16"/></name><operator pos:line="3258" pos:column="16">-&gt;<pos:position pos:line="3258" pos:column="21"/></operator><name pos:line="3258" pos:column="18">flags<pos:position pos:line="3258" pos:column="23"/></name></name> <operator pos:line="3258" pos:column="24">&amp;<pos:position pos:line="3258" pos:column="29"/></operator> <name pos:line="3258" pos:column="26">MEM_Real<pos:position pos:line="3258" pos:column="34"/></name><operator pos:line="3258" pos:column="34">)<pos:position pos:line="3258" pos:column="35"/></operator><operator pos:line="3258" pos:column="35">==<pos:position pos:line="3258" pos:column="37"/></operator><literal type="number" pos:line="3258" pos:column="37">0<pos:position pos:line="3258" pos:column="38"/></literal></expr> )<pos:position pos:line="3258" pos:column="40"/></condition><then><block pos:line="3258" pos:column="40">{
        <comment type="block" pos:line="3259" pos:column="9">/* If the P3 value cannot be converted into any kind of a number,
        ** then the seek is not possible, so jump to P2 */</comment>
        <expr_stmt><expr><call><name pos:line="3261" pos:column="9">VdbeBranchTaken<pos:position pos:line="3261" pos:column="24"/></name><argument_list pos:line="3261" pos:column="24">(<argument><expr><literal type="number" pos:line="3261" pos:column="25">1<pos:position pos:line="3261" pos:column="26"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="3261" pos:column="27">2<pos:position pos:line="3261" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="3261" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="3261" pos:column="30"/></expr_stmt> <goto pos:line="3261" pos:column="31">goto <name pos:line="3261" pos:column="36">jump_to_p2<pos:position pos:line="3261" pos:column="46"/></name>;<pos:position pos:line="3261" pos:column="47"/></goto>
        <break pos:line="3262" pos:column="9">break;<pos:position pos:line="3262" pos:column="15"/></break>
      }<pos:position pos:line="3263" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="3265" pos:column="7">/* If the approximation iKey is larger than the actual real search
      ** term, substitute &gt;= for &gt; and &lt; for &lt;=. e.g. if the search term
      ** is 4.9 and the integer approximation 5:
      **
      **        (x &gt;  4.9)    -&gt;     (x &gt;= 5)
      **        (x &lt;= 4.9)    -&gt;     (x &lt;  5)
      */</comment>
      <if pos:line="3272" pos:column="7">if<condition pos:line="3272" pos:column="9">( <expr><name><name pos:line="3272" pos:column="11">pIn3<pos:position pos:line="3272" pos:column="15"/></name><operator pos:line="3272" pos:column="15">-&gt;<pos:position pos:line="3272" pos:column="20"/></operator><name pos:line="3272" pos:column="17">u<pos:position pos:line="3272" pos:column="18"/></name><operator pos:line="3272" pos:column="18">.<pos:position pos:line="3272" pos:column="19"/></operator><name pos:line="3272" pos:column="19">r<pos:position pos:line="3272" pos:column="20"/></name></name><operator pos:line="3272" pos:column="20">&lt;<pos:position pos:line="3272" pos:column="24"/></operator><operator pos:line="3272" pos:column="21">(<pos:position pos:line="3272" pos:column="22"/></operator><name pos:line="3272" pos:column="22">double<pos:position pos:line="3272" pos:column="28"/></name><operator pos:line="3272" pos:column="28">)<pos:position pos:line="3272" pos:column="29"/></operator><name pos:line="3272" pos:column="29">iKey<pos:position pos:line="3272" pos:column="33"/></name></expr> )<pos:position pos:line="3272" pos:column="35"/></condition><then><block pos:line="3272" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="3273" pos:column="9">assert<pos:position pos:line="3273" pos:column="15"/></name><argument_list pos:line="3273" pos:column="15">( <argument><expr><name pos:line="3273" pos:column="17">OP_SeekGE<pos:position pos:line="3273" pos:column="26"/></name><operator pos:line="3273" pos:column="26">==<pos:position pos:line="3273" pos:column="28"/></operator><operator pos:line="3273" pos:column="28">(<pos:position pos:line="3273" pos:column="29"/></operator><name pos:line="3273" pos:column="29">OP_SeekGT<pos:position pos:line="3273" pos:column="38"/></name><operator pos:line="3273" pos:column="38">-<pos:position pos:line="3273" pos:column="39"/></operator><literal type="number" pos:line="3273" pos:column="39">1<pos:position pos:line="3273" pos:column="40"/></literal><operator pos:line="3273" pos:column="40">)<pos:position pos:line="3273" pos:column="41"/></operator></expr></argument> )<pos:position pos:line="3273" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="3273" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="3274" pos:column="9">assert<pos:position pos:line="3274" pos:column="15"/></name><argument_list pos:line="3274" pos:column="15">( <argument><expr><name pos:line="3274" pos:column="17">OP_SeekLT<pos:position pos:line="3274" pos:column="26"/></name><operator pos:line="3274" pos:column="26">==<pos:position pos:line="3274" pos:column="28"/></operator><operator pos:line="3274" pos:column="28">(<pos:position pos:line="3274" pos:column="29"/></operator><name pos:line="3274" pos:column="29">OP_SeekLE<pos:position pos:line="3274" pos:column="38"/></name><operator pos:line="3274" pos:column="38">-<pos:position pos:line="3274" pos:column="39"/></operator><literal type="number" pos:line="3274" pos:column="39">1<pos:position pos:line="3274" pos:column="40"/></literal><operator pos:line="3274" pos:column="40">)<pos:position pos:line="3274" pos:column="41"/></operator></expr></argument> )<pos:position pos:line="3274" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="3274" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="3275" pos:column="9">assert<pos:position pos:line="3275" pos:column="15"/></name><argument_list pos:line="3275" pos:column="15">( <argument><expr><operator pos:line="3275" pos:column="17">(<pos:position pos:line="3275" pos:column="18"/></operator><name pos:line="3275" pos:column="18">OP_SeekLE<pos:position pos:line="3275" pos:column="27"/></name> <operator pos:line="3275" pos:column="28">&amp;<pos:position pos:line="3275" pos:column="33"/></operator> <literal type="number" pos:line="3275" pos:column="30">0x0001<pos:position pos:line="3275" pos:column="36"/></literal><operator pos:line="3275" pos:column="36">)<pos:position pos:line="3275" pos:column="37"/></operator><operator pos:line="3275" pos:column="37">==<pos:position pos:line="3275" pos:column="39"/></operator><operator pos:line="3275" pos:column="39">(<pos:position pos:line="3275" pos:column="40"/></operator><name pos:line="3275" pos:column="40">OP_SeekGT<pos:position pos:line="3275" pos:column="49"/></name> <operator pos:line="3275" pos:column="50">&amp;<pos:position pos:line="3275" pos:column="55"/></operator> <literal type="number" pos:line="3275" pos:column="52">0x0001<pos:position pos:line="3275" pos:column="58"/></literal><operator pos:line="3275" pos:column="58">)<pos:position pos:line="3275" pos:column="59"/></operator></expr></argument> )<pos:position pos:line="3275" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="3275" pos:column="62"/></expr_stmt>
        <if pos:line="3276" pos:column="9">if<condition pos:line="3276" pos:column="11">( <expr><operator pos:line="3276" pos:column="13">(<pos:position pos:line="3276" pos:column="14"/></operator><name pos:line="3276" pos:column="14">oc<pos:position pos:line="3276" pos:column="16"/></name> <operator pos:line="3276" pos:column="17">&amp;<pos:position pos:line="3276" pos:column="22"/></operator> <literal type="number" pos:line="3276" pos:column="19">0x0001<pos:position pos:line="3276" pos:column="25"/></literal><operator pos:line="3276" pos:column="25">)<pos:position pos:line="3276" pos:column="26"/></operator><operator pos:line="3276" pos:column="26">==<pos:position pos:line="3276" pos:column="28"/></operator><operator pos:line="3276" pos:column="28">(<pos:position pos:line="3276" pos:column="29"/></operator><name pos:line="3276" pos:column="29">OP_SeekGT<pos:position pos:line="3276" pos:column="38"/></name> <operator pos:line="3276" pos:column="39">&amp;<pos:position pos:line="3276" pos:column="44"/></operator> <literal type="number" pos:line="3276" pos:column="41">0x0001<pos:position pos:line="3276" pos:column="47"/></literal><operator pos:line="3276" pos:column="47">)<pos:position pos:line="3276" pos:column="48"/></operator></expr> )<pos:position pos:line="3276" pos:column="50"/></condition><then pos:line="3276" pos:column="50"> <block type="pseudo"><expr_stmt><expr><name pos:line="3276" pos:column="51">oc<pos:position pos:line="3276" pos:column="53"/></name><operator pos:line="3276" pos:column="53">--<pos:position pos:line="3276" pos:column="55"/></operator></expr>;<pos:position pos:line="3276" pos:column="56"/></expr_stmt></block></then></if>
      }<pos:position pos:line="3277" pos:column="8"/></block></then>

      <comment type="block" pos:line="3279" pos:column="7">/* If the approximation iKey is smaller than the actual real search
      ** term, substitute &lt;= for &lt; and &gt; for &gt;=.  */</comment>
      <elseif pos:line="3281" pos:column="7">else <if pos:line="3281" pos:column="12">if<condition pos:line="3281" pos:column="14">( <expr><name><name pos:line="3281" pos:column="16">pIn3<pos:position pos:line="3281" pos:column="20"/></name><operator pos:line="3281" pos:column="20">-&gt;<pos:position pos:line="3281" pos:column="25"/></operator><name pos:line="3281" pos:column="22">u<pos:position pos:line="3281" pos:column="23"/></name><operator pos:line="3281" pos:column="23">.<pos:position pos:line="3281" pos:column="24"/></operator><name pos:line="3281" pos:column="24">r<pos:position pos:line="3281" pos:column="25"/></name></name><operator pos:line="3281" pos:column="25">&gt;<pos:position pos:line="3281" pos:column="29"/></operator><operator pos:line="3281" pos:column="26">(<pos:position pos:line="3281" pos:column="27"/></operator><name pos:line="3281" pos:column="27">double<pos:position pos:line="3281" pos:column="33"/></name><operator pos:line="3281" pos:column="33">)<pos:position pos:line="3281" pos:column="34"/></operator><name pos:line="3281" pos:column="34">iKey<pos:position pos:line="3281" pos:column="38"/></name></expr> )<pos:position pos:line="3281" pos:column="40"/></condition><then><block pos:line="3281" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="3282" pos:column="9">assert<pos:position pos:line="3282" pos:column="15"/></name><argument_list pos:line="3282" pos:column="15">( <argument><expr><name pos:line="3282" pos:column="17">OP_SeekLE<pos:position pos:line="3282" pos:column="26"/></name><operator pos:line="3282" pos:column="26">==<pos:position pos:line="3282" pos:column="28"/></operator><operator pos:line="3282" pos:column="28">(<pos:position pos:line="3282" pos:column="29"/></operator><name pos:line="3282" pos:column="29">OP_SeekLT<pos:position pos:line="3282" pos:column="38"/></name><operator pos:line="3282" pos:column="38">+<pos:position pos:line="3282" pos:column="39"/></operator><literal type="number" pos:line="3282" pos:column="39">1<pos:position pos:line="3282" pos:column="40"/></literal><operator pos:line="3282" pos:column="40">)<pos:position pos:line="3282" pos:column="41"/></operator></expr></argument> )<pos:position pos:line="3282" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="3282" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="3283" pos:column="9">assert<pos:position pos:line="3283" pos:column="15"/></name><argument_list pos:line="3283" pos:column="15">( <argument><expr><name pos:line="3283" pos:column="17">OP_SeekGT<pos:position pos:line="3283" pos:column="26"/></name><operator pos:line="3283" pos:column="26">==<pos:position pos:line="3283" pos:column="28"/></operator><operator pos:line="3283" pos:column="28">(<pos:position pos:line="3283" pos:column="29"/></operator><name pos:line="3283" pos:column="29">OP_SeekGE<pos:position pos:line="3283" pos:column="38"/></name><operator pos:line="3283" pos:column="38">+<pos:position pos:line="3283" pos:column="39"/></operator><literal type="number" pos:line="3283" pos:column="39">1<pos:position pos:line="3283" pos:column="40"/></literal><operator pos:line="3283" pos:column="40">)<pos:position pos:line="3283" pos:column="41"/></operator></expr></argument> )<pos:position pos:line="3283" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="3283" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="3284" pos:column="9">assert<pos:position pos:line="3284" pos:column="15"/></name><argument_list pos:line="3284" pos:column="15">( <argument><expr><operator pos:line="3284" pos:column="17">(<pos:position pos:line="3284" pos:column="18"/></operator><name pos:line="3284" pos:column="18">OP_SeekLT<pos:position pos:line="3284" pos:column="27"/></name> <operator pos:line="3284" pos:column="28">&amp;<pos:position pos:line="3284" pos:column="33"/></operator> <literal type="number" pos:line="3284" pos:column="30">0x0001<pos:position pos:line="3284" pos:column="36"/></literal><operator pos:line="3284" pos:column="36">)<pos:position pos:line="3284" pos:column="37"/></operator><operator pos:line="3284" pos:column="37">==<pos:position pos:line="3284" pos:column="39"/></operator><operator pos:line="3284" pos:column="39">(<pos:position pos:line="3284" pos:column="40"/></operator><name pos:line="3284" pos:column="40">OP_SeekGE<pos:position pos:line="3284" pos:column="49"/></name> <operator pos:line="3284" pos:column="50">&amp;<pos:position pos:line="3284" pos:column="55"/></operator> <literal type="number" pos:line="3284" pos:column="52">0x0001<pos:position pos:line="3284" pos:column="58"/></literal><operator pos:line="3284" pos:column="58">)<pos:position pos:line="3284" pos:column="59"/></operator></expr></argument> )<pos:position pos:line="3284" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="3284" pos:column="62"/></expr_stmt>
        <if pos:line="3285" pos:column="9">if<condition pos:line="3285" pos:column="11">( <expr><operator pos:line="3285" pos:column="13">(<pos:position pos:line="3285" pos:column="14"/></operator><name pos:line="3285" pos:column="14">oc<pos:position pos:line="3285" pos:column="16"/></name> <operator pos:line="3285" pos:column="17">&amp;<pos:position pos:line="3285" pos:column="22"/></operator> <literal type="number" pos:line="3285" pos:column="19">0x0001<pos:position pos:line="3285" pos:column="25"/></literal><operator pos:line="3285" pos:column="25">)<pos:position pos:line="3285" pos:column="26"/></operator><operator pos:line="3285" pos:column="26">==<pos:position pos:line="3285" pos:column="28"/></operator><operator pos:line="3285" pos:column="28">(<pos:position pos:line="3285" pos:column="29"/></operator><name pos:line="3285" pos:column="29">OP_SeekLT<pos:position pos:line="3285" pos:column="38"/></name> <operator pos:line="3285" pos:column="39">&amp;<pos:position pos:line="3285" pos:column="44"/></operator> <literal type="number" pos:line="3285" pos:column="41">0x0001<pos:position pos:line="3285" pos:column="47"/></literal><operator pos:line="3285" pos:column="47">)<pos:position pos:line="3285" pos:column="48"/></operator></expr> )<pos:position pos:line="3285" pos:column="50"/></condition><then pos:line="3285" pos:column="50"> <block type="pseudo"><expr_stmt><expr><name pos:line="3285" pos:column="51">oc<pos:position pos:line="3285" pos:column="53"/></name><operator pos:line="3285" pos:column="53">++<pos:position pos:line="3285" pos:column="55"/></operator></expr>;<pos:position pos:line="3285" pos:column="56"/></expr_stmt></block></then></if>
      }<pos:position pos:line="3286" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="3287" pos:column="6"/></block></then></if> 
    <expr_stmt><expr><name pos:line="3288" pos:column="5">rc<pos:position pos:line="3288" pos:column="7"/></name> <operator pos:line="3288" pos:column="8">=<pos:position pos:line="3288" pos:column="9"/></operator> <call><name pos:line="3288" pos:column="10">sqlite3BtreeMovetoUnpacked<pos:position pos:line="3288" pos:column="36"/></name><argument_list pos:line="3288" pos:column="36">(<argument><expr><name><name pos:line="3288" pos:column="37">pC<pos:position pos:line="3288" pos:column="39"/></name><operator pos:line="3288" pos:column="39">-&gt;<pos:position pos:line="3288" pos:column="44"/></operator><name pos:line="3288" pos:column="41">uc<pos:position pos:line="3288" pos:column="43"/></name><operator pos:line="3288" pos:column="43">.<pos:position pos:line="3288" pos:column="44"/></operator><name pos:line="3288" pos:column="44">pCursor<pos:position pos:line="3288" pos:column="51"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3288" pos:column="53">0<pos:position pos:line="3288" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="3288" pos:column="56">(<pos:position pos:line="3288" pos:column="57"/></operator><name pos:line="3288" pos:column="57">u64<pos:position pos:line="3288" pos:column="60"/></name><operator pos:line="3288" pos:column="60">)<pos:position pos:line="3288" pos:column="61"/></operator><name pos:line="3288" pos:column="61">iKey<pos:position pos:line="3288" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3288" pos:column="67">0<pos:position pos:line="3288" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="3288" pos:column="70">&amp;<pos:position pos:line="3288" pos:column="75"/></operator><name pos:line="3288" pos:column="71">res<pos:position pos:line="3288" pos:column="74"/></name></expr></argument>)<pos:position pos:line="3288" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="3288" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3289" pos:column="5">pC<pos:position pos:line="3289" pos:column="7"/></name><operator pos:line="3289" pos:column="7">-&gt;<pos:position pos:line="3289" pos:column="12"/></operator><name pos:line="3289" pos:column="9">movetoTarget<pos:position pos:line="3289" pos:column="21"/></name></name> <operator pos:line="3289" pos:column="22">=<pos:position pos:line="3289" pos:column="23"/></operator> <name pos:line="3289" pos:column="24">iKey<pos:position pos:line="3289" pos:column="28"/></name></expr>;<pos:position pos:line="3289" pos:column="29"/></expr_stmt>  <comment type="block" pos:line="3289" pos:column="31">/* Used by OP_Delete */</comment>
    <if pos:line="3290" pos:column="5">if<condition pos:line="3290" pos:column="7">( <expr><name pos:line="3290" pos:column="9">rc<pos:position pos:line="3290" pos:column="11"/></name><operator pos:line="3290" pos:column="11">!=<pos:position pos:line="3290" pos:column="13"/></operator><name pos:line="3290" pos:column="13">SQLITE_OK<pos:position pos:line="3290" pos:column="22"/></name></expr> )<pos:position pos:line="3290" pos:column="24"/></condition><then><block pos:line="3290" pos:column="24">{
      <goto pos:line="3291" pos:column="7">goto <name pos:line="3291" pos:column="12">abort_due_to_error<pos:position pos:line="3291" pos:column="30"/></name>;<pos:position pos:line="3291" pos:column="31"/></goto>
    }<pos:position pos:line="3292" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3293" pos:column="4"/></block></then><else pos:line="3293" pos:column="4">else<block pos:line="3293" pos:column="8">{
    <comment type="block" pos:line="3294" pos:column="5">/* For a cursor with the BTREE_SEEK_EQ hint, only the OP_SeekGE and
    ** OP_SeekLE opcodes are allowed, and these must be immediately followed
    ** by an OP_IdxGT or OP_IdxLT opcode, respectively, with the same key.
    */</comment>
    <if pos:line="3298" pos:column="5">if<condition pos:line="3298" pos:column="7">( <expr><call><name pos:line="3298" pos:column="9">sqlite3BtreeCursorHasHint<pos:position pos:line="3298" pos:column="34"/></name><argument_list pos:line="3298" pos:column="34">(<argument><expr><name><name pos:line="3298" pos:column="35">pC<pos:position pos:line="3298" pos:column="37"/></name><operator pos:line="3298" pos:column="37">-&gt;<pos:position pos:line="3298" pos:column="42"/></operator><name pos:line="3298" pos:column="39">uc<pos:position pos:line="3298" pos:column="41"/></name><operator pos:line="3298" pos:column="41">.<pos:position pos:line="3298" pos:column="42"/></operator><name pos:line="3298" pos:column="42">pCursor<pos:position pos:line="3298" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="3298" pos:column="51">BTREE_SEEK_EQ<pos:position pos:line="3298" pos:column="64"/></name></expr></argument>)<pos:position pos:line="3298" pos:column="65"/></argument_list></call></expr> )<pos:position pos:line="3298" pos:column="67"/></condition><then><block pos:line="3298" pos:column="67">{
      <expr_stmt><expr><name pos:line="3299" pos:column="7">eqOnly<pos:position pos:line="3299" pos:column="13"/></name> <operator pos:line="3299" pos:column="14">=<pos:position pos:line="3299" pos:column="15"/></operator> <literal type="number" pos:line="3299" pos:column="16">1<pos:position pos:line="3299" pos:column="17"/></literal></expr>;<pos:position pos:line="3299" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3300" pos:column="7">assert<pos:position pos:line="3300" pos:column="13"/></name><argument_list pos:line="3300" pos:column="13">( <argument><expr><name><name pos:line="3300" pos:column="15">pOp<pos:position pos:line="3300" pos:column="18"/></name><operator pos:line="3300" pos:column="18">-&gt;<pos:position pos:line="3300" pos:column="23"/></operator><name pos:line="3300" pos:column="20">opcode<pos:position pos:line="3300" pos:column="26"/></name></name><operator pos:line="3300" pos:column="26">==<pos:position pos:line="3300" pos:column="28"/></operator><name pos:line="3300" pos:column="28">OP_SeekGE<pos:position pos:line="3300" pos:column="37"/></name> <operator pos:line="3300" pos:column="38">||<pos:position pos:line="3300" pos:column="40"/></operator> <name><name pos:line="3300" pos:column="41">pOp<pos:position pos:line="3300" pos:column="44"/></name><operator pos:line="3300" pos:column="44">-&gt;<pos:position pos:line="3300" pos:column="49"/></operator><name pos:line="3300" pos:column="46">opcode<pos:position pos:line="3300" pos:column="52"/></name></name><operator pos:line="3300" pos:column="52">==<pos:position pos:line="3300" pos:column="54"/></operator><name pos:line="3300" pos:column="54">OP_SeekLE<pos:position pos:line="3300" pos:column="63"/></name></expr></argument> )<pos:position pos:line="3300" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="3300" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3301" pos:column="7">assert<pos:position pos:line="3301" pos:column="13"/></name><argument_list pos:line="3301" pos:column="13">( <argument><expr><name><name pos:line="3301" pos:column="15">pOp<pos:position pos:line="3301" pos:column="18"/></name><index pos:line="3301" pos:column="18">[<expr><literal type="number" pos:line="3301" pos:column="19">1<pos:position pos:line="3301" pos:column="20"/></literal></expr>]<pos:position pos:line="3301" pos:column="21"/></index></name><operator pos:line="3301" pos:column="21">.<pos:position pos:line="3301" pos:column="22"/></operator><name pos:line="3301" pos:column="22">opcode<pos:position pos:line="3301" pos:column="28"/></name><operator pos:line="3301" pos:column="28">==<pos:position pos:line="3301" pos:column="30"/></operator><name pos:line="3301" pos:column="30">OP_IdxLT<pos:position pos:line="3301" pos:column="38"/></name> <operator pos:line="3301" pos:column="39">||<pos:position pos:line="3301" pos:column="41"/></operator> <name><name pos:line="3301" pos:column="42">pOp<pos:position pos:line="3301" pos:column="45"/></name><index pos:line="3301" pos:column="45">[<expr><literal type="number" pos:line="3301" pos:column="46">1<pos:position pos:line="3301" pos:column="47"/></literal></expr>]<pos:position pos:line="3301" pos:column="48"/></index></name><operator pos:line="3301" pos:column="48">.<pos:position pos:line="3301" pos:column="49"/></operator><name pos:line="3301" pos:column="49">opcode<pos:position pos:line="3301" pos:column="55"/></name><operator pos:line="3301" pos:column="55">==<pos:position pos:line="3301" pos:column="57"/></operator><name pos:line="3301" pos:column="57">OP_IdxGT<pos:position pos:line="3301" pos:column="65"/></name></expr></argument> )<pos:position pos:line="3301" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="3301" pos:column="68"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3302" pos:column="7">assert<pos:position pos:line="3302" pos:column="13"/></name><argument_list pos:line="3302" pos:column="13">( <argument><expr><name><name pos:line="3302" pos:column="15">pOp<pos:position pos:line="3302" pos:column="18"/></name><index pos:line="3302" pos:column="18">[<expr><literal type="number" pos:line="3302" pos:column="19">1<pos:position pos:line="3302" pos:column="20"/></literal></expr>]<pos:position pos:line="3302" pos:column="21"/></index></name><operator pos:line="3302" pos:column="21">.<pos:position pos:line="3302" pos:column="22"/></operator><name pos:line="3302" pos:column="22">p1<pos:position pos:line="3302" pos:column="24"/></name><operator pos:line="3302" pos:column="24">==<pos:position pos:line="3302" pos:column="26"/></operator><name><name pos:line="3302" pos:column="26">pOp<pos:position pos:line="3302" pos:column="29"/></name><index pos:line="3302" pos:column="29">[<expr><literal type="number" pos:line="3302" pos:column="30">0<pos:position pos:line="3302" pos:column="31"/></literal></expr>]<pos:position pos:line="3302" pos:column="32"/></index></name><operator pos:line="3302" pos:column="32">.<pos:position pos:line="3302" pos:column="33"/></operator><name pos:line="3302" pos:column="33">p1<pos:position pos:line="3302" pos:column="35"/></name></expr></argument> )<pos:position pos:line="3302" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3302" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3303" pos:column="7">assert<pos:position pos:line="3303" pos:column="13"/></name><argument_list pos:line="3303" pos:column="13">( <argument><expr><name><name pos:line="3303" pos:column="15">pOp<pos:position pos:line="3303" pos:column="18"/></name><index pos:line="3303" pos:column="18">[<expr><literal type="number" pos:line="3303" pos:column="19">1<pos:position pos:line="3303" pos:column="20"/></literal></expr>]<pos:position pos:line="3303" pos:column="21"/></index></name><operator pos:line="3303" pos:column="21">.<pos:position pos:line="3303" pos:column="22"/></operator><name pos:line="3303" pos:column="22">p2<pos:position pos:line="3303" pos:column="24"/></name><operator pos:line="3303" pos:column="24">==<pos:position pos:line="3303" pos:column="26"/></operator><name><name pos:line="3303" pos:column="26">pOp<pos:position pos:line="3303" pos:column="29"/></name><index pos:line="3303" pos:column="29">[<expr><literal type="number" pos:line="3303" pos:column="30">0<pos:position pos:line="3303" pos:column="31"/></literal></expr>]<pos:position pos:line="3303" pos:column="32"/></index></name><operator pos:line="3303" pos:column="32">.<pos:position pos:line="3303" pos:column="33"/></operator><name pos:line="3303" pos:column="33">p2<pos:position pos:line="3303" pos:column="35"/></name></expr></argument> )<pos:position pos:line="3303" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3303" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3304" pos:column="7">assert<pos:position pos:line="3304" pos:column="13"/></name><argument_list pos:line="3304" pos:column="13">( <argument><expr><name><name pos:line="3304" pos:column="15">pOp<pos:position pos:line="3304" pos:column="18"/></name><index pos:line="3304" pos:column="18">[<expr><literal type="number" pos:line="3304" pos:column="19">1<pos:position pos:line="3304" pos:column="20"/></literal></expr>]<pos:position pos:line="3304" pos:column="21"/></index></name><operator pos:line="3304" pos:column="21">.<pos:position pos:line="3304" pos:column="22"/></operator><name pos:line="3304" pos:column="22">p3<pos:position pos:line="3304" pos:column="24"/></name><operator pos:line="3304" pos:column="24">==<pos:position pos:line="3304" pos:column="26"/></operator><name><name pos:line="3304" pos:column="26">pOp<pos:position pos:line="3304" pos:column="29"/></name><index pos:line="3304" pos:column="29">[<expr><literal type="number" pos:line="3304" pos:column="30">0<pos:position pos:line="3304" pos:column="31"/></literal></expr>]<pos:position pos:line="3304" pos:column="32"/></index></name><operator pos:line="3304" pos:column="32">.<pos:position pos:line="3304" pos:column="33"/></operator><name pos:line="3304" pos:column="33">p3<pos:position pos:line="3304" pos:column="35"/></name></expr></argument> )<pos:position pos:line="3304" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3304" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3305" pos:column="7">assert<pos:position pos:line="3305" pos:column="13"/></name><argument_list pos:line="3305" pos:column="13">( <argument><expr><name><name pos:line="3305" pos:column="15">pOp<pos:position pos:line="3305" pos:column="18"/></name><index pos:line="3305" pos:column="18">[<expr><literal type="number" pos:line="3305" pos:column="19">1<pos:position pos:line="3305" pos:column="20"/></literal></expr>]<pos:position pos:line="3305" pos:column="21"/></index></name><operator pos:line="3305" pos:column="21">.<pos:position pos:line="3305" pos:column="22"/></operator><name><name pos:line="3305" pos:column="22">p4<pos:position pos:line="3305" pos:column="24"/></name><operator pos:line="3305" pos:column="24">.<pos:position pos:line="3305" pos:column="25"/></operator><name pos:line="3305" pos:column="25">i<pos:position pos:line="3305" pos:column="26"/></name></name><operator pos:line="3305" pos:column="26">==<pos:position pos:line="3305" pos:column="28"/></operator><name><name pos:line="3305" pos:column="28">pOp<pos:position pos:line="3305" pos:column="31"/></name><index pos:line="3305" pos:column="31">[<expr><literal type="number" pos:line="3305" pos:column="32">0<pos:position pos:line="3305" pos:column="33"/></literal></expr>]<pos:position pos:line="3305" pos:column="34"/></index></name><operator pos:line="3305" pos:column="34">.<pos:position pos:line="3305" pos:column="35"/></operator><name><name pos:line="3305" pos:column="35">p4<pos:position pos:line="3305" pos:column="37"/></name><operator pos:line="3305" pos:column="37">.<pos:position pos:line="3305" pos:column="38"/></operator><name pos:line="3305" pos:column="38">i<pos:position pos:line="3305" pos:column="39"/></name></name></expr></argument> )<pos:position pos:line="3305" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3305" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="3306" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="3308" pos:column="5">nField<pos:position pos:line="3308" pos:column="11"/></name> <operator pos:line="3308" pos:column="12">=<pos:position pos:line="3308" pos:column="13"/></operator> <name><name pos:line="3308" pos:column="14">pOp<pos:position pos:line="3308" pos:column="17"/></name><operator pos:line="3308" pos:column="17">-&gt;<pos:position pos:line="3308" pos:column="22"/></operator><name pos:line="3308" pos:column="19">p4<pos:position pos:line="3308" pos:column="21"/></name><operator pos:line="3308" pos:column="21">.<pos:position pos:line="3308" pos:column="22"/></operator><name pos:line="3308" pos:column="22">i<pos:position pos:line="3308" pos:column="23"/></name></name></expr>;<pos:position pos:line="3308" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3309" pos:column="5">assert<pos:position pos:line="3309" pos:column="11"/></name><argument_list pos:line="3309" pos:column="11">( <argument><expr><name><name pos:line="3309" pos:column="13">pOp<pos:position pos:line="3309" pos:column="16"/></name><operator pos:line="3309" pos:column="16">-&gt;<pos:position pos:line="3309" pos:column="21"/></operator><name pos:line="3309" pos:column="18">p4type<pos:position pos:line="3309" pos:column="24"/></name></name><operator pos:line="3309" pos:column="24">==<pos:position pos:line="3309" pos:column="26"/></operator><name pos:line="3309" pos:column="26">P4_INT32<pos:position pos:line="3309" pos:column="34"/></name></expr></argument> )<pos:position pos:line="3309" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3309" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3310" pos:column="5">assert<pos:position pos:line="3310" pos:column="11"/></name><argument_list pos:line="3310" pos:column="11">( <argument><expr><name pos:line="3310" pos:column="13">nField<pos:position pos:line="3310" pos:column="19"/></name><operator pos:line="3310" pos:column="19">&gt;<pos:position pos:line="3310" pos:column="23"/></operator><literal type="number" pos:line="3310" pos:column="20">0<pos:position pos:line="3310" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="3310" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3310" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3311" pos:column="5">r<pos:position pos:line="3311" pos:column="6"/></name><operator pos:line="3311" pos:column="6">.<pos:position pos:line="3311" pos:column="7"/></operator><name pos:line="3311" pos:column="7">pKeyInfo<pos:position pos:line="3311" pos:column="15"/></name></name> <operator pos:line="3311" pos:column="16">=<pos:position pos:line="3311" pos:column="17"/></operator> <name><name pos:line="3311" pos:column="18">pC<pos:position pos:line="3311" pos:column="20"/></name><operator pos:line="3311" pos:column="20">-&gt;<pos:position pos:line="3311" pos:column="25"/></operator><name pos:line="3311" pos:column="22">pKeyInfo<pos:position pos:line="3311" pos:column="30"/></name></name></expr>;<pos:position pos:line="3311" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3312" pos:column="5">r<pos:position pos:line="3312" pos:column="6"/></name><operator pos:line="3312" pos:column="6">.<pos:position pos:line="3312" pos:column="7"/></operator><name pos:line="3312" pos:column="7">nField<pos:position pos:line="3312" pos:column="13"/></name></name> <operator pos:line="3312" pos:column="14">=<pos:position pos:line="3312" pos:column="15"/></operator> <operator pos:line="3312" pos:column="16">(<pos:position pos:line="3312" pos:column="17"/></operator><name pos:line="3312" pos:column="17">u16<pos:position pos:line="3312" pos:column="20"/></name><operator pos:line="3312" pos:column="20">)<pos:position pos:line="3312" pos:column="21"/></operator><name pos:line="3312" pos:column="21">nField<pos:position pos:line="3312" pos:column="27"/></name></expr>;<pos:position pos:line="3312" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="3314" pos:column="5">/* The next line of code computes as follows, only faster:
    **   if( oc==OP_SeekGT || oc==OP_SeekLE ){
    **     r.default_rc = -1;
    **   }else{
    **     r.default_rc = +1;
    **   }
    */</comment>
    <expr_stmt><expr><name><name pos:line="3321" pos:column="5">r<pos:position pos:line="3321" pos:column="6"/></name><operator pos:line="3321" pos:column="6">.<pos:position pos:line="3321" pos:column="7"/></operator><name pos:line="3321" pos:column="7">default_rc<pos:position pos:line="3321" pos:column="17"/></name></name> <operator pos:line="3321" pos:column="18">=<pos:position pos:line="3321" pos:column="19"/></operator> <operator pos:line="3321" pos:column="20">(<pos:position pos:line="3321" pos:column="21"/></operator><ternary><condition><expr><operator pos:line="3321" pos:column="21">(<pos:position pos:line="3321" pos:column="22"/></operator><literal type="number" pos:line="3321" pos:column="22">1<pos:position pos:line="3321" pos:column="23"/></literal> <operator pos:line="3321" pos:column="24">&amp;<pos:position pos:line="3321" pos:column="29"/></operator> <operator pos:line="3321" pos:column="26">(<pos:position pos:line="3321" pos:column="27"/></operator><name pos:line="3321" pos:column="27">oc<pos:position pos:line="3321" pos:column="29"/></name> <operator pos:line="3321" pos:column="30">-<pos:position pos:line="3321" pos:column="31"/></operator> <name pos:line="3321" pos:column="32">OP_SeekLT<pos:position pos:line="3321" pos:column="41"/></name><operator pos:line="3321" pos:column="41">)<pos:position pos:line="3321" pos:column="42"/></operator><operator pos:line="3321" pos:column="42">)<pos:position pos:line="3321" pos:column="43"/></operator></expr> ?<pos:position pos:line="3321" pos:column="45"/></condition><then pos:line="3321" pos:column="45"> <expr><operator pos:line="3321" pos:column="46">-<pos:position pos:line="3321" pos:column="47"/></operator><literal type="number" pos:line="3321" pos:column="47">1<pos:position pos:line="3321" pos:column="48"/></literal></expr> <pos:position pos:line="3321" pos:column="49"/></then><else pos:line="3321" pos:column="49">: <expr><operator pos:line="3321" pos:column="51">+<pos:position pos:line="3321" pos:column="52"/></operator><literal type="number" pos:line="3321" pos:column="52">1<pos:position pos:line="3321" pos:column="53"/></literal></expr></else></ternary><operator pos:line="3321" pos:column="53">)<pos:position pos:line="3321" pos:column="54"/></operator></expr>;<pos:position pos:line="3321" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3322" pos:column="5">assert<pos:position pos:line="3322" pos:column="11"/></name><argument_list pos:line="3322" pos:column="11">( <argument><expr><name pos:line="3322" pos:column="13">oc<pos:position pos:line="3322" pos:column="15"/></name><operator pos:line="3322" pos:column="15">!=<pos:position pos:line="3322" pos:column="17"/></operator><name pos:line="3322" pos:column="17">OP_SeekGT<pos:position pos:line="3322" pos:column="26"/></name> <operator pos:line="3322" pos:column="27">||<pos:position pos:line="3322" pos:column="29"/></operator> <name><name pos:line="3322" pos:column="30">r<pos:position pos:line="3322" pos:column="31"/></name><operator pos:line="3322" pos:column="31">.<pos:position pos:line="3322" pos:column="32"/></operator><name pos:line="3322" pos:column="32">default_rc<pos:position pos:line="3322" pos:column="42"/></name></name><operator pos:line="3322" pos:column="42">==<pos:position pos:line="3322" pos:column="44"/></operator><operator pos:line="3322" pos:column="44">-<pos:position pos:line="3322" pos:column="45"/></operator><literal type="number" pos:line="3322" pos:column="45">1<pos:position pos:line="3322" pos:column="46"/></literal></expr></argument> )<pos:position pos:line="3322" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3322" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3323" pos:column="5">assert<pos:position pos:line="3323" pos:column="11"/></name><argument_list pos:line="3323" pos:column="11">( <argument><expr><name pos:line="3323" pos:column="13">oc<pos:position pos:line="3323" pos:column="15"/></name><operator pos:line="3323" pos:column="15">!=<pos:position pos:line="3323" pos:column="17"/></operator><name pos:line="3323" pos:column="17">OP_SeekLE<pos:position pos:line="3323" pos:column="26"/></name> <operator pos:line="3323" pos:column="27">||<pos:position pos:line="3323" pos:column="29"/></operator> <name><name pos:line="3323" pos:column="30">r<pos:position pos:line="3323" pos:column="31"/></name><operator pos:line="3323" pos:column="31">.<pos:position pos:line="3323" pos:column="32"/></operator><name pos:line="3323" pos:column="32">default_rc<pos:position pos:line="3323" pos:column="42"/></name></name><operator pos:line="3323" pos:column="42">==<pos:position pos:line="3323" pos:column="44"/></operator><operator pos:line="3323" pos:column="44">-<pos:position pos:line="3323" pos:column="45"/></operator><literal type="number" pos:line="3323" pos:column="45">1<pos:position pos:line="3323" pos:column="46"/></literal></expr></argument> )<pos:position pos:line="3323" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3323" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3324" pos:column="5">assert<pos:position pos:line="3324" pos:column="11"/></name><argument_list pos:line="3324" pos:column="11">( <argument><expr><name pos:line="3324" pos:column="13">oc<pos:position pos:line="3324" pos:column="15"/></name><operator pos:line="3324" pos:column="15">!=<pos:position pos:line="3324" pos:column="17"/></operator><name pos:line="3324" pos:column="17">OP_SeekGE<pos:position pos:line="3324" pos:column="26"/></name> <operator pos:line="3324" pos:column="27">||<pos:position pos:line="3324" pos:column="29"/></operator> <name><name pos:line="3324" pos:column="30">r<pos:position pos:line="3324" pos:column="31"/></name><operator pos:line="3324" pos:column="31">.<pos:position pos:line="3324" pos:column="32"/></operator><name pos:line="3324" pos:column="32">default_rc<pos:position pos:line="3324" pos:column="42"/></name></name><operator pos:line="3324" pos:column="42">==<pos:position pos:line="3324" pos:column="44"/></operator><operator pos:line="3324" pos:column="44">+<pos:position pos:line="3324" pos:column="45"/></operator><literal type="number" pos:line="3324" pos:column="45">1<pos:position pos:line="3324" pos:column="46"/></literal></expr></argument> )<pos:position pos:line="3324" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3324" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3325" pos:column="5">assert<pos:position pos:line="3325" pos:column="11"/></name><argument_list pos:line="3325" pos:column="11">( <argument><expr><name pos:line="3325" pos:column="13">oc<pos:position pos:line="3325" pos:column="15"/></name><operator pos:line="3325" pos:column="15">!=<pos:position pos:line="3325" pos:column="17"/></operator><name pos:line="3325" pos:column="17">OP_SeekLT<pos:position pos:line="3325" pos:column="26"/></name> <operator pos:line="3325" pos:column="27">||<pos:position pos:line="3325" pos:column="29"/></operator> <name><name pos:line="3325" pos:column="30">r<pos:position pos:line="3325" pos:column="31"/></name><operator pos:line="3325" pos:column="31">.<pos:position pos:line="3325" pos:column="32"/></operator><name pos:line="3325" pos:column="32">default_rc<pos:position pos:line="3325" pos:column="42"/></name></name><operator pos:line="3325" pos:column="42">==<pos:position pos:line="3325" pos:column="44"/></operator><operator pos:line="3325" pos:column="44">+<pos:position pos:line="3325" pos:column="45"/></operator><literal type="number" pos:line="3325" pos:column="45">1<pos:position pos:line="3325" pos:column="46"/></literal></expr></argument> )<pos:position pos:line="3325" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3325" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="3327" pos:column="5">r<pos:position pos:line="3327" pos:column="6"/></name><operator pos:line="3327" pos:column="6">.<pos:position pos:line="3327" pos:column="7"/></operator><name pos:line="3327" pos:column="7">aMem<pos:position pos:line="3327" pos:column="11"/></name></name> <operator pos:line="3327" pos:column="12">=<pos:position pos:line="3327" pos:column="13"/></operator> <operator pos:line="3327" pos:column="14">&amp;<pos:position pos:line="3327" pos:column="19"/></operator><name><name pos:line="3327" pos:column="15">aMem<pos:position pos:line="3327" pos:column="19"/></name><index pos:line="3327" pos:column="19">[<expr><name><name pos:line="3327" pos:column="20">pOp<pos:position pos:line="3327" pos:column="23"/></name><operator pos:line="3327" pos:column="23">-&gt;<pos:position pos:line="3327" pos:column="28"/></operator><name pos:line="3327" pos:column="25">p3<pos:position pos:line="3327" pos:column="27"/></name></name></expr>]<pos:position pos:line="3327" pos:column="28"/></index></name></expr>;<pos:position pos:line="3327" pos:column="29"/></expr_stmt>
<cpp:ifdef pos:line="3328" pos:column="1">#<cpp:directive pos:line="3328" pos:column="2">ifdef<pos:position pos:line="3328" pos:column="7"/></cpp:directive> <name pos:line="3328" pos:column="8">SQLITE_DEBUG<pos:position pos:line="3328" pos:column="20"/></name></cpp:ifdef>
    <block pos:line="3329" pos:column="5">{ <decl_stmt><decl><type><name pos:line="3329" pos:column="7">int<pos:position pos:line="3329" pos:column="10"/></name></type> <name pos:line="3329" pos:column="11">i<pos:position pos:line="3329" pos:column="12"/></name></decl>;<pos:position pos:line="3329" pos:column="13"/></decl_stmt> <for pos:line="3329" pos:column="14">for<control pos:line="3329" pos:column="17">(<init><expr><name pos:line="3329" pos:column="18">i<pos:position pos:line="3329" pos:column="19"/></name><operator pos:line="3329" pos:column="19">=<pos:position pos:line="3329" pos:column="20"/></operator><literal type="number" pos:line="3329" pos:column="20">0<pos:position pos:line="3329" pos:column="21"/></literal></expr>;<pos:position pos:line="3329" pos:column="22"/></init> <condition><expr><name pos:line="3329" pos:column="23">i<pos:position pos:line="3329" pos:column="24"/></name><operator pos:line="3329" pos:column="24">&lt;<pos:position pos:line="3329" pos:column="28"/></operator><name><name pos:line="3329" pos:column="25">r<pos:position pos:line="3329" pos:column="26"/></name><operator pos:line="3329" pos:column="26">.<pos:position pos:line="3329" pos:column="27"/></operator><name pos:line="3329" pos:column="27">nField<pos:position pos:line="3329" pos:column="33"/></name></name></expr>;<pos:position pos:line="3329" pos:column="34"/></condition> <incr><expr><name pos:line="3329" pos:column="35">i<pos:position pos:line="3329" pos:column="36"/></name><operator pos:line="3329" pos:column="36">++<pos:position pos:line="3329" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="3329" pos:column="39"/></control> <block type="pseudo"><expr_stmt><expr><call><name pos:line="3329" pos:column="40">assert<pos:position pos:line="3329" pos:column="46"/></name><argument_list pos:line="3329" pos:column="46">( <argument><expr><call><name pos:line="3329" pos:column="48">memIsValid<pos:position pos:line="3329" pos:column="58"/></name><argument_list pos:line="3329" pos:column="58">(<argument><expr><operator pos:line="3329" pos:column="59">&amp;<pos:position pos:line="3329" pos:column="64"/></operator><name><name pos:line="3329" pos:column="60">r<pos:position pos:line="3329" pos:column="61"/></name><operator pos:line="3329" pos:column="61">.<pos:position pos:line="3329" pos:column="62"/></operator><name pos:line="3329" pos:column="62">aMem<pos:position pos:line="3329" pos:column="66"/></name><index pos:line="3329" pos:column="66">[<expr><name pos:line="3329" pos:column="67">i<pos:position pos:line="3329" pos:column="68"/></name></expr>]<pos:position pos:line="3329" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="3329" pos:column="70"/></argument_list></call></expr></argument> )<pos:position pos:line="3329" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="3329" pos:column="73"/></expr_stmt></block></for> }<pos:position pos:line="3329" pos:column="75"/></block>
<cpp:endif pos:line="3330" pos:column="1">#<cpp:directive pos:line="3330" pos:column="2">endif<pos:position pos:line="3330" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name pos:line="3331" pos:column="5">r<pos:position pos:line="3331" pos:column="6"/></name><operator pos:line="3331" pos:column="6">.<pos:position pos:line="3331" pos:column="7"/></operator><name pos:line="3331" pos:column="7">eqSeen<pos:position pos:line="3331" pos:column="13"/></name></name> <operator pos:line="3331" pos:column="14">=<pos:position pos:line="3331" pos:column="15"/></operator> <literal type="number" pos:line="3331" pos:column="16">0<pos:position pos:line="3331" pos:column="17"/></literal></expr>;<pos:position pos:line="3331" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3332" pos:column="5">rc<pos:position pos:line="3332" pos:column="7"/></name> <operator pos:line="3332" pos:column="8">=<pos:position pos:line="3332" pos:column="9"/></operator> <call><name pos:line="3332" pos:column="10">sqlite3BtreeMovetoUnpacked<pos:position pos:line="3332" pos:column="36"/></name><argument_list pos:line="3332" pos:column="36">(<argument><expr><name><name pos:line="3332" pos:column="37">pC<pos:position pos:line="3332" pos:column="39"/></name><operator pos:line="3332" pos:column="39">-&gt;<pos:position pos:line="3332" pos:column="44"/></operator><name pos:line="3332" pos:column="41">uc<pos:position pos:line="3332" pos:column="43"/></name><operator pos:line="3332" pos:column="43">.<pos:position pos:line="3332" pos:column="44"/></operator><name pos:line="3332" pos:column="44">pCursor<pos:position pos:line="3332" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="3332" pos:column="53">&amp;<pos:position pos:line="3332" pos:column="58"/></operator><name pos:line="3332" pos:column="54">r<pos:position pos:line="3332" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3332" pos:column="57">0<pos:position pos:line="3332" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3332" pos:column="60">0<pos:position pos:line="3332" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="3332" pos:column="63">&amp;<pos:position pos:line="3332" pos:column="68"/></operator><name pos:line="3332" pos:column="64">res<pos:position pos:line="3332" pos:column="67"/></name></expr></argument>)<pos:position pos:line="3332" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="3332" pos:column="69"/></expr_stmt>
    <if pos:line="3333" pos:column="5">if<condition pos:line="3333" pos:column="7">( <expr><name pos:line="3333" pos:column="9">rc<pos:position pos:line="3333" pos:column="11"/></name><operator pos:line="3333" pos:column="11">!=<pos:position pos:line="3333" pos:column="13"/></operator><name pos:line="3333" pos:column="13">SQLITE_OK<pos:position pos:line="3333" pos:column="22"/></name></expr> )<pos:position pos:line="3333" pos:column="24"/></condition><then><block pos:line="3333" pos:column="24">{
      <goto pos:line="3334" pos:column="7">goto <name pos:line="3334" pos:column="12">abort_due_to_error<pos:position pos:line="3334" pos:column="30"/></name>;<pos:position pos:line="3334" pos:column="31"/></goto>
    }<pos:position pos:line="3335" pos:column="6"/></block></then></if>
    <if pos:line="3336" pos:column="5">if<condition pos:line="3336" pos:column="7">( <expr><name pos:line="3336" pos:column="9">eqOnly<pos:position pos:line="3336" pos:column="15"/></name> <operator pos:line="3336" pos:column="16">&amp;&amp;<pos:position pos:line="3336" pos:column="26"/></operator> <name><name pos:line="3336" pos:column="19">r<pos:position pos:line="3336" pos:column="20"/></name><operator pos:line="3336" pos:column="20">.<pos:position pos:line="3336" pos:column="21"/></operator><name pos:line="3336" pos:column="21">eqSeen<pos:position pos:line="3336" pos:column="27"/></name></name><operator pos:line="3336" pos:column="27">==<pos:position pos:line="3336" pos:column="29"/></operator><literal type="number" pos:line="3336" pos:column="29">0<pos:position pos:line="3336" pos:column="30"/></literal></expr> )<pos:position pos:line="3336" pos:column="32"/></condition><then><block pos:line="3336" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="3337" pos:column="7">assert<pos:position pos:line="3337" pos:column="13"/></name><argument_list pos:line="3337" pos:column="13">( <argument><expr><name pos:line="3337" pos:column="15">res<pos:position pos:line="3337" pos:column="18"/></name><operator pos:line="3337" pos:column="18">!=<pos:position pos:line="3337" pos:column="20"/></operator><literal type="number" pos:line="3337" pos:column="20">0<pos:position pos:line="3337" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="3337" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3337" pos:column="24"/></expr_stmt>
      <goto pos:line="3338" pos:column="7">goto <name pos:line="3338" pos:column="12">seek_not_found<pos:position pos:line="3338" pos:column="26"/></name>;<pos:position pos:line="3338" pos:column="27"/></goto>
    }<pos:position pos:line="3339" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3340" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="3341" pos:column="3">pC<pos:position pos:line="3341" pos:column="5"/></name><operator pos:line="3341" pos:column="5">-&gt;<pos:position pos:line="3341" pos:column="10"/></operator><name pos:line="3341" pos:column="7">deferredMoveto<pos:position pos:line="3341" pos:column="21"/></name></name> <operator pos:line="3341" pos:column="22">=<pos:position pos:line="3341" pos:column="23"/></operator> <literal type="number" pos:line="3341" pos:column="24">0<pos:position pos:line="3341" pos:column="25"/></literal></expr>;<pos:position pos:line="3341" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3342" pos:column="3">pC<pos:position pos:line="3342" pos:column="5"/></name><operator pos:line="3342" pos:column="5">-&gt;<pos:position pos:line="3342" pos:column="10"/></operator><name pos:line="3342" pos:column="7">cacheStatus<pos:position pos:line="3342" pos:column="18"/></name></name> <operator pos:line="3342" pos:column="19">=<pos:position pos:line="3342" pos:column="20"/></operator> <name pos:line="3342" pos:column="21">CACHE_STALE<pos:position pos:line="3342" pos:column="32"/></name></expr>;<pos:position pos:line="3342" pos:column="33"/></expr_stmt>
<cpp:ifdef pos:line="3343" pos:column="1">#<cpp:directive pos:line="3343" pos:column="2">ifdef<pos:position pos:line="3343" pos:column="7"/></cpp:directive> <name pos:line="3343" pos:column="8">SQLITE_TEST<pos:position pos:line="3343" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="3344" pos:column="3">sqlite3_search_count<pos:position pos:line="3344" pos:column="23"/></name><operator pos:line="3344" pos:column="23">++<pos:position pos:line="3344" pos:column="25"/></operator></expr>;<pos:position pos:line="3344" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="3345" pos:column="1">#<cpp:directive pos:line="3345" pos:column="2">endif<pos:position pos:line="3345" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="3346" pos:column="3">if<condition pos:line="3346" pos:column="5">( <expr><name pos:line="3346" pos:column="7">oc<pos:position pos:line="3346" pos:column="9"/></name><operator pos:line="3346" pos:column="9">&gt;=<pos:position pos:line="3346" pos:column="14"/></operator><name pos:line="3346" pos:column="11">OP_SeekGE<pos:position pos:line="3346" pos:column="20"/></name></expr> )<pos:position pos:line="3346" pos:column="22"/></condition><then><block pos:line="3346" pos:column="22">{  <expr_stmt><expr><call><name pos:line="3346" pos:column="25">assert<pos:position pos:line="3346" pos:column="31"/></name><argument_list pos:line="3346" pos:column="31">( <argument><expr><name pos:line="3346" pos:column="33">oc<pos:position pos:line="3346" pos:column="35"/></name><operator pos:line="3346" pos:column="35">==<pos:position pos:line="3346" pos:column="37"/></operator><name pos:line="3346" pos:column="37">OP_SeekGE<pos:position pos:line="3346" pos:column="46"/></name> <operator pos:line="3346" pos:column="47">||<pos:position pos:line="3346" pos:column="49"/></operator> <name pos:line="3346" pos:column="50">oc<pos:position pos:line="3346" pos:column="52"/></name><operator pos:line="3346" pos:column="52">==<pos:position pos:line="3346" pos:column="54"/></operator><name pos:line="3346" pos:column="54">OP_SeekGT<pos:position pos:line="3346" pos:column="63"/></name></expr></argument> )<pos:position pos:line="3346" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="3346" pos:column="66"/></expr_stmt>
    <if pos:line="3347" pos:column="5">if<condition pos:line="3347" pos:column="7">( <expr><name pos:line="3347" pos:column="9">res<pos:position pos:line="3347" pos:column="12"/></name><operator pos:line="3347" pos:column="12">&lt;<pos:position pos:line="3347" pos:column="16"/></operator><literal type="number" pos:line="3347" pos:column="13">0<pos:position pos:line="3347" pos:column="14"/></literal> <operator pos:line="3347" pos:column="15">||<pos:position pos:line="3347" pos:column="17"/></operator> <operator pos:line="3347" pos:column="18">(<pos:position pos:line="3347" pos:column="19"/></operator><name pos:line="3347" pos:column="19">res<pos:position pos:line="3347" pos:column="22"/></name><operator pos:line="3347" pos:column="22">==<pos:position pos:line="3347" pos:column="24"/></operator><literal type="number" pos:line="3347" pos:column="24">0<pos:position pos:line="3347" pos:column="25"/></literal> <operator pos:line="3347" pos:column="26">&amp;&amp;<pos:position pos:line="3347" pos:column="36"/></operator> <name pos:line="3347" pos:column="29">oc<pos:position pos:line="3347" pos:column="31"/></name><operator pos:line="3347" pos:column="31">==<pos:position pos:line="3347" pos:column="33"/></operator><name pos:line="3347" pos:column="33">OP_SeekGT<pos:position pos:line="3347" pos:column="42"/></name><operator pos:line="3347" pos:column="42">)<pos:position pos:line="3347" pos:column="43"/></operator></expr> )<pos:position pos:line="3347" pos:column="45"/></condition><then><block pos:line="3347" pos:column="45">{
      <expr_stmt><expr><name pos:line="3348" pos:column="7">res<pos:position pos:line="3348" pos:column="10"/></name> <operator pos:line="3348" pos:column="11">=<pos:position pos:line="3348" pos:column="12"/></operator> <literal type="number" pos:line="3348" pos:column="13">0<pos:position pos:line="3348" pos:column="14"/></literal></expr>;<pos:position pos:line="3348" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="3349" pos:column="7">rc<pos:position pos:line="3349" pos:column="9"/></name> <operator pos:line="3349" pos:column="10">=<pos:position pos:line="3349" pos:column="11"/></operator> <call><name pos:line="3349" pos:column="12">sqlite3BtreeNext<pos:position pos:line="3349" pos:column="28"/></name><argument_list pos:line="3349" pos:column="28">(<argument><expr><name><name pos:line="3349" pos:column="29">pC<pos:position pos:line="3349" pos:column="31"/></name><operator pos:line="3349" pos:column="31">-&gt;<pos:position pos:line="3349" pos:column="36"/></operator><name pos:line="3349" pos:column="33">uc<pos:position pos:line="3349" pos:column="35"/></name><operator pos:line="3349" pos:column="35">.<pos:position pos:line="3349" pos:column="36"/></operator><name pos:line="3349" pos:column="36">pCursor<pos:position pos:line="3349" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3349" pos:column="45">0<pos:position pos:line="3349" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="3349" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="3349" pos:column="48"/></expr_stmt>
      <if pos:line="3350" pos:column="7">if<condition pos:line="3350" pos:column="9">( <expr><name pos:line="3350" pos:column="11">rc<pos:position pos:line="3350" pos:column="13"/></name><operator pos:line="3350" pos:column="13">!=<pos:position pos:line="3350" pos:column="15"/></operator><name pos:line="3350" pos:column="15">SQLITE_OK<pos:position pos:line="3350" pos:column="24"/></name></expr> )<pos:position pos:line="3350" pos:column="26"/></condition><then><block pos:line="3350" pos:column="26">{
        <if pos:line="3351" pos:column="9">if<condition pos:line="3351" pos:column="11">( <expr><name pos:line="3351" pos:column="13">rc<pos:position pos:line="3351" pos:column="15"/></name><operator pos:line="3351" pos:column="15">==<pos:position pos:line="3351" pos:column="17"/></operator><name pos:line="3351" pos:column="17">SQLITE_DONE<pos:position pos:line="3351" pos:column="28"/></name></expr> )<pos:position pos:line="3351" pos:column="30"/></condition><then><block pos:line="3351" pos:column="30">{
          <expr_stmt><expr><name pos:line="3352" pos:column="11">rc<pos:position pos:line="3352" pos:column="13"/></name> <operator pos:line="3352" pos:column="14">=<pos:position pos:line="3352" pos:column="15"/></operator> <name pos:line="3352" pos:column="16">SQLITE_OK<pos:position pos:line="3352" pos:column="25"/></name></expr>;<pos:position pos:line="3352" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><name pos:line="3353" pos:column="11">res<pos:position pos:line="3353" pos:column="14"/></name> <operator pos:line="3353" pos:column="15">=<pos:position pos:line="3353" pos:column="16"/></operator> <literal type="number" pos:line="3353" pos:column="17">1<pos:position pos:line="3353" pos:column="18"/></literal></expr>;<pos:position pos:line="3353" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="3354" pos:column="10"/></block></then><else pos:line="3354" pos:column="10">else<block pos:line="3354" pos:column="14">{
          <goto pos:line="3355" pos:column="11">goto <name pos:line="3355" pos:column="16">abort_due_to_error<pos:position pos:line="3355" pos:column="34"/></name>;<pos:position pos:line="3355" pos:column="35"/></goto>
        }<pos:position pos:line="3356" pos:column="10"/></block></else></if>
      }<pos:position pos:line="3357" pos:column="8"/></block></then></if>
    }<pos:position pos:line="3358" pos:column="6"/></block></then><else pos:line="3358" pos:column="6">else<block pos:line="3358" pos:column="10">{
      <expr_stmt><expr><name pos:line="3359" pos:column="7">res<pos:position pos:line="3359" pos:column="10"/></name> <operator pos:line="3359" pos:column="11">=<pos:position pos:line="3359" pos:column="12"/></operator> <literal type="number" pos:line="3359" pos:column="13">0<pos:position pos:line="3359" pos:column="14"/></literal></expr>;<pos:position pos:line="3359" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="3360" pos:column="6"/></block></else></if>
  }<pos:position pos:line="3361" pos:column="4"/></block></then><else pos:line="3361" pos:column="4">else<block pos:line="3361" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="3362" pos:column="5">assert<pos:position pos:line="3362" pos:column="11"/></name><argument_list pos:line="3362" pos:column="11">( <argument><expr><name pos:line="3362" pos:column="13">oc<pos:position pos:line="3362" pos:column="15"/></name><operator pos:line="3362" pos:column="15">==<pos:position pos:line="3362" pos:column="17"/></operator><name pos:line="3362" pos:column="17">OP_SeekLT<pos:position pos:line="3362" pos:column="26"/></name> <operator pos:line="3362" pos:column="27">||<pos:position pos:line="3362" pos:column="29"/></operator> <name pos:line="3362" pos:column="30">oc<pos:position pos:line="3362" pos:column="32"/></name><operator pos:line="3362" pos:column="32">==<pos:position pos:line="3362" pos:column="34"/></operator><name pos:line="3362" pos:column="34">OP_SeekLE<pos:position pos:line="3362" pos:column="43"/></name></expr></argument> )<pos:position pos:line="3362" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3362" pos:column="46"/></expr_stmt>
    <if pos:line="3363" pos:column="5">if<condition pos:line="3363" pos:column="7">( <expr><name pos:line="3363" pos:column="9">res<pos:position pos:line="3363" pos:column="12"/></name><operator pos:line="3363" pos:column="12">&gt;<pos:position pos:line="3363" pos:column="16"/></operator><literal type="number" pos:line="3363" pos:column="13">0<pos:position pos:line="3363" pos:column="14"/></literal> <operator pos:line="3363" pos:column="15">||<pos:position pos:line="3363" pos:column="17"/></operator> <operator pos:line="3363" pos:column="18">(<pos:position pos:line="3363" pos:column="19"/></operator><name pos:line="3363" pos:column="19">res<pos:position pos:line="3363" pos:column="22"/></name><operator pos:line="3363" pos:column="22">==<pos:position pos:line="3363" pos:column="24"/></operator><literal type="number" pos:line="3363" pos:column="24">0<pos:position pos:line="3363" pos:column="25"/></literal> <operator pos:line="3363" pos:column="26">&amp;&amp;<pos:position pos:line="3363" pos:column="36"/></operator> <name pos:line="3363" pos:column="29">oc<pos:position pos:line="3363" pos:column="31"/></name><operator pos:line="3363" pos:column="31">==<pos:position pos:line="3363" pos:column="33"/></operator><name pos:line="3363" pos:column="33">OP_SeekLT<pos:position pos:line="3363" pos:column="42"/></name><operator pos:line="3363" pos:column="42">)<pos:position pos:line="3363" pos:column="43"/></operator></expr> )<pos:position pos:line="3363" pos:column="45"/></condition><then><block pos:line="3363" pos:column="45">{
      <expr_stmt><expr><name pos:line="3364" pos:column="7">res<pos:position pos:line="3364" pos:column="10"/></name> <operator pos:line="3364" pos:column="11">=<pos:position pos:line="3364" pos:column="12"/></operator> <literal type="number" pos:line="3364" pos:column="13">0<pos:position pos:line="3364" pos:column="14"/></literal></expr>;<pos:position pos:line="3364" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="3365" pos:column="7">rc<pos:position pos:line="3365" pos:column="9"/></name> <operator pos:line="3365" pos:column="10">=<pos:position pos:line="3365" pos:column="11"/></operator> <call><name pos:line="3365" pos:column="12">sqlite3BtreePrevious<pos:position pos:line="3365" pos:column="32"/></name><argument_list pos:line="3365" pos:column="32">(<argument><expr><name><name pos:line="3365" pos:column="33">pC<pos:position pos:line="3365" pos:column="35"/></name><operator pos:line="3365" pos:column="35">-&gt;<pos:position pos:line="3365" pos:column="40"/></operator><name pos:line="3365" pos:column="37">uc<pos:position pos:line="3365" pos:column="39"/></name><operator pos:line="3365" pos:column="39">.<pos:position pos:line="3365" pos:column="40"/></operator><name pos:line="3365" pos:column="40">pCursor<pos:position pos:line="3365" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3365" pos:column="49">0<pos:position pos:line="3365" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="3365" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="3365" pos:column="52"/></expr_stmt>
      <if pos:line="3366" pos:column="7">if<condition pos:line="3366" pos:column="9">( <expr><name pos:line="3366" pos:column="11">rc<pos:position pos:line="3366" pos:column="13"/></name><operator pos:line="3366" pos:column="13">!=<pos:position pos:line="3366" pos:column="15"/></operator><name pos:line="3366" pos:column="15">SQLITE_OK<pos:position pos:line="3366" pos:column="24"/></name></expr> )<pos:position pos:line="3366" pos:column="26"/></condition><then><block pos:line="3366" pos:column="26">{
        <if pos:line="3367" pos:column="9">if<condition pos:line="3367" pos:column="11">( <expr><name pos:line="3367" pos:column="13">rc<pos:position pos:line="3367" pos:column="15"/></name><operator pos:line="3367" pos:column="15">==<pos:position pos:line="3367" pos:column="17"/></operator><name pos:line="3367" pos:column="17">SQLITE_DONE<pos:position pos:line="3367" pos:column="28"/></name></expr> )<pos:position pos:line="3367" pos:column="30"/></condition><then><block pos:line="3367" pos:column="30">{
          <expr_stmt><expr><name pos:line="3368" pos:column="11">rc<pos:position pos:line="3368" pos:column="13"/></name> <operator pos:line="3368" pos:column="14">=<pos:position pos:line="3368" pos:column="15"/></operator> <name pos:line="3368" pos:column="16">SQLITE_OK<pos:position pos:line="3368" pos:column="25"/></name></expr>;<pos:position pos:line="3368" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><name pos:line="3369" pos:column="11">res<pos:position pos:line="3369" pos:column="14"/></name> <operator pos:line="3369" pos:column="15">=<pos:position pos:line="3369" pos:column="16"/></operator> <literal type="number" pos:line="3369" pos:column="17">1<pos:position pos:line="3369" pos:column="18"/></literal></expr>;<pos:position pos:line="3369" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="3370" pos:column="10"/></block></then><else pos:line="3370" pos:column="10">else<block pos:line="3370" pos:column="14">{
          <goto pos:line="3371" pos:column="11">goto <name pos:line="3371" pos:column="16">abort_due_to_error<pos:position pos:line="3371" pos:column="34"/></name>;<pos:position pos:line="3371" pos:column="35"/></goto>
        }<pos:position pos:line="3372" pos:column="10"/></block></else></if>
      }<pos:position pos:line="3373" pos:column="8"/></block></then></if>
    }<pos:position pos:line="3374" pos:column="6"/></block></then><else pos:line="3374" pos:column="6">else<block pos:line="3374" pos:column="10">{
      <comment type="block" pos:line="3375" pos:column="7">/* res might be negative because the table is empty.  Check to
      ** see if this is the case.
      */</comment>
      <expr_stmt><expr><name pos:line="3378" pos:column="7">res<pos:position pos:line="3378" pos:column="10"/></name> <operator pos:line="3378" pos:column="11">=<pos:position pos:line="3378" pos:column="12"/></operator> <call><name pos:line="3378" pos:column="13">sqlite3BtreeEof<pos:position pos:line="3378" pos:column="28"/></name><argument_list pos:line="3378" pos:column="28">(<argument><expr><name><name pos:line="3378" pos:column="29">pC<pos:position pos:line="3378" pos:column="31"/></name><operator pos:line="3378" pos:column="31">-&gt;<pos:position pos:line="3378" pos:column="36"/></operator><name pos:line="3378" pos:column="33">uc<pos:position pos:line="3378" pos:column="35"/></name><operator pos:line="3378" pos:column="35">.<pos:position pos:line="3378" pos:column="36"/></operator><name pos:line="3378" pos:column="36">pCursor<pos:position pos:line="3378" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="3378" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="3378" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="3379" pos:column="6"/></block></else></if>
  }<pos:position pos:line="3380" pos:column="4"/></block></else></if>
<label><name pos:line="3381" pos:column="1">seek_not_found<pos:position pos:line="3381" pos:column="15"/></name>:<pos:position pos:line="3381" pos:column="16"/></label>
  <expr_stmt><expr><call><name pos:line="3382" pos:column="3">assert<pos:position pos:line="3382" pos:column="9"/></name><argument_list pos:line="3382" pos:column="9">( <argument><expr><name><name pos:line="3382" pos:column="11">pOp<pos:position pos:line="3382" pos:column="14"/></name><operator pos:line="3382" pos:column="14">-&gt;<pos:position pos:line="3382" pos:column="19"/></operator><name pos:line="3382" pos:column="16">p2<pos:position pos:line="3382" pos:column="18"/></name></name><operator pos:line="3382" pos:column="18">&gt;<pos:position pos:line="3382" pos:column="22"/></operator><literal type="number" pos:line="3382" pos:column="19">0<pos:position pos:line="3382" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="3382" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="3382" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3383" pos:column="3">VdbeBranchTaken<pos:position pos:line="3383" pos:column="18"/></name><argument_list pos:line="3383" pos:column="18">(<argument><expr><name pos:line="3383" pos:column="19">res<pos:position pos:line="3383" pos:column="22"/></name><operator pos:line="3383" pos:column="22">!=<pos:position pos:line="3383" pos:column="24"/></operator><literal type="number" pos:line="3383" pos:column="24">0<pos:position pos:line="3383" pos:column="25"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="3383" pos:column="26">2<pos:position pos:line="3383" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="3383" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="3383" pos:column="29"/></expr_stmt>
  <if pos:line="3384" pos:column="3">if<condition pos:line="3384" pos:column="5">( <expr><name pos:line="3384" pos:column="7">res<pos:position pos:line="3384" pos:column="10"/></name></expr> )<pos:position pos:line="3384" pos:column="12"/></condition><then><block pos:line="3384" pos:column="12">{
    <goto pos:line="3385" pos:column="5">goto <name pos:line="3385" pos:column="10">jump_to_p2<pos:position pos:line="3385" pos:column="20"/></name>;<pos:position pos:line="3385" pos:column="21"/></goto>
  }<pos:position pos:line="3386" pos:column="4"/></block></then><elseif pos:line="3386" pos:column="4">else <if pos:line="3386" pos:column="9">if<condition pos:line="3386" pos:column="11">( <expr><name pos:line="3386" pos:column="13">eqOnly<pos:position pos:line="3386" pos:column="19"/></name></expr> )<pos:position pos:line="3386" pos:column="21"/></condition><then><block pos:line="3386" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="3387" pos:column="5">assert<pos:position pos:line="3387" pos:column="11"/></name><argument_list pos:line="3387" pos:column="11">( <argument><expr><name><name pos:line="3387" pos:column="13">pOp<pos:position pos:line="3387" pos:column="16"/></name><index pos:line="3387" pos:column="16">[<expr><literal type="number" pos:line="3387" pos:column="17">1<pos:position pos:line="3387" pos:column="18"/></literal></expr>]<pos:position pos:line="3387" pos:column="19"/></index></name><operator pos:line="3387" pos:column="19">.<pos:position pos:line="3387" pos:column="20"/></operator><name pos:line="3387" pos:column="20">opcode<pos:position pos:line="3387" pos:column="26"/></name><operator pos:line="3387" pos:column="26">==<pos:position pos:line="3387" pos:column="28"/></operator><name pos:line="3387" pos:column="28">OP_IdxLT<pos:position pos:line="3387" pos:column="36"/></name> <operator pos:line="3387" pos:column="37">||<pos:position pos:line="3387" pos:column="39"/></operator> <name><name pos:line="3387" pos:column="40">pOp<pos:position pos:line="3387" pos:column="43"/></name><index pos:line="3387" pos:column="43">[<expr><literal type="number" pos:line="3387" pos:column="44">1<pos:position pos:line="3387" pos:column="45"/></literal></expr>]<pos:position pos:line="3387" pos:column="46"/></index></name><operator pos:line="3387" pos:column="46">.<pos:position pos:line="3387" pos:column="47"/></operator><name pos:line="3387" pos:column="47">opcode<pos:position pos:line="3387" pos:column="53"/></name><operator pos:line="3387" pos:column="53">==<pos:position pos:line="3387" pos:column="55"/></operator><name pos:line="3387" pos:column="55">OP_IdxGT<pos:position pos:line="3387" pos:column="63"/></name></expr></argument> )<pos:position pos:line="3387" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="3387" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3388" pos:column="5">pOp<pos:position pos:line="3388" pos:column="8"/></name><operator pos:line="3388" pos:column="8">++<pos:position pos:line="3388" pos:column="10"/></operator></expr>;<pos:position pos:line="3388" pos:column="11"/></expr_stmt> <comment type="block" pos:line="3388" pos:column="12">/* Skip the OP_IdxLt or OP_IdxGT that follows */</comment>
  }<pos:position pos:line="3389" pos:column="4"/></block></then></if></elseif></if>
  <break pos:line="3390" pos:column="3">break;<pos:position pos:line="3390" pos:column="9"/></break>
}<pos:position pos:line="3391" pos:column="2"/></block>

<comment type="block" pos:line="3393" pos:column="1">/* Opcode: Found P1 P2 P3 P4 *
** Synopsis: key=r[P3@P4]
**
** If P4==0 then register P3 holds a blob constructed by MakeRecord.  If
** P4&gt;0 then register P3 is the first of P4 registers that form an unpacked
** record.
**
** Cursor P1 is on an index btree.  If the record identified by P3 and P4
** is a prefix of any entry in P1 then a jump is made to P2 and
** P1 is left pointing at the matching entry.
**
** This operation leaves the cursor in a state where it can be
** advanced in the forward direction.  The Next instruction will work,
** but not the Prev instruction.
**
** See also: NotFound, NoConflict, NotExists. SeekGe
*/</comment>
<comment type="block" pos:line="3410" pos:column="1">/* Opcode: NotFound P1 P2 P3 P4 *
** Synopsis: key=r[P3@P4]
**
** If P4==0 then register P3 holds a blob constructed by MakeRecord.  If
** P4&gt;0 then register P3 is the first of P4 registers that form an unpacked
** record.
** 
** Cursor P1 is on an index btree.  If the record identified by P3 and P4
** is not the prefix of any entry in P1 then a jump is made to P2.  If P1 
** does contain an entry whose prefix matches the P3/P4 record then control
** falls through to the next instruction and P1 is left pointing at the
** matching entry.
**
** This operation leaves the cursor in a state where it cannot be
** advanced in either direction.  In other words, the Next and Prev
** opcodes do not work after this operation.
**
** See also: Found, NotExists, NoConflict
*/</comment>
<comment type="block" pos:line="3429" pos:column="1">/* Opcode: NoConflict P1 P2 P3 P4 *
** Synopsis: key=r[P3@P4]
**
** If P4==0 then register P3 holds a blob constructed by MakeRecord.  If
** P4&gt;0 then register P3 is the first of P4 registers that form an unpacked
** record.
** 
** Cursor P1 is on an index btree.  If the record identified by P3 and P4
** contains any NULL value, jump immediately to P2.  If all terms of the
** record are not-NULL then a check is done to determine if any row in the
** P1 index btree has a matching key prefix.  If there are no matches, jump
** immediately to P2.  If there is a match, fall through and leave the P1
** cursor pointing to the matching row.
**
** This opcode is similar to OP_NotFound with the exceptions that the
** branch is always taken if any part of the search key input is NULL.
**
** This operation leaves the cursor in a state where it cannot be
** advanced in either direction.  In other words, the Next and Prev
** opcodes do not work after this operation.
**
** See also: NotFound, Found, NotExists
*/</comment>
<case pos:line="3452" pos:column="1">case <expr><name pos:line="3452" pos:column="6">OP_NoConflict<pos:position pos:line="3452" pos:column="19"/></name></expr>:<pos:position pos:line="3452" pos:column="20"/></case>     <comment type="block" pos:line="3452" pos:column="25">/* jump, in3 */</comment>
<case pos:line="3453" pos:column="1">case <expr><name pos:line="3453" pos:column="6">OP_NotFound<pos:position pos:line="3453" pos:column="17"/></name></expr>:<pos:position pos:line="3453" pos:column="18"/></case>       <comment type="block" pos:line="3453" pos:column="25">/* jump, in3 */</comment>
<case pos:line="3454" pos:column="1">case <expr><name pos:line="3454" pos:column="6">OP_Found<pos:position pos:line="3454" pos:column="14"/></name></expr>:<pos:position pos:line="3454" pos:column="15"/></case> <block pos:line="3454" pos:column="16">{        <comment type="block" pos:line="3454" pos:column="25">/* jump, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="3455" pos:column="3">int<pos:position pos:line="3455" pos:column="6"/></name></type> <name pos:line="3455" pos:column="7">alreadyExists<pos:position pos:line="3455" pos:column="20"/></name></decl>;<pos:position pos:line="3455" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3456" pos:column="3">int<pos:position pos:line="3456" pos:column="6"/></name></type> <name pos:line="3456" pos:column="7">takeJump<pos:position pos:line="3456" pos:column="15"/></name></decl>;<pos:position pos:line="3456" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3457" pos:column="3">int<pos:position pos:line="3457" pos:column="6"/></name></type> <name pos:line="3457" pos:column="7">ii<pos:position pos:line="3457" pos:column="9"/></name></decl>;<pos:position pos:line="3457" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3458" pos:column="3">VdbeCursor<pos:position pos:line="3458" pos:column="13"/></name> <modifier pos:line="3458" pos:column="14">*<pos:position pos:line="3458" pos:column="15"/></modifier></type><name pos:line="3458" pos:column="15">pC<pos:position pos:line="3458" pos:column="17"/></name></decl>;<pos:position pos:line="3458" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3459" pos:column="3">int<pos:position pos:line="3459" pos:column="6"/></name></type> <name pos:line="3459" pos:column="7">res<pos:position pos:line="3459" pos:column="10"/></name></decl>;<pos:position pos:line="3459" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3460" pos:column="3">UnpackedRecord<pos:position pos:line="3460" pos:column="17"/></name> <modifier pos:line="3460" pos:column="18">*<pos:position pos:line="3460" pos:column="19"/></modifier></type><name pos:line="3460" pos:column="19">pFree<pos:position pos:line="3460" pos:column="24"/></name></decl>;<pos:position pos:line="3460" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3461" pos:column="3">UnpackedRecord<pos:position pos:line="3461" pos:column="17"/></name> <modifier pos:line="3461" pos:column="18">*<pos:position pos:line="3461" pos:column="19"/></modifier></type><name pos:line="3461" pos:column="19">pIdxKey<pos:position pos:line="3461" pos:column="26"/></name></decl>;<pos:position pos:line="3461" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3462" pos:column="3">UnpackedRecord<pos:position pos:line="3462" pos:column="17"/></name></type> <name pos:line="3462" pos:column="18">r<pos:position pos:line="3462" pos:column="19"/></name></decl>;<pos:position pos:line="3462" pos:column="20"/></decl_stmt>

<cpp:ifdef pos:line="3464" pos:column="1">#<cpp:directive pos:line="3464" pos:column="2">ifdef<pos:position pos:line="3464" pos:column="7"/></cpp:directive> <name pos:line="3464" pos:column="8">SQLITE_TEST<pos:position pos:line="3464" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="3465" pos:column="3">if<condition pos:line="3465" pos:column="5">( <expr><name><name pos:line="3465" pos:column="7">pOp<pos:position pos:line="3465" pos:column="10"/></name><operator pos:line="3465" pos:column="10">-&gt;<pos:position pos:line="3465" pos:column="15"/></operator><name pos:line="3465" pos:column="12">opcode<pos:position pos:line="3465" pos:column="18"/></name></name><operator pos:line="3465" pos:column="18">!=<pos:position pos:line="3465" pos:column="20"/></operator><name pos:line="3465" pos:column="20">OP_NoConflict<pos:position pos:line="3465" pos:column="33"/></name></expr> )<pos:position pos:line="3465" pos:column="35"/></condition><then pos:line="3465" pos:column="35"> <block type="pseudo"><expr_stmt><expr><name pos:line="3465" pos:column="36">sqlite3_found_count<pos:position pos:line="3465" pos:column="55"/></name><operator pos:line="3465" pos:column="55">++<pos:position pos:line="3465" pos:column="57"/></operator></expr>;<pos:position pos:line="3465" pos:column="58"/></expr_stmt></block></then></if>
<cpp:endif pos:line="3466" pos:column="1">#<cpp:directive pos:line="3466" pos:column="2">endif<pos:position pos:line="3466" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="3468" pos:column="3">assert<pos:position pos:line="3468" pos:column="9"/></name><argument_list pos:line="3468" pos:column="9">( <argument><expr><name><name pos:line="3468" pos:column="11">pOp<pos:position pos:line="3468" pos:column="14"/></name><operator pos:line="3468" pos:column="14">-&gt;<pos:position pos:line="3468" pos:column="19"/></operator><name pos:line="3468" pos:column="16">p1<pos:position pos:line="3468" pos:column="18"/></name></name><operator pos:line="3468" pos:column="18">&gt;=<pos:position pos:line="3468" pos:column="23"/></operator><literal type="number" pos:line="3468" pos:column="20">0<pos:position pos:line="3468" pos:column="21"/></literal> <operator pos:line="3468" pos:column="22">&amp;&amp;<pos:position pos:line="3468" pos:column="32"/></operator> <name><name pos:line="3468" pos:column="25">pOp<pos:position pos:line="3468" pos:column="28"/></name><operator pos:line="3468" pos:column="28">-&gt;<pos:position pos:line="3468" pos:column="33"/></operator><name pos:line="3468" pos:column="30">p1<pos:position pos:line="3468" pos:column="32"/></name></name><operator pos:line="3468" pos:column="32">&lt;<pos:position pos:line="3468" pos:column="36"/></operator><name><name pos:line="3468" pos:column="33">p<pos:position pos:line="3468" pos:column="34"/></name><operator pos:line="3468" pos:column="34">-&gt;<pos:position pos:line="3468" pos:column="39"/></operator><name pos:line="3468" pos:column="36">nCursor<pos:position pos:line="3468" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3468" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3468" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3469" pos:column="3">assert<pos:position pos:line="3469" pos:column="9"/></name><argument_list pos:line="3469" pos:column="9">( <argument><expr><name><name pos:line="3469" pos:column="11">pOp<pos:position pos:line="3469" pos:column="14"/></name><operator pos:line="3469" pos:column="14">-&gt;<pos:position pos:line="3469" pos:column="19"/></operator><name pos:line="3469" pos:column="16">p4type<pos:position pos:line="3469" pos:column="22"/></name></name><operator pos:line="3469" pos:column="22">==<pos:position pos:line="3469" pos:column="24"/></operator><name pos:line="3469" pos:column="24">P4_INT32<pos:position pos:line="3469" pos:column="32"/></name></expr></argument> )<pos:position pos:line="3469" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3469" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3470" pos:column="3">pC<pos:position pos:line="3470" pos:column="5"/></name> <operator pos:line="3470" pos:column="6">=<pos:position pos:line="3470" pos:column="7"/></operator> <name><name pos:line="3470" pos:column="8">p<pos:position pos:line="3470" pos:column="9"/></name><operator pos:line="3470" pos:column="9">-&gt;<pos:position pos:line="3470" pos:column="14"/></operator><name pos:line="3470" pos:column="11">apCsr<pos:position pos:line="3470" pos:column="16"/></name><index pos:line="3470" pos:column="16">[<expr><name><name pos:line="3470" pos:column="17">pOp<pos:position pos:line="3470" pos:column="20"/></name><operator pos:line="3470" pos:column="20">-&gt;<pos:position pos:line="3470" pos:column="25"/></operator><name pos:line="3470" pos:column="22">p1<pos:position pos:line="3470" pos:column="24"/></name></name></expr>]<pos:position pos:line="3470" pos:column="25"/></index></name></expr>;<pos:position pos:line="3470" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3471" pos:column="3">assert<pos:position pos:line="3471" pos:column="9"/></name><argument_list pos:line="3471" pos:column="9">( <argument><expr><name pos:line="3471" pos:column="11">pC<pos:position pos:line="3471" pos:column="13"/></name><operator pos:line="3471" pos:column="13">!=<pos:position pos:line="3471" pos:column="15"/></operator><literal type="number" pos:line="3471" pos:column="15">0<pos:position pos:line="3471" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3471" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3471" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="3472" pos:column="1">#<cpp:directive pos:line="3472" pos:column="2">ifdef<pos:position pos:line="3472" pos:column="7"/></cpp:directive> <name pos:line="3472" pos:column="8">SQLITE_DEBUG<pos:position pos:line="3472" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="3473" pos:column="3">pC<pos:position pos:line="3473" pos:column="5"/></name><operator pos:line="3473" pos:column="5">-&gt;<pos:position pos:line="3473" pos:column="10"/></operator><name pos:line="3473" pos:column="7">seekOp<pos:position pos:line="3473" pos:column="13"/></name></name> <operator pos:line="3473" pos:column="14">=<pos:position pos:line="3473" pos:column="15"/></operator> <name><name pos:line="3473" pos:column="16">pOp<pos:position pos:line="3473" pos:column="19"/></name><operator pos:line="3473" pos:column="19">-&gt;<pos:position pos:line="3473" pos:column="24"/></operator><name pos:line="3473" pos:column="21">opcode<pos:position pos:line="3473" pos:column="27"/></name></name></expr>;<pos:position pos:line="3473" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="3474" pos:column="1">#<cpp:directive pos:line="3474" pos:column="2">endif<pos:position pos:line="3474" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="3475" pos:column="3">pIn3<pos:position pos:line="3475" pos:column="7"/></name> <operator pos:line="3475" pos:column="8">=<pos:position pos:line="3475" pos:column="9"/></operator> <operator pos:line="3475" pos:column="10">&amp;<pos:position pos:line="3475" pos:column="15"/></operator><name><name pos:line="3475" pos:column="11">aMem<pos:position pos:line="3475" pos:column="15"/></name><index pos:line="3475" pos:column="15">[<expr><name><name pos:line="3475" pos:column="16">pOp<pos:position pos:line="3475" pos:column="19"/></name><operator pos:line="3475" pos:column="19">-&gt;<pos:position pos:line="3475" pos:column="24"/></operator><name pos:line="3475" pos:column="21">p3<pos:position pos:line="3475" pos:column="23"/></name></name></expr>]<pos:position pos:line="3475" pos:column="24"/></index></name></expr>;<pos:position pos:line="3475" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3476" pos:column="3">assert<pos:position pos:line="3476" pos:column="9"/></name><argument_list pos:line="3476" pos:column="9">( <argument><expr><name><name pos:line="3476" pos:column="11">pC<pos:position pos:line="3476" pos:column="13"/></name><operator pos:line="3476" pos:column="13">-&gt;<pos:position pos:line="3476" pos:column="18"/></operator><name pos:line="3476" pos:column="15">eCurType<pos:position pos:line="3476" pos:column="23"/></name></name><operator pos:line="3476" pos:column="23">==<pos:position pos:line="3476" pos:column="25"/></operator><name pos:line="3476" pos:column="25">CURTYPE_BTREE<pos:position pos:line="3476" pos:column="38"/></name></expr></argument> )<pos:position pos:line="3476" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3476" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3477" pos:column="3">assert<pos:position pos:line="3477" pos:column="9"/></name><argument_list pos:line="3477" pos:column="9">( <argument><expr><name><name pos:line="3477" pos:column="11">pC<pos:position pos:line="3477" pos:column="13"/></name><operator pos:line="3477" pos:column="13">-&gt;<pos:position pos:line="3477" pos:column="18"/></operator><name pos:line="3477" pos:column="15">uc<pos:position pos:line="3477" pos:column="17"/></name><operator pos:line="3477" pos:column="17">.<pos:position pos:line="3477" pos:column="18"/></operator><name pos:line="3477" pos:column="18">pCursor<pos:position pos:line="3477" pos:column="25"/></name></name><operator pos:line="3477" pos:column="25">!=<pos:position pos:line="3477" pos:column="27"/></operator><literal type="number" pos:line="3477" pos:column="27">0<pos:position pos:line="3477" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="3477" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3477" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3478" pos:column="3">assert<pos:position pos:line="3478" pos:column="9"/></name><argument_list pos:line="3478" pos:column="9">( <argument><expr><name><name pos:line="3478" pos:column="11">pC<pos:position pos:line="3478" pos:column="13"/></name><operator pos:line="3478" pos:column="13">-&gt;<pos:position pos:line="3478" pos:column="18"/></operator><name pos:line="3478" pos:column="15">isTable<pos:position pos:line="3478" pos:column="22"/></name></name><operator pos:line="3478" pos:column="22">==<pos:position pos:line="3478" pos:column="24"/></operator><literal type="number" pos:line="3478" pos:column="24">0<pos:position pos:line="3478" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3478" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3478" pos:column="28"/></expr_stmt>
  <if pos:line="3479" pos:column="3">if<condition pos:line="3479" pos:column="5">( <expr><name><name pos:line="3479" pos:column="7">pOp<pos:position pos:line="3479" pos:column="10"/></name><operator pos:line="3479" pos:column="10">-&gt;<pos:position pos:line="3479" pos:column="15"/></operator><name pos:line="3479" pos:column="12">p4<pos:position pos:line="3479" pos:column="14"/></name><operator pos:line="3479" pos:column="14">.<pos:position pos:line="3479" pos:column="15"/></operator><name pos:line="3479" pos:column="15">i<pos:position pos:line="3479" pos:column="16"/></name></name><operator pos:line="3479" pos:column="16">&gt;<pos:position pos:line="3479" pos:column="20"/></operator><literal type="number" pos:line="3479" pos:column="17">0<pos:position pos:line="3479" pos:column="18"/></literal></expr> )<pos:position pos:line="3479" pos:column="20"/></condition><then><block pos:line="3479" pos:column="20">{
    <expr_stmt><expr><name><name pos:line="3480" pos:column="5">r<pos:position pos:line="3480" pos:column="6"/></name><operator pos:line="3480" pos:column="6">.<pos:position pos:line="3480" pos:column="7"/></operator><name pos:line="3480" pos:column="7">pKeyInfo<pos:position pos:line="3480" pos:column="15"/></name></name> <operator pos:line="3480" pos:column="16">=<pos:position pos:line="3480" pos:column="17"/></operator> <name><name pos:line="3480" pos:column="18">pC<pos:position pos:line="3480" pos:column="20"/></name><operator pos:line="3480" pos:column="20">-&gt;<pos:position pos:line="3480" pos:column="25"/></operator><name pos:line="3480" pos:column="22">pKeyInfo<pos:position pos:line="3480" pos:column="30"/></name></name></expr>;<pos:position pos:line="3480" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3481" pos:column="5">r<pos:position pos:line="3481" pos:column="6"/></name><operator pos:line="3481" pos:column="6">.<pos:position pos:line="3481" pos:column="7"/></operator><name pos:line="3481" pos:column="7">nField<pos:position pos:line="3481" pos:column="13"/></name></name> <operator pos:line="3481" pos:column="14">=<pos:position pos:line="3481" pos:column="15"/></operator> <operator pos:line="3481" pos:column="16">(<pos:position pos:line="3481" pos:column="17"/></operator><name pos:line="3481" pos:column="17">u16<pos:position pos:line="3481" pos:column="20"/></name><operator pos:line="3481" pos:column="20">)<pos:position pos:line="3481" pos:column="21"/></operator><name><name pos:line="3481" pos:column="21">pOp<pos:position pos:line="3481" pos:column="24"/></name><operator pos:line="3481" pos:column="24">-&gt;<pos:position pos:line="3481" pos:column="29"/></operator><name pos:line="3481" pos:column="26">p4<pos:position pos:line="3481" pos:column="28"/></name><operator pos:line="3481" pos:column="28">.<pos:position pos:line="3481" pos:column="29"/></operator><name pos:line="3481" pos:column="29">i<pos:position pos:line="3481" pos:column="30"/></name></name></expr>;<pos:position pos:line="3481" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3482" pos:column="5">r<pos:position pos:line="3482" pos:column="6"/></name><operator pos:line="3482" pos:column="6">.<pos:position pos:line="3482" pos:column="7"/></operator><name pos:line="3482" pos:column="7">aMem<pos:position pos:line="3482" pos:column="11"/></name></name> <operator pos:line="3482" pos:column="12">=<pos:position pos:line="3482" pos:column="13"/></operator> <name pos:line="3482" pos:column="14">pIn3<pos:position pos:line="3482" pos:column="18"/></name></expr>;<pos:position pos:line="3482" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="3483" pos:column="1">#<cpp:directive pos:line="3483" pos:column="2">ifdef<pos:position pos:line="3483" pos:column="7"/></cpp:directive> <name pos:line="3483" pos:column="8">SQLITE_DEBUG<pos:position pos:line="3483" pos:column="20"/></name></cpp:ifdef>
    <for pos:line="3484" pos:column="5">for<control pos:line="3484" pos:column="8">(<init><expr><name pos:line="3484" pos:column="9">ii<pos:position pos:line="3484" pos:column="11"/></name><operator pos:line="3484" pos:column="11">=<pos:position pos:line="3484" pos:column="12"/></operator><literal type="number" pos:line="3484" pos:column="12">0<pos:position pos:line="3484" pos:column="13"/></literal></expr>;<pos:position pos:line="3484" pos:column="14"/></init> <condition><expr><name pos:line="3484" pos:column="15">ii<pos:position pos:line="3484" pos:column="17"/></name><operator pos:line="3484" pos:column="17">&lt;<pos:position pos:line="3484" pos:column="21"/></operator><name><name pos:line="3484" pos:column="18">r<pos:position pos:line="3484" pos:column="19"/></name><operator pos:line="3484" pos:column="19">.<pos:position pos:line="3484" pos:column="20"/></operator><name pos:line="3484" pos:column="20">nField<pos:position pos:line="3484" pos:column="26"/></name></name></expr>;<pos:position pos:line="3484" pos:column="27"/></condition> <incr><expr><name pos:line="3484" pos:column="28">ii<pos:position pos:line="3484" pos:column="30"/></name><operator pos:line="3484" pos:column="30">++<pos:position pos:line="3484" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="3484" pos:column="33"/></control><block pos:line="3484" pos:column="33">{
      <expr_stmt><expr><call><name pos:line="3485" pos:column="7">assert<pos:position pos:line="3485" pos:column="13"/></name><argument_list pos:line="3485" pos:column="13">( <argument><expr><call><name pos:line="3485" pos:column="15">memIsValid<pos:position pos:line="3485" pos:column="25"/></name><argument_list pos:line="3485" pos:column="25">(<argument><expr><operator pos:line="3485" pos:column="26">&amp;<pos:position pos:line="3485" pos:column="31"/></operator><name><name pos:line="3485" pos:column="27">r<pos:position pos:line="3485" pos:column="28"/></name><operator pos:line="3485" pos:column="28">.<pos:position pos:line="3485" pos:column="29"/></operator><name pos:line="3485" pos:column="29">aMem<pos:position pos:line="3485" pos:column="33"/></name><index pos:line="3485" pos:column="33">[<expr><name pos:line="3485" pos:column="34">ii<pos:position pos:line="3485" pos:column="36"/></name></expr>]<pos:position pos:line="3485" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="3485" pos:column="38"/></argument_list></call></expr></argument> )<pos:position pos:line="3485" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3485" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3486" pos:column="7">assert<pos:position pos:line="3486" pos:column="13"/></name><argument_list pos:line="3486" pos:column="13">( <argument><expr><operator pos:line="3486" pos:column="15">(<pos:position pos:line="3486" pos:column="16"/></operator><name><name pos:line="3486" pos:column="16">r<pos:position pos:line="3486" pos:column="17"/></name><operator pos:line="3486" pos:column="17">.<pos:position pos:line="3486" pos:column="18"/></operator><name pos:line="3486" pos:column="18">aMem<pos:position pos:line="3486" pos:column="22"/></name><index pos:line="3486" pos:column="22">[<expr><name pos:line="3486" pos:column="23">ii<pos:position pos:line="3486" pos:column="25"/></name></expr>]<pos:position pos:line="3486" pos:column="26"/></index></name><operator pos:line="3486" pos:column="26">.<pos:position pos:line="3486" pos:column="27"/></operator><name pos:line="3486" pos:column="27">flags<pos:position pos:line="3486" pos:column="32"/></name> <operator pos:line="3486" pos:column="33">&amp;<pos:position pos:line="3486" pos:column="38"/></operator> <name pos:line="3486" pos:column="35">MEM_Zero<pos:position pos:line="3486" pos:column="43"/></name><operator pos:line="3486" pos:column="43">)<pos:position pos:line="3486" pos:column="44"/></operator><operator pos:line="3486" pos:column="44">==<pos:position pos:line="3486" pos:column="46"/></operator><literal type="number" pos:line="3486" pos:column="46">0<pos:position pos:line="3486" pos:column="47"/></literal> <operator pos:line="3486" pos:column="48">||<pos:position pos:line="3486" pos:column="50"/></operator> <name><name pos:line="3486" pos:column="51">r<pos:position pos:line="3486" pos:column="52"/></name><operator pos:line="3486" pos:column="52">.<pos:position pos:line="3486" pos:column="53"/></operator><name pos:line="3486" pos:column="53">aMem<pos:position pos:line="3486" pos:column="57"/></name><index pos:line="3486" pos:column="57">[<expr><name pos:line="3486" pos:column="58">ii<pos:position pos:line="3486" pos:column="60"/></name></expr>]<pos:position pos:line="3486" pos:column="61"/></index></name><operator pos:line="3486" pos:column="61">.<pos:position pos:line="3486" pos:column="62"/></operator><name pos:line="3486" pos:column="62">n<pos:position pos:line="3486" pos:column="63"/></name><operator pos:line="3486" pos:column="63">==<pos:position pos:line="3486" pos:column="65"/></operator><literal type="number" pos:line="3486" pos:column="65">0<pos:position pos:line="3486" pos:column="66"/></literal></expr></argument> )<pos:position pos:line="3486" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="3486" pos:column="69"/></expr_stmt>
      <if pos:line="3487" pos:column="7">if<condition pos:line="3487" pos:column="9">( <expr><name pos:line="3487" pos:column="11">ii<pos:position pos:line="3487" pos:column="13"/></name></expr> )<pos:position pos:line="3487" pos:column="15"/></condition><then pos:line="3487" pos:column="15"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="3487" pos:column="16">REGISTER_TRACE<pos:position pos:line="3487" pos:column="30"/></name><argument_list pos:line="3487" pos:column="30">(<argument><expr><name><name pos:line="3487" pos:column="31">pOp<pos:position pos:line="3487" pos:column="34"/></name><operator pos:line="3487" pos:column="34">-&gt;<pos:position pos:line="3487" pos:column="39"/></operator><name pos:line="3487" pos:column="36">p3<pos:position pos:line="3487" pos:column="38"/></name></name><operator pos:line="3487" pos:column="38">+<pos:position pos:line="3487" pos:column="39"/></operator><name pos:line="3487" pos:column="39">ii<pos:position pos:line="3487" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="3487" pos:column="43">&amp;<pos:position pos:line="3487" pos:column="48"/></operator><name><name pos:line="3487" pos:column="44">r<pos:position pos:line="3487" pos:column="45"/></name><operator pos:line="3487" pos:column="45">.<pos:position pos:line="3487" pos:column="46"/></operator><name pos:line="3487" pos:column="46">aMem<pos:position pos:line="3487" pos:column="50"/></name><index pos:line="3487" pos:column="50">[<expr><name pos:line="3487" pos:column="51">ii<pos:position pos:line="3487" pos:column="53"/></name></expr>]<pos:position pos:line="3487" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="3487" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="3487" pos:column="56"/></expr_stmt></block></then></if>
    }<pos:position pos:line="3488" pos:column="6"/></block></for>
<cpp:endif pos:line="3489" pos:column="1">#<cpp:directive pos:line="3489" pos:column="2">endif<pos:position pos:line="3489" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="3490" pos:column="5">pIdxKey<pos:position pos:line="3490" pos:column="12"/></name> <operator pos:line="3490" pos:column="13">=<pos:position pos:line="3490" pos:column="14"/></operator> <operator pos:line="3490" pos:column="15">&amp;<pos:position pos:line="3490" pos:column="20"/></operator><name pos:line="3490" pos:column="16">r<pos:position pos:line="3490" pos:column="17"/></name></expr>;<pos:position pos:line="3490" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3491" pos:column="5">pFree<pos:position pos:line="3491" pos:column="10"/></name> <operator pos:line="3491" pos:column="11">=<pos:position pos:line="3491" pos:column="12"/></operator> <literal type="number" pos:line="3491" pos:column="13">0<pos:position pos:line="3491" pos:column="14"/></literal></expr>;<pos:position pos:line="3491" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="3492" pos:column="4"/></block></then><else pos:line="3492" pos:column="4">else<block pos:line="3492" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="3493" pos:column="5">assert<pos:position pos:line="3493" pos:column="11"/></name><argument_list pos:line="3493" pos:column="11">( <argument><expr><name><name pos:line="3493" pos:column="13">pIn3<pos:position pos:line="3493" pos:column="17"/></name><operator pos:line="3493" pos:column="17">-&gt;<pos:position pos:line="3493" pos:column="22"/></operator><name pos:line="3493" pos:column="19">flags<pos:position pos:line="3493" pos:column="24"/></name></name> <operator pos:line="3493" pos:column="25">&amp;<pos:position pos:line="3493" pos:column="30"/></operator> <name pos:line="3493" pos:column="27">MEM_Blob<pos:position pos:line="3493" pos:column="35"/></name></expr></argument> )<pos:position pos:line="3493" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3493" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3494" pos:column="5">rc<pos:position pos:line="3494" pos:column="7"/></name> <operator pos:line="3494" pos:column="8">=<pos:position pos:line="3494" pos:column="9"/></operator> <call><name pos:line="3494" pos:column="10">ExpandBlob<pos:position pos:line="3494" pos:column="20"/></name><argument_list pos:line="3494" pos:column="20">(<argument><expr><name pos:line="3494" pos:column="21">pIn3<pos:position pos:line="3494" pos:column="25"/></name></expr></argument>)<pos:position pos:line="3494" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3494" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3495" pos:column="5">assert<pos:position pos:line="3495" pos:column="11"/></name><argument_list pos:line="3495" pos:column="11">( <argument><expr><name pos:line="3495" pos:column="13">rc<pos:position pos:line="3495" pos:column="15"/></name><operator pos:line="3495" pos:column="15">==<pos:position pos:line="3495" pos:column="17"/></operator><name pos:line="3495" pos:column="17">SQLITE_OK<pos:position pos:line="3495" pos:column="26"/></name> <operator pos:line="3495" pos:column="27">||<pos:position pos:line="3495" pos:column="29"/></operator> <name pos:line="3495" pos:column="30">rc<pos:position pos:line="3495" pos:column="32"/></name><operator pos:line="3495" pos:column="32">==<pos:position pos:line="3495" pos:column="34"/></operator><name pos:line="3495" pos:column="34">SQLITE_NOMEM<pos:position pos:line="3495" pos:column="46"/></name></expr></argument> )<pos:position pos:line="3495" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3495" pos:column="49"/></expr_stmt>
    <if pos:line="3496" pos:column="5">if<condition pos:line="3496" pos:column="7">( <expr><name pos:line="3496" pos:column="9">rc<pos:position pos:line="3496" pos:column="11"/></name></expr> )<pos:position pos:line="3496" pos:column="13"/></condition><then pos:line="3496" pos:column="13"> <block type="pseudo"><goto pos:line="3496" pos:column="14">goto <name pos:line="3496" pos:column="19">no_mem<pos:position pos:line="3496" pos:column="25"/></name>;<pos:position pos:line="3496" pos:column="26"/></goto></block></then></if>
    <expr_stmt><expr><name pos:line="3497" pos:column="5">pFree<pos:position pos:line="3497" pos:column="10"/></name> <operator pos:line="3497" pos:column="11">=<pos:position pos:line="3497" pos:column="12"/></operator> <name pos:line="3497" pos:column="13">pIdxKey<pos:position pos:line="3497" pos:column="20"/></name> <operator pos:line="3497" pos:column="21">=<pos:position pos:line="3497" pos:column="22"/></operator> <call><name pos:line="3497" pos:column="23">sqlite3VdbeAllocUnpackedRecord<pos:position pos:line="3497" pos:column="53"/></name><argument_list pos:line="3497" pos:column="53">(<argument><expr><name><name pos:line="3497" pos:column="54">pC<pos:position pos:line="3497" pos:column="56"/></name><operator pos:line="3497" pos:column="56">-&gt;<pos:position pos:line="3497" pos:column="61"/></operator><name pos:line="3497" pos:column="58">pKeyInfo<pos:position pos:line="3497" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="3497" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="3497" pos:column="68"/></expr_stmt>
    <if pos:line="3498" pos:column="5">if<condition pos:line="3498" pos:column="7">( <expr><name pos:line="3498" pos:column="9">pIdxKey<pos:position pos:line="3498" pos:column="16"/></name><operator pos:line="3498" pos:column="16">==<pos:position pos:line="3498" pos:column="18"/></operator><literal type="number" pos:line="3498" pos:column="18">0<pos:position pos:line="3498" pos:column="19"/></literal></expr> )<pos:position pos:line="3498" pos:column="21"/></condition><then pos:line="3498" pos:column="21"> <block type="pseudo"><goto pos:line="3498" pos:column="22">goto <name pos:line="3498" pos:column="27">no_mem<pos:position pos:line="3498" pos:column="33"/></name>;<pos:position pos:line="3498" pos:column="34"/></goto></block></then></if>
    <expr_stmt><expr><call><name pos:line="3499" pos:column="5">sqlite3VdbeRecordUnpack<pos:position pos:line="3499" pos:column="28"/></name><argument_list pos:line="3499" pos:column="28">(<argument><expr><name><name pos:line="3499" pos:column="29">pC<pos:position pos:line="3499" pos:column="31"/></name><operator pos:line="3499" pos:column="31">-&gt;<pos:position pos:line="3499" pos:column="36"/></operator><name pos:line="3499" pos:column="33">pKeyInfo<pos:position pos:line="3499" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3499" pos:column="43">pIn3<pos:position pos:line="3499" pos:column="47"/></name><operator pos:line="3499" pos:column="47">-&gt;<pos:position pos:line="3499" pos:column="52"/></operator><name pos:line="3499" pos:column="49">n<pos:position pos:line="3499" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3499" pos:column="52">pIn3<pos:position pos:line="3499" pos:column="56"/></name><operator pos:line="3499" pos:column="56">-&gt;<pos:position pos:line="3499" pos:column="61"/></operator><name pos:line="3499" pos:column="58">z<pos:position pos:line="3499" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="3499" pos:column="61">pIdxKey<pos:position pos:line="3499" pos:column="68"/></name></expr></argument>)<pos:position pos:line="3499" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="3499" pos:column="70"/></expr_stmt>
  }<pos:position pos:line="3500" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="3501" pos:column="3">pIdxKey<pos:position pos:line="3501" pos:column="10"/></name><operator pos:line="3501" pos:column="10">-&gt;<pos:position pos:line="3501" pos:column="15"/></operator><name pos:line="3501" pos:column="12">default_rc<pos:position pos:line="3501" pos:column="22"/></name></name> <operator pos:line="3501" pos:column="23">=<pos:position pos:line="3501" pos:column="24"/></operator> <literal type="number" pos:line="3501" pos:column="25">0<pos:position pos:line="3501" pos:column="26"/></literal></expr>;<pos:position pos:line="3501" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3502" pos:column="3">takeJump<pos:position pos:line="3502" pos:column="11"/></name> <operator pos:line="3502" pos:column="12">=<pos:position pos:line="3502" pos:column="13"/></operator> <literal type="number" pos:line="3502" pos:column="14">0<pos:position pos:line="3502" pos:column="15"/></literal></expr>;<pos:position pos:line="3502" pos:column="16"/></expr_stmt>
  <if pos:line="3503" pos:column="3">if<condition pos:line="3503" pos:column="5">( <expr><name><name pos:line="3503" pos:column="7">pOp<pos:position pos:line="3503" pos:column="10"/></name><operator pos:line="3503" pos:column="10">-&gt;<pos:position pos:line="3503" pos:column="15"/></operator><name pos:line="3503" pos:column="12">opcode<pos:position pos:line="3503" pos:column="18"/></name></name><operator pos:line="3503" pos:column="18">==<pos:position pos:line="3503" pos:column="20"/></operator><name pos:line="3503" pos:column="20">OP_NoConflict<pos:position pos:line="3503" pos:column="33"/></name></expr> )<pos:position pos:line="3503" pos:column="35"/></condition><then><block pos:line="3503" pos:column="35">{
    <comment type="block" pos:line="3504" pos:column="5">/* For the OP_NoConflict opcode, take the jump if any of the
    ** input fields are NULL, since any key with a NULL will not
    ** conflict */</comment>
    <for pos:line="3507" pos:column="5">for<control pos:line="3507" pos:column="8">(<init><expr><name pos:line="3507" pos:column="9">ii<pos:position pos:line="3507" pos:column="11"/></name><operator pos:line="3507" pos:column="11">=<pos:position pos:line="3507" pos:column="12"/></operator><literal type="number" pos:line="3507" pos:column="12">0<pos:position pos:line="3507" pos:column="13"/></literal></expr>;<pos:position pos:line="3507" pos:column="14"/></init> <condition><expr><name pos:line="3507" pos:column="15">ii<pos:position pos:line="3507" pos:column="17"/></name><operator pos:line="3507" pos:column="17">&lt;<pos:position pos:line="3507" pos:column="21"/></operator><name><name pos:line="3507" pos:column="18">pIdxKey<pos:position pos:line="3507" pos:column="25"/></name><operator pos:line="3507" pos:column="25">-&gt;<pos:position pos:line="3507" pos:column="30"/></operator><name pos:line="3507" pos:column="27">nField<pos:position pos:line="3507" pos:column="33"/></name></name></expr>;<pos:position pos:line="3507" pos:column="34"/></condition> <incr><expr><name pos:line="3507" pos:column="35">ii<pos:position pos:line="3507" pos:column="37"/></name><operator pos:line="3507" pos:column="37">++<pos:position pos:line="3507" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="3507" pos:column="40"/></control><block pos:line="3507" pos:column="40">{
      <if pos:line="3508" pos:column="7">if<condition pos:line="3508" pos:column="9">( <expr><name><name pos:line="3508" pos:column="11">pIdxKey<pos:position pos:line="3508" pos:column="18"/></name><operator pos:line="3508" pos:column="18">-&gt;<pos:position pos:line="3508" pos:column="23"/></operator><name pos:line="3508" pos:column="20">aMem<pos:position pos:line="3508" pos:column="24"/></name><index pos:line="3508" pos:column="24">[<expr><name pos:line="3508" pos:column="25">ii<pos:position pos:line="3508" pos:column="27"/></name></expr>]<pos:position pos:line="3508" pos:column="28"/></index></name><operator pos:line="3508" pos:column="28">.<pos:position pos:line="3508" pos:column="29"/></operator><name pos:line="3508" pos:column="29">flags<pos:position pos:line="3508" pos:column="34"/></name> <operator pos:line="3508" pos:column="35">&amp;<pos:position pos:line="3508" pos:column="40"/></operator> <name pos:line="3508" pos:column="37">MEM_Null<pos:position pos:line="3508" pos:column="45"/></name></expr> )<pos:position pos:line="3508" pos:column="47"/></condition><then><block pos:line="3508" pos:column="47">{
        <expr_stmt><expr><name pos:line="3509" pos:column="9">takeJump<pos:position pos:line="3509" pos:column="17"/></name> <operator pos:line="3509" pos:column="18">=<pos:position pos:line="3509" pos:column="19"/></operator> <literal type="number" pos:line="3509" pos:column="20">1<pos:position pos:line="3509" pos:column="21"/></literal></expr>;<pos:position pos:line="3509" pos:column="22"/></expr_stmt>
        <break pos:line="3510" pos:column="9">break;<pos:position pos:line="3510" pos:column="15"/></break>
      }<pos:position pos:line="3511" pos:column="8"/></block></then></if>
    }<pos:position pos:line="3512" pos:column="6"/></block></for>
  }<pos:position pos:line="3513" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="3514" pos:column="3">rc<pos:position pos:line="3514" pos:column="5"/></name> <operator pos:line="3514" pos:column="6">=<pos:position pos:line="3514" pos:column="7"/></operator> <call><name pos:line="3514" pos:column="8">sqlite3BtreeMovetoUnpacked<pos:position pos:line="3514" pos:column="34"/></name><argument_list pos:line="3514" pos:column="34">(<argument><expr><name><name pos:line="3514" pos:column="35">pC<pos:position pos:line="3514" pos:column="37"/></name><operator pos:line="3514" pos:column="37">-&gt;<pos:position pos:line="3514" pos:column="42"/></operator><name pos:line="3514" pos:column="39">uc<pos:position pos:line="3514" pos:column="41"/></name><operator pos:line="3514" pos:column="41">.<pos:position pos:line="3514" pos:column="42"/></operator><name pos:line="3514" pos:column="42">pCursor<pos:position pos:line="3514" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="3514" pos:column="51">pIdxKey<pos:position pos:line="3514" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3514" pos:column="60">0<pos:position pos:line="3514" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3514" pos:column="63">0<pos:position pos:line="3514" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="3514" pos:column="66">&amp;<pos:position pos:line="3514" pos:column="71"/></operator><name pos:line="3514" pos:column="67">res<pos:position pos:line="3514" pos:column="70"/></name></expr></argument>)<pos:position pos:line="3514" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="3514" pos:column="72"/></expr_stmt>
  <if pos:line="3515" pos:column="3">if<condition pos:line="3515" pos:column="5">( <expr><name pos:line="3515" pos:column="7">pFree<pos:position pos:line="3515" pos:column="12"/></name></expr> )<pos:position pos:line="3515" pos:column="14"/></condition><then pos:line="3515" pos:column="14"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="3515" pos:column="15">sqlite3DbFreeNN<pos:position pos:line="3515" pos:column="30"/></name><argument_list pos:line="3515" pos:column="30">(<argument><expr><name pos:line="3515" pos:column="31">db<pos:position pos:line="3515" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="3515" pos:column="35">pFree<pos:position pos:line="3515" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3515" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3515" pos:column="42"/></expr_stmt></block></then></if>
  <if pos:line="3516" pos:column="3">if<condition pos:line="3516" pos:column="5">( <expr><name pos:line="3516" pos:column="7">rc<pos:position pos:line="3516" pos:column="9"/></name><operator pos:line="3516" pos:column="9">!=<pos:position pos:line="3516" pos:column="11"/></operator><name pos:line="3516" pos:column="11">SQLITE_OK<pos:position pos:line="3516" pos:column="20"/></name></expr> )<pos:position pos:line="3516" pos:column="22"/></condition><then><block pos:line="3516" pos:column="22">{
    <goto pos:line="3517" pos:column="5">goto <name pos:line="3517" pos:column="10">abort_due_to_error<pos:position pos:line="3517" pos:column="28"/></name>;<pos:position pos:line="3517" pos:column="29"/></goto>
  }<pos:position pos:line="3518" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="3519" pos:column="3">pC<pos:position pos:line="3519" pos:column="5"/></name><operator pos:line="3519" pos:column="5">-&gt;<pos:position pos:line="3519" pos:column="10"/></operator><name pos:line="3519" pos:column="7">seekResult<pos:position pos:line="3519" pos:column="17"/></name></name> <operator pos:line="3519" pos:column="18">=<pos:position pos:line="3519" pos:column="19"/></operator> <name pos:line="3519" pos:column="20">res<pos:position pos:line="3519" pos:column="23"/></name></expr>;<pos:position pos:line="3519" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3520" pos:column="3">alreadyExists<pos:position pos:line="3520" pos:column="16"/></name> <operator pos:line="3520" pos:column="17">=<pos:position pos:line="3520" pos:column="18"/></operator> <operator pos:line="3520" pos:column="19">(<pos:position pos:line="3520" pos:column="20"/></operator><name pos:line="3520" pos:column="20">res<pos:position pos:line="3520" pos:column="23"/></name><operator pos:line="3520" pos:column="23">==<pos:position pos:line="3520" pos:column="25"/></operator><literal type="number" pos:line="3520" pos:column="25">0<pos:position pos:line="3520" pos:column="26"/></literal><operator pos:line="3520" pos:column="26">)<pos:position pos:line="3520" pos:column="27"/></operator></expr>;<pos:position pos:line="3520" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3521" pos:column="3">pC<pos:position pos:line="3521" pos:column="5"/></name><operator pos:line="3521" pos:column="5">-&gt;<pos:position pos:line="3521" pos:column="10"/></operator><name pos:line="3521" pos:column="7">nullRow<pos:position pos:line="3521" pos:column="14"/></name></name> <operator pos:line="3521" pos:column="15">=<pos:position pos:line="3521" pos:column="16"/></operator> <literal type="number" pos:line="3521" pos:column="17">1<pos:position pos:line="3521" pos:column="18"/></literal><operator pos:line="3521" pos:column="18">-<pos:position pos:line="3521" pos:column="19"/></operator><name pos:line="3521" pos:column="19">alreadyExists<pos:position pos:line="3521" pos:column="32"/></name></expr>;<pos:position pos:line="3521" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3522" pos:column="3">pC<pos:position pos:line="3522" pos:column="5"/></name><operator pos:line="3522" pos:column="5">-&gt;<pos:position pos:line="3522" pos:column="10"/></operator><name pos:line="3522" pos:column="7">deferredMoveto<pos:position pos:line="3522" pos:column="21"/></name></name> <operator pos:line="3522" pos:column="22">=<pos:position pos:line="3522" pos:column="23"/></operator> <literal type="number" pos:line="3522" pos:column="24">0<pos:position pos:line="3522" pos:column="25"/></literal></expr>;<pos:position pos:line="3522" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3523" pos:column="3">pC<pos:position pos:line="3523" pos:column="5"/></name><operator pos:line="3523" pos:column="5">-&gt;<pos:position pos:line="3523" pos:column="10"/></operator><name pos:line="3523" pos:column="7">cacheStatus<pos:position pos:line="3523" pos:column="18"/></name></name> <operator pos:line="3523" pos:column="19">=<pos:position pos:line="3523" pos:column="20"/></operator> <name pos:line="3523" pos:column="21">CACHE_STALE<pos:position pos:line="3523" pos:column="32"/></name></expr>;<pos:position pos:line="3523" pos:column="33"/></expr_stmt>
  <if pos:line="3524" pos:column="3">if<condition pos:line="3524" pos:column="5">( <expr><name><name pos:line="3524" pos:column="7">pOp<pos:position pos:line="3524" pos:column="10"/></name><operator pos:line="3524" pos:column="10">-&gt;<pos:position pos:line="3524" pos:column="15"/></operator><name pos:line="3524" pos:column="12">opcode<pos:position pos:line="3524" pos:column="18"/></name></name><operator pos:line="3524" pos:column="18">==<pos:position pos:line="3524" pos:column="20"/></operator><name pos:line="3524" pos:column="20">OP_Found<pos:position pos:line="3524" pos:column="28"/></name></expr> )<pos:position pos:line="3524" pos:column="30"/></condition><then><block pos:line="3524" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="3525" pos:column="5">VdbeBranchTaken<pos:position pos:line="3525" pos:column="20"/></name><argument_list pos:line="3525" pos:column="20">(<argument><expr><name pos:line="3525" pos:column="21">alreadyExists<pos:position pos:line="3525" pos:column="34"/></name><operator pos:line="3525" pos:column="34">!=<pos:position pos:line="3525" pos:column="36"/></operator><literal type="number" pos:line="3525" pos:column="36">0<pos:position pos:line="3525" pos:column="37"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="3525" pos:column="38">2<pos:position pos:line="3525" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="3525" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3525" pos:column="41"/></expr_stmt>
    <if pos:line="3526" pos:column="5">if<condition pos:line="3526" pos:column="7">( <expr><name pos:line="3526" pos:column="9">alreadyExists<pos:position pos:line="3526" pos:column="22"/></name></expr> )<pos:position pos:line="3526" pos:column="24"/></condition><then pos:line="3526" pos:column="24"> <block type="pseudo"><goto pos:line="3526" pos:column="25">goto <name pos:line="3526" pos:column="30">jump_to_p2<pos:position pos:line="3526" pos:column="40"/></name>;<pos:position pos:line="3526" pos:column="41"/></goto></block></then></if>
  }<pos:position pos:line="3527" pos:column="4"/></block></then><else pos:line="3527" pos:column="4">else<block pos:line="3527" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="3528" pos:column="5">VdbeBranchTaken<pos:position pos:line="3528" pos:column="20"/></name><argument_list pos:line="3528" pos:column="20">(<argument><expr><name pos:line="3528" pos:column="21">takeJump<pos:position pos:line="3528" pos:column="29"/></name><operator pos:line="3528" pos:column="29">||<pos:position pos:line="3528" pos:column="31"/></operator><name pos:line="3528" pos:column="31">alreadyExists<pos:position pos:line="3528" pos:column="44"/></name><operator pos:line="3528" pos:column="44">==<pos:position pos:line="3528" pos:column="46"/></operator><literal type="number" pos:line="3528" pos:column="46">0<pos:position pos:line="3528" pos:column="47"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="3528" pos:column="48">2<pos:position pos:line="3528" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="3528" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="3528" pos:column="51"/></expr_stmt>
    <if pos:line="3529" pos:column="5">if<condition pos:line="3529" pos:column="7">( <expr><name pos:line="3529" pos:column="9">takeJump<pos:position pos:line="3529" pos:column="17"/></name> <operator pos:line="3529" pos:column="18">||<pos:position pos:line="3529" pos:column="20"/></operator> <operator pos:line="3529" pos:column="21">!<pos:position pos:line="3529" pos:column="22"/></operator><name pos:line="3529" pos:column="22">alreadyExists<pos:position pos:line="3529" pos:column="35"/></name></expr> )<pos:position pos:line="3529" pos:column="37"/></condition><then pos:line="3529" pos:column="37"> <block type="pseudo"><goto pos:line="3529" pos:column="38">goto <name pos:line="3529" pos:column="43">jump_to_p2<pos:position pos:line="3529" pos:column="53"/></name>;<pos:position pos:line="3529" pos:column="54"/></goto></block></then></if>
  }<pos:position pos:line="3530" pos:column="4"/></block></else></if>
  <break pos:line="3531" pos:column="3">break;<pos:position pos:line="3531" pos:column="9"/></break>
}<pos:position pos:line="3532" pos:column="2"/></block>

<comment type="block" pos:line="3534" pos:column="1">/* Opcode: SeekRowid P1 P2 P3 * *
** Synopsis: intkey=r[P3]
**
** P1 is the index of a cursor open on an SQL table btree (with integer
** keys).  If register P3 does not contain an integer or if P1 does not
** contain a record with rowid P3 then jump immediately to P2.  
** Or, if P2 is 0, raise an SQLITE_CORRUPT error. If P1 does contain
** a record with rowid P3 then 
** leave the cursor pointing at that record and fall through to the next
** instruction.
**
** The OP_NotExists opcode performs the same operation, but with OP_NotExists
** the P3 register must be guaranteed to contain an integer value.  With this
** opcode, register P3 might not contain an integer.
**
** The OP_NotFound opcode performs the same operation on index btrees
** (with arbitrary multi-value keys).
**
** This opcode leaves the cursor in a state where it cannot be advanced
** in either direction.  In other words, the Next and Prev opcodes will
** not work following this opcode.
**
** See also: Found, NotFound, NoConflict, SeekRowid
*/</comment>
<comment type="block" pos:line="3558" pos:column="1">/* Opcode: NotExists P1 P2 P3 * *
** Synopsis: intkey=r[P3]
**
** P1 is the index of a cursor open on an SQL table btree (with integer
** keys).  P3 is an integer rowid.  If P1 does not contain a record with
** rowid P3 then jump immediately to P2.  Or, if P2 is 0, raise an
** SQLITE_CORRUPT error. If P1 does contain a record with rowid P3 then 
** leave the cursor pointing at that record and fall through to the next
** instruction.
**
** The OP_SeekRowid opcode performs the same operation but also allows the
** P3 register to contain a non-integer value, in which case the jump is
** always taken.  This opcode requires that P3 always contain an integer.
**
** The OP_NotFound opcode performs the same operation on index btrees
** (with arbitrary multi-value keys).
**
** This opcode leaves the cursor in a state where it cannot be advanced
** in either direction.  In other words, the Next and Prev opcodes will
** not work following this opcode.
**
** See also: Found, NotFound, NoConflict, SeekRowid
*/</comment>
<case pos:line="3581" pos:column="1">case <expr><name pos:line="3581" pos:column="6">OP_SeekRowid<pos:position pos:line="3581" pos:column="18"/></name></expr>:<pos:position pos:line="3581" pos:column="19"/></case> <block pos:line="3581" pos:column="20">{        <comment type="block" pos:line="3581" pos:column="29">/* jump, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="3582" pos:column="3">VdbeCursor<pos:position pos:line="3582" pos:column="13"/></name> <modifier pos:line="3582" pos:column="14">*<pos:position pos:line="3582" pos:column="15"/></modifier></type><name pos:line="3582" pos:column="15">pC<pos:position pos:line="3582" pos:column="17"/></name></decl>;<pos:position pos:line="3582" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3583" pos:column="3">BtCursor<pos:position pos:line="3583" pos:column="11"/></name> <modifier pos:line="3583" pos:column="12">*<pos:position pos:line="3583" pos:column="13"/></modifier></type><name pos:line="3583" pos:column="13">pCrsr<pos:position pos:line="3583" pos:column="18"/></name></decl>;<pos:position pos:line="3583" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3584" pos:column="3">int<pos:position pos:line="3584" pos:column="6"/></name></type> <name pos:line="3584" pos:column="7">res<pos:position pos:line="3584" pos:column="10"/></name></decl>;<pos:position pos:line="3584" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3585" pos:column="3">u64<pos:position pos:line="3585" pos:column="6"/></name></type> <name pos:line="3585" pos:column="7">iKey<pos:position pos:line="3585" pos:column="11"/></name></decl>;<pos:position pos:line="3585" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3587" pos:column="3">pIn3<pos:position pos:line="3587" pos:column="7"/></name> <operator pos:line="3587" pos:column="8">=<pos:position pos:line="3587" pos:column="9"/></operator> <operator pos:line="3587" pos:column="10">&amp;<pos:position pos:line="3587" pos:column="15"/></operator><name><name pos:line="3587" pos:column="11">aMem<pos:position pos:line="3587" pos:column="15"/></name><index pos:line="3587" pos:column="15">[<expr><name><name pos:line="3587" pos:column="16">pOp<pos:position pos:line="3587" pos:column="19"/></name><operator pos:line="3587" pos:column="19">-&gt;<pos:position pos:line="3587" pos:column="24"/></operator><name pos:line="3587" pos:column="21">p3<pos:position pos:line="3587" pos:column="23"/></name></name></expr>]<pos:position pos:line="3587" pos:column="24"/></index></name></expr>;<pos:position pos:line="3587" pos:column="25"/></expr_stmt>
  <if pos:line="3588" pos:column="3">if<condition pos:line="3588" pos:column="5">( <expr><operator pos:line="3588" pos:column="7">(<pos:position pos:line="3588" pos:column="8"/></operator><name><name pos:line="3588" pos:column="8">pIn3<pos:position pos:line="3588" pos:column="12"/></name><operator pos:line="3588" pos:column="12">-&gt;<pos:position pos:line="3588" pos:column="17"/></operator><name pos:line="3588" pos:column="14">flags<pos:position pos:line="3588" pos:column="19"/></name></name> <operator pos:line="3588" pos:column="20">&amp;<pos:position pos:line="3588" pos:column="25"/></operator> <name pos:line="3588" pos:column="22">MEM_Int<pos:position pos:line="3588" pos:column="29"/></name><operator pos:line="3588" pos:column="29">)<pos:position pos:line="3588" pos:column="30"/></operator><operator pos:line="3588" pos:column="30">==<pos:position pos:line="3588" pos:column="32"/></operator><literal type="number" pos:line="3588" pos:column="32">0<pos:position pos:line="3588" pos:column="33"/></literal></expr> )<pos:position pos:line="3588" pos:column="35"/></condition><then><block pos:line="3588" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="3589" pos:column="5">applyAffinity<pos:position pos:line="3589" pos:column="18"/></name><argument_list pos:line="3589" pos:column="18">(<argument><expr><name pos:line="3589" pos:column="19">pIn3<pos:position pos:line="3589" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="3589" pos:column="25">SQLITE_AFF_NUMERIC<pos:position pos:line="3589" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="3589" pos:column="45">encoding<pos:position pos:line="3589" pos:column="53"/></name></expr></argument>)<pos:position pos:line="3589" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="3589" pos:column="55"/></expr_stmt>
    <if pos:line="3590" pos:column="5">if<condition pos:line="3590" pos:column="7">( <expr><operator pos:line="3590" pos:column="9">(<pos:position pos:line="3590" pos:column="10"/></operator><name><name pos:line="3590" pos:column="10">pIn3<pos:position pos:line="3590" pos:column="14"/></name><operator pos:line="3590" pos:column="14">-&gt;<pos:position pos:line="3590" pos:column="19"/></operator><name pos:line="3590" pos:column="16">flags<pos:position pos:line="3590" pos:column="21"/></name></name> <operator pos:line="3590" pos:column="22">&amp;<pos:position pos:line="3590" pos:column="27"/></operator> <name pos:line="3590" pos:column="24">MEM_Int<pos:position pos:line="3590" pos:column="31"/></name><operator pos:line="3590" pos:column="31">)<pos:position pos:line="3590" pos:column="32"/></operator><operator pos:line="3590" pos:column="32">==<pos:position pos:line="3590" pos:column="34"/></operator><literal type="number" pos:line="3590" pos:column="34">0<pos:position pos:line="3590" pos:column="35"/></literal></expr> )<pos:position pos:line="3590" pos:column="37"/></condition><then pos:line="3590" pos:column="37"> <block type="pseudo"><goto pos:line="3590" pos:column="38">goto <name pos:line="3590" pos:column="43">jump_to_p2<pos:position pos:line="3590" pos:column="53"/></name>;<pos:position pos:line="3590" pos:column="54"/></goto></block></then></if>
  }<pos:position pos:line="3591" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="3592" pos:column="3">/* Fall through into OP_NotExists */</comment>
<case pos:line="3593" pos:column="1">case <expr><name pos:line="3593" pos:column="6">OP_NotExists<pos:position pos:line="3593" pos:column="18"/></name></expr>:<pos:position pos:line="3593" pos:column="19"/></case>          <comment type="block" pos:line="3593" pos:column="29">/* jump, in3 */</comment>
  <expr_stmt><expr><name pos:line="3594" pos:column="3">pIn3<pos:position pos:line="3594" pos:column="7"/></name> <operator pos:line="3594" pos:column="8">=<pos:position pos:line="3594" pos:column="9"/></operator> <operator pos:line="3594" pos:column="10">&amp;<pos:position pos:line="3594" pos:column="15"/></operator><name><name pos:line="3594" pos:column="11">aMem<pos:position pos:line="3594" pos:column="15"/></name><index pos:line="3594" pos:column="15">[<expr><name><name pos:line="3594" pos:column="16">pOp<pos:position pos:line="3594" pos:column="19"/></name><operator pos:line="3594" pos:column="19">-&gt;<pos:position pos:line="3594" pos:column="24"/></operator><name pos:line="3594" pos:column="21">p3<pos:position pos:line="3594" pos:column="23"/></name></name></expr>]<pos:position pos:line="3594" pos:column="24"/></index></name></expr>;<pos:position pos:line="3594" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3595" pos:column="3">assert<pos:position pos:line="3595" pos:column="9"/></name><argument_list pos:line="3595" pos:column="9">( <argument><expr><name><name pos:line="3595" pos:column="11">pIn3<pos:position pos:line="3595" pos:column="15"/></name><operator pos:line="3595" pos:column="15">-&gt;<pos:position pos:line="3595" pos:column="20"/></operator><name pos:line="3595" pos:column="17">flags<pos:position pos:line="3595" pos:column="22"/></name></name> <operator pos:line="3595" pos:column="23">&amp;<pos:position pos:line="3595" pos:column="28"/></operator> <name pos:line="3595" pos:column="25">MEM_Int<pos:position pos:line="3595" pos:column="32"/></name></expr></argument> )<pos:position pos:line="3595" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3595" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3596" pos:column="3">assert<pos:position pos:line="3596" pos:column="9"/></name><argument_list pos:line="3596" pos:column="9">( <argument><expr><name><name pos:line="3596" pos:column="11">pOp<pos:position pos:line="3596" pos:column="14"/></name><operator pos:line="3596" pos:column="14">-&gt;<pos:position pos:line="3596" pos:column="19"/></operator><name pos:line="3596" pos:column="16">p1<pos:position pos:line="3596" pos:column="18"/></name></name><operator pos:line="3596" pos:column="18">&gt;=<pos:position pos:line="3596" pos:column="23"/></operator><literal type="number" pos:line="3596" pos:column="20">0<pos:position pos:line="3596" pos:column="21"/></literal> <operator pos:line="3596" pos:column="22">&amp;&amp;<pos:position pos:line="3596" pos:column="32"/></operator> <name><name pos:line="3596" pos:column="25">pOp<pos:position pos:line="3596" pos:column="28"/></name><operator pos:line="3596" pos:column="28">-&gt;<pos:position pos:line="3596" pos:column="33"/></operator><name pos:line="3596" pos:column="30">p1<pos:position pos:line="3596" pos:column="32"/></name></name><operator pos:line="3596" pos:column="32">&lt;<pos:position pos:line="3596" pos:column="36"/></operator><name><name pos:line="3596" pos:column="33">p<pos:position pos:line="3596" pos:column="34"/></name><operator pos:line="3596" pos:column="34">-&gt;<pos:position pos:line="3596" pos:column="39"/></operator><name pos:line="3596" pos:column="36">nCursor<pos:position pos:line="3596" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3596" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3596" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3597" pos:column="3">pC<pos:position pos:line="3597" pos:column="5"/></name> <operator pos:line="3597" pos:column="6">=<pos:position pos:line="3597" pos:column="7"/></operator> <name><name pos:line="3597" pos:column="8">p<pos:position pos:line="3597" pos:column="9"/></name><operator pos:line="3597" pos:column="9">-&gt;<pos:position pos:line="3597" pos:column="14"/></operator><name pos:line="3597" pos:column="11">apCsr<pos:position pos:line="3597" pos:column="16"/></name><index pos:line="3597" pos:column="16">[<expr><name><name pos:line="3597" pos:column="17">pOp<pos:position pos:line="3597" pos:column="20"/></name><operator pos:line="3597" pos:column="20">-&gt;<pos:position pos:line="3597" pos:column="25"/></operator><name pos:line="3597" pos:column="22">p1<pos:position pos:line="3597" pos:column="24"/></name></name></expr>]<pos:position pos:line="3597" pos:column="25"/></index></name></expr>;<pos:position pos:line="3597" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3598" pos:column="3">assert<pos:position pos:line="3598" pos:column="9"/></name><argument_list pos:line="3598" pos:column="9">( <argument><expr><name pos:line="3598" pos:column="11">pC<pos:position pos:line="3598" pos:column="13"/></name><operator pos:line="3598" pos:column="13">!=<pos:position pos:line="3598" pos:column="15"/></operator><literal type="number" pos:line="3598" pos:column="15">0<pos:position pos:line="3598" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3598" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3598" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="3599" pos:column="1">#<cpp:directive pos:line="3599" pos:column="2">ifdef<pos:position pos:line="3599" pos:column="7"/></cpp:directive> <name pos:line="3599" pos:column="8">SQLITE_DEBUG<pos:position pos:line="3599" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="3600" pos:column="3">pC<pos:position pos:line="3600" pos:column="5"/></name><operator pos:line="3600" pos:column="5">-&gt;<pos:position pos:line="3600" pos:column="10"/></operator><name pos:line="3600" pos:column="7">seekOp<pos:position pos:line="3600" pos:column="13"/></name></name> <operator pos:line="3600" pos:column="14">=<pos:position pos:line="3600" pos:column="15"/></operator> <literal type="number" pos:line="3600" pos:column="16">0<pos:position pos:line="3600" pos:column="17"/></literal></expr>;<pos:position pos:line="3600" pos:column="18"/></expr_stmt>
<cpp:endif pos:line="3601" pos:column="1">#<cpp:directive pos:line="3601" pos:column="2">endif<pos:position pos:line="3601" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="3602" pos:column="3">assert<pos:position pos:line="3602" pos:column="9"/></name><argument_list pos:line="3602" pos:column="9">( <argument><expr><name><name pos:line="3602" pos:column="11">pC<pos:position pos:line="3602" pos:column="13"/></name><operator pos:line="3602" pos:column="13">-&gt;<pos:position pos:line="3602" pos:column="18"/></operator><name pos:line="3602" pos:column="15">isTable<pos:position pos:line="3602" pos:column="22"/></name></name></expr></argument> )<pos:position pos:line="3602" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="3602" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3603" pos:column="3">assert<pos:position pos:line="3603" pos:column="9"/></name><argument_list pos:line="3603" pos:column="9">( <argument><expr><name><name pos:line="3603" pos:column="11">pC<pos:position pos:line="3603" pos:column="13"/></name><operator pos:line="3603" pos:column="13">-&gt;<pos:position pos:line="3603" pos:column="18"/></operator><name pos:line="3603" pos:column="15">eCurType<pos:position pos:line="3603" pos:column="23"/></name></name><operator pos:line="3603" pos:column="23">==<pos:position pos:line="3603" pos:column="25"/></operator><name pos:line="3603" pos:column="25">CURTYPE_BTREE<pos:position pos:line="3603" pos:column="38"/></name></expr></argument> )<pos:position pos:line="3603" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3603" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3604" pos:column="3">pCrsr<pos:position pos:line="3604" pos:column="8"/></name> <operator pos:line="3604" pos:column="9">=<pos:position pos:line="3604" pos:column="10"/></operator> <name><name pos:line="3604" pos:column="11">pC<pos:position pos:line="3604" pos:column="13"/></name><operator pos:line="3604" pos:column="13">-&gt;<pos:position pos:line="3604" pos:column="18"/></operator><name pos:line="3604" pos:column="15">uc<pos:position pos:line="3604" pos:column="17"/></name><operator pos:line="3604" pos:column="17">.<pos:position pos:line="3604" pos:column="18"/></operator><name pos:line="3604" pos:column="18">pCursor<pos:position pos:line="3604" pos:column="25"/></name></name></expr>;<pos:position pos:line="3604" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3605" pos:column="3">assert<pos:position pos:line="3605" pos:column="9"/></name><argument_list pos:line="3605" pos:column="9">( <argument><expr><name pos:line="3605" pos:column="11">pCrsr<pos:position pos:line="3605" pos:column="16"/></name><operator pos:line="3605" pos:column="16">!=<pos:position pos:line="3605" pos:column="18"/></operator><literal type="number" pos:line="3605" pos:column="18">0<pos:position pos:line="3605" pos:column="19"/></literal></expr></argument> )<pos:position pos:line="3605" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="3605" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3606" pos:column="3">res<pos:position pos:line="3606" pos:column="6"/></name> <operator pos:line="3606" pos:column="7">=<pos:position pos:line="3606" pos:column="8"/></operator> <literal type="number" pos:line="3606" pos:column="9">0<pos:position pos:line="3606" pos:column="10"/></literal></expr>;<pos:position pos:line="3606" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3607" pos:column="3">iKey<pos:position pos:line="3607" pos:column="7"/></name> <operator pos:line="3607" pos:column="8">=<pos:position pos:line="3607" pos:column="9"/></operator> <name><name pos:line="3607" pos:column="10">pIn3<pos:position pos:line="3607" pos:column="14"/></name><operator pos:line="3607" pos:column="14">-&gt;<pos:position pos:line="3607" pos:column="19"/></operator><name pos:line="3607" pos:column="16">u<pos:position pos:line="3607" pos:column="17"/></name><operator pos:line="3607" pos:column="17">.<pos:position pos:line="3607" pos:column="18"/></operator><name pos:line="3607" pos:column="18">i<pos:position pos:line="3607" pos:column="19"/></name></name></expr>;<pos:position pos:line="3607" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3608" pos:column="3">rc<pos:position pos:line="3608" pos:column="5"/></name> <operator pos:line="3608" pos:column="6">=<pos:position pos:line="3608" pos:column="7"/></operator> <call><name pos:line="3608" pos:column="8">sqlite3BtreeMovetoUnpacked<pos:position pos:line="3608" pos:column="34"/></name><argument_list pos:line="3608" pos:column="34">(<argument><expr><name pos:line="3608" pos:column="35">pCrsr<pos:position pos:line="3608" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3608" pos:column="42">0<pos:position pos:line="3608" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="3608" pos:column="45">iKey<pos:position pos:line="3608" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3608" pos:column="51">0<pos:position pos:line="3608" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="3608" pos:column="54">&amp;<pos:position pos:line="3608" pos:column="59"/></operator><name pos:line="3608" pos:column="55">res<pos:position pos:line="3608" pos:column="58"/></name></expr></argument>)<pos:position pos:line="3608" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="3608" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3609" pos:column="3">assert<pos:position pos:line="3609" pos:column="9"/></name><argument_list pos:line="3609" pos:column="9">( <argument><expr><name pos:line="3609" pos:column="11">rc<pos:position pos:line="3609" pos:column="13"/></name><operator pos:line="3609" pos:column="13">==<pos:position pos:line="3609" pos:column="15"/></operator><name pos:line="3609" pos:column="15">SQLITE_OK<pos:position pos:line="3609" pos:column="24"/></name> <operator pos:line="3609" pos:column="25">||<pos:position pos:line="3609" pos:column="27"/></operator> <name pos:line="3609" pos:column="28">res<pos:position pos:line="3609" pos:column="31"/></name><operator pos:line="3609" pos:column="31">==<pos:position pos:line="3609" pos:column="33"/></operator><literal type="number" pos:line="3609" pos:column="33">0<pos:position pos:line="3609" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="3609" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3609" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3610" pos:column="3">pC<pos:position pos:line="3610" pos:column="5"/></name><operator pos:line="3610" pos:column="5">-&gt;<pos:position pos:line="3610" pos:column="10"/></operator><name pos:line="3610" pos:column="7">movetoTarget<pos:position pos:line="3610" pos:column="19"/></name></name> <operator pos:line="3610" pos:column="20">=<pos:position pos:line="3610" pos:column="21"/></operator> <name pos:line="3610" pos:column="22">iKey<pos:position pos:line="3610" pos:column="26"/></name></expr>;<pos:position pos:line="3610" pos:column="27"/></expr_stmt>  <comment type="block" pos:line="3610" pos:column="29">/* Used by OP_Delete */</comment>
  <expr_stmt><expr><name><name pos:line="3611" pos:column="3">pC<pos:position pos:line="3611" pos:column="5"/></name><operator pos:line="3611" pos:column="5">-&gt;<pos:position pos:line="3611" pos:column="10"/></operator><name pos:line="3611" pos:column="7">nullRow<pos:position pos:line="3611" pos:column="14"/></name></name> <operator pos:line="3611" pos:column="15">=<pos:position pos:line="3611" pos:column="16"/></operator> <literal type="number" pos:line="3611" pos:column="17">0<pos:position pos:line="3611" pos:column="18"/></literal></expr>;<pos:position pos:line="3611" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3612" pos:column="3">pC<pos:position pos:line="3612" pos:column="5"/></name><operator pos:line="3612" pos:column="5">-&gt;<pos:position pos:line="3612" pos:column="10"/></operator><name pos:line="3612" pos:column="7">cacheStatus<pos:position pos:line="3612" pos:column="18"/></name></name> <operator pos:line="3612" pos:column="19">=<pos:position pos:line="3612" pos:column="20"/></operator> <name pos:line="3612" pos:column="21">CACHE_STALE<pos:position pos:line="3612" pos:column="32"/></name></expr>;<pos:position pos:line="3612" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3613" pos:column="3">pC<pos:position pos:line="3613" pos:column="5"/></name><operator pos:line="3613" pos:column="5">-&gt;<pos:position pos:line="3613" pos:column="10"/></operator><name pos:line="3613" pos:column="7">deferredMoveto<pos:position pos:line="3613" pos:column="21"/></name></name> <operator pos:line="3613" pos:column="22">=<pos:position pos:line="3613" pos:column="23"/></operator> <literal type="number" pos:line="3613" pos:column="24">0<pos:position pos:line="3613" pos:column="25"/></literal></expr>;<pos:position pos:line="3613" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3614" pos:column="3">VdbeBranchTaken<pos:position pos:line="3614" pos:column="18"/></name><argument_list pos:line="3614" pos:column="18">(<argument><expr><name pos:line="3614" pos:column="19">res<pos:position pos:line="3614" pos:column="22"/></name><operator pos:line="3614" pos:column="22">!=<pos:position pos:line="3614" pos:column="24"/></operator><literal type="number" pos:line="3614" pos:column="24">0<pos:position pos:line="3614" pos:column="25"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="3614" pos:column="26">2<pos:position pos:line="3614" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="3614" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="3614" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3615" pos:column="3">pC<pos:position pos:line="3615" pos:column="5"/></name><operator pos:line="3615" pos:column="5">-&gt;<pos:position pos:line="3615" pos:column="10"/></operator><name pos:line="3615" pos:column="7">seekResult<pos:position pos:line="3615" pos:column="17"/></name></name> <operator pos:line="3615" pos:column="18">=<pos:position pos:line="3615" pos:column="19"/></operator> <name pos:line="3615" pos:column="20">res<pos:position pos:line="3615" pos:column="23"/></name></expr>;<pos:position pos:line="3615" pos:column="24"/></expr_stmt>
  <if pos:line="3616" pos:column="3">if<condition pos:line="3616" pos:column="5">( <expr><name pos:line="3616" pos:column="7">res<pos:position pos:line="3616" pos:column="10"/></name><operator pos:line="3616" pos:column="10">!=<pos:position pos:line="3616" pos:column="12"/></operator><literal type="number" pos:line="3616" pos:column="12">0<pos:position pos:line="3616" pos:column="13"/></literal></expr> )<pos:position pos:line="3616" pos:column="15"/></condition><then><block pos:line="3616" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="3617" pos:column="5">assert<pos:position pos:line="3617" pos:column="11"/></name><argument_list pos:line="3617" pos:column="11">( <argument><expr><name pos:line="3617" pos:column="13">rc<pos:position pos:line="3617" pos:column="15"/></name><operator pos:line="3617" pos:column="15">==<pos:position pos:line="3617" pos:column="17"/></operator><name pos:line="3617" pos:column="17">SQLITE_OK<pos:position pos:line="3617" pos:column="26"/></name></expr></argument> )<pos:position pos:line="3617" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="3617" pos:column="29"/></expr_stmt>
    <if pos:line="3618" pos:column="5">if<condition pos:line="3618" pos:column="7">( <expr><name><name pos:line="3618" pos:column="9">pOp<pos:position pos:line="3618" pos:column="12"/></name><operator pos:line="3618" pos:column="12">-&gt;<pos:position pos:line="3618" pos:column="17"/></operator><name pos:line="3618" pos:column="14">p2<pos:position pos:line="3618" pos:column="16"/></name></name><operator pos:line="3618" pos:column="16">==<pos:position pos:line="3618" pos:column="18"/></operator><literal type="number" pos:line="3618" pos:column="18">0<pos:position pos:line="3618" pos:column="19"/></literal></expr> )<pos:position pos:line="3618" pos:column="21"/></condition><then><block pos:line="3618" pos:column="21">{
      <expr_stmt><expr><name pos:line="3619" pos:column="7">rc<pos:position pos:line="3619" pos:column="9"/></name> <operator pos:line="3619" pos:column="10">=<pos:position pos:line="3619" pos:column="11"/></operator> <name pos:line="3619" pos:column="12">SQLITE_CORRUPT_BKPT<pos:position pos:line="3619" pos:column="31"/></name></expr>;<pos:position pos:line="3619" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="3620" pos:column="6"/></block></then><else pos:line="3620" pos:column="6">else<block pos:line="3620" pos:column="10">{
      <goto pos:line="3621" pos:column="7">goto <name pos:line="3621" pos:column="12">jump_to_p2<pos:position pos:line="3621" pos:column="22"/></name>;<pos:position pos:line="3621" pos:column="23"/></goto>
    }<pos:position pos:line="3622" pos:column="6"/></block></else></if>
  }<pos:position pos:line="3623" pos:column="4"/></block></then></if>
  <if pos:line="3624" pos:column="3">if<condition pos:line="3624" pos:column="5">( <expr><name pos:line="3624" pos:column="7">rc<pos:position pos:line="3624" pos:column="9"/></name></expr> )<pos:position pos:line="3624" pos:column="11"/></condition><then pos:line="3624" pos:column="11"> <block type="pseudo"><goto pos:line="3624" pos:column="12">goto <name pos:line="3624" pos:column="17">abort_due_to_error<pos:position pos:line="3624" pos:column="35"/></name>;<pos:position pos:line="3624" pos:column="36"/></goto></block></then></if>
  <break pos:line="3625" pos:column="3">break;<pos:position pos:line="3625" pos:column="9"/></break>
}<pos:position pos:line="3626" pos:column="2"/></block>

<comment type="block" pos:line="3628" pos:column="1">/* Opcode: Sequence P1 P2 * * *
** Synopsis: r[P2]=cursor[P1].ctr++
**
** Find the next available sequence number for cursor P1.
** Write the sequence number into register P2.
** The sequence number on the cursor is incremented after this
** instruction.  
*/</comment>
<case pos:line="3636" pos:column="1">case <expr><name pos:line="3636" pos:column="6">OP_Sequence<pos:position pos:line="3636" pos:column="17"/></name></expr>:<pos:position pos:line="3636" pos:column="18"/></case> <block pos:line="3636" pos:column="19">{           <comment type="block" pos:line="3636" pos:column="31">/* out2 */</comment>
  <expr_stmt><expr><call><name pos:line="3637" pos:column="3">assert<pos:position pos:line="3637" pos:column="9"/></name><argument_list pos:line="3637" pos:column="9">( <argument><expr><name><name pos:line="3637" pos:column="11">pOp<pos:position pos:line="3637" pos:column="14"/></name><operator pos:line="3637" pos:column="14">-&gt;<pos:position pos:line="3637" pos:column="19"/></operator><name pos:line="3637" pos:column="16">p1<pos:position pos:line="3637" pos:column="18"/></name></name><operator pos:line="3637" pos:column="18">&gt;=<pos:position pos:line="3637" pos:column="23"/></operator><literal type="number" pos:line="3637" pos:column="20">0<pos:position pos:line="3637" pos:column="21"/></literal> <operator pos:line="3637" pos:column="22">&amp;&amp;<pos:position pos:line="3637" pos:column="32"/></operator> <name><name pos:line="3637" pos:column="25">pOp<pos:position pos:line="3637" pos:column="28"/></name><operator pos:line="3637" pos:column="28">-&gt;<pos:position pos:line="3637" pos:column="33"/></operator><name pos:line="3637" pos:column="30">p1<pos:position pos:line="3637" pos:column="32"/></name></name><operator pos:line="3637" pos:column="32">&lt;<pos:position pos:line="3637" pos:column="36"/></operator><name><name pos:line="3637" pos:column="33">p<pos:position pos:line="3637" pos:column="34"/></name><operator pos:line="3637" pos:column="34">-&gt;<pos:position pos:line="3637" pos:column="39"/></operator><name pos:line="3637" pos:column="36">nCursor<pos:position pos:line="3637" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3637" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3637" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3638" pos:column="3">assert<pos:position pos:line="3638" pos:column="9"/></name><argument_list pos:line="3638" pos:column="9">( <argument><expr><name><name pos:line="3638" pos:column="11">p<pos:position pos:line="3638" pos:column="12"/></name><operator pos:line="3638" pos:column="12">-&gt;<pos:position pos:line="3638" pos:column="17"/></operator><name pos:line="3638" pos:column="14">apCsr<pos:position pos:line="3638" pos:column="19"/></name><index pos:line="3638" pos:column="19">[<expr><name><name pos:line="3638" pos:column="20">pOp<pos:position pos:line="3638" pos:column="23"/></name><operator pos:line="3638" pos:column="23">-&gt;<pos:position pos:line="3638" pos:column="28"/></operator><name pos:line="3638" pos:column="25">p1<pos:position pos:line="3638" pos:column="27"/></name></name></expr>]<pos:position pos:line="3638" pos:column="28"/></index></name><operator pos:line="3638" pos:column="28">!=<pos:position pos:line="3638" pos:column="30"/></operator><literal type="number" pos:line="3638" pos:column="30">0<pos:position pos:line="3638" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="3638" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3638" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3639" pos:column="3">assert<pos:position pos:line="3639" pos:column="9"/></name><argument_list pos:line="3639" pos:column="9">( <argument><expr><name><name pos:line="3639" pos:column="11">p<pos:position pos:line="3639" pos:column="12"/></name><operator pos:line="3639" pos:column="12">-&gt;<pos:position pos:line="3639" pos:column="17"/></operator><name pos:line="3639" pos:column="14">apCsr<pos:position pos:line="3639" pos:column="19"/></name><index pos:line="3639" pos:column="19">[<expr><name><name pos:line="3639" pos:column="20">pOp<pos:position pos:line="3639" pos:column="23"/></name><operator pos:line="3639" pos:column="23">-&gt;<pos:position pos:line="3639" pos:column="28"/></operator><name pos:line="3639" pos:column="25">p1<pos:position pos:line="3639" pos:column="27"/></name></name></expr>]<pos:position pos:line="3639" pos:column="28"/></index></name><operator pos:line="3639" pos:column="28">-&gt;<pos:position pos:line="3639" pos:column="33"/></operator><name pos:line="3639" pos:column="30">eCurType<pos:position pos:line="3639" pos:column="38"/></name><operator pos:line="3639" pos:column="38">!=<pos:position pos:line="3639" pos:column="40"/></operator><name pos:line="3639" pos:column="40">CURTYPE_VTAB<pos:position pos:line="3639" pos:column="52"/></name></expr></argument> )<pos:position pos:line="3639" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="3639" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3640" pos:column="3">pOut<pos:position pos:line="3640" pos:column="7"/></name> <operator pos:line="3640" pos:column="8">=<pos:position pos:line="3640" pos:column="9"/></operator> <call><name pos:line="3640" pos:column="10">out2Prerelease<pos:position pos:line="3640" pos:column="24"/></name><argument_list pos:line="3640" pos:column="24">(<argument><expr><name pos:line="3640" pos:column="25">p<pos:position pos:line="3640" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="3640" pos:column="28">pOp<pos:position pos:line="3640" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3640" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="3640" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3641" pos:column="3">pOut<pos:position pos:line="3641" pos:column="7"/></name><operator pos:line="3641" pos:column="7">-&gt;<pos:position pos:line="3641" pos:column="12"/></operator><name pos:line="3641" pos:column="9">u<pos:position pos:line="3641" pos:column="10"/></name><operator pos:line="3641" pos:column="10">.<pos:position pos:line="3641" pos:column="11"/></operator><name pos:line="3641" pos:column="11">i<pos:position pos:line="3641" pos:column="12"/></name></name> <operator pos:line="3641" pos:column="13">=<pos:position pos:line="3641" pos:column="14"/></operator> <name><name pos:line="3641" pos:column="15">p<pos:position pos:line="3641" pos:column="16"/></name><operator pos:line="3641" pos:column="16">-&gt;<pos:position pos:line="3641" pos:column="21"/></operator><name pos:line="3641" pos:column="18">apCsr<pos:position pos:line="3641" pos:column="23"/></name><index pos:line="3641" pos:column="23">[<expr><name><name pos:line="3641" pos:column="24">pOp<pos:position pos:line="3641" pos:column="27"/></name><operator pos:line="3641" pos:column="27">-&gt;<pos:position pos:line="3641" pos:column="32"/></operator><name pos:line="3641" pos:column="29">p1<pos:position pos:line="3641" pos:column="31"/></name></name></expr>]<pos:position pos:line="3641" pos:column="32"/></index></name><operator pos:line="3641" pos:column="32">-&gt;<pos:position pos:line="3641" pos:column="37"/></operator><name pos:line="3641" pos:column="34">seqCount<pos:position pos:line="3641" pos:column="42"/></name><operator pos:line="3641" pos:column="42">++<pos:position pos:line="3641" pos:column="44"/></operator></expr>;<pos:position pos:line="3641" pos:column="45"/></expr_stmt>
  <break pos:line="3642" pos:column="3">break;<pos:position pos:line="3642" pos:column="9"/></break>
}<pos:position pos:line="3643" pos:column="2"/></block>


<comment type="block" pos:line="3646" pos:column="1">/* Opcode: NewRowid P1 P2 P3 * *
** Synopsis: r[P2]=rowid
**
** Get a new integer record number (a.k.a "rowid") used as the key to a table.
** The record number is not previously used as a key in the database
** table that cursor P1 points to.  The new record number is written
** written to register P2.
**
** If P3&gt;0 then P3 is a register in the root frame of this VDBE that holds 
** the largest previously generated record number. No new record numbers are
** allowed to be less than this value. When this value reaches its maximum, 
** an SQLITE_FULL error is generated. The P3 register is updated with the '
** generated record number. This P3 mechanism is used to help implement the
** AUTOINCREMENT feature.
*/</comment>
<case pos:line="3661" pos:column="1">case <expr><name pos:line="3661" pos:column="6">OP_NewRowid<pos:position pos:line="3661" pos:column="17"/></name></expr>:<pos:position pos:line="3661" pos:column="18"/></case> <block pos:line="3661" pos:column="19">{           <comment type="block" pos:line="3661" pos:column="31">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="3662" pos:column="3">i64<pos:position pos:line="3662" pos:column="6"/></name></type> <name pos:line="3662" pos:column="7">v<pos:position pos:line="3662" pos:column="8"/></name></decl>;<pos:position pos:line="3662" pos:column="9"/></decl_stmt>                 <comment type="block" pos:line="3662" pos:column="26">/* The new rowid */</comment>
  <decl_stmt><decl><type><name pos:line="3663" pos:column="3">VdbeCursor<pos:position pos:line="3663" pos:column="13"/></name> <modifier pos:line="3663" pos:column="14">*<pos:position pos:line="3663" pos:column="15"/></modifier></type><name pos:line="3663" pos:column="15">pC<pos:position pos:line="3663" pos:column="17"/></name></decl>;<pos:position pos:line="3663" pos:column="18"/></decl_stmt>        <comment type="block" pos:line="3663" pos:column="26">/* Cursor of table to get the new rowid */</comment>
  <decl_stmt><decl><type><name pos:line="3664" pos:column="3">int<pos:position pos:line="3664" pos:column="6"/></name></type> <name pos:line="3664" pos:column="7">res<pos:position pos:line="3664" pos:column="10"/></name></decl>;<pos:position pos:line="3664" pos:column="11"/></decl_stmt>               <comment type="block" pos:line="3664" pos:column="26">/* Result of an sqlite3BtreeLast() */</comment>
  <decl_stmt><decl><type><name pos:line="3665" pos:column="3">int<pos:position pos:line="3665" pos:column="6"/></name></type> <name pos:line="3665" pos:column="7">cnt<pos:position pos:line="3665" pos:column="10"/></name></decl>;<pos:position pos:line="3665" pos:column="11"/></decl_stmt>               <comment type="block" pos:line="3665" pos:column="26">/* Counter to limit the number of searches */</comment>
  <decl_stmt><decl><type><name pos:line="3666" pos:column="3">Mem<pos:position pos:line="3666" pos:column="6"/></name> <modifier pos:line="3666" pos:column="7">*<pos:position pos:line="3666" pos:column="8"/></modifier></type><name pos:line="3666" pos:column="8">pMem<pos:position pos:line="3666" pos:column="12"/></name></decl>;<pos:position pos:line="3666" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="3666" pos:column="26">/* Register holding largest rowid for AUTOINCREMENT */</comment>
  <decl_stmt><decl><type><name pos:line="3667" pos:column="3">VdbeFrame<pos:position pos:line="3667" pos:column="12"/></name> <modifier pos:line="3667" pos:column="13">*<pos:position pos:line="3667" pos:column="14"/></modifier></type><name pos:line="3667" pos:column="14">pFrame<pos:position pos:line="3667" pos:column="20"/></name></decl>;<pos:position pos:line="3667" pos:column="21"/></decl_stmt>     <comment type="block" pos:line="3667" pos:column="26">/* Root frame of VDBE */</comment>

  <expr_stmt><expr><name pos:line="3669" pos:column="3">v<pos:position pos:line="3669" pos:column="4"/></name> <operator pos:line="3669" pos:column="5">=<pos:position pos:line="3669" pos:column="6"/></operator> <literal type="number" pos:line="3669" pos:column="7">0<pos:position pos:line="3669" pos:column="8"/></literal></expr>;<pos:position pos:line="3669" pos:column="9"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3670" pos:column="3">res<pos:position pos:line="3670" pos:column="6"/></name> <operator pos:line="3670" pos:column="7">=<pos:position pos:line="3670" pos:column="8"/></operator> <literal type="number" pos:line="3670" pos:column="9">0<pos:position pos:line="3670" pos:column="10"/></literal></expr>;<pos:position pos:line="3670" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3671" pos:column="3">pOut<pos:position pos:line="3671" pos:column="7"/></name> <operator pos:line="3671" pos:column="8">=<pos:position pos:line="3671" pos:column="9"/></operator> <call><name pos:line="3671" pos:column="10">out2Prerelease<pos:position pos:line="3671" pos:column="24"/></name><argument_list pos:line="3671" pos:column="24">(<argument><expr><name pos:line="3671" pos:column="25">p<pos:position pos:line="3671" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="3671" pos:column="28">pOp<pos:position pos:line="3671" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3671" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="3671" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3672" pos:column="3">assert<pos:position pos:line="3672" pos:column="9"/></name><argument_list pos:line="3672" pos:column="9">( <argument><expr><name><name pos:line="3672" pos:column="11">pOp<pos:position pos:line="3672" pos:column="14"/></name><operator pos:line="3672" pos:column="14">-&gt;<pos:position pos:line="3672" pos:column="19"/></operator><name pos:line="3672" pos:column="16">p1<pos:position pos:line="3672" pos:column="18"/></name></name><operator pos:line="3672" pos:column="18">&gt;=<pos:position pos:line="3672" pos:column="23"/></operator><literal type="number" pos:line="3672" pos:column="20">0<pos:position pos:line="3672" pos:column="21"/></literal> <operator pos:line="3672" pos:column="22">&amp;&amp;<pos:position pos:line="3672" pos:column="32"/></operator> <name><name pos:line="3672" pos:column="25">pOp<pos:position pos:line="3672" pos:column="28"/></name><operator pos:line="3672" pos:column="28">-&gt;<pos:position pos:line="3672" pos:column="33"/></operator><name pos:line="3672" pos:column="30">p1<pos:position pos:line="3672" pos:column="32"/></name></name><operator pos:line="3672" pos:column="32">&lt;<pos:position pos:line="3672" pos:column="36"/></operator><name><name pos:line="3672" pos:column="33">p<pos:position pos:line="3672" pos:column="34"/></name><operator pos:line="3672" pos:column="34">-&gt;<pos:position pos:line="3672" pos:column="39"/></operator><name pos:line="3672" pos:column="36">nCursor<pos:position pos:line="3672" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3672" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3672" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3673" pos:column="3">pC<pos:position pos:line="3673" pos:column="5"/></name> <operator pos:line="3673" pos:column="6">=<pos:position pos:line="3673" pos:column="7"/></operator> <name><name pos:line="3673" pos:column="8">p<pos:position pos:line="3673" pos:column="9"/></name><operator pos:line="3673" pos:column="9">-&gt;<pos:position pos:line="3673" pos:column="14"/></operator><name pos:line="3673" pos:column="11">apCsr<pos:position pos:line="3673" pos:column="16"/></name><index pos:line="3673" pos:column="16">[<expr><name><name pos:line="3673" pos:column="17">pOp<pos:position pos:line="3673" pos:column="20"/></name><operator pos:line="3673" pos:column="20">-&gt;<pos:position pos:line="3673" pos:column="25"/></operator><name pos:line="3673" pos:column="22">p1<pos:position pos:line="3673" pos:column="24"/></name></name></expr>]<pos:position pos:line="3673" pos:column="25"/></index></name></expr>;<pos:position pos:line="3673" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3674" pos:column="3">assert<pos:position pos:line="3674" pos:column="9"/></name><argument_list pos:line="3674" pos:column="9">( <argument><expr><name pos:line="3674" pos:column="11">pC<pos:position pos:line="3674" pos:column="13"/></name><operator pos:line="3674" pos:column="13">!=<pos:position pos:line="3674" pos:column="15"/></operator><literal type="number" pos:line="3674" pos:column="15">0<pos:position pos:line="3674" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3674" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3674" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3675" pos:column="3">assert<pos:position pos:line="3675" pos:column="9"/></name><argument_list pos:line="3675" pos:column="9">( <argument><expr><name><name pos:line="3675" pos:column="11">pC<pos:position pos:line="3675" pos:column="13"/></name><operator pos:line="3675" pos:column="13">-&gt;<pos:position pos:line="3675" pos:column="18"/></operator><name pos:line="3675" pos:column="15">eCurType<pos:position pos:line="3675" pos:column="23"/></name></name><operator pos:line="3675" pos:column="23">==<pos:position pos:line="3675" pos:column="25"/></operator><name pos:line="3675" pos:column="25">CURTYPE_BTREE<pos:position pos:line="3675" pos:column="38"/></name></expr></argument> )<pos:position pos:line="3675" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3675" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3676" pos:column="3">assert<pos:position pos:line="3676" pos:column="9"/></name><argument_list pos:line="3676" pos:column="9">( <argument><expr><name><name pos:line="3676" pos:column="11">pC<pos:position pos:line="3676" pos:column="13"/></name><operator pos:line="3676" pos:column="13">-&gt;<pos:position pos:line="3676" pos:column="18"/></operator><name pos:line="3676" pos:column="15">uc<pos:position pos:line="3676" pos:column="17"/></name><operator pos:line="3676" pos:column="17">.<pos:position pos:line="3676" pos:column="18"/></operator><name pos:line="3676" pos:column="18">pCursor<pos:position pos:line="3676" pos:column="25"/></name></name><operator pos:line="3676" pos:column="25">!=<pos:position pos:line="3676" pos:column="27"/></operator><literal type="number" pos:line="3676" pos:column="27">0<pos:position pos:line="3676" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="3676" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3676" pos:column="31"/></expr_stmt>
  <block pos:line="3677" pos:column="3">{
    <comment type="block" pos:line="3678" pos:column="5">/* The next rowid or record number (different terms for the same
    ** thing) is obtained in a two-step algorithm.
    **
    ** First we attempt to find the largest existing rowid and add one
    ** to that.  But if the largest existing rowid is already the maximum
    ** positive integer, we have to fall through to the second
    ** probabilistic algorithm
    **
    ** The second algorithm is to select a rowid at random and see if
    ** it already exists in the table.  If it does not exist, we have
    ** succeeded.  If the random rowid does exist, we select a new one
    ** and try again, up to 100 times.
    */</comment>
    <expr_stmt><expr><call><name pos:line="3691" pos:column="5">assert<pos:position pos:line="3691" pos:column="11"/></name><argument_list pos:line="3691" pos:column="11">( <argument><expr><name><name pos:line="3691" pos:column="13">pC<pos:position pos:line="3691" pos:column="15"/></name><operator pos:line="3691" pos:column="15">-&gt;<pos:position pos:line="3691" pos:column="20"/></operator><name pos:line="3691" pos:column="17">isTable<pos:position pos:line="3691" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="3691" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3691" pos:column="27"/></expr_stmt>

<cpp:ifdef pos:line="3693" pos:column="1">#<cpp:directive pos:line="3693" pos:column="2">ifdef<pos:position pos:line="3693" pos:column="7"/></cpp:directive> <name pos:line="3693" pos:column="8">SQLITE_32BIT_ROWID<pos:position pos:line="3693" pos:column="26"/></name></cpp:ifdef>
<cpp:define pos:line="3694" pos:column="1">#   <cpp:directive pos:line="3694" pos:column="5">define<pos:position pos:line="3694" pos:column="11"/></cpp:directive> <cpp:macro><name pos:line="3694" pos:column="12">MAX_ROWID<pos:position pos:line="3694" pos:column="21"/></name></cpp:macro> <cpp:value pos:line="3694" pos:column="22">0x7fffffff<pos:position pos:line="3694" pos:column="32"/></cpp:value></cpp:define>
<cpp:else pos:line="3695" pos:column="1">#<cpp:directive pos:line="3695" pos:column="2">else<pos:position pos:line="3695" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="3696" pos:column="5">/* Some compilers complain about constants of the form 0x7fffffffffffffff.
    ** Others complain about 0x7ffffffffffffffffLL.  The following macro seems
    ** to provide the constant while making all compilers happy.
    */</comment>
<cpp:define pos:line="3700" pos:column="1">#   <cpp:directive pos:line="3700" pos:column="5">define<pos:position pos:line="3700" pos:column="11"/></cpp:directive> <cpp:macro><name pos:line="3700" pos:column="12">MAX_ROWID<pos:position pos:line="3700" pos:column="21"/></name></cpp:macro>  <cpp:value pos:line="3700" pos:column="23">(i64)( (((u64)0x7fffffff)&lt;&lt;32) | (u64)0xffffffff )<pos:position pos:line="3700" pos:column="73"/></cpp:value></cpp:define>
<cpp:endif pos:line="3701" pos:column="1">#<cpp:directive pos:line="3701" pos:column="2">endif<pos:position pos:line="3701" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="3703" pos:column="5">if<condition pos:line="3703" pos:column="7">( <expr><operator pos:line="3703" pos:column="9">!<pos:position pos:line="3703" pos:column="10"/></operator><name><name pos:line="3703" pos:column="10">pC<pos:position pos:line="3703" pos:column="12"/></name><operator pos:line="3703" pos:column="12">-&gt;<pos:position pos:line="3703" pos:column="17"/></operator><name pos:line="3703" pos:column="14">useRandomRowid<pos:position pos:line="3703" pos:column="28"/></name></name></expr> )<pos:position pos:line="3703" pos:column="30"/></condition><then><block pos:line="3703" pos:column="30">{
      <expr_stmt><expr><name pos:line="3704" pos:column="7">rc<pos:position pos:line="3704" pos:column="9"/></name> <operator pos:line="3704" pos:column="10">=<pos:position pos:line="3704" pos:column="11"/></operator> <call><name pos:line="3704" pos:column="12">sqlite3BtreeLast<pos:position pos:line="3704" pos:column="28"/></name><argument_list pos:line="3704" pos:column="28">(<argument><expr><name><name pos:line="3704" pos:column="29">pC<pos:position pos:line="3704" pos:column="31"/></name><operator pos:line="3704" pos:column="31">-&gt;<pos:position pos:line="3704" pos:column="36"/></operator><name pos:line="3704" pos:column="33">uc<pos:position pos:line="3704" pos:column="35"/></name><operator pos:line="3704" pos:column="35">.<pos:position pos:line="3704" pos:column="36"/></operator><name pos:line="3704" pos:column="36">pCursor<pos:position pos:line="3704" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="3704" pos:column="45">&amp;<pos:position pos:line="3704" pos:column="50"/></operator><name pos:line="3704" pos:column="46">res<pos:position pos:line="3704" pos:column="49"/></name></expr></argument>)<pos:position pos:line="3704" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="3704" pos:column="51"/></expr_stmt>
      <if pos:line="3705" pos:column="7">if<condition pos:line="3705" pos:column="9">( <expr><name pos:line="3705" pos:column="11">rc<pos:position pos:line="3705" pos:column="13"/></name><operator pos:line="3705" pos:column="13">!=<pos:position pos:line="3705" pos:column="15"/></operator><name pos:line="3705" pos:column="15">SQLITE_OK<pos:position pos:line="3705" pos:column="24"/></name></expr> )<pos:position pos:line="3705" pos:column="26"/></condition><then><block pos:line="3705" pos:column="26">{
        <goto pos:line="3706" pos:column="9">goto <name pos:line="3706" pos:column="14">abort_due_to_error<pos:position pos:line="3706" pos:column="32"/></name>;<pos:position pos:line="3706" pos:column="33"/></goto>
      }<pos:position pos:line="3707" pos:column="8"/></block></then></if>
      <if pos:line="3708" pos:column="7">if<condition pos:line="3708" pos:column="9">( <expr><name pos:line="3708" pos:column="11">res<pos:position pos:line="3708" pos:column="14"/></name></expr> )<pos:position pos:line="3708" pos:column="16"/></condition><then><block pos:line="3708" pos:column="16">{
        <expr_stmt><expr><name pos:line="3709" pos:column="9">v<pos:position pos:line="3709" pos:column="10"/></name> <operator pos:line="3709" pos:column="11">=<pos:position pos:line="3709" pos:column="12"/></operator> <literal type="number" pos:line="3709" pos:column="13">1<pos:position pos:line="3709" pos:column="14"/></literal></expr>;<pos:position pos:line="3709" pos:column="15"/></expr_stmt>   <comment type="block" pos:line="3709" pos:column="18">/* IMP: R-61914-48074 */</comment>
      }<pos:position pos:line="3710" pos:column="8"/></block></then><else pos:line="3710" pos:column="8">else<block pos:line="3710" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="3711" pos:column="9">assert<pos:position pos:line="3711" pos:column="15"/></name><argument_list pos:line="3711" pos:column="15">( <argument><expr><call><name pos:line="3711" pos:column="17">sqlite3BtreeCursorIsValid<pos:position pos:line="3711" pos:column="42"/></name><argument_list pos:line="3711" pos:column="42">(<argument><expr><name><name pos:line="3711" pos:column="43">pC<pos:position pos:line="3711" pos:column="45"/></name><operator pos:line="3711" pos:column="45">-&gt;<pos:position pos:line="3711" pos:column="50"/></operator><name pos:line="3711" pos:column="47">uc<pos:position pos:line="3711" pos:column="49"/></name><operator pos:line="3711" pos:column="49">.<pos:position pos:line="3711" pos:column="50"/></operator><name pos:line="3711" pos:column="50">pCursor<pos:position pos:line="3711" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="3711" pos:column="58"/></argument_list></call></expr></argument> )<pos:position pos:line="3711" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="3711" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="3712" pos:column="9">v<pos:position pos:line="3712" pos:column="10"/></name> <operator pos:line="3712" pos:column="11">=<pos:position pos:line="3712" pos:column="12"/></operator> <call><name pos:line="3712" pos:column="13">sqlite3BtreeIntegerKey<pos:position pos:line="3712" pos:column="35"/></name><argument_list pos:line="3712" pos:column="35">(<argument><expr><name><name pos:line="3712" pos:column="36">pC<pos:position pos:line="3712" pos:column="38"/></name><operator pos:line="3712" pos:column="38">-&gt;<pos:position pos:line="3712" pos:column="43"/></operator><name pos:line="3712" pos:column="40">uc<pos:position pos:line="3712" pos:column="42"/></name><operator pos:line="3712" pos:column="42">.<pos:position pos:line="3712" pos:column="43"/></operator><name pos:line="3712" pos:column="43">pCursor<pos:position pos:line="3712" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="3712" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="3712" pos:column="52"/></expr_stmt>
        <if pos:line="3713" pos:column="9">if<condition pos:line="3713" pos:column="11">( <expr><name pos:line="3713" pos:column="13">v<pos:position pos:line="3713" pos:column="14"/></name><operator pos:line="3713" pos:column="14">&gt;=<pos:position pos:line="3713" pos:column="19"/></operator><name pos:line="3713" pos:column="16">MAX_ROWID<pos:position pos:line="3713" pos:column="25"/></name></expr> )<pos:position pos:line="3713" pos:column="27"/></condition><then><block pos:line="3713" pos:column="27">{
          <expr_stmt><expr><name><name pos:line="3714" pos:column="11">pC<pos:position pos:line="3714" pos:column="13"/></name><operator pos:line="3714" pos:column="13">-&gt;<pos:position pos:line="3714" pos:column="18"/></operator><name pos:line="3714" pos:column="15">useRandomRowid<pos:position pos:line="3714" pos:column="29"/></name></name> <operator pos:line="3714" pos:column="30">=<pos:position pos:line="3714" pos:column="31"/></operator> <literal type="number" pos:line="3714" pos:column="32">1<pos:position pos:line="3714" pos:column="33"/></literal></expr>;<pos:position pos:line="3714" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="3715" pos:column="10"/></block></then><else pos:line="3715" pos:column="10">else<block pos:line="3715" pos:column="14">{
          <expr_stmt><expr><name pos:line="3716" pos:column="11">v<pos:position pos:line="3716" pos:column="12"/></name><operator pos:line="3716" pos:column="12">++<pos:position pos:line="3716" pos:column="14"/></operator></expr>;<pos:position pos:line="3716" pos:column="15"/></expr_stmt>   <comment type="block" pos:line="3716" pos:column="18">/* IMP: R-29538-34987 */</comment>
        }<pos:position pos:line="3717" pos:column="10"/></block></else></if>
      }<pos:position pos:line="3718" pos:column="8"/></block></else></if>
    }<pos:position pos:line="3719" pos:column="6"/></block></then></if>

<cpp:ifndef pos:line="3721" pos:column="1">#<cpp:directive pos:line="3721" pos:column="2">ifndef<pos:position pos:line="3721" pos:column="8"/></cpp:directive> <name pos:line="3721" pos:column="9">SQLITE_OMIT_AUTOINCREMENT<pos:position pos:line="3721" pos:column="34"/></name></cpp:ifndef>
    <if pos:line="3722" pos:column="5">if<condition pos:line="3722" pos:column="7">( <expr><name><name pos:line="3722" pos:column="9">pOp<pos:position pos:line="3722" pos:column="12"/></name><operator pos:line="3722" pos:column="12">-&gt;<pos:position pos:line="3722" pos:column="17"/></operator><name pos:line="3722" pos:column="14">p3<pos:position pos:line="3722" pos:column="16"/></name></name></expr> )<pos:position pos:line="3722" pos:column="18"/></condition><then><block pos:line="3722" pos:column="18">{
      <comment type="block" pos:line="3723" pos:column="7">/* Assert that P3 is a valid memory cell. */</comment>
      <expr_stmt><expr><call><name pos:line="3724" pos:column="7">assert<pos:position pos:line="3724" pos:column="13"/></name><argument_list pos:line="3724" pos:column="13">( <argument><expr><name><name pos:line="3724" pos:column="15">pOp<pos:position pos:line="3724" pos:column="18"/></name><operator pos:line="3724" pos:column="18">-&gt;<pos:position pos:line="3724" pos:column="23"/></operator><name pos:line="3724" pos:column="20">p3<pos:position pos:line="3724" pos:column="22"/></name></name><operator pos:line="3724" pos:column="22">&gt;<pos:position pos:line="3724" pos:column="26"/></operator><literal type="number" pos:line="3724" pos:column="23">0<pos:position pos:line="3724" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="3724" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3724" pos:column="27"/></expr_stmt>
      <if pos:line="3725" pos:column="7">if<condition pos:line="3725" pos:column="9">( <expr><name><name pos:line="3725" pos:column="11">p<pos:position pos:line="3725" pos:column="12"/></name><operator pos:line="3725" pos:column="12">-&gt;<pos:position pos:line="3725" pos:column="17"/></operator><name pos:line="3725" pos:column="14">pFrame<pos:position pos:line="3725" pos:column="20"/></name></name></expr> )<pos:position pos:line="3725" pos:column="22"/></condition><then><block pos:line="3725" pos:column="22">{
        <for pos:line="3726" pos:column="9">for<control pos:line="3726" pos:column="12">(<init><expr><name pos:line="3726" pos:column="13">pFrame<pos:position pos:line="3726" pos:column="19"/></name><operator pos:line="3726" pos:column="19">=<pos:position pos:line="3726" pos:column="20"/></operator><name><name pos:line="3726" pos:column="20">p<pos:position pos:line="3726" pos:column="21"/></name><operator pos:line="3726" pos:column="21">-&gt;<pos:position pos:line="3726" pos:column="26"/></operator><name pos:line="3726" pos:column="23">pFrame<pos:position pos:line="3726" pos:column="29"/></name></name></expr>;<pos:position pos:line="3726" pos:column="30"/></init> <condition><expr><name><name pos:line="3726" pos:column="31">pFrame<pos:position pos:line="3726" pos:column="37"/></name><operator pos:line="3726" pos:column="37">-&gt;<pos:position pos:line="3726" pos:column="42"/></operator><name pos:line="3726" pos:column="39">pParent<pos:position pos:line="3726" pos:column="46"/></name></name></expr>;<pos:position pos:line="3726" pos:column="47"/></condition> <incr><expr><name pos:line="3726" pos:column="48">pFrame<pos:position pos:line="3726" pos:column="54"/></name><operator pos:line="3726" pos:column="54">=<pos:position pos:line="3726" pos:column="55"/></operator><name><name pos:line="3726" pos:column="55">pFrame<pos:position pos:line="3726" pos:column="61"/></name><operator pos:line="3726" pos:column="61">-&gt;<pos:position pos:line="3726" pos:column="66"/></operator><name pos:line="3726" pos:column="63">pParent<pos:position pos:line="3726" pos:column="70"/></name></name></expr></incr>)<pos:position pos:line="3726" pos:column="71"/></control><block type="pseudo"><empty_stmt pos:line="3726" pos:column="71">;<pos:position pos:line="3726" pos:column="72"/></empty_stmt></block></for>
        <comment type="block" pos:line="3727" pos:column="9">/* Assert that P3 is a valid memory cell. */</comment>
        <expr_stmt><expr><call><name pos:line="3728" pos:column="9">assert<pos:position pos:line="3728" pos:column="15"/></name><argument_list pos:line="3728" pos:column="15">( <argument><expr><name><name pos:line="3728" pos:column="17">pOp<pos:position pos:line="3728" pos:column="20"/></name><operator pos:line="3728" pos:column="20">-&gt;<pos:position pos:line="3728" pos:column="25"/></operator><name pos:line="3728" pos:column="22">p3<pos:position pos:line="3728" pos:column="24"/></name></name><operator pos:line="3728" pos:column="24">&lt;=<pos:position pos:line="3728" pos:column="29"/></operator><name><name pos:line="3728" pos:column="26">pFrame<pos:position pos:line="3728" pos:column="32"/></name><operator pos:line="3728" pos:column="32">-&gt;<pos:position pos:line="3728" pos:column="37"/></operator><name pos:line="3728" pos:column="34">nMem<pos:position pos:line="3728" pos:column="38"/></name></name></expr></argument> )<pos:position pos:line="3728" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3728" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="3729" pos:column="9">pMem<pos:position pos:line="3729" pos:column="13"/></name> <operator pos:line="3729" pos:column="14">=<pos:position pos:line="3729" pos:column="15"/></operator> <operator pos:line="3729" pos:column="16">&amp;<pos:position pos:line="3729" pos:column="21"/></operator><name><name pos:line="3729" pos:column="17">pFrame<pos:position pos:line="3729" pos:column="23"/></name><operator pos:line="3729" pos:column="23">-&gt;<pos:position pos:line="3729" pos:column="28"/></operator><name pos:line="3729" pos:column="25">aMem<pos:position pos:line="3729" pos:column="29"/></name><index pos:line="3729" pos:column="29">[<expr><name><name pos:line="3729" pos:column="30">pOp<pos:position pos:line="3729" pos:column="33"/></name><operator pos:line="3729" pos:column="33">-&gt;<pos:position pos:line="3729" pos:column="38"/></operator><name pos:line="3729" pos:column="35">p3<pos:position pos:line="3729" pos:column="37"/></name></name></expr>]<pos:position pos:line="3729" pos:column="38"/></index></name></expr>;<pos:position pos:line="3729" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="3730" pos:column="8"/></block></then><else pos:line="3730" pos:column="8">else<block pos:line="3730" pos:column="12">{
        <comment type="block" pos:line="3731" pos:column="9">/* Assert that P3 is a valid memory cell. */</comment>
        <expr_stmt><expr><call><name pos:line="3732" pos:column="9">assert<pos:position pos:line="3732" pos:column="15"/></name><argument_list pos:line="3732" pos:column="15">( <argument><expr><name><name pos:line="3732" pos:column="17">pOp<pos:position pos:line="3732" pos:column="20"/></name><operator pos:line="3732" pos:column="20">-&gt;<pos:position pos:line="3732" pos:column="25"/></operator><name pos:line="3732" pos:column="22">p3<pos:position pos:line="3732" pos:column="24"/></name></name><operator pos:line="3732" pos:column="24">&lt;=<pos:position pos:line="3732" pos:column="29"/></operator><operator pos:line="3732" pos:column="26">(<pos:position pos:line="3732" pos:column="27"/></operator><name><name pos:line="3732" pos:column="27">p<pos:position pos:line="3732" pos:column="28"/></name><operator pos:line="3732" pos:column="28">-&gt;<pos:position pos:line="3732" pos:column="33"/></operator><name pos:line="3732" pos:column="30">nMem<pos:position pos:line="3732" pos:column="34"/></name></name><operator pos:line="3732" pos:column="34">+<pos:position pos:line="3732" pos:column="35"/></operator><literal type="number" pos:line="3732" pos:column="35">1<pos:position pos:line="3732" pos:column="36"/></literal> <operator pos:line="3732" pos:column="37">-<pos:position pos:line="3732" pos:column="38"/></operator> <name><name pos:line="3732" pos:column="39">p<pos:position pos:line="3732" pos:column="40"/></name><operator pos:line="3732" pos:column="40">-&gt;<pos:position pos:line="3732" pos:column="45"/></operator><name pos:line="3732" pos:column="42">nCursor<pos:position pos:line="3732" pos:column="49"/></name></name><operator pos:line="3732" pos:column="49">)<pos:position pos:line="3732" pos:column="50"/></operator></expr></argument> )<pos:position pos:line="3732" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="3732" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name pos:line="3733" pos:column="9">pMem<pos:position pos:line="3733" pos:column="13"/></name> <operator pos:line="3733" pos:column="14">=<pos:position pos:line="3733" pos:column="15"/></operator> <operator pos:line="3733" pos:column="16">&amp;<pos:position pos:line="3733" pos:column="21"/></operator><name><name pos:line="3733" pos:column="17">aMem<pos:position pos:line="3733" pos:column="21"/></name><index pos:line="3733" pos:column="21">[<expr><name><name pos:line="3733" pos:column="22">pOp<pos:position pos:line="3733" pos:column="25"/></name><operator pos:line="3733" pos:column="25">-&gt;<pos:position pos:line="3733" pos:column="30"/></operator><name pos:line="3733" pos:column="27">p3<pos:position pos:line="3733" pos:column="29"/></name></name></expr>]<pos:position pos:line="3733" pos:column="30"/></index></name></expr>;<pos:position pos:line="3733" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="3734" pos:column="9">memAboutToChange<pos:position pos:line="3734" pos:column="25"/></name><argument_list pos:line="3734" pos:column="25">(<argument><expr><name pos:line="3734" pos:column="26">p<pos:position pos:line="3734" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="3734" pos:column="29">pMem<pos:position pos:line="3734" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3734" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3734" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="3735" pos:column="8"/></block></else></if>
      <expr_stmt><expr><call><name pos:line="3736" pos:column="7">assert<pos:position pos:line="3736" pos:column="13"/></name><argument_list pos:line="3736" pos:column="13">( <argument><expr><call><name pos:line="3736" pos:column="15">memIsValid<pos:position pos:line="3736" pos:column="25"/></name><argument_list pos:line="3736" pos:column="25">(<argument><expr><name pos:line="3736" pos:column="26">pMem<pos:position pos:line="3736" pos:column="30"/></name></expr></argument>)<pos:position pos:line="3736" pos:column="31"/></argument_list></call></expr></argument> )<pos:position pos:line="3736" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3736" pos:column="34"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="3738" pos:column="7">REGISTER_TRACE<pos:position pos:line="3738" pos:column="21"/></name><argument_list pos:line="3738" pos:column="21">(<argument><expr><name><name pos:line="3738" pos:column="22">pOp<pos:position pos:line="3738" pos:column="25"/></name><operator pos:line="3738" pos:column="25">-&gt;<pos:position pos:line="3738" pos:column="30"/></operator><name pos:line="3738" pos:column="27">p3<pos:position pos:line="3738" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="3738" pos:column="31">pMem<pos:position pos:line="3738" pos:column="35"/></name></expr></argument>)<pos:position pos:line="3738" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3738" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3739" pos:column="7">sqlite3VdbeMemIntegerify<pos:position pos:line="3739" pos:column="31"/></name><argument_list pos:line="3739" pos:column="31">(<argument><expr><name pos:line="3739" pos:column="32">pMem<pos:position pos:line="3739" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3739" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3739" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3740" pos:column="7">assert<pos:position pos:line="3740" pos:column="13"/></name><argument_list pos:line="3740" pos:column="13">( <argument><expr><operator pos:line="3740" pos:column="15">(<pos:position pos:line="3740" pos:column="16"/></operator><name><name pos:line="3740" pos:column="16">pMem<pos:position pos:line="3740" pos:column="20"/></name><operator pos:line="3740" pos:column="20">-&gt;<pos:position pos:line="3740" pos:column="25"/></operator><name pos:line="3740" pos:column="22">flags<pos:position pos:line="3740" pos:column="27"/></name></name> <operator pos:line="3740" pos:column="28">&amp;<pos:position pos:line="3740" pos:column="33"/></operator> <name pos:line="3740" pos:column="30">MEM_Int<pos:position pos:line="3740" pos:column="37"/></name><operator pos:line="3740" pos:column="37">)<pos:position pos:line="3740" pos:column="38"/></operator><operator pos:line="3740" pos:column="38">!=<pos:position pos:line="3740" pos:column="40"/></operator><literal type="number" pos:line="3740" pos:column="40">0<pos:position pos:line="3740" pos:column="41"/></literal></expr></argument> )<pos:position pos:line="3740" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="3740" pos:column="44"/></expr_stmt>  <comment type="block" pos:line="3740" pos:column="46">/* mem(P3) holds an integer */</comment>
      <if pos:line="3741" pos:column="7">if<condition pos:line="3741" pos:column="9">( <expr><name><name pos:line="3741" pos:column="11">pMem<pos:position pos:line="3741" pos:column="15"/></name><operator pos:line="3741" pos:column="15">-&gt;<pos:position pos:line="3741" pos:column="20"/></operator><name pos:line="3741" pos:column="17">u<pos:position pos:line="3741" pos:column="18"/></name><operator pos:line="3741" pos:column="18">.<pos:position pos:line="3741" pos:column="19"/></operator><name pos:line="3741" pos:column="19">i<pos:position pos:line="3741" pos:column="20"/></name></name><operator pos:line="3741" pos:column="20">==<pos:position pos:line="3741" pos:column="22"/></operator><name pos:line="3741" pos:column="22">MAX_ROWID<pos:position pos:line="3741" pos:column="31"/></name> <operator pos:line="3741" pos:column="32">||<pos:position pos:line="3741" pos:column="34"/></operator> <name><name pos:line="3741" pos:column="35">pC<pos:position pos:line="3741" pos:column="37"/></name><operator pos:line="3741" pos:column="37">-&gt;<pos:position pos:line="3741" pos:column="42"/></operator><name pos:line="3741" pos:column="39">useRandomRowid<pos:position pos:line="3741" pos:column="53"/></name></name></expr> )<pos:position pos:line="3741" pos:column="55"/></condition><then><block pos:line="3741" pos:column="55">{
        <expr_stmt><expr><name pos:line="3742" pos:column="9">rc<pos:position pos:line="3742" pos:column="11"/></name> <operator pos:line="3742" pos:column="12">=<pos:position pos:line="3742" pos:column="13"/></operator> <name pos:line="3742" pos:column="14">SQLITE_FULL<pos:position pos:line="3742" pos:column="25"/></name></expr>;<pos:position pos:line="3742" pos:column="26"/></expr_stmt>   <comment type="block" pos:line="3742" pos:column="29">/* IMP: R-17817-00630 */</comment>
        <goto pos:line="3743" pos:column="9">goto <name pos:line="3743" pos:column="14">abort_due_to_error<pos:position pos:line="3743" pos:column="32"/></name>;<pos:position pos:line="3743" pos:column="33"/></goto>
      }<pos:position pos:line="3744" pos:column="8"/></block></then></if>
      <if pos:line="3745" pos:column="7">if<condition pos:line="3745" pos:column="9">( <expr><name pos:line="3745" pos:column="11">v<pos:position pos:line="3745" pos:column="12"/></name><operator pos:line="3745" pos:column="12">&lt;<pos:position pos:line="3745" pos:column="16"/></operator><name><name pos:line="3745" pos:column="13">pMem<pos:position pos:line="3745" pos:column="17"/></name><operator pos:line="3745" pos:column="17">-&gt;<pos:position pos:line="3745" pos:column="22"/></operator><name pos:line="3745" pos:column="19">u<pos:position pos:line="3745" pos:column="20"/></name><operator pos:line="3745" pos:column="20">.<pos:position pos:line="3745" pos:column="21"/></operator><name pos:line="3745" pos:column="21">i<pos:position pos:line="3745" pos:column="22"/></name></name><operator pos:line="3745" pos:column="22">+<pos:position pos:line="3745" pos:column="23"/></operator><literal type="number" pos:line="3745" pos:column="23">1<pos:position pos:line="3745" pos:column="24"/></literal></expr> )<pos:position pos:line="3745" pos:column="26"/></condition><then><block pos:line="3745" pos:column="26">{
        <expr_stmt><expr><name pos:line="3746" pos:column="9">v<pos:position pos:line="3746" pos:column="10"/></name> <operator pos:line="3746" pos:column="11">=<pos:position pos:line="3746" pos:column="12"/></operator> <name><name pos:line="3746" pos:column="13">pMem<pos:position pos:line="3746" pos:column="17"/></name><operator pos:line="3746" pos:column="17">-&gt;<pos:position pos:line="3746" pos:column="22"/></operator><name pos:line="3746" pos:column="19">u<pos:position pos:line="3746" pos:column="20"/></name><operator pos:line="3746" pos:column="20">.<pos:position pos:line="3746" pos:column="21"/></operator><name pos:line="3746" pos:column="21">i<pos:position pos:line="3746" pos:column="22"/></name></name> <operator pos:line="3746" pos:column="23">+<pos:position pos:line="3746" pos:column="24"/></operator> <literal type="number" pos:line="3746" pos:column="25">1<pos:position pos:line="3746" pos:column="26"/></literal></expr>;<pos:position pos:line="3746" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="3747" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="3748" pos:column="7">pMem<pos:position pos:line="3748" pos:column="11"/></name><operator pos:line="3748" pos:column="11">-&gt;<pos:position pos:line="3748" pos:column="16"/></operator><name pos:line="3748" pos:column="13">u<pos:position pos:line="3748" pos:column="14"/></name><operator pos:line="3748" pos:column="14">.<pos:position pos:line="3748" pos:column="15"/></operator><name pos:line="3748" pos:column="15">i<pos:position pos:line="3748" pos:column="16"/></name></name> <operator pos:line="3748" pos:column="17">=<pos:position pos:line="3748" pos:column="18"/></operator> <name pos:line="3748" pos:column="19">v<pos:position pos:line="3748" pos:column="20"/></name></expr>;<pos:position pos:line="3748" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="3749" pos:column="6"/></block></then></if>
<cpp:endif pos:line="3750" pos:column="1">#<cpp:directive pos:line="3750" pos:column="2">endif<pos:position pos:line="3750" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="3751" pos:column="5">if<condition pos:line="3751" pos:column="7">( <expr><name><name pos:line="3751" pos:column="9">pC<pos:position pos:line="3751" pos:column="11"/></name><operator pos:line="3751" pos:column="11">-&gt;<pos:position pos:line="3751" pos:column="16"/></operator><name pos:line="3751" pos:column="13">useRandomRowid<pos:position pos:line="3751" pos:column="27"/></name></name></expr> )<pos:position pos:line="3751" pos:column="29"/></condition><then><block pos:line="3751" pos:column="29">{
      <comment type="block" pos:line="3752" pos:column="7">/* IMPLEMENTATION-OF: R-07677-41881 If the largest ROWID is equal to the
      ** largest possible integer (9223372036854775807) then the database
      ** engine starts picking positive candidate ROWIDs at random until
      ** it finds one that is not previously used. */</comment>
      <expr_stmt><expr><call><name pos:line="3756" pos:column="7">assert<pos:position pos:line="3756" pos:column="13"/></name><argument_list pos:line="3756" pos:column="13">( <argument><expr><name><name pos:line="3756" pos:column="15">pOp<pos:position pos:line="3756" pos:column="18"/></name><operator pos:line="3756" pos:column="18">-&gt;<pos:position pos:line="3756" pos:column="23"/></operator><name pos:line="3756" pos:column="20">p3<pos:position pos:line="3756" pos:column="22"/></name></name><operator pos:line="3756" pos:column="22">==<pos:position pos:line="3756" pos:column="24"/></operator><literal type="number" pos:line="3756" pos:column="24">0<pos:position pos:line="3756" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3756" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3756" pos:column="28"/></expr_stmt>  <comment type="block" pos:line="3756" pos:column="30">/* We cannot be in random rowid mode if this is
                             ** an AUTOINCREMENT table. */</comment>
      <expr_stmt><expr><name pos:line="3758" pos:column="7">cnt<pos:position pos:line="3758" pos:column="10"/></name> <operator pos:line="3758" pos:column="11">=<pos:position pos:line="3758" pos:column="12"/></operator> <literal type="number" pos:line="3758" pos:column="13">0<pos:position pos:line="3758" pos:column="14"/></literal></expr>;<pos:position pos:line="3758" pos:column="15"/></expr_stmt>
      <do pos:line="3759" pos:column="7">do<block pos:line="3759" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="3760" pos:column="9">sqlite3_randomness<pos:position pos:line="3760" pos:column="27"/></name><argument_list pos:line="3760" pos:column="27">(<argument><expr><sizeof pos:line="3760" pos:column="28">sizeof<argument_list pos:line="3760" pos:column="34">(<argument><expr><name pos:line="3760" pos:column="35">v<pos:position pos:line="3760" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3760" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="3760" pos:column="39">&amp;<pos:position pos:line="3760" pos:column="44"/></operator><name pos:line="3760" pos:column="40">v<pos:position pos:line="3760" pos:column="41"/></name></expr></argument>)<pos:position pos:line="3760" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="3760" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="3761" pos:column="9">v<pos:position pos:line="3761" pos:column="10"/></name> <operator pos:line="3761" pos:column="11">&amp;=<pos:position pos:line="3761" pos:column="17"/></operator> <operator pos:line="3761" pos:column="14">(<pos:position pos:line="3761" pos:column="15"/></operator><name pos:line="3761" pos:column="15">MAX_ROWID<pos:position pos:line="3761" pos:column="24"/></name><operator pos:line="3761" pos:column="24">&gt;&gt;<pos:position pos:line="3761" pos:column="29"/></operator><literal type="number" pos:line="3761" pos:column="26">1<pos:position pos:line="3761" pos:column="27"/></literal><operator pos:line="3761" pos:column="27">)<pos:position pos:line="3761" pos:column="28"/></operator></expr>;<pos:position pos:line="3761" pos:column="29"/></expr_stmt> <expr_stmt><expr><name pos:line="3761" pos:column="30">v<pos:position pos:line="3761" pos:column="31"/></name><operator pos:line="3761" pos:column="31">++<pos:position pos:line="3761" pos:column="33"/></operator></expr>;<pos:position pos:line="3761" pos:column="34"/></expr_stmt>  <comment type="block" pos:line="3761" pos:column="36">/* Ensure that v is greater than zero */</comment>
      }<pos:position pos:line="3762" pos:column="8"/></block>while<condition pos:line="3762" pos:column="13">(  <expr><operator pos:line="3762" pos:column="16">(<pos:position pos:line="3762" pos:column="17"/></operator><operator pos:line="3762" pos:column="17">(<pos:position pos:line="3762" pos:column="18"/></operator><name pos:line="3762" pos:column="18">rc<pos:position pos:line="3762" pos:column="20"/></name> <operator pos:line="3762" pos:column="21">=<pos:position pos:line="3762" pos:column="22"/></operator> <call><name pos:line="3762" pos:column="23">sqlite3BtreeMovetoUnpacked<pos:position pos:line="3762" pos:column="49"/></name><argument_list pos:line="3762" pos:column="49">(<argument><expr><name><name pos:line="3762" pos:column="50">pC<pos:position pos:line="3762" pos:column="52"/></name><operator pos:line="3762" pos:column="52">-&gt;<pos:position pos:line="3762" pos:column="57"/></operator><name pos:line="3762" pos:column="54">uc<pos:position pos:line="3762" pos:column="56"/></name><operator pos:line="3762" pos:column="56">.<pos:position pos:line="3762" pos:column="57"/></operator><name pos:line="3762" pos:column="57">pCursor<pos:position pos:line="3762" pos:column="64"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3762" pos:column="66">0<pos:position pos:line="3762" pos:column="67"/></literal></expr></argument>, <argument><expr><operator pos:line="3762" pos:column="69">(<pos:position pos:line="3762" pos:column="70"/></operator><name pos:line="3762" pos:column="70">u64<pos:position pos:line="3762" pos:column="73"/></name><operator pos:line="3762" pos:column="73">)<pos:position pos:line="3762" pos:column="74"/></operator><name pos:line="3762" pos:column="74">v<pos:position pos:line="3762" pos:column="75"/></name></expr></argument>,
                                                 <argument><expr><literal type="number" pos:line="3763" pos:column="50">0<pos:position pos:line="3763" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="3763" pos:column="53">&amp;<pos:position pos:line="3763" pos:column="58"/></operator><name pos:line="3763" pos:column="54">res<pos:position pos:line="3763" pos:column="57"/></name></expr></argument>)<pos:position pos:line="3763" pos:column="58"/></argument_list></call><operator pos:line="3763" pos:column="58">)<pos:position pos:line="3763" pos:column="59"/></operator><operator pos:line="3763" pos:column="59">==<pos:position pos:line="3763" pos:column="61"/></operator><name pos:line="3763" pos:column="61">SQLITE_OK<pos:position pos:line="3763" pos:column="70"/></name><operator pos:line="3763" pos:column="70">)<pos:position pos:line="3763" pos:column="71"/></operator>
            <operator pos:line="3764" pos:column="13">&amp;&amp;<pos:position pos:line="3764" pos:column="23"/></operator> <operator pos:line="3764" pos:column="16">(<pos:position pos:line="3764" pos:column="17"/></operator><name pos:line="3764" pos:column="17">res<pos:position pos:line="3764" pos:column="20"/></name><operator pos:line="3764" pos:column="20">==<pos:position pos:line="3764" pos:column="22"/></operator><literal type="number" pos:line="3764" pos:column="22">0<pos:position pos:line="3764" pos:column="23"/></literal><operator pos:line="3764" pos:column="23">)<pos:position pos:line="3764" pos:column="24"/></operator>
            <operator pos:line="3765" pos:column="13">&amp;&amp;<pos:position pos:line="3765" pos:column="23"/></operator> <operator pos:line="3765" pos:column="16">(<pos:position pos:line="3765" pos:column="17"/></operator><operator pos:line="3765" pos:column="17">++<pos:position pos:line="3765" pos:column="19"/></operator><name pos:line="3765" pos:column="19">cnt<pos:position pos:line="3765" pos:column="22"/></name><operator pos:line="3765" pos:column="22">&lt;<pos:position pos:line="3765" pos:column="26"/></operator><literal type="number" pos:line="3765" pos:column="23">100<pos:position pos:line="3765" pos:column="26"/></literal><operator pos:line="3765" pos:column="26">)<pos:position pos:line="3765" pos:column="27"/></operator></expr>)<pos:position pos:line="3765" pos:column="28"/></condition>;<pos:position pos:line="3765" pos:column="29"/></do>
      <if pos:line="3766" pos:column="7">if<condition pos:line="3766" pos:column="9">( <expr><name pos:line="3766" pos:column="11">rc<pos:position pos:line="3766" pos:column="13"/></name></expr> )<pos:position pos:line="3766" pos:column="15"/></condition><then pos:line="3766" pos:column="15"> <block type="pseudo"><goto pos:line="3766" pos:column="16">goto <name pos:line="3766" pos:column="21">abort_due_to_error<pos:position pos:line="3766" pos:column="39"/></name>;<pos:position pos:line="3766" pos:column="40"/></goto></block></then></if>
      <if pos:line="3767" pos:column="7">if<condition pos:line="3767" pos:column="9">( <expr><name pos:line="3767" pos:column="11">res<pos:position pos:line="3767" pos:column="14"/></name><operator pos:line="3767" pos:column="14">==<pos:position pos:line="3767" pos:column="16"/></operator><literal type="number" pos:line="3767" pos:column="16">0<pos:position pos:line="3767" pos:column="17"/></literal></expr> )<pos:position pos:line="3767" pos:column="19"/></condition><then><block pos:line="3767" pos:column="19">{
        <expr_stmt><expr><name pos:line="3768" pos:column="9">rc<pos:position pos:line="3768" pos:column="11"/></name> <operator pos:line="3768" pos:column="12">=<pos:position pos:line="3768" pos:column="13"/></operator> <name pos:line="3768" pos:column="14">SQLITE_FULL<pos:position pos:line="3768" pos:column="25"/></name></expr>;<pos:position pos:line="3768" pos:column="26"/></expr_stmt>   <comment type="block" pos:line="3768" pos:column="29">/* IMP: R-38219-53002 */</comment>
        <goto pos:line="3769" pos:column="9">goto <name pos:line="3769" pos:column="14">abort_due_to_error<pos:position pos:line="3769" pos:column="32"/></name>;<pos:position pos:line="3769" pos:column="33"/></goto>
      }<pos:position pos:line="3770" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="3771" pos:column="7">assert<pos:position pos:line="3771" pos:column="13"/></name><argument_list pos:line="3771" pos:column="13">( <argument><expr><name pos:line="3771" pos:column="15">v<pos:position pos:line="3771" pos:column="16"/></name><operator pos:line="3771" pos:column="16">&gt;<pos:position pos:line="3771" pos:column="20"/></operator><literal type="number" pos:line="3771" pos:column="17">0<pos:position pos:line="3771" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="3771" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="3771" pos:column="21"/></expr_stmt>  <comment type="block" pos:line="3771" pos:column="23">/* EV: R-40812-03570 */</comment>
    }<pos:position pos:line="3772" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="3773" pos:column="5">pC<pos:position pos:line="3773" pos:column="7"/></name><operator pos:line="3773" pos:column="7">-&gt;<pos:position pos:line="3773" pos:column="12"/></operator><name pos:line="3773" pos:column="9">deferredMoveto<pos:position pos:line="3773" pos:column="23"/></name></name> <operator pos:line="3773" pos:column="24">=<pos:position pos:line="3773" pos:column="25"/></operator> <literal type="number" pos:line="3773" pos:column="26">0<pos:position pos:line="3773" pos:column="27"/></literal></expr>;<pos:position pos:line="3773" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3774" pos:column="5">pC<pos:position pos:line="3774" pos:column="7"/></name><operator pos:line="3774" pos:column="7">-&gt;<pos:position pos:line="3774" pos:column="12"/></operator><name pos:line="3774" pos:column="9">cacheStatus<pos:position pos:line="3774" pos:column="20"/></name></name> <operator pos:line="3774" pos:column="21">=<pos:position pos:line="3774" pos:column="22"/></operator> <name pos:line="3774" pos:column="23">CACHE_STALE<pos:position pos:line="3774" pos:column="34"/></name></expr>;<pos:position pos:line="3774" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="3775" pos:column="4"/></block>
  <expr_stmt><expr><name><name pos:line="3776" pos:column="3">pOut<pos:position pos:line="3776" pos:column="7"/></name><operator pos:line="3776" pos:column="7">-&gt;<pos:position pos:line="3776" pos:column="12"/></operator><name pos:line="3776" pos:column="9">u<pos:position pos:line="3776" pos:column="10"/></name><operator pos:line="3776" pos:column="10">.<pos:position pos:line="3776" pos:column="11"/></operator><name pos:line="3776" pos:column="11">i<pos:position pos:line="3776" pos:column="12"/></name></name> <operator pos:line="3776" pos:column="13">=<pos:position pos:line="3776" pos:column="14"/></operator> <name pos:line="3776" pos:column="15">v<pos:position pos:line="3776" pos:column="16"/></name></expr>;<pos:position pos:line="3776" pos:column="17"/></expr_stmt>
  <break pos:line="3777" pos:column="3">break;<pos:position pos:line="3777" pos:column="9"/></break>
}<pos:position pos:line="3778" pos:column="2"/></block>

<comment type="block" pos:line="3780" pos:column="1">/* Opcode: Insert P1 P2 P3 P4 P5
** Synopsis: intkey=r[P3] data=r[P2]
**
** Write an entry into the table of cursor P1.  A new entry is
** created if it doesn't already exist or the data for an existing
** entry is overwritten.  The data is the value MEM_Blob stored in register
** number P2. The key is stored in register P3. The key must
** be a MEM_Int.
**
** If the OPFLAG_NCHANGE flag of P5 is set, then the row change count is
** incremented (otherwise not).  If the OPFLAG_LASTROWID flag of P5 is set,
** then rowid is stored for subsequent return by the
** sqlite3_last_insert_rowid() function (otherwise it is unmodified).
**
** If the OPFLAG_USESEEKRESULT flag of P5 is set, the implementation might
** run faster by avoiding an unnecessary seek on cursor P1.  However,
** the OPFLAG_USESEEKRESULT flag must only be set if there have been no prior
** seeks on the cursor or if the most recent seek used a key equal to P3.
**
** If the OPFLAG_ISUPDATE flag is set, then this opcode is part of an
** UPDATE operation.  Otherwise (if the flag is clear) then this opcode
** is part of an INSERT operation.  The difference is only important to
** the update hook.
**
** Parameter P4 may point to a Table structure, or may be NULL. If it is 
** not NULL, then the update-hook (sqlite3.xUpdateCallback) is invoked 
** following a successful insert.
**
** (WARNING/TODO: If P1 is a pseudo-cursor and P2 is dynamically
** allocated, then ownership of P2 is transferred to the pseudo-cursor
** and register P2 becomes ephemeral.  If the cursor is changed, the
** value of register P2 will then change.  Make sure this does not
** cause any problems.)
**
** This instruction only works on tables.  The equivalent instruction
** for indices is OP_IdxInsert.
*/</comment>
<comment type="block" pos:line="3817" pos:column="1">/* Opcode: InsertInt P1 P2 P3 P4 P5
** Synopsis: intkey=P3 data=r[P2]
**
** This works exactly like OP_Insert except that the key is the
** integer value P3, not the value of the integer stored in register P3.
*/</comment>
<case pos:line="3823" pos:column="1">case <expr><name pos:line="3823" pos:column="6">OP_Insert<pos:position pos:line="3823" pos:column="15"/></name></expr>:<pos:position pos:line="3823" pos:column="16"/></case> 
<case pos:line="3824" pos:column="1">case <expr><name pos:line="3824" pos:column="6">OP_InsertInt<pos:position pos:line="3824" pos:column="18"/></name></expr>:<pos:position pos:line="3824" pos:column="19"/></case> <block pos:line="3824" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="3825" pos:column="3">Mem<pos:position pos:line="3825" pos:column="6"/></name> <modifier pos:line="3825" pos:column="7">*<pos:position pos:line="3825" pos:column="8"/></modifier></type><name pos:line="3825" pos:column="8">pData<pos:position pos:line="3825" pos:column="13"/></name></decl>;<pos:position pos:line="3825" pos:column="14"/></decl_stmt>       <comment type="block" pos:line="3825" pos:column="21">/* MEM cell holding data for the record to be inserted */</comment>
  <decl_stmt><decl><type><name pos:line="3826" pos:column="3">Mem<pos:position pos:line="3826" pos:column="6"/></name> <modifier pos:line="3826" pos:column="7">*<pos:position pos:line="3826" pos:column="8"/></modifier></type><name pos:line="3826" pos:column="8">pKey<pos:position pos:line="3826" pos:column="12"/></name></decl>;<pos:position pos:line="3826" pos:column="13"/></decl_stmt>        <comment type="block" pos:line="3826" pos:column="21">/* MEM cell holding key  for the record */</comment>
  <decl_stmt><decl><type><name pos:line="3827" pos:column="3">VdbeCursor<pos:position pos:line="3827" pos:column="13"/></name> <modifier pos:line="3827" pos:column="14">*<pos:position pos:line="3827" pos:column="15"/></modifier></type><name pos:line="3827" pos:column="15">pC<pos:position pos:line="3827" pos:column="17"/></name></decl>;<pos:position pos:line="3827" pos:column="18"/></decl_stmt>   <comment type="block" pos:line="3827" pos:column="21">/* Cursor to table into which insert is written */</comment>
  <decl_stmt><decl><type><name pos:line="3828" pos:column="3">int<pos:position pos:line="3828" pos:column="6"/></name></type> <name pos:line="3828" pos:column="7">seekResult<pos:position pos:line="3828" pos:column="17"/></name></decl>;<pos:position pos:line="3828" pos:column="18"/></decl_stmt>   <comment type="block" pos:line="3828" pos:column="21">/* Result of prior seek or 0 if no USESEEKRESULT flag */</comment>
  <decl_stmt><decl><type><specifier pos:line="3829" pos:column="3">const<pos:position pos:line="3829" pos:column="8"/></specifier> <name pos:line="3829" pos:column="9">char<pos:position pos:line="3829" pos:column="13"/></name> <modifier pos:line="3829" pos:column="14">*<pos:position pos:line="3829" pos:column="15"/></modifier></type><name pos:line="3829" pos:column="15">zDb<pos:position pos:line="3829" pos:column="18"/></name></decl>;<pos:position pos:line="3829" pos:column="19"/></decl_stmt>  <comment type="block" pos:line="3829" pos:column="21">/* database name - used by the update hook */</comment>
  <decl_stmt><decl><type><name pos:line="3830" pos:column="3">Table<pos:position pos:line="3830" pos:column="8"/></name> <modifier pos:line="3830" pos:column="9">*<pos:position pos:line="3830" pos:column="10"/></modifier></type><name pos:line="3830" pos:column="10">pTab<pos:position pos:line="3830" pos:column="14"/></name></decl>;<pos:position pos:line="3830" pos:column="15"/></decl_stmt>      <comment type="block" pos:line="3830" pos:column="21">/* Table structure - used by update and pre-update hooks */</comment>
  <decl_stmt><decl><type><name pos:line="3831" pos:column="3">int<pos:position pos:line="3831" pos:column="6"/></name></type> <name pos:line="3831" pos:column="7">op<pos:position pos:line="3831" pos:column="9"/></name></decl>;<pos:position pos:line="3831" pos:column="10"/></decl_stmt>           <comment type="block" pos:line="3831" pos:column="21">/* Opcode for update hook: SQLITE_UPDATE or SQLITE_INSERT */</comment>
  <decl_stmt><decl><type><name pos:line="3832" pos:column="3">BtreePayload<pos:position pos:line="3832" pos:column="15"/></name></type> <name pos:line="3832" pos:column="16">x<pos:position pos:line="3832" pos:column="17"/></name></decl>;<pos:position pos:line="3832" pos:column="18"/></decl_stmt>   <comment type="block" pos:line="3832" pos:column="21">/* Payload to be inserted */</comment>

  <expr_stmt><expr><name pos:line="3834" pos:column="3">op<pos:position pos:line="3834" pos:column="5"/></name> <operator pos:line="3834" pos:column="6">=<pos:position pos:line="3834" pos:column="7"/></operator> <literal type="number" pos:line="3834" pos:column="8">0<pos:position pos:line="3834" pos:column="9"/></literal></expr>;<pos:position pos:line="3834" pos:column="10"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3835" pos:column="3">pData<pos:position pos:line="3835" pos:column="8"/></name> <operator pos:line="3835" pos:column="9">=<pos:position pos:line="3835" pos:column="10"/></operator> <operator pos:line="3835" pos:column="11">&amp;<pos:position pos:line="3835" pos:column="16"/></operator><name><name pos:line="3835" pos:column="12">aMem<pos:position pos:line="3835" pos:column="16"/></name><index pos:line="3835" pos:column="16">[<expr><name><name pos:line="3835" pos:column="17">pOp<pos:position pos:line="3835" pos:column="20"/></name><operator pos:line="3835" pos:column="20">-&gt;<pos:position pos:line="3835" pos:column="25"/></operator><name pos:line="3835" pos:column="22">p2<pos:position pos:line="3835" pos:column="24"/></name></name></expr>]<pos:position pos:line="3835" pos:column="25"/></index></name></expr>;<pos:position pos:line="3835" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3836" pos:column="3">assert<pos:position pos:line="3836" pos:column="9"/></name><argument_list pos:line="3836" pos:column="9">( <argument><expr><name><name pos:line="3836" pos:column="11">pOp<pos:position pos:line="3836" pos:column="14"/></name><operator pos:line="3836" pos:column="14">-&gt;<pos:position pos:line="3836" pos:column="19"/></operator><name pos:line="3836" pos:column="16">p1<pos:position pos:line="3836" pos:column="18"/></name></name><operator pos:line="3836" pos:column="18">&gt;=<pos:position pos:line="3836" pos:column="23"/></operator><literal type="number" pos:line="3836" pos:column="20">0<pos:position pos:line="3836" pos:column="21"/></literal> <operator pos:line="3836" pos:column="22">&amp;&amp;<pos:position pos:line="3836" pos:column="32"/></operator> <name><name pos:line="3836" pos:column="25">pOp<pos:position pos:line="3836" pos:column="28"/></name><operator pos:line="3836" pos:column="28">-&gt;<pos:position pos:line="3836" pos:column="33"/></operator><name pos:line="3836" pos:column="30">p1<pos:position pos:line="3836" pos:column="32"/></name></name><operator pos:line="3836" pos:column="32">&lt;<pos:position pos:line="3836" pos:column="36"/></operator><name><name pos:line="3836" pos:column="33">p<pos:position pos:line="3836" pos:column="34"/></name><operator pos:line="3836" pos:column="34">-&gt;<pos:position pos:line="3836" pos:column="39"/></operator><name pos:line="3836" pos:column="36">nCursor<pos:position pos:line="3836" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3836" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3836" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3837" pos:column="3">assert<pos:position pos:line="3837" pos:column="9"/></name><argument_list pos:line="3837" pos:column="9">( <argument><expr><call><name pos:line="3837" pos:column="11">memIsValid<pos:position pos:line="3837" pos:column="21"/></name><argument_list pos:line="3837" pos:column="21">(<argument><expr><name pos:line="3837" pos:column="22">pData<pos:position pos:line="3837" pos:column="27"/></name></expr></argument>)<pos:position pos:line="3837" pos:column="28"/></argument_list></call></expr></argument> )<pos:position pos:line="3837" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3837" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3838" pos:column="3">pC<pos:position pos:line="3838" pos:column="5"/></name> <operator pos:line="3838" pos:column="6">=<pos:position pos:line="3838" pos:column="7"/></operator> <name><name pos:line="3838" pos:column="8">p<pos:position pos:line="3838" pos:column="9"/></name><operator pos:line="3838" pos:column="9">-&gt;<pos:position pos:line="3838" pos:column="14"/></operator><name pos:line="3838" pos:column="11">apCsr<pos:position pos:line="3838" pos:column="16"/></name><index pos:line="3838" pos:column="16">[<expr><name><name pos:line="3838" pos:column="17">pOp<pos:position pos:line="3838" pos:column="20"/></name><operator pos:line="3838" pos:column="20">-&gt;<pos:position pos:line="3838" pos:column="25"/></operator><name pos:line="3838" pos:column="22">p1<pos:position pos:line="3838" pos:column="24"/></name></name></expr>]<pos:position pos:line="3838" pos:column="25"/></index></name></expr>;<pos:position pos:line="3838" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3839" pos:column="3">assert<pos:position pos:line="3839" pos:column="9"/></name><argument_list pos:line="3839" pos:column="9">( <argument><expr><name pos:line="3839" pos:column="11">pC<pos:position pos:line="3839" pos:column="13"/></name><operator pos:line="3839" pos:column="13">!=<pos:position pos:line="3839" pos:column="15"/></operator><literal type="number" pos:line="3839" pos:column="15">0<pos:position pos:line="3839" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3839" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3839" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3840" pos:column="3">assert<pos:position pos:line="3840" pos:column="9"/></name><argument_list pos:line="3840" pos:column="9">( <argument><expr><name><name pos:line="3840" pos:column="11">pC<pos:position pos:line="3840" pos:column="13"/></name><operator pos:line="3840" pos:column="13">-&gt;<pos:position pos:line="3840" pos:column="18"/></operator><name pos:line="3840" pos:column="15">eCurType<pos:position pos:line="3840" pos:column="23"/></name></name><operator pos:line="3840" pos:column="23">==<pos:position pos:line="3840" pos:column="25"/></operator><name pos:line="3840" pos:column="25">CURTYPE_BTREE<pos:position pos:line="3840" pos:column="38"/></name></expr></argument> )<pos:position pos:line="3840" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3840" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3841" pos:column="3">assert<pos:position pos:line="3841" pos:column="9"/></name><argument_list pos:line="3841" pos:column="9">( <argument><expr><name><name pos:line="3841" pos:column="11">pC<pos:position pos:line="3841" pos:column="13"/></name><operator pos:line="3841" pos:column="13">-&gt;<pos:position pos:line="3841" pos:column="18"/></operator><name pos:line="3841" pos:column="15">uc<pos:position pos:line="3841" pos:column="17"/></name><operator pos:line="3841" pos:column="17">.<pos:position pos:line="3841" pos:column="18"/></operator><name pos:line="3841" pos:column="18">pCursor<pos:position pos:line="3841" pos:column="25"/></name></name><operator pos:line="3841" pos:column="25">!=<pos:position pos:line="3841" pos:column="27"/></operator><literal type="number" pos:line="3841" pos:column="27">0<pos:position pos:line="3841" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="3841" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3841" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3842" pos:column="3">assert<pos:position pos:line="3842" pos:column="9"/></name><argument_list pos:line="3842" pos:column="9">( <argument><expr><operator pos:line="3842" pos:column="11">(<pos:position pos:line="3842" pos:column="12"/></operator><name><name pos:line="3842" pos:column="12">pOp<pos:position pos:line="3842" pos:column="15"/></name><operator pos:line="3842" pos:column="15">-&gt;<pos:position pos:line="3842" pos:column="20"/></operator><name pos:line="3842" pos:column="17">p5<pos:position pos:line="3842" pos:column="19"/></name></name> <operator pos:line="3842" pos:column="20">&amp;<pos:position pos:line="3842" pos:column="25"/></operator> <name pos:line="3842" pos:column="22">OPFLAG_ISNOOP<pos:position pos:line="3842" pos:column="35"/></name><operator pos:line="3842" pos:column="35">)<pos:position pos:line="3842" pos:column="36"/></operator> <operator pos:line="3842" pos:column="37">||<pos:position pos:line="3842" pos:column="39"/></operator> <name><name pos:line="3842" pos:column="40">pC<pos:position pos:line="3842" pos:column="42"/></name><operator pos:line="3842" pos:column="42">-&gt;<pos:position pos:line="3842" pos:column="47"/></operator><name pos:line="3842" pos:column="44">isTable<pos:position pos:line="3842" pos:column="51"/></name></name></expr></argument> )<pos:position pos:line="3842" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="3842" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3843" pos:column="3">assert<pos:position pos:line="3843" pos:column="9"/></name><argument_list pos:line="3843" pos:column="9">( <argument><expr><name><name pos:line="3843" pos:column="11">pOp<pos:position pos:line="3843" pos:column="14"/></name><operator pos:line="3843" pos:column="14">-&gt;<pos:position pos:line="3843" pos:column="19"/></operator><name pos:line="3843" pos:column="16">p4type<pos:position pos:line="3843" pos:column="22"/></name></name><operator pos:line="3843" pos:column="22">==<pos:position pos:line="3843" pos:column="24"/></operator><name pos:line="3843" pos:column="24">P4_TABLE<pos:position pos:line="3843" pos:column="32"/></name> <operator pos:line="3843" pos:column="33">||<pos:position pos:line="3843" pos:column="35"/></operator> <name><name pos:line="3843" pos:column="36">pOp<pos:position pos:line="3843" pos:column="39"/></name><operator pos:line="3843" pos:column="39">-&gt;<pos:position pos:line="3843" pos:column="44"/></operator><name pos:line="3843" pos:column="41">p4type<pos:position pos:line="3843" pos:column="47"/></name></name><operator pos:line="3843" pos:column="47">&gt;=<pos:position pos:line="3843" pos:column="52"/></operator><name pos:line="3843" pos:column="49">P4_STATIC<pos:position pos:line="3843" pos:column="58"/></name></expr></argument> )<pos:position pos:line="3843" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="3843" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3844" pos:column="3">REGISTER_TRACE<pos:position pos:line="3844" pos:column="17"/></name><argument_list pos:line="3844" pos:column="17">(<argument><expr><name><name pos:line="3844" pos:column="18">pOp<pos:position pos:line="3844" pos:column="21"/></name><operator pos:line="3844" pos:column="21">-&gt;<pos:position pos:line="3844" pos:column="26"/></operator><name pos:line="3844" pos:column="23">p2<pos:position pos:line="3844" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="3844" pos:column="27">pData<pos:position pos:line="3844" pos:column="32"/></name></expr></argument>)<pos:position pos:line="3844" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3844" pos:column="34"/></expr_stmt>

  <if pos:line="3846" pos:column="3">if<condition pos:line="3846" pos:column="5">( <expr><name><name pos:line="3846" pos:column="7">pOp<pos:position pos:line="3846" pos:column="10"/></name><operator pos:line="3846" pos:column="10">-&gt;<pos:position pos:line="3846" pos:column="15"/></operator><name pos:line="3846" pos:column="12">opcode<pos:position pos:line="3846" pos:column="18"/></name></name><operator pos:line="3846" pos:column="18">==<pos:position pos:line="3846" pos:column="20"/></operator><name pos:line="3846" pos:column="20">OP_Insert<pos:position pos:line="3846" pos:column="29"/></name></expr> )<pos:position pos:line="3846" pos:column="31"/></condition><then><block pos:line="3846" pos:column="31">{
    <expr_stmt><expr><name pos:line="3847" pos:column="5">pKey<pos:position pos:line="3847" pos:column="9"/></name> <operator pos:line="3847" pos:column="10">=<pos:position pos:line="3847" pos:column="11"/></operator> <operator pos:line="3847" pos:column="12">&amp;<pos:position pos:line="3847" pos:column="17"/></operator><name><name pos:line="3847" pos:column="13">aMem<pos:position pos:line="3847" pos:column="17"/></name><index pos:line="3847" pos:column="17">[<expr><name><name pos:line="3847" pos:column="18">pOp<pos:position pos:line="3847" pos:column="21"/></name><operator pos:line="3847" pos:column="21">-&gt;<pos:position pos:line="3847" pos:column="26"/></operator><name pos:line="3847" pos:column="23">p3<pos:position pos:line="3847" pos:column="25"/></name></name></expr>]<pos:position pos:line="3847" pos:column="26"/></index></name></expr>;<pos:position pos:line="3847" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3848" pos:column="5">assert<pos:position pos:line="3848" pos:column="11"/></name><argument_list pos:line="3848" pos:column="11">( <argument><expr><name><name pos:line="3848" pos:column="13">pKey<pos:position pos:line="3848" pos:column="17"/></name><operator pos:line="3848" pos:column="17">-&gt;<pos:position pos:line="3848" pos:column="22"/></operator><name pos:line="3848" pos:column="19">flags<pos:position pos:line="3848" pos:column="24"/></name></name> <operator pos:line="3848" pos:column="25">&amp;<pos:position pos:line="3848" pos:column="30"/></operator> <name pos:line="3848" pos:column="27">MEM_Int<pos:position pos:line="3848" pos:column="34"/></name></expr></argument> )<pos:position pos:line="3848" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3848" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3849" pos:column="5">assert<pos:position pos:line="3849" pos:column="11"/></name><argument_list pos:line="3849" pos:column="11">( <argument><expr><call><name pos:line="3849" pos:column="13">memIsValid<pos:position pos:line="3849" pos:column="23"/></name><argument_list pos:line="3849" pos:column="23">(<argument><expr><name pos:line="3849" pos:column="24">pKey<pos:position pos:line="3849" pos:column="28"/></name></expr></argument>)<pos:position pos:line="3849" pos:column="29"/></argument_list></call></expr></argument> )<pos:position pos:line="3849" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="3849" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3850" pos:column="5">REGISTER_TRACE<pos:position pos:line="3850" pos:column="19"/></name><argument_list pos:line="3850" pos:column="19">(<argument><expr><name><name pos:line="3850" pos:column="20">pOp<pos:position pos:line="3850" pos:column="23"/></name><operator pos:line="3850" pos:column="23">-&gt;<pos:position pos:line="3850" pos:column="28"/></operator><name pos:line="3850" pos:column="25">p3<pos:position pos:line="3850" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="3850" pos:column="29">pKey<pos:position pos:line="3850" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3850" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3850" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3851" pos:column="5">x<pos:position pos:line="3851" pos:column="6"/></name><operator pos:line="3851" pos:column="6">.<pos:position pos:line="3851" pos:column="7"/></operator><name pos:line="3851" pos:column="7">nKey<pos:position pos:line="3851" pos:column="11"/></name></name> <operator pos:line="3851" pos:column="12">=<pos:position pos:line="3851" pos:column="13"/></operator> <name><name pos:line="3851" pos:column="14">pKey<pos:position pos:line="3851" pos:column="18"/></name><operator pos:line="3851" pos:column="18">-&gt;<pos:position pos:line="3851" pos:column="23"/></operator><name pos:line="3851" pos:column="20">u<pos:position pos:line="3851" pos:column="21"/></name><operator pos:line="3851" pos:column="21">.<pos:position pos:line="3851" pos:column="22"/></operator><name pos:line="3851" pos:column="22">i<pos:position pos:line="3851" pos:column="23"/></name></name></expr>;<pos:position pos:line="3851" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="3852" pos:column="4"/></block></then><else pos:line="3852" pos:column="4">else<block pos:line="3852" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="3853" pos:column="5">assert<pos:position pos:line="3853" pos:column="11"/></name><argument_list pos:line="3853" pos:column="11">( <argument><expr><name><name pos:line="3853" pos:column="13">pOp<pos:position pos:line="3853" pos:column="16"/></name><operator pos:line="3853" pos:column="16">-&gt;<pos:position pos:line="3853" pos:column="21"/></operator><name pos:line="3853" pos:column="18">opcode<pos:position pos:line="3853" pos:column="24"/></name></name><operator pos:line="3853" pos:column="24">==<pos:position pos:line="3853" pos:column="26"/></operator><name pos:line="3853" pos:column="26">OP_InsertInt<pos:position pos:line="3853" pos:column="38"/></name></expr></argument> )<pos:position pos:line="3853" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3853" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3854" pos:column="5">x<pos:position pos:line="3854" pos:column="6"/></name><operator pos:line="3854" pos:column="6">.<pos:position pos:line="3854" pos:column="7"/></operator><name pos:line="3854" pos:column="7">nKey<pos:position pos:line="3854" pos:column="11"/></name></name> <operator pos:line="3854" pos:column="12">=<pos:position pos:line="3854" pos:column="13"/></operator> <name><name pos:line="3854" pos:column="14">pOp<pos:position pos:line="3854" pos:column="17"/></name><operator pos:line="3854" pos:column="17">-&gt;<pos:position pos:line="3854" pos:column="22"/></operator><name pos:line="3854" pos:column="19">p3<pos:position pos:line="3854" pos:column="21"/></name></name></expr>;<pos:position pos:line="3854" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="3855" pos:column="4"/></block></else></if>

  <if pos:line="3857" pos:column="3">if<condition pos:line="3857" pos:column="5">( <expr><name><name pos:line="3857" pos:column="7">pOp<pos:position pos:line="3857" pos:column="10"/></name><operator pos:line="3857" pos:column="10">-&gt;<pos:position pos:line="3857" pos:column="15"/></operator><name pos:line="3857" pos:column="12">p4type<pos:position pos:line="3857" pos:column="18"/></name></name><operator pos:line="3857" pos:column="18">==<pos:position pos:line="3857" pos:column="20"/></operator><name pos:line="3857" pos:column="20">P4_TABLE<pos:position pos:line="3857" pos:column="28"/></name> <operator pos:line="3857" pos:column="29">&amp;&amp;<pos:position pos:line="3857" pos:column="39"/></operator> <call><name pos:line="3857" pos:column="32">HAS_UPDATE_HOOK<pos:position pos:line="3857" pos:column="47"/></name><argument_list pos:line="3857" pos:column="47">(<argument><expr><name pos:line="3857" pos:column="48">db<pos:position pos:line="3857" pos:column="50"/></name></expr></argument>)<pos:position pos:line="3857" pos:column="51"/></argument_list></call></expr> )<pos:position pos:line="3857" pos:column="53"/></condition><then><block pos:line="3857" pos:column="53">{
    <expr_stmt><expr><call><name pos:line="3858" pos:column="5">assert<pos:position pos:line="3858" pos:column="11"/></name><argument_list pos:line="3858" pos:column="11">( <argument><expr><name><name pos:line="3858" pos:column="13">pC<pos:position pos:line="3858" pos:column="15"/></name><operator pos:line="3858" pos:column="15">-&gt;<pos:position pos:line="3858" pos:column="20"/></operator><name pos:line="3858" pos:column="17">iDb<pos:position pos:line="3858" pos:column="20"/></name></name><operator pos:line="3858" pos:column="20">&gt;=<pos:position pos:line="3858" pos:column="25"/></operator><literal type="number" pos:line="3858" pos:column="22">0<pos:position pos:line="3858" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="3858" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3858" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3859" pos:column="5">zDb<pos:position pos:line="3859" pos:column="8"/></name> <operator pos:line="3859" pos:column="9">=<pos:position pos:line="3859" pos:column="10"/></operator> <name><name pos:line="3859" pos:column="11">db<pos:position pos:line="3859" pos:column="13"/></name><operator pos:line="3859" pos:column="13">-&gt;<pos:position pos:line="3859" pos:column="18"/></operator><name pos:line="3859" pos:column="15">aDb<pos:position pos:line="3859" pos:column="18"/></name><index pos:line="3859" pos:column="18">[<expr><name><name pos:line="3859" pos:column="19">pC<pos:position pos:line="3859" pos:column="21"/></name><operator pos:line="3859" pos:column="21">-&gt;<pos:position pos:line="3859" pos:column="26"/></operator><name pos:line="3859" pos:column="23">iDb<pos:position pos:line="3859" pos:column="26"/></name></name></expr>]<pos:position pos:line="3859" pos:column="27"/></index></name><operator pos:line="3859" pos:column="27">.<pos:position pos:line="3859" pos:column="28"/></operator><name pos:line="3859" pos:column="28">zDbSName<pos:position pos:line="3859" pos:column="36"/></name></expr>;<pos:position pos:line="3859" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3860" pos:column="5">pTab<pos:position pos:line="3860" pos:column="9"/></name> <operator pos:line="3860" pos:column="10">=<pos:position pos:line="3860" pos:column="11"/></operator> <name><name pos:line="3860" pos:column="12">pOp<pos:position pos:line="3860" pos:column="15"/></name><operator pos:line="3860" pos:column="15">-&gt;<pos:position pos:line="3860" pos:column="20"/></operator><name pos:line="3860" pos:column="17">p4<pos:position pos:line="3860" pos:column="19"/></name><operator pos:line="3860" pos:column="19">.<pos:position pos:line="3860" pos:column="20"/></operator><name pos:line="3860" pos:column="20">pTab<pos:position pos:line="3860" pos:column="24"/></name></name></expr>;<pos:position pos:line="3860" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3861" pos:column="5">assert<pos:position pos:line="3861" pos:column="11"/></name><argument_list pos:line="3861" pos:column="11">( <argument><expr><operator pos:line="3861" pos:column="13">(<pos:position pos:line="3861" pos:column="14"/></operator><name><name pos:line="3861" pos:column="14">pOp<pos:position pos:line="3861" pos:column="17"/></name><operator pos:line="3861" pos:column="17">-&gt;<pos:position pos:line="3861" pos:column="22"/></operator><name pos:line="3861" pos:column="19">p5<pos:position pos:line="3861" pos:column="21"/></name></name> <operator pos:line="3861" pos:column="22">&amp;<pos:position pos:line="3861" pos:column="27"/></operator> <name pos:line="3861" pos:column="24">OPFLAG_ISNOOP<pos:position pos:line="3861" pos:column="37"/></name><operator pos:line="3861" pos:column="37">)<pos:position pos:line="3861" pos:column="38"/></operator> <operator pos:line="3861" pos:column="39">||<pos:position pos:line="3861" pos:column="41"/></operator> <call><name pos:line="3861" pos:column="42">HasRowid<pos:position pos:line="3861" pos:column="50"/></name><argument_list pos:line="3861" pos:column="50">(<argument><expr><name pos:line="3861" pos:column="51">pTab<pos:position pos:line="3861" pos:column="55"/></name></expr></argument>)<pos:position pos:line="3861" pos:column="56"/></argument_list></call></expr></argument> )<pos:position pos:line="3861" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="3861" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3862" pos:column="5">op<pos:position pos:line="3862" pos:column="7"/></name> <operator pos:line="3862" pos:column="8">=<pos:position pos:line="3862" pos:column="9"/></operator> <operator pos:line="3862" pos:column="10">(<pos:position pos:line="3862" pos:column="11"/></operator><ternary><condition><expr><operator pos:line="3862" pos:column="11">(<pos:position pos:line="3862" pos:column="12"/></operator><name><name pos:line="3862" pos:column="12">pOp<pos:position pos:line="3862" pos:column="15"/></name><operator pos:line="3862" pos:column="15">-&gt;<pos:position pos:line="3862" pos:column="20"/></operator><name pos:line="3862" pos:column="17">p5<pos:position pos:line="3862" pos:column="19"/></name></name> <operator pos:line="3862" pos:column="20">&amp;<pos:position pos:line="3862" pos:column="25"/></operator> <name pos:line="3862" pos:column="22">OPFLAG_ISUPDATE<pos:position pos:line="3862" pos:column="37"/></name><operator pos:line="3862" pos:column="37">)<pos:position pos:line="3862" pos:column="38"/></operator></expr> ?<pos:position pos:line="3862" pos:column="40"/></condition><then pos:line="3862" pos:column="40"> <expr><name pos:line="3862" pos:column="41">SQLITE_UPDATE<pos:position pos:line="3862" pos:column="54"/></name></expr> <pos:position pos:line="3862" pos:column="55"/></then><else pos:line="3862" pos:column="55">: <expr><name pos:line="3862" pos:column="57">SQLITE_INSERT<pos:position pos:line="3862" pos:column="70"/></name></expr></else></ternary><operator pos:line="3862" pos:column="70">)<pos:position pos:line="3862" pos:column="71"/></operator></expr>;<pos:position pos:line="3862" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="3863" pos:column="4"/></block></then><else pos:line="3863" pos:column="4">else<block pos:line="3863" pos:column="8">{
    <expr_stmt><expr><name pos:line="3864" pos:column="5">pTab<pos:position pos:line="3864" pos:column="9"/></name> <operator pos:line="3864" pos:column="10">=<pos:position pos:line="3864" pos:column="11"/></operator> <literal type="number" pos:line="3864" pos:column="12">0<pos:position pos:line="3864" pos:column="13"/></literal></expr>;<pos:position pos:line="3864" pos:column="14"/></expr_stmt> <comment type="block" pos:line="3864" pos:column="15">/* Not needed.  Silence a compiler warning. */</comment>
    <expr_stmt><expr><name pos:line="3865" pos:column="5">zDb<pos:position pos:line="3865" pos:column="8"/></name> <operator pos:line="3865" pos:column="9">=<pos:position pos:line="3865" pos:column="10"/></operator> <literal type="number" pos:line="3865" pos:column="11">0<pos:position pos:line="3865" pos:column="12"/></literal></expr>;<pos:position pos:line="3865" pos:column="13"/></expr_stmt>  <comment type="block" pos:line="3865" pos:column="15">/* Not needed.  Silence a compiler warning. */</comment>
  }<pos:position pos:line="3866" pos:column="4"/></block></else></if>

<cpp:ifdef pos:line="3868" pos:column="1">#<cpp:directive pos:line="3868" pos:column="2">ifdef<pos:position pos:line="3868" pos:column="7"/></cpp:directive> <name pos:line="3868" pos:column="8">SQLITE_ENABLE_PREUPDATE_HOOK<pos:position pos:line="3868" pos:column="36"/></name></cpp:ifdef>
  <comment type="block" pos:line="3869" pos:column="3">/* Invoke the pre-update hook, if any */</comment>
  <if pos:line="3870" pos:column="3">if<condition pos:line="3870" pos:column="5">( <expr><name><name pos:line="3870" pos:column="7">db<pos:position pos:line="3870" pos:column="9"/></name><operator pos:line="3870" pos:column="9">-&gt;<pos:position pos:line="3870" pos:column="14"/></operator><name pos:line="3870" pos:column="11">xPreUpdateCallback<pos:position pos:line="3870" pos:column="29"/></name></name> 
   <operator pos:line="3871" pos:column="4">&amp;&amp;<pos:position pos:line="3871" pos:column="14"/></operator> <name><name pos:line="3871" pos:column="7">pOp<pos:position pos:line="3871" pos:column="10"/></name><operator pos:line="3871" pos:column="10">-&gt;<pos:position pos:line="3871" pos:column="15"/></operator><name pos:line="3871" pos:column="12">p4type<pos:position pos:line="3871" pos:column="18"/></name></name><operator pos:line="3871" pos:column="18">==<pos:position pos:line="3871" pos:column="20"/></operator><name pos:line="3871" pos:column="20">P4_TABLE<pos:position pos:line="3871" pos:column="28"/></name>
   <operator pos:line="3872" pos:column="4">&amp;&amp;<pos:position pos:line="3872" pos:column="14"/></operator> <operator pos:line="3872" pos:column="7">!<pos:position pos:line="3872" pos:column="8"/></operator><operator pos:line="3872" pos:column="8">(<pos:position pos:line="3872" pos:column="9"/></operator><name><name pos:line="3872" pos:column="9">pOp<pos:position pos:line="3872" pos:column="12"/></name><operator pos:line="3872" pos:column="12">-&gt;<pos:position pos:line="3872" pos:column="17"/></operator><name pos:line="3872" pos:column="14">p5<pos:position pos:line="3872" pos:column="16"/></name></name> <operator pos:line="3872" pos:column="17">&amp;<pos:position pos:line="3872" pos:column="22"/></operator> <name pos:line="3872" pos:column="19">OPFLAG_ISUPDATE<pos:position pos:line="3872" pos:column="34"/></name><operator pos:line="3872" pos:column="34">)<pos:position pos:line="3872" pos:column="35"/></operator></expr>
  )<pos:position pos:line="3873" pos:column="4"/></condition><then><block pos:line="3873" pos:column="4">{
    <expr_stmt><expr><call><name pos:line="3874" pos:column="5">sqlite3VdbePreUpdateHook<pos:position pos:line="3874" pos:column="29"/></name><argument_list pos:line="3874" pos:column="29">(<argument><expr><name pos:line="3874" pos:column="30">p<pos:position pos:line="3874" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="3874" pos:column="33">pC<pos:position pos:line="3874" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="3874" pos:column="37">SQLITE_INSERT<pos:position pos:line="3874" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="3874" pos:column="52">zDb<pos:position pos:line="3874" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="3874" pos:column="57">pTab<pos:position pos:line="3874" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="3874" pos:column="63">x<pos:position pos:line="3874" pos:column="64"/></name><operator pos:line="3874" pos:column="64">.<pos:position pos:line="3874" pos:column="65"/></operator><name pos:line="3874" pos:column="65">nKey<pos:position pos:line="3874" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3874" pos:column="71">pOp<pos:position pos:line="3874" pos:column="74"/></name><operator pos:line="3874" pos:column="74">-&gt;<pos:position pos:line="3874" pos:column="79"/></operator><name pos:line="3874" pos:column="76">p2<pos:position pos:line="3874" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="3874" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="3874" pos:column="80"/></expr_stmt>
  }<pos:position pos:line="3875" pos:column="4"/></block></then></if>
  <if pos:line="3876" pos:column="3">if<condition pos:line="3876" pos:column="5">( <expr><name><name pos:line="3876" pos:column="7">pOp<pos:position pos:line="3876" pos:column="10"/></name><operator pos:line="3876" pos:column="10">-&gt;<pos:position pos:line="3876" pos:column="15"/></operator><name pos:line="3876" pos:column="12">p5<pos:position pos:line="3876" pos:column="14"/></name></name> <operator pos:line="3876" pos:column="15">&amp;<pos:position pos:line="3876" pos:column="20"/></operator> <name pos:line="3876" pos:column="17">OPFLAG_ISNOOP<pos:position pos:line="3876" pos:column="30"/></name></expr> )<pos:position pos:line="3876" pos:column="32"/></condition><then pos:line="3876" pos:column="32"> <block type="pseudo"><break pos:line="3876" pos:column="33">break;<pos:position pos:line="3876" pos:column="39"/></break></block></then></if>
<cpp:endif pos:line="3877" pos:column="1">#<cpp:directive pos:line="3877" pos:column="2">endif<pos:position pos:line="3877" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="3879" pos:column="3">if<condition pos:line="3879" pos:column="5">( <expr><name><name pos:line="3879" pos:column="7">pOp<pos:position pos:line="3879" pos:column="10"/></name><operator pos:line="3879" pos:column="10">-&gt;<pos:position pos:line="3879" pos:column="15"/></operator><name pos:line="3879" pos:column="12">p5<pos:position pos:line="3879" pos:column="14"/></name></name> <operator pos:line="3879" pos:column="15">&amp;<pos:position pos:line="3879" pos:column="20"/></operator> <name pos:line="3879" pos:column="17">OPFLAG_NCHANGE<pos:position pos:line="3879" pos:column="31"/></name></expr> )<pos:position pos:line="3879" pos:column="33"/></condition><then pos:line="3879" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="3879" pos:column="34">p<pos:position pos:line="3879" pos:column="35"/></name><operator pos:line="3879" pos:column="35">-&gt;<pos:position pos:line="3879" pos:column="40"/></operator><name pos:line="3879" pos:column="37">nChange<pos:position pos:line="3879" pos:column="44"/></name></name><operator pos:line="3879" pos:column="44">++<pos:position pos:line="3879" pos:column="46"/></operator></expr>;<pos:position pos:line="3879" pos:column="47"/></expr_stmt></block></then></if>
  <if pos:line="3880" pos:column="3">if<condition pos:line="3880" pos:column="5">( <expr><name><name pos:line="3880" pos:column="7">pOp<pos:position pos:line="3880" pos:column="10"/></name><operator pos:line="3880" pos:column="10">-&gt;<pos:position pos:line="3880" pos:column="15"/></operator><name pos:line="3880" pos:column="12">p5<pos:position pos:line="3880" pos:column="14"/></name></name> <operator pos:line="3880" pos:column="15">&amp;<pos:position pos:line="3880" pos:column="20"/></operator> <name pos:line="3880" pos:column="17">OPFLAG_LASTROWID<pos:position pos:line="3880" pos:column="33"/></name></expr> )<pos:position pos:line="3880" pos:column="35"/></condition><then pos:line="3880" pos:column="35"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="3880" pos:column="36">db<pos:position pos:line="3880" pos:column="38"/></name><operator pos:line="3880" pos:column="38">-&gt;<pos:position pos:line="3880" pos:column="43"/></operator><name pos:line="3880" pos:column="40">lastRowid<pos:position pos:line="3880" pos:column="49"/></name></name> <operator pos:line="3880" pos:column="50">=<pos:position pos:line="3880" pos:column="51"/></operator> <name><name pos:line="3880" pos:column="52">x<pos:position pos:line="3880" pos:column="53"/></name><operator pos:line="3880" pos:column="53">.<pos:position pos:line="3880" pos:column="54"/></operator><name pos:line="3880" pos:column="54">nKey<pos:position pos:line="3880" pos:column="58"/></name></name></expr>;<pos:position pos:line="3880" pos:column="59"/></expr_stmt></block></then></if>
  <if pos:line="3881" pos:column="3">if<condition pos:line="3881" pos:column="5">( <expr><name><name pos:line="3881" pos:column="7">pData<pos:position pos:line="3881" pos:column="12"/></name><operator pos:line="3881" pos:column="12">-&gt;<pos:position pos:line="3881" pos:column="17"/></operator><name pos:line="3881" pos:column="14">flags<pos:position pos:line="3881" pos:column="19"/></name></name> <operator pos:line="3881" pos:column="20">&amp;<pos:position pos:line="3881" pos:column="25"/></operator> <name pos:line="3881" pos:column="22">MEM_Null<pos:position pos:line="3881" pos:column="30"/></name></expr> )<pos:position pos:line="3881" pos:column="32"/></condition><then><block pos:line="3881" pos:column="32">{
    <expr_stmt><expr><name><name pos:line="3882" pos:column="5">x<pos:position pos:line="3882" pos:column="6"/></name><operator pos:line="3882" pos:column="6">.<pos:position pos:line="3882" pos:column="7"/></operator><name pos:line="3882" pos:column="7">pData<pos:position pos:line="3882" pos:column="12"/></name></name> <operator pos:line="3882" pos:column="13">=<pos:position pos:line="3882" pos:column="14"/></operator> <literal type="number" pos:line="3882" pos:column="15">0<pos:position pos:line="3882" pos:column="16"/></literal></expr>;<pos:position pos:line="3882" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3883" pos:column="5">x<pos:position pos:line="3883" pos:column="6"/></name><operator pos:line="3883" pos:column="6">.<pos:position pos:line="3883" pos:column="7"/></operator><name pos:line="3883" pos:column="7">nData<pos:position pos:line="3883" pos:column="12"/></name></name> <operator pos:line="3883" pos:column="13">=<pos:position pos:line="3883" pos:column="14"/></operator> <literal type="number" pos:line="3883" pos:column="15">0<pos:position pos:line="3883" pos:column="16"/></literal></expr>;<pos:position pos:line="3883" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="3884" pos:column="4"/></block></then><else pos:line="3884" pos:column="4">else<block pos:line="3884" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="3885" pos:column="5">assert<pos:position pos:line="3885" pos:column="11"/></name><argument_list pos:line="3885" pos:column="11">( <argument><expr><name><name pos:line="3885" pos:column="13">pData<pos:position pos:line="3885" pos:column="18"/></name><operator pos:line="3885" pos:column="18">-&gt;<pos:position pos:line="3885" pos:column="23"/></operator><name pos:line="3885" pos:column="20">flags<pos:position pos:line="3885" pos:column="25"/></name></name> <operator pos:line="3885" pos:column="26">&amp;<pos:position pos:line="3885" pos:column="31"/></operator> <operator pos:line="3885" pos:column="28">(<pos:position pos:line="3885" pos:column="29"/></operator><name pos:line="3885" pos:column="29">MEM_Blob<pos:position pos:line="3885" pos:column="37"/></name><operator pos:line="3885" pos:column="37">|<pos:position pos:line="3885" pos:column="38"/></operator><name pos:line="3885" pos:column="38">MEM_Str<pos:position pos:line="3885" pos:column="45"/></name><operator pos:line="3885" pos:column="45">)<pos:position pos:line="3885" pos:column="46"/></operator></expr></argument> )<pos:position pos:line="3885" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3885" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3886" pos:column="5">x<pos:position pos:line="3886" pos:column="6"/></name><operator pos:line="3886" pos:column="6">.<pos:position pos:line="3886" pos:column="7"/></operator><name pos:line="3886" pos:column="7">pData<pos:position pos:line="3886" pos:column="12"/></name></name> <operator pos:line="3886" pos:column="13">=<pos:position pos:line="3886" pos:column="14"/></operator> <name><name pos:line="3886" pos:column="15">pData<pos:position pos:line="3886" pos:column="20"/></name><operator pos:line="3886" pos:column="20">-&gt;<pos:position pos:line="3886" pos:column="25"/></operator><name pos:line="3886" pos:column="22">z<pos:position pos:line="3886" pos:column="23"/></name></name></expr>;<pos:position pos:line="3886" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3887" pos:column="5">x<pos:position pos:line="3887" pos:column="6"/></name><operator pos:line="3887" pos:column="6">.<pos:position pos:line="3887" pos:column="7"/></operator><name pos:line="3887" pos:column="7">nData<pos:position pos:line="3887" pos:column="12"/></name></name> <operator pos:line="3887" pos:column="13">=<pos:position pos:line="3887" pos:column="14"/></operator> <name><name pos:line="3887" pos:column="15">pData<pos:position pos:line="3887" pos:column="20"/></name><operator pos:line="3887" pos:column="20">-&gt;<pos:position pos:line="3887" pos:column="25"/></operator><name pos:line="3887" pos:column="22">n<pos:position pos:line="3887" pos:column="23"/></name></name></expr>;<pos:position pos:line="3887" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="3888" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name pos:line="3889" pos:column="3">seekResult<pos:position pos:line="3889" pos:column="13"/></name> <operator pos:line="3889" pos:column="14">=<pos:position pos:line="3889" pos:column="15"/></operator> <operator pos:line="3889" pos:column="16">(<pos:position pos:line="3889" pos:column="17"/></operator><ternary><condition><expr><operator pos:line="3889" pos:column="17">(<pos:position pos:line="3889" pos:column="18"/></operator><name><name pos:line="3889" pos:column="18">pOp<pos:position pos:line="3889" pos:column="21"/></name><operator pos:line="3889" pos:column="21">-&gt;<pos:position pos:line="3889" pos:column="26"/></operator><name pos:line="3889" pos:column="23">p5<pos:position pos:line="3889" pos:column="25"/></name></name> <operator pos:line="3889" pos:column="26">&amp;<pos:position pos:line="3889" pos:column="31"/></operator> <name pos:line="3889" pos:column="28">OPFLAG_USESEEKRESULT<pos:position pos:line="3889" pos:column="48"/></name><operator pos:line="3889" pos:column="48">)<pos:position pos:line="3889" pos:column="49"/></operator></expr> ?<pos:position pos:line="3889" pos:column="51"/></condition><then pos:line="3889" pos:column="51"> <expr><name><name pos:line="3889" pos:column="52">pC<pos:position pos:line="3889" pos:column="54"/></name><operator pos:line="3889" pos:column="54">-&gt;<pos:position pos:line="3889" pos:column="59"/></operator><name pos:line="3889" pos:column="56">seekResult<pos:position pos:line="3889" pos:column="66"/></name></name></expr> <pos:position pos:line="3889" pos:column="67"/></then><else pos:line="3889" pos:column="67">: <expr><literal type="number" pos:line="3889" pos:column="69">0<pos:position pos:line="3889" pos:column="70"/></literal></expr></else></ternary><operator pos:line="3889" pos:column="70">)<pos:position pos:line="3889" pos:column="71"/></operator></expr>;<pos:position pos:line="3889" pos:column="72"/></expr_stmt>
  <if pos:line="3890" pos:column="3">if<condition pos:line="3890" pos:column="5">( <expr><name><name pos:line="3890" pos:column="7">pData<pos:position pos:line="3890" pos:column="12"/></name><operator pos:line="3890" pos:column="12">-&gt;<pos:position pos:line="3890" pos:column="17"/></operator><name pos:line="3890" pos:column="14">flags<pos:position pos:line="3890" pos:column="19"/></name></name> <operator pos:line="3890" pos:column="20">&amp;<pos:position pos:line="3890" pos:column="25"/></operator> <name pos:line="3890" pos:column="22">MEM_Zero<pos:position pos:line="3890" pos:column="30"/></name></expr> )<pos:position pos:line="3890" pos:column="32"/></condition><then><block pos:line="3890" pos:column="32">{
    <expr_stmt><expr><name><name pos:line="3891" pos:column="5">x<pos:position pos:line="3891" pos:column="6"/></name><operator pos:line="3891" pos:column="6">.<pos:position pos:line="3891" pos:column="7"/></operator><name pos:line="3891" pos:column="7">nZero<pos:position pos:line="3891" pos:column="12"/></name></name> <operator pos:line="3891" pos:column="13">=<pos:position pos:line="3891" pos:column="14"/></operator> <name><name pos:line="3891" pos:column="15">pData<pos:position pos:line="3891" pos:column="20"/></name><operator pos:line="3891" pos:column="20">-&gt;<pos:position pos:line="3891" pos:column="25"/></operator><name pos:line="3891" pos:column="22">u<pos:position pos:line="3891" pos:column="23"/></name><operator pos:line="3891" pos:column="23">.<pos:position pos:line="3891" pos:column="24"/></operator><name pos:line="3891" pos:column="24">nZero<pos:position pos:line="3891" pos:column="29"/></name></name></expr>;<pos:position pos:line="3891" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="3892" pos:column="4"/></block></then><else pos:line="3892" pos:column="4">else<block pos:line="3892" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="3893" pos:column="5">x<pos:position pos:line="3893" pos:column="6"/></name><operator pos:line="3893" pos:column="6">.<pos:position pos:line="3893" pos:column="7"/></operator><name pos:line="3893" pos:column="7">nZero<pos:position pos:line="3893" pos:column="12"/></name></name> <operator pos:line="3893" pos:column="13">=<pos:position pos:line="3893" pos:column="14"/></operator> <literal type="number" pos:line="3893" pos:column="15">0<pos:position pos:line="3893" pos:column="16"/></literal></expr>;<pos:position pos:line="3893" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="3894" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="3895" pos:column="3">x<pos:position pos:line="3895" pos:column="4"/></name><operator pos:line="3895" pos:column="4">.<pos:position pos:line="3895" pos:column="5"/></operator><name pos:line="3895" pos:column="5">pKey<pos:position pos:line="3895" pos:column="9"/></name></name> <operator pos:line="3895" pos:column="10">=<pos:position pos:line="3895" pos:column="11"/></operator> <literal type="number" pos:line="3895" pos:column="12">0<pos:position pos:line="3895" pos:column="13"/></literal></expr>;<pos:position pos:line="3895" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3896" pos:column="3">rc<pos:position pos:line="3896" pos:column="5"/></name> <operator pos:line="3896" pos:column="6">=<pos:position pos:line="3896" pos:column="7"/></operator> <call><name pos:line="3896" pos:column="8">sqlite3BtreeInsert<pos:position pos:line="3896" pos:column="26"/></name><argument_list pos:line="3896" pos:column="26">(<argument><expr><name><name pos:line="3896" pos:column="27">pC<pos:position pos:line="3896" pos:column="29"/></name><operator pos:line="3896" pos:column="29">-&gt;<pos:position pos:line="3896" pos:column="34"/></operator><name pos:line="3896" pos:column="31">uc<pos:position pos:line="3896" pos:column="33"/></name><operator pos:line="3896" pos:column="33">.<pos:position pos:line="3896" pos:column="34"/></operator><name pos:line="3896" pos:column="34">pCursor<pos:position pos:line="3896" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="3896" pos:column="43">&amp;<pos:position pos:line="3896" pos:column="48"/></operator><name pos:line="3896" pos:column="44">x<pos:position pos:line="3896" pos:column="45"/></name></expr></argument>,
      <argument><expr><operator pos:line="3897" pos:column="7">(<pos:position pos:line="3897" pos:column="8"/></operator><name><name pos:line="3897" pos:column="8">pOp<pos:position pos:line="3897" pos:column="11"/></name><operator pos:line="3897" pos:column="11">-&gt;<pos:position pos:line="3897" pos:column="16"/></operator><name pos:line="3897" pos:column="13">p5<pos:position pos:line="3897" pos:column="15"/></name></name> <operator pos:line="3897" pos:column="16">&amp;<pos:position pos:line="3897" pos:column="21"/></operator> <operator pos:line="3897" pos:column="18">(<pos:position pos:line="3897" pos:column="19"/></operator><name pos:line="3897" pos:column="19">OPFLAG_APPEND<pos:position pos:line="3897" pos:column="32"/></name><operator pos:line="3897" pos:column="32">|<pos:position pos:line="3897" pos:column="33"/></operator><name pos:line="3897" pos:column="33">OPFLAG_SAVEPOSITION<pos:position pos:line="3897" pos:column="52"/></name><operator pos:line="3897" pos:column="52">)<pos:position pos:line="3897" pos:column="53"/></operator><operator pos:line="3897" pos:column="53">)<pos:position pos:line="3897" pos:column="54"/></operator></expr></argument>, <argument><expr><name pos:line="3897" pos:column="56">seekResult<pos:position pos:line="3897" pos:column="66"/></name></expr></argument>
  )<pos:position pos:line="3898" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="3898" pos:column="5"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3899" pos:column="3">pC<pos:position pos:line="3899" pos:column="5"/></name><operator pos:line="3899" pos:column="5">-&gt;<pos:position pos:line="3899" pos:column="10"/></operator><name pos:line="3899" pos:column="7">deferredMoveto<pos:position pos:line="3899" pos:column="21"/></name></name> <operator pos:line="3899" pos:column="22">=<pos:position pos:line="3899" pos:column="23"/></operator> <literal type="number" pos:line="3899" pos:column="24">0<pos:position pos:line="3899" pos:column="25"/></literal></expr>;<pos:position pos:line="3899" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3900" pos:column="3">pC<pos:position pos:line="3900" pos:column="5"/></name><operator pos:line="3900" pos:column="5">-&gt;<pos:position pos:line="3900" pos:column="10"/></operator><name pos:line="3900" pos:column="7">cacheStatus<pos:position pos:line="3900" pos:column="18"/></name></name> <operator pos:line="3900" pos:column="19">=<pos:position pos:line="3900" pos:column="20"/></operator> <name pos:line="3900" pos:column="21">CACHE_STALE<pos:position pos:line="3900" pos:column="32"/></name></expr>;<pos:position pos:line="3900" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="3902" pos:column="3">/* Invoke the update-hook if required. */</comment>
  <if pos:line="3903" pos:column="3">if<condition pos:line="3903" pos:column="5">( <expr><name pos:line="3903" pos:column="7">rc<pos:position pos:line="3903" pos:column="9"/></name></expr> )<pos:position pos:line="3903" pos:column="11"/></condition><then pos:line="3903" pos:column="11"> <block type="pseudo"><goto pos:line="3903" pos:column="12">goto <name pos:line="3903" pos:column="17">abort_due_to_error<pos:position pos:line="3903" pos:column="35"/></name>;<pos:position pos:line="3903" pos:column="36"/></goto></block></then></if>
  <if pos:line="3904" pos:column="3">if<condition pos:line="3904" pos:column="5">( <expr><name><name pos:line="3904" pos:column="7">db<pos:position pos:line="3904" pos:column="9"/></name><operator pos:line="3904" pos:column="9">-&gt;<pos:position pos:line="3904" pos:column="14"/></operator><name pos:line="3904" pos:column="11">xUpdateCallback<pos:position pos:line="3904" pos:column="26"/></name></name> <operator pos:line="3904" pos:column="27">&amp;&amp;<pos:position pos:line="3904" pos:column="37"/></operator> <name pos:line="3904" pos:column="30">op<pos:position pos:line="3904" pos:column="32"/></name></expr> )<pos:position pos:line="3904" pos:column="34"/></condition><then><block pos:line="3904" pos:column="34">{
    <expr_stmt><expr><call><name><name pos:line="3905" pos:column="5">db<pos:position pos:line="3905" pos:column="7"/></name><operator pos:line="3905" pos:column="7">-&gt;<pos:position pos:line="3905" pos:column="12"/></operator><name pos:line="3905" pos:column="9">xUpdateCallback<pos:position pos:line="3905" pos:column="24"/></name></name><argument_list pos:line="3905" pos:column="24">(<argument><expr><name><name pos:line="3905" pos:column="25">db<pos:position pos:line="3905" pos:column="27"/></name><operator pos:line="3905" pos:column="27">-&gt;<pos:position pos:line="3905" pos:column="32"/></operator><name pos:line="3905" pos:column="29">pUpdateArg<pos:position pos:line="3905" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="3905" pos:column="41">op<pos:position pos:line="3905" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="3905" pos:column="45">zDb<pos:position pos:line="3905" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="3905" pos:column="50">pTab<pos:position pos:line="3905" pos:column="54"/></name><operator pos:line="3905" pos:column="54">-&gt;<pos:position pos:line="3905" pos:column="59"/></operator><name pos:line="3905" pos:column="56">zName<pos:position pos:line="3905" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3905" pos:column="63">x<pos:position pos:line="3905" pos:column="64"/></name><operator pos:line="3905" pos:column="64">.<pos:position pos:line="3905" pos:column="65"/></operator><name pos:line="3905" pos:column="65">nKey<pos:position pos:line="3905" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="3905" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="3905" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="3906" pos:column="4"/></block></then></if>
  <break pos:line="3907" pos:column="3">break;<pos:position pos:line="3907" pos:column="9"/></break>
}<pos:position pos:line="3908" pos:column="2"/></block>

<comment type="block" pos:line="3910" pos:column="1">/* Opcode: Delete P1 P2 P3 P4 P5
**
** Delete the record at which the P1 cursor is currently pointing.
**
** If the OPFLAG_SAVEPOSITION bit of the P5 parameter is set, then
** the cursor will be left pointing at  either the next or the previous
** record in the table. If it is left pointing at the next record, then
** the next Next instruction will be a no-op. As a result, in this case
** it is ok to delete a record from within a Next loop. If 
** OPFLAG_SAVEPOSITION bit of P5 is clear, then the cursor will be
** left in an undefined state.
**
** If the OPFLAG_AUXDELETE bit is set on P5, that indicates that this
** delete one of several associated with deleting a table row and all its
** associated index entries.  Exactly one of those deletes is the "primary"
** delete.  The others are all on OPFLAG_FORDELETE cursors or else are
** marked with the AUXDELETE flag.
**
** If the OPFLAG_NCHANGE flag of P2 (NB: P2 not P5) is set, then the row
** change count is incremented (otherwise not).
**
** P1 must not be pseudo-table.  It has to be a real table with
** multiple rows.
**
** If P4 is not NULL then it points to a Table object. In this case either 
** the update or pre-update hook, or both, may be invoked. The P1 cursor must
** have been positioned using OP_NotFound prior to invoking this opcode in 
** this case. Specifically, if one is configured, the pre-update hook is 
** invoked if P4 is not NULL. The update-hook is invoked if one is configured, 
** P4 is not NULL, and the OPFLAG_NCHANGE flag is set in P2.
**
** If the OPFLAG_ISUPDATE flag is set in P2, then P3 contains the address
** of the memory cell that contains the value that the rowid of the row will
** be set to by the update.
*/</comment>
<case pos:line="3945" pos:column="1">case <expr><name pos:line="3945" pos:column="6">OP_Delete<pos:position pos:line="3945" pos:column="15"/></name></expr>:<pos:position pos:line="3945" pos:column="16"/></case> <block pos:line="3945" pos:column="17">{
  <decl_stmt><decl><type><name pos:line="3946" pos:column="3">VdbeCursor<pos:position pos:line="3946" pos:column="13"/></name> <modifier pos:line="3946" pos:column="14">*<pos:position pos:line="3946" pos:column="15"/></modifier></type><name pos:line="3946" pos:column="15">pC<pos:position pos:line="3946" pos:column="17"/></name></decl>;<pos:position pos:line="3946" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="3947" pos:column="3">const<pos:position pos:line="3947" pos:column="8"/></specifier> <name pos:line="3947" pos:column="9">char<pos:position pos:line="3947" pos:column="13"/></name> <modifier pos:line="3947" pos:column="14">*<pos:position pos:line="3947" pos:column="15"/></modifier></type><name pos:line="3947" pos:column="15">zDb<pos:position pos:line="3947" pos:column="18"/></name></decl>;<pos:position pos:line="3947" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3948" pos:column="3">Table<pos:position pos:line="3948" pos:column="8"/></name> <modifier pos:line="3948" pos:column="9">*<pos:position pos:line="3948" pos:column="10"/></modifier></type><name pos:line="3948" pos:column="10">pTab<pos:position pos:line="3948" pos:column="14"/></name></decl>;<pos:position pos:line="3948" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3949" pos:column="3">int<pos:position pos:line="3949" pos:column="6"/></name></type> <name pos:line="3949" pos:column="7">opflags<pos:position pos:line="3949" pos:column="14"/></name></decl>;<pos:position pos:line="3949" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3951" pos:column="3">opflags<pos:position pos:line="3951" pos:column="10"/></name> <operator pos:line="3951" pos:column="11">=<pos:position pos:line="3951" pos:column="12"/></operator> <name><name pos:line="3951" pos:column="13">pOp<pos:position pos:line="3951" pos:column="16"/></name><operator pos:line="3951" pos:column="16">-&gt;<pos:position pos:line="3951" pos:column="21"/></operator><name pos:line="3951" pos:column="18">p2<pos:position pos:line="3951" pos:column="20"/></name></name></expr>;<pos:position pos:line="3951" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3952" pos:column="3">assert<pos:position pos:line="3952" pos:column="9"/></name><argument_list pos:line="3952" pos:column="9">( <argument><expr><name><name pos:line="3952" pos:column="11">pOp<pos:position pos:line="3952" pos:column="14"/></name><operator pos:line="3952" pos:column="14">-&gt;<pos:position pos:line="3952" pos:column="19"/></operator><name pos:line="3952" pos:column="16">p1<pos:position pos:line="3952" pos:column="18"/></name></name><operator pos:line="3952" pos:column="18">&gt;=<pos:position pos:line="3952" pos:column="23"/></operator><literal type="number" pos:line="3952" pos:column="20">0<pos:position pos:line="3952" pos:column="21"/></literal> <operator pos:line="3952" pos:column="22">&amp;&amp;<pos:position pos:line="3952" pos:column="32"/></operator> <name><name pos:line="3952" pos:column="25">pOp<pos:position pos:line="3952" pos:column="28"/></name><operator pos:line="3952" pos:column="28">-&gt;<pos:position pos:line="3952" pos:column="33"/></operator><name pos:line="3952" pos:column="30">p1<pos:position pos:line="3952" pos:column="32"/></name></name><operator pos:line="3952" pos:column="32">&lt;<pos:position pos:line="3952" pos:column="36"/></operator><name><name pos:line="3952" pos:column="33">p<pos:position pos:line="3952" pos:column="34"/></name><operator pos:line="3952" pos:column="34">-&gt;<pos:position pos:line="3952" pos:column="39"/></operator><name pos:line="3952" pos:column="36">nCursor<pos:position pos:line="3952" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3952" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3952" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3953" pos:column="3">pC<pos:position pos:line="3953" pos:column="5"/></name> <operator pos:line="3953" pos:column="6">=<pos:position pos:line="3953" pos:column="7"/></operator> <name><name pos:line="3953" pos:column="8">p<pos:position pos:line="3953" pos:column="9"/></name><operator pos:line="3953" pos:column="9">-&gt;<pos:position pos:line="3953" pos:column="14"/></operator><name pos:line="3953" pos:column="11">apCsr<pos:position pos:line="3953" pos:column="16"/></name><index pos:line="3953" pos:column="16">[<expr><name><name pos:line="3953" pos:column="17">pOp<pos:position pos:line="3953" pos:column="20"/></name><operator pos:line="3953" pos:column="20">-&gt;<pos:position pos:line="3953" pos:column="25"/></operator><name pos:line="3953" pos:column="22">p1<pos:position pos:line="3953" pos:column="24"/></name></name></expr>]<pos:position pos:line="3953" pos:column="25"/></index></name></expr>;<pos:position pos:line="3953" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3954" pos:column="3">assert<pos:position pos:line="3954" pos:column="9"/></name><argument_list pos:line="3954" pos:column="9">( <argument><expr><name pos:line="3954" pos:column="11">pC<pos:position pos:line="3954" pos:column="13"/></name><operator pos:line="3954" pos:column="13">!=<pos:position pos:line="3954" pos:column="15"/></operator><literal type="number" pos:line="3954" pos:column="15">0<pos:position pos:line="3954" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3954" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3954" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3955" pos:column="3">assert<pos:position pos:line="3955" pos:column="9"/></name><argument_list pos:line="3955" pos:column="9">( <argument><expr><name><name pos:line="3955" pos:column="11">pC<pos:position pos:line="3955" pos:column="13"/></name><operator pos:line="3955" pos:column="13">-&gt;<pos:position pos:line="3955" pos:column="18"/></operator><name pos:line="3955" pos:column="15">eCurType<pos:position pos:line="3955" pos:column="23"/></name></name><operator pos:line="3955" pos:column="23">==<pos:position pos:line="3955" pos:column="25"/></operator><name pos:line="3955" pos:column="25">CURTYPE_BTREE<pos:position pos:line="3955" pos:column="38"/></name></expr></argument> )<pos:position pos:line="3955" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3955" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3956" pos:column="3">assert<pos:position pos:line="3956" pos:column="9"/></name><argument_list pos:line="3956" pos:column="9">( <argument><expr><name><name pos:line="3956" pos:column="11">pC<pos:position pos:line="3956" pos:column="13"/></name><operator pos:line="3956" pos:column="13">-&gt;<pos:position pos:line="3956" pos:column="18"/></operator><name pos:line="3956" pos:column="15">uc<pos:position pos:line="3956" pos:column="17"/></name><operator pos:line="3956" pos:column="17">.<pos:position pos:line="3956" pos:column="18"/></operator><name pos:line="3956" pos:column="18">pCursor<pos:position pos:line="3956" pos:column="25"/></name></name><operator pos:line="3956" pos:column="25">!=<pos:position pos:line="3956" pos:column="27"/></operator><literal type="number" pos:line="3956" pos:column="27">0<pos:position pos:line="3956" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="3956" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3956" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3957" pos:column="3">assert<pos:position pos:line="3957" pos:column="9"/></name><argument_list pos:line="3957" pos:column="9">( <argument><expr><name><name pos:line="3957" pos:column="11">pC<pos:position pos:line="3957" pos:column="13"/></name><operator pos:line="3957" pos:column="13">-&gt;<pos:position pos:line="3957" pos:column="18"/></operator><name pos:line="3957" pos:column="15">deferredMoveto<pos:position pos:line="3957" pos:column="29"/></name></name><operator pos:line="3957" pos:column="29">==<pos:position pos:line="3957" pos:column="31"/></operator><literal type="number" pos:line="3957" pos:column="31">0<pos:position pos:line="3957" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="3957" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3957" pos:column="35"/></expr_stmt>

<cpp:ifdef pos:line="3959" pos:column="1">#<cpp:directive pos:line="3959" pos:column="2">ifdef<pos:position pos:line="3959" pos:column="7"/></cpp:directive> <name pos:line="3959" pos:column="8">SQLITE_DEBUG<pos:position pos:line="3959" pos:column="20"/></name></cpp:ifdef>
  <if pos:line="3960" pos:column="3">if<condition pos:line="3960" pos:column="5">( <expr><name><name pos:line="3960" pos:column="7">pOp<pos:position pos:line="3960" pos:column="10"/></name><operator pos:line="3960" pos:column="10">-&gt;<pos:position pos:line="3960" pos:column="15"/></operator><name pos:line="3960" pos:column="12">p4type<pos:position pos:line="3960" pos:column="18"/></name></name><operator pos:line="3960" pos:column="18">==<pos:position pos:line="3960" pos:column="20"/></operator><name pos:line="3960" pos:column="20">P4_TABLE<pos:position pos:line="3960" pos:column="28"/></name> <operator pos:line="3960" pos:column="29">&amp;&amp;<pos:position pos:line="3960" pos:column="39"/></operator> <call><name pos:line="3960" pos:column="32">HasRowid<pos:position pos:line="3960" pos:column="40"/></name><argument_list pos:line="3960" pos:column="40">(<argument><expr><name><name pos:line="3960" pos:column="41">pOp<pos:position pos:line="3960" pos:column="44"/></name><operator pos:line="3960" pos:column="44">-&gt;<pos:position pos:line="3960" pos:column="49"/></operator><name pos:line="3960" pos:column="46">p4<pos:position pos:line="3960" pos:column="48"/></name><operator pos:line="3960" pos:column="48">.<pos:position pos:line="3960" pos:column="49"/></operator><name pos:line="3960" pos:column="49">pTab<pos:position pos:line="3960" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="3960" pos:column="54"/></argument_list></call> <operator pos:line="3960" pos:column="55">&amp;&amp;<pos:position pos:line="3960" pos:column="65"/></operator> <name><name pos:line="3960" pos:column="58">pOp<pos:position pos:line="3960" pos:column="61"/></name><operator pos:line="3960" pos:column="61">-&gt;<pos:position pos:line="3960" pos:column="66"/></operator><name pos:line="3960" pos:column="63">p5<pos:position pos:line="3960" pos:column="65"/></name></name><operator pos:line="3960" pos:column="65">==<pos:position pos:line="3960" pos:column="67"/></operator><literal type="number" pos:line="3960" pos:column="67">0<pos:position pos:line="3960" pos:column="68"/></literal></expr> )<pos:position pos:line="3960" pos:column="70"/></condition><then><block pos:line="3960" pos:column="70">{
    <comment type="block" pos:line="3961" pos:column="5">/* If p5 is zero, the seek operation that positioned the cursor prior to
    ** OP_Delete will have also set the pC-&gt;movetoTarget field to the rowid of
    ** the row that is being deleted */</comment>
    <decl_stmt><decl><type><name pos:line="3964" pos:column="5">i64<pos:position pos:line="3964" pos:column="8"/></name></type> <name pos:line="3964" pos:column="9">iKey<pos:position pos:line="3964" pos:column="13"/></name> <init pos:line="3964" pos:column="14">= <expr><call><name pos:line="3964" pos:column="16">sqlite3BtreeIntegerKey<pos:position pos:line="3964" pos:column="38"/></name><argument_list pos:line="3964" pos:column="38">(<argument><expr><name><name pos:line="3964" pos:column="39">pC<pos:position pos:line="3964" pos:column="41"/></name><operator pos:line="3964" pos:column="41">-&gt;<pos:position pos:line="3964" pos:column="46"/></operator><name pos:line="3964" pos:column="43">uc<pos:position pos:line="3964" pos:column="45"/></name><operator pos:line="3964" pos:column="45">.<pos:position pos:line="3964" pos:column="46"/></operator><name pos:line="3964" pos:column="46">pCursor<pos:position pos:line="3964" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="3964" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3964" pos:column="55"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="3965" pos:column="5">assert<pos:position pos:line="3965" pos:column="11"/></name><argument_list pos:line="3965" pos:column="11">( <argument><expr><name><name pos:line="3965" pos:column="13">pC<pos:position pos:line="3965" pos:column="15"/></name><operator pos:line="3965" pos:column="15">-&gt;<pos:position pos:line="3965" pos:column="20"/></operator><name pos:line="3965" pos:column="17">movetoTarget<pos:position pos:line="3965" pos:column="29"/></name></name><operator pos:line="3965" pos:column="29">==<pos:position pos:line="3965" pos:column="31"/></operator><name pos:line="3965" pos:column="31">iKey<pos:position pos:line="3965" pos:column="35"/></name></expr></argument> )<pos:position pos:line="3965" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3965" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="3966" pos:column="4"/></block></then></if>
<cpp:endif pos:line="3967" pos:column="1">#<cpp:directive pos:line="3967" pos:column="2">endif<pos:position pos:line="3967" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="3969" pos:column="3">/* If the update-hook or pre-update-hook will be invoked, set zDb to
  ** the name of the db to pass as to it. Also set local pTab to a copy
  ** of p4.pTab. Finally, if p5 is true, indicating that this cursor was
  ** last moved with OP_Next or OP_Prev, not Seek or NotFound, set 
  ** VdbeCursor.movetoTarget to the current rowid.  */</comment>
  <if pos:line="3974" pos:column="3">if<condition pos:line="3974" pos:column="5">( <expr><name><name pos:line="3974" pos:column="7">pOp<pos:position pos:line="3974" pos:column="10"/></name><operator pos:line="3974" pos:column="10">-&gt;<pos:position pos:line="3974" pos:column="15"/></operator><name pos:line="3974" pos:column="12">p4type<pos:position pos:line="3974" pos:column="18"/></name></name><operator pos:line="3974" pos:column="18">==<pos:position pos:line="3974" pos:column="20"/></operator><name pos:line="3974" pos:column="20">P4_TABLE<pos:position pos:line="3974" pos:column="28"/></name> <operator pos:line="3974" pos:column="29">&amp;&amp;<pos:position pos:line="3974" pos:column="39"/></operator> <call><name pos:line="3974" pos:column="32">HAS_UPDATE_HOOK<pos:position pos:line="3974" pos:column="47"/></name><argument_list pos:line="3974" pos:column="47">(<argument><expr><name pos:line="3974" pos:column="48">db<pos:position pos:line="3974" pos:column="50"/></name></expr></argument>)<pos:position pos:line="3974" pos:column="51"/></argument_list></call></expr> )<pos:position pos:line="3974" pos:column="53"/></condition><then><block pos:line="3974" pos:column="53">{
    <expr_stmt><expr><call><name pos:line="3975" pos:column="5">assert<pos:position pos:line="3975" pos:column="11"/></name><argument_list pos:line="3975" pos:column="11">( <argument><expr><name><name pos:line="3975" pos:column="13">pC<pos:position pos:line="3975" pos:column="15"/></name><operator pos:line="3975" pos:column="15">-&gt;<pos:position pos:line="3975" pos:column="20"/></operator><name pos:line="3975" pos:column="17">iDb<pos:position pos:line="3975" pos:column="20"/></name></name><operator pos:line="3975" pos:column="20">&gt;=<pos:position pos:line="3975" pos:column="25"/></operator><literal type="number" pos:line="3975" pos:column="22">0<pos:position pos:line="3975" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="3975" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3975" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3976" pos:column="5">assert<pos:position pos:line="3976" pos:column="11"/></name><argument_list pos:line="3976" pos:column="11">( <argument><expr><name><name pos:line="3976" pos:column="13">pOp<pos:position pos:line="3976" pos:column="16"/></name><operator pos:line="3976" pos:column="16">-&gt;<pos:position pos:line="3976" pos:column="21"/></operator><name pos:line="3976" pos:column="18">p4<pos:position pos:line="3976" pos:column="20"/></name><operator pos:line="3976" pos:column="20">.<pos:position pos:line="3976" pos:column="21"/></operator><name pos:line="3976" pos:column="21">pTab<pos:position pos:line="3976" pos:column="25"/></name></name><operator pos:line="3976" pos:column="25">!=<pos:position pos:line="3976" pos:column="27"/></operator><literal type="number" pos:line="3976" pos:column="27">0<pos:position pos:line="3976" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="3976" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3976" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3977" pos:column="5">zDb<pos:position pos:line="3977" pos:column="8"/></name> <operator pos:line="3977" pos:column="9">=<pos:position pos:line="3977" pos:column="10"/></operator> <name><name pos:line="3977" pos:column="11">db<pos:position pos:line="3977" pos:column="13"/></name><operator pos:line="3977" pos:column="13">-&gt;<pos:position pos:line="3977" pos:column="18"/></operator><name pos:line="3977" pos:column="15">aDb<pos:position pos:line="3977" pos:column="18"/></name><index pos:line="3977" pos:column="18">[<expr><name><name pos:line="3977" pos:column="19">pC<pos:position pos:line="3977" pos:column="21"/></name><operator pos:line="3977" pos:column="21">-&gt;<pos:position pos:line="3977" pos:column="26"/></operator><name pos:line="3977" pos:column="23">iDb<pos:position pos:line="3977" pos:column="26"/></name></name></expr>]<pos:position pos:line="3977" pos:column="27"/></index></name><operator pos:line="3977" pos:column="27">.<pos:position pos:line="3977" pos:column="28"/></operator><name pos:line="3977" pos:column="28">zDbSName<pos:position pos:line="3977" pos:column="36"/></name></expr>;<pos:position pos:line="3977" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3978" pos:column="5">pTab<pos:position pos:line="3978" pos:column="9"/></name> <operator pos:line="3978" pos:column="10">=<pos:position pos:line="3978" pos:column="11"/></operator> <name><name pos:line="3978" pos:column="12">pOp<pos:position pos:line="3978" pos:column="15"/></name><operator pos:line="3978" pos:column="15">-&gt;<pos:position pos:line="3978" pos:column="20"/></operator><name pos:line="3978" pos:column="17">p4<pos:position pos:line="3978" pos:column="19"/></name><operator pos:line="3978" pos:column="19">.<pos:position pos:line="3978" pos:column="20"/></operator><name pos:line="3978" pos:column="20">pTab<pos:position pos:line="3978" pos:column="24"/></name></name></expr>;<pos:position pos:line="3978" pos:column="25"/></expr_stmt>
    <if pos:line="3979" pos:column="5">if<condition pos:line="3979" pos:column="7">( <expr><operator pos:line="3979" pos:column="9">(<pos:position pos:line="3979" pos:column="10"/></operator><name><name pos:line="3979" pos:column="10">pOp<pos:position pos:line="3979" pos:column="13"/></name><operator pos:line="3979" pos:column="13">-&gt;<pos:position pos:line="3979" pos:column="18"/></operator><name pos:line="3979" pos:column="15">p5<pos:position pos:line="3979" pos:column="17"/></name></name> <operator pos:line="3979" pos:column="18">&amp;<pos:position pos:line="3979" pos:column="23"/></operator> <name pos:line="3979" pos:column="20">OPFLAG_SAVEPOSITION<pos:position pos:line="3979" pos:column="39"/></name><operator pos:line="3979" pos:column="39">)<pos:position pos:line="3979" pos:column="40"/></operator><operator pos:line="3979" pos:column="40">!=<pos:position pos:line="3979" pos:column="42"/></operator><literal type="number" pos:line="3979" pos:column="42">0<pos:position pos:line="3979" pos:column="43"/></literal> <operator pos:line="3979" pos:column="44">&amp;&amp;<pos:position pos:line="3979" pos:column="54"/></operator> <name><name pos:line="3979" pos:column="47">pC<pos:position pos:line="3979" pos:column="49"/></name><operator pos:line="3979" pos:column="49">-&gt;<pos:position pos:line="3979" pos:column="54"/></operator><name pos:line="3979" pos:column="51">isTable<pos:position pos:line="3979" pos:column="58"/></name></name></expr> )<pos:position pos:line="3979" pos:column="60"/></condition><then><block pos:line="3979" pos:column="60">{
      <expr_stmt><expr><name><name pos:line="3980" pos:column="7">pC<pos:position pos:line="3980" pos:column="9"/></name><operator pos:line="3980" pos:column="9">-&gt;<pos:position pos:line="3980" pos:column="14"/></operator><name pos:line="3980" pos:column="11">movetoTarget<pos:position pos:line="3980" pos:column="23"/></name></name> <operator pos:line="3980" pos:column="24">=<pos:position pos:line="3980" pos:column="25"/></operator> <call><name pos:line="3980" pos:column="26">sqlite3BtreeIntegerKey<pos:position pos:line="3980" pos:column="48"/></name><argument_list pos:line="3980" pos:column="48">(<argument><expr><name><name pos:line="3980" pos:column="49">pC<pos:position pos:line="3980" pos:column="51"/></name><operator pos:line="3980" pos:column="51">-&gt;<pos:position pos:line="3980" pos:column="56"/></operator><name pos:line="3980" pos:column="53">uc<pos:position pos:line="3980" pos:column="55"/></name><operator pos:line="3980" pos:column="55">.<pos:position pos:line="3980" pos:column="56"/></operator><name pos:line="3980" pos:column="56">pCursor<pos:position pos:line="3980" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="3980" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="3980" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="3981" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3982" pos:column="4"/></block></then><else pos:line="3982" pos:column="4">else<block pos:line="3982" pos:column="8">{
    <expr_stmt><expr><name pos:line="3983" pos:column="5">zDb<pos:position pos:line="3983" pos:column="8"/></name> <operator pos:line="3983" pos:column="9">=<pos:position pos:line="3983" pos:column="10"/></operator> <literal type="number" pos:line="3983" pos:column="11">0<pos:position pos:line="3983" pos:column="12"/></literal></expr>;<pos:position pos:line="3983" pos:column="13"/></expr_stmt>   <comment type="block" pos:line="3983" pos:column="16">/* Not needed.  Silence a compiler warning. */</comment>
    <expr_stmt><expr><name pos:line="3984" pos:column="5">pTab<pos:position pos:line="3984" pos:column="9"/></name> <operator pos:line="3984" pos:column="10">=<pos:position pos:line="3984" pos:column="11"/></operator> <literal type="number" pos:line="3984" pos:column="12">0<pos:position pos:line="3984" pos:column="13"/></literal></expr>;<pos:position pos:line="3984" pos:column="14"/></expr_stmt>  <comment type="block" pos:line="3984" pos:column="16">/* Not needed.  Silence a compiler warning. */</comment>
  }<pos:position pos:line="3985" pos:column="4"/></block></else></if>

<cpp:ifdef pos:line="3987" pos:column="1">#<cpp:directive pos:line="3987" pos:column="2">ifdef<pos:position pos:line="3987" pos:column="7"/></cpp:directive> <name pos:line="3987" pos:column="8">SQLITE_ENABLE_PREUPDATE_HOOK<pos:position pos:line="3987" pos:column="36"/></name></cpp:ifdef>
  <comment type="block" pos:line="3988" pos:column="3">/* Invoke the pre-update-hook if required. */</comment>
  <if pos:line="3989" pos:column="3">if<condition pos:line="3989" pos:column="5">( <expr><name><name pos:line="3989" pos:column="7">db<pos:position pos:line="3989" pos:column="9"/></name><operator pos:line="3989" pos:column="9">-&gt;<pos:position pos:line="3989" pos:column="14"/></operator><name pos:line="3989" pos:column="11">xPreUpdateCallback<pos:position pos:line="3989" pos:column="29"/></name></name> <operator pos:line="3989" pos:column="30">&amp;&amp;<pos:position pos:line="3989" pos:column="40"/></operator> <name><name pos:line="3989" pos:column="33">pOp<pos:position pos:line="3989" pos:column="36"/></name><operator pos:line="3989" pos:column="36">-&gt;<pos:position pos:line="3989" pos:column="41"/></operator><name pos:line="3989" pos:column="38">p4<pos:position pos:line="3989" pos:column="40"/></name><operator pos:line="3989" pos:column="40">.<pos:position pos:line="3989" pos:column="41"/></operator><name pos:line="3989" pos:column="41">pTab<pos:position pos:line="3989" pos:column="45"/></name></name></expr> )<pos:position pos:line="3989" pos:column="47"/></condition><then><block pos:line="3989" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="3990" pos:column="5">assert<pos:position pos:line="3990" pos:column="11"/></name><argument_list pos:line="3990" pos:column="11">( <argument><expr><operator pos:line="3990" pos:column="13">!<pos:position pos:line="3990" pos:column="14"/></operator><operator pos:line="3990" pos:column="14">(<pos:position pos:line="3990" pos:column="15"/></operator><name pos:line="3990" pos:column="15">opflags<pos:position pos:line="3990" pos:column="22"/></name> <operator pos:line="3990" pos:column="23">&amp;<pos:position pos:line="3990" pos:column="28"/></operator> <name pos:line="3990" pos:column="25">OPFLAG_ISUPDATE<pos:position pos:line="3990" pos:column="40"/></name><operator pos:line="3990" pos:column="40">)<pos:position pos:line="3990" pos:column="41"/></operator> 
         <operator pos:line="3991" pos:column="10">||<pos:position pos:line="3991" pos:column="12"/></operator> <call><name pos:line="3991" pos:column="13">HasRowid<pos:position pos:line="3991" pos:column="21"/></name><argument_list pos:line="3991" pos:column="21">(<argument><expr><name pos:line="3991" pos:column="22">pTab<pos:position pos:line="3991" pos:column="26"/></name></expr></argument>)<pos:position pos:line="3991" pos:column="27"/></argument_list></call><operator pos:line="3991" pos:column="27">==<pos:position pos:line="3991" pos:column="29"/></operator><literal type="number" pos:line="3991" pos:column="29">0<pos:position pos:line="3991" pos:column="30"/></literal> 
         <operator pos:line="3992" pos:column="10">||<pos:position pos:line="3992" pos:column="12"/></operator> <operator pos:line="3992" pos:column="13">(<pos:position pos:line="3992" pos:column="14"/></operator><name><name pos:line="3992" pos:column="14">aMem<pos:position pos:line="3992" pos:column="18"/></name><index pos:line="3992" pos:column="18">[<expr><name><name pos:line="3992" pos:column="19">pOp<pos:position pos:line="3992" pos:column="22"/></name><operator pos:line="3992" pos:column="22">-&gt;<pos:position pos:line="3992" pos:column="27"/></operator><name pos:line="3992" pos:column="24">p3<pos:position pos:line="3992" pos:column="26"/></name></name></expr>]<pos:position pos:line="3992" pos:column="27"/></index></name><operator pos:line="3992" pos:column="27">.<pos:position pos:line="3992" pos:column="28"/></operator><name pos:line="3992" pos:column="28">flags<pos:position pos:line="3992" pos:column="33"/></name> <operator pos:line="3992" pos:column="34">&amp;<pos:position pos:line="3992" pos:column="39"/></operator> <name pos:line="3992" pos:column="36">MEM_Int<pos:position pos:line="3992" pos:column="43"/></name><operator pos:line="3992" pos:column="43">)<pos:position pos:line="3992" pos:column="44"/></operator></expr></argument> 
    )<pos:position pos:line="3993" pos:column="6"/></argument_list></call></expr>;<pos:position pos:line="3993" pos:column="7"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3994" pos:column="5">sqlite3VdbePreUpdateHook<pos:position pos:line="3994" pos:column="29"/></name><argument_list pos:line="3994" pos:column="29">(<argument><expr><name pos:line="3994" pos:column="30">p<pos:position pos:line="3994" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="3994" pos:column="33">pC<pos:position pos:line="3994" pos:column="35"/></name></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="3995" pos:column="9">(<pos:position pos:line="3995" pos:column="10"/></operator><name pos:line="3995" pos:column="10">opflags<pos:position pos:line="3995" pos:column="17"/></name> <operator pos:line="3995" pos:column="18">&amp;<pos:position pos:line="3995" pos:column="23"/></operator> <name pos:line="3995" pos:column="20">OPFLAG_ISUPDATE<pos:position pos:line="3995" pos:column="35"/></name><operator pos:line="3995" pos:column="35">)<pos:position pos:line="3995" pos:column="36"/></operator></expr> ?<pos:position pos:line="3995" pos:column="38"/></condition><then pos:line="3995" pos:column="38"> <expr><name pos:line="3995" pos:column="39">SQLITE_UPDATE<pos:position pos:line="3995" pos:column="52"/></name></expr> <pos:position pos:line="3995" pos:column="53"/></then><else pos:line="3995" pos:column="53">: <expr><name pos:line="3995" pos:column="55">SQLITE_DELETE<pos:position pos:line="3995" pos:column="68"/></name></expr></else></ternary></expr></argument>, 
        <argument><expr><name pos:line="3996" pos:column="9">zDb<pos:position pos:line="3996" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="3996" pos:column="14">pTab<pos:position pos:line="3996" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="3996" pos:column="20">pC<pos:position pos:line="3996" pos:column="22"/></name><operator pos:line="3996" pos:column="22">-&gt;<pos:position pos:line="3996" pos:column="27"/></operator><name pos:line="3996" pos:column="24">movetoTarget<pos:position pos:line="3996" pos:column="36"/></name></name></expr></argument>,
        <argument><expr><name><name pos:line="3997" pos:column="9">pOp<pos:position pos:line="3997" pos:column="12"/></name><operator pos:line="3997" pos:column="12">-&gt;<pos:position pos:line="3997" pos:column="17"/></operator><name pos:line="3997" pos:column="14">p3<pos:position pos:line="3997" pos:column="16"/></name></name></expr></argument>
    )<pos:position pos:line="3998" pos:column="6"/></argument_list></call></expr>;<pos:position pos:line="3998" pos:column="7"/></expr_stmt>
  }<pos:position pos:line="3999" pos:column="4"/></block></then></if>
  <if pos:line="4000" pos:column="3">if<condition pos:line="4000" pos:column="5">( <expr><name pos:line="4000" pos:column="7">opflags<pos:position pos:line="4000" pos:column="14"/></name> <operator pos:line="4000" pos:column="15">&amp;<pos:position pos:line="4000" pos:column="20"/></operator> <name pos:line="4000" pos:column="17">OPFLAG_ISNOOP<pos:position pos:line="4000" pos:column="30"/></name></expr> )<pos:position pos:line="4000" pos:column="32"/></condition><then pos:line="4000" pos:column="32"> <block type="pseudo"><break pos:line="4000" pos:column="33">break;<pos:position pos:line="4000" pos:column="39"/></break></block></then></if>
<cpp:endif pos:line="4001" pos:column="1">#<cpp:directive pos:line="4001" pos:column="2">endif<pos:position pos:line="4001" pos:column="7"/></cpp:directive></cpp:endif>
 
  <comment type="block" pos:line="4003" pos:column="3">/* Only flags that can be set are SAVEPOISTION and AUXDELETE */</comment> 
  <expr_stmt><expr><call><name pos:line="4004" pos:column="3">assert<pos:position pos:line="4004" pos:column="9"/></name><argument_list pos:line="4004" pos:column="9">( <argument><expr><operator pos:line="4004" pos:column="11">(<pos:position pos:line="4004" pos:column="12"/></operator><name><name pos:line="4004" pos:column="12">pOp<pos:position pos:line="4004" pos:column="15"/></name><operator pos:line="4004" pos:column="15">-&gt;<pos:position pos:line="4004" pos:column="20"/></operator><name pos:line="4004" pos:column="17">p5<pos:position pos:line="4004" pos:column="19"/></name></name> <operator pos:line="4004" pos:column="20">&amp;<pos:position pos:line="4004" pos:column="25"/></operator> <operator pos:line="4004" pos:column="22">~<pos:position pos:line="4004" pos:column="23"/></operator><operator pos:line="4004" pos:column="23">(<pos:position pos:line="4004" pos:column="24"/></operator><name pos:line="4004" pos:column="24">OPFLAG_SAVEPOSITION<pos:position pos:line="4004" pos:column="43"/></name><operator pos:line="4004" pos:column="43">|<pos:position pos:line="4004" pos:column="44"/></operator><name pos:line="4004" pos:column="44">OPFLAG_AUXDELETE<pos:position pos:line="4004" pos:column="60"/></name><operator pos:line="4004" pos:column="60">)<pos:position pos:line="4004" pos:column="61"/></operator><operator pos:line="4004" pos:column="61">)<pos:position pos:line="4004" pos:column="62"/></operator><operator pos:line="4004" pos:column="62">==<pos:position pos:line="4004" pos:column="64"/></operator><literal type="number" pos:line="4004" pos:column="64">0<pos:position pos:line="4004" pos:column="65"/></literal></expr></argument> )<pos:position pos:line="4004" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="4004" pos:column="68"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4005" pos:column="3">assert<pos:position pos:line="4005" pos:column="9"/></name><argument_list pos:line="4005" pos:column="9">( <argument><expr><name pos:line="4005" pos:column="11">OPFLAG_SAVEPOSITION<pos:position pos:line="4005" pos:column="30"/></name><operator pos:line="4005" pos:column="30">==<pos:position pos:line="4005" pos:column="32"/></operator><name pos:line="4005" pos:column="32">BTREE_SAVEPOSITION<pos:position pos:line="4005" pos:column="50"/></name></expr></argument> )<pos:position pos:line="4005" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4005" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4006" pos:column="3">assert<pos:position pos:line="4006" pos:column="9"/></name><argument_list pos:line="4006" pos:column="9">( <argument><expr><name pos:line="4006" pos:column="11">OPFLAG_AUXDELETE<pos:position pos:line="4006" pos:column="27"/></name><operator pos:line="4006" pos:column="27">==<pos:position pos:line="4006" pos:column="29"/></operator><name pos:line="4006" pos:column="29">BTREE_AUXDELETE<pos:position pos:line="4006" pos:column="44"/></name></expr></argument> )<pos:position pos:line="4006" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4006" pos:column="47"/></expr_stmt>

<cpp:ifdef pos:line="4008" pos:column="1">#<cpp:directive pos:line="4008" pos:column="2">ifdef<pos:position pos:line="4008" pos:column="7"/></cpp:directive> <name pos:line="4008" pos:column="8">SQLITE_DEBUG<pos:position pos:line="4008" pos:column="20"/></name></cpp:ifdef>
  <if pos:line="4009" pos:column="3">if<condition pos:line="4009" pos:column="5">( <expr><name><name pos:line="4009" pos:column="7">p<pos:position pos:line="4009" pos:column="8"/></name><operator pos:line="4009" pos:column="8">-&gt;<pos:position pos:line="4009" pos:column="13"/></operator><name pos:line="4009" pos:column="10">pFrame<pos:position pos:line="4009" pos:column="16"/></name></name><operator pos:line="4009" pos:column="16">==<pos:position pos:line="4009" pos:column="18"/></operator><literal type="number" pos:line="4009" pos:column="18">0<pos:position pos:line="4009" pos:column="19"/></literal></expr> )<pos:position pos:line="4009" pos:column="21"/></condition><then><block pos:line="4009" pos:column="21">{
    <if pos:line="4010" pos:column="5">if<condition pos:line="4010" pos:column="7">( <expr><name><name pos:line="4010" pos:column="9">pC<pos:position pos:line="4010" pos:column="11"/></name><operator pos:line="4010" pos:column="11">-&gt;<pos:position pos:line="4010" pos:column="16"/></operator><name pos:line="4010" pos:column="13">isEphemeral<pos:position pos:line="4010" pos:column="24"/></name></name><operator pos:line="4010" pos:column="24">==<pos:position pos:line="4010" pos:column="26"/></operator><literal type="number" pos:line="4010" pos:column="26">0<pos:position pos:line="4010" pos:column="27"/></literal>
        <operator pos:line="4011" pos:column="9">&amp;&amp;<pos:position pos:line="4011" pos:column="19"/></operator> <operator pos:line="4011" pos:column="12">(<pos:position pos:line="4011" pos:column="13"/></operator><name><name pos:line="4011" pos:column="13">pOp<pos:position pos:line="4011" pos:column="16"/></name><operator pos:line="4011" pos:column="16">-&gt;<pos:position pos:line="4011" pos:column="21"/></operator><name pos:line="4011" pos:column="18">p5<pos:position pos:line="4011" pos:column="20"/></name></name> <operator pos:line="4011" pos:column="21">&amp;<pos:position pos:line="4011" pos:column="26"/></operator> <name pos:line="4011" pos:column="23">OPFLAG_AUXDELETE<pos:position pos:line="4011" pos:column="39"/></name><operator pos:line="4011" pos:column="39">)<pos:position pos:line="4011" pos:column="40"/></operator><operator pos:line="4011" pos:column="40">==<pos:position pos:line="4011" pos:column="42"/></operator><literal type="number" pos:line="4011" pos:column="42">0<pos:position pos:line="4011" pos:column="43"/></literal>
        <operator pos:line="4012" pos:column="9">&amp;&amp;<pos:position pos:line="4012" pos:column="19"/></operator> <operator pos:line="4012" pos:column="12">(<pos:position pos:line="4012" pos:column="13"/></operator><name><name pos:line="4012" pos:column="13">pC<pos:position pos:line="4012" pos:column="15"/></name><operator pos:line="4012" pos:column="15">-&gt;<pos:position pos:line="4012" pos:column="20"/></operator><name pos:line="4012" pos:column="17">wrFlag<pos:position pos:line="4012" pos:column="23"/></name></name> <operator pos:line="4012" pos:column="24">&amp;<pos:position pos:line="4012" pos:column="29"/></operator> <name pos:line="4012" pos:column="26">OPFLAG_FORDELETE<pos:position pos:line="4012" pos:column="42"/></name><operator pos:line="4012" pos:column="42">)<pos:position pos:line="4012" pos:column="43"/></operator><operator pos:line="4012" pos:column="43">==<pos:position pos:line="4012" pos:column="45"/></operator><literal type="number" pos:line="4012" pos:column="45">0<pos:position pos:line="4012" pos:column="46"/></literal></expr>
      )<pos:position pos:line="4013" pos:column="8"/></condition><then><block pos:line="4013" pos:column="8">{
      <expr_stmt><expr><name pos:line="4014" pos:column="7">nExtraDelete<pos:position pos:line="4014" pos:column="19"/></name><operator pos:line="4014" pos:column="19">++<pos:position pos:line="4014" pos:column="21"/></operator></expr>;<pos:position pos:line="4014" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="4015" pos:column="6"/></block></then></if>
    <if pos:line="4016" pos:column="5">if<condition pos:line="4016" pos:column="7">( <expr><name><name pos:line="4016" pos:column="9">pOp<pos:position pos:line="4016" pos:column="12"/></name><operator pos:line="4016" pos:column="12">-&gt;<pos:position pos:line="4016" pos:column="17"/></operator><name pos:line="4016" pos:column="14">p2<pos:position pos:line="4016" pos:column="16"/></name></name> <operator pos:line="4016" pos:column="17">&amp;<pos:position pos:line="4016" pos:column="22"/></operator> <name pos:line="4016" pos:column="19">OPFLAG_NCHANGE<pos:position pos:line="4016" pos:column="33"/></name></expr> )<pos:position pos:line="4016" pos:column="35"/></condition><then><block pos:line="4016" pos:column="35">{
      <expr_stmt><expr><name pos:line="4017" pos:column="7">nExtraDelete<pos:position pos:line="4017" pos:column="19"/></name><operator pos:line="4017" pos:column="19">--<pos:position pos:line="4017" pos:column="21"/></operator></expr>;<pos:position pos:line="4017" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="4018" pos:column="6"/></block></then></if>
  }<pos:position pos:line="4019" pos:column="4"/></block></then></if>
<cpp:endif pos:line="4020" pos:column="1">#<cpp:directive pos:line="4020" pos:column="2">endif<pos:position pos:line="4020" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="4022" pos:column="3">rc<pos:position pos:line="4022" pos:column="5"/></name> <operator pos:line="4022" pos:column="6">=<pos:position pos:line="4022" pos:column="7"/></operator> <call><name pos:line="4022" pos:column="8">sqlite3BtreeDelete<pos:position pos:line="4022" pos:column="26"/></name><argument_list pos:line="4022" pos:column="26">(<argument><expr><name><name pos:line="4022" pos:column="27">pC<pos:position pos:line="4022" pos:column="29"/></name><operator pos:line="4022" pos:column="29">-&gt;<pos:position pos:line="4022" pos:column="34"/></operator><name pos:line="4022" pos:column="31">uc<pos:position pos:line="4022" pos:column="33"/></name><operator pos:line="4022" pos:column="33">.<pos:position pos:line="4022" pos:column="34"/></operator><name pos:line="4022" pos:column="34">pCursor<pos:position pos:line="4022" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4022" pos:column="43">pOp<pos:position pos:line="4022" pos:column="46"/></name><operator pos:line="4022" pos:column="46">-&gt;<pos:position pos:line="4022" pos:column="51"/></operator><name pos:line="4022" pos:column="48">p5<pos:position pos:line="4022" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="4022" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="4022" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4023" pos:column="3">pC<pos:position pos:line="4023" pos:column="5"/></name><operator pos:line="4023" pos:column="5">-&gt;<pos:position pos:line="4023" pos:column="10"/></operator><name pos:line="4023" pos:column="7">cacheStatus<pos:position pos:line="4023" pos:column="18"/></name></name> <operator pos:line="4023" pos:column="19">=<pos:position pos:line="4023" pos:column="20"/></operator> <name pos:line="4023" pos:column="21">CACHE_STALE<pos:position pos:line="4023" pos:column="32"/></name></expr>;<pos:position pos:line="4023" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4024" pos:column="3">pC<pos:position pos:line="4024" pos:column="5"/></name><operator pos:line="4024" pos:column="5">-&gt;<pos:position pos:line="4024" pos:column="10"/></operator><name pos:line="4024" pos:column="7">seekResult<pos:position pos:line="4024" pos:column="17"/></name></name> <operator pos:line="4024" pos:column="18">=<pos:position pos:line="4024" pos:column="19"/></operator> <literal type="number" pos:line="4024" pos:column="20">0<pos:position pos:line="4024" pos:column="21"/></literal></expr>;<pos:position pos:line="4024" pos:column="22"/></expr_stmt>
  <if pos:line="4025" pos:column="3">if<condition pos:line="4025" pos:column="5">( <expr><name pos:line="4025" pos:column="7">rc<pos:position pos:line="4025" pos:column="9"/></name></expr> )<pos:position pos:line="4025" pos:column="11"/></condition><then pos:line="4025" pos:column="11"> <block type="pseudo"><goto pos:line="4025" pos:column="12">goto <name pos:line="4025" pos:column="17">abort_due_to_error<pos:position pos:line="4025" pos:column="35"/></name>;<pos:position pos:line="4025" pos:column="36"/></goto></block></then></if>

  <comment type="block" pos:line="4027" pos:column="3">/* Invoke the update-hook if required. */</comment>
  <if pos:line="4028" pos:column="3">if<condition pos:line="4028" pos:column="5">( <expr><name pos:line="4028" pos:column="7">opflags<pos:position pos:line="4028" pos:column="14"/></name> <operator pos:line="4028" pos:column="15">&amp;<pos:position pos:line="4028" pos:column="20"/></operator> <name pos:line="4028" pos:column="17">OPFLAG_NCHANGE<pos:position pos:line="4028" pos:column="31"/></name></expr> )<pos:position pos:line="4028" pos:column="33"/></condition><then><block pos:line="4028" pos:column="33">{
    <expr_stmt><expr><name><name pos:line="4029" pos:column="5">p<pos:position pos:line="4029" pos:column="6"/></name><operator pos:line="4029" pos:column="6">-&gt;<pos:position pos:line="4029" pos:column="11"/></operator><name pos:line="4029" pos:column="8">nChange<pos:position pos:line="4029" pos:column="15"/></name></name><operator pos:line="4029" pos:column="15">++<pos:position pos:line="4029" pos:column="17"/></operator></expr>;<pos:position pos:line="4029" pos:column="18"/></expr_stmt>
    <if pos:line="4030" pos:column="5">if<condition pos:line="4030" pos:column="7">( <expr><name><name pos:line="4030" pos:column="9">db<pos:position pos:line="4030" pos:column="11"/></name><operator pos:line="4030" pos:column="11">-&gt;<pos:position pos:line="4030" pos:column="16"/></operator><name pos:line="4030" pos:column="13">xUpdateCallback<pos:position pos:line="4030" pos:column="28"/></name></name> <operator pos:line="4030" pos:column="29">&amp;&amp;<pos:position pos:line="4030" pos:column="39"/></operator> <call><name pos:line="4030" pos:column="32">HasRowid<pos:position pos:line="4030" pos:column="40"/></name><argument_list pos:line="4030" pos:column="40">(<argument><expr><name pos:line="4030" pos:column="41">pTab<pos:position pos:line="4030" pos:column="45"/></name></expr></argument>)<pos:position pos:line="4030" pos:column="46"/></argument_list></call></expr> )<pos:position pos:line="4030" pos:column="48"/></condition><then><block pos:line="4030" pos:column="48">{
      <expr_stmt><expr><call><name><name pos:line="4031" pos:column="7">db<pos:position pos:line="4031" pos:column="9"/></name><operator pos:line="4031" pos:column="9">-&gt;<pos:position pos:line="4031" pos:column="14"/></operator><name pos:line="4031" pos:column="11">xUpdateCallback<pos:position pos:line="4031" pos:column="26"/></name></name><argument_list pos:line="4031" pos:column="26">(<argument><expr><name><name pos:line="4031" pos:column="27">db<pos:position pos:line="4031" pos:column="29"/></name><operator pos:line="4031" pos:column="29">-&gt;<pos:position pos:line="4031" pos:column="34"/></operator><name pos:line="4031" pos:column="31">pUpdateArg<pos:position pos:line="4031" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="4031" pos:column="43">SQLITE_DELETE<pos:position pos:line="4031" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="4031" pos:column="58">zDb<pos:position pos:line="4031" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="4031" pos:column="63">pTab<pos:position pos:line="4031" pos:column="67"/></name><operator pos:line="4031" pos:column="67">-&gt;<pos:position pos:line="4031" pos:column="72"/></operator><name pos:line="4031" pos:column="69">zName<pos:position pos:line="4031" pos:column="74"/></name></name></expr></argument>,
          <argument><expr><name><name pos:line="4032" pos:column="11">pC<pos:position pos:line="4032" pos:column="13"/></name><operator pos:line="4032" pos:column="13">-&gt;<pos:position pos:line="4032" pos:column="18"/></operator><name pos:line="4032" pos:column="15">movetoTarget<pos:position pos:line="4032" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="4032" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4032" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4033" pos:column="7">assert<pos:position pos:line="4033" pos:column="13"/></name><argument_list pos:line="4033" pos:column="13">( <argument><expr><name><name pos:line="4033" pos:column="15">pC<pos:position pos:line="4033" pos:column="17"/></name><operator pos:line="4033" pos:column="17">-&gt;<pos:position pos:line="4033" pos:column="22"/></operator><name pos:line="4033" pos:column="19">iDb<pos:position pos:line="4033" pos:column="22"/></name></name><operator pos:line="4033" pos:column="22">&gt;=<pos:position pos:line="4033" pos:column="27"/></operator><literal type="number" pos:line="4033" pos:column="24">0<pos:position pos:line="4033" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="4033" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4033" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="4034" pos:column="6"/></block></then></if>
  }<pos:position pos:line="4035" pos:column="4"/></block></then></if>

  <break pos:line="4037" pos:column="3">break;<pos:position pos:line="4037" pos:column="9"/></break>
}<pos:position pos:line="4038" pos:column="2"/></block>
<comment type="block" pos:line="4039" pos:column="1">/* Opcode: ResetCount * * * * *
**
** The value of the change counter is copied to the database handle
** change counter (returned by subsequent calls to sqlite3_changes()).
** Then the VMs internal change counter resets to 0.
** This is used by trigger programs.
*/</comment>
<case pos:line="4046" pos:column="1">case <expr><name pos:line="4046" pos:column="6">OP_ResetCount<pos:position pos:line="4046" pos:column="19"/></name></expr>:<pos:position pos:line="4046" pos:column="20"/></case> <block pos:line="4046" pos:column="21">{
  <expr_stmt><expr><call><name pos:line="4047" pos:column="3">sqlite3VdbeSetChanges<pos:position pos:line="4047" pos:column="24"/></name><argument_list pos:line="4047" pos:column="24">(<argument><expr><name pos:line="4047" pos:column="25">db<pos:position pos:line="4047" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="4047" pos:column="29">p<pos:position pos:line="4047" pos:column="30"/></name><operator pos:line="4047" pos:column="30">-&gt;<pos:position pos:line="4047" pos:column="35"/></operator><name pos:line="4047" pos:column="32">nChange<pos:position pos:line="4047" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="4047" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4047" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4048" pos:column="3">p<pos:position pos:line="4048" pos:column="4"/></name><operator pos:line="4048" pos:column="4">-&gt;<pos:position pos:line="4048" pos:column="9"/></operator><name pos:line="4048" pos:column="6">nChange<pos:position pos:line="4048" pos:column="13"/></name></name> <operator pos:line="4048" pos:column="14">=<pos:position pos:line="4048" pos:column="15"/></operator> <literal type="number" pos:line="4048" pos:column="16">0<pos:position pos:line="4048" pos:column="17"/></literal></expr>;<pos:position pos:line="4048" pos:column="18"/></expr_stmt>
  <break pos:line="4049" pos:column="3">break;<pos:position pos:line="4049" pos:column="9"/></break>
}<pos:position pos:line="4050" pos:column="2"/></block>

<comment type="block" pos:line="4052" pos:column="1">/* Opcode: SorterCompare P1 P2 P3 P4
** Synopsis: if key(P1)!=trim(r[P3],P4) goto P2
**
** P1 is a sorter cursor. This instruction compares a prefix of the
** record blob in register P3 against a prefix of the entry that 
** the sorter cursor currently points to.  Only the first P4 fields
** of r[P3] and the sorter record are compared.
**
** If either P3 or the sorter contains a NULL in one of their significant
** fields (not counting the P4 fields at the end which are ignored) then
** the comparison is assumed to be equal.
**
** Fall through to next instruction if the two records compare equal to
** each other.  Jump to P2 if they are different.
*/</comment>
<case pos:line="4067" pos:column="1">case <expr><name pos:line="4067" pos:column="6">OP_SorterCompare<pos:position pos:line="4067" pos:column="22"/></name></expr>:<pos:position pos:line="4067" pos:column="23"/></case> <block pos:line="4067" pos:column="24">{
  <decl_stmt><decl><type><name pos:line="4068" pos:column="3">VdbeCursor<pos:position pos:line="4068" pos:column="13"/></name> <modifier pos:line="4068" pos:column="14">*<pos:position pos:line="4068" pos:column="15"/></modifier></type><name pos:line="4068" pos:column="15">pC<pos:position pos:line="4068" pos:column="17"/></name></decl>;<pos:position pos:line="4068" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4069" pos:column="3">int<pos:position pos:line="4069" pos:column="6"/></name></type> <name pos:line="4069" pos:column="7">res<pos:position pos:line="4069" pos:column="10"/></name></decl>;<pos:position pos:line="4069" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4070" pos:column="3">int<pos:position pos:line="4070" pos:column="6"/></name></type> <name pos:line="4070" pos:column="7">nKeyCol<pos:position pos:line="4070" pos:column="14"/></name></decl>;<pos:position pos:line="4070" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4072" pos:column="3">pC<pos:position pos:line="4072" pos:column="5"/></name> <operator pos:line="4072" pos:column="6">=<pos:position pos:line="4072" pos:column="7"/></operator> <name><name pos:line="4072" pos:column="8">p<pos:position pos:line="4072" pos:column="9"/></name><operator pos:line="4072" pos:column="9">-&gt;<pos:position pos:line="4072" pos:column="14"/></operator><name pos:line="4072" pos:column="11">apCsr<pos:position pos:line="4072" pos:column="16"/></name><index pos:line="4072" pos:column="16">[<expr><name><name pos:line="4072" pos:column="17">pOp<pos:position pos:line="4072" pos:column="20"/></name><operator pos:line="4072" pos:column="20">-&gt;<pos:position pos:line="4072" pos:column="25"/></operator><name pos:line="4072" pos:column="22">p1<pos:position pos:line="4072" pos:column="24"/></name></name></expr>]<pos:position pos:line="4072" pos:column="25"/></index></name></expr>;<pos:position pos:line="4072" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4073" pos:column="3">assert<pos:position pos:line="4073" pos:column="9"/></name><argument_list pos:line="4073" pos:column="9">( <argument><expr><call><name pos:line="4073" pos:column="11">isSorter<pos:position pos:line="4073" pos:column="19"/></name><argument_list pos:line="4073" pos:column="19">(<argument><expr><name pos:line="4073" pos:column="20">pC<pos:position pos:line="4073" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4073" pos:column="23"/></argument_list></call></expr></argument> )<pos:position pos:line="4073" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4073" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4074" pos:column="3">assert<pos:position pos:line="4074" pos:column="9"/></name><argument_list pos:line="4074" pos:column="9">( <argument><expr><name><name pos:line="4074" pos:column="11">pOp<pos:position pos:line="4074" pos:column="14"/></name><operator pos:line="4074" pos:column="14">-&gt;<pos:position pos:line="4074" pos:column="19"/></operator><name pos:line="4074" pos:column="16">p4type<pos:position pos:line="4074" pos:column="22"/></name></name><operator pos:line="4074" pos:column="22">==<pos:position pos:line="4074" pos:column="24"/></operator><name pos:line="4074" pos:column="24">P4_INT32<pos:position pos:line="4074" pos:column="32"/></name></expr></argument> )<pos:position pos:line="4074" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4074" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4075" pos:column="3">pIn3<pos:position pos:line="4075" pos:column="7"/></name> <operator pos:line="4075" pos:column="8">=<pos:position pos:line="4075" pos:column="9"/></operator> <operator pos:line="4075" pos:column="10">&amp;<pos:position pos:line="4075" pos:column="15"/></operator><name><name pos:line="4075" pos:column="11">aMem<pos:position pos:line="4075" pos:column="15"/></name><index pos:line="4075" pos:column="15">[<expr><name><name pos:line="4075" pos:column="16">pOp<pos:position pos:line="4075" pos:column="19"/></name><operator pos:line="4075" pos:column="19">-&gt;<pos:position pos:line="4075" pos:column="24"/></operator><name pos:line="4075" pos:column="21">p3<pos:position pos:line="4075" pos:column="23"/></name></name></expr>]<pos:position pos:line="4075" pos:column="24"/></index></name></expr>;<pos:position pos:line="4075" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4076" pos:column="3">nKeyCol<pos:position pos:line="4076" pos:column="10"/></name> <operator pos:line="4076" pos:column="11">=<pos:position pos:line="4076" pos:column="12"/></operator> <name><name pos:line="4076" pos:column="13">pOp<pos:position pos:line="4076" pos:column="16"/></name><operator pos:line="4076" pos:column="16">-&gt;<pos:position pos:line="4076" pos:column="21"/></operator><name pos:line="4076" pos:column="18">p4<pos:position pos:line="4076" pos:column="20"/></name><operator pos:line="4076" pos:column="20">.<pos:position pos:line="4076" pos:column="21"/></operator><name pos:line="4076" pos:column="21">i<pos:position pos:line="4076" pos:column="22"/></name></name></expr>;<pos:position pos:line="4076" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4077" pos:column="3">res<pos:position pos:line="4077" pos:column="6"/></name> <operator pos:line="4077" pos:column="7">=<pos:position pos:line="4077" pos:column="8"/></operator> <literal type="number" pos:line="4077" pos:column="9">0<pos:position pos:line="4077" pos:column="10"/></literal></expr>;<pos:position pos:line="4077" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4078" pos:column="3">rc<pos:position pos:line="4078" pos:column="5"/></name> <operator pos:line="4078" pos:column="6">=<pos:position pos:line="4078" pos:column="7"/></operator> <call><name pos:line="4078" pos:column="8">sqlite3VdbeSorterCompare<pos:position pos:line="4078" pos:column="32"/></name><argument_list pos:line="4078" pos:column="32">(<argument><expr><name pos:line="4078" pos:column="33">pC<pos:position pos:line="4078" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="4078" pos:column="37">pIn3<pos:position pos:line="4078" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="4078" pos:column="43">nKeyCol<pos:position pos:line="4078" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="4078" pos:column="52">&amp;<pos:position pos:line="4078" pos:column="57"/></operator><name pos:line="4078" pos:column="53">res<pos:position pos:line="4078" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4078" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4078" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4079" pos:column="3">VdbeBranchTaken<pos:position pos:line="4079" pos:column="18"/></name><argument_list pos:line="4079" pos:column="18">(<argument><expr><name pos:line="4079" pos:column="19">res<pos:position pos:line="4079" pos:column="22"/></name><operator pos:line="4079" pos:column="22">!=<pos:position pos:line="4079" pos:column="24"/></operator><literal type="number" pos:line="4079" pos:column="24">0<pos:position pos:line="4079" pos:column="25"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4079" pos:column="26">2<pos:position pos:line="4079" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="4079" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4079" pos:column="29"/></expr_stmt>
  <if pos:line="4080" pos:column="3">if<condition pos:line="4080" pos:column="5">( <expr><name pos:line="4080" pos:column="7">rc<pos:position pos:line="4080" pos:column="9"/></name></expr> )<pos:position pos:line="4080" pos:column="11"/></condition><then pos:line="4080" pos:column="11"> <block type="pseudo"><goto pos:line="4080" pos:column="12">goto <name pos:line="4080" pos:column="17">abort_due_to_error<pos:position pos:line="4080" pos:column="35"/></name>;<pos:position pos:line="4080" pos:column="36"/></goto></block></then></if>
  <if pos:line="4081" pos:column="3">if<condition pos:line="4081" pos:column="5">( <expr><name pos:line="4081" pos:column="7">res<pos:position pos:line="4081" pos:column="10"/></name></expr> )<pos:position pos:line="4081" pos:column="12"/></condition><then pos:line="4081" pos:column="12"> <block type="pseudo"><goto pos:line="4081" pos:column="13">goto <name pos:line="4081" pos:column="18">jump_to_p2<pos:position pos:line="4081" pos:column="28"/></name>;<pos:position pos:line="4081" pos:column="29"/></goto></block></then></if>
  <break pos:line="4082" pos:column="3">break;<pos:position pos:line="4082" pos:column="9"/></break>
}<pos:position pos:line="4083" pos:column="2"/></block><empty_stmt pos:line="4083" pos:column="2">;<pos:position pos:line="4083" pos:column="3"/></empty_stmt>

<comment type="block" pos:line="4085" pos:column="1">/* Opcode: SorterData P1 P2 P3 * *
** Synopsis: r[P2]=data
**
** Write into register P2 the current sorter data for sorter cursor P1.
** Then clear the column header cache on cursor P3.
**
** This opcode is normally use to move a record out of the sorter and into
** a register that is the source for a pseudo-table cursor created using
** OpenPseudo.  That pseudo-table cursor is the one that is identified by
** parameter P3.  Clearing the P3 column cache as part of this opcode saves
** us from having to issue a separate NullRow instruction to clear that cache.
*/</comment>
<case pos:line="4097" pos:column="1">case <expr><name pos:line="4097" pos:column="6">OP_SorterData<pos:position pos:line="4097" pos:column="19"/></name></expr>:<pos:position pos:line="4097" pos:column="20"/></case> <block pos:line="4097" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="4098" pos:column="3">VdbeCursor<pos:position pos:line="4098" pos:column="13"/></name> <modifier pos:line="4098" pos:column="14">*<pos:position pos:line="4098" pos:column="15"/></modifier></type><name pos:line="4098" pos:column="15">pC<pos:position pos:line="4098" pos:column="17"/></name></decl>;<pos:position pos:line="4098" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4100" pos:column="3">pOut<pos:position pos:line="4100" pos:column="7"/></name> <operator pos:line="4100" pos:column="8">=<pos:position pos:line="4100" pos:column="9"/></operator> <operator pos:line="4100" pos:column="10">&amp;<pos:position pos:line="4100" pos:column="15"/></operator><name><name pos:line="4100" pos:column="11">aMem<pos:position pos:line="4100" pos:column="15"/></name><index pos:line="4100" pos:column="15">[<expr><name><name pos:line="4100" pos:column="16">pOp<pos:position pos:line="4100" pos:column="19"/></name><operator pos:line="4100" pos:column="19">-&gt;<pos:position pos:line="4100" pos:column="24"/></operator><name pos:line="4100" pos:column="21">p2<pos:position pos:line="4100" pos:column="23"/></name></name></expr>]<pos:position pos:line="4100" pos:column="24"/></index></name></expr>;<pos:position pos:line="4100" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4101" pos:column="3">pC<pos:position pos:line="4101" pos:column="5"/></name> <operator pos:line="4101" pos:column="6">=<pos:position pos:line="4101" pos:column="7"/></operator> <name><name pos:line="4101" pos:column="8">p<pos:position pos:line="4101" pos:column="9"/></name><operator pos:line="4101" pos:column="9">-&gt;<pos:position pos:line="4101" pos:column="14"/></operator><name pos:line="4101" pos:column="11">apCsr<pos:position pos:line="4101" pos:column="16"/></name><index pos:line="4101" pos:column="16">[<expr><name><name pos:line="4101" pos:column="17">pOp<pos:position pos:line="4101" pos:column="20"/></name><operator pos:line="4101" pos:column="20">-&gt;<pos:position pos:line="4101" pos:column="25"/></operator><name pos:line="4101" pos:column="22">p1<pos:position pos:line="4101" pos:column="24"/></name></name></expr>]<pos:position pos:line="4101" pos:column="25"/></index></name></expr>;<pos:position pos:line="4101" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4102" pos:column="3">assert<pos:position pos:line="4102" pos:column="9"/></name><argument_list pos:line="4102" pos:column="9">( <argument><expr><call><name pos:line="4102" pos:column="11">isSorter<pos:position pos:line="4102" pos:column="19"/></name><argument_list pos:line="4102" pos:column="19">(<argument><expr><name pos:line="4102" pos:column="20">pC<pos:position pos:line="4102" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4102" pos:column="23"/></argument_list></call></expr></argument> )<pos:position pos:line="4102" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4102" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4103" pos:column="3">rc<pos:position pos:line="4103" pos:column="5"/></name> <operator pos:line="4103" pos:column="6">=<pos:position pos:line="4103" pos:column="7"/></operator> <call><name pos:line="4103" pos:column="8">sqlite3VdbeSorterRowkey<pos:position pos:line="4103" pos:column="31"/></name><argument_list pos:line="4103" pos:column="31">(<argument><expr><name pos:line="4103" pos:column="32">pC<pos:position pos:line="4103" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="4103" pos:column="36">pOut<pos:position pos:line="4103" pos:column="40"/></name></expr></argument>)<pos:position pos:line="4103" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4103" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4104" pos:column="3">assert<pos:position pos:line="4104" pos:column="9"/></name><argument_list pos:line="4104" pos:column="9">( <argument><expr><name pos:line="4104" pos:column="11">rc<pos:position pos:line="4104" pos:column="13"/></name><operator pos:line="4104" pos:column="13">!=<pos:position pos:line="4104" pos:column="15"/></operator><name pos:line="4104" pos:column="15">SQLITE_OK<pos:position pos:line="4104" pos:column="24"/></name> <operator pos:line="4104" pos:column="25">||<pos:position pos:line="4104" pos:column="27"/></operator> <operator pos:line="4104" pos:column="28">(<pos:position pos:line="4104" pos:column="29"/></operator><name><name pos:line="4104" pos:column="29">pOut<pos:position pos:line="4104" pos:column="33"/></name><operator pos:line="4104" pos:column="33">-&gt;<pos:position pos:line="4104" pos:column="38"/></operator><name pos:line="4104" pos:column="35">flags<pos:position pos:line="4104" pos:column="40"/></name></name> <operator pos:line="4104" pos:column="41">&amp;<pos:position pos:line="4104" pos:column="46"/></operator> <name pos:line="4104" pos:column="43">MEM_Blob<pos:position pos:line="4104" pos:column="51"/></name><operator pos:line="4104" pos:column="51">)<pos:position pos:line="4104" pos:column="52"/></operator></expr></argument> )<pos:position pos:line="4104" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4104" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4105" pos:column="3">assert<pos:position pos:line="4105" pos:column="9"/></name><argument_list pos:line="4105" pos:column="9">( <argument><expr><name><name pos:line="4105" pos:column="11">pOp<pos:position pos:line="4105" pos:column="14"/></name><operator pos:line="4105" pos:column="14">-&gt;<pos:position pos:line="4105" pos:column="19"/></operator><name pos:line="4105" pos:column="16">p1<pos:position pos:line="4105" pos:column="18"/></name></name><operator pos:line="4105" pos:column="18">&gt;=<pos:position pos:line="4105" pos:column="23"/></operator><literal type="number" pos:line="4105" pos:column="20">0<pos:position pos:line="4105" pos:column="21"/></literal> <operator pos:line="4105" pos:column="22">&amp;&amp;<pos:position pos:line="4105" pos:column="32"/></operator> <name><name pos:line="4105" pos:column="25">pOp<pos:position pos:line="4105" pos:column="28"/></name><operator pos:line="4105" pos:column="28">-&gt;<pos:position pos:line="4105" pos:column="33"/></operator><name pos:line="4105" pos:column="30">p1<pos:position pos:line="4105" pos:column="32"/></name></name><operator pos:line="4105" pos:column="32">&lt;<pos:position pos:line="4105" pos:column="36"/></operator><name><name pos:line="4105" pos:column="33">p<pos:position pos:line="4105" pos:column="34"/></name><operator pos:line="4105" pos:column="34">-&gt;<pos:position pos:line="4105" pos:column="39"/></operator><name pos:line="4105" pos:column="36">nCursor<pos:position pos:line="4105" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4105" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4105" pos:column="46"/></expr_stmt>
  <if pos:line="4106" pos:column="3">if<condition pos:line="4106" pos:column="5">( <expr><name pos:line="4106" pos:column="7">rc<pos:position pos:line="4106" pos:column="9"/></name></expr> )<pos:position pos:line="4106" pos:column="11"/></condition><then pos:line="4106" pos:column="11"> <block type="pseudo"><goto pos:line="4106" pos:column="12">goto <name pos:line="4106" pos:column="17">abort_due_to_error<pos:position pos:line="4106" pos:column="35"/></name>;<pos:position pos:line="4106" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="4107" pos:column="3">p<pos:position pos:line="4107" pos:column="4"/></name><operator pos:line="4107" pos:column="4">-&gt;<pos:position pos:line="4107" pos:column="9"/></operator><name pos:line="4107" pos:column="6">apCsr<pos:position pos:line="4107" pos:column="11"/></name><index pos:line="4107" pos:column="11">[<expr><name><name pos:line="4107" pos:column="12">pOp<pos:position pos:line="4107" pos:column="15"/></name><operator pos:line="4107" pos:column="15">-&gt;<pos:position pos:line="4107" pos:column="20"/></operator><name pos:line="4107" pos:column="17">p3<pos:position pos:line="4107" pos:column="19"/></name></name></expr>]<pos:position pos:line="4107" pos:column="20"/></index></name><operator pos:line="4107" pos:column="20">-&gt;<pos:position pos:line="4107" pos:column="25"/></operator><name pos:line="4107" pos:column="22">cacheStatus<pos:position pos:line="4107" pos:column="33"/></name> <operator pos:line="4107" pos:column="34">=<pos:position pos:line="4107" pos:column="35"/></operator> <name pos:line="4107" pos:column="36">CACHE_STALE<pos:position pos:line="4107" pos:column="47"/></name></expr>;<pos:position pos:line="4107" pos:column="48"/></expr_stmt>
  <break pos:line="4108" pos:column="3">break;<pos:position pos:line="4108" pos:column="9"/></break>
}<pos:position pos:line="4109" pos:column="2"/></block>

<comment type="block" pos:line="4111" pos:column="1">/* Opcode: RowData P1 P2 P3 * *
** Synopsis: r[P2]=data
**
** Write into register P2 the complete row content for the row at 
** which cursor P1 is currently pointing.
** There is no interpretation of the data.  
** It is just copied onto the P2 register exactly as 
** it is found in the database file.
**
** If cursor P1 is an index, then the content is the key of the row.
** If cursor P2 is a table, then the content extracted is the data.
**
** If the P1 cursor must be pointing to a valid row (not a NULL row)
** of a real table, not a pseudo-table.
**
** If P3!=0 then this opcode is allowed to make an ephermeral pointer
** into the database page.  That means that the content of the output
** register will be invalidated as soon as the cursor moves - including
** moves caused by other cursors that "save" the the current cursors
** position in order that they can write to the same table.  If P3==0
** then a copy of the data is made into memory.  P3!=0 is faster, but
** P3==0 is safer.
**
** If P3!=0 then the content of the P2 register is unsuitable for use
** in OP_Result and any OP_Result will invalidate the P2 register content.
** The P2 register content is invalidated by opcodes like OP_Function or
** by any use of another cursor pointing to the same table.
*/</comment>
<case pos:line="4139" pos:column="1">case <expr><name pos:line="4139" pos:column="6">OP_RowData<pos:position pos:line="4139" pos:column="16"/></name></expr>:<pos:position pos:line="4139" pos:column="17"/></case> <block pos:line="4139" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="4140" pos:column="3">VdbeCursor<pos:position pos:line="4140" pos:column="13"/></name> <modifier pos:line="4140" pos:column="14">*<pos:position pos:line="4140" pos:column="15"/></modifier></type><name pos:line="4140" pos:column="15">pC<pos:position pos:line="4140" pos:column="17"/></name></decl>;<pos:position pos:line="4140" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4141" pos:column="3">BtCursor<pos:position pos:line="4141" pos:column="11"/></name> <modifier pos:line="4141" pos:column="12">*<pos:position pos:line="4141" pos:column="13"/></modifier></type><name pos:line="4141" pos:column="13">pCrsr<pos:position pos:line="4141" pos:column="18"/></name></decl>;<pos:position pos:line="4141" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4142" pos:column="3">u32<pos:position pos:line="4142" pos:column="6"/></name></type> <name pos:line="4142" pos:column="7">n<pos:position pos:line="4142" pos:column="8"/></name></decl>;<pos:position pos:line="4142" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4144" pos:column="3">pOut<pos:position pos:line="4144" pos:column="7"/></name> <operator pos:line="4144" pos:column="8">=<pos:position pos:line="4144" pos:column="9"/></operator> <call><name pos:line="4144" pos:column="10">out2Prerelease<pos:position pos:line="4144" pos:column="24"/></name><argument_list pos:line="4144" pos:column="24">(<argument><expr><name pos:line="4144" pos:column="25">p<pos:position pos:line="4144" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="4144" pos:column="28">pOp<pos:position pos:line="4144" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4144" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4144" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="4146" pos:column="3">assert<pos:position pos:line="4146" pos:column="9"/></name><argument_list pos:line="4146" pos:column="9">( <argument><expr><name><name pos:line="4146" pos:column="11">pOp<pos:position pos:line="4146" pos:column="14"/></name><operator pos:line="4146" pos:column="14">-&gt;<pos:position pos:line="4146" pos:column="19"/></operator><name pos:line="4146" pos:column="16">p1<pos:position pos:line="4146" pos:column="18"/></name></name><operator pos:line="4146" pos:column="18">&gt;=<pos:position pos:line="4146" pos:column="23"/></operator><literal type="number" pos:line="4146" pos:column="20">0<pos:position pos:line="4146" pos:column="21"/></literal> <operator pos:line="4146" pos:column="22">&amp;&amp;<pos:position pos:line="4146" pos:column="32"/></operator> <name><name pos:line="4146" pos:column="25">pOp<pos:position pos:line="4146" pos:column="28"/></name><operator pos:line="4146" pos:column="28">-&gt;<pos:position pos:line="4146" pos:column="33"/></operator><name pos:line="4146" pos:column="30">p1<pos:position pos:line="4146" pos:column="32"/></name></name><operator pos:line="4146" pos:column="32">&lt;<pos:position pos:line="4146" pos:column="36"/></operator><name><name pos:line="4146" pos:column="33">p<pos:position pos:line="4146" pos:column="34"/></name><operator pos:line="4146" pos:column="34">-&gt;<pos:position pos:line="4146" pos:column="39"/></operator><name pos:line="4146" pos:column="36">nCursor<pos:position pos:line="4146" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4146" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4146" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4147" pos:column="3">pC<pos:position pos:line="4147" pos:column="5"/></name> <operator pos:line="4147" pos:column="6">=<pos:position pos:line="4147" pos:column="7"/></operator> <name><name pos:line="4147" pos:column="8">p<pos:position pos:line="4147" pos:column="9"/></name><operator pos:line="4147" pos:column="9">-&gt;<pos:position pos:line="4147" pos:column="14"/></operator><name pos:line="4147" pos:column="11">apCsr<pos:position pos:line="4147" pos:column="16"/></name><index pos:line="4147" pos:column="16">[<expr><name><name pos:line="4147" pos:column="17">pOp<pos:position pos:line="4147" pos:column="20"/></name><operator pos:line="4147" pos:column="20">-&gt;<pos:position pos:line="4147" pos:column="25"/></operator><name pos:line="4147" pos:column="22">p1<pos:position pos:line="4147" pos:column="24"/></name></name></expr>]<pos:position pos:line="4147" pos:column="25"/></index></name></expr>;<pos:position pos:line="4147" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4148" pos:column="3">assert<pos:position pos:line="4148" pos:column="9"/></name><argument_list pos:line="4148" pos:column="9">( <argument><expr><name pos:line="4148" pos:column="11">pC<pos:position pos:line="4148" pos:column="13"/></name><operator pos:line="4148" pos:column="13">!=<pos:position pos:line="4148" pos:column="15"/></operator><literal type="number" pos:line="4148" pos:column="15">0<pos:position pos:line="4148" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4148" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4148" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4149" pos:column="3">assert<pos:position pos:line="4149" pos:column="9"/></name><argument_list pos:line="4149" pos:column="9">( <argument><expr><name><name pos:line="4149" pos:column="11">pC<pos:position pos:line="4149" pos:column="13"/></name><operator pos:line="4149" pos:column="13">-&gt;<pos:position pos:line="4149" pos:column="18"/></operator><name pos:line="4149" pos:column="15">eCurType<pos:position pos:line="4149" pos:column="23"/></name></name><operator pos:line="4149" pos:column="23">==<pos:position pos:line="4149" pos:column="25"/></operator><name pos:line="4149" pos:column="25">CURTYPE_BTREE<pos:position pos:line="4149" pos:column="38"/></name></expr></argument> )<pos:position pos:line="4149" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4149" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4150" pos:column="3">assert<pos:position pos:line="4150" pos:column="9"/></name><argument_list pos:line="4150" pos:column="9">( <argument><expr><call><name pos:line="4150" pos:column="11">isSorter<pos:position pos:line="4150" pos:column="19"/></name><argument_list pos:line="4150" pos:column="19">(<argument><expr><name pos:line="4150" pos:column="20">pC<pos:position pos:line="4150" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4150" pos:column="23"/></argument_list></call><operator pos:line="4150" pos:column="23">==<pos:position pos:line="4150" pos:column="25"/></operator><literal type="number" pos:line="4150" pos:column="25">0<pos:position pos:line="4150" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="4150" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4150" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4151" pos:column="3">assert<pos:position pos:line="4151" pos:column="9"/></name><argument_list pos:line="4151" pos:column="9">( <argument><expr><name><name pos:line="4151" pos:column="11">pC<pos:position pos:line="4151" pos:column="13"/></name><operator pos:line="4151" pos:column="13">-&gt;<pos:position pos:line="4151" pos:column="18"/></operator><name pos:line="4151" pos:column="15">nullRow<pos:position pos:line="4151" pos:column="22"/></name></name><operator pos:line="4151" pos:column="22">==<pos:position pos:line="4151" pos:column="24"/></operator><literal type="number" pos:line="4151" pos:column="24">0<pos:position pos:line="4151" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="4151" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4151" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4152" pos:column="3">assert<pos:position pos:line="4152" pos:column="9"/></name><argument_list pos:line="4152" pos:column="9">( <argument><expr><name><name pos:line="4152" pos:column="11">pC<pos:position pos:line="4152" pos:column="13"/></name><operator pos:line="4152" pos:column="13">-&gt;<pos:position pos:line="4152" pos:column="18"/></operator><name pos:line="4152" pos:column="15">uc<pos:position pos:line="4152" pos:column="17"/></name><operator pos:line="4152" pos:column="17">.<pos:position pos:line="4152" pos:column="18"/></operator><name pos:line="4152" pos:column="18">pCursor<pos:position pos:line="4152" pos:column="25"/></name></name><operator pos:line="4152" pos:column="25">!=<pos:position pos:line="4152" pos:column="27"/></operator><literal type="number" pos:line="4152" pos:column="27">0<pos:position pos:line="4152" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="4152" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4152" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4153" pos:column="3">pCrsr<pos:position pos:line="4153" pos:column="8"/></name> <operator pos:line="4153" pos:column="9">=<pos:position pos:line="4153" pos:column="10"/></operator> <name><name pos:line="4153" pos:column="11">pC<pos:position pos:line="4153" pos:column="13"/></name><operator pos:line="4153" pos:column="13">-&gt;<pos:position pos:line="4153" pos:column="18"/></operator><name pos:line="4153" pos:column="15">uc<pos:position pos:line="4153" pos:column="17"/></name><operator pos:line="4153" pos:column="17">.<pos:position pos:line="4153" pos:column="18"/></operator><name pos:line="4153" pos:column="18">pCursor<pos:position pos:line="4153" pos:column="25"/></name></name></expr>;<pos:position pos:line="4153" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="4155" pos:column="3">/* The OP_RowData opcodes always follow OP_NotExists or
  ** OP_SeekRowid or OP_Rewind/Op_Next with no intervening instructions
  ** that might invalidate the cursor.
  ** If this where not the case, on of the following assert()s
  ** would fail.  Should this ever change (because of changes in the code
  ** generator) then the fix would be to insert a call to
  ** sqlite3VdbeCursorMoveto().
  */</comment>
  <expr_stmt><expr><call><name pos:line="4163" pos:column="3">assert<pos:position pos:line="4163" pos:column="9"/></name><argument_list pos:line="4163" pos:column="9">( <argument><expr><name><name pos:line="4163" pos:column="11">pC<pos:position pos:line="4163" pos:column="13"/></name><operator pos:line="4163" pos:column="13">-&gt;<pos:position pos:line="4163" pos:column="18"/></operator><name pos:line="4163" pos:column="15">deferredMoveto<pos:position pos:line="4163" pos:column="29"/></name></name><operator pos:line="4163" pos:column="29">==<pos:position pos:line="4163" pos:column="31"/></operator><literal type="number" pos:line="4163" pos:column="31">0<pos:position pos:line="4163" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="4163" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4163" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4164" pos:column="3">assert<pos:position pos:line="4164" pos:column="9"/></name><argument_list pos:line="4164" pos:column="9">( <argument><expr><call><name pos:line="4164" pos:column="11">sqlite3BtreeCursorIsValid<pos:position pos:line="4164" pos:column="36"/></name><argument_list pos:line="4164" pos:column="36">(<argument><expr><name pos:line="4164" pos:column="37">pCrsr<pos:position pos:line="4164" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4164" pos:column="43"/></argument_list></call></expr></argument> )<pos:position pos:line="4164" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4164" pos:column="46"/></expr_stmt>
<cpp:if pos:line="4165" pos:column="1">#<cpp:directive pos:line="4165" pos:column="2">if<pos:position pos:line="4165" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="4165" pos:column="5">0<pos:position pos:line="4165" pos:column="6"/></literal></expr></cpp:if>  <comment type="block" pos:line="4165" pos:column="8">/* Not required due to the previous to assert() statements */</comment>
  rc = sqlite3VdbeCursorMoveto(pC);
  if( rc!=SQLITE_OK ) goto abort_due_to_error;
<cpp:endif pos:line="4168" pos:column="1">#<cpp:directive pos:line="4168" pos:column="2">endif<pos:position pos:line="4168" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="4170" pos:column="3">n<pos:position pos:line="4170" pos:column="4"/></name> <operator pos:line="4170" pos:column="5">=<pos:position pos:line="4170" pos:column="6"/></operator> <call><name pos:line="4170" pos:column="7">sqlite3BtreePayloadSize<pos:position pos:line="4170" pos:column="30"/></name><argument_list pos:line="4170" pos:column="30">(<argument><expr><name pos:line="4170" pos:column="31">pCrsr<pos:position pos:line="4170" pos:column="36"/></name></expr></argument>)<pos:position pos:line="4170" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="4170" pos:column="38"/></expr_stmt>
  <if pos:line="4171" pos:column="3">if<condition pos:line="4171" pos:column="5">( <expr><name pos:line="4171" pos:column="7">n<pos:position pos:line="4171" pos:column="8"/></name><operator pos:line="4171" pos:column="8">&gt;<pos:position pos:line="4171" pos:column="12"/></operator><operator pos:line="4171" pos:column="9">(<pos:position pos:line="4171" pos:column="10"/></operator><name pos:line="4171" pos:column="10">u32<pos:position pos:line="4171" pos:column="13"/></name><operator pos:line="4171" pos:column="13">)<pos:position pos:line="4171" pos:column="14"/></operator><name><name pos:line="4171" pos:column="14">db<pos:position pos:line="4171" pos:column="16"/></name><operator pos:line="4171" pos:column="16">-&gt;<pos:position pos:line="4171" pos:column="21"/></operator><name pos:line="4171" pos:column="18">aLimit<pos:position pos:line="4171" pos:column="24"/></name><index pos:line="4171" pos:column="24">[<expr><name pos:line="4171" pos:column="25">SQLITE_LIMIT_LENGTH<pos:position pos:line="4171" pos:column="44"/></name></expr>]<pos:position pos:line="4171" pos:column="45"/></index></name></expr> )<pos:position pos:line="4171" pos:column="47"/></condition><then><block pos:line="4171" pos:column="47">{
    <goto pos:line="4172" pos:column="5">goto <name pos:line="4172" pos:column="10">too_big<pos:position pos:line="4172" pos:column="17"/></name>;<pos:position pos:line="4172" pos:column="18"/></goto>
  }<pos:position pos:line="4173" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="4174" pos:column="3">testcase<pos:position pos:line="4174" pos:column="11"/></name><argument_list pos:line="4174" pos:column="11">( <argument><expr><name pos:line="4174" pos:column="13">n<pos:position pos:line="4174" pos:column="14"/></name><operator pos:line="4174" pos:column="14">==<pos:position pos:line="4174" pos:column="16"/></operator><literal type="number" pos:line="4174" pos:column="16">0<pos:position pos:line="4174" pos:column="17"/></literal></expr></argument> )<pos:position pos:line="4174" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="4174" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4175" pos:column="3">rc<pos:position pos:line="4175" pos:column="5"/></name> <operator pos:line="4175" pos:column="6">=<pos:position pos:line="4175" pos:column="7"/></operator> <call><name pos:line="4175" pos:column="8">sqlite3VdbeMemFromBtree<pos:position pos:line="4175" pos:column="31"/></name><argument_list pos:line="4175" pos:column="31">(<argument><expr><name pos:line="4175" pos:column="32">pCrsr<pos:position pos:line="4175" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4175" pos:column="39">0<pos:position pos:line="4175" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="4175" pos:column="42">n<pos:position pos:line="4175" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="4175" pos:column="45">pOut<pos:position pos:line="4175" pos:column="49"/></name></expr></argument>)<pos:position pos:line="4175" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="4175" pos:column="51"/></expr_stmt>
  <if pos:line="4176" pos:column="3">if<condition pos:line="4176" pos:column="5">( <expr><name pos:line="4176" pos:column="7">rc<pos:position pos:line="4176" pos:column="9"/></name></expr> )<pos:position pos:line="4176" pos:column="11"/></condition><then pos:line="4176" pos:column="11"> <block type="pseudo"><goto pos:line="4176" pos:column="12">goto <name pos:line="4176" pos:column="17">abort_due_to_error<pos:position pos:line="4176" pos:column="35"/></name>;<pos:position pos:line="4176" pos:column="36"/></goto></block></then></if>
  <if pos:line="4177" pos:column="3">if<condition pos:line="4177" pos:column="5">( <expr><operator pos:line="4177" pos:column="7">!<pos:position pos:line="4177" pos:column="8"/></operator><name><name pos:line="4177" pos:column="8">pOp<pos:position pos:line="4177" pos:column="11"/></name><operator pos:line="4177" pos:column="11">-&gt;<pos:position pos:line="4177" pos:column="16"/></operator><name pos:line="4177" pos:column="13">p3<pos:position pos:line="4177" pos:column="15"/></name></name></expr> )<pos:position pos:line="4177" pos:column="17"/></condition><then pos:line="4177" pos:column="17"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="4177" pos:column="18">Deephemeralize<pos:position pos:line="4177" pos:column="32"/></name><argument_list pos:line="4177" pos:column="32">(<argument><expr><name pos:line="4177" pos:column="33">pOut<pos:position pos:line="4177" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4177" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4177" pos:column="39"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="4178" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="4178" pos:column="22"/></name><argument_list pos:line="4178" pos:column="22">(<argument><expr><name pos:line="4178" pos:column="23">pOut<pos:position pos:line="4178" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4178" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4178" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4179" pos:column="3">REGISTER_TRACE<pos:position pos:line="4179" pos:column="17"/></name><argument_list pos:line="4179" pos:column="17">(<argument><expr><name><name pos:line="4179" pos:column="18">pOp<pos:position pos:line="4179" pos:column="21"/></name><operator pos:line="4179" pos:column="21">-&gt;<pos:position pos:line="4179" pos:column="26"/></operator><name pos:line="4179" pos:column="23">p2<pos:position pos:line="4179" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="4179" pos:column="27">pOut<pos:position pos:line="4179" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4179" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4179" pos:column="33"/></expr_stmt>
  <break pos:line="4180" pos:column="3">break;<pos:position pos:line="4180" pos:column="9"/></break>
}<pos:position pos:line="4181" pos:column="2"/></block>

<comment type="block" pos:line="4183" pos:column="1">/* Opcode: Rowid P1 P2 * * *
** Synopsis: r[P2]=rowid
**
** Store in register P2 an integer which is the key of the table entry that
** P1 is currently point to.
**
** P1 can be either an ordinary table or a virtual table.  There used to
** be a separate OP_VRowid opcode for use with virtual tables, but this
** one opcode now works for both table types.
*/</comment>
<case pos:line="4193" pos:column="1">case <expr><name pos:line="4193" pos:column="6">OP_Rowid<pos:position pos:line="4193" pos:column="14"/></name></expr>:<pos:position pos:line="4193" pos:column="15"/></case> <block pos:line="4193" pos:column="16">{                 <comment type="block" pos:line="4193" pos:column="34">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="4194" pos:column="3">VdbeCursor<pos:position pos:line="4194" pos:column="13"/></name> <modifier pos:line="4194" pos:column="14">*<pos:position pos:line="4194" pos:column="15"/></modifier></type><name pos:line="4194" pos:column="15">pC<pos:position pos:line="4194" pos:column="17"/></name></decl>;<pos:position pos:line="4194" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4195" pos:column="3">i64<pos:position pos:line="4195" pos:column="6"/></name></type> <name pos:line="4195" pos:column="7">v<pos:position pos:line="4195" pos:column="8"/></name></decl>;<pos:position pos:line="4195" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4196" pos:column="3">sqlite3_vtab<pos:position pos:line="4196" pos:column="15"/></name> <modifier pos:line="4196" pos:column="16">*<pos:position pos:line="4196" pos:column="17"/></modifier></type><name pos:line="4196" pos:column="17">pVtab<pos:position pos:line="4196" pos:column="22"/></name></decl>;<pos:position pos:line="4196" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4197" pos:column="3">const<pos:position pos:line="4197" pos:column="8"/></specifier> <name pos:line="4197" pos:column="9">sqlite3_module<pos:position pos:line="4197" pos:column="23"/></name> <modifier pos:line="4197" pos:column="24">*<pos:position pos:line="4197" pos:column="25"/></modifier></type><name pos:line="4197" pos:column="25">pModule<pos:position pos:line="4197" pos:column="32"/></name></decl>;<pos:position pos:line="4197" pos:column="33"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4199" pos:column="3">pOut<pos:position pos:line="4199" pos:column="7"/></name> <operator pos:line="4199" pos:column="8">=<pos:position pos:line="4199" pos:column="9"/></operator> <call><name pos:line="4199" pos:column="10">out2Prerelease<pos:position pos:line="4199" pos:column="24"/></name><argument_list pos:line="4199" pos:column="24">(<argument><expr><name pos:line="4199" pos:column="25">p<pos:position pos:line="4199" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="4199" pos:column="28">pOp<pos:position pos:line="4199" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4199" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4199" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4200" pos:column="3">assert<pos:position pos:line="4200" pos:column="9"/></name><argument_list pos:line="4200" pos:column="9">( <argument><expr><name><name pos:line="4200" pos:column="11">pOp<pos:position pos:line="4200" pos:column="14"/></name><operator pos:line="4200" pos:column="14">-&gt;<pos:position pos:line="4200" pos:column="19"/></operator><name pos:line="4200" pos:column="16">p1<pos:position pos:line="4200" pos:column="18"/></name></name><operator pos:line="4200" pos:column="18">&gt;=<pos:position pos:line="4200" pos:column="23"/></operator><literal type="number" pos:line="4200" pos:column="20">0<pos:position pos:line="4200" pos:column="21"/></literal> <operator pos:line="4200" pos:column="22">&amp;&amp;<pos:position pos:line="4200" pos:column="32"/></operator> <name><name pos:line="4200" pos:column="25">pOp<pos:position pos:line="4200" pos:column="28"/></name><operator pos:line="4200" pos:column="28">-&gt;<pos:position pos:line="4200" pos:column="33"/></operator><name pos:line="4200" pos:column="30">p1<pos:position pos:line="4200" pos:column="32"/></name></name><operator pos:line="4200" pos:column="32">&lt;<pos:position pos:line="4200" pos:column="36"/></operator><name><name pos:line="4200" pos:column="33">p<pos:position pos:line="4200" pos:column="34"/></name><operator pos:line="4200" pos:column="34">-&gt;<pos:position pos:line="4200" pos:column="39"/></operator><name pos:line="4200" pos:column="36">nCursor<pos:position pos:line="4200" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4200" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4200" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4201" pos:column="3">pC<pos:position pos:line="4201" pos:column="5"/></name> <operator pos:line="4201" pos:column="6">=<pos:position pos:line="4201" pos:column="7"/></operator> <name><name pos:line="4201" pos:column="8">p<pos:position pos:line="4201" pos:column="9"/></name><operator pos:line="4201" pos:column="9">-&gt;<pos:position pos:line="4201" pos:column="14"/></operator><name pos:line="4201" pos:column="11">apCsr<pos:position pos:line="4201" pos:column="16"/></name><index pos:line="4201" pos:column="16">[<expr><name><name pos:line="4201" pos:column="17">pOp<pos:position pos:line="4201" pos:column="20"/></name><operator pos:line="4201" pos:column="20">-&gt;<pos:position pos:line="4201" pos:column="25"/></operator><name pos:line="4201" pos:column="22">p1<pos:position pos:line="4201" pos:column="24"/></name></name></expr>]<pos:position pos:line="4201" pos:column="25"/></index></name></expr>;<pos:position pos:line="4201" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4202" pos:column="3">assert<pos:position pos:line="4202" pos:column="9"/></name><argument_list pos:line="4202" pos:column="9">( <argument><expr><name pos:line="4202" pos:column="11">pC<pos:position pos:line="4202" pos:column="13"/></name><operator pos:line="4202" pos:column="13">!=<pos:position pos:line="4202" pos:column="15"/></operator><literal type="number" pos:line="4202" pos:column="15">0<pos:position pos:line="4202" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4202" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4202" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4203" pos:column="3">assert<pos:position pos:line="4203" pos:column="9"/></name><argument_list pos:line="4203" pos:column="9">( <argument><expr><name><name pos:line="4203" pos:column="11">pC<pos:position pos:line="4203" pos:column="13"/></name><operator pos:line="4203" pos:column="13">-&gt;<pos:position pos:line="4203" pos:column="18"/></operator><name pos:line="4203" pos:column="15">eCurType<pos:position pos:line="4203" pos:column="23"/></name></name><operator pos:line="4203" pos:column="23">!=<pos:position pos:line="4203" pos:column="25"/></operator><name pos:line="4203" pos:column="25">CURTYPE_PSEUDO<pos:position pos:line="4203" pos:column="39"/></name> <operator pos:line="4203" pos:column="40">||<pos:position pos:line="4203" pos:column="42"/></operator> <name><name pos:line="4203" pos:column="43">pC<pos:position pos:line="4203" pos:column="45"/></name><operator pos:line="4203" pos:column="45">-&gt;<pos:position pos:line="4203" pos:column="50"/></operator><name pos:line="4203" pos:column="47">nullRow<pos:position pos:line="4203" pos:column="54"/></name></name></expr></argument> )<pos:position pos:line="4203" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4203" pos:column="57"/></expr_stmt>
  <if pos:line="4204" pos:column="3">if<condition pos:line="4204" pos:column="5">( <expr><name><name pos:line="4204" pos:column="7">pC<pos:position pos:line="4204" pos:column="9"/></name><operator pos:line="4204" pos:column="9">-&gt;<pos:position pos:line="4204" pos:column="14"/></operator><name pos:line="4204" pos:column="11">nullRow<pos:position pos:line="4204" pos:column="18"/></name></name></expr> )<pos:position pos:line="4204" pos:column="20"/></condition><then><block pos:line="4204" pos:column="20">{
    <expr_stmt><expr><name><name pos:line="4205" pos:column="5">pOut<pos:position pos:line="4205" pos:column="9"/></name><operator pos:line="4205" pos:column="9">-&gt;<pos:position pos:line="4205" pos:column="14"/></operator><name pos:line="4205" pos:column="11">flags<pos:position pos:line="4205" pos:column="16"/></name></name> <operator pos:line="4205" pos:column="17">=<pos:position pos:line="4205" pos:column="18"/></operator> <name pos:line="4205" pos:column="19">MEM_Null<pos:position pos:line="4205" pos:column="27"/></name></expr>;<pos:position pos:line="4205" pos:column="28"/></expr_stmt>
    <break pos:line="4206" pos:column="5">break;<pos:position pos:line="4206" pos:column="11"/></break>
  }<pos:position pos:line="4207" pos:column="4"/></block></then><elseif pos:line="4207" pos:column="4">else <if pos:line="4207" pos:column="9">if<condition pos:line="4207" pos:column="11">( <expr><name><name pos:line="4207" pos:column="13">pC<pos:position pos:line="4207" pos:column="15"/></name><operator pos:line="4207" pos:column="15">-&gt;<pos:position pos:line="4207" pos:column="20"/></operator><name pos:line="4207" pos:column="17">deferredMoveto<pos:position pos:line="4207" pos:column="31"/></name></name></expr> )<pos:position pos:line="4207" pos:column="33"/></condition><then><block pos:line="4207" pos:column="33">{
    <expr_stmt><expr><name pos:line="4208" pos:column="5">v<pos:position pos:line="4208" pos:column="6"/></name> <operator pos:line="4208" pos:column="7">=<pos:position pos:line="4208" pos:column="8"/></operator> <name><name pos:line="4208" pos:column="9">pC<pos:position pos:line="4208" pos:column="11"/></name><operator pos:line="4208" pos:column="11">-&gt;<pos:position pos:line="4208" pos:column="16"/></operator><name pos:line="4208" pos:column="13">movetoTarget<pos:position pos:line="4208" pos:column="25"/></name></name></expr>;<pos:position pos:line="4208" pos:column="26"/></expr_stmt>
<cpp:ifndef pos:line="4209" pos:column="1">#<cpp:directive pos:line="4209" pos:column="2">ifndef<pos:position pos:line="4209" pos:column="8"/></cpp:directive> <name pos:line="4209" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4209" pos:column="33"/></name></cpp:ifndef>
  }<pos:position pos:line="4210" pos:column="4"/></block></then></if></elseif><elseif pos:line="4210" pos:column="4">else <if pos:line="4210" pos:column="9">if<condition pos:line="4210" pos:column="11">( <expr><name><name pos:line="4210" pos:column="13">pC<pos:position pos:line="4210" pos:column="15"/></name><operator pos:line="4210" pos:column="15">-&gt;<pos:position pos:line="4210" pos:column="20"/></operator><name pos:line="4210" pos:column="17">eCurType<pos:position pos:line="4210" pos:column="25"/></name></name><operator pos:line="4210" pos:column="25">==<pos:position pos:line="4210" pos:column="27"/></operator><name pos:line="4210" pos:column="27">CURTYPE_VTAB<pos:position pos:line="4210" pos:column="39"/></name></expr> )<pos:position pos:line="4210" pos:column="41"/></condition><then><block pos:line="4210" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="4211" pos:column="5">assert<pos:position pos:line="4211" pos:column="11"/></name><argument_list pos:line="4211" pos:column="11">( <argument><expr><name><name pos:line="4211" pos:column="13">pC<pos:position pos:line="4211" pos:column="15"/></name><operator pos:line="4211" pos:column="15">-&gt;<pos:position pos:line="4211" pos:column="20"/></operator><name pos:line="4211" pos:column="17">uc<pos:position pos:line="4211" pos:column="19"/></name><operator pos:line="4211" pos:column="19">.<pos:position pos:line="4211" pos:column="20"/></operator><name pos:line="4211" pos:column="20">pVCur<pos:position pos:line="4211" pos:column="25"/></name></name><operator pos:line="4211" pos:column="25">!=<pos:position pos:line="4211" pos:column="27"/></operator><literal type="number" pos:line="4211" pos:column="27">0<pos:position pos:line="4211" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="4211" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4211" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4212" pos:column="5">pVtab<pos:position pos:line="4212" pos:column="10"/></name> <operator pos:line="4212" pos:column="11">=<pos:position pos:line="4212" pos:column="12"/></operator> <name><name pos:line="4212" pos:column="13">pC<pos:position pos:line="4212" pos:column="15"/></name><operator pos:line="4212" pos:column="15">-&gt;<pos:position pos:line="4212" pos:column="20"/></operator><name pos:line="4212" pos:column="17">uc<pos:position pos:line="4212" pos:column="19"/></name><operator pos:line="4212" pos:column="19">.<pos:position pos:line="4212" pos:column="20"/></operator><name pos:line="4212" pos:column="20">pVCur<pos:position pos:line="4212" pos:column="25"/></name><operator pos:line="4212" pos:column="25">-&gt;<pos:position pos:line="4212" pos:column="30"/></operator><name pos:line="4212" pos:column="27">pVtab<pos:position pos:line="4212" pos:column="32"/></name></name></expr>;<pos:position pos:line="4212" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4213" pos:column="5">pModule<pos:position pos:line="4213" pos:column="12"/></name> <operator pos:line="4213" pos:column="13">=<pos:position pos:line="4213" pos:column="14"/></operator> <name><name pos:line="4213" pos:column="15">pVtab<pos:position pos:line="4213" pos:column="20"/></name><operator pos:line="4213" pos:column="20">-&gt;<pos:position pos:line="4213" pos:column="25"/></operator><name pos:line="4213" pos:column="22">pModule<pos:position pos:line="4213" pos:column="29"/></name></name></expr>;<pos:position pos:line="4213" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4214" pos:column="5">assert<pos:position pos:line="4214" pos:column="11"/></name><argument_list pos:line="4214" pos:column="11">( <argument><expr><name><name pos:line="4214" pos:column="13">pModule<pos:position pos:line="4214" pos:column="20"/></name><operator pos:line="4214" pos:column="20">-&gt;<pos:position pos:line="4214" pos:column="25"/></operator><name pos:line="4214" pos:column="22">xRowid<pos:position pos:line="4214" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="4214" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4214" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4215" pos:column="5">rc<pos:position pos:line="4215" pos:column="7"/></name> <operator pos:line="4215" pos:column="8">=<pos:position pos:line="4215" pos:column="9"/></operator> <call><name><name pos:line="4215" pos:column="10">pModule<pos:position pos:line="4215" pos:column="17"/></name><operator pos:line="4215" pos:column="17">-&gt;<pos:position pos:line="4215" pos:column="22"/></operator><name pos:line="4215" pos:column="19">xRowid<pos:position pos:line="4215" pos:column="25"/></name></name><argument_list pos:line="4215" pos:column="25">(<argument><expr><name><name pos:line="4215" pos:column="26">pC<pos:position pos:line="4215" pos:column="28"/></name><operator pos:line="4215" pos:column="28">-&gt;<pos:position pos:line="4215" pos:column="33"/></operator><name pos:line="4215" pos:column="30">uc<pos:position pos:line="4215" pos:column="32"/></name><operator pos:line="4215" pos:column="32">.<pos:position pos:line="4215" pos:column="33"/></operator><name pos:line="4215" pos:column="33">pVCur<pos:position pos:line="4215" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="4215" pos:column="40">&amp;<pos:position pos:line="4215" pos:column="45"/></operator><name pos:line="4215" pos:column="41">v<pos:position pos:line="4215" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4215" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4215" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4216" pos:column="5">sqlite3VtabImportErrmsg<pos:position pos:line="4216" pos:column="28"/></name><argument_list pos:line="4216" pos:column="28">(<argument><expr><name pos:line="4216" pos:column="29">p<pos:position pos:line="4216" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="4216" pos:column="32">pVtab<pos:position pos:line="4216" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4216" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4216" pos:column="39"/></expr_stmt>
    <if pos:line="4217" pos:column="5">if<condition pos:line="4217" pos:column="7">( <expr><name pos:line="4217" pos:column="9">rc<pos:position pos:line="4217" pos:column="11"/></name></expr> )<pos:position pos:line="4217" pos:column="13"/></condition><then pos:line="4217" pos:column="13"> <block type="pseudo"><goto pos:line="4217" pos:column="14">goto <name pos:line="4217" pos:column="19">abort_due_to_error<pos:position pos:line="4217" pos:column="37"/></name>;<pos:position pos:line="4217" pos:column="38"/></goto></block></then></if>
<cpp:endif pos:line="4218" pos:column="1">#<cpp:directive pos:line="4218" pos:column="2">endif<pos:position pos:line="4218" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4218" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>
  }<pos:position pos:line="4219" pos:column="4"/></block></then></if></elseif><else pos:line="4219" pos:column="4">else<block pos:line="4219" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="4220" pos:column="5">assert<pos:position pos:line="4220" pos:column="11"/></name><argument_list pos:line="4220" pos:column="11">( <argument><expr><name><name pos:line="4220" pos:column="13">pC<pos:position pos:line="4220" pos:column="15"/></name><operator pos:line="4220" pos:column="15">-&gt;<pos:position pos:line="4220" pos:column="20"/></operator><name pos:line="4220" pos:column="17">eCurType<pos:position pos:line="4220" pos:column="25"/></name></name><operator pos:line="4220" pos:column="25">==<pos:position pos:line="4220" pos:column="27"/></operator><name pos:line="4220" pos:column="27">CURTYPE_BTREE<pos:position pos:line="4220" pos:column="40"/></name></expr></argument> )<pos:position pos:line="4220" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4220" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4221" pos:column="5">assert<pos:position pos:line="4221" pos:column="11"/></name><argument_list pos:line="4221" pos:column="11">( <argument><expr><name><name pos:line="4221" pos:column="13">pC<pos:position pos:line="4221" pos:column="15"/></name><operator pos:line="4221" pos:column="15">-&gt;<pos:position pos:line="4221" pos:column="20"/></operator><name pos:line="4221" pos:column="17">uc<pos:position pos:line="4221" pos:column="19"/></name><operator pos:line="4221" pos:column="19">.<pos:position pos:line="4221" pos:column="20"/></operator><name pos:line="4221" pos:column="20">pCursor<pos:position pos:line="4221" pos:column="27"/></name></name><operator pos:line="4221" pos:column="27">!=<pos:position pos:line="4221" pos:column="29"/></operator><literal type="number" pos:line="4221" pos:column="29">0<pos:position pos:line="4221" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="4221" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4221" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4222" pos:column="5">rc<pos:position pos:line="4222" pos:column="7"/></name> <operator pos:line="4222" pos:column="8">=<pos:position pos:line="4222" pos:column="9"/></operator> <call><name pos:line="4222" pos:column="10">sqlite3VdbeCursorRestore<pos:position pos:line="4222" pos:column="34"/></name><argument_list pos:line="4222" pos:column="34">(<argument><expr><name pos:line="4222" pos:column="35">pC<pos:position pos:line="4222" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4222" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4222" pos:column="39"/></expr_stmt>
    <if pos:line="4223" pos:column="5">if<condition pos:line="4223" pos:column="7">( <expr><name pos:line="4223" pos:column="9">rc<pos:position pos:line="4223" pos:column="11"/></name></expr> )<pos:position pos:line="4223" pos:column="13"/></condition><then pos:line="4223" pos:column="13"> <block type="pseudo"><goto pos:line="4223" pos:column="14">goto <name pos:line="4223" pos:column="19">abort_due_to_error<pos:position pos:line="4223" pos:column="37"/></name>;<pos:position pos:line="4223" pos:column="38"/></goto></block></then></if>
    <if pos:line="4224" pos:column="5">if<condition pos:line="4224" pos:column="7">( <expr><name><name pos:line="4224" pos:column="9">pC<pos:position pos:line="4224" pos:column="11"/></name><operator pos:line="4224" pos:column="11">-&gt;<pos:position pos:line="4224" pos:column="16"/></operator><name pos:line="4224" pos:column="13">nullRow<pos:position pos:line="4224" pos:column="20"/></name></name></expr> )<pos:position pos:line="4224" pos:column="22"/></condition><then><block pos:line="4224" pos:column="22">{
      <expr_stmt><expr><name><name pos:line="4225" pos:column="7">pOut<pos:position pos:line="4225" pos:column="11"/></name><operator pos:line="4225" pos:column="11">-&gt;<pos:position pos:line="4225" pos:column="16"/></operator><name pos:line="4225" pos:column="13">flags<pos:position pos:line="4225" pos:column="18"/></name></name> <operator pos:line="4225" pos:column="19">=<pos:position pos:line="4225" pos:column="20"/></operator> <name pos:line="4225" pos:column="21">MEM_Null<pos:position pos:line="4225" pos:column="29"/></name></expr>;<pos:position pos:line="4225" pos:column="30"/></expr_stmt>
      <break pos:line="4226" pos:column="7">break;<pos:position pos:line="4226" pos:column="13"/></break>
    }<pos:position pos:line="4227" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="4228" pos:column="5">v<pos:position pos:line="4228" pos:column="6"/></name> <operator pos:line="4228" pos:column="7">=<pos:position pos:line="4228" pos:column="8"/></operator> <call><name pos:line="4228" pos:column="9">sqlite3BtreeIntegerKey<pos:position pos:line="4228" pos:column="31"/></name><argument_list pos:line="4228" pos:column="31">(<argument><expr><name><name pos:line="4228" pos:column="32">pC<pos:position pos:line="4228" pos:column="34"/></name><operator pos:line="4228" pos:column="34">-&gt;<pos:position pos:line="4228" pos:column="39"/></operator><name pos:line="4228" pos:column="36">uc<pos:position pos:line="4228" pos:column="38"/></name><operator pos:line="4228" pos:column="38">.<pos:position pos:line="4228" pos:column="39"/></operator><name pos:line="4228" pos:column="39">pCursor<pos:position pos:line="4228" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="4228" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="4228" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="4229" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="4230" pos:column="3">pOut<pos:position pos:line="4230" pos:column="7"/></name><operator pos:line="4230" pos:column="7">-&gt;<pos:position pos:line="4230" pos:column="12"/></operator><name pos:line="4230" pos:column="9">u<pos:position pos:line="4230" pos:column="10"/></name><operator pos:line="4230" pos:column="10">.<pos:position pos:line="4230" pos:column="11"/></operator><name pos:line="4230" pos:column="11">i<pos:position pos:line="4230" pos:column="12"/></name></name> <operator pos:line="4230" pos:column="13">=<pos:position pos:line="4230" pos:column="14"/></operator> <name pos:line="4230" pos:column="15">v<pos:position pos:line="4230" pos:column="16"/></name></expr>;<pos:position pos:line="4230" pos:column="17"/></expr_stmt>
  <break pos:line="4231" pos:column="3">break;<pos:position pos:line="4231" pos:column="9"/></break>
}<pos:position pos:line="4232" pos:column="2"/></block>

<comment type="block" pos:line="4234" pos:column="1">/* Opcode: NullRow P1 * * * *
**
** Move the cursor P1 to a null row.  Any OP_Column operations
** that occur while the cursor is on the null row will always
** write a NULL.
*/</comment>
<case pos:line="4240" pos:column="1">case <expr><name pos:line="4240" pos:column="6">OP_NullRow<pos:position pos:line="4240" pos:column="16"/></name></expr>:<pos:position pos:line="4240" pos:column="17"/></case> <block pos:line="4240" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="4241" pos:column="3">VdbeCursor<pos:position pos:line="4241" pos:column="13"/></name> <modifier pos:line="4241" pos:column="14">*<pos:position pos:line="4241" pos:column="15"/></modifier></type><name pos:line="4241" pos:column="15">pC<pos:position pos:line="4241" pos:column="17"/></name></decl>;<pos:position pos:line="4241" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4243" pos:column="3">assert<pos:position pos:line="4243" pos:column="9"/></name><argument_list pos:line="4243" pos:column="9">( <argument><expr><name><name pos:line="4243" pos:column="11">pOp<pos:position pos:line="4243" pos:column="14"/></name><operator pos:line="4243" pos:column="14">-&gt;<pos:position pos:line="4243" pos:column="19"/></operator><name pos:line="4243" pos:column="16">p1<pos:position pos:line="4243" pos:column="18"/></name></name><operator pos:line="4243" pos:column="18">&gt;=<pos:position pos:line="4243" pos:column="23"/></operator><literal type="number" pos:line="4243" pos:column="20">0<pos:position pos:line="4243" pos:column="21"/></literal> <operator pos:line="4243" pos:column="22">&amp;&amp;<pos:position pos:line="4243" pos:column="32"/></operator> <name><name pos:line="4243" pos:column="25">pOp<pos:position pos:line="4243" pos:column="28"/></name><operator pos:line="4243" pos:column="28">-&gt;<pos:position pos:line="4243" pos:column="33"/></operator><name pos:line="4243" pos:column="30">p1<pos:position pos:line="4243" pos:column="32"/></name></name><operator pos:line="4243" pos:column="32">&lt;<pos:position pos:line="4243" pos:column="36"/></operator><name><name pos:line="4243" pos:column="33">p<pos:position pos:line="4243" pos:column="34"/></name><operator pos:line="4243" pos:column="34">-&gt;<pos:position pos:line="4243" pos:column="39"/></operator><name pos:line="4243" pos:column="36">nCursor<pos:position pos:line="4243" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4243" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4243" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4244" pos:column="3">pC<pos:position pos:line="4244" pos:column="5"/></name> <operator pos:line="4244" pos:column="6">=<pos:position pos:line="4244" pos:column="7"/></operator> <name><name pos:line="4244" pos:column="8">p<pos:position pos:line="4244" pos:column="9"/></name><operator pos:line="4244" pos:column="9">-&gt;<pos:position pos:line="4244" pos:column="14"/></operator><name pos:line="4244" pos:column="11">apCsr<pos:position pos:line="4244" pos:column="16"/></name><index pos:line="4244" pos:column="16">[<expr><name><name pos:line="4244" pos:column="17">pOp<pos:position pos:line="4244" pos:column="20"/></name><operator pos:line="4244" pos:column="20">-&gt;<pos:position pos:line="4244" pos:column="25"/></operator><name pos:line="4244" pos:column="22">p1<pos:position pos:line="4244" pos:column="24"/></name></name></expr>]<pos:position pos:line="4244" pos:column="25"/></index></name></expr>;<pos:position pos:line="4244" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4245" pos:column="3">assert<pos:position pos:line="4245" pos:column="9"/></name><argument_list pos:line="4245" pos:column="9">( <argument><expr><name pos:line="4245" pos:column="11">pC<pos:position pos:line="4245" pos:column="13"/></name><operator pos:line="4245" pos:column="13">!=<pos:position pos:line="4245" pos:column="15"/></operator><literal type="number" pos:line="4245" pos:column="15">0<pos:position pos:line="4245" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4245" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4245" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4246" pos:column="3">pC<pos:position pos:line="4246" pos:column="5"/></name><operator pos:line="4246" pos:column="5">-&gt;<pos:position pos:line="4246" pos:column="10"/></operator><name pos:line="4246" pos:column="7">nullRow<pos:position pos:line="4246" pos:column="14"/></name></name> <operator pos:line="4246" pos:column="15">=<pos:position pos:line="4246" pos:column="16"/></operator> <literal type="number" pos:line="4246" pos:column="17">1<pos:position pos:line="4246" pos:column="18"/></literal></expr>;<pos:position pos:line="4246" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4247" pos:column="3">pC<pos:position pos:line="4247" pos:column="5"/></name><operator pos:line="4247" pos:column="5">-&gt;<pos:position pos:line="4247" pos:column="10"/></operator><name pos:line="4247" pos:column="7">cacheStatus<pos:position pos:line="4247" pos:column="18"/></name></name> <operator pos:line="4247" pos:column="19">=<pos:position pos:line="4247" pos:column="20"/></operator> <name pos:line="4247" pos:column="21">CACHE_STALE<pos:position pos:line="4247" pos:column="32"/></name></expr>;<pos:position pos:line="4247" pos:column="33"/></expr_stmt>
  <if pos:line="4248" pos:column="3">if<condition pos:line="4248" pos:column="5">( <expr><name><name pos:line="4248" pos:column="7">pC<pos:position pos:line="4248" pos:column="9"/></name><operator pos:line="4248" pos:column="9">-&gt;<pos:position pos:line="4248" pos:column="14"/></operator><name pos:line="4248" pos:column="11">eCurType<pos:position pos:line="4248" pos:column="19"/></name></name><operator pos:line="4248" pos:column="19">==<pos:position pos:line="4248" pos:column="21"/></operator><name pos:line="4248" pos:column="21">CURTYPE_BTREE<pos:position pos:line="4248" pos:column="34"/></name></expr> )<pos:position pos:line="4248" pos:column="36"/></condition><then><block pos:line="4248" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="4249" pos:column="5">assert<pos:position pos:line="4249" pos:column="11"/></name><argument_list pos:line="4249" pos:column="11">( <argument><expr><name><name pos:line="4249" pos:column="13">pC<pos:position pos:line="4249" pos:column="15"/></name><operator pos:line="4249" pos:column="15">-&gt;<pos:position pos:line="4249" pos:column="20"/></operator><name pos:line="4249" pos:column="17">uc<pos:position pos:line="4249" pos:column="19"/></name><operator pos:line="4249" pos:column="19">.<pos:position pos:line="4249" pos:column="20"/></operator><name pos:line="4249" pos:column="20">pCursor<pos:position pos:line="4249" pos:column="27"/></name></name><operator pos:line="4249" pos:column="27">!=<pos:position pos:line="4249" pos:column="29"/></operator><literal type="number" pos:line="4249" pos:column="29">0<pos:position pos:line="4249" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="4249" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4249" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4250" pos:column="5">sqlite3BtreeClearCursor<pos:position pos:line="4250" pos:column="28"/></name><argument_list pos:line="4250" pos:column="28">(<argument><expr><name><name pos:line="4250" pos:column="29">pC<pos:position pos:line="4250" pos:column="31"/></name><operator pos:line="4250" pos:column="31">-&gt;<pos:position pos:line="4250" pos:column="36"/></operator><name pos:line="4250" pos:column="33">uc<pos:position pos:line="4250" pos:column="35"/></name><operator pos:line="4250" pos:column="35">.<pos:position pos:line="4250" pos:column="36"/></operator><name pos:line="4250" pos:column="36">pCursor<pos:position pos:line="4250" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="4250" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4250" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="4251" pos:column="4"/></block></then></if>
  <break pos:line="4252" pos:column="3">break;<pos:position pos:line="4252" pos:column="9"/></break>
}<pos:position pos:line="4253" pos:column="2"/></block>

<comment type="block" pos:line="4255" pos:column="1">/* Opcode: SeekEnd P1 * * * *
**
** Position cursor P1 at the end of the btree for the purpose of
** appending a new entry onto the btree.
**
** It is assumed that the cursor is used only for appending and so
** if the cursor is valid, then the cursor must already be pointing
** at the end of the btree and so no changes are made to
** the cursor.
*/</comment>
<comment type="block" pos:line="4265" pos:column="1">/* Opcode: Last P1 P2 * * *
**
** The next use of the Rowid or Column or Prev instruction for P1 
** will refer to the last entry in the database table or index.
** If the table or index is empty and P2&gt;0, then jump immediately to P2.
** If P2 is 0 or if the table or index is not empty, fall through
** to the following instruction.
**
** This opcode leaves the cursor configured to move in reverse order,
** from the end toward the beginning.  In other words, the cursor is
** configured to use Prev, not Next.
*/</comment>
<case pos:line="4277" pos:column="1">case <expr><name pos:line="4277" pos:column="6">OP_SeekEnd<pos:position pos:line="4277" pos:column="16"/></name></expr>:<pos:position pos:line="4277" pos:column="17"/></case>
<case pos:line="4278" pos:column="1">case <expr><name pos:line="4278" pos:column="6">OP_Last<pos:position pos:line="4278" pos:column="13"/></name></expr>:<pos:position pos:line="4278" pos:column="14"/></case> <block pos:line="4278" pos:column="15">{        <comment type="block" pos:line="4278" pos:column="24">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="4279" pos:column="3">VdbeCursor<pos:position pos:line="4279" pos:column="13"/></name> <modifier pos:line="4279" pos:column="14">*<pos:position pos:line="4279" pos:column="15"/></modifier></type><name pos:line="4279" pos:column="15">pC<pos:position pos:line="4279" pos:column="17"/></name></decl>;<pos:position pos:line="4279" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4280" pos:column="3">BtCursor<pos:position pos:line="4280" pos:column="11"/></name> <modifier pos:line="4280" pos:column="12">*<pos:position pos:line="4280" pos:column="13"/></modifier></type><name pos:line="4280" pos:column="13">pCrsr<pos:position pos:line="4280" pos:column="18"/></name></decl>;<pos:position pos:line="4280" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4281" pos:column="3">int<pos:position pos:line="4281" pos:column="6"/></name></type> <name pos:line="4281" pos:column="7">res<pos:position pos:line="4281" pos:column="10"/></name></decl>;<pos:position pos:line="4281" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4283" pos:column="3">assert<pos:position pos:line="4283" pos:column="9"/></name><argument_list pos:line="4283" pos:column="9">( <argument><expr><name><name pos:line="4283" pos:column="11">pOp<pos:position pos:line="4283" pos:column="14"/></name><operator pos:line="4283" pos:column="14">-&gt;<pos:position pos:line="4283" pos:column="19"/></operator><name pos:line="4283" pos:column="16">p1<pos:position pos:line="4283" pos:column="18"/></name></name><operator pos:line="4283" pos:column="18">&gt;=<pos:position pos:line="4283" pos:column="23"/></operator><literal type="number" pos:line="4283" pos:column="20">0<pos:position pos:line="4283" pos:column="21"/></literal> <operator pos:line="4283" pos:column="22">&amp;&amp;<pos:position pos:line="4283" pos:column="32"/></operator> <name><name pos:line="4283" pos:column="25">pOp<pos:position pos:line="4283" pos:column="28"/></name><operator pos:line="4283" pos:column="28">-&gt;<pos:position pos:line="4283" pos:column="33"/></operator><name pos:line="4283" pos:column="30">p1<pos:position pos:line="4283" pos:column="32"/></name></name><operator pos:line="4283" pos:column="32">&lt;<pos:position pos:line="4283" pos:column="36"/></operator><name><name pos:line="4283" pos:column="33">p<pos:position pos:line="4283" pos:column="34"/></name><operator pos:line="4283" pos:column="34">-&gt;<pos:position pos:line="4283" pos:column="39"/></operator><name pos:line="4283" pos:column="36">nCursor<pos:position pos:line="4283" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4283" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4283" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4284" pos:column="3">pC<pos:position pos:line="4284" pos:column="5"/></name> <operator pos:line="4284" pos:column="6">=<pos:position pos:line="4284" pos:column="7"/></operator> <name><name pos:line="4284" pos:column="8">p<pos:position pos:line="4284" pos:column="9"/></name><operator pos:line="4284" pos:column="9">-&gt;<pos:position pos:line="4284" pos:column="14"/></operator><name pos:line="4284" pos:column="11">apCsr<pos:position pos:line="4284" pos:column="16"/></name><index pos:line="4284" pos:column="16">[<expr><name><name pos:line="4284" pos:column="17">pOp<pos:position pos:line="4284" pos:column="20"/></name><operator pos:line="4284" pos:column="20">-&gt;<pos:position pos:line="4284" pos:column="25"/></operator><name pos:line="4284" pos:column="22">p1<pos:position pos:line="4284" pos:column="24"/></name></name></expr>]<pos:position pos:line="4284" pos:column="25"/></index></name></expr>;<pos:position pos:line="4284" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4285" pos:column="3">assert<pos:position pos:line="4285" pos:column="9"/></name><argument_list pos:line="4285" pos:column="9">( <argument><expr><name pos:line="4285" pos:column="11">pC<pos:position pos:line="4285" pos:column="13"/></name><operator pos:line="4285" pos:column="13">!=<pos:position pos:line="4285" pos:column="15"/></operator><literal type="number" pos:line="4285" pos:column="15">0<pos:position pos:line="4285" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4285" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4285" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4286" pos:column="3">assert<pos:position pos:line="4286" pos:column="9"/></name><argument_list pos:line="4286" pos:column="9">( <argument><expr><name><name pos:line="4286" pos:column="11">pC<pos:position pos:line="4286" pos:column="13"/></name><operator pos:line="4286" pos:column="13">-&gt;<pos:position pos:line="4286" pos:column="18"/></operator><name pos:line="4286" pos:column="15">eCurType<pos:position pos:line="4286" pos:column="23"/></name></name><operator pos:line="4286" pos:column="23">==<pos:position pos:line="4286" pos:column="25"/></operator><name pos:line="4286" pos:column="25">CURTYPE_BTREE<pos:position pos:line="4286" pos:column="38"/></name></expr></argument> )<pos:position pos:line="4286" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4286" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4287" pos:column="3">pCrsr<pos:position pos:line="4287" pos:column="8"/></name> <operator pos:line="4287" pos:column="9">=<pos:position pos:line="4287" pos:column="10"/></operator> <name><name pos:line="4287" pos:column="11">pC<pos:position pos:line="4287" pos:column="13"/></name><operator pos:line="4287" pos:column="13">-&gt;<pos:position pos:line="4287" pos:column="18"/></operator><name pos:line="4287" pos:column="15">uc<pos:position pos:line="4287" pos:column="17"/></name><operator pos:line="4287" pos:column="17">.<pos:position pos:line="4287" pos:column="18"/></operator><name pos:line="4287" pos:column="18">pCursor<pos:position pos:line="4287" pos:column="25"/></name></name></expr>;<pos:position pos:line="4287" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4288" pos:column="3">res<pos:position pos:line="4288" pos:column="6"/></name> <operator pos:line="4288" pos:column="7">=<pos:position pos:line="4288" pos:column="8"/></operator> <literal type="number" pos:line="4288" pos:column="9">0<pos:position pos:line="4288" pos:column="10"/></literal></expr>;<pos:position pos:line="4288" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4289" pos:column="3">assert<pos:position pos:line="4289" pos:column="9"/></name><argument_list pos:line="4289" pos:column="9">( <argument><expr><name pos:line="4289" pos:column="11">pCrsr<pos:position pos:line="4289" pos:column="16"/></name><operator pos:line="4289" pos:column="16">!=<pos:position pos:line="4289" pos:column="18"/></operator><literal type="number" pos:line="4289" pos:column="18">0<pos:position pos:line="4289" pos:column="19"/></literal></expr></argument> )<pos:position pos:line="4289" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="4289" pos:column="22"/></expr_stmt>
<cpp:ifdef pos:line="4290" pos:column="1">#<cpp:directive pos:line="4290" pos:column="2">ifdef<pos:position pos:line="4290" pos:column="7"/></cpp:directive> <name pos:line="4290" pos:column="8">SQLITE_DEBUG<pos:position pos:line="4290" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="4291" pos:column="3">pC<pos:position pos:line="4291" pos:column="5"/></name><operator pos:line="4291" pos:column="5">-&gt;<pos:position pos:line="4291" pos:column="10"/></operator><name pos:line="4291" pos:column="7">seekOp<pos:position pos:line="4291" pos:column="13"/></name></name> <operator pos:line="4291" pos:column="14">=<pos:position pos:line="4291" pos:column="15"/></operator> <name><name pos:line="4291" pos:column="16">pOp<pos:position pos:line="4291" pos:column="19"/></name><operator pos:line="4291" pos:column="19">-&gt;<pos:position pos:line="4291" pos:column="24"/></operator><name pos:line="4291" pos:column="21">opcode<pos:position pos:line="4291" pos:column="27"/></name></name></expr>;<pos:position pos:line="4291" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="4292" pos:column="1">#<cpp:directive pos:line="4292" pos:column="2">endif<pos:position pos:line="4292" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="4293" pos:column="3">if<condition pos:line="4293" pos:column="5">( <expr><name><name pos:line="4293" pos:column="7">pOp<pos:position pos:line="4293" pos:column="10"/></name><operator pos:line="4293" pos:column="10">-&gt;<pos:position pos:line="4293" pos:column="15"/></operator><name pos:line="4293" pos:column="12">opcode<pos:position pos:line="4293" pos:column="18"/></name></name><operator pos:line="4293" pos:column="18">==<pos:position pos:line="4293" pos:column="20"/></operator><name pos:line="4293" pos:column="20">OP_SeekEnd<pos:position pos:line="4293" pos:column="30"/></name></expr> )<pos:position pos:line="4293" pos:column="32"/></condition><then><block pos:line="4293" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="4294" pos:column="5">assert<pos:position pos:line="4294" pos:column="11"/></name><argument_list pos:line="4294" pos:column="11">( <argument><expr><name><name pos:line="4294" pos:column="13">pOp<pos:position pos:line="4294" pos:column="16"/></name><operator pos:line="4294" pos:column="16">-&gt;<pos:position pos:line="4294" pos:column="21"/></operator><name pos:line="4294" pos:column="18">p2<pos:position pos:line="4294" pos:column="20"/></name></name><operator pos:line="4294" pos:column="20">==<pos:position pos:line="4294" pos:column="22"/></operator><literal type="number" pos:line="4294" pos:column="22">0<pos:position pos:line="4294" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="4294" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4294" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4295" pos:column="5">pC<pos:position pos:line="4295" pos:column="7"/></name><operator pos:line="4295" pos:column="7">-&gt;<pos:position pos:line="4295" pos:column="12"/></operator><name pos:line="4295" pos:column="9">seekResult<pos:position pos:line="4295" pos:column="19"/></name></name> <operator pos:line="4295" pos:column="20">=<pos:position pos:line="4295" pos:column="21"/></operator> <operator pos:line="4295" pos:column="22">-<pos:position pos:line="4295" pos:column="23"/></operator><literal type="number" pos:line="4295" pos:column="23">1<pos:position pos:line="4295" pos:column="24"/></literal></expr>;<pos:position pos:line="4295" pos:column="25"/></expr_stmt>
    <if pos:line="4296" pos:column="5">if<condition pos:line="4296" pos:column="7">( <expr><call><name pos:line="4296" pos:column="9">sqlite3BtreeCursorIsValidNN<pos:position pos:line="4296" pos:column="36"/></name><argument_list pos:line="4296" pos:column="36">(<argument><expr><name pos:line="4296" pos:column="37">pCrsr<pos:position pos:line="4296" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4296" pos:column="43"/></argument_list></call></expr> )<pos:position pos:line="4296" pos:column="45"/></condition><then><block pos:line="4296" pos:column="45">{
      <break pos:line="4297" pos:column="7">break;<pos:position pos:line="4297" pos:column="13"/></break>
    }<pos:position pos:line="4298" pos:column="6"/></block></then></if>
  }<pos:position pos:line="4299" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="4300" pos:column="3">rc<pos:position pos:line="4300" pos:column="5"/></name> <operator pos:line="4300" pos:column="6">=<pos:position pos:line="4300" pos:column="7"/></operator> <call><name pos:line="4300" pos:column="8">sqlite3BtreeLast<pos:position pos:line="4300" pos:column="24"/></name><argument_list pos:line="4300" pos:column="24">(<argument><expr><name pos:line="4300" pos:column="25">pCrsr<pos:position pos:line="4300" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="4300" pos:column="32">&amp;<pos:position pos:line="4300" pos:column="37"/></operator><name pos:line="4300" pos:column="33">res<pos:position pos:line="4300" pos:column="36"/></name></expr></argument>)<pos:position pos:line="4300" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="4300" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4301" pos:column="3">pC<pos:position pos:line="4301" pos:column="5"/></name><operator pos:line="4301" pos:column="5">-&gt;<pos:position pos:line="4301" pos:column="10"/></operator><name pos:line="4301" pos:column="7">nullRow<pos:position pos:line="4301" pos:column="14"/></name></name> <operator pos:line="4301" pos:column="15">=<pos:position pos:line="4301" pos:column="16"/></operator> <operator pos:line="4301" pos:column="17">(<pos:position pos:line="4301" pos:column="18"/></operator><name pos:line="4301" pos:column="18">u8<pos:position pos:line="4301" pos:column="20"/></name><operator pos:line="4301" pos:column="20">)<pos:position pos:line="4301" pos:column="21"/></operator><name pos:line="4301" pos:column="21">res<pos:position pos:line="4301" pos:column="24"/></name></expr>;<pos:position pos:line="4301" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4302" pos:column="3">pC<pos:position pos:line="4302" pos:column="5"/></name><operator pos:line="4302" pos:column="5">-&gt;<pos:position pos:line="4302" pos:column="10"/></operator><name pos:line="4302" pos:column="7">deferredMoveto<pos:position pos:line="4302" pos:column="21"/></name></name> <operator pos:line="4302" pos:column="22">=<pos:position pos:line="4302" pos:column="23"/></operator> <literal type="number" pos:line="4302" pos:column="24">0<pos:position pos:line="4302" pos:column="25"/></literal></expr>;<pos:position pos:line="4302" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4303" pos:column="3">pC<pos:position pos:line="4303" pos:column="5"/></name><operator pos:line="4303" pos:column="5">-&gt;<pos:position pos:line="4303" pos:column="10"/></operator><name pos:line="4303" pos:column="7">cacheStatus<pos:position pos:line="4303" pos:column="18"/></name></name> <operator pos:line="4303" pos:column="19">=<pos:position pos:line="4303" pos:column="20"/></operator> <name pos:line="4303" pos:column="21">CACHE_STALE<pos:position pos:line="4303" pos:column="32"/></name></expr>;<pos:position pos:line="4303" pos:column="33"/></expr_stmt>
  <if pos:line="4304" pos:column="3">if<condition pos:line="4304" pos:column="5">( <expr><name pos:line="4304" pos:column="7">rc<pos:position pos:line="4304" pos:column="9"/></name></expr> )<pos:position pos:line="4304" pos:column="11"/></condition><then pos:line="4304" pos:column="11"> <block type="pseudo"><goto pos:line="4304" pos:column="12">goto <name pos:line="4304" pos:column="17">abort_due_to_error<pos:position pos:line="4304" pos:column="35"/></name>;<pos:position pos:line="4304" pos:column="36"/></goto></block></then></if>
  <if pos:line="4305" pos:column="3">if<condition pos:line="4305" pos:column="5">( <expr><name><name pos:line="4305" pos:column="7">pOp<pos:position pos:line="4305" pos:column="10"/></name><operator pos:line="4305" pos:column="10">-&gt;<pos:position pos:line="4305" pos:column="15"/></operator><name pos:line="4305" pos:column="12">p2<pos:position pos:line="4305" pos:column="14"/></name></name><operator pos:line="4305" pos:column="14">&gt;<pos:position pos:line="4305" pos:column="18"/></operator><literal type="number" pos:line="4305" pos:column="15">0<pos:position pos:line="4305" pos:column="16"/></literal></expr> )<pos:position pos:line="4305" pos:column="18"/></condition><then><block pos:line="4305" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="4306" pos:column="5">VdbeBranchTaken<pos:position pos:line="4306" pos:column="20"/></name><argument_list pos:line="4306" pos:column="20">(<argument><expr><name pos:line="4306" pos:column="21">res<pos:position pos:line="4306" pos:column="24"/></name><operator pos:line="4306" pos:column="24">!=<pos:position pos:line="4306" pos:column="26"/></operator><literal type="number" pos:line="4306" pos:column="26">0<pos:position pos:line="4306" pos:column="27"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4306" pos:column="28">2<pos:position pos:line="4306" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="4306" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4306" pos:column="31"/></expr_stmt>
    <if pos:line="4307" pos:column="5">if<condition pos:line="4307" pos:column="7">( <expr><name pos:line="4307" pos:column="9">res<pos:position pos:line="4307" pos:column="12"/></name></expr> )<pos:position pos:line="4307" pos:column="14"/></condition><then pos:line="4307" pos:column="14"> <block type="pseudo"><goto pos:line="4307" pos:column="15">goto <name pos:line="4307" pos:column="20">jump_to_p2<pos:position pos:line="4307" pos:column="30"/></name>;<pos:position pos:line="4307" pos:column="31"/></goto></block></then></if>
  }<pos:position pos:line="4308" pos:column="4"/></block></then></if>
  <break pos:line="4309" pos:column="3">break;<pos:position pos:line="4309" pos:column="9"/></break>
}<pos:position pos:line="4310" pos:column="2"/></block>

<comment type="block" pos:line="4312" pos:column="1">/* Opcode: IfSmaller P1 P2 P3 * *
**
** Estimate the number of rows in the table P1.  Jump to P2 if that
** estimate is less than approximately 2**(0.1*P3).
*/</comment>
<case pos:line="4317" pos:column="1">case <expr><name pos:line="4317" pos:column="6">OP_IfSmaller<pos:position pos:line="4317" pos:column="18"/></name></expr>:<pos:position pos:line="4317" pos:column="19"/></case> <block pos:line="4317" pos:column="20">{        <comment type="block" pos:line="4317" pos:column="29">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="4318" pos:column="3">VdbeCursor<pos:position pos:line="4318" pos:column="13"/></name> <modifier pos:line="4318" pos:column="14">*<pos:position pos:line="4318" pos:column="15"/></modifier></type><name pos:line="4318" pos:column="15">pC<pos:position pos:line="4318" pos:column="17"/></name></decl>;<pos:position pos:line="4318" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4319" pos:column="3">BtCursor<pos:position pos:line="4319" pos:column="11"/></name> <modifier pos:line="4319" pos:column="12">*<pos:position pos:line="4319" pos:column="13"/></modifier></type><name pos:line="4319" pos:column="13">pCrsr<pos:position pos:line="4319" pos:column="18"/></name></decl>;<pos:position pos:line="4319" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4320" pos:column="3">int<pos:position pos:line="4320" pos:column="6"/></name></type> <name pos:line="4320" pos:column="7">res<pos:position pos:line="4320" pos:column="10"/></name></decl>;<pos:position pos:line="4320" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4321" pos:column="3">i64<pos:position pos:line="4321" pos:column="6"/></name></type> <name pos:line="4321" pos:column="7">sz<pos:position pos:line="4321" pos:column="9"/></name></decl>;<pos:position pos:line="4321" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4323" pos:column="3">assert<pos:position pos:line="4323" pos:column="9"/></name><argument_list pos:line="4323" pos:column="9">( <argument><expr><name><name pos:line="4323" pos:column="11">pOp<pos:position pos:line="4323" pos:column="14"/></name><operator pos:line="4323" pos:column="14">-&gt;<pos:position pos:line="4323" pos:column="19"/></operator><name pos:line="4323" pos:column="16">p1<pos:position pos:line="4323" pos:column="18"/></name></name><operator pos:line="4323" pos:column="18">&gt;=<pos:position pos:line="4323" pos:column="23"/></operator><literal type="number" pos:line="4323" pos:column="20">0<pos:position pos:line="4323" pos:column="21"/></literal> <operator pos:line="4323" pos:column="22">&amp;&amp;<pos:position pos:line="4323" pos:column="32"/></operator> <name><name pos:line="4323" pos:column="25">pOp<pos:position pos:line="4323" pos:column="28"/></name><operator pos:line="4323" pos:column="28">-&gt;<pos:position pos:line="4323" pos:column="33"/></operator><name pos:line="4323" pos:column="30">p1<pos:position pos:line="4323" pos:column="32"/></name></name><operator pos:line="4323" pos:column="32">&lt;<pos:position pos:line="4323" pos:column="36"/></operator><name><name pos:line="4323" pos:column="33">p<pos:position pos:line="4323" pos:column="34"/></name><operator pos:line="4323" pos:column="34">-&gt;<pos:position pos:line="4323" pos:column="39"/></operator><name pos:line="4323" pos:column="36">nCursor<pos:position pos:line="4323" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4323" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4323" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4324" pos:column="3">pC<pos:position pos:line="4324" pos:column="5"/></name> <operator pos:line="4324" pos:column="6">=<pos:position pos:line="4324" pos:column="7"/></operator> <name><name pos:line="4324" pos:column="8">p<pos:position pos:line="4324" pos:column="9"/></name><operator pos:line="4324" pos:column="9">-&gt;<pos:position pos:line="4324" pos:column="14"/></operator><name pos:line="4324" pos:column="11">apCsr<pos:position pos:line="4324" pos:column="16"/></name><index pos:line="4324" pos:column="16">[<expr><name><name pos:line="4324" pos:column="17">pOp<pos:position pos:line="4324" pos:column="20"/></name><operator pos:line="4324" pos:column="20">-&gt;<pos:position pos:line="4324" pos:column="25"/></operator><name pos:line="4324" pos:column="22">p1<pos:position pos:line="4324" pos:column="24"/></name></name></expr>]<pos:position pos:line="4324" pos:column="25"/></index></name></expr>;<pos:position pos:line="4324" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4325" pos:column="3">assert<pos:position pos:line="4325" pos:column="9"/></name><argument_list pos:line="4325" pos:column="9">( <argument><expr><name pos:line="4325" pos:column="11">pC<pos:position pos:line="4325" pos:column="13"/></name><operator pos:line="4325" pos:column="13">!=<pos:position pos:line="4325" pos:column="15"/></operator><literal type="number" pos:line="4325" pos:column="15">0<pos:position pos:line="4325" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4325" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4325" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4326" pos:column="3">pCrsr<pos:position pos:line="4326" pos:column="8"/></name> <operator pos:line="4326" pos:column="9">=<pos:position pos:line="4326" pos:column="10"/></operator> <name><name pos:line="4326" pos:column="11">pC<pos:position pos:line="4326" pos:column="13"/></name><operator pos:line="4326" pos:column="13">-&gt;<pos:position pos:line="4326" pos:column="18"/></operator><name pos:line="4326" pos:column="15">uc<pos:position pos:line="4326" pos:column="17"/></name><operator pos:line="4326" pos:column="17">.<pos:position pos:line="4326" pos:column="18"/></operator><name pos:line="4326" pos:column="18">pCursor<pos:position pos:line="4326" pos:column="25"/></name></name></expr>;<pos:position pos:line="4326" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4327" pos:column="3">assert<pos:position pos:line="4327" pos:column="9"/></name><argument_list pos:line="4327" pos:column="9">( <argument><expr><name pos:line="4327" pos:column="11">pCrsr<pos:position pos:line="4327" pos:column="16"/></name></expr></argument> )<pos:position pos:line="4327" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4327" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4328" pos:column="3">rc<pos:position pos:line="4328" pos:column="5"/></name> <operator pos:line="4328" pos:column="6">=<pos:position pos:line="4328" pos:column="7"/></operator> <call><name pos:line="4328" pos:column="8">sqlite3BtreeFirst<pos:position pos:line="4328" pos:column="25"/></name><argument_list pos:line="4328" pos:column="25">(<argument><expr><name pos:line="4328" pos:column="26">pCrsr<pos:position pos:line="4328" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="4328" pos:column="33">&amp;<pos:position pos:line="4328" pos:column="38"/></operator><name pos:line="4328" pos:column="34">res<pos:position pos:line="4328" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4328" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4328" pos:column="39"/></expr_stmt>
  <if pos:line="4329" pos:column="3">if<condition pos:line="4329" pos:column="5">( <expr><name pos:line="4329" pos:column="7">rc<pos:position pos:line="4329" pos:column="9"/></name></expr> )<pos:position pos:line="4329" pos:column="11"/></condition><then pos:line="4329" pos:column="11"> <block type="pseudo"><goto pos:line="4329" pos:column="12">goto <name pos:line="4329" pos:column="17">abort_due_to_error<pos:position pos:line="4329" pos:column="35"/></name>;<pos:position pos:line="4329" pos:column="36"/></goto></block></then></if>
  <if pos:line="4330" pos:column="3">if<condition pos:line="4330" pos:column="5">( <expr><name pos:line="4330" pos:column="7">res<pos:position pos:line="4330" pos:column="10"/></name><operator pos:line="4330" pos:column="10">==<pos:position pos:line="4330" pos:column="12"/></operator><literal type="number" pos:line="4330" pos:column="12">0<pos:position pos:line="4330" pos:column="13"/></literal></expr> )<pos:position pos:line="4330" pos:column="15"/></condition><then><block pos:line="4330" pos:column="15">{
    <expr_stmt><expr><name pos:line="4331" pos:column="5">sz<pos:position pos:line="4331" pos:column="7"/></name> <operator pos:line="4331" pos:column="8">=<pos:position pos:line="4331" pos:column="9"/></operator> <call><name pos:line="4331" pos:column="10">sqlite3BtreeRowCountEst<pos:position pos:line="4331" pos:column="33"/></name><argument_list pos:line="4331" pos:column="33">(<argument><expr><name pos:line="4331" pos:column="34">pCrsr<pos:position pos:line="4331" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4331" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4331" pos:column="41"/></expr_stmt>
    <if pos:line="4332" pos:column="5">if<condition pos:line="4332" pos:column="7">( <expr><call><name pos:line="4332" pos:column="9">ALWAYS<pos:position pos:line="4332" pos:column="15"/></name><argument_list pos:line="4332" pos:column="15">(<argument><expr><name pos:line="4332" pos:column="16">sz<pos:position pos:line="4332" pos:column="18"/></name><operator pos:line="4332" pos:column="18">&gt;=<pos:position pos:line="4332" pos:column="23"/></operator><literal type="number" pos:line="4332" pos:column="20">0<pos:position pos:line="4332" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="4332" pos:column="22"/></argument_list></call> <operator pos:line="4332" pos:column="23">&amp;&amp;<pos:position pos:line="4332" pos:column="33"/></operator> <call><name pos:line="4332" pos:column="26">sqlite3LogEst<pos:position pos:line="4332" pos:column="39"/></name><argument_list pos:line="4332" pos:column="39">(<argument><expr><operator pos:line="4332" pos:column="40">(<pos:position pos:line="4332" pos:column="41"/></operator><name pos:line="4332" pos:column="41">u64<pos:position pos:line="4332" pos:column="44"/></name><operator pos:line="4332" pos:column="44">)<pos:position pos:line="4332" pos:column="45"/></operator><name pos:line="4332" pos:column="45">sz<pos:position pos:line="4332" pos:column="47"/></name></expr></argument>)<pos:position pos:line="4332" pos:column="48"/></argument_list></call><operator pos:line="4332" pos:column="48">&lt;<pos:position pos:line="4332" pos:column="52"/></operator><name><name pos:line="4332" pos:column="49">pOp<pos:position pos:line="4332" pos:column="52"/></name><operator pos:line="4332" pos:column="52">-&gt;<pos:position pos:line="4332" pos:column="57"/></operator><name pos:line="4332" pos:column="54">p3<pos:position pos:line="4332" pos:column="56"/></name></name></expr> )<pos:position pos:line="4332" pos:column="58"/></condition><then pos:line="4332" pos:column="58"> <block type="pseudo"><expr_stmt><expr><name pos:line="4332" pos:column="59">res<pos:position pos:line="4332" pos:column="62"/></name> <operator pos:line="4332" pos:column="63">=<pos:position pos:line="4332" pos:column="64"/></operator> <literal type="number" pos:line="4332" pos:column="65">1<pos:position pos:line="4332" pos:column="66"/></literal></expr>;<pos:position pos:line="4332" pos:column="67"/></expr_stmt></block></then></if>
  }<pos:position pos:line="4333" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="4334" pos:column="3">VdbeBranchTaken<pos:position pos:line="4334" pos:column="18"/></name><argument_list pos:line="4334" pos:column="18">(<argument><expr><name pos:line="4334" pos:column="19">res<pos:position pos:line="4334" pos:column="22"/></name><operator pos:line="4334" pos:column="22">!=<pos:position pos:line="4334" pos:column="24"/></operator><literal type="number" pos:line="4334" pos:column="24">0<pos:position pos:line="4334" pos:column="25"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4334" pos:column="26">2<pos:position pos:line="4334" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="4334" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4334" pos:column="29"/></expr_stmt>
  <if pos:line="4335" pos:column="3">if<condition pos:line="4335" pos:column="5">( <expr><name pos:line="4335" pos:column="7">res<pos:position pos:line="4335" pos:column="10"/></name></expr> )<pos:position pos:line="4335" pos:column="12"/></condition><then pos:line="4335" pos:column="12"> <block type="pseudo"><goto pos:line="4335" pos:column="13">goto <name pos:line="4335" pos:column="18">jump_to_p2<pos:position pos:line="4335" pos:column="28"/></name>;<pos:position pos:line="4335" pos:column="29"/></goto></block></then></if>
  <break pos:line="4336" pos:column="3">break;<pos:position pos:line="4336" pos:column="9"/></break>
}<pos:position pos:line="4337" pos:column="2"/></block>


<comment type="block" pos:line="4340" pos:column="1">/* Opcode: SorterSort P1 P2 * * *
**
** After all records have been inserted into the Sorter object
** identified by P1, invoke this opcode to actually do the sorting.
** Jump to P2 if there are no records to be sorted.
**
** This opcode is an alias for OP_Sort and OP_Rewind that is used
** for Sorter objects.
*/</comment>
<comment type="block" pos:line="4349" pos:column="1">/* Opcode: Sort P1 P2 * * *
**
** This opcode does exactly the same thing as OP_Rewind except that
** it increments an undocumented global variable used for testing.
**
** Sorting is accomplished by writing records into a sorting index,
** then rewinding that index and playing it back from beginning to
** end.  We use the OP_Sort opcode instead of OP_Rewind to do the
** rewinding so that the global variable will be incremented and
** regression tests can determine whether or not the optimizer is
** correctly optimizing out sorts.
*/</comment>
<case pos:line="4361" pos:column="1">case <expr><name pos:line="4361" pos:column="6">OP_SorterSort<pos:position pos:line="4361" pos:column="19"/></name></expr>:<pos:position pos:line="4361" pos:column="20"/></case>    <comment type="block" pos:line="4361" pos:column="24">/* jump */</comment>
<case pos:line="4362" pos:column="1">case <expr><name pos:line="4362" pos:column="6">OP_Sort<pos:position pos:line="4362" pos:column="13"/></name></expr>:<pos:position pos:line="4362" pos:column="14"/></case> <block pos:line="4362" pos:column="15">{        <comment type="block" pos:line="4362" pos:column="24">/* jump */</comment>
<cpp:ifdef pos:line="4363" pos:column="1">#<cpp:directive pos:line="4363" pos:column="2">ifdef<pos:position pos:line="4363" pos:column="7"/></cpp:directive> <name pos:line="4363" pos:column="8">SQLITE_TEST<pos:position pos:line="4363" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="4364" pos:column="3">sqlite3_sort_count<pos:position pos:line="4364" pos:column="21"/></name><operator pos:line="4364" pos:column="21">++<pos:position pos:line="4364" pos:column="23"/></operator></expr>;<pos:position pos:line="4364" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4365" pos:column="3">sqlite3_search_count<pos:position pos:line="4365" pos:column="23"/></name><operator pos:line="4365" pos:column="23">--<pos:position pos:line="4365" pos:column="25"/></operator></expr>;<pos:position pos:line="4365" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="4366" pos:column="1">#<cpp:directive pos:line="4366" pos:column="2">endif<pos:position pos:line="4366" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="4367" pos:column="3">p<pos:position pos:line="4367" pos:column="4"/></name><operator pos:line="4367" pos:column="4">-&gt;<pos:position pos:line="4367" pos:column="9"/></operator><name pos:line="4367" pos:column="6">aCounter<pos:position pos:line="4367" pos:column="14"/></name><index pos:line="4367" pos:column="14">[<expr><name pos:line="4367" pos:column="15">SQLITE_STMTSTATUS_SORT<pos:position pos:line="4367" pos:column="37"/></name></expr>]<pos:position pos:line="4367" pos:column="38"/></index></name><operator pos:line="4367" pos:column="38">++<pos:position pos:line="4367" pos:column="40"/></operator></expr>;<pos:position pos:line="4367" pos:column="41"/></expr_stmt>
  <comment type="block" pos:line="4368" pos:column="3">/* Fall through into OP_Rewind */</comment>
}<pos:position pos:line="4369" pos:column="2"/></block>
<comment type="block" pos:line="4370" pos:column="1">/* Opcode: Rewind P1 P2 * * *
**
** The next use of the Rowid or Column or Next instruction for P1 
** will refer to the first entry in the database table or index.
** If the table or index is empty, jump immediately to P2.
** If the table or index is not empty, fall through to the following 
** instruction.
**
** This opcode leaves the cursor configured to move in forward order,
** from the beginning toward the end.  In other words, the cursor is
** configured to use Next, not Prev.
*/</comment>
<case pos:line="4382" pos:column="1">case <expr><name pos:line="4382" pos:column="6">OP_Rewind<pos:position pos:line="4382" pos:column="15"/></name></expr>:<pos:position pos:line="4382" pos:column="16"/></case> <block pos:line="4382" pos:column="17">{        <comment type="block" pos:line="4382" pos:column="26">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="4383" pos:column="3">VdbeCursor<pos:position pos:line="4383" pos:column="13"/></name> <modifier pos:line="4383" pos:column="14">*<pos:position pos:line="4383" pos:column="15"/></modifier></type><name pos:line="4383" pos:column="15">pC<pos:position pos:line="4383" pos:column="17"/></name></decl>;<pos:position pos:line="4383" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4384" pos:column="3">BtCursor<pos:position pos:line="4384" pos:column="11"/></name> <modifier pos:line="4384" pos:column="12">*<pos:position pos:line="4384" pos:column="13"/></modifier></type><name pos:line="4384" pos:column="13">pCrsr<pos:position pos:line="4384" pos:column="18"/></name></decl>;<pos:position pos:line="4384" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4385" pos:column="3">int<pos:position pos:line="4385" pos:column="6"/></name></type> <name pos:line="4385" pos:column="7">res<pos:position pos:line="4385" pos:column="10"/></name></decl>;<pos:position pos:line="4385" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4387" pos:column="3">assert<pos:position pos:line="4387" pos:column="9"/></name><argument_list pos:line="4387" pos:column="9">( <argument><expr><name><name pos:line="4387" pos:column="11">pOp<pos:position pos:line="4387" pos:column="14"/></name><operator pos:line="4387" pos:column="14">-&gt;<pos:position pos:line="4387" pos:column="19"/></operator><name pos:line="4387" pos:column="16">p1<pos:position pos:line="4387" pos:column="18"/></name></name><operator pos:line="4387" pos:column="18">&gt;=<pos:position pos:line="4387" pos:column="23"/></operator><literal type="number" pos:line="4387" pos:column="20">0<pos:position pos:line="4387" pos:column="21"/></literal> <operator pos:line="4387" pos:column="22">&amp;&amp;<pos:position pos:line="4387" pos:column="32"/></operator> <name><name pos:line="4387" pos:column="25">pOp<pos:position pos:line="4387" pos:column="28"/></name><operator pos:line="4387" pos:column="28">-&gt;<pos:position pos:line="4387" pos:column="33"/></operator><name pos:line="4387" pos:column="30">p1<pos:position pos:line="4387" pos:column="32"/></name></name><operator pos:line="4387" pos:column="32">&lt;<pos:position pos:line="4387" pos:column="36"/></operator><name><name pos:line="4387" pos:column="33">p<pos:position pos:line="4387" pos:column="34"/></name><operator pos:line="4387" pos:column="34">-&gt;<pos:position pos:line="4387" pos:column="39"/></operator><name pos:line="4387" pos:column="36">nCursor<pos:position pos:line="4387" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4387" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4387" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4388" pos:column="3">pC<pos:position pos:line="4388" pos:column="5"/></name> <operator pos:line="4388" pos:column="6">=<pos:position pos:line="4388" pos:column="7"/></operator> <name><name pos:line="4388" pos:column="8">p<pos:position pos:line="4388" pos:column="9"/></name><operator pos:line="4388" pos:column="9">-&gt;<pos:position pos:line="4388" pos:column="14"/></operator><name pos:line="4388" pos:column="11">apCsr<pos:position pos:line="4388" pos:column="16"/></name><index pos:line="4388" pos:column="16">[<expr><name><name pos:line="4388" pos:column="17">pOp<pos:position pos:line="4388" pos:column="20"/></name><operator pos:line="4388" pos:column="20">-&gt;<pos:position pos:line="4388" pos:column="25"/></operator><name pos:line="4388" pos:column="22">p1<pos:position pos:line="4388" pos:column="24"/></name></name></expr>]<pos:position pos:line="4388" pos:column="25"/></index></name></expr>;<pos:position pos:line="4388" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4389" pos:column="3">assert<pos:position pos:line="4389" pos:column="9"/></name><argument_list pos:line="4389" pos:column="9">( <argument><expr><name pos:line="4389" pos:column="11">pC<pos:position pos:line="4389" pos:column="13"/></name><operator pos:line="4389" pos:column="13">!=<pos:position pos:line="4389" pos:column="15"/></operator><literal type="number" pos:line="4389" pos:column="15">0<pos:position pos:line="4389" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4389" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4389" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4390" pos:column="3">assert<pos:position pos:line="4390" pos:column="9"/></name><argument_list pos:line="4390" pos:column="9">( <argument><expr><call><name pos:line="4390" pos:column="11">isSorter<pos:position pos:line="4390" pos:column="19"/></name><argument_list pos:line="4390" pos:column="19">(<argument><expr><name pos:line="4390" pos:column="20">pC<pos:position pos:line="4390" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4390" pos:column="23"/></argument_list></call><operator pos:line="4390" pos:column="23">==<pos:position pos:line="4390" pos:column="25"/></operator><operator pos:line="4390" pos:column="25">(<pos:position pos:line="4390" pos:column="26"/></operator><name><name pos:line="4390" pos:column="26">pOp<pos:position pos:line="4390" pos:column="29"/></name><operator pos:line="4390" pos:column="29">-&gt;<pos:position pos:line="4390" pos:column="34"/></operator><name pos:line="4390" pos:column="31">opcode<pos:position pos:line="4390" pos:column="37"/></name></name><operator pos:line="4390" pos:column="37">==<pos:position pos:line="4390" pos:column="39"/></operator><name pos:line="4390" pos:column="39">OP_SorterSort<pos:position pos:line="4390" pos:column="52"/></name><operator pos:line="4390" pos:column="52">)<pos:position pos:line="4390" pos:column="53"/></operator></expr></argument> )<pos:position pos:line="4390" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="4390" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4391" pos:column="3">res<pos:position pos:line="4391" pos:column="6"/></name> <operator pos:line="4391" pos:column="7">=<pos:position pos:line="4391" pos:column="8"/></operator> <literal type="number" pos:line="4391" pos:column="9">1<pos:position pos:line="4391" pos:column="10"/></literal></expr>;<pos:position pos:line="4391" pos:column="11"/></expr_stmt>
<cpp:ifdef pos:line="4392" pos:column="1">#<cpp:directive pos:line="4392" pos:column="2">ifdef<pos:position pos:line="4392" pos:column="7"/></cpp:directive> <name pos:line="4392" pos:column="8">SQLITE_DEBUG<pos:position pos:line="4392" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="4393" pos:column="3">pC<pos:position pos:line="4393" pos:column="5"/></name><operator pos:line="4393" pos:column="5">-&gt;<pos:position pos:line="4393" pos:column="10"/></operator><name pos:line="4393" pos:column="7">seekOp<pos:position pos:line="4393" pos:column="13"/></name></name> <operator pos:line="4393" pos:column="14">=<pos:position pos:line="4393" pos:column="15"/></operator> <name pos:line="4393" pos:column="16">OP_Rewind<pos:position pos:line="4393" pos:column="25"/></name></expr>;<pos:position pos:line="4393" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="4394" pos:column="1">#<cpp:directive pos:line="4394" pos:column="2">endif<pos:position pos:line="4394" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="4395" pos:column="3">if<condition pos:line="4395" pos:column="5">( <expr><call><name pos:line="4395" pos:column="7">isSorter<pos:position pos:line="4395" pos:column="15"/></name><argument_list pos:line="4395" pos:column="15">(<argument><expr><name pos:line="4395" pos:column="16">pC<pos:position pos:line="4395" pos:column="18"/></name></expr></argument>)<pos:position pos:line="4395" pos:column="19"/></argument_list></call></expr> )<pos:position pos:line="4395" pos:column="21"/></condition><then><block pos:line="4395" pos:column="21">{
    <expr_stmt><expr><name pos:line="4396" pos:column="5">rc<pos:position pos:line="4396" pos:column="7"/></name> <operator pos:line="4396" pos:column="8">=<pos:position pos:line="4396" pos:column="9"/></operator> <call><name pos:line="4396" pos:column="10">sqlite3VdbeSorterRewind<pos:position pos:line="4396" pos:column="33"/></name><argument_list pos:line="4396" pos:column="33">(<argument><expr><name pos:line="4396" pos:column="34">pC<pos:position pos:line="4396" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="4396" pos:column="38">&amp;<pos:position pos:line="4396" pos:column="43"/></operator><name pos:line="4396" pos:column="39">res<pos:position pos:line="4396" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4396" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4396" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="4397" pos:column="4"/></block></then><else pos:line="4397" pos:column="4">else<block pos:line="4397" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="4398" pos:column="5">assert<pos:position pos:line="4398" pos:column="11"/></name><argument_list pos:line="4398" pos:column="11">( <argument><expr><name><name pos:line="4398" pos:column="13">pC<pos:position pos:line="4398" pos:column="15"/></name><operator pos:line="4398" pos:column="15">-&gt;<pos:position pos:line="4398" pos:column="20"/></operator><name pos:line="4398" pos:column="17">eCurType<pos:position pos:line="4398" pos:column="25"/></name></name><operator pos:line="4398" pos:column="25">==<pos:position pos:line="4398" pos:column="27"/></operator><name pos:line="4398" pos:column="27">CURTYPE_BTREE<pos:position pos:line="4398" pos:column="40"/></name></expr></argument> )<pos:position pos:line="4398" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4398" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4399" pos:column="5">pCrsr<pos:position pos:line="4399" pos:column="10"/></name> <operator pos:line="4399" pos:column="11">=<pos:position pos:line="4399" pos:column="12"/></operator> <name><name pos:line="4399" pos:column="13">pC<pos:position pos:line="4399" pos:column="15"/></name><operator pos:line="4399" pos:column="15">-&gt;<pos:position pos:line="4399" pos:column="20"/></operator><name pos:line="4399" pos:column="17">uc<pos:position pos:line="4399" pos:column="19"/></name><operator pos:line="4399" pos:column="19">.<pos:position pos:line="4399" pos:column="20"/></operator><name pos:line="4399" pos:column="20">pCursor<pos:position pos:line="4399" pos:column="27"/></name></name></expr>;<pos:position pos:line="4399" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4400" pos:column="5">assert<pos:position pos:line="4400" pos:column="11"/></name><argument_list pos:line="4400" pos:column="11">( <argument><expr><name pos:line="4400" pos:column="13">pCrsr<pos:position pos:line="4400" pos:column="18"/></name></expr></argument> )<pos:position pos:line="4400" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4400" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4401" pos:column="5">rc<pos:position pos:line="4401" pos:column="7"/></name> <operator pos:line="4401" pos:column="8">=<pos:position pos:line="4401" pos:column="9"/></operator> <call><name pos:line="4401" pos:column="10">sqlite3BtreeFirst<pos:position pos:line="4401" pos:column="27"/></name><argument_list pos:line="4401" pos:column="27">(<argument><expr><name pos:line="4401" pos:column="28">pCrsr<pos:position pos:line="4401" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="4401" pos:column="35">&amp;<pos:position pos:line="4401" pos:column="40"/></operator><name pos:line="4401" pos:column="36">res<pos:position pos:line="4401" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4401" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4401" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4402" pos:column="5">pC<pos:position pos:line="4402" pos:column="7"/></name><operator pos:line="4402" pos:column="7">-&gt;<pos:position pos:line="4402" pos:column="12"/></operator><name pos:line="4402" pos:column="9">deferredMoveto<pos:position pos:line="4402" pos:column="23"/></name></name> <operator pos:line="4402" pos:column="24">=<pos:position pos:line="4402" pos:column="25"/></operator> <literal type="number" pos:line="4402" pos:column="26">0<pos:position pos:line="4402" pos:column="27"/></literal></expr>;<pos:position pos:line="4402" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4403" pos:column="5">pC<pos:position pos:line="4403" pos:column="7"/></name><operator pos:line="4403" pos:column="7">-&gt;<pos:position pos:line="4403" pos:column="12"/></operator><name pos:line="4403" pos:column="9">cacheStatus<pos:position pos:line="4403" pos:column="20"/></name></name> <operator pos:line="4403" pos:column="21">=<pos:position pos:line="4403" pos:column="22"/></operator> <name pos:line="4403" pos:column="23">CACHE_STALE<pos:position pos:line="4403" pos:column="34"/></name></expr>;<pos:position pos:line="4403" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="4404" pos:column="4"/></block></else></if>
  <if pos:line="4405" pos:column="3">if<condition pos:line="4405" pos:column="5">( <expr><name pos:line="4405" pos:column="7">rc<pos:position pos:line="4405" pos:column="9"/></name></expr> )<pos:position pos:line="4405" pos:column="11"/></condition><then pos:line="4405" pos:column="11"> <block type="pseudo"><goto pos:line="4405" pos:column="12">goto <name pos:line="4405" pos:column="17">abort_due_to_error<pos:position pos:line="4405" pos:column="35"/></name>;<pos:position pos:line="4405" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="4406" pos:column="3">pC<pos:position pos:line="4406" pos:column="5"/></name><operator pos:line="4406" pos:column="5">-&gt;<pos:position pos:line="4406" pos:column="10"/></operator><name pos:line="4406" pos:column="7">nullRow<pos:position pos:line="4406" pos:column="14"/></name></name> <operator pos:line="4406" pos:column="15">=<pos:position pos:line="4406" pos:column="16"/></operator> <operator pos:line="4406" pos:column="17">(<pos:position pos:line="4406" pos:column="18"/></operator><name pos:line="4406" pos:column="18">u8<pos:position pos:line="4406" pos:column="20"/></name><operator pos:line="4406" pos:column="20">)<pos:position pos:line="4406" pos:column="21"/></operator><name pos:line="4406" pos:column="21">res<pos:position pos:line="4406" pos:column="24"/></name></expr>;<pos:position pos:line="4406" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4407" pos:column="3">assert<pos:position pos:line="4407" pos:column="9"/></name><argument_list pos:line="4407" pos:column="9">( <argument><expr><name><name pos:line="4407" pos:column="11">pOp<pos:position pos:line="4407" pos:column="14"/></name><operator pos:line="4407" pos:column="14">-&gt;<pos:position pos:line="4407" pos:column="19"/></operator><name pos:line="4407" pos:column="16">p2<pos:position pos:line="4407" pos:column="18"/></name></name><operator pos:line="4407" pos:column="18">&gt;<pos:position pos:line="4407" pos:column="22"/></operator><literal type="number" pos:line="4407" pos:column="19">0<pos:position pos:line="4407" pos:column="20"/></literal> <operator pos:line="4407" pos:column="21">&amp;&amp;<pos:position pos:line="4407" pos:column="31"/></operator> <name><name pos:line="4407" pos:column="24">pOp<pos:position pos:line="4407" pos:column="27"/></name><operator pos:line="4407" pos:column="27">-&gt;<pos:position pos:line="4407" pos:column="32"/></operator><name pos:line="4407" pos:column="29">p2<pos:position pos:line="4407" pos:column="31"/></name></name><operator pos:line="4407" pos:column="31">&lt;<pos:position pos:line="4407" pos:column="35"/></operator><name><name pos:line="4407" pos:column="32">p<pos:position pos:line="4407" pos:column="33"/></name><operator pos:line="4407" pos:column="33">-&gt;<pos:position pos:line="4407" pos:column="38"/></operator><name pos:line="4407" pos:column="35">nOp<pos:position pos:line="4407" pos:column="38"/></name></name></expr></argument> )<pos:position pos:line="4407" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4407" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4408" pos:column="3">VdbeBranchTaken<pos:position pos:line="4408" pos:column="18"/></name><argument_list pos:line="4408" pos:column="18">(<argument><expr><name pos:line="4408" pos:column="19">res<pos:position pos:line="4408" pos:column="22"/></name><operator pos:line="4408" pos:column="22">!=<pos:position pos:line="4408" pos:column="24"/></operator><literal type="number" pos:line="4408" pos:column="24">0<pos:position pos:line="4408" pos:column="25"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4408" pos:column="26">2<pos:position pos:line="4408" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="4408" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4408" pos:column="29"/></expr_stmt>
  <if pos:line="4409" pos:column="3">if<condition pos:line="4409" pos:column="5">( <expr><name pos:line="4409" pos:column="7">res<pos:position pos:line="4409" pos:column="10"/></name></expr> )<pos:position pos:line="4409" pos:column="12"/></condition><then pos:line="4409" pos:column="12"> <block type="pseudo"><goto pos:line="4409" pos:column="13">goto <name pos:line="4409" pos:column="18">jump_to_p2<pos:position pos:line="4409" pos:column="28"/></name>;<pos:position pos:line="4409" pos:column="29"/></goto></block></then></if>
  <break pos:line="4410" pos:column="3">break;<pos:position pos:line="4410" pos:column="9"/></break>
}<pos:position pos:line="4411" pos:column="2"/></block>

<comment type="block" pos:line="4413" pos:column="1">/* Opcode: Next P1 P2 P3 P4 P5
**
** Advance cursor P1 so that it points to the next key/data pair in its
** table or index.  If there are no more key/value pairs then fall through
** to the following instruction.  But if the cursor advance was successful,
** jump immediately to P2.
**
** The Next opcode is only valid following an SeekGT, SeekGE, or
** OP_Rewind opcode used to position the cursor.  Next is not allowed
** to follow SeekLT, SeekLE, or OP_Last.
**
** The P1 cursor must be for a real table, not a pseudo-table.  P1 must have
** been opened prior to this opcode or the program will segfault.
**
** The P3 value is a hint to the btree implementation. If P3==1, that
** means P1 is an SQL index and that this instruction could have been
** omitted if that index had been unique.  P3 is usually 0.  P3 is
** always either 0 or 1.
**
** P4 is always of type P4_ADVANCE. The function pointer points to
** sqlite3BtreeNext().
**
** If P5 is positive and the jump is taken, then event counter
** number P5-1 in the prepared statement is incremented.
**
** See also: Prev, NextIfOpen
*/</comment>
<comment type="block" pos:line="4440" pos:column="1">/* Opcode: NextIfOpen P1 P2 P3 P4 P5
**
** This opcode works just like Next except that if cursor P1 is not
** open it behaves a no-op.
*/</comment>
<comment type="block" pos:line="4445" pos:column="1">/* Opcode: Prev P1 P2 P3 P4 P5
**
** Back up cursor P1 so that it points to the previous key/data pair in its
** table or index.  If there is no previous key/value pairs then fall through
** to the following instruction.  But if the cursor backup was successful,
** jump immediately to P2.
**
**
** The Prev opcode is only valid following an SeekLT, SeekLE, or
** OP_Last opcode used to position the cursor.  Prev is not allowed
** to follow SeekGT, SeekGE, or OP_Rewind.
**
** The P1 cursor must be for a real table, not a pseudo-table.  If P1 is
** not open then the behavior is undefined.
**
** The P3 value is a hint to the btree implementation. If P3==1, that
** means P1 is an SQL index and that this instruction could have been
** omitted if that index had been unique.  P3 is usually 0.  P3 is
** always either 0 or 1.
**
** P4 is always of type P4_ADVANCE. The function pointer points to
** sqlite3BtreePrevious().
**
** If P5 is positive and the jump is taken, then event counter
** number P5-1 in the prepared statement is incremented.
*/</comment>
<comment type="block" pos:line="4471" pos:column="1">/* Opcode: PrevIfOpen P1 P2 P3 P4 P5
**
** This opcode works just like Prev except that if cursor P1 is not
** open it behaves a no-op.
*/</comment>
<comment type="block" pos:line="4476" pos:column="1">/* Opcode: SorterNext P1 P2 * * P5
**
** This opcode works just like OP_Next except that P1 must be a
** sorter object for which the OP_SorterSort opcode has been
** invoked.  This opcode advances the cursor to the next sorted
** record, or jumps to P2 if there are no more sorted records.
*/</comment>
<case pos:line="4483" pos:column="1">case <expr><name pos:line="4483" pos:column="6">OP_SorterNext<pos:position pos:line="4483" pos:column="19"/></name></expr>:<pos:position pos:line="4483" pos:column="20"/></case> <block pos:line="4483" pos:column="21">{  <comment type="block" pos:line="4483" pos:column="24">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="4484" pos:column="3">VdbeCursor<pos:position pos:line="4484" pos:column="13"/></name> <modifier pos:line="4484" pos:column="14">*<pos:position pos:line="4484" pos:column="15"/></modifier></type><name pos:line="4484" pos:column="15">pC<pos:position pos:line="4484" pos:column="17"/></name></decl>;<pos:position pos:line="4484" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4486" pos:column="3">pC<pos:position pos:line="4486" pos:column="5"/></name> <operator pos:line="4486" pos:column="6">=<pos:position pos:line="4486" pos:column="7"/></operator> <name><name pos:line="4486" pos:column="8">p<pos:position pos:line="4486" pos:column="9"/></name><operator pos:line="4486" pos:column="9">-&gt;<pos:position pos:line="4486" pos:column="14"/></operator><name pos:line="4486" pos:column="11">apCsr<pos:position pos:line="4486" pos:column="16"/></name><index pos:line="4486" pos:column="16">[<expr><name><name pos:line="4486" pos:column="17">pOp<pos:position pos:line="4486" pos:column="20"/></name><operator pos:line="4486" pos:column="20">-&gt;<pos:position pos:line="4486" pos:column="25"/></operator><name pos:line="4486" pos:column="22">p1<pos:position pos:line="4486" pos:column="24"/></name></name></expr>]<pos:position pos:line="4486" pos:column="25"/></index></name></expr>;<pos:position pos:line="4486" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4487" pos:column="3">assert<pos:position pos:line="4487" pos:column="9"/></name><argument_list pos:line="4487" pos:column="9">( <argument><expr><call><name pos:line="4487" pos:column="11">isSorter<pos:position pos:line="4487" pos:column="19"/></name><argument_list pos:line="4487" pos:column="19">(<argument><expr><name pos:line="4487" pos:column="20">pC<pos:position pos:line="4487" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4487" pos:column="23"/></argument_list></call></expr></argument> )<pos:position pos:line="4487" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4487" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4488" pos:column="3">rc<pos:position pos:line="4488" pos:column="5"/></name> <operator pos:line="4488" pos:column="6">=<pos:position pos:line="4488" pos:column="7"/></operator> <call><name pos:line="4488" pos:column="8">sqlite3VdbeSorterNext<pos:position pos:line="4488" pos:column="29"/></name><argument_list pos:line="4488" pos:column="29">(<argument><expr><name pos:line="4488" pos:column="30">db<pos:position pos:line="4488" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4488" pos:column="34">pC<pos:position pos:line="4488" pos:column="36"/></name></expr></argument>)<pos:position pos:line="4488" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="4488" pos:column="38"/></expr_stmt>
  <goto pos:line="4489" pos:column="3">goto <name pos:line="4489" pos:column="8">next_tail<pos:position pos:line="4489" pos:column="17"/></name>;<pos:position pos:line="4489" pos:column="18"/></goto>
<case pos:line="4490" pos:column="1">case <expr><name pos:line="4490" pos:column="6">OP_PrevIfOpen<pos:position pos:line="4490" pos:column="19"/></name></expr>:<pos:position pos:line="4490" pos:column="20"/></case>    <comment type="block" pos:line="4490" pos:column="24">/* jump */</comment>
<case pos:line="4491" pos:column="1">case <expr><name pos:line="4491" pos:column="6">OP_NextIfOpen<pos:position pos:line="4491" pos:column="19"/></name></expr>:<pos:position pos:line="4491" pos:column="20"/></case>    <comment type="block" pos:line="4491" pos:column="24">/* jump */</comment>
  <if pos:line="4492" pos:column="3">if<condition pos:line="4492" pos:column="5">( <expr><name><name pos:line="4492" pos:column="7">p<pos:position pos:line="4492" pos:column="8"/></name><operator pos:line="4492" pos:column="8">-&gt;<pos:position pos:line="4492" pos:column="13"/></operator><name pos:line="4492" pos:column="10">apCsr<pos:position pos:line="4492" pos:column="15"/></name><index pos:line="4492" pos:column="15">[<expr><name><name pos:line="4492" pos:column="16">pOp<pos:position pos:line="4492" pos:column="19"/></name><operator pos:line="4492" pos:column="19">-&gt;<pos:position pos:line="4492" pos:column="24"/></operator><name pos:line="4492" pos:column="21">p1<pos:position pos:line="4492" pos:column="23"/></name></name></expr>]<pos:position pos:line="4492" pos:column="24"/></index></name><operator pos:line="4492" pos:column="24">==<pos:position pos:line="4492" pos:column="26"/></operator><literal type="number" pos:line="4492" pos:column="26">0<pos:position pos:line="4492" pos:column="27"/></literal></expr> )<pos:position pos:line="4492" pos:column="29"/></condition><then pos:line="4492" pos:column="29"> <block type="pseudo"><break pos:line="4492" pos:column="30">break;<pos:position pos:line="4492" pos:column="36"/></break></block></then></if>
  <comment type="block" pos:line="4493" pos:column="3">/* Fall through */</comment>
<case pos:line="4494" pos:column="1">case <expr><name pos:line="4494" pos:column="6">OP_Prev<pos:position pos:line="4494" pos:column="13"/></name></expr>:<pos:position pos:line="4494" pos:column="14"/></case>          <comment type="block" pos:line="4494" pos:column="24">/* jump */</comment>
<case pos:line="4495" pos:column="1">case <expr><name pos:line="4495" pos:column="6">OP_Next<pos:position pos:line="4495" pos:column="13"/></name></expr>:<pos:position pos:line="4495" pos:column="14"/></case>          <comment type="block" pos:line="4495" pos:column="24">/* jump */</comment>
  <expr_stmt><expr><call><name pos:line="4496" pos:column="3">assert<pos:position pos:line="4496" pos:column="9"/></name><argument_list pos:line="4496" pos:column="9">( <argument><expr><name><name pos:line="4496" pos:column="11">pOp<pos:position pos:line="4496" pos:column="14"/></name><operator pos:line="4496" pos:column="14">-&gt;<pos:position pos:line="4496" pos:column="19"/></operator><name pos:line="4496" pos:column="16">p1<pos:position pos:line="4496" pos:column="18"/></name></name><operator pos:line="4496" pos:column="18">&gt;=<pos:position pos:line="4496" pos:column="23"/></operator><literal type="number" pos:line="4496" pos:column="20">0<pos:position pos:line="4496" pos:column="21"/></literal> <operator pos:line="4496" pos:column="22">&amp;&amp;<pos:position pos:line="4496" pos:column="32"/></operator> <name><name pos:line="4496" pos:column="25">pOp<pos:position pos:line="4496" pos:column="28"/></name><operator pos:line="4496" pos:column="28">-&gt;<pos:position pos:line="4496" pos:column="33"/></operator><name pos:line="4496" pos:column="30">p1<pos:position pos:line="4496" pos:column="32"/></name></name><operator pos:line="4496" pos:column="32">&lt;<pos:position pos:line="4496" pos:column="36"/></operator><name><name pos:line="4496" pos:column="33">p<pos:position pos:line="4496" pos:column="34"/></name><operator pos:line="4496" pos:column="34">-&gt;<pos:position pos:line="4496" pos:column="39"/></operator><name pos:line="4496" pos:column="36">nCursor<pos:position pos:line="4496" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4496" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4496" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4497" pos:column="3">assert<pos:position pos:line="4497" pos:column="9"/></name><argument_list pos:line="4497" pos:column="9">( <argument><expr><name><name pos:line="4497" pos:column="11">pOp<pos:position pos:line="4497" pos:column="14"/></name><operator pos:line="4497" pos:column="14">-&gt;<pos:position pos:line="4497" pos:column="19"/></operator><name pos:line="4497" pos:column="16">p5<pos:position pos:line="4497" pos:column="18"/></name></name><operator pos:line="4497" pos:column="18">&lt;<pos:position pos:line="4497" pos:column="22"/></operator><call><name pos:line="4497" pos:column="19">ArraySize<pos:position pos:line="4497" pos:column="28"/></name><argument_list pos:line="4497" pos:column="28">(<argument><expr><name><name pos:line="4497" pos:column="29">p<pos:position pos:line="4497" pos:column="30"/></name><operator pos:line="4497" pos:column="30">-&gt;<pos:position pos:line="4497" pos:column="35"/></operator><name pos:line="4497" pos:column="32">aCounter<pos:position pos:line="4497" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="4497" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="4497" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4497" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4498" pos:column="3">pC<pos:position pos:line="4498" pos:column="5"/></name> <operator pos:line="4498" pos:column="6">=<pos:position pos:line="4498" pos:column="7"/></operator> <name><name pos:line="4498" pos:column="8">p<pos:position pos:line="4498" pos:column="9"/></name><operator pos:line="4498" pos:column="9">-&gt;<pos:position pos:line="4498" pos:column="14"/></operator><name pos:line="4498" pos:column="11">apCsr<pos:position pos:line="4498" pos:column="16"/></name><index pos:line="4498" pos:column="16">[<expr><name><name pos:line="4498" pos:column="17">pOp<pos:position pos:line="4498" pos:column="20"/></name><operator pos:line="4498" pos:column="20">-&gt;<pos:position pos:line="4498" pos:column="25"/></operator><name pos:line="4498" pos:column="22">p1<pos:position pos:line="4498" pos:column="24"/></name></name></expr>]<pos:position pos:line="4498" pos:column="25"/></index></name></expr>;<pos:position pos:line="4498" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4499" pos:column="3">assert<pos:position pos:line="4499" pos:column="9"/></name><argument_list pos:line="4499" pos:column="9">( <argument><expr><name pos:line="4499" pos:column="11">pC<pos:position pos:line="4499" pos:column="13"/></name><operator pos:line="4499" pos:column="13">!=<pos:position pos:line="4499" pos:column="15"/></operator><literal type="number" pos:line="4499" pos:column="15">0<pos:position pos:line="4499" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4499" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4499" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4500" pos:column="3">assert<pos:position pos:line="4500" pos:column="9"/></name><argument_list pos:line="4500" pos:column="9">( <argument><expr><name><name pos:line="4500" pos:column="11">pC<pos:position pos:line="4500" pos:column="13"/></name><operator pos:line="4500" pos:column="13">-&gt;<pos:position pos:line="4500" pos:column="18"/></operator><name pos:line="4500" pos:column="15">deferredMoveto<pos:position pos:line="4500" pos:column="29"/></name></name><operator pos:line="4500" pos:column="29">==<pos:position pos:line="4500" pos:column="31"/></operator><literal type="number" pos:line="4500" pos:column="31">0<pos:position pos:line="4500" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="4500" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4500" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4501" pos:column="3">assert<pos:position pos:line="4501" pos:column="9"/></name><argument_list pos:line="4501" pos:column="9">( <argument><expr><name><name pos:line="4501" pos:column="11">pC<pos:position pos:line="4501" pos:column="13"/></name><operator pos:line="4501" pos:column="13">-&gt;<pos:position pos:line="4501" pos:column="18"/></operator><name pos:line="4501" pos:column="15">eCurType<pos:position pos:line="4501" pos:column="23"/></name></name><operator pos:line="4501" pos:column="23">==<pos:position pos:line="4501" pos:column="25"/></operator><name pos:line="4501" pos:column="25">CURTYPE_BTREE<pos:position pos:line="4501" pos:column="38"/></name></expr></argument> )<pos:position pos:line="4501" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4501" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4502" pos:column="3">assert<pos:position pos:line="4502" pos:column="9"/></name><argument_list pos:line="4502" pos:column="9">( <argument><expr><name><name pos:line="4502" pos:column="11">pOp<pos:position pos:line="4502" pos:column="14"/></name><operator pos:line="4502" pos:column="14">-&gt;<pos:position pos:line="4502" pos:column="19"/></operator><name pos:line="4502" pos:column="16">opcode<pos:position pos:line="4502" pos:column="22"/></name></name><operator pos:line="4502" pos:column="22">!=<pos:position pos:line="4502" pos:column="24"/></operator><name pos:line="4502" pos:column="24">OP_Next<pos:position pos:line="4502" pos:column="31"/></name> <operator pos:line="4502" pos:column="32">||<pos:position pos:line="4502" pos:column="34"/></operator> <name><name pos:line="4502" pos:column="35">pOp<pos:position pos:line="4502" pos:column="38"/></name><operator pos:line="4502" pos:column="38">-&gt;<pos:position pos:line="4502" pos:column="43"/></operator><name pos:line="4502" pos:column="40">p4<pos:position pos:line="4502" pos:column="42"/></name><operator pos:line="4502" pos:column="42">.<pos:position pos:line="4502" pos:column="43"/></operator><name pos:line="4502" pos:column="43">xAdvance<pos:position pos:line="4502" pos:column="51"/></name></name><operator pos:line="4502" pos:column="51">==<pos:position pos:line="4502" pos:column="53"/></operator><name pos:line="4502" pos:column="53">sqlite3BtreeNext<pos:position pos:line="4502" pos:column="69"/></name></expr></argument> )<pos:position pos:line="4502" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="4502" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4503" pos:column="3">assert<pos:position pos:line="4503" pos:column="9"/></name><argument_list pos:line="4503" pos:column="9">( <argument><expr><name><name pos:line="4503" pos:column="11">pOp<pos:position pos:line="4503" pos:column="14"/></name><operator pos:line="4503" pos:column="14">-&gt;<pos:position pos:line="4503" pos:column="19"/></operator><name pos:line="4503" pos:column="16">opcode<pos:position pos:line="4503" pos:column="22"/></name></name><operator pos:line="4503" pos:column="22">!=<pos:position pos:line="4503" pos:column="24"/></operator><name pos:line="4503" pos:column="24">OP_Prev<pos:position pos:line="4503" pos:column="31"/></name> <operator pos:line="4503" pos:column="32">||<pos:position pos:line="4503" pos:column="34"/></operator> <name><name pos:line="4503" pos:column="35">pOp<pos:position pos:line="4503" pos:column="38"/></name><operator pos:line="4503" pos:column="38">-&gt;<pos:position pos:line="4503" pos:column="43"/></operator><name pos:line="4503" pos:column="40">p4<pos:position pos:line="4503" pos:column="42"/></name><operator pos:line="4503" pos:column="42">.<pos:position pos:line="4503" pos:column="43"/></operator><name pos:line="4503" pos:column="43">xAdvance<pos:position pos:line="4503" pos:column="51"/></name></name><operator pos:line="4503" pos:column="51">==<pos:position pos:line="4503" pos:column="53"/></operator><name pos:line="4503" pos:column="53">sqlite3BtreePrevious<pos:position pos:line="4503" pos:column="73"/></name></expr></argument> )<pos:position pos:line="4503" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="4503" pos:column="76"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4504" pos:column="3">assert<pos:position pos:line="4504" pos:column="9"/></name><argument_list pos:line="4504" pos:column="9">( <argument><expr><name><name pos:line="4504" pos:column="11">pOp<pos:position pos:line="4504" pos:column="14"/></name><operator pos:line="4504" pos:column="14">-&gt;<pos:position pos:line="4504" pos:column="19"/></operator><name pos:line="4504" pos:column="16">opcode<pos:position pos:line="4504" pos:column="22"/></name></name><operator pos:line="4504" pos:column="22">!=<pos:position pos:line="4504" pos:column="24"/></operator><name pos:line="4504" pos:column="24">OP_NextIfOpen<pos:position pos:line="4504" pos:column="37"/></name> <operator pos:line="4504" pos:column="38">||<pos:position pos:line="4504" pos:column="40"/></operator> <name><name pos:line="4504" pos:column="41">pOp<pos:position pos:line="4504" pos:column="44"/></name><operator pos:line="4504" pos:column="44">-&gt;<pos:position pos:line="4504" pos:column="49"/></operator><name pos:line="4504" pos:column="46">p4<pos:position pos:line="4504" pos:column="48"/></name><operator pos:line="4504" pos:column="48">.<pos:position pos:line="4504" pos:column="49"/></operator><name pos:line="4504" pos:column="49">xAdvance<pos:position pos:line="4504" pos:column="57"/></name></name><operator pos:line="4504" pos:column="57">==<pos:position pos:line="4504" pos:column="59"/></operator><name pos:line="4504" pos:column="59">sqlite3BtreeNext<pos:position pos:line="4504" pos:column="75"/></name></expr></argument> )<pos:position pos:line="4504" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="4504" pos:column="78"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4505" pos:column="3">assert<pos:position pos:line="4505" pos:column="9"/></name><argument_list pos:line="4505" pos:column="9">( <argument><expr><name><name pos:line="4505" pos:column="11">pOp<pos:position pos:line="4505" pos:column="14"/></name><operator pos:line="4505" pos:column="14">-&gt;<pos:position pos:line="4505" pos:column="19"/></operator><name pos:line="4505" pos:column="16">opcode<pos:position pos:line="4505" pos:column="22"/></name></name><operator pos:line="4505" pos:column="22">!=<pos:position pos:line="4505" pos:column="24"/></operator><name pos:line="4505" pos:column="24">OP_PrevIfOpen<pos:position pos:line="4505" pos:column="37"/></name> <operator pos:line="4505" pos:column="38">||<pos:position pos:line="4505" pos:column="40"/></operator> <name><name pos:line="4505" pos:column="41">pOp<pos:position pos:line="4505" pos:column="44"/></name><operator pos:line="4505" pos:column="44">-&gt;<pos:position pos:line="4505" pos:column="49"/></operator><name pos:line="4505" pos:column="46">p4<pos:position pos:line="4505" pos:column="48"/></name><operator pos:line="4505" pos:column="48">.<pos:position pos:line="4505" pos:column="49"/></operator><name pos:line="4505" pos:column="49">xAdvance<pos:position pos:line="4505" pos:column="57"/></name></name><operator pos:line="4505" pos:column="57">==<pos:position pos:line="4505" pos:column="59"/></operator><name pos:line="4505" pos:column="59">sqlite3BtreePrevious<pos:position pos:line="4505" pos:column="79"/></name></expr></argument>)<pos:position pos:line="4505" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="4505" pos:column="81"/></expr_stmt>

  <comment type="block" pos:line="4507" pos:column="3">/* The Next opcode is only used after SeekGT, SeekGE, and Rewind.
  ** The Prev opcode is only used after SeekLT, SeekLE, and Last. */</comment>
  <expr_stmt><expr><call><name pos:line="4509" pos:column="3">assert<pos:position pos:line="4509" pos:column="9"/></name><argument_list pos:line="4509" pos:column="9">( <argument><expr><name><name pos:line="4509" pos:column="11">pOp<pos:position pos:line="4509" pos:column="14"/></name><operator pos:line="4509" pos:column="14">-&gt;<pos:position pos:line="4509" pos:column="19"/></operator><name pos:line="4509" pos:column="16">opcode<pos:position pos:line="4509" pos:column="22"/></name></name><operator pos:line="4509" pos:column="22">!=<pos:position pos:line="4509" pos:column="24"/></operator><name pos:line="4509" pos:column="24">OP_Next<pos:position pos:line="4509" pos:column="31"/></name> <operator pos:line="4509" pos:column="32">||<pos:position pos:line="4509" pos:column="34"/></operator> <name><name pos:line="4509" pos:column="35">pOp<pos:position pos:line="4509" pos:column="38"/></name><operator pos:line="4509" pos:column="38">-&gt;<pos:position pos:line="4509" pos:column="43"/></operator><name pos:line="4509" pos:column="40">opcode<pos:position pos:line="4509" pos:column="46"/></name></name><operator pos:line="4509" pos:column="46">!=<pos:position pos:line="4509" pos:column="48"/></operator><name pos:line="4509" pos:column="48">OP_NextIfOpen<pos:position pos:line="4509" pos:column="61"/></name>
       <operator pos:line="4510" pos:column="8">||<pos:position pos:line="4510" pos:column="10"/></operator> <name><name pos:line="4510" pos:column="11">pC<pos:position pos:line="4510" pos:column="13"/></name><operator pos:line="4510" pos:column="13">-&gt;<pos:position pos:line="4510" pos:column="18"/></operator><name pos:line="4510" pos:column="15">seekOp<pos:position pos:line="4510" pos:column="21"/></name></name><operator pos:line="4510" pos:column="21">==<pos:position pos:line="4510" pos:column="23"/></operator><name pos:line="4510" pos:column="23">OP_SeekGT<pos:position pos:line="4510" pos:column="32"/></name> <operator pos:line="4510" pos:column="33">||<pos:position pos:line="4510" pos:column="35"/></operator> <name><name pos:line="4510" pos:column="36">pC<pos:position pos:line="4510" pos:column="38"/></name><operator pos:line="4510" pos:column="38">-&gt;<pos:position pos:line="4510" pos:column="43"/></operator><name pos:line="4510" pos:column="40">seekOp<pos:position pos:line="4510" pos:column="46"/></name></name><operator pos:line="4510" pos:column="46">==<pos:position pos:line="4510" pos:column="48"/></operator><name pos:line="4510" pos:column="48">OP_SeekGE<pos:position pos:line="4510" pos:column="57"/></name>
       <operator pos:line="4511" pos:column="8">||<pos:position pos:line="4511" pos:column="10"/></operator> <name><name pos:line="4511" pos:column="11">pC<pos:position pos:line="4511" pos:column="13"/></name><operator pos:line="4511" pos:column="13">-&gt;<pos:position pos:line="4511" pos:column="18"/></operator><name pos:line="4511" pos:column="15">seekOp<pos:position pos:line="4511" pos:column="21"/></name></name><operator pos:line="4511" pos:column="21">==<pos:position pos:line="4511" pos:column="23"/></operator><name pos:line="4511" pos:column="23">OP_Rewind<pos:position pos:line="4511" pos:column="32"/></name> <operator pos:line="4511" pos:column="33">||<pos:position pos:line="4511" pos:column="35"/></operator> <name><name pos:line="4511" pos:column="36">pC<pos:position pos:line="4511" pos:column="38"/></name><operator pos:line="4511" pos:column="38">-&gt;<pos:position pos:line="4511" pos:column="43"/></operator><name pos:line="4511" pos:column="40">seekOp<pos:position pos:line="4511" pos:column="46"/></name></name><operator pos:line="4511" pos:column="46">==<pos:position pos:line="4511" pos:column="48"/></operator><name pos:line="4511" pos:column="48">OP_Found<pos:position pos:line="4511" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4511" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4511" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4512" pos:column="3">assert<pos:position pos:line="4512" pos:column="9"/></name><argument_list pos:line="4512" pos:column="9">( <argument><expr><name><name pos:line="4512" pos:column="11">pOp<pos:position pos:line="4512" pos:column="14"/></name><operator pos:line="4512" pos:column="14">-&gt;<pos:position pos:line="4512" pos:column="19"/></operator><name pos:line="4512" pos:column="16">opcode<pos:position pos:line="4512" pos:column="22"/></name></name><operator pos:line="4512" pos:column="22">!=<pos:position pos:line="4512" pos:column="24"/></operator><name pos:line="4512" pos:column="24">OP_Prev<pos:position pos:line="4512" pos:column="31"/></name> <operator pos:line="4512" pos:column="32">||<pos:position pos:line="4512" pos:column="34"/></operator> <name><name pos:line="4512" pos:column="35">pOp<pos:position pos:line="4512" pos:column="38"/></name><operator pos:line="4512" pos:column="38">-&gt;<pos:position pos:line="4512" pos:column="43"/></operator><name pos:line="4512" pos:column="40">opcode<pos:position pos:line="4512" pos:column="46"/></name></name><operator pos:line="4512" pos:column="46">!=<pos:position pos:line="4512" pos:column="48"/></operator><name pos:line="4512" pos:column="48">OP_PrevIfOpen<pos:position pos:line="4512" pos:column="61"/></name>
       <operator pos:line="4513" pos:column="8">||<pos:position pos:line="4513" pos:column="10"/></operator> <name><name pos:line="4513" pos:column="11">pC<pos:position pos:line="4513" pos:column="13"/></name><operator pos:line="4513" pos:column="13">-&gt;<pos:position pos:line="4513" pos:column="18"/></operator><name pos:line="4513" pos:column="15">seekOp<pos:position pos:line="4513" pos:column="21"/></name></name><operator pos:line="4513" pos:column="21">==<pos:position pos:line="4513" pos:column="23"/></operator><name pos:line="4513" pos:column="23">OP_SeekLT<pos:position pos:line="4513" pos:column="32"/></name> <operator pos:line="4513" pos:column="33">||<pos:position pos:line="4513" pos:column="35"/></operator> <name><name pos:line="4513" pos:column="36">pC<pos:position pos:line="4513" pos:column="38"/></name><operator pos:line="4513" pos:column="38">-&gt;<pos:position pos:line="4513" pos:column="43"/></operator><name pos:line="4513" pos:column="40">seekOp<pos:position pos:line="4513" pos:column="46"/></name></name><operator pos:line="4513" pos:column="46">==<pos:position pos:line="4513" pos:column="48"/></operator><name pos:line="4513" pos:column="48">OP_SeekLE<pos:position pos:line="4513" pos:column="57"/></name>
       <operator pos:line="4514" pos:column="8">||<pos:position pos:line="4514" pos:column="10"/></operator> <name><name pos:line="4514" pos:column="11">pC<pos:position pos:line="4514" pos:column="13"/></name><operator pos:line="4514" pos:column="13">-&gt;<pos:position pos:line="4514" pos:column="18"/></operator><name pos:line="4514" pos:column="15">seekOp<pos:position pos:line="4514" pos:column="21"/></name></name><operator pos:line="4514" pos:column="21">==<pos:position pos:line="4514" pos:column="23"/></operator><name pos:line="4514" pos:column="23">OP_Last<pos:position pos:line="4514" pos:column="30"/></name></expr></argument> )<pos:position pos:line="4514" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4514" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><name pos:line="4516" pos:column="3">rc<pos:position pos:line="4516" pos:column="5"/></name> <operator pos:line="4516" pos:column="6">=<pos:position pos:line="4516" pos:column="7"/></operator> <call><name><name pos:line="4516" pos:column="8">pOp<pos:position pos:line="4516" pos:column="11"/></name><operator pos:line="4516" pos:column="11">-&gt;<pos:position pos:line="4516" pos:column="16"/></operator><name pos:line="4516" pos:column="13">p4<pos:position pos:line="4516" pos:column="15"/></name><operator pos:line="4516" pos:column="15">.<pos:position pos:line="4516" pos:column="16"/></operator><name pos:line="4516" pos:column="16">xAdvance<pos:position pos:line="4516" pos:column="24"/></name></name><argument_list pos:line="4516" pos:column="24">(<argument><expr><name><name pos:line="4516" pos:column="25">pC<pos:position pos:line="4516" pos:column="27"/></name><operator pos:line="4516" pos:column="27">-&gt;<pos:position pos:line="4516" pos:column="32"/></operator><name pos:line="4516" pos:column="29">uc<pos:position pos:line="4516" pos:column="31"/></name><operator pos:line="4516" pos:column="31">.<pos:position pos:line="4516" pos:column="32"/></operator><name pos:line="4516" pos:column="32">pCursor<pos:position pos:line="4516" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4516" pos:column="41">pOp<pos:position pos:line="4516" pos:column="44"/></name><operator pos:line="4516" pos:column="44">-&gt;<pos:position pos:line="4516" pos:column="49"/></operator><name pos:line="4516" pos:column="46">p3<pos:position pos:line="4516" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="4516" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="4516" pos:column="50"/></expr_stmt>
<label><name pos:line="4517" pos:column="1">next_tail<pos:position pos:line="4517" pos:column="10"/></name>:<pos:position pos:line="4517" pos:column="11"/></label>
  <expr_stmt><expr><name><name pos:line="4518" pos:column="3">pC<pos:position pos:line="4518" pos:column="5"/></name><operator pos:line="4518" pos:column="5">-&gt;<pos:position pos:line="4518" pos:column="10"/></operator><name pos:line="4518" pos:column="7">cacheStatus<pos:position pos:line="4518" pos:column="18"/></name></name> <operator pos:line="4518" pos:column="19">=<pos:position pos:line="4518" pos:column="20"/></operator> <name pos:line="4518" pos:column="21">CACHE_STALE<pos:position pos:line="4518" pos:column="32"/></name></expr>;<pos:position pos:line="4518" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4519" pos:column="3">VdbeBranchTaken<pos:position pos:line="4519" pos:column="18"/></name><argument_list pos:line="4519" pos:column="18">(<argument><expr><name pos:line="4519" pos:column="19">rc<pos:position pos:line="4519" pos:column="21"/></name><operator pos:line="4519" pos:column="21">==<pos:position pos:line="4519" pos:column="23"/></operator><name pos:line="4519" pos:column="23">SQLITE_OK<pos:position pos:line="4519" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="4519" pos:column="33">2<pos:position pos:line="4519" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4519" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4519" pos:column="36"/></expr_stmt>
  <if pos:line="4520" pos:column="3">if<condition pos:line="4520" pos:column="5">( <expr><name pos:line="4520" pos:column="7">rc<pos:position pos:line="4520" pos:column="9"/></name><operator pos:line="4520" pos:column="9">==<pos:position pos:line="4520" pos:column="11"/></operator><name pos:line="4520" pos:column="11">SQLITE_OK<pos:position pos:line="4520" pos:column="20"/></name></expr> )<pos:position pos:line="4520" pos:column="22"/></condition><then><block pos:line="4520" pos:column="22">{
    <expr_stmt><expr><name><name pos:line="4521" pos:column="5">pC<pos:position pos:line="4521" pos:column="7"/></name><operator pos:line="4521" pos:column="7">-&gt;<pos:position pos:line="4521" pos:column="12"/></operator><name pos:line="4521" pos:column="9">nullRow<pos:position pos:line="4521" pos:column="16"/></name></name> <operator pos:line="4521" pos:column="17">=<pos:position pos:line="4521" pos:column="18"/></operator> <literal type="number" pos:line="4521" pos:column="19">0<pos:position pos:line="4521" pos:column="20"/></literal></expr>;<pos:position pos:line="4521" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4522" pos:column="5">p<pos:position pos:line="4522" pos:column="6"/></name><operator pos:line="4522" pos:column="6">-&gt;<pos:position pos:line="4522" pos:column="11"/></operator><name pos:line="4522" pos:column="8">aCounter<pos:position pos:line="4522" pos:column="16"/></name><index pos:line="4522" pos:column="16">[<expr><name><name pos:line="4522" pos:column="17">pOp<pos:position pos:line="4522" pos:column="20"/></name><operator pos:line="4522" pos:column="20">-&gt;<pos:position pos:line="4522" pos:column="25"/></operator><name pos:line="4522" pos:column="22">p5<pos:position pos:line="4522" pos:column="24"/></name></name></expr>]<pos:position pos:line="4522" pos:column="25"/></index></name><operator pos:line="4522" pos:column="25">++<pos:position pos:line="4522" pos:column="27"/></operator></expr>;<pos:position pos:line="4522" pos:column="28"/></expr_stmt>
<cpp:ifdef pos:line="4523" pos:column="1">#<cpp:directive pos:line="4523" pos:column="2">ifdef<pos:position pos:line="4523" pos:column="7"/></cpp:directive> <name pos:line="4523" pos:column="8">SQLITE_TEST<pos:position pos:line="4523" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="4524" pos:column="5">sqlite3_search_count<pos:position pos:line="4524" pos:column="25"/></name><operator pos:line="4524" pos:column="25">++<pos:position pos:line="4524" pos:column="27"/></operator></expr>;<pos:position pos:line="4524" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="4525" pos:column="1">#<cpp:directive pos:line="4525" pos:column="2">endif<pos:position pos:line="4525" pos:column="7"/></cpp:directive></cpp:endif>
    <goto pos:line="4526" pos:column="5">goto <name pos:line="4526" pos:column="10">jump_to_p2_and_check_for_interrupt<pos:position pos:line="4526" pos:column="44"/></name>;<pos:position pos:line="4526" pos:column="45"/></goto>
  }<pos:position pos:line="4527" pos:column="4"/></block></then></if>
  <if pos:line="4528" pos:column="3">if<condition pos:line="4528" pos:column="5">( <expr><name pos:line="4528" pos:column="7">rc<pos:position pos:line="4528" pos:column="9"/></name><operator pos:line="4528" pos:column="9">!=<pos:position pos:line="4528" pos:column="11"/></operator><name pos:line="4528" pos:column="11">SQLITE_DONE<pos:position pos:line="4528" pos:column="22"/></name></expr> )<pos:position pos:line="4528" pos:column="24"/></condition><then pos:line="4528" pos:column="24"> <block type="pseudo"><goto pos:line="4528" pos:column="25">goto <name pos:line="4528" pos:column="30">abort_due_to_error<pos:position pos:line="4528" pos:column="48"/></name>;<pos:position pos:line="4528" pos:column="49"/></goto></block></then></if>
  <expr_stmt><expr><name pos:line="4529" pos:column="3">rc<pos:position pos:line="4529" pos:column="5"/></name> <operator pos:line="4529" pos:column="6">=<pos:position pos:line="4529" pos:column="7"/></operator> <name pos:line="4529" pos:column="8">SQLITE_OK<pos:position pos:line="4529" pos:column="17"/></name></expr>;<pos:position pos:line="4529" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4530" pos:column="3">pC<pos:position pos:line="4530" pos:column="5"/></name><operator pos:line="4530" pos:column="5">-&gt;<pos:position pos:line="4530" pos:column="10"/></operator><name pos:line="4530" pos:column="7">nullRow<pos:position pos:line="4530" pos:column="14"/></name></name> <operator pos:line="4530" pos:column="15">=<pos:position pos:line="4530" pos:column="16"/></operator> <literal type="number" pos:line="4530" pos:column="17">1<pos:position pos:line="4530" pos:column="18"/></literal></expr>;<pos:position pos:line="4530" pos:column="19"/></expr_stmt>
  <goto pos:line="4531" pos:column="3">goto <name pos:line="4531" pos:column="8">check_for_interrupt<pos:position pos:line="4531" pos:column="27"/></name>;<pos:position pos:line="4531" pos:column="28"/></goto>
}<pos:position pos:line="4532" pos:column="2"/></block>

<comment type="block" pos:line="4534" pos:column="1">/* Opcode: IdxInsert P1 P2 P3 P4 P5
** Synopsis: key=r[P2]
**
** Register P2 holds an SQL index key made using the
** MakeRecord instructions.  This opcode writes that key
** into the index P1.  Data for the entry is nil.
**
** If P4 is not zero, then it is the number of values in the unpacked
** key of reg(P2).  In that case, P3 is the index of the first register
** for the unpacked key.  The availability of the unpacked key can sometimes
** be an optimization.
**
** If P5 has the OPFLAG_APPEND bit set, that is a hint to the b-tree layer
** that this insert is likely to be an append.
**
** If P5 has the OPFLAG_NCHANGE bit set, then the change counter is
** incremented by this instruction.  If the OPFLAG_NCHANGE bit is clear,
** then the change counter is unchanged.
**
** If the OPFLAG_USESEEKRESULT flag of P5 is set, the implementation might
** run faster by avoiding an unnecessary seek on cursor P1.  However,
** the OPFLAG_USESEEKRESULT flag must only be set if there have been no prior
** seeks on the cursor or if the most recent seek used a key equivalent
** to P2. 
**
** This instruction only works for indices.  The equivalent instruction
** for tables is OP_Insert.
*/</comment>
<comment type="block" pos:line="4562" pos:column="1">/* Opcode: SorterInsert P1 P2 * * *
** Synopsis: key=r[P2]
**
** Register P2 holds an SQL index key made using the
** MakeRecord instructions.  This opcode writes that key
** into the sorter P1.  Data for the entry is nil.
*/</comment>
<case pos:line="4569" pos:column="1">case <expr><name pos:line="4569" pos:column="6">OP_SorterInsert<pos:position pos:line="4569" pos:column="21"/></name></expr>:<pos:position pos:line="4569" pos:column="22"/></case>       <comment type="block" pos:line="4569" pos:column="29">/* in2 */</comment>
<case pos:line="4570" pos:column="1">case <expr><name pos:line="4570" pos:column="6">OP_IdxInsert<pos:position pos:line="4570" pos:column="18"/></name></expr>:<pos:position pos:line="4570" pos:column="19"/></case> <block pos:line="4570" pos:column="20">{        <comment type="block" pos:line="4570" pos:column="29">/* in2 */</comment>
  <decl_stmt><decl><type><name pos:line="4571" pos:column="3">VdbeCursor<pos:position pos:line="4571" pos:column="13"/></name> <modifier pos:line="4571" pos:column="14">*<pos:position pos:line="4571" pos:column="15"/></modifier></type><name pos:line="4571" pos:column="15">pC<pos:position pos:line="4571" pos:column="17"/></name></decl>;<pos:position pos:line="4571" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4572" pos:column="3">BtreePayload<pos:position pos:line="4572" pos:column="15"/></name></type> <name pos:line="4572" pos:column="16">x<pos:position pos:line="4572" pos:column="17"/></name></decl>;<pos:position pos:line="4572" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4574" pos:column="3">assert<pos:position pos:line="4574" pos:column="9"/></name><argument_list pos:line="4574" pos:column="9">( <argument><expr><name><name pos:line="4574" pos:column="11">pOp<pos:position pos:line="4574" pos:column="14"/></name><operator pos:line="4574" pos:column="14">-&gt;<pos:position pos:line="4574" pos:column="19"/></operator><name pos:line="4574" pos:column="16">p1<pos:position pos:line="4574" pos:column="18"/></name></name><operator pos:line="4574" pos:column="18">&gt;=<pos:position pos:line="4574" pos:column="23"/></operator><literal type="number" pos:line="4574" pos:column="20">0<pos:position pos:line="4574" pos:column="21"/></literal> <operator pos:line="4574" pos:column="22">&amp;&amp;<pos:position pos:line="4574" pos:column="32"/></operator> <name><name pos:line="4574" pos:column="25">pOp<pos:position pos:line="4574" pos:column="28"/></name><operator pos:line="4574" pos:column="28">-&gt;<pos:position pos:line="4574" pos:column="33"/></operator><name pos:line="4574" pos:column="30">p1<pos:position pos:line="4574" pos:column="32"/></name></name><operator pos:line="4574" pos:column="32">&lt;<pos:position pos:line="4574" pos:column="36"/></operator><name><name pos:line="4574" pos:column="33">p<pos:position pos:line="4574" pos:column="34"/></name><operator pos:line="4574" pos:column="34">-&gt;<pos:position pos:line="4574" pos:column="39"/></operator><name pos:line="4574" pos:column="36">nCursor<pos:position pos:line="4574" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4574" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4574" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4575" pos:column="3">pC<pos:position pos:line="4575" pos:column="5"/></name> <operator pos:line="4575" pos:column="6">=<pos:position pos:line="4575" pos:column="7"/></operator> <name><name pos:line="4575" pos:column="8">p<pos:position pos:line="4575" pos:column="9"/></name><operator pos:line="4575" pos:column="9">-&gt;<pos:position pos:line="4575" pos:column="14"/></operator><name pos:line="4575" pos:column="11">apCsr<pos:position pos:line="4575" pos:column="16"/></name><index pos:line="4575" pos:column="16">[<expr><name><name pos:line="4575" pos:column="17">pOp<pos:position pos:line="4575" pos:column="20"/></name><operator pos:line="4575" pos:column="20">-&gt;<pos:position pos:line="4575" pos:column="25"/></operator><name pos:line="4575" pos:column="22">p1<pos:position pos:line="4575" pos:column="24"/></name></name></expr>]<pos:position pos:line="4575" pos:column="25"/></index></name></expr>;<pos:position pos:line="4575" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4576" pos:column="3">assert<pos:position pos:line="4576" pos:column="9"/></name><argument_list pos:line="4576" pos:column="9">( <argument><expr><name pos:line="4576" pos:column="11">pC<pos:position pos:line="4576" pos:column="13"/></name><operator pos:line="4576" pos:column="13">!=<pos:position pos:line="4576" pos:column="15"/></operator><literal type="number" pos:line="4576" pos:column="15">0<pos:position pos:line="4576" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4576" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4576" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4577" pos:column="3">assert<pos:position pos:line="4577" pos:column="9"/></name><argument_list pos:line="4577" pos:column="9">( <argument><expr><call><name pos:line="4577" pos:column="11">isSorter<pos:position pos:line="4577" pos:column="19"/></name><argument_list pos:line="4577" pos:column="19">(<argument><expr><name pos:line="4577" pos:column="20">pC<pos:position pos:line="4577" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4577" pos:column="23"/></argument_list></call><operator pos:line="4577" pos:column="23">==<pos:position pos:line="4577" pos:column="25"/></operator><operator pos:line="4577" pos:column="25">(<pos:position pos:line="4577" pos:column="26"/></operator><name><name pos:line="4577" pos:column="26">pOp<pos:position pos:line="4577" pos:column="29"/></name><operator pos:line="4577" pos:column="29">-&gt;<pos:position pos:line="4577" pos:column="34"/></operator><name pos:line="4577" pos:column="31">opcode<pos:position pos:line="4577" pos:column="37"/></name></name><operator pos:line="4577" pos:column="37">==<pos:position pos:line="4577" pos:column="39"/></operator><name pos:line="4577" pos:column="39">OP_SorterInsert<pos:position pos:line="4577" pos:column="54"/></name><operator pos:line="4577" pos:column="54">)<pos:position pos:line="4577" pos:column="55"/></operator></expr></argument> )<pos:position pos:line="4577" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4577" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4578" pos:column="3">pIn2<pos:position pos:line="4578" pos:column="7"/></name> <operator pos:line="4578" pos:column="8">=<pos:position pos:line="4578" pos:column="9"/></operator> <operator pos:line="4578" pos:column="10">&amp;<pos:position pos:line="4578" pos:column="15"/></operator><name><name pos:line="4578" pos:column="11">aMem<pos:position pos:line="4578" pos:column="15"/></name><index pos:line="4578" pos:column="15">[<expr><name><name pos:line="4578" pos:column="16">pOp<pos:position pos:line="4578" pos:column="19"/></name><operator pos:line="4578" pos:column="19">-&gt;<pos:position pos:line="4578" pos:column="24"/></operator><name pos:line="4578" pos:column="21">p2<pos:position pos:line="4578" pos:column="23"/></name></name></expr>]<pos:position pos:line="4578" pos:column="24"/></index></name></expr>;<pos:position pos:line="4578" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4579" pos:column="3">assert<pos:position pos:line="4579" pos:column="9"/></name><argument_list pos:line="4579" pos:column="9">( <argument><expr><name><name pos:line="4579" pos:column="11">pIn2<pos:position pos:line="4579" pos:column="15"/></name><operator pos:line="4579" pos:column="15">-&gt;<pos:position pos:line="4579" pos:column="20"/></operator><name pos:line="4579" pos:column="17">flags<pos:position pos:line="4579" pos:column="22"/></name></name> <operator pos:line="4579" pos:column="23">&amp;<pos:position pos:line="4579" pos:column="28"/></operator> <name pos:line="4579" pos:column="25">MEM_Blob<pos:position pos:line="4579" pos:column="33"/></name></expr></argument> )<pos:position pos:line="4579" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4579" pos:column="36"/></expr_stmt>
  <if pos:line="4580" pos:column="3">if<condition pos:line="4580" pos:column="5">( <expr><name><name pos:line="4580" pos:column="7">pOp<pos:position pos:line="4580" pos:column="10"/></name><operator pos:line="4580" pos:column="10">-&gt;<pos:position pos:line="4580" pos:column="15"/></operator><name pos:line="4580" pos:column="12">p5<pos:position pos:line="4580" pos:column="14"/></name></name> <operator pos:line="4580" pos:column="15">&amp;<pos:position pos:line="4580" pos:column="20"/></operator> <name pos:line="4580" pos:column="17">OPFLAG_NCHANGE<pos:position pos:line="4580" pos:column="31"/></name></expr> )<pos:position pos:line="4580" pos:column="33"/></condition><then pos:line="4580" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="4580" pos:column="34">p<pos:position pos:line="4580" pos:column="35"/></name><operator pos:line="4580" pos:column="35">-&gt;<pos:position pos:line="4580" pos:column="40"/></operator><name pos:line="4580" pos:column="37">nChange<pos:position pos:line="4580" pos:column="44"/></name></name><operator pos:line="4580" pos:column="44">++<pos:position pos:line="4580" pos:column="46"/></operator></expr>;<pos:position pos:line="4580" pos:column="47"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="4581" pos:column="3">assert<pos:position pos:line="4581" pos:column="9"/></name><argument_list pos:line="4581" pos:column="9">( <argument><expr><name><name pos:line="4581" pos:column="11">pC<pos:position pos:line="4581" pos:column="13"/></name><operator pos:line="4581" pos:column="13">-&gt;<pos:position pos:line="4581" pos:column="18"/></operator><name pos:line="4581" pos:column="15">eCurType<pos:position pos:line="4581" pos:column="23"/></name></name><operator pos:line="4581" pos:column="23">==<pos:position pos:line="4581" pos:column="25"/></operator><name pos:line="4581" pos:column="25">CURTYPE_BTREE<pos:position pos:line="4581" pos:column="38"/></name> <operator pos:line="4581" pos:column="39">||<pos:position pos:line="4581" pos:column="41"/></operator> <name><name pos:line="4581" pos:column="42">pOp<pos:position pos:line="4581" pos:column="45"/></name><operator pos:line="4581" pos:column="45">-&gt;<pos:position pos:line="4581" pos:column="50"/></operator><name pos:line="4581" pos:column="47">opcode<pos:position pos:line="4581" pos:column="53"/></name></name><operator pos:line="4581" pos:column="53">==<pos:position pos:line="4581" pos:column="55"/></operator><name pos:line="4581" pos:column="55">OP_SorterInsert<pos:position pos:line="4581" pos:column="70"/></name></expr></argument> )<pos:position pos:line="4581" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="4581" pos:column="73"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4582" pos:column="3">assert<pos:position pos:line="4582" pos:column="9"/></name><argument_list pos:line="4582" pos:column="9">( <argument><expr><name><name pos:line="4582" pos:column="11">pC<pos:position pos:line="4582" pos:column="13"/></name><operator pos:line="4582" pos:column="13">-&gt;<pos:position pos:line="4582" pos:column="18"/></operator><name pos:line="4582" pos:column="15">isTable<pos:position pos:line="4582" pos:column="22"/></name></name><operator pos:line="4582" pos:column="22">==<pos:position pos:line="4582" pos:column="24"/></operator><literal type="number" pos:line="4582" pos:column="24">0<pos:position pos:line="4582" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="4582" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4582" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4583" pos:column="3">rc<pos:position pos:line="4583" pos:column="5"/></name> <operator pos:line="4583" pos:column="6">=<pos:position pos:line="4583" pos:column="7"/></operator> <call><name pos:line="4583" pos:column="8">ExpandBlob<pos:position pos:line="4583" pos:column="18"/></name><argument_list pos:line="4583" pos:column="18">(<argument><expr><name pos:line="4583" pos:column="19">pIn2<pos:position pos:line="4583" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4583" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4583" pos:column="25"/></expr_stmt>
  <if pos:line="4584" pos:column="3">if<condition pos:line="4584" pos:column="5">( <expr><name pos:line="4584" pos:column="7">rc<pos:position pos:line="4584" pos:column="9"/></name></expr> )<pos:position pos:line="4584" pos:column="11"/></condition><then pos:line="4584" pos:column="11"> <block type="pseudo"><goto pos:line="4584" pos:column="12">goto <name pos:line="4584" pos:column="17">abort_due_to_error<pos:position pos:line="4584" pos:column="35"/></name>;<pos:position pos:line="4584" pos:column="36"/></goto></block></then></if>
  <if pos:line="4585" pos:column="3">if<condition pos:line="4585" pos:column="5">( <expr><name><name pos:line="4585" pos:column="7">pOp<pos:position pos:line="4585" pos:column="10"/></name><operator pos:line="4585" pos:column="10">-&gt;<pos:position pos:line="4585" pos:column="15"/></operator><name pos:line="4585" pos:column="12">opcode<pos:position pos:line="4585" pos:column="18"/></name></name><operator pos:line="4585" pos:column="18">==<pos:position pos:line="4585" pos:column="20"/></operator><name pos:line="4585" pos:column="20">OP_SorterInsert<pos:position pos:line="4585" pos:column="35"/></name></expr> )<pos:position pos:line="4585" pos:column="37"/></condition><then><block pos:line="4585" pos:column="37">{
    <expr_stmt><expr><name pos:line="4586" pos:column="5">rc<pos:position pos:line="4586" pos:column="7"/></name> <operator pos:line="4586" pos:column="8">=<pos:position pos:line="4586" pos:column="9"/></operator> <call><name pos:line="4586" pos:column="10">sqlite3VdbeSorterWrite<pos:position pos:line="4586" pos:column="32"/></name><argument_list pos:line="4586" pos:column="32">(<argument><expr><name pos:line="4586" pos:column="33">pC<pos:position pos:line="4586" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="4586" pos:column="37">pIn2<pos:position pos:line="4586" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4586" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4586" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="4587" pos:column="4"/></block></then><else pos:line="4587" pos:column="4">else<block pos:line="4587" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="4588" pos:column="5">x<pos:position pos:line="4588" pos:column="6"/></name><operator pos:line="4588" pos:column="6">.<pos:position pos:line="4588" pos:column="7"/></operator><name pos:line="4588" pos:column="7">nKey<pos:position pos:line="4588" pos:column="11"/></name></name> <operator pos:line="4588" pos:column="12">=<pos:position pos:line="4588" pos:column="13"/></operator> <name><name pos:line="4588" pos:column="14">pIn2<pos:position pos:line="4588" pos:column="18"/></name><operator pos:line="4588" pos:column="18">-&gt;<pos:position pos:line="4588" pos:column="23"/></operator><name pos:line="4588" pos:column="20">n<pos:position pos:line="4588" pos:column="21"/></name></name></expr>;<pos:position pos:line="4588" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4589" pos:column="5">x<pos:position pos:line="4589" pos:column="6"/></name><operator pos:line="4589" pos:column="6">.<pos:position pos:line="4589" pos:column="7"/></operator><name pos:line="4589" pos:column="7">pKey<pos:position pos:line="4589" pos:column="11"/></name></name> <operator pos:line="4589" pos:column="12">=<pos:position pos:line="4589" pos:column="13"/></operator> <name><name pos:line="4589" pos:column="14">pIn2<pos:position pos:line="4589" pos:column="18"/></name><operator pos:line="4589" pos:column="18">-&gt;<pos:position pos:line="4589" pos:column="23"/></operator><name pos:line="4589" pos:column="20">z<pos:position pos:line="4589" pos:column="21"/></name></name></expr>;<pos:position pos:line="4589" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4590" pos:column="5">x<pos:position pos:line="4590" pos:column="6"/></name><operator pos:line="4590" pos:column="6">.<pos:position pos:line="4590" pos:column="7"/></operator><name pos:line="4590" pos:column="7">aMem<pos:position pos:line="4590" pos:column="11"/></name></name> <operator pos:line="4590" pos:column="12">=<pos:position pos:line="4590" pos:column="13"/></operator> <name pos:line="4590" pos:column="14">aMem<pos:position pos:line="4590" pos:column="18"/></name> <operator pos:line="4590" pos:column="19">+<pos:position pos:line="4590" pos:column="20"/></operator> <name><name pos:line="4590" pos:column="21">pOp<pos:position pos:line="4590" pos:column="24"/></name><operator pos:line="4590" pos:column="24">-&gt;<pos:position pos:line="4590" pos:column="29"/></operator><name pos:line="4590" pos:column="26">p3<pos:position pos:line="4590" pos:column="28"/></name></name></expr>;<pos:position pos:line="4590" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4591" pos:column="5">x<pos:position pos:line="4591" pos:column="6"/></name><operator pos:line="4591" pos:column="6">.<pos:position pos:line="4591" pos:column="7"/></operator><name pos:line="4591" pos:column="7">nMem<pos:position pos:line="4591" pos:column="11"/></name></name> <operator pos:line="4591" pos:column="12">=<pos:position pos:line="4591" pos:column="13"/></operator> <operator pos:line="4591" pos:column="14">(<pos:position pos:line="4591" pos:column="15"/></operator><name pos:line="4591" pos:column="15">u16<pos:position pos:line="4591" pos:column="18"/></name><operator pos:line="4591" pos:column="18">)<pos:position pos:line="4591" pos:column="19"/></operator><name><name pos:line="4591" pos:column="19">pOp<pos:position pos:line="4591" pos:column="22"/></name><operator pos:line="4591" pos:column="22">-&gt;<pos:position pos:line="4591" pos:column="27"/></operator><name pos:line="4591" pos:column="24">p4<pos:position pos:line="4591" pos:column="26"/></name><operator pos:line="4591" pos:column="26">.<pos:position pos:line="4591" pos:column="27"/></operator><name pos:line="4591" pos:column="27">i<pos:position pos:line="4591" pos:column="28"/></name></name></expr>;<pos:position pos:line="4591" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4592" pos:column="5">rc<pos:position pos:line="4592" pos:column="7"/></name> <operator pos:line="4592" pos:column="8">=<pos:position pos:line="4592" pos:column="9"/></operator> <call><name pos:line="4592" pos:column="10">sqlite3BtreeInsert<pos:position pos:line="4592" pos:column="28"/></name><argument_list pos:line="4592" pos:column="28">(<argument><expr><name><name pos:line="4592" pos:column="29">pC<pos:position pos:line="4592" pos:column="31"/></name><operator pos:line="4592" pos:column="31">-&gt;<pos:position pos:line="4592" pos:column="36"/></operator><name pos:line="4592" pos:column="33">uc<pos:position pos:line="4592" pos:column="35"/></name><operator pos:line="4592" pos:column="35">.<pos:position pos:line="4592" pos:column="36"/></operator><name pos:line="4592" pos:column="36">pCursor<pos:position pos:line="4592" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="4592" pos:column="45">&amp;<pos:position pos:line="4592" pos:column="50"/></operator><name pos:line="4592" pos:column="46">x<pos:position pos:line="4592" pos:column="47"/></name></expr></argument>,
         <argument><expr><operator pos:line="4593" pos:column="10">(<pos:position pos:line="4593" pos:column="11"/></operator><name><name pos:line="4593" pos:column="11">pOp<pos:position pos:line="4593" pos:column="14"/></name><operator pos:line="4593" pos:column="14">-&gt;<pos:position pos:line="4593" pos:column="19"/></operator><name pos:line="4593" pos:column="16">p5<pos:position pos:line="4593" pos:column="18"/></name></name> <operator pos:line="4593" pos:column="19">&amp;<pos:position pos:line="4593" pos:column="24"/></operator> <operator pos:line="4593" pos:column="21">(<pos:position pos:line="4593" pos:column="22"/></operator><name pos:line="4593" pos:column="22">OPFLAG_APPEND<pos:position pos:line="4593" pos:column="35"/></name><operator pos:line="4593" pos:column="35">|<pos:position pos:line="4593" pos:column="36"/></operator><name pos:line="4593" pos:column="36">OPFLAG_SAVEPOSITION<pos:position pos:line="4593" pos:column="55"/></name><operator pos:line="4593" pos:column="55">)<pos:position pos:line="4593" pos:column="56"/></operator><operator pos:line="4593" pos:column="56">)<pos:position pos:line="4593" pos:column="57"/></operator></expr></argument>, 
        <argument><expr><operator pos:line="4594" pos:column="9">(<pos:position pos:line="4594" pos:column="10"/></operator><ternary><condition><expr><operator pos:line="4594" pos:column="10">(<pos:position pos:line="4594" pos:column="11"/></operator><name><name pos:line="4594" pos:column="11">pOp<pos:position pos:line="4594" pos:column="14"/></name><operator pos:line="4594" pos:column="14">-&gt;<pos:position pos:line="4594" pos:column="19"/></operator><name pos:line="4594" pos:column="16">p5<pos:position pos:line="4594" pos:column="18"/></name></name> <operator pos:line="4594" pos:column="19">&amp;<pos:position pos:line="4594" pos:column="24"/></operator> <name pos:line="4594" pos:column="21">OPFLAG_USESEEKRESULT<pos:position pos:line="4594" pos:column="41"/></name><operator pos:line="4594" pos:column="41">)<pos:position pos:line="4594" pos:column="42"/></operator></expr> ?<pos:position pos:line="4594" pos:column="44"/></condition><then pos:line="4594" pos:column="44"> <expr><name><name pos:line="4594" pos:column="45">pC<pos:position pos:line="4594" pos:column="47"/></name><operator pos:line="4594" pos:column="47">-&gt;<pos:position pos:line="4594" pos:column="52"/></operator><name pos:line="4594" pos:column="49">seekResult<pos:position pos:line="4594" pos:column="59"/></name></name></expr> <pos:position pos:line="4594" pos:column="60"/></then><else pos:line="4594" pos:column="60">: <expr><literal type="number" pos:line="4594" pos:column="62">0<pos:position pos:line="4594" pos:column="63"/></literal></expr></else></ternary><operator pos:line="4594" pos:column="63">)<pos:position pos:line="4594" pos:column="64"/></operator></expr></argument>
        )<pos:position pos:line="4595" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="4595" pos:column="11"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4596" pos:column="5">assert<pos:position pos:line="4596" pos:column="11"/></name><argument_list pos:line="4596" pos:column="11">( <argument><expr><name><name pos:line="4596" pos:column="13">pC<pos:position pos:line="4596" pos:column="15"/></name><operator pos:line="4596" pos:column="15">-&gt;<pos:position pos:line="4596" pos:column="20"/></operator><name pos:line="4596" pos:column="17">deferredMoveto<pos:position pos:line="4596" pos:column="31"/></name></name><operator pos:line="4596" pos:column="31">==<pos:position pos:line="4596" pos:column="33"/></operator><literal type="number" pos:line="4596" pos:column="33">0<pos:position pos:line="4596" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="4596" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4596" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4597" pos:column="5">pC<pos:position pos:line="4597" pos:column="7"/></name><operator pos:line="4597" pos:column="7">-&gt;<pos:position pos:line="4597" pos:column="12"/></operator><name pos:line="4597" pos:column="9">cacheStatus<pos:position pos:line="4597" pos:column="20"/></name></name> <operator pos:line="4597" pos:column="21">=<pos:position pos:line="4597" pos:column="22"/></operator> <name pos:line="4597" pos:column="23">CACHE_STALE<pos:position pos:line="4597" pos:column="34"/></name></expr>;<pos:position pos:line="4597" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="4598" pos:column="4"/></block></else></if>
  <if pos:line="4599" pos:column="3">if<condition pos:line="4599" pos:column="5">( <expr><name pos:line="4599" pos:column="7">rc<pos:position pos:line="4599" pos:column="9"/></name></expr>)<pos:position pos:line="4599" pos:column="10"/></condition><then pos:line="4599" pos:column="10"> <block type="pseudo"><goto pos:line="4599" pos:column="11">goto <name pos:line="4599" pos:column="16">abort_due_to_error<pos:position pos:line="4599" pos:column="34"/></name>;<pos:position pos:line="4599" pos:column="35"/></goto></block></then></if>
  <break pos:line="4600" pos:column="3">break;<pos:position pos:line="4600" pos:column="9"/></break>
}<pos:position pos:line="4601" pos:column="2"/></block>

<comment type="block" pos:line="4603" pos:column="1">/* Opcode: IdxDelete P1 P2 P3 * *
** Synopsis: key=r[P2@P3]
**
** The content of P3 registers starting at register P2 form
** an unpacked index key. This opcode removes that entry from the 
** index opened by cursor P1.
*/</comment>
<case pos:line="4610" pos:column="1">case <expr><name pos:line="4610" pos:column="6">OP_IdxDelete<pos:position pos:line="4610" pos:column="18"/></name></expr>:<pos:position pos:line="4610" pos:column="19"/></case> <block pos:line="4610" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="4611" pos:column="3">VdbeCursor<pos:position pos:line="4611" pos:column="13"/></name> <modifier pos:line="4611" pos:column="14">*<pos:position pos:line="4611" pos:column="15"/></modifier></type><name pos:line="4611" pos:column="15">pC<pos:position pos:line="4611" pos:column="17"/></name></decl>;<pos:position pos:line="4611" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4612" pos:column="3">BtCursor<pos:position pos:line="4612" pos:column="11"/></name> <modifier pos:line="4612" pos:column="12">*<pos:position pos:line="4612" pos:column="13"/></modifier></type><name pos:line="4612" pos:column="13">pCrsr<pos:position pos:line="4612" pos:column="18"/></name></decl>;<pos:position pos:line="4612" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4613" pos:column="3">int<pos:position pos:line="4613" pos:column="6"/></name></type> <name pos:line="4613" pos:column="7">res<pos:position pos:line="4613" pos:column="10"/></name></decl>;<pos:position pos:line="4613" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4614" pos:column="3">UnpackedRecord<pos:position pos:line="4614" pos:column="17"/></name></type> <name pos:line="4614" pos:column="18">r<pos:position pos:line="4614" pos:column="19"/></name></decl>;<pos:position pos:line="4614" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4616" pos:column="3">assert<pos:position pos:line="4616" pos:column="9"/></name><argument_list pos:line="4616" pos:column="9">( <argument><expr><name><name pos:line="4616" pos:column="11">pOp<pos:position pos:line="4616" pos:column="14"/></name><operator pos:line="4616" pos:column="14">-&gt;<pos:position pos:line="4616" pos:column="19"/></operator><name pos:line="4616" pos:column="16">p3<pos:position pos:line="4616" pos:column="18"/></name></name><operator pos:line="4616" pos:column="18">&gt;<pos:position pos:line="4616" pos:column="22"/></operator><literal type="number" pos:line="4616" pos:column="19">0<pos:position pos:line="4616" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="4616" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="4616" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4617" pos:column="3">assert<pos:position pos:line="4617" pos:column="9"/></name><argument_list pos:line="4617" pos:column="9">( <argument><expr><name><name pos:line="4617" pos:column="11">pOp<pos:position pos:line="4617" pos:column="14"/></name><operator pos:line="4617" pos:column="14">-&gt;<pos:position pos:line="4617" pos:column="19"/></operator><name pos:line="4617" pos:column="16">p2<pos:position pos:line="4617" pos:column="18"/></name></name><operator pos:line="4617" pos:column="18">&gt;<pos:position pos:line="4617" pos:column="22"/></operator><literal type="number" pos:line="4617" pos:column="19">0<pos:position pos:line="4617" pos:column="20"/></literal> <operator pos:line="4617" pos:column="21">&amp;&amp;<pos:position pos:line="4617" pos:column="31"/></operator> <name><name pos:line="4617" pos:column="24">pOp<pos:position pos:line="4617" pos:column="27"/></name><operator pos:line="4617" pos:column="27">-&gt;<pos:position pos:line="4617" pos:column="32"/></operator><name pos:line="4617" pos:column="29">p2<pos:position pos:line="4617" pos:column="31"/></name></name><operator pos:line="4617" pos:column="31">+<pos:position pos:line="4617" pos:column="32"/></operator><name><name pos:line="4617" pos:column="32">pOp<pos:position pos:line="4617" pos:column="35"/></name><operator pos:line="4617" pos:column="35">-&gt;<pos:position pos:line="4617" pos:column="40"/></operator><name pos:line="4617" pos:column="37">p3<pos:position pos:line="4617" pos:column="39"/></name></name><operator pos:line="4617" pos:column="39">&lt;=<pos:position pos:line="4617" pos:column="44"/></operator><operator pos:line="4617" pos:column="41">(<pos:position pos:line="4617" pos:column="42"/></operator><name><name pos:line="4617" pos:column="42">p<pos:position pos:line="4617" pos:column="43"/></name><operator pos:line="4617" pos:column="43">-&gt;<pos:position pos:line="4617" pos:column="48"/></operator><name pos:line="4617" pos:column="45">nMem<pos:position pos:line="4617" pos:column="49"/></name></name><operator pos:line="4617" pos:column="49">+<pos:position pos:line="4617" pos:column="50"/></operator><literal type="number" pos:line="4617" pos:column="50">1<pos:position pos:line="4617" pos:column="51"/></literal> <operator pos:line="4617" pos:column="52">-<pos:position pos:line="4617" pos:column="53"/></operator> <name><name pos:line="4617" pos:column="54">p<pos:position pos:line="4617" pos:column="55"/></name><operator pos:line="4617" pos:column="55">-&gt;<pos:position pos:line="4617" pos:column="60"/></operator><name pos:line="4617" pos:column="57">nCursor<pos:position pos:line="4617" pos:column="64"/></name></name><operator pos:line="4617" pos:column="64">)<pos:position pos:line="4617" pos:column="65"/></operator><operator pos:line="4617" pos:column="65">+<pos:position pos:line="4617" pos:column="66"/></operator><literal type="number" pos:line="4617" pos:column="66">1<pos:position pos:line="4617" pos:column="67"/></literal></expr></argument> )<pos:position pos:line="4617" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="4617" pos:column="70"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4618" pos:column="3">assert<pos:position pos:line="4618" pos:column="9"/></name><argument_list pos:line="4618" pos:column="9">( <argument><expr><name><name pos:line="4618" pos:column="11">pOp<pos:position pos:line="4618" pos:column="14"/></name><operator pos:line="4618" pos:column="14">-&gt;<pos:position pos:line="4618" pos:column="19"/></operator><name pos:line="4618" pos:column="16">p1<pos:position pos:line="4618" pos:column="18"/></name></name><operator pos:line="4618" pos:column="18">&gt;=<pos:position pos:line="4618" pos:column="23"/></operator><literal type="number" pos:line="4618" pos:column="20">0<pos:position pos:line="4618" pos:column="21"/></literal> <operator pos:line="4618" pos:column="22">&amp;&amp;<pos:position pos:line="4618" pos:column="32"/></operator> <name><name pos:line="4618" pos:column="25">pOp<pos:position pos:line="4618" pos:column="28"/></name><operator pos:line="4618" pos:column="28">-&gt;<pos:position pos:line="4618" pos:column="33"/></operator><name pos:line="4618" pos:column="30">p1<pos:position pos:line="4618" pos:column="32"/></name></name><operator pos:line="4618" pos:column="32">&lt;<pos:position pos:line="4618" pos:column="36"/></operator><name><name pos:line="4618" pos:column="33">p<pos:position pos:line="4618" pos:column="34"/></name><operator pos:line="4618" pos:column="34">-&gt;<pos:position pos:line="4618" pos:column="39"/></operator><name pos:line="4618" pos:column="36">nCursor<pos:position pos:line="4618" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4618" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4618" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4619" pos:column="3">pC<pos:position pos:line="4619" pos:column="5"/></name> <operator pos:line="4619" pos:column="6">=<pos:position pos:line="4619" pos:column="7"/></operator> <name><name pos:line="4619" pos:column="8">p<pos:position pos:line="4619" pos:column="9"/></name><operator pos:line="4619" pos:column="9">-&gt;<pos:position pos:line="4619" pos:column="14"/></operator><name pos:line="4619" pos:column="11">apCsr<pos:position pos:line="4619" pos:column="16"/></name><index pos:line="4619" pos:column="16">[<expr><name><name pos:line="4619" pos:column="17">pOp<pos:position pos:line="4619" pos:column="20"/></name><operator pos:line="4619" pos:column="20">-&gt;<pos:position pos:line="4619" pos:column="25"/></operator><name pos:line="4619" pos:column="22">p1<pos:position pos:line="4619" pos:column="24"/></name></name></expr>]<pos:position pos:line="4619" pos:column="25"/></index></name></expr>;<pos:position pos:line="4619" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4620" pos:column="3">assert<pos:position pos:line="4620" pos:column="9"/></name><argument_list pos:line="4620" pos:column="9">( <argument><expr><name pos:line="4620" pos:column="11">pC<pos:position pos:line="4620" pos:column="13"/></name><operator pos:line="4620" pos:column="13">!=<pos:position pos:line="4620" pos:column="15"/></operator><literal type="number" pos:line="4620" pos:column="15">0<pos:position pos:line="4620" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4620" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4620" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4621" pos:column="3">assert<pos:position pos:line="4621" pos:column="9"/></name><argument_list pos:line="4621" pos:column="9">( <argument><expr><name><name pos:line="4621" pos:column="11">pC<pos:position pos:line="4621" pos:column="13"/></name><operator pos:line="4621" pos:column="13">-&gt;<pos:position pos:line="4621" pos:column="18"/></operator><name pos:line="4621" pos:column="15">eCurType<pos:position pos:line="4621" pos:column="23"/></name></name><operator pos:line="4621" pos:column="23">==<pos:position pos:line="4621" pos:column="25"/></operator><name pos:line="4621" pos:column="25">CURTYPE_BTREE<pos:position pos:line="4621" pos:column="38"/></name></expr></argument> )<pos:position pos:line="4621" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4621" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4622" pos:column="3">pCrsr<pos:position pos:line="4622" pos:column="8"/></name> <operator pos:line="4622" pos:column="9">=<pos:position pos:line="4622" pos:column="10"/></operator> <name><name pos:line="4622" pos:column="11">pC<pos:position pos:line="4622" pos:column="13"/></name><operator pos:line="4622" pos:column="13">-&gt;<pos:position pos:line="4622" pos:column="18"/></operator><name pos:line="4622" pos:column="15">uc<pos:position pos:line="4622" pos:column="17"/></name><operator pos:line="4622" pos:column="17">.<pos:position pos:line="4622" pos:column="18"/></operator><name pos:line="4622" pos:column="18">pCursor<pos:position pos:line="4622" pos:column="25"/></name></name></expr>;<pos:position pos:line="4622" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4623" pos:column="3">assert<pos:position pos:line="4623" pos:column="9"/></name><argument_list pos:line="4623" pos:column="9">( <argument><expr><name pos:line="4623" pos:column="11">pCrsr<pos:position pos:line="4623" pos:column="16"/></name><operator pos:line="4623" pos:column="16">!=<pos:position pos:line="4623" pos:column="18"/></operator><literal type="number" pos:line="4623" pos:column="18">0<pos:position pos:line="4623" pos:column="19"/></literal></expr></argument> )<pos:position pos:line="4623" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="4623" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4624" pos:column="3">assert<pos:position pos:line="4624" pos:column="9"/></name><argument_list pos:line="4624" pos:column="9">( <argument><expr><name><name pos:line="4624" pos:column="11">pOp<pos:position pos:line="4624" pos:column="14"/></name><operator pos:line="4624" pos:column="14">-&gt;<pos:position pos:line="4624" pos:column="19"/></operator><name pos:line="4624" pos:column="16">p5<pos:position pos:line="4624" pos:column="18"/></name></name><operator pos:line="4624" pos:column="18">==<pos:position pos:line="4624" pos:column="20"/></operator><literal type="number" pos:line="4624" pos:column="20">0<pos:position pos:line="4624" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="4624" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="4624" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4625" pos:column="3">r<pos:position pos:line="4625" pos:column="4"/></name><operator pos:line="4625" pos:column="4">.<pos:position pos:line="4625" pos:column="5"/></operator><name pos:line="4625" pos:column="5">pKeyInfo<pos:position pos:line="4625" pos:column="13"/></name></name> <operator pos:line="4625" pos:column="14">=<pos:position pos:line="4625" pos:column="15"/></operator> <name><name pos:line="4625" pos:column="16">pC<pos:position pos:line="4625" pos:column="18"/></name><operator pos:line="4625" pos:column="18">-&gt;<pos:position pos:line="4625" pos:column="23"/></operator><name pos:line="4625" pos:column="20">pKeyInfo<pos:position pos:line="4625" pos:column="28"/></name></name></expr>;<pos:position pos:line="4625" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4626" pos:column="3">r<pos:position pos:line="4626" pos:column="4"/></name><operator pos:line="4626" pos:column="4">.<pos:position pos:line="4626" pos:column="5"/></operator><name pos:line="4626" pos:column="5">nField<pos:position pos:line="4626" pos:column="11"/></name></name> <operator pos:line="4626" pos:column="12">=<pos:position pos:line="4626" pos:column="13"/></operator> <operator pos:line="4626" pos:column="14">(<pos:position pos:line="4626" pos:column="15"/></operator><name pos:line="4626" pos:column="15">u16<pos:position pos:line="4626" pos:column="18"/></name><operator pos:line="4626" pos:column="18">)<pos:position pos:line="4626" pos:column="19"/></operator><name><name pos:line="4626" pos:column="19">pOp<pos:position pos:line="4626" pos:column="22"/></name><operator pos:line="4626" pos:column="22">-&gt;<pos:position pos:line="4626" pos:column="27"/></operator><name pos:line="4626" pos:column="24">p3<pos:position pos:line="4626" pos:column="26"/></name></name></expr>;<pos:position pos:line="4626" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4627" pos:column="3">r<pos:position pos:line="4627" pos:column="4"/></name><operator pos:line="4627" pos:column="4">.<pos:position pos:line="4627" pos:column="5"/></operator><name pos:line="4627" pos:column="5">default_rc<pos:position pos:line="4627" pos:column="15"/></name></name> <operator pos:line="4627" pos:column="16">=<pos:position pos:line="4627" pos:column="17"/></operator> <literal type="number" pos:line="4627" pos:column="18">0<pos:position pos:line="4627" pos:column="19"/></literal></expr>;<pos:position pos:line="4627" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4628" pos:column="3">r<pos:position pos:line="4628" pos:column="4"/></name><operator pos:line="4628" pos:column="4">.<pos:position pos:line="4628" pos:column="5"/></operator><name pos:line="4628" pos:column="5">aMem<pos:position pos:line="4628" pos:column="9"/></name></name> <operator pos:line="4628" pos:column="10">=<pos:position pos:line="4628" pos:column="11"/></operator> <operator pos:line="4628" pos:column="12">&amp;<pos:position pos:line="4628" pos:column="17"/></operator><name><name pos:line="4628" pos:column="13">aMem<pos:position pos:line="4628" pos:column="17"/></name><index pos:line="4628" pos:column="17">[<expr><name><name pos:line="4628" pos:column="18">pOp<pos:position pos:line="4628" pos:column="21"/></name><operator pos:line="4628" pos:column="21">-&gt;<pos:position pos:line="4628" pos:column="26"/></operator><name pos:line="4628" pos:column="23">p2<pos:position pos:line="4628" pos:column="25"/></name></name></expr>]<pos:position pos:line="4628" pos:column="26"/></index></name></expr>;<pos:position pos:line="4628" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4629" pos:column="3">rc<pos:position pos:line="4629" pos:column="5"/></name> <operator pos:line="4629" pos:column="6">=<pos:position pos:line="4629" pos:column="7"/></operator> <call><name pos:line="4629" pos:column="8">sqlite3BtreeMovetoUnpacked<pos:position pos:line="4629" pos:column="34"/></name><argument_list pos:line="4629" pos:column="34">(<argument><expr><name pos:line="4629" pos:column="35">pCrsr<pos:position pos:line="4629" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="4629" pos:column="42">&amp;<pos:position pos:line="4629" pos:column="47"/></operator><name pos:line="4629" pos:column="43">r<pos:position pos:line="4629" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4629" pos:column="46">0<pos:position pos:line="4629" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4629" pos:column="49">0<pos:position pos:line="4629" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="4629" pos:column="52">&amp;<pos:position pos:line="4629" pos:column="57"/></operator><name pos:line="4629" pos:column="53">res<pos:position pos:line="4629" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4629" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4629" pos:column="58"/></expr_stmt>
  <if pos:line="4630" pos:column="3">if<condition pos:line="4630" pos:column="5">( <expr><name pos:line="4630" pos:column="7">rc<pos:position pos:line="4630" pos:column="9"/></name></expr> )<pos:position pos:line="4630" pos:column="11"/></condition><then pos:line="4630" pos:column="11"> <block type="pseudo"><goto pos:line="4630" pos:column="12">goto <name pos:line="4630" pos:column="17">abort_due_to_error<pos:position pos:line="4630" pos:column="35"/></name>;<pos:position pos:line="4630" pos:column="36"/></goto></block></then></if>
  <if pos:line="4631" pos:column="3">if<condition pos:line="4631" pos:column="5">( <expr><name pos:line="4631" pos:column="7">res<pos:position pos:line="4631" pos:column="10"/></name><operator pos:line="4631" pos:column="10">==<pos:position pos:line="4631" pos:column="12"/></operator><literal type="number" pos:line="4631" pos:column="12">0<pos:position pos:line="4631" pos:column="13"/></literal></expr> )<pos:position pos:line="4631" pos:column="15"/></condition><then><block pos:line="4631" pos:column="15">{
    <expr_stmt><expr><name pos:line="4632" pos:column="5">rc<pos:position pos:line="4632" pos:column="7"/></name> <operator pos:line="4632" pos:column="8">=<pos:position pos:line="4632" pos:column="9"/></operator> <call><name pos:line="4632" pos:column="10">sqlite3BtreeDelete<pos:position pos:line="4632" pos:column="28"/></name><argument_list pos:line="4632" pos:column="28">(<argument><expr><name pos:line="4632" pos:column="29">pCrsr<pos:position pos:line="4632" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="4632" pos:column="36">BTREE_AUXDELETE<pos:position pos:line="4632" pos:column="51"/></name></expr></argument>)<pos:position pos:line="4632" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4632" pos:column="53"/></expr_stmt>
    <if pos:line="4633" pos:column="5">if<condition pos:line="4633" pos:column="7">( <expr><name pos:line="4633" pos:column="9">rc<pos:position pos:line="4633" pos:column="11"/></name></expr> )<pos:position pos:line="4633" pos:column="13"/></condition><then pos:line="4633" pos:column="13"> <block type="pseudo"><goto pos:line="4633" pos:column="14">goto <name pos:line="4633" pos:column="19">abort_due_to_error<pos:position pos:line="4633" pos:column="37"/></name>;<pos:position pos:line="4633" pos:column="38"/></goto></block></then></if>
  }<pos:position pos:line="4634" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="4635" pos:column="3">assert<pos:position pos:line="4635" pos:column="9"/></name><argument_list pos:line="4635" pos:column="9">( <argument><expr><name><name pos:line="4635" pos:column="11">pC<pos:position pos:line="4635" pos:column="13"/></name><operator pos:line="4635" pos:column="13">-&gt;<pos:position pos:line="4635" pos:column="18"/></operator><name pos:line="4635" pos:column="15">deferredMoveto<pos:position pos:line="4635" pos:column="29"/></name></name><operator pos:line="4635" pos:column="29">==<pos:position pos:line="4635" pos:column="31"/></operator><literal type="number" pos:line="4635" pos:column="31">0<pos:position pos:line="4635" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="4635" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4635" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4636" pos:column="3">pC<pos:position pos:line="4636" pos:column="5"/></name><operator pos:line="4636" pos:column="5">-&gt;<pos:position pos:line="4636" pos:column="10"/></operator><name pos:line="4636" pos:column="7">cacheStatus<pos:position pos:line="4636" pos:column="18"/></name></name> <operator pos:line="4636" pos:column="19">=<pos:position pos:line="4636" pos:column="20"/></operator> <name pos:line="4636" pos:column="21">CACHE_STALE<pos:position pos:line="4636" pos:column="32"/></name></expr>;<pos:position pos:line="4636" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4637" pos:column="3">pC<pos:position pos:line="4637" pos:column="5"/></name><operator pos:line="4637" pos:column="5">-&gt;<pos:position pos:line="4637" pos:column="10"/></operator><name pos:line="4637" pos:column="7">seekResult<pos:position pos:line="4637" pos:column="17"/></name></name> <operator pos:line="4637" pos:column="18">=<pos:position pos:line="4637" pos:column="19"/></operator> <literal type="number" pos:line="4637" pos:column="20">0<pos:position pos:line="4637" pos:column="21"/></literal></expr>;<pos:position pos:line="4637" pos:column="22"/></expr_stmt>
  <break pos:line="4638" pos:column="3">break;<pos:position pos:line="4638" pos:column="9"/></break>
}<pos:position pos:line="4639" pos:column="2"/></block>

<comment type="block" pos:line="4641" pos:column="1">/* Opcode: DeferredSeek P1 * P3 P4 *
** Synopsis: Move P3 to P1.rowid if needed
**
** P1 is an open index cursor and P3 is a cursor on the corresponding
** table.  This opcode does a deferred seek of the P3 table cursor
** to the row that corresponds to the current row of P1.
**
** This is a deferred seek.  Nothing actually happens until
** the cursor is used to read a record.  That way, if no reads
** occur, no unnecessary I/O happens.
**
** P4 may be an array of integers (type P4_INTARRAY) containing
** one entry for each column in the P3 table.  If array entry a(i)
** is non-zero, then reading column a(i)-1 from cursor P3 is 
** equivalent to performing the deferred seek and then reading column i 
** from P1.  This information is stored in P3 and used to redirect
** reads against P3 over to P1, thus possibly avoiding the need to
** seek and read cursor P3.
*/</comment>
<comment type="block" pos:line="4660" pos:column="1">/* Opcode: IdxRowid P1 P2 * * *
** Synopsis: r[P2]=rowid
**
** Write into register P2 an integer which is the last entry in the record at
** the end of the index key pointed to by cursor P1.  This integer should be
** the rowid of the table entry to which this index entry points.
**
** See also: Rowid, MakeRecord.
*/</comment>
<case pos:line="4669" pos:column="1">case <expr><name pos:line="4669" pos:column="6">OP_DeferredSeek<pos:position pos:line="4669" pos:column="21"/></name></expr>:<pos:position pos:line="4669" pos:column="22"/></case>
<case pos:line="4670" pos:column="1">case <expr><name pos:line="4670" pos:column="6">OP_IdxRowid<pos:position pos:line="4670" pos:column="17"/></name></expr>:<pos:position pos:line="4670" pos:column="18"/></case> <block pos:line="4670" pos:column="19">{           <comment type="block" pos:line="4670" pos:column="31">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="4671" pos:column="3">VdbeCursor<pos:position pos:line="4671" pos:column="13"/></name> <modifier pos:line="4671" pos:column="14">*<pos:position pos:line="4671" pos:column="15"/></modifier></type><name pos:line="4671" pos:column="15">pC<pos:position pos:line="4671" pos:column="17"/></name></decl>;<pos:position pos:line="4671" pos:column="18"/></decl_stmt>             <comment type="block" pos:line="4671" pos:column="31">/* The P1 index cursor */</comment>
  <decl_stmt><decl><type><name pos:line="4672" pos:column="3">VdbeCursor<pos:position pos:line="4672" pos:column="13"/></name> <modifier pos:line="4672" pos:column="14">*<pos:position pos:line="4672" pos:column="15"/></modifier></type><name pos:line="4672" pos:column="15">pTabCur<pos:position pos:line="4672" pos:column="22"/></name></decl>;<pos:position pos:line="4672" pos:column="23"/></decl_stmt>        <comment type="block" pos:line="4672" pos:column="31">/* The P2 table cursor (OP_DeferredSeek only) */</comment>
  <decl_stmt><decl><type><name pos:line="4673" pos:column="3">i64<pos:position pos:line="4673" pos:column="6"/></name></type> <name pos:line="4673" pos:column="7">rowid<pos:position pos:line="4673" pos:column="12"/></name></decl>;<pos:position pos:line="4673" pos:column="13"/></decl_stmt>                  <comment type="block" pos:line="4673" pos:column="31">/* Rowid that P1 current points to */</comment>

  <expr_stmt><expr><call><name pos:line="4675" pos:column="3">assert<pos:position pos:line="4675" pos:column="9"/></name><argument_list pos:line="4675" pos:column="9">( <argument><expr><name><name pos:line="4675" pos:column="11">pOp<pos:position pos:line="4675" pos:column="14"/></name><operator pos:line="4675" pos:column="14">-&gt;<pos:position pos:line="4675" pos:column="19"/></operator><name pos:line="4675" pos:column="16">p1<pos:position pos:line="4675" pos:column="18"/></name></name><operator pos:line="4675" pos:column="18">&gt;=<pos:position pos:line="4675" pos:column="23"/></operator><literal type="number" pos:line="4675" pos:column="20">0<pos:position pos:line="4675" pos:column="21"/></literal> <operator pos:line="4675" pos:column="22">&amp;&amp;<pos:position pos:line="4675" pos:column="32"/></operator> <name><name pos:line="4675" pos:column="25">pOp<pos:position pos:line="4675" pos:column="28"/></name><operator pos:line="4675" pos:column="28">-&gt;<pos:position pos:line="4675" pos:column="33"/></operator><name pos:line="4675" pos:column="30">p1<pos:position pos:line="4675" pos:column="32"/></name></name><operator pos:line="4675" pos:column="32">&lt;<pos:position pos:line="4675" pos:column="36"/></operator><name><name pos:line="4675" pos:column="33">p<pos:position pos:line="4675" pos:column="34"/></name><operator pos:line="4675" pos:column="34">-&gt;<pos:position pos:line="4675" pos:column="39"/></operator><name pos:line="4675" pos:column="36">nCursor<pos:position pos:line="4675" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4675" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4675" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4676" pos:column="3">pC<pos:position pos:line="4676" pos:column="5"/></name> <operator pos:line="4676" pos:column="6">=<pos:position pos:line="4676" pos:column="7"/></operator> <name><name pos:line="4676" pos:column="8">p<pos:position pos:line="4676" pos:column="9"/></name><operator pos:line="4676" pos:column="9">-&gt;<pos:position pos:line="4676" pos:column="14"/></operator><name pos:line="4676" pos:column="11">apCsr<pos:position pos:line="4676" pos:column="16"/></name><index pos:line="4676" pos:column="16">[<expr><name><name pos:line="4676" pos:column="17">pOp<pos:position pos:line="4676" pos:column="20"/></name><operator pos:line="4676" pos:column="20">-&gt;<pos:position pos:line="4676" pos:column="25"/></operator><name pos:line="4676" pos:column="22">p1<pos:position pos:line="4676" pos:column="24"/></name></name></expr>]<pos:position pos:line="4676" pos:column="25"/></index></name></expr>;<pos:position pos:line="4676" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4677" pos:column="3">assert<pos:position pos:line="4677" pos:column="9"/></name><argument_list pos:line="4677" pos:column="9">( <argument><expr><name pos:line="4677" pos:column="11">pC<pos:position pos:line="4677" pos:column="13"/></name><operator pos:line="4677" pos:column="13">!=<pos:position pos:line="4677" pos:column="15"/></operator><literal type="number" pos:line="4677" pos:column="15">0<pos:position pos:line="4677" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4677" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4677" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4678" pos:column="3">assert<pos:position pos:line="4678" pos:column="9"/></name><argument_list pos:line="4678" pos:column="9">( <argument><expr><name><name pos:line="4678" pos:column="11">pC<pos:position pos:line="4678" pos:column="13"/></name><operator pos:line="4678" pos:column="13">-&gt;<pos:position pos:line="4678" pos:column="18"/></operator><name pos:line="4678" pos:column="15">eCurType<pos:position pos:line="4678" pos:column="23"/></name></name><operator pos:line="4678" pos:column="23">==<pos:position pos:line="4678" pos:column="25"/></operator><name pos:line="4678" pos:column="25">CURTYPE_BTREE<pos:position pos:line="4678" pos:column="38"/></name></expr></argument> )<pos:position pos:line="4678" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4678" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4679" pos:column="3">assert<pos:position pos:line="4679" pos:column="9"/></name><argument_list pos:line="4679" pos:column="9">( <argument><expr><name><name pos:line="4679" pos:column="11">pC<pos:position pos:line="4679" pos:column="13"/></name><operator pos:line="4679" pos:column="13">-&gt;<pos:position pos:line="4679" pos:column="18"/></operator><name pos:line="4679" pos:column="15">uc<pos:position pos:line="4679" pos:column="17"/></name><operator pos:line="4679" pos:column="17">.<pos:position pos:line="4679" pos:column="18"/></operator><name pos:line="4679" pos:column="18">pCursor<pos:position pos:line="4679" pos:column="25"/></name></name><operator pos:line="4679" pos:column="25">!=<pos:position pos:line="4679" pos:column="27"/></operator><literal type="number" pos:line="4679" pos:column="27">0<pos:position pos:line="4679" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="4679" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4679" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4680" pos:column="3">assert<pos:position pos:line="4680" pos:column="9"/></name><argument_list pos:line="4680" pos:column="9">( <argument><expr><name><name pos:line="4680" pos:column="11">pC<pos:position pos:line="4680" pos:column="13"/></name><operator pos:line="4680" pos:column="13">-&gt;<pos:position pos:line="4680" pos:column="18"/></operator><name pos:line="4680" pos:column="15">isTable<pos:position pos:line="4680" pos:column="22"/></name></name><operator pos:line="4680" pos:column="22">==<pos:position pos:line="4680" pos:column="24"/></operator><literal type="number" pos:line="4680" pos:column="24">0<pos:position pos:line="4680" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="4680" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4680" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4681" pos:column="3">assert<pos:position pos:line="4681" pos:column="9"/></name><argument_list pos:line="4681" pos:column="9">( <argument><expr><name><name pos:line="4681" pos:column="11">pC<pos:position pos:line="4681" pos:column="13"/></name><operator pos:line="4681" pos:column="13">-&gt;<pos:position pos:line="4681" pos:column="18"/></operator><name pos:line="4681" pos:column="15">deferredMoveto<pos:position pos:line="4681" pos:column="29"/></name></name><operator pos:line="4681" pos:column="29">==<pos:position pos:line="4681" pos:column="31"/></operator><literal type="number" pos:line="4681" pos:column="31">0<pos:position pos:line="4681" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="4681" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4681" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4682" pos:column="3">assert<pos:position pos:line="4682" pos:column="9"/></name><argument_list pos:line="4682" pos:column="9">( <argument><expr><operator pos:line="4682" pos:column="11">!<pos:position pos:line="4682" pos:column="12"/></operator><name><name pos:line="4682" pos:column="12">pC<pos:position pos:line="4682" pos:column="14"/></name><operator pos:line="4682" pos:column="14">-&gt;<pos:position pos:line="4682" pos:column="19"/></operator><name pos:line="4682" pos:column="16">nullRow<pos:position pos:line="4682" pos:column="23"/></name></name> <operator pos:line="4682" pos:column="24">||<pos:position pos:line="4682" pos:column="26"/></operator> <name><name pos:line="4682" pos:column="27">pOp<pos:position pos:line="4682" pos:column="30"/></name><operator pos:line="4682" pos:column="30">-&gt;<pos:position pos:line="4682" pos:column="35"/></operator><name pos:line="4682" pos:column="32">opcode<pos:position pos:line="4682" pos:column="38"/></name></name><operator pos:line="4682" pos:column="38">==<pos:position pos:line="4682" pos:column="40"/></operator><name pos:line="4682" pos:column="40">OP_IdxRowid<pos:position pos:line="4682" pos:column="51"/></name></expr></argument> )<pos:position pos:line="4682" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="4682" pos:column="54"/></expr_stmt>

  <comment type="block" pos:line="4684" pos:column="3">/* The IdxRowid and Seek opcodes are combined because of the commonality
  ** of sqlite3VdbeCursorRestore() and sqlite3VdbeIdxRowid(). */</comment>
  <expr_stmt><expr><name pos:line="4686" pos:column="3">rc<pos:position pos:line="4686" pos:column="5"/></name> <operator pos:line="4686" pos:column="6">=<pos:position pos:line="4686" pos:column="7"/></operator> <call><name pos:line="4686" pos:column="8">sqlite3VdbeCursorRestore<pos:position pos:line="4686" pos:column="32"/></name><argument_list pos:line="4686" pos:column="32">(<argument><expr><name pos:line="4686" pos:column="33">pC<pos:position pos:line="4686" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4686" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4686" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="4688" pos:column="3">/* sqlite3VbeCursorRestore() can only fail if the record has been deleted
  ** out from under the cursor.  That will never happens for an IdxRowid
  ** or Seek opcode */</comment>
  <if pos:line="4691" pos:column="3">if<condition pos:line="4691" pos:column="5">( <expr><call><name pos:line="4691" pos:column="7">NEVER<pos:position pos:line="4691" pos:column="12"/></name><argument_list pos:line="4691" pos:column="12">(<argument><expr><name pos:line="4691" pos:column="13">rc<pos:position pos:line="4691" pos:column="15"/></name><operator pos:line="4691" pos:column="15">!=<pos:position pos:line="4691" pos:column="17"/></operator><name pos:line="4691" pos:column="17">SQLITE_OK<pos:position pos:line="4691" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4691" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="4691" pos:column="29"/></condition><then pos:line="4691" pos:column="29"> <block type="pseudo"><goto pos:line="4691" pos:column="30">goto <name pos:line="4691" pos:column="35">abort_due_to_error<pos:position pos:line="4691" pos:column="53"/></name>;<pos:position pos:line="4691" pos:column="54"/></goto></block></then></if>

  <if pos:line="4693" pos:column="3">if<condition pos:line="4693" pos:column="5">( <expr><operator pos:line="4693" pos:column="7">!<pos:position pos:line="4693" pos:column="8"/></operator><name><name pos:line="4693" pos:column="8">pC<pos:position pos:line="4693" pos:column="10"/></name><operator pos:line="4693" pos:column="10">-&gt;<pos:position pos:line="4693" pos:column="15"/></operator><name pos:line="4693" pos:column="12">nullRow<pos:position pos:line="4693" pos:column="19"/></name></name></expr> )<pos:position pos:line="4693" pos:column="21"/></condition><then><block pos:line="4693" pos:column="21">{
    <expr_stmt><expr><name pos:line="4694" pos:column="5">rowid<pos:position pos:line="4694" pos:column="10"/></name> <operator pos:line="4694" pos:column="11">=<pos:position pos:line="4694" pos:column="12"/></operator> <literal type="number" pos:line="4694" pos:column="13">0<pos:position pos:line="4694" pos:column="14"/></literal></expr>;<pos:position pos:line="4694" pos:column="15"/></expr_stmt>  <comment type="block" pos:line="4694" pos:column="17">/* Not needed.  Only used to silence a warning. */</comment>
    <expr_stmt><expr><name pos:line="4695" pos:column="5">rc<pos:position pos:line="4695" pos:column="7"/></name> <operator pos:line="4695" pos:column="8">=<pos:position pos:line="4695" pos:column="9"/></operator> <call><name pos:line="4695" pos:column="10">sqlite3VdbeIdxRowid<pos:position pos:line="4695" pos:column="29"/></name><argument_list pos:line="4695" pos:column="29">(<argument><expr><name pos:line="4695" pos:column="30">db<pos:position pos:line="4695" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="4695" pos:column="34">pC<pos:position pos:line="4695" pos:column="36"/></name><operator pos:line="4695" pos:column="36">-&gt;<pos:position pos:line="4695" pos:column="41"/></operator><name pos:line="4695" pos:column="38">uc<pos:position pos:line="4695" pos:column="40"/></name><operator pos:line="4695" pos:column="40">.<pos:position pos:line="4695" pos:column="41"/></operator><name pos:line="4695" pos:column="41">pCursor<pos:position pos:line="4695" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="4695" pos:column="50">&amp;<pos:position pos:line="4695" pos:column="55"/></operator><name pos:line="4695" pos:column="51">rowid<pos:position pos:line="4695" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4695" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4695" pos:column="58"/></expr_stmt>
    <if pos:line="4696" pos:column="5">if<condition pos:line="4696" pos:column="7">( <expr><name pos:line="4696" pos:column="9">rc<pos:position pos:line="4696" pos:column="11"/></name><operator pos:line="4696" pos:column="11">!=<pos:position pos:line="4696" pos:column="13"/></operator><name pos:line="4696" pos:column="13">SQLITE_OK<pos:position pos:line="4696" pos:column="22"/></name></expr> )<pos:position pos:line="4696" pos:column="24"/></condition><then><block pos:line="4696" pos:column="24">{
      <goto pos:line="4697" pos:column="7">goto <name pos:line="4697" pos:column="12">abort_due_to_error<pos:position pos:line="4697" pos:column="30"/></name>;<pos:position pos:line="4697" pos:column="31"/></goto>
    }<pos:position pos:line="4698" pos:column="6"/></block></then></if>
    <if pos:line="4699" pos:column="5">if<condition pos:line="4699" pos:column="7">( <expr><name><name pos:line="4699" pos:column="9">pOp<pos:position pos:line="4699" pos:column="12"/></name><operator pos:line="4699" pos:column="12">-&gt;<pos:position pos:line="4699" pos:column="17"/></operator><name pos:line="4699" pos:column="14">opcode<pos:position pos:line="4699" pos:column="20"/></name></name><operator pos:line="4699" pos:column="20">==<pos:position pos:line="4699" pos:column="22"/></operator><name pos:line="4699" pos:column="22">OP_DeferredSeek<pos:position pos:line="4699" pos:column="37"/></name></expr> )<pos:position pos:line="4699" pos:column="39"/></condition><then><block pos:line="4699" pos:column="39">{
      <expr_stmt><expr><call><name pos:line="4700" pos:column="7">assert<pos:position pos:line="4700" pos:column="13"/></name><argument_list pos:line="4700" pos:column="13">( <argument><expr><name><name pos:line="4700" pos:column="15">pOp<pos:position pos:line="4700" pos:column="18"/></name><operator pos:line="4700" pos:column="18">-&gt;<pos:position pos:line="4700" pos:column="23"/></operator><name pos:line="4700" pos:column="20">p3<pos:position pos:line="4700" pos:column="22"/></name></name><operator pos:line="4700" pos:column="22">&gt;=<pos:position pos:line="4700" pos:column="27"/></operator><literal type="number" pos:line="4700" pos:column="24">0<pos:position pos:line="4700" pos:column="25"/></literal> <operator pos:line="4700" pos:column="26">&amp;&amp;<pos:position pos:line="4700" pos:column="36"/></operator> <name><name pos:line="4700" pos:column="29">pOp<pos:position pos:line="4700" pos:column="32"/></name><operator pos:line="4700" pos:column="32">-&gt;<pos:position pos:line="4700" pos:column="37"/></operator><name pos:line="4700" pos:column="34">p3<pos:position pos:line="4700" pos:column="36"/></name></name><operator pos:line="4700" pos:column="36">&lt;<pos:position pos:line="4700" pos:column="40"/></operator><name><name pos:line="4700" pos:column="37">p<pos:position pos:line="4700" pos:column="38"/></name><operator pos:line="4700" pos:column="38">-&gt;<pos:position pos:line="4700" pos:column="43"/></operator><name pos:line="4700" pos:column="40">nCursor<pos:position pos:line="4700" pos:column="47"/></name></name></expr></argument> )<pos:position pos:line="4700" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="4700" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name pos:line="4701" pos:column="7">pTabCur<pos:position pos:line="4701" pos:column="14"/></name> <operator pos:line="4701" pos:column="15">=<pos:position pos:line="4701" pos:column="16"/></operator> <name><name pos:line="4701" pos:column="17">p<pos:position pos:line="4701" pos:column="18"/></name><operator pos:line="4701" pos:column="18">-&gt;<pos:position pos:line="4701" pos:column="23"/></operator><name pos:line="4701" pos:column="20">apCsr<pos:position pos:line="4701" pos:column="25"/></name><index pos:line="4701" pos:column="25">[<expr><name><name pos:line="4701" pos:column="26">pOp<pos:position pos:line="4701" pos:column="29"/></name><operator pos:line="4701" pos:column="29">-&gt;<pos:position pos:line="4701" pos:column="34"/></operator><name pos:line="4701" pos:column="31">p3<pos:position pos:line="4701" pos:column="33"/></name></name></expr>]<pos:position pos:line="4701" pos:column="34"/></index></name></expr>;<pos:position pos:line="4701" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4702" pos:column="7">assert<pos:position pos:line="4702" pos:column="13"/></name><argument_list pos:line="4702" pos:column="13">( <argument><expr><name pos:line="4702" pos:column="15">pTabCur<pos:position pos:line="4702" pos:column="22"/></name><operator pos:line="4702" pos:column="22">!=<pos:position pos:line="4702" pos:column="24"/></operator><literal type="number" pos:line="4702" pos:column="24">0<pos:position pos:line="4702" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="4702" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4702" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4703" pos:column="7">assert<pos:position pos:line="4703" pos:column="13"/></name><argument_list pos:line="4703" pos:column="13">( <argument><expr><name><name pos:line="4703" pos:column="15">pTabCur<pos:position pos:line="4703" pos:column="22"/></name><operator pos:line="4703" pos:column="22">-&gt;<pos:position pos:line="4703" pos:column="27"/></operator><name pos:line="4703" pos:column="24">eCurType<pos:position pos:line="4703" pos:column="32"/></name></name><operator pos:line="4703" pos:column="32">==<pos:position pos:line="4703" pos:column="34"/></operator><name pos:line="4703" pos:column="34">CURTYPE_BTREE<pos:position pos:line="4703" pos:column="47"/></name></expr></argument> )<pos:position pos:line="4703" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="4703" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4704" pos:column="7">assert<pos:position pos:line="4704" pos:column="13"/></name><argument_list pos:line="4704" pos:column="13">( <argument><expr><name><name pos:line="4704" pos:column="15">pTabCur<pos:position pos:line="4704" pos:column="22"/></name><operator pos:line="4704" pos:column="22">-&gt;<pos:position pos:line="4704" pos:column="27"/></operator><name pos:line="4704" pos:column="24">uc<pos:position pos:line="4704" pos:column="26"/></name><operator pos:line="4704" pos:column="26">.<pos:position pos:line="4704" pos:column="27"/></operator><name pos:line="4704" pos:column="27">pCursor<pos:position pos:line="4704" pos:column="34"/></name></name><operator pos:line="4704" pos:column="34">!=<pos:position pos:line="4704" pos:column="36"/></operator><literal type="number" pos:line="4704" pos:column="36">0<pos:position pos:line="4704" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="4704" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4704" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4705" pos:column="7">assert<pos:position pos:line="4705" pos:column="13"/></name><argument_list pos:line="4705" pos:column="13">( <argument><expr><name><name pos:line="4705" pos:column="15">pTabCur<pos:position pos:line="4705" pos:column="22"/></name><operator pos:line="4705" pos:column="22">-&gt;<pos:position pos:line="4705" pos:column="27"/></operator><name pos:line="4705" pos:column="24">isTable<pos:position pos:line="4705" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="4705" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4705" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4706" pos:column="7">pTabCur<pos:position pos:line="4706" pos:column="14"/></name><operator pos:line="4706" pos:column="14">-&gt;<pos:position pos:line="4706" pos:column="19"/></operator><name pos:line="4706" pos:column="16">nullRow<pos:position pos:line="4706" pos:column="23"/></name></name> <operator pos:line="4706" pos:column="24">=<pos:position pos:line="4706" pos:column="25"/></operator> <literal type="number" pos:line="4706" pos:column="26">0<pos:position pos:line="4706" pos:column="27"/></literal></expr>;<pos:position pos:line="4706" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4707" pos:column="7">pTabCur<pos:position pos:line="4707" pos:column="14"/></name><operator pos:line="4707" pos:column="14">-&gt;<pos:position pos:line="4707" pos:column="19"/></operator><name pos:line="4707" pos:column="16">movetoTarget<pos:position pos:line="4707" pos:column="28"/></name></name> <operator pos:line="4707" pos:column="29">=<pos:position pos:line="4707" pos:column="30"/></operator> <name pos:line="4707" pos:column="31">rowid<pos:position pos:line="4707" pos:column="36"/></name></expr>;<pos:position pos:line="4707" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4708" pos:column="7">pTabCur<pos:position pos:line="4708" pos:column="14"/></name><operator pos:line="4708" pos:column="14">-&gt;<pos:position pos:line="4708" pos:column="19"/></operator><name pos:line="4708" pos:column="16">deferredMoveto<pos:position pos:line="4708" pos:column="30"/></name></name> <operator pos:line="4708" pos:column="31">=<pos:position pos:line="4708" pos:column="32"/></operator> <literal type="number" pos:line="4708" pos:column="33">1<pos:position pos:line="4708" pos:column="34"/></literal></expr>;<pos:position pos:line="4708" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4709" pos:column="7">assert<pos:position pos:line="4709" pos:column="13"/></name><argument_list pos:line="4709" pos:column="13">( <argument><expr><name><name pos:line="4709" pos:column="15">pOp<pos:position pos:line="4709" pos:column="18"/></name><operator pos:line="4709" pos:column="18">-&gt;<pos:position pos:line="4709" pos:column="23"/></operator><name pos:line="4709" pos:column="20">p4type<pos:position pos:line="4709" pos:column="26"/></name></name><operator pos:line="4709" pos:column="26">==<pos:position pos:line="4709" pos:column="28"/></operator><name pos:line="4709" pos:column="28">P4_INTARRAY<pos:position pos:line="4709" pos:column="39"/></name> <operator pos:line="4709" pos:column="40">||<pos:position pos:line="4709" pos:column="42"/></operator> <name><name pos:line="4709" pos:column="43">pOp<pos:position pos:line="4709" pos:column="46"/></name><operator pos:line="4709" pos:column="46">-&gt;<pos:position pos:line="4709" pos:column="51"/></operator><name pos:line="4709" pos:column="48">p4<pos:position pos:line="4709" pos:column="50"/></name><operator pos:line="4709" pos:column="50">.<pos:position pos:line="4709" pos:column="51"/></operator><name pos:line="4709" pos:column="51">ai<pos:position pos:line="4709" pos:column="53"/></name></name><operator pos:line="4709" pos:column="53">==<pos:position pos:line="4709" pos:column="55"/></operator><literal type="number" pos:line="4709" pos:column="55">0<pos:position pos:line="4709" pos:column="56"/></literal></expr></argument> )<pos:position pos:line="4709" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="4709" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4710" pos:column="7">pTabCur<pos:position pos:line="4710" pos:column="14"/></name><operator pos:line="4710" pos:column="14">-&gt;<pos:position pos:line="4710" pos:column="19"/></operator><name pos:line="4710" pos:column="16">aAltMap<pos:position pos:line="4710" pos:column="23"/></name></name> <operator pos:line="4710" pos:column="24">=<pos:position pos:line="4710" pos:column="25"/></operator> <name><name pos:line="4710" pos:column="26">pOp<pos:position pos:line="4710" pos:column="29"/></name><operator pos:line="4710" pos:column="29">-&gt;<pos:position pos:line="4710" pos:column="34"/></operator><name pos:line="4710" pos:column="31">p4<pos:position pos:line="4710" pos:column="33"/></name><operator pos:line="4710" pos:column="33">.<pos:position pos:line="4710" pos:column="34"/></operator><name pos:line="4710" pos:column="34">ai<pos:position pos:line="4710" pos:column="36"/></name></name></expr>;<pos:position pos:line="4710" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4711" pos:column="7">pTabCur<pos:position pos:line="4711" pos:column="14"/></name><operator pos:line="4711" pos:column="14">-&gt;<pos:position pos:line="4711" pos:column="19"/></operator><name pos:line="4711" pos:column="16">pAltCursor<pos:position pos:line="4711" pos:column="26"/></name></name> <operator pos:line="4711" pos:column="27">=<pos:position pos:line="4711" pos:column="28"/></operator> <name pos:line="4711" pos:column="29">pC<pos:position pos:line="4711" pos:column="31"/></name></expr>;<pos:position pos:line="4711" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="4712" pos:column="6"/></block></then><else pos:line="4712" pos:column="6">else<block pos:line="4712" pos:column="10">{
      <expr_stmt><expr><name pos:line="4713" pos:column="7">pOut<pos:position pos:line="4713" pos:column="11"/></name> <operator pos:line="4713" pos:column="12">=<pos:position pos:line="4713" pos:column="13"/></operator> <call><name pos:line="4713" pos:column="14">out2Prerelease<pos:position pos:line="4713" pos:column="28"/></name><argument_list pos:line="4713" pos:column="28">(<argument><expr><name pos:line="4713" pos:column="29">p<pos:position pos:line="4713" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="4713" pos:column="32">pOp<pos:position pos:line="4713" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4713" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4713" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4714" pos:column="7">pOut<pos:position pos:line="4714" pos:column="11"/></name><operator pos:line="4714" pos:column="11">-&gt;<pos:position pos:line="4714" pos:column="16"/></operator><name pos:line="4714" pos:column="13">u<pos:position pos:line="4714" pos:column="14"/></name><operator pos:line="4714" pos:column="14">.<pos:position pos:line="4714" pos:column="15"/></operator><name pos:line="4714" pos:column="15">i<pos:position pos:line="4714" pos:column="16"/></name></name> <operator pos:line="4714" pos:column="17">=<pos:position pos:line="4714" pos:column="18"/></operator> <name pos:line="4714" pos:column="19">rowid<pos:position pos:line="4714" pos:column="24"/></name></expr>;<pos:position pos:line="4714" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="4715" pos:column="6"/></block></else></if>
  }<pos:position pos:line="4716" pos:column="4"/></block></then><else pos:line="4716" pos:column="4">else<block pos:line="4716" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="4717" pos:column="5">assert<pos:position pos:line="4717" pos:column="11"/></name><argument_list pos:line="4717" pos:column="11">( <argument><expr><name><name pos:line="4717" pos:column="13">pOp<pos:position pos:line="4717" pos:column="16"/></name><operator pos:line="4717" pos:column="16">-&gt;<pos:position pos:line="4717" pos:column="21"/></operator><name pos:line="4717" pos:column="18">opcode<pos:position pos:line="4717" pos:column="24"/></name></name><operator pos:line="4717" pos:column="24">==<pos:position pos:line="4717" pos:column="26"/></operator><name pos:line="4717" pos:column="26">OP_IdxRowid<pos:position pos:line="4717" pos:column="37"/></name></expr></argument> )<pos:position pos:line="4717" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4717" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4718" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="4718" pos:column="26"/></name><argument_list pos:line="4718" pos:column="26">(<argument><expr><operator pos:line="4718" pos:column="27">&amp;<pos:position pos:line="4718" pos:column="32"/></operator><name><name pos:line="4718" pos:column="28">aMem<pos:position pos:line="4718" pos:column="32"/></name><index pos:line="4718" pos:column="32">[<expr><name><name pos:line="4718" pos:column="33">pOp<pos:position pos:line="4718" pos:column="36"/></name><operator pos:line="4718" pos:column="36">-&gt;<pos:position pos:line="4718" pos:column="41"/></operator><name pos:line="4718" pos:column="38">p2<pos:position pos:line="4718" pos:column="40"/></name></name></expr>]<pos:position pos:line="4718" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="4718" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4718" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="4719" pos:column="4"/></block></else></if>
  <break pos:line="4720" pos:column="3">break;<pos:position pos:line="4720" pos:column="9"/></break>
}<pos:position pos:line="4721" pos:column="2"/></block>

<comment type="block" pos:line="4723" pos:column="1">/* Opcode: IdxGE P1 P2 P3 P4 P5
** Synopsis: key=r[P3@P4]
**
** The P4 register values beginning with P3 form an unpacked index 
** key that omits the PRIMARY KEY.  Compare this key value against the index 
** that P1 is currently pointing to, ignoring the PRIMARY KEY or ROWID 
** fields at the end.
**
** If the P1 index entry is greater than or equal to the key value
** then jump to P2.  Otherwise fall through to the next instruction.
*/</comment>
<comment type="block" pos:line="4734" pos:column="1">/* Opcode: IdxGT P1 P2 P3 P4 P5
** Synopsis: key=r[P3@P4]
**
** The P4 register values beginning with P3 form an unpacked index 
** key that omits the PRIMARY KEY.  Compare this key value against the index 
** that P1 is currently pointing to, ignoring the PRIMARY KEY or ROWID 
** fields at the end.
**
** If the P1 index entry is greater than the key value
** then jump to P2.  Otherwise fall through to the next instruction.
*/</comment>
<comment type="block" pos:line="4745" pos:column="1">/* Opcode: IdxLT P1 P2 P3 P4 P5
** Synopsis: key=r[P3@P4]
**
** The P4 register values beginning with P3 form an unpacked index 
** key that omits the PRIMARY KEY or ROWID.  Compare this key value against
** the index that P1 is currently pointing to, ignoring the PRIMARY KEY or
** ROWID on the P1 index.
**
** If the P1 index entry is less than the key value then jump to P2.
** Otherwise fall through to the next instruction.
*/</comment>
<comment type="block" pos:line="4756" pos:column="1">/* Opcode: IdxLE P1 P2 P3 P4 P5
** Synopsis: key=r[P3@P4]
**
** The P4 register values beginning with P3 form an unpacked index 
** key that omits the PRIMARY KEY or ROWID.  Compare this key value against
** the index that P1 is currently pointing to, ignoring the PRIMARY KEY or
** ROWID on the P1 index.
**
** If the P1 index entry is less than or equal to the key value then jump
** to P2. Otherwise fall through to the next instruction.
*/</comment>
<case pos:line="4767" pos:column="1">case <expr><name pos:line="4767" pos:column="6">OP_IdxLE<pos:position pos:line="4767" pos:column="14"/></name></expr>:<pos:position pos:line="4767" pos:column="15"/></case>          <comment type="block" pos:line="4767" pos:column="25">/* jump */</comment>
<case pos:line="4768" pos:column="1">case <expr><name pos:line="4768" pos:column="6">OP_IdxGT<pos:position pos:line="4768" pos:column="14"/></name></expr>:<pos:position pos:line="4768" pos:column="15"/></case>          <comment type="block" pos:line="4768" pos:column="25">/* jump */</comment>
<case pos:line="4769" pos:column="1">case <expr><name pos:line="4769" pos:column="6">OP_IdxLT<pos:position pos:line="4769" pos:column="14"/></name></expr>:<pos:position pos:line="4769" pos:column="15"/></case>          <comment type="block" pos:line="4769" pos:column="25">/* jump */</comment>
<case pos:line="4770" pos:column="1">case <expr><name pos:line="4770" pos:column="6">OP_IdxGE<pos:position pos:line="4770" pos:column="14"/></name></expr>:<pos:position pos:line="4770" pos:column="15"/></case>  <block pos:line="4770" pos:column="17">{       <comment type="block" pos:line="4770" pos:column="25">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="4771" pos:column="3">VdbeCursor<pos:position pos:line="4771" pos:column="13"/></name> <modifier pos:line="4771" pos:column="14">*<pos:position pos:line="4771" pos:column="15"/></modifier></type><name pos:line="4771" pos:column="15">pC<pos:position pos:line="4771" pos:column="17"/></name></decl>;<pos:position pos:line="4771" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4772" pos:column="3">int<pos:position pos:line="4772" pos:column="6"/></name></type> <name pos:line="4772" pos:column="7">res<pos:position pos:line="4772" pos:column="10"/></name></decl>;<pos:position pos:line="4772" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4773" pos:column="3">UnpackedRecord<pos:position pos:line="4773" pos:column="17"/></name></type> <name pos:line="4773" pos:column="18">r<pos:position pos:line="4773" pos:column="19"/></name></decl>;<pos:position pos:line="4773" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4775" pos:column="3">assert<pos:position pos:line="4775" pos:column="9"/></name><argument_list pos:line="4775" pos:column="9">( <argument><expr><name><name pos:line="4775" pos:column="11">pOp<pos:position pos:line="4775" pos:column="14"/></name><operator pos:line="4775" pos:column="14">-&gt;<pos:position pos:line="4775" pos:column="19"/></operator><name pos:line="4775" pos:column="16">p1<pos:position pos:line="4775" pos:column="18"/></name></name><operator pos:line="4775" pos:column="18">&gt;=<pos:position pos:line="4775" pos:column="23"/></operator><literal type="number" pos:line="4775" pos:column="20">0<pos:position pos:line="4775" pos:column="21"/></literal> <operator pos:line="4775" pos:column="22">&amp;&amp;<pos:position pos:line="4775" pos:column="32"/></operator> <name><name pos:line="4775" pos:column="25">pOp<pos:position pos:line="4775" pos:column="28"/></name><operator pos:line="4775" pos:column="28">-&gt;<pos:position pos:line="4775" pos:column="33"/></operator><name pos:line="4775" pos:column="30">p1<pos:position pos:line="4775" pos:column="32"/></name></name><operator pos:line="4775" pos:column="32">&lt;<pos:position pos:line="4775" pos:column="36"/></operator><name><name pos:line="4775" pos:column="33">p<pos:position pos:line="4775" pos:column="34"/></name><operator pos:line="4775" pos:column="34">-&gt;<pos:position pos:line="4775" pos:column="39"/></operator><name pos:line="4775" pos:column="36">nCursor<pos:position pos:line="4775" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4775" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4775" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4776" pos:column="3">pC<pos:position pos:line="4776" pos:column="5"/></name> <operator pos:line="4776" pos:column="6">=<pos:position pos:line="4776" pos:column="7"/></operator> <name><name pos:line="4776" pos:column="8">p<pos:position pos:line="4776" pos:column="9"/></name><operator pos:line="4776" pos:column="9">-&gt;<pos:position pos:line="4776" pos:column="14"/></operator><name pos:line="4776" pos:column="11">apCsr<pos:position pos:line="4776" pos:column="16"/></name><index pos:line="4776" pos:column="16">[<expr><name><name pos:line="4776" pos:column="17">pOp<pos:position pos:line="4776" pos:column="20"/></name><operator pos:line="4776" pos:column="20">-&gt;<pos:position pos:line="4776" pos:column="25"/></operator><name pos:line="4776" pos:column="22">p1<pos:position pos:line="4776" pos:column="24"/></name></name></expr>]<pos:position pos:line="4776" pos:column="25"/></index></name></expr>;<pos:position pos:line="4776" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4777" pos:column="3">assert<pos:position pos:line="4777" pos:column="9"/></name><argument_list pos:line="4777" pos:column="9">( <argument><expr><name pos:line="4777" pos:column="11">pC<pos:position pos:line="4777" pos:column="13"/></name><operator pos:line="4777" pos:column="13">!=<pos:position pos:line="4777" pos:column="15"/></operator><literal type="number" pos:line="4777" pos:column="15">0<pos:position pos:line="4777" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4777" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4777" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4778" pos:column="3">assert<pos:position pos:line="4778" pos:column="9"/></name><argument_list pos:line="4778" pos:column="9">( <argument><expr><name><name pos:line="4778" pos:column="11">pC<pos:position pos:line="4778" pos:column="13"/></name><operator pos:line="4778" pos:column="13">-&gt;<pos:position pos:line="4778" pos:column="18"/></operator><name pos:line="4778" pos:column="15">isOrdered<pos:position pos:line="4778" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="4778" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4778" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4779" pos:column="3">assert<pos:position pos:line="4779" pos:column="9"/></name><argument_list pos:line="4779" pos:column="9">( <argument><expr><name><name pos:line="4779" pos:column="11">pC<pos:position pos:line="4779" pos:column="13"/></name><operator pos:line="4779" pos:column="13">-&gt;<pos:position pos:line="4779" pos:column="18"/></operator><name pos:line="4779" pos:column="15">eCurType<pos:position pos:line="4779" pos:column="23"/></name></name><operator pos:line="4779" pos:column="23">==<pos:position pos:line="4779" pos:column="25"/></operator><name pos:line="4779" pos:column="25">CURTYPE_BTREE<pos:position pos:line="4779" pos:column="38"/></name></expr></argument> )<pos:position pos:line="4779" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4779" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4780" pos:column="3">assert<pos:position pos:line="4780" pos:column="9"/></name><argument_list pos:line="4780" pos:column="9">( <argument><expr><name><name pos:line="4780" pos:column="11">pC<pos:position pos:line="4780" pos:column="13"/></name><operator pos:line="4780" pos:column="13">-&gt;<pos:position pos:line="4780" pos:column="18"/></operator><name pos:line="4780" pos:column="15">uc<pos:position pos:line="4780" pos:column="17"/></name><operator pos:line="4780" pos:column="17">.<pos:position pos:line="4780" pos:column="18"/></operator><name pos:line="4780" pos:column="18">pCursor<pos:position pos:line="4780" pos:column="25"/></name></name><operator pos:line="4780" pos:column="25">!=<pos:position pos:line="4780" pos:column="27"/></operator><literal type="number" pos:line="4780" pos:column="27">0<pos:position pos:line="4780" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="4780" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4780" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4781" pos:column="3">assert<pos:position pos:line="4781" pos:column="9"/></name><argument_list pos:line="4781" pos:column="9">( <argument><expr><name><name pos:line="4781" pos:column="11">pC<pos:position pos:line="4781" pos:column="13"/></name><operator pos:line="4781" pos:column="13">-&gt;<pos:position pos:line="4781" pos:column="18"/></operator><name pos:line="4781" pos:column="15">deferredMoveto<pos:position pos:line="4781" pos:column="29"/></name></name><operator pos:line="4781" pos:column="29">==<pos:position pos:line="4781" pos:column="31"/></operator><literal type="number" pos:line="4781" pos:column="31">0<pos:position pos:line="4781" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="4781" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4781" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4782" pos:column="3">assert<pos:position pos:line="4782" pos:column="9"/></name><argument_list pos:line="4782" pos:column="9">( <argument><expr><name><name pos:line="4782" pos:column="11">pOp<pos:position pos:line="4782" pos:column="14"/></name><operator pos:line="4782" pos:column="14">-&gt;<pos:position pos:line="4782" pos:column="19"/></operator><name pos:line="4782" pos:column="16">p5<pos:position pos:line="4782" pos:column="18"/></name></name><operator pos:line="4782" pos:column="18">==<pos:position pos:line="4782" pos:column="20"/></operator><literal type="number" pos:line="4782" pos:column="20">0<pos:position pos:line="4782" pos:column="21"/></literal> <operator pos:line="4782" pos:column="22">||<pos:position pos:line="4782" pos:column="24"/></operator> <name><name pos:line="4782" pos:column="25">pOp<pos:position pos:line="4782" pos:column="28"/></name><operator pos:line="4782" pos:column="28">-&gt;<pos:position pos:line="4782" pos:column="33"/></operator><name pos:line="4782" pos:column="30">p5<pos:position pos:line="4782" pos:column="32"/></name></name><operator pos:line="4782" pos:column="32">==<pos:position pos:line="4782" pos:column="34"/></operator><literal type="number" pos:line="4782" pos:column="34">1<pos:position pos:line="4782" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="4782" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="4782" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4783" pos:column="3">assert<pos:position pos:line="4783" pos:column="9"/></name><argument_list pos:line="4783" pos:column="9">( <argument><expr><name><name pos:line="4783" pos:column="11">pOp<pos:position pos:line="4783" pos:column="14"/></name><operator pos:line="4783" pos:column="14">-&gt;<pos:position pos:line="4783" pos:column="19"/></operator><name pos:line="4783" pos:column="16">p4type<pos:position pos:line="4783" pos:column="22"/></name></name><operator pos:line="4783" pos:column="22">==<pos:position pos:line="4783" pos:column="24"/></operator><name pos:line="4783" pos:column="24">P4_INT32<pos:position pos:line="4783" pos:column="32"/></name></expr></argument> )<pos:position pos:line="4783" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4783" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4784" pos:column="3">r<pos:position pos:line="4784" pos:column="4"/></name><operator pos:line="4784" pos:column="4">.<pos:position pos:line="4784" pos:column="5"/></operator><name pos:line="4784" pos:column="5">pKeyInfo<pos:position pos:line="4784" pos:column="13"/></name></name> <operator pos:line="4784" pos:column="14">=<pos:position pos:line="4784" pos:column="15"/></operator> <name><name pos:line="4784" pos:column="16">pC<pos:position pos:line="4784" pos:column="18"/></name><operator pos:line="4784" pos:column="18">-&gt;<pos:position pos:line="4784" pos:column="23"/></operator><name pos:line="4784" pos:column="20">pKeyInfo<pos:position pos:line="4784" pos:column="28"/></name></name></expr>;<pos:position pos:line="4784" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4785" pos:column="3">r<pos:position pos:line="4785" pos:column="4"/></name><operator pos:line="4785" pos:column="4">.<pos:position pos:line="4785" pos:column="5"/></operator><name pos:line="4785" pos:column="5">nField<pos:position pos:line="4785" pos:column="11"/></name></name> <operator pos:line="4785" pos:column="12">=<pos:position pos:line="4785" pos:column="13"/></operator> <operator pos:line="4785" pos:column="14">(<pos:position pos:line="4785" pos:column="15"/></operator><name pos:line="4785" pos:column="15">u16<pos:position pos:line="4785" pos:column="18"/></name><operator pos:line="4785" pos:column="18">)<pos:position pos:line="4785" pos:column="19"/></operator><name><name pos:line="4785" pos:column="19">pOp<pos:position pos:line="4785" pos:column="22"/></name><operator pos:line="4785" pos:column="22">-&gt;<pos:position pos:line="4785" pos:column="27"/></operator><name pos:line="4785" pos:column="24">p4<pos:position pos:line="4785" pos:column="26"/></name><operator pos:line="4785" pos:column="26">.<pos:position pos:line="4785" pos:column="27"/></operator><name pos:line="4785" pos:column="27">i<pos:position pos:line="4785" pos:column="28"/></name></name></expr>;<pos:position pos:line="4785" pos:column="29"/></expr_stmt>
  <if pos:line="4786" pos:column="3">if<condition pos:line="4786" pos:column="5">( <expr><name><name pos:line="4786" pos:column="7">pOp<pos:position pos:line="4786" pos:column="10"/></name><operator pos:line="4786" pos:column="10">-&gt;<pos:position pos:line="4786" pos:column="15"/></operator><name pos:line="4786" pos:column="12">opcode<pos:position pos:line="4786" pos:column="18"/></name></name><operator pos:line="4786" pos:column="18">&lt;<pos:position pos:line="4786" pos:column="22"/></operator><name pos:line="4786" pos:column="19">OP_IdxLT<pos:position pos:line="4786" pos:column="27"/></name></expr> )<pos:position pos:line="4786" pos:column="29"/></condition><then><block pos:line="4786" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="4787" pos:column="5">assert<pos:position pos:line="4787" pos:column="11"/></name><argument_list pos:line="4787" pos:column="11">( <argument><expr><name><name pos:line="4787" pos:column="13">pOp<pos:position pos:line="4787" pos:column="16"/></name><operator pos:line="4787" pos:column="16">-&gt;<pos:position pos:line="4787" pos:column="21"/></operator><name pos:line="4787" pos:column="18">opcode<pos:position pos:line="4787" pos:column="24"/></name></name><operator pos:line="4787" pos:column="24">==<pos:position pos:line="4787" pos:column="26"/></operator><name pos:line="4787" pos:column="26">OP_IdxLE<pos:position pos:line="4787" pos:column="34"/></name> <operator pos:line="4787" pos:column="35">||<pos:position pos:line="4787" pos:column="37"/></operator> <name><name pos:line="4787" pos:column="38">pOp<pos:position pos:line="4787" pos:column="41"/></name><operator pos:line="4787" pos:column="41">-&gt;<pos:position pos:line="4787" pos:column="46"/></operator><name pos:line="4787" pos:column="43">opcode<pos:position pos:line="4787" pos:column="49"/></name></name><operator pos:line="4787" pos:column="49">==<pos:position pos:line="4787" pos:column="51"/></operator><name pos:line="4787" pos:column="51">OP_IdxGT<pos:position pos:line="4787" pos:column="59"/></name></expr></argument> )<pos:position pos:line="4787" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="4787" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4788" pos:column="5">r<pos:position pos:line="4788" pos:column="6"/></name><operator pos:line="4788" pos:column="6">.<pos:position pos:line="4788" pos:column="7"/></operator><name pos:line="4788" pos:column="7">default_rc<pos:position pos:line="4788" pos:column="17"/></name></name> <operator pos:line="4788" pos:column="18">=<pos:position pos:line="4788" pos:column="19"/></operator> <operator pos:line="4788" pos:column="20">-<pos:position pos:line="4788" pos:column="21"/></operator><literal type="number" pos:line="4788" pos:column="21">1<pos:position pos:line="4788" pos:column="22"/></literal></expr>;<pos:position pos:line="4788" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="4789" pos:column="4"/></block></then><else pos:line="4789" pos:column="4">else<block pos:line="4789" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="4790" pos:column="5">assert<pos:position pos:line="4790" pos:column="11"/></name><argument_list pos:line="4790" pos:column="11">( <argument><expr><name><name pos:line="4790" pos:column="13">pOp<pos:position pos:line="4790" pos:column="16"/></name><operator pos:line="4790" pos:column="16">-&gt;<pos:position pos:line="4790" pos:column="21"/></operator><name pos:line="4790" pos:column="18">opcode<pos:position pos:line="4790" pos:column="24"/></name></name><operator pos:line="4790" pos:column="24">==<pos:position pos:line="4790" pos:column="26"/></operator><name pos:line="4790" pos:column="26">OP_IdxGE<pos:position pos:line="4790" pos:column="34"/></name> <operator pos:line="4790" pos:column="35">||<pos:position pos:line="4790" pos:column="37"/></operator> <name><name pos:line="4790" pos:column="38">pOp<pos:position pos:line="4790" pos:column="41"/></name><operator pos:line="4790" pos:column="41">-&gt;<pos:position pos:line="4790" pos:column="46"/></operator><name pos:line="4790" pos:column="43">opcode<pos:position pos:line="4790" pos:column="49"/></name></name><operator pos:line="4790" pos:column="49">==<pos:position pos:line="4790" pos:column="51"/></operator><name pos:line="4790" pos:column="51">OP_IdxLT<pos:position pos:line="4790" pos:column="59"/></name></expr></argument> )<pos:position pos:line="4790" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="4790" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4791" pos:column="5">r<pos:position pos:line="4791" pos:column="6"/></name><operator pos:line="4791" pos:column="6">.<pos:position pos:line="4791" pos:column="7"/></operator><name pos:line="4791" pos:column="7">default_rc<pos:position pos:line="4791" pos:column="17"/></name></name> <operator pos:line="4791" pos:column="18">=<pos:position pos:line="4791" pos:column="19"/></operator> <literal type="number" pos:line="4791" pos:column="20">0<pos:position pos:line="4791" pos:column="21"/></literal></expr>;<pos:position pos:line="4791" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="4792" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="4793" pos:column="3">r<pos:position pos:line="4793" pos:column="4"/></name><operator pos:line="4793" pos:column="4">.<pos:position pos:line="4793" pos:column="5"/></operator><name pos:line="4793" pos:column="5">aMem<pos:position pos:line="4793" pos:column="9"/></name></name> <operator pos:line="4793" pos:column="10">=<pos:position pos:line="4793" pos:column="11"/></operator> <operator pos:line="4793" pos:column="12">&amp;<pos:position pos:line="4793" pos:column="17"/></operator><name><name pos:line="4793" pos:column="13">aMem<pos:position pos:line="4793" pos:column="17"/></name><index pos:line="4793" pos:column="17">[<expr><name><name pos:line="4793" pos:column="18">pOp<pos:position pos:line="4793" pos:column="21"/></name><operator pos:line="4793" pos:column="21">-&gt;<pos:position pos:line="4793" pos:column="26"/></operator><name pos:line="4793" pos:column="23">p3<pos:position pos:line="4793" pos:column="25"/></name></name></expr>]<pos:position pos:line="4793" pos:column="26"/></index></name></expr>;<pos:position pos:line="4793" pos:column="27"/></expr_stmt>
<cpp:ifdef pos:line="4794" pos:column="1">#<cpp:directive pos:line="4794" pos:column="2">ifdef<pos:position pos:line="4794" pos:column="7"/></cpp:directive> <name pos:line="4794" pos:column="8">SQLITE_DEBUG<pos:position pos:line="4794" pos:column="20"/></name></cpp:ifdef>
  <block pos:line="4795" pos:column="3">{ <decl_stmt><decl><type><name pos:line="4795" pos:column="5">int<pos:position pos:line="4795" pos:column="8"/></name></type> <name pos:line="4795" pos:column="9">i<pos:position pos:line="4795" pos:column="10"/></name></decl>;<pos:position pos:line="4795" pos:column="11"/></decl_stmt> <for pos:line="4795" pos:column="12">for<control pos:line="4795" pos:column="15">(<init><expr><name pos:line="4795" pos:column="16">i<pos:position pos:line="4795" pos:column="17"/></name><operator pos:line="4795" pos:column="17">=<pos:position pos:line="4795" pos:column="18"/></operator><literal type="number" pos:line="4795" pos:column="18">0<pos:position pos:line="4795" pos:column="19"/></literal></expr>;<pos:position pos:line="4795" pos:column="20"/></init> <condition><expr><name pos:line="4795" pos:column="21">i<pos:position pos:line="4795" pos:column="22"/></name><operator pos:line="4795" pos:column="22">&lt;<pos:position pos:line="4795" pos:column="26"/></operator><name><name pos:line="4795" pos:column="23">r<pos:position pos:line="4795" pos:column="24"/></name><operator pos:line="4795" pos:column="24">.<pos:position pos:line="4795" pos:column="25"/></operator><name pos:line="4795" pos:column="25">nField<pos:position pos:line="4795" pos:column="31"/></name></name></expr>;<pos:position pos:line="4795" pos:column="32"/></condition> <incr><expr><name pos:line="4795" pos:column="33">i<pos:position pos:line="4795" pos:column="34"/></name><operator pos:line="4795" pos:column="34">++<pos:position pos:line="4795" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="4795" pos:column="37"/></control> <block type="pseudo"><expr_stmt><expr><call><name pos:line="4795" pos:column="38">assert<pos:position pos:line="4795" pos:column="44"/></name><argument_list pos:line="4795" pos:column="44">( <argument><expr><call><name pos:line="4795" pos:column="46">memIsValid<pos:position pos:line="4795" pos:column="56"/></name><argument_list pos:line="4795" pos:column="56">(<argument><expr><operator pos:line="4795" pos:column="57">&amp;<pos:position pos:line="4795" pos:column="62"/></operator><name><name pos:line="4795" pos:column="58">r<pos:position pos:line="4795" pos:column="59"/></name><operator pos:line="4795" pos:column="59">.<pos:position pos:line="4795" pos:column="60"/></operator><name pos:line="4795" pos:column="60">aMem<pos:position pos:line="4795" pos:column="64"/></name><index pos:line="4795" pos:column="64">[<expr><name pos:line="4795" pos:column="65">i<pos:position pos:line="4795" pos:column="66"/></name></expr>]<pos:position pos:line="4795" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="4795" pos:column="68"/></argument_list></call></expr></argument> )<pos:position pos:line="4795" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="4795" pos:column="71"/></expr_stmt></block></for> }<pos:position pos:line="4795" pos:column="73"/></block>
<cpp:endif pos:line="4796" pos:column="1">#<cpp:directive pos:line="4796" pos:column="2">endif<pos:position pos:line="4796" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="4797" pos:column="3">res<pos:position pos:line="4797" pos:column="6"/></name> <operator pos:line="4797" pos:column="7">=<pos:position pos:line="4797" pos:column="8"/></operator> <literal type="number" pos:line="4797" pos:column="9">0<pos:position pos:line="4797" pos:column="10"/></literal></expr>;<pos:position pos:line="4797" pos:column="11"/></expr_stmt>  <comment type="block" pos:line="4797" pos:column="13">/* Not needed.  Only used to silence a warning. */</comment>
  <expr_stmt><expr><name pos:line="4798" pos:column="3">rc<pos:position pos:line="4798" pos:column="5"/></name> <operator pos:line="4798" pos:column="6">=<pos:position pos:line="4798" pos:column="7"/></operator> <call><name pos:line="4798" pos:column="8">sqlite3VdbeIdxKeyCompare<pos:position pos:line="4798" pos:column="32"/></name><argument_list pos:line="4798" pos:column="32">(<argument><expr><name pos:line="4798" pos:column="33">db<pos:position pos:line="4798" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="4798" pos:column="37">pC<pos:position pos:line="4798" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="4798" pos:column="41">&amp;<pos:position pos:line="4798" pos:column="46"/></operator><name pos:line="4798" pos:column="42">r<pos:position pos:line="4798" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="4798" pos:column="45">&amp;<pos:position pos:line="4798" pos:column="50"/></operator><name pos:line="4798" pos:column="46">res<pos:position pos:line="4798" pos:column="49"/></name></expr></argument>)<pos:position pos:line="4798" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="4798" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4799" pos:column="3">assert<pos:position pos:line="4799" pos:column="9"/></name><argument_list pos:line="4799" pos:column="9">( <argument><expr><operator pos:line="4799" pos:column="11">(<pos:position pos:line="4799" pos:column="12"/></operator><name pos:line="4799" pos:column="12">OP_IdxLE<pos:position pos:line="4799" pos:column="20"/></name><operator pos:line="4799" pos:column="20">&amp;<pos:position pos:line="4799" pos:column="25"/></operator><literal type="number" pos:line="4799" pos:column="21">1<pos:position pos:line="4799" pos:column="22"/></literal><operator pos:line="4799" pos:column="22">)<pos:position pos:line="4799" pos:column="23"/></operator><operator pos:line="4799" pos:column="23">==<pos:position pos:line="4799" pos:column="25"/></operator><operator pos:line="4799" pos:column="25">(<pos:position pos:line="4799" pos:column="26"/></operator><name pos:line="4799" pos:column="26">OP_IdxLT<pos:position pos:line="4799" pos:column="34"/></name><operator pos:line="4799" pos:column="34">&amp;<pos:position pos:line="4799" pos:column="39"/></operator><literal type="number" pos:line="4799" pos:column="35">1<pos:position pos:line="4799" pos:column="36"/></literal><operator pos:line="4799" pos:column="36">)<pos:position pos:line="4799" pos:column="37"/></operator> <operator pos:line="4799" pos:column="38">&amp;&amp;<pos:position pos:line="4799" pos:column="48"/></operator> <operator pos:line="4799" pos:column="41">(<pos:position pos:line="4799" pos:column="42"/></operator><name pos:line="4799" pos:column="42">OP_IdxGE<pos:position pos:line="4799" pos:column="50"/></name><operator pos:line="4799" pos:column="50">&amp;<pos:position pos:line="4799" pos:column="55"/></operator><literal type="number" pos:line="4799" pos:column="51">1<pos:position pos:line="4799" pos:column="52"/></literal><operator pos:line="4799" pos:column="52">)<pos:position pos:line="4799" pos:column="53"/></operator><operator pos:line="4799" pos:column="53">==<pos:position pos:line="4799" pos:column="55"/></operator><operator pos:line="4799" pos:column="55">(<pos:position pos:line="4799" pos:column="56"/></operator><name pos:line="4799" pos:column="56">OP_IdxGT<pos:position pos:line="4799" pos:column="64"/></name><operator pos:line="4799" pos:column="64">&amp;<pos:position pos:line="4799" pos:column="69"/></operator><literal type="number" pos:line="4799" pos:column="65">1<pos:position pos:line="4799" pos:column="66"/></literal><operator pos:line="4799" pos:column="66">)<pos:position pos:line="4799" pos:column="67"/></operator></expr></argument> )<pos:position pos:line="4799" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="4799" pos:column="70"/></expr_stmt>
  <if pos:line="4800" pos:column="3">if<condition pos:line="4800" pos:column="5">( <expr><operator pos:line="4800" pos:column="7">(<pos:position pos:line="4800" pos:column="8"/></operator><name><name pos:line="4800" pos:column="8">pOp<pos:position pos:line="4800" pos:column="11"/></name><operator pos:line="4800" pos:column="11">-&gt;<pos:position pos:line="4800" pos:column="16"/></operator><name pos:line="4800" pos:column="13">opcode<pos:position pos:line="4800" pos:column="19"/></name></name><operator pos:line="4800" pos:column="19">&amp;<pos:position pos:line="4800" pos:column="24"/></operator><literal type="number" pos:line="4800" pos:column="20">1<pos:position pos:line="4800" pos:column="21"/></literal><operator pos:line="4800" pos:column="21">)<pos:position pos:line="4800" pos:column="22"/></operator><operator pos:line="4800" pos:column="22">==<pos:position pos:line="4800" pos:column="24"/></operator><operator pos:line="4800" pos:column="24">(<pos:position pos:line="4800" pos:column="25"/></operator><name pos:line="4800" pos:column="25">OP_IdxLT<pos:position pos:line="4800" pos:column="33"/></name><operator pos:line="4800" pos:column="33">&amp;<pos:position pos:line="4800" pos:column="38"/></operator><literal type="number" pos:line="4800" pos:column="34">1<pos:position pos:line="4800" pos:column="35"/></literal><operator pos:line="4800" pos:column="35">)<pos:position pos:line="4800" pos:column="36"/></operator></expr> )<pos:position pos:line="4800" pos:column="38"/></condition><then><block pos:line="4800" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="4801" pos:column="5">assert<pos:position pos:line="4801" pos:column="11"/></name><argument_list pos:line="4801" pos:column="11">( <argument><expr><name><name pos:line="4801" pos:column="13">pOp<pos:position pos:line="4801" pos:column="16"/></name><operator pos:line="4801" pos:column="16">-&gt;<pos:position pos:line="4801" pos:column="21"/></operator><name pos:line="4801" pos:column="18">opcode<pos:position pos:line="4801" pos:column="24"/></name></name><operator pos:line="4801" pos:column="24">==<pos:position pos:line="4801" pos:column="26"/></operator><name pos:line="4801" pos:column="26">OP_IdxLE<pos:position pos:line="4801" pos:column="34"/></name> <operator pos:line="4801" pos:column="35">||<pos:position pos:line="4801" pos:column="37"/></operator> <name><name pos:line="4801" pos:column="38">pOp<pos:position pos:line="4801" pos:column="41"/></name><operator pos:line="4801" pos:column="41">-&gt;<pos:position pos:line="4801" pos:column="46"/></operator><name pos:line="4801" pos:column="43">opcode<pos:position pos:line="4801" pos:column="49"/></name></name><operator pos:line="4801" pos:column="49">==<pos:position pos:line="4801" pos:column="51"/></operator><name pos:line="4801" pos:column="51">OP_IdxLT<pos:position pos:line="4801" pos:column="59"/></name></expr></argument> )<pos:position pos:line="4801" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="4801" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4802" pos:column="5">res<pos:position pos:line="4802" pos:column="8"/></name> <operator pos:line="4802" pos:column="9">=<pos:position pos:line="4802" pos:column="10"/></operator> <operator pos:line="4802" pos:column="11">-<pos:position pos:line="4802" pos:column="12"/></operator><name pos:line="4802" pos:column="12">res<pos:position pos:line="4802" pos:column="15"/></name></expr>;<pos:position pos:line="4802" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="4803" pos:column="4"/></block></then><else pos:line="4803" pos:column="4">else<block pos:line="4803" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="4804" pos:column="5">assert<pos:position pos:line="4804" pos:column="11"/></name><argument_list pos:line="4804" pos:column="11">( <argument><expr><name><name pos:line="4804" pos:column="13">pOp<pos:position pos:line="4804" pos:column="16"/></name><operator pos:line="4804" pos:column="16">-&gt;<pos:position pos:line="4804" pos:column="21"/></operator><name pos:line="4804" pos:column="18">opcode<pos:position pos:line="4804" pos:column="24"/></name></name><operator pos:line="4804" pos:column="24">==<pos:position pos:line="4804" pos:column="26"/></operator><name pos:line="4804" pos:column="26">OP_IdxGE<pos:position pos:line="4804" pos:column="34"/></name> <operator pos:line="4804" pos:column="35">||<pos:position pos:line="4804" pos:column="37"/></operator> <name><name pos:line="4804" pos:column="38">pOp<pos:position pos:line="4804" pos:column="41"/></name><operator pos:line="4804" pos:column="41">-&gt;<pos:position pos:line="4804" pos:column="46"/></operator><name pos:line="4804" pos:column="43">opcode<pos:position pos:line="4804" pos:column="49"/></name></name><operator pos:line="4804" pos:column="49">==<pos:position pos:line="4804" pos:column="51"/></operator><name pos:line="4804" pos:column="51">OP_IdxGT<pos:position pos:line="4804" pos:column="59"/></name></expr></argument> )<pos:position pos:line="4804" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="4804" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4805" pos:column="5">res<pos:position pos:line="4805" pos:column="8"/></name><operator pos:line="4805" pos:column="8">++<pos:position pos:line="4805" pos:column="10"/></operator></expr>;<pos:position pos:line="4805" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="4806" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="4807" pos:column="3">VdbeBranchTaken<pos:position pos:line="4807" pos:column="18"/></name><argument_list pos:line="4807" pos:column="18">(<argument><expr><name pos:line="4807" pos:column="19">res<pos:position pos:line="4807" pos:column="22"/></name><operator pos:line="4807" pos:column="22">&gt;<pos:position pos:line="4807" pos:column="26"/></operator><literal type="number" pos:line="4807" pos:column="23">0<pos:position pos:line="4807" pos:column="24"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4807" pos:column="25">2<pos:position pos:line="4807" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="4807" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4807" pos:column="28"/></expr_stmt>
  <if pos:line="4808" pos:column="3">if<condition pos:line="4808" pos:column="5">( <expr><name pos:line="4808" pos:column="7">rc<pos:position pos:line="4808" pos:column="9"/></name></expr> )<pos:position pos:line="4808" pos:column="11"/></condition><then pos:line="4808" pos:column="11"> <block type="pseudo"><goto pos:line="4808" pos:column="12">goto <name pos:line="4808" pos:column="17">abort_due_to_error<pos:position pos:line="4808" pos:column="35"/></name>;<pos:position pos:line="4808" pos:column="36"/></goto></block></then></if>
  <if pos:line="4809" pos:column="3">if<condition pos:line="4809" pos:column="5">( <expr><name pos:line="4809" pos:column="7">res<pos:position pos:line="4809" pos:column="10"/></name><operator pos:line="4809" pos:column="10">&gt;<pos:position pos:line="4809" pos:column="14"/></operator><literal type="number" pos:line="4809" pos:column="11">0<pos:position pos:line="4809" pos:column="12"/></literal></expr> )<pos:position pos:line="4809" pos:column="14"/></condition><then pos:line="4809" pos:column="14"> <block type="pseudo"><goto pos:line="4809" pos:column="15">goto <name pos:line="4809" pos:column="20">jump_to_p2<pos:position pos:line="4809" pos:column="30"/></name>;<pos:position pos:line="4809" pos:column="31"/></goto></block></then></if>
  <break pos:line="4810" pos:column="3">break;<pos:position pos:line="4810" pos:column="9"/></break>
}<pos:position pos:line="4811" pos:column="2"/></block>

<comment type="block" pos:line="4813" pos:column="1">/* Opcode: Destroy P1 P2 P3 * *
**
** Delete an entire database table or index whose root page in the database
** file is given by P1.
**
** The table being destroyed is in the main database file if P3==0.  If
** P3==1 then the table to be clear is in the auxiliary database file
** that is used to store tables create using CREATE TEMPORARY TABLE.
**
** If AUTOVACUUM is enabled then it is possible that another root page
** might be moved into the newly deleted root page in order to keep all
** root pages contiguous at the beginning of the database.  The former
** value of the root page that moved - its value before the move occurred -
** is stored in register P2. If no page movement was required (because the
** table being dropped was already the last one in the database) then a 
** zero is stored in register P2.  If AUTOVACUUM is disabled then a zero 
** is stored in register P2.
**
** This opcode throws an error if there are any active reader VMs when
** it is invoked. This is done to avoid the difficulty associated with 
** updating existing cursors when a root page is moved in an AUTOVACUUM 
** database. This error is thrown even if the database is not an AUTOVACUUM 
** db in order to avoid introducing an incompatibility between autovacuum 
** and non-autovacuum modes.
**
** See also: Clear
*/</comment>
<case pos:line="4840" pos:column="1">case <expr><name pos:line="4840" pos:column="6">OP_Destroy<pos:position pos:line="4840" pos:column="16"/></name></expr>:<pos:position pos:line="4840" pos:column="17"/></case> <block pos:line="4840" pos:column="18">{     <comment type="block" pos:line="4840" pos:column="24">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="4841" pos:column="3">int<pos:position pos:line="4841" pos:column="6"/></name></type> <name pos:line="4841" pos:column="7">iMoved<pos:position pos:line="4841" pos:column="13"/></name></decl>;<pos:position pos:line="4841" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4842" pos:column="3">int<pos:position pos:line="4842" pos:column="6"/></name></type> <name pos:line="4842" pos:column="7">iDb<pos:position pos:line="4842" pos:column="10"/></name></decl>;<pos:position pos:line="4842" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4844" pos:column="3">assert<pos:position pos:line="4844" pos:column="9"/></name><argument_list pos:line="4844" pos:column="9">( <argument><expr><name><name pos:line="4844" pos:column="11">p<pos:position pos:line="4844" pos:column="12"/></name><operator pos:line="4844" pos:column="12">-&gt;<pos:position pos:line="4844" pos:column="17"/></operator><name pos:line="4844" pos:column="14">readOnly<pos:position pos:line="4844" pos:column="22"/></name></name><operator pos:line="4844" pos:column="22">==<pos:position pos:line="4844" pos:column="24"/></operator><literal type="number" pos:line="4844" pos:column="24">0<pos:position pos:line="4844" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="4844" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4844" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4845" pos:column="3">assert<pos:position pos:line="4845" pos:column="9"/></name><argument_list pos:line="4845" pos:column="9">( <argument><expr><name><name pos:line="4845" pos:column="11">pOp<pos:position pos:line="4845" pos:column="14"/></name><operator pos:line="4845" pos:column="14">-&gt;<pos:position pos:line="4845" pos:column="19"/></operator><name pos:line="4845" pos:column="16">p1<pos:position pos:line="4845" pos:column="18"/></name></name><operator pos:line="4845" pos:column="18">&gt;<pos:position pos:line="4845" pos:column="22"/></operator><literal type="number" pos:line="4845" pos:column="19">1<pos:position pos:line="4845" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="4845" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="4845" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4846" pos:column="3">pOut<pos:position pos:line="4846" pos:column="7"/></name> <operator pos:line="4846" pos:column="8">=<pos:position pos:line="4846" pos:column="9"/></operator> <call><name pos:line="4846" pos:column="10">out2Prerelease<pos:position pos:line="4846" pos:column="24"/></name><argument_list pos:line="4846" pos:column="24">(<argument><expr><name pos:line="4846" pos:column="25">p<pos:position pos:line="4846" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="4846" pos:column="28">pOp<pos:position pos:line="4846" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4846" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4846" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4847" pos:column="3">pOut<pos:position pos:line="4847" pos:column="7"/></name><operator pos:line="4847" pos:column="7">-&gt;<pos:position pos:line="4847" pos:column="12"/></operator><name pos:line="4847" pos:column="9">flags<pos:position pos:line="4847" pos:column="14"/></name></name> <operator pos:line="4847" pos:column="15">=<pos:position pos:line="4847" pos:column="16"/></operator> <name pos:line="4847" pos:column="17">MEM_Null<pos:position pos:line="4847" pos:column="25"/></name></expr>;<pos:position pos:line="4847" pos:column="26"/></expr_stmt>
  <if pos:line="4848" pos:column="3">if<condition pos:line="4848" pos:column="5">( <expr><name><name pos:line="4848" pos:column="7">db<pos:position pos:line="4848" pos:column="9"/></name><operator pos:line="4848" pos:column="9">-&gt;<pos:position pos:line="4848" pos:column="14"/></operator><name pos:line="4848" pos:column="11">nVdbeRead<pos:position pos:line="4848" pos:column="20"/></name></name> <operator pos:line="4848" pos:column="21">&gt;<pos:position pos:line="4848" pos:column="25"/></operator> <name><name pos:line="4848" pos:column="23">db<pos:position pos:line="4848" pos:column="25"/></name><operator pos:line="4848" pos:column="25">-&gt;<pos:position pos:line="4848" pos:column="30"/></operator><name pos:line="4848" pos:column="27">nVDestroy<pos:position pos:line="4848" pos:column="36"/></name></name><operator pos:line="4848" pos:column="36">+<pos:position pos:line="4848" pos:column="37"/></operator><literal type="number" pos:line="4848" pos:column="37">1<pos:position pos:line="4848" pos:column="38"/></literal></expr> )<pos:position pos:line="4848" pos:column="40"/></condition><then><block pos:line="4848" pos:column="40">{
    <expr_stmt><expr><name pos:line="4849" pos:column="5">rc<pos:position pos:line="4849" pos:column="7"/></name> <operator pos:line="4849" pos:column="8">=<pos:position pos:line="4849" pos:column="9"/></operator> <name pos:line="4849" pos:column="10">SQLITE_LOCKED<pos:position pos:line="4849" pos:column="23"/></name></expr>;<pos:position pos:line="4849" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4850" pos:column="5">p<pos:position pos:line="4850" pos:column="6"/></name><operator pos:line="4850" pos:column="6">-&gt;<pos:position pos:line="4850" pos:column="11"/></operator><name pos:line="4850" pos:column="8">errorAction<pos:position pos:line="4850" pos:column="19"/></name></name> <operator pos:line="4850" pos:column="20">=<pos:position pos:line="4850" pos:column="21"/></operator> <name pos:line="4850" pos:column="22">OE_Abort<pos:position pos:line="4850" pos:column="30"/></name></expr>;<pos:position pos:line="4850" pos:column="31"/></expr_stmt>
    <goto pos:line="4851" pos:column="5">goto <name pos:line="4851" pos:column="10">abort_due_to_error<pos:position pos:line="4851" pos:column="28"/></name>;<pos:position pos:line="4851" pos:column="29"/></goto>
  }<pos:position pos:line="4852" pos:column="4"/></block></then><else pos:line="4852" pos:column="4">else<block pos:line="4852" pos:column="8">{
    <expr_stmt><expr><name pos:line="4853" pos:column="5">iDb<pos:position pos:line="4853" pos:column="8"/></name> <operator pos:line="4853" pos:column="9">=<pos:position pos:line="4853" pos:column="10"/></operator> <name><name pos:line="4853" pos:column="11">pOp<pos:position pos:line="4853" pos:column="14"/></name><operator pos:line="4853" pos:column="14">-&gt;<pos:position pos:line="4853" pos:column="19"/></operator><name pos:line="4853" pos:column="16">p3<pos:position pos:line="4853" pos:column="18"/></name></name></expr>;<pos:position pos:line="4853" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4854" pos:column="5">assert<pos:position pos:line="4854" pos:column="11"/></name><argument_list pos:line="4854" pos:column="11">( <argument><expr><call><name pos:line="4854" pos:column="13">DbMaskTest<pos:position pos:line="4854" pos:column="23"/></name><argument_list pos:line="4854" pos:column="23">(<argument><expr><name><name pos:line="4854" pos:column="24">p<pos:position pos:line="4854" pos:column="25"/></name><operator pos:line="4854" pos:column="25">-&gt;<pos:position pos:line="4854" pos:column="30"/></operator><name pos:line="4854" pos:column="27">btreeMask<pos:position pos:line="4854" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="4854" pos:column="38">iDb<pos:position pos:line="4854" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4854" pos:column="42"/></argument_list></call></expr></argument> )<pos:position pos:line="4854" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4854" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4855" pos:column="5">iMoved<pos:position pos:line="4855" pos:column="11"/></name> <operator pos:line="4855" pos:column="12">=<pos:position pos:line="4855" pos:column="13"/></operator> <literal type="number" pos:line="4855" pos:column="14">0<pos:position pos:line="4855" pos:column="15"/></literal></expr>;<pos:position pos:line="4855" pos:column="16"/></expr_stmt>  <comment type="block" pos:line="4855" pos:column="18">/* Not needed.  Only to silence a warning. */</comment>
    <expr_stmt><expr><name pos:line="4856" pos:column="5">rc<pos:position pos:line="4856" pos:column="7"/></name> <operator pos:line="4856" pos:column="8">=<pos:position pos:line="4856" pos:column="9"/></operator> <call><name pos:line="4856" pos:column="10">sqlite3BtreeDropTable<pos:position pos:line="4856" pos:column="31"/></name><argument_list pos:line="4856" pos:column="31">(<argument><expr><name><name pos:line="4856" pos:column="32">db<pos:position pos:line="4856" pos:column="34"/></name><operator pos:line="4856" pos:column="34">-&gt;<pos:position pos:line="4856" pos:column="39"/></operator><name pos:line="4856" pos:column="36">aDb<pos:position pos:line="4856" pos:column="39"/></name><index pos:line="4856" pos:column="39">[<expr><name pos:line="4856" pos:column="40">iDb<pos:position pos:line="4856" pos:column="43"/></name></expr>]<pos:position pos:line="4856" pos:column="44"/></index></name><operator pos:line="4856" pos:column="44">.<pos:position pos:line="4856" pos:column="45"/></operator><name pos:line="4856" pos:column="45">pBt<pos:position pos:line="4856" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="4856" pos:column="50">pOp<pos:position pos:line="4856" pos:column="53"/></name><operator pos:line="4856" pos:column="53">-&gt;<pos:position pos:line="4856" pos:column="58"/></operator><name pos:line="4856" pos:column="55">p1<pos:position pos:line="4856" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="4856" pos:column="59">&amp;<pos:position pos:line="4856" pos:column="64"/></operator><name pos:line="4856" pos:column="60">iMoved<pos:position pos:line="4856" pos:column="66"/></name></expr></argument>)<pos:position pos:line="4856" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="4856" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4857" pos:column="5">pOut<pos:position pos:line="4857" pos:column="9"/></name><operator pos:line="4857" pos:column="9">-&gt;<pos:position pos:line="4857" pos:column="14"/></operator><name pos:line="4857" pos:column="11">flags<pos:position pos:line="4857" pos:column="16"/></name></name> <operator pos:line="4857" pos:column="17">=<pos:position pos:line="4857" pos:column="18"/></operator> <name pos:line="4857" pos:column="19">MEM_Int<pos:position pos:line="4857" pos:column="26"/></name></expr>;<pos:position pos:line="4857" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4858" pos:column="5">pOut<pos:position pos:line="4858" pos:column="9"/></name><operator pos:line="4858" pos:column="9">-&gt;<pos:position pos:line="4858" pos:column="14"/></operator><name pos:line="4858" pos:column="11">u<pos:position pos:line="4858" pos:column="12"/></name><operator pos:line="4858" pos:column="12">.<pos:position pos:line="4858" pos:column="13"/></operator><name pos:line="4858" pos:column="13">i<pos:position pos:line="4858" pos:column="14"/></name></name> <operator pos:line="4858" pos:column="15">=<pos:position pos:line="4858" pos:column="16"/></operator> <name pos:line="4858" pos:column="17">iMoved<pos:position pos:line="4858" pos:column="23"/></name></expr>;<pos:position pos:line="4858" pos:column="24"/></expr_stmt>
    <if pos:line="4859" pos:column="5">if<condition pos:line="4859" pos:column="7">( <expr><name pos:line="4859" pos:column="9">rc<pos:position pos:line="4859" pos:column="11"/></name></expr> )<pos:position pos:line="4859" pos:column="13"/></condition><then pos:line="4859" pos:column="13"> <block type="pseudo"><goto pos:line="4859" pos:column="14">goto <name pos:line="4859" pos:column="19">abort_due_to_error<pos:position pos:line="4859" pos:column="37"/></name>;<pos:position pos:line="4859" pos:column="38"/></goto></block></then></if>
<cpp:ifndef pos:line="4860" pos:column="1">#<cpp:directive pos:line="4860" pos:column="2">ifndef<pos:position pos:line="4860" pos:column="8"/></cpp:directive> <name pos:line="4860" pos:column="9">SQLITE_OMIT_AUTOVACUUM<pos:position pos:line="4860" pos:column="31"/></name></cpp:ifndef>
    <if pos:line="4861" pos:column="5">if<condition pos:line="4861" pos:column="7">( <expr><name pos:line="4861" pos:column="9">iMoved<pos:position pos:line="4861" pos:column="15"/></name><operator pos:line="4861" pos:column="15">!=<pos:position pos:line="4861" pos:column="17"/></operator><literal type="number" pos:line="4861" pos:column="17">0<pos:position pos:line="4861" pos:column="18"/></literal></expr> )<pos:position pos:line="4861" pos:column="20"/></condition><then><block pos:line="4861" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="4862" pos:column="7">sqlite3RootPageMoved<pos:position pos:line="4862" pos:column="27"/></name><argument_list pos:line="4862" pos:column="27">(<argument><expr><name pos:line="4862" pos:column="28">db<pos:position pos:line="4862" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="4862" pos:column="32">iDb<pos:position pos:line="4862" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="4862" pos:column="37">iMoved<pos:position pos:line="4862" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="4862" pos:column="45">pOp<pos:position pos:line="4862" pos:column="48"/></name><operator pos:line="4862" pos:column="48">-&gt;<pos:position pos:line="4862" pos:column="53"/></operator><name pos:line="4862" pos:column="50">p1<pos:position pos:line="4862" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="4862" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="4862" pos:column="54"/></expr_stmt>
      <comment type="block" pos:line="4863" pos:column="7">/* All OP_Destroy operations occur on the same btree */</comment>
      <expr_stmt><expr><call><name pos:line="4864" pos:column="7">assert<pos:position pos:line="4864" pos:column="13"/></name><argument_list pos:line="4864" pos:column="13">( <argument><expr><name pos:line="4864" pos:column="15">resetSchemaOnFault<pos:position pos:line="4864" pos:column="33"/></name><operator pos:line="4864" pos:column="33">==<pos:position pos:line="4864" pos:column="35"/></operator><literal type="number" pos:line="4864" pos:column="35">0<pos:position pos:line="4864" pos:column="36"/></literal> <operator pos:line="4864" pos:column="37">||<pos:position pos:line="4864" pos:column="39"/></operator> <name pos:line="4864" pos:column="40">resetSchemaOnFault<pos:position pos:line="4864" pos:column="58"/></name><operator pos:line="4864" pos:column="58">==<pos:position pos:line="4864" pos:column="60"/></operator><name pos:line="4864" pos:column="60">iDb<pos:position pos:line="4864" pos:column="63"/></name><operator pos:line="4864" pos:column="63">+<pos:position pos:line="4864" pos:column="64"/></operator><literal type="number" pos:line="4864" pos:column="64">1<pos:position pos:line="4864" pos:column="65"/></literal></expr></argument> )<pos:position pos:line="4864" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="4864" pos:column="68"/></expr_stmt>
      <expr_stmt><expr><name pos:line="4865" pos:column="7">resetSchemaOnFault<pos:position pos:line="4865" pos:column="25"/></name> <operator pos:line="4865" pos:column="26">=<pos:position pos:line="4865" pos:column="27"/></operator> <name pos:line="4865" pos:column="28">iDb<pos:position pos:line="4865" pos:column="31"/></name><operator pos:line="4865" pos:column="31">+<pos:position pos:line="4865" pos:column="32"/></operator><literal type="number" pos:line="4865" pos:column="32">1<pos:position pos:line="4865" pos:column="33"/></literal></expr>;<pos:position pos:line="4865" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="4866" pos:column="6"/></block></then></if>
<cpp:endif pos:line="4867" pos:column="1">#<cpp:directive pos:line="4867" pos:column="2">endif<pos:position pos:line="4867" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="4868" pos:column="4"/></block></else></if>
  <break pos:line="4869" pos:column="3">break;<pos:position pos:line="4869" pos:column="9"/></break>
}<pos:position pos:line="4870" pos:column="2"/></block>

<comment type="block" pos:line="4872" pos:column="1">/* Opcode: Clear P1 P2 P3
**
** Delete all contents of the database table or index whose root page
** in the database file is given by P1.  But, unlike Destroy, do not
** remove the table or index from the database file.
**
** The table being clear is in the main database file if P2==0.  If
** P2==1 then the table to be clear is in the auxiliary database file
** that is used to store tables create using CREATE TEMPORARY TABLE.
**
** If the P3 value is non-zero, then the table referred to must be an
** intkey table (an SQL table, not an index). In this case the row change 
** count is incremented by the number of rows in the table being cleared. 
** If P3 is greater than zero, then the value stored in register P3 is
** also incremented by the number of rows in the table being cleared.
**
** See also: Destroy
*/</comment>
<case pos:line="4890" pos:column="1">case <expr><name pos:line="4890" pos:column="6">OP_Clear<pos:position pos:line="4890" pos:column="14"/></name></expr>:<pos:position pos:line="4890" pos:column="15"/></case> <block pos:line="4890" pos:column="16">{
  <decl_stmt><decl><type><name pos:line="4891" pos:column="3">int<pos:position pos:line="4891" pos:column="6"/></name></type> <name pos:line="4891" pos:column="7">nChange<pos:position pos:line="4891" pos:column="14"/></name></decl>;<pos:position pos:line="4891" pos:column="15"/></decl_stmt>
 
  <expr_stmt><expr><name pos:line="4893" pos:column="3">nChange<pos:position pos:line="4893" pos:column="10"/></name> <operator pos:line="4893" pos:column="11">=<pos:position pos:line="4893" pos:column="12"/></operator> <literal type="number" pos:line="4893" pos:column="13">0<pos:position pos:line="4893" pos:column="14"/></literal></expr>;<pos:position pos:line="4893" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4894" pos:column="3">assert<pos:position pos:line="4894" pos:column="9"/></name><argument_list pos:line="4894" pos:column="9">( <argument><expr><name><name pos:line="4894" pos:column="11">p<pos:position pos:line="4894" pos:column="12"/></name><operator pos:line="4894" pos:column="12">-&gt;<pos:position pos:line="4894" pos:column="17"/></operator><name pos:line="4894" pos:column="14">readOnly<pos:position pos:line="4894" pos:column="22"/></name></name><operator pos:line="4894" pos:column="22">==<pos:position pos:line="4894" pos:column="24"/></operator><literal type="number" pos:line="4894" pos:column="24">0<pos:position pos:line="4894" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="4894" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4894" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4895" pos:column="3">assert<pos:position pos:line="4895" pos:column="9"/></name><argument_list pos:line="4895" pos:column="9">( <argument><expr><call><name pos:line="4895" pos:column="11">DbMaskTest<pos:position pos:line="4895" pos:column="21"/></name><argument_list pos:line="4895" pos:column="21">(<argument><expr><name><name pos:line="4895" pos:column="22">p<pos:position pos:line="4895" pos:column="23"/></name><operator pos:line="4895" pos:column="23">-&gt;<pos:position pos:line="4895" pos:column="28"/></operator><name pos:line="4895" pos:column="25">btreeMask<pos:position pos:line="4895" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4895" pos:column="36">pOp<pos:position pos:line="4895" pos:column="39"/></name><operator pos:line="4895" pos:column="39">-&gt;<pos:position pos:line="4895" pos:column="44"/></operator><name pos:line="4895" pos:column="41">p2<pos:position pos:line="4895" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="4895" pos:column="44"/></argument_list></call></expr></argument> )<pos:position pos:line="4895" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4895" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4896" pos:column="3">rc<pos:position pos:line="4896" pos:column="5"/></name> <operator pos:line="4896" pos:column="6">=<pos:position pos:line="4896" pos:column="7"/></operator> <call><name pos:line="4896" pos:column="8">sqlite3BtreeClearTable<pos:position pos:line="4896" pos:column="30"/></name><argument_list pos:line="4896" pos:column="30">(
      <argument><expr><name><name pos:line="4897" pos:column="7">db<pos:position pos:line="4897" pos:column="9"/></name><operator pos:line="4897" pos:column="9">-&gt;<pos:position pos:line="4897" pos:column="14"/></operator><name pos:line="4897" pos:column="11">aDb<pos:position pos:line="4897" pos:column="14"/></name><index pos:line="4897" pos:column="14">[<expr><name><name pos:line="4897" pos:column="15">pOp<pos:position pos:line="4897" pos:column="18"/></name><operator pos:line="4897" pos:column="18">-&gt;<pos:position pos:line="4897" pos:column="23"/></operator><name pos:line="4897" pos:column="20">p2<pos:position pos:line="4897" pos:column="22"/></name></name></expr>]<pos:position pos:line="4897" pos:column="23"/></index></name><operator pos:line="4897" pos:column="23">.<pos:position pos:line="4897" pos:column="24"/></operator><name pos:line="4897" pos:column="24">pBt<pos:position pos:line="4897" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="4897" pos:column="29">pOp<pos:position pos:line="4897" pos:column="32"/></name><operator pos:line="4897" pos:column="32">-&gt;<pos:position pos:line="4897" pos:column="37"/></operator><name pos:line="4897" pos:column="34">p1<pos:position pos:line="4897" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="4897" pos:column="38">(<pos:position pos:line="4897" pos:column="39"/></operator><ternary><condition><expr><name><name pos:line="4897" pos:column="39">pOp<pos:position pos:line="4897" pos:column="42"/></name><operator pos:line="4897" pos:column="42">-&gt;<pos:position pos:line="4897" pos:column="47"/></operator><name pos:line="4897" pos:column="44">p3<pos:position pos:line="4897" pos:column="46"/></name></name></expr> ?<pos:position pos:line="4897" pos:column="48"/></condition><then pos:line="4897" pos:column="48"> <expr><operator pos:line="4897" pos:column="49">&amp;<pos:position pos:line="4897" pos:column="54"/></operator><name pos:line="4897" pos:column="50">nChange<pos:position pos:line="4897" pos:column="57"/></name></expr> <pos:position pos:line="4897" pos:column="58"/></then><else pos:line="4897" pos:column="58">: <expr><literal type="number" pos:line="4897" pos:column="60">0<pos:position pos:line="4897" pos:column="61"/></literal></expr></else></ternary><operator pos:line="4897" pos:column="61">)<pos:position pos:line="4897" pos:column="62"/></operator></expr></argument>
  )<pos:position pos:line="4898" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="4898" pos:column="5"/></expr_stmt>
  <if pos:line="4899" pos:column="3">if<condition pos:line="4899" pos:column="5">( <expr><name><name pos:line="4899" pos:column="7">pOp<pos:position pos:line="4899" pos:column="10"/></name><operator pos:line="4899" pos:column="10">-&gt;<pos:position pos:line="4899" pos:column="15"/></operator><name pos:line="4899" pos:column="12">p3<pos:position pos:line="4899" pos:column="14"/></name></name></expr> )<pos:position pos:line="4899" pos:column="16"/></condition><then><block pos:line="4899" pos:column="16">{
    <expr_stmt><expr><name><name pos:line="4900" pos:column="5">p<pos:position pos:line="4900" pos:column="6"/></name><operator pos:line="4900" pos:column="6">-&gt;<pos:position pos:line="4900" pos:column="11"/></operator><name pos:line="4900" pos:column="8">nChange<pos:position pos:line="4900" pos:column="15"/></name></name> <operator pos:line="4900" pos:column="16">+=<pos:position pos:line="4900" pos:column="18"/></operator> <name pos:line="4900" pos:column="19">nChange<pos:position pos:line="4900" pos:column="26"/></name></expr>;<pos:position pos:line="4900" pos:column="27"/></expr_stmt>
    <if pos:line="4901" pos:column="5">if<condition pos:line="4901" pos:column="7">( <expr><name><name pos:line="4901" pos:column="9">pOp<pos:position pos:line="4901" pos:column="12"/></name><operator pos:line="4901" pos:column="12">-&gt;<pos:position pos:line="4901" pos:column="17"/></operator><name pos:line="4901" pos:column="14">p3<pos:position pos:line="4901" pos:column="16"/></name></name><operator pos:line="4901" pos:column="16">&gt;<pos:position pos:line="4901" pos:column="20"/></operator><literal type="number" pos:line="4901" pos:column="17">0<pos:position pos:line="4901" pos:column="18"/></literal></expr> )<pos:position pos:line="4901" pos:column="20"/></condition><then><block pos:line="4901" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="4902" pos:column="7">assert<pos:position pos:line="4902" pos:column="13"/></name><argument_list pos:line="4902" pos:column="13">( <argument><expr><call><name pos:line="4902" pos:column="15">memIsValid<pos:position pos:line="4902" pos:column="25"/></name><argument_list pos:line="4902" pos:column="25">(<argument><expr><operator pos:line="4902" pos:column="26">&amp;<pos:position pos:line="4902" pos:column="31"/></operator><name><name pos:line="4902" pos:column="27">aMem<pos:position pos:line="4902" pos:column="31"/></name><index pos:line="4902" pos:column="31">[<expr><name><name pos:line="4902" pos:column="32">pOp<pos:position pos:line="4902" pos:column="35"/></name><operator pos:line="4902" pos:column="35">-&gt;<pos:position pos:line="4902" pos:column="40"/></operator><name pos:line="4902" pos:column="37">p3<pos:position pos:line="4902" pos:column="39"/></name></name></expr>]<pos:position pos:line="4902" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="4902" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="4902" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4902" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4903" pos:column="7">memAboutToChange<pos:position pos:line="4903" pos:column="23"/></name><argument_list pos:line="4903" pos:column="23">(<argument><expr><name pos:line="4903" pos:column="24">p<pos:position pos:line="4903" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="4903" pos:column="27">&amp;<pos:position pos:line="4903" pos:column="32"/></operator><name><name pos:line="4903" pos:column="28">aMem<pos:position pos:line="4903" pos:column="32"/></name><index pos:line="4903" pos:column="32">[<expr><name><name pos:line="4903" pos:column="33">pOp<pos:position pos:line="4903" pos:column="36"/></name><operator pos:line="4903" pos:column="36">-&gt;<pos:position pos:line="4903" pos:column="41"/></operator><name pos:line="4903" pos:column="38">p3<pos:position pos:line="4903" pos:column="40"/></name></name></expr>]<pos:position pos:line="4903" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="4903" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4903" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4904" pos:column="7">aMem<pos:position pos:line="4904" pos:column="11"/></name><index pos:line="4904" pos:column="11">[<expr><name><name pos:line="4904" pos:column="12">pOp<pos:position pos:line="4904" pos:column="15"/></name><operator pos:line="4904" pos:column="15">-&gt;<pos:position pos:line="4904" pos:column="20"/></operator><name pos:line="4904" pos:column="17">p3<pos:position pos:line="4904" pos:column="19"/></name></name></expr>]<pos:position pos:line="4904" pos:column="20"/></index></name><operator pos:line="4904" pos:column="20">.<pos:position pos:line="4904" pos:column="21"/></operator><name><name pos:line="4904" pos:column="21">u<pos:position pos:line="4904" pos:column="22"/></name><operator pos:line="4904" pos:column="22">.<pos:position pos:line="4904" pos:column="23"/></operator><name pos:line="4904" pos:column="23">i<pos:position pos:line="4904" pos:column="24"/></name></name> <operator pos:line="4904" pos:column="25">+=<pos:position pos:line="4904" pos:column="27"/></operator> <name pos:line="4904" pos:column="28">nChange<pos:position pos:line="4904" pos:column="35"/></name></expr>;<pos:position pos:line="4904" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="4905" pos:column="6"/></block></then></if>
  }<pos:position pos:line="4906" pos:column="4"/></block></then></if>
  <if pos:line="4907" pos:column="3">if<condition pos:line="4907" pos:column="5">( <expr><name pos:line="4907" pos:column="7">rc<pos:position pos:line="4907" pos:column="9"/></name></expr> )<pos:position pos:line="4907" pos:column="11"/></condition><then pos:line="4907" pos:column="11"> <block type="pseudo"><goto pos:line="4907" pos:column="12">goto <name pos:line="4907" pos:column="17">abort_due_to_error<pos:position pos:line="4907" pos:column="35"/></name>;<pos:position pos:line="4907" pos:column="36"/></goto></block></then></if>
  <break pos:line="4908" pos:column="3">break;<pos:position pos:line="4908" pos:column="9"/></break>
}<pos:position pos:line="4909" pos:column="2"/></block>

<comment type="block" pos:line="4911" pos:column="1">/* Opcode: ResetSorter P1 * * * *
**
** Delete all contents from the ephemeral table or sorter
** that is open on cursor P1.
**
** This opcode only works for cursors used for sorting and
** opened with OP_OpenEphemeral or OP_SorterOpen.
*/</comment>
<case pos:line="4919" pos:column="1">case <expr><name pos:line="4919" pos:column="6">OP_ResetSorter<pos:position pos:line="4919" pos:column="20"/></name></expr>:<pos:position pos:line="4919" pos:column="21"/></case> <block pos:line="4919" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="4920" pos:column="3">VdbeCursor<pos:position pos:line="4920" pos:column="13"/></name> <modifier pos:line="4920" pos:column="14">*<pos:position pos:line="4920" pos:column="15"/></modifier></type><name pos:line="4920" pos:column="15">pC<pos:position pos:line="4920" pos:column="17"/></name></decl>;<pos:position pos:line="4920" pos:column="18"/></decl_stmt>
 
  <expr_stmt><expr><call><name pos:line="4922" pos:column="3">assert<pos:position pos:line="4922" pos:column="9"/></name><argument_list pos:line="4922" pos:column="9">( <argument><expr><name><name pos:line="4922" pos:column="11">pOp<pos:position pos:line="4922" pos:column="14"/></name><operator pos:line="4922" pos:column="14">-&gt;<pos:position pos:line="4922" pos:column="19"/></operator><name pos:line="4922" pos:column="16">p1<pos:position pos:line="4922" pos:column="18"/></name></name><operator pos:line="4922" pos:column="18">&gt;=<pos:position pos:line="4922" pos:column="23"/></operator><literal type="number" pos:line="4922" pos:column="20">0<pos:position pos:line="4922" pos:column="21"/></literal> <operator pos:line="4922" pos:column="22">&amp;&amp;<pos:position pos:line="4922" pos:column="32"/></operator> <name><name pos:line="4922" pos:column="25">pOp<pos:position pos:line="4922" pos:column="28"/></name><operator pos:line="4922" pos:column="28">-&gt;<pos:position pos:line="4922" pos:column="33"/></operator><name pos:line="4922" pos:column="30">p1<pos:position pos:line="4922" pos:column="32"/></name></name><operator pos:line="4922" pos:column="32">&lt;<pos:position pos:line="4922" pos:column="36"/></operator><name><name pos:line="4922" pos:column="33">p<pos:position pos:line="4922" pos:column="34"/></name><operator pos:line="4922" pos:column="34">-&gt;<pos:position pos:line="4922" pos:column="39"/></operator><name pos:line="4922" pos:column="36">nCursor<pos:position pos:line="4922" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="4922" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4922" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4923" pos:column="3">pC<pos:position pos:line="4923" pos:column="5"/></name> <operator pos:line="4923" pos:column="6">=<pos:position pos:line="4923" pos:column="7"/></operator> <name><name pos:line="4923" pos:column="8">p<pos:position pos:line="4923" pos:column="9"/></name><operator pos:line="4923" pos:column="9">-&gt;<pos:position pos:line="4923" pos:column="14"/></operator><name pos:line="4923" pos:column="11">apCsr<pos:position pos:line="4923" pos:column="16"/></name><index pos:line="4923" pos:column="16">[<expr><name><name pos:line="4923" pos:column="17">pOp<pos:position pos:line="4923" pos:column="20"/></name><operator pos:line="4923" pos:column="20">-&gt;<pos:position pos:line="4923" pos:column="25"/></operator><name pos:line="4923" pos:column="22">p1<pos:position pos:line="4923" pos:column="24"/></name></name></expr>]<pos:position pos:line="4923" pos:column="25"/></index></name></expr>;<pos:position pos:line="4923" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4924" pos:column="3">assert<pos:position pos:line="4924" pos:column="9"/></name><argument_list pos:line="4924" pos:column="9">( <argument><expr><name pos:line="4924" pos:column="11">pC<pos:position pos:line="4924" pos:column="13"/></name><operator pos:line="4924" pos:column="13">!=<pos:position pos:line="4924" pos:column="15"/></operator><literal type="number" pos:line="4924" pos:column="15">0<pos:position pos:line="4924" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="4924" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4924" pos:column="19"/></expr_stmt>
  <if pos:line="4925" pos:column="3">if<condition pos:line="4925" pos:column="5">( <expr><call><name pos:line="4925" pos:column="7">isSorter<pos:position pos:line="4925" pos:column="15"/></name><argument_list pos:line="4925" pos:column="15">(<argument><expr><name pos:line="4925" pos:column="16">pC<pos:position pos:line="4925" pos:column="18"/></name></expr></argument>)<pos:position pos:line="4925" pos:column="19"/></argument_list></call></expr> )<pos:position pos:line="4925" pos:column="21"/></condition><then><block pos:line="4925" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="4926" pos:column="5">sqlite3VdbeSorterReset<pos:position pos:line="4926" pos:column="27"/></name><argument_list pos:line="4926" pos:column="27">(<argument><expr><name pos:line="4926" pos:column="28">db<pos:position pos:line="4926" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="4926" pos:column="32">pC<pos:position pos:line="4926" pos:column="34"/></name><operator pos:line="4926" pos:column="34">-&gt;<pos:position pos:line="4926" pos:column="39"/></operator><name pos:line="4926" pos:column="36">uc<pos:position pos:line="4926" pos:column="38"/></name><operator pos:line="4926" pos:column="38">.<pos:position pos:line="4926" pos:column="39"/></operator><name pos:line="4926" pos:column="39">pSorter<pos:position pos:line="4926" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="4926" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="4926" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="4927" pos:column="4"/></block></then><else pos:line="4927" pos:column="4">else<block pos:line="4927" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="4928" pos:column="5">assert<pos:position pos:line="4928" pos:column="11"/></name><argument_list pos:line="4928" pos:column="11">( <argument><expr><name><name pos:line="4928" pos:column="13">pC<pos:position pos:line="4928" pos:column="15"/></name><operator pos:line="4928" pos:column="15">-&gt;<pos:position pos:line="4928" pos:column="20"/></operator><name pos:line="4928" pos:column="17">eCurType<pos:position pos:line="4928" pos:column="25"/></name></name><operator pos:line="4928" pos:column="25">==<pos:position pos:line="4928" pos:column="27"/></operator><name pos:line="4928" pos:column="27">CURTYPE_BTREE<pos:position pos:line="4928" pos:column="40"/></name></expr></argument> )<pos:position pos:line="4928" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4928" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4929" pos:column="5">assert<pos:position pos:line="4929" pos:column="11"/></name><argument_list pos:line="4929" pos:column="11">( <argument><expr><name><name pos:line="4929" pos:column="13">pC<pos:position pos:line="4929" pos:column="15"/></name><operator pos:line="4929" pos:column="15">-&gt;<pos:position pos:line="4929" pos:column="20"/></operator><name pos:line="4929" pos:column="17">isEphemeral<pos:position pos:line="4929" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="4929" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4929" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4930" pos:column="5">rc<pos:position pos:line="4930" pos:column="7"/></name> <operator pos:line="4930" pos:column="8">=<pos:position pos:line="4930" pos:column="9"/></operator> <call><name pos:line="4930" pos:column="10">sqlite3BtreeClearTableOfCursor<pos:position pos:line="4930" pos:column="40"/></name><argument_list pos:line="4930" pos:column="40">(<argument><expr><name><name pos:line="4930" pos:column="41">pC<pos:position pos:line="4930" pos:column="43"/></name><operator pos:line="4930" pos:column="43">-&gt;<pos:position pos:line="4930" pos:column="48"/></operator><name pos:line="4930" pos:column="45">uc<pos:position pos:line="4930" pos:column="47"/></name><operator pos:line="4930" pos:column="47">.<pos:position pos:line="4930" pos:column="48"/></operator><name pos:line="4930" pos:column="48">pCursor<pos:position pos:line="4930" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="4930" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4930" pos:column="57"/></expr_stmt>
    <if pos:line="4931" pos:column="5">if<condition pos:line="4931" pos:column="7">( <expr><name pos:line="4931" pos:column="9">rc<pos:position pos:line="4931" pos:column="11"/></name></expr> )<pos:position pos:line="4931" pos:column="13"/></condition><then pos:line="4931" pos:column="13"> <block type="pseudo"><goto pos:line="4931" pos:column="14">goto <name pos:line="4931" pos:column="19">abort_due_to_error<pos:position pos:line="4931" pos:column="37"/></name>;<pos:position pos:line="4931" pos:column="38"/></goto></block></then></if>
  }<pos:position pos:line="4932" pos:column="4"/></block></else></if>
  <break pos:line="4933" pos:column="3">break;<pos:position pos:line="4933" pos:column="9"/></break>
}<pos:position pos:line="4934" pos:column="2"/></block>

<comment type="block" pos:line="4936" pos:column="1">/* Opcode: CreateBtree P1 P2 P3 * *
** Synopsis: r[P2]=root iDb=P1 flags=P3
**
** Allocate a new b-tree in the main database file if P1==0 or in the
** TEMP database file if P1==1 or in an attached database if
** P1&gt;1.  The P3 argument must be 1 (BTREE_INTKEY) for a rowid table
** it must be 2 (BTREE_BLOBKEY) for a index or WITHOUT ROWID table.
** The root page number of the new b-tree is stored in register P2.
*/</comment>
<case pos:line="4945" pos:column="1">case <expr><name pos:line="4945" pos:column="6">OP_CreateBtree<pos:position pos:line="4945" pos:column="20"/></name></expr>:<pos:position pos:line="4945" pos:column="21"/></case> <block pos:line="4945" pos:column="22">{          <comment type="block" pos:line="4945" pos:column="33">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="4946" pos:column="3">int<pos:position pos:line="4946" pos:column="6"/></name></type> <name pos:line="4946" pos:column="7">pgno<pos:position pos:line="4946" pos:column="11"/></name></decl>;<pos:position pos:line="4946" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4947" pos:column="3">Db<pos:position pos:line="4947" pos:column="5"/></name> <modifier pos:line="4947" pos:column="6">*<pos:position pos:line="4947" pos:column="7"/></modifier></type><name pos:line="4947" pos:column="7">pDb<pos:position pos:line="4947" pos:column="10"/></name></decl>;<pos:position pos:line="4947" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4949" pos:column="3">pOut<pos:position pos:line="4949" pos:column="7"/></name> <operator pos:line="4949" pos:column="8">=<pos:position pos:line="4949" pos:column="9"/></operator> <call><name pos:line="4949" pos:column="10">out2Prerelease<pos:position pos:line="4949" pos:column="24"/></name><argument_list pos:line="4949" pos:column="24">(<argument><expr><name pos:line="4949" pos:column="25">p<pos:position pos:line="4949" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="4949" pos:column="28">pOp<pos:position pos:line="4949" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4949" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4949" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4950" pos:column="3">pgno<pos:position pos:line="4950" pos:column="7"/></name> <operator pos:line="4950" pos:column="8">=<pos:position pos:line="4950" pos:column="9"/></operator> <literal type="number" pos:line="4950" pos:column="10">0<pos:position pos:line="4950" pos:column="11"/></literal></expr>;<pos:position pos:line="4950" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4951" pos:column="3">assert<pos:position pos:line="4951" pos:column="9"/></name><argument_list pos:line="4951" pos:column="9">( <argument><expr><name><name pos:line="4951" pos:column="11">pOp<pos:position pos:line="4951" pos:column="14"/></name><operator pos:line="4951" pos:column="14">-&gt;<pos:position pos:line="4951" pos:column="19"/></operator><name pos:line="4951" pos:column="16">p3<pos:position pos:line="4951" pos:column="18"/></name></name><operator pos:line="4951" pos:column="18">==<pos:position pos:line="4951" pos:column="20"/></operator><name pos:line="4951" pos:column="20">BTREE_INTKEY<pos:position pos:line="4951" pos:column="32"/></name> <operator pos:line="4951" pos:column="33">||<pos:position pos:line="4951" pos:column="35"/></operator> <name><name pos:line="4951" pos:column="36">pOp<pos:position pos:line="4951" pos:column="39"/></name><operator pos:line="4951" pos:column="39">-&gt;<pos:position pos:line="4951" pos:column="44"/></operator><name pos:line="4951" pos:column="41">p3<pos:position pos:line="4951" pos:column="43"/></name></name><operator pos:line="4951" pos:column="43">==<pos:position pos:line="4951" pos:column="45"/></operator><name pos:line="4951" pos:column="45">BTREE_BLOBKEY<pos:position pos:line="4951" pos:column="58"/></name></expr></argument> )<pos:position pos:line="4951" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="4951" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4952" pos:column="3">assert<pos:position pos:line="4952" pos:column="9"/></name><argument_list pos:line="4952" pos:column="9">( <argument><expr><name><name pos:line="4952" pos:column="11">pOp<pos:position pos:line="4952" pos:column="14"/></name><operator pos:line="4952" pos:column="14">-&gt;<pos:position pos:line="4952" pos:column="19"/></operator><name pos:line="4952" pos:column="16">p1<pos:position pos:line="4952" pos:column="18"/></name></name><operator pos:line="4952" pos:column="18">&gt;=<pos:position pos:line="4952" pos:column="23"/></operator><literal type="number" pos:line="4952" pos:column="20">0<pos:position pos:line="4952" pos:column="21"/></literal> <operator pos:line="4952" pos:column="22">&amp;&amp;<pos:position pos:line="4952" pos:column="32"/></operator> <name><name pos:line="4952" pos:column="25">pOp<pos:position pos:line="4952" pos:column="28"/></name><operator pos:line="4952" pos:column="28">-&gt;<pos:position pos:line="4952" pos:column="33"/></operator><name pos:line="4952" pos:column="30">p1<pos:position pos:line="4952" pos:column="32"/></name></name><operator pos:line="4952" pos:column="32">&lt;<pos:position pos:line="4952" pos:column="36"/></operator><name><name pos:line="4952" pos:column="33">db<pos:position pos:line="4952" pos:column="35"/></name><operator pos:line="4952" pos:column="35">-&gt;<pos:position pos:line="4952" pos:column="40"/></operator><name pos:line="4952" pos:column="37">nDb<pos:position pos:line="4952" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4952" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4952" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4953" pos:column="3">assert<pos:position pos:line="4953" pos:column="9"/></name><argument_list pos:line="4953" pos:column="9">( <argument><expr><call><name pos:line="4953" pos:column="11">DbMaskTest<pos:position pos:line="4953" pos:column="21"/></name><argument_list pos:line="4953" pos:column="21">(<argument><expr><name><name pos:line="4953" pos:column="22">p<pos:position pos:line="4953" pos:column="23"/></name><operator pos:line="4953" pos:column="23">-&gt;<pos:position pos:line="4953" pos:column="28"/></operator><name pos:line="4953" pos:column="25">btreeMask<pos:position pos:line="4953" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4953" pos:column="36">pOp<pos:position pos:line="4953" pos:column="39"/></name><operator pos:line="4953" pos:column="39">-&gt;<pos:position pos:line="4953" pos:column="44"/></operator><name pos:line="4953" pos:column="41">p1<pos:position pos:line="4953" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="4953" pos:column="44"/></argument_list></call></expr></argument> )<pos:position pos:line="4953" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4953" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4954" pos:column="3">assert<pos:position pos:line="4954" pos:column="9"/></name><argument_list pos:line="4954" pos:column="9">( <argument><expr><name><name pos:line="4954" pos:column="11">p<pos:position pos:line="4954" pos:column="12"/></name><operator pos:line="4954" pos:column="12">-&gt;<pos:position pos:line="4954" pos:column="17"/></operator><name pos:line="4954" pos:column="14">readOnly<pos:position pos:line="4954" pos:column="22"/></name></name><operator pos:line="4954" pos:column="22">==<pos:position pos:line="4954" pos:column="24"/></operator><literal type="number" pos:line="4954" pos:column="24">0<pos:position pos:line="4954" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="4954" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4954" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4955" pos:column="3">pDb<pos:position pos:line="4955" pos:column="6"/></name> <operator pos:line="4955" pos:column="7">=<pos:position pos:line="4955" pos:column="8"/></operator> <operator pos:line="4955" pos:column="9">&amp;<pos:position pos:line="4955" pos:column="14"/></operator><name><name pos:line="4955" pos:column="10">db<pos:position pos:line="4955" pos:column="12"/></name><operator pos:line="4955" pos:column="12">-&gt;<pos:position pos:line="4955" pos:column="17"/></operator><name pos:line="4955" pos:column="14">aDb<pos:position pos:line="4955" pos:column="17"/></name><index pos:line="4955" pos:column="17">[<expr><name><name pos:line="4955" pos:column="18">pOp<pos:position pos:line="4955" pos:column="21"/></name><operator pos:line="4955" pos:column="21">-&gt;<pos:position pos:line="4955" pos:column="26"/></operator><name pos:line="4955" pos:column="23">p1<pos:position pos:line="4955" pos:column="25"/></name></name></expr>]<pos:position pos:line="4955" pos:column="26"/></index></name></expr>;<pos:position pos:line="4955" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4956" pos:column="3">assert<pos:position pos:line="4956" pos:column="9"/></name><argument_list pos:line="4956" pos:column="9">( <argument><expr><name><name pos:line="4956" pos:column="11">pDb<pos:position pos:line="4956" pos:column="14"/></name><operator pos:line="4956" pos:column="14">-&gt;<pos:position pos:line="4956" pos:column="19"/></operator><name pos:line="4956" pos:column="16">pBt<pos:position pos:line="4956" pos:column="19"/></name></name><operator pos:line="4956" pos:column="19">!=<pos:position pos:line="4956" pos:column="21"/></operator><literal type="number" pos:line="4956" pos:column="21">0<pos:position pos:line="4956" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="4956" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4956" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4957" pos:column="3">rc<pos:position pos:line="4957" pos:column="5"/></name> <operator pos:line="4957" pos:column="6">=<pos:position pos:line="4957" pos:column="7"/></operator> <call><name pos:line="4957" pos:column="8">sqlite3BtreeCreateTable<pos:position pos:line="4957" pos:column="31"/></name><argument_list pos:line="4957" pos:column="31">(<argument><expr><name><name pos:line="4957" pos:column="32">pDb<pos:position pos:line="4957" pos:column="35"/></name><operator pos:line="4957" pos:column="35">-&gt;<pos:position pos:line="4957" pos:column="40"/></operator><name pos:line="4957" pos:column="37">pBt<pos:position pos:line="4957" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="4957" pos:column="42">&amp;<pos:position pos:line="4957" pos:column="47"/></operator><name pos:line="4957" pos:column="43">pgno<pos:position pos:line="4957" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="4957" pos:column="49">pOp<pos:position pos:line="4957" pos:column="52"/></name><operator pos:line="4957" pos:column="52">-&gt;<pos:position pos:line="4957" pos:column="57"/></operator><name pos:line="4957" pos:column="54">p3<pos:position pos:line="4957" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="4957" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4957" pos:column="58"/></expr_stmt>
  <if pos:line="4958" pos:column="3">if<condition pos:line="4958" pos:column="5">( <expr><name pos:line="4958" pos:column="7">rc<pos:position pos:line="4958" pos:column="9"/></name></expr> )<pos:position pos:line="4958" pos:column="11"/></condition><then pos:line="4958" pos:column="11"> <block type="pseudo"><goto pos:line="4958" pos:column="12">goto <name pos:line="4958" pos:column="17">abort_due_to_error<pos:position pos:line="4958" pos:column="35"/></name>;<pos:position pos:line="4958" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="4959" pos:column="3">pOut<pos:position pos:line="4959" pos:column="7"/></name><operator pos:line="4959" pos:column="7">-&gt;<pos:position pos:line="4959" pos:column="12"/></operator><name pos:line="4959" pos:column="9">u<pos:position pos:line="4959" pos:column="10"/></name><operator pos:line="4959" pos:column="10">.<pos:position pos:line="4959" pos:column="11"/></operator><name pos:line="4959" pos:column="11">i<pos:position pos:line="4959" pos:column="12"/></name></name> <operator pos:line="4959" pos:column="13">=<pos:position pos:line="4959" pos:column="14"/></operator> <name pos:line="4959" pos:column="15">pgno<pos:position pos:line="4959" pos:column="19"/></name></expr>;<pos:position pos:line="4959" pos:column="20"/></expr_stmt>
  <break pos:line="4960" pos:column="3">break;<pos:position pos:line="4960" pos:column="9"/></break>
}<pos:position pos:line="4961" pos:column="2"/></block>

<comment type="block" pos:line="4963" pos:column="1">/* Opcode: SqlExec * * * P4 *
**
** Run the SQL statement or statements specified in the P4 string.
*/</comment>
<case pos:line="4967" pos:column="1">case <expr><name pos:line="4967" pos:column="6">OP_SqlExec<pos:position pos:line="4967" pos:column="16"/></name></expr>:<pos:position pos:line="4967" pos:column="17"/></case> <block pos:line="4967" pos:column="18">{
  <expr_stmt><expr><name><name pos:line="4968" pos:column="3">db<pos:position pos:line="4968" pos:column="5"/></name><operator pos:line="4968" pos:column="5">-&gt;<pos:position pos:line="4968" pos:column="10"/></operator><name pos:line="4968" pos:column="7">nSqlExec<pos:position pos:line="4968" pos:column="15"/></name></name><operator pos:line="4968" pos:column="15">++<pos:position pos:line="4968" pos:column="17"/></operator></expr>;<pos:position pos:line="4968" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4969" pos:column="3">rc<pos:position pos:line="4969" pos:column="5"/></name> <operator pos:line="4969" pos:column="6">=<pos:position pos:line="4969" pos:column="7"/></operator> <call><name pos:line="4969" pos:column="8">sqlite3_exec<pos:position pos:line="4969" pos:column="20"/></name><argument_list pos:line="4969" pos:column="20">(<argument><expr><name pos:line="4969" pos:column="21">db<pos:position pos:line="4969" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="4969" pos:column="25">pOp<pos:position pos:line="4969" pos:column="28"/></name><operator pos:line="4969" pos:column="28">-&gt;<pos:position pos:line="4969" pos:column="33"/></operator><name pos:line="4969" pos:column="30">p4<pos:position pos:line="4969" pos:column="32"/></name><operator pos:line="4969" pos:column="32">.<pos:position pos:line="4969" pos:column="33"/></operator><name pos:line="4969" pos:column="33">z<pos:position pos:line="4969" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="4969" pos:column="36">0<pos:position pos:line="4969" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4969" pos:column="39">0<pos:position pos:line="4969" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4969" pos:column="42">0<pos:position pos:line="4969" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="4969" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4969" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4970" pos:column="3">db<pos:position pos:line="4970" pos:column="5"/></name><operator pos:line="4970" pos:column="5">-&gt;<pos:position pos:line="4970" pos:column="10"/></operator><name pos:line="4970" pos:column="7">nSqlExec<pos:position pos:line="4970" pos:column="15"/></name></name><operator pos:line="4970" pos:column="15">--<pos:position pos:line="4970" pos:column="17"/></operator></expr>;<pos:position pos:line="4970" pos:column="18"/></expr_stmt>
  <if pos:line="4971" pos:column="3">if<condition pos:line="4971" pos:column="5">( <expr><name pos:line="4971" pos:column="7">rc<pos:position pos:line="4971" pos:column="9"/></name></expr> )<pos:position pos:line="4971" pos:column="11"/></condition><then pos:line="4971" pos:column="11"> <block type="pseudo"><goto pos:line="4971" pos:column="12">goto <name pos:line="4971" pos:column="17">abort_due_to_error<pos:position pos:line="4971" pos:column="35"/></name>;<pos:position pos:line="4971" pos:column="36"/></goto></block></then></if>
  <break pos:line="4972" pos:column="3">break;<pos:position pos:line="4972" pos:column="9"/></break>
}<pos:position pos:line="4973" pos:column="2"/></block>

<comment type="block" pos:line="4975" pos:column="1">/* Opcode: ParseSchema P1 * * P4 *
**
** Read and parse all entries from the SQLITE_MASTER table of database P1
** that match the WHERE clause P4. 
**
** This opcode invokes the parser to create a new virtual machine,
** then runs the new virtual machine.  It is thus a re-entrant opcode.
*/</comment>
<case pos:line="4983" pos:column="1">case <expr><name pos:line="4983" pos:column="6">OP_ParseSchema<pos:position pos:line="4983" pos:column="20"/></name></expr>:<pos:position pos:line="4983" pos:column="21"/></case> <block pos:line="4983" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="4984" pos:column="3">int<pos:position pos:line="4984" pos:column="6"/></name></type> <name pos:line="4984" pos:column="7">iDb<pos:position pos:line="4984" pos:column="10"/></name></decl>;<pos:position pos:line="4984" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4985" pos:column="3">const<pos:position pos:line="4985" pos:column="8"/></specifier> <name pos:line="4985" pos:column="9">char<pos:position pos:line="4985" pos:column="13"/></name> <modifier pos:line="4985" pos:column="14">*<pos:position pos:line="4985" pos:column="15"/></modifier></type><name pos:line="4985" pos:column="15">zMaster<pos:position pos:line="4985" pos:column="22"/></name></decl>;<pos:position pos:line="4985" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4986" pos:column="3">char<pos:position pos:line="4986" pos:column="7"/></name> <modifier pos:line="4986" pos:column="8">*<pos:position pos:line="4986" pos:column="9"/></modifier></type><name pos:line="4986" pos:column="9">zSql<pos:position pos:line="4986" pos:column="13"/></name></decl>;<pos:position pos:line="4986" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4987" pos:column="3">InitData<pos:position pos:line="4987" pos:column="11"/></name></type> <name pos:line="4987" pos:column="12">initData<pos:position pos:line="4987" pos:column="20"/></name></decl>;<pos:position pos:line="4987" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="4989" pos:column="3">/* Any prepared statement that invokes this opcode will hold mutexes
  ** on every btree.  This is a prerequisite for invoking 
  ** sqlite3InitCallback().
  */</comment>
<cpp:ifdef pos:line="4993" pos:column="1">#<cpp:directive pos:line="4993" pos:column="2">ifdef<pos:position pos:line="4993" pos:column="7"/></cpp:directive> <name pos:line="4993" pos:column="8">SQLITE_DEBUG<pos:position pos:line="4993" pos:column="20"/></name></cpp:ifdef>
  <for pos:line="4994" pos:column="3">for<control pos:line="4994" pos:column="6">(<init><expr><name pos:line="4994" pos:column="7">iDb<pos:position pos:line="4994" pos:column="10"/></name><operator pos:line="4994" pos:column="10">=<pos:position pos:line="4994" pos:column="11"/></operator><literal type="number" pos:line="4994" pos:column="11">0<pos:position pos:line="4994" pos:column="12"/></literal></expr>;<pos:position pos:line="4994" pos:column="13"/></init> <condition><expr><name pos:line="4994" pos:column="14">iDb<pos:position pos:line="4994" pos:column="17"/></name><operator pos:line="4994" pos:column="17">&lt;<pos:position pos:line="4994" pos:column="21"/></operator><name><name pos:line="4994" pos:column="18">db<pos:position pos:line="4994" pos:column="20"/></name><operator pos:line="4994" pos:column="20">-&gt;<pos:position pos:line="4994" pos:column="25"/></operator><name pos:line="4994" pos:column="22">nDb<pos:position pos:line="4994" pos:column="25"/></name></name></expr>;<pos:position pos:line="4994" pos:column="26"/></condition> <incr><expr><name pos:line="4994" pos:column="27">iDb<pos:position pos:line="4994" pos:column="30"/></name><operator pos:line="4994" pos:column="30">++<pos:position pos:line="4994" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="4994" pos:column="33"/></control><block pos:line="4994" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="4995" pos:column="5">assert<pos:position pos:line="4995" pos:column="11"/></name><argument_list pos:line="4995" pos:column="11">( <argument><expr><name pos:line="4995" pos:column="13">iDb<pos:position pos:line="4995" pos:column="16"/></name><operator pos:line="4995" pos:column="16">==<pos:position pos:line="4995" pos:column="18"/></operator><literal type="number" pos:line="4995" pos:column="18">1<pos:position pos:line="4995" pos:column="19"/></literal> <operator pos:line="4995" pos:column="20">||<pos:position pos:line="4995" pos:column="22"/></operator> <call><name pos:line="4995" pos:column="23">sqlite3BtreeHoldsMutex<pos:position pos:line="4995" pos:column="45"/></name><argument_list pos:line="4995" pos:column="45">(<argument><expr><name><name pos:line="4995" pos:column="46">db<pos:position pos:line="4995" pos:column="48"/></name><operator pos:line="4995" pos:column="48">-&gt;<pos:position pos:line="4995" pos:column="53"/></operator><name pos:line="4995" pos:column="50">aDb<pos:position pos:line="4995" pos:column="53"/></name><index pos:line="4995" pos:column="53">[<expr><name pos:line="4995" pos:column="54">iDb<pos:position pos:line="4995" pos:column="57"/></name></expr>]<pos:position pos:line="4995" pos:column="58"/></index></name><operator pos:line="4995" pos:column="58">.<pos:position pos:line="4995" pos:column="59"/></operator><name pos:line="4995" pos:column="59">pBt<pos:position pos:line="4995" pos:column="62"/></name></expr></argument>)<pos:position pos:line="4995" pos:column="63"/></argument_list></call></expr></argument> )<pos:position pos:line="4995" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="4995" pos:column="66"/></expr_stmt>
  }<pos:position pos:line="4996" pos:column="4"/></block></for>
<cpp:endif pos:line="4997" pos:column="1">#<cpp:directive pos:line="4997" pos:column="2">endif<pos:position pos:line="4997" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="4999" pos:column="3">iDb<pos:position pos:line="4999" pos:column="6"/></name> <operator pos:line="4999" pos:column="7">=<pos:position pos:line="4999" pos:column="8"/></operator> <name><name pos:line="4999" pos:column="9">pOp<pos:position pos:line="4999" pos:column="12"/></name><operator pos:line="4999" pos:column="12">-&gt;<pos:position pos:line="4999" pos:column="17"/></operator><name pos:line="4999" pos:column="14">p1<pos:position pos:line="4999" pos:column="16"/></name></name></expr>;<pos:position pos:line="4999" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5000" pos:column="3">assert<pos:position pos:line="5000" pos:column="9"/></name><argument_list pos:line="5000" pos:column="9">( <argument><expr><name pos:line="5000" pos:column="11">iDb<pos:position pos:line="5000" pos:column="14"/></name><operator pos:line="5000" pos:column="14">&gt;=<pos:position pos:line="5000" pos:column="19"/></operator><literal type="number" pos:line="5000" pos:column="16">0<pos:position pos:line="5000" pos:column="17"/></literal> <operator pos:line="5000" pos:column="18">&amp;&amp;<pos:position pos:line="5000" pos:column="28"/></operator> <name pos:line="5000" pos:column="21">iDb<pos:position pos:line="5000" pos:column="24"/></name><operator pos:line="5000" pos:column="24">&lt;<pos:position pos:line="5000" pos:column="28"/></operator><name><name pos:line="5000" pos:column="25">db<pos:position pos:line="5000" pos:column="27"/></name><operator pos:line="5000" pos:column="27">-&gt;<pos:position pos:line="5000" pos:column="32"/></operator><name pos:line="5000" pos:column="29">nDb<pos:position pos:line="5000" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="5000" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5000" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5001" pos:column="3">assert<pos:position pos:line="5001" pos:column="9"/></name><argument_list pos:line="5001" pos:column="9">( <argument><expr><call><name pos:line="5001" pos:column="11">DbHasProperty<pos:position pos:line="5001" pos:column="24"/></name><argument_list pos:line="5001" pos:column="24">(<argument><expr><name pos:line="5001" pos:column="25">db<pos:position pos:line="5001" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="5001" pos:column="29">iDb<pos:position pos:line="5001" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="5001" pos:column="34">DB_SchemaLoaded<pos:position pos:line="5001" pos:column="49"/></name></expr></argument>)<pos:position pos:line="5001" pos:column="50"/></argument_list></call></expr></argument> )<pos:position pos:line="5001" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="5001" pos:column="53"/></expr_stmt>
  <comment type="block" pos:line="5002" pos:column="3">/* Used to be a conditional */</comment> <block pos:line="5002" pos:column="34">{
    <expr_stmt><expr><name pos:line="5003" pos:column="5">zMaster<pos:position pos:line="5003" pos:column="12"/></name> <operator pos:line="5003" pos:column="13">=<pos:position pos:line="5003" pos:column="14"/></operator> <name pos:line="5003" pos:column="15">MASTER_NAME<pos:position pos:line="5003" pos:column="26"/></name></expr>;<pos:position pos:line="5003" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5004" pos:column="5">initData<pos:position pos:line="5004" pos:column="13"/></name><operator pos:line="5004" pos:column="13">.<pos:position pos:line="5004" pos:column="14"/></operator><name pos:line="5004" pos:column="14">db<pos:position pos:line="5004" pos:column="16"/></name></name> <operator pos:line="5004" pos:column="17">=<pos:position pos:line="5004" pos:column="18"/></operator> <name pos:line="5004" pos:column="19">db<pos:position pos:line="5004" pos:column="21"/></name></expr>;<pos:position pos:line="5004" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5005" pos:column="5">initData<pos:position pos:line="5005" pos:column="13"/></name><operator pos:line="5005" pos:column="13">.<pos:position pos:line="5005" pos:column="14"/></operator><name pos:line="5005" pos:column="14">iDb<pos:position pos:line="5005" pos:column="17"/></name></name> <operator pos:line="5005" pos:column="18">=<pos:position pos:line="5005" pos:column="19"/></operator> <name><name pos:line="5005" pos:column="20">pOp<pos:position pos:line="5005" pos:column="23"/></name><operator pos:line="5005" pos:column="23">-&gt;<pos:position pos:line="5005" pos:column="28"/></operator><name pos:line="5005" pos:column="25">p1<pos:position pos:line="5005" pos:column="27"/></name></name></expr>;<pos:position pos:line="5005" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5006" pos:column="5">initData<pos:position pos:line="5006" pos:column="13"/></name><operator pos:line="5006" pos:column="13">.<pos:position pos:line="5006" pos:column="14"/></operator><name pos:line="5006" pos:column="14">pzErrMsg<pos:position pos:line="5006" pos:column="22"/></name></name> <operator pos:line="5006" pos:column="23">=<pos:position pos:line="5006" pos:column="24"/></operator> <operator pos:line="5006" pos:column="25">&amp;<pos:position pos:line="5006" pos:column="30"/></operator><name><name pos:line="5006" pos:column="26">p<pos:position pos:line="5006" pos:column="27"/></name><operator pos:line="5006" pos:column="27">-&gt;<pos:position pos:line="5006" pos:column="32"/></operator><name pos:line="5006" pos:column="29">zErrMsg<pos:position pos:line="5006" pos:column="36"/></name></name></expr>;<pos:position pos:line="5006" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5007" pos:column="5">zSql<pos:position pos:line="5007" pos:column="9"/></name> <operator pos:line="5007" pos:column="10">=<pos:position pos:line="5007" pos:column="11"/></operator> <call><name pos:line="5007" pos:column="12">sqlite3MPrintf<pos:position pos:line="5007" pos:column="26"/></name><argument_list pos:line="5007" pos:column="26">(<argument><expr><name pos:line="5007" pos:column="27">db<pos:position pos:line="5007" pos:column="29"/></name></expr></argument>,
       <argument><expr><literal type="string" pos:line="5008" pos:column="8">"SELECT name, rootpage, sql FROM '%q'.%s WHERE %s ORDER BY rowid"<pos:position pos:line="5008" pos:column="73"/></literal></expr></argument>,
       <argument><expr><name><name pos:line="5009" pos:column="8">db<pos:position pos:line="5009" pos:column="10"/></name><operator pos:line="5009" pos:column="10">-&gt;<pos:position pos:line="5009" pos:column="15"/></operator><name pos:line="5009" pos:column="12">aDb<pos:position pos:line="5009" pos:column="15"/></name><index pos:line="5009" pos:column="15">[<expr><name pos:line="5009" pos:column="16">iDb<pos:position pos:line="5009" pos:column="19"/></name></expr>]<pos:position pos:line="5009" pos:column="20"/></index></name><operator pos:line="5009" pos:column="20">.<pos:position pos:line="5009" pos:column="21"/></operator><name pos:line="5009" pos:column="21">zDbSName<pos:position pos:line="5009" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="5009" pos:column="31">zMaster<pos:position pos:line="5009" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="5009" pos:column="40">pOp<pos:position pos:line="5009" pos:column="43"/></name><operator pos:line="5009" pos:column="43">-&gt;<pos:position pos:line="5009" pos:column="48"/></operator><name pos:line="5009" pos:column="45">p4<pos:position pos:line="5009" pos:column="47"/></name><operator pos:line="5009" pos:column="47">.<pos:position pos:line="5009" pos:column="48"/></operator><name pos:line="5009" pos:column="48">z<pos:position pos:line="5009" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="5009" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5009" pos:column="51"/></expr_stmt>
    <if pos:line="5010" pos:column="5">if<condition pos:line="5010" pos:column="7">( <expr><name pos:line="5010" pos:column="9">zSql<pos:position pos:line="5010" pos:column="13"/></name><operator pos:line="5010" pos:column="13">==<pos:position pos:line="5010" pos:column="15"/></operator><literal type="number" pos:line="5010" pos:column="15">0<pos:position pos:line="5010" pos:column="16"/></literal></expr> )<pos:position pos:line="5010" pos:column="18"/></condition><then><block pos:line="5010" pos:column="18">{
      <expr_stmt><expr><name pos:line="5011" pos:column="7">rc<pos:position pos:line="5011" pos:column="9"/></name> <operator pos:line="5011" pos:column="10">=<pos:position pos:line="5011" pos:column="11"/></operator> <name pos:line="5011" pos:column="12">SQLITE_NOMEM_BKPT<pos:position pos:line="5011" pos:column="29"/></name></expr>;<pos:position pos:line="5011" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="5012" pos:column="6"/></block></then><else pos:line="5012" pos:column="6">else<block pos:line="5012" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="5013" pos:column="7">assert<pos:position pos:line="5013" pos:column="13"/></name><argument_list pos:line="5013" pos:column="13">( <argument><expr><name><name pos:line="5013" pos:column="15">db<pos:position pos:line="5013" pos:column="17"/></name><operator pos:line="5013" pos:column="17">-&gt;<pos:position pos:line="5013" pos:column="22"/></operator><name pos:line="5013" pos:column="19">init<pos:position pos:line="5013" pos:column="23"/></name><operator pos:line="5013" pos:column="23">.<pos:position pos:line="5013" pos:column="24"/></operator><name pos:line="5013" pos:column="24">busy<pos:position pos:line="5013" pos:column="28"/></name></name><operator pos:line="5013" pos:column="28">==<pos:position pos:line="5013" pos:column="30"/></operator><literal type="number" pos:line="5013" pos:column="30">0<pos:position pos:line="5013" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="5013" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5013" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="5014" pos:column="7">db<pos:position pos:line="5014" pos:column="9"/></name><operator pos:line="5014" pos:column="9">-&gt;<pos:position pos:line="5014" pos:column="14"/></operator><name pos:line="5014" pos:column="11">init<pos:position pos:line="5014" pos:column="15"/></name><operator pos:line="5014" pos:column="15">.<pos:position pos:line="5014" pos:column="16"/></operator><name pos:line="5014" pos:column="16">busy<pos:position pos:line="5014" pos:column="20"/></name></name> <operator pos:line="5014" pos:column="21">=<pos:position pos:line="5014" pos:column="22"/></operator> <literal type="number" pos:line="5014" pos:column="23">1<pos:position pos:line="5014" pos:column="24"/></literal></expr>;<pos:position pos:line="5014" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="5015" pos:column="7">initData<pos:position pos:line="5015" pos:column="15"/></name><operator pos:line="5015" pos:column="15">.<pos:position pos:line="5015" pos:column="16"/></operator><name pos:line="5015" pos:column="16">rc<pos:position pos:line="5015" pos:column="18"/></name></name> <operator pos:line="5015" pos:column="19">=<pos:position pos:line="5015" pos:column="20"/></operator> <name pos:line="5015" pos:column="21">SQLITE_OK<pos:position pos:line="5015" pos:column="30"/></name></expr>;<pos:position pos:line="5015" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="5016" pos:column="7">assert<pos:position pos:line="5016" pos:column="13"/></name><argument_list pos:line="5016" pos:column="13">( <argument><expr><operator pos:line="5016" pos:column="15">!<pos:position pos:line="5016" pos:column="16"/></operator><name><name pos:line="5016" pos:column="16">db<pos:position pos:line="5016" pos:column="18"/></name><operator pos:line="5016" pos:column="18">-&gt;<pos:position pos:line="5016" pos:column="23"/></operator><name pos:line="5016" pos:column="20">mallocFailed<pos:position pos:line="5016" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="5016" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5016" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="5017" pos:column="7">rc<pos:position pos:line="5017" pos:column="9"/></name> <operator pos:line="5017" pos:column="10">=<pos:position pos:line="5017" pos:column="11"/></operator> <call><name pos:line="5017" pos:column="12">sqlite3_exec<pos:position pos:line="5017" pos:column="24"/></name><argument_list pos:line="5017" pos:column="24">(<argument><expr><name pos:line="5017" pos:column="25">db<pos:position pos:line="5017" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="5017" pos:column="29">zSql<pos:position pos:line="5017" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="5017" pos:column="35">sqlite3InitCallback<pos:position pos:line="5017" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="5017" pos:column="56">&amp;<pos:position pos:line="5017" pos:column="61"/></operator><name pos:line="5017" pos:column="57">initData<pos:position pos:line="5017" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5017" pos:column="67">0<pos:position pos:line="5017" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="5017" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="5017" pos:column="70"/></expr_stmt>
      <if pos:line="5018" pos:column="7">if<condition pos:line="5018" pos:column="9">( <expr><name pos:line="5018" pos:column="11">rc<pos:position pos:line="5018" pos:column="13"/></name><operator pos:line="5018" pos:column="13">==<pos:position pos:line="5018" pos:column="15"/></operator><name pos:line="5018" pos:column="15">SQLITE_OK<pos:position pos:line="5018" pos:column="24"/></name></expr> )<pos:position pos:line="5018" pos:column="26"/></condition><then pos:line="5018" pos:column="26"> <block type="pseudo"><expr_stmt><expr><name pos:line="5018" pos:column="27">rc<pos:position pos:line="5018" pos:column="29"/></name> <operator pos:line="5018" pos:column="30">=<pos:position pos:line="5018" pos:column="31"/></operator> <name><name pos:line="5018" pos:column="32">initData<pos:position pos:line="5018" pos:column="40"/></name><operator pos:line="5018" pos:column="40">.<pos:position pos:line="5018" pos:column="41"/></operator><name pos:line="5018" pos:column="41">rc<pos:position pos:line="5018" pos:column="43"/></name></name></expr>;<pos:position pos:line="5018" pos:column="44"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="5019" pos:column="7">sqlite3DbFreeNN<pos:position pos:line="5019" pos:column="22"/></name><argument_list pos:line="5019" pos:column="22">(<argument><expr><name pos:line="5019" pos:column="23">db<pos:position pos:line="5019" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="5019" pos:column="27">zSql<pos:position pos:line="5019" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5019" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5019" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="5020" pos:column="7">db<pos:position pos:line="5020" pos:column="9"/></name><operator pos:line="5020" pos:column="9">-&gt;<pos:position pos:line="5020" pos:column="14"/></operator><name pos:line="5020" pos:column="11">init<pos:position pos:line="5020" pos:column="15"/></name><operator pos:line="5020" pos:column="15">.<pos:position pos:line="5020" pos:column="16"/></operator><name pos:line="5020" pos:column="16">busy<pos:position pos:line="5020" pos:column="20"/></name></name> <operator pos:line="5020" pos:column="21">=<pos:position pos:line="5020" pos:column="22"/></operator> <literal type="number" pos:line="5020" pos:column="23">0<pos:position pos:line="5020" pos:column="24"/></literal></expr>;<pos:position pos:line="5020" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="5021" pos:column="6"/></block></else></if>
  }<pos:position pos:line="5022" pos:column="4"/></block>
  <if pos:line="5023" pos:column="3">if<condition pos:line="5023" pos:column="5">( <expr><name pos:line="5023" pos:column="7">rc<pos:position pos:line="5023" pos:column="9"/></name></expr> )<pos:position pos:line="5023" pos:column="11"/></condition><then><block pos:line="5023" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="5024" pos:column="5">sqlite3ResetAllSchemasOfConnection<pos:position pos:line="5024" pos:column="39"/></name><argument_list pos:line="5024" pos:column="39">(<argument><expr><name pos:line="5024" pos:column="40">db<pos:position pos:line="5024" pos:column="42"/></name></expr></argument>)<pos:position pos:line="5024" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="5024" pos:column="44"/></expr_stmt>
    <if pos:line="5025" pos:column="5">if<condition pos:line="5025" pos:column="7">( <expr><name pos:line="5025" pos:column="9">rc<pos:position pos:line="5025" pos:column="11"/></name><operator pos:line="5025" pos:column="11">==<pos:position pos:line="5025" pos:column="13"/></operator><name pos:line="5025" pos:column="13">SQLITE_NOMEM<pos:position pos:line="5025" pos:column="25"/></name></expr> )<pos:position pos:line="5025" pos:column="27"/></condition><then><block pos:line="5025" pos:column="27">{
      <goto pos:line="5026" pos:column="7">goto <name pos:line="5026" pos:column="12">no_mem<pos:position pos:line="5026" pos:column="18"/></name>;<pos:position pos:line="5026" pos:column="19"/></goto>
    }<pos:position pos:line="5027" pos:column="6"/></block></then></if>
    <goto pos:line="5028" pos:column="5">goto <name pos:line="5028" pos:column="10">abort_due_to_error<pos:position pos:line="5028" pos:column="28"/></name>;<pos:position pos:line="5028" pos:column="29"/></goto>
  }<pos:position pos:line="5029" pos:column="4"/></block></then></if>
  <break pos:line="5030" pos:column="3">break;<pos:position pos:line="5030" pos:column="9"/></break>  
}<pos:position pos:line="5031" pos:column="2"/></block>

<cpp:if pos:line="5033" pos:column="1">#<cpp:directive pos:line="5033" pos:column="2">if<pos:position pos:line="5033" pos:column="4"/></cpp:directive> <expr><operator pos:line="5033" pos:column="5">!<pos:position pos:line="5033" pos:column="6"/></operator><call><name pos:line="5033" pos:column="6">defined<pos:position pos:line="5033" pos:column="13"/></name><argument_list pos:line="5033" pos:column="13">(<argument><expr><name pos:line="5033" pos:column="14">SQLITE_OMIT_ANALYZE<pos:position pos:line="5033" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5033" pos:column="34"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="5034" pos:column="1">/* Opcode: LoadAnalysis P1 * * * *
**
** Read the sqlite_stat1 table for database P1 and load the content
** of that table into the internal index hash table.  This will cause
** the analysis to be used when preparing all subsequent queries.
*/</comment>
<case pos:line="5040" pos:column="1">case <expr><name pos:line="5040" pos:column="6">OP_LoadAnalysis<pos:position pos:line="5040" pos:column="21"/></name></expr>:<pos:position pos:line="5040" pos:column="22"/></case> <block pos:line="5040" pos:column="23">{
  <expr_stmt><expr><call><name pos:line="5041" pos:column="3">assert<pos:position pos:line="5041" pos:column="9"/></name><argument_list pos:line="5041" pos:column="9">( <argument><expr><name><name pos:line="5041" pos:column="11">pOp<pos:position pos:line="5041" pos:column="14"/></name><operator pos:line="5041" pos:column="14">-&gt;<pos:position pos:line="5041" pos:column="19"/></operator><name pos:line="5041" pos:column="16">p1<pos:position pos:line="5041" pos:column="18"/></name></name><operator pos:line="5041" pos:column="18">&gt;=<pos:position pos:line="5041" pos:column="23"/></operator><literal type="number" pos:line="5041" pos:column="20">0<pos:position pos:line="5041" pos:column="21"/></literal> <operator pos:line="5041" pos:column="22">&amp;&amp;<pos:position pos:line="5041" pos:column="32"/></operator> <name><name pos:line="5041" pos:column="25">pOp<pos:position pos:line="5041" pos:column="28"/></name><operator pos:line="5041" pos:column="28">-&gt;<pos:position pos:line="5041" pos:column="33"/></operator><name pos:line="5041" pos:column="30">p1<pos:position pos:line="5041" pos:column="32"/></name></name><operator pos:line="5041" pos:column="32">&lt;<pos:position pos:line="5041" pos:column="36"/></operator><name><name pos:line="5041" pos:column="33">db<pos:position pos:line="5041" pos:column="35"/></name><operator pos:line="5041" pos:column="35">-&gt;<pos:position pos:line="5041" pos:column="40"/></operator><name pos:line="5041" pos:column="37">nDb<pos:position pos:line="5041" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="5041" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5041" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5042" pos:column="3">rc<pos:position pos:line="5042" pos:column="5"/></name> <operator pos:line="5042" pos:column="6">=<pos:position pos:line="5042" pos:column="7"/></operator> <call><name pos:line="5042" pos:column="8">sqlite3AnalysisLoad<pos:position pos:line="5042" pos:column="27"/></name><argument_list pos:line="5042" pos:column="27">(<argument><expr><name pos:line="5042" pos:column="28">db<pos:position pos:line="5042" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="5042" pos:column="32">pOp<pos:position pos:line="5042" pos:column="35"/></name><operator pos:line="5042" pos:column="35">-&gt;<pos:position pos:line="5042" pos:column="40"/></operator><name pos:line="5042" pos:column="37">p1<pos:position pos:line="5042" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="5042" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5042" pos:column="41"/></expr_stmt>
  <if pos:line="5043" pos:column="3">if<condition pos:line="5043" pos:column="5">( <expr><name pos:line="5043" pos:column="7">rc<pos:position pos:line="5043" pos:column="9"/></name></expr> )<pos:position pos:line="5043" pos:column="11"/></condition><then pos:line="5043" pos:column="11"> <block type="pseudo"><goto pos:line="5043" pos:column="12">goto <name pos:line="5043" pos:column="17">abort_due_to_error<pos:position pos:line="5043" pos:column="35"/></name>;<pos:position pos:line="5043" pos:column="36"/></goto></block></then></if>
  <break pos:line="5044" pos:column="3">break;<pos:position pos:line="5044" pos:column="9"/></break>  
}<pos:position pos:line="5045" pos:column="2"/></block>
<cpp:endif pos:line="5046" pos:column="1">#<cpp:directive pos:line="5046" pos:column="2">endif<pos:position pos:line="5046" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5046" pos:column="8">/* !defined(SQLITE_OMIT_ANALYZE) */</comment>

<comment type="block" pos:line="5048" pos:column="1">/* Opcode: DropTable P1 * * P4 *
**
** Remove the internal (in-memory) data structures that describe
** the table named P4 in database P1.  This is called after a table
** is dropped from disk (using the Destroy opcode) in order to keep 
** the internal representation of the
** schema consistent with what is on disk.
*/</comment>
<case pos:line="5056" pos:column="1">case <expr><name pos:line="5056" pos:column="6">OP_DropTable<pos:position pos:line="5056" pos:column="18"/></name></expr>:<pos:position pos:line="5056" pos:column="19"/></case> <block pos:line="5056" pos:column="20">{
  <expr_stmt><expr><call><name pos:line="5057" pos:column="3">sqlite3UnlinkAndDeleteTable<pos:position pos:line="5057" pos:column="30"/></name><argument_list pos:line="5057" pos:column="30">(<argument><expr><name pos:line="5057" pos:column="31">db<pos:position pos:line="5057" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="5057" pos:column="35">pOp<pos:position pos:line="5057" pos:column="38"/></name><operator pos:line="5057" pos:column="38">-&gt;<pos:position pos:line="5057" pos:column="43"/></operator><name pos:line="5057" pos:column="40">p1<pos:position pos:line="5057" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5057" pos:column="44">pOp<pos:position pos:line="5057" pos:column="47"/></name><operator pos:line="5057" pos:column="47">-&gt;<pos:position pos:line="5057" pos:column="52"/></operator><name pos:line="5057" pos:column="49">p4<pos:position pos:line="5057" pos:column="51"/></name><operator pos:line="5057" pos:column="51">.<pos:position pos:line="5057" pos:column="52"/></operator><name pos:line="5057" pos:column="52">z<pos:position pos:line="5057" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="5057" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5057" pos:column="55"/></expr_stmt>
  <break pos:line="5058" pos:column="3">break;<pos:position pos:line="5058" pos:column="9"/></break>
}<pos:position pos:line="5059" pos:column="2"/></block>

<comment type="block" pos:line="5061" pos:column="1">/* Opcode: DropIndex P1 * * P4 *
**
** Remove the internal (in-memory) data structures that describe
** the index named P4 in database P1.  This is called after an index
** is dropped from disk (using the Destroy opcode)
** in order to keep the internal representation of the
** schema consistent with what is on disk.
*/</comment>
<case pos:line="5069" pos:column="1">case <expr><name pos:line="5069" pos:column="6">OP_DropIndex<pos:position pos:line="5069" pos:column="18"/></name></expr>:<pos:position pos:line="5069" pos:column="19"/></case> <block pos:line="5069" pos:column="20">{
  <expr_stmt><expr><call><name pos:line="5070" pos:column="3">sqlite3UnlinkAndDeleteIndex<pos:position pos:line="5070" pos:column="30"/></name><argument_list pos:line="5070" pos:column="30">(<argument><expr><name pos:line="5070" pos:column="31">db<pos:position pos:line="5070" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="5070" pos:column="35">pOp<pos:position pos:line="5070" pos:column="38"/></name><operator pos:line="5070" pos:column="38">-&gt;<pos:position pos:line="5070" pos:column="43"/></operator><name pos:line="5070" pos:column="40">p1<pos:position pos:line="5070" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5070" pos:column="44">pOp<pos:position pos:line="5070" pos:column="47"/></name><operator pos:line="5070" pos:column="47">-&gt;<pos:position pos:line="5070" pos:column="52"/></operator><name pos:line="5070" pos:column="49">p4<pos:position pos:line="5070" pos:column="51"/></name><operator pos:line="5070" pos:column="51">.<pos:position pos:line="5070" pos:column="52"/></operator><name pos:line="5070" pos:column="52">z<pos:position pos:line="5070" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="5070" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5070" pos:column="55"/></expr_stmt>
  <break pos:line="5071" pos:column="3">break;<pos:position pos:line="5071" pos:column="9"/></break>
}<pos:position pos:line="5072" pos:column="2"/></block>

<comment type="block" pos:line="5074" pos:column="1">/* Opcode: DropTrigger P1 * * P4 *
**
** Remove the internal (in-memory) data structures that describe
** the trigger named P4 in database P1.  This is called after a trigger
** is dropped from disk (using the Destroy opcode) in order to keep 
** the internal representation of the
** schema consistent with what is on disk.
*/</comment>
<case pos:line="5082" pos:column="1">case <expr><name pos:line="5082" pos:column="6">OP_DropTrigger<pos:position pos:line="5082" pos:column="20"/></name></expr>:<pos:position pos:line="5082" pos:column="21"/></case> <block pos:line="5082" pos:column="22">{
  <expr_stmt><expr><call><name pos:line="5083" pos:column="3">sqlite3UnlinkAndDeleteTrigger<pos:position pos:line="5083" pos:column="32"/></name><argument_list pos:line="5083" pos:column="32">(<argument><expr><name pos:line="5083" pos:column="33">db<pos:position pos:line="5083" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="5083" pos:column="37">pOp<pos:position pos:line="5083" pos:column="40"/></name><operator pos:line="5083" pos:column="40">-&gt;<pos:position pos:line="5083" pos:column="45"/></operator><name pos:line="5083" pos:column="42">p1<pos:position pos:line="5083" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5083" pos:column="46">pOp<pos:position pos:line="5083" pos:column="49"/></name><operator pos:line="5083" pos:column="49">-&gt;<pos:position pos:line="5083" pos:column="54"/></operator><name pos:line="5083" pos:column="51">p4<pos:position pos:line="5083" pos:column="53"/></name><operator pos:line="5083" pos:column="53">.<pos:position pos:line="5083" pos:column="54"/></operator><name pos:line="5083" pos:column="54">z<pos:position pos:line="5083" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="5083" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="5083" pos:column="57"/></expr_stmt>
  <break pos:line="5084" pos:column="3">break;<pos:position pos:line="5084" pos:column="9"/></break>
}<pos:position pos:line="5085" pos:column="2"/></block>


<cpp:ifndef pos:line="5088" pos:column="1">#<cpp:directive pos:line="5088" pos:column="2">ifndef<pos:position pos:line="5088" pos:column="8"/></cpp:directive> <name pos:line="5088" pos:column="9">SQLITE_OMIT_INTEGRITY_CHECK<pos:position pos:line="5088" pos:column="36"/></name></cpp:ifndef>
<comment type="block" pos:line="5089" pos:column="1">/* Opcode: IntegrityCk P1 P2 P3 P4 P5
**
** Do an analysis of the currently open database.  Store in
** register P1 the text of an error message describing any problems.
** If no problems are found, store a NULL in register P1.
**
** The register P3 contains one less than the maximum number of allowed errors.
** At most reg(P3) errors will be reported.
** In other words, the analysis stops as soon as reg(P1) errors are 
** seen.  Reg(P1) is updated with the number of errors remaining.
**
** The root page numbers of all tables in the database are integers
** stored in P4_INTARRAY argument.
**
** If P5 is not zero, the check is done on the auxiliary database
** file, not the main database file.
**
** This opcode is used to implement the integrity_check pragma.
*/</comment>
<case pos:line="5108" pos:column="1">case <expr><name pos:line="5108" pos:column="6">OP_IntegrityCk<pos:position pos:line="5108" pos:column="20"/></name></expr>:<pos:position pos:line="5108" pos:column="21"/></case> <block pos:line="5108" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="5109" pos:column="3">int<pos:position pos:line="5109" pos:column="6"/></name></type> <name pos:line="5109" pos:column="7">nRoot<pos:position pos:line="5109" pos:column="12"/></name></decl>;<pos:position pos:line="5109" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="5109" pos:column="19">/* Number of tables to check.  (Number of root pages.) */</comment>
  <decl_stmt><decl><type><name pos:line="5110" pos:column="3">int<pos:position pos:line="5110" pos:column="6"/></name> <modifier pos:line="5110" pos:column="7">*<pos:position pos:line="5110" pos:column="8"/></modifier></type><name pos:line="5110" pos:column="8">aRoot<pos:position pos:line="5110" pos:column="13"/></name></decl>;<pos:position pos:line="5110" pos:column="14"/></decl_stmt>     <comment type="block" pos:line="5110" pos:column="19">/* Array of rootpage numbers for tables to be checked */</comment>
  <decl_stmt><decl><type><name pos:line="5111" pos:column="3">int<pos:position pos:line="5111" pos:column="6"/></name></type> <name pos:line="5111" pos:column="7">nErr<pos:position pos:line="5111" pos:column="11"/></name></decl>;<pos:position pos:line="5111" pos:column="12"/></decl_stmt>       <comment type="block" pos:line="5111" pos:column="19">/* Number of errors reported */</comment>
  <decl_stmt><decl><type><name pos:line="5112" pos:column="3">char<pos:position pos:line="5112" pos:column="7"/></name> <modifier pos:line="5112" pos:column="8">*<pos:position pos:line="5112" pos:column="9"/></modifier></type><name pos:line="5112" pos:column="9">z<pos:position pos:line="5112" pos:column="10"/></name></decl>;<pos:position pos:line="5112" pos:column="11"/></decl_stmt>        <comment type="block" pos:line="5112" pos:column="19">/* Text of the error report */</comment>
  <decl_stmt><decl><type><name pos:line="5113" pos:column="3">Mem<pos:position pos:line="5113" pos:column="6"/></name> <modifier pos:line="5113" pos:column="7">*<pos:position pos:line="5113" pos:column="8"/></modifier></type><name pos:line="5113" pos:column="8">pnErr<pos:position pos:line="5113" pos:column="13"/></name></decl>;<pos:position pos:line="5113" pos:column="14"/></decl_stmt>     <comment type="block" pos:line="5113" pos:column="19">/* Register keeping track of errors remaining */</comment>

  <expr_stmt><expr><call><name pos:line="5115" pos:column="3">assert<pos:position pos:line="5115" pos:column="9"/></name><argument_list pos:line="5115" pos:column="9">( <argument><expr><name><name pos:line="5115" pos:column="11">p<pos:position pos:line="5115" pos:column="12"/></name><operator pos:line="5115" pos:column="12">-&gt;<pos:position pos:line="5115" pos:column="17"/></operator><name pos:line="5115" pos:column="14">bIsReader<pos:position pos:line="5115" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="5115" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5115" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5116" pos:column="3">nRoot<pos:position pos:line="5116" pos:column="8"/></name> <operator pos:line="5116" pos:column="9">=<pos:position pos:line="5116" pos:column="10"/></operator> <name><name pos:line="5116" pos:column="11">pOp<pos:position pos:line="5116" pos:column="14"/></name><operator pos:line="5116" pos:column="14">-&gt;<pos:position pos:line="5116" pos:column="19"/></operator><name pos:line="5116" pos:column="16">p2<pos:position pos:line="5116" pos:column="18"/></name></name></expr>;<pos:position pos:line="5116" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5117" pos:column="3">aRoot<pos:position pos:line="5117" pos:column="8"/></name> <operator pos:line="5117" pos:column="9">=<pos:position pos:line="5117" pos:column="10"/></operator> <name><name pos:line="5117" pos:column="11">pOp<pos:position pos:line="5117" pos:column="14"/></name><operator pos:line="5117" pos:column="14">-&gt;<pos:position pos:line="5117" pos:column="19"/></operator><name pos:line="5117" pos:column="16">p4<pos:position pos:line="5117" pos:column="18"/></name><operator pos:line="5117" pos:column="18">.<pos:position pos:line="5117" pos:column="19"/></operator><name pos:line="5117" pos:column="19">ai<pos:position pos:line="5117" pos:column="21"/></name></name></expr>;<pos:position pos:line="5117" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5118" pos:column="3">assert<pos:position pos:line="5118" pos:column="9"/></name><argument_list pos:line="5118" pos:column="9">( <argument><expr><name pos:line="5118" pos:column="11">nRoot<pos:position pos:line="5118" pos:column="16"/></name><operator pos:line="5118" pos:column="16">&gt;<pos:position pos:line="5118" pos:column="20"/></operator><literal type="number" pos:line="5118" pos:column="17">0<pos:position pos:line="5118" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="5118" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5118" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5119" pos:column="3">assert<pos:position pos:line="5119" pos:column="9"/></name><argument_list pos:line="5119" pos:column="9">( <argument><expr><name><name pos:line="5119" pos:column="11">aRoot<pos:position pos:line="5119" pos:column="16"/></name><index pos:line="5119" pos:column="16">[<expr><literal type="number" pos:line="5119" pos:column="17">0<pos:position pos:line="5119" pos:column="18"/></literal></expr>]<pos:position pos:line="5119" pos:column="19"/></index></name><operator pos:line="5119" pos:column="19">==<pos:position pos:line="5119" pos:column="21"/></operator><name pos:line="5119" pos:column="21">nRoot<pos:position pos:line="5119" pos:column="26"/></name></expr></argument> )<pos:position pos:line="5119" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5119" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5120" pos:column="3">assert<pos:position pos:line="5120" pos:column="9"/></name><argument_list pos:line="5120" pos:column="9">( <argument><expr><name><name pos:line="5120" pos:column="11">pOp<pos:position pos:line="5120" pos:column="14"/></name><operator pos:line="5120" pos:column="14">-&gt;<pos:position pos:line="5120" pos:column="19"/></operator><name pos:line="5120" pos:column="16">p3<pos:position pos:line="5120" pos:column="18"/></name></name><operator pos:line="5120" pos:column="18">&gt;<pos:position pos:line="5120" pos:column="22"/></operator><literal type="number" pos:line="5120" pos:column="19">0<pos:position pos:line="5120" pos:column="20"/></literal> <operator pos:line="5120" pos:column="21">&amp;&amp;<pos:position pos:line="5120" pos:column="31"/></operator> <name><name pos:line="5120" pos:column="24">pOp<pos:position pos:line="5120" pos:column="27"/></name><operator pos:line="5120" pos:column="27">-&gt;<pos:position pos:line="5120" pos:column="32"/></operator><name pos:line="5120" pos:column="29">p3<pos:position pos:line="5120" pos:column="31"/></name></name><operator pos:line="5120" pos:column="31">&lt;=<pos:position pos:line="5120" pos:column="36"/></operator><operator pos:line="5120" pos:column="33">(<pos:position pos:line="5120" pos:column="34"/></operator><name><name pos:line="5120" pos:column="34">p<pos:position pos:line="5120" pos:column="35"/></name><operator pos:line="5120" pos:column="35">-&gt;<pos:position pos:line="5120" pos:column="40"/></operator><name pos:line="5120" pos:column="37">nMem<pos:position pos:line="5120" pos:column="41"/></name></name><operator pos:line="5120" pos:column="41">+<pos:position pos:line="5120" pos:column="42"/></operator><literal type="number" pos:line="5120" pos:column="42">1<pos:position pos:line="5120" pos:column="43"/></literal> <operator pos:line="5120" pos:column="44">-<pos:position pos:line="5120" pos:column="45"/></operator> <name><name pos:line="5120" pos:column="46">p<pos:position pos:line="5120" pos:column="47"/></name><operator pos:line="5120" pos:column="47">-&gt;<pos:position pos:line="5120" pos:column="52"/></operator><name pos:line="5120" pos:column="49">nCursor<pos:position pos:line="5120" pos:column="56"/></name></name><operator pos:line="5120" pos:column="56">)<pos:position pos:line="5120" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="5120" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5120" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5121" pos:column="3">pnErr<pos:position pos:line="5121" pos:column="8"/></name> <operator pos:line="5121" pos:column="9">=<pos:position pos:line="5121" pos:column="10"/></operator> <operator pos:line="5121" pos:column="11">&amp;<pos:position pos:line="5121" pos:column="16"/></operator><name><name pos:line="5121" pos:column="12">aMem<pos:position pos:line="5121" pos:column="16"/></name><index pos:line="5121" pos:column="16">[<expr><name><name pos:line="5121" pos:column="17">pOp<pos:position pos:line="5121" pos:column="20"/></name><operator pos:line="5121" pos:column="20">-&gt;<pos:position pos:line="5121" pos:column="25"/></operator><name pos:line="5121" pos:column="22">p3<pos:position pos:line="5121" pos:column="24"/></name></name></expr>]<pos:position pos:line="5121" pos:column="25"/></index></name></expr>;<pos:position pos:line="5121" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5122" pos:column="3">assert<pos:position pos:line="5122" pos:column="9"/></name><argument_list pos:line="5122" pos:column="9">( <argument><expr><operator pos:line="5122" pos:column="11">(<pos:position pos:line="5122" pos:column="12"/></operator><name><name pos:line="5122" pos:column="12">pnErr<pos:position pos:line="5122" pos:column="17"/></name><operator pos:line="5122" pos:column="17">-&gt;<pos:position pos:line="5122" pos:column="22"/></operator><name pos:line="5122" pos:column="19">flags<pos:position pos:line="5122" pos:column="24"/></name></name> <operator pos:line="5122" pos:column="25">&amp;<pos:position pos:line="5122" pos:column="30"/></operator> <name pos:line="5122" pos:column="27">MEM_Int<pos:position pos:line="5122" pos:column="34"/></name><operator pos:line="5122" pos:column="34">)<pos:position pos:line="5122" pos:column="35"/></operator><operator pos:line="5122" pos:column="35">!=<pos:position pos:line="5122" pos:column="37"/></operator><literal type="number" pos:line="5122" pos:column="37">0<pos:position pos:line="5122" pos:column="38"/></literal></expr></argument> )<pos:position pos:line="5122" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5122" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5123" pos:column="3">assert<pos:position pos:line="5123" pos:column="9"/></name><argument_list pos:line="5123" pos:column="9">( <argument><expr><operator pos:line="5123" pos:column="11">(<pos:position pos:line="5123" pos:column="12"/></operator><name><name pos:line="5123" pos:column="12">pnErr<pos:position pos:line="5123" pos:column="17"/></name><operator pos:line="5123" pos:column="17">-&gt;<pos:position pos:line="5123" pos:column="22"/></operator><name pos:line="5123" pos:column="19">flags<pos:position pos:line="5123" pos:column="24"/></name></name> <operator pos:line="5123" pos:column="25">&amp;<pos:position pos:line="5123" pos:column="30"/></operator> <operator pos:line="5123" pos:column="27">(<pos:position pos:line="5123" pos:column="28"/></operator><name pos:line="5123" pos:column="28">MEM_Str<pos:position pos:line="5123" pos:column="35"/></name><operator pos:line="5123" pos:column="35">|<pos:position pos:line="5123" pos:column="36"/></operator><name pos:line="5123" pos:column="36">MEM_Blob<pos:position pos:line="5123" pos:column="44"/></name><operator pos:line="5123" pos:column="44">)<pos:position pos:line="5123" pos:column="45"/></operator><operator pos:line="5123" pos:column="45">)<pos:position pos:line="5123" pos:column="46"/></operator><operator pos:line="5123" pos:column="46">==<pos:position pos:line="5123" pos:column="48"/></operator><literal type="number" pos:line="5123" pos:column="48">0<pos:position pos:line="5123" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="5123" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="5123" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5124" pos:column="3">pIn1<pos:position pos:line="5124" pos:column="7"/></name> <operator pos:line="5124" pos:column="8">=<pos:position pos:line="5124" pos:column="9"/></operator> <operator pos:line="5124" pos:column="10">&amp;<pos:position pos:line="5124" pos:column="15"/></operator><name><name pos:line="5124" pos:column="11">aMem<pos:position pos:line="5124" pos:column="15"/></name><index pos:line="5124" pos:column="15">[<expr><name><name pos:line="5124" pos:column="16">pOp<pos:position pos:line="5124" pos:column="19"/></name><operator pos:line="5124" pos:column="19">-&gt;<pos:position pos:line="5124" pos:column="24"/></operator><name pos:line="5124" pos:column="21">p1<pos:position pos:line="5124" pos:column="23"/></name></name></expr>]<pos:position pos:line="5124" pos:column="24"/></index></name></expr>;<pos:position pos:line="5124" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5125" pos:column="3">assert<pos:position pos:line="5125" pos:column="9"/></name><argument_list pos:line="5125" pos:column="9">( <argument><expr><name><name pos:line="5125" pos:column="11">pOp<pos:position pos:line="5125" pos:column="14"/></name><operator pos:line="5125" pos:column="14">-&gt;<pos:position pos:line="5125" pos:column="19"/></operator><name pos:line="5125" pos:column="16">p5<pos:position pos:line="5125" pos:column="18"/></name></name><operator pos:line="5125" pos:column="18">&lt;<pos:position pos:line="5125" pos:column="22"/></operator><name><name pos:line="5125" pos:column="19">db<pos:position pos:line="5125" pos:column="21"/></name><operator pos:line="5125" pos:column="21">-&gt;<pos:position pos:line="5125" pos:column="26"/></operator><name pos:line="5125" pos:column="23">nDb<pos:position pos:line="5125" pos:column="26"/></name></name></expr></argument> )<pos:position pos:line="5125" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5125" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5126" pos:column="3">assert<pos:position pos:line="5126" pos:column="9"/></name><argument_list pos:line="5126" pos:column="9">( <argument><expr><call><name pos:line="5126" pos:column="11">DbMaskTest<pos:position pos:line="5126" pos:column="21"/></name><argument_list pos:line="5126" pos:column="21">(<argument><expr><name><name pos:line="5126" pos:column="22">p<pos:position pos:line="5126" pos:column="23"/></name><operator pos:line="5126" pos:column="23">-&gt;<pos:position pos:line="5126" pos:column="28"/></operator><name pos:line="5126" pos:column="25">btreeMask<pos:position pos:line="5126" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5126" pos:column="36">pOp<pos:position pos:line="5126" pos:column="39"/></name><operator pos:line="5126" pos:column="39">-&gt;<pos:position pos:line="5126" pos:column="44"/></operator><name pos:line="5126" pos:column="41">p5<pos:position pos:line="5126" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="5126" pos:column="44"/></argument_list></call></expr></argument> )<pos:position pos:line="5126" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5126" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5127" pos:column="3">z<pos:position pos:line="5127" pos:column="4"/></name> <operator pos:line="5127" pos:column="5">=<pos:position pos:line="5127" pos:column="6"/></operator> <call><name pos:line="5127" pos:column="7">sqlite3BtreeIntegrityCheck<pos:position pos:line="5127" pos:column="33"/></name><argument_list pos:line="5127" pos:column="33">(<argument><expr><name><name pos:line="5127" pos:column="34">db<pos:position pos:line="5127" pos:column="36"/></name><operator pos:line="5127" pos:column="36">-&gt;<pos:position pos:line="5127" pos:column="41"/></operator><name pos:line="5127" pos:column="38">aDb<pos:position pos:line="5127" pos:column="41"/></name><index pos:line="5127" pos:column="41">[<expr><name><name pos:line="5127" pos:column="42">pOp<pos:position pos:line="5127" pos:column="45"/></name><operator pos:line="5127" pos:column="45">-&gt;<pos:position pos:line="5127" pos:column="50"/></operator><name pos:line="5127" pos:column="47">p5<pos:position pos:line="5127" pos:column="49"/></name></name></expr>]<pos:position pos:line="5127" pos:column="50"/></index></name><operator pos:line="5127" pos:column="50">.<pos:position pos:line="5127" pos:column="51"/></operator><name pos:line="5127" pos:column="51">pBt<pos:position pos:line="5127" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="5127" pos:column="56">&amp;<pos:position pos:line="5127" pos:column="61"/></operator><name><name pos:line="5127" pos:column="57">aRoot<pos:position pos:line="5127" pos:column="62"/></name><index pos:line="5127" pos:column="62">[<expr><literal type="number" pos:line="5127" pos:column="63">1<pos:position pos:line="5127" pos:column="64"/></literal></expr>]<pos:position pos:line="5127" pos:column="65"/></index></name></expr></argument>, <argument><expr><name pos:line="5127" pos:column="67">nRoot<pos:position pos:line="5127" pos:column="72"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="5128" pos:column="34">(<pos:position pos:line="5128" pos:column="35"/></operator><name pos:line="5128" pos:column="35">int<pos:position pos:line="5128" pos:column="38"/></name><operator pos:line="5128" pos:column="38">)<pos:position pos:line="5128" pos:column="39"/></operator><name><name pos:line="5128" pos:column="39">pnErr<pos:position pos:line="5128" pos:column="44"/></name><operator pos:line="5128" pos:column="44">-&gt;<pos:position pos:line="5128" pos:column="49"/></operator><name pos:line="5128" pos:column="46">u<pos:position pos:line="5128" pos:column="47"/></name><operator pos:line="5128" pos:column="47">.<pos:position pos:line="5128" pos:column="48"/></operator><name pos:line="5128" pos:column="48">i<pos:position pos:line="5128" pos:column="49"/></name></name><operator pos:line="5128" pos:column="49">+<pos:position pos:line="5128" pos:column="50"/></operator><literal type="number" pos:line="5128" pos:column="50">1<pos:position pos:line="5128" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="5128" pos:column="53">&amp;<pos:position pos:line="5128" pos:column="58"/></operator><name pos:line="5128" pos:column="54">nErr<pos:position pos:line="5128" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5128" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5128" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5129" pos:column="3">sqlite3VdbeMemSetNull<pos:position pos:line="5129" pos:column="24"/></name><argument_list pos:line="5129" pos:column="24">(<argument><expr><name pos:line="5129" pos:column="25">pIn1<pos:position pos:line="5129" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5129" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5129" pos:column="31"/></expr_stmt>
  <if pos:line="5130" pos:column="3">if<condition pos:line="5130" pos:column="5">( <expr><name pos:line="5130" pos:column="7">nErr<pos:position pos:line="5130" pos:column="11"/></name><operator pos:line="5130" pos:column="11">==<pos:position pos:line="5130" pos:column="13"/></operator><literal type="number" pos:line="5130" pos:column="13">0<pos:position pos:line="5130" pos:column="14"/></literal></expr> )<pos:position pos:line="5130" pos:column="16"/></condition><then><block pos:line="5130" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="5131" pos:column="5">assert<pos:position pos:line="5131" pos:column="11"/></name><argument_list pos:line="5131" pos:column="11">( <argument><expr><name pos:line="5131" pos:column="13">z<pos:position pos:line="5131" pos:column="14"/></name><operator pos:line="5131" pos:column="14">==<pos:position pos:line="5131" pos:column="16"/></operator><literal type="number" pos:line="5131" pos:column="16">0<pos:position pos:line="5131" pos:column="17"/></literal></expr></argument> )<pos:position pos:line="5131" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="5131" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="5132" pos:column="4"/></block></then><elseif pos:line="5132" pos:column="4">else <if pos:line="5132" pos:column="9">if<condition pos:line="5132" pos:column="11">( <expr><name pos:line="5132" pos:column="13">z<pos:position pos:line="5132" pos:column="14"/></name><operator pos:line="5132" pos:column="14">==<pos:position pos:line="5132" pos:column="16"/></operator><literal type="number" pos:line="5132" pos:column="16">0<pos:position pos:line="5132" pos:column="17"/></literal></expr> )<pos:position pos:line="5132" pos:column="19"/></condition><then><block pos:line="5132" pos:column="19">{
    <goto pos:line="5133" pos:column="5">goto <name pos:line="5133" pos:column="10">no_mem<pos:position pos:line="5133" pos:column="16"/></name>;<pos:position pos:line="5133" pos:column="17"/></goto>
  }<pos:position pos:line="5134" pos:column="4"/></block></then></if></elseif><else pos:line="5134" pos:column="4">else<block pos:line="5134" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="5135" pos:column="5">pnErr<pos:position pos:line="5135" pos:column="10"/></name><operator pos:line="5135" pos:column="10">-&gt;<pos:position pos:line="5135" pos:column="15"/></operator><name pos:line="5135" pos:column="12">u<pos:position pos:line="5135" pos:column="13"/></name><operator pos:line="5135" pos:column="13">.<pos:position pos:line="5135" pos:column="14"/></operator><name pos:line="5135" pos:column="14">i<pos:position pos:line="5135" pos:column="15"/></name></name> <operator pos:line="5135" pos:column="16">-=<pos:position pos:line="5135" pos:column="18"/></operator> <name pos:line="5135" pos:column="19">nErr<pos:position pos:line="5135" pos:column="23"/></name><operator pos:line="5135" pos:column="23">-<pos:position pos:line="5135" pos:column="24"/></operator><literal type="number" pos:line="5135" pos:column="24">1<pos:position pos:line="5135" pos:column="25"/></literal></expr>;<pos:position pos:line="5135" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5136" pos:column="5">sqlite3VdbeMemSetStr<pos:position pos:line="5136" pos:column="25"/></name><argument_list pos:line="5136" pos:column="25">(<argument><expr><name pos:line="5136" pos:column="26">pIn1<pos:position pos:line="5136" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="5136" pos:column="32">z<pos:position pos:line="5136" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="5136" pos:column="35">-<pos:position pos:line="5136" pos:column="36"/></operator><literal type="number" pos:line="5136" pos:column="36">1<pos:position pos:line="5136" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="5136" pos:column="39">SQLITE_UTF8<pos:position pos:line="5136" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="5136" pos:column="52">sqlite3_free<pos:position pos:line="5136" pos:column="64"/></name></expr></argument>)<pos:position pos:line="5136" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="5136" pos:column="66"/></expr_stmt>
  }<pos:position pos:line="5137" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="5138" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="5138" pos:column="22"/></name><argument_list pos:line="5138" pos:column="22">(<argument><expr><name pos:line="5138" pos:column="23">pIn1<pos:position pos:line="5138" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5138" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5138" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5139" pos:column="3">sqlite3VdbeChangeEncoding<pos:position pos:line="5139" pos:column="28"/></name><argument_list pos:line="5139" pos:column="28">(<argument><expr><name pos:line="5139" pos:column="29">pIn1<pos:position pos:line="5139" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="5139" pos:column="35">encoding<pos:position pos:line="5139" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5139" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5139" pos:column="45"/></expr_stmt>
  <break pos:line="5140" pos:column="3">break;<pos:position pos:line="5140" pos:column="9"/></break>
}<pos:position pos:line="5141" pos:column="2"/></block>
<cpp:endif pos:line="5142" pos:column="1">#<cpp:directive pos:line="5142" pos:column="2">endif<pos:position pos:line="5142" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5142" pos:column="8">/* SQLITE_OMIT_INTEGRITY_CHECK */</comment>

<comment type="block" pos:line="5144" pos:column="1">/* Opcode: RowSetAdd P1 P2 * * *
** Synopsis: rowset(P1)=r[P2]
**
** Insert the integer value held by register P2 into a RowSet object
** held in register P1.
**
** An assertion fails if P2 is not an integer.
*/</comment>
<case pos:line="5152" pos:column="1">case <expr><name pos:line="5152" pos:column="6">OP_RowSetAdd<pos:position pos:line="5152" pos:column="18"/></name></expr>:<pos:position pos:line="5152" pos:column="19"/></case> <block pos:line="5152" pos:column="20">{       <comment type="block" pos:line="5152" pos:column="28">/* in1, in2 */</comment>
  <expr_stmt><expr><name pos:line="5153" pos:column="3">pIn1<pos:position pos:line="5153" pos:column="7"/></name> <operator pos:line="5153" pos:column="8">=<pos:position pos:line="5153" pos:column="9"/></operator> <operator pos:line="5153" pos:column="10">&amp;<pos:position pos:line="5153" pos:column="15"/></operator><name><name pos:line="5153" pos:column="11">aMem<pos:position pos:line="5153" pos:column="15"/></name><index pos:line="5153" pos:column="15">[<expr><name><name pos:line="5153" pos:column="16">pOp<pos:position pos:line="5153" pos:column="19"/></name><operator pos:line="5153" pos:column="19">-&gt;<pos:position pos:line="5153" pos:column="24"/></operator><name pos:line="5153" pos:column="21">p1<pos:position pos:line="5153" pos:column="23"/></name></name></expr>]<pos:position pos:line="5153" pos:column="24"/></index></name></expr>;<pos:position pos:line="5153" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5154" pos:column="3">pIn2<pos:position pos:line="5154" pos:column="7"/></name> <operator pos:line="5154" pos:column="8">=<pos:position pos:line="5154" pos:column="9"/></operator> <operator pos:line="5154" pos:column="10">&amp;<pos:position pos:line="5154" pos:column="15"/></operator><name><name pos:line="5154" pos:column="11">aMem<pos:position pos:line="5154" pos:column="15"/></name><index pos:line="5154" pos:column="15">[<expr><name><name pos:line="5154" pos:column="16">pOp<pos:position pos:line="5154" pos:column="19"/></name><operator pos:line="5154" pos:column="19">-&gt;<pos:position pos:line="5154" pos:column="24"/></operator><name pos:line="5154" pos:column="21">p2<pos:position pos:line="5154" pos:column="23"/></name></name></expr>]<pos:position pos:line="5154" pos:column="24"/></index></name></expr>;<pos:position pos:line="5154" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5155" pos:column="3">assert<pos:position pos:line="5155" pos:column="9"/></name><argument_list pos:line="5155" pos:column="9">( <argument><expr><operator pos:line="5155" pos:column="11">(<pos:position pos:line="5155" pos:column="12"/></operator><name><name pos:line="5155" pos:column="12">pIn2<pos:position pos:line="5155" pos:column="16"/></name><operator pos:line="5155" pos:column="16">-&gt;<pos:position pos:line="5155" pos:column="21"/></operator><name pos:line="5155" pos:column="18">flags<pos:position pos:line="5155" pos:column="23"/></name></name> <operator pos:line="5155" pos:column="24">&amp;<pos:position pos:line="5155" pos:column="29"/></operator> <name pos:line="5155" pos:column="26">MEM_Int<pos:position pos:line="5155" pos:column="33"/></name><operator pos:line="5155" pos:column="33">)<pos:position pos:line="5155" pos:column="34"/></operator><operator pos:line="5155" pos:column="34">!=<pos:position pos:line="5155" pos:column="36"/></operator><literal type="number" pos:line="5155" pos:column="36">0<pos:position pos:line="5155" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="5155" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="5155" pos:column="40"/></expr_stmt>
  <if pos:line="5156" pos:column="3">if<condition pos:line="5156" pos:column="5">( <expr><operator pos:line="5156" pos:column="7">(<pos:position pos:line="5156" pos:column="8"/></operator><name><name pos:line="5156" pos:column="8">pIn1<pos:position pos:line="5156" pos:column="12"/></name><operator pos:line="5156" pos:column="12">-&gt;<pos:position pos:line="5156" pos:column="17"/></operator><name pos:line="5156" pos:column="14">flags<pos:position pos:line="5156" pos:column="19"/></name></name> <operator pos:line="5156" pos:column="20">&amp;<pos:position pos:line="5156" pos:column="25"/></operator> <name pos:line="5156" pos:column="22">MEM_RowSet<pos:position pos:line="5156" pos:column="32"/></name><operator pos:line="5156" pos:column="32">)<pos:position pos:line="5156" pos:column="33"/></operator><operator pos:line="5156" pos:column="33">==<pos:position pos:line="5156" pos:column="35"/></operator><literal type="number" pos:line="5156" pos:column="35">0<pos:position pos:line="5156" pos:column="36"/></literal></expr> )<pos:position pos:line="5156" pos:column="38"/></condition><then><block pos:line="5156" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="5157" pos:column="5">sqlite3VdbeMemSetRowSet<pos:position pos:line="5157" pos:column="28"/></name><argument_list pos:line="5157" pos:column="28">(<argument><expr><name pos:line="5157" pos:column="29">pIn1<pos:position pos:line="5157" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5157" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5157" pos:column="35"/></expr_stmt>
    <if pos:line="5158" pos:column="5">if<condition pos:line="5158" pos:column="7">( <expr><operator pos:line="5158" pos:column="9">(<pos:position pos:line="5158" pos:column="10"/></operator><name><name pos:line="5158" pos:column="10">pIn1<pos:position pos:line="5158" pos:column="14"/></name><operator pos:line="5158" pos:column="14">-&gt;<pos:position pos:line="5158" pos:column="19"/></operator><name pos:line="5158" pos:column="16">flags<pos:position pos:line="5158" pos:column="21"/></name></name> <operator pos:line="5158" pos:column="22">&amp;<pos:position pos:line="5158" pos:column="27"/></operator> <name pos:line="5158" pos:column="24">MEM_RowSet<pos:position pos:line="5158" pos:column="34"/></name><operator pos:line="5158" pos:column="34">)<pos:position pos:line="5158" pos:column="35"/></operator><operator pos:line="5158" pos:column="35">==<pos:position pos:line="5158" pos:column="37"/></operator><literal type="number" pos:line="5158" pos:column="37">0<pos:position pos:line="5158" pos:column="38"/></literal></expr> )<pos:position pos:line="5158" pos:column="40"/></condition><then pos:line="5158" pos:column="40"> <block type="pseudo"><goto pos:line="5158" pos:column="41">goto <name pos:line="5158" pos:column="46">no_mem<pos:position pos:line="5158" pos:column="52"/></name>;<pos:position pos:line="5158" pos:column="53"/></goto></block></then></if>
  }<pos:position pos:line="5159" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="5160" pos:column="3">sqlite3RowSetInsert<pos:position pos:line="5160" pos:column="22"/></name><argument_list pos:line="5160" pos:column="22">(<argument><expr><name><name pos:line="5160" pos:column="23">pIn1<pos:position pos:line="5160" pos:column="27"/></name><operator pos:line="5160" pos:column="27">-&gt;<pos:position pos:line="5160" pos:column="32"/></operator><name pos:line="5160" pos:column="29">u<pos:position pos:line="5160" pos:column="30"/></name><operator pos:line="5160" pos:column="30">.<pos:position pos:line="5160" pos:column="31"/></operator><name pos:line="5160" pos:column="31">pRowSet<pos:position pos:line="5160" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5160" pos:column="40">pIn2<pos:position pos:line="5160" pos:column="44"/></name><operator pos:line="5160" pos:column="44">-&gt;<pos:position pos:line="5160" pos:column="49"/></operator><name pos:line="5160" pos:column="46">u<pos:position pos:line="5160" pos:column="47"/></name><operator pos:line="5160" pos:column="47">.<pos:position pos:line="5160" pos:column="48"/></operator><name pos:line="5160" pos:column="48">i<pos:position pos:line="5160" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="5160" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5160" pos:column="51"/></expr_stmt>
  <break pos:line="5161" pos:column="3">break;<pos:position pos:line="5161" pos:column="9"/></break>
}<pos:position pos:line="5162" pos:column="2"/></block>

<comment type="block" pos:line="5164" pos:column="1">/* Opcode: RowSetRead P1 P2 P3 * *
** Synopsis: r[P3]=rowset(P1)
**
** Extract the smallest value from the RowSet object in P1
** and put that value into register P3.
** Or, if RowSet object P1 is initially empty, leave P3
** unchanged and jump to instruction P2.
*/</comment>
<case pos:line="5172" pos:column="1">case <expr><name pos:line="5172" pos:column="6">OP_RowSetRead<pos:position pos:line="5172" pos:column="19"/></name></expr>:<pos:position pos:line="5172" pos:column="20"/></case> <block pos:line="5172" pos:column="21">{       <comment type="block" pos:line="5172" pos:column="29">/* jump, in1, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="5173" pos:column="3">i64<pos:position pos:line="5173" pos:column="6"/></name></type> <name pos:line="5173" pos:column="7">val<pos:position pos:line="5173" pos:column="10"/></name></decl>;<pos:position pos:line="5173" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5175" pos:column="3">pIn1<pos:position pos:line="5175" pos:column="7"/></name> <operator pos:line="5175" pos:column="8">=<pos:position pos:line="5175" pos:column="9"/></operator> <operator pos:line="5175" pos:column="10">&amp;<pos:position pos:line="5175" pos:column="15"/></operator><name><name pos:line="5175" pos:column="11">aMem<pos:position pos:line="5175" pos:column="15"/></name><index pos:line="5175" pos:column="15">[<expr><name><name pos:line="5175" pos:column="16">pOp<pos:position pos:line="5175" pos:column="19"/></name><operator pos:line="5175" pos:column="19">-&gt;<pos:position pos:line="5175" pos:column="24"/></operator><name pos:line="5175" pos:column="21">p1<pos:position pos:line="5175" pos:column="23"/></name></name></expr>]<pos:position pos:line="5175" pos:column="24"/></index></name></expr>;<pos:position pos:line="5175" pos:column="25"/></expr_stmt>
  <if pos:line="5176" pos:column="3">if<condition pos:line="5176" pos:column="5">( <expr><operator pos:line="5176" pos:column="7">(<pos:position pos:line="5176" pos:column="8"/></operator><name><name pos:line="5176" pos:column="8">pIn1<pos:position pos:line="5176" pos:column="12"/></name><operator pos:line="5176" pos:column="12">-&gt;<pos:position pos:line="5176" pos:column="17"/></operator><name pos:line="5176" pos:column="14">flags<pos:position pos:line="5176" pos:column="19"/></name></name> <operator pos:line="5176" pos:column="20">&amp;<pos:position pos:line="5176" pos:column="25"/></operator> <name pos:line="5176" pos:column="22">MEM_RowSet<pos:position pos:line="5176" pos:column="32"/></name><operator pos:line="5176" pos:column="32">)<pos:position pos:line="5176" pos:column="33"/></operator><operator pos:line="5176" pos:column="33">==<pos:position pos:line="5176" pos:column="35"/></operator><literal type="number" pos:line="5176" pos:column="35">0<pos:position pos:line="5176" pos:column="36"/></literal> 
   <operator pos:line="5177" pos:column="4">||<pos:position pos:line="5177" pos:column="6"/></operator> <call><name pos:line="5177" pos:column="7">sqlite3RowSetNext<pos:position pos:line="5177" pos:column="24"/></name><argument_list pos:line="5177" pos:column="24">(<argument><expr><name><name pos:line="5177" pos:column="25">pIn1<pos:position pos:line="5177" pos:column="29"/></name><operator pos:line="5177" pos:column="29">-&gt;<pos:position pos:line="5177" pos:column="34"/></operator><name pos:line="5177" pos:column="31">u<pos:position pos:line="5177" pos:column="32"/></name><operator pos:line="5177" pos:column="32">.<pos:position pos:line="5177" pos:column="33"/></operator><name pos:line="5177" pos:column="33">pRowSet<pos:position pos:line="5177" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="5177" pos:column="42">&amp;<pos:position pos:line="5177" pos:column="47"/></operator><name pos:line="5177" pos:column="43">val<pos:position pos:line="5177" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5177" pos:column="47"/></argument_list></call><operator pos:line="5177" pos:column="47">==<pos:position pos:line="5177" pos:column="49"/></operator><literal type="number" pos:line="5177" pos:column="49">0<pos:position pos:line="5177" pos:column="50"/></literal></expr>
  )<pos:position pos:line="5178" pos:column="4"/></condition><then><block pos:line="5178" pos:column="4">{
    <comment type="block" pos:line="5179" pos:column="5">/* The boolean index is empty */</comment>
    <expr_stmt><expr><call><name pos:line="5180" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="5180" pos:column="26"/></name><argument_list pos:line="5180" pos:column="26">(<argument><expr><name pos:line="5180" pos:column="27">pIn1<pos:position pos:line="5180" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5180" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5180" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5181" pos:column="5">VdbeBranchTaken<pos:position pos:line="5181" pos:column="20"/></name><argument_list pos:line="5181" pos:column="20">(<argument><expr><literal type="number" pos:line="5181" pos:column="21">1<pos:position pos:line="5181" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="5181" pos:column="23">2<pos:position pos:line="5181" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="5181" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5181" pos:column="26"/></expr_stmt>
    <goto pos:line="5182" pos:column="5">goto <name pos:line="5182" pos:column="10">jump_to_p2_and_check_for_interrupt<pos:position pos:line="5182" pos:column="44"/></name>;<pos:position pos:line="5182" pos:column="45"/></goto>
  }<pos:position pos:line="5183" pos:column="4"/></block></then><else pos:line="5183" pos:column="4">else<block pos:line="5183" pos:column="8">{
    <comment type="block" pos:line="5184" pos:column="5">/* A value was pulled from the index */</comment>
    <expr_stmt><expr><call><name pos:line="5185" pos:column="5">VdbeBranchTaken<pos:position pos:line="5185" pos:column="20"/></name><argument_list pos:line="5185" pos:column="20">(<argument><expr><literal type="number" pos:line="5185" pos:column="21">0<pos:position pos:line="5185" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="5185" pos:column="23">2<pos:position pos:line="5185" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="5185" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5185" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5186" pos:column="5">sqlite3VdbeMemSetInt64<pos:position pos:line="5186" pos:column="27"/></name><argument_list pos:line="5186" pos:column="27">(<argument><expr><operator pos:line="5186" pos:column="28">&amp;<pos:position pos:line="5186" pos:column="33"/></operator><name><name pos:line="5186" pos:column="29">aMem<pos:position pos:line="5186" pos:column="33"/></name><index pos:line="5186" pos:column="33">[<expr><name><name pos:line="5186" pos:column="34">pOp<pos:position pos:line="5186" pos:column="37"/></name><operator pos:line="5186" pos:column="37">-&gt;<pos:position pos:line="5186" pos:column="42"/></operator><name pos:line="5186" pos:column="39">p3<pos:position pos:line="5186" pos:column="41"/></name></name></expr>]<pos:position pos:line="5186" pos:column="42"/></index></name></expr></argument>, <argument><expr><name pos:line="5186" pos:column="44">val<pos:position pos:line="5186" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5186" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5186" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="5187" pos:column="4"/></block></else></if>
  <goto pos:line="5188" pos:column="3">goto <name pos:line="5188" pos:column="8">check_for_interrupt<pos:position pos:line="5188" pos:column="27"/></name>;<pos:position pos:line="5188" pos:column="28"/></goto>
}<pos:position pos:line="5189" pos:column="2"/></block>

<comment type="block" pos:line="5191" pos:column="1">/* Opcode: RowSetTest P1 P2 P3 P4
** Synopsis: if r[P3] in rowset(P1) goto P2
**
** Register P3 is assumed to hold a 64-bit integer value. If register P1
** contains a RowSet object and that RowSet object contains
** the value held in P3, jump to register P2. Otherwise, insert the
** integer in P3 into the RowSet and continue on to the
** next opcode.
**
** The RowSet object is optimized for the case where sets of integers
** are inserted in distinct phases, which each set contains no duplicates.
** Each set is identified by a unique P4 value. The first set
** must have P4==0, the final set must have P4==-1, and for all other sets
** must have P4&gt;0.
**
** This allows optimizations: (a) when P4==0 there is no need to test
** the RowSet object for P3, as it is guaranteed not to contain it,
** (b) when P4==-1 there is no need to insert the value, as it will
** never be tested for, and (c) when a value that is part of set X is
** inserted, there is no need to search to see if the same value was
** previously inserted as part of set X (only if it was previously
** inserted as part of some other set).
*/</comment>
<case pos:line="5214" pos:column="1">case <expr><name pos:line="5214" pos:column="6">OP_RowSetTest<pos:position pos:line="5214" pos:column="19"/></name></expr>:<pos:position pos:line="5214" pos:column="20"/></case> <block pos:line="5214" pos:column="21">{                     <comment type="block" pos:line="5214" pos:column="43">/* jump, in1, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="5215" pos:column="3">int<pos:position pos:line="5215" pos:column="6"/></name></type> <name pos:line="5215" pos:column="7">iSet<pos:position pos:line="5215" pos:column="11"/></name></decl>;<pos:position pos:line="5215" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5216" pos:column="3">int<pos:position pos:line="5216" pos:column="6"/></name></type> <name pos:line="5216" pos:column="7">exists<pos:position pos:line="5216" pos:column="13"/></name></decl>;<pos:position pos:line="5216" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5218" pos:column="3">pIn1<pos:position pos:line="5218" pos:column="7"/></name> <operator pos:line="5218" pos:column="8">=<pos:position pos:line="5218" pos:column="9"/></operator> <operator pos:line="5218" pos:column="10">&amp;<pos:position pos:line="5218" pos:column="15"/></operator><name><name pos:line="5218" pos:column="11">aMem<pos:position pos:line="5218" pos:column="15"/></name><index pos:line="5218" pos:column="15">[<expr><name><name pos:line="5218" pos:column="16">pOp<pos:position pos:line="5218" pos:column="19"/></name><operator pos:line="5218" pos:column="19">-&gt;<pos:position pos:line="5218" pos:column="24"/></operator><name pos:line="5218" pos:column="21">p1<pos:position pos:line="5218" pos:column="23"/></name></name></expr>]<pos:position pos:line="5218" pos:column="24"/></index></name></expr>;<pos:position pos:line="5218" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5219" pos:column="3">pIn3<pos:position pos:line="5219" pos:column="7"/></name> <operator pos:line="5219" pos:column="8">=<pos:position pos:line="5219" pos:column="9"/></operator> <operator pos:line="5219" pos:column="10">&amp;<pos:position pos:line="5219" pos:column="15"/></operator><name><name pos:line="5219" pos:column="11">aMem<pos:position pos:line="5219" pos:column="15"/></name><index pos:line="5219" pos:column="15">[<expr><name><name pos:line="5219" pos:column="16">pOp<pos:position pos:line="5219" pos:column="19"/></name><operator pos:line="5219" pos:column="19">-&gt;<pos:position pos:line="5219" pos:column="24"/></operator><name pos:line="5219" pos:column="21">p3<pos:position pos:line="5219" pos:column="23"/></name></name></expr>]<pos:position pos:line="5219" pos:column="24"/></index></name></expr>;<pos:position pos:line="5219" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5220" pos:column="3">iSet<pos:position pos:line="5220" pos:column="7"/></name> <operator pos:line="5220" pos:column="8">=<pos:position pos:line="5220" pos:column="9"/></operator> <name><name pos:line="5220" pos:column="10">pOp<pos:position pos:line="5220" pos:column="13"/></name><operator pos:line="5220" pos:column="13">-&gt;<pos:position pos:line="5220" pos:column="18"/></operator><name pos:line="5220" pos:column="15">p4<pos:position pos:line="5220" pos:column="17"/></name><operator pos:line="5220" pos:column="17">.<pos:position pos:line="5220" pos:column="18"/></operator><name pos:line="5220" pos:column="18">i<pos:position pos:line="5220" pos:column="19"/></name></name></expr>;<pos:position pos:line="5220" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5221" pos:column="3">assert<pos:position pos:line="5221" pos:column="9"/></name><argument_list pos:line="5221" pos:column="9">( <argument><expr><name><name pos:line="5221" pos:column="11">pIn3<pos:position pos:line="5221" pos:column="15"/></name><operator pos:line="5221" pos:column="15">-&gt;<pos:position pos:line="5221" pos:column="20"/></operator><name pos:line="5221" pos:column="17">flags<pos:position pos:line="5221" pos:column="22"/></name></name><operator pos:line="5221" pos:column="22">&amp;<pos:position pos:line="5221" pos:column="27"/></operator><name pos:line="5221" pos:column="23">MEM_Int<pos:position pos:line="5221" pos:column="30"/></name></expr></argument> )<pos:position pos:line="5221" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5221" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="5223" pos:column="3">/* If there is anything other than a rowset object in memory cell P1,
  ** delete it now and initialize P1 with an empty rowset
  */</comment>
  <if pos:line="5226" pos:column="3">if<condition pos:line="5226" pos:column="5">( <expr><operator pos:line="5226" pos:column="7">(<pos:position pos:line="5226" pos:column="8"/></operator><name><name pos:line="5226" pos:column="8">pIn1<pos:position pos:line="5226" pos:column="12"/></name><operator pos:line="5226" pos:column="12">-&gt;<pos:position pos:line="5226" pos:column="17"/></operator><name pos:line="5226" pos:column="14">flags<pos:position pos:line="5226" pos:column="19"/></name></name> <operator pos:line="5226" pos:column="20">&amp;<pos:position pos:line="5226" pos:column="25"/></operator> <name pos:line="5226" pos:column="22">MEM_RowSet<pos:position pos:line="5226" pos:column="32"/></name><operator pos:line="5226" pos:column="32">)<pos:position pos:line="5226" pos:column="33"/></operator><operator pos:line="5226" pos:column="33">==<pos:position pos:line="5226" pos:column="35"/></operator><literal type="number" pos:line="5226" pos:column="35">0<pos:position pos:line="5226" pos:column="36"/></literal></expr> )<pos:position pos:line="5226" pos:column="38"/></condition><then><block pos:line="5226" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="5227" pos:column="5">sqlite3VdbeMemSetRowSet<pos:position pos:line="5227" pos:column="28"/></name><argument_list pos:line="5227" pos:column="28">(<argument><expr><name pos:line="5227" pos:column="29">pIn1<pos:position pos:line="5227" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5227" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5227" pos:column="35"/></expr_stmt>
    <if pos:line="5228" pos:column="5">if<condition pos:line="5228" pos:column="7">( <expr><operator pos:line="5228" pos:column="9">(<pos:position pos:line="5228" pos:column="10"/></operator><name><name pos:line="5228" pos:column="10">pIn1<pos:position pos:line="5228" pos:column="14"/></name><operator pos:line="5228" pos:column="14">-&gt;<pos:position pos:line="5228" pos:column="19"/></operator><name pos:line="5228" pos:column="16">flags<pos:position pos:line="5228" pos:column="21"/></name></name> <operator pos:line="5228" pos:column="22">&amp;<pos:position pos:line="5228" pos:column="27"/></operator> <name pos:line="5228" pos:column="24">MEM_RowSet<pos:position pos:line="5228" pos:column="34"/></name><operator pos:line="5228" pos:column="34">)<pos:position pos:line="5228" pos:column="35"/></operator><operator pos:line="5228" pos:column="35">==<pos:position pos:line="5228" pos:column="37"/></operator><literal type="number" pos:line="5228" pos:column="37">0<pos:position pos:line="5228" pos:column="38"/></literal></expr> )<pos:position pos:line="5228" pos:column="40"/></condition><then pos:line="5228" pos:column="40"> <block type="pseudo"><goto pos:line="5228" pos:column="41">goto <name pos:line="5228" pos:column="46">no_mem<pos:position pos:line="5228" pos:column="52"/></name>;<pos:position pos:line="5228" pos:column="53"/></goto></block></then></if>
  }<pos:position pos:line="5229" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="5231" pos:column="3">assert<pos:position pos:line="5231" pos:column="9"/></name><argument_list pos:line="5231" pos:column="9">( <argument><expr><name><name pos:line="5231" pos:column="11">pOp<pos:position pos:line="5231" pos:column="14"/></name><operator pos:line="5231" pos:column="14">-&gt;<pos:position pos:line="5231" pos:column="19"/></operator><name pos:line="5231" pos:column="16">p4type<pos:position pos:line="5231" pos:column="22"/></name></name><operator pos:line="5231" pos:column="22">==<pos:position pos:line="5231" pos:column="24"/></operator><name pos:line="5231" pos:column="24">P4_INT32<pos:position pos:line="5231" pos:column="32"/></name></expr></argument> )<pos:position pos:line="5231" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5231" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5232" pos:column="3">assert<pos:position pos:line="5232" pos:column="9"/></name><argument_list pos:line="5232" pos:column="9">( <argument><expr><name pos:line="5232" pos:column="11">iSet<pos:position pos:line="5232" pos:column="15"/></name><operator pos:line="5232" pos:column="15">==<pos:position pos:line="5232" pos:column="17"/></operator><operator pos:line="5232" pos:column="17">-<pos:position pos:line="5232" pos:column="18"/></operator><literal type="number" pos:line="5232" pos:column="18">1<pos:position pos:line="5232" pos:column="19"/></literal> <operator pos:line="5232" pos:column="20">||<pos:position pos:line="5232" pos:column="22"/></operator> <name pos:line="5232" pos:column="23">iSet<pos:position pos:line="5232" pos:column="27"/></name><operator pos:line="5232" pos:column="27">&gt;=<pos:position pos:line="5232" pos:column="32"/></operator><literal type="number" pos:line="5232" pos:column="29">0<pos:position pos:line="5232" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="5232" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5232" pos:column="33"/></expr_stmt>
  <if pos:line="5233" pos:column="3">if<condition pos:line="5233" pos:column="5">( <expr><name pos:line="5233" pos:column="7">iSet<pos:position pos:line="5233" pos:column="11"/></name></expr> )<pos:position pos:line="5233" pos:column="13"/></condition><then><block pos:line="5233" pos:column="13">{
    <expr_stmt><expr><name pos:line="5234" pos:column="5">exists<pos:position pos:line="5234" pos:column="11"/></name> <operator pos:line="5234" pos:column="12">=<pos:position pos:line="5234" pos:column="13"/></operator> <call><name pos:line="5234" pos:column="14">sqlite3RowSetTest<pos:position pos:line="5234" pos:column="31"/></name><argument_list pos:line="5234" pos:column="31">(<argument><expr><name><name pos:line="5234" pos:column="32">pIn1<pos:position pos:line="5234" pos:column="36"/></name><operator pos:line="5234" pos:column="36">-&gt;<pos:position pos:line="5234" pos:column="41"/></operator><name pos:line="5234" pos:column="38">u<pos:position pos:line="5234" pos:column="39"/></name><operator pos:line="5234" pos:column="39">.<pos:position pos:line="5234" pos:column="40"/></operator><name pos:line="5234" pos:column="40">pRowSet<pos:position pos:line="5234" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="5234" pos:column="49">iSet<pos:position pos:line="5234" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="5234" pos:column="55">pIn3<pos:position pos:line="5234" pos:column="59"/></name><operator pos:line="5234" pos:column="59">-&gt;<pos:position pos:line="5234" pos:column="64"/></operator><name pos:line="5234" pos:column="61">u<pos:position pos:line="5234" pos:column="62"/></name><operator pos:line="5234" pos:column="62">.<pos:position pos:line="5234" pos:column="63"/></operator><name pos:line="5234" pos:column="63">i<pos:position pos:line="5234" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="5234" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="5234" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5235" pos:column="5">VdbeBranchTaken<pos:position pos:line="5235" pos:column="20"/></name><argument_list pos:line="5235" pos:column="20">(<argument><expr><name pos:line="5235" pos:column="21">exists<pos:position pos:line="5235" pos:column="27"/></name><operator pos:line="5235" pos:column="27">!=<pos:position pos:line="5235" pos:column="29"/></operator><literal type="number" pos:line="5235" pos:column="29">0<pos:position pos:line="5235" pos:column="30"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="5235" pos:column="31">2<pos:position pos:line="5235" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="5235" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5235" pos:column="34"/></expr_stmt>
    <if pos:line="5236" pos:column="5">if<condition pos:line="5236" pos:column="7">( <expr><name pos:line="5236" pos:column="9">exists<pos:position pos:line="5236" pos:column="15"/></name></expr> )<pos:position pos:line="5236" pos:column="17"/></condition><then pos:line="5236" pos:column="17"> <block type="pseudo"><goto pos:line="5236" pos:column="18">goto <name pos:line="5236" pos:column="23">jump_to_p2<pos:position pos:line="5236" pos:column="33"/></name>;<pos:position pos:line="5236" pos:column="34"/></goto></block></then></if>
  }<pos:position pos:line="5237" pos:column="4"/></block></then></if>
  <if pos:line="5238" pos:column="3">if<condition pos:line="5238" pos:column="5">( <expr><name pos:line="5238" pos:column="7">iSet<pos:position pos:line="5238" pos:column="11"/></name><operator pos:line="5238" pos:column="11">&gt;=<pos:position pos:line="5238" pos:column="16"/></operator><literal type="number" pos:line="5238" pos:column="13">0<pos:position pos:line="5238" pos:column="14"/></literal></expr> )<pos:position pos:line="5238" pos:column="16"/></condition><then><block pos:line="5238" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="5239" pos:column="5">sqlite3RowSetInsert<pos:position pos:line="5239" pos:column="24"/></name><argument_list pos:line="5239" pos:column="24">(<argument><expr><name><name pos:line="5239" pos:column="25">pIn1<pos:position pos:line="5239" pos:column="29"/></name><operator pos:line="5239" pos:column="29">-&gt;<pos:position pos:line="5239" pos:column="34"/></operator><name pos:line="5239" pos:column="31">u<pos:position pos:line="5239" pos:column="32"/></name><operator pos:line="5239" pos:column="32">.<pos:position pos:line="5239" pos:column="33"/></operator><name pos:line="5239" pos:column="33">pRowSet<pos:position pos:line="5239" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5239" pos:column="42">pIn3<pos:position pos:line="5239" pos:column="46"/></name><operator pos:line="5239" pos:column="46">-&gt;<pos:position pos:line="5239" pos:column="51"/></operator><name pos:line="5239" pos:column="48">u<pos:position pos:line="5239" pos:column="49"/></name><operator pos:line="5239" pos:column="49">.<pos:position pos:line="5239" pos:column="50"/></operator><name pos:line="5239" pos:column="50">i<pos:position pos:line="5239" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="5239" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="5239" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="5240" pos:column="4"/></block></then></if>
  <break pos:line="5241" pos:column="3">break;<pos:position pos:line="5241" pos:column="9"/></break>
}<pos:position pos:line="5242" pos:column="2"/></block>


<cpp:ifndef pos:line="5245" pos:column="1">#<cpp:directive pos:line="5245" pos:column="2">ifndef<pos:position pos:line="5245" pos:column="8"/></cpp:directive> <name pos:line="5245" pos:column="9">SQLITE_OMIT_TRIGGER<pos:position pos:line="5245" pos:column="28"/></name></cpp:ifndef>

<comment type="block" pos:line="5247" pos:column="1">/* Opcode: Program P1 P2 P3 P4 P5
**
** Execute the trigger program passed as P4 (type P4_SUBPROGRAM). 
**
** P1 contains the address of the memory cell that contains the first memory 
** cell in an array of values used as arguments to the sub-program. P2 
** contains the address to jump to if the sub-program throws an IGNORE 
** exception using the RAISE() function. Register P3 contains the address 
** of a memory cell in this (the parent) VM that is used to allocate the 
** memory required by the sub-vdbe at runtime.
**
** P4 is a pointer to the VM containing the trigger program.
**
** If P5 is non-zero, then recursive program invocation is enabled.
*/</comment>
<case pos:line="5262" pos:column="1">case <expr><name pos:line="5262" pos:column="6">OP_Program<pos:position pos:line="5262" pos:column="16"/></name></expr>:<pos:position pos:line="5262" pos:column="17"/></case> <block pos:line="5262" pos:column="18">{        <comment type="block" pos:line="5262" pos:column="27">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="5263" pos:column="3">int<pos:position pos:line="5263" pos:column="6"/></name></type> <name pos:line="5263" pos:column="7">nMem<pos:position pos:line="5263" pos:column="11"/></name></decl>;<pos:position pos:line="5263" pos:column="12"/></decl_stmt>               <comment type="block" pos:line="5263" pos:column="27">/* Number of memory registers for sub-program */</comment>
  <decl_stmt><decl><type><name pos:line="5264" pos:column="3">int<pos:position pos:line="5264" pos:column="6"/></name></type> <name pos:line="5264" pos:column="7">nByte<pos:position pos:line="5264" pos:column="12"/></name></decl>;<pos:position pos:line="5264" pos:column="13"/></decl_stmt>              <comment type="block" pos:line="5264" pos:column="27">/* Bytes of runtime space required for sub-program */</comment>
  <decl_stmt><decl><type><name pos:line="5265" pos:column="3">Mem<pos:position pos:line="5265" pos:column="6"/></name> <modifier pos:line="5265" pos:column="7">*<pos:position pos:line="5265" pos:column="8"/></modifier></type><name pos:line="5265" pos:column="8">pRt<pos:position pos:line="5265" pos:column="11"/></name></decl>;<pos:position pos:line="5265" pos:column="12"/></decl_stmt>               <comment type="block" pos:line="5265" pos:column="27">/* Register to allocate runtime space */</comment>
  <decl_stmt><decl><type><name pos:line="5266" pos:column="3">Mem<pos:position pos:line="5266" pos:column="6"/></name> <modifier pos:line="5266" pos:column="7">*<pos:position pos:line="5266" pos:column="8"/></modifier></type><name pos:line="5266" pos:column="8">pMem<pos:position pos:line="5266" pos:column="12"/></name></decl>;<pos:position pos:line="5266" pos:column="13"/></decl_stmt>              <comment type="block" pos:line="5266" pos:column="27">/* Used to iterate through memory cells */</comment>
  <decl_stmt><decl><type><name pos:line="5267" pos:column="3">Mem<pos:position pos:line="5267" pos:column="6"/></name> <modifier pos:line="5267" pos:column="7">*<pos:position pos:line="5267" pos:column="8"/></modifier></type><name pos:line="5267" pos:column="8">pEnd<pos:position pos:line="5267" pos:column="12"/></name></decl>;<pos:position pos:line="5267" pos:column="13"/></decl_stmt>              <comment type="block" pos:line="5267" pos:column="27">/* Last memory cell in new array */</comment>
  <decl_stmt><decl><type><name pos:line="5268" pos:column="3">VdbeFrame<pos:position pos:line="5268" pos:column="12"/></name> <modifier pos:line="5268" pos:column="13">*<pos:position pos:line="5268" pos:column="14"/></modifier></type><name pos:line="5268" pos:column="14">pFrame<pos:position pos:line="5268" pos:column="20"/></name></decl>;<pos:position pos:line="5268" pos:column="21"/></decl_stmt>      <comment type="block" pos:line="5268" pos:column="27">/* New vdbe frame to execute in */</comment>
  <decl_stmt><decl><type><name pos:line="5269" pos:column="3">SubProgram<pos:position pos:line="5269" pos:column="13"/></name> <modifier pos:line="5269" pos:column="14">*<pos:position pos:line="5269" pos:column="15"/></modifier></type><name pos:line="5269" pos:column="15">pProgram<pos:position pos:line="5269" pos:column="23"/></name></decl>;<pos:position pos:line="5269" pos:column="24"/></decl_stmt>   <comment type="block" pos:line="5269" pos:column="27">/* Sub-program to execute */</comment>
  <decl_stmt><decl><type><name pos:line="5270" pos:column="3">void<pos:position pos:line="5270" pos:column="7"/></name> <modifier pos:line="5270" pos:column="8">*<pos:position pos:line="5270" pos:column="9"/></modifier></type><name pos:line="5270" pos:column="9">t<pos:position pos:line="5270" pos:column="10"/></name></decl>;<pos:position pos:line="5270" pos:column="11"/></decl_stmt>                <comment type="block" pos:line="5270" pos:column="27">/* Token identifying trigger */</comment>

  <expr_stmt><expr><name pos:line="5272" pos:column="3">pProgram<pos:position pos:line="5272" pos:column="11"/></name> <operator pos:line="5272" pos:column="12">=<pos:position pos:line="5272" pos:column="13"/></operator> <name><name pos:line="5272" pos:column="14">pOp<pos:position pos:line="5272" pos:column="17"/></name><operator pos:line="5272" pos:column="17">-&gt;<pos:position pos:line="5272" pos:column="22"/></operator><name pos:line="5272" pos:column="19">p4<pos:position pos:line="5272" pos:column="21"/></name><operator pos:line="5272" pos:column="21">.<pos:position pos:line="5272" pos:column="22"/></operator><name pos:line="5272" pos:column="22">pProgram<pos:position pos:line="5272" pos:column="30"/></name></name></expr>;<pos:position pos:line="5272" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5273" pos:column="3">pRt<pos:position pos:line="5273" pos:column="6"/></name> <operator pos:line="5273" pos:column="7">=<pos:position pos:line="5273" pos:column="8"/></operator> <operator pos:line="5273" pos:column="9">&amp;<pos:position pos:line="5273" pos:column="14"/></operator><name><name pos:line="5273" pos:column="10">aMem<pos:position pos:line="5273" pos:column="14"/></name><index pos:line="5273" pos:column="14">[<expr><name><name pos:line="5273" pos:column="15">pOp<pos:position pos:line="5273" pos:column="18"/></name><operator pos:line="5273" pos:column="18">-&gt;<pos:position pos:line="5273" pos:column="23"/></operator><name pos:line="5273" pos:column="20">p3<pos:position pos:line="5273" pos:column="22"/></name></name></expr>]<pos:position pos:line="5273" pos:column="23"/></index></name></expr>;<pos:position pos:line="5273" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5274" pos:column="3">assert<pos:position pos:line="5274" pos:column="9"/></name><argument_list pos:line="5274" pos:column="9">( <argument><expr><name><name pos:line="5274" pos:column="11">pProgram<pos:position pos:line="5274" pos:column="19"/></name><operator pos:line="5274" pos:column="19">-&gt;<pos:position pos:line="5274" pos:column="24"/></operator><name pos:line="5274" pos:column="21">nOp<pos:position pos:line="5274" pos:column="24"/></name></name><operator pos:line="5274" pos:column="24">&gt;<pos:position pos:line="5274" pos:column="28"/></operator><literal type="number" pos:line="5274" pos:column="25">0<pos:position pos:line="5274" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="5274" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5274" pos:column="29"/></expr_stmt>
  
  <comment type="block" pos:line="5276" pos:column="3">/* If the p5 flag is clear, then recursive invocation of triggers is 
  ** disabled for backwards compatibility (p5 is set if this sub-program
  ** is really a trigger, not a foreign key action, and the flag set
  ** and cleared by the "PRAGMA recursive_triggers" command is clear).
  ** 
  ** It is recursive invocation of triggers, at the SQL level, that is 
  ** disabled. In some cases a single trigger may generate more than one 
  ** SubProgram (if the trigger may be executed with more than one different 
  ** ON CONFLICT algorithm). SubProgram structures associated with a
  ** single trigger all have the same value for the SubProgram.token 
  ** variable.  */</comment>
  <if pos:line="5287" pos:column="3">if<condition pos:line="5287" pos:column="5">( <expr><name><name pos:line="5287" pos:column="7">pOp<pos:position pos:line="5287" pos:column="10"/></name><operator pos:line="5287" pos:column="10">-&gt;<pos:position pos:line="5287" pos:column="15"/></operator><name pos:line="5287" pos:column="12">p5<pos:position pos:line="5287" pos:column="14"/></name></name></expr> )<pos:position pos:line="5287" pos:column="16"/></condition><then><block pos:line="5287" pos:column="16">{
    <expr_stmt><expr><name pos:line="5288" pos:column="5">t<pos:position pos:line="5288" pos:column="6"/></name> <operator pos:line="5288" pos:column="7">=<pos:position pos:line="5288" pos:column="8"/></operator> <name><name pos:line="5288" pos:column="9">pProgram<pos:position pos:line="5288" pos:column="17"/></name><operator pos:line="5288" pos:column="17">-&gt;<pos:position pos:line="5288" pos:column="22"/></operator><name pos:line="5288" pos:column="19">token<pos:position pos:line="5288" pos:column="24"/></name></name></expr>;<pos:position pos:line="5288" pos:column="25"/></expr_stmt>
    <for pos:line="5289" pos:column="5">for<control pos:line="5289" pos:column="8">(<init><expr><name pos:line="5289" pos:column="9">pFrame<pos:position pos:line="5289" pos:column="15"/></name><operator pos:line="5289" pos:column="15">=<pos:position pos:line="5289" pos:column="16"/></operator><name><name pos:line="5289" pos:column="16">p<pos:position pos:line="5289" pos:column="17"/></name><operator pos:line="5289" pos:column="17">-&gt;<pos:position pos:line="5289" pos:column="22"/></operator><name pos:line="5289" pos:column="19">pFrame<pos:position pos:line="5289" pos:column="25"/></name></name></expr>;<pos:position pos:line="5289" pos:column="26"/></init> <condition><expr><name pos:line="5289" pos:column="27">pFrame<pos:position pos:line="5289" pos:column="33"/></name> <operator pos:line="5289" pos:column="34">&amp;&amp;<pos:position pos:line="5289" pos:column="44"/></operator> <name><name pos:line="5289" pos:column="37">pFrame<pos:position pos:line="5289" pos:column="43"/></name><operator pos:line="5289" pos:column="43">-&gt;<pos:position pos:line="5289" pos:column="48"/></operator><name pos:line="5289" pos:column="45">token<pos:position pos:line="5289" pos:column="50"/></name></name><operator pos:line="5289" pos:column="50">!=<pos:position pos:line="5289" pos:column="52"/></operator><name pos:line="5289" pos:column="52">t<pos:position pos:line="5289" pos:column="53"/></name></expr>;<pos:position pos:line="5289" pos:column="54"/></condition> <incr><expr><name pos:line="5289" pos:column="55">pFrame<pos:position pos:line="5289" pos:column="61"/></name><operator pos:line="5289" pos:column="61">=<pos:position pos:line="5289" pos:column="62"/></operator><name><name pos:line="5289" pos:column="62">pFrame<pos:position pos:line="5289" pos:column="68"/></name><operator pos:line="5289" pos:column="68">-&gt;<pos:position pos:line="5289" pos:column="73"/></operator><name pos:line="5289" pos:column="70">pParent<pos:position pos:line="5289" pos:column="77"/></name></name></expr></incr>)<pos:position pos:line="5289" pos:column="78"/></control><block type="pseudo"><empty_stmt pos:line="5289" pos:column="78">;<pos:position pos:line="5289" pos:column="79"/></empty_stmt></block></for>
    <if pos:line="5290" pos:column="5">if<condition pos:line="5290" pos:column="7">( <expr><name pos:line="5290" pos:column="9">pFrame<pos:position pos:line="5290" pos:column="15"/></name></expr> )<pos:position pos:line="5290" pos:column="17"/></condition><then pos:line="5290" pos:column="17"> <block type="pseudo"><break pos:line="5290" pos:column="18">break;<pos:position pos:line="5290" pos:column="24"/></break></block></then></if>
  }<pos:position pos:line="5291" pos:column="4"/></block></then></if>

  <if pos:line="5293" pos:column="3">if<condition pos:line="5293" pos:column="5">( <expr><name><name pos:line="5293" pos:column="7">p<pos:position pos:line="5293" pos:column="8"/></name><operator pos:line="5293" pos:column="8">-&gt;<pos:position pos:line="5293" pos:column="13"/></operator><name pos:line="5293" pos:column="10">nFrame<pos:position pos:line="5293" pos:column="16"/></name></name><operator pos:line="5293" pos:column="16">&gt;=<pos:position pos:line="5293" pos:column="21"/></operator><name><name pos:line="5293" pos:column="18">db<pos:position pos:line="5293" pos:column="20"/></name><operator pos:line="5293" pos:column="20">-&gt;<pos:position pos:line="5293" pos:column="25"/></operator><name pos:line="5293" pos:column="22">aLimit<pos:position pos:line="5293" pos:column="28"/></name><index pos:line="5293" pos:column="28">[<expr><name pos:line="5293" pos:column="29">SQLITE_LIMIT_TRIGGER_DEPTH<pos:position pos:line="5293" pos:column="55"/></name></expr>]<pos:position pos:line="5293" pos:column="56"/></index></name></expr> )<pos:position pos:line="5293" pos:column="58"/></condition><then><block pos:line="5293" pos:column="58">{
    <expr_stmt><expr><name pos:line="5294" pos:column="5">rc<pos:position pos:line="5294" pos:column="7"/></name> <operator pos:line="5294" pos:column="8">=<pos:position pos:line="5294" pos:column="9"/></operator> <name pos:line="5294" pos:column="10">SQLITE_ERROR<pos:position pos:line="5294" pos:column="22"/></name></expr>;<pos:position pos:line="5294" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5295" pos:column="5">sqlite3VdbeError<pos:position pos:line="5295" pos:column="21"/></name><argument_list pos:line="5295" pos:column="21">(<argument><expr><name pos:line="5295" pos:column="22">p<pos:position pos:line="5295" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5295" pos:column="25">"too many levels of trigger recursion"<pos:position pos:line="5295" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="5295" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="5295" pos:column="65"/></expr_stmt>
    <goto pos:line="5296" pos:column="5">goto <name pos:line="5296" pos:column="10">abort_due_to_error<pos:position pos:line="5296" pos:column="28"/></name>;<pos:position pos:line="5296" pos:column="29"/></goto>
  }<pos:position pos:line="5297" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="5299" pos:column="3">/* Register pRt is used to store the memory required to save the state
  ** of the current program, and the memory required at runtime to execute
  ** the trigger program. If this trigger has been fired before, then pRt 
  ** is already allocated. Otherwise, it must be initialized.  */</comment>
  <if pos:line="5303" pos:column="3">if<condition pos:line="5303" pos:column="5">( <expr><operator pos:line="5303" pos:column="7">(<pos:position pos:line="5303" pos:column="8"/></operator><name><name pos:line="5303" pos:column="8">pRt<pos:position pos:line="5303" pos:column="11"/></name><operator pos:line="5303" pos:column="11">-&gt;<pos:position pos:line="5303" pos:column="16"/></operator><name pos:line="5303" pos:column="13">flags<pos:position pos:line="5303" pos:column="18"/></name></name><operator pos:line="5303" pos:column="18">&amp;<pos:position pos:line="5303" pos:column="23"/></operator><name pos:line="5303" pos:column="19">MEM_Frame<pos:position pos:line="5303" pos:column="28"/></name><operator pos:line="5303" pos:column="28">)<pos:position pos:line="5303" pos:column="29"/></operator><operator pos:line="5303" pos:column="29">==<pos:position pos:line="5303" pos:column="31"/></operator><literal type="number" pos:line="5303" pos:column="31">0<pos:position pos:line="5303" pos:column="32"/></literal></expr> )<pos:position pos:line="5303" pos:column="34"/></condition><then><block pos:line="5303" pos:column="34">{
    <comment type="block" pos:line="5304" pos:column="5">/* SubProgram.nMem is set to the number of memory cells used by the 
    ** program stored in SubProgram.aOp. As well as these, one memory
    ** cell is required for each cursor used by the program. Set local
    ** variable nMem (and later, VdbeFrame.nChildMem) to this value.
    */</comment>
    <expr_stmt><expr><name pos:line="5309" pos:column="5">nMem<pos:position pos:line="5309" pos:column="9"/></name> <operator pos:line="5309" pos:column="10">=<pos:position pos:line="5309" pos:column="11"/></operator> <name><name pos:line="5309" pos:column="12">pProgram<pos:position pos:line="5309" pos:column="20"/></name><operator pos:line="5309" pos:column="20">-&gt;<pos:position pos:line="5309" pos:column="25"/></operator><name pos:line="5309" pos:column="22">nMem<pos:position pos:line="5309" pos:column="26"/></name></name> <operator pos:line="5309" pos:column="27">+<pos:position pos:line="5309" pos:column="28"/></operator> <name><name pos:line="5309" pos:column="29">pProgram<pos:position pos:line="5309" pos:column="37"/></name><operator pos:line="5309" pos:column="37">-&gt;<pos:position pos:line="5309" pos:column="42"/></operator><name pos:line="5309" pos:column="39">nCsr<pos:position pos:line="5309" pos:column="43"/></name></name></expr>;<pos:position pos:line="5309" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5310" pos:column="5">assert<pos:position pos:line="5310" pos:column="11"/></name><argument_list pos:line="5310" pos:column="11">( <argument><expr><name pos:line="5310" pos:column="13">nMem<pos:position pos:line="5310" pos:column="17"/></name><operator pos:line="5310" pos:column="17">&gt;<pos:position pos:line="5310" pos:column="21"/></operator><literal type="number" pos:line="5310" pos:column="18">0<pos:position pos:line="5310" pos:column="19"/></literal></expr></argument> )<pos:position pos:line="5310" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5310" pos:column="22"/></expr_stmt>
    <if pos:line="5311" pos:column="5">if<condition pos:line="5311" pos:column="7">( <expr><name><name pos:line="5311" pos:column="9">pProgram<pos:position pos:line="5311" pos:column="17"/></name><operator pos:line="5311" pos:column="17">-&gt;<pos:position pos:line="5311" pos:column="22"/></operator><name pos:line="5311" pos:column="19">nCsr<pos:position pos:line="5311" pos:column="23"/></name></name><operator pos:line="5311" pos:column="23">==<pos:position pos:line="5311" pos:column="25"/></operator><literal type="number" pos:line="5311" pos:column="25">0<pos:position pos:line="5311" pos:column="26"/></literal></expr> )<pos:position pos:line="5311" pos:column="28"/></condition><then pos:line="5311" pos:column="28"> <block type="pseudo"><expr_stmt><expr><name pos:line="5311" pos:column="29">nMem<pos:position pos:line="5311" pos:column="33"/></name><operator pos:line="5311" pos:column="33">++<pos:position pos:line="5311" pos:column="35"/></operator></expr>;<pos:position pos:line="5311" pos:column="36"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="5312" pos:column="5">nByte<pos:position pos:line="5312" pos:column="10"/></name> <operator pos:line="5312" pos:column="11">=<pos:position pos:line="5312" pos:column="12"/></operator> <call><name pos:line="5312" pos:column="13">ROUND8<pos:position pos:line="5312" pos:column="19"/></name><argument_list pos:line="5312" pos:column="19">(<argument><expr><sizeof pos:line="5312" pos:column="20">sizeof<argument_list pos:line="5312" pos:column="26">(<argument><expr><name pos:line="5312" pos:column="27">VdbeFrame<pos:position pos:line="5312" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5312" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5312" pos:column="38"/></argument_list></call>
              <operator pos:line="5313" pos:column="15">+<pos:position pos:line="5313" pos:column="16"/></operator> <name pos:line="5313" pos:column="17">nMem<pos:position pos:line="5313" pos:column="21"/></name> <operator pos:line="5313" pos:column="22">*<pos:position pos:line="5313" pos:column="23"/></operator> <sizeof pos:line="5313" pos:column="24">sizeof<argument_list pos:line="5313" pos:column="30">(<argument><expr><name pos:line="5313" pos:column="31">Mem<pos:position pos:line="5313" pos:column="34"/></name></expr></argument>)<pos:position pos:line="5313" pos:column="35"/></argument_list></sizeof>
              <operator pos:line="5314" pos:column="15">+<pos:position pos:line="5314" pos:column="16"/></operator> <name><name pos:line="5314" pos:column="17">pProgram<pos:position pos:line="5314" pos:column="25"/></name><operator pos:line="5314" pos:column="25">-&gt;<pos:position pos:line="5314" pos:column="30"/></operator><name pos:line="5314" pos:column="27">nCsr<pos:position pos:line="5314" pos:column="31"/></name></name> <operator pos:line="5314" pos:column="32">*<pos:position pos:line="5314" pos:column="33"/></operator> <sizeof pos:line="5314" pos:column="34">sizeof<argument_list pos:line="5314" pos:column="40">(<argument><expr><name pos:line="5314" pos:column="41">VdbeCursor<pos:position pos:line="5314" pos:column="51"/></name><operator pos:line="5314" pos:column="51">*<pos:position pos:line="5314" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="5314" pos:column="53"/></argument_list></sizeof>
              <operator pos:line="5315" pos:column="15">+<pos:position pos:line="5315" pos:column="16"/></operator> <operator pos:line="5315" pos:column="17">(<pos:position pos:line="5315" pos:column="18"/></operator><name><name pos:line="5315" pos:column="18">pProgram<pos:position pos:line="5315" pos:column="26"/></name><operator pos:line="5315" pos:column="26">-&gt;<pos:position pos:line="5315" pos:column="31"/></operator><name pos:line="5315" pos:column="28">nOp<pos:position pos:line="5315" pos:column="31"/></name></name> <operator pos:line="5315" pos:column="32">+<pos:position pos:line="5315" pos:column="33"/></operator> <literal type="number" pos:line="5315" pos:column="34">7<pos:position pos:line="5315" pos:column="35"/></literal><operator pos:line="5315" pos:column="35">)<pos:position pos:line="5315" pos:column="36"/></operator><operator pos:line="5315" pos:column="36">/<pos:position pos:line="5315" pos:column="37"/></operator><literal type="number" pos:line="5315" pos:column="37">8<pos:position pos:line="5315" pos:column="38"/></literal></expr>;<pos:position pos:line="5315" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5316" pos:column="5">pFrame<pos:position pos:line="5316" pos:column="11"/></name> <operator pos:line="5316" pos:column="12">=<pos:position pos:line="5316" pos:column="13"/></operator> <call><name pos:line="5316" pos:column="14">sqlite3DbMallocZero<pos:position pos:line="5316" pos:column="33"/></name><argument_list pos:line="5316" pos:column="33">(<argument><expr><name pos:line="5316" pos:column="34">db<pos:position pos:line="5316" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="5316" pos:column="38">nByte<pos:position pos:line="5316" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5316" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5316" pos:column="45"/></expr_stmt>
    <if pos:line="5317" pos:column="5">if<condition pos:line="5317" pos:column="7">( <expr><operator pos:line="5317" pos:column="9">!<pos:position pos:line="5317" pos:column="10"/></operator><name pos:line="5317" pos:column="10">pFrame<pos:position pos:line="5317" pos:column="16"/></name></expr> )<pos:position pos:line="5317" pos:column="18"/></condition><then><block pos:line="5317" pos:column="18">{
      <goto pos:line="5318" pos:column="7">goto <name pos:line="5318" pos:column="12">no_mem<pos:position pos:line="5318" pos:column="18"/></name>;<pos:position pos:line="5318" pos:column="19"/></goto>
    }<pos:position pos:line="5319" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="5320" pos:column="5">sqlite3VdbeMemRelease<pos:position pos:line="5320" pos:column="26"/></name><argument_list pos:line="5320" pos:column="26">(<argument><expr><name pos:line="5320" pos:column="27">pRt<pos:position pos:line="5320" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5320" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5320" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5321" pos:column="5">pRt<pos:position pos:line="5321" pos:column="8"/></name><operator pos:line="5321" pos:column="8">-&gt;<pos:position pos:line="5321" pos:column="13"/></operator><name pos:line="5321" pos:column="10">flags<pos:position pos:line="5321" pos:column="15"/></name></name> <operator pos:line="5321" pos:column="16">=<pos:position pos:line="5321" pos:column="17"/></operator> <name pos:line="5321" pos:column="18">MEM_Frame<pos:position pos:line="5321" pos:column="27"/></name></expr>;<pos:position pos:line="5321" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5322" pos:column="5">pRt<pos:position pos:line="5322" pos:column="8"/></name><operator pos:line="5322" pos:column="8">-&gt;<pos:position pos:line="5322" pos:column="13"/></operator><name pos:line="5322" pos:column="10">u<pos:position pos:line="5322" pos:column="11"/></name><operator pos:line="5322" pos:column="11">.<pos:position pos:line="5322" pos:column="12"/></operator><name pos:line="5322" pos:column="12">pFrame<pos:position pos:line="5322" pos:column="18"/></name></name> <operator pos:line="5322" pos:column="19">=<pos:position pos:line="5322" pos:column="20"/></operator> <name pos:line="5322" pos:column="21">pFrame<pos:position pos:line="5322" pos:column="27"/></name></expr>;<pos:position pos:line="5322" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="5324" pos:column="5">pFrame<pos:position pos:line="5324" pos:column="11"/></name><operator pos:line="5324" pos:column="11">-&gt;<pos:position pos:line="5324" pos:column="16"/></operator><name pos:line="5324" pos:column="13">v<pos:position pos:line="5324" pos:column="14"/></name></name> <operator pos:line="5324" pos:column="15">=<pos:position pos:line="5324" pos:column="16"/></operator> <name pos:line="5324" pos:column="17">p<pos:position pos:line="5324" pos:column="18"/></name></expr>;<pos:position pos:line="5324" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5325" pos:column="5">pFrame<pos:position pos:line="5325" pos:column="11"/></name><operator pos:line="5325" pos:column="11">-&gt;<pos:position pos:line="5325" pos:column="16"/></operator><name pos:line="5325" pos:column="13">nChildMem<pos:position pos:line="5325" pos:column="22"/></name></name> <operator pos:line="5325" pos:column="23">=<pos:position pos:line="5325" pos:column="24"/></operator> <name pos:line="5325" pos:column="25">nMem<pos:position pos:line="5325" pos:column="29"/></name></expr>;<pos:position pos:line="5325" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5326" pos:column="5">pFrame<pos:position pos:line="5326" pos:column="11"/></name><operator pos:line="5326" pos:column="11">-&gt;<pos:position pos:line="5326" pos:column="16"/></operator><name pos:line="5326" pos:column="13">nChildCsr<pos:position pos:line="5326" pos:column="22"/></name></name> <operator pos:line="5326" pos:column="23">=<pos:position pos:line="5326" pos:column="24"/></operator> <name><name pos:line="5326" pos:column="25">pProgram<pos:position pos:line="5326" pos:column="33"/></name><operator pos:line="5326" pos:column="33">-&gt;<pos:position pos:line="5326" pos:column="38"/></operator><name pos:line="5326" pos:column="35">nCsr<pos:position pos:line="5326" pos:column="39"/></name></name></expr>;<pos:position pos:line="5326" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5327" pos:column="5">pFrame<pos:position pos:line="5327" pos:column="11"/></name><operator pos:line="5327" pos:column="11">-&gt;<pos:position pos:line="5327" pos:column="16"/></operator><name pos:line="5327" pos:column="13">pc<pos:position pos:line="5327" pos:column="15"/></name></name> <operator pos:line="5327" pos:column="16">=<pos:position pos:line="5327" pos:column="17"/></operator> <call pos:line="5327" pos:column="18">(<name pos:line="5327" pos:column="19">int<pos:position pos:line="5327" pos:column="22"/></name>)<argument_list pos:line="5327" pos:column="23">(<argument><expr><name pos:line="5327" pos:column="24">pOp<pos:position pos:line="5327" pos:column="27"/></name> <operator pos:line="5327" pos:column="28">-<pos:position pos:line="5327" pos:column="29"/></operator> <name pos:line="5327" pos:column="30">aOp<pos:position pos:line="5327" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5327" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5327" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5328" pos:column="5">pFrame<pos:position pos:line="5328" pos:column="11"/></name><operator pos:line="5328" pos:column="11">-&gt;<pos:position pos:line="5328" pos:column="16"/></operator><name pos:line="5328" pos:column="13">aMem<pos:position pos:line="5328" pos:column="17"/></name></name> <operator pos:line="5328" pos:column="18">=<pos:position pos:line="5328" pos:column="19"/></operator> <name><name pos:line="5328" pos:column="20">p<pos:position pos:line="5328" pos:column="21"/></name><operator pos:line="5328" pos:column="21">-&gt;<pos:position pos:line="5328" pos:column="26"/></operator><name pos:line="5328" pos:column="23">aMem<pos:position pos:line="5328" pos:column="27"/></name></name></expr>;<pos:position pos:line="5328" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5329" pos:column="5">pFrame<pos:position pos:line="5329" pos:column="11"/></name><operator pos:line="5329" pos:column="11">-&gt;<pos:position pos:line="5329" pos:column="16"/></operator><name pos:line="5329" pos:column="13">nMem<pos:position pos:line="5329" pos:column="17"/></name></name> <operator pos:line="5329" pos:column="18">=<pos:position pos:line="5329" pos:column="19"/></operator> <name><name pos:line="5329" pos:column="20">p<pos:position pos:line="5329" pos:column="21"/></name><operator pos:line="5329" pos:column="21">-&gt;<pos:position pos:line="5329" pos:column="26"/></operator><name pos:line="5329" pos:column="23">nMem<pos:position pos:line="5329" pos:column="27"/></name></name></expr>;<pos:position pos:line="5329" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5330" pos:column="5">pFrame<pos:position pos:line="5330" pos:column="11"/></name><operator pos:line="5330" pos:column="11">-&gt;<pos:position pos:line="5330" pos:column="16"/></operator><name pos:line="5330" pos:column="13">apCsr<pos:position pos:line="5330" pos:column="18"/></name></name> <operator pos:line="5330" pos:column="19">=<pos:position pos:line="5330" pos:column="20"/></operator> <name><name pos:line="5330" pos:column="21">p<pos:position pos:line="5330" pos:column="22"/></name><operator pos:line="5330" pos:column="22">-&gt;<pos:position pos:line="5330" pos:column="27"/></operator><name pos:line="5330" pos:column="24">apCsr<pos:position pos:line="5330" pos:column="29"/></name></name></expr>;<pos:position pos:line="5330" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5331" pos:column="5">pFrame<pos:position pos:line="5331" pos:column="11"/></name><operator pos:line="5331" pos:column="11">-&gt;<pos:position pos:line="5331" pos:column="16"/></operator><name pos:line="5331" pos:column="13">nCursor<pos:position pos:line="5331" pos:column="20"/></name></name> <operator pos:line="5331" pos:column="21">=<pos:position pos:line="5331" pos:column="22"/></operator> <name><name pos:line="5331" pos:column="23">p<pos:position pos:line="5331" pos:column="24"/></name><operator pos:line="5331" pos:column="24">-&gt;<pos:position pos:line="5331" pos:column="29"/></operator><name pos:line="5331" pos:column="26">nCursor<pos:position pos:line="5331" pos:column="33"/></name></name></expr>;<pos:position pos:line="5331" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5332" pos:column="5">pFrame<pos:position pos:line="5332" pos:column="11"/></name><operator pos:line="5332" pos:column="11">-&gt;<pos:position pos:line="5332" pos:column="16"/></operator><name pos:line="5332" pos:column="13">aOp<pos:position pos:line="5332" pos:column="16"/></name></name> <operator pos:line="5332" pos:column="17">=<pos:position pos:line="5332" pos:column="18"/></operator> <name><name pos:line="5332" pos:column="19">p<pos:position pos:line="5332" pos:column="20"/></name><operator pos:line="5332" pos:column="20">-&gt;<pos:position pos:line="5332" pos:column="25"/></operator><name pos:line="5332" pos:column="22">aOp<pos:position pos:line="5332" pos:column="25"/></name></name></expr>;<pos:position pos:line="5332" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5333" pos:column="5">pFrame<pos:position pos:line="5333" pos:column="11"/></name><operator pos:line="5333" pos:column="11">-&gt;<pos:position pos:line="5333" pos:column="16"/></operator><name pos:line="5333" pos:column="13">nOp<pos:position pos:line="5333" pos:column="16"/></name></name> <operator pos:line="5333" pos:column="17">=<pos:position pos:line="5333" pos:column="18"/></operator> <name><name pos:line="5333" pos:column="19">p<pos:position pos:line="5333" pos:column="20"/></name><operator pos:line="5333" pos:column="20">-&gt;<pos:position pos:line="5333" pos:column="25"/></operator><name pos:line="5333" pos:column="22">nOp<pos:position pos:line="5333" pos:column="25"/></name></name></expr>;<pos:position pos:line="5333" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5334" pos:column="5">pFrame<pos:position pos:line="5334" pos:column="11"/></name><operator pos:line="5334" pos:column="11">-&gt;<pos:position pos:line="5334" pos:column="16"/></operator><name pos:line="5334" pos:column="13">token<pos:position pos:line="5334" pos:column="18"/></name></name> <operator pos:line="5334" pos:column="19">=<pos:position pos:line="5334" pos:column="20"/></operator> <name><name pos:line="5334" pos:column="21">pProgram<pos:position pos:line="5334" pos:column="29"/></name><operator pos:line="5334" pos:column="29">-&gt;<pos:position pos:line="5334" pos:column="34"/></operator><name pos:line="5334" pos:column="31">token<pos:position pos:line="5334" pos:column="36"/></name></name></expr>;<pos:position pos:line="5334" pos:column="37"/></expr_stmt>
<cpp:ifdef pos:line="5335" pos:column="1">#<cpp:directive pos:line="5335" pos:column="2">ifdef<pos:position pos:line="5335" pos:column="7"/></cpp:directive> <name pos:line="5335" pos:column="8">SQLITE_ENABLE_STMT_SCANSTATUS<pos:position pos:line="5335" pos:column="37"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="5336" pos:column="5">pFrame<pos:position pos:line="5336" pos:column="11"/></name><operator pos:line="5336" pos:column="11">-&gt;<pos:position pos:line="5336" pos:column="16"/></operator><name pos:line="5336" pos:column="13">anExec<pos:position pos:line="5336" pos:column="19"/></name></name> <operator pos:line="5336" pos:column="20">=<pos:position pos:line="5336" pos:column="21"/></operator> <name><name pos:line="5336" pos:column="22">p<pos:position pos:line="5336" pos:column="23"/></name><operator pos:line="5336" pos:column="23">-&gt;<pos:position pos:line="5336" pos:column="28"/></operator><name pos:line="5336" pos:column="25">anExec<pos:position pos:line="5336" pos:column="31"/></name></name></expr>;<pos:position pos:line="5336" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="5337" pos:column="1">#<cpp:directive pos:line="5337" pos:column="2">endif<pos:position pos:line="5337" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="5339" pos:column="5">pEnd<pos:position pos:line="5339" pos:column="9"/></name> <operator pos:line="5339" pos:column="10">=<pos:position pos:line="5339" pos:column="11"/></operator> <operator pos:line="5339" pos:column="12">&amp;<pos:position pos:line="5339" pos:column="17"/></operator><call><name pos:line="5339" pos:column="13">VdbeFrameMem<pos:position pos:line="5339" pos:column="25"/></name><argument_list pos:line="5339" pos:column="25">(<argument><expr><name pos:line="5339" pos:column="26">pFrame<pos:position pos:line="5339" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5339" pos:column="33"/></argument_list></call><index pos:line="5339" pos:column="33">[<expr><name><name pos:line="5339" pos:column="34">pFrame<pos:position pos:line="5339" pos:column="40"/></name><operator pos:line="5339" pos:column="40">-&gt;<pos:position pos:line="5339" pos:column="45"/></operator><name pos:line="5339" pos:column="42">nChildMem<pos:position pos:line="5339" pos:column="51"/></name></name></expr>]<pos:position pos:line="5339" pos:column="52"/></index></expr>;<pos:position pos:line="5339" pos:column="53"/></expr_stmt>
    <for pos:line="5340" pos:column="5">for<control pos:line="5340" pos:column="8">(<init><expr><name pos:line="5340" pos:column="9">pMem<pos:position pos:line="5340" pos:column="13"/></name><operator pos:line="5340" pos:column="13">=<pos:position pos:line="5340" pos:column="14"/></operator><call><name pos:line="5340" pos:column="14">VdbeFrameMem<pos:position pos:line="5340" pos:column="26"/></name><argument_list pos:line="5340" pos:column="26">(<argument><expr><name pos:line="5340" pos:column="27">pFrame<pos:position pos:line="5340" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5340" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5340" pos:column="35"/></init> <condition><expr><name pos:line="5340" pos:column="36">pMem<pos:position pos:line="5340" pos:column="40"/></name><operator pos:line="5340" pos:column="40">!=<pos:position pos:line="5340" pos:column="42"/></operator><name pos:line="5340" pos:column="42">pEnd<pos:position pos:line="5340" pos:column="46"/></name></expr>;<pos:position pos:line="5340" pos:column="47"/></condition> <incr><expr><name pos:line="5340" pos:column="48">pMem<pos:position pos:line="5340" pos:column="52"/></name><operator pos:line="5340" pos:column="52">++<pos:position pos:line="5340" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="5340" pos:column="55"/></control><block pos:line="5340" pos:column="55">{
      <expr_stmt><expr><name><name pos:line="5341" pos:column="7">pMem<pos:position pos:line="5341" pos:column="11"/></name><operator pos:line="5341" pos:column="11">-&gt;<pos:position pos:line="5341" pos:column="16"/></operator><name pos:line="5341" pos:column="13">flags<pos:position pos:line="5341" pos:column="18"/></name></name> <operator pos:line="5341" pos:column="19">=<pos:position pos:line="5341" pos:column="20"/></operator> <name pos:line="5341" pos:column="21">MEM_Undefined<pos:position pos:line="5341" pos:column="34"/></name></expr>;<pos:position pos:line="5341" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="5342" pos:column="7">pMem<pos:position pos:line="5342" pos:column="11"/></name><operator pos:line="5342" pos:column="11">-&gt;<pos:position pos:line="5342" pos:column="16"/></operator><name pos:line="5342" pos:column="13">db<pos:position pos:line="5342" pos:column="15"/></name></name> <operator pos:line="5342" pos:column="16">=<pos:position pos:line="5342" pos:column="17"/></operator> <name pos:line="5342" pos:column="18">db<pos:position pos:line="5342" pos:column="20"/></name></expr>;<pos:position pos:line="5342" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="5343" pos:column="6"/></block></for>
  }<pos:position pos:line="5344" pos:column="4"/></block></then><else pos:line="5344" pos:column="4">else<block pos:line="5344" pos:column="8">{
    <expr_stmt><expr><name pos:line="5345" pos:column="5">pFrame<pos:position pos:line="5345" pos:column="11"/></name> <operator pos:line="5345" pos:column="12">=<pos:position pos:line="5345" pos:column="13"/></operator> <name><name pos:line="5345" pos:column="14">pRt<pos:position pos:line="5345" pos:column="17"/></name><operator pos:line="5345" pos:column="17">-&gt;<pos:position pos:line="5345" pos:column="22"/></operator><name pos:line="5345" pos:column="19">u<pos:position pos:line="5345" pos:column="20"/></name><operator pos:line="5345" pos:column="20">.<pos:position pos:line="5345" pos:column="21"/></operator><name pos:line="5345" pos:column="21">pFrame<pos:position pos:line="5345" pos:column="27"/></name></name></expr>;<pos:position pos:line="5345" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5346" pos:column="5">assert<pos:position pos:line="5346" pos:column="11"/></name><argument_list pos:line="5346" pos:column="11">( <argument><expr><name><name pos:line="5346" pos:column="13">pProgram<pos:position pos:line="5346" pos:column="21"/></name><operator pos:line="5346" pos:column="21">-&gt;<pos:position pos:line="5346" pos:column="26"/></operator><name pos:line="5346" pos:column="23">nMem<pos:position pos:line="5346" pos:column="27"/></name></name><operator pos:line="5346" pos:column="27">+<pos:position pos:line="5346" pos:column="28"/></operator><name><name pos:line="5346" pos:column="28">pProgram<pos:position pos:line="5346" pos:column="36"/></name><operator pos:line="5346" pos:column="36">-&gt;<pos:position pos:line="5346" pos:column="41"/></operator><name pos:line="5346" pos:column="38">nCsr<pos:position pos:line="5346" pos:column="42"/></name></name><operator pos:line="5346" pos:column="42">==<pos:position pos:line="5346" pos:column="44"/></operator><name><name pos:line="5346" pos:column="44">pFrame<pos:position pos:line="5346" pos:column="50"/></name><operator pos:line="5346" pos:column="50">-&gt;<pos:position pos:line="5346" pos:column="55"/></operator><name pos:line="5346" pos:column="52">nChildMem<pos:position pos:line="5346" pos:column="61"/></name></name> 
        <operator pos:line="5347" pos:column="9">||<pos:position pos:line="5347" pos:column="11"/></operator> <operator pos:line="5347" pos:column="12">(<pos:position pos:line="5347" pos:column="13"/></operator><name><name pos:line="5347" pos:column="13">pProgram<pos:position pos:line="5347" pos:column="21"/></name><operator pos:line="5347" pos:column="21">-&gt;<pos:position pos:line="5347" pos:column="26"/></operator><name pos:line="5347" pos:column="23">nCsr<pos:position pos:line="5347" pos:column="27"/></name></name><operator pos:line="5347" pos:column="27">==<pos:position pos:line="5347" pos:column="29"/></operator><literal type="number" pos:line="5347" pos:column="29">0<pos:position pos:line="5347" pos:column="30"/></literal> <operator pos:line="5347" pos:column="31">&amp;&amp;<pos:position pos:line="5347" pos:column="41"/></operator> <name><name pos:line="5347" pos:column="34">pProgram<pos:position pos:line="5347" pos:column="42"/></name><operator pos:line="5347" pos:column="42">-&gt;<pos:position pos:line="5347" pos:column="47"/></operator><name pos:line="5347" pos:column="44">nMem<pos:position pos:line="5347" pos:column="48"/></name></name><operator pos:line="5347" pos:column="48">+<pos:position pos:line="5347" pos:column="49"/></operator><literal type="number" pos:line="5347" pos:column="49">1<pos:position pos:line="5347" pos:column="50"/></literal><operator pos:line="5347" pos:column="50">==<pos:position pos:line="5347" pos:column="52"/></operator><name><name pos:line="5347" pos:column="52">pFrame<pos:position pos:line="5347" pos:column="58"/></name><operator pos:line="5347" pos:column="58">-&gt;<pos:position pos:line="5347" pos:column="63"/></operator><name pos:line="5347" pos:column="60">nChildMem<pos:position pos:line="5347" pos:column="69"/></name></name><operator pos:line="5347" pos:column="69">)<pos:position pos:line="5347" pos:column="70"/></operator></expr></argument> )<pos:position pos:line="5347" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="5347" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5348" pos:column="5">assert<pos:position pos:line="5348" pos:column="11"/></name><argument_list pos:line="5348" pos:column="11">( <argument><expr><name><name pos:line="5348" pos:column="13">pProgram<pos:position pos:line="5348" pos:column="21"/></name><operator pos:line="5348" pos:column="21">-&gt;<pos:position pos:line="5348" pos:column="26"/></operator><name pos:line="5348" pos:column="23">nCsr<pos:position pos:line="5348" pos:column="27"/></name></name><operator pos:line="5348" pos:column="27">==<pos:position pos:line="5348" pos:column="29"/></operator><name><name pos:line="5348" pos:column="29">pFrame<pos:position pos:line="5348" pos:column="35"/></name><operator pos:line="5348" pos:column="35">-&gt;<pos:position pos:line="5348" pos:column="40"/></operator><name pos:line="5348" pos:column="37">nChildCsr<pos:position pos:line="5348" pos:column="46"/></name></name></expr></argument> )<pos:position pos:line="5348" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5348" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5349" pos:column="5">assert<pos:position pos:line="5349" pos:column="11"/></name><argument_list pos:line="5349" pos:column="11">( <argument><expr><call pos:line="5349" pos:column="13">(<name pos:line="5349" pos:column="14">int<pos:position pos:line="5349" pos:column="17"/></name>)<argument_list pos:line="5349" pos:column="18">(<argument><expr><name pos:line="5349" pos:column="19">pOp<pos:position pos:line="5349" pos:column="22"/></name> <operator pos:line="5349" pos:column="23">-<pos:position pos:line="5349" pos:column="24"/></operator> <name pos:line="5349" pos:column="25">aOp<pos:position pos:line="5349" pos:column="28"/></name></expr></argument>)<pos:position pos:line="5349" pos:column="29"/></argument_list></call><operator pos:line="5349" pos:column="29">==<pos:position pos:line="5349" pos:column="31"/></operator><name><name pos:line="5349" pos:column="31">pFrame<pos:position pos:line="5349" pos:column="37"/></name><operator pos:line="5349" pos:column="37">-&gt;<pos:position pos:line="5349" pos:column="42"/></operator><name pos:line="5349" pos:column="39">pc<pos:position pos:line="5349" pos:column="41"/></name></name></expr></argument> )<pos:position pos:line="5349" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="5349" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="5350" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name><name pos:line="5352" pos:column="3">p<pos:position pos:line="5352" pos:column="4"/></name><operator pos:line="5352" pos:column="4">-&gt;<pos:position pos:line="5352" pos:column="9"/></operator><name pos:line="5352" pos:column="6">nFrame<pos:position pos:line="5352" pos:column="12"/></name></name><operator pos:line="5352" pos:column="12">++<pos:position pos:line="5352" pos:column="14"/></operator></expr>;<pos:position pos:line="5352" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5353" pos:column="3">pFrame<pos:position pos:line="5353" pos:column="9"/></name><operator pos:line="5353" pos:column="9">-&gt;<pos:position pos:line="5353" pos:column="14"/></operator><name pos:line="5353" pos:column="11">pParent<pos:position pos:line="5353" pos:column="18"/></name></name> <operator pos:line="5353" pos:column="19">=<pos:position pos:line="5353" pos:column="20"/></operator> <name><name pos:line="5353" pos:column="21">p<pos:position pos:line="5353" pos:column="22"/></name><operator pos:line="5353" pos:column="22">-&gt;<pos:position pos:line="5353" pos:column="27"/></operator><name pos:line="5353" pos:column="24">pFrame<pos:position pos:line="5353" pos:column="30"/></name></name></expr>;<pos:position pos:line="5353" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5354" pos:column="3">pFrame<pos:position pos:line="5354" pos:column="9"/></name><operator pos:line="5354" pos:column="9">-&gt;<pos:position pos:line="5354" pos:column="14"/></operator><name pos:line="5354" pos:column="11">lastRowid<pos:position pos:line="5354" pos:column="20"/></name></name> <operator pos:line="5354" pos:column="21">=<pos:position pos:line="5354" pos:column="22"/></operator> <name><name pos:line="5354" pos:column="23">db<pos:position pos:line="5354" pos:column="25"/></name><operator pos:line="5354" pos:column="25">-&gt;<pos:position pos:line="5354" pos:column="30"/></operator><name pos:line="5354" pos:column="27">lastRowid<pos:position pos:line="5354" pos:column="36"/></name></name></expr>;<pos:position pos:line="5354" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5355" pos:column="3">pFrame<pos:position pos:line="5355" pos:column="9"/></name><operator pos:line="5355" pos:column="9">-&gt;<pos:position pos:line="5355" pos:column="14"/></operator><name pos:line="5355" pos:column="11">nChange<pos:position pos:line="5355" pos:column="18"/></name></name> <operator pos:line="5355" pos:column="19">=<pos:position pos:line="5355" pos:column="20"/></operator> <name><name pos:line="5355" pos:column="21">p<pos:position pos:line="5355" pos:column="22"/></name><operator pos:line="5355" pos:column="22">-&gt;<pos:position pos:line="5355" pos:column="27"/></operator><name pos:line="5355" pos:column="24">nChange<pos:position pos:line="5355" pos:column="31"/></name></name></expr>;<pos:position pos:line="5355" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5356" pos:column="3">pFrame<pos:position pos:line="5356" pos:column="9"/></name><operator pos:line="5356" pos:column="9">-&gt;<pos:position pos:line="5356" pos:column="14"/></operator><name pos:line="5356" pos:column="11">nDbChange<pos:position pos:line="5356" pos:column="20"/></name></name> <operator pos:line="5356" pos:column="21">=<pos:position pos:line="5356" pos:column="22"/></operator> <name><name pos:line="5356" pos:column="23">p<pos:position pos:line="5356" pos:column="24"/></name><operator pos:line="5356" pos:column="24">-&gt;<pos:position pos:line="5356" pos:column="29"/></operator><name pos:line="5356" pos:column="26">db<pos:position pos:line="5356" pos:column="28"/></name><operator pos:line="5356" pos:column="28">-&gt;<pos:position pos:line="5356" pos:column="33"/></operator><name pos:line="5356" pos:column="30">nChange<pos:position pos:line="5356" pos:column="37"/></name></name></expr>;<pos:position pos:line="5356" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5357" pos:column="3">assert<pos:position pos:line="5357" pos:column="9"/></name><argument_list pos:line="5357" pos:column="9">( <argument><expr><name><name pos:line="5357" pos:column="11">pFrame<pos:position pos:line="5357" pos:column="17"/></name><operator pos:line="5357" pos:column="17">-&gt;<pos:position pos:line="5357" pos:column="22"/></operator><name pos:line="5357" pos:column="19">pAuxData<pos:position pos:line="5357" pos:column="27"/></name></name><operator pos:line="5357" pos:column="27">==<pos:position pos:line="5357" pos:column="29"/></operator><literal type="number" pos:line="5357" pos:column="29">0<pos:position pos:line="5357" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="5357" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5357" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5358" pos:column="3">pFrame<pos:position pos:line="5358" pos:column="9"/></name><operator pos:line="5358" pos:column="9">-&gt;<pos:position pos:line="5358" pos:column="14"/></operator><name pos:line="5358" pos:column="11">pAuxData<pos:position pos:line="5358" pos:column="19"/></name></name> <operator pos:line="5358" pos:column="20">=<pos:position pos:line="5358" pos:column="21"/></operator> <name><name pos:line="5358" pos:column="22">p<pos:position pos:line="5358" pos:column="23"/></name><operator pos:line="5358" pos:column="23">-&gt;<pos:position pos:line="5358" pos:column="28"/></operator><name pos:line="5358" pos:column="25">pAuxData<pos:position pos:line="5358" pos:column="33"/></name></name></expr>;<pos:position pos:line="5358" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5359" pos:column="3">p<pos:position pos:line="5359" pos:column="4"/></name><operator pos:line="5359" pos:column="4">-&gt;<pos:position pos:line="5359" pos:column="9"/></operator><name pos:line="5359" pos:column="6">pAuxData<pos:position pos:line="5359" pos:column="14"/></name></name> <operator pos:line="5359" pos:column="15">=<pos:position pos:line="5359" pos:column="16"/></operator> <literal type="number" pos:line="5359" pos:column="17">0<pos:position pos:line="5359" pos:column="18"/></literal></expr>;<pos:position pos:line="5359" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5360" pos:column="3">p<pos:position pos:line="5360" pos:column="4"/></name><operator pos:line="5360" pos:column="4">-&gt;<pos:position pos:line="5360" pos:column="9"/></operator><name pos:line="5360" pos:column="6">nChange<pos:position pos:line="5360" pos:column="13"/></name></name> <operator pos:line="5360" pos:column="14">=<pos:position pos:line="5360" pos:column="15"/></operator> <literal type="number" pos:line="5360" pos:column="16">0<pos:position pos:line="5360" pos:column="17"/></literal></expr>;<pos:position pos:line="5360" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5361" pos:column="3">p<pos:position pos:line="5361" pos:column="4"/></name><operator pos:line="5361" pos:column="4">-&gt;<pos:position pos:line="5361" pos:column="9"/></operator><name pos:line="5361" pos:column="6">pFrame<pos:position pos:line="5361" pos:column="12"/></name></name> <operator pos:line="5361" pos:column="13">=<pos:position pos:line="5361" pos:column="14"/></operator> <name pos:line="5361" pos:column="15">pFrame<pos:position pos:line="5361" pos:column="21"/></name></expr>;<pos:position pos:line="5361" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5362" pos:column="3">p<pos:position pos:line="5362" pos:column="4"/></name><operator pos:line="5362" pos:column="4">-&gt;<pos:position pos:line="5362" pos:column="9"/></operator><name pos:line="5362" pos:column="6">aMem<pos:position pos:line="5362" pos:column="10"/></name></name> <operator pos:line="5362" pos:column="11">=<pos:position pos:line="5362" pos:column="12"/></operator> <name pos:line="5362" pos:column="13">aMem<pos:position pos:line="5362" pos:column="17"/></name> <operator pos:line="5362" pos:column="18">=<pos:position pos:line="5362" pos:column="19"/></operator> <call><name pos:line="5362" pos:column="20">VdbeFrameMem<pos:position pos:line="5362" pos:column="32"/></name><argument_list pos:line="5362" pos:column="32">(<argument><expr><name pos:line="5362" pos:column="33">pFrame<pos:position pos:line="5362" pos:column="39"/></name></expr></argument>)<pos:position pos:line="5362" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5362" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5363" pos:column="3">p<pos:position pos:line="5363" pos:column="4"/></name><operator pos:line="5363" pos:column="4">-&gt;<pos:position pos:line="5363" pos:column="9"/></operator><name pos:line="5363" pos:column="6">nMem<pos:position pos:line="5363" pos:column="10"/></name></name> <operator pos:line="5363" pos:column="11">=<pos:position pos:line="5363" pos:column="12"/></operator> <name><name pos:line="5363" pos:column="13">pFrame<pos:position pos:line="5363" pos:column="19"/></name><operator pos:line="5363" pos:column="19">-&gt;<pos:position pos:line="5363" pos:column="24"/></operator><name pos:line="5363" pos:column="21">nChildMem<pos:position pos:line="5363" pos:column="30"/></name></name></expr>;<pos:position pos:line="5363" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5364" pos:column="3">p<pos:position pos:line="5364" pos:column="4"/></name><operator pos:line="5364" pos:column="4">-&gt;<pos:position pos:line="5364" pos:column="9"/></operator><name pos:line="5364" pos:column="6">nCursor<pos:position pos:line="5364" pos:column="13"/></name></name> <operator pos:line="5364" pos:column="14">=<pos:position pos:line="5364" pos:column="15"/></operator> <operator pos:line="5364" pos:column="16">(<pos:position pos:line="5364" pos:column="17"/></operator><name pos:line="5364" pos:column="17">u16<pos:position pos:line="5364" pos:column="20"/></name><operator pos:line="5364" pos:column="20">)<pos:position pos:line="5364" pos:column="21"/></operator><name><name pos:line="5364" pos:column="21">pFrame<pos:position pos:line="5364" pos:column="27"/></name><operator pos:line="5364" pos:column="27">-&gt;<pos:position pos:line="5364" pos:column="32"/></operator><name pos:line="5364" pos:column="29">nChildCsr<pos:position pos:line="5364" pos:column="38"/></name></name></expr>;<pos:position pos:line="5364" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5365" pos:column="3">p<pos:position pos:line="5365" pos:column="4"/></name><operator pos:line="5365" pos:column="4">-&gt;<pos:position pos:line="5365" pos:column="9"/></operator><name pos:line="5365" pos:column="6">apCsr<pos:position pos:line="5365" pos:column="11"/></name></name> <operator pos:line="5365" pos:column="12">=<pos:position pos:line="5365" pos:column="13"/></operator> <operator pos:line="5365" pos:column="14">(<pos:position pos:line="5365" pos:column="15"/></operator><name pos:line="5365" pos:column="15">VdbeCursor<pos:position pos:line="5365" pos:column="25"/></name> <operator pos:line="5365" pos:column="26">*<pos:position pos:line="5365" pos:column="27"/></operator><operator pos:line="5365" pos:column="27">*<pos:position pos:line="5365" pos:column="28"/></operator><operator pos:line="5365" pos:column="28">)<pos:position pos:line="5365" pos:column="29"/></operator><operator pos:line="5365" pos:column="29">&amp;<pos:position pos:line="5365" pos:column="34"/></operator><name><name pos:line="5365" pos:column="30">aMem<pos:position pos:line="5365" pos:column="34"/></name><index pos:line="5365" pos:column="34">[<expr><name><name pos:line="5365" pos:column="35">p<pos:position pos:line="5365" pos:column="36"/></name><operator pos:line="5365" pos:column="36">-&gt;<pos:position pos:line="5365" pos:column="41"/></operator><name pos:line="5365" pos:column="38">nMem<pos:position pos:line="5365" pos:column="42"/></name></name></expr>]<pos:position pos:line="5365" pos:column="43"/></index></name></expr>;<pos:position pos:line="5365" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5366" pos:column="3">pFrame<pos:position pos:line="5366" pos:column="9"/></name><operator pos:line="5366" pos:column="9">-&gt;<pos:position pos:line="5366" pos:column="14"/></operator><name pos:line="5366" pos:column="11">aOnce<pos:position pos:line="5366" pos:column="16"/></name></name> <operator pos:line="5366" pos:column="17">=<pos:position pos:line="5366" pos:column="18"/></operator> <operator pos:line="5366" pos:column="19">(<pos:position pos:line="5366" pos:column="20"/></operator><name pos:line="5366" pos:column="20">u8<pos:position pos:line="5366" pos:column="22"/></name><operator pos:line="5366" pos:column="22">*<pos:position pos:line="5366" pos:column="23"/></operator><operator pos:line="5366" pos:column="23">)<pos:position pos:line="5366" pos:column="24"/></operator><operator pos:line="5366" pos:column="24">&amp;<pos:position pos:line="5366" pos:column="29"/></operator><name><name pos:line="5366" pos:column="25">p<pos:position pos:line="5366" pos:column="26"/></name><operator pos:line="5366" pos:column="26">-&gt;<pos:position pos:line="5366" pos:column="31"/></operator><name pos:line="5366" pos:column="28">apCsr<pos:position pos:line="5366" pos:column="33"/></name><index pos:line="5366" pos:column="33">[<expr><name><name pos:line="5366" pos:column="34">pProgram<pos:position pos:line="5366" pos:column="42"/></name><operator pos:line="5366" pos:column="42">-&gt;<pos:position pos:line="5366" pos:column="47"/></operator><name pos:line="5366" pos:column="44">nCsr<pos:position pos:line="5366" pos:column="48"/></name></name></expr>]<pos:position pos:line="5366" pos:column="49"/></index></name></expr>;<pos:position pos:line="5366" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5367" pos:column="3">memset<pos:position pos:line="5367" pos:column="9"/></name><argument_list pos:line="5367" pos:column="9">(<argument><expr><name><name pos:line="5367" pos:column="10">pFrame<pos:position pos:line="5367" pos:column="16"/></name><operator pos:line="5367" pos:column="16">-&gt;<pos:position pos:line="5367" pos:column="21"/></operator><name pos:line="5367" pos:column="18">aOnce<pos:position pos:line="5367" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="5367" pos:column="25">0<pos:position pos:line="5367" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="5367" pos:column="28">(<pos:position pos:line="5367" pos:column="29"/></operator><name><name pos:line="5367" pos:column="29">pProgram<pos:position pos:line="5367" pos:column="37"/></name><operator pos:line="5367" pos:column="37">-&gt;<pos:position pos:line="5367" pos:column="42"/></operator><name pos:line="5367" pos:column="39">nOp<pos:position pos:line="5367" pos:column="42"/></name></name> <operator pos:line="5367" pos:column="43">+<pos:position pos:line="5367" pos:column="44"/></operator> <literal type="number" pos:line="5367" pos:column="45">7<pos:position pos:line="5367" pos:column="46"/></literal><operator pos:line="5367" pos:column="46">)<pos:position pos:line="5367" pos:column="47"/></operator><operator pos:line="5367" pos:column="47">/<pos:position pos:line="5367" pos:column="48"/></operator><literal type="number" pos:line="5367" pos:column="48">8<pos:position pos:line="5367" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="5367" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5367" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5368" pos:column="3">p<pos:position pos:line="5368" pos:column="4"/></name><operator pos:line="5368" pos:column="4">-&gt;<pos:position pos:line="5368" pos:column="9"/></operator><name pos:line="5368" pos:column="6">aOp<pos:position pos:line="5368" pos:column="9"/></name></name> <operator pos:line="5368" pos:column="10">=<pos:position pos:line="5368" pos:column="11"/></operator> <name pos:line="5368" pos:column="12">aOp<pos:position pos:line="5368" pos:column="15"/></name> <operator pos:line="5368" pos:column="16">=<pos:position pos:line="5368" pos:column="17"/></operator> <name><name pos:line="5368" pos:column="18">pProgram<pos:position pos:line="5368" pos:column="26"/></name><operator pos:line="5368" pos:column="26">-&gt;<pos:position pos:line="5368" pos:column="31"/></operator><name pos:line="5368" pos:column="28">aOp<pos:position pos:line="5368" pos:column="31"/></name></name></expr>;<pos:position pos:line="5368" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5369" pos:column="3">p<pos:position pos:line="5369" pos:column="4"/></name><operator pos:line="5369" pos:column="4">-&gt;<pos:position pos:line="5369" pos:column="9"/></operator><name pos:line="5369" pos:column="6">nOp<pos:position pos:line="5369" pos:column="9"/></name></name> <operator pos:line="5369" pos:column="10">=<pos:position pos:line="5369" pos:column="11"/></operator> <name><name pos:line="5369" pos:column="12">pProgram<pos:position pos:line="5369" pos:column="20"/></name><operator pos:line="5369" pos:column="20">-&gt;<pos:position pos:line="5369" pos:column="25"/></operator><name pos:line="5369" pos:column="22">nOp<pos:position pos:line="5369" pos:column="25"/></name></name></expr>;<pos:position pos:line="5369" pos:column="26"/></expr_stmt>
<cpp:ifdef pos:line="5370" pos:column="1">#<cpp:directive pos:line="5370" pos:column="2">ifdef<pos:position pos:line="5370" pos:column="7"/></cpp:directive> <name pos:line="5370" pos:column="8">SQLITE_ENABLE_STMT_SCANSTATUS<pos:position pos:line="5370" pos:column="37"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="5371" pos:column="3">p<pos:position pos:line="5371" pos:column="4"/></name><operator pos:line="5371" pos:column="4">-&gt;<pos:position pos:line="5371" pos:column="9"/></operator><name pos:line="5371" pos:column="6">anExec<pos:position pos:line="5371" pos:column="12"/></name></name> <operator pos:line="5371" pos:column="13">=<pos:position pos:line="5371" pos:column="14"/></operator> <literal type="number" pos:line="5371" pos:column="15">0<pos:position pos:line="5371" pos:column="16"/></literal></expr>;<pos:position pos:line="5371" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="5372" pos:column="1">#<cpp:directive pos:line="5372" pos:column="2">endif<pos:position pos:line="5372" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="5373" pos:column="3">pOp<pos:position pos:line="5373" pos:column="6"/></name> <operator pos:line="5373" pos:column="7">=<pos:position pos:line="5373" pos:column="8"/></operator> <operator pos:line="5373" pos:column="9">&amp;<pos:position pos:line="5373" pos:column="14"/></operator><name><name pos:line="5373" pos:column="10">aOp<pos:position pos:line="5373" pos:column="13"/></name><index pos:line="5373" pos:column="13">[<expr><operator pos:line="5373" pos:column="14">-<pos:position pos:line="5373" pos:column="15"/></operator><literal type="number" pos:line="5373" pos:column="15">1<pos:position pos:line="5373" pos:column="16"/></literal></expr>]<pos:position pos:line="5373" pos:column="17"/></index></name></expr>;<pos:position pos:line="5373" pos:column="18"/></expr_stmt>

  <break pos:line="5375" pos:column="3">break;<pos:position pos:line="5375" pos:column="9"/></break>
}<pos:position pos:line="5376" pos:column="2"/></block>

<comment type="block" pos:line="5378" pos:column="1">/* Opcode: Param P1 P2 * * *
**
** This opcode is only ever present in sub-programs called via the 
** OP_Program instruction. Copy a value currently stored in a memory 
** cell of the calling (parent) frame to cell P2 in the current frames 
** address space. This is used by trigger programs to access the new.* 
** and old.* values.
**
** The address of the cell in the parent frame is determined by adding
** the value of the P1 argument to the value of the P1 argument to the
** calling OP_Program instruction.
*/</comment>
<case pos:line="5390" pos:column="1">case <expr><name pos:line="5390" pos:column="6">OP_Param<pos:position pos:line="5390" pos:column="14"/></name></expr>:<pos:position pos:line="5390" pos:column="15"/></case> <block pos:line="5390" pos:column="16">{           <comment type="block" pos:line="5390" pos:column="28">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="5391" pos:column="3">VdbeFrame<pos:position pos:line="5391" pos:column="12"/></name> <modifier pos:line="5391" pos:column="13">*<pos:position pos:line="5391" pos:column="14"/></modifier></type><name pos:line="5391" pos:column="14">pFrame<pos:position pos:line="5391" pos:column="20"/></name></decl>;<pos:position pos:line="5391" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5392" pos:column="3">Mem<pos:position pos:line="5392" pos:column="6"/></name> <modifier pos:line="5392" pos:column="7">*<pos:position pos:line="5392" pos:column="8"/></modifier></type><name pos:line="5392" pos:column="8">pIn<pos:position pos:line="5392" pos:column="11"/></name></decl>;<pos:position pos:line="5392" pos:column="12"/></decl_stmt>
  <expr_stmt><expr><name pos:line="5393" pos:column="3">pOut<pos:position pos:line="5393" pos:column="7"/></name> <operator pos:line="5393" pos:column="8">=<pos:position pos:line="5393" pos:column="9"/></operator> <call><name pos:line="5393" pos:column="10">out2Prerelease<pos:position pos:line="5393" pos:column="24"/></name><argument_list pos:line="5393" pos:column="24">(<argument><expr><name pos:line="5393" pos:column="25">p<pos:position pos:line="5393" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="5393" pos:column="28">pOp<pos:position pos:line="5393" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5393" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5393" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5394" pos:column="3">pFrame<pos:position pos:line="5394" pos:column="9"/></name> <operator pos:line="5394" pos:column="10">=<pos:position pos:line="5394" pos:column="11"/></operator> <name><name pos:line="5394" pos:column="12">p<pos:position pos:line="5394" pos:column="13"/></name><operator pos:line="5394" pos:column="13">-&gt;<pos:position pos:line="5394" pos:column="18"/></operator><name pos:line="5394" pos:column="15">pFrame<pos:position pos:line="5394" pos:column="21"/></name></name></expr>;<pos:position pos:line="5394" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5395" pos:column="3">pIn<pos:position pos:line="5395" pos:column="6"/></name> <operator pos:line="5395" pos:column="7">=<pos:position pos:line="5395" pos:column="8"/></operator> <operator pos:line="5395" pos:column="9">&amp;<pos:position pos:line="5395" pos:column="14"/></operator><name><name pos:line="5395" pos:column="10">pFrame<pos:position pos:line="5395" pos:column="16"/></name><operator pos:line="5395" pos:column="16">-&gt;<pos:position pos:line="5395" pos:column="21"/></operator><name pos:line="5395" pos:column="18">aMem<pos:position pos:line="5395" pos:column="22"/></name><index pos:line="5395" pos:column="22">[<expr><name><name pos:line="5395" pos:column="23">pOp<pos:position pos:line="5395" pos:column="26"/></name><operator pos:line="5395" pos:column="26">-&gt;<pos:position pos:line="5395" pos:column="31"/></operator><name pos:line="5395" pos:column="28">p1<pos:position pos:line="5395" pos:column="30"/></name></name> <operator pos:line="5395" pos:column="31">+<pos:position pos:line="5395" pos:column="32"/></operator> <name><name pos:line="5395" pos:column="33">pFrame<pos:position pos:line="5395" pos:column="39"/></name><operator pos:line="5395" pos:column="39">-&gt;<pos:position pos:line="5395" pos:column="44"/></operator><name pos:line="5395" pos:column="41">aOp<pos:position pos:line="5395" pos:column="44"/></name><index pos:line="5395" pos:column="44">[<expr><name><name pos:line="5395" pos:column="45">pFrame<pos:position pos:line="5395" pos:column="51"/></name><operator pos:line="5395" pos:column="51">-&gt;<pos:position pos:line="5395" pos:column="56"/></operator><name pos:line="5395" pos:column="53">pc<pos:position pos:line="5395" pos:column="55"/></name></name></expr>]<pos:position pos:line="5395" pos:column="56"/></index></name><operator pos:line="5395" pos:column="56">.<pos:position pos:line="5395" pos:column="57"/></operator><name pos:line="5395" pos:column="57">p1<pos:position pos:line="5395" pos:column="59"/></name></expr>]<pos:position pos:line="5395" pos:column="60"/></index></name></expr>;<pos:position pos:line="5395" pos:column="61"/></expr_stmt>   
  <expr_stmt><expr><call><name pos:line="5396" pos:column="3">sqlite3VdbeMemShallowCopy<pos:position pos:line="5396" pos:column="28"/></name><argument_list pos:line="5396" pos:column="28">(<argument><expr><name pos:line="5396" pos:column="29">pOut<pos:position pos:line="5396" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="5396" pos:column="35">pIn<pos:position pos:line="5396" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="5396" pos:column="40">MEM_Ephem<pos:position pos:line="5396" pos:column="49"/></name></expr></argument>)<pos:position pos:line="5396" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5396" pos:column="51"/></expr_stmt>
  <break pos:line="5397" pos:column="3">break;<pos:position pos:line="5397" pos:column="9"/></break>
}<pos:position pos:line="5398" pos:column="2"/></block>

<cpp:endif pos:line="5400" pos:column="1">#<cpp:directive pos:line="5400" pos:column="2">endif<pos:position pos:line="5400" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5400" pos:column="8">/* #ifndef SQLITE_OMIT_TRIGGER */</comment>

<cpp:ifndef pos:line="5402" pos:column="1">#<cpp:directive pos:line="5402" pos:column="2">ifndef<pos:position pos:line="5402" pos:column="8"/></cpp:directive> <name pos:line="5402" pos:column="9">SQLITE_OMIT_FOREIGN_KEY<pos:position pos:line="5402" pos:column="32"/></name></cpp:ifndef>
<comment type="block" pos:line="5403" pos:column="1">/* Opcode: FkCounter P1 P2 * * *
** Synopsis: fkctr[P1]+=P2
**
** Increment a "constraint counter" by P2 (P2 may be negative or positive).
** If P1 is non-zero, the database constraint counter is incremented 
** (deferred foreign key constraints). Otherwise, if P1 is zero, the 
** statement counter is incremented (immediate foreign key constraints).
*/</comment>
<case pos:line="5411" pos:column="1">case <expr><name pos:line="5411" pos:column="6">OP_FkCounter<pos:position pos:line="5411" pos:column="18"/></name></expr>:<pos:position pos:line="5411" pos:column="19"/></case> <block pos:line="5411" pos:column="20">{
  <if pos:line="5412" pos:column="3">if<condition pos:line="5412" pos:column="5">( <expr><name><name pos:line="5412" pos:column="7">db<pos:position pos:line="5412" pos:column="9"/></name><operator pos:line="5412" pos:column="9">-&gt;<pos:position pos:line="5412" pos:column="14"/></operator><name pos:line="5412" pos:column="11">flags<pos:position pos:line="5412" pos:column="16"/></name></name> <operator pos:line="5412" pos:column="17">&amp;<pos:position pos:line="5412" pos:column="22"/></operator> <name pos:line="5412" pos:column="19">SQLITE_DeferFKs<pos:position pos:line="5412" pos:column="34"/></name></expr> )<pos:position pos:line="5412" pos:column="36"/></condition><then><block pos:line="5412" pos:column="36">{
    <expr_stmt><expr><name><name pos:line="5413" pos:column="5">db<pos:position pos:line="5413" pos:column="7"/></name><operator pos:line="5413" pos:column="7">-&gt;<pos:position pos:line="5413" pos:column="12"/></operator><name pos:line="5413" pos:column="9">nDeferredImmCons<pos:position pos:line="5413" pos:column="25"/></name></name> <operator pos:line="5413" pos:column="26">+=<pos:position pos:line="5413" pos:column="28"/></operator> <name><name pos:line="5413" pos:column="29">pOp<pos:position pos:line="5413" pos:column="32"/></name><operator pos:line="5413" pos:column="32">-&gt;<pos:position pos:line="5413" pos:column="37"/></operator><name pos:line="5413" pos:column="34">p2<pos:position pos:line="5413" pos:column="36"/></name></name></expr>;<pos:position pos:line="5413" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="5414" pos:column="4"/></block></then><elseif pos:line="5414" pos:column="4">else <if pos:line="5414" pos:column="9">if<condition pos:line="5414" pos:column="11">( <expr><name><name pos:line="5414" pos:column="13">pOp<pos:position pos:line="5414" pos:column="16"/></name><operator pos:line="5414" pos:column="16">-&gt;<pos:position pos:line="5414" pos:column="21"/></operator><name pos:line="5414" pos:column="18">p1<pos:position pos:line="5414" pos:column="20"/></name></name></expr> )<pos:position pos:line="5414" pos:column="22"/></condition><then><block pos:line="5414" pos:column="22">{
    <expr_stmt><expr><name><name pos:line="5415" pos:column="5">db<pos:position pos:line="5415" pos:column="7"/></name><operator pos:line="5415" pos:column="7">-&gt;<pos:position pos:line="5415" pos:column="12"/></operator><name pos:line="5415" pos:column="9">nDeferredCons<pos:position pos:line="5415" pos:column="22"/></name></name> <operator pos:line="5415" pos:column="23">+=<pos:position pos:line="5415" pos:column="25"/></operator> <name><name pos:line="5415" pos:column="26">pOp<pos:position pos:line="5415" pos:column="29"/></name><operator pos:line="5415" pos:column="29">-&gt;<pos:position pos:line="5415" pos:column="34"/></operator><name pos:line="5415" pos:column="31">p2<pos:position pos:line="5415" pos:column="33"/></name></name></expr>;<pos:position pos:line="5415" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="5416" pos:column="4"/></block></then></if></elseif><else pos:line="5416" pos:column="4">else<block pos:line="5416" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="5417" pos:column="5">p<pos:position pos:line="5417" pos:column="6"/></name><operator pos:line="5417" pos:column="6">-&gt;<pos:position pos:line="5417" pos:column="11"/></operator><name pos:line="5417" pos:column="8">nFkConstraint<pos:position pos:line="5417" pos:column="21"/></name></name> <operator pos:line="5417" pos:column="22">+=<pos:position pos:line="5417" pos:column="24"/></operator> <name><name pos:line="5417" pos:column="25">pOp<pos:position pos:line="5417" pos:column="28"/></name><operator pos:line="5417" pos:column="28">-&gt;<pos:position pos:line="5417" pos:column="33"/></operator><name pos:line="5417" pos:column="30">p2<pos:position pos:line="5417" pos:column="32"/></name></name></expr>;<pos:position pos:line="5417" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="5418" pos:column="4"/></block></else></if>
  <break pos:line="5419" pos:column="3">break;<pos:position pos:line="5419" pos:column="9"/></break>
}<pos:position pos:line="5420" pos:column="2"/></block>

<comment type="block" pos:line="5422" pos:column="1">/* Opcode: FkIfZero P1 P2 * * *
** Synopsis: if fkctr[P1]==0 goto P2
**
** This opcode tests if a foreign key constraint-counter is currently zero.
** If so, jump to instruction P2. Otherwise, fall through to the next 
** instruction.
**
** If P1 is non-zero, then the jump is taken if the database constraint-counter
** is zero (the one that counts deferred constraint violations). If P1 is
** zero, the jump is taken if the statement constraint-counter is zero
** (immediate foreign key constraint violations).
*/</comment>
<case pos:line="5434" pos:column="1">case <expr><name pos:line="5434" pos:column="6">OP_FkIfZero<pos:position pos:line="5434" pos:column="17"/></name></expr>:<pos:position pos:line="5434" pos:column="18"/></case> <block pos:line="5434" pos:column="19">{         <comment type="block" pos:line="5434" pos:column="29">/* jump */</comment>
  <if pos:line="5435" pos:column="3">if<condition pos:line="5435" pos:column="5">( <expr><name><name pos:line="5435" pos:column="7">pOp<pos:position pos:line="5435" pos:column="10"/></name><operator pos:line="5435" pos:column="10">-&gt;<pos:position pos:line="5435" pos:column="15"/></operator><name pos:line="5435" pos:column="12">p1<pos:position pos:line="5435" pos:column="14"/></name></name></expr> )<pos:position pos:line="5435" pos:column="16"/></condition><then><block pos:line="5435" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="5436" pos:column="5">VdbeBranchTaken<pos:position pos:line="5436" pos:column="20"/></name><argument_list pos:line="5436" pos:column="20">(<argument><expr><name><name pos:line="5436" pos:column="21">db<pos:position pos:line="5436" pos:column="23"/></name><operator pos:line="5436" pos:column="23">-&gt;<pos:position pos:line="5436" pos:column="28"/></operator><name pos:line="5436" pos:column="25">nDeferredCons<pos:position pos:line="5436" pos:column="38"/></name></name><operator pos:line="5436" pos:column="38">==<pos:position pos:line="5436" pos:column="40"/></operator><literal type="number" pos:line="5436" pos:column="40">0<pos:position pos:line="5436" pos:column="41"/></literal> <operator pos:line="5436" pos:column="42">&amp;&amp;<pos:position pos:line="5436" pos:column="52"/></operator> <name><name pos:line="5436" pos:column="45">db<pos:position pos:line="5436" pos:column="47"/></name><operator pos:line="5436" pos:column="47">-&gt;<pos:position pos:line="5436" pos:column="52"/></operator><name pos:line="5436" pos:column="49">nDeferredImmCons<pos:position pos:line="5436" pos:column="65"/></name></name><operator pos:line="5436" pos:column="65">==<pos:position pos:line="5436" pos:column="67"/></operator><literal type="number" pos:line="5436" pos:column="67">0<pos:position pos:line="5436" pos:column="68"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5436" pos:column="70">2<pos:position pos:line="5436" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="5436" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="5436" pos:column="73"/></expr_stmt>
    <if pos:line="5437" pos:column="5">if<condition pos:line="5437" pos:column="7">( <expr><name><name pos:line="5437" pos:column="9">db<pos:position pos:line="5437" pos:column="11"/></name><operator pos:line="5437" pos:column="11">-&gt;<pos:position pos:line="5437" pos:column="16"/></operator><name pos:line="5437" pos:column="13">nDeferredCons<pos:position pos:line="5437" pos:column="26"/></name></name><operator pos:line="5437" pos:column="26">==<pos:position pos:line="5437" pos:column="28"/></operator><literal type="number" pos:line="5437" pos:column="28">0<pos:position pos:line="5437" pos:column="29"/></literal> <operator pos:line="5437" pos:column="30">&amp;&amp;<pos:position pos:line="5437" pos:column="40"/></operator> <name><name pos:line="5437" pos:column="33">db<pos:position pos:line="5437" pos:column="35"/></name><operator pos:line="5437" pos:column="35">-&gt;<pos:position pos:line="5437" pos:column="40"/></operator><name pos:line="5437" pos:column="37">nDeferredImmCons<pos:position pos:line="5437" pos:column="53"/></name></name><operator pos:line="5437" pos:column="53">==<pos:position pos:line="5437" pos:column="55"/></operator><literal type="number" pos:line="5437" pos:column="55">0<pos:position pos:line="5437" pos:column="56"/></literal></expr> )<pos:position pos:line="5437" pos:column="58"/></condition><then pos:line="5437" pos:column="58"> <block type="pseudo"><goto pos:line="5437" pos:column="59">goto <name pos:line="5437" pos:column="64">jump_to_p2<pos:position pos:line="5437" pos:column="74"/></name>;<pos:position pos:line="5437" pos:column="75"/></goto></block></then></if>
  }<pos:position pos:line="5438" pos:column="4"/></block></then><else pos:line="5438" pos:column="4">else<block pos:line="5438" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="5439" pos:column="5">VdbeBranchTaken<pos:position pos:line="5439" pos:column="20"/></name><argument_list pos:line="5439" pos:column="20">(<argument><expr><name><name pos:line="5439" pos:column="21">p<pos:position pos:line="5439" pos:column="22"/></name><operator pos:line="5439" pos:column="22">-&gt;<pos:position pos:line="5439" pos:column="27"/></operator><name pos:line="5439" pos:column="24">nFkConstraint<pos:position pos:line="5439" pos:column="37"/></name></name><operator pos:line="5439" pos:column="37">==<pos:position pos:line="5439" pos:column="39"/></operator><literal type="number" pos:line="5439" pos:column="39">0<pos:position pos:line="5439" pos:column="40"/></literal> <operator pos:line="5439" pos:column="41">&amp;&amp;<pos:position pos:line="5439" pos:column="51"/></operator> <name><name pos:line="5439" pos:column="44">db<pos:position pos:line="5439" pos:column="46"/></name><operator pos:line="5439" pos:column="46">-&gt;<pos:position pos:line="5439" pos:column="51"/></operator><name pos:line="5439" pos:column="48">nDeferredImmCons<pos:position pos:line="5439" pos:column="64"/></name></name><operator pos:line="5439" pos:column="64">==<pos:position pos:line="5439" pos:column="66"/></operator><literal type="number" pos:line="5439" pos:column="66">0<pos:position pos:line="5439" pos:column="67"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5439" pos:column="69">2<pos:position pos:line="5439" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="5439" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="5439" pos:column="72"/></expr_stmt>
    <if pos:line="5440" pos:column="5">if<condition pos:line="5440" pos:column="7">( <expr><name><name pos:line="5440" pos:column="9">p<pos:position pos:line="5440" pos:column="10"/></name><operator pos:line="5440" pos:column="10">-&gt;<pos:position pos:line="5440" pos:column="15"/></operator><name pos:line="5440" pos:column="12">nFkConstraint<pos:position pos:line="5440" pos:column="25"/></name></name><operator pos:line="5440" pos:column="25">==<pos:position pos:line="5440" pos:column="27"/></operator><literal type="number" pos:line="5440" pos:column="27">0<pos:position pos:line="5440" pos:column="28"/></literal> <operator pos:line="5440" pos:column="29">&amp;&amp;<pos:position pos:line="5440" pos:column="39"/></operator> <name><name pos:line="5440" pos:column="32">db<pos:position pos:line="5440" pos:column="34"/></name><operator pos:line="5440" pos:column="34">-&gt;<pos:position pos:line="5440" pos:column="39"/></operator><name pos:line="5440" pos:column="36">nDeferredImmCons<pos:position pos:line="5440" pos:column="52"/></name></name><operator pos:line="5440" pos:column="52">==<pos:position pos:line="5440" pos:column="54"/></operator><literal type="number" pos:line="5440" pos:column="54">0<pos:position pos:line="5440" pos:column="55"/></literal></expr> )<pos:position pos:line="5440" pos:column="57"/></condition><then pos:line="5440" pos:column="57"> <block type="pseudo"><goto pos:line="5440" pos:column="58">goto <name pos:line="5440" pos:column="63">jump_to_p2<pos:position pos:line="5440" pos:column="73"/></name>;<pos:position pos:line="5440" pos:column="74"/></goto></block></then></if>
  }<pos:position pos:line="5441" pos:column="4"/></block></else></if>
  <break pos:line="5442" pos:column="3">break;<pos:position pos:line="5442" pos:column="9"/></break>
}<pos:position pos:line="5443" pos:column="2"/></block>
<cpp:endif pos:line="5444" pos:column="1">#<cpp:directive pos:line="5444" pos:column="2">endif<pos:position pos:line="5444" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5444" pos:column="8">/* #ifndef SQLITE_OMIT_FOREIGN_KEY */</comment>

<cpp:ifndef pos:line="5446" pos:column="1">#<cpp:directive pos:line="5446" pos:column="2">ifndef<pos:position pos:line="5446" pos:column="8"/></cpp:directive> <name pos:line="5446" pos:column="9">SQLITE_OMIT_AUTOINCREMENT<pos:position pos:line="5446" pos:column="34"/></name></cpp:ifndef>
<comment type="block" pos:line="5447" pos:column="1">/* Opcode: MemMax P1 P2 * * *
** Synopsis: r[P1]=max(r[P1],r[P2])
**
** P1 is a register in the root frame of this VM (the root frame is
** different from the current frame if this instruction is being executed
** within a sub-program). Set the value of register P1 to the maximum of 
** its current value and the value in register P2.
**
** This instruction throws an error if the memory cell is not initially
** an integer.
*/</comment>
<case pos:line="5458" pos:column="1">case <expr><name pos:line="5458" pos:column="6">OP_MemMax<pos:position pos:line="5458" pos:column="15"/></name></expr>:<pos:position pos:line="5458" pos:column="16"/></case> <block pos:line="5458" pos:column="17">{        <comment type="block" pos:line="5458" pos:column="26">/* in2 */</comment>
  <decl_stmt><decl><type><name pos:line="5459" pos:column="3">VdbeFrame<pos:position pos:line="5459" pos:column="12"/></name> <modifier pos:line="5459" pos:column="13">*<pos:position pos:line="5459" pos:column="14"/></modifier></type><name pos:line="5459" pos:column="14">pFrame<pos:position pos:line="5459" pos:column="20"/></name></decl>;<pos:position pos:line="5459" pos:column="21"/></decl_stmt>
  <if pos:line="5460" pos:column="3">if<condition pos:line="5460" pos:column="5">( <expr><name><name pos:line="5460" pos:column="7">p<pos:position pos:line="5460" pos:column="8"/></name><operator pos:line="5460" pos:column="8">-&gt;<pos:position pos:line="5460" pos:column="13"/></operator><name pos:line="5460" pos:column="10">pFrame<pos:position pos:line="5460" pos:column="16"/></name></name></expr> )<pos:position pos:line="5460" pos:column="18"/></condition><then><block pos:line="5460" pos:column="18">{
    <for pos:line="5461" pos:column="5">for<control pos:line="5461" pos:column="8">(<init><expr><name pos:line="5461" pos:column="9">pFrame<pos:position pos:line="5461" pos:column="15"/></name><operator pos:line="5461" pos:column="15">=<pos:position pos:line="5461" pos:column="16"/></operator><name><name pos:line="5461" pos:column="16">p<pos:position pos:line="5461" pos:column="17"/></name><operator pos:line="5461" pos:column="17">-&gt;<pos:position pos:line="5461" pos:column="22"/></operator><name pos:line="5461" pos:column="19">pFrame<pos:position pos:line="5461" pos:column="25"/></name></name></expr>;<pos:position pos:line="5461" pos:column="26"/></init> <condition><expr><name><name pos:line="5461" pos:column="27">pFrame<pos:position pos:line="5461" pos:column="33"/></name><operator pos:line="5461" pos:column="33">-&gt;<pos:position pos:line="5461" pos:column="38"/></operator><name pos:line="5461" pos:column="35">pParent<pos:position pos:line="5461" pos:column="42"/></name></name></expr>;<pos:position pos:line="5461" pos:column="43"/></condition> <incr><expr><name pos:line="5461" pos:column="44">pFrame<pos:position pos:line="5461" pos:column="50"/></name><operator pos:line="5461" pos:column="50">=<pos:position pos:line="5461" pos:column="51"/></operator><name><name pos:line="5461" pos:column="51">pFrame<pos:position pos:line="5461" pos:column="57"/></name><operator pos:line="5461" pos:column="57">-&gt;<pos:position pos:line="5461" pos:column="62"/></operator><name pos:line="5461" pos:column="59">pParent<pos:position pos:line="5461" pos:column="66"/></name></name></expr></incr>)<pos:position pos:line="5461" pos:column="67"/></control><block type="pseudo"><empty_stmt pos:line="5461" pos:column="67">;<pos:position pos:line="5461" pos:column="68"/></empty_stmt></block></for>
    <expr_stmt><expr><name pos:line="5462" pos:column="5">pIn1<pos:position pos:line="5462" pos:column="9"/></name> <operator pos:line="5462" pos:column="10">=<pos:position pos:line="5462" pos:column="11"/></operator> <operator pos:line="5462" pos:column="12">&amp;<pos:position pos:line="5462" pos:column="17"/></operator><name><name pos:line="5462" pos:column="13">pFrame<pos:position pos:line="5462" pos:column="19"/></name><operator pos:line="5462" pos:column="19">-&gt;<pos:position pos:line="5462" pos:column="24"/></operator><name pos:line="5462" pos:column="21">aMem<pos:position pos:line="5462" pos:column="25"/></name><index pos:line="5462" pos:column="25">[<expr><name><name pos:line="5462" pos:column="26">pOp<pos:position pos:line="5462" pos:column="29"/></name><operator pos:line="5462" pos:column="29">-&gt;<pos:position pos:line="5462" pos:column="34"/></operator><name pos:line="5462" pos:column="31">p1<pos:position pos:line="5462" pos:column="33"/></name></name></expr>]<pos:position pos:line="5462" pos:column="34"/></index></name></expr>;<pos:position pos:line="5462" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="5463" pos:column="4"/></block></then><else pos:line="5463" pos:column="4">else<block pos:line="5463" pos:column="8">{
    <expr_stmt><expr><name pos:line="5464" pos:column="5">pIn1<pos:position pos:line="5464" pos:column="9"/></name> <operator pos:line="5464" pos:column="10">=<pos:position pos:line="5464" pos:column="11"/></operator> <operator pos:line="5464" pos:column="12">&amp;<pos:position pos:line="5464" pos:column="17"/></operator><name><name pos:line="5464" pos:column="13">aMem<pos:position pos:line="5464" pos:column="17"/></name><index pos:line="5464" pos:column="17">[<expr><name><name pos:line="5464" pos:column="18">pOp<pos:position pos:line="5464" pos:column="21"/></name><operator pos:line="5464" pos:column="21">-&gt;<pos:position pos:line="5464" pos:column="26"/></operator><name pos:line="5464" pos:column="23">p1<pos:position pos:line="5464" pos:column="25"/></name></name></expr>]<pos:position pos:line="5464" pos:column="26"/></index></name></expr>;<pos:position pos:line="5464" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="5465" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="5466" pos:column="3">assert<pos:position pos:line="5466" pos:column="9"/></name><argument_list pos:line="5466" pos:column="9">( <argument><expr><call><name pos:line="5466" pos:column="11">memIsValid<pos:position pos:line="5466" pos:column="21"/></name><argument_list pos:line="5466" pos:column="21">(<argument><expr><name pos:line="5466" pos:column="22">pIn1<pos:position pos:line="5466" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5466" pos:column="27"/></argument_list></call></expr></argument> )<pos:position pos:line="5466" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5466" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5467" pos:column="3">sqlite3VdbeMemIntegerify<pos:position pos:line="5467" pos:column="27"/></name><argument_list pos:line="5467" pos:column="27">(<argument><expr><name pos:line="5467" pos:column="28">pIn1<pos:position pos:line="5467" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5467" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5467" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5468" pos:column="3">pIn2<pos:position pos:line="5468" pos:column="7"/></name> <operator pos:line="5468" pos:column="8">=<pos:position pos:line="5468" pos:column="9"/></operator> <operator pos:line="5468" pos:column="10">&amp;<pos:position pos:line="5468" pos:column="15"/></operator><name><name pos:line="5468" pos:column="11">aMem<pos:position pos:line="5468" pos:column="15"/></name><index pos:line="5468" pos:column="15">[<expr><name><name pos:line="5468" pos:column="16">pOp<pos:position pos:line="5468" pos:column="19"/></name><operator pos:line="5468" pos:column="19">-&gt;<pos:position pos:line="5468" pos:column="24"/></operator><name pos:line="5468" pos:column="21">p2<pos:position pos:line="5468" pos:column="23"/></name></name></expr>]<pos:position pos:line="5468" pos:column="24"/></index></name></expr>;<pos:position pos:line="5468" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5469" pos:column="3">sqlite3VdbeMemIntegerify<pos:position pos:line="5469" pos:column="27"/></name><argument_list pos:line="5469" pos:column="27">(<argument><expr><name pos:line="5469" pos:column="28">pIn2<pos:position pos:line="5469" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5469" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5469" pos:column="34"/></expr_stmt>
  <if pos:line="5470" pos:column="3">if<condition pos:line="5470" pos:column="5">( <expr><name><name pos:line="5470" pos:column="7">pIn1<pos:position pos:line="5470" pos:column="11"/></name><operator pos:line="5470" pos:column="11">-&gt;<pos:position pos:line="5470" pos:column="16"/></operator><name pos:line="5470" pos:column="13">u<pos:position pos:line="5470" pos:column="14"/></name><operator pos:line="5470" pos:column="14">.<pos:position pos:line="5470" pos:column="15"/></operator><name pos:line="5470" pos:column="15">i<pos:position pos:line="5470" pos:column="16"/></name></name><operator pos:line="5470" pos:column="16">&lt;<pos:position pos:line="5470" pos:column="20"/></operator><name><name pos:line="5470" pos:column="17">pIn2<pos:position pos:line="5470" pos:column="21"/></name><operator pos:line="5470" pos:column="21">-&gt;<pos:position pos:line="5470" pos:column="26"/></operator><name pos:line="5470" pos:column="23">u<pos:position pos:line="5470" pos:column="24"/></name><operator pos:line="5470" pos:column="24">.<pos:position pos:line="5470" pos:column="25"/></operator><name pos:line="5470" pos:column="25">i<pos:position pos:line="5470" pos:column="26"/></name></name></expr>)<pos:position pos:line="5470" pos:column="27"/></condition><then><block pos:line="5470" pos:column="27">{
    <expr_stmt><expr><name><name pos:line="5471" pos:column="5">pIn1<pos:position pos:line="5471" pos:column="9"/></name><operator pos:line="5471" pos:column="9">-&gt;<pos:position pos:line="5471" pos:column="14"/></operator><name pos:line="5471" pos:column="11">u<pos:position pos:line="5471" pos:column="12"/></name><operator pos:line="5471" pos:column="12">.<pos:position pos:line="5471" pos:column="13"/></operator><name pos:line="5471" pos:column="13">i<pos:position pos:line="5471" pos:column="14"/></name></name> <operator pos:line="5471" pos:column="15">=<pos:position pos:line="5471" pos:column="16"/></operator> <name><name pos:line="5471" pos:column="17">pIn2<pos:position pos:line="5471" pos:column="21"/></name><operator pos:line="5471" pos:column="21">-&gt;<pos:position pos:line="5471" pos:column="26"/></operator><name pos:line="5471" pos:column="23">u<pos:position pos:line="5471" pos:column="24"/></name><operator pos:line="5471" pos:column="24">.<pos:position pos:line="5471" pos:column="25"/></operator><name pos:line="5471" pos:column="25">i<pos:position pos:line="5471" pos:column="26"/></name></name></expr>;<pos:position pos:line="5471" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="5472" pos:column="4"/></block></then></if>
  <break pos:line="5473" pos:column="3">break;<pos:position pos:line="5473" pos:column="9"/></break>
}<pos:position pos:line="5474" pos:column="2"/></block>
<cpp:endif pos:line="5475" pos:column="1">#<cpp:directive pos:line="5475" pos:column="2">endif<pos:position pos:line="5475" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5475" pos:column="8">/* SQLITE_OMIT_AUTOINCREMENT */</comment>

<comment type="block" pos:line="5477" pos:column="1">/* Opcode: IfPos P1 P2 P3 * *
** Synopsis: if r[P1]&gt;0 then r[P1]-=P3, goto P2
**
** Register P1 must contain an integer.
** If the value of register P1 is 1 or greater, subtract P3 from the
** value in P1 and jump to P2.
**
** If the initial value of register P1 is less than 1, then the
** value is unchanged and control passes through to the next instruction.
*/</comment>
<case pos:line="5487" pos:column="1">case <expr><name pos:line="5487" pos:column="6">OP_IfPos<pos:position pos:line="5487" pos:column="14"/></name></expr>:<pos:position pos:line="5487" pos:column="15"/></case> <block pos:line="5487" pos:column="16">{        <comment type="block" pos:line="5487" pos:column="25">/* jump, in1 */</comment>
  <expr_stmt><expr><name pos:line="5488" pos:column="3">pIn1<pos:position pos:line="5488" pos:column="7"/></name> <operator pos:line="5488" pos:column="8">=<pos:position pos:line="5488" pos:column="9"/></operator> <operator pos:line="5488" pos:column="10">&amp;<pos:position pos:line="5488" pos:column="15"/></operator><name><name pos:line="5488" pos:column="11">aMem<pos:position pos:line="5488" pos:column="15"/></name><index pos:line="5488" pos:column="15">[<expr><name><name pos:line="5488" pos:column="16">pOp<pos:position pos:line="5488" pos:column="19"/></name><operator pos:line="5488" pos:column="19">-&gt;<pos:position pos:line="5488" pos:column="24"/></operator><name pos:line="5488" pos:column="21">p1<pos:position pos:line="5488" pos:column="23"/></name></name></expr>]<pos:position pos:line="5488" pos:column="24"/></index></name></expr>;<pos:position pos:line="5488" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5489" pos:column="3">assert<pos:position pos:line="5489" pos:column="9"/></name><argument_list pos:line="5489" pos:column="9">( <argument><expr><name><name pos:line="5489" pos:column="11">pIn1<pos:position pos:line="5489" pos:column="15"/></name><operator pos:line="5489" pos:column="15">-&gt;<pos:position pos:line="5489" pos:column="20"/></operator><name pos:line="5489" pos:column="17">flags<pos:position pos:line="5489" pos:column="22"/></name></name><operator pos:line="5489" pos:column="22">&amp;<pos:position pos:line="5489" pos:column="27"/></operator><name pos:line="5489" pos:column="23">MEM_Int<pos:position pos:line="5489" pos:column="30"/></name></expr></argument> )<pos:position pos:line="5489" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5489" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5490" pos:column="3">VdbeBranchTaken<pos:position pos:line="5490" pos:column="18"/></name><argument_list pos:line="5490" pos:column="18">( <argument><expr><name><name pos:line="5490" pos:column="20">pIn1<pos:position pos:line="5490" pos:column="24"/></name><operator pos:line="5490" pos:column="24">-&gt;<pos:position pos:line="5490" pos:column="29"/></operator><name pos:line="5490" pos:column="26">u<pos:position pos:line="5490" pos:column="27"/></name><operator pos:line="5490" pos:column="27">.<pos:position pos:line="5490" pos:column="28"/></operator><name pos:line="5490" pos:column="28">i<pos:position pos:line="5490" pos:column="29"/></name></name><operator pos:line="5490" pos:column="29">&gt;<pos:position pos:line="5490" pos:column="33"/></operator><literal type="number" pos:line="5490" pos:column="30">0<pos:position pos:line="5490" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5490" pos:column="33">2<pos:position pos:line="5490" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="5490" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5490" pos:column="36"/></expr_stmt>
  <if pos:line="5491" pos:column="3">if<condition pos:line="5491" pos:column="5">( <expr><name><name pos:line="5491" pos:column="7">pIn1<pos:position pos:line="5491" pos:column="11"/></name><operator pos:line="5491" pos:column="11">-&gt;<pos:position pos:line="5491" pos:column="16"/></operator><name pos:line="5491" pos:column="13">u<pos:position pos:line="5491" pos:column="14"/></name><operator pos:line="5491" pos:column="14">.<pos:position pos:line="5491" pos:column="15"/></operator><name pos:line="5491" pos:column="15">i<pos:position pos:line="5491" pos:column="16"/></name></name><operator pos:line="5491" pos:column="16">&gt;<pos:position pos:line="5491" pos:column="20"/></operator><literal type="number" pos:line="5491" pos:column="17">0<pos:position pos:line="5491" pos:column="18"/></literal></expr> )<pos:position pos:line="5491" pos:column="20"/></condition><then><block pos:line="5491" pos:column="20">{
    <expr_stmt><expr><name><name pos:line="5492" pos:column="5">pIn1<pos:position pos:line="5492" pos:column="9"/></name><operator pos:line="5492" pos:column="9">-&gt;<pos:position pos:line="5492" pos:column="14"/></operator><name pos:line="5492" pos:column="11">u<pos:position pos:line="5492" pos:column="12"/></name><operator pos:line="5492" pos:column="12">.<pos:position pos:line="5492" pos:column="13"/></operator><name pos:line="5492" pos:column="13">i<pos:position pos:line="5492" pos:column="14"/></name></name> <operator pos:line="5492" pos:column="15">-=<pos:position pos:line="5492" pos:column="17"/></operator> <name><name pos:line="5492" pos:column="18">pOp<pos:position pos:line="5492" pos:column="21"/></name><operator pos:line="5492" pos:column="21">-&gt;<pos:position pos:line="5492" pos:column="26"/></operator><name pos:line="5492" pos:column="23">p3<pos:position pos:line="5492" pos:column="25"/></name></name></expr>;<pos:position pos:line="5492" pos:column="26"/></expr_stmt>
    <goto pos:line="5493" pos:column="5">goto <name pos:line="5493" pos:column="10">jump_to_p2<pos:position pos:line="5493" pos:column="20"/></name>;<pos:position pos:line="5493" pos:column="21"/></goto>
  }<pos:position pos:line="5494" pos:column="4"/></block></then></if>
  <break pos:line="5495" pos:column="3">break;<pos:position pos:line="5495" pos:column="9"/></break>
}<pos:position pos:line="5496" pos:column="2"/></block>

<comment type="block" pos:line="5498" pos:column="1">/* Opcode: OffsetLimit P1 P2 P3 * *
** Synopsis: if r[P1]&gt;0 then r[P2]=r[P1]+max(0,r[P3]) else r[P2]=(-1)
**
** This opcode performs a commonly used computation associated with
** LIMIT and OFFSET process.  r[P1] holds the limit counter.  r[P3]
** holds the offset counter.  The opcode computes the combined value
** of the LIMIT and OFFSET and stores that value in r[P2].  The r[P2]
** value computed is the total number of rows that will need to be
** visited in order to complete the query.
**
** If r[P3] is zero or negative, that means there is no OFFSET
** and r[P2] is set to be the value of the LIMIT, r[P1].
**
** if r[P1] is zero or negative, that means there is no LIMIT
** and r[P2] is set to -1. 
**
** Otherwise, r[P2] is set to the sum of r[P1] and r[P3].
*/</comment>
<case pos:line="5516" pos:column="1">case <expr><name pos:line="5516" pos:column="6">OP_OffsetLimit<pos:position pos:line="5516" pos:column="20"/></name></expr>:<pos:position pos:line="5516" pos:column="21"/></case> <block pos:line="5516" pos:column="22">{    <comment type="block" pos:line="5516" pos:column="27">/* in1, out2, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="5517" pos:column="3">i64<pos:position pos:line="5517" pos:column="6"/></name></type> <name pos:line="5517" pos:column="7">x<pos:position pos:line="5517" pos:column="8"/></name></decl>;<pos:position pos:line="5517" pos:column="9"/></decl_stmt>
  <expr_stmt><expr><name pos:line="5518" pos:column="3">pIn1<pos:position pos:line="5518" pos:column="7"/></name> <operator pos:line="5518" pos:column="8">=<pos:position pos:line="5518" pos:column="9"/></operator> <operator pos:line="5518" pos:column="10">&amp;<pos:position pos:line="5518" pos:column="15"/></operator><name><name pos:line="5518" pos:column="11">aMem<pos:position pos:line="5518" pos:column="15"/></name><index pos:line="5518" pos:column="15">[<expr><name><name pos:line="5518" pos:column="16">pOp<pos:position pos:line="5518" pos:column="19"/></name><operator pos:line="5518" pos:column="19">-&gt;<pos:position pos:line="5518" pos:column="24"/></operator><name pos:line="5518" pos:column="21">p1<pos:position pos:line="5518" pos:column="23"/></name></name></expr>]<pos:position pos:line="5518" pos:column="24"/></index></name></expr>;<pos:position pos:line="5518" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5519" pos:column="3">pIn3<pos:position pos:line="5519" pos:column="7"/></name> <operator pos:line="5519" pos:column="8">=<pos:position pos:line="5519" pos:column="9"/></operator> <operator pos:line="5519" pos:column="10">&amp;<pos:position pos:line="5519" pos:column="15"/></operator><name><name pos:line="5519" pos:column="11">aMem<pos:position pos:line="5519" pos:column="15"/></name><index pos:line="5519" pos:column="15">[<expr><name><name pos:line="5519" pos:column="16">pOp<pos:position pos:line="5519" pos:column="19"/></name><operator pos:line="5519" pos:column="19">-&gt;<pos:position pos:line="5519" pos:column="24"/></operator><name pos:line="5519" pos:column="21">p3<pos:position pos:line="5519" pos:column="23"/></name></name></expr>]<pos:position pos:line="5519" pos:column="24"/></index></name></expr>;<pos:position pos:line="5519" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5520" pos:column="3">pOut<pos:position pos:line="5520" pos:column="7"/></name> <operator pos:line="5520" pos:column="8">=<pos:position pos:line="5520" pos:column="9"/></operator> <call><name pos:line="5520" pos:column="10">out2Prerelease<pos:position pos:line="5520" pos:column="24"/></name><argument_list pos:line="5520" pos:column="24">(<argument><expr><name pos:line="5520" pos:column="25">p<pos:position pos:line="5520" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="5520" pos:column="28">pOp<pos:position pos:line="5520" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5520" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5520" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5521" pos:column="3">assert<pos:position pos:line="5521" pos:column="9"/></name><argument_list pos:line="5521" pos:column="9">( <argument><expr><name><name pos:line="5521" pos:column="11">pIn1<pos:position pos:line="5521" pos:column="15"/></name><operator pos:line="5521" pos:column="15">-&gt;<pos:position pos:line="5521" pos:column="20"/></operator><name pos:line="5521" pos:column="17">flags<pos:position pos:line="5521" pos:column="22"/></name></name> <operator pos:line="5521" pos:column="23">&amp;<pos:position pos:line="5521" pos:column="28"/></operator> <name pos:line="5521" pos:column="25">MEM_Int<pos:position pos:line="5521" pos:column="32"/></name></expr></argument> )<pos:position pos:line="5521" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5521" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5522" pos:column="3">assert<pos:position pos:line="5522" pos:column="9"/></name><argument_list pos:line="5522" pos:column="9">( <argument><expr><name><name pos:line="5522" pos:column="11">pIn3<pos:position pos:line="5522" pos:column="15"/></name><operator pos:line="5522" pos:column="15">-&gt;<pos:position pos:line="5522" pos:column="20"/></operator><name pos:line="5522" pos:column="17">flags<pos:position pos:line="5522" pos:column="22"/></name></name> <operator pos:line="5522" pos:column="23">&amp;<pos:position pos:line="5522" pos:column="28"/></operator> <name pos:line="5522" pos:column="25">MEM_Int<pos:position pos:line="5522" pos:column="32"/></name></expr></argument> )<pos:position pos:line="5522" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5522" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5523" pos:column="3">x<pos:position pos:line="5523" pos:column="4"/></name> <operator pos:line="5523" pos:column="5">=<pos:position pos:line="5523" pos:column="6"/></operator> <name><name pos:line="5523" pos:column="7">pIn1<pos:position pos:line="5523" pos:column="11"/></name><operator pos:line="5523" pos:column="11">-&gt;<pos:position pos:line="5523" pos:column="16"/></operator><name pos:line="5523" pos:column="13">u<pos:position pos:line="5523" pos:column="14"/></name><operator pos:line="5523" pos:column="14">.<pos:position pos:line="5523" pos:column="15"/></operator><name pos:line="5523" pos:column="15">i<pos:position pos:line="5523" pos:column="16"/></name></name></expr>;<pos:position pos:line="5523" pos:column="17"/></expr_stmt>
  <if pos:line="5524" pos:column="3">if<condition pos:line="5524" pos:column="5">( <expr><name pos:line="5524" pos:column="7">x<pos:position pos:line="5524" pos:column="8"/></name><operator pos:line="5524" pos:column="8">&lt;=<pos:position pos:line="5524" pos:column="13"/></operator><literal type="number" pos:line="5524" pos:column="10">0<pos:position pos:line="5524" pos:column="11"/></literal> <operator pos:line="5524" pos:column="12">||<pos:position pos:line="5524" pos:column="14"/></operator> <call><name pos:line="5524" pos:column="15">sqlite3AddInt64<pos:position pos:line="5524" pos:column="30"/></name><argument_list pos:line="5524" pos:column="30">(<argument><expr><operator pos:line="5524" pos:column="31">&amp;<pos:position pos:line="5524" pos:column="36"/></operator><name pos:line="5524" pos:column="32">x<pos:position pos:line="5524" pos:column="33"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="5524" pos:column="35">pIn3<pos:position pos:line="5524" pos:column="39"/></name><operator pos:line="5524" pos:column="39">-&gt;<pos:position pos:line="5524" pos:column="44"/></operator><name pos:line="5524" pos:column="41">u<pos:position pos:line="5524" pos:column="42"/></name><operator pos:line="5524" pos:column="42">.<pos:position pos:line="5524" pos:column="43"/></operator><name pos:line="5524" pos:column="43">i<pos:position pos:line="5524" pos:column="44"/></name></name><operator pos:line="5524" pos:column="44">&gt;<pos:position pos:line="5524" pos:column="48"/></operator><literal type="number" pos:line="5524" pos:column="45">0<pos:position pos:line="5524" pos:column="46"/></literal></expr>?<pos:position pos:line="5524" pos:column="47"/></condition><then><expr><name><name pos:line="5524" pos:column="47">pIn3<pos:position pos:line="5524" pos:column="51"/></name><operator pos:line="5524" pos:column="51">-&gt;<pos:position pos:line="5524" pos:column="56"/></operator><name pos:line="5524" pos:column="53">u<pos:position pos:line="5524" pos:column="54"/></name><operator pos:line="5524" pos:column="54">.<pos:position pos:line="5524" pos:column="55"/></operator><name pos:line="5524" pos:column="55">i<pos:position pos:line="5524" pos:column="56"/></name></name></expr></then><else pos:line="5524" pos:column="56">:<expr><literal type="number" pos:line="5524" pos:column="57">0<pos:position pos:line="5524" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="5524" pos:column="59"/></argument_list></call></expr> )<pos:position pos:line="5524" pos:column="61"/></condition><then><block pos:line="5524" pos:column="61">{
    <comment type="block" pos:line="5525" pos:column="5">/* If the LIMIT is less than or equal to zero, loop forever.  This
    ** is documented.  But also, if the LIMIT+OFFSET exceeds 2^63 then
    ** also loop forever.  This is undocumented.  In fact, one could argue
    ** that the loop should terminate.  But assuming 1 billion iterations
    ** per second (far exceeding the capabilities of any current hardware)
    ** it would take nearly 300 years to actually reach the limit.  So
    ** looping forever is a reasonable approximation. */</comment>
    <expr_stmt><expr><name><name pos:line="5532" pos:column="5">pOut<pos:position pos:line="5532" pos:column="9"/></name><operator pos:line="5532" pos:column="9">-&gt;<pos:position pos:line="5532" pos:column="14"/></operator><name pos:line="5532" pos:column="11">u<pos:position pos:line="5532" pos:column="12"/></name><operator pos:line="5532" pos:column="12">.<pos:position pos:line="5532" pos:column="13"/></operator><name pos:line="5532" pos:column="13">i<pos:position pos:line="5532" pos:column="14"/></name></name> <operator pos:line="5532" pos:column="15">=<pos:position pos:line="5532" pos:column="16"/></operator> <operator pos:line="5532" pos:column="17">-<pos:position pos:line="5532" pos:column="18"/></operator><literal type="number" pos:line="5532" pos:column="18">1<pos:position pos:line="5532" pos:column="19"/></literal></expr>;<pos:position pos:line="5532" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="5533" pos:column="4"/></block></then><else pos:line="5533" pos:column="4">else<block pos:line="5533" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="5534" pos:column="5">pOut<pos:position pos:line="5534" pos:column="9"/></name><operator pos:line="5534" pos:column="9">-&gt;<pos:position pos:line="5534" pos:column="14"/></operator><name pos:line="5534" pos:column="11">u<pos:position pos:line="5534" pos:column="12"/></name><operator pos:line="5534" pos:column="12">.<pos:position pos:line="5534" pos:column="13"/></operator><name pos:line="5534" pos:column="13">i<pos:position pos:line="5534" pos:column="14"/></name></name> <operator pos:line="5534" pos:column="15">=<pos:position pos:line="5534" pos:column="16"/></operator> <name pos:line="5534" pos:column="17">x<pos:position pos:line="5534" pos:column="18"/></name></expr>;<pos:position pos:line="5534" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="5535" pos:column="4"/></block></else></if>
  <break pos:line="5536" pos:column="3">break;<pos:position pos:line="5536" pos:column="9"/></break>
}<pos:position pos:line="5537" pos:column="2"/></block>

<comment type="block" pos:line="5539" pos:column="1">/* Opcode: IfNotZero P1 P2 * * *
** Synopsis: if r[P1]!=0 then r[P1]--, goto P2
**
** Register P1 must contain an integer.  If the content of register P1 is
** initially greater than zero, then decrement the value in register P1.
** If it is non-zero (negative or positive) and then also jump to P2.  
** If register P1 is initially zero, leave it unchanged and fall through.
*/</comment>
<case pos:line="5547" pos:column="1">case <expr><name pos:line="5547" pos:column="6">OP_IfNotZero<pos:position pos:line="5547" pos:column="18"/></name></expr>:<pos:position pos:line="5547" pos:column="19"/></case> <block pos:line="5547" pos:column="20">{        <comment type="block" pos:line="5547" pos:column="29">/* jump, in1 */</comment>
  <expr_stmt><expr><name pos:line="5548" pos:column="3">pIn1<pos:position pos:line="5548" pos:column="7"/></name> <operator pos:line="5548" pos:column="8">=<pos:position pos:line="5548" pos:column="9"/></operator> <operator pos:line="5548" pos:column="10">&amp;<pos:position pos:line="5548" pos:column="15"/></operator><name><name pos:line="5548" pos:column="11">aMem<pos:position pos:line="5548" pos:column="15"/></name><index pos:line="5548" pos:column="15">[<expr><name><name pos:line="5548" pos:column="16">pOp<pos:position pos:line="5548" pos:column="19"/></name><operator pos:line="5548" pos:column="19">-&gt;<pos:position pos:line="5548" pos:column="24"/></operator><name pos:line="5548" pos:column="21">p1<pos:position pos:line="5548" pos:column="23"/></name></name></expr>]<pos:position pos:line="5548" pos:column="24"/></index></name></expr>;<pos:position pos:line="5548" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5549" pos:column="3">assert<pos:position pos:line="5549" pos:column="9"/></name><argument_list pos:line="5549" pos:column="9">( <argument><expr><name><name pos:line="5549" pos:column="11">pIn1<pos:position pos:line="5549" pos:column="15"/></name><operator pos:line="5549" pos:column="15">-&gt;<pos:position pos:line="5549" pos:column="20"/></operator><name pos:line="5549" pos:column="17">flags<pos:position pos:line="5549" pos:column="22"/></name></name><operator pos:line="5549" pos:column="22">&amp;<pos:position pos:line="5549" pos:column="27"/></operator><name pos:line="5549" pos:column="23">MEM_Int<pos:position pos:line="5549" pos:column="30"/></name></expr></argument> )<pos:position pos:line="5549" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5549" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5550" pos:column="3">VdbeBranchTaken<pos:position pos:line="5550" pos:column="18"/></name><argument_list pos:line="5550" pos:column="18">(<argument><expr><name><name pos:line="5550" pos:column="19">pIn1<pos:position pos:line="5550" pos:column="23"/></name><operator pos:line="5550" pos:column="23">-&gt;<pos:position pos:line="5550" pos:column="28"/></operator><name pos:line="5550" pos:column="25">u<pos:position pos:line="5550" pos:column="26"/></name><operator pos:line="5550" pos:column="26">.<pos:position pos:line="5550" pos:column="27"/></operator><name pos:line="5550" pos:column="27">i<pos:position pos:line="5550" pos:column="28"/></name></name><operator pos:line="5550" pos:column="28">&lt;<pos:position pos:line="5550" pos:column="32"/></operator><literal type="number" pos:line="5550" pos:column="29">0<pos:position pos:line="5550" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5550" pos:column="32">2<pos:position pos:line="5550" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="5550" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5550" pos:column="35"/></expr_stmt>
  <if pos:line="5551" pos:column="3">if<condition pos:line="5551" pos:column="5">( <expr><name><name pos:line="5551" pos:column="7">pIn1<pos:position pos:line="5551" pos:column="11"/></name><operator pos:line="5551" pos:column="11">-&gt;<pos:position pos:line="5551" pos:column="16"/></operator><name pos:line="5551" pos:column="13">u<pos:position pos:line="5551" pos:column="14"/></name><operator pos:line="5551" pos:column="14">.<pos:position pos:line="5551" pos:column="15"/></operator><name pos:line="5551" pos:column="15">i<pos:position pos:line="5551" pos:column="16"/></name></name></expr> )<pos:position pos:line="5551" pos:column="18"/></condition><then><block pos:line="5551" pos:column="18">{
     <if pos:line="5552" pos:column="6">if<condition pos:line="5552" pos:column="8">( <expr><name><name pos:line="5552" pos:column="10">pIn1<pos:position pos:line="5552" pos:column="14"/></name><operator pos:line="5552" pos:column="14">-&gt;<pos:position pos:line="5552" pos:column="19"/></operator><name pos:line="5552" pos:column="16">u<pos:position pos:line="5552" pos:column="17"/></name><operator pos:line="5552" pos:column="17">.<pos:position pos:line="5552" pos:column="18"/></operator><name pos:line="5552" pos:column="18">i<pos:position pos:line="5552" pos:column="19"/></name></name><operator pos:line="5552" pos:column="19">&gt;<pos:position pos:line="5552" pos:column="23"/></operator><literal type="number" pos:line="5552" pos:column="20">0<pos:position pos:line="5552" pos:column="21"/></literal></expr> )<pos:position pos:line="5552" pos:column="23"/></condition><then pos:line="5552" pos:column="23"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="5552" pos:column="24">pIn1<pos:position pos:line="5552" pos:column="28"/></name><operator pos:line="5552" pos:column="28">-&gt;<pos:position pos:line="5552" pos:column="33"/></operator><name pos:line="5552" pos:column="30">u<pos:position pos:line="5552" pos:column="31"/></name><operator pos:line="5552" pos:column="31">.<pos:position pos:line="5552" pos:column="32"/></operator><name pos:line="5552" pos:column="32">i<pos:position pos:line="5552" pos:column="33"/></name></name><operator pos:line="5552" pos:column="33">--<pos:position pos:line="5552" pos:column="35"/></operator></expr>;<pos:position pos:line="5552" pos:column="36"/></expr_stmt></block></then></if>
     <goto pos:line="5553" pos:column="6">goto <name pos:line="5553" pos:column="11">jump_to_p2<pos:position pos:line="5553" pos:column="21"/></name>;<pos:position pos:line="5553" pos:column="22"/></goto>
  }<pos:position pos:line="5554" pos:column="4"/></block></then></if>
  <break pos:line="5555" pos:column="3">break;<pos:position pos:line="5555" pos:column="9"/></break>
}<pos:position pos:line="5556" pos:column="2"/></block>

<comment type="block" pos:line="5558" pos:column="1">/* Opcode: DecrJumpZero P1 P2 * * *
** Synopsis: if (--r[P1])==0 goto P2
**
** Register P1 must hold an integer.  Decrement the value in P1
** and jump to P2 if the new value is exactly zero.
*/</comment>
<case pos:line="5564" pos:column="1">case <expr><name pos:line="5564" pos:column="6">OP_DecrJumpZero<pos:position pos:line="5564" pos:column="21"/></name></expr>:<pos:position pos:line="5564" pos:column="22"/></case> <block pos:line="5564" pos:column="23">{      <comment type="block" pos:line="5564" pos:column="30">/* jump, in1 */</comment>
  <expr_stmt><expr><name pos:line="5565" pos:column="3">pIn1<pos:position pos:line="5565" pos:column="7"/></name> <operator pos:line="5565" pos:column="8">=<pos:position pos:line="5565" pos:column="9"/></operator> <operator pos:line="5565" pos:column="10">&amp;<pos:position pos:line="5565" pos:column="15"/></operator><name><name pos:line="5565" pos:column="11">aMem<pos:position pos:line="5565" pos:column="15"/></name><index pos:line="5565" pos:column="15">[<expr><name><name pos:line="5565" pos:column="16">pOp<pos:position pos:line="5565" pos:column="19"/></name><operator pos:line="5565" pos:column="19">-&gt;<pos:position pos:line="5565" pos:column="24"/></operator><name pos:line="5565" pos:column="21">p1<pos:position pos:line="5565" pos:column="23"/></name></name></expr>]<pos:position pos:line="5565" pos:column="24"/></index></name></expr>;<pos:position pos:line="5565" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5566" pos:column="3">assert<pos:position pos:line="5566" pos:column="9"/></name><argument_list pos:line="5566" pos:column="9">( <argument><expr><name><name pos:line="5566" pos:column="11">pIn1<pos:position pos:line="5566" pos:column="15"/></name><operator pos:line="5566" pos:column="15">-&gt;<pos:position pos:line="5566" pos:column="20"/></operator><name pos:line="5566" pos:column="17">flags<pos:position pos:line="5566" pos:column="22"/></name></name><operator pos:line="5566" pos:column="22">&amp;<pos:position pos:line="5566" pos:column="27"/></operator><name pos:line="5566" pos:column="23">MEM_Int<pos:position pos:line="5566" pos:column="30"/></name></expr></argument> )<pos:position pos:line="5566" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5566" pos:column="33"/></expr_stmt>
  <if pos:line="5567" pos:column="3">if<condition pos:line="5567" pos:column="5">( <expr><name><name pos:line="5567" pos:column="7">pIn1<pos:position pos:line="5567" pos:column="11"/></name><operator pos:line="5567" pos:column="11">-&gt;<pos:position pos:line="5567" pos:column="16"/></operator><name pos:line="5567" pos:column="13">u<pos:position pos:line="5567" pos:column="14"/></name><operator pos:line="5567" pos:column="14">.<pos:position pos:line="5567" pos:column="15"/></operator><name pos:line="5567" pos:column="15">i<pos:position pos:line="5567" pos:column="16"/></name></name><operator pos:line="5567" pos:column="16">&gt;<pos:position pos:line="5567" pos:column="20"/></operator><name pos:line="5567" pos:column="17">SMALLEST_INT64<pos:position pos:line="5567" pos:column="31"/></name></expr> )<pos:position pos:line="5567" pos:column="33"/></condition><then pos:line="5567" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="5567" pos:column="34">pIn1<pos:position pos:line="5567" pos:column="38"/></name><operator pos:line="5567" pos:column="38">-&gt;<pos:position pos:line="5567" pos:column="43"/></operator><name pos:line="5567" pos:column="40">u<pos:position pos:line="5567" pos:column="41"/></name><operator pos:line="5567" pos:column="41">.<pos:position pos:line="5567" pos:column="42"/></operator><name pos:line="5567" pos:column="42">i<pos:position pos:line="5567" pos:column="43"/></name></name><operator pos:line="5567" pos:column="43">--<pos:position pos:line="5567" pos:column="45"/></operator></expr>;<pos:position pos:line="5567" pos:column="46"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="5568" pos:column="3">VdbeBranchTaken<pos:position pos:line="5568" pos:column="18"/></name><argument_list pos:line="5568" pos:column="18">(<argument><expr><name><name pos:line="5568" pos:column="19">pIn1<pos:position pos:line="5568" pos:column="23"/></name><operator pos:line="5568" pos:column="23">-&gt;<pos:position pos:line="5568" pos:column="28"/></operator><name pos:line="5568" pos:column="25">u<pos:position pos:line="5568" pos:column="26"/></name><operator pos:line="5568" pos:column="26">.<pos:position pos:line="5568" pos:column="27"/></operator><name pos:line="5568" pos:column="27">i<pos:position pos:line="5568" pos:column="28"/></name></name><operator pos:line="5568" pos:column="28">==<pos:position pos:line="5568" pos:column="30"/></operator><literal type="number" pos:line="5568" pos:column="30">0<pos:position pos:line="5568" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5568" pos:column="33">2<pos:position pos:line="5568" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="5568" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5568" pos:column="36"/></expr_stmt>
  <if pos:line="5569" pos:column="3">if<condition pos:line="5569" pos:column="5">( <expr><name><name pos:line="5569" pos:column="7">pIn1<pos:position pos:line="5569" pos:column="11"/></name><operator pos:line="5569" pos:column="11">-&gt;<pos:position pos:line="5569" pos:column="16"/></operator><name pos:line="5569" pos:column="13">u<pos:position pos:line="5569" pos:column="14"/></name><operator pos:line="5569" pos:column="14">.<pos:position pos:line="5569" pos:column="15"/></operator><name pos:line="5569" pos:column="15">i<pos:position pos:line="5569" pos:column="16"/></name></name><operator pos:line="5569" pos:column="16">==<pos:position pos:line="5569" pos:column="18"/></operator><literal type="number" pos:line="5569" pos:column="18">0<pos:position pos:line="5569" pos:column="19"/></literal></expr> )<pos:position pos:line="5569" pos:column="21"/></condition><then pos:line="5569" pos:column="21"> <block type="pseudo"><goto pos:line="5569" pos:column="22">goto <name pos:line="5569" pos:column="27">jump_to_p2<pos:position pos:line="5569" pos:column="37"/></name>;<pos:position pos:line="5569" pos:column="38"/></goto></block></then></if>
  <break pos:line="5570" pos:column="3">break;<pos:position pos:line="5570" pos:column="9"/></break>
}<pos:position pos:line="5571" pos:column="2"/></block>


<comment type="block" pos:line="5574" pos:column="1">/* Opcode: AggStep0 * P2 P3 P4 P5
** Synopsis: accum=r[P3] step(r[P2@P5])
**
** Execute the step function for an aggregate.  The
** function has P5 arguments.   P4 is a pointer to the FuncDef
** structure that specifies the function.  Register P3 is the
** accumulator.
**
** The P5 arguments are taken from register P2 and its
** successors.
*/</comment>
<comment type="block" pos:line="5585" pos:column="1">/* Opcode: AggStep * P2 P3 P4 P5
** Synopsis: accum=r[P3] step(r[P2@P5])
**
** Execute the step function for an aggregate.  The
** function has P5 arguments.   P4 is a pointer to an sqlite3_context
** object that is used to run the function.  Register P3 is
** as the accumulator.
**
** The P5 arguments are taken from register P2 and its
** successors.
**
** This opcode is initially coded as OP_AggStep0.  On first evaluation,
** the FuncDef stored in P4 is converted into an sqlite3_context and
** the opcode is changed.  In this way, the initialization of the
** sqlite3_context only happens once, instead of on each call to the
** step function.
*/</comment>
<case pos:line="5602" pos:column="1">case <expr><name pos:line="5602" pos:column="6">OP_AggStep0<pos:position pos:line="5602" pos:column="17"/></name></expr>:<pos:position pos:line="5602" pos:column="18"/></case> <block pos:line="5602" pos:column="19">{
  <decl_stmt><decl><type><name pos:line="5603" pos:column="3">int<pos:position pos:line="5603" pos:column="6"/></name></type> <name pos:line="5603" pos:column="7">n<pos:position pos:line="5603" pos:column="8"/></name></decl>;<pos:position pos:line="5603" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5604" pos:column="3">sqlite3_context<pos:position pos:line="5604" pos:column="18"/></name> <modifier pos:line="5604" pos:column="19">*<pos:position pos:line="5604" pos:column="20"/></modifier></type><name pos:line="5604" pos:column="20">pCtx<pos:position pos:line="5604" pos:column="24"/></name></decl>;<pos:position pos:line="5604" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5606" pos:column="3">assert<pos:position pos:line="5606" pos:column="9"/></name><argument_list pos:line="5606" pos:column="9">( <argument><expr><name><name pos:line="5606" pos:column="11">pOp<pos:position pos:line="5606" pos:column="14"/></name><operator pos:line="5606" pos:column="14">-&gt;<pos:position pos:line="5606" pos:column="19"/></operator><name pos:line="5606" pos:column="16">p4type<pos:position pos:line="5606" pos:column="22"/></name></name><operator pos:line="5606" pos:column="22">==<pos:position pos:line="5606" pos:column="24"/></operator><name pos:line="5606" pos:column="24">P4_FUNCDEF<pos:position pos:line="5606" pos:column="34"/></name></expr></argument> )<pos:position pos:line="5606" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5606" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5607" pos:column="3">n<pos:position pos:line="5607" pos:column="4"/></name> <operator pos:line="5607" pos:column="5">=<pos:position pos:line="5607" pos:column="6"/></operator> <name><name pos:line="5607" pos:column="7">pOp<pos:position pos:line="5607" pos:column="10"/></name><operator pos:line="5607" pos:column="10">-&gt;<pos:position pos:line="5607" pos:column="15"/></operator><name pos:line="5607" pos:column="12">p5<pos:position pos:line="5607" pos:column="14"/></name></name></expr>;<pos:position pos:line="5607" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5608" pos:column="3">assert<pos:position pos:line="5608" pos:column="9"/></name><argument_list pos:line="5608" pos:column="9">( <argument><expr><name><name pos:line="5608" pos:column="11">pOp<pos:position pos:line="5608" pos:column="14"/></name><operator pos:line="5608" pos:column="14">-&gt;<pos:position pos:line="5608" pos:column="19"/></operator><name pos:line="5608" pos:column="16">p3<pos:position pos:line="5608" pos:column="18"/></name></name><operator pos:line="5608" pos:column="18">&gt;<pos:position pos:line="5608" pos:column="22"/></operator><literal type="number" pos:line="5608" pos:column="19">0<pos:position pos:line="5608" pos:column="20"/></literal> <operator pos:line="5608" pos:column="21">&amp;&amp;<pos:position pos:line="5608" pos:column="31"/></operator> <name><name pos:line="5608" pos:column="24">pOp<pos:position pos:line="5608" pos:column="27"/></name><operator pos:line="5608" pos:column="27">-&gt;<pos:position pos:line="5608" pos:column="32"/></operator><name pos:line="5608" pos:column="29">p3<pos:position pos:line="5608" pos:column="31"/></name></name><operator pos:line="5608" pos:column="31">&lt;=<pos:position pos:line="5608" pos:column="36"/></operator><operator pos:line="5608" pos:column="33">(<pos:position pos:line="5608" pos:column="34"/></operator><name><name pos:line="5608" pos:column="34">p<pos:position pos:line="5608" pos:column="35"/></name><operator pos:line="5608" pos:column="35">-&gt;<pos:position pos:line="5608" pos:column="40"/></operator><name pos:line="5608" pos:column="37">nMem<pos:position pos:line="5608" pos:column="41"/></name></name><operator pos:line="5608" pos:column="41">+<pos:position pos:line="5608" pos:column="42"/></operator><literal type="number" pos:line="5608" pos:column="42">1<pos:position pos:line="5608" pos:column="43"/></literal> <operator pos:line="5608" pos:column="44">-<pos:position pos:line="5608" pos:column="45"/></operator> <name><name pos:line="5608" pos:column="46">p<pos:position pos:line="5608" pos:column="47"/></name><operator pos:line="5608" pos:column="47">-&gt;<pos:position pos:line="5608" pos:column="52"/></operator><name pos:line="5608" pos:column="49">nCursor<pos:position pos:line="5608" pos:column="56"/></name></name><operator pos:line="5608" pos:column="56">)<pos:position pos:line="5608" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="5608" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5608" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5609" pos:column="3">assert<pos:position pos:line="5609" pos:column="9"/></name><argument_list pos:line="5609" pos:column="9">( <argument><expr><name pos:line="5609" pos:column="11">n<pos:position pos:line="5609" pos:column="12"/></name><operator pos:line="5609" pos:column="12">==<pos:position pos:line="5609" pos:column="14"/></operator><literal type="number" pos:line="5609" pos:column="14">0<pos:position pos:line="5609" pos:column="15"/></literal> <operator pos:line="5609" pos:column="16">||<pos:position pos:line="5609" pos:column="18"/></operator> <operator pos:line="5609" pos:column="19">(<pos:position pos:line="5609" pos:column="20"/></operator><name><name pos:line="5609" pos:column="20">pOp<pos:position pos:line="5609" pos:column="23"/></name><operator pos:line="5609" pos:column="23">-&gt;<pos:position pos:line="5609" pos:column="28"/></operator><name pos:line="5609" pos:column="25">p2<pos:position pos:line="5609" pos:column="27"/></name></name><operator pos:line="5609" pos:column="27">&gt;<pos:position pos:line="5609" pos:column="31"/></operator><literal type="number" pos:line="5609" pos:column="28">0<pos:position pos:line="5609" pos:column="29"/></literal> <operator pos:line="5609" pos:column="30">&amp;&amp;<pos:position pos:line="5609" pos:column="40"/></operator> <name><name pos:line="5609" pos:column="33">pOp<pos:position pos:line="5609" pos:column="36"/></name><operator pos:line="5609" pos:column="36">-&gt;<pos:position pos:line="5609" pos:column="41"/></operator><name pos:line="5609" pos:column="38">p2<pos:position pos:line="5609" pos:column="40"/></name></name><operator pos:line="5609" pos:column="40">+<pos:position pos:line="5609" pos:column="41"/></operator><name pos:line="5609" pos:column="41">n<pos:position pos:line="5609" pos:column="42"/></name><operator pos:line="5609" pos:column="42">&lt;=<pos:position pos:line="5609" pos:column="47"/></operator><operator pos:line="5609" pos:column="44">(<pos:position pos:line="5609" pos:column="45"/></operator><name><name pos:line="5609" pos:column="45">p<pos:position pos:line="5609" pos:column="46"/></name><operator pos:line="5609" pos:column="46">-&gt;<pos:position pos:line="5609" pos:column="51"/></operator><name pos:line="5609" pos:column="48">nMem<pos:position pos:line="5609" pos:column="52"/></name></name><operator pos:line="5609" pos:column="52">+<pos:position pos:line="5609" pos:column="53"/></operator><literal type="number" pos:line="5609" pos:column="53">1<pos:position pos:line="5609" pos:column="54"/></literal> <operator pos:line="5609" pos:column="55">-<pos:position pos:line="5609" pos:column="56"/></operator> <name><name pos:line="5609" pos:column="57">p<pos:position pos:line="5609" pos:column="58"/></name><operator pos:line="5609" pos:column="58">-&gt;<pos:position pos:line="5609" pos:column="63"/></operator><name pos:line="5609" pos:column="60">nCursor<pos:position pos:line="5609" pos:column="67"/></name></name><operator pos:line="5609" pos:column="67">)<pos:position pos:line="5609" pos:column="68"/></operator><operator pos:line="5609" pos:column="68">+<pos:position pos:line="5609" pos:column="69"/></operator><literal type="number" pos:line="5609" pos:column="69">1<pos:position pos:line="5609" pos:column="70"/></literal><operator pos:line="5609" pos:column="70">)<pos:position pos:line="5609" pos:column="71"/></operator></expr></argument> )<pos:position pos:line="5609" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="5609" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5610" pos:column="3">assert<pos:position pos:line="5610" pos:column="9"/></name><argument_list pos:line="5610" pos:column="9">( <argument><expr><name><name pos:line="5610" pos:column="11">pOp<pos:position pos:line="5610" pos:column="14"/></name><operator pos:line="5610" pos:column="14">-&gt;<pos:position pos:line="5610" pos:column="19"/></operator><name pos:line="5610" pos:column="16">p3<pos:position pos:line="5610" pos:column="18"/></name></name><operator pos:line="5610" pos:column="18">&lt;<pos:position pos:line="5610" pos:column="22"/></operator><name><name pos:line="5610" pos:column="19">pOp<pos:position pos:line="5610" pos:column="22"/></name><operator pos:line="5610" pos:column="22">-&gt;<pos:position pos:line="5610" pos:column="27"/></operator><name pos:line="5610" pos:column="24">p2<pos:position pos:line="5610" pos:column="26"/></name></name> <operator pos:line="5610" pos:column="27">||<pos:position pos:line="5610" pos:column="29"/></operator> <name><name pos:line="5610" pos:column="30">pOp<pos:position pos:line="5610" pos:column="33"/></name><operator pos:line="5610" pos:column="33">-&gt;<pos:position pos:line="5610" pos:column="38"/></operator><name pos:line="5610" pos:column="35">p3<pos:position pos:line="5610" pos:column="37"/></name></name><operator pos:line="5610" pos:column="37">&gt;=<pos:position pos:line="5610" pos:column="42"/></operator><name><name pos:line="5610" pos:column="39">pOp<pos:position pos:line="5610" pos:column="42"/></name><operator pos:line="5610" pos:column="42">-&gt;<pos:position pos:line="5610" pos:column="47"/></operator><name pos:line="5610" pos:column="44">p2<pos:position pos:line="5610" pos:column="46"/></name></name><operator pos:line="5610" pos:column="46">+<pos:position pos:line="5610" pos:column="47"/></operator><name pos:line="5610" pos:column="47">n<pos:position pos:line="5610" pos:column="48"/></name></expr></argument> )<pos:position pos:line="5610" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5610" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5611" pos:column="3">pCtx<pos:position pos:line="5611" pos:column="7"/></name> <operator pos:line="5611" pos:column="8">=<pos:position pos:line="5611" pos:column="9"/></operator> <call><name pos:line="5611" pos:column="10">sqlite3DbMallocRawNN<pos:position pos:line="5611" pos:column="30"/></name><argument_list pos:line="5611" pos:column="30">(<argument><expr><name pos:line="5611" pos:column="31">db<pos:position pos:line="5611" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="5611" pos:column="35">sizeof<argument_list pos:line="5611" pos:column="41">(<argument><expr><operator pos:line="5611" pos:column="42">*<pos:position pos:line="5611" pos:column="43"/></operator><name pos:line="5611" pos:column="43">pCtx<pos:position pos:line="5611" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5611" pos:column="48"/></argument_list></sizeof> <operator pos:line="5611" pos:column="49">+<pos:position pos:line="5611" pos:column="50"/></operator> <operator pos:line="5611" pos:column="51">(<pos:position pos:line="5611" pos:column="52"/></operator><name pos:line="5611" pos:column="52">n<pos:position pos:line="5611" pos:column="53"/></name><operator pos:line="5611" pos:column="53">-<pos:position pos:line="5611" pos:column="54"/></operator><literal type="number" pos:line="5611" pos:column="54">1<pos:position pos:line="5611" pos:column="55"/></literal><operator pos:line="5611" pos:column="55">)<pos:position pos:line="5611" pos:column="56"/></operator><operator pos:line="5611" pos:column="56">*<pos:position pos:line="5611" pos:column="57"/></operator><sizeof pos:line="5611" pos:column="57">sizeof<argument_list pos:line="5611" pos:column="63">(<argument><expr><name pos:line="5611" pos:column="64">sqlite3_value<pos:position pos:line="5611" pos:column="77"/></name><operator pos:line="5611" pos:column="77">*<pos:position pos:line="5611" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="5611" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5611" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="5611" pos:column="81"/></expr_stmt>
  <if pos:line="5612" pos:column="3">if<condition pos:line="5612" pos:column="5">( <expr><name pos:line="5612" pos:column="7">pCtx<pos:position pos:line="5612" pos:column="11"/></name><operator pos:line="5612" pos:column="11">==<pos:position pos:line="5612" pos:column="13"/></operator><literal type="number" pos:line="5612" pos:column="13">0<pos:position pos:line="5612" pos:column="14"/></literal></expr> )<pos:position pos:line="5612" pos:column="16"/></condition><then pos:line="5612" pos:column="16"> <block type="pseudo"><goto pos:line="5612" pos:column="17">goto <name pos:line="5612" pos:column="22">no_mem<pos:position pos:line="5612" pos:column="28"/></name>;<pos:position pos:line="5612" pos:column="29"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="5613" pos:column="3">pCtx<pos:position pos:line="5613" pos:column="7"/></name><operator pos:line="5613" pos:column="7">-&gt;<pos:position pos:line="5613" pos:column="12"/></operator><name pos:line="5613" pos:column="9">pMem<pos:position pos:line="5613" pos:column="13"/></name></name> <operator pos:line="5613" pos:column="14">=<pos:position pos:line="5613" pos:column="15"/></operator> <literal type="number" pos:line="5613" pos:column="16">0<pos:position pos:line="5613" pos:column="17"/></literal></expr>;<pos:position pos:line="5613" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5614" pos:column="3">pCtx<pos:position pos:line="5614" pos:column="7"/></name><operator pos:line="5614" pos:column="7">-&gt;<pos:position pos:line="5614" pos:column="12"/></operator><name pos:line="5614" pos:column="9">pFunc<pos:position pos:line="5614" pos:column="14"/></name></name> <operator pos:line="5614" pos:column="15">=<pos:position pos:line="5614" pos:column="16"/></operator> <name><name pos:line="5614" pos:column="17">pOp<pos:position pos:line="5614" pos:column="20"/></name><operator pos:line="5614" pos:column="20">-&gt;<pos:position pos:line="5614" pos:column="25"/></operator><name pos:line="5614" pos:column="22">p4<pos:position pos:line="5614" pos:column="24"/></name><operator pos:line="5614" pos:column="24">.<pos:position pos:line="5614" pos:column="25"/></operator><name pos:line="5614" pos:column="25">pFunc<pos:position pos:line="5614" pos:column="30"/></name></name></expr>;<pos:position pos:line="5614" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5615" pos:column="3">pCtx<pos:position pos:line="5615" pos:column="7"/></name><operator pos:line="5615" pos:column="7">-&gt;<pos:position pos:line="5615" pos:column="12"/></operator><name pos:line="5615" pos:column="9">iOp<pos:position pos:line="5615" pos:column="12"/></name></name> <operator pos:line="5615" pos:column="13">=<pos:position pos:line="5615" pos:column="14"/></operator> <call pos:line="5615" pos:column="15">(<name pos:line="5615" pos:column="16">int<pos:position pos:line="5615" pos:column="19"/></name>)<argument_list pos:line="5615" pos:column="20">(<argument><expr><name pos:line="5615" pos:column="21">pOp<pos:position pos:line="5615" pos:column="24"/></name> <operator pos:line="5615" pos:column="25">-<pos:position pos:line="5615" pos:column="26"/></operator> <name pos:line="5615" pos:column="27">aOp<pos:position pos:line="5615" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5615" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5615" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5616" pos:column="3">pCtx<pos:position pos:line="5616" pos:column="7"/></name><operator pos:line="5616" pos:column="7">-&gt;<pos:position pos:line="5616" pos:column="12"/></operator><name pos:line="5616" pos:column="9">pVdbe<pos:position pos:line="5616" pos:column="14"/></name></name> <operator pos:line="5616" pos:column="15">=<pos:position pos:line="5616" pos:column="16"/></operator> <name pos:line="5616" pos:column="17">p<pos:position pos:line="5616" pos:column="18"/></name></expr>;<pos:position pos:line="5616" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5617" pos:column="3">pCtx<pos:position pos:line="5617" pos:column="7"/></name><operator pos:line="5617" pos:column="7">-&gt;<pos:position pos:line="5617" pos:column="12"/></operator><name pos:line="5617" pos:column="9">argc<pos:position pos:line="5617" pos:column="13"/></name></name> <operator pos:line="5617" pos:column="14">=<pos:position pos:line="5617" pos:column="15"/></operator> <name pos:line="5617" pos:column="16">n<pos:position pos:line="5617" pos:column="17"/></name></expr>;<pos:position pos:line="5617" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5618" pos:column="3">pOp<pos:position pos:line="5618" pos:column="6"/></name><operator pos:line="5618" pos:column="6">-&gt;<pos:position pos:line="5618" pos:column="11"/></operator><name pos:line="5618" pos:column="8">p4type<pos:position pos:line="5618" pos:column="14"/></name></name> <operator pos:line="5618" pos:column="15">=<pos:position pos:line="5618" pos:column="16"/></operator> <name pos:line="5618" pos:column="17">P4_FUNCCTX<pos:position pos:line="5618" pos:column="27"/></name></expr>;<pos:position pos:line="5618" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5619" pos:column="3">pOp<pos:position pos:line="5619" pos:column="6"/></name><operator pos:line="5619" pos:column="6">-&gt;<pos:position pos:line="5619" pos:column="11"/></operator><name pos:line="5619" pos:column="8">p4<pos:position pos:line="5619" pos:column="10"/></name><operator pos:line="5619" pos:column="10">.<pos:position pos:line="5619" pos:column="11"/></operator><name pos:line="5619" pos:column="11">pCtx<pos:position pos:line="5619" pos:column="15"/></name></name> <operator pos:line="5619" pos:column="16">=<pos:position pos:line="5619" pos:column="17"/></operator> <name pos:line="5619" pos:column="18">pCtx<pos:position pos:line="5619" pos:column="22"/></name></expr>;<pos:position pos:line="5619" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5620" pos:column="3">pOp<pos:position pos:line="5620" pos:column="6"/></name><operator pos:line="5620" pos:column="6">-&gt;<pos:position pos:line="5620" pos:column="11"/></operator><name pos:line="5620" pos:column="8">opcode<pos:position pos:line="5620" pos:column="14"/></name></name> <operator pos:line="5620" pos:column="15">=<pos:position pos:line="5620" pos:column="16"/></operator> <name pos:line="5620" pos:column="17">OP_AggStep<pos:position pos:line="5620" pos:column="27"/></name></expr>;<pos:position pos:line="5620" pos:column="28"/></expr_stmt>
  <comment type="block" pos:line="5621" pos:column="3">/* Fall through into OP_AggStep */</comment>
}<pos:position pos:line="5622" pos:column="2"/></block>
<case pos:line="5623" pos:column="1">case <expr><name pos:line="5623" pos:column="6">OP_AggStep<pos:position pos:line="5623" pos:column="16"/></name></expr>:<pos:position pos:line="5623" pos:column="17"/></case> <block pos:line="5623" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="5624" pos:column="3">int<pos:position pos:line="5624" pos:column="6"/></name></type> <name pos:line="5624" pos:column="7">i<pos:position pos:line="5624" pos:column="8"/></name></decl>;<pos:position pos:line="5624" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5625" pos:column="3">sqlite3_context<pos:position pos:line="5625" pos:column="18"/></name> <modifier pos:line="5625" pos:column="19">*<pos:position pos:line="5625" pos:column="20"/></modifier></type><name pos:line="5625" pos:column="20">pCtx<pos:position pos:line="5625" pos:column="24"/></name></decl>;<pos:position pos:line="5625" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5626" pos:column="3">Mem<pos:position pos:line="5626" pos:column="6"/></name> <modifier pos:line="5626" pos:column="7">*<pos:position pos:line="5626" pos:column="8"/></modifier></type><name pos:line="5626" pos:column="8">pMem<pos:position pos:line="5626" pos:column="12"/></name></decl>;<pos:position pos:line="5626" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5627" pos:column="3">Mem<pos:position pos:line="5627" pos:column="6"/></name></type> <name pos:line="5627" pos:column="7">t<pos:position pos:line="5627" pos:column="8"/></name></decl>;<pos:position pos:line="5627" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5629" pos:column="3">assert<pos:position pos:line="5629" pos:column="9"/></name><argument_list pos:line="5629" pos:column="9">( <argument><expr><name><name pos:line="5629" pos:column="11">pOp<pos:position pos:line="5629" pos:column="14"/></name><operator pos:line="5629" pos:column="14">-&gt;<pos:position pos:line="5629" pos:column="19"/></operator><name pos:line="5629" pos:column="16">p4type<pos:position pos:line="5629" pos:column="22"/></name></name><operator pos:line="5629" pos:column="22">==<pos:position pos:line="5629" pos:column="24"/></operator><name pos:line="5629" pos:column="24">P4_FUNCCTX<pos:position pos:line="5629" pos:column="34"/></name></expr></argument> )<pos:position pos:line="5629" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5629" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5630" pos:column="3">pCtx<pos:position pos:line="5630" pos:column="7"/></name> <operator pos:line="5630" pos:column="8">=<pos:position pos:line="5630" pos:column="9"/></operator> <name><name pos:line="5630" pos:column="10">pOp<pos:position pos:line="5630" pos:column="13"/></name><operator pos:line="5630" pos:column="13">-&gt;<pos:position pos:line="5630" pos:column="18"/></operator><name pos:line="5630" pos:column="15">p4<pos:position pos:line="5630" pos:column="17"/></name><operator pos:line="5630" pos:column="17">.<pos:position pos:line="5630" pos:column="18"/></operator><name pos:line="5630" pos:column="18">pCtx<pos:position pos:line="5630" pos:column="22"/></name></name></expr>;<pos:position pos:line="5630" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5631" pos:column="3">pMem<pos:position pos:line="5631" pos:column="7"/></name> <operator pos:line="5631" pos:column="8">=<pos:position pos:line="5631" pos:column="9"/></operator> <operator pos:line="5631" pos:column="10">&amp;<pos:position pos:line="5631" pos:column="15"/></operator><name><name pos:line="5631" pos:column="11">aMem<pos:position pos:line="5631" pos:column="15"/></name><index pos:line="5631" pos:column="15">[<expr><name><name pos:line="5631" pos:column="16">pOp<pos:position pos:line="5631" pos:column="19"/></name><operator pos:line="5631" pos:column="19">-&gt;<pos:position pos:line="5631" pos:column="24"/></operator><name pos:line="5631" pos:column="21">p3<pos:position pos:line="5631" pos:column="23"/></name></name></expr>]<pos:position pos:line="5631" pos:column="24"/></index></name></expr>;<pos:position pos:line="5631" pos:column="25"/></expr_stmt>

  <comment type="block" pos:line="5633" pos:column="3">/* If this function is inside of a trigger, the register array in aMem[]
  ** might change from one evaluation to the next.  The next block of code
  ** checks to see if the register array has changed, and if so it
  ** reinitializes the relavant parts of the sqlite3_context object */</comment>
  <if pos:line="5637" pos:column="3">if<condition pos:line="5637" pos:column="5">( <expr><name><name pos:line="5637" pos:column="7">pCtx<pos:position pos:line="5637" pos:column="11"/></name><operator pos:line="5637" pos:column="11">-&gt;<pos:position pos:line="5637" pos:column="16"/></operator><name pos:line="5637" pos:column="13">pMem<pos:position pos:line="5637" pos:column="17"/></name></name> <operator pos:line="5637" pos:column="18">!=<pos:position pos:line="5637" pos:column="20"/></operator> <name pos:line="5637" pos:column="21">pMem<pos:position pos:line="5637" pos:column="25"/></name></expr> )<pos:position pos:line="5637" pos:column="27"/></condition><then><block pos:line="5637" pos:column="27">{
    <expr_stmt><expr><name><name pos:line="5638" pos:column="5">pCtx<pos:position pos:line="5638" pos:column="9"/></name><operator pos:line="5638" pos:column="9">-&gt;<pos:position pos:line="5638" pos:column="14"/></operator><name pos:line="5638" pos:column="11">pMem<pos:position pos:line="5638" pos:column="15"/></name></name> <operator pos:line="5638" pos:column="16">=<pos:position pos:line="5638" pos:column="17"/></operator> <name pos:line="5638" pos:column="18">pMem<pos:position pos:line="5638" pos:column="22"/></name></expr>;<pos:position pos:line="5638" pos:column="23"/></expr_stmt>
    <for pos:line="5639" pos:column="5">for<control pos:line="5639" pos:column="8">(<init><expr><name pos:line="5639" pos:column="9">i<pos:position pos:line="5639" pos:column="10"/></name><operator pos:line="5639" pos:column="10">=<pos:position pos:line="5639" pos:column="11"/></operator><name><name pos:line="5639" pos:column="11">pCtx<pos:position pos:line="5639" pos:column="15"/></name><operator pos:line="5639" pos:column="15">-&gt;<pos:position pos:line="5639" pos:column="20"/></operator><name pos:line="5639" pos:column="17">argc<pos:position pos:line="5639" pos:column="21"/></name></name><operator pos:line="5639" pos:column="21">-<pos:position pos:line="5639" pos:column="22"/></operator><literal type="number" pos:line="5639" pos:column="22">1<pos:position pos:line="5639" pos:column="23"/></literal></expr>;<pos:position pos:line="5639" pos:column="24"/></init> <condition><expr><name pos:line="5639" pos:column="25">i<pos:position pos:line="5639" pos:column="26"/></name><operator pos:line="5639" pos:column="26">&gt;=<pos:position pos:line="5639" pos:column="31"/></operator><literal type="number" pos:line="5639" pos:column="28">0<pos:position pos:line="5639" pos:column="29"/></literal></expr>;<pos:position pos:line="5639" pos:column="30"/></condition> <incr><expr><name pos:line="5639" pos:column="31">i<pos:position pos:line="5639" pos:column="32"/></name><operator pos:line="5639" pos:column="32">--<pos:position pos:line="5639" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="5639" pos:column="35"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="5639" pos:column="36">pCtx<pos:position pos:line="5639" pos:column="40"/></name><operator pos:line="5639" pos:column="40">-&gt;<pos:position pos:line="5639" pos:column="45"/></operator><name pos:line="5639" pos:column="42">argv<pos:position pos:line="5639" pos:column="46"/></name><index pos:line="5639" pos:column="46">[<expr><name pos:line="5639" pos:column="47">i<pos:position pos:line="5639" pos:column="48"/></name></expr>]<pos:position pos:line="5639" pos:column="49"/></index></name> <operator pos:line="5639" pos:column="50">=<pos:position pos:line="5639" pos:column="51"/></operator> <operator pos:line="5639" pos:column="52">&amp;<pos:position pos:line="5639" pos:column="57"/></operator><name><name pos:line="5639" pos:column="53">aMem<pos:position pos:line="5639" pos:column="57"/></name><index pos:line="5639" pos:column="57">[<expr><name><name pos:line="5639" pos:column="58">pOp<pos:position pos:line="5639" pos:column="61"/></name><operator pos:line="5639" pos:column="61">-&gt;<pos:position pos:line="5639" pos:column="66"/></operator><name pos:line="5639" pos:column="63">p2<pos:position pos:line="5639" pos:column="65"/></name></name><operator pos:line="5639" pos:column="65">+<pos:position pos:line="5639" pos:column="66"/></operator><name pos:line="5639" pos:column="66">i<pos:position pos:line="5639" pos:column="67"/></name></expr>]<pos:position pos:line="5639" pos:column="68"/></index></name></expr>;<pos:position pos:line="5639" pos:column="69"/></expr_stmt></block></for>
  }<pos:position pos:line="5640" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="5642" pos:column="1">#<cpp:directive pos:line="5642" pos:column="2">ifdef<pos:position pos:line="5642" pos:column="7"/></cpp:directive> <name pos:line="5642" pos:column="8">SQLITE_DEBUG<pos:position pos:line="5642" pos:column="20"/></name></cpp:ifdef>
  <for pos:line="5643" pos:column="3">for<control pos:line="5643" pos:column="6">(<init><expr><name pos:line="5643" pos:column="7">i<pos:position pos:line="5643" pos:column="8"/></name><operator pos:line="5643" pos:column="8">=<pos:position pos:line="5643" pos:column="9"/></operator><literal type="number" pos:line="5643" pos:column="9">0<pos:position pos:line="5643" pos:column="10"/></literal></expr>;<pos:position pos:line="5643" pos:column="11"/></init> <condition><expr><name pos:line="5643" pos:column="12">i<pos:position pos:line="5643" pos:column="13"/></name><operator pos:line="5643" pos:column="13">&lt;<pos:position pos:line="5643" pos:column="17"/></operator><name><name pos:line="5643" pos:column="14">pCtx<pos:position pos:line="5643" pos:column="18"/></name><operator pos:line="5643" pos:column="18">-&gt;<pos:position pos:line="5643" pos:column="23"/></operator><name pos:line="5643" pos:column="20">argc<pos:position pos:line="5643" pos:column="24"/></name></name></expr>;<pos:position pos:line="5643" pos:column="25"/></condition> <incr><expr><name pos:line="5643" pos:column="26">i<pos:position pos:line="5643" pos:column="27"/></name><operator pos:line="5643" pos:column="27">++<pos:position pos:line="5643" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="5643" pos:column="30"/></control><block pos:line="5643" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="5644" pos:column="5">assert<pos:position pos:line="5644" pos:column="11"/></name><argument_list pos:line="5644" pos:column="11">( <argument><expr><call><name pos:line="5644" pos:column="13">memIsValid<pos:position pos:line="5644" pos:column="23"/></name><argument_list pos:line="5644" pos:column="23">(<argument><expr><name><name pos:line="5644" pos:column="24">pCtx<pos:position pos:line="5644" pos:column="28"/></name><operator pos:line="5644" pos:column="28">-&gt;<pos:position pos:line="5644" pos:column="33"/></operator><name pos:line="5644" pos:column="30">argv<pos:position pos:line="5644" pos:column="34"/></name><index pos:line="5644" pos:column="34">[<expr><name pos:line="5644" pos:column="35">i<pos:position pos:line="5644" pos:column="36"/></name></expr>]<pos:position pos:line="5644" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="5644" pos:column="38"/></argument_list></call></expr></argument> )<pos:position pos:line="5644" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5644" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5645" pos:column="5">REGISTER_TRACE<pos:position pos:line="5645" pos:column="19"/></name><argument_list pos:line="5645" pos:column="19">(<argument><expr><name><name pos:line="5645" pos:column="20">pOp<pos:position pos:line="5645" pos:column="23"/></name><operator pos:line="5645" pos:column="23">-&gt;<pos:position pos:line="5645" pos:column="28"/></operator><name pos:line="5645" pos:column="25">p2<pos:position pos:line="5645" pos:column="27"/></name></name><operator pos:line="5645" pos:column="27">+<pos:position pos:line="5645" pos:column="28"/></operator><name pos:line="5645" pos:column="28">i<pos:position pos:line="5645" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="5645" pos:column="31">pCtx<pos:position pos:line="5645" pos:column="35"/></name><operator pos:line="5645" pos:column="35">-&gt;<pos:position pos:line="5645" pos:column="40"/></operator><name pos:line="5645" pos:column="37">argv<pos:position pos:line="5645" pos:column="41"/></name><index pos:line="5645" pos:column="41">[<expr><name pos:line="5645" pos:column="42">i<pos:position pos:line="5645" pos:column="43"/></name></expr>]<pos:position pos:line="5645" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="5645" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5645" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="5646" pos:column="4"/></block></for>
<cpp:endif pos:line="5647" pos:column="1">#<cpp:directive pos:line="5647" pos:column="2">endif<pos:position pos:line="5647" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name pos:line="5649" pos:column="3">pMem<pos:position pos:line="5649" pos:column="7"/></name><operator pos:line="5649" pos:column="7">-&gt;<pos:position pos:line="5649" pos:column="12"/></operator><name pos:line="5649" pos:column="9">n<pos:position pos:line="5649" pos:column="10"/></name></name><operator pos:line="5649" pos:column="10">++<pos:position pos:line="5649" pos:column="12"/></operator></expr>;<pos:position pos:line="5649" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5650" pos:column="3">sqlite3VdbeMemInit<pos:position pos:line="5650" pos:column="21"/></name><argument_list pos:line="5650" pos:column="21">(<argument><expr><operator pos:line="5650" pos:column="22">&amp;<pos:position pos:line="5650" pos:column="27"/></operator><name pos:line="5650" pos:column="23">t<pos:position pos:line="5650" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="5650" pos:column="26">db<pos:position pos:line="5650" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="5650" pos:column="30">MEM_Null<pos:position pos:line="5650" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5650" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="5650" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5651" pos:column="3">pCtx<pos:position pos:line="5651" pos:column="7"/></name><operator pos:line="5651" pos:column="7">-&gt;<pos:position pos:line="5651" pos:column="12"/></operator><name pos:line="5651" pos:column="9">pOut<pos:position pos:line="5651" pos:column="13"/></name></name> <operator pos:line="5651" pos:column="14">=<pos:position pos:line="5651" pos:column="15"/></operator> <operator pos:line="5651" pos:column="16">&amp;<pos:position pos:line="5651" pos:column="21"/></operator><name pos:line="5651" pos:column="17">t<pos:position pos:line="5651" pos:column="18"/></name></expr>;<pos:position pos:line="5651" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5652" pos:column="3">pCtx<pos:position pos:line="5652" pos:column="7"/></name><operator pos:line="5652" pos:column="7">-&gt;<pos:position pos:line="5652" pos:column="12"/></operator><name pos:line="5652" pos:column="9">fErrorOrAux<pos:position pos:line="5652" pos:column="20"/></name></name> <operator pos:line="5652" pos:column="21">=<pos:position pos:line="5652" pos:column="22"/></operator> <literal type="number" pos:line="5652" pos:column="23">0<pos:position pos:line="5652" pos:column="24"/></literal></expr>;<pos:position pos:line="5652" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5653" pos:column="3">pCtx<pos:position pos:line="5653" pos:column="7"/></name><operator pos:line="5653" pos:column="7">-&gt;<pos:position pos:line="5653" pos:column="12"/></operator><name pos:line="5653" pos:column="9">skipFlag<pos:position pos:line="5653" pos:column="17"/></name></name> <operator pos:line="5653" pos:column="18">=<pos:position pos:line="5653" pos:column="19"/></operator> <literal type="number" pos:line="5653" pos:column="20">0<pos:position pos:line="5653" pos:column="21"/></literal></expr>;<pos:position pos:line="5653" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call pos:line="5654" pos:column="3">(<name><name pos:line="5654" pos:column="4">pCtx<pos:position pos:line="5654" pos:column="8"/></name><operator pos:line="5654" pos:column="8">-&gt;<pos:position pos:line="5654" pos:column="13"/></operator><name pos:line="5654" pos:column="10">pFunc<pos:position pos:line="5654" pos:column="15"/></name><operator pos:line="5654" pos:column="15">-&gt;<pos:position pos:line="5654" pos:column="20"/></operator><name pos:line="5654" pos:column="17">xSFunc<pos:position pos:line="5654" pos:column="23"/></name></name>)<argument_list pos:line="5654" pos:column="24">(<argument><expr><name pos:line="5654" pos:column="25">pCtx<pos:position pos:line="5654" pos:column="29"/></name></expr></argument>,<argument><expr><name><name pos:line="5654" pos:column="30">pCtx<pos:position pos:line="5654" pos:column="34"/></name><operator pos:line="5654" pos:column="34">-&gt;<pos:position pos:line="5654" pos:column="39"/></operator><name pos:line="5654" pos:column="36">argc<pos:position pos:line="5654" pos:column="40"/></name></name></expr></argument>,<argument><expr><name><name pos:line="5654" pos:column="41">pCtx<pos:position pos:line="5654" pos:column="45"/></name><operator pos:line="5654" pos:column="45">-&gt;<pos:position pos:line="5654" pos:column="50"/></operator><name pos:line="5654" pos:column="47">argv<pos:position pos:line="5654" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="5654" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="5654" pos:column="53"/></expr_stmt> <comment type="block" pos:line="5654" pos:column="54">/* IMP: R-24505-23230 */</comment>
  <if pos:line="5655" pos:column="3">if<condition pos:line="5655" pos:column="5">( <expr><name><name pos:line="5655" pos:column="7">pCtx<pos:position pos:line="5655" pos:column="11"/></name><operator pos:line="5655" pos:column="11">-&gt;<pos:position pos:line="5655" pos:column="16"/></operator><name pos:line="5655" pos:column="13">fErrorOrAux<pos:position pos:line="5655" pos:column="24"/></name></name></expr> )<pos:position pos:line="5655" pos:column="26"/></condition><then><block pos:line="5655" pos:column="26">{
    <if pos:line="5656" pos:column="5">if<condition pos:line="5656" pos:column="7">( <expr><name><name pos:line="5656" pos:column="9">pCtx<pos:position pos:line="5656" pos:column="13"/></name><operator pos:line="5656" pos:column="13">-&gt;<pos:position pos:line="5656" pos:column="18"/></operator><name pos:line="5656" pos:column="15">isError<pos:position pos:line="5656" pos:column="22"/></name></name></expr> )<pos:position pos:line="5656" pos:column="24"/></condition><then><block pos:line="5656" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="5657" pos:column="7">sqlite3VdbeError<pos:position pos:line="5657" pos:column="23"/></name><argument_list pos:line="5657" pos:column="23">(<argument><expr><name pos:line="5657" pos:column="24">p<pos:position pos:line="5657" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5657" pos:column="27">"%s"<pos:position pos:line="5657" pos:column="31"/></literal></expr></argument>, <argument><expr><call><name pos:line="5657" pos:column="33">sqlite3_value_text<pos:position pos:line="5657" pos:column="51"/></name><argument_list pos:line="5657" pos:column="51">(<argument><expr><operator pos:line="5657" pos:column="52">&amp;<pos:position pos:line="5657" pos:column="57"/></operator><name pos:line="5657" pos:column="53">t<pos:position pos:line="5657" pos:column="54"/></name></expr></argument>)<pos:position pos:line="5657" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="5657" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="5657" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name pos:line="5658" pos:column="7">rc<pos:position pos:line="5658" pos:column="9"/></name> <operator pos:line="5658" pos:column="10">=<pos:position pos:line="5658" pos:column="11"/></operator> <name><name pos:line="5658" pos:column="12">pCtx<pos:position pos:line="5658" pos:column="16"/></name><operator pos:line="5658" pos:column="16">-&gt;<pos:position pos:line="5658" pos:column="21"/></operator><name pos:line="5658" pos:column="18">isError<pos:position pos:line="5658" pos:column="25"/></name></name></expr>;<pos:position pos:line="5658" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="5659" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="5660" pos:column="5">sqlite3VdbeMemRelease<pos:position pos:line="5660" pos:column="26"/></name><argument_list pos:line="5660" pos:column="26">(<argument><expr><operator pos:line="5660" pos:column="27">&amp;<pos:position pos:line="5660" pos:column="32"/></operator><name pos:line="5660" pos:column="28">t<pos:position pos:line="5660" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5660" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5660" pos:column="31"/></expr_stmt>
    <if pos:line="5661" pos:column="5">if<condition pos:line="5661" pos:column="7">( <expr><name pos:line="5661" pos:column="9">rc<pos:position pos:line="5661" pos:column="11"/></name></expr> )<pos:position pos:line="5661" pos:column="13"/></condition><then pos:line="5661" pos:column="13"> <block type="pseudo"><goto pos:line="5661" pos:column="14">goto <name pos:line="5661" pos:column="19">abort_due_to_error<pos:position pos:line="5661" pos:column="37"/></name>;<pos:position pos:line="5661" pos:column="38"/></goto></block></then></if>
  }<pos:position pos:line="5662" pos:column="4"/></block></then><else pos:line="5662" pos:column="4">else<block pos:line="5662" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="5663" pos:column="5">assert<pos:position pos:line="5663" pos:column="11"/></name><argument_list pos:line="5663" pos:column="11">( <argument><expr><name><name pos:line="5663" pos:column="13">t<pos:position pos:line="5663" pos:column="14"/></name><operator pos:line="5663" pos:column="14">.<pos:position pos:line="5663" pos:column="15"/></operator><name pos:line="5663" pos:column="15">flags<pos:position pos:line="5663" pos:column="20"/></name></name><operator pos:line="5663" pos:column="20">==<pos:position pos:line="5663" pos:column="22"/></operator><name pos:line="5663" pos:column="22">MEM_Null<pos:position pos:line="5663" pos:column="30"/></name></expr></argument> )<pos:position pos:line="5663" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5663" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="5664" pos:column="4"/></block></else></if>
  <if pos:line="5665" pos:column="3">if<condition pos:line="5665" pos:column="5">( <expr><name><name pos:line="5665" pos:column="7">pCtx<pos:position pos:line="5665" pos:column="11"/></name><operator pos:line="5665" pos:column="11">-&gt;<pos:position pos:line="5665" pos:column="16"/></operator><name pos:line="5665" pos:column="13">skipFlag<pos:position pos:line="5665" pos:column="21"/></name></name></expr> )<pos:position pos:line="5665" pos:column="23"/></condition><then><block pos:line="5665" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="5666" pos:column="5">assert<pos:position pos:line="5666" pos:column="11"/></name><argument_list pos:line="5666" pos:column="11">( <argument><expr><name><name pos:line="5666" pos:column="13">pOp<pos:position pos:line="5666" pos:column="16"/></name><index pos:line="5666" pos:column="16">[<expr><operator pos:line="5666" pos:column="17">-<pos:position pos:line="5666" pos:column="18"/></operator><literal type="number" pos:line="5666" pos:column="18">1<pos:position pos:line="5666" pos:column="19"/></literal></expr>]<pos:position pos:line="5666" pos:column="20"/></index></name><operator pos:line="5666" pos:column="20">.<pos:position pos:line="5666" pos:column="21"/></operator><name pos:line="5666" pos:column="21">opcode<pos:position pos:line="5666" pos:column="27"/></name><operator pos:line="5666" pos:column="27">==<pos:position pos:line="5666" pos:column="29"/></operator><name pos:line="5666" pos:column="29">OP_CollSeq<pos:position pos:line="5666" pos:column="39"/></name></expr></argument> )<pos:position pos:line="5666" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5666" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5667" pos:column="5">i<pos:position pos:line="5667" pos:column="6"/></name> <operator pos:line="5667" pos:column="7">=<pos:position pos:line="5667" pos:column="8"/></operator> <name><name pos:line="5667" pos:column="9">pOp<pos:position pos:line="5667" pos:column="12"/></name><index pos:line="5667" pos:column="12">[<expr><operator pos:line="5667" pos:column="13">-<pos:position pos:line="5667" pos:column="14"/></operator><literal type="number" pos:line="5667" pos:column="14">1<pos:position pos:line="5667" pos:column="15"/></literal></expr>]<pos:position pos:line="5667" pos:column="16"/></index></name><operator pos:line="5667" pos:column="16">.<pos:position pos:line="5667" pos:column="17"/></operator><name pos:line="5667" pos:column="17">p1<pos:position pos:line="5667" pos:column="19"/></name></expr>;<pos:position pos:line="5667" pos:column="20"/></expr_stmt>
    <if pos:line="5668" pos:column="5">if<condition pos:line="5668" pos:column="7">( <expr><name pos:line="5668" pos:column="9">i<pos:position pos:line="5668" pos:column="10"/></name></expr> )<pos:position pos:line="5668" pos:column="12"/></condition><then pos:line="5668" pos:column="12"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="5668" pos:column="13">sqlite3VdbeMemSetInt64<pos:position pos:line="5668" pos:column="35"/></name><argument_list pos:line="5668" pos:column="35">(<argument><expr><operator pos:line="5668" pos:column="36">&amp;<pos:position pos:line="5668" pos:column="41"/></operator><name><name pos:line="5668" pos:column="37">aMem<pos:position pos:line="5668" pos:column="41"/></name><index pos:line="5668" pos:column="41">[<expr><name pos:line="5668" pos:column="42">i<pos:position pos:line="5668" pos:column="43"/></name></expr>]<pos:position pos:line="5668" pos:column="44"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="5668" pos:column="46">1<pos:position pos:line="5668" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="5668" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5668" pos:column="49"/></expr_stmt></block></then></if>
  }<pos:position pos:line="5669" pos:column="4"/></block></then></if>
  <break pos:line="5670" pos:column="3">break;<pos:position pos:line="5670" pos:column="9"/></break>
}<pos:position pos:line="5671" pos:column="2"/></block>

<comment type="block" pos:line="5673" pos:column="1">/* Opcode: AggFinal P1 P2 * P4 *
** Synopsis: accum=r[P1] N=P2
**
** Execute the finalizer function for an aggregate.  P1 is
** the memory location that is the accumulator for the aggregate.
**
** P2 is the number of arguments that the step function takes and
** P4 is a pointer to the FuncDef for this function.  The P2
** argument is not used by this opcode.  It is only there to disambiguate
** functions that can take varying numbers of arguments.  The
** P4 argument is only needed for the degenerate case where
** the step function was not previously called.
*/</comment>
<case pos:line="5686" pos:column="1">case <expr><name pos:line="5686" pos:column="6">OP_AggFinal<pos:position pos:line="5686" pos:column="17"/></name></expr>:<pos:position pos:line="5686" pos:column="18"/></case> <block pos:line="5686" pos:column="19">{
  <decl_stmt><decl><type><name pos:line="5687" pos:column="3">Mem<pos:position pos:line="5687" pos:column="6"/></name> <modifier pos:line="5687" pos:column="7">*<pos:position pos:line="5687" pos:column="8"/></modifier></type><name pos:line="5687" pos:column="8">pMem<pos:position pos:line="5687" pos:column="12"/></name></decl>;<pos:position pos:line="5687" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="5688" pos:column="3">assert<pos:position pos:line="5688" pos:column="9"/></name><argument_list pos:line="5688" pos:column="9">( <argument><expr><name><name pos:line="5688" pos:column="11">pOp<pos:position pos:line="5688" pos:column="14"/></name><operator pos:line="5688" pos:column="14">-&gt;<pos:position pos:line="5688" pos:column="19"/></operator><name pos:line="5688" pos:column="16">p1<pos:position pos:line="5688" pos:column="18"/></name></name><operator pos:line="5688" pos:column="18">&gt;<pos:position pos:line="5688" pos:column="22"/></operator><literal type="number" pos:line="5688" pos:column="19">0<pos:position pos:line="5688" pos:column="20"/></literal> <operator pos:line="5688" pos:column="21">&amp;&amp;<pos:position pos:line="5688" pos:column="31"/></operator> <name><name pos:line="5688" pos:column="24">pOp<pos:position pos:line="5688" pos:column="27"/></name><operator pos:line="5688" pos:column="27">-&gt;<pos:position pos:line="5688" pos:column="32"/></operator><name pos:line="5688" pos:column="29">p1<pos:position pos:line="5688" pos:column="31"/></name></name><operator pos:line="5688" pos:column="31">&lt;=<pos:position pos:line="5688" pos:column="36"/></operator><operator pos:line="5688" pos:column="33">(<pos:position pos:line="5688" pos:column="34"/></operator><name><name pos:line="5688" pos:column="34">p<pos:position pos:line="5688" pos:column="35"/></name><operator pos:line="5688" pos:column="35">-&gt;<pos:position pos:line="5688" pos:column="40"/></operator><name pos:line="5688" pos:column="37">nMem<pos:position pos:line="5688" pos:column="41"/></name></name><operator pos:line="5688" pos:column="41">+<pos:position pos:line="5688" pos:column="42"/></operator><literal type="number" pos:line="5688" pos:column="42">1<pos:position pos:line="5688" pos:column="43"/></literal> <operator pos:line="5688" pos:column="44">-<pos:position pos:line="5688" pos:column="45"/></operator> <name><name pos:line="5688" pos:column="46">p<pos:position pos:line="5688" pos:column="47"/></name><operator pos:line="5688" pos:column="47">-&gt;<pos:position pos:line="5688" pos:column="52"/></operator><name pos:line="5688" pos:column="49">nCursor<pos:position pos:line="5688" pos:column="56"/></name></name><operator pos:line="5688" pos:column="56">)<pos:position pos:line="5688" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="5688" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5688" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5689" pos:column="3">pMem<pos:position pos:line="5689" pos:column="7"/></name> <operator pos:line="5689" pos:column="8">=<pos:position pos:line="5689" pos:column="9"/></operator> <operator pos:line="5689" pos:column="10">&amp;<pos:position pos:line="5689" pos:column="15"/></operator><name><name pos:line="5689" pos:column="11">aMem<pos:position pos:line="5689" pos:column="15"/></name><index pos:line="5689" pos:column="15">[<expr><name><name pos:line="5689" pos:column="16">pOp<pos:position pos:line="5689" pos:column="19"/></name><operator pos:line="5689" pos:column="19">-&gt;<pos:position pos:line="5689" pos:column="24"/></operator><name pos:line="5689" pos:column="21">p1<pos:position pos:line="5689" pos:column="23"/></name></name></expr>]<pos:position pos:line="5689" pos:column="24"/></index></name></expr>;<pos:position pos:line="5689" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5690" pos:column="3">assert<pos:position pos:line="5690" pos:column="9"/></name><argument_list pos:line="5690" pos:column="9">( <argument><expr><operator pos:line="5690" pos:column="11">(<pos:position pos:line="5690" pos:column="12"/></operator><name><name pos:line="5690" pos:column="12">pMem<pos:position pos:line="5690" pos:column="16"/></name><operator pos:line="5690" pos:column="16">-&gt;<pos:position pos:line="5690" pos:column="21"/></operator><name pos:line="5690" pos:column="18">flags<pos:position pos:line="5690" pos:column="23"/></name></name> <operator pos:line="5690" pos:column="24">&amp;<pos:position pos:line="5690" pos:column="29"/></operator> <operator pos:line="5690" pos:column="26">~<pos:position pos:line="5690" pos:column="27"/></operator><operator pos:line="5690" pos:column="27">(<pos:position pos:line="5690" pos:column="28"/></operator><name pos:line="5690" pos:column="28">MEM_Null<pos:position pos:line="5690" pos:column="36"/></name><operator pos:line="5690" pos:column="36">|<pos:position pos:line="5690" pos:column="37"/></operator><name pos:line="5690" pos:column="37">MEM_Agg<pos:position pos:line="5690" pos:column="44"/></name><operator pos:line="5690" pos:column="44">)<pos:position pos:line="5690" pos:column="45"/></operator><operator pos:line="5690" pos:column="45">)<pos:position pos:line="5690" pos:column="46"/></operator><operator pos:line="5690" pos:column="46">==<pos:position pos:line="5690" pos:column="48"/></operator><literal type="number" pos:line="5690" pos:column="48">0<pos:position pos:line="5690" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="5690" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="5690" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5691" pos:column="3">rc<pos:position pos:line="5691" pos:column="5"/></name> <operator pos:line="5691" pos:column="6">=<pos:position pos:line="5691" pos:column="7"/></operator> <call><name pos:line="5691" pos:column="8">sqlite3VdbeMemFinalize<pos:position pos:line="5691" pos:column="30"/></name><argument_list pos:line="5691" pos:column="30">(<argument><expr><name pos:line="5691" pos:column="31">pMem<pos:position pos:line="5691" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="5691" pos:column="37">pOp<pos:position pos:line="5691" pos:column="40"/></name><operator pos:line="5691" pos:column="40">-&gt;<pos:position pos:line="5691" pos:column="45"/></operator><name pos:line="5691" pos:column="42">p4<pos:position pos:line="5691" pos:column="44"/></name><operator pos:line="5691" pos:column="44">.<pos:position pos:line="5691" pos:column="45"/></operator><name pos:line="5691" pos:column="45">pFunc<pos:position pos:line="5691" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="5691" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="5691" pos:column="52"/></expr_stmt>
  <if pos:line="5692" pos:column="3">if<condition pos:line="5692" pos:column="5">( <expr><name pos:line="5692" pos:column="7">rc<pos:position pos:line="5692" pos:column="9"/></name></expr> )<pos:position pos:line="5692" pos:column="11"/></condition><then><block pos:line="5692" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="5693" pos:column="5">sqlite3VdbeError<pos:position pos:line="5693" pos:column="21"/></name><argument_list pos:line="5693" pos:column="21">(<argument><expr><name pos:line="5693" pos:column="22">p<pos:position pos:line="5693" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5693" pos:column="25">"%s"<pos:position pos:line="5693" pos:column="29"/></literal></expr></argument>, <argument><expr><call><name pos:line="5693" pos:column="31">sqlite3_value_text<pos:position pos:line="5693" pos:column="49"/></name><argument_list pos:line="5693" pos:column="49">(<argument><expr><name pos:line="5693" pos:column="50">pMem<pos:position pos:line="5693" pos:column="54"/></name></expr></argument>)<pos:position pos:line="5693" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="5693" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="5693" pos:column="57"/></expr_stmt>
    <goto pos:line="5694" pos:column="5">goto <name pos:line="5694" pos:column="10">abort_due_to_error<pos:position pos:line="5694" pos:column="28"/></name>;<pos:position pos:line="5694" pos:column="29"/></goto>
  }<pos:position pos:line="5695" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="5696" pos:column="3">sqlite3VdbeChangeEncoding<pos:position pos:line="5696" pos:column="28"/></name><argument_list pos:line="5696" pos:column="28">(<argument><expr><name pos:line="5696" pos:column="29">pMem<pos:position pos:line="5696" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="5696" pos:column="35">encoding<pos:position pos:line="5696" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5696" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5696" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5697" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="5697" pos:column="22"/></name><argument_list pos:line="5697" pos:column="22">(<argument><expr><name pos:line="5697" pos:column="23">pMem<pos:position pos:line="5697" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5697" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5697" pos:column="29"/></expr_stmt>
  <if pos:line="5698" pos:column="3">if<condition pos:line="5698" pos:column="5">( <expr><call><name pos:line="5698" pos:column="7">sqlite3VdbeMemTooBig<pos:position pos:line="5698" pos:column="27"/></name><argument_list pos:line="5698" pos:column="27">(<argument><expr><name pos:line="5698" pos:column="28">pMem<pos:position pos:line="5698" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5698" pos:column="33"/></argument_list></call></expr> )<pos:position pos:line="5698" pos:column="35"/></condition><then><block pos:line="5698" pos:column="35">{
    <goto pos:line="5699" pos:column="5">goto <name pos:line="5699" pos:column="10">too_big<pos:position pos:line="5699" pos:column="17"/></name>;<pos:position pos:line="5699" pos:column="18"/></goto>
  }<pos:position pos:line="5700" pos:column="4"/></block></then></if>
  <break pos:line="5701" pos:column="3">break;<pos:position pos:line="5701" pos:column="9"/></break>
}<pos:position pos:line="5702" pos:column="2"/></block>

<cpp:ifndef pos:line="5704" pos:column="1">#<cpp:directive pos:line="5704" pos:column="2">ifndef<pos:position pos:line="5704" pos:column="8"/></cpp:directive> <name pos:line="5704" pos:column="9">SQLITE_OMIT_WAL<pos:position pos:line="5704" pos:column="24"/></name></cpp:ifndef>
<comment type="block" pos:line="5705" pos:column="1">/* Opcode: Checkpoint P1 P2 P3 * *
**
** Checkpoint database P1. This is a no-op if P1 is not currently in
** WAL mode. Parameter P2 is one of SQLITE_CHECKPOINT_PASSIVE, FULL,
** RESTART, or TRUNCATE.  Write 1 or 0 into mem[P3] if the checkpoint returns
** SQLITE_BUSY or not, respectively.  Write the number of pages in the
** WAL after the checkpoint into mem[P3+1] and the number of pages
** in the WAL that have been checkpointed after the checkpoint
** completes into mem[P3+2].  However on an error, mem[P3+1] and
** mem[P3+2] are initialized to -1.
*/</comment>
<case pos:line="5716" pos:column="1">case <expr><name pos:line="5716" pos:column="6">OP_Checkpoint<pos:position pos:line="5716" pos:column="19"/></name></expr>:<pos:position pos:line="5716" pos:column="20"/></case> <block pos:line="5716" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="5717" pos:column="3">int<pos:position pos:line="5717" pos:column="6"/></name></type> <name pos:line="5717" pos:column="7">i<pos:position pos:line="5717" pos:column="8"/></name></decl>;<pos:position pos:line="5717" pos:column="9"/></decl_stmt>                          <comment type="block" pos:line="5717" pos:column="35">/* Loop counter */</comment>
  <decl_stmt><decl><type><name pos:line="5718" pos:column="3">int<pos:position pos:line="5718" pos:column="6"/></name></type> <name><name pos:line="5718" pos:column="7">aRes<pos:position pos:line="5718" pos:column="11"/></name><index pos:line="5718" pos:column="11">[<expr><literal type="number" pos:line="5718" pos:column="12">3<pos:position pos:line="5718" pos:column="13"/></literal></expr>]<pos:position pos:line="5718" pos:column="14"/></index></name></decl>;<pos:position pos:line="5718" pos:column="15"/></decl_stmt>                    <comment type="block" pos:line="5718" pos:column="35">/* Results */</comment>
  <decl_stmt><decl><type><name pos:line="5719" pos:column="3">Mem<pos:position pos:line="5719" pos:column="6"/></name> <modifier pos:line="5719" pos:column="7">*<pos:position pos:line="5719" pos:column="8"/></modifier></type><name pos:line="5719" pos:column="8">pMem<pos:position pos:line="5719" pos:column="12"/></name></decl>;<pos:position pos:line="5719" pos:column="13"/></decl_stmt>                      <comment type="block" pos:line="5719" pos:column="35">/* Write results here */</comment>

  <expr_stmt><expr><call><name pos:line="5721" pos:column="3">assert<pos:position pos:line="5721" pos:column="9"/></name><argument_list pos:line="5721" pos:column="9">( <argument><expr><name><name pos:line="5721" pos:column="11">p<pos:position pos:line="5721" pos:column="12"/></name><operator pos:line="5721" pos:column="12">-&gt;<pos:position pos:line="5721" pos:column="17"/></operator><name pos:line="5721" pos:column="14">readOnly<pos:position pos:line="5721" pos:column="22"/></name></name><operator pos:line="5721" pos:column="22">==<pos:position pos:line="5721" pos:column="24"/></operator><literal type="number" pos:line="5721" pos:column="24">0<pos:position pos:line="5721" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="5721" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5721" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5722" pos:column="3">aRes<pos:position pos:line="5722" pos:column="7"/></name><index pos:line="5722" pos:column="7">[<expr><literal type="number" pos:line="5722" pos:column="8">0<pos:position pos:line="5722" pos:column="9"/></literal></expr>]<pos:position pos:line="5722" pos:column="10"/></index></name> <operator pos:line="5722" pos:column="11">=<pos:position pos:line="5722" pos:column="12"/></operator> <literal type="number" pos:line="5722" pos:column="13">0<pos:position pos:line="5722" pos:column="14"/></literal></expr>;<pos:position pos:line="5722" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5723" pos:column="3">aRes<pos:position pos:line="5723" pos:column="7"/></name><index pos:line="5723" pos:column="7">[<expr><literal type="number" pos:line="5723" pos:column="8">1<pos:position pos:line="5723" pos:column="9"/></literal></expr>]<pos:position pos:line="5723" pos:column="10"/></index></name> <operator pos:line="5723" pos:column="11">=<pos:position pos:line="5723" pos:column="12"/></operator> <name><name pos:line="5723" pos:column="13">aRes<pos:position pos:line="5723" pos:column="17"/></name><index pos:line="5723" pos:column="17">[<expr><literal type="number" pos:line="5723" pos:column="18">2<pos:position pos:line="5723" pos:column="19"/></literal></expr>]<pos:position pos:line="5723" pos:column="20"/></index></name> <operator pos:line="5723" pos:column="21">=<pos:position pos:line="5723" pos:column="22"/></operator> <operator pos:line="5723" pos:column="23">-<pos:position pos:line="5723" pos:column="24"/></operator><literal type="number" pos:line="5723" pos:column="24">1<pos:position pos:line="5723" pos:column="25"/></literal></expr>;<pos:position pos:line="5723" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5724" pos:column="3">assert<pos:position pos:line="5724" pos:column="9"/></name><argument_list pos:line="5724" pos:column="9">( <argument><expr><name><name pos:line="5724" pos:column="11">pOp<pos:position pos:line="5724" pos:column="14"/></name><operator pos:line="5724" pos:column="14">-&gt;<pos:position pos:line="5724" pos:column="19"/></operator><name pos:line="5724" pos:column="16">p2<pos:position pos:line="5724" pos:column="18"/></name></name><operator pos:line="5724" pos:column="18">==<pos:position pos:line="5724" pos:column="20"/></operator><name pos:line="5724" pos:column="20">SQLITE_CHECKPOINT_PASSIVE<pos:position pos:line="5724" pos:column="45"/></name>
       <operator pos:line="5725" pos:column="8">||<pos:position pos:line="5725" pos:column="10"/></operator> <name><name pos:line="5725" pos:column="11">pOp<pos:position pos:line="5725" pos:column="14"/></name><operator pos:line="5725" pos:column="14">-&gt;<pos:position pos:line="5725" pos:column="19"/></operator><name pos:line="5725" pos:column="16">p2<pos:position pos:line="5725" pos:column="18"/></name></name><operator pos:line="5725" pos:column="18">==<pos:position pos:line="5725" pos:column="20"/></operator><name pos:line="5725" pos:column="20">SQLITE_CHECKPOINT_FULL<pos:position pos:line="5725" pos:column="42"/></name>
       <operator pos:line="5726" pos:column="8">||<pos:position pos:line="5726" pos:column="10"/></operator> <name><name pos:line="5726" pos:column="11">pOp<pos:position pos:line="5726" pos:column="14"/></name><operator pos:line="5726" pos:column="14">-&gt;<pos:position pos:line="5726" pos:column="19"/></operator><name pos:line="5726" pos:column="16">p2<pos:position pos:line="5726" pos:column="18"/></name></name><operator pos:line="5726" pos:column="18">==<pos:position pos:line="5726" pos:column="20"/></operator><name pos:line="5726" pos:column="20">SQLITE_CHECKPOINT_RESTART<pos:position pos:line="5726" pos:column="45"/></name>
       <operator pos:line="5727" pos:column="8">||<pos:position pos:line="5727" pos:column="10"/></operator> <name><name pos:line="5727" pos:column="11">pOp<pos:position pos:line="5727" pos:column="14"/></name><operator pos:line="5727" pos:column="14">-&gt;<pos:position pos:line="5727" pos:column="19"/></operator><name pos:line="5727" pos:column="16">p2<pos:position pos:line="5727" pos:column="18"/></name></name><operator pos:line="5727" pos:column="18">==<pos:position pos:line="5727" pos:column="20"/></operator><name pos:line="5727" pos:column="20">SQLITE_CHECKPOINT_TRUNCATE<pos:position pos:line="5727" pos:column="46"/></name></expr></argument>
  )<pos:position pos:line="5728" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="5728" pos:column="5"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5729" pos:column="3">rc<pos:position pos:line="5729" pos:column="5"/></name> <operator pos:line="5729" pos:column="6">=<pos:position pos:line="5729" pos:column="7"/></operator> <call><name pos:line="5729" pos:column="8">sqlite3Checkpoint<pos:position pos:line="5729" pos:column="25"/></name><argument_list pos:line="5729" pos:column="25">(<argument><expr><name pos:line="5729" pos:column="26">db<pos:position pos:line="5729" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="5729" pos:column="30">pOp<pos:position pos:line="5729" pos:column="33"/></name><operator pos:line="5729" pos:column="33">-&gt;<pos:position pos:line="5729" pos:column="38"/></operator><name pos:line="5729" pos:column="35">p1<pos:position pos:line="5729" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5729" pos:column="39">pOp<pos:position pos:line="5729" pos:column="42"/></name><operator pos:line="5729" pos:column="42">-&gt;<pos:position pos:line="5729" pos:column="47"/></operator><name pos:line="5729" pos:column="44">p2<pos:position pos:line="5729" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="5729" pos:column="48">&amp;<pos:position pos:line="5729" pos:column="53"/></operator><name><name pos:line="5729" pos:column="49">aRes<pos:position pos:line="5729" pos:column="53"/></name><index pos:line="5729" pos:column="53">[<expr><literal type="number" pos:line="5729" pos:column="54">1<pos:position pos:line="5729" pos:column="55"/></literal></expr>]<pos:position pos:line="5729" pos:column="56"/></index></name></expr></argument>, <argument><expr><operator pos:line="5729" pos:column="58">&amp;<pos:position pos:line="5729" pos:column="63"/></operator><name><name pos:line="5729" pos:column="59">aRes<pos:position pos:line="5729" pos:column="63"/></name><index pos:line="5729" pos:column="63">[<expr><literal type="number" pos:line="5729" pos:column="64">2<pos:position pos:line="5729" pos:column="65"/></literal></expr>]<pos:position pos:line="5729" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="5729" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="5729" pos:column="68"/></expr_stmt>
  <if pos:line="5730" pos:column="3">if<condition pos:line="5730" pos:column="5">( <expr><name pos:line="5730" pos:column="7">rc<pos:position pos:line="5730" pos:column="9"/></name></expr> )<pos:position pos:line="5730" pos:column="11"/></condition><then><block pos:line="5730" pos:column="11">{
    <if pos:line="5731" pos:column="5">if<condition pos:line="5731" pos:column="7">( <expr><name pos:line="5731" pos:column="9">rc<pos:position pos:line="5731" pos:column="11"/></name><operator pos:line="5731" pos:column="11">!=<pos:position pos:line="5731" pos:column="13"/></operator><name pos:line="5731" pos:column="13">SQLITE_BUSY<pos:position pos:line="5731" pos:column="24"/></name></expr> )<pos:position pos:line="5731" pos:column="26"/></condition><then pos:line="5731" pos:column="26"> <block type="pseudo"><goto pos:line="5731" pos:column="27">goto <name pos:line="5731" pos:column="32">abort_due_to_error<pos:position pos:line="5731" pos:column="50"/></name>;<pos:position pos:line="5731" pos:column="51"/></goto></block></then></if>
    <expr_stmt><expr><name pos:line="5732" pos:column="5">rc<pos:position pos:line="5732" pos:column="7"/></name> <operator pos:line="5732" pos:column="8">=<pos:position pos:line="5732" pos:column="9"/></operator> <name pos:line="5732" pos:column="10">SQLITE_OK<pos:position pos:line="5732" pos:column="19"/></name></expr>;<pos:position pos:line="5732" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5733" pos:column="5">aRes<pos:position pos:line="5733" pos:column="9"/></name><index pos:line="5733" pos:column="9">[<expr><literal type="number" pos:line="5733" pos:column="10">0<pos:position pos:line="5733" pos:column="11"/></literal></expr>]<pos:position pos:line="5733" pos:column="12"/></index></name> <operator pos:line="5733" pos:column="13">=<pos:position pos:line="5733" pos:column="14"/></operator> <literal type="number" pos:line="5733" pos:column="15">1<pos:position pos:line="5733" pos:column="16"/></literal></expr>;<pos:position pos:line="5733" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="5734" pos:column="4"/></block></then></if>
  <for pos:line="5735" pos:column="3">for<control pos:line="5735" pos:column="6">(<init><expr><name pos:line="5735" pos:column="7">i<pos:position pos:line="5735" pos:column="8"/></name><operator pos:line="5735" pos:column="8">=<pos:position pos:line="5735" pos:column="9"/></operator><literal type="number" pos:line="5735" pos:column="9">0<pos:position pos:line="5735" pos:column="10"/></literal></expr><operator pos:line="5735" pos:column="10">,<pos:position pos:line="5735" pos:column="11"/></operator> <expr><name pos:line="5735" pos:column="12">pMem<pos:position pos:line="5735" pos:column="16"/></name> <operator pos:line="5735" pos:column="17">=<pos:position pos:line="5735" pos:column="18"/></operator> <operator pos:line="5735" pos:column="19">&amp;<pos:position pos:line="5735" pos:column="24"/></operator><name><name pos:line="5735" pos:column="20">aMem<pos:position pos:line="5735" pos:column="24"/></name><index pos:line="5735" pos:column="24">[<expr><name><name pos:line="5735" pos:column="25">pOp<pos:position pos:line="5735" pos:column="28"/></name><operator pos:line="5735" pos:column="28">-&gt;<pos:position pos:line="5735" pos:column="33"/></operator><name pos:line="5735" pos:column="30">p3<pos:position pos:line="5735" pos:column="32"/></name></name></expr>]<pos:position pos:line="5735" pos:column="33"/></index></name></expr>;<pos:position pos:line="5735" pos:column="34"/></init> <condition><expr><name pos:line="5735" pos:column="35">i<pos:position pos:line="5735" pos:column="36"/></name><operator pos:line="5735" pos:column="36">&lt;<pos:position pos:line="5735" pos:column="40"/></operator><literal type="number" pos:line="5735" pos:column="37">3<pos:position pos:line="5735" pos:column="38"/></literal></expr>;<pos:position pos:line="5735" pos:column="39"/></condition> <incr><expr><name pos:line="5735" pos:column="40">i<pos:position pos:line="5735" pos:column="41"/></name><operator pos:line="5735" pos:column="41">++<pos:position pos:line="5735" pos:column="43"/></operator></expr><operator pos:line="5735" pos:column="43">,<pos:position pos:line="5735" pos:column="44"/></operator> <expr><name pos:line="5735" pos:column="45">pMem<pos:position pos:line="5735" pos:column="49"/></name><operator pos:line="5735" pos:column="49">++<pos:position pos:line="5735" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="5735" pos:column="52"/></control><block pos:line="5735" pos:column="52">{
    <expr_stmt><expr><call><name pos:line="5736" pos:column="5">sqlite3VdbeMemSetInt64<pos:position pos:line="5736" pos:column="27"/></name><argument_list pos:line="5736" pos:column="27">(<argument><expr><name pos:line="5736" pos:column="28">pMem<pos:position pos:line="5736" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="5736" pos:column="34">(<pos:position pos:line="5736" pos:column="35"/></operator><name pos:line="5736" pos:column="35">i64<pos:position pos:line="5736" pos:column="38"/></name><operator pos:line="5736" pos:column="38">)<pos:position pos:line="5736" pos:column="39"/></operator><name><name pos:line="5736" pos:column="39">aRes<pos:position pos:line="5736" pos:column="43"/></name><index pos:line="5736" pos:column="43">[<expr><name pos:line="5736" pos:column="44">i<pos:position pos:line="5736" pos:column="45"/></name></expr>]<pos:position pos:line="5736" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="5736" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="5736" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="5737" pos:column="4"/></block></for>    
  <break pos:line="5738" pos:column="3">break;<pos:position pos:line="5738" pos:column="9"/></break>
}<pos:position pos:line="5739" pos:column="2"/></block><empty_stmt pos:line="5739" pos:column="2">;<pos:position pos:line="5739" pos:column="3"/></empty_stmt>  
<cpp:endif pos:line="5740" pos:column="1">#<cpp:directive pos:line="5740" pos:column="2">endif<pos:position pos:line="5740" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="5742" pos:column="1">#<cpp:directive pos:line="5742" pos:column="2">ifndef<pos:position pos:line="5742" pos:column="8"/></cpp:directive> <name pos:line="5742" pos:column="9">SQLITE_OMIT_PRAGMA<pos:position pos:line="5742" pos:column="27"/></name></cpp:ifndef>
<comment type="block" pos:line="5743" pos:column="1">/* Opcode: JournalMode P1 P2 P3 * *
**
** Change the journal mode of database P1 to P3. P3 must be one of the
** PAGER_JOURNALMODE_XXX values. If changing between the various rollback
** modes (delete, truncate, persist, off and memory), this is a simple
** operation. No IO is required.
**
** If changing into or out of WAL mode the procedure is more complicated.
**
** Write a string containing the final journal-mode to register P2.
*/</comment>
<case pos:line="5754" pos:column="1">case <expr><name pos:line="5754" pos:column="6">OP_JournalMode<pos:position pos:line="5754" pos:column="20"/></name></expr>:<pos:position pos:line="5754" pos:column="21"/></case> <block pos:line="5754" pos:column="22">{    <comment type="block" pos:line="5754" pos:column="27">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="5755" pos:column="3">Btree<pos:position pos:line="5755" pos:column="8"/></name> <modifier pos:line="5755" pos:column="9">*<pos:position pos:line="5755" pos:column="10"/></modifier></type><name pos:line="5755" pos:column="10">pBt<pos:position pos:line="5755" pos:column="13"/></name></decl>;<pos:position pos:line="5755" pos:column="14"/></decl_stmt>                     <comment type="block" pos:line="5755" pos:column="35">/* Btree to change journal mode of */</comment>
  <decl_stmt><decl><type><name pos:line="5756" pos:column="3">Pager<pos:position pos:line="5756" pos:column="8"/></name> <modifier pos:line="5756" pos:column="9">*<pos:position pos:line="5756" pos:column="10"/></modifier></type><name pos:line="5756" pos:column="10">pPager<pos:position pos:line="5756" pos:column="16"/></name></decl>;<pos:position pos:line="5756" pos:column="17"/></decl_stmt>                  <comment type="block" pos:line="5756" pos:column="35">/* Pager associated with pBt */</comment>
  <decl_stmt><decl><type><name pos:line="5757" pos:column="3">int<pos:position pos:line="5757" pos:column="6"/></name></type> <name pos:line="5757" pos:column="7">eNew<pos:position pos:line="5757" pos:column="11"/></name></decl>;<pos:position pos:line="5757" pos:column="12"/></decl_stmt>                       <comment type="block" pos:line="5757" pos:column="35">/* New journal mode */</comment>
  <decl_stmt><decl><type><name pos:line="5758" pos:column="3">int<pos:position pos:line="5758" pos:column="6"/></name></type> <name pos:line="5758" pos:column="7">eOld<pos:position pos:line="5758" pos:column="11"/></name></decl>;<pos:position pos:line="5758" pos:column="12"/></decl_stmt>                       <comment type="block" pos:line="5758" pos:column="35">/* The old journal mode */</comment>
<cpp:ifndef pos:line="5759" pos:column="1">#<cpp:directive pos:line="5759" pos:column="2">ifndef<pos:position pos:line="5759" pos:column="8"/></cpp:directive> <name pos:line="5759" pos:column="9">SQLITE_OMIT_WAL<pos:position pos:line="5759" pos:column="24"/></name></cpp:ifndef>
  <decl_stmt><decl><type><specifier pos:line="5760" pos:column="3">const<pos:position pos:line="5760" pos:column="8"/></specifier> <name pos:line="5760" pos:column="9">char<pos:position pos:line="5760" pos:column="13"/></name> <modifier pos:line="5760" pos:column="14">*<pos:position pos:line="5760" pos:column="15"/></modifier></type><name pos:line="5760" pos:column="15">zFilename<pos:position pos:line="5760" pos:column="24"/></name></decl>;<pos:position pos:line="5760" pos:column="25"/></decl_stmt>          <comment type="block" pos:line="5760" pos:column="35">/* Name of database file for pPager */</comment>
<cpp:endif pos:line="5761" pos:column="1">#<cpp:directive pos:line="5761" pos:column="2">endif<pos:position pos:line="5761" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="5763" pos:column="3">pOut<pos:position pos:line="5763" pos:column="7"/></name> <operator pos:line="5763" pos:column="8">=<pos:position pos:line="5763" pos:column="9"/></operator> <call><name pos:line="5763" pos:column="10">out2Prerelease<pos:position pos:line="5763" pos:column="24"/></name><argument_list pos:line="5763" pos:column="24">(<argument><expr><name pos:line="5763" pos:column="25">p<pos:position pos:line="5763" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="5763" pos:column="28">pOp<pos:position pos:line="5763" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5763" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5763" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5764" pos:column="3">eNew<pos:position pos:line="5764" pos:column="7"/></name> <operator pos:line="5764" pos:column="8">=<pos:position pos:line="5764" pos:column="9"/></operator> <name><name pos:line="5764" pos:column="10">pOp<pos:position pos:line="5764" pos:column="13"/></name><operator pos:line="5764" pos:column="13">-&gt;<pos:position pos:line="5764" pos:column="18"/></operator><name pos:line="5764" pos:column="15">p3<pos:position pos:line="5764" pos:column="17"/></name></name></expr>;<pos:position pos:line="5764" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5765" pos:column="3">assert<pos:position pos:line="5765" pos:column="9"/></name><argument_list pos:line="5765" pos:column="9">( <argument><expr><name pos:line="5765" pos:column="11">eNew<pos:position pos:line="5765" pos:column="15"/></name><operator pos:line="5765" pos:column="15">==<pos:position pos:line="5765" pos:column="17"/></operator><name pos:line="5765" pos:column="17">PAGER_JOURNALMODE_DELETE<pos:position pos:line="5765" pos:column="41"/></name> 
       <operator pos:line="5766" pos:column="8">||<pos:position pos:line="5766" pos:column="10"/></operator> <name pos:line="5766" pos:column="11">eNew<pos:position pos:line="5766" pos:column="15"/></name><operator pos:line="5766" pos:column="15">==<pos:position pos:line="5766" pos:column="17"/></operator><name pos:line="5766" pos:column="17">PAGER_JOURNALMODE_TRUNCATE<pos:position pos:line="5766" pos:column="43"/></name> 
       <operator pos:line="5767" pos:column="8">||<pos:position pos:line="5767" pos:column="10"/></operator> <name pos:line="5767" pos:column="11">eNew<pos:position pos:line="5767" pos:column="15"/></name><operator pos:line="5767" pos:column="15">==<pos:position pos:line="5767" pos:column="17"/></operator><name pos:line="5767" pos:column="17">PAGER_JOURNALMODE_PERSIST<pos:position pos:line="5767" pos:column="42"/></name> 
       <operator pos:line="5768" pos:column="8">||<pos:position pos:line="5768" pos:column="10"/></operator> <name pos:line="5768" pos:column="11">eNew<pos:position pos:line="5768" pos:column="15"/></name><operator pos:line="5768" pos:column="15">==<pos:position pos:line="5768" pos:column="17"/></operator><name pos:line="5768" pos:column="17">PAGER_JOURNALMODE_OFF<pos:position pos:line="5768" pos:column="38"/></name>
       <operator pos:line="5769" pos:column="8">||<pos:position pos:line="5769" pos:column="10"/></operator> <name pos:line="5769" pos:column="11">eNew<pos:position pos:line="5769" pos:column="15"/></name><operator pos:line="5769" pos:column="15">==<pos:position pos:line="5769" pos:column="17"/></operator><name pos:line="5769" pos:column="17">PAGER_JOURNALMODE_MEMORY<pos:position pos:line="5769" pos:column="41"/></name>
       <operator pos:line="5770" pos:column="8">||<pos:position pos:line="5770" pos:column="10"/></operator> <name pos:line="5770" pos:column="11">eNew<pos:position pos:line="5770" pos:column="15"/></name><operator pos:line="5770" pos:column="15">==<pos:position pos:line="5770" pos:column="17"/></operator><name pos:line="5770" pos:column="17">PAGER_JOURNALMODE_WAL<pos:position pos:line="5770" pos:column="38"/></name>
       <operator pos:line="5771" pos:column="8">||<pos:position pos:line="5771" pos:column="10"/></operator> <name pos:line="5771" pos:column="11">eNew<pos:position pos:line="5771" pos:column="15"/></name><operator pos:line="5771" pos:column="15">==<pos:position pos:line="5771" pos:column="17"/></operator><name pos:line="5771" pos:column="17">PAGER_JOURNALMODE_QUERY<pos:position pos:line="5771" pos:column="40"/></name></expr></argument>
  )<pos:position pos:line="5772" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="5772" pos:column="5"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5773" pos:column="3">assert<pos:position pos:line="5773" pos:column="9"/></name><argument_list pos:line="5773" pos:column="9">( <argument><expr><name><name pos:line="5773" pos:column="11">pOp<pos:position pos:line="5773" pos:column="14"/></name><operator pos:line="5773" pos:column="14">-&gt;<pos:position pos:line="5773" pos:column="19"/></operator><name pos:line="5773" pos:column="16">p1<pos:position pos:line="5773" pos:column="18"/></name></name><operator pos:line="5773" pos:column="18">&gt;=<pos:position pos:line="5773" pos:column="23"/></operator><literal type="number" pos:line="5773" pos:column="20">0<pos:position pos:line="5773" pos:column="21"/></literal> <operator pos:line="5773" pos:column="22">&amp;&amp;<pos:position pos:line="5773" pos:column="32"/></operator> <name><name pos:line="5773" pos:column="25">pOp<pos:position pos:line="5773" pos:column="28"/></name><operator pos:line="5773" pos:column="28">-&gt;<pos:position pos:line="5773" pos:column="33"/></operator><name pos:line="5773" pos:column="30">p1<pos:position pos:line="5773" pos:column="32"/></name></name><operator pos:line="5773" pos:column="32">&lt;<pos:position pos:line="5773" pos:column="36"/></operator><name><name pos:line="5773" pos:column="33">db<pos:position pos:line="5773" pos:column="35"/></name><operator pos:line="5773" pos:column="35">-&gt;<pos:position pos:line="5773" pos:column="40"/></operator><name pos:line="5773" pos:column="37">nDb<pos:position pos:line="5773" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="5773" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5773" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5774" pos:column="3">assert<pos:position pos:line="5774" pos:column="9"/></name><argument_list pos:line="5774" pos:column="9">( <argument><expr><name><name pos:line="5774" pos:column="11">p<pos:position pos:line="5774" pos:column="12"/></name><operator pos:line="5774" pos:column="12">-&gt;<pos:position pos:line="5774" pos:column="17"/></operator><name pos:line="5774" pos:column="14">readOnly<pos:position pos:line="5774" pos:column="22"/></name></name><operator pos:line="5774" pos:column="22">==<pos:position pos:line="5774" pos:column="24"/></operator><literal type="number" pos:line="5774" pos:column="24">0<pos:position pos:line="5774" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="5774" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5774" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name pos:line="5776" pos:column="3">pBt<pos:position pos:line="5776" pos:column="6"/></name> <operator pos:line="5776" pos:column="7">=<pos:position pos:line="5776" pos:column="8"/></operator> <name><name pos:line="5776" pos:column="9">db<pos:position pos:line="5776" pos:column="11"/></name><operator pos:line="5776" pos:column="11">-&gt;<pos:position pos:line="5776" pos:column="16"/></operator><name pos:line="5776" pos:column="13">aDb<pos:position pos:line="5776" pos:column="16"/></name><index pos:line="5776" pos:column="16">[<expr><name><name pos:line="5776" pos:column="17">pOp<pos:position pos:line="5776" pos:column="20"/></name><operator pos:line="5776" pos:column="20">-&gt;<pos:position pos:line="5776" pos:column="25"/></operator><name pos:line="5776" pos:column="22">p1<pos:position pos:line="5776" pos:column="24"/></name></name></expr>]<pos:position pos:line="5776" pos:column="25"/></index></name><operator pos:line="5776" pos:column="25">.<pos:position pos:line="5776" pos:column="26"/></operator><name pos:line="5776" pos:column="26">pBt<pos:position pos:line="5776" pos:column="29"/></name></expr>;<pos:position pos:line="5776" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5777" pos:column="3">pPager<pos:position pos:line="5777" pos:column="9"/></name> <operator pos:line="5777" pos:column="10">=<pos:position pos:line="5777" pos:column="11"/></operator> <call><name pos:line="5777" pos:column="12">sqlite3BtreePager<pos:position pos:line="5777" pos:column="29"/></name><argument_list pos:line="5777" pos:column="29">(<argument><expr><name pos:line="5777" pos:column="30">pBt<pos:position pos:line="5777" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5777" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5777" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5778" pos:column="3">eOld<pos:position pos:line="5778" pos:column="7"/></name> <operator pos:line="5778" pos:column="8">=<pos:position pos:line="5778" pos:column="9"/></operator> <call><name pos:line="5778" pos:column="10">sqlite3PagerGetJournalMode<pos:position pos:line="5778" pos:column="36"/></name><argument_list pos:line="5778" pos:column="36">(<argument><expr><name pos:line="5778" pos:column="37">pPager<pos:position pos:line="5778" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5778" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5778" pos:column="45"/></expr_stmt>
  <if pos:line="5779" pos:column="3">if<condition pos:line="5779" pos:column="5">( <expr><name pos:line="5779" pos:column="7">eNew<pos:position pos:line="5779" pos:column="11"/></name><operator pos:line="5779" pos:column="11">==<pos:position pos:line="5779" pos:column="13"/></operator><name pos:line="5779" pos:column="13">PAGER_JOURNALMODE_QUERY<pos:position pos:line="5779" pos:column="36"/></name></expr> )<pos:position pos:line="5779" pos:column="38"/></condition><then pos:line="5779" pos:column="38"> <block type="pseudo"><expr_stmt><expr><name pos:line="5779" pos:column="39">eNew<pos:position pos:line="5779" pos:column="43"/></name> <operator pos:line="5779" pos:column="44">=<pos:position pos:line="5779" pos:column="45"/></operator> <name pos:line="5779" pos:column="46">eOld<pos:position pos:line="5779" pos:column="50"/></name></expr>;<pos:position pos:line="5779" pos:column="51"/></expr_stmt></block></then></if>
  <if pos:line="5780" pos:column="3">if<condition pos:line="5780" pos:column="5">( <expr><operator pos:line="5780" pos:column="7">!<pos:position pos:line="5780" pos:column="8"/></operator><call><name pos:line="5780" pos:column="8">sqlite3PagerOkToChangeJournalMode<pos:position pos:line="5780" pos:column="41"/></name><argument_list pos:line="5780" pos:column="41">(<argument><expr><name pos:line="5780" pos:column="42">pPager<pos:position pos:line="5780" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5780" pos:column="49"/></argument_list></call></expr> )<pos:position pos:line="5780" pos:column="51"/></condition><then pos:line="5780" pos:column="51"> <block type="pseudo"><expr_stmt><expr><name pos:line="5780" pos:column="52">eNew<pos:position pos:line="5780" pos:column="56"/></name> <operator pos:line="5780" pos:column="57">=<pos:position pos:line="5780" pos:column="58"/></operator> <name pos:line="5780" pos:column="59">eOld<pos:position pos:line="5780" pos:column="63"/></name></expr>;<pos:position pos:line="5780" pos:column="64"/></expr_stmt></block></then></if>

<cpp:ifndef pos:line="5782" pos:column="1">#<cpp:directive pos:line="5782" pos:column="2">ifndef<pos:position pos:line="5782" pos:column="8"/></cpp:directive> <name pos:line="5782" pos:column="9">SQLITE_OMIT_WAL<pos:position pos:line="5782" pos:column="24"/></name></cpp:ifndef>
  <expr_stmt><expr><name pos:line="5783" pos:column="3">zFilename<pos:position pos:line="5783" pos:column="12"/></name> <operator pos:line="5783" pos:column="13">=<pos:position pos:line="5783" pos:column="14"/></operator> <call><name pos:line="5783" pos:column="15">sqlite3PagerFilename<pos:position pos:line="5783" pos:column="35"/></name><argument_list pos:line="5783" pos:column="35">(<argument><expr><name pos:line="5783" pos:column="36">pPager<pos:position pos:line="5783" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5783" pos:column="44">1<pos:position pos:line="5783" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="5783" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5783" pos:column="47"/></expr_stmt>

  <comment type="block" pos:line="5785" pos:column="3">/* Do not allow a transition to journal_mode=WAL for a database
  ** in temporary storage or if the VFS does not support shared memory 
  */</comment>
  <if pos:line="5788" pos:column="3">if<condition pos:line="5788" pos:column="5">( <expr><name pos:line="5788" pos:column="7">eNew<pos:position pos:line="5788" pos:column="11"/></name><operator pos:line="5788" pos:column="11">==<pos:position pos:line="5788" pos:column="13"/></operator><name pos:line="5788" pos:column="13">PAGER_JOURNALMODE_WAL<pos:position pos:line="5788" pos:column="34"/></name>
   <operator pos:line="5789" pos:column="4">&amp;&amp;<pos:position pos:line="5789" pos:column="14"/></operator> <operator pos:line="5789" pos:column="7">(<pos:position pos:line="5789" pos:column="8"/></operator><call><name pos:line="5789" pos:column="8">sqlite3Strlen30<pos:position pos:line="5789" pos:column="23"/></name><argument_list pos:line="5789" pos:column="23">(<argument><expr><name pos:line="5789" pos:column="24">zFilename<pos:position pos:line="5789" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5789" pos:column="34"/></argument_list></call><operator pos:line="5789" pos:column="34">==<pos:position pos:line="5789" pos:column="36"/></operator><literal type="number" pos:line="5789" pos:column="36">0<pos:position pos:line="5789" pos:column="37"/></literal>           <comment type="block" pos:line="5789" pos:column="48">/* Temp file */</comment>
       <operator pos:line="5790" pos:column="8">||<pos:position pos:line="5790" pos:column="10"/></operator> <operator pos:line="5790" pos:column="11">!<pos:position pos:line="5790" pos:column="12"/></operator><call><name pos:line="5790" pos:column="12">sqlite3PagerWalSupported<pos:position pos:line="5790" pos:column="36"/></name><argument_list pos:line="5790" pos:column="36">(<argument><expr><name pos:line="5790" pos:column="37">pPager<pos:position pos:line="5790" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5790" pos:column="44"/></argument_list></call><operator pos:line="5790" pos:column="44">)<pos:position pos:line="5790" pos:column="45"/></operator></expr>   <comment type="block" pos:line="5790" pos:column="48">/* No shared-memory support */</comment>
  )<pos:position pos:line="5791" pos:column="4"/></condition><then><block pos:line="5791" pos:column="4">{
    <expr_stmt><expr><name pos:line="5792" pos:column="5">eNew<pos:position pos:line="5792" pos:column="9"/></name> <operator pos:line="5792" pos:column="10">=<pos:position pos:line="5792" pos:column="11"/></operator> <name pos:line="5792" pos:column="12">eOld<pos:position pos:line="5792" pos:column="16"/></name></expr>;<pos:position pos:line="5792" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="5793" pos:column="4"/></block></then></if>

  <if pos:line="5795" pos:column="3">if<condition pos:line="5795" pos:column="5">( <expr><operator pos:line="5795" pos:column="7">(<pos:position pos:line="5795" pos:column="8"/></operator><name pos:line="5795" pos:column="8">eNew<pos:position pos:line="5795" pos:column="12"/></name><operator pos:line="5795" pos:column="12">!=<pos:position pos:line="5795" pos:column="14"/></operator><name pos:line="5795" pos:column="14">eOld<pos:position pos:line="5795" pos:column="18"/></name><operator pos:line="5795" pos:column="18">)<pos:position pos:line="5795" pos:column="19"/></operator>
   <operator pos:line="5796" pos:column="4">&amp;&amp;<pos:position pos:line="5796" pos:column="14"/></operator> <operator pos:line="5796" pos:column="7">(<pos:position pos:line="5796" pos:column="8"/></operator><name pos:line="5796" pos:column="8">eOld<pos:position pos:line="5796" pos:column="12"/></name><operator pos:line="5796" pos:column="12">==<pos:position pos:line="5796" pos:column="14"/></operator><name pos:line="5796" pos:column="14">PAGER_JOURNALMODE_WAL<pos:position pos:line="5796" pos:column="35"/></name> <operator pos:line="5796" pos:column="36">||<pos:position pos:line="5796" pos:column="38"/></operator> <name pos:line="5796" pos:column="39">eNew<pos:position pos:line="5796" pos:column="43"/></name><operator pos:line="5796" pos:column="43">==<pos:position pos:line="5796" pos:column="45"/></operator><name pos:line="5796" pos:column="45">PAGER_JOURNALMODE_WAL<pos:position pos:line="5796" pos:column="66"/></name><operator pos:line="5796" pos:column="66">)<pos:position pos:line="5796" pos:column="67"/></operator></expr>
  )<pos:position pos:line="5797" pos:column="4"/></condition><then><block pos:line="5797" pos:column="4">{
    <if pos:line="5798" pos:column="5">if<condition pos:line="5798" pos:column="7">( <expr><operator pos:line="5798" pos:column="9">!<pos:position pos:line="5798" pos:column="10"/></operator><name><name pos:line="5798" pos:column="10">db<pos:position pos:line="5798" pos:column="12"/></name><operator pos:line="5798" pos:column="12">-&gt;<pos:position pos:line="5798" pos:column="17"/></operator><name pos:line="5798" pos:column="14">autoCommit<pos:position pos:line="5798" pos:column="24"/></name></name> <operator pos:line="5798" pos:column="25">||<pos:position pos:line="5798" pos:column="27"/></operator> <name><name pos:line="5798" pos:column="28">db<pos:position pos:line="5798" pos:column="30"/></name><operator pos:line="5798" pos:column="30">-&gt;<pos:position pos:line="5798" pos:column="35"/></operator><name pos:line="5798" pos:column="32">nVdbeRead<pos:position pos:line="5798" pos:column="41"/></name></name><operator pos:line="5798" pos:column="41">&gt;<pos:position pos:line="5798" pos:column="45"/></operator><literal type="number" pos:line="5798" pos:column="42">1<pos:position pos:line="5798" pos:column="43"/></literal></expr> )<pos:position pos:line="5798" pos:column="45"/></condition><then><block pos:line="5798" pos:column="45">{
      <expr_stmt><expr><name pos:line="5799" pos:column="7">rc<pos:position pos:line="5799" pos:column="9"/></name> <operator pos:line="5799" pos:column="10">=<pos:position pos:line="5799" pos:column="11"/></operator> <name pos:line="5799" pos:column="12">SQLITE_ERROR<pos:position pos:line="5799" pos:column="24"/></name></expr>;<pos:position pos:line="5799" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="5800" pos:column="7">sqlite3VdbeError<pos:position pos:line="5800" pos:column="23"/></name><argument_list pos:line="5800" pos:column="23">(<argument><expr><name pos:line="5800" pos:column="24">p<pos:position pos:line="5800" pos:column="25"/></name></expr></argument>,
          <argument><expr><literal type="string" pos:line="5801" pos:column="11">"cannot change %s wal mode from within a transaction"<pos:position pos:line="5801" pos:column="64"/></literal></expr></argument>,
          <argument><expr><operator pos:line="5802" pos:column="11">(<pos:position pos:line="5802" pos:column="12"/></operator><ternary><condition><expr><name pos:line="5802" pos:column="12">eNew<pos:position pos:line="5802" pos:column="16"/></name><operator pos:line="5802" pos:column="16">==<pos:position pos:line="5802" pos:column="18"/></operator><name pos:line="5802" pos:column="18">PAGER_JOURNALMODE_WAL<pos:position pos:line="5802" pos:column="39"/></name></expr> ?<pos:position pos:line="5802" pos:column="41"/></condition><then pos:line="5802" pos:column="41"> <expr><literal type="string" pos:line="5802" pos:column="42">"into"<pos:position pos:line="5802" pos:column="48"/></literal></expr> <pos:position pos:line="5802" pos:column="49"/></then><else pos:line="5802" pos:column="49">: <expr><literal type="string" pos:line="5802" pos:column="51">"out of"<pos:position pos:line="5802" pos:column="59"/></literal></expr></else></ternary><operator pos:line="5802" pos:column="59">)<pos:position pos:line="5802" pos:column="60"/></operator></expr></argument>
      )<pos:position pos:line="5803" pos:column="8"/></argument_list></call></expr>;<pos:position pos:line="5803" pos:column="9"/></expr_stmt>
      <goto pos:line="5804" pos:column="7">goto <name pos:line="5804" pos:column="12">abort_due_to_error<pos:position pos:line="5804" pos:column="30"/></name>;<pos:position pos:line="5804" pos:column="31"/></goto>
    }<pos:position pos:line="5805" pos:column="6"/></block></then><else pos:line="5805" pos:column="6">else<block pos:line="5805" pos:column="10">{
 
      <if pos:line="5807" pos:column="7">if<condition pos:line="5807" pos:column="9">( <expr><name pos:line="5807" pos:column="11">eOld<pos:position pos:line="5807" pos:column="15"/></name><operator pos:line="5807" pos:column="15">==<pos:position pos:line="5807" pos:column="17"/></operator><name pos:line="5807" pos:column="17">PAGER_JOURNALMODE_WAL<pos:position pos:line="5807" pos:column="38"/></name></expr> )<pos:position pos:line="5807" pos:column="40"/></condition><then><block pos:line="5807" pos:column="40">{
        <comment type="block" pos:line="5808" pos:column="9">/* If leaving WAL mode, close the log file. If successful, the call
        ** to PagerCloseWal() checkpoints and deletes the write-ahead-log 
        ** file. An EXCLUSIVE lock may still be held on the database file 
        ** after a successful return. 
        */</comment>
        <expr_stmt><expr><name pos:line="5813" pos:column="9">rc<pos:position pos:line="5813" pos:column="11"/></name> <operator pos:line="5813" pos:column="12">=<pos:position pos:line="5813" pos:column="13"/></operator> <call><name pos:line="5813" pos:column="14">sqlite3PagerCloseWal<pos:position pos:line="5813" pos:column="34"/></name><argument_list pos:line="5813" pos:column="34">(<argument><expr><name pos:line="5813" pos:column="35">pPager<pos:position pos:line="5813" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="5813" pos:column="43">db<pos:position pos:line="5813" pos:column="45"/></name></expr></argument>)<pos:position pos:line="5813" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5813" pos:column="47"/></expr_stmt>
        <if pos:line="5814" pos:column="9">if<condition pos:line="5814" pos:column="11">( <expr><name pos:line="5814" pos:column="13">rc<pos:position pos:line="5814" pos:column="15"/></name><operator pos:line="5814" pos:column="15">==<pos:position pos:line="5814" pos:column="17"/></operator><name pos:line="5814" pos:column="17">SQLITE_OK<pos:position pos:line="5814" pos:column="26"/></name></expr> )<pos:position pos:line="5814" pos:column="28"/></condition><then><block pos:line="5814" pos:column="28">{
          <expr_stmt><expr><call><name pos:line="5815" pos:column="11">sqlite3PagerSetJournalMode<pos:position pos:line="5815" pos:column="37"/></name><argument_list pos:line="5815" pos:column="37">(<argument><expr><name pos:line="5815" pos:column="38">pPager<pos:position pos:line="5815" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="5815" pos:column="46">eNew<pos:position pos:line="5815" pos:column="50"/></name></expr></argument>)<pos:position pos:line="5815" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="5815" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="5816" pos:column="10"/></block></then></if>
      }<pos:position pos:line="5817" pos:column="8"/></block></then><elseif pos:line="5817" pos:column="8">else <if pos:line="5817" pos:column="13">if<condition pos:line="5817" pos:column="15">( <expr><name pos:line="5817" pos:column="17">eOld<pos:position pos:line="5817" pos:column="21"/></name><operator pos:line="5817" pos:column="21">==<pos:position pos:line="5817" pos:column="23"/></operator><name pos:line="5817" pos:column="23">PAGER_JOURNALMODE_MEMORY<pos:position pos:line="5817" pos:column="47"/></name></expr> )<pos:position pos:line="5817" pos:column="49"/></condition><then><block pos:line="5817" pos:column="49">{
        <comment type="block" pos:line="5818" pos:column="9">/* Cannot transition directly from MEMORY to WAL.  Use mode OFF
        ** as an intermediate */</comment>
        <expr_stmt><expr><call><name pos:line="5820" pos:column="9">sqlite3PagerSetJournalMode<pos:position pos:line="5820" pos:column="35"/></name><argument_list pos:line="5820" pos:column="35">(<argument><expr><name pos:line="5820" pos:column="36">pPager<pos:position pos:line="5820" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="5820" pos:column="44">PAGER_JOURNALMODE_OFF<pos:position pos:line="5820" pos:column="65"/></name></expr></argument>)<pos:position pos:line="5820" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="5820" pos:column="67"/></expr_stmt>
      }<pos:position pos:line="5821" pos:column="8"/></block></then></if></elseif></if>
  
      <comment type="block" pos:line="5823" pos:column="7">/* Open a transaction on the database file. Regardless of the journal
      ** mode, this transaction always uses a rollback journal.
      */</comment>
      <expr_stmt><expr><call><name pos:line="5826" pos:column="7">assert<pos:position pos:line="5826" pos:column="13"/></name><argument_list pos:line="5826" pos:column="13">( <argument><expr><call><name pos:line="5826" pos:column="15">sqlite3BtreeIsInTrans<pos:position pos:line="5826" pos:column="36"/></name><argument_list pos:line="5826" pos:column="36">(<argument><expr><name pos:line="5826" pos:column="37">pBt<pos:position pos:line="5826" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5826" pos:column="41"/></argument_list></call><operator pos:line="5826" pos:column="41">==<pos:position pos:line="5826" pos:column="43"/></operator><literal type="number" pos:line="5826" pos:column="43">0<pos:position pos:line="5826" pos:column="44"/></literal></expr></argument> )<pos:position pos:line="5826" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5826" pos:column="47"/></expr_stmt>
      <if pos:line="5827" pos:column="7">if<condition pos:line="5827" pos:column="9">( <expr><name pos:line="5827" pos:column="11">rc<pos:position pos:line="5827" pos:column="13"/></name><operator pos:line="5827" pos:column="13">==<pos:position pos:line="5827" pos:column="15"/></operator><name pos:line="5827" pos:column="15">SQLITE_OK<pos:position pos:line="5827" pos:column="24"/></name></expr> )<pos:position pos:line="5827" pos:column="26"/></condition><then><block pos:line="5827" pos:column="26">{
        <expr_stmt><expr><name pos:line="5828" pos:column="9">rc<pos:position pos:line="5828" pos:column="11"/></name> <operator pos:line="5828" pos:column="12">=<pos:position pos:line="5828" pos:column="13"/></operator> <call><name pos:line="5828" pos:column="14">sqlite3BtreeSetVersion<pos:position pos:line="5828" pos:column="36"/></name><argument_list pos:line="5828" pos:column="36">(<argument><expr><name pos:line="5828" pos:column="37">pBt<pos:position pos:line="5828" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="5828" pos:column="42">(<pos:position pos:line="5828" pos:column="43"/></operator><ternary><condition><expr><name pos:line="5828" pos:column="43">eNew<pos:position pos:line="5828" pos:column="47"/></name><operator pos:line="5828" pos:column="47">==<pos:position pos:line="5828" pos:column="49"/></operator><name pos:line="5828" pos:column="49">PAGER_JOURNALMODE_WAL<pos:position pos:line="5828" pos:column="70"/></name></expr> ?<pos:position pos:line="5828" pos:column="72"/></condition><then pos:line="5828" pos:column="72"> <expr><literal type="number" pos:line="5828" pos:column="73">2<pos:position pos:line="5828" pos:column="74"/></literal></expr> <pos:position pos:line="5828" pos:column="75"/></then><else pos:line="5828" pos:column="75">: <expr><literal type="number" pos:line="5828" pos:column="77">1<pos:position pos:line="5828" pos:column="78"/></literal></expr></else></ternary><operator pos:line="5828" pos:column="78">)<pos:position pos:line="5828" pos:column="79"/></operator></expr></argument>)<pos:position pos:line="5828" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="5828" pos:column="81"/></expr_stmt>
      }<pos:position pos:line="5829" pos:column="8"/></block></then></if>
    }<pos:position pos:line="5830" pos:column="6"/></block></else></if>
  }<pos:position pos:line="5831" pos:column="4"/></block></then></if>
<cpp:endif pos:line="5832" pos:column="1">#<cpp:directive pos:line="5832" pos:column="2">endif<pos:position pos:line="5832" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5832" pos:column="8">/* ifndef SQLITE_OMIT_WAL */</comment>

  <if pos:line="5834" pos:column="3">if<condition pos:line="5834" pos:column="5">( <expr><name pos:line="5834" pos:column="7">rc<pos:position pos:line="5834" pos:column="9"/></name></expr> )<pos:position pos:line="5834" pos:column="11"/></condition><then pos:line="5834" pos:column="11"> <block type="pseudo"><expr_stmt><expr><name pos:line="5834" pos:column="12">eNew<pos:position pos:line="5834" pos:column="16"/></name> <operator pos:line="5834" pos:column="17">=<pos:position pos:line="5834" pos:column="18"/></operator> <name pos:line="5834" pos:column="19">eOld<pos:position pos:line="5834" pos:column="23"/></name></expr>;<pos:position pos:line="5834" pos:column="24"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="5835" pos:column="3">eNew<pos:position pos:line="5835" pos:column="7"/></name> <operator pos:line="5835" pos:column="8">=<pos:position pos:line="5835" pos:column="9"/></operator> <call><name pos:line="5835" pos:column="10">sqlite3PagerSetJournalMode<pos:position pos:line="5835" pos:column="36"/></name><argument_list pos:line="5835" pos:column="36">(<argument><expr><name pos:line="5835" pos:column="37">pPager<pos:position pos:line="5835" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="5835" pos:column="45">eNew<pos:position pos:line="5835" pos:column="49"/></name></expr></argument>)<pos:position pos:line="5835" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5835" pos:column="51"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="5837" pos:column="3">pOut<pos:position pos:line="5837" pos:column="7"/></name><operator pos:line="5837" pos:column="7">-&gt;<pos:position pos:line="5837" pos:column="12"/></operator><name pos:line="5837" pos:column="9">flags<pos:position pos:line="5837" pos:column="14"/></name></name> <operator pos:line="5837" pos:column="15">=<pos:position pos:line="5837" pos:column="16"/></operator> <name pos:line="5837" pos:column="17">MEM_Str<pos:position pos:line="5837" pos:column="24"/></name><operator pos:line="5837" pos:column="24">|<pos:position pos:line="5837" pos:column="25"/></operator><name pos:line="5837" pos:column="25">MEM_Static<pos:position pos:line="5837" pos:column="35"/></name><operator pos:line="5837" pos:column="35">|<pos:position pos:line="5837" pos:column="36"/></operator><name pos:line="5837" pos:column="36">MEM_Term<pos:position pos:line="5837" pos:column="44"/></name></expr>;<pos:position pos:line="5837" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5838" pos:column="3">pOut<pos:position pos:line="5838" pos:column="7"/></name><operator pos:line="5838" pos:column="7">-&gt;<pos:position pos:line="5838" pos:column="12"/></operator><name pos:line="5838" pos:column="9">z<pos:position pos:line="5838" pos:column="10"/></name></name> <operator pos:line="5838" pos:column="11">=<pos:position pos:line="5838" pos:column="12"/></operator> <operator pos:line="5838" pos:column="13">(<pos:position pos:line="5838" pos:column="14"/></operator><name pos:line="5838" pos:column="14">char<pos:position pos:line="5838" pos:column="18"/></name> <operator pos:line="5838" pos:column="19">*<pos:position pos:line="5838" pos:column="20"/></operator><operator pos:line="5838" pos:column="20">)<pos:position pos:line="5838" pos:column="21"/></operator><call><name pos:line="5838" pos:column="21">sqlite3JournalModename<pos:position pos:line="5838" pos:column="43"/></name><argument_list pos:line="5838" pos:column="43">(<argument><expr><name pos:line="5838" pos:column="44">eNew<pos:position pos:line="5838" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5838" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="5838" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5839" pos:column="3">pOut<pos:position pos:line="5839" pos:column="7"/></name><operator pos:line="5839" pos:column="7">-&gt;<pos:position pos:line="5839" pos:column="12"/></operator><name pos:line="5839" pos:column="9">n<pos:position pos:line="5839" pos:column="10"/></name></name> <operator pos:line="5839" pos:column="11">=<pos:position pos:line="5839" pos:column="12"/></operator> <call><name pos:line="5839" pos:column="13">sqlite3Strlen30<pos:position pos:line="5839" pos:column="28"/></name><argument_list pos:line="5839" pos:column="28">(<argument><expr><name><name pos:line="5839" pos:column="29">pOut<pos:position pos:line="5839" pos:column="33"/></name><operator pos:line="5839" pos:column="33">-&gt;<pos:position pos:line="5839" pos:column="38"/></operator><name pos:line="5839" pos:column="35">z<pos:position pos:line="5839" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="5839" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5839" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5840" pos:column="3">pOut<pos:position pos:line="5840" pos:column="7"/></name><operator pos:line="5840" pos:column="7">-&gt;<pos:position pos:line="5840" pos:column="12"/></operator><name pos:line="5840" pos:column="9">enc<pos:position pos:line="5840" pos:column="12"/></name></name> <operator pos:line="5840" pos:column="13">=<pos:position pos:line="5840" pos:column="14"/></operator> <name pos:line="5840" pos:column="15">SQLITE_UTF8<pos:position pos:line="5840" pos:column="26"/></name></expr>;<pos:position pos:line="5840" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5841" pos:column="3">sqlite3VdbeChangeEncoding<pos:position pos:line="5841" pos:column="28"/></name><argument_list pos:line="5841" pos:column="28">(<argument><expr><name pos:line="5841" pos:column="29">pOut<pos:position pos:line="5841" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="5841" pos:column="35">encoding<pos:position pos:line="5841" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5841" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5841" pos:column="45"/></expr_stmt>
  <if pos:line="5842" pos:column="3">if<condition pos:line="5842" pos:column="5">( <expr><name pos:line="5842" pos:column="7">rc<pos:position pos:line="5842" pos:column="9"/></name></expr> )<pos:position pos:line="5842" pos:column="11"/></condition><then pos:line="5842" pos:column="11"> <block type="pseudo"><goto pos:line="5842" pos:column="12">goto <name pos:line="5842" pos:column="17">abort_due_to_error<pos:position pos:line="5842" pos:column="35"/></name>;<pos:position pos:line="5842" pos:column="36"/></goto></block></then></if>
  <break pos:line="5843" pos:column="3">break;<pos:position pos:line="5843" pos:column="9"/></break>
}<pos:position pos:line="5844" pos:column="2"/></block><empty_stmt pos:line="5844" pos:column="2">;<pos:position pos:line="5844" pos:column="3"/></empty_stmt>
<cpp:endif pos:line="5845" pos:column="1">#<cpp:directive pos:line="5845" pos:column="2">endif<pos:position pos:line="5845" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5845" pos:column="8">/* SQLITE_OMIT_PRAGMA */</comment>

<cpp:if pos:line="5847" pos:column="1">#<cpp:directive pos:line="5847" pos:column="2">if<pos:position pos:line="5847" pos:column="4"/></cpp:directive> <expr><operator pos:line="5847" pos:column="5">!<pos:position pos:line="5847" pos:column="6"/></operator><call><name pos:line="5847" pos:column="6">defined<pos:position pos:line="5847" pos:column="13"/></name><argument_list pos:line="5847" pos:column="13">(<argument><expr><name pos:line="5847" pos:column="14">SQLITE_OMIT_VACUUM<pos:position pos:line="5847" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5847" pos:column="33"/></argument_list></call> <operator pos:line="5847" pos:column="34">&amp;&amp;<pos:position pos:line="5847" pos:column="44"/></operator> <operator pos:line="5847" pos:column="37">!<pos:position pos:line="5847" pos:column="38"/></operator><call><name pos:line="5847" pos:column="38">defined<pos:position pos:line="5847" pos:column="45"/></name><argument_list pos:line="5847" pos:column="45">(<argument><expr><name pos:line="5847" pos:column="46">SQLITE_OMIT_ATTACH<pos:position pos:line="5847" pos:column="64"/></name></expr></argument>)<pos:position pos:line="5847" pos:column="65"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="5848" pos:column="1">/* Opcode: Vacuum P1 * * * *
**
** Vacuum the entire database P1.  P1 is 0 for "main", and 2 or more
** for an attached database.  The "temp" database may not be vacuumed.
*/</comment>
<case pos:line="5853" pos:column="1">case <expr><name pos:line="5853" pos:column="6">OP_Vacuum<pos:position pos:line="5853" pos:column="15"/></name></expr>:<pos:position pos:line="5853" pos:column="16"/></case> <block pos:line="5853" pos:column="17">{
  <expr_stmt><expr><call><name pos:line="5854" pos:column="3">assert<pos:position pos:line="5854" pos:column="9"/></name><argument_list pos:line="5854" pos:column="9">( <argument><expr><name><name pos:line="5854" pos:column="11">p<pos:position pos:line="5854" pos:column="12"/></name><operator pos:line="5854" pos:column="12">-&gt;<pos:position pos:line="5854" pos:column="17"/></operator><name pos:line="5854" pos:column="14">readOnly<pos:position pos:line="5854" pos:column="22"/></name></name><operator pos:line="5854" pos:column="22">==<pos:position pos:line="5854" pos:column="24"/></operator><literal type="number" pos:line="5854" pos:column="24">0<pos:position pos:line="5854" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="5854" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5854" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5855" pos:column="3">rc<pos:position pos:line="5855" pos:column="5"/></name> <operator pos:line="5855" pos:column="6">=<pos:position pos:line="5855" pos:column="7"/></operator> <call><name pos:line="5855" pos:column="8">sqlite3RunVacuum<pos:position pos:line="5855" pos:column="24"/></name><argument_list pos:line="5855" pos:column="24">(<argument><expr><operator pos:line="5855" pos:column="25">&amp;<pos:position pos:line="5855" pos:column="30"/></operator><name><name pos:line="5855" pos:column="26">p<pos:position pos:line="5855" pos:column="27"/></name><operator pos:line="5855" pos:column="27">-&gt;<pos:position pos:line="5855" pos:column="32"/></operator><name pos:line="5855" pos:column="29">zErrMsg<pos:position pos:line="5855" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="5855" pos:column="38">db<pos:position pos:line="5855" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="5855" pos:column="42">pOp<pos:position pos:line="5855" pos:column="45"/></name><operator pos:line="5855" pos:column="45">-&gt;<pos:position pos:line="5855" pos:column="50"/></operator><name pos:line="5855" pos:column="47">p1<pos:position pos:line="5855" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="5855" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5855" pos:column="51"/></expr_stmt>
  <if pos:line="5856" pos:column="3">if<condition pos:line="5856" pos:column="5">( <expr><name pos:line="5856" pos:column="7">rc<pos:position pos:line="5856" pos:column="9"/></name></expr> )<pos:position pos:line="5856" pos:column="11"/></condition><then pos:line="5856" pos:column="11"> <block type="pseudo"><goto pos:line="5856" pos:column="12">goto <name pos:line="5856" pos:column="17">abort_due_to_error<pos:position pos:line="5856" pos:column="35"/></name>;<pos:position pos:line="5856" pos:column="36"/></goto></block></then></if>
  <break pos:line="5857" pos:column="3">break;<pos:position pos:line="5857" pos:column="9"/></break>
}<pos:position pos:line="5858" pos:column="2"/></block>
<cpp:endif pos:line="5859" pos:column="1">#<cpp:directive pos:line="5859" pos:column="2">endif<pos:position pos:line="5859" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="5861" pos:column="1">#<cpp:directive pos:line="5861" pos:column="2">if<pos:position pos:line="5861" pos:column="4"/></cpp:directive> <expr><operator pos:line="5861" pos:column="5">!<pos:position pos:line="5861" pos:column="6"/></operator><call><name pos:line="5861" pos:column="6">defined<pos:position pos:line="5861" pos:column="13"/></name><argument_list pos:line="5861" pos:column="13">(<argument><expr><name pos:line="5861" pos:column="14">SQLITE_OMIT_AUTOVACUUM<pos:position pos:line="5861" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5861" pos:column="37"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="5862" pos:column="1">/* Opcode: IncrVacuum P1 P2 * * *
**
** Perform a single step of the incremental vacuum procedure on
** the P1 database. If the vacuum has finished, jump to instruction
** P2. Otherwise, fall through to the next instruction.
*/</comment>
<case pos:line="5868" pos:column="1">case <expr><name pos:line="5868" pos:column="6">OP_IncrVacuum<pos:position pos:line="5868" pos:column="19"/></name></expr>:<pos:position pos:line="5868" pos:column="20"/></case> <block pos:line="5868" pos:column="21">{        <comment type="block" pos:line="5868" pos:column="30">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="5869" pos:column="3">Btree<pos:position pos:line="5869" pos:column="8"/></name> <modifier pos:line="5869" pos:column="9">*<pos:position pos:line="5869" pos:column="10"/></modifier></type><name pos:line="5869" pos:column="10">pBt<pos:position pos:line="5869" pos:column="13"/></name></decl>;<pos:position pos:line="5869" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5871" pos:column="3">assert<pos:position pos:line="5871" pos:column="9"/></name><argument_list pos:line="5871" pos:column="9">( <argument><expr><name><name pos:line="5871" pos:column="11">pOp<pos:position pos:line="5871" pos:column="14"/></name><operator pos:line="5871" pos:column="14">-&gt;<pos:position pos:line="5871" pos:column="19"/></operator><name pos:line="5871" pos:column="16">p1<pos:position pos:line="5871" pos:column="18"/></name></name><operator pos:line="5871" pos:column="18">&gt;=<pos:position pos:line="5871" pos:column="23"/></operator><literal type="number" pos:line="5871" pos:column="20">0<pos:position pos:line="5871" pos:column="21"/></literal> <operator pos:line="5871" pos:column="22">&amp;&amp;<pos:position pos:line="5871" pos:column="32"/></operator> <name><name pos:line="5871" pos:column="25">pOp<pos:position pos:line="5871" pos:column="28"/></name><operator pos:line="5871" pos:column="28">-&gt;<pos:position pos:line="5871" pos:column="33"/></operator><name pos:line="5871" pos:column="30">p1<pos:position pos:line="5871" pos:column="32"/></name></name><operator pos:line="5871" pos:column="32">&lt;<pos:position pos:line="5871" pos:column="36"/></operator><name><name pos:line="5871" pos:column="33">db<pos:position pos:line="5871" pos:column="35"/></name><operator pos:line="5871" pos:column="35">-&gt;<pos:position pos:line="5871" pos:column="40"/></operator><name pos:line="5871" pos:column="37">nDb<pos:position pos:line="5871" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="5871" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5871" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5872" pos:column="3">assert<pos:position pos:line="5872" pos:column="9"/></name><argument_list pos:line="5872" pos:column="9">( <argument><expr><call><name pos:line="5872" pos:column="11">DbMaskTest<pos:position pos:line="5872" pos:column="21"/></name><argument_list pos:line="5872" pos:column="21">(<argument><expr><name><name pos:line="5872" pos:column="22">p<pos:position pos:line="5872" pos:column="23"/></name><operator pos:line="5872" pos:column="23">-&gt;<pos:position pos:line="5872" pos:column="28"/></operator><name pos:line="5872" pos:column="25">btreeMask<pos:position pos:line="5872" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5872" pos:column="36">pOp<pos:position pos:line="5872" pos:column="39"/></name><operator pos:line="5872" pos:column="39">-&gt;<pos:position pos:line="5872" pos:column="44"/></operator><name pos:line="5872" pos:column="41">p1<pos:position pos:line="5872" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="5872" pos:column="44"/></argument_list></call></expr></argument> )<pos:position pos:line="5872" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5872" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5873" pos:column="3">assert<pos:position pos:line="5873" pos:column="9"/></name><argument_list pos:line="5873" pos:column="9">( <argument><expr><name><name pos:line="5873" pos:column="11">p<pos:position pos:line="5873" pos:column="12"/></name><operator pos:line="5873" pos:column="12">-&gt;<pos:position pos:line="5873" pos:column="17"/></operator><name pos:line="5873" pos:column="14">readOnly<pos:position pos:line="5873" pos:column="22"/></name></name><operator pos:line="5873" pos:column="22">==<pos:position pos:line="5873" pos:column="24"/></operator><literal type="number" pos:line="5873" pos:column="24">0<pos:position pos:line="5873" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="5873" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5873" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5874" pos:column="3">pBt<pos:position pos:line="5874" pos:column="6"/></name> <operator pos:line="5874" pos:column="7">=<pos:position pos:line="5874" pos:column="8"/></operator> <name><name pos:line="5874" pos:column="9">db<pos:position pos:line="5874" pos:column="11"/></name><operator pos:line="5874" pos:column="11">-&gt;<pos:position pos:line="5874" pos:column="16"/></operator><name pos:line="5874" pos:column="13">aDb<pos:position pos:line="5874" pos:column="16"/></name><index pos:line="5874" pos:column="16">[<expr><name><name pos:line="5874" pos:column="17">pOp<pos:position pos:line="5874" pos:column="20"/></name><operator pos:line="5874" pos:column="20">-&gt;<pos:position pos:line="5874" pos:column="25"/></operator><name pos:line="5874" pos:column="22">p1<pos:position pos:line="5874" pos:column="24"/></name></name></expr>]<pos:position pos:line="5874" pos:column="25"/></index></name><operator pos:line="5874" pos:column="25">.<pos:position pos:line="5874" pos:column="26"/></operator><name pos:line="5874" pos:column="26">pBt<pos:position pos:line="5874" pos:column="29"/></name></expr>;<pos:position pos:line="5874" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5875" pos:column="3">rc<pos:position pos:line="5875" pos:column="5"/></name> <operator pos:line="5875" pos:column="6">=<pos:position pos:line="5875" pos:column="7"/></operator> <call><name pos:line="5875" pos:column="8">sqlite3BtreeIncrVacuum<pos:position pos:line="5875" pos:column="30"/></name><argument_list pos:line="5875" pos:column="30">(<argument><expr><name pos:line="5875" pos:column="31">pBt<pos:position pos:line="5875" pos:column="34"/></name></expr></argument>)<pos:position pos:line="5875" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5875" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5876" pos:column="3">VdbeBranchTaken<pos:position pos:line="5876" pos:column="18"/></name><argument_list pos:line="5876" pos:column="18">(<argument><expr><name pos:line="5876" pos:column="19">rc<pos:position pos:line="5876" pos:column="21"/></name><operator pos:line="5876" pos:column="21">==<pos:position pos:line="5876" pos:column="23"/></operator><name pos:line="5876" pos:column="23">SQLITE_DONE<pos:position pos:line="5876" pos:column="34"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="5876" pos:column="35">2<pos:position pos:line="5876" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="5876" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5876" pos:column="38"/></expr_stmt>
  <if pos:line="5877" pos:column="3">if<condition pos:line="5877" pos:column="5">( <expr><name pos:line="5877" pos:column="7">rc<pos:position pos:line="5877" pos:column="9"/></name></expr> )<pos:position pos:line="5877" pos:column="11"/></condition><then><block pos:line="5877" pos:column="11">{
    <if pos:line="5878" pos:column="5">if<condition pos:line="5878" pos:column="7">( <expr><name pos:line="5878" pos:column="9">rc<pos:position pos:line="5878" pos:column="11"/></name><operator pos:line="5878" pos:column="11">!=<pos:position pos:line="5878" pos:column="13"/></operator><name pos:line="5878" pos:column="13">SQLITE_DONE<pos:position pos:line="5878" pos:column="24"/></name></expr> )<pos:position pos:line="5878" pos:column="26"/></condition><then pos:line="5878" pos:column="26"> <block type="pseudo"><goto pos:line="5878" pos:column="27">goto <name pos:line="5878" pos:column="32">abort_due_to_error<pos:position pos:line="5878" pos:column="50"/></name>;<pos:position pos:line="5878" pos:column="51"/></goto></block></then></if>
    <expr_stmt><expr><name pos:line="5879" pos:column="5">rc<pos:position pos:line="5879" pos:column="7"/></name> <operator pos:line="5879" pos:column="8">=<pos:position pos:line="5879" pos:column="9"/></operator> <name pos:line="5879" pos:column="10">SQLITE_OK<pos:position pos:line="5879" pos:column="19"/></name></expr>;<pos:position pos:line="5879" pos:column="20"/></expr_stmt>
    <goto pos:line="5880" pos:column="5">goto <name pos:line="5880" pos:column="10">jump_to_p2<pos:position pos:line="5880" pos:column="20"/></name>;<pos:position pos:line="5880" pos:column="21"/></goto>
  }<pos:position pos:line="5881" pos:column="4"/></block></then></if>
  <break pos:line="5882" pos:column="3">break;<pos:position pos:line="5882" pos:column="9"/></break>
}<pos:position pos:line="5883" pos:column="2"/></block>
<cpp:endif pos:line="5884" pos:column="1">#<cpp:directive pos:line="5884" pos:column="2">endif<pos:position pos:line="5884" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="5886" pos:column="1">/* Opcode: Expire P1 * * * *
**
** Cause precompiled statements to expire.  When an expired statement
** is executed using sqlite3_step() it will either automatically
** reprepare itself (if it was originally created using sqlite3_prepare_v2())
** or it will fail with SQLITE_SCHEMA.
** 
** If P1 is 0, then all SQL statements become expired. If P1 is non-zero,
** then only the currently executing statement is expired.
*/</comment>
<case pos:line="5896" pos:column="1">case <expr><name pos:line="5896" pos:column="6">OP_Expire<pos:position pos:line="5896" pos:column="15"/></name></expr>:<pos:position pos:line="5896" pos:column="16"/></case> <block pos:line="5896" pos:column="17">{
  <if pos:line="5897" pos:column="3">if<condition pos:line="5897" pos:column="5">( <expr><operator pos:line="5897" pos:column="7">!<pos:position pos:line="5897" pos:column="8"/></operator><name><name pos:line="5897" pos:column="8">pOp<pos:position pos:line="5897" pos:column="11"/></name><operator pos:line="5897" pos:column="11">-&gt;<pos:position pos:line="5897" pos:column="16"/></operator><name pos:line="5897" pos:column="13">p1<pos:position pos:line="5897" pos:column="15"/></name></name></expr> )<pos:position pos:line="5897" pos:column="17"/></condition><then><block pos:line="5897" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="5898" pos:column="5">sqlite3ExpirePreparedStatements<pos:position pos:line="5898" pos:column="36"/></name><argument_list pos:line="5898" pos:column="36">(<argument><expr><name pos:line="5898" pos:column="37">db<pos:position pos:line="5898" pos:column="39"/></name></expr></argument>)<pos:position pos:line="5898" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5898" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="5899" pos:column="4"/></block></then><else pos:line="5899" pos:column="4">else<block pos:line="5899" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="5900" pos:column="5">p<pos:position pos:line="5900" pos:column="6"/></name><operator pos:line="5900" pos:column="6">-&gt;<pos:position pos:line="5900" pos:column="11"/></operator><name pos:line="5900" pos:column="8">expired<pos:position pos:line="5900" pos:column="15"/></name></name> <operator pos:line="5900" pos:column="16">=<pos:position pos:line="5900" pos:column="17"/></operator> <literal type="number" pos:line="5900" pos:column="18">1<pos:position pos:line="5900" pos:column="19"/></literal></expr>;<pos:position pos:line="5900" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="5901" pos:column="4"/></block></else></if>
  <break pos:line="5902" pos:column="3">break;<pos:position pos:line="5902" pos:column="9"/></break>
}<pos:position pos:line="5903" pos:column="2"/></block>

<cpp:ifndef pos:line="5905" pos:column="1">#<cpp:directive pos:line="5905" pos:column="2">ifndef<pos:position pos:line="5905" pos:column="8"/></cpp:directive> <name pos:line="5905" pos:column="9">SQLITE_OMIT_SHARED_CACHE<pos:position pos:line="5905" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="5906" pos:column="1">/* Opcode: TableLock P1 P2 P3 P4 *
** Synopsis: iDb=P1 root=P2 write=P3
**
** Obtain a lock on a particular table. This instruction is only used when
** the shared-cache feature is enabled. 
**
** P1 is the index of the database in sqlite3.aDb[] of the database
** on which the lock is acquired.  A readlock is obtained if P3==0 or
** a write lock if P3==1.
**
** P2 contains the root-page of the table to lock.
**
** P4 contains a pointer to the name of the table being locked. This is only
** used to generate an error message if the lock cannot be obtained.
*/</comment>
<case pos:line="5921" pos:column="1">case <expr><name pos:line="5921" pos:column="6">OP_TableLock<pos:position pos:line="5921" pos:column="18"/></name></expr>:<pos:position pos:line="5921" pos:column="19"/></case> <block pos:line="5921" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="5922" pos:column="3">u8<pos:position pos:line="5922" pos:column="5"/></name></type> <name pos:line="5922" pos:column="6">isWriteLock<pos:position pos:line="5922" pos:column="17"/></name> <init pos:line="5922" pos:column="18">= <expr><operator pos:line="5922" pos:column="20">(<pos:position pos:line="5922" pos:column="21"/></operator><name pos:line="5922" pos:column="21">u8<pos:position pos:line="5922" pos:column="23"/></name><operator pos:line="5922" pos:column="23">)<pos:position pos:line="5922" pos:column="24"/></operator><name><name pos:line="5922" pos:column="24">pOp<pos:position pos:line="5922" pos:column="27"/></name><operator pos:line="5922" pos:column="27">-&gt;<pos:position pos:line="5922" pos:column="32"/></operator><name pos:line="5922" pos:column="29">p3<pos:position pos:line="5922" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="5922" pos:column="32"/></decl_stmt>
  <if pos:line="5923" pos:column="3">if<condition pos:line="5923" pos:column="5">( <expr><name pos:line="5923" pos:column="7">isWriteLock<pos:position pos:line="5923" pos:column="18"/></name> <operator pos:line="5923" pos:column="19">||<pos:position pos:line="5923" pos:column="21"/></operator> <literal type="number" pos:line="5923" pos:column="22">0<pos:position pos:line="5923" pos:column="23"/></literal><operator pos:line="5923" pos:column="23">==<pos:position pos:line="5923" pos:column="25"/></operator><operator pos:line="5923" pos:column="25">(<pos:position pos:line="5923" pos:column="26"/></operator><name><name pos:line="5923" pos:column="26">db<pos:position pos:line="5923" pos:column="28"/></name><operator pos:line="5923" pos:column="28">-&gt;<pos:position pos:line="5923" pos:column="33"/></operator><name pos:line="5923" pos:column="30">flags<pos:position pos:line="5923" pos:column="35"/></name></name><operator pos:line="5923" pos:column="35">&amp;<pos:position pos:line="5923" pos:column="40"/></operator><name pos:line="5923" pos:column="36">SQLITE_ReadUncommit<pos:position pos:line="5923" pos:column="55"/></name><operator pos:line="5923" pos:column="55">)<pos:position pos:line="5923" pos:column="56"/></operator></expr> )<pos:position pos:line="5923" pos:column="58"/></condition><then><block pos:line="5923" pos:column="58">{
    <decl_stmt><decl><type><name pos:line="5924" pos:column="5">int<pos:position pos:line="5924" pos:column="8"/></name></type> <name pos:line="5924" pos:column="9">p1<pos:position pos:line="5924" pos:column="11"/></name> <init pos:line="5924" pos:column="12">= <expr><name><name pos:line="5924" pos:column="14">pOp<pos:position pos:line="5924" pos:column="17"/></name><operator pos:line="5924" pos:column="17">-&gt;<pos:position pos:line="5924" pos:column="22"/></operator><name pos:line="5924" pos:column="19">p1<pos:position pos:line="5924" pos:column="21"/></name></name></expr></init></decl>;<pos:position pos:line="5924" pos:column="22"/></decl_stmt> 
    <expr_stmt><expr><call><name pos:line="5925" pos:column="5">assert<pos:position pos:line="5925" pos:column="11"/></name><argument_list pos:line="5925" pos:column="11">( <argument><expr><name pos:line="5925" pos:column="13">p1<pos:position pos:line="5925" pos:column="15"/></name><operator pos:line="5925" pos:column="15">&gt;=<pos:position pos:line="5925" pos:column="20"/></operator><literal type="number" pos:line="5925" pos:column="17">0<pos:position pos:line="5925" pos:column="18"/></literal> <operator pos:line="5925" pos:column="19">&amp;&amp;<pos:position pos:line="5925" pos:column="29"/></operator> <name pos:line="5925" pos:column="22">p1<pos:position pos:line="5925" pos:column="24"/></name><operator pos:line="5925" pos:column="24">&lt;<pos:position pos:line="5925" pos:column="28"/></operator><name><name pos:line="5925" pos:column="25">db<pos:position pos:line="5925" pos:column="27"/></name><operator pos:line="5925" pos:column="27">-&gt;<pos:position pos:line="5925" pos:column="32"/></operator><name pos:line="5925" pos:column="29">nDb<pos:position pos:line="5925" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="5925" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5925" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5926" pos:column="5">assert<pos:position pos:line="5926" pos:column="11"/></name><argument_list pos:line="5926" pos:column="11">( <argument><expr><call><name pos:line="5926" pos:column="13">DbMaskTest<pos:position pos:line="5926" pos:column="23"/></name><argument_list pos:line="5926" pos:column="23">(<argument><expr><name><name pos:line="5926" pos:column="24">p<pos:position pos:line="5926" pos:column="25"/></name><operator pos:line="5926" pos:column="25">-&gt;<pos:position pos:line="5926" pos:column="30"/></operator><name pos:line="5926" pos:column="27">btreeMask<pos:position pos:line="5926" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="5926" pos:column="38">p1<pos:position pos:line="5926" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5926" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="5926" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="5926" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5927" pos:column="5">assert<pos:position pos:line="5927" pos:column="11"/></name><argument_list pos:line="5927" pos:column="11">( <argument><expr><name pos:line="5927" pos:column="13">isWriteLock<pos:position pos:line="5927" pos:column="24"/></name><operator pos:line="5927" pos:column="24">==<pos:position pos:line="5927" pos:column="26"/></operator><literal type="number" pos:line="5927" pos:column="26">0<pos:position pos:line="5927" pos:column="27"/></literal> <operator pos:line="5927" pos:column="28">||<pos:position pos:line="5927" pos:column="30"/></operator> <name pos:line="5927" pos:column="31">isWriteLock<pos:position pos:line="5927" pos:column="42"/></name><operator pos:line="5927" pos:column="42">==<pos:position pos:line="5927" pos:column="44"/></operator><literal type="number" pos:line="5927" pos:column="44">1<pos:position pos:line="5927" pos:column="45"/></literal></expr></argument> )<pos:position pos:line="5927" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="5927" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5928" pos:column="5">rc<pos:position pos:line="5928" pos:column="7"/></name> <operator pos:line="5928" pos:column="8">=<pos:position pos:line="5928" pos:column="9"/></operator> <call><name pos:line="5928" pos:column="10">sqlite3BtreeLockTable<pos:position pos:line="5928" pos:column="31"/></name><argument_list pos:line="5928" pos:column="31">(<argument><expr><name><name pos:line="5928" pos:column="32">db<pos:position pos:line="5928" pos:column="34"/></name><operator pos:line="5928" pos:column="34">-&gt;<pos:position pos:line="5928" pos:column="39"/></operator><name pos:line="5928" pos:column="36">aDb<pos:position pos:line="5928" pos:column="39"/></name><index pos:line="5928" pos:column="39">[<expr><name pos:line="5928" pos:column="40">p1<pos:position pos:line="5928" pos:column="42"/></name></expr>]<pos:position pos:line="5928" pos:column="43"/></index></name><operator pos:line="5928" pos:column="43">.<pos:position pos:line="5928" pos:column="44"/></operator><name pos:line="5928" pos:column="44">pBt<pos:position pos:line="5928" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="5928" pos:column="49">pOp<pos:position pos:line="5928" pos:column="52"/></name><operator pos:line="5928" pos:column="52">-&gt;<pos:position pos:line="5928" pos:column="57"/></operator><name pos:line="5928" pos:column="54">p2<pos:position pos:line="5928" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="5928" pos:column="58">isWriteLock<pos:position pos:line="5928" pos:column="69"/></name></expr></argument>)<pos:position pos:line="5928" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="5928" pos:column="71"/></expr_stmt>
    <if pos:line="5929" pos:column="5">if<condition pos:line="5929" pos:column="7">( <expr><name pos:line="5929" pos:column="9">rc<pos:position pos:line="5929" pos:column="11"/></name></expr> )<pos:position pos:line="5929" pos:column="13"/></condition><then><block pos:line="5929" pos:column="13">{
      <if pos:line="5930" pos:column="7">if<condition pos:line="5930" pos:column="9">( <expr><operator pos:line="5930" pos:column="11">(<pos:position pos:line="5930" pos:column="12"/></operator><name pos:line="5930" pos:column="12">rc<pos:position pos:line="5930" pos:column="14"/></name><operator pos:line="5930" pos:column="14">&amp;<pos:position pos:line="5930" pos:column="19"/></operator><literal type="number" pos:line="5930" pos:column="15">0xFF<pos:position pos:line="5930" pos:column="19"/></literal><operator pos:line="5930" pos:column="19">)<pos:position pos:line="5930" pos:column="20"/></operator><operator pos:line="5930" pos:column="20">==<pos:position pos:line="5930" pos:column="22"/></operator><name pos:line="5930" pos:column="22">SQLITE_LOCKED<pos:position pos:line="5930" pos:column="35"/></name></expr> )<pos:position pos:line="5930" pos:column="37"/></condition><then><block pos:line="5930" pos:column="37">{
        <decl_stmt><decl><type><specifier pos:line="5931" pos:column="9">const<pos:position pos:line="5931" pos:column="14"/></specifier> <name pos:line="5931" pos:column="15">char<pos:position pos:line="5931" pos:column="19"/></name> <modifier pos:line="5931" pos:column="20">*<pos:position pos:line="5931" pos:column="21"/></modifier></type><name pos:line="5931" pos:column="21">z<pos:position pos:line="5931" pos:column="22"/></name> <init pos:line="5931" pos:column="23">= <expr><name><name pos:line="5931" pos:column="25">pOp<pos:position pos:line="5931" pos:column="28"/></name><operator pos:line="5931" pos:column="28">-&gt;<pos:position pos:line="5931" pos:column="33"/></operator><name pos:line="5931" pos:column="30">p4<pos:position pos:line="5931" pos:column="32"/></name><operator pos:line="5931" pos:column="32">.<pos:position pos:line="5931" pos:column="33"/></operator><name pos:line="5931" pos:column="33">z<pos:position pos:line="5931" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="5931" pos:column="35"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="5932" pos:column="9">sqlite3VdbeError<pos:position pos:line="5932" pos:column="25"/></name><argument_list pos:line="5932" pos:column="25">(<argument><expr><name pos:line="5932" pos:column="26">p<pos:position pos:line="5932" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5932" pos:column="29">"database table is locked: %s"<pos:position pos:line="5932" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="5932" pos:column="61">z<pos:position pos:line="5932" pos:column="62"/></name></expr></argument>)<pos:position pos:line="5932" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="5932" pos:column="64"/></expr_stmt>
      }<pos:position pos:line="5933" pos:column="8"/></block></then></if>
      <goto pos:line="5934" pos:column="7">goto <name pos:line="5934" pos:column="12">abort_due_to_error<pos:position pos:line="5934" pos:column="30"/></name>;<pos:position pos:line="5934" pos:column="31"/></goto>
    }<pos:position pos:line="5935" pos:column="6"/></block></then></if>
  }<pos:position pos:line="5936" pos:column="4"/></block></then></if>
  <break pos:line="5937" pos:column="3">break;<pos:position pos:line="5937" pos:column="9"/></break>
}<pos:position pos:line="5938" pos:column="2"/></block>
<cpp:endif pos:line="5939" pos:column="1">#<cpp:directive pos:line="5939" pos:column="2">endif<pos:position pos:line="5939" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5939" pos:column="8">/* SQLITE_OMIT_SHARED_CACHE */</comment>

<cpp:ifndef pos:line="5941" pos:column="1">#<cpp:directive pos:line="5941" pos:column="2">ifndef<pos:position pos:line="5941" pos:column="8"/></cpp:directive> <name pos:line="5941" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="5941" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="5942" pos:column="1">/* Opcode: VBegin * * * P4 *
**
** P4 may be a pointer to an sqlite3_vtab structure. If so, call the 
** xBegin method for that table.
**
** Also, whether or not P4 is set, check that this is not being called from
** within a callback to a virtual table xSync() method. If it is, the error
** code will be set to SQLITE_LOCKED.
*/</comment>
<case pos:line="5951" pos:column="1">case <expr><name pos:line="5951" pos:column="6">OP_VBegin<pos:position pos:line="5951" pos:column="15"/></name></expr>:<pos:position pos:line="5951" pos:column="16"/></case> <block pos:line="5951" pos:column="17">{
  <decl_stmt><decl><type><name pos:line="5952" pos:column="3">VTable<pos:position pos:line="5952" pos:column="9"/></name> <modifier pos:line="5952" pos:column="10">*<pos:position pos:line="5952" pos:column="11"/></modifier></type><name pos:line="5952" pos:column="11">pVTab<pos:position pos:line="5952" pos:column="16"/></name></decl>;<pos:position pos:line="5952" pos:column="17"/></decl_stmt>
  <expr_stmt><expr><name pos:line="5953" pos:column="3">pVTab<pos:position pos:line="5953" pos:column="8"/></name> <operator pos:line="5953" pos:column="9">=<pos:position pos:line="5953" pos:column="10"/></operator> <name><name pos:line="5953" pos:column="11">pOp<pos:position pos:line="5953" pos:column="14"/></name><operator pos:line="5953" pos:column="14">-&gt;<pos:position pos:line="5953" pos:column="19"/></operator><name pos:line="5953" pos:column="16">p4<pos:position pos:line="5953" pos:column="18"/></name><operator pos:line="5953" pos:column="18">.<pos:position pos:line="5953" pos:column="19"/></operator><name pos:line="5953" pos:column="19">pVtab<pos:position pos:line="5953" pos:column="24"/></name></name></expr>;<pos:position pos:line="5953" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5954" pos:column="3">rc<pos:position pos:line="5954" pos:column="5"/></name> <operator pos:line="5954" pos:column="6">=<pos:position pos:line="5954" pos:column="7"/></operator> <call><name pos:line="5954" pos:column="8">sqlite3VtabBegin<pos:position pos:line="5954" pos:column="24"/></name><argument_list pos:line="5954" pos:column="24">(<argument><expr><name pos:line="5954" pos:column="25">db<pos:position pos:line="5954" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="5954" pos:column="29">pVTab<pos:position pos:line="5954" pos:column="34"/></name></expr></argument>)<pos:position pos:line="5954" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5954" pos:column="36"/></expr_stmt>
  <if pos:line="5955" pos:column="3">if<condition pos:line="5955" pos:column="5">( <expr><name pos:line="5955" pos:column="7">pVTab<pos:position pos:line="5955" pos:column="12"/></name></expr> )<pos:position pos:line="5955" pos:column="14"/></condition><then pos:line="5955" pos:column="14"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="5955" pos:column="15">sqlite3VtabImportErrmsg<pos:position pos:line="5955" pos:column="38"/></name><argument_list pos:line="5955" pos:column="38">(<argument><expr><name pos:line="5955" pos:column="39">p<pos:position pos:line="5955" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="5955" pos:column="42">pVTab<pos:position pos:line="5955" pos:column="47"/></name><operator pos:line="5955" pos:column="47">-&gt;<pos:position pos:line="5955" pos:column="52"/></operator><name pos:line="5955" pos:column="49">pVtab<pos:position pos:line="5955" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="5955" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="5955" pos:column="56"/></expr_stmt></block></then></if>
  <if pos:line="5956" pos:column="3">if<condition pos:line="5956" pos:column="5">( <expr><name pos:line="5956" pos:column="7">rc<pos:position pos:line="5956" pos:column="9"/></name></expr> )<pos:position pos:line="5956" pos:column="11"/></condition><then pos:line="5956" pos:column="11"> <block type="pseudo"><goto pos:line="5956" pos:column="12">goto <name pos:line="5956" pos:column="17">abort_due_to_error<pos:position pos:line="5956" pos:column="35"/></name>;<pos:position pos:line="5956" pos:column="36"/></goto></block></then></if>
  <break pos:line="5957" pos:column="3">break;<pos:position pos:line="5957" pos:column="9"/></break>
}<pos:position pos:line="5958" pos:column="2"/></block>
<cpp:endif pos:line="5959" pos:column="1">#<cpp:directive pos:line="5959" pos:column="2">endif<pos:position pos:line="5959" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5959" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="5961" pos:column="1">#<cpp:directive pos:line="5961" pos:column="2">ifndef<pos:position pos:line="5961" pos:column="8"/></cpp:directive> <name pos:line="5961" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="5961" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="5962" pos:column="1">/* Opcode: VCreate P1 P2 * * *
**
** P2 is a register that holds the name of a virtual table in database 
** P1. Call the xCreate method for that table.
*/</comment>
<case pos:line="5967" pos:column="1">case <expr><name pos:line="5967" pos:column="6">OP_VCreate<pos:position pos:line="5967" pos:column="16"/></name></expr>:<pos:position pos:line="5967" pos:column="17"/></case> <block pos:line="5967" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="5968" pos:column="3">Mem<pos:position pos:line="5968" pos:column="6"/></name></type> <name pos:line="5968" pos:column="7">sMem<pos:position pos:line="5968" pos:column="11"/></name></decl>;<pos:position pos:line="5968" pos:column="12"/></decl_stmt>          <comment type="block" pos:line="5968" pos:column="22">/* For storing the record being decoded */</comment>
  <decl_stmt><decl><type><specifier pos:line="5969" pos:column="3">const<pos:position pos:line="5969" pos:column="8"/></specifier> <name pos:line="5969" pos:column="9">char<pos:position pos:line="5969" pos:column="13"/></name> <modifier pos:line="5969" pos:column="14">*<pos:position pos:line="5969" pos:column="15"/></modifier></type><name pos:line="5969" pos:column="15">zTab<pos:position pos:line="5969" pos:column="19"/></name></decl>;<pos:position pos:line="5969" pos:column="20"/></decl_stmt>  <comment type="block" pos:line="5969" pos:column="22">/* Name of the virtual table */</comment>

  <expr_stmt><expr><call><name pos:line="5971" pos:column="3">memset<pos:position pos:line="5971" pos:column="9"/></name><argument_list pos:line="5971" pos:column="9">(<argument><expr><operator pos:line="5971" pos:column="10">&amp;<pos:position pos:line="5971" pos:column="15"/></operator><name pos:line="5971" pos:column="11">sMem<pos:position pos:line="5971" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5971" pos:column="17">0<pos:position pos:line="5971" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5971" pos:column="20">sizeof<argument_list pos:line="5971" pos:column="26">(<argument><expr><name pos:line="5971" pos:column="27">sMem<pos:position pos:line="5971" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5971" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5971" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5971" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5972" pos:column="3">sMem<pos:position pos:line="5972" pos:column="7"/></name><operator pos:line="5972" pos:column="7">.<pos:position pos:line="5972" pos:column="8"/></operator><name pos:line="5972" pos:column="8">db<pos:position pos:line="5972" pos:column="10"/></name></name> <operator pos:line="5972" pos:column="11">=<pos:position pos:line="5972" pos:column="12"/></operator> <name pos:line="5972" pos:column="13">db<pos:position pos:line="5972" pos:column="15"/></name></expr>;<pos:position pos:line="5972" pos:column="16"/></expr_stmt>
  <comment type="block" pos:line="5973" pos:column="3">/* Because P2 is always a static string, it is impossible for the
  ** sqlite3VdbeMemCopy() to fail */</comment>
  <expr_stmt><expr><call><name pos:line="5975" pos:column="3">assert<pos:position pos:line="5975" pos:column="9"/></name><argument_list pos:line="5975" pos:column="9">( <argument><expr><operator pos:line="5975" pos:column="11">(<pos:position pos:line="5975" pos:column="12"/></operator><name><name pos:line="5975" pos:column="12">aMem<pos:position pos:line="5975" pos:column="16"/></name><index pos:line="5975" pos:column="16">[<expr><name><name pos:line="5975" pos:column="17">pOp<pos:position pos:line="5975" pos:column="20"/></name><operator pos:line="5975" pos:column="20">-&gt;<pos:position pos:line="5975" pos:column="25"/></operator><name pos:line="5975" pos:column="22">p2<pos:position pos:line="5975" pos:column="24"/></name></name></expr>]<pos:position pos:line="5975" pos:column="25"/></index></name><operator pos:line="5975" pos:column="25">.<pos:position pos:line="5975" pos:column="26"/></operator><name pos:line="5975" pos:column="26">flags<pos:position pos:line="5975" pos:column="31"/></name> <operator pos:line="5975" pos:column="32">&amp;<pos:position pos:line="5975" pos:column="37"/></operator> <name pos:line="5975" pos:column="34">MEM_Str<pos:position pos:line="5975" pos:column="41"/></name><operator pos:line="5975" pos:column="41">)<pos:position pos:line="5975" pos:column="42"/></operator><operator pos:line="5975" pos:column="42">!=<pos:position pos:line="5975" pos:column="44"/></operator><literal type="number" pos:line="5975" pos:column="44">0<pos:position pos:line="5975" pos:column="45"/></literal></expr></argument> )<pos:position pos:line="5975" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="5975" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5976" pos:column="3">assert<pos:position pos:line="5976" pos:column="9"/></name><argument_list pos:line="5976" pos:column="9">( <argument><expr><operator pos:line="5976" pos:column="11">(<pos:position pos:line="5976" pos:column="12"/></operator><name><name pos:line="5976" pos:column="12">aMem<pos:position pos:line="5976" pos:column="16"/></name><index pos:line="5976" pos:column="16">[<expr><name><name pos:line="5976" pos:column="17">pOp<pos:position pos:line="5976" pos:column="20"/></name><operator pos:line="5976" pos:column="20">-&gt;<pos:position pos:line="5976" pos:column="25"/></operator><name pos:line="5976" pos:column="22">p2<pos:position pos:line="5976" pos:column="24"/></name></name></expr>]<pos:position pos:line="5976" pos:column="25"/></index></name><operator pos:line="5976" pos:column="25">.<pos:position pos:line="5976" pos:column="26"/></operator><name pos:line="5976" pos:column="26">flags<pos:position pos:line="5976" pos:column="31"/></name> <operator pos:line="5976" pos:column="32">&amp;<pos:position pos:line="5976" pos:column="37"/></operator> <name pos:line="5976" pos:column="34">MEM_Static<pos:position pos:line="5976" pos:column="44"/></name><operator pos:line="5976" pos:column="44">)<pos:position pos:line="5976" pos:column="45"/></operator><operator pos:line="5976" pos:column="45">!=<pos:position pos:line="5976" pos:column="47"/></operator><literal type="number" pos:line="5976" pos:column="47">0<pos:position pos:line="5976" pos:column="48"/></literal></expr></argument> )<pos:position pos:line="5976" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5976" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5977" pos:column="3">rc<pos:position pos:line="5977" pos:column="5"/></name> <operator pos:line="5977" pos:column="6">=<pos:position pos:line="5977" pos:column="7"/></operator> <call><name pos:line="5977" pos:column="8">sqlite3VdbeMemCopy<pos:position pos:line="5977" pos:column="26"/></name><argument_list pos:line="5977" pos:column="26">(<argument><expr><operator pos:line="5977" pos:column="27">&amp;<pos:position pos:line="5977" pos:column="32"/></operator><name pos:line="5977" pos:column="28">sMem<pos:position pos:line="5977" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="5977" pos:column="34">&amp;<pos:position pos:line="5977" pos:column="39"/></operator><name><name pos:line="5977" pos:column="35">aMem<pos:position pos:line="5977" pos:column="39"/></name><index pos:line="5977" pos:column="39">[<expr><name><name pos:line="5977" pos:column="40">pOp<pos:position pos:line="5977" pos:column="43"/></name><operator pos:line="5977" pos:column="43">-&gt;<pos:position pos:line="5977" pos:column="48"/></operator><name pos:line="5977" pos:column="45">p2<pos:position pos:line="5977" pos:column="47"/></name></name></expr>]<pos:position pos:line="5977" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="5977" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="5977" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5978" pos:column="3">assert<pos:position pos:line="5978" pos:column="9"/></name><argument_list pos:line="5978" pos:column="9">( <argument><expr><name pos:line="5978" pos:column="11">rc<pos:position pos:line="5978" pos:column="13"/></name><operator pos:line="5978" pos:column="13">==<pos:position pos:line="5978" pos:column="15"/></operator><name pos:line="5978" pos:column="15">SQLITE_OK<pos:position pos:line="5978" pos:column="24"/></name></expr></argument> )<pos:position pos:line="5978" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="5978" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5979" pos:column="3">zTab<pos:position pos:line="5979" pos:column="7"/></name> <operator pos:line="5979" pos:column="8">=<pos:position pos:line="5979" pos:column="9"/></operator> <operator pos:line="5979" pos:column="10">(<pos:position pos:line="5979" pos:column="11"/></operator><specifier pos:line="5979" pos:column="11">const<pos:position pos:line="5979" pos:column="16"/></specifier> <name pos:line="5979" pos:column="17">char<pos:position pos:line="5979" pos:column="21"/></name><operator pos:line="5979" pos:column="21">*<pos:position pos:line="5979" pos:column="22"/></operator><operator pos:line="5979" pos:column="22">)<pos:position pos:line="5979" pos:column="23"/></operator><call><name pos:line="5979" pos:column="23">sqlite3_value_text<pos:position pos:line="5979" pos:column="41"/></name><argument_list pos:line="5979" pos:column="41">(<argument><expr><operator pos:line="5979" pos:column="42">&amp;<pos:position pos:line="5979" pos:column="47"/></operator><name pos:line="5979" pos:column="43">sMem<pos:position pos:line="5979" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5979" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5979" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5980" pos:column="3">assert<pos:position pos:line="5980" pos:column="9"/></name><argument_list pos:line="5980" pos:column="9">( <argument><expr><name pos:line="5980" pos:column="11">zTab<pos:position pos:line="5980" pos:column="15"/></name> <operator pos:line="5980" pos:column="16">||<pos:position pos:line="5980" pos:column="18"/></operator> <name><name pos:line="5980" pos:column="19">db<pos:position pos:line="5980" pos:column="21"/></name><operator pos:line="5980" pos:column="21">-&gt;<pos:position pos:line="5980" pos:column="26"/></operator><name pos:line="5980" pos:column="23">mallocFailed<pos:position pos:line="5980" pos:column="35"/></name></name></expr></argument> )<pos:position pos:line="5980" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5980" pos:column="38"/></expr_stmt>
  <if pos:line="5981" pos:column="3">if<condition pos:line="5981" pos:column="5">( <expr><name pos:line="5981" pos:column="7">zTab<pos:position pos:line="5981" pos:column="11"/></name></expr> )<pos:position pos:line="5981" pos:column="13"/></condition><then><block pos:line="5981" pos:column="13">{
    <expr_stmt><expr><name pos:line="5982" pos:column="5">rc<pos:position pos:line="5982" pos:column="7"/></name> <operator pos:line="5982" pos:column="8">=<pos:position pos:line="5982" pos:column="9"/></operator> <call><name pos:line="5982" pos:column="10">sqlite3VtabCallCreate<pos:position pos:line="5982" pos:column="31"/></name><argument_list pos:line="5982" pos:column="31">(<argument><expr><name pos:line="5982" pos:column="32">db<pos:position pos:line="5982" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="5982" pos:column="36">pOp<pos:position pos:line="5982" pos:column="39"/></name><operator pos:line="5982" pos:column="39">-&gt;<pos:position pos:line="5982" pos:column="44"/></operator><name pos:line="5982" pos:column="41">p1<pos:position pos:line="5982" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="5982" pos:column="45">zTab<pos:position pos:line="5982" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="5982" pos:column="51">&amp;<pos:position pos:line="5982" pos:column="56"/></operator><name><name pos:line="5982" pos:column="52">p<pos:position pos:line="5982" pos:column="53"/></name><operator pos:line="5982" pos:column="53">-&gt;<pos:position pos:line="5982" pos:column="58"/></operator><name pos:line="5982" pos:column="55">zErrMsg<pos:position pos:line="5982" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="5982" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="5982" pos:column="64"/></expr_stmt>
  }<pos:position pos:line="5983" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="5984" pos:column="3">sqlite3VdbeMemRelease<pos:position pos:line="5984" pos:column="24"/></name><argument_list pos:line="5984" pos:column="24">(<argument><expr><operator pos:line="5984" pos:column="25">&amp;<pos:position pos:line="5984" pos:column="30"/></operator><name pos:line="5984" pos:column="26">sMem<pos:position pos:line="5984" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5984" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5984" pos:column="32"/></expr_stmt>
  <if pos:line="5985" pos:column="3">if<condition pos:line="5985" pos:column="5">( <expr><name pos:line="5985" pos:column="7">rc<pos:position pos:line="5985" pos:column="9"/></name></expr> )<pos:position pos:line="5985" pos:column="11"/></condition><then pos:line="5985" pos:column="11"> <block type="pseudo"><goto pos:line="5985" pos:column="12">goto <name pos:line="5985" pos:column="17">abort_due_to_error<pos:position pos:line="5985" pos:column="35"/></name>;<pos:position pos:line="5985" pos:column="36"/></goto></block></then></if>
  <break pos:line="5986" pos:column="3">break;<pos:position pos:line="5986" pos:column="9"/></break>
}<pos:position pos:line="5987" pos:column="2"/></block>
<cpp:endif pos:line="5988" pos:column="1">#<cpp:directive pos:line="5988" pos:column="2">endif<pos:position pos:line="5988" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5988" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="5990" pos:column="1">#<cpp:directive pos:line="5990" pos:column="2">ifndef<pos:position pos:line="5990" pos:column="8"/></cpp:directive> <name pos:line="5990" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="5990" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="5991" pos:column="1">/* Opcode: VDestroy P1 * * P4 *
**
** P4 is the name of a virtual table in database P1.  Call the xDestroy method
** of that table.
*/</comment>
<case pos:line="5996" pos:column="1">case <expr><name pos:line="5996" pos:column="6">OP_VDestroy<pos:position pos:line="5996" pos:column="17"/></name></expr>:<pos:position pos:line="5996" pos:column="18"/></case> <block pos:line="5996" pos:column="19">{
  <expr_stmt><expr><name><name pos:line="5997" pos:column="3">db<pos:position pos:line="5997" pos:column="5"/></name><operator pos:line="5997" pos:column="5">-&gt;<pos:position pos:line="5997" pos:column="10"/></operator><name pos:line="5997" pos:column="7">nVDestroy<pos:position pos:line="5997" pos:column="16"/></name></name><operator pos:line="5997" pos:column="16">++<pos:position pos:line="5997" pos:column="18"/></operator></expr>;<pos:position pos:line="5997" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5998" pos:column="3">rc<pos:position pos:line="5998" pos:column="5"/></name> <operator pos:line="5998" pos:column="6">=<pos:position pos:line="5998" pos:column="7"/></operator> <call><name pos:line="5998" pos:column="8">sqlite3VtabCallDestroy<pos:position pos:line="5998" pos:column="30"/></name><argument_list pos:line="5998" pos:column="30">(<argument><expr><name pos:line="5998" pos:column="31">db<pos:position pos:line="5998" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="5998" pos:column="35">pOp<pos:position pos:line="5998" pos:column="38"/></name><operator pos:line="5998" pos:column="38">-&gt;<pos:position pos:line="5998" pos:column="43"/></operator><name pos:line="5998" pos:column="40">p1<pos:position pos:line="5998" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5998" pos:column="44">pOp<pos:position pos:line="5998" pos:column="47"/></name><operator pos:line="5998" pos:column="47">-&gt;<pos:position pos:line="5998" pos:column="52"/></operator><name pos:line="5998" pos:column="49">p4<pos:position pos:line="5998" pos:column="51"/></name><operator pos:line="5998" pos:column="51">.<pos:position pos:line="5998" pos:column="52"/></operator><name pos:line="5998" pos:column="52">z<pos:position pos:line="5998" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="5998" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5998" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5999" pos:column="3">db<pos:position pos:line="5999" pos:column="5"/></name><operator pos:line="5999" pos:column="5">-&gt;<pos:position pos:line="5999" pos:column="10"/></operator><name pos:line="5999" pos:column="7">nVDestroy<pos:position pos:line="5999" pos:column="16"/></name></name><operator pos:line="5999" pos:column="16">--<pos:position pos:line="5999" pos:column="18"/></operator></expr>;<pos:position pos:line="5999" pos:column="19"/></expr_stmt>
  <if pos:line="6000" pos:column="3">if<condition pos:line="6000" pos:column="5">( <expr><name pos:line="6000" pos:column="7">rc<pos:position pos:line="6000" pos:column="9"/></name></expr> )<pos:position pos:line="6000" pos:column="11"/></condition><then pos:line="6000" pos:column="11"> <block type="pseudo"><goto pos:line="6000" pos:column="12">goto <name pos:line="6000" pos:column="17">abort_due_to_error<pos:position pos:line="6000" pos:column="35"/></name>;<pos:position pos:line="6000" pos:column="36"/></goto></block></then></if>
  <break pos:line="6001" pos:column="3">break;<pos:position pos:line="6001" pos:column="9"/></break>
}<pos:position pos:line="6002" pos:column="2"/></block>
<cpp:endif pos:line="6003" pos:column="1">#<cpp:directive pos:line="6003" pos:column="2">endif<pos:position pos:line="6003" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6003" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="6005" pos:column="1">#<cpp:directive pos:line="6005" pos:column="2">ifndef<pos:position pos:line="6005" pos:column="8"/></cpp:directive> <name pos:line="6005" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="6005" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="6006" pos:column="1">/* Opcode: VOpen P1 * * P4 *
**
** P4 is a pointer to a virtual table object, an sqlite3_vtab structure.
** P1 is a cursor number.  This opcode opens a cursor to the virtual
** table and stores that cursor in P1.
*/</comment>
<case pos:line="6012" pos:column="1">case <expr><name pos:line="6012" pos:column="6">OP_VOpen<pos:position pos:line="6012" pos:column="14"/></name></expr>:<pos:position pos:line="6012" pos:column="15"/></case> <block pos:line="6012" pos:column="16">{
  <decl_stmt><decl><type><name pos:line="6013" pos:column="3">VdbeCursor<pos:position pos:line="6013" pos:column="13"/></name> <modifier pos:line="6013" pos:column="14">*<pos:position pos:line="6013" pos:column="15"/></modifier></type><name pos:line="6013" pos:column="15">pCur<pos:position pos:line="6013" pos:column="19"/></name></decl>;<pos:position pos:line="6013" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6014" pos:column="3">sqlite3_vtab_cursor<pos:position pos:line="6014" pos:column="22"/></name> <modifier pos:line="6014" pos:column="23">*<pos:position pos:line="6014" pos:column="24"/></modifier></type><name pos:line="6014" pos:column="24">pVCur<pos:position pos:line="6014" pos:column="29"/></name></decl>;<pos:position pos:line="6014" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6015" pos:column="3">sqlite3_vtab<pos:position pos:line="6015" pos:column="15"/></name> <modifier pos:line="6015" pos:column="16">*<pos:position pos:line="6015" pos:column="17"/></modifier></type><name pos:line="6015" pos:column="17">pVtab<pos:position pos:line="6015" pos:column="22"/></name></decl>;<pos:position pos:line="6015" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6016" pos:column="3">const<pos:position pos:line="6016" pos:column="8"/></specifier> <name pos:line="6016" pos:column="9">sqlite3_module<pos:position pos:line="6016" pos:column="23"/></name> <modifier pos:line="6016" pos:column="24">*<pos:position pos:line="6016" pos:column="25"/></modifier></type><name pos:line="6016" pos:column="25">pModule<pos:position pos:line="6016" pos:column="32"/></name></decl>;<pos:position pos:line="6016" pos:column="33"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6018" pos:column="3">assert<pos:position pos:line="6018" pos:column="9"/></name><argument_list pos:line="6018" pos:column="9">( <argument><expr><name><name pos:line="6018" pos:column="11">p<pos:position pos:line="6018" pos:column="12"/></name><operator pos:line="6018" pos:column="12">-&gt;<pos:position pos:line="6018" pos:column="17"/></operator><name pos:line="6018" pos:column="14">bIsReader<pos:position pos:line="6018" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="6018" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="6018" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6019" pos:column="3">pCur<pos:position pos:line="6019" pos:column="7"/></name> <operator pos:line="6019" pos:column="8">=<pos:position pos:line="6019" pos:column="9"/></operator> <literal type="number" pos:line="6019" pos:column="10">0<pos:position pos:line="6019" pos:column="11"/></literal></expr>;<pos:position pos:line="6019" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6020" pos:column="3">pVCur<pos:position pos:line="6020" pos:column="8"/></name> <operator pos:line="6020" pos:column="9">=<pos:position pos:line="6020" pos:column="10"/></operator> <literal type="number" pos:line="6020" pos:column="11">0<pos:position pos:line="6020" pos:column="12"/></literal></expr>;<pos:position pos:line="6020" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6021" pos:column="3">pVtab<pos:position pos:line="6021" pos:column="8"/></name> <operator pos:line="6021" pos:column="9">=<pos:position pos:line="6021" pos:column="10"/></operator> <name><name pos:line="6021" pos:column="11">pOp<pos:position pos:line="6021" pos:column="14"/></name><operator pos:line="6021" pos:column="14">-&gt;<pos:position pos:line="6021" pos:column="19"/></operator><name pos:line="6021" pos:column="16">p4<pos:position pos:line="6021" pos:column="18"/></name><operator pos:line="6021" pos:column="18">.<pos:position pos:line="6021" pos:column="19"/></operator><name pos:line="6021" pos:column="19">pVtab<pos:position pos:line="6021" pos:column="24"/></name><operator pos:line="6021" pos:column="24">-&gt;<pos:position pos:line="6021" pos:column="29"/></operator><name pos:line="6021" pos:column="26">pVtab<pos:position pos:line="6021" pos:column="31"/></name></name></expr>;<pos:position pos:line="6021" pos:column="32"/></expr_stmt>
  <if pos:line="6022" pos:column="3">if<condition pos:line="6022" pos:column="5">( <expr><name pos:line="6022" pos:column="7">pVtab<pos:position pos:line="6022" pos:column="12"/></name><operator pos:line="6022" pos:column="12">==<pos:position pos:line="6022" pos:column="14"/></operator><literal type="number" pos:line="6022" pos:column="14">0<pos:position pos:line="6022" pos:column="15"/></literal> <operator pos:line="6022" pos:column="16">||<pos:position pos:line="6022" pos:column="18"/></operator> <call><name pos:line="6022" pos:column="19">NEVER<pos:position pos:line="6022" pos:column="24"/></name><argument_list pos:line="6022" pos:column="24">(<argument><expr><name><name pos:line="6022" pos:column="25">pVtab<pos:position pos:line="6022" pos:column="30"/></name><operator pos:line="6022" pos:column="30">-&gt;<pos:position pos:line="6022" pos:column="35"/></operator><name pos:line="6022" pos:column="32">pModule<pos:position pos:line="6022" pos:column="39"/></name></name><operator pos:line="6022" pos:column="39">==<pos:position pos:line="6022" pos:column="41"/></operator><literal type="number" pos:line="6022" pos:column="41">0<pos:position pos:line="6022" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="6022" pos:column="43"/></argument_list></call></expr> )<pos:position pos:line="6022" pos:column="45"/></condition><then><block pos:line="6022" pos:column="45">{
    <expr_stmt><expr><name pos:line="6023" pos:column="5">rc<pos:position pos:line="6023" pos:column="7"/></name> <operator pos:line="6023" pos:column="8">=<pos:position pos:line="6023" pos:column="9"/></operator> <name pos:line="6023" pos:column="10">SQLITE_LOCKED<pos:position pos:line="6023" pos:column="23"/></name></expr>;<pos:position pos:line="6023" pos:column="24"/></expr_stmt>
    <goto pos:line="6024" pos:column="5">goto <name pos:line="6024" pos:column="10">abort_due_to_error<pos:position pos:line="6024" pos:column="28"/></name>;<pos:position pos:line="6024" pos:column="29"/></goto>
  }<pos:position pos:line="6025" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="6026" pos:column="3">pModule<pos:position pos:line="6026" pos:column="10"/></name> <operator pos:line="6026" pos:column="11">=<pos:position pos:line="6026" pos:column="12"/></operator> <name><name pos:line="6026" pos:column="13">pVtab<pos:position pos:line="6026" pos:column="18"/></name><operator pos:line="6026" pos:column="18">-&gt;<pos:position pos:line="6026" pos:column="23"/></operator><name pos:line="6026" pos:column="20">pModule<pos:position pos:line="6026" pos:column="27"/></name></name></expr>;<pos:position pos:line="6026" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6027" pos:column="3">rc<pos:position pos:line="6027" pos:column="5"/></name> <operator pos:line="6027" pos:column="6">=<pos:position pos:line="6027" pos:column="7"/></operator> <call><name><name pos:line="6027" pos:column="8">pModule<pos:position pos:line="6027" pos:column="15"/></name><operator pos:line="6027" pos:column="15">-&gt;<pos:position pos:line="6027" pos:column="20"/></operator><name pos:line="6027" pos:column="17">xOpen<pos:position pos:line="6027" pos:column="22"/></name></name><argument_list pos:line="6027" pos:column="22">(<argument><expr><name pos:line="6027" pos:column="23">pVtab<pos:position pos:line="6027" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="6027" pos:column="30">&amp;<pos:position pos:line="6027" pos:column="35"/></operator><name pos:line="6027" pos:column="31">pVCur<pos:position pos:line="6027" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6027" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="6027" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6028" pos:column="3">sqlite3VtabImportErrmsg<pos:position pos:line="6028" pos:column="26"/></name><argument_list pos:line="6028" pos:column="26">(<argument><expr><name pos:line="6028" pos:column="27">p<pos:position pos:line="6028" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="6028" pos:column="30">pVtab<pos:position pos:line="6028" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6028" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6028" pos:column="37"/></expr_stmt>
  <if pos:line="6029" pos:column="3">if<condition pos:line="6029" pos:column="5">( <expr><name pos:line="6029" pos:column="7">rc<pos:position pos:line="6029" pos:column="9"/></name></expr> )<pos:position pos:line="6029" pos:column="11"/></condition><then pos:line="6029" pos:column="11"> <block type="pseudo"><goto pos:line="6029" pos:column="12">goto <name pos:line="6029" pos:column="17">abort_due_to_error<pos:position pos:line="6029" pos:column="35"/></name>;<pos:position pos:line="6029" pos:column="36"/></goto></block></then></if>

  <comment type="block" pos:line="6031" pos:column="3">/* Initialize sqlite3_vtab_cursor base class */</comment>
  <expr_stmt><expr><name><name pos:line="6032" pos:column="3">pVCur<pos:position pos:line="6032" pos:column="8"/></name><operator pos:line="6032" pos:column="8">-&gt;<pos:position pos:line="6032" pos:column="13"/></operator><name pos:line="6032" pos:column="10">pVtab<pos:position pos:line="6032" pos:column="15"/></name></name> <operator pos:line="6032" pos:column="16">=<pos:position pos:line="6032" pos:column="17"/></operator> <name pos:line="6032" pos:column="18">pVtab<pos:position pos:line="6032" pos:column="23"/></name></expr>;<pos:position pos:line="6032" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="6034" pos:column="3">/* Initialize vdbe cursor object */</comment>
  <expr_stmt><expr><name pos:line="6035" pos:column="3">pCur<pos:position pos:line="6035" pos:column="7"/></name> <operator pos:line="6035" pos:column="8">=<pos:position pos:line="6035" pos:column="9"/></operator> <call><name pos:line="6035" pos:column="10">allocateCursor<pos:position pos:line="6035" pos:column="24"/></name><argument_list pos:line="6035" pos:column="24">(<argument><expr><name pos:line="6035" pos:column="25">p<pos:position pos:line="6035" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="6035" pos:column="28">pOp<pos:position pos:line="6035" pos:column="31"/></name><operator pos:line="6035" pos:column="31">-&gt;<pos:position pos:line="6035" pos:column="36"/></operator><name pos:line="6035" pos:column="33">p1<pos:position pos:line="6035" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="6035" pos:column="37">0<pos:position pos:line="6035" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="6035" pos:column="40">-<pos:position pos:line="6035" pos:column="41"/></operator><literal type="number" pos:line="6035" pos:column="41">1<pos:position pos:line="6035" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="6035" pos:column="44">CURTYPE_VTAB<pos:position pos:line="6035" pos:column="56"/></name></expr></argument>)<pos:position pos:line="6035" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6035" pos:column="58"/></expr_stmt>
  <if pos:line="6036" pos:column="3">if<condition pos:line="6036" pos:column="5">( <expr><name pos:line="6036" pos:column="7">pCur<pos:position pos:line="6036" pos:column="11"/></name></expr> )<pos:position pos:line="6036" pos:column="13"/></condition><then><block pos:line="6036" pos:column="13">{
    <expr_stmt><expr><name><name pos:line="6037" pos:column="5">pCur<pos:position pos:line="6037" pos:column="9"/></name><operator pos:line="6037" pos:column="9">-&gt;<pos:position pos:line="6037" pos:column="14"/></operator><name pos:line="6037" pos:column="11">uc<pos:position pos:line="6037" pos:column="13"/></name><operator pos:line="6037" pos:column="13">.<pos:position pos:line="6037" pos:column="14"/></operator><name pos:line="6037" pos:column="14">pVCur<pos:position pos:line="6037" pos:column="19"/></name></name> <operator pos:line="6037" pos:column="20">=<pos:position pos:line="6037" pos:column="21"/></operator> <name pos:line="6037" pos:column="22">pVCur<pos:position pos:line="6037" pos:column="27"/></name></expr>;<pos:position pos:line="6037" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6038" pos:column="5">pVtab<pos:position pos:line="6038" pos:column="10"/></name><operator pos:line="6038" pos:column="10">-&gt;<pos:position pos:line="6038" pos:column="15"/></operator><name pos:line="6038" pos:column="12">nRef<pos:position pos:line="6038" pos:column="16"/></name></name><operator pos:line="6038" pos:column="16">++<pos:position pos:line="6038" pos:column="18"/></operator></expr>;<pos:position pos:line="6038" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="6039" pos:column="4"/></block></then><else pos:line="6039" pos:column="4">else<block pos:line="6039" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="6040" pos:column="5">assert<pos:position pos:line="6040" pos:column="11"/></name><argument_list pos:line="6040" pos:column="11">( <argument><expr><name><name pos:line="6040" pos:column="13">db<pos:position pos:line="6040" pos:column="15"/></name><operator pos:line="6040" pos:column="15">-&gt;<pos:position pos:line="6040" pos:column="20"/></operator><name pos:line="6040" pos:column="17">mallocFailed<pos:position pos:line="6040" pos:column="29"/></name></name></expr></argument> )<pos:position pos:line="6040" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6040" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="6041" pos:column="5">pModule<pos:position pos:line="6041" pos:column="12"/></name><operator pos:line="6041" pos:column="12">-&gt;<pos:position pos:line="6041" pos:column="17"/></operator><name pos:line="6041" pos:column="14">xClose<pos:position pos:line="6041" pos:column="20"/></name></name><argument_list pos:line="6041" pos:column="20">(<argument><expr><name pos:line="6041" pos:column="21">pVCur<pos:position pos:line="6041" pos:column="26"/></name></expr></argument>)<pos:position pos:line="6041" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6041" pos:column="28"/></expr_stmt>
    <goto pos:line="6042" pos:column="5">goto <name pos:line="6042" pos:column="10">no_mem<pos:position pos:line="6042" pos:column="16"/></name>;<pos:position pos:line="6042" pos:column="17"/></goto>
  }<pos:position pos:line="6043" pos:column="4"/></block></else></if>
  <break pos:line="6044" pos:column="3">break;<pos:position pos:line="6044" pos:column="9"/></break>
}<pos:position pos:line="6045" pos:column="2"/></block>
<cpp:endif pos:line="6046" pos:column="1">#<cpp:directive pos:line="6046" pos:column="2">endif<pos:position pos:line="6046" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6046" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="6048" pos:column="1">#<cpp:directive pos:line="6048" pos:column="2">ifndef<pos:position pos:line="6048" pos:column="8"/></cpp:directive> <name pos:line="6048" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="6048" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="6049" pos:column="1">/* Opcode: VFilter P1 P2 P3 P4 *
** Synopsis: iplan=r[P3] zplan='P4'
**
** P1 is a cursor opened using VOpen.  P2 is an address to jump to if
** the filtered result set is empty.
**
** P4 is either NULL or a string that was generated by the xBestIndex
** method of the module.  The interpretation of the P4 string is left
** to the module implementation.
**
** This opcode invokes the xFilter method on the virtual table specified
** by P1.  The integer query plan parameter to xFilter is stored in register
** P3. Register P3+1 stores the argc parameter to be passed to the
** xFilter method. Registers P3+2..P3+1+argc are the argc
** additional parameters which are passed to
** xFilter as argv. Register P3+2 becomes argv[0] when passed to xFilter.
**
** A jump is made to P2 if the result set after filtering would be empty.
*/</comment>
<case pos:line="6068" pos:column="1">case <expr><name pos:line="6068" pos:column="6">OP_VFilter<pos:position pos:line="6068" pos:column="16"/></name></expr>:<pos:position pos:line="6068" pos:column="17"/></case> <block pos:line="6068" pos:column="18">{   <comment type="block" pos:line="6068" pos:column="22">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="6069" pos:column="3">int<pos:position pos:line="6069" pos:column="6"/></name></type> <name pos:line="6069" pos:column="7">nArg<pos:position pos:line="6069" pos:column="11"/></name></decl>;<pos:position pos:line="6069" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6070" pos:column="3">int<pos:position pos:line="6070" pos:column="6"/></name></type> <name pos:line="6070" pos:column="7">iQuery<pos:position pos:line="6070" pos:column="13"/></name></decl>;<pos:position pos:line="6070" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6071" pos:column="3">const<pos:position pos:line="6071" pos:column="8"/></specifier> <name pos:line="6071" pos:column="9">sqlite3_module<pos:position pos:line="6071" pos:column="23"/></name> <modifier pos:line="6071" pos:column="24">*<pos:position pos:line="6071" pos:column="25"/></modifier></type><name pos:line="6071" pos:column="25">pModule<pos:position pos:line="6071" pos:column="32"/></name></decl>;<pos:position pos:line="6071" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6072" pos:column="3">Mem<pos:position pos:line="6072" pos:column="6"/></name> <modifier pos:line="6072" pos:column="7">*<pos:position pos:line="6072" pos:column="8"/></modifier></type><name pos:line="6072" pos:column="8">pQuery<pos:position pos:line="6072" pos:column="14"/></name></decl>;<pos:position pos:line="6072" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6073" pos:column="3">Mem<pos:position pos:line="6073" pos:column="6"/></name> <modifier pos:line="6073" pos:column="7">*<pos:position pos:line="6073" pos:column="8"/></modifier></type><name pos:line="6073" pos:column="8">pArgc<pos:position pos:line="6073" pos:column="13"/></name></decl>;<pos:position pos:line="6073" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6074" pos:column="3">sqlite3_vtab_cursor<pos:position pos:line="6074" pos:column="22"/></name> <modifier pos:line="6074" pos:column="23">*<pos:position pos:line="6074" pos:column="24"/></modifier></type><name pos:line="6074" pos:column="24">pVCur<pos:position pos:line="6074" pos:column="29"/></name></decl>;<pos:position pos:line="6074" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6075" pos:column="3">sqlite3_vtab<pos:position pos:line="6075" pos:column="15"/></name> <modifier pos:line="6075" pos:column="16">*<pos:position pos:line="6075" pos:column="17"/></modifier></type><name pos:line="6075" pos:column="17">pVtab<pos:position pos:line="6075" pos:column="22"/></name></decl>;<pos:position pos:line="6075" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6076" pos:column="3">VdbeCursor<pos:position pos:line="6076" pos:column="13"/></name> <modifier pos:line="6076" pos:column="14">*<pos:position pos:line="6076" pos:column="15"/></modifier></type><name pos:line="6076" pos:column="15">pCur<pos:position pos:line="6076" pos:column="19"/></name></decl>;<pos:position pos:line="6076" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6077" pos:column="3">int<pos:position pos:line="6077" pos:column="6"/></name></type> <name pos:line="6077" pos:column="7">res<pos:position pos:line="6077" pos:column="10"/></name></decl>;<pos:position pos:line="6077" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6078" pos:column="3">int<pos:position pos:line="6078" pos:column="6"/></name></type> <name pos:line="6078" pos:column="7">i<pos:position pos:line="6078" pos:column="8"/></name></decl>;<pos:position pos:line="6078" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6079" pos:column="3">Mem<pos:position pos:line="6079" pos:column="6"/></name> <modifier pos:line="6079" pos:column="7">*<pos:position pos:line="6079" pos:column="8"/></modifier><modifier pos:line="6079" pos:column="8">*<pos:position pos:line="6079" pos:column="9"/></modifier></type><name pos:line="6079" pos:column="9">apArg<pos:position pos:line="6079" pos:column="14"/></name></decl>;<pos:position pos:line="6079" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6081" pos:column="3">pQuery<pos:position pos:line="6081" pos:column="9"/></name> <operator pos:line="6081" pos:column="10">=<pos:position pos:line="6081" pos:column="11"/></operator> <operator pos:line="6081" pos:column="12">&amp;<pos:position pos:line="6081" pos:column="17"/></operator><name><name pos:line="6081" pos:column="13">aMem<pos:position pos:line="6081" pos:column="17"/></name><index pos:line="6081" pos:column="17">[<expr><name><name pos:line="6081" pos:column="18">pOp<pos:position pos:line="6081" pos:column="21"/></name><operator pos:line="6081" pos:column="21">-&gt;<pos:position pos:line="6081" pos:column="26"/></operator><name pos:line="6081" pos:column="23">p3<pos:position pos:line="6081" pos:column="25"/></name></name></expr>]<pos:position pos:line="6081" pos:column="26"/></index></name></expr>;<pos:position pos:line="6081" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6082" pos:column="3">pArgc<pos:position pos:line="6082" pos:column="8"/></name> <operator pos:line="6082" pos:column="9">=<pos:position pos:line="6082" pos:column="10"/></operator> <operator pos:line="6082" pos:column="11">&amp;<pos:position pos:line="6082" pos:column="16"/></operator><name><name pos:line="6082" pos:column="12">pQuery<pos:position pos:line="6082" pos:column="18"/></name><index pos:line="6082" pos:column="18">[<expr><literal type="number" pos:line="6082" pos:column="19">1<pos:position pos:line="6082" pos:column="20"/></literal></expr>]<pos:position pos:line="6082" pos:column="21"/></index></name></expr>;<pos:position pos:line="6082" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6083" pos:column="3">pCur<pos:position pos:line="6083" pos:column="7"/></name> <operator pos:line="6083" pos:column="8">=<pos:position pos:line="6083" pos:column="9"/></operator> <name><name pos:line="6083" pos:column="10">p<pos:position pos:line="6083" pos:column="11"/></name><operator pos:line="6083" pos:column="11">-&gt;<pos:position pos:line="6083" pos:column="16"/></operator><name pos:line="6083" pos:column="13">apCsr<pos:position pos:line="6083" pos:column="18"/></name><index pos:line="6083" pos:column="18">[<expr><name><name pos:line="6083" pos:column="19">pOp<pos:position pos:line="6083" pos:column="22"/></name><operator pos:line="6083" pos:column="22">-&gt;<pos:position pos:line="6083" pos:column="27"/></operator><name pos:line="6083" pos:column="24">p1<pos:position pos:line="6083" pos:column="26"/></name></name></expr>]<pos:position pos:line="6083" pos:column="27"/></index></name></expr>;<pos:position pos:line="6083" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6084" pos:column="3">assert<pos:position pos:line="6084" pos:column="9"/></name><argument_list pos:line="6084" pos:column="9">( <argument><expr><call><name pos:line="6084" pos:column="11">memIsValid<pos:position pos:line="6084" pos:column="21"/></name><argument_list pos:line="6084" pos:column="21">(<argument><expr><name pos:line="6084" pos:column="22">pQuery<pos:position pos:line="6084" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6084" pos:column="29"/></argument_list></call></expr></argument> )<pos:position pos:line="6084" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6084" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6085" pos:column="3">REGISTER_TRACE<pos:position pos:line="6085" pos:column="17"/></name><argument_list pos:line="6085" pos:column="17">(<argument><expr><name><name pos:line="6085" pos:column="18">pOp<pos:position pos:line="6085" pos:column="21"/></name><operator pos:line="6085" pos:column="21">-&gt;<pos:position pos:line="6085" pos:column="26"/></operator><name pos:line="6085" pos:column="23">p3<pos:position pos:line="6085" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="6085" pos:column="27">pQuery<pos:position pos:line="6085" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6085" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6085" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6086" pos:column="3">assert<pos:position pos:line="6086" pos:column="9"/></name><argument_list pos:line="6086" pos:column="9">( <argument><expr><name><name pos:line="6086" pos:column="11">pCur<pos:position pos:line="6086" pos:column="15"/></name><operator pos:line="6086" pos:column="15">-&gt;<pos:position pos:line="6086" pos:column="20"/></operator><name pos:line="6086" pos:column="17">eCurType<pos:position pos:line="6086" pos:column="25"/></name></name><operator pos:line="6086" pos:column="25">==<pos:position pos:line="6086" pos:column="27"/></operator><name pos:line="6086" pos:column="27">CURTYPE_VTAB<pos:position pos:line="6086" pos:column="39"/></name></expr></argument> )<pos:position pos:line="6086" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6086" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6087" pos:column="3">pVCur<pos:position pos:line="6087" pos:column="8"/></name> <operator pos:line="6087" pos:column="9">=<pos:position pos:line="6087" pos:column="10"/></operator> <name><name pos:line="6087" pos:column="11">pCur<pos:position pos:line="6087" pos:column="15"/></name><operator pos:line="6087" pos:column="15">-&gt;<pos:position pos:line="6087" pos:column="20"/></operator><name pos:line="6087" pos:column="17">uc<pos:position pos:line="6087" pos:column="19"/></name><operator pos:line="6087" pos:column="19">.<pos:position pos:line="6087" pos:column="20"/></operator><name pos:line="6087" pos:column="20">pVCur<pos:position pos:line="6087" pos:column="25"/></name></name></expr>;<pos:position pos:line="6087" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6088" pos:column="3">pVtab<pos:position pos:line="6088" pos:column="8"/></name> <operator pos:line="6088" pos:column="9">=<pos:position pos:line="6088" pos:column="10"/></operator> <name><name pos:line="6088" pos:column="11">pVCur<pos:position pos:line="6088" pos:column="16"/></name><operator pos:line="6088" pos:column="16">-&gt;<pos:position pos:line="6088" pos:column="21"/></operator><name pos:line="6088" pos:column="18">pVtab<pos:position pos:line="6088" pos:column="23"/></name></name></expr>;<pos:position pos:line="6088" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6089" pos:column="3">pModule<pos:position pos:line="6089" pos:column="10"/></name> <operator pos:line="6089" pos:column="11">=<pos:position pos:line="6089" pos:column="12"/></operator> <name><name pos:line="6089" pos:column="13">pVtab<pos:position pos:line="6089" pos:column="18"/></name><operator pos:line="6089" pos:column="18">-&gt;<pos:position pos:line="6089" pos:column="23"/></operator><name pos:line="6089" pos:column="20">pModule<pos:position pos:line="6089" pos:column="27"/></name></name></expr>;<pos:position pos:line="6089" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="6091" pos:column="3">/* Grab the index number and argc parameters */</comment>
  <expr_stmt><expr><call><name pos:line="6092" pos:column="3">assert<pos:position pos:line="6092" pos:column="9"/></name><argument_list pos:line="6092" pos:column="9">( <argument><expr><operator pos:line="6092" pos:column="11">(<pos:position pos:line="6092" pos:column="12"/></operator><name><name pos:line="6092" pos:column="12">pQuery<pos:position pos:line="6092" pos:column="18"/></name><operator pos:line="6092" pos:column="18">-&gt;<pos:position pos:line="6092" pos:column="23"/></operator><name pos:line="6092" pos:column="20">flags<pos:position pos:line="6092" pos:column="25"/></name></name><operator pos:line="6092" pos:column="25">&amp;<pos:position pos:line="6092" pos:column="30"/></operator><name pos:line="6092" pos:column="26">MEM_Int<pos:position pos:line="6092" pos:column="33"/></name><operator pos:line="6092" pos:column="33">)<pos:position pos:line="6092" pos:column="34"/></operator><operator pos:line="6092" pos:column="34">!=<pos:position pos:line="6092" pos:column="36"/></operator><literal type="number" pos:line="6092" pos:column="36">0<pos:position pos:line="6092" pos:column="37"/></literal> <operator pos:line="6092" pos:column="38">&amp;&amp;<pos:position pos:line="6092" pos:column="48"/></operator> <name><name pos:line="6092" pos:column="41">pArgc<pos:position pos:line="6092" pos:column="46"/></name><operator pos:line="6092" pos:column="46">-&gt;<pos:position pos:line="6092" pos:column="51"/></operator><name pos:line="6092" pos:column="48">flags<pos:position pos:line="6092" pos:column="53"/></name></name><operator pos:line="6092" pos:column="53">==<pos:position pos:line="6092" pos:column="55"/></operator><name pos:line="6092" pos:column="55">MEM_Int<pos:position pos:line="6092" pos:column="62"/></name></expr></argument> )<pos:position pos:line="6092" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="6092" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6093" pos:column="3">nArg<pos:position pos:line="6093" pos:column="7"/></name> <operator pos:line="6093" pos:column="8">=<pos:position pos:line="6093" pos:column="9"/></operator> <operator pos:line="6093" pos:column="10">(<pos:position pos:line="6093" pos:column="11"/></operator><name pos:line="6093" pos:column="11">int<pos:position pos:line="6093" pos:column="14"/></name><operator pos:line="6093" pos:column="14">)<pos:position pos:line="6093" pos:column="15"/></operator><name><name pos:line="6093" pos:column="15">pArgc<pos:position pos:line="6093" pos:column="20"/></name><operator pos:line="6093" pos:column="20">-&gt;<pos:position pos:line="6093" pos:column="25"/></operator><name pos:line="6093" pos:column="22">u<pos:position pos:line="6093" pos:column="23"/></name><operator pos:line="6093" pos:column="23">.<pos:position pos:line="6093" pos:column="24"/></operator><name pos:line="6093" pos:column="24">i<pos:position pos:line="6093" pos:column="25"/></name></name></expr>;<pos:position pos:line="6093" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6094" pos:column="3">iQuery<pos:position pos:line="6094" pos:column="9"/></name> <operator pos:line="6094" pos:column="10">=<pos:position pos:line="6094" pos:column="11"/></operator> <operator pos:line="6094" pos:column="12">(<pos:position pos:line="6094" pos:column="13"/></operator><name pos:line="6094" pos:column="13">int<pos:position pos:line="6094" pos:column="16"/></name><operator pos:line="6094" pos:column="16">)<pos:position pos:line="6094" pos:column="17"/></operator><name><name pos:line="6094" pos:column="17">pQuery<pos:position pos:line="6094" pos:column="23"/></name><operator pos:line="6094" pos:column="23">-&gt;<pos:position pos:line="6094" pos:column="28"/></operator><name pos:line="6094" pos:column="25">u<pos:position pos:line="6094" pos:column="26"/></name><operator pos:line="6094" pos:column="26">.<pos:position pos:line="6094" pos:column="27"/></operator><name pos:line="6094" pos:column="27">i<pos:position pos:line="6094" pos:column="28"/></name></name></expr>;<pos:position pos:line="6094" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="6096" pos:column="3">/* Invoke the xFilter method */</comment>
  <expr_stmt><expr><name pos:line="6097" pos:column="3">res<pos:position pos:line="6097" pos:column="6"/></name> <operator pos:line="6097" pos:column="7">=<pos:position pos:line="6097" pos:column="8"/></operator> <literal type="number" pos:line="6097" pos:column="9">0<pos:position pos:line="6097" pos:column="10"/></literal></expr>;<pos:position pos:line="6097" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6098" pos:column="3">apArg<pos:position pos:line="6098" pos:column="8"/></name> <operator pos:line="6098" pos:column="9">=<pos:position pos:line="6098" pos:column="10"/></operator> <name><name pos:line="6098" pos:column="11">p<pos:position pos:line="6098" pos:column="12"/></name><operator pos:line="6098" pos:column="12">-&gt;<pos:position pos:line="6098" pos:column="17"/></operator><name pos:line="6098" pos:column="14">apArg<pos:position pos:line="6098" pos:column="19"/></name></name></expr>;<pos:position pos:line="6098" pos:column="20"/></expr_stmt>
  <for pos:line="6099" pos:column="3">for<control pos:line="6099" pos:column="6">(<init><expr><name pos:line="6099" pos:column="7">i<pos:position pos:line="6099" pos:column="8"/></name> <operator pos:line="6099" pos:column="9">=<pos:position pos:line="6099" pos:column="10"/></operator> <literal type="number" pos:line="6099" pos:column="11">0<pos:position pos:line="6099" pos:column="12"/></literal></expr>;<pos:position pos:line="6099" pos:column="13"/></init> <condition><expr><name pos:line="6099" pos:column="14">i<pos:position pos:line="6099" pos:column="15"/></name><operator pos:line="6099" pos:column="15">&lt;<pos:position pos:line="6099" pos:column="19"/></operator><name pos:line="6099" pos:column="16">nArg<pos:position pos:line="6099" pos:column="20"/></name></expr>;<pos:position pos:line="6099" pos:column="21"/></condition> <incr><expr><name pos:line="6099" pos:column="22">i<pos:position pos:line="6099" pos:column="23"/></name><operator pos:line="6099" pos:column="23">++<pos:position pos:line="6099" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="6099" pos:column="26"/></control><block pos:line="6099" pos:column="26">{
    <expr_stmt><expr><name><name pos:line="6100" pos:column="5">apArg<pos:position pos:line="6100" pos:column="10"/></name><index pos:line="6100" pos:column="10">[<expr><name pos:line="6100" pos:column="11">i<pos:position pos:line="6100" pos:column="12"/></name></expr>]<pos:position pos:line="6100" pos:column="13"/></index></name> <operator pos:line="6100" pos:column="14">=<pos:position pos:line="6100" pos:column="15"/></operator> <operator pos:line="6100" pos:column="16">&amp;<pos:position pos:line="6100" pos:column="21"/></operator><name><name pos:line="6100" pos:column="17">pArgc<pos:position pos:line="6100" pos:column="22"/></name><index pos:line="6100" pos:column="22">[<expr><name pos:line="6100" pos:column="23">i<pos:position pos:line="6100" pos:column="24"/></name><operator pos:line="6100" pos:column="24">+<pos:position pos:line="6100" pos:column="25"/></operator><literal type="number" pos:line="6100" pos:column="25">1<pos:position pos:line="6100" pos:column="26"/></literal></expr>]<pos:position pos:line="6100" pos:column="27"/></index></name></expr>;<pos:position pos:line="6100" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="6101" pos:column="4"/></block></for>
  <expr_stmt><expr><name pos:line="6102" pos:column="3">rc<pos:position pos:line="6102" pos:column="5"/></name> <operator pos:line="6102" pos:column="6">=<pos:position pos:line="6102" pos:column="7"/></operator> <call><name><name pos:line="6102" pos:column="8">pModule<pos:position pos:line="6102" pos:column="15"/></name><operator pos:line="6102" pos:column="15">-&gt;<pos:position pos:line="6102" pos:column="20"/></operator><name pos:line="6102" pos:column="17">xFilter<pos:position pos:line="6102" pos:column="24"/></name></name><argument_list pos:line="6102" pos:column="24">(<argument><expr><name pos:line="6102" pos:column="25">pVCur<pos:position pos:line="6102" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="6102" pos:column="32">iQuery<pos:position pos:line="6102" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="6102" pos:column="40">pOp<pos:position pos:line="6102" pos:column="43"/></name><operator pos:line="6102" pos:column="43">-&gt;<pos:position pos:line="6102" pos:column="48"/></operator><name pos:line="6102" pos:column="45">p4<pos:position pos:line="6102" pos:column="47"/></name><operator pos:line="6102" pos:column="47">.<pos:position pos:line="6102" pos:column="48"/></operator><name pos:line="6102" pos:column="48">z<pos:position pos:line="6102" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="6102" pos:column="51">nArg<pos:position pos:line="6102" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="6102" pos:column="57">apArg<pos:position pos:line="6102" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6102" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="6102" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6103" pos:column="3">sqlite3VtabImportErrmsg<pos:position pos:line="6103" pos:column="26"/></name><argument_list pos:line="6103" pos:column="26">(<argument><expr><name pos:line="6103" pos:column="27">p<pos:position pos:line="6103" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="6103" pos:column="30">pVtab<pos:position pos:line="6103" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6103" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6103" pos:column="37"/></expr_stmt>
  <if pos:line="6104" pos:column="3">if<condition pos:line="6104" pos:column="5">( <expr><name pos:line="6104" pos:column="7">rc<pos:position pos:line="6104" pos:column="9"/></name></expr> )<pos:position pos:line="6104" pos:column="11"/></condition><then pos:line="6104" pos:column="11"> <block type="pseudo"><goto pos:line="6104" pos:column="12">goto <name pos:line="6104" pos:column="17">abort_due_to_error<pos:position pos:line="6104" pos:column="35"/></name>;<pos:position pos:line="6104" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><name pos:line="6105" pos:column="3">res<pos:position pos:line="6105" pos:column="6"/></name> <operator pos:line="6105" pos:column="7">=<pos:position pos:line="6105" pos:column="8"/></operator> <call><name><name pos:line="6105" pos:column="9">pModule<pos:position pos:line="6105" pos:column="16"/></name><operator pos:line="6105" pos:column="16">-&gt;<pos:position pos:line="6105" pos:column="21"/></operator><name pos:line="6105" pos:column="18">xEof<pos:position pos:line="6105" pos:column="22"/></name></name><argument_list pos:line="6105" pos:column="22">(<argument><expr><name pos:line="6105" pos:column="23">pVCur<pos:position pos:line="6105" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6105" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6105" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6106" pos:column="3">pCur<pos:position pos:line="6106" pos:column="7"/></name><operator pos:line="6106" pos:column="7">-&gt;<pos:position pos:line="6106" pos:column="12"/></operator><name pos:line="6106" pos:column="9">nullRow<pos:position pos:line="6106" pos:column="16"/></name></name> <operator pos:line="6106" pos:column="17">=<pos:position pos:line="6106" pos:column="18"/></operator> <literal type="number" pos:line="6106" pos:column="19">0<pos:position pos:line="6106" pos:column="20"/></literal></expr>;<pos:position pos:line="6106" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6107" pos:column="3">VdbeBranchTaken<pos:position pos:line="6107" pos:column="18"/></name><argument_list pos:line="6107" pos:column="18">(<argument><expr><name pos:line="6107" pos:column="19">res<pos:position pos:line="6107" pos:column="22"/></name><operator pos:line="6107" pos:column="22">!=<pos:position pos:line="6107" pos:column="24"/></operator><literal type="number" pos:line="6107" pos:column="24">0<pos:position pos:line="6107" pos:column="25"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="6107" pos:column="26">2<pos:position pos:line="6107" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="6107" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6107" pos:column="29"/></expr_stmt>
  <if pos:line="6108" pos:column="3">if<condition pos:line="6108" pos:column="5">( <expr><name pos:line="6108" pos:column="7">res<pos:position pos:line="6108" pos:column="10"/></name></expr> )<pos:position pos:line="6108" pos:column="12"/></condition><then pos:line="6108" pos:column="12"> <block type="pseudo"><goto pos:line="6108" pos:column="13">goto <name pos:line="6108" pos:column="18">jump_to_p2<pos:position pos:line="6108" pos:column="28"/></name>;<pos:position pos:line="6108" pos:column="29"/></goto></block></then></if>
  <break pos:line="6109" pos:column="3">break;<pos:position pos:line="6109" pos:column="9"/></break>
}<pos:position pos:line="6110" pos:column="2"/></block>
<cpp:endif pos:line="6111" pos:column="1">#<cpp:directive pos:line="6111" pos:column="2">endif<pos:position pos:line="6111" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6111" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="6113" pos:column="1">#<cpp:directive pos:line="6113" pos:column="2">ifndef<pos:position pos:line="6113" pos:column="8"/></cpp:directive> <name pos:line="6113" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="6113" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="6114" pos:column="1">/* Opcode: VColumn P1 P2 P3 * *
** Synopsis: r[P3]=vcolumn(P2)
**
** Store the value of the P2-th column of
** the row of the virtual-table that the 
** P1 cursor is pointing to into register P3.
*/</comment>
<case pos:line="6121" pos:column="1">case <expr><name pos:line="6121" pos:column="6">OP_VColumn<pos:position pos:line="6121" pos:column="16"/></name></expr>:<pos:position pos:line="6121" pos:column="17"/></case> <block pos:line="6121" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="6122" pos:column="3">sqlite3_vtab<pos:position pos:line="6122" pos:column="15"/></name> <modifier pos:line="6122" pos:column="16">*<pos:position pos:line="6122" pos:column="17"/></modifier></type><name pos:line="6122" pos:column="17">pVtab<pos:position pos:line="6122" pos:column="22"/></name></decl>;<pos:position pos:line="6122" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6123" pos:column="3">const<pos:position pos:line="6123" pos:column="8"/></specifier> <name pos:line="6123" pos:column="9">sqlite3_module<pos:position pos:line="6123" pos:column="23"/></name> <modifier pos:line="6123" pos:column="24">*<pos:position pos:line="6123" pos:column="25"/></modifier></type><name pos:line="6123" pos:column="25">pModule<pos:position pos:line="6123" pos:column="32"/></name></decl>;<pos:position pos:line="6123" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6124" pos:column="3">Mem<pos:position pos:line="6124" pos:column="6"/></name> <modifier pos:line="6124" pos:column="7">*<pos:position pos:line="6124" pos:column="8"/></modifier></type><name pos:line="6124" pos:column="8">pDest<pos:position pos:line="6124" pos:column="13"/></name></decl>;<pos:position pos:line="6124" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6125" pos:column="3">sqlite3_context<pos:position pos:line="6125" pos:column="18"/></name></type> <name pos:line="6125" pos:column="19">sContext<pos:position pos:line="6125" pos:column="27"/></name></decl>;<pos:position pos:line="6125" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6127" pos:column="3">VdbeCursor<pos:position pos:line="6127" pos:column="13"/></name> <modifier pos:line="6127" pos:column="14">*<pos:position pos:line="6127" pos:column="15"/></modifier></type><name pos:line="6127" pos:column="15">pCur<pos:position pos:line="6127" pos:column="19"/></name> <init pos:line="6127" pos:column="20">= <expr><name><name pos:line="6127" pos:column="22">p<pos:position pos:line="6127" pos:column="23"/></name><operator pos:line="6127" pos:column="23">-&gt;<pos:position pos:line="6127" pos:column="28"/></operator><name pos:line="6127" pos:column="25">apCsr<pos:position pos:line="6127" pos:column="30"/></name><index pos:line="6127" pos:column="30">[<expr><name><name pos:line="6127" pos:column="31">pOp<pos:position pos:line="6127" pos:column="34"/></name><operator pos:line="6127" pos:column="34">-&gt;<pos:position pos:line="6127" pos:column="39"/></operator><name pos:line="6127" pos:column="36">p1<pos:position pos:line="6127" pos:column="38"/></name></name></expr>]<pos:position pos:line="6127" pos:column="39"/></index></name></expr></init></decl>;<pos:position pos:line="6127" pos:column="40"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="6128" pos:column="3">assert<pos:position pos:line="6128" pos:column="9"/></name><argument_list pos:line="6128" pos:column="9">( <argument><expr><name><name pos:line="6128" pos:column="11">pCur<pos:position pos:line="6128" pos:column="15"/></name><operator pos:line="6128" pos:column="15">-&gt;<pos:position pos:line="6128" pos:column="20"/></operator><name pos:line="6128" pos:column="17">eCurType<pos:position pos:line="6128" pos:column="25"/></name></name><operator pos:line="6128" pos:column="25">==<pos:position pos:line="6128" pos:column="27"/></operator><name pos:line="6128" pos:column="27">CURTYPE_VTAB<pos:position pos:line="6128" pos:column="39"/></name></expr></argument> )<pos:position pos:line="6128" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6128" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6129" pos:column="3">assert<pos:position pos:line="6129" pos:column="9"/></name><argument_list pos:line="6129" pos:column="9">( <argument><expr><name><name pos:line="6129" pos:column="11">pOp<pos:position pos:line="6129" pos:column="14"/></name><operator pos:line="6129" pos:column="14">-&gt;<pos:position pos:line="6129" pos:column="19"/></operator><name pos:line="6129" pos:column="16">p3<pos:position pos:line="6129" pos:column="18"/></name></name><operator pos:line="6129" pos:column="18">&gt;<pos:position pos:line="6129" pos:column="22"/></operator><literal type="number" pos:line="6129" pos:column="19">0<pos:position pos:line="6129" pos:column="20"/></literal> <operator pos:line="6129" pos:column="21">&amp;&amp;<pos:position pos:line="6129" pos:column="31"/></operator> <name><name pos:line="6129" pos:column="24">pOp<pos:position pos:line="6129" pos:column="27"/></name><operator pos:line="6129" pos:column="27">-&gt;<pos:position pos:line="6129" pos:column="32"/></operator><name pos:line="6129" pos:column="29">p3<pos:position pos:line="6129" pos:column="31"/></name></name><operator pos:line="6129" pos:column="31">&lt;=<pos:position pos:line="6129" pos:column="36"/></operator><operator pos:line="6129" pos:column="33">(<pos:position pos:line="6129" pos:column="34"/></operator><name><name pos:line="6129" pos:column="34">p<pos:position pos:line="6129" pos:column="35"/></name><operator pos:line="6129" pos:column="35">-&gt;<pos:position pos:line="6129" pos:column="40"/></operator><name pos:line="6129" pos:column="37">nMem<pos:position pos:line="6129" pos:column="41"/></name></name><operator pos:line="6129" pos:column="41">+<pos:position pos:line="6129" pos:column="42"/></operator><literal type="number" pos:line="6129" pos:column="42">1<pos:position pos:line="6129" pos:column="43"/></literal> <operator pos:line="6129" pos:column="44">-<pos:position pos:line="6129" pos:column="45"/></operator> <name><name pos:line="6129" pos:column="46">p<pos:position pos:line="6129" pos:column="47"/></name><operator pos:line="6129" pos:column="47">-&gt;<pos:position pos:line="6129" pos:column="52"/></operator><name pos:line="6129" pos:column="49">nCursor<pos:position pos:line="6129" pos:column="56"/></name></name><operator pos:line="6129" pos:column="56">)<pos:position pos:line="6129" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="6129" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="6129" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6130" pos:column="3">pDest<pos:position pos:line="6130" pos:column="8"/></name> <operator pos:line="6130" pos:column="9">=<pos:position pos:line="6130" pos:column="10"/></operator> <operator pos:line="6130" pos:column="11">&amp;<pos:position pos:line="6130" pos:column="16"/></operator><name><name pos:line="6130" pos:column="12">aMem<pos:position pos:line="6130" pos:column="16"/></name><index pos:line="6130" pos:column="16">[<expr><name><name pos:line="6130" pos:column="17">pOp<pos:position pos:line="6130" pos:column="20"/></name><operator pos:line="6130" pos:column="20">-&gt;<pos:position pos:line="6130" pos:column="25"/></operator><name pos:line="6130" pos:column="22">p3<pos:position pos:line="6130" pos:column="24"/></name></name></expr>]<pos:position pos:line="6130" pos:column="25"/></index></name></expr>;<pos:position pos:line="6130" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6131" pos:column="3">memAboutToChange<pos:position pos:line="6131" pos:column="19"/></name><argument_list pos:line="6131" pos:column="19">(<argument><expr><name pos:line="6131" pos:column="20">p<pos:position pos:line="6131" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="6131" pos:column="23">pDest<pos:position pos:line="6131" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6131" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6131" pos:column="30"/></expr_stmt>
  <if pos:line="6132" pos:column="3">if<condition pos:line="6132" pos:column="5">( <expr><name><name pos:line="6132" pos:column="7">pCur<pos:position pos:line="6132" pos:column="11"/></name><operator pos:line="6132" pos:column="11">-&gt;<pos:position pos:line="6132" pos:column="16"/></operator><name pos:line="6132" pos:column="13">nullRow<pos:position pos:line="6132" pos:column="20"/></name></name></expr> )<pos:position pos:line="6132" pos:column="22"/></condition><then><block pos:line="6132" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="6133" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="6133" pos:column="26"/></name><argument_list pos:line="6133" pos:column="26">(<argument><expr><name pos:line="6133" pos:column="27">pDest<pos:position pos:line="6133" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6133" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6133" pos:column="34"/></expr_stmt>
    <break pos:line="6134" pos:column="5">break;<pos:position pos:line="6134" pos:column="11"/></break>
  }<pos:position pos:line="6135" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="6136" pos:column="3">pVtab<pos:position pos:line="6136" pos:column="8"/></name> <operator pos:line="6136" pos:column="9">=<pos:position pos:line="6136" pos:column="10"/></operator> <name><name pos:line="6136" pos:column="11">pCur<pos:position pos:line="6136" pos:column="15"/></name><operator pos:line="6136" pos:column="15">-&gt;<pos:position pos:line="6136" pos:column="20"/></operator><name pos:line="6136" pos:column="17">uc<pos:position pos:line="6136" pos:column="19"/></name><operator pos:line="6136" pos:column="19">.<pos:position pos:line="6136" pos:column="20"/></operator><name pos:line="6136" pos:column="20">pVCur<pos:position pos:line="6136" pos:column="25"/></name><operator pos:line="6136" pos:column="25">-&gt;<pos:position pos:line="6136" pos:column="30"/></operator><name pos:line="6136" pos:column="27">pVtab<pos:position pos:line="6136" pos:column="32"/></name></name></expr>;<pos:position pos:line="6136" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6137" pos:column="3">pModule<pos:position pos:line="6137" pos:column="10"/></name> <operator pos:line="6137" pos:column="11">=<pos:position pos:line="6137" pos:column="12"/></operator> <name><name pos:line="6137" pos:column="13">pVtab<pos:position pos:line="6137" pos:column="18"/></name><operator pos:line="6137" pos:column="18">-&gt;<pos:position pos:line="6137" pos:column="23"/></operator><name pos:line="6137" pos:column="20">pModule<pos:position pos:line="6137" pos:column="27"/></name></name></expr>;<pos:position pos:line="6137" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6138" pos:column="3">assert<pos:position pos:line="6138" pos:column="9"/></name><argument_list pos:line="6138" pos:column="9">( <argument><expr><name><name pos:line="6138" pos:column="11">pModule<pos:position pos:line="6138" pos:column="18"/></name><operator pos:line="6138" pos:column="18">-&gt;<pos:position pos:line="6138" pos:column="23"/></operator><name pos:line="6138" pos:column="20">xColumn<pos:position pos:line="6138" pos:column="27"/></name></name></expr></argument> )<pos:position pos:line="6138" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6138" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6139" pos:column="3">memset<pos:position pos:line="6139" pos:column="9"/></name><argument_list pos:line="6139" pos:column="9">(<argument><expr><operator pos:line="6139" pos:column="10">&amp;<pos:position pos:line="6139" pos:column="15"/></operator><name pos:line="6139" pos:column="11">sContext<pos:position pos:line="6139" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6139" pos:column="21">0<pos:position pos:line="6139" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="6139" pos:column="24">sizeof<argument_list pos:line="6139" pos:column="30">(<argument><expr><name pos:line="6139" pos:column="31">sContext<pos:position pos:line="6139" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6139" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6139" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6139" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6140" pos:column="3">sContext<pos:position pos:line="6140" pos:column="11"/></name><operator pos:line="6140" pos:column="11">.<pos:position pos:line="6140" pos:column="12"/></operator><name pos:line="6140" pos:column="12">pOut<pos:position pos:line="6140" pos:column="16"/></name></name> <operator pos:line="6140" pos:column="17">=<pos:position pos:line="6140" pos:column="18"/></operator> <name pos:line="6140" pos:column="19">pDest<pos:position pos:line="6140" pos:column="24"/></name></expr>;<pos:position pos:line="6140" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6141" pos:column="3">MemSetTypeFlag<pos:position pos:line="6141" pos:column="17"/></name><argument_list pos:line="6141" pos:column="17">(<argument><expr><name pos:line="6141" pos:column="18">pDest<pos:position pos:line="6141" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="6141" pos:column="25">MEM_Null<pos:position pos:line="6141" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6141" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6141" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6142" pos:column="3">rc<pos:position pos:line="6142" pos:column="5"/></name> <operator pos:line="6142" pos:column="6">=<pos:position pos:line="6142" pos:column="7"/></operator> <call><name><name pos:line="6142" pos:column="8">pModule<pos:position pos:line="6142" pos:column="15"/></name><operator pos:line="6142" pos:column="15">-&gt;<pos:position pos:line="6142" pos:column="20"/></operator><name pos:line="6142" pos:column="17">xColumn<pos:position pos:line="6142" pos:column="24"/></name></name><argument_list pos:line="6142" pos:column="24">(<argument><expr><name><name pos:line="6142" pos:column="25">pCur<pos:position pos:line="6142" pos:column="29"/></name><operator pos:line="6142" pos:column="29">-&gt;<pos:position pos:line="6142" pos:column="34"/></operator><name pos:line="6142" pos:column="31">uc<pos:position pos:line="6142" pos:column="33"/></name><operator pos:line="6142" pos:column="33">.<pos:position pos:line="6142" pos:column="34"/></operator><name pos:line="6142" pos:column="34">pVCur<pos:position pos:line="6142" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="6142" pos:column="41">&amp;<pos:position pos:line="6142" pos:column="46"/></operator><name pos:line="6142" pos:column="42">sContext<pos:position pos:line="6142" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="6142" pos:column="52">pOp<pos:position pos:line="6142" pos:column="55"/></name><operator pos:line="6142" pos:column="55">-&gt;<pos:position pos:line="6142" pos:column="60"/></operator><name pos:line="6142" pos:column="57">p2<pos:position pos:line="6142" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="6142" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="6142" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6143" pos:column="3">sqlite3VtabImportErrmsg<pos:position pos:line="6143" pos:column="26"/></name><argument_list pos:line="6143" pos:column="26">(<argument><expr><name pos:line="6143" pos:column="27">p<pos:position pos:line="6143" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="6143" pos:column="30">pVtab<pos:position pos:line="6143" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6143" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6143" pos:column="37"/></expr_stmt>
  <if pos:line="6144" pos:column="3">if<condition pos:line="6144" pos:column="5">( <expr><name><name pos:line="6144" pos:column="7">sContext<pos:position pos:line="6144" pos:column="15"/></name><operator pos:line="6144" pos:column="15">.<pos:position pos:line="6144" pos:column="16"/></operator><name pos:line="6144" pos:column="16">isError<pos:position pos:line="6144" pos:column="23"/></name></name></expr> )<pos:position pos:line="6144" pos:column="25"/></condition><then><block pos:line="6144" pos:column="25">{
    <expr_stmt><expr><name pos:line="6145" pos:column="5">rc<pos:position pos:line="6145" pos:column="7"/></name> <operator pos:line="6145" pos:column="8">=<pos:position pos:line="6145" pos:column="9"/></operator> <name><name pos:line="6145" pos:column="10">sContext<pos:position pos:line="6145" pos:column="18"/></name><operator pos:line="6145" pos:column="18">.<pos:position pos:line="6145" pos:column="19"/></operator><name pos:line="6145" pos:column="19">isError<pos:position pos:line="6145" pos:column="26"/></name></name></expr>;<pos:position pos:line="6145" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="6146" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="6147" pos:column="3">sqlite3VdbeChangeEncoding<pos:position pos:line="6147" pos:column="28"/></name><argument_list pos:line="6147" pos:column="28">(<argument><expr><name pos:line="6147" pos:column="29">pDest<pos:position pos:line="6147" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="6147" pos:column="36">encoding<pos:position pos:line="6147" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6147" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6147" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6148" pos:column="3">REGISTER_TRACE<pos:position pos:line="6148" pos:column="17"/></name><argument_list pos:line="6148" pos:column="17">(<argument><expr><name><name pos:line="6148" pos:column="18">pOp<pos:position pos:line="6148" pos:column="21"/></name><operator pos:line="6148" pos:column="21">-&gt;<pos:position pos:line="6148" pos:column="26"/></operator><name pos:line="6148" pos:column="23">p3<pos:position pos:line="6148" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="6148" pos:column="27">pDest<pos:position pos:line="6148" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6148" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6148" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6149" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="6149" pos:column="22"/></name><argument_list pos:line="6149" pos:column="22">(<argument><expr><name pos:line="6149" pos:column="23">pDest<pos:position pos:line="6149" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6149" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6149" pos:column="30"/></expr_stmt>

  <if pos:line="6151" pos:column="3">if<condition pos:line="6151" pos:column="5">( <expr><call><name pos:line="6151" pos:column="7">sqlite3VdbeMemTooBig<pos:position pos:line="6151" pos:column="27"/></name><argument_list pos:line="6151" pos:column="27">(<argument><expr><name pos:line="6151" pos:column="28">pDest<pos:position pos:line="6151" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6151" pos:column="34"/></argument_list></call></expr> )<pos:position pos:line="6151" pos:column="36"/></condition><then><block pos:line="6151" pos:column="36">{
    <goto pos:line="6152" pos:column="5">goto <name pos:line="6152" pos:column="10">too_big<pos:position pos:line="6152" pos:column="17"/></name>;<pos:position pos:line="6152" pos:column="18"/></goto>
  }<pos:position pos:line="6153" pos:column="4"/></block></then></if>
  <if pos:line="6154" pos:column="3">if<condition pos:line="6154" pos:column="5">( <expr><name pos:line="6154" pos:column="7">rc<pos:position pos:line="6154" pos:column="9"/></name></expr> )<pos:position pos:line="6154" pos:column="11"/></condition><then pos:line="6154" pos:column="11"> <block type="pseudo"><goto pos:line="6154" pos:column="12">goto <name pos:line="6154" pos:column="17">abort_due_to_error<pos:position pos:line="6154" pos:column="35"/></name>;<pos:position pos:line="6154" pos:column="36"/></goto></block></then></if>
  <break pos:line="6155" pos:column="3">break;<pos:position pos:line="6155" pos:column="9"/></break>
}<pos:position pos:line="6156" pos:column="2"/></block>
<cpp:endif pos:line="6157" pos:column="1">#<cpp:directive pos:line="6157" pos:column="2">endif<pos:position pos:line="6157" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6157" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="6159" pos:column="1">#<cpp:directive pos:line="6159" pos:column="2">ifndef<pos:position pos:line="6159" pos:column="8"/></cpp:directive> <name pos:line="6159" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="6159" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="6160" pos:column="1">/* Opcode: VNext P1 P2 * * *
**
** Advance virtual table P1 to the next row in its result set and
** jump to instruction P2.  Or, if the virtual table has reached
** the end of its result set, then fall through to the next instruction.
*/</comment>
<case pos:line="6166" pos:column="1">case <expr><name pos:line="6166" pos:column="6">OP_VNext<pos:position pos:line="6166" pos:column="14"/></name></expr>:<pos:position pos:line="6166" pos:column="15"/></case> <block pos:line="6166" pos:column="16">{   <comment type="block" pos:line="6166" pos:column="20">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="6167" pos:column="3">sqlite3_vtab<pos:position pos:line="6167" pos:column="15"/></name> <modifier pos:line="6167" pos:column="16">*<pos:position pos:line="6167" pos:column="17"/></modifier></type><name pos:line="6167" pos:column="17">pVtab<pos:position pos:line="6167" pos:column="22"/></name></decl>;<pos:position pos:line="6167" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6168" pos:column="3">const<pos:position pos:line="6168" pos:column="8"/></specifier> <name pos:line="6168" pos:column="9">sqlite3_module<pos:position pos:line="6168" pos:column="23"/></name> <modifier pos:line="6168" pos:column="24">*<pos:position pos:line="6168" pos:column="25"/></modifier></type><name pos:line="6168" pos:column="25">pModule<pos:position pos:line="6168" pos:column="32"/></name></decl>;<pos:position pos:line="6168" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6169" pos:column="3">int<pos:position pos:line="6169" pos:column="6"/></name></type> <name pos:line="6169" pos:column="7">res<pos:position pos:line="6169" pos:column="10"/></name></decl>;<pos:position pos:line="6169" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6170" pos:column="3">VdbeCursor<pos:position pos:line="6170" pos:column="13"/></name> <modifier pos:line="6170" pos:column="14">*<pos:position pos:line="6170" pos:column="15"/></modifier></type><name pos:line="6170" pos:column="15">pCur<pos:position pos:line="6170" pos:column="19"/></name></decl>;<pos:position pos:line="6170" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6172" pos:column="3">res<pos:position pos:line="6172" pos:column="6"/></name> <operator pos:line="6172" pos:column="7">=<pos:position pos:line="6172" pos:column="8"/></operator> <literal type="number" pos:line="6172" pos:column="9">0<pos:position pos:line="6172" pos:column="10"/></literal></expr>;<pos:position pos:line="6172" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6173" pos:column="3">pCur<pos:position pos:line="6173" pos:column="7"/></name> <operator pos:line="6173" pos:column="8">=<pos:position pos:line="6173" pos:column="9"/></operator> <name><name pos:line="6173" pos:column="10">p<pos:position pos:line="6173" pos:column="11"/></name><operator pos:line="6173" pos:column="11">-&gt;<pos:position pos:line="6173" pos:column="16"/></operator><name pos:line="6173" pos:column="13">apCsr<pos:position pos:line="6173" pos:column="18"/></name><index pos:line="6173" pos:column="18">[<expr><name><name pos:line="6173" pos:column="19">pOp<pos:position pos:line="6173" pos:column="22"/></name><operator pos:line="6173" pos:column="22">-&gt;<pos:position pos:line="6173" pos:column="27"/></operator><name pos:line="6173" pos:column="24">p1<pos:position pos:line="6173" pos:column="26"/></name></name></expr>]<pos:position pos:line="6173" pos:column="27"/></index></name></expr>;<pos:position pos:line="6173" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6174" pos:column="3">assert<pos:position pos:line="6174" pos:column="9"/></name><argument_list pos:line="6174" pos:column="9">( <argument><expr><name><name pos:line="6174" pos:column="11">pCur<pos:position pos:line="6174" pos:column="15"/></name><operator pos:line="6174" pos:column="15">-&gt;<pos:position pos:line="6174" pos:column="20"/></operator><name pos:line="6174" pos:column="17">eCurType<pos:position pos:line="6174" pos:column="25"/></name></name><operator pos:line="6174" pos:column="25">==<pos:position pos:line="6174" pos:column="27"/></operator><name pos:line="6174" pos:column="27">CURTYPE_VTAB<pos:position pos:line="6174" pos:column="39"/></name></expr></argument> )<pos:position pos:line="6174" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6174" pos:column="42"/></expr_stmt>
  <if pos:line="6175" pos:column="3">if<condition pos:line="6175" pos:column="5">( <expr><name><name pos:line="6175" pos:column="7">pCur<pos:position pos:line="6175" pos:column="11"/></name><operator pos:line="6175" pos:column="11">-&gt;<pos:position pos:line="6175" pos:column="16"/></operator><name pos:line="6175" pos:column="13">nullRow<pos:position pos:line="6175" pos:column="20"/></name></name></expr> )<pos:position pos:line="6175" pos:column="22"/></condition><then><block pos:line="6175" pos:column="22">{
    <break pos:line="6176" pos:column="5">break;<pos:position pos:line="6176" pos:column="11"/></break>
  }<pos:position pos:line="6177" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="6178" pos:column="3">pVtab<pos:position pos:line="6178" pos:column="8"/></name> <operator pos:line="6178" pos:column="9">=<pos:position pos:line="6178" pos:column="10"/></operator> <name><name pos:line="6178" pos:column="11">pCur<pos:position pos:line="6178" pos:column="15"/></name><operator pos:line="6178" pos:column="15">-&gt;<pos:position pos:line="6178" pos:column="20"/></operator><name pos:line="6178" pos:column="17">uc<pos:position pos:line="6178" pos:column="19"/></name><operator pos:line="6178" pos:column="19">.<pos:position pos:line="6178" pos:column="20"/></operator><name pos:line="6178" pos:column="20">pVCur<pos:position pos:line="6178" pos:column="25"/></name><operator pos:line="6178" pos:column="25">-&gt;<pos:position pos:line="6178" pos:column="30"/></operator><name pos:line="6178" pos:column="27">pVtab<pos:position pos:line="6178" pos:column="32"/></name></name></expr>;<pos:position pos:line="6178" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6179" pos:column="3">pModule<pos:position pos:line="6179" pos:column="10"/></name> <operator pos:line="6179" pos:column="11">=<pos:position pos:line="6179" pos:column="12"/></operator> <name><name pos:line="6179" pos:column="13">pVtab<pos:position pos:line="6179" pos:column="18"/></name><operator pos:line="6179" pos:column="18">-&gt;<pos:position pos:line="6179" pos:column="23"/></operator><name pos:line="6179" pos:column="20">pModule<pos:position pos:line="6179" pos:column="27"/></name></name></expr>;<pos:position pos:line="6179" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6180" pos:column="3">assert<pos:position pos:line="6180" pos:column="9"/></name><argument_list pos:line="6180" pos:column="9">( <argument><expr><name><name pos:line="6180" pos:column="11">pModule<pos:position pos:line="6180" pos:column="18"/></name><operator pos:line="6180" pos:column="18">-&gt;<pos:position pos:line="6180" pos:column="23"/></operator><name pos:line="6180" pos:column="20">xNext<pos:position pos:line="6180" pos:column="25"/></name></name></expr></argument> )<pos:position pos:line="6180" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6180" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="6182" pos:column="3">/* Invoke the xNext() method of the module. There is no way for the
  ** underlying implementation to return an error if one occurs during
  ** xNext(). Instead, if an error occurs, true is returned (indicating that 
  ** data is available) and the error code returned when xColumn or
  ** some other method is next invoked on the save virtual table cursor.
  */</comment>
  <expr_stmt><expr><name pos:line="6188" pos:column="3">rc<pos:position pos:line="6188" pos:column="5"/></name> <operator pos:line="6188" pos:column="6">=<pos:position pos:line="6188" pos:column="7"/></operator> <call><name><name pos:line="6188" pos:column="8">pModule<pos:position pos:line="6188" pos:column="15"/></name><operator pos:line="6188" pos:column="15">-&gt;<pos:position pos:line="6188" pos:column="20"/></operator><name pos:line="6188" pos:column="17">xNext<pos:position pos:line="6188" pos:column="22"/></name></name><argument_list pos:line="6188" pos:column="22">(<argument><expr><name><name pos:line="6188" pos:column="23">pCur<pos:position pos:line="6188" pos:column="27"/></name><operator pos:line="6188" pos:column="27">-&gt;<pos:position pos:line="6188" pos:column="32"/></operator><name pos:line="6188" pos:column="29">uc<pos:position pos:line="6188" pos:column="31"/></name><operator pos:line="6188" pos:column="31">.<pos:position pos:line="6188" pos:column="32"/></operator><name pos:line="6188" pos:column="32">pVCur<pos:position pos:line="6188" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="6188" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6188" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6189" pos:column="3">sqlite3VtabImportErrmsg<pos:position pos:line="6189" pos:column="26"/></name><argument_list pos:line="6189" pos:column="26">(<argument><expr><name pos:line="6189" pos:column="27">p<pos:position pos:line="6189" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="6189" pos:column="30">pVtab<pos:position pos:line="6189" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6189" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6189" pos:column="37"/></expr_stmt>
  <if pos:line="6190" pos:column="3">if<condition pos:line="6190" pos:column="5">( <expr><name pos:line="6190" pos:column="7">rc<pos:position pos:line="6190" pos:column="9"/></name></expr> )<pos:position pos:line="6190" pos:column="11"/></condition><then pos:line="6190" pos:column="11"> <block type="pseudo"><goto pos:line="6190" pos:column="12">goto <name pos:line="6190" pos:column="17">abort_due_to_error<pos:position pos:line="6190" pos:column="35"/></name>;<pos:position pos:line="6190" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><name pos:line="6191" pos:column="3">res<pos:position pos:line="6191" pos:column="6"/></name> <operator pos:line="6191" pos:column="7">=<pos:position pos:line="6191" pos:column="8"/></operator> <call><name><name pos:line="6191" pos:column="9">pModule<pos:position pos:line="6191" pos:column="16"/></name><operator pos:line="6191" pos:column="16">-&gt;<pos:position pos:line="6191" pos:column="21"/></operator><name pos:line="6191" pos:column="18">xEof<pos:position pos:line="6191" pos:column="22"/></name></name><argument_list pos:line="6191" pos:column="22">(<argument><expr><name><name pos:line="6191" pos:column="23">pCur<pos:position pos:line="6191" pos:column="27"/></name><operator pos:line="6191" pos:column="27">-&gt;<pos:position pos:line="6191" pos:column="32"/></operator><name pos:line="6191" pos:column="29">uc<pos:position pos:line="6191" pos:column="31"/></name><operator pos:line="6191" pos:column="31">.<pos:position pos:line="6191" pos:column="32"/></operator><name pos:line="6191" pos:column="32">pVCur<pos:position pos:line="6191" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="6191" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6191" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6192" pos:column="3">VdbeBranchTaken<pos:position pos:line="6192" pos:column="18"/></name><argument_list pos:line="6192" pos:column="18">(<argument><expr><operator pos:line="6192" pos:column="19">!<pos:position pos:line="6192" pos:column="20"/></operator><name pos:line="6192" pos:column="20">res<pos:position pos:line="6192" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="6192" pos:column="24">2<pos:position pos:line="6192" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="6192" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6192" pos:column="27"/></expr_stmt>
  <if pos:line="6193" pos:column="3">if<condition pos:line="6193" pos:column="5">( <expr><operator pos:line="6193" pos:column="7">!<pos:position pos:line="6193" pos:column="8"/></operator><name pos:line="6193" pos:column="8">res<pos:position pos:line="6193" pos:column="11"/></name></expr> )<pos:position pos:line="6193" pos:column="13"/></condition><then><block pos:line="6193" pos:column="13">{
    <comment type="block" pos:line="6194" pos:column="5">/* If there is data, jump to P2 */</comment>
    <goto pos:line="6195" pos:column="5">goto <name pos:line="6195" pos:column="10">jump_to_p2_and_check_for_interrupt<pos:position pos:line="6195" pos:column="44"/></name>;<pos:position pos:line="6195" pos:column="45"/></goto>
  }<pos:position pos:line="6196" pos:column="4"/></block></then></if>
  <goto pos:line="6197" pos:column="3">goto <name pos:line="6197" pos:column="8">check_for_interrupt<pos:position pos:line="6197" pos:column="27"/></name>;<pos:position pos:line="6197" pos:column="28"/></goto>
}<pos:position pos:line="6198" pos:column="2"/></block>
<cpp:endif pos:line="6199" pos:column="1">#<cpp:directive pos:line="6199" pos:column="2">endif<pos:position pos:line="6199" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6199" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="6201" pos:column="1">#<cpp:directive pos:line="6201" pos:column="2">ifndef<pos:position pos:line="6201" pos:column="8"/></cpp:directive> <name pos:line="6201" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="6201" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="6202" pos:column="1">/* Opcode: VRename P1 * * P4 *
**
** P4 is a pointer to a virtual table object, an sqlite3_vtab structure.
** This opcode invokes the corresponding xRename method. The value
** in register P1 is passed as the zName argument to the xRename method.
*/</comment>
<case pos:line="6208" pos:column="1">case <expr><name pos:line="6208" pos:column="6">OP_VRename<pos:position pos:line="6208" pos:column="16"/></name></expr>:<pos:position pos:line="6208" pos:column="17"/></case> <block pos:line="6208" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="6209" pos:column="3">sqlite3_vtab<pos:position pos:line="6209" pos:column="15"/></name> <modifier pos:line="6209" pos:column="16">*<pos:position pos:line="6209" pos:column="17"/></modifier></type><name pos:line="6209" pos:column="17">pVtab<pos:position pos:line="6209" pos:column="22"/></name></decl>;<pos:position pos:line="6209" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6210" pos:column="3">Mem<pos:position pos:line="6210" pos:column="6"/></name> <modifier pos:line="6210" pos:column="7">*<pos:position pos:line="6210" pos:column="8"/></modifier></type><name pos:line="6210" pos:column="8">pName<pos:position pos:line="6210" pos:column="13"/></name></decl>;<pos:position pos:line="6210" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6212" pos:column="3">pVtab<pos:position pos:line="6212" pos:column="8"/></name> <operator pos:line="6212" pos:column="9">=<pos:position pos:line="6212" pos:column="10"/></operator> <name><name pos:line="6212" pos:column="11">pOp<pos:position pos:line="6212" pos:column="14"/></name><operator pos:line="6212" pos:column="14">-&gt;<pos:position pos:line="6212" pos:column="19"/></operator><name pos:line="6212" pos:column="16">p4<pos:position pos:line="6212" pos:column="18"/></name><operator pos:line="6212" pos:column="18">.<pos:position pos:line="6212" pos:column="19"/></operator><name pos:line="6212" pos:column="19">pVtab<pos:position pos:line="6212" pos:column="24"/></name><operator pos:line="6212" pos:column="24">-&gt;<pos:position pos:line="6212" pos:column="29"/></operator><name pos:line="6212" pos:column="26">pVtab<pos:position pos:line="6212" pos:column="31"/></name></name></expr>;<pos:position pos:line="6212" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6213" pos:column="3">pName<pos:position pos:line="6213" pos:column="8"/></name> <operator pos:line="6213" pos:column="9">=<pos:position pos:line="6213" pos:column="10"/></operator> <operator pos:line="6213" pos:column="11">&amp;<pos:position pos:line="6213" pos:column="16"/></operator><name><name pos:line="6213" pos:column="12">aMem<pos:position pos:line="6213" pos:column="16"/></name><index pos:line="6213" pos:column="16">[<expr><name><name pos:line="6213" pos:column="17">pOp<pos:position pos:line="6213" pos:column="20"/></name><operator pos:line="6213" pos:column="20">-&gt;<pos:position pos:line="6213" pos:column="25"/></operator><name pos:line="6213" pos:column="22">p1<pos:position pos:line="6213" pos:column="24"/></name></name></expr>]<pos:position pos:line="6213" pos:column="25"/></index></name></expr>;<pos:position pos:line="6213" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6214" pos:column="3">assert<pos:position pos:line="6214" pos:column="9"/></name><argument_list pos:line="6214" pos:column="9">( <argument><expr><name><name pos:line="6214" pos:column="11">pVtab<pos:position pos:line="6214" pos:column="16"/></name><operator pos:line="6214" pos:column="16">-&gt;<pos:position pos:line="6214" pos:column="21"/></operator><name pos:line="6214" pos:column="18">pModule<pos:position pos:line="6214" pos:column="25"/></name><operator pos:line="6214" pos:column="25">-&gt;<pos:position pos:line="6214" pos:column="30"/></operator><name pos:line="6214" pos:column="27">xRename<pos:position pos:line="6214" pos:column="34"/></name></name></expr></argument> )<pos:position pos:line="6214" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6214" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6215" pos:column="3">assert<pos:position pos:line="6215" pos:column="9"/></name><argument_list pos:line="6215" pos:column="9">( <argument><expr><call><name pos:line="6215" pos:column="11">memIsValid<pos:position pos:line="6215" pos:column="21"/></name><argument_list pos:line="6215" pos:column="21">(<argument><expr><name pos:line="6215" pos:column="22">pName<pos:position pos:line="6215" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6215" pos:column="28"/></argument_list></call></expr></argument> )<pos:position pos:line="6215" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="6215" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6216" pos:column="3">assert<pos:position pos:line="6216" pos:column="9"/></name><argument_list pos:line="6216" pos:column="9">( <argument><expr><name><name pos:line="6216" pos:column="11">p<pos:position pos:line="6216" pos:column="12"/></name><operator pos:line="6216" pos:column="12">-&gt;<pos:position pos:line="6216" pos:column="17"/></operator><name pos:line="6216" pos:column="14">readOnly<pos:position pos:line="6216" pos:column="22"/></name></name><operator pos:line="6216" pos:column="22">==<pos:position pos:line="6216" pos:column="24"/></operator><literal type="number" pos:line="6216" pos:column="24">0<pos:position pos:line="6216" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="6216" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6216" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6217" pos:column="3">REGISTER_TRACE<pos:position pos:line="6217" pos:column="17"/></name><argument_list pos:line="6217" pos:column="17">(<argument><expr><name><name pos:line="6217" pos:column="18">pOp<pos:position pos:line="6217" pos:column="21"/></name><operator pos:line="6217" pos:column="21">-&gt;<pos:position pos:line="6217" pos:column="26"/></operator><name pos:line="6217" pos:column="23">p1<pos:position pos:line="6217" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="6217" pos:column="27">pName<pos:position pos:line="6217" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6217" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6217" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6218" pos:column="3">assert<pos:position pos:line="6218" pos:column="9"/></name><argument_list pos:line="6218" pos:column="9">( <argument><expr><name><name pos:line="6218" pos:column="11">pName<pos:position pos:line="6218" pos:column="16"/></name><operator pos:line="6218" pos:column="16">-&gt;<pos:position pos:line="6218" pos:column="21"/></operator><name pos:line="6218" pos:column="18">flags<pos:position pos:line="6218" pos:column="23"/></name></name> <operator pos:line="6218" pos:column="24">&amp;<pos:position pos:line="6218" pos:column="29"/></operator> <name pos:line="6218" pos:column="26">MEM_Str<pos:position pos:line="6218" pos:column="33"/></name></expr></argument> )<pos:position pos:line="6218" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="6218" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6219" pos:column="3">testcase<pos:position pos:line="6219" pos:column="11"/></name><argument_list pos:line="6219" pos:column="11">( <argument><expr><name><name pos:line="6219" pos:column="13">pName<pos:position pos:line="6219" pos:column="18"/></name><operator pos:line="6219" pos:column="18">-&gt;<pos:position pos:line="6219" pos:column="23"/></operator><name pos:line="6219" pos:column="20">enc<pos:position pos:line="6219" pos:column="23"/></name></name><operator pos:line="6219" pos:column="23">==<pos:position pos:line="6219" pos:column="25"/></operator><name pos:line="6219" pos:column="25">SQLITE_UTF8<pos:position pos:line="6219" pos:column="36"/></name></expr></argument> )<pos:position pos:line="6219" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6219" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6220" pos:column="3">testcase<pos:position pos:line="6220" pos:column="11"/></name><argument_list pos:line="6220" pos:column="11">( <argument><expr><name><name pos:line="6220" pos:column="13">pName<pos:position pos:line="6220" pos:column="18"/></name><operator pos:line="6220" pos:column="18">-&gt;<pos:position pos:line="6220" pos:column="23"/></operator><name pos:line="6220" pos:column="20">enc<pos:position pos:line="6220" pos:column="23"/></name></name><operator pos:line="6220" pos:column="23">==<pos:position pos:line="6220" pos:column="25"/></operator><name pos:line="6220" pos:column="25">SQLITE_UTF16BE<pos:position pos:line="6220" pos:column="39"/></name></expr></argument> )<pos:position pos:line="6220" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6220" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6221" pos:column="3">testcase<pos:position pos:line="6221" pos:column="11"/></name><argument_list pos:line="6221" pos:column="11">( <argument><expr><name><name pos:line="6221" pos:column="13">pName<pos:position pos:line="6221" pos:column="18"/></name><operator pos:line="6221" pos:column="18">-&gt;<pos:position pos:line="6221" pos:column="23"/></operator><name pos:line="6221" pos:column="20">enc<pos:position pos:line="6221" pos:column="23"/></name></name><operator pos:line="6221" pos:column="23">==<pos:position pos:line="6221" pos:column="25"/></operator><name pos:line="6221" pos:column="25">SQLITE_UTF16LE<pos:position pos:line="6221" pos:column="39"/></name></expr></argument> )<pos:position pos:line="6221" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6221" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6222" pos:column="3">rc<pos:position pos:line="6222" pos:column="5"/></name> <operator pos:line="6222" pos:column="6">=<pos:position pos:line="6222" pos:column="7"/></operator> <call><name pos:line="6222" pos:column="8">sqlite3VdbeChangeEncoding<pos:position pos:line="6222" pos:column="33"/></name><argument_list pos:line="6222" pos:column="33">(<argument><expr><name pos:line="6222" pos:column="34">pName<pos:position pos:line="6222" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="6222" pos:column="41">SQLITE_UTF8<pos:position pos:line="6222" pos:column="52"/></name></expr></argument>)<pos:position pos:line="6222" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="6222" pos:column="54"/></expr_stmt>
  <if pos:line="6223" pos:column="3">if<condition pos:line="6223" pos:column="5">( <expr><name pos:line="6223" pos:column="7">rc<pos:position pos:line="6223" pos:column="9"/></name></expr> )<pos:position pos:line="6223" pos:column="11"/></condition><then pos:line="6223" pos:column="11"> <block type="pseudo"><goto pos:line="6223" pos:column="12">goto <name pos:line="6223" pos:column="17">abort_due_to_error<pos:position pos:line="6223" pos:column="35"/></name>;<pos:position pos:line="6223" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><name pos:line="6224" pos:column="3">rc<pos:position pos:line="6224" pos:column="5"/></name> <operator pos:line="6224" pos:column="6">=<pos:position pos:line="6224" pos:column="7"/></operator> <call><name><name pos:line="6224" pos:column="8">pVtab<pos:position pos:line="6224" pos:column="13"/></name><operator pos:line="6224" pos:column="13">-&gt;<pos:position pos:line="6224" pos:column="18"/></operator><name pos:line="6224" pos:column="15">pModule<pos:position pos:line="6224" pos:column="22"/></name><operator pos:line="6224" pos:column="22">-&gt;<pos:position pos:line="6224" pos:column="27"/></operator><name pos:line="6224" pos:column="24">xRename<pos:position pos:line="6224" pos:column="31"/></name></name><argument_list pos:line="6224" pos:column="31">(<argument><expr><name pos:line="6224" pos:column="32">pVtab<pos:position pos:line="6224" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="6224" pos:column="39">pName<pos:position pos:line="6224" pos:column="44"/></name><operator pos:line="6224" pos:column="44">-&gt;<pos:position pos:line="6224" pos:column="49"/></operator><name pos:line="6224" pos:column="46">z<pos:position pos:line="6224" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="6224" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="6224" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6225" pos:column="3">sqlite3VtabImportErrmsg<pos:position pos:line="6225" pos:column="26"/></name><argument_list pos:line="6225" pos:column="26">(<argument><expr><name pos:line="6225" pos:column="27">p<pos:position pos:line="6225" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="6225" pos:column="30">pVtab<pos:position pos:line="6225" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6225" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6225" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6226" pos:column="3">p<pos:position pos:line="6226" pos:column="4"/></name><operator pos:line="6226" pos:column="4">-&gt;<pos:position pos:line="6226" pos:column="9"/></operator><name pos:line="6226" pos:column="6">expired<pos:position pos:line="6226" pos:column="13"/></name></name> <operator pos:line="6226" pos:column="14">=<pos:position pos:line="6226" pos:column="15"/></operator> <literal type="number" pos:line="6226" pos:column="16">0<pos:position pos:line="6226" pos:column="17"/></literal></expr>;<pos:position pos:line="6226" pos:column="18"/></expr_stmt>
  <if pos:line="6227" pos:column="3">if<condition pos:line="6227" pos:column="5">( <expr><name pos:line="6227" pos:column="7">rc<pos:position pos:line="6227" pos:column="9"/></name></expr> )<pos:position pos:line="6227" pos:column="11"/></condition><then pos:line="6227" pos:column="11"> <block type="pseudo"><goto pos:line="6227" pos:column="12">goto <name pos:line="6227" pos:column="17">abort_due_to_error<pos:position pos:line="6227" pos:column="35"/></name>;<pos:position pos:line="6227" pos:column="36"/></goto></block></then></if>
  <break pos:line="6228" pos:column="3">break;<pos:position pos:line="6228" pos:column="9"/></break>
}<pos:position pos:line="6229" pos:column="2"/></block>
<cpp:endif pos:line="6230" pos:column="1">#<cpp:directive pos:line="6230" pos:column="2">endif<pos:position pos:line="6230" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="6232" pos:column="1">#<cpp:directive pos:line="6232" pos:column="2">ifndef<pos:position pos:line="6232" pos:column="8"/></cpp:directive> <name pos:line="6232" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="6232" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="6233" pos:column="1">/* Opcode: VUpdate P1 P2 P3 P4 P5
** Synopsis: data=r[P3@P2]
**
** P4 is a pointer to a virtual table object, an sqlite3_vtab structure.
** This opcode invokes the corresponding xUpdate method. P2 values
** are contiguous memory cells starting at P3 to pass to the xUpdate 
** invocation. The value in register (P3+P2-1) corresponds to the 
** p2th element of the argv array passed to xUpdate.
**
** The xUpdate method will do a DELETE or an INSERT or both.
** The argv[0] element (which corresponds to memory cell P3)
** is the rowid of a row to delete.  If argv[0] is NULL then no 
** deletion occurs.  The argv[1] element is the rowid of the new 
** row.  This can be NULL to have the virtual table select the new 
** rowid for itself.  The subsequent elements in the array are 
** the values of columns in the new row.
**
** If P2==1 then no insert is performed.  argv[0] is the rowid of
** a row to delete.
**
** P1 is a boolean flag. If it is set to true and the xUpdate call
** is successful, then the value returned by sqlite3_last_insert_rowid() 
** is set to the value of the rowid for the row just inserted.
**
** P5 is the error actions (OE_Replace, OE_Fail, OE_Ignore, etc) to
** apply in the case of a constraint failure on an insert or update.
*/</comment>
<case pos:line="6260" pos:column="1">case <expr><name pos:line="6260" pos:column="6">OP_VUpdate<pos:position pos:line="6260" pos:column="16"/></name></expr>:<pos:position pos:line="6260" pos:column="17"/></case> <block pos:line="6260" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="6261" pos:column="3">sqlite3_vtab<pos:position pos:line="6261" pos:column="15"/></name> <modifier pos:line="6261" pos:column="16">*<pos:position pos:line="6261" pos:column="17"/></modifier></type><name pos:line="6261" pos:column="17">pVtab<pos:position pos:line="6261" pos:column="22"/></name></decl>;<pos:position pos:line="6261" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6262" pos:column="3">const<pos:position pos:line="6262" pos:column="8"/></specifier> <name pos:line="6262" pos:column="9">sqlite3_module<pos:position pos:line="6262" pos:column="23"/></name> <modifier pos:line="6262" pos:column="24">*<pos:position pos:line="6262" pos:column="25"/></modifier></type><name pos:line="6262" pos:column="25">pModule<pos:position pos:line="6262" pos:column="32"/></name></decl>;<pos:position pos:line="6262" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6263" pos:column="3">int<pos:position pos:line="6263" pos:column="6"/></name></type> <name pos:line="6263" pos:column="7">nArg<pos:position pos:line="6263" pos:column="11"/></name></decl>;<pos:position pos:line="6263" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6264" pos:column="3">int<pos:position pos:line="6264" pos:column="6"/></name></type> <name pos:line="6264" pos:column="7">i<pos:position pos:line="6264" pos:column="8"/></name></decl>;<pos:position pos:line="6264" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6265" pos:column="3">sqlite_int64<pos:position pos:line="6265" pos:column="15"/></name></type> <name pos:line="6265" pos:column="16">rowid<pos:position pos:line="6265" pos:column="21"/></name></decl>;<pos:position pos:line="6265" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6266" pos:column="3">Mem<pos:position pos:line="6266" pos:column="6"/></name> <modifier pos:line="6266" pos:column="7">*<pos:position pos:line="6266" pos:column="8"/></modifier><modifier pos:line="6266" pos:column="8">*<pos:position pos:line="6266" pos:column="9"/></modifier></type><name pos:line="6266" pos:column="9">apArg<pos:position pos:line="6266" pos:column="14"/></name></decl>;<pos:position pos:line="6266" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6267" pos:column="3">Mem<pos:position pos:line="6267" pos:column="6"/></name> <modifier pos:line="6267" pos:column="7">*<pos:position pos:line="6267" pos:column="8"/></modifier></type><name pos:line="6267" pos:column="8">pX<pos:position pos:line="6267" pos:column="10"/></name></decl>;<pos:position pos:line="6267" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6269" pos:column="3">assert<pos:position pos:line="6269" pos:column="9"/></name><argument_list pos:line="6269" pos:column="9">( <argument><expr><name><name pos:line="6269" pos:column="11">pOp<pos:position pos:line="6269" pos:column="14"/></name><operator pos:line="6269" pos:column="14">-&gt;<pos:position pos:line="6269" pos:column="19"/></operator><name pos:line="6269" pos:column="16">p2<pos:position pos:line="6269" pos:column="18"/></name></name><operator pos:line="6269" pos:column="18">==<pos:position pos:line="6269" pos:column="20"/></operator><literal type="number" pos:line="6269" pos:column="20">1<pos:position pos:line="6269" pos:column="21"/></literal>        <operator pos:line="6269" pos:column="29">||<pos:position pos:line="6269" pos:column="31"/></operator> <name><name pos:line="6269" pos:column="32">pOp<pos:position pos:line="6269" pos:column="35"/></name><operator pos:line="6269" pos:column="35">-&gt;<pos:position pos:line="6269" pos:column="40"/></operator><name pos:line="6269" pos:column="37">p5<pos:position pos:line="6269" pos:column="39"/></name></name><operator pos:line="6269" pos:column="39">==<pos:position pos:line="6269" pos:column="41"/></operator><name pos:line="6269" pos:column="41">OE_Fail<pos:position pos:line="6269" pos:column="48"/></name>   <operator pos:line="6269" pos:column="51">||<pos:position pos:line="6269" pos:column="53"/></operator> <name><name pos:line="6269" pos:column="54">pOp<pos:position pos:line="6269" pos:column="57"/></name><operator pos:line="6269" pos:column="57">-&gt;<pos:position pos:line="6269" pos:column="62"/></operator><name pos:line="6269" pos:column="59">p5<pos:position pos:line="6269" pos:column="61"/></name></name><operator pos:line="6269" pos:column="61">==<pos:position pos:line="6269" pos:column="63"/></operator><name pos:line="6269" pos:column="63">OE_Rollback<pos:position pos:line="6269" pos:column="74"/></name> 
       <operator pos:line="6270" pos:column="8">||<pos:position pos:line="6270" pos:column="10"/></operator> <name><name pos:line="6270" pos:column="11">pOp<pos:position pos:line="6270" pos:column="14"/></name><operator pos:line="6270" pos:column="14">-&gt;<pos:position pos:line="6270" pos:column="19"/></operator><name pos:line="6270" pos:column="16">p5<pos:position pos:line="6270" pos:column="18"/></name></name><operator pos:line="6270" pos:column="18">==<pos:position pos:line="6270" pos:column="20"/></operator><name pos:line="6270" pos:column="20">OE_Abort<pos:position pos:line="6270" pos:column="28"/></name> <operator pos:line="6270" pos:column="29">||<pos:position pos:line="6270" pos:column="31"/></operator> <name><name pos:line="6270" pos:column="32">pOp<pos:position pos:line="6270" pos:column="35"/></name><operator pos:line="6270" pos:column="35">-&gt;<pos:position pos:line="6270" pos:column="40"/></operator><name pos:line="6270" pos:column="37">p5<pos:position pos:line="6270" pos:column="39"/></name></name><operator pos:line="6270" pos:column="39">==<pos:position pos:line="6270" pos:column="41"/></operator><name pos:line="6270" pos:column="41">OE_Ignore<pos:position pos:line="6270" pos:column="50"/></name> <operator pos:line="6270" pos:column="51">||<pos:position pos:line="6270" pos:column="53"/></operator> <name><name pos:line="6270" pos:column="54">pOp<pos:position pos:line="6270" pos:column="57"/></name><operator pos:line="6270" pos:column="57">-&gt;<pos:position pos:line="6270" pos:column="62"/></operator><name pos:line="6270" pos:column="59">p5<pos:position pos:line="6270" pos:column="61"/></name></name><operator pos:line="6270" pos:column="61">==<pos:position pos:line="6270" pos:column="63"/></operator><name pos:line="6270" pos:column="63">OE_Replace<pos:position pos:line="6270" pos:column="73"/></name></expr></argument>
  )<pos:position pos:line="6271" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="6271" pos:column="5"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6272" pos:column="3">assert<pos:position pos:line="6272" pos:column="9"/></name><argument_list pos:line="6272" pos:column="9">( <argument><expr><name><name pos:line="6272" pos:column="11">p<pos:position pos:line="6272" pos:column="12"/></name><operator pos:line="6272" pos:column="12">-&gt;<pos:position pos:line="6272" pos:column="17"/></operator><name pos:line="6272" pos:column="14">readOnly<pos:position pos:line="6272" pos:column="22"/></name></name><operator pos:line="6272" pos:column="22">==<pos:position pos:line="6272" pos:column="24"/></operator><literal type="number" pos:line="6272" pos:column="24">0<pos:position pos:line="6272" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="6272" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6272" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6273" pos:column="3">pVtab<pos:position pos:line="6273" pos:column="8"/></name> <operator pos:line="6273" pos:column="9">=<pos:position pos:line="6273" pos:column="10"/></operator> <name><name pos:line="6273" pos:column="11">pOp<pos:position pos:line="6273" pos:column="14"/></name><operator pos:line="6273" pos:column="14">-&gt;<pos:position pos:line="6273" pos:column="19"/></operator><name pos:line="6273" pos:column="16">p4<pos:position pos:line="6273" pos:column="18"/></name><operator pos:line="6273" pos:column="18">.<pos:position pos:line="6273" pos:column="19"/></operator><name pos:line="6273" pos:column="19">pVtab<pos:position pos:line="6273" pos:column="24"/></name><operator pos:line="6273" pos:column="24">-&gt;<pos:position pos:line="6273" pos:column="29"/></operator><name pos:line="6273" pos:column="26">pVtab<pos:position pos:line="6273" pos:column="31"/></name></name></expr>;<pos:position pos:line="6273" pos:column="32"/></expr_stmt>
  <if pos:line="6274" pos:column="3">if<condition pos:line="6274" pos:column="5">( <expr><name pos:line="6274" pos:column="7">pVtab<pos:position pos:line="6274" pos:column="12"/></name><operator pos:line="6274" pos:column="12">==<pos:position pos:line="6274" pos:column="14"/></operator><literal type="number" pos:line="6274" pos:column="14">0<pos:position pos:line="6274" pos:column="15"/></literal> <operator pos:line="6274" pos:column="16">||<pos:position pos:line="6274" pos:column="18"/></operator> <call><name pos:line="6274" pos:column="19">NEVER<pos:position pos:line="6274" pos:column="24"/></name><argument_list pos:line="6274" pos:column="24">(<argument><expr><name><name pos:line="6274" pos:column="25">pVtab<pos:position pos:line="6274" pos:column="30"/></name><operator pos:line="6274" pos:column="30">-&gt;<pos:position pos:line="6274" pos:column="35"/></operator><name pos:line="6274" pos:column="32">pModule<pos:position pos:line="6274" pos:column="39"/></name></name><operator pos:line="6274" pos:column="39">==<pos:position pos:line="6274" pos:column="41"/></operator><literal type="number" pos:line="6274" pos:column="41">0<pos:position pos:line="6274" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="6274" pos:column="43"/></argument_list></call></expr> )<pos:position pos:line="6274" pos:column="45"/></condition><then><block pos:line="6274" pos:column="45">{
    <expr_stmt><expr><name pos:line="6275" pos:column="5">rc<pos:position pos:line="6275" pos:column="7"/></name> <operator pos:line="6275" pos:column="8">=<pos:position pos:line="6275" pos:column="9"/></operator> <name pos:line="6275" pos:column="10">SQLITE_LOCKED<pos:position pos:line="6275" pos:column="23"/></name></expr>;<pos:position pos:line="6275" pos:column="24"/></expr_stmt>
    <goto pos:line="6276" pos:column="5">goto <name pos:line="6276" pos:column="10">abort_due_to_error<pos:position pos:line="6276" pos:column="28"/></name>;<pos:position pos:line="6276" pos:column="29"/></goto>
  }<pos:position pos:line="6277" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="6278" pos:column="3">pModule<pos:position pos:line="6278" pos:column="10"/></name> <operator pos:line="6278" pos:column="11">=<pos:position pos:line="6278" pos:column="12"/></operator> <name><name pos:line="6278" pos:column="13">pVtab<pos:position pos:line="6278" pos:column="18"/></name><operator pos:line="6278" pos:column="18">-&gt;<pos:position pos:line="6278" pos:column="23"/></operator><name pos:line="6278" pos:column="20">pModule<pos:position pos:line="6278" pos:column="27"/></name></name></expr>;<pos:position pos:line="6278" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6279" pos:column="3">nArg<pos:position pos:line="6279" pos:column="7"/></name> <operator pos:line="6279" pos:column="8">=<pos:position pos:line="6279" pos:column="9"/></operator> <name><name pos:line="6279" pos:column="10">pOp<pos:position pos:line="6279" pos:column="13"/></name><operator pos:line="6279" pos:column="13">-&gt;<pos:position pos:line="6279" pos:column="18"/></operator><name pos:line="6279" pos:column="15">p2<pos:position pos:line="6279" pos:column="17"/></name></name></expr>;<pos:position pos:line="6279" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6280" pos:column="3">assert<pos:position pos:line="6280" pos:column="9"/></name><argument_list pos:line="6280" pos:column="9">( <argument><expr><name><name pos:line="6280" pos:column="11">pOp<pos:position pos:line="6280" pos:column="14"/></name><operator pos:line="6280" pos:column="14">-&gt;<pos:position pos:line="6280" pos:column="19"/></operator><name pos:line="6280" pos:column="16">p4type<pos:position pos:line="6280" pos:column="22"/></name></name><operator pos:line="6280" pos:column="22">==<pos:position pos:line="6280" pos:column="24"/></operator><name pos:line="6280" pos:column="24">P4_VTAB<pos:position pos:line="6280" pos:column="31"/></name></expr></argument> )<pos:position pos:line="6280" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6280" pos:column="34"/></expr_stmt>
  <if pos:line="6281" pos:column="3">if<condition pos:line="6281" pos:column="5">( <expr><call><name pos:line="6281" pos:column="7">ALWAYS<pos:position pos:line="6281" pos:column="13"/></name><argument_list pos:line="6281" pos:column="13">(<argument><expr><name><name pos:line="6281" pos:column="14">pModule<pos:position pos:line="6281" pos:column="21"/></name><operator pos:line="6281" pos:column="21">-&gt;<pos:position pos:line="6281" pos:column="26"/></operator><name pos:line="6281" pos:column="23">xUpdate<pos:position pos:line="6281" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="6281" pos:column="31"/></argument_list></call></expr> )<pos:position pos:line="6281" pos:column="33"/></condition><then><block pos:line="6281" pos:column="33">{
    <decl_stmt><decl><type><name pos:line="6282" pos:column="5">u8<pos:position pos:line="6282" pos:column="7"/></name></type> <name pos:line="6282" pos:column="8">vtabOnConflict<pos:position pos:line="6282" pos:column="22"/></name> <init pos:line="6282" pos:column="23">= <expr><name><name pos:line="6282" pos:column="25">db<pos:position pos:line="6282" pos:column="27"/></name><operator pos:line="6282" pos:column="27">-&gt;<pos:position pos:line="6282" pos:column="32"/></operator><name pos:line="6282" pos:column="29">vtabOnConflict<pos:position pos:line="6282" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="6282" pos:column="44"/></decl_stmt>
    <expr_stmt><expr><name pos:line="6283" pos:column="5">apArg<pos:position pos:line="6283" pos:column="10"/></name> <operator pos:line="6283" pos:column="11">=<pos:position pos:line="6283" pos:column="12"/></operator> <name><name pos:line="6283" pos:column="13">p<pos:position pos:line="6283" pos:column="14"/></name><operator pos:line="6283" pos:column="14">-&gt;<pos:position pos:line="6283" pos:column="19"/></operator><name pos:line="6283" pos:column="16">apArg<pos:position pos:line="6283" pos:column="21"/></name></name></expr>;<pos:position pos:line="6283" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6284" pos:column="5">pX<pos:position pos:line="6284" pos:column="7"/></name> <operator pos:line="6284" pos:column="8">=<pos:position pos:line="6284" pos:column="9"/></operator> <operator pos:line="6284" pos:column="10">&amp;<pos:position pos:line="6284" pos:column="15"/></operator><name><name pos:line="6284" pos:column="11">aMem<pos:position pos:line="6284" pos:column="15"/></name><index pos:line="6284" pos:column="15">[<expr><name><name pos:line="6284" pos:column="16">pOp<pos:position pos:line="6284" pos:column="19"/></name><operator pos:line="6284" pos:column="19">-&gt;<pos:position pos:line="6284" pos:column="24"/></operator><name pos:line="6284" pos:column="21">p3<pos:position pos:line="6284" pos:column="23"/></name></name></expr>]<pos:position pos:line="6284" pos:column="24"/></index></name></expr>;<pos:position pos:line="6284" pos:column="25"/></expr_stmt>
    <for pos:line="6285" pos:column="5">for<control pos:line="6285" pos:column="8">(<init><expr><name pos:line="6285" pos:column="9">i<pos:position pos:line="6285" pos:column="10"/></name><operator pos:line="6285" pos:column="10">=<pos:position pos:line="6285" pos:column="11"/></operator><literal type="number" pos:line="6285" pos:column="11">0<pos:position pos:line="6285" pos:column="12"/></literal></expr>;<pos:position pos:line="6285" pos:column="13"/></init> <condition><expr><name pos:line="6285" pos:column="14">i<pos:position pos:line="6285" pos:column="15"/></name><operator pos:line="6285" pos:column="15">&lt;<pos:position pos:line="6285" pos:column="19"/></operator><name pos:line="6285" pos:column="16">nArg<pos:position pos:line="6285" pos:column="20"/></name></expr>;<pos:position pos:line="6285" pos:column="21"/></condition> <incr><expr><name pos:line="6285" pos:column="22">i<pos:position pos:line="6285" pos:column="23"/></name><operator pos:line="6285" pos:column="23">++<pos:position pos:line="6285" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="6285" pos:column="26"/></control><block pos:line="6285" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="6286" pos:column="7">assert<pos:position pos:line="6286" pos:column="13"/></name><argument_list pos:line="6286" pos:column="13">( <argument><expr><call><name pos:line="6286" pos:column="15">memIsValid<pos:position pos:line="6286" pos:column="25"/></name><argument_list pos:line="6286" pos:column="25">(<argument><expr><name pos:line="6286" pos:column="26">pX<pos:position pos:line="6286" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6286" pos:column="29"/></argument_list></call></expr></argument> )<pos:position pos:line="6286" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6286" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="6287" pos:column="7">memAboutToChange<pos:position pos:line="6287" pos:column="23"/></name><argument_list pos:line="6287" pos:column="23">(<argument><expr><name pos:line="6287" pos:column="24">p<pos:position pos:line="6287" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="6287" pos:column="27">pX<pos:position pos:line="6287" pos:column="29"/></name></expr></argument>)<pos:position pos:line="6287" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="6287" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="6288" pos:column="7">apArg<pos:position pos:line="6288" pos:column="12"/></name><index pos:line="6288" pos:column="12">[<expr><name pos:line="6288" pos:column="13">i<pos:position pos:line="6288" pos:column="14"/></name></expr>]<pos:position pos:line="6288" pos:column="15"/></index></name> <operator pos:line="6288" pos:column="16">=<pos:position pos:line="6288" pos:column="17"/></operator> <name pos:line="6288" pos:column="18">pX<pos:position pos:line="6288" pos:column="20"/></name></expr>;<pos:position pos:line="6288" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="6289" pos:column="7">pX<pos:position pos:line="6289" pos:column="9"/></name><operator pos:line="6289" pos:column="9">++<pos:position pos:line="6289" pos:column="11"/></operator></expr>;<pos:position pos:line="6289" pos:column="12"/></expr_stmt>
    }<pos:position pos:line="6290" pos:column="6"/></block></for>
    <expr_stmt><expr><name><name pos:line="6291" pos:column="5">db<pos:position pos:line="6291" pos:column="7"/></name><operator pos:line="6291" pos:column="7">-&gt;<pos:position pos:line="6291" pos:column="12"/></operator><name pos:line="6291" pos:column="9">vtabOnConflict<pos:position pos:line="6291" pos:column="23"/></name></name> <operator pos:line="6291" pos:column="24">=<pos:position pos:line="6291" pos:column="25"/></operator> <name><name pos:line="6291" pos:column="26">pOp<pos:position pos:line="6291" pos:column="29"/></name><operator pos:line="6291" pos:column="29">-&gt;<pos:position pos:line="6291" pos:column="34"/></operator><name pos:line="6291" pos:column="31">p5<pos:position pos:line="6291" pos:column="33"/></name></name></expr>;<pos:position pos:line="6291" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6292" pos:column="5">rc<pos:position pos:line="6292" pos:column="7"/></name> <operator pos:line="6292" pos:column="8">=<pos:position pos:line="6292" pos:column="9"/></operator> <call><name><name pos:line="6292" pos:column="10">pModule<pos:position pos:line="6292" pos:column="17"/></name><operator pos:line="6292" pos:column="17">-&gt;<pos:position pos:line="6292" pos:column="22"/></operator><name pos:line="6292" pos:column="19">xUpdate<pos:position pos:line="6292" pos:column="26"/></name></name><argument_list pos:line="6292" pos:column="26">(<argument><expr><name pos:line="6292" pos:column="27">pVtab<pos:position pos:line="6292" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="6292" pos:column="34">nArg<pos:position pos:line="6292" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="6292" pos:column="40">apArg<pos:position pos:line="6292" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="6292" pos:column="47">&amp;<pos:position pos:line="6292" pos:column="52"/></operator><name pos:line="6292" pos:column="48">rowid<pos:position pos:line="6292" pos:column="53"/></name></expr></argument>)<pos:position pos:line="6292" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="6292" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6293" pos:column="5">db<pos:position pos:line="6293" pos:column="7"/></name><operator pos:line="6293" pos:column="7">-&gt;<pos:position pos:line="6293" pos:column="12"/></operator><name pos:line="6293" pos:column="9">vtabOnConflict<pos:position pos:line="6293" pos:column="23"/></name></name> <operator pos:line="6293" pos:column="24">=<pos:position pos:line="6293" pos:column="25"/></operator> <name pos:line="6293" pos:column="26">vtabOnConflict<pos:position pos:line="6293" pos:column="40"/></name></expr>;<pos:position pos:line="6293" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6294" pos:column="5">sqlite3VtabImportErrmsg<pos:position pos:line="6294" pos:column="28"/></name><argument_list pos:line="6294" pos:column="28">(<argument><expr><name pos:line="6294" pos:column="29">p<pos:position pos:line="6294" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="6294" pos:column="32">pVtab<pos:position pos:line="6294" pos:column="37"/></name></expr></argument>)<pos:position pos:line="6294" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6294" pos:column="39"/></expr_stmt>
    <if pos:line="6295" pos:column="5">if<condition pos:line="6295" pos:column="7">( <expr><name pos:line="6295" pos:column="9">rc<pos:position pos:line="6295" pos:column="11"/></name><operator pos:line="6295" pos:column="11">==<pos:position pos:line="6295" pos:column="13"/></operator><name pos:line="6295" pos:column="13">SQLITE_OK<pos:position pos:line="6295" pos:column="22"/></name> <operator pos:line="6295" pos:column="23">&amp;&amp;<pos:position pos:line="6295" pos:column="33"/></operator> <name><name pos:line="6295" pos:column="26">pOp<pos:position pos:line="6295" pos:column="29"/></name><operator pos:line="6295" pos:column="29">-&gt;<pos:position pos:line="6295" pos:column="34"/></operator><name pos:line="6295" pos:column="31">p1<pos:position pos:line="6295" pos:column="33"/></name></name></expr> )<pos:position pos:line="6295" pos:column="35"/></condition><then><block pos:line="6295" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="6296" pos:column="7">assert<pos:position pos:line="6296" pos:column="13"/></name><argument_list pos:line="6296" pos:column="13">( <argument><expr><name pos:line="6296" pos:column="15">nArg<pos:position pos:line="6296" pos:column="19"/></name><operator pos:line="6296" pos:column="19">&gt;<pos:position pos:line="6296" pos:column="23"/></operator><literal type="number" pos:line="6296" pos:column="20">1<pos:position pos:line="6296" pos:column="21"/></literal> <operator pos:line="6296" pos:column="22">&amp;&amp;<pos:position pos:line="6296" pos:column="32"/></operator> <name><name pos:line="6296" pos:column="25">apArg<pos:position pos:line="6296" pos:column="30"/></name><index pos:line="6296" pos:column="30">[<expr><literal type="number" pos:line="6296" pos:column="31">0<pos:position pos:line="6296" pos:column="32"/></literal></expr>]<pos:position pos:line="6296" pos:column="33"/></index></name> <operator pos:line="6296" pos:column="34">&amp;&amp;<pos:position pos:line="6296" pos:column="44"/></operator> <operator pos:line="6296" pos:column="37">(<pos:position pos:line="6296" pos:column="38"/></operator><name><name pos:line="6296" pos:column="38">apArg<pos:position pos:line="6296" pos:column="43"/></name><index pos:line="6296" pos:column="43">[<expr><literal type="number" pos:line="6296" pos:column="44">0<pos:position pos:line="6296" pos:column="45"/></literal></expr>]<pos:position pos:line="6296" pos:column="46"/></index></name><operator pos:line="6296" pos:column="46">-&gt;<pos:position pos:line="6296" pos:column="51"/></operator><name pos:line="6296" pos:column="48">flags<pos:position pos:line="6296" pos:column="53"/></name><operator pos:line="6296" pos:column="53">&amp;<pos:position pos:line="6296" pos:column="58"/></operator><name pos:line="6296" pos:column="54">MEM_Null<pos:position pos:line="6296" pos:column="62"/></name><operator pos:line="6296" pos:column="62">)<pos:position pos:line="6296" pos:column="63"/></operator></expr></argument> )<pos:position pos:line="6296" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="6296" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="6297" pos:column="7">db<pos:position pos:line="6297" pos:column="9"/></name><operator pos:line="6297" pos:column="9">-&gt;<pos:position pos:line="6297" pos:column="14"/></operator><name pos:line="6297" pos:column="11">lastRowid<pos:position pos:line="6297" pos:column="20"/></name></name> <operator pos:line="6297" pos:column="21">=<pos:position pos:line="6297" pos:column="22"/></operator> <name pos:line="6297" pos:column="23">rowid<pos:position pos:line="6297" pos:column="28"/></name></expr>;<pos:position pos:line="6297" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="6298" pos:column="6"/></block></then></if>
    <if pos:line="6299" pos:column="5">if<condition pos:line="6299" pos:column="7">( <expr><operator pos:line="6299" pos:column="9">(<pos:position pos:line="6299" pos:column="10"/></operator><name pos:line="6299" pos:column="10">rc<pos:position pos:line="6299" pos:column="12"/></name><operator pos:line="6299" pos:column="12">&amp;<pos:position pos:line="6299" pos:column="17"/></operator><literal type="number" pos:line="6299" pos:column="13">0xff<pos:position pos:line="6299" pos:column="17"/></literal><operator pos:line="6299" pos:column="17">)<pos:position pos:line="6299" pos:column="18"/></operator><operator pos:line="6299" pos:column="18">==<pos:position pos:line="6299" pos:column="20"/></operator><name pos:line="6299" pos:column="20">SQLITE_CONSTRAINT<pos:position pos:line="6299" pos:column="37"/></name> <operator pos:line="6299" pos:column="38">&amp;&amp;<pos:position pos:line="6299" pos:column="48"/></operator> <name><name pos:line="6299" pos:column="41">pOp<pos:position pos:line="6299" pos:column="44"/></name><operator pos:line="6299" pos:column="44">-&gt;<pos:position pos:line="6299" pos:column="49"/></operator><name pos:line="6299" pos:column="46">p4<pos:position pos:line="6299" pos:column="48"/></name><operator pos:line="6299" pos:column="48">.<pos:position pos:line="6299" pos:column="49"/></operator><name pos:line="6299" pos:column="49">pVtab<pos:position pos:line="6299" pos:column="54"/></name><operator pos:line="6299" pos:column="54">-&gt;<pos:position pos:line="6299" pos:column="59"/></operator><name pos:line="6299" pos:column="56">bConstraint<pos:position pos:line="6299" pos:column="67"/></name></name></expr> )<pos:position pos:line="6299" pos:column="69"/></condition><then><block pos:line="6299" pos:column="69">{
      <if pos:line="6300" pos:column="7">if<condition pos:line="6300" pos:column="9">( <expr><name><name pos:line="6300" pos:column="11">pOp<pos:position pos:line="6300" pos:column="14"/></name><operator pos:line="6300" pos:column="14">-&gt;<pos:position pos:line="6300" pos:column="19"/></operator><name pos:line="6300" pos:column="16">p5<pos:position pos:line="6300" pos:column="18"/></name></name><operator pos:line="6300" pos:column="18">==<pos:position pos:line="6300" pos:column="20"/></operator><name pos:line="6300" pos:column="20">OE_Ignore<pos:position pos:line="6300" pos:column="29"/></name></expr> )<pos:position pos:line="6300" pos:column="31"/></condition><then><block pos:line="6300" pos:column="31">{
        <expr_stmt><expr><name pos:line="6301" pos:column="9">rc<pos:position pos:line="6301" pos:column="11"/></name> <operator pos:line="6301" pos:column="12">=<pos:position pos:line="6301" pos:column="13"/></operator> <name pos:line="6301" pos:column="14">SQLITE_OK<pos:position pos:line="6301" pos:column="23"/></name></expr>;<pos:position pos:line="6301" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="6302" pos:column="8"/></block></then><else pos:line="6302" pos:column="8">else<block pos:line="6302" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="6303" pos:column="9">p<pos:position pos:line="6303" pos:column="10"/></name><operator pos:line="6303" pos:column="10">-&gt;<pos:position pos:line="6303" pos:column="15"/></operator><name pos:line="6303" pos:column="12">errorAction<pos:position pos:line="6303" pos:column="23"/></name></name> <operator pos:line="6303" pos:column="24">=<pos:position pos:line="6303" pos:column="25"/></operator> <operator pos:line="6303" pos:column="26">(<pos:position pos:line="6303" pos:column="27"/></operator><ternary><condition><expr><operator pos:line="6303" pos:column="27">(<pos:position pos:line="6303" pos:column="28"/></operator><name><name pos:line="6303" pos:column="28">pOp<pos:position pos:line="6303" pos:column="31"/></name><operator pos:line="6303" pos:column="31">-&gt;<pos:position pos:line="6303" pos:column="36"/></operator><name pos:line="6303" pos:column="33">p5<pos:position pos:line="6303" pos:column="35"/></name></name><operator pos:line="6303" pos:column="35">==<pos:position pos:line="6303" pos:column="37"/></operator><name pos:line="6303" pos:column="37">OE_Replace<pos:position pos:line="6303" pos:column="47"/></name><operator pos:line="6303" pos:column="47">)<pos:position pos:line="6303" pos:column="48"/></operator></expr> ?<pos:position pos:line="6303" pos:column="50"/></condition><then pos:line="6303" pos:column="50"> <expr><name pos:line="6303" pos:column="51">OE_Abort<pos:position pos:line="6303" pos:column="59"/></name></expr> <pos:position pos:line="6303" pos:column="60"/></then><else pos:line="6303" pos:column="60">: <expr><name><name pos:line="6303" pos:column="62">pOp<pos:position pos:line="6303" pos:column="65"/></name><operator pos:line="6303" pos:column="65">-&gt;<pos:position pos:line="6303" pos:column="70"/></operator><name pos:line="6303" pos:column="67">p5<pos:position pos:line="6303" pos:column="69"/></name></name></expr></else></ternary><operator pos:line="6303" pos:column="69">)<pos:position pos:line="6303" pos:column="70"/></operator></expr>;<pos:position pos:line="6303" pos:column="71"/></expr_stmt>
      }<pos:position pos:line="6304" pos:column="8"/></block></else></if>
    }<pos:position pos:line="6305" pos:column="6"/></block></then><else pos:line="6305" pos:column="6">else<block pos:line="6305" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="6306" pos:column="7">p<pos:position pos:line="6306" pos:column="8"/></name><operator pos:line="6306" pos:column="8">-&gt;<pos:position pos:line="6306" pos:column="13"/></operator><name pos:line="6306" pos:column="10">nChange<pos:position pos:line="6306" pos:column="17"/></name></name><operator pos:line="6306" pos:column="17">++<pos:position pos:line="6306" pos:column="19"/></operator></expr>;<pos:position pos:line="6306" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="6307" pos:column="6"/></block></else></if>
    <if pos:line="6308" pos:column="5">if<condition pos:line="6308" pos:column="7">( <expr><name pos:line="6308" pos:column="9">rc<pos:position pos:line="6308" pos:column="11"/></name></expr> )<pos:position pos:line="6308" pos:column="13"/></condition><then pos:line="6308" pos:column="13"> <block type="pseudo"><goto pos:line="6308" pos:column="14">goto <name pos:line="6308" pos:column="19">abort_due_to_error<pos:position pos:line="6308" pos:column="37"/></name>;<pos:position pos:line="6308" pos:column="38"/></goto></block></then></if>
  }<pos:position pos:line="6309" pos:column="4"/></block></then></if>
  <break pos:line="6310" pos:column="3">break;<pos:position pos:line="6310" pos:column="9"/></break>
}<pos:position pos:line="6311" pos:column="2"/></block>
<cpp:endif pos:line="6312" pos:column="1">#<cpp:directive pos:line="6312" pos:column="2">endif<pos:position pos:line="6312" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6312" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="6314" pos:column="1">#<cpp:directive pos:line="6314" pos:column="2">ifndef<pos:position pos:line="6314" pos:column="8"/></cpp:directive>  <name pos:line="6314" pos:column="10">SQLITE_OMIT_PAGER_PRAGMAS<pos:position pos:line="6314" pos:column="35"/></name></cpp:ifndef>
<comment type="block" pos:line="6315" pos:column="1">/* Opcode: Pagecount P1 P2 * * *
**
** Write the current number of pages in database P1 to memory cell P2.
*/</comment>
<case pos:line="6319" pos:column="1">case <expr><name pos:line="6319" pos:column="6">OP_Pagecount<pos:position pos:line="6319" pos:column="18"/></name></expr>:<pos:position pos:line="6319" pos:column="19"/></case> <block pos:line="6319" pos:column="20">{            <comment type="block" pos:line="6319" pos:column="33">/* out2 */</comment>
  <expr_stmt><expr><name pos:line="6320" pos:column="3">pOut<pos:position pos:line="6320" pos:column="7"/></name> <operator pos:line="6320" pos:column="8">=<pos:position pos:line="6320" pos:column="9"/></operator> <call><name pos:line="6320" pos:column="10">out2Prerelease<pos:position pos:line="6320" pos:column="24"/></name><argument_list pos:line="6320" pos:column="24">(<argument><expr><name pos:line="6320" pos:column="25">p<pos:position pos:line="6320" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="6320" pos:column="28">pOp<pos:position pos:line="6320" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6320" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6320" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6321" pos:column="3">pOut<pos:position pos:line="6321" pos:column="7"/></name><operator pos:line="6321" pos:column="7">-&gt;<pos:position pos:line="6321" pos:column="12"/></operator><name pos:line="6321" pos:column="9">u<pos:position pos:line="6321" pos:column="10"/></name><operator pos:line="6321" pos:column="10">.<pos:position pos:line="6321" pos:column="11"/></operator><name pos:line="6321" pos:column="11">i<pos:position pos:line="6321" pos:column="12"/></name></name> <operator pos:line="6321" pos:column="13">=<pos:position pos:line="6321" pos:column="14"/></operator> <call><name pos:line="6321" pos:column="15">sqlite3BtreeLastPage<pos:position pos:line="6321" pos:column="35"/></name><argument_list pos:line="6321" pos:column="35">(<argument><expr><name><name pos:line="6321" pos:column="36">db<pos:position pos:line="6321" pos:column="38"/></name><operator pos:line="6321" pos:column="38">-&gt;<pos:position pos:line="6321" pos:column="43"/></operator><name pos:line="6321" pos:column="40">aDb<pos:position pos:line="6321" pos:column="43"/></name><index pos:line="6321" pos:column="43">[<expr><name><name pos:line="6321" pos:column="44">pOp<pos:position pos:line="6321" pos:column="47"/></name><operator pos:line="6321" pos:column="47">-&gt;<pos:position pos:line="6321" pos:column="52"/></operator><name pos:line="6321" pos:column="49">p1<pos:position pos:line="6321" pos:column="51"/></name></name></expr>]<pos:position pos:line="6321" pos:column="52"/></index></name><operator pos:line="6321" pos:column="52">.<pos:position pos:line="6321" pos:column="53"/></operator><name pos:line="6321" pos:column="53">pBt<pos:position pos:line="6321" pos:column="56"/></name></expr></argument>)<pos:position pos:line="6321" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6321" pos:column="58"/></expr_stmt>
  <break pos:line="6322" pos:column="3">break;<pos:position pos:line="6322" pos:column="9"/></break>
}<pos:position pos:line="6323" pos:column="2"/></block>
<cpp:endif pos:line="6324" pos:column="1">#<cpp:directive pos:line="6324" pos:column="2">endif<pos:position pos:line="6324" pos:column="7"/></cpp:directive></cpp:endif>


<cpp:ifndef pos:line="6327" pos:column="1">#<cpp:directive pos:line="6327" pos:column="2">ifndef<pos:position pos:line="6327" pos:column="8"/></cpp:directive>  <name pos:line="6327" pos:column="10">SQLITE_OMIT_PAGER_PRAGMAS<pos:position pos:line="6327" pos:column="35"/></name></cpp:ifndef>
<comment type="block" pos:line="6328" pos:column="1">/* Opcode: MaxPgcnt P1 P2 P3 * *
**
** Try to set the maximum page count for database P1 to the value in P3.
** Do not let the maximum page count fall below the current page count and
** do not change the maximum page count value if P3==0.
**
** Store the maximum page count after the change in register P2.
*/</comment>
<case pos:line="6336" pos:column="1">case <expr><name pos:line="6336" pos:column="6">OP_MaxPgcnt<pos:position pos:line="6336" pos:column="17"/></name></expr>:<pos:position pos:line="6336" pos:column="18"/></case> <block pos:line="6336" pos:column="19">{            <comment type="block" pos:line="6336" pos:column="32">/* out2 */</comment>
  <decl_stmt><decl><type><name pos:line="6337" pos:column="3">unsigned<pos:position pos:line="6337" pos:column="11"/></name> <name pos:line="6337" pos:column="12">int<pos:position pos:line="6337" pos:column="15"/></name></type> <name pos:line="6337" pos:column="16">newMax<pos:position pos:line="6337" pos:column="22"/></name></decl>;<pos:position pos:line="6337" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6338" pos:column="3">Btree<pos:position pos:line="6338" pos:column="8"/></name> <modifier pos:line="6338" pos:column="9">*<pos:position pos:line="6338" pos:column="10"/></modifier></type><name pos:line="6338" pos:column="10">pBt<pos:position pos:line="6338" pos:column="13"/></name></decl>;<pos:position pos:line="6338" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6340" pos:column="3">pOut<pos:position pos:line="6340" pos:column="7"/></name> <operator pos:line="6340" pos:column="8">=<pos:position pos:line="6340" pos:column="9"/></operator> <call><name pos:line="6340" pos:column="10">out2Prerelease<pos:position pos:line="6340" pos:column="24"/></name><argument_list pos:line="6340" pos:column="24">(<argument><expr><name pos:line="6340" pos:column="25">p<pos:position pos:line="6340" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="6340" pos:column="28">pOp<pos:position pos:line="6340" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6340" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6340" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6341" pos:column="3">pBt<pos:position pos:line="6341" pos:column="6"/></name> <operator pos:line="6341" pos:column="7">=<pos:position pos:line="6341" pos:column="8"/></operator> <name><name pos:line="6341" pos:column="9">db<pos:position pos:line="6341" pos:column="11"/></name><operator pos:line="6341" pos:column="11">-&gt;<pos:position pos:line="6341" pos:column="16"/></operator><name pos:line="6341" pos:column="13">aDb<pos:position pos:line="6341" pos:column="16"/></name><index pos:line="6341" pos:column="16">[<expr><name><name pos:line="6341" pos:column="17">pOp<pos:position pos:line="6341" pos:column="20"/></name><operator pos:line="6341" pos:column="20">-&gt;<pos:position pos:line="6341" pos:column="25"/></operator><name pos:line="6341" pos:column="22">p1<pos:position pos:line="6341" pos:column="24"/></name></name></expr>]<pos:position pos:line="6341" pos:column="25"/></index></name><operator pos:line="6341" pos:column="25">.<pos:position pos:line="6341" pos:column="26"/></operator><name pos:line="6341" pos:column="26">pBt<pos:position pos:line="6341" pos:column="29"/></name></expr>;<pos:position pos:line="6341" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6342" pos:column="3">newMax<pos:position pos:line="6342" pos:column="9"/></name> <operator pos:line="6342" pos:column="10">=<pos:position pos:line="6342" pos:column="11"/></operator> <literal type="number" pos:line="6342" pos:column="12">0<pos:position pos:line="6342" pos:column="13"/></literal></expr>;<pos:position pos:line="6342" pos:column="14"/></expr_stmt>
  <if pos:line="6343" pos:column="3">if<condition pos:line="6343" pos:column="5">( <expr><name><name pos:line="6343" pos:column="7">pOp<pos:position pos:line="6343" pos:column="10"/></name><operator pos:line="6343" pos:column="10">-&gt;<pos:position pos:line="6343" pos:column="15"/></operator><name pos:line="6343" pos:column="12">p3<pos:position pos:line="6343" pos:column="14"/></name></name></expr> )<pos:position pos:line="6343" pos:column="16"/></condition><then><block pos:line="6343" pos:column="16">{
    <expr_stmt><expr><name pos:line="6344" pos:column="5">newMax<pos:position pos:line="6344" pos:column="11"/></name> <operator pos:line="6344" pos:column="12">=<pos:position pos:line="6344" pos:column="13"/></operator> <call><name pos:line="6344" pos:column="14">sqlite3BtreeLastPage<pos:position pos:line="6344" pos:column="34"/></name><argument_list pos:line="6344" pos:column="34">(<argument><expr><name pos:line="6344" pos:column="35">pBt<pos:position pos:line="6344" pos:column="38"/></name></expr></argument>)<pos:position pos:line="6344" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="6344" pos:column="40"/></expr_stmt>
    <if pos:line="6345" pos:column="5">if<condition pos:line="6345" pos:column="7">( <expr><name pos:line="6345" pos:column="9">newMax<pos:position pos:line="6345" pos:column="15"/></name> <operator pos:line="6345" pos:column="16">&lt;<pos:position pos:line="6345" pos:column="20"/></operator> <operator pos:line="6345" pos:column="18">(<pos:position pos:line="6345" pos:column="19"/></operator><name pos:line="6345" pos:column="19">unsigned<pos:position pos:line="6345" pos:column="27"/></name><operator pos:line="6345" pos:column="27">)<pos:position pos:line="6345" pos:column="28"/></operator><name><name pos:line="6345" pos:column="28">pOp<pos:position pos:line="6345" pos:column="31"/></name><operator pos:line="6345" pos:column="31">-&gt;<pos:position pos:line="6345" pos:column="36"/></operator><name pos:line="6345" pos:column="33">p3<pos:position pos:line="6345" pos:column="35"/></name></name></expr> )<pos:position pos:line="6345" pos:column="37"/></condition><then pos:line="6345" pos:column="37"> <block type="pseudo"><expr_stmt><expr><name pos:line="6345" pos:column="38">newMax<pos:position pos:line="6345" pos:column="44"/></name> <operator pos:line="6345" pos:column="45">=<pos:position pos:line="6345" pos:column="46"/></operator> <operator pos:line="6345" pos:column="47">(<pos:position pos:line="6345" pos:column="48"/></operator><name pos:line="6345" pos:column="48">unsigned<pos:position pos:line="6345" pos:column="56"/></name><operator pos:line="6345" pos:column="56">)<pos:position pos:line="6345" pos:column="57"/></operator><name><name pos:line="6345" pos:column="57">pOp<pos:position pos:line="6345" pos:column="60"/></name><operator pos:line="6345" pos:column="60">-&gt;<pos:position pos:line="6345" pos:column="65"/></operator><name pos:line="6345" pos:column="62">p3<pos:position pos:line="6345" pos:column="64"/></name></name></expr>;<pos:position pos:line="6345" pos:column="65"/></expr_stmt></block></then></if>
  }<pos:position pos:line="6346" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="6347" pos:column="3">pOut<pos:position pos:line="6347" pos:column="7"/></name><operator pos:line="6347" pos:column="7">-&gt;<pos:position pos:line="6347" pos:column="12"/></operator><name pos:line="6347" pos:column="9">u<pos:position pos:line="6347" pos:column="10"/></name><operator pos:line="6347" pos:column="10">.<pos:position pos:line="6347" pos:column="11"/></operator><name pos:line="6347" pos:column="11">i<pos:position pos:line="6347" pos:column="12"/></name></name> <operator pos:line="6347" pos:column="13">=<pos:position pos:line="6347" pos:column="14"/></operator> <call><name pos:line="6347" pos:column="15">sqlite3BtreeMaxPageCount<pos:position pos:line="6347" pos:column="39"/></name><argument_list pos:line="6347" pos:column="39">(<argument><expr><name pos:line="6347" pos:column="40">pBt<pos:position pos:line="6347" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="6347" pos:column="45">newMax<pos:position pos:line="6347" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6347" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6347" pos:column="53"/></expr_stmt>
  <break pos:line="6348" pos:column="3">break;<pos:position pos:line="6348" pos:column="9"/></break>
}<pos:position pos:line="6349" pos:column="2"/></block>
<cpp:endif pos:line="6350" pos:column="1">#<cpp:directive pos:line="6350" pos:column="2">endif<pos:position pos:line="6350" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="6352" pos:column="1">/* Opcode: Function0 P1 P2 P3 P4 P5
** Synopsis: r[P3]=func(r[P2@P5])
**
** Invoke a user function (P4 is a pointer to a FuncDef object that
** defines the function) with P5 arguments taken from register P2 and
** successors.  The result of the function is stored in register P3.
** Register P3 must not be one of the function inputs.
**
** P1 is a 32-bit bitmask indicating whether or not each argument to the 
** function was determined to be constant at compile time. If the first
** argument was constant then bit 0 of P1 is set. This is used to determine
** whether meta data associated with a user function argument using the
** sqlite3_set_auxdata() API may be safely retained until the next
** invocation of this opcode.
**
** See also: Function, AggStep, AggFinal
*/</comment>
<comment type="block" pos:line="6369" pos:column="1">/* Opcode: Function P1 P2 P3 P4 P5
** Synopsis: r[P3]=func(r[P2@P5])
**
** Invoke a user function (P4 is a pointer to an sqlite3_context object that
** contains a pointer to the function to be run) with P5 arguments taken
** from register P2 and successors.  The result of the function is stored
** in register P3.  Register P3 must not be one of the function inputs.
**
** P1 is a 32-bit bitmask indicating whether or not each argument to the 
** function was determined to be constant at compile time. If the first
** argument was constant then bit 0 of P1 is set. This is used to determine
** whether meta data associated with a user function argument using the
** sqlite3_set_auxdata() API may be safely retained until the next
** invocation of this opcode.
**
** SQL functions are initially coded as OP_Function0 with P4 pointing
** to a FuncDef object.  But on first evaluation, the P4 operand is
** automatically converted into an sqlite3_context object and the operation
** changed to this OP_Function opcode.  In this way, the initialization of
** the sqlite3_context object occurs only once, rather than once for each
** evaluation of the function.
**
** See also: Function0, AggStep, AggFinal
*/</comment>
<case pos:line="6393" pos:column="1">case <expr><name pos:line="6393" pos:column="6">OP_PureFunc0<pos:position pos:line="6393" pos:column="18"/></name></expr>:<pos:position pos:line="6393" pos:column="19"/></case>
<case pos:line="6394" pos:column="1">case <expr><name pos:line="6394" pos:column="6">OP_Function0<pos:position pos:line="6394" pos:column="18"/></name></expr>:<pos:position pos:line="6394" pos:column="19"/></case> <block pos:line="6394" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="6395" pos:column="3">int<pos:position pos:line="6395" pos:column="6"/></name></type> <name pos:line="6395" pos:column="7">n<pos:position pos:line="6395" pos:column="8"/></name></decl>;<pos:position pos:line="6395" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6396" pos:column="3">sqlite3_context<pos:position pos:line="6396" pos:column="18"/></name> <modifier pos:line="6396" pos:column="19">*<pos:position pos:line="6396" pos:column="20"/></modifier></type><name pos:line="6396" pos:column="20">pCtx<pos:position pos:line="6396" pos:column="24"/></name></decl>;<pos:position pos:line="6396" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6398" pos:column="3">assert<pos:position pos:line="6398" pos:column="9"/></name><argument_list pos:line="6398" pos:column="9">( <argument><expr><name><name pos:line="6398" pos:column="11">pOp<pos:position pos:line="6398" pos:column="14"/></name><operator pos:line="6398" pos:column="14">-&gt;<pos:position pos:line="6398" pos:column="19"/></operator><name pos:line="6398" pos:column="16">p4type<pos:position pos:line="6398" pos:column="22"/></name></name><operator pos:line="6398" pos:column="22">==<pos:position pos:line="6398" pos:column="24"/></operator><name pos:line="6398" pos:column="24">P4_FUNCDEF<pos:position pos:line="6398" pos:column="34"/></name></expr></argument> )<pos:position pos:line="6398" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6398" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6399" pos:column="3">n<pos:position pos:line="6399" pos:column="4"/></name> <operator pos:line="6399" pos:column="5">=<pos:position pos:line="6399" pos:column="6"/></operator> <name><name pos:line="6399" pos:column="7">pOp<pos:position pos:line="6399" pos:column="10"/></name><operator pos:line="6399" pos:column="10">-&gt;<pos:position pos:line="6399" pos:column="15"/></operator><name pos:line="6399" pos:column="12">p5<pos:position pos:line="6399" pos:column="14"/></name></name></expr>;<pos:position pos:line="6399" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6400" pos:column="3">assert<pos:position pos:line="6400" pos:column="9"/></name><argument_list pos:line="6400" pos:column="9">( <argument><expr><name><name pos:line="6400" pos:column="11">pOp<pos:position pos:line="6400" pos:column="14"/></name><operator pos:line="6400" pos:column="14">-&gt;<pos:position pos:line="6400" pos:column="19"/></operator><name pos:line="6400" pos:column="16">p3<pos:position pos:line="6400" pos:column="18"/></name></name><operator pos:line="6400" pos:column="18">&gt;<pos:position pos:line="6400" pos:column="22"/></operator><literal type="number" pos:line="6400" pos:column="19">0<pos:position pos:line="6400" pos:column="20"/></literal> <operator pos:line="6400" pos:column="21">&amp;&amp;<pos:position pos:line="6400" pos:column="31"/></operator> <name><name pos:line="6400" pos:column="24">pOp<pos:position pos:line="6400" pos:column="27"/></name><operator pos:line="6400" pos:column="27">-&gt;<pos:position pos:line="6400" pos:column="32"/></operator><name pos:line="6400" pos:column="29">p3<pos:position pos:line="6400" pos:column="31"/></name></name><operator pos:line="6400" pos:column="31">&lt;=<pos:position pos:line="6400" pos:column="36"/></operator><operator pos:line="6400" pos:column="33">(<pos:position pos:line="6400" pos:column="34"/></operator><name><name pos:line="6400" pos:column="34">p<pos:position pos:line="6400" pos:column="35"/></name><operator pos:line="6400" pos:column="35">-&gt;<pos:position pos:line="6400" pos:column="40"/></operator><name pos:line="6400" pos:column="37">nMem<pos:position pos:line="6400" pos:column="41"/></name></name><operator pos:line="6400" pos:column="41">+<pos:position pos:line="6400" pos:column="42"/></operator><literal type="number" pos:line="6400" pos:column="42">1<pos:position pos:line="6400" pos:column="43"/></literal> <operator pos:line="6400" pos:column="44">-<pos:position pos:line="6400" pos:column="45"/></operator> <name><name pos:line="6400" pos:column="46">p<pos:position pos:line="6400" pos:column="47"/></name><operator pos:line="6400" pos:column="47">-&gt;<pos:position pos:line="6400" pos:column="52"/></operator><name pos:line="6400" pos:column="49">nCursor<pos:position pos:line="6400" pos:column="56"/></name></name><operator pos:line="6400" pos:column="56">)<pos:position pos:line="6400" pos:column="57"/></operator></expr></argument> )<pos:position pos:line="6400" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="6400" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6401" pos:column="3">assert<pos:position pos:line="6401" pos:column="9"/></name><argument_list pos:line="6401" pos:column="9">( <argument><expr><name pos:line="6401" pos:column="11">n<pos:position pos:line="6401" pos:column="12"/></name><operator pos:line="6401" pos:column="12">==<pos:position pos:line="6401" pos:column="14"/></operator><literal type="number" pos:line="6401" pos:column="14">0<pos:position pos:line="6401" pos:column="15"/></literal> <operator pos:line="6401" pos:column="16">||<pos:position pos:line="6401" pos:column="18"/></operator> <operator pos:line="6401" pos:column="19">(<pos:position pos:line="6401" pos:column="20"/></operator><name><name pos:line="6401" pos:column="20">pOp<pos:position pos:line="6401" pos:column="23"/></name><operator pos:line="6401" pos:column="23">-&gt;<pos:position pos:line="6401" pos:column="28"/></operator><name pos:line="6401" pos:column="25">p2<pos:position pos:line="6401" pos:column="27"/></name></name><operator pos:line="6401" pos:column="27">&gt;<pos:position pos:line="6401" pos:column="31"/></operator><literal type="number" pos:line="6401" pos:column="28">0<pos:position pos:line="6401" pos:column="29"/></literal> <operator pos:line="6401" pos:column="30">&amp;&amp;<pos:position pos:line="6401" pos:column="40"/></operator> <name><name pos:line="6401" pos:column="33">pOp<pos:position pos:line="6401" pos:column="36"/></name><operator pos:line="6401" pos:column="36">-&gt;<pos:position pos:line="6401" pos:column="41"/></operator><name pos:line="6401" pos:column="38">p2<pos:position pos:line="6401" pos:column="40"/></name></name><operator pos:line="6401" pos:column="40">+<pos:position pos:line="6401" pos:column="41"/></operator><name pos:line="6401" pos:column="41">n<pos:position pos:line="6401" pos:column="42"/></name><operator pos:line="6401" pos:column="42">&lt;=<pos:position pos:line="6401" pos:column="47"/></operator><operator pos:line="6401" pos:column="44">(<pos:position pos:line="6401" pos:column="45"/></operator><name><name pos:line="6401" pos:column="45">p<pos:position pos:line="6401" pos:column="46"/></name><operator pos:line="6401" pos:column="46">-&gt;<pos:position pos:line="6401" pos:column="51"/></operator><name pos:line="6401" pos:column="48">nMem<pos:position pos:line="6401" pos:column="52"/></name></name><operator pos:line="6401" pos:column="52">+<pos:position pos:line="6401" pos:column="53"/></operator><literal type="number" pos:line="6401" pos:column="53">1<pos:position pos:line="6401" pos:column="54"/></literal> <operator pos:line="6401" pos:column="55">-<pos:position pos:line="6401" pos:column="56"/></operator> <name><name pos:line="6401" pos:column="57">p<pos:position pos:line="6401" pos:column="58"/></name><operator pos:line="6401" pos:column="58">-&gt;<pos:position pos:line="6401" pos:column="63"/></operator><name pos:line="6401" pos:column="60">nCursor<pos:position pos:line="6401" pos:column="67"/></name></name><operator pos:line="6401" pos:column="67">)<pos:position pos:line="6401" pos:column="68"/></operator><operator pos:line="6401" pos:column="68">+<pos:position pos:line="6401" pos:column="69"/></operator><literal type="number" pos:line="6401" pos:column="69">1<pos:position pos:line="6401" pos:column="70"/></literal><operator pos:line="6401" pos:column="70">)<pos:position pos:line="6401" pos:column="71"/></operator></expr></argument> )<pos:position pos:line="6401" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="6401" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6402" pos:column="3">assert<pos:position pos:line="6402" pos:column="9"/></name><argument_list pos:line="6402" pos:column="9">( <argument><expr><name><name pos:line="6402" pos:column="11">pOp<pos:position pos:line="6402" pos:column="14"/></name><operator pos:line="6402" pos:column="14">-&gt;<pos:position pos:line="6402" pos:column="19"/></operator><name pos:line="6402" pos:column="16">p3<pos:position pos:line="6402" pos:column="18"/></name></name><operator pos:line="6402" pos:column="18">&lt;<pos:position pos:line="6402" pos:column="22"/></operator><name><name pos:line="6402" pos:column="19">pOp<pos:position pos:line="6402" pos:column="22"/></name><operator pos:line="6402" pos:column="22">-&gt;<pos:position pos:line="6402" pos:column="27"/></operator><name pos:line="6402" pos:column="24">p2<pos:position pos:line="6402" pos:column="26"/></name></name> <operator pos:line="6402" pos:column="27">||<pos:position pos:line="6402" pos:column="29"/></operator> <name><name pos:line="6402" pos:column="30">pOp<pos:position pos:line="6402" pos:column="33"/></name><operator pos:line="6402" pos:column="33">-&gt;<pos:position pos:line="6402" pos:column="38"/></operator><name pos:line="6402" pos:column="35">p3<pos:position pos:line="6402" pos:column="37"/></name></name><operator pos:line="6402" pos:column="37">&gt;=<pos:position pos:line="6402" pos:column="42"/></operator><name><name pos:line="6402" pos:column="39">pOp<pos:position pos:line="6402" pos:column="42"/></name><operator pos:line="6402" pos:column="42">-&gt;<pos:position pos:line="6402" pos:column="47"/></operator><name pos:line="6402" pos:column="44">p2<pos:position pos:line="6402" pos:column="46"/></name></name><operator pos:line="6402" pos:column="46">+<pos:position pos:line="6402" pos:column="47"/></operator><name pos:line="6402" pos:column="47">n<pos:position pos:line="6402" pos:column="48"/></name></expr></argument> )<pos:position pos:line="6402" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6402" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6403" pos:column="3">pCtx<pos:position pos:line="6403" pos:column="7"/></name> <operator pos:line="6403" pos:column="8">=<pos:position pos:line="6403" pos:column="9"/></operator> <call><name pos:line="6403" pos:column="10">sqlite3DbMallocRawNN<pos:position pos:line="6403" pos:column="30"/></name><argument_list pos:line="6403" pos:column="30">(<argument><expr><name pos:line="6403" pos:column="31">db<pos:position pos:line="6403" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="6403" pos:column="35">sizeof<argument_list pos:line="6403" pos:column="41">(<argument><expr><operator pos:line="6403" pos:column="42">*<pos:position pos:line="6403" pos:column="43"/></operator><name pos:line="6403" pos:column="43">pCtx<pos:position pos:line="6403" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6403" pos:column="48"/></argument_list></sizeof> <operator pos:line="6403" pos:column="49">+<pos:position pos:line="6403" pos:column="50"/></operator> <operator pos:line="6403" pos:column="51">(<pos:position pos:line="6403" pos:column="52"/></operator><name pos:line="6403" pos:column="52">n<pos:position pos:line="6403" pos:column="53"/></name><operator pos:line="6403" pos:column="53">-<pos:position pos:line="6403" pos:column="54"/></operator><literal type="number" pos:line="6403" pos:column="54">1<pos:position pos:line="6403" pos:column="55"/></literal><operator pos:line="6403" pos:column="55">)<pos:position pos:line="6403" pos:column="56"/></operator><operator pos:line="6403" pos:column="56">*<pos:position pos:line="6403" pos:column="57"/></operator><sizeof pos:line="6403" pos:column="57">sizeof<argument_list pos:line="6403" pos:column="63">(<argument><expr><name pos:line="6403" pos:column="64">sqlite3_value<pos:position pos:line="6403" pos:column="77"/></name><operator pos:line="6403" pos:column="77">*<pos:position pos:line="6403" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="6403" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6403" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="6403" pos:column="81"/></expr_stmt>
  <if pos:line="6404" pos:column="3">if<condition pos:line="6404" pos:column="5">( <expr><name pos:line="6404" pos:column="7">pCtx<pos:position pos:line="6404" pos:column="11"/></name><operator pos:line="6404" pos:column="11">==<pos:position pos:line="6404" pos:column="13"/></operator><literal type="number" pos:line="6404" pos:column="13">0<pos:position pos:line="6404" pos:column="14"/></literal></expr> )<pos:position pos:line="6404" pos:column="16"/></condition><then pos:line="6404" pos:column="16"> <block type="pseudo"><goto pos:line="6404" pos:column="17">goto <name pos:line="6404" pos:column="22">no_mem<pos:position pos:line="6404" pos:column="28"/></name>;<pos:position pos:line="6404" pos:column="29"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="6405" pos:column="3">pCtx<pos:position pos:line="6405" pos:column="7"/></name><operator pos:line="6405" pos:column="7">-&gt;<pos:position pos:line="6405" pos:column="12"/></operator><name pos:line="6405" pos:column="9">pOut<pos:position pos:line="6405" pos:column="13"/></name></name> <operator pos:line="6405" pos:column="14">=<pos:position pos:line="6405" pos:column="15"/></operator> <literal type="number" pos:line="6405" pos:column="16">0<pos:position pos:line="6405" pos:column="17"/></literal></expr>;<pos:position pos:line="6405" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6406" pos:column="3">pCtx<pos:position pos:line="6406" pos:column="7"/></name><operator pos:line="6406" pos:column="7">-&gt;<pos:position pos:line="6406" pos:column="12"/></operator><name pos:line="6406" pos:column="9">pFunc<pos:position pos:line="6406" pos:column="14"/></name></name> <operator pos:line="6406" pos:column="15">=<pos:position pos:line="6406" pos:column="16"/></operator> <name><name pos:line="6406" pos:column="17">pOp<pos:position pos:line="6406" pos:column="20"/></name><operator pos:line="6406" pos:column="20">-&gt;<pos:position pos:line="6406" pos:column="25"/></operator><name pos:line="6406" pos:column="22">p4<pos:position pos:line="6406" pos:column="24"/></name><operator pos:line="6406" pos:column="24">.<pos:position pos:line="6406" pos:column="25"/></operator><name pos:line="6406" pos:column="25">pFunc<pos:position pos:line="6406" pos:column="30"/></name></name></expr>;<pos:position pos:line="6406" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6407" pos:column="3">pCtx<pos:position pos:line="6407" pos:column="7"/></name><operator pos:line="6407" pos:column="7">-&gt;<pos:position pos:line="6407" pos:column="12"/></operator><name pos:line="6407" pos:column="9">iOp<pos:position pos:line="6407" pos:column="12"/></name></name> <operator pos:line="6407" pos:column="13">=<pos:position pos:line="6407" pos:column="14"/></operator> <call pos:line="6407" pos:column="15">(<name pos:line="6407" pos:column="16">int<pos:position pos:line="6407" pos:column="19"/></name>)<argument_list pos:line="6407" pos:column="20">(<argument><expr><name pos:line="6407" pos:column="21">pOp<pos:position pos:line="6407" pos:column="24"/></name> <operator pos:line="6407" pos:column="25">-<pos:position pos:line="6407" pos:column="26"/></operator> <name pos:line="6407" pos:column="27">aOp<pos:position pos:line="6407" pos:column="30"/></name></expr></argument>)<pos:position pos:line="6407" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6407" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6408" pos:column="3">pCtx<pos:position pos:line="6408" pos:column="7"/></name><operator pos:line="6408" pos:column="7">-&gt;<pos:position pos:line="6408" pos:column="12"/></operator><name pos:line="6408" pos:column="9">pVdbe<pos:position pos:line="6408" pos:column="14"/></name></name> <operator pos:line="6408" pos:column="15">=<pos:position pos:line="6408" pos:column="16"/></operator> <name pos:line="6408" pos:column="17">p<pos:position pos:line="6408" pos:column="18"/></name></expr>;<pos:position pos:line="6408" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6409" pos:column="3">pCtx<pos:position pos:line="6409" pos:column="7"/></name><operator pos:line="6409" pos:column="7">-&gt;<pos:position pos:line="6409" pos:column="12"/></operator><name pos:line="6409" pos:column="9">argc<pos:position pos:line="6409" pos:column="13"/></name></name> <operator pos:line="6409" pos:column="14">=<pos:position pos:line="6409" pos:column="15"/></operator> <name pos:line="6409" pos:column="16">n<pos:position pos:line="6409" pos:column="17"/></name></expr>;<pos:position pos:line="6409" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6410" pos:column="3">pOp<pos:position pos:line="6410" pos:column="6"/></name><operator pos:line="6410" pos:column="6">-&gt;<pos:position pos:line="6410" pos:column="11"/></operator><name pos:line="6410" pos:column="8">p4type<pos:position pos:line="6410" pos:column="14"/></name></name> <operator pos:line="6410" pos:column="15">=<pos:position pos:line="6410" pos:column="16"/></operator> <name pos:line="6410" pos:column="17">P4_FUNCCTX<pos:position pos:line="6410" pos:column="27"/></name></expr>;<pos:position pos:line="6410" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6411" pos:column="3">pOp<pos:position pos:line="6411" pos:column="6"/></name><operator pos:line="6411" pos:column="6">-&gt;<pos:position pos:line="6411" pos:column="11"/></operator><name pos:line="6411" pos:column="8">p4<pos:position pos:line="6411" pos:column="10"/></name><operator pos:line="6411" pos:column="10">.<pos:position pos:line="6411" pos:column="11"/></operator><name pos:line="6411" pos:column="11">pCtx<pos:position pos:line="6411" pos:column="15"/></name></name> <operator pos:line="6411" pos:column="16">=<pos:position pos:line="6411" pos:column="17"/></operator> <name pos:line="6411" pos:column="18">pCtx<pos:position pos:line="6411" pos:column="22"/></name></expr>;<pos:position pos:line="6411" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6412" pos:column="3">assert<pos:position pos:line="6412" pos:column="9"/></name><argument_list pos:line="6412" pos:column="9">( <argument><expr><name pos:line="6412" pos:column="11">OP_PureFunc<pos:position pos:line="6412" pos:column="22"/></name> <operator pos:line="6412" pos:column="23">==<pos:position pos:line="6412" pos:column="25"/></operator> <name pos:line="6412" pos:column="26">OP_PureFunc0<pos:position pos:line="6412" pos:column="38"/></name><operator pos:line="6412" pos:column="38">+<pos:position pos:line="6412" pos:column="39"/></operator><literal type="number" pos:line="6412" pos:column="39">2<pos:position pos:line="6412" pos:column="40"/></literal></expr></argument> )<pos:position pos:line="6412" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="6412" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6413" pos:column="3">assert<pos:position pos:line="6413" pos:column="9"/></name><argument_list pos:line="6413" pos:column="9">( <argument><expr><name pos:line="6413" pos:column="11">OP_Function<pos:position pos:line="6413" pos:column="22"/></name> <operator pos:line="6413" pos:column="23">==<pos:position pos:line="6413" pos:column="25"/></operator> <name pos:line="6413" pos:column="26">OP_Function0<pos:position pos:line="6413" pos:column="38"/></name><operator pos:line="6413" pos:column="38">+<pos:position pos:line="6413" pos:column="39"/></operator><literal type="number" pos:line="6413" pos:column="39">2<pos:position pos:line="6413" pos:column="40"/></literal></expr></argument> )<pos:position pos:line="6413" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="6413" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6414" pos:column="3">pOp<pos:position pos:line="6414" pos:column="6"/></name><operator pos:line="6414" pos:column="6">-&gt;<pos:position pos:line="6414" pos:column="11"/></operator><name pos:line="6414" pos:column="8">opcode<pos:position pos:line="6414" pos:column="14"/></name></name> <operator pos:line="6414" pos:column="15">+=<pos:position pos:line="6414" pos:column="17"/></operator> <literal type="number" pos:line="6414" pos:column="18">2<pos:position pos:line="6414" pos:column="19"/></literal></expr>;<pos:position pos:line="6414" pos:column="20"/></expr_stmt>
  <comment type="block" pos:line="6415" pos:column="3">/* Fall through into OP_Function */</comment>
}<pos:position pos:line="6416" pos:column="2"/></block>
<case pos:line="6417" pos:column="1">case <expr><name pos:line="6417" pos:column="6">OP_PureFunc<pos:position pos:line="6417" pos:column="17"/></name></expr>:<pos:position pos:line="6417" pos:column="18"/></case>
<case pos:line="6418" pos:column="1">case <expr><name pos:line="6418" pos:column="6">OP_Function<pos:position pos:line="6418" pos:column="17"/></name></expr>:<pos:position pos:line="6418" pos:column="18"/></case> <block pos:line="6418" pos:column="19">{
  <decl_stmt><decl><type><name pos:line="6419" pos:column="3">int<pos:position pos:line="6419" pos:column="6"/></name></type> <name pos:line="6419" pos:column="7">i<pos:position pos:line="6419" pos:column="8"/></name></decl>;<pos:position pos:line="6419" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6420" pos:column="3">sqlite3_context<pos:position pos:line="6420" pos:column="18"/></name> <modifier pos:line="6420" pos:column="19">*<pos:position pos:line="6420" pos:column="20"/></modifier></type><name pos:line="6420" pos:column="20">pCtx<pos:position pos:line="6420" pos:column="24"/></name></decl>;<pos:position pos:line="6420" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6422" pos:column="3">assert<pos:position pos:line="6422" pos:column="9"/></name><argument_list pos:line="6422" pos:column="9">( <argument><expr><name><name pos:line="6422" pos:column="11">pOp<pos:position pos:line="6422" pos:column="14"/></name><operator pos:line="6422" pos:column="14">-&gt;<pos:position pos:line="6422" pos:column="19"/></operator><name pos:line="6422" pos:column="16">p4type<pos:position pos:line="6422" pos:column="22"/></name></name><operator pos:line="6422" pos:column="22">==<pos:position pos:line="6422" pos:column="24"/></operator><name pos:line="6422" pos:column="24">P4_FUNCCTX<pos:position pos:line="6422" pos:column="34"/></name></expr></argument> )<pos:position pos:line="6422" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6422" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6423" pos:column="3">pCtx<pos:position pos:line="6423" pos:column="7"/></name> <operator pos:line="6423" pos:column="8">=<pos:position pos:line="6423" pos:column="9"/></operator> <name><name pos:line="6423" pos:column="10">pOp<pos:position pos:line="6423" pos:column="13"/></name><operator pos:line="6423" pos:column="13">-&gt;<pos:position pos:line="6423" pos:column="18"/></operator><name pos:line="6423" pos:column="15">p4<pos:position pos:line="6423" pos:column="17"/></name><operator pos:line="6423" pos:column="17">.<pos:position pos:line="6423" pos:column="18"/></operator><name pos:line="6423" pos:column="18">pCtx<pos:position pos:line="6423" pos:column="22"/></name></name></expr>;<pos:position pos:line="6423" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="6425" pos:column="3">/* If this function is inside of a trigger, the register array in aMem[]
  ** might change from one evaluation to the next.  The next block of code
  ** checks to see if the register array has changed, and if so it
  ** reinitializes the relavant parts of the sqlite3_context object */</comment>
  <expr_stmt><expr><name pos:line="6429" pos:column="3">pOut<pos:position pos:line="6429" pos:column="7"/></name> <operator pos:line="6429" pos:column="8">=<pos:position pos:line="6429" pos:column="9"/></operator> <operator pos:line="6429" pos:column="10">&amp;<pos:position pos:line="6429" pos:column="15"/></operator><name><name pos:line="6429" pos:column="11">aMem<pos:position pos:line="6429" pos:column="15"/></name><index pos:line="6429" pos:column="15">[<expr><name><name pos:line="6429" pos:column="16">pOp<pos:position pos:line="6429" pos:column="19"/></name><operator pos:line="6429" pos:column="19">-&gt;<pos:position pos:line="6429" pos:column="24"/></operator><name pos:line="6429" pos:column="21">p3<pos:position pos:line="6429" pos:column="23"/></name></name></expr>]<pos:position pos:line="6429" pos:column="24"/></index></name></expr>;<pos:position pos:line="6429" pos:column="25"/></expr_stmt>
  <if pos:line="6430" pos:column="3">if<condition pos:line="6430" pos:column="5">( <expr><name><name pos:line="6430" pos:column="7">pCtx<pos:position pos:line="6430" pos:column="11"/></name><operator pos:line="6430" pos:column="11">-&gt;<pos:position pos:line="6430" pos:column="16"/></operator><name pos:line="6430" pos:column="13">pOut<pos:position pos:line="6430" pos:column="17"/></name></name> <operator pos:line="6430" pos:column="18">!=<pos:position pos:line="6430" pos:column="20"/></operator> <name pos:line="6430" pos:column="21">pOut<pos:position pos:line="6430" pos:column="25"/></name></expr> )<pos:position pos:line="6430" pos:column="27"/></condition><then><block pos:line="6430" pos:column="27">{
    <expr_stmt><expr><name><name pos:line="6431" pos:column="5">pCtx<pos:position pos:line="6431" pos:column="9"/></name><operator pos:line="6431" pos:column="9">-&gt;<pos:position pos:line="6431" pos:column="14"/></operator><name pos:line="6431" pos:column="11">pOut<pos:position pos:line="6431" pos:column="15"/></name></name> <operator pos:line="6431" pos:column="16">=<pos:position pos:line="6431" pos:column="17"/></operator> <name pos:line="6431" pos:column="18">pOut<pos:position pos:line="6431" pos:column="22"/></name></expr>;<pos:position pos:line="6431" pos:column="23"/></expr_stmt>
    <for pos:line="6432" pos:column="5">for<control pos:line="6432" pos:column="8">(<init><expr><name pos:line="6432" pos:column="9">i<pos:position pos:line="6432" pos:column="10"/></name><operator pos:line="6432" pos:column="10">=<pos:position pos:line="6432" pos:column="11"/></operator><name><name pos:line="6432" pos:column="11">pCtx<pos:position pos:line="6432" pos:column="15"/></name><operator pos:line="6432" pos:column="15">-&gt;<pos:position pos:line="6432" pos:column="20"/></operator><name pos:line="6432" pos:column="17">argc<pos:position pos:line="6432" pos:column="21"/></name></name><operator pos:line="6432" pos:column="21">-<pos:position pos:line="6432" pos:column="22"/></operator><literal type="number" pos:line="6432" pos:column="22">1<pos:position pos:line="6432" pos:column="23"/></literal></expr>;<pos:position pos:line="6432" pos:column="24"/></init> <condition><expr><name pos:line="6432" pos:column="25">i<pos:position pos:line="6432" pos:column="26"/></name><operator pos:line="6432" pos:column="26">&gt;=<pos:position pos:line="6432" pos:column="31"/></operator><literal type="number" pos:line="6432" pos:column="28">0<pos:position pos:line="6432" pos:column="29"/></literal></expr>;<pos:position pos:line="6432" pos:column="30"/></condition> <incr><expr><name pos:line="6432" pos:column="31">i<pos:position pos:line="6432" pos:column="32"/></name><operator pos:line="6432" pos:column="32">--<pos:position pos:line="6432" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="6432" pos:column="35"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="6432" pos:column="36">pCtx<pos:position pos:line="6432" pos:column="40"/></name><operator pos:line="6432" pos:column="40">-&gt;<pos:position pos:line="6432" pos:column="45"/></operator><name pos:line="6432" pos:column="42">argv<pos:position pos:line="6432" pos:column="46"/></name><index pos:line="6432" pos:column="46">[<expr><name pos:line="6432" pos:column="47">i<pos:position pos:line="6432" pos:column="48"/></name></expr>]<pos:position pos:line="6432" pos:column="49"/></index></name> <operator pos:line="6432" pos:column="50">=<pos:position pos:line="6432" pos:column="51"/></operator> <operator pos:line="6432" pos:column="52">&amp;<pos:position pos:line="6432" pos:column="57"/></operator><name><name pos:line="6432" pos:column="53">aMem<pos:position pos:line="6432" pos:column="57"/></name><index pos:line="6432" pos:column="57">[<expr><name><name pos:line="6432" pos:column="58">pOp<pos:position pos:line="6432" pos:column="61"/></name><operator pos:line="6432" pos:column="61">-&gt;<pos:position pos:line="6432" pos:column="66"/></operator><name pos:line="6432" pos:column="63">p2<pos:position pos:line="6432" pos:column="65"/></name></name><operator pos:line="6432" pos:column="65">+<pos:position pos:line="6432" pos:column="66"/></operator><name pos:line="6432" pos:column="66">i<pos:position pos:line="6432" pos:column="67"/></name></expr>]<pos:position pos:line="6432" pos:column="68"/></index></name></expr>;<pos:position pos:line="6432" pos:column="69"/></expr_stmt></block></for>
  }<pos:position pos:line="6433" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="6435" pos:column="3">memAboutToChange<pos:position pos:line="6435" pos:column="19"/></name><argument_list pos:line="6435" pos:column="19">(<argument><expr><name pos:line="6435" pos:column="20">p<pos:position pos:line="6435" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="6435" pos:column="23">pOut<pos:position pos:line="6435" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6435" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6435" pos:column="29"/></expr_stmt>
<cpp:ifdef pos:line="6436" pos:column="1">#<cpp:directive pos:line="6436" pos:column="2">ifdef<pos:position pos:line="6436" pos:column="7"/></cpp:directive> <name pos:line="6436" pos:column="8">SQLITE_DEBUG<pos:position pos:line="6436" pos:column="20"/></name></cpp:ifdef>
  <for pos:line="6437" pos:column="3">for<control pos:line="6437" pos:column="6">(<init><expr><name pos:line="6437" pos:column="7">i<pos:position pos:line="6437" pos:column="8"/></name><operator pos:line="6437" pos:column="8">=<pos:position pos:line="6437" pos:column="9"/></operator><literal type="number" pos:line="6437" pos:column="9">0<pos:position pos:line="6437" pos:column="10"/></literal></expr>;<pos:position pos:line="6437" pos:column="11"/></init> <condition><expr><name pos:line="6437" pos:column="12">i<pos:position pos:line="6437" pos:column="13"/></name><operator pos:line="6437" pos:column="13">&lt;<pos:position pos:line="6437" pos:column="17"/></operator><name><name pos:line="6437" pos:column="14">pCtx<pos:position pos:line="6437" pos:column="18"/></name><operator pos:line="6437" pos:column="18">-&gt;<pos:position pos:line="6437" pos:column="23"/></operator><name pos:line="6437" pos:column="20">argc<pos:position pos:line="6437" pos:column="24"/></name></name></expr>;<pos:position pos:line="6437" pos:column="25"/></condition> <incr><expr><name pos:line="6437" pos:column="26">i<pos:position pos:line="6437" pos:column="27"/></name><operator pos:line="6437" pos:column="27">++<pos:position pos:line="6437" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="6437" pos:column="30"/></control><block pos:line="6437" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="6438" pos:column="5">assert<pos:position pos:line="6438" pos:column="11"/></name><argument_list pos:line="6438" pos:column="11">( <argument><expr><call><name pos:line="6438" pos:column="13">memIsValid<pos:position pos:line="6438" pos:column="23"/></name><argument_list pos:line="6438" pos:column="23">(<argument><expr><name><name pos:line="6438" pos:column="24">pCtx<pos:position pos:line="6438" pos:column="28"/></name><operator pos:line="6438" pos:column="28">-&gt;<pos:position pos:line="6438" pos:column="33"/></operator><name pos:line="6438" pos:column="30">argv<pos:position pos:line="6438" pos:column="34"/></name><index pos:line="6438" pos:column="34">[<expr><name pos:line="6438" pos:column="35">i<pos:position pos:line="6438" pos:column="36"/></name></expr>]<pos:position pos:line="6438" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="6438" pos:column="38"/></argument_list></call></expr></argument> )<pos:position pos:line="6438" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6438" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6439" pos:column="5">REGISTER_TRACE<pos:position pos:line="6439" pos:column="19"/></name><argument_list pos:line="6439" pos:column="19">(<argument><expr><name><name pos:line="6439" pos:column="20">pOp<pos:position pos:line="6439" pos:column="23"/></name><operator pos:line="6439" pos:column="23">-&gt;<pos:position pos:line="6439" pos:column="28"/></operator><name pos:line="6439" pos:column="25">p2<pos:position pos:line="6439" pos:column="27"/></name></name><operator pos:line="6439" pos:column="27">+<pos:position pos:line="6439" pos:column="28"/></operator><name pos:line="6439" pos:column="28">i<pos:position pos:line="6439" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="6439" pos:column="31">pCtx<pos:position pos:line="6439" pos:column="35"/></name><operator pos:line="6439" pos:column="35">-&gt;<pos:position pos:line="6439" pos:column="40"/></operator><name pos:line="6439" pos:column="37">argv<pos:position pos:line="6439" pos:column="41"/></name><index pos:line="6439" pos:column="41">[<expr><name pos:line="6439" pos:column="42">i<pos:position pos:line="6439" pos:column="43"/></name></expr>]<pos:position pos:line="6439" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="6439" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6439" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="6440" pos:column="4"/></block></for>
<cpp:endif pos:line="6441" pos:column="1">#<cpp:directive pos:line="6441" pos:column="2">endif<pos:position pos:line="6441" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="6442" pos:column="3">MemSetTypeFlag<pos:position pos:line="6442" pos:column="17"/></name><argument_list pos:line="6442" pos:column="17">(<argument><expr><name pos:line="6442" pos:column="18">pOut<pos:position pos:line="6442" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="6442" pos:column="24">MEM_Null<pos:position pos:line="6442" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6442" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6442" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6443" pos:column="3">pCtx<pos:position pos:line="6443" pos:column="7"/></name><operator pos:line="6443" pos:column="7">-&gt;<pos:position pos:line="6443" pos:column="12"/></operator><name pos:line="6443" pos:column="9">fErrorOrAux<pos:position pos:line="6443" pos:column="20"/></name></name> <operator pos:line="6443" pos:column="21">=<pos:position pos:line="6443" pos:column="22"/></operator> <literal type="number" pos:line="6443" pos:column="23">0<pos:position pos:line="6443" pos:column="24"/></literal></expr>;<pos:position pos:line="6443" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call pos:line="6444" pos:column="3">(<modifier pos:line="6444" pos:column="4">*<pos:position pos:line="6444" pos:column="5"/></modifier><name><name pos:line="6444" pos:column="5">pCtx<pos:position pos:line="6444" pos:column="9"/></name><operator pos:line="6444" pos:column="9">-&gt;<pos:position pos:line="6444" pos:column="14"/></operator><name pos:line="6444" pos:column="11">pFunc<pos:position pos:line="6444" pos:column="16"/></name><operator pos:line="6444" pos:column="16">-&gt;<pos:position pos:line="6444" pos:column="21"/></operator><name pos:line="6444" pos:column="18">xSFunc<pos:position pos:line="6444" pos:column="24"/></name></name>)<argument_list pos:line="6444" pos:column="25">(<argument><expr><name pos:line="6444" pos:column="26">pCtx<pos:position pos:line="6444" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="6444" pos:column="32">pCtx<pos:position pos:line="6444" pos:column="36"/></name><operator pos:line="6444" pos:column="36">-&gt;<pos:position pos:line="6444" pos:column="41"/></operator><name pos:line="6444" pos:column="38">argc<pos:position pos:line="6444" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6444" pos:column="44">pCtx<pos:position pos:line="6444" pos:column="48"/></name><operator pos:line="6444" pos:column="48">-&gt;<pos:position pos:line="6444" pos:column="53"/></operator><name pos:line="6444" pos:column="50">argv<pos:position pos:line="6444" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="6444" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="6444" pos:column="56"/></expr_stmt><comment type="block" pos:line="6444" pos:column="56">/* IMP: R-24505-23230 */</comment>

  <comment type="block" pos:line="6446" pos:column="3">/* If the function returned an error, throw an exception */</comment>
  <if pos:line="6447" pos:column="3">if<condition pos:line="6447" pos:column="5">( <expr><name><name pos:line="6447" pos:column="7">pCtx<pos:position pos:line="6447" pos:column="11"/></name><operator pos:line="6447" pos:column="11">-&gt;<pos:position pos:line="6447" pos:column="16"/></operator><name pos:line="6447" pos:column="13">fErrorOrAux<pos:position pos:line="6447" pos:column="24"/></name></name></expr> )<pos:position pos:line="6447" pos:column="26"/></condition><then><block pos:line="6447" pos:column="26">{
    <if pos:line="6448" pos:column="5">if<condition pos:line="6448" pos:column="7">( <expr><name><name pos:line="6448" pos:column="9">pCtx<pos:position pos:line="6448" pos:column="13"/></name><operator pos:line="6448" pos:column="13">-&gt;<pos:position pos:line="6448" pos:column="18"/></operator><name pos:line="6448" pos:column="15">isError<pos:position pos:line="6448" pos:column="22"/></name></name></expr> )<pos:position pos:line="6448" pos:column="24"/></condition><then><block pos:line="6448" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="6449" pos:column="7">sqlite3VdbeError<pos:position pos:line="6449" pos:column="23"/></name><argument_list pos:line="6449" pos:column="23">(<argument><expr><name pos:line="6449" pos:column="24">p<pos:position pos:line="6449" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6449" pos:column="27">"%s"<pos:position pos:line="6449" pos:column="31"/></literal></expr></argument>, <argument><expr><call><name pos:line="6449" pos:column="33">sqlite3_value_text<pos:position pos:line="6449" pos:column="51"/></name><argument_list pos:line="6449" pos:column="51">(<argument><expr><name pos:line="6449" pos:column="52">pOut<pos:position pos:line="6449" pos:column="56"/></name></expr></argument>)<pos:position pos:line="6449" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="6449" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="6449" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><name pos:line="6450" pos:column="7">rc<pos:position pos:line="6450" pos:column="9"/></name> <operator pos:line="6450" pos:column="10">=<pos:position pos:line="6450" pos:column="11"/></operator> <name><name pos:line="6450" pos:column="12">pCtx<pos:position pos:line="6450" pos:column="16"/></name><operator pos:line="6450" pos:column="16">-&gt;<pos:position pos:line="6450" pos:column="21"/></operator><name pos:line="6450" pos:column="18">isError<pos:position pos:line="6450" pos:column="25"/></name></name></expr>;<pos:position pos:line="6450" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="6451" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="6452" pos:column="5">sqlite3VdbeDeleteAuxData<pos:position pos:line="6452" pos:column="29"/></name><argument_list pos:line="6452" pos:column="29">(<argument><expr><name pos:line="6452" pos:column="30">db<pos:position pos:line="6452" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="6452" pos:column="34">&amp;<pos:position pos:line="6452" pos:column="39"/></operator><name><name pos:line="6452" pos:column="35">p<pos:position pos:line="6452" pos:column="36"/></name><operator pos:line="6452" pos:column="36">-&gt;<pos:position pos:line="6452" pos:column="41"/></operator><name pos:line="6452" pos:column="38">pAuxData<pos:position pos:line="6452" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6452" pos:column="48">pCtx<pos:position pos:line="6452" pos:column="52"/></name><operator pos:line="6452" pos:column="52">-&gt;<pos:position pos:line="6452" pos:column="57"/></operator><name pos:line="6452" pos:column="54">iOp<pos:position pos:line="6452" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6452" pos:column="59">pOp<pos:position pos:line="6452" pos:column="62"/></name><operator pos:line="6452" pos:column="62">-&gt;<pos:position pos:line="6452" pos:column="67"/></operator><name pos:line="6452" pos:column="64">p1<pos:position pos:line="6452" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="6452" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="6452" pos:column="68"/></expr_stmt>
    <if pos:line="6453" pos:column="5">if<condition pos:line="6453" pos:column="7">( <expr><name pos:line="6453" pos:column="9">rc<pos:position pos:line="6453" pos:column="11"/></name></expr> )<pos:position pos:line="6453" pos:column="13"/></condition><then pos:line="6453" pos:column="13"> <block type="pseudo"><goto pos:line="6453" pos:column="14">goto <name pos:line="6453" pos:column="19">abort_due_to_error<pos:position pos:line="6453" pos:column="37"/></name>;<pos:position pos:line="6453" pos:column="38"/></goto></block></then></if>
  }<pos:position pos:line="6454" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="6456" pos:column="3">/* Copy the result of the function into register P3 */</comment>
  <if pos:line="6457" pos:column="3">if<condition pos:line="6457" pos:column="5">( <expr><name><name pos:line="6457" pos:column="7">pOut<pos:position pos:line="6457" pos:column="11"/></name><operator pos:line="6457" pos:column="11">-&gt;<pos:position pos:line="6457" pos:column="16"/></operator><name pos:line="6457" pos:column="13">flags<pos:position pos:line="6457" pos:column="18"/></name></name> <operator pos:line="6457" pos:column="19">&amp;<pos:position pos:line="6457" pos:column="24"/></operator> <operator pos:line="6457" pos:column="21">(<pos:position pos:line="6457" pos:column="22"/></operator><name pos:line="6457" pos:column="22">MEM_Str<pos:position pos:line="6457" pos:column="29"/></name><operator pos:line="6457" pos:column="29">|<pos:position pos:line="6457" pos:column="30"/></operator><name pos:line="6457" pos:column="30">MEM_Blob<pos:position pos:line="6457" pos:column="38"/></name><operator pos:line="6457" pos:column="38">)<pos:position pos:line="6457" pos:column="39"/></operator></expr> )<pos:position pos:line="6457" pos:column="41"/></condition><then><block pos:line="6457" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="6458" pos:column="5">sqlite3VdbeChangeEncoding<pos:position pos:line="6458" pos:column="30"/></name><argument_list pos:line="6458" pos:column="30">(<argument><expr><name pos:line="6458" pos:column="31">pOut<pos:position pos:line="6458" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="6458" pos:column="37">encoding<pos:position pos:line="6458" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6458" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="6458" pos:column="47"/></expr_stmt>
    <if pos:line="6459" pos:column="5">if<condition pos:line="6459" pos:column="7">( <expr><call><name pos:line="6459" pos:column="9">sqlite3VdbeMemTooBig<pos:position pos:line="6459" pos:column="29"/></name><argument_list pos:line="6459" pos:column="29">(<argument><expr><name pos:line="6459" pos:column="30">pOut<pos:position pos:line="6459" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6459" pos:column="35"/></argument_list></call></expr> )<pos:position pos:line="6459" pos:column="37"/></condition><then pos:line="6459" pos:column="37"> <block type="pseudo"><goto pos:line="6459" pos:column="38">goto <name pos:line="6459" pos:column="43">too_big<pos:position pos:line="6459" pos:column="50"/></name>;<pos:position pos:line="6459" pos:column="51"/></goto></block></then></if>
  }<pos:position pos:line="6460" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="6462" pos:column="3">REGISTER_TRACE<pos:position pos:line="6462" pos:column="17"/></name><argument_list pos:line="6462" pos:column="17">(<argument><expr><name><name pos:line="6462" pos:column="18">pOp<pos:position pos:line="6462" pos:column="21"/></name><operator pos:line="6462" pos:column="21">-&gt;<pos:position pos:line="6462" pos:column="26"/></operator><name pos:line="6462" pos:column="23">p3<pos:position pos:line="6462" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="6462" pos:column="27">pOut<pos:position pos:line="6462" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6462" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6462" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6463" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="6463" pos:column="22"/></name><argument_list pos:line="6463" pos:column="22">(<argument><expr><name pos:line="6463" pos:column="23">pOut<pos:position pos:line="6463" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6463" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6463" pos:column="29"/></expr_stmt>
  <break pos:line="6464" pos:column="3">break;<pos:position pos:line="6464" pos:column="9"/></break>
}<pos:position pos:line="6465" pos:column="2"/></block>


<comment type="block" pos:line="6468" pos:column="1">/* Opcode: Init P1 P2 P3 P4 *
** Synopsis: Start at P2
**
** Programs contain a single instance of this opcode as the very first
** opcode.
**
** If tracing is enabled (by the sqlite3_trace()) interface, then
** the UTF-8 string contained in P4 is emitted on the trace callback.
** Or if P4 is blank, use the string returned by sqlite3_sql().
**
** If P2 is not zero, jump to instruction P2.
**
** Increment the value of P1 so that OP_Once opcodes will jump the
** first time they are evaluated for this run.
**
** If P3 is not zero, then it is an address to jump to if an SQLITE_CORRUPT
** error is encountered.
*/</comment>
<case pos:line="6486" pos:column="1">case <expr><name pos:line="6486" pos:column="6">OP_Init<pos:position pos:line="6486" pos:column="13"/></name></expr>:<pos:position pos:line="6486" pos:column="14"/></case> <block pos:line="6486" pos:column="15">{          <comment type="block" pos:line="6486" pos:column="26">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="6487" pos:column="3">char<pos:position pos:line="6487" pos:column="7"/></name> <modifier pos:line="6487" pos:column="8">*<pos:position pos:line="6487" pos:column="9"/></modifier></type><name pos:line="6487" pos:column="9">zTrace<pos:position pos:line="6487" pos:column="15"/></name></decl>;<pos:position pos:line="6487" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6488" pos:column="3">int<pos:position pos:line="6488" pos:column="6"/></name></type> <name pos:line="6488" pos:column="7">i<pos:position pos:line="6488" pos:column="8"/></name></decl>;<pos:position pos:line="6488" pos:column="9"/></decl_stmt>

  <comment type="block" pos:line="6490" pos:column="3">/* If the P4 argument is not NULL, then it must be an SQL comment string.
  ** The "--" string is broken up to prevent false-positives with srcck1.c.
  **
  ** This assert() provides evidence for:
  ** EVIDENCE-OF: R-50676-09860 The callback can compute the same text that
  ** would have been returned by the legacy sqlite3_trace() interface by
  ** using the X argument when X begins with "--" and invoking
  ** sqlite3_expanded_sql(P) otherwise.
  */</comment>
  <expr_stmt><expr><call><name pos:line="6499" pos:column="3">assert<pos:position pos:line="6499" pos:column="9"/></name><argument_list pos:line="6499" pos:column="9">( <argument><expr><name><name pos:line="6499" pos:column="11">pOp<pos:position pos:line="6499" pos:column="14"/></name><operator pos:line="6499" pos:column="14">-&gt;<pos:position pos:line="6499" pos:column="19"/></operator><name pos:line="6499" pos:column="16">p4<pos:position pos:line="6499" pos:column="18"/></name><operator pos:line="6499" pos:column="18">.<pos:position pos:line="6499" pos:column="19"/></operator><name pos:line="6499" pos:column="19">z<pos:position pos:line="6499" pos:column="20"/></name></name><operator pos:line="6499" pos:column="20">==<pos:position pos:line="6499" pos:column="22"/></operator><literal type="number" pos:line="6499" pos:column="22">0<pos:position pos:line="6499" pos:column="23"/></literal> <operator pos:line="6499" pos:column="24">||<pos:position pos:line="6499" pos:column="26"/></operator> <call><name pos:line="6499" pos:column="27">strncmp<pos:position pos:line="6499" pos:column="34"/></name><argument_list pos:line="6499" pos:column="34">(<argument><expr><name><name pos:line="6499" pos:column="35">pOp<pos:position pos:line="6499" pos:column="38"/></name><operator pos:line="6499" pos:column="38">-&gt;<pos:position pos:line="6499" pos:column="43"/></operator><name pos:line="6499" pos:column="40">p4<pos:position pos:line="6499" pos:column="42"/></name><operator pos:line="6499" pos:column="42">.<pos:position pos:line="6499" pos:column="43"/></operator><name pos:line="6499" pos:column="43">z<pos:position pos:line="6499" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="6499" pos:column="46">"-"<pos:position pos:line="6499" pos:column="49"/></literal> <literal type="string" pos:line="6499" pos:column="50">"- "<pos:position pos:line="6499" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6499" pos:column="56">3<pos:position pos:line="6499" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="6499" pos:column="58"/></argument_list></call><operator pos:line="6499" pos:column="58">==<pos:position pos:line="6499" pos:column="60"/></operator><literal type="number" pos:line="6499" pos:column="60">0<pos:position pos:line="6499" pos:column="61"/></literal></expr></argument> )<pos:position pos:line="6499" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="6499" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6500" pos:column="3">assert<pos:position pos:line="6500" pos:column="9"/></name><argument_list pos:line="6500" pos:column="9">( <argument><expr><name pos:line="6500" pos:column="11">pOp<pos:position pos:line="6500" pos:column="14"/></name><operator pos:line="6500" pos:column="14">==<pos:position pos:line="6500" pos:column="16"/></operator><name><name pos:line="6500" pos:column="16">p<pos:position pos:line="6500" pos:column="17"/></name><operator pos:line="6500" pos:column="17">-&gt;<pos:position pos:line="6500" pos:column="22"/></operator><name pos:line="6500" pos:column="19">aOp<pos:position pos:line="6500" pos:column="22"/></name></name></expr></argument> )<pos:position pos:line="6500" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6500" pos:column="25"/></expr_stmt>  <comment type="block" pos:line="6500" pos:column="27">/* Always instruction 0 */</comment>

<cpp:ifndef pos:line="6502" pos:column="1">#<cpp:directive pos:line="6502" pos:column="2">ifndef<pos:position pos:line="6502" pos:column="8"/></cpp:directive> <name pos:line="6502" pos:column="9">SQLITE_OMIT_TRACE<pos:position pos:line="6502" pos:column="26"/></name></cpp:ifndef>
  <if pos:line="6503" pos:column="3">if<condition pos:line="6503" pos:column="5">( <expr><operator pos:line="6503" pos:column="7">(<pos:position pos:line="6503" pos:column="8"/></operator><name><name pos:line="6503" pos:column="8">db<pos:position pos:line="6503" pos:column="10"/></name><operator pos:line="6503" pos:column="10">-&gt;<pos:position pos:line="6503" pos:column="15"/></operator><name pos:line="6503" pos:column="12">mTrace<pos:position pos:line="6503" pos:column="18"/></name></name> <operator pos:line="6503" pos:column="19">&amp;<pos:position pos:line="6503" pos:column="24"/></operator> <operator pos:line="6503" pos:column="21">(<pos:position pos:line="6503" pos:column="22"/></operator><name pos:line="6503" pos:column="22">SQLITE_TRACE_STMT<pos:position pos:line="6503" pos:column="39"/></name><operator pos:line="6503" pos:column="39">|<pos:position pos:line="6503" pos:column="40"/></operator><name pos:line="6503" pos:column="40">SQLITE_TRACE_LEGACY<pos:position pos:line="6503" pos:column="59"/></name><operator pos:line="6503" pos:column="59">)<pos:position pos:line="6503" pos:column="60"/></operator><operator pos:line="6503" pos:column="60">)<pos:position pos:line="6503" pos:column="61"/></operator><operator pos:line="6503" pos:column="61">!=<pos:position pos:line="6503" pos:column="63"/></operator><literal type="number" pos:line="6503" pos:column="63">0<pos:position pos:line="6503" pos:column="64"/></literal>
   <operator pos:line="6504" pos:column="4">&amp;&amp;<pos:position pos:line="6504" pos:column="14"/></operator> <operator pos:line="6504" pos:column="7">!<pos:position pos:line="6504" pos:column="8"/></operator><name><name pos:line="6504" pos:column="8">p<pos:position pos:line="6504" pos:column="9"/></name><operator pos:line="6504" pos:column="9">-&gt;<pos:position pos:line="6504" pos:column="14"/></operator><name pos:line="6504" pos:column="11">doingRerun<pos:position pos:line="6504" pos:column="21"/></name></name>
   <operator pos:line="6505" pos:column="4">&amp;&amp;<pos:position pos:line="6505" pos:column="14"/></operator> <operator pos:line="6505" pos:column="7">(<pos:position pos:line="6505" pos:column="8"/></operator><name pos:line="6505" pos:column="8">zTrace<pos:position pos:line="6505" pos:column="14"/></name> <operator pos:line="6505" pos:column="15">=<pos:position pos:line="6505" pos:column="16"/></operator> <operator pos:line="6505" pos:column="17">(<pos:position pos:line="6505" pos:column="18"/></operator><ternary><condition><expr><name><name pos:line="6505" pos:column="18">pOp<pos:position pos:line="6505" pos:column="21"/></name><operator pos:line="6505" pos:column="21">-&gt;<pos:position pos:line="6505" pos:column="26"/></operator><name pos:line="6505" pos:column="23">p4<pos:position pos:line="6505" pos:column="25"/></name><operator pos:line="6505" pos:column="25">.<pos:position pos:line="6505" pos:column="26"/></operator><name pos:line="6505" pos:column="26">z<pos:position pos:line="6505" pos:column="27"/></name></name></expr> ?<pos:position pos:line="6505" pos:column="29"/></condition><then pos:line="6505" pos:column="29"> <expr><name><name pos:line="6505" pos:column="30">pOp<pos:position pos:line="6505" pos:column="33"/></name><operator pos:line="6505" pos:column="33">-&gt;<pos:position pos:line="6505" pos:column="38"/></operator><name pos:line="6505" pos:column="35">p4<pos:position pos:line="6505" pos:column="37"/></name><operator pos:line="6505" pos:column="37">.<pos:position pos:line="6505" pos:column="38"/></operator><name pos:line="6505" pos:column="38">z<pos:position pos:line="6505" pos:column="39"/></name></name></expr> <pos:position pos:line="6505" pos:column="40"/></then><else pos:line="6505" pos:column="40">: <expr><name><name pos:line="6505" pos:column="42">p<pos:position pos:line="6505" pos:column="43"/></name><operator pos:line="6505" pos:column="43">-&gt;<pos:position pos:line="6505" pos:column="48"/></operator><name pos:line="6505" pos:column="45">zSql<pos:position pos:line="6505" pos:column="49"/></name></name></expr></else></ternary><operator pos:line="6505" pos:column="49">)<pos:position pos:line="6505" pos:column="50"/></operator><operator pos:line="6505" pos:column="50">)<pos:position pos:line="6505" pos:column="51"/></operator><operator pos:line="6505" pos:column="51">!=<pos:position pos:line="6505" pos:column="53"/></operator><literal type="number" pos:line="6505" pos:column="53">0<pos:position pos:line="6505" pos:column="54"/></literal></expr>
  )<pos:position pos:line="6506" pos:column="4"/></condition><then><block pos:line="6506" pos:column="4">{
<cpp:ifndef pos:line="6507" pos:column="1">#<cpp:directive pos:line="6507" pos:column="2">ifndef<pos:position pos:line="6507" pos:column="8"/></cpp:directive> <name pos:line="6507" pos:column="9">SQLITE_OMIT_DEPRECATED<pos:position pos:line="6507" pos:column="31"/></name></cpp:ifndef>
    <if pos:line="6508" pos:column="5">if<condition pos:line="6508" pos:column="7">( <expr><name><name pos:line="6508" pos:column="9">db<pos:position pos:line="6508" pos:column="11"/></name><operator pos:line="6508" pos:column="11">-&gt;<pos:position pos:line="6508" pos:column="16"/></operator><name pos:line="6508" pos:column="13">mTrace<pos:position pos:line="6508" pos:column="19"/></name></name> <operator pos:line="6508" pos:column="20">&amp;<pos:position pos:line="6508" pos:column="25"/></operator> <name pos:line="6508" pos:column="22">SQLITE_TRACE_LEGACY<pos:position pos:line="6508" pos:column="41"/></name></expr> )<pos:position pos:line="6508" pos:column="43"/></condition><then><block pos:line="6508" pos:column="43">{
      <function_decl><type><name pos:line="6509" pos:column="7">void<pos:position pos:line="6509" pos:column="11"/></name></type> (<modifier pos:line="6509" pos:column="13">*<pos:position pos:line="6509" pos:column="14"/></modifier><name pos:line="6509" pos:column="14">x<pos:position pos:line="6509" pos:column="15"/></name>)<parameter_list pos:line="6509" pos:column="16">(<parameter><decl><type><name pos:line="6509" pos:column="17">void<pos:position pos:line="6509" pos:column="21"/></name><modifier pos:line="6509" pos:column="21">*<pos:position pos:line="6509" pos:column="22"/></modifier></type></decl></parameter>,<parameter><decl><type><specifier pos:line="6509" pos:column="23">const<pos:position pos:line="6509" pos:column="28"/></specifier> <name pos:line="6509" pos:column="29">char<pos:position pos:line="6509" pos:column="33"/></name><modifier pos:line="6509" pos:column="33">*<pos:position pos:line="6509" pos:column="34"/></modifier></type></decl></parameter>)<pos:position pos:line="6509" pos:column="35"/></parameter_list> <init pos:line="6509" pos:column="36">= <expr><operator pos:line="6509" pos:column="38">(<pos:position pos:line="6509" pos:column="39"/></operator><call><call><name pos:line="6509" pos:column="39">void<pos:position pos:line="6509" pos:column="43"/></name><argument_list pos:line="6509" pos:column="43">(<argument><expr><operator pos:line="6509" pos:column="44">*<pos:position pos:line="6509" pos:column="45"/></operator></expr></argument>)<pos:position pos:line="6509" pos:column="46"/></argument_list></call><operator pos:line="6509" pos:column="46">(<pos:position pos:line="6509" pos:column="47"/></operator><name pos:line="6509" pos:column="47">void<pos:position pos:line="6509" pos:column="51"/></name><operator pos:line="6509" pos:column="51">*<pos:position pos:line="6509" pos:column="52"/></operator>,<specifier pos:line="6509" pos:column="53">const<pos:position pos:line="6509" pos:column="58"/></specifier> <name pos:line="6509" pos:column="59">char<pos:position pos:line="6509" pos:column="63"/></name><operator pos:line="6509" pos:column="63">*<pos:position pos:line="6509" pos:column="64"/></operator><operator pos:line="6509" pos:column="64">)<pos:position pos:line="6509" pos:column="65"/></operator></call><operator pos:line="6509" pos:column="65">)<pos:position pos:line="6509" pos:column="66"/></operator><name><name pos:line="6509" pos:column="66">db<pos:position pos:line="6509" pos:column="68"/></name><operator pos:line="6509" pos:column="68">-&gt;<pos:position pos:line="6509" pos:column="73"/></operator><name pos:line="6509" pos:column="70">xTrace<pos:position pos:line="6509" pos:column="76"/></name></name></expr></init>;<pos:position pos:line="6509" pos:column="77"/></function_decl>
      <decl_stmt><decl><type><name pos:line="6510" pos:column="7">char<pos:position pos:line="6510" pos:column="11"/></name> <modifier pos:line="6510" pos:column="12">*<pos:position pos:line="6510" pos:column="13"/></modifier></type><name pos:line="6510" pos:column="13">z<pos:position pos:line="6510" pos:column="14"/></name> <init pos:line="6510" pos:column="15">= <expr><call><name pos:line="6510" pos:column="17">sqlite3VdbeExpandSql<pos:position pos:line="6510" pos:column="37"/></name><argument_list pos:line="6510" pos:column="37">(<argument><expr><name pos:line="6510" pos:column="38">p<pos:position pos:line="6510" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="6510" pos:column="41">zTrace<pos:position pos:line="6510" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6510" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6510" pos:column="49"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="6511" pos:column="7">x<pos:position pos:line="6511" pos:column="8"/></name><argument_list pos:line="6511" pos:column="8">(<argument><expr><name><name pos:line="6511" pos:column="9">db<pos:position pos:line="6511" pos:column="11"/></name><operator pos:line="6511" pos:column="11">-&gt;<pos:position pos:line="6511" pos:column="16"/></operator><name pos:line="6511" pos:column="13">pTraceArg<pos:position pos:line="6511" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="6511" pos:column="24">z<pos:position pos:line="6511" pos:column="25"/></name></expr></argument>)<pos:position pos:line="6511" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6511" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="6512" pos:column="7">sqlite3_free<pos:position pos:line="6512" pos:column="19"/></name><argument_list pos:line="6512" pos:column="19">(<argument><expr><name pos:line="6512" pos:column="20">z<pos:position pos:line="6512" pos:column="21"/></name></expr></argument>)<pos:position pos:line="6512" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6512" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="6513" pos:column="6"/></block></then><elseif pos:line="6513" pos:column="6">else
<cpp:endif pos:line="6514" pos:column="1">#<cpp:directive pos:line="6514" pos:column="2">endif<pos:position pos:line="6514" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="6515" pos:column="5">if<condition pos:line="6515" pos:column="7">( <expr><name><name pos:line="6515" pos:column="9">db<pos:position pos:line="6515" pos:column="11"/></name><operator pos:line="6515" pos:column="11">-&gt;<pos:position pos:line="6515" pos:column="16"/></operator><name pos:line="6515" pos:column="13">nVdbeExec<pos:position pos:line="6515" pos:column="22"/></name></name><operator pos:line="6515" pos:column="22">&gt;<pos:position pos:line="6515" pos:column="26"/></operator><literal type="number" pos:line="6515" pos:column="23">1<pos:position pos:line="6515" pos:column="24"/></literal></expr> )<pos:position pos:line="6515" pos:column="26"/></condition><then><block pos:line="6515" pos:column="26">{
      <decl_stmt><decl><type><name pos:line="6516" pos:column="7">char<pos:position pos:line="6516" pos:column="11"/></name> <modifier pos:line="6516" pos:column="12">*<pos:position pos:line="6516" pos:column="13"/></modifier></type><name pos:line="6516" pos:column="13">z<pos:position pos:line="6516" pos:column="14"/></name> <init pos:line="6516" pos:column="15">= <expr><call><name pos:line="6516" pos:column="17">sqlite3MPrintf<pos:position pos:line="6516" pos:column="31"/></name><argument_list pos:line="6516" pos:column="31">(<argument><expr><name pos:line="6516" pos:column="32">db<pos:position pos:line="6516" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6516" pos:column="36">"-- %s"<pos:position pos:line="6516" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="6516" pos:column="45">zTrace<pos:position pos:line="6516" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6516" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6516" pos:column="53"/></decl_stmt>
      <expr_stmt><expr><operator pos:line="6517" pos:column="7">(<pos:position pos:line="6517" pos:column="8"/></operator><name pos:line="6517" pos:column="8">void<pos:position pos:line="6517" pos:column="12"/></name><operator pos:line="6517" pos:column="12">)<pos:position pos:line="6517" pos:column="13"/></operator><call><name><name pos:line="6517" pos:column="13">db<pos:position pos:line="6517" pos:column="15"/></name><operator pos:line="6517" pos:column="15">-&gt;<pos:position pos:line="6517" pos:column="20"/></operator><name pos:line="6517" pos:column="17">xTrace<pos:position pos:line="6517" pos:column="23"/></name></name><argument_list pos:line="6517" pos:column="23">(<argument><expr><name pos:line="6517" pos:column="24">SQLITE_TRACE_STMT<pos:position pos:line="6517" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="6517" pos:column="43">db<pos:position pos:line="6517" pos:column="45"/></name><operator pos:line="6517" pos:column="45">-&gt;<pos:position pos:line="6517" pos:column="50"/></operator><name pos:line="6517" pos:column="47">pTraceArg<pos:position pos:line="6517" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="6517" pos:column="58">p<pos:position pos:line="6517" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="6517" pos:column="61">z<pos:position pos:line="6517" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6517" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="6517" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="6518" pos:column="7">sqlite3DbFree<pos:position pos:line="6518" pos:column="20"/></name><argument_list pos:line="6518" pos:column="20">(<argument><expr><name pos:line="6518" pos:column="21">db<pos:position pos:line="6518" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="6518" pos:column="25">z<pos:position pos:line="6518" pos:column="26"/></name></expr></argument>)<pos:position pos:line="6518" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6518" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="6519" pos:column="6"/></block></then></if></elseif><else pos:line="6519" pos:column="6">else<block pos:line="6519" pos:column="10">{
      <expr_stmt><expr><operator pos:line="6520" pos:column="7">(<pos:position pos:line="6520" pos:column="8"/></operator><name pos:line="6520" pos:column="8">void<pos:position pos:line="6520" pos:column="12"/></name><operator pos:line="6520" pos:column="12">)<pos:position pos:line="6520" pos:column="13"/></operator><call><name><name pos:line="6520" pos:column="13">db<pos:position pos:line="6520" pos:column="15"/></name><operator pos:line="6520" pos:column="15">-&gt;<pos:position pos:line="6520" pos:column="20"/></operator><name pos:line="6520" pos:column="17">xTrace<pos:position pos:line="6520" pos:column="23"/></name></name><argument_list pos:line="6520" pos:column="23">(<argument><expr><name pos:line="6520" pos:column="24">SQLITE_TRACE_STMT<pos:position pos:line="6520" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="6520" pos:column="43">db<pos:position pos:line="6520" pos:column="45"/></name><operator pos:line="6520" pos:column="45">-&gt;<pos:position pos:line="6520" pos:column="50"/></operator><name pos:line="6520" pos:column="47">pTraceArg<pos:position pos:line="6520" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="6520" pos:column="58">p<pos:position pos:line="6520" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="6520" pos:column="61">zTrace<pos:position pos:line="6520" pos:column="67"/></name></expr></argument>)<pos:position pos:line="6520" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="6520" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="6521" pos:column="6"/></block></else></if>
  }<pos:position pos:line="6522" pos:column="4"/></block></then></if>
<cpp:ifdef pos:line="6523" pos:column="1">#<cpp:directive pos:line="6523" pos:column="2">ifdef<pos:position pos:line="6523" pos:column="7"/></cpp:directive> <name pos:line="6523" pos:column="8">SQLITE_USE_FCNTL_TRACE<pos:position pos:line="6523" pos:column="30"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="6524" pos:column="3">zTrace<pos:position pos:line="6524" pos:column="9"/></name> <operator pos:line="6524" pos:column="10">=<pos:position pos:line="6524" pos:column="11"/></operator> <operator pos:line="6524" pos:column="12">(<pos:position pos:line="6524" pos:column="13"/></operator><ternary><condition><expr><name><name pos:line="6524" pos:column="13">pOp<pos:position pos:line="6524" pos:column="16"/></name><operator pos:line="6524" pos:column="16">-&gt;<pos:position pos:line="6524" pos:column="21"/></operator><name pos:line="6524" pos:column="18">p4<pos:position pos:line="6524" pos:column="20"/></name><operator pos:line="6524" pos:column="20">.<pos:position pos:line="6524" pos:column="21"/></operator><name pos:line="6524" pos:column="21">z<pos:position pos:line="6524" pos:column="22"/></name></name></expr> ?<pos:position pos:line="6524" pos:column="24"/></condition><then pos:line="6524" pos:column="24"> <expr><name><name pos:line="6524" pos:column="25">pOp<pos:position pos:line="6524" pos:column="28"/></name><operator pos:line="6524" pos:column="28">-&gt;<pos:position pos:line="6524" pos:column="33"/></operator><name pos:line="6524" pos:column="30">p4<pos:position pos:line="6524" pos:column="32"/></name><operator pos:line="6524" pos:column="32">.<pos:position pos:line="6524" pos:column="33"/></operator><name pos:line="6524" pos:column="33">z<pos:position pos:line="6524" pos:column="34"/></name></name></expr> <pos:position pos:line="6524" pos:column="35"/></then><else pos:line="6524" pos:column="35">: <expr><name><name pos:line="6524" pos:column="37">p<pos:position pos:line="6524" pos:column="38"/></name><operator pos:line="6524" pos:column="38">-&gt;<pos:position pos:line="6524" pos:column="43"/></operator><name pos:line="6524" pos:column="40">zSql<pos:position pos:line="6524" pos:column="44"/></name></name></expr></else></ternary><operator pos:line="6524" pos:column="44">)<pos:position pos:line="6524" pos:column="45"/></operator></expr>;<pos:position pos:line="6524" pos:column="46"/></expr_stmt>
  <if pos:line="6525" pos:column="3">if<condition pos:line="6525" pos:column="5">( <expr><name pos:line="6525" pos:column="7">zTrace<pos:position pos:line="6525" pos:column="13"/></name></expr> )<pos:position pos:line="6525" pos:column="15"/></condition><then><block pos:line="6525" pos:column="15">{
    <decl_stmt><decl><type><name pos:line="6526" pos:column="5">int<pos:position pos:line="6526" pos:column="8"/></name></type> <name pos:line="6526" pos:column="9">j<pos:position pos:line="6526" pos:column="10"/></name></decl>;<pos:position pos:line="6526" pos:column="11"/></decl_stmt>
    <for pos:line="6527" pos:column="5">for<control pos:line="6527" pos:column="8">(<init><expr><name pos:line="6527" pos:column="9">j<pos:position pos:line="6527" pos:column="10"/></name><operator pos:line="6527" pos:column="10">=<pos:position pos:line="6527" pos:column="11"/></operator><literal type="number" pos:line="6527" pos:column="11">0<pos:position pos:line="6527" pos:column="12"/></literal></expr>;<pos:position pos:line="6527" pos:column="13"/></init> <condition><expr><name pos:line="6527" pos:column="14">j<pos:position pos:line="6527" pos:column="15"/></name><operator pos:line="6527" pos:column="15">&lt;<pos:position pos:line="6527" pos:column="19"/></operator><name><name pos:line="6527" pos:column="16">db<pos:position pos:line="6527" pos:column="18"/></name><operator pos:line="6527" pos:column="18">-&gt;<pos:position pos:line="6527" pos:column="23"/></operator><name pos:line="6527" pos:column="20">nDb<pos:position pos:line="6527" pos:column="23"/></name></name></expr>;<pos:position pos:line="6527" pos:column="24"/></condition> <incr><expr><name pos:line="6527" pos:column="25">j<pos:position pos:line="6527" pos:column="26"/></name><operator pos:line="6527" pos:column="26">++<pos:position pos:line="6527" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="6527" pos:column="29"/></control><block pos:line="6527" pos:column="29">{
      <if pos:line="6528" pos:column="7">if<condition pos:line="6528" pos:column="9">( <expr><call><name pos:line="6528" pos:column="11">DbMaskTest<pos:position pos:line="6528" pos:column="21"/></name><argument_list pos:line="6528" pos:column="21">(<argument><expr><name><name pos:line="6528" pos:column="22">p<pos:position pos:line="6528" pos:column="23"/></name><operator pos:line="6528" pos:column="23">-&gt;<pos:position pos:line="6528" pos:column="28"/></operator><name pos:line="6528" pos:column="25">btreeMask<pos:position pos:line="6528" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="6528" pos:column="36">j<pos:position pos:line="6528" pos:column="37"/></name></expr></argument>)<pos:position pos:line="6528" pos:column="38"/></argument_list></call><operator pos:line="6528" pos:column="38">==<pos:position pos:line="6528" pos:column="40"/></operator><literal type="number" pos:line="6528" pos:column="40">0<pos:position pos:line="6528" pos:column="41"/></literal></expr> )<pos:position pos:line="6528" pos:column="43"/></condition><then pos:line="6528" pos:column="43"> <block type="pseudo"><continue pos:line="6528" pos:column="44">continue;<pos:position pos:line="6528" pos:column="53"/></continue></block></then></if>
      <expr_stmt><expr><call><name pos:line="6529" pos:column="7">sqlite3_file_control<pos:position pos:line="6529" pos:column="27"/></name><argument_list pos:line="6529" pos:column="27">(<argument><expr><name pos:line="6529" pos:column="28">db<pos:position pos:line="6529" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="6529" pos:column="32">db<pos:position pos:line="6529" pos:column="34"/></name><operator pos:line="6529" pos:column="34">-&gt;<pos:position pos:line="6529" pos:column="39"/></operator><name pos:line="6529" pos:column="36">aDb<pos:position pos:line="6529" pos:column="39"/></name><index pos:line="6529" pos:column="39">[<expr><name pos:line="6529" pos:column="40">j<pos:position pos:line="6529" pos:column="41"/></name></expr>]<pos:position pos:line="6529" pos:column="42"/></index></name><operator pos:line="6529" pos:column="42">.<pos:position pos:line="6529" pos:column="43"/></operator><name pos:line="6529" pos:column="43">zDbSName<pos:position pos:line="6529" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="6529" pos:column="53">SQLITE_FCNTL_TRACE<pos:position pos:line="6529" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="6529" pos:column="73">zTrace<pos:position pos:line="6529" pos:column="79"/></name></expr></argument>)<pos:position pos:line="6529" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="6529" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="6530" pos:column="6"/></block></for>
  }<pos:position pos:line="6531" pos:column="4"/></block></then></if>
<cpp:endif pos:line="6532" pos:column="1">#<cpp:directive pos:line="6532" pos:column="2">endif<pos:position pos:line="6532" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6532" pos:column="8">/* SQLITE_USE_FCNTL_TRACE */</comment>
<cpp:ifdef pos:line="6533" pos:column="1">#<cpp:directive pos:line="6533" pos:column="2">ifdef<pos:position pos:line="6533" pos:column="7"/></cpp:directive> <name pos:line="6533" pos:column="8">SQLITE_DEBUG<pos:position pos:line="6533" pos:column="20"/></name></cpp:ifdef>
  <if pos:line="6534" pos:column="3">if<condition pos:line="6534" pos:column="5">( <expr><operator pos:line="6534" pos:column="7">(<pos:position pos:line="6534" pos:column="8"/></operator><name><name pos:line="6534" pos:column="8">db<pos:position pos:line="6534" pos:column="10"/></name><operator pos:line="6534" pos:column="10">-&gt;<pos:position pos:line="6534" pos:column="15"/></operator><name pos:line="6534" pos:column="12">flags<pos:position pos:line="6534" pos:column="17"/></name></name> <operator pos:line="6534" pos:column="18">&amp;<pos:position pos:line="6534" pos:column="23"/></operator> <name pos:line="6534" pos:column="20">SQLITE_SqlTrace<pos:position pos:line="6534" pos:column="35"/></name><operator pos:line="6534" pos:column="35">)<pos:position pos:line="6534" pos:column="36"/></operator><operator pos:line="6534" pos:column="36">!=<pos:position pos:line="6534" pos:column="38"/></operator><literal type="number" pos:line="6534" pos:column="38">0<pos:position pos:line="6534" pos:column="39"/></literal>
   <operator pos:line="6535" pos:column="4">&amp;&amp;<pos:position pos:line="6535" pos:column="14"/></operator> <operator pos:line="6535" pos:column="7">(<pos:position pos:line="6535" pos:column="8"/></operator><name pos:line="6535" pos:column="8">zTrace<pos:position pos:line="6535" pos:column="14"/></name> <operator pos:line="6535" pos:column="15">=<pos:position pos:line="6535" pos:column="16"/></operator> <operator pos:line="6535" pos:column="17">(<pos:position pos:line="6535" pos:column="18"/></operator><ternary><condition><expr><name><name pos:line="6535" pos:column="18">pOp<pos:position pos:line="6535" pos:column="21"/></name><operator pos:line="6535" pos:column="21">-&gt;<pos:position pos:line="6535" pos:column="26"/></operator><name pos:line="6535" pos:column="23">p4<pos:position pos:line="6535" pos:column="25"/></name><operator pos:line="6535" pos:column="25">.<pos:position pos:line="6535" pos:column="26"/></operator><name pos:line="6535" pos:column="26">z<pos:position pos:line="6535" pos:column="27"/></name></name></expr> ?<pos:position pos:line="6535" pos:column="29"/></condition><then pos:line="6535" pos:column="29"> <expr><name><name pos:line="6535" pos:column="30">pOp<pos:position pos:line="6535" pos:column="33"/></name><operator pos:line="6535" pos:column="33">-&gt;<pos:position pos:line="6535" pos:column="38"/></operator><name pos:line="6535" pos:column="35">p4<pos:position pos:line="6535" pos:column="37"/></name><operator pos:line="6535" pos:column="37">.<pos:position pos:line="6535" pos:column="38"/></operator><name pos:line="6535" pos:column="38">z<pos:position pos:line="6535" pos:column="39"/></name></name></expr> <pos:position pos:line="6535" pos:column="40"/></then><else pos:line="6535" pos:column="40">: <expr><name><name pos:line="6535" pos:column="42">p<pos:position pos:line="6535" pos:column="43"/></name><operator pos:line="6535" pos:column="43">-&gt;<pos:position pos:line="6535" pos:column="48"/></operator><name pos:line="6535" pos:column="45">zSql<pos:position pos:line="6535" pos:column="49"/></name></name></expr></else></ternary><operator pos:line="6535" pos:column="49">)<pos:position pos:line="6535" pos:column="50"/></operator><operator pos:line="6535" pos:column="50">)<pos:position pos:line="6535" pos:column="51"/></operator><operator pos:line="6535" pos:column="51">!=<pos:position pos:line="6535" pos:column="53"/></operator><literal type="number" pos:line="6535" pos:column="53">0<pos:position pos:line="6535" pos:column="54"/></literal></expr>
  )<pos:position pos:line="6536" pos:column="4"/></condition><then><block pos:line="6536" pos:column="4">{
    <expr_stmt><expr><call><name pos:line="6537" pos:column="5">sqlite3DebugPrintf<pos:position pos:line="6537" pos:column="23"/></name><argument_list pos:line="6537" pos:column="23">(<argument><expr><literal type="string" pos:line="6537" pos:column="24">"SQL-trace: %s\n"<pos:position pos:line="6537" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="6537" pos:column="43">zTrace<pos:position pos:line="6537" pos:column="49"/></name></expr></argument>)<pos:position pos:line="6537" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6537" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="6538" pos:column="4"/></block></then></if>
<cpp:endif pos:line="6539" pos:column="1">#<cpp:directive pos:line="6539" pos:column="2">endif<pos:position pos:line="6539" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6539" pos:column="8">/* SQLITE_DEBUG */</comment>
<cpp:endif pos:line="6540" pos:column="1">#<cpp:directive pos:line="6540" pos:column="2">endif<pos:position pos:line="6540" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6540" pos:column="8">/* SQLITE_OMIT_TRACE */</comment>
  <expr_stmt><expr><call><name pos:line="6541" pos:column="3">assert<pos:position pos:line="6541" pos:column="9"/></name><argument_list pos:line="6541" pos:column="9">( <argument><expr><name><name pos:line="6541" pos:column="11">pOp<pos:position pos:line="6541" pos:column="14"/></name><operator pos:line="6541" pos:column="14">-&gt;<pos:position pos:line="6541" pos:column="19"/></operator><name pos:line="6541" pos:column="16">p2<pos:position pos:line="6541" pos:column="18"/></name></name><operator pos:line="6541" pos:column="18">&gt;<pos:position pos:line="6541" pos:column="22"/></operator><literal type="number" pos:line="6541" pos:column="19">0<pos:position pos:line="6541" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="6541" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6541" pos:column="23"/></expr_stmt>
  <if pos:line="6542" pos:column="3">if<condition pos:line="6542" pos:column="5">( <expr><name><name pos:line="6542" pos:column="7">pOp<pos:position pos:line="6542" pos:column="10"/></name><operator pos:line="6542" pos:column="10">-&gt;<pos:position pos:line="6542" pos:column="15"/></operator><name pos:line="6542" pos:column="12">p1<pos:position pos:line="6542" pos:column="14"/></name></name><operator pos:line="6542" pos:column="14">&gt;=<pos:position pos:line="6542" pos:column="19"/></operator><name><name pos:line="6542" pos:column="16">sqlite3GlobalConfig<pos:position pos:line="6542" pos:column="35"/></name><operator pos:line="6542" pos:column="35">.<pos:position pos:line="6542" pos:column="36"/></operator><name pos:line="6542" pos:column="36">iOnceResetThreshold<pos:position pos:line="6542" pos:column="55"/></name></name></expr> )<pos:position pos:line="6542" pos:column="57"/></condition><then><block pos:line="6542" pos:column="57">{
    <for pos:line="6543" pos:column="5">for<control pos:line="6543" pos:column="8">(<init><expr><name pos:line="6543" pos:column="9">i<pos:position pos:line="6543" pos:column="10"/></name><operator pos:line="6543" pos:column="10">=<pos:position pos:line="6543" pos:column="11"/></operator><literal type="number" pos:line="6543" pos:column="11">1<pos:position pos:line="6543" pos:column="12"/></literal></expr>;<pos:position pos:line="6543" pos:column="13"/></init> <condition><expr><name pos:line="6543" pos:column="14">i<pos:position pos:line="6543" pos:column="15"/></name><operator pos:line="6543" pos:column="15">&lt;<pos:position pos:line="6543" pos:column="19"/></operator><name><name pos:line="6543" pos:column="16">p<pos:position pos:line="6543" pos:column="17"/></name><operator pos:line="6543" pos:column="17">-&gt;<pos:position pos:line="6543" pos:column="22"/></operator><name pos:line="6543" pos:column="19">nOp<pos:position pos:line="6543" pos:column="22"/></name></name></expr>;<pos:position pos:line="6543" pos:column="23"/></condition> <incr><expr><name pos:line="6543" pos:column="24">i<pos:position pos:line="6543" pos:column="25"/></name><operator pos:line="6543" pos:column="25">++<pos:position pos:line="6543" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="6543" pos:column="28"/></control><block pos:line="6543" pos:column="28">{
      <if pos:line="6544" pos:column="7">if<condition pos:line="6544" pos:column="9">( <expr><name><name pos:line="6544" pos:column="11">p<pos:position pos:line="6544" pos:column="12"/></name><operator pos:line="6544" pos:column="12">-&gt;<pos:position pos:line="6544" pos:column="17"/></operator><name pos:line="6544" pos:column="14">aOp<pos:position pos:line="6544" pos:column="17"/></name><index pos:line="6544" pos:column="17">[<expr><name pos:line="6544" pos:column="18">i<pos:position pos:line="6544" pos:column="19"/></name></expr>]<pos:position pos:line="6544" pos:column="20"/></index></name><operator pos:line="6544" pos:column="20">.<pos:position pos:line="6544" pos:column="21"/></operator><name pos:line="6544" pos:column="21">opcode<pos:position pos:line="6544" pos:column="27"/></name><operator pos:line="6544" pos:column="27">==<pos:position pos:line="6544" pos:column="29"/></operator><name pos:line="6544" pos:column="29">OP_Once<pos:position pos:line="6544" pos:column="36"/></name></expr> )<pos:position pos:line="6544" pos:column="38"/></condition><then pos:line="6544" pos:column="38"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="6544" pos:column="39">p<pos:position pos:line="6544" pos:column="40"/></name><operator pos:line="6544" pos:column="40">-&gt;<pos:position pos:line="6544" pos:column="45"/></operator><name pos:line="6544" pos:column="42">aOp<pos:position pos:line="6544" pos:column="45"/></name><index pos:line="6544" pos:column="45">[<expr><name pos:line="6544" pos:column="46">i<pos:position pos:line="6544" pos:column="47"/></name></expr>]<pos:position pos:line="6544" pos:column="48"/></index></name><operator pos:line="6544" pos:column="48">.<pos:position pos:line="6544" pos:column="49"/></operator><name pos:line="6544" pos:column="49">p1<pos:position pos:line="6544" pos:column="51"/></name> <operator pos:line="6544" pos:column="52">=<pos:position pos:line="6544" pos:column="53"/></operator> <literal type="number" pos:line="6544" pos:column="54">0<pos:position pos:line="6544" pos:column="55"/></literal></expr>;<pos:position pos:line="6544" pos:column="56"/></expr_stmt></block></then></if>
    }<pos:position pos:line="6545" pos:column="6"/></block></for>
    <expr_stmt><expr><name><name pos:line="6546" pos:column="5">pOp<pos:position pos:line="6546" pos:column="8"/></name><operator pos:line="6546" pos:column="8">-&gt;<pos:position pos:line="6546" pos:column="13"/></operator><name pos:line="6546" pos:column="10">p1<pos:position pos:line="6546" pos:column="12"/></name></name> <operator pos:line="6546" pos:column="13">=<pos:position pos:line="6546" pos:column="14"/></operator> <literal type="number" pos:line="6546" pos:column="15">0<pos:position pos:line="6546" pos:column="16"/></literal></expr>;<pos:position pos:line="6546" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="6547" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="6548" pos:column="3">pOp<pos:position pos:line="6548" pos:column="6"/></name><operator pos:line="6548" pos:column="6">-&gt;<pos:position pos:line="6548" pos:column="11"/></operator><name pos:line="6548" pos:column="8">p1<pos:position pos:line="6548" pos:column="10"/></name></name><operator pos:line="6548" pos:column="10">++<pos:position pos:line="6548" pos:column="12"/></operator></expr>;<pos:position pos:line="6548" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6549" pos:column="3">p<pos:position pos:line="6549" pos:column="4"/></name><operator pos:line="6549" pos:column="4">-&gt;<pos:position pos:line="6549" pos:column="9"/></operator><name pos:line="6549" pos:column="6">aCounter<pos:position pos:line="6549" pos:column="14"/></name><index pos:line="6549" pos:column="14">[<expr><name pos:line="6549" pos:column="15">SQLITE_STMTSTATUS_RUN<pos:position pos:line="6549" pos:column="36"/></name></expr>]<pos:position pos:line="6549" pos:column="37"/></index></name><operator pos:line="6549" pos:column="37">++<pos:position pos:line="6549" pos:column="39"/></operator></expr>;<pos:position pos:line="6549" pos:column="40"/></expr_stmt>
  <goto pos:line="6550" pos:column="3">goto <name pos:line="6550" pos:column="8">jump_to_p2<pos:position pos:line="6550" pos:column="18"/></name>;<pos:position pos:line="6550" pos:column="19"/></goto>
}<pos:position pos:line="6551" pos:column="2"/></block>

<cpp:ifdef pos:line="6553" pos:column="1">#<cpp:directive pos:line="6553" pos:column="2">ifdef<pos:position pos:line="6553" pos:column="7"/></cpp:directive> <name pos:line="6553" pos:column="8">SQLITE_ENABLE_CURSOR_HINTS<pos:position pos:line="6553" pos:column="34"/></name></cpp:ifdef>
<comment type="block" pos:line="6554" pos:column="1">/* Opcode: CursorHint P1 * * P4 *
**
** Provide a hint to cursor P1 that it only needs to return rows that
** satisfy the Expr in P4.  TK_REGISTER terms in the P4 expression refer
** to values currently held in registers.  TK_COLUMN terms in the P4
** expression refer to columns in the b-tree to which cursor P1 is pointing.
*/</comment>
<case pos:line="6561" pos:column="1">case <expr><name pos:line="6561" pos:column="6">OP_CursorHint<pos:position pos:line="6561" pos:column="19"/></name></expr>:<pos:position pos:line="6561" pos:column="20"/></case> <block pos:line="6561" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="6562" pos:column="3">VdbeCursor<pos:position pos:line="6562" pos:column="13"/></name> <modifier pos:line="6562" pos:column="14">*<pos:position pos:line="6562" pos:column="15"/></modifier></type><name pos:line="6562" pos:column="15">pC<pos:position pos:line="6562" pos:column="17"/></name></decl>;<pos:position pos:line="6562" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6564" pos:column="3">assert<pos:position pos:line="6564" pos:column="9"/></name><argument_list pos:line="6564" pos:column="9">( <argument><expr><name><name pos:line="6564" pos:column="11">pOp<pos:position pos:line="6564" pos:column="14"/></name><operator pos:line="6564" pos:column="14">-&gt;<pos:position pos:line="6564" pos:column="19"/></operator><name pos:line="6564" pos:column="16">p1<pos:position pos:line="6564" pos:column="18"/></name></name><operator pos:line="6564" pos:column="18">&gt;=<pos:position pos:line="6564" pos:column="23"/></operator><literal type="number" pos:line="6564" pos:column="20">0<pos:position pos:line="6564" pos:column="21"/></literal> <operator pos:line="6564" pos:column="22">&amp;&amp;<pos:position pos:line="6564" pos:column="32"/></operator> <name><name pos:line="6564" pos:column="25">pOp<pos:position pos:line="6564" pos:column="28"/></name><operator pos:line="6564" pos:column="28">-&gt;<pos:position pos:line="6564" pos:column="33"/></operator><name pos:line="6564" pos:column="30">p1<pos:position pos:line="6564" pos:column="32"/></name></name><operator pos:line="6564" pos:column="32">&lt;<pos:position pos:line="6564" pos:column="36"/></operator><name><name pos:line="6564" pos:column="33">p<pos:position pos:line="6564" pos:column="34"/></name><operator pos:line="6564" pos:column="34">-&gt;<pos:position pos:line="6564" pos:column="39"/></operator><name pos:line="6564" pos:column="36">nCursor<pos:position pos:line="6564" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="6564" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6564" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6565" pos:column="3">assert<pos:position pos:line="6565" pos:column="9"/></name><argument_list pos:line="6565" pos:column="9">( <argument><expr><name><name pos:line="6565" pos:column="11">pOp<pos:position pos:line="6565" pos:column="14"/></name><operator pos:line="6565" pos:column="14">-&gt;<pos:position pos:line="6565" pos:column="19"/></operator><name pos:line="6565" pos:column="16">p4type<pos:position pos:line="6565" pos:column="22"/></name></name><operator pos:line="6565" pos:column="22">==<pos:position pos:line="6565" pos:column="24"/></operator><name pos:line="6565" pos:column="24">P4_EXPR<pos:position pos:line="6565" pos:column="31"/></name></expr></argument> )<pos:position pos:line="6565" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6565" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6566" pos:column="3">pC<pos:position pos:line="6566" pos:column="5"/></name> <operator pos:line="6566" pos:column="6">=<pos:position pos:line="6566" pos:column="7"/></operator> <name><name pos:line="6566" pos:column="8">p<pos:position pos:line="6566" pos:column="9"/></name><operator pos:line="6566" pos:column="9">-&gt;<pos:position pos:line="6566" pos:column="14"/></operator><name pos:line="6566" pos:column="11">apCsr<pos:position pos:line="6566" pos:column="16"/></name><index pos:line="6566" pos:column="16">[<expr><name><name pos:line="6566" pos:column="17">pOp<pos:position pos:line="6566" pos:column="20"/></name><operator pos:line="6566" pos:column="20">-&gt;<pos:position pos:line="6566" pos:column="25"/></operator><name pos:line="6566" pos:column="22">p1<pos:position pos:line="6566" pos:column="24"/></name></name></expr>]<pos:position pos:line="6566" pos:column="25"/></index></name></expr>;<pos:position pos:line="6566" pos:column="26"/></expr_stmt>
  <if pos:line="6567" pos:column="3">if<condition pos:line="6567" pos:column="5">( <expr><name pos:line="6567" pos:column="7">pC<pos:position pos:line="6567" pos:column="9"/></name></expr> )<pos:position pos:line="6567" pos:column="11"/></condition><then><block pos:line="6567" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="6568" pos:column="5">assert<pos:position pos:line="6568" pos:column="11"/></name><argument_list pos:line="6568" pos:column="11">( <argument><expr><name><name pos:line="6568" pos:column="13">pC<pos:position pos:line="6568" pos:column="15"/></name><operator pos:line="6568" pos:column="15">-&gt;<pos:position pos:line="6568" pos:column="20"/></operator><name pos:line="6568" pos:column="17">eCurType<pos:position pos:line="6568" pos:column="25"/></name></name><operator pos:line="6568" pos:column="25">==<pos:position pos:line="6568" pos:column="27"/></operator><name pos:line="6568" pos:column="27">CURTYPE_BTREE<pos:position pos:line="6568" pos:column="40"/></name></expr></argument> )<pos:position pos:line="6568" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="6568" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6569" pos:column="5">sqlite3BtreeCursorHint<pos:position pos:line="6569" pos:column="27"/></name><argument_list pos:line="6569" pos:column="27">(<argument><expr><name><name pos:line="6569" pos:column="28">pC<pos:position pos:line="6569" pos:column="30"/></name><operator pos:line="6569" pos:column="30">-&gt;<pos:position pos:line="6569" pos:column="35"/></operator><name pos:line="6569" pos:column="32">uc<pos:position pos:line="6569" pos:column="34"/></name><operator pos:line="6569" pos:column="34">.<pos:position pos:line="6569" pos:column="35"/></operator><name pos:line="6569" pos:column="35">pCursor<pos:position pos:line="6569" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="6569" pos:column="44">BTREE_HINT_RANGE<pos:position pos:line="6569" pos:column="60"/></name></expr></argument>,
                           <argument><expr><name><name pos:line="6570" pos:column="28">pOp<pos:position pos:line="6570" pos:column="31"/></name><operator pos:line="6570" pos:column="31">-&gt;<pos:position pos:line="6570" pos:column="36"/></operator><name pos:line="6570" pos:column="33">p4<pos:position pos:line="6570" pos:column="35"/></name><operator pos:line="6570" pos:column="35">.<pos:position pos:line="6570" pos:column="36"/></operator><name pos:line="6570" pos:column="36">pExpr<pos:position pos:line="6570" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="6570" pos:column="43">aMem<pos:position pos:line="6570" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6570" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="6570" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="6571" pos:column="4"/></block></then></if>
  <break pos:line="6572" pos:column="3">break;<pos:position pos:line="6572" pos:column="9"/></break>
}<pos:position pos:line="6573" pos:column="2"/></block>
<cpp:endif pos:line="6574" pos:column="1">#<cpp:directive pos:line="6574" pos:column="2">endif<pos:position pos:line="6574" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6574" pos:column="8">/* SQLITE_ENABLE_CURSOR_HINTS */</comment>

<comment type="block" pos:line="6576" pos:column="1">/* Opcode: Noop * * * * *
**
** Do nothing.  This instruction is often useful as a jump
** destination.
*/</comment>
<comment type="block" pos:line="6581" pos:column="1">/*
** The magic Explain opcode are only inserted when explain==2 (which
** is to say when the EXPLAIN QUERY PLAN syntax is used.)
** This opcode records information from the optimizer.  It is the
** the same as a no-op.  This opcodesnever appears in a real VM program.
*/</comment>
<default pos:line="6587" pos:column="1">default:<pos:position pos:line="6587" pos:column="9"/></default> <block pos:line="6587" pos:column="10">{          <comment type="block" pos:line="6587" pos:column="21">/* This is really OP_Noop and OP_Explain */</comment>
  <expr_stmt><expr><call><name pos:line="6588" pos:column="3">assert<pos:position pos:line="6588" pos:column="9"/></name><argument_list pos:line="6588" pos:column="9">( <argument><expr><name><name pos:line="6588" pos:column="11">pOp<pos:position pos:line="6588" pos:column="14"/></name><operator pos:line="6588" pos:column="14">-&gt;<pos:position pos:line="6588" pos:column="19"/></operator><name pos:line="6588" pos:column="16">opcode<pos:position pos:line="6588" pos:column="22"/></name></name><operator pos:line="6588" pos:column="22">==<pos:position pos:line="6588" pos:column="24"/></operator><name pos:line="6588" pos:column="24">OP_Noop<pos:position pos:line="6588" pos:column="31"/></name> <operator pos:line="6588" pos:column="32">||<pos:position pos:line="6588" pos:column="34"/></operator> <name><name pos:line="6588" pos:column="35">pOp<pos:position pos:line="6588" pos:column="38"/></name><operator pos:line="6588" pos:column="38">-&gt;<pos:position pos:line="6588" pos:column="43"/></operator><name pos:line="6588" pos:column="40">opcode<pos:position pos:line="6588" pos:column="46"/></name></name><operator pos:line="6588" pos:column="46">==<pos:position pos:line="6588" pos:column="48"/></operator><name pos:line="6588" pos:column="48">OP_Explain<pos:position pos:line="6588" pos:column="58"/></name></expr></argument> )<pos:position pos:line="6588" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="6588" pos:column="61"/></expr_stmt>
  <break pos:line="6589" pos:column="3">break;<pos:position pos:line="6589" pos:column="9"/></break>
}<pos:position pos:line="6590" pos:column="2"/></block>

<comment type="block" format="doxygen" pos:line="6592" pos:column="1">/*****************************************************************************
** The cases of the switch statement above this line should all be indented
** by 6 spaces.  But the left-most 6 spaces have been removed to improve the
** readability.  From this point on down, the normal indentation rules are
** restored.
*****************************************************************************/</comment>
    }<pos:position pos:line="6598" pos:column="6"/></block></switch>

<cpp:ifdef pos:line="6600" pos:column="1">#<cpp:directive pos:line="6600" pos:column="2">ifdef<pos:position pos:line="6600" pos:column="7"/></cpp:directive> <name pos:line="6600" pos:column="8">VDBE_PROFILE<pos:position pos:line="6600" pos:column="20"/></name></cpp:ifdef>
    <block pos:line="6601" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="6602" pos:column="7">u64<pos:position pos:line="6602" pos:column="10"/></name></type> <name pos:line="6602" pos:column="11">endTime<pos:position pos:line="6602" pos:column="18"/></name> <init pos:line="6602" pos:column="19">= <expr><call><name pos:line="6602" pos:column="21">sqlite3Hwtime<pos:position pos:line="6602" pos:column="34"/></name><argument_list pos:line="6602" pos:column="34">()<pos:position pos:line="6602" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6602" pos:column="37"/></decl_stmt>
      <if pos:line="6603" pos:column="7">if<condition pos:line="6603" pos:column="9">( <expr><name pos:line="6603" pos:column="11">endTime<pos:position pos:line="6603" pos:column="18"/></name><operator pos:line="6603" pos:column="18">&gt;<pos:position pos:line="6603" pos:column="22"/></operator><name pos:line="6603" pos:column="19">start<pos:position pos:line="6603" pos:column="24"/></name></expr> )<pos:position pos:line="6603" pos:column="26"/></condition><then pos:line="6603" pos:column="26"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="6603" pos:column="27">pOrigOp<pos:position pos:line="6603" pos:column="34"/></name><operator pos:line="6603" pos:column="34">-&gt;<pos:position pos:line="6603" pos:column="39"/></operator><name pos:line="6603" pos:column="36">cycles<pos:position pos:line="6603" pos:column="42"/></name></name> <operator pos:line="6603" pos:column="43">+=<pos:position pos:line="6603" pos:column="45"/></operator> <name pos:line="6603" pos:column="46">endTime<pos:position pos:line="6603" pos:column="53"/></name> <operator pos:line="6603" pos:column="54">-<pos:position pos:line="6603" pos:column="55"/></operator> <name pos:line="6603" pos:column="56">start<pos:position pos:line="6603" pos:column="61"/></name></expr>;<pos:position pos:line="6603" pos:column="62"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name><name pos:line="6604" pos:column="7">pOrigOp<pos:position pos:line="6604" pos:column="14"/></name><operator pos:line="6604" pos:column="14">-&gt;<pos:position pos:line="6604" pos:column="19"/></operator><name pos:line="6604" pos:column="16">cnt<pos:position pos:line="6604" pos:column="19"/></name></name><operator pos:line="6604" pos:column="19">++<pos:position pos:line="6604" pos:column="21"/></operator></expr>;<pos:position pos:line="6604" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="6605" pos:column="6"/></block>
<cpp:endif pos:line="6606" pos:column="1">#<cpp:directive pos:line="6606" pos:column="2">endif<pos:position pos:line="6606" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="6608" pos:column="5">/* The following code adds nothing to the actual functionality
    ** of the program.  It is only here for testing and debugging.
    ** On the other hand, it does burn CPU cycles every time through
    ** the evaluator loop.  So we can leave it out when NDEBUG is defined.
    */</comment>
<cpp:ifndef pos:line="6613" pos:column="1">#<cpp:directive pos:line="6613" pos:column="2">ifndef<pos:position pos:line="6613" pos:column="8"/></cpp:directive> <name pos:line="6613" pos:column="9">NDEBUG<pos:position pos:line="6613" pos:column="15"/></name></cpp:ifndef>
    <expr_stmt><expr><call><name pos:line="6614" pos:column="5">assert<pos:position pos:line="6614" pos:column="11"/></name><argument_list pos:line="6614" pos:column="11">( <argument><expr><name pos:line="6614" pos:column="13">pOp<pos:position pos:line="6614" pos:column="16"/></name><operator pos:line="6614" pos:column="16">&gt;=<pos:position pos:line="6614" pos:column="21"/></operator><operator pos:line="6614" pos:column="18">&amp;<pos:position pos:line="6614" pos:column="23"/></operator><name><name pos:line="6614" pos:column="19">aOp<pos:position pos:line="6614" pos:column="22"/></name><index pos:line="6614" pos:column="22">[<expr><operator pos:line="6614" pos:column="23">-<pos:position pos:line="6614" pos:column="24"/></operator><literal type="number" pos:line="6614" pos:column="24">1<pos:position pos:line="6614" pos:column="25"/></literal></expr>]<pos:position pos:line="6614" pos:column="26"/></index></name> <operator pos:line="6614" pos:column="27">&amp;&amp;<pos:position pos:line="6614" pos:column="37"/></operator> <name pos:line="6614" pos:column="30">pOp<pos:position pos:line="6614" pos:column="33"/></name><operator pos:line="6614" pos:column="33">&lt;<pos:position pos:line="6614" pos:column="37"/></operator><operator pos:line="6614" pos:column="34">&amp;<pos:position pos:line="6614" pos:column="39"/></operator><name><name pos:line="6614" pos:column="35">aOp<pos:position pos:line="6614" pos:column="38"/></name><index pos:line="6614" pos:column="38">[<expr><name><name pos:line="6614" pos:column="39">p<pos:position pos:line="6614" pos:column="40"/></name><operator pos:line="6614" pos:column="40">-&gt;<pos:position pos:line="6614" pos:column="45"/></operator><name pos:line="6614" pos:column="42">nOp<pos:position pos:line="6614" pos:column="45"/></name></name><operator pos:line="6614" pos:column="45">-<pos:position pos:line="6614" pos:column="46"/></operator><literal type="number" pos:line="6614" pos:column="46">1<pos:position pos:line="6614" pos:column="47"/></literal></expr>]<pos:position pos:line="6614" pos:column="48"/></index></name></expr></argument> )<pos:position pos:line="6614" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6614" pos:column="51"/></expr_stmt>

<cpp:ifdef pos:line="6616" pos:column="1">#<cpp:directive pos:line="6616" pos:column="2">ifdef<pos:position pos:line="6616" pos:column="7"/></cpp:directive> <name pos:line="6616" pos:column="8">SQLITE_DEBUG<pos:position pos:line="6616" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="6617" pos:column="5">if<condition pos:line="6617" pos:column="7">( <expr><name><name pos:line="6617" pos:column="9">db<pos:position pos:line="6617" pos:column="11"/></name><operator pos:line="6617" pos:column="11">-&gt;<pos:position pos:line="6617" pos:column="16"/></operator><name pos:line="6617" pos:column="13">flags<pos:position pos:line="6617" pos:column="18"/></name></name> <operator pos:line="6617" pos:column="19">&amp;<pos:position pos:line="6617" pos:column="24"/></operator> <name pos:line="6617" pos:column="21">SQLITE_VdbeTrace<pos:position pos:line="6617" pos:column="37"/></name></expr> )<pos:position pos:line="6617" pos:column="39"/></condition><then><block pos:line="6617" pos:column="39">{
      <decl_stmt><decl><type><name pos:line="6618" pos:column="7">u8<pos:position pos:line="6618" pos:column="9"/></name></type> <name pos:line="6618" pos:column="10">opProperty<pos:position pos:line="6618" pos:column="20"/></name> <init pos:line="6618" pos:column="21">= <expr><name><name pos:line="6618" pos:column="23">sqlite3OpcodeProperty<pos:position pos:line="6618" pos:column="44"/></name><index pos:line="6618" pos:column="44">[<expr><name><name pos:line="6618" pos:column="45">pOrigOp<pos:position pos:line="6618" pos:column="52"/></name><operator pos:line="6618" pos:column="52">-&gt;<pos:position pos:line="6618" pos:column="57"/></operator><name pos:line="6618" pos:column="54">opcode<pos:position pos:line="6618" pos:column="60"/></name></name></expr>]<pos:position pos:line="6618" pos:column="61"/></index></name></expr></init></decl>;<pos:position pos:line="6618" pos:column="62"/></decl_stmt>
      <if pos:line="6619" pos:column="7">if<condition pos:line="6619" pos:column="9">( <expr><name pos:line="6619" pos:column="11">rc<pos:position pos:line="6619" pos:column="13"/></name><operator pos:line="6619" pos:column="13">!=<pos:position pos:line="6619" pos:column="15"/></operator><literal type="number" pos:line="6619" pos:column="15">0<pos:position pos:line="6619" pos:column="16"/></literal></expr> )<pos:position pos:line="6619" pos:column="18"/></condition><then pos:line="6619" pos:column="18"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="6619" pos:column="19">printf<pos:position pos:line="6619" pos:column="25"/></name><argument_list pos:line="6619" pos:column="25">(<argument><expr><literal type="string" pos:line="6619" pos:column="26">"rc=%d\n"<pos:position pos:line="6619" pos:column="35"/></literal></expr></argument>,<argument><expr><name pos:line="6619" pos:column="36">rc<pos:position pos:line="6619" pos:column="38"/></name></expr></argument>)<pos:position pos:line="6619" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="6619" pos:column="40"/></expr_stmt></block></then></if>
      <if pos:line="6620" pos:column="7">if<condition pos:line="6620" pos:column="9">( <expr><name pos:line="6620" pos:column="11">opProperty<pos:position pos:line="6620" pos:column="21"/></name> <operator pos:line="6620" pos:column="22">&amp;<pos:position pos:line="6620" pos:column="27"/></operator> <operator pos:line="6620" pos:column="24">(<pos:position pos:line="6620" pos:column="25"/></operator><name pos:line="6620" pos:column="25">OPFLG_OUT2<pos:position pos:line="6620" pos:column="35"/></name><operator pos:line="6620" pos:column="35">)<pos:position pos:line="6620" pos:column="36"/></operator></expr> )<pos:position pos:line="6620" pos:column="38"/></condition><then><block pos:line="6620" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="6621" pos:column="9">registerTrace<pos:position pos:line="6621" pos:column="22"/></name><argument_list pos:line="6621" pos:column="22">(<argument><expr><name><name pos:line="6621" pos:column="23">pOrigOp<pos:position pos:line="6621" pos:column="30"/></name><operator pos:line="6621" pos:column="30">-&gt;<pos:position pos:line="6621" pos:column="35"/></operator><name pos:line="6621" pos:column="32">p2<pos:position pos:line="6621" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="6621" pos:column="36">&amp;<pos:position pos:line="6621" pos:column="41"/></operator><name><name pos:line="6621" pos:column="37">aMem<pos:position pos:line="6621" pos:column="41"/></name><index pos:line="6621" pos:column="41">[<expr><name><name pos:line="6621" pos:column="42">pOrigOp<pos:position pos:line="6621" pos:column="49"/></name><operator pos:line="6621" pos:column="49">-&gt;<pos:position pos:line="6621" pos:column="54"/></operator><name pos:line="6621" pos:column="51">p2<pos:position pos:line="6621" pos:column="53"/></name></name></expr>]<pos:position pos:line="6621" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="6621" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="6621" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="6622" pos:column="8"/></block></then></if>
      <if pos:line="6623" pos:column="7">if<condition pos:line="6623" pos:column="9">( <expr><name pos:line="6623" pos:column="11">opProperty<pos:position pos:line="6623" pos:column="21"/></name> <operator pos:line="6623" pos:column="22">&amp;<pos:position pos:line="6623" pos:column="27"/></operator> <name pos:line="6623" pos:column="24">OPFLG_OUT3<pos:position pos:line="6623" pos:column="34"/></name></expr> )<pos:position pos:line="6623" pos:column="36"/></condition><then><block pos:line="6623" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="6624" pos:column="9">registerTrace<pos:position pos:line="6624" pos:column="22"/></name><argument_list pos:line="6624" pos:column="22">(<argument><expr><name><name pos:line="6624" pos:column="23">pOrigOp<pos:position pos:line="6624" pos:column="30"/></name><operator pos:line="6624" pos:column="30">-&gt;<pos:position pos:line="6624" pos:column="35"/></operator><name pos:line="6624" pos:column="32">p3<pos:position pos:line="6624" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="6624" pos:column="36">&amp;<pos:position pos:line="6624" pos:column="41"/></operator><name><name pos:line="6624" pos:column="37">aMem<pos:position pos:line="6624" pos:column="41"/></name><index pos:line="6624" pos:column="41">[<expr><name><name pos:line="6624" pos:column="42">pOrigOp<pos:position pos:line="6624" pos:column="49"/></name><operator pos:line="6624" pos:column="49">-&gt;<pos:position pos:line="6624" pos:column="54"/></operator><name pos:line="6624" pos:column="51">p3<pos:position pos:line="6624" pos:column="53"/></name></name></expr>]<pos:position pos:line="6624" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="6624" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="6624" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="6625" pos:column="8"/></block></then></if>
    }<pos:position pos:line="6626" pos:column="6"/></block></then></if>
<cpp:endif pos:line="6627" pos:column="1">#<cpp:directive pos:line="6627" pos:column="2">endif<pos:position pos:line="6627" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="6627" pos:column="9">/* SQLITE_DEBUG */</comment>
<cpp:endif pos:line="6628" pos:column="1">#<cpp:directive pos:line="6628" pos:column="2">endif<pos:position pos:line="6628" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="6628" pos:column="9">/* NDEBUG */</comment>
  }<pos:position pos:line="6629" pos:column="4"/></block></for>  <comment type="block" pos:line="6629" pos:column="6">/* The end of the for(;;) loop the loops through opcodes */</comment>

  <comment type="block" pos:line="6631" pos:column="3">/* If we reach this point, it means that execution is finished with
  ** an error of some kind.
  */</comment>
<label><name pos:line="6634" pos:column="1">abort_due_to_error<pos:position pos:line="6634" pos:column="19"/></name>:<pos:position pos:line="6634" pos:column="20"/></label>
  <if pos:line="6635" pos:column="3">if<condition pos:line="6635" pos:column="5">( <expr><name><name pos:line="6635" pos:column="7">db<pos:position pos:line="6635" pos:column="9"/></name><operator pos:line="6635" pos:column="9">-&gt;<pos:position pos:line="6635" pos:column="14"/></operator><name pos:line="6635" pos:column="11">mallocFailed<pos:position pos:line="6635" pos:column="23"/></name></name></expr> )<pos:position pos:line="6635" pos:column="25"/></condition><then pos:line="6635" pos:column="25"> <block type="pseudo"><expr_stmt><expr><name pos:line="6635" pos:column="26">rc<pos:position pos:line="6635" pos:column="28"/></name> <operator pos:line="6635" pos:column="29">=<pos:position pos:line="6635" pos:column="30"/></operator> <name pos:line="6635" pos:column="31">SQLITE_NOMEM_BKPT<pos:position pos:line="6635" pos:column="48"/></name></expr>;<pos:position pos:line="6635" pos:column="49"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="6636" pos:column="3">assert<pos:position pos:line="6636" pos:column="9"/></name><argument_list pos:line="6636" pos:column="9">( <argument><expr><name pos:line="6636" pos:column="11">rc<pos:position pos:line="6636" pos:column="13"/></name></expr></argument> )<pos:position pos:line="6636" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="6636" pos:column="16"/></expr_stmt>
  <if pos:line="6637" pos:column="3">if<condition pos:line="6637" pos:column="5">( <expr><name><name pos:line="6637" pos:column="7">p<pos:position pos:line="6637" pos:column="8"/></name><operator pos:line="6637" pos:column="8">-&gt;<pos:position pos:line="6637" pos:column="13"/></operator><name pos:line="6637" pos:column="10">zErrMsg<pos:position pos:line="6637" pos:column="17"/></name></name><operator pos:line="6637" pos:column="17">==<pos:position pos:line="6637" pos:column="19"/></operator><literal type="number" pos:line="6637" pos:column="19">0<pos:position pos:line="6637" pos:column="20"/></literal> <operator pos:line="6637" pos:column="21">&amp;&amp;<pos:position pos:line="6637" pos:column="31"/></operator> <name pos:line="6637" pos:column="24">rc<pos:position pos:line="6637" pos:column="26"/></name><operator pos:line="6637" pos:column="26">!=<pos:position pos:line="6637" pos:column="28"/></operator><name pos:line="6637" pos:column="28">SQLITE_IOERR_NOMEM<pos:position pos:line="6637" pos:column="46"/></name></expr> )<pos:position pos:line="6637" pos:column="48"/></condition><then><block pos:line="6637" pos:column="48">{
    <expr_stmt><expr><call><name pos:line="6638" pos:column="5">sqlite3VdbeError<pos:position pos:line="6638" pos:column="21"/></name><argument_list pos:line="6638" pos:column="21">(<argument><expr><name pos:line="6638" pos:column="22">p<pos:position pos:line="6638" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6638" pos:column="25">"%s"<pos:position pos:line="6638" pos:column="29"/></literal></expr></argument>, <argument><expr><call><name pos:line="6638" pos:column="31">sqlite3ErrStr<pos:position pos:line="6638" pos:column="44"/></name><argument_list pos:line="6638" pos:column="44">(<argument><expr><name pos:line="6638" pos:column="45">rc<pos:position pos:line="6638" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6638" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="6638" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="6638" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="6639" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="6640" pos:column="3">p<pos:position pos:line="6640" pos:column="4"/></name><operator pos:line="6640" pos:column="4">-&gt;<pos:position pos:line="6640" pos:column="9"/></operator><name pos:line="6640" pos:column="6">rc<pos:position pos:line="6640" pos:column="8"/></name></name> <operator pos:line="6640" pos:column="9">=<pos:position pos:line="6640" pos:column="10"/></operator> <name pos:line="6640" pos:column="11">rc<pos:position pos:line="6640" pos:column="13"/></name></expr>;<pos:position pos:line="6640" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6641" pos:column="3">sqlite3SystemError<pos:position pos:line="6641" pos:column="21"/></name><argument_list pos:line="6641" pos:column="21">(<argument><expr><name pos:line="6641" pos:column="22">db<pos:position pos:line="6641" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="6641" pos:column="26">rc<pos:position pos:line="6641" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6641" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6641" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6642" pos:column="3">testcase<pos:position pos:line="6642" pos:column="11"/></name><argument_list pos:line="6642" pos:column="11">( <argument><expr><name><name pos:line="6642" pos:column="13">sqlite3GlobalConfig<pos:position pos:line="6642" pos:column="32"/></name><operator pos:line="6642" pos:column="32">.<pos:position pos:line="6642" pos:column="33"/></operator><name pos:line="6642" pos:column="33">xLog<pos:position pos:line="6642" pos:column="37"/></name></name><operator pos:line="6642" pos:column="37">!=<pos:position pos:line="6642" pos:column="39"/></operator><literal type="number" pos:line="6642" pos:column="39">0<pos:position pos:line="6642" pos:column="40"/></literal></expr></argument> )<pos:position pos:line="6642" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="6642" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6643" pos:column="3">sqlite3_log<pos:position pos:line="6643" pos:column="14"/></name><argument_list pos:line="6643" pos:column="14">(<argument><expr><name pos:line="6643" pos:column="15">rc<pos:position pos:line="6643" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6643" pos:column="19">"statement aborts at %d: [%s] %s"<pos:position pos:line="6643" pos:column="52"/></literal></expr></argument>, 
                   <argument><expr><call pos:line="6644" pos:column="20">(<name pos:line="6644" pos:column="21">int<pos:position pos:line="6644" pos:column="24"/></name>)<argument_list pos:line="6644" pos:column="25">(<argument><expr><name pos:line="6644" pos:column="26">pOp<pos:position pos:line="6644" pos:column="29"/></name> <operator pos:line="6644" pos:column="30">-<pos:position pos:line="6644" pos:column="31"/></operator> <name pos:line="6644" pos:column="32">aOp<pos:position pos:line="6644" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6644" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="6644" pos:column="38">p<pos:position pos:line="6644" pos:column="39"/></name><operator pos:line="6644" pos:column="39">-&gt;<pos:position pos:line="6644" pos:column="44"/></operator><name pos:line="6644" pos:column="41">zSql<pos:position pos:line="6644" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6644" pos:column="47">p<pos:position pos:line="6644" pos:column="48"/></name><operator pos:line="6644" pos:column="48">-&gt;<pos:position pos:line="6644" pos:column="53"/></operator><name pos:line="6644" pos:column="50">zErrMsg<pos:position pos:line="6644" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="6644" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="6644" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6645" pos:column="3">sqlite3VdbeHalt<pos:position pos:line="6645" pos:column="18"/></name><argument_list pos:line="6645" pos:column="18">(<argument><expr><name pos:line="6645" pos:column="19">p<pos:position pos:line="6645" pos:column="20"/></name></expr></argument>)<pos:position pos:line="6645" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="6645" pos:column="22"/></expr_stmt>
  <if pos:line="6646" pos:column="3">if<condition pos:line="6646" pos:column="5">( <expr><name pos:line="6646" pos:column="7">rc<pos:position pos:line="6646" pos:column="9"/></name><operator pos:line="6646" pos:column="9">==<pos:position pos:line="6646" pos:column="11"/></operator><name pos:line="6646" pos:column="11">SQLITE_IOERR_NOMEM<pos:position pos:line="6646" pos:column="29"/></name></expr> )<pos:position pos:line="6646" pos:column="31"/></condition><then pos:line="6646" pos:column="31"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="6646" pos:column="32">sqlite3OomFault<pos:position pos:line="6646" pos:column="47"/></name><argument_list pos:line="6646" pos:column="47">(<argument><expr><name pos:line="6646" pos:column="48">db<pos:position pos:line="6646" pos:column="50"/></name></expr></argument>)<pos:position pos:line="6646" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="6646" pos:column="52"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="6647" pos:column="3">rc<pos:position pos:line="6647" pos:column="5"/></name> <operator pos:line="6647" pos:column="6">=<pos:position pos:line="6647" pos:column="7"/></operator> <name pos:line="6647" pos:column="8">SQLITE_ERROR<pos:position pos:line="6647" pos:column="20"/></name></expr>;<pos:position pos:line="6647" pos:column="21"/></expr_stmt>
  <if pos:line="6648" pos:column="3">if<condition pos:line="6648" pos:column="5">( <expr><name pos:line="6648" pos:column="7">resetSchemaOnFault<pos:position pos:line="6648" pos:column="25"/></name><operator pos:line="6648" pos:column="25">&gt;<pos:position pos:line="6648" pos:column="29"/></operator><literal type="number" pos:line="6648" pos:column="26">0<pos:position pos:line="6648" pos:column="27"/></literal></expr> )<pos:position pos:line="6648" pos:column="29"/></condition><then><block pos:line="6648" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="6649" pos:column="5">sqlite3ResetOneSchema<pos:position pos:line="6649" pos:column="26"/></name><argument_list pos:line="6649" pos:column="26">(<argument><expr><name pos:line="6649" pos:column="27">db<pos:position pos:line="6649" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="6649" pos:column="31">resetSchemaOnFault<pos:position pos:line="6649" pos:column="49"/></name><operator pos:line="6649" pos:column="49">-<pos:position pos:line="6649" pos:column="50"/></operator><literal type="number" pos:line="6649" pos:column="50">1<pos:position pos:line="6649" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="6649" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6649" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="6650" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="6652" pos:column="3">/* This is the only way out of this procedure.  We have to
  ** release the mutexes on btrees that were acquired at the
  ** top. */</comment>
<label><name pos:line="6655" pos:column="1">vdbe_return<pos:position pos:line="6655" pos:column="12"/></name>:<pos:position pos:line="6655" pos:column="13"/></label>
  <expr_stmt><expr><call><name pos:line="6656" pos:column="3">testcase<pos:position pos:line="6656" pos:column="11"/></name><argument_list pos:line="6656" pos:column="11">( <argument><expr><name pos:line="6656" pos:column="13">nVmStep<pos:position pos:line="6656" pos:column="20"/></name><operator pos:line="6656" pos:column="20">&gt;<pos:position pos:line="6656" pos:column="24"/></operator><literal type="number" pos:line="6656" pos:column="21">0<pos:position pos:line="6656" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="6656" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6656" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6657" pos:column="3">p<pos:position pos:line="6657" pos:column="4"/></name><operator pos:line="6657" pos:column="4">-&gt;<pos:position pos:line="6657" pos:column="9"/></operator><name pos:line="6657" pos:column="6">aCounter<pos:position pos:line="6657" pos:column="14"/></name><index pos:line="6657" pos:column="14">[<expr><name pos:line="6657" pos:column="15">SQLITE_STMTSTATUS_VM_STEP<pos:position pos:line="6657" pos:column="40"/></name></expr>]<pos:position pos:line="6657" pos:column="41"/></index></name> <operator pos:line="6657" pos:column="42">+=<pos:position pos:line="6657" pos:column="44"/></operator> <operator pos:line="6657" pos:column="45">(<pos:position pos:line="6657" pos:column="46"/></operator><name pos:line="6657" pos:column="46">int<pos:position pos:line="6657" pos:column="49"/></name><operator pos:line="6657" pos:column="49">)<pos:position pos:line="6657" pos:column="50"/></operator><name pos:line="6657" pos:column="50">nVmStep<pos:position pos:line="6657" pos:column="57"/></name></expr>;<pos:position pos:line="6657" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6658" pos:column="3">sqlite3VdbeLeave<pos:position pos:line="6658" pos:column="19"/></name><argument_list pos:line="6658" pos:column="19">(<argument><expr><name pos:line="6658" pos:column="20">p<pos:position pos:line="6658" pos:column="21"/></name></expr></argument>)<pos:position pos:line="6658" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6658" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6659" pos:column="3">assert<pos:position pos:line="6659" pos:column="9"/></name><argument_list pos:line="6659" pos:column="9">( <argument><expr><name pos:line="6659" pos:column="11">rc<pos:position pos:line="6659" pos:column="13"/></name><operator pos:line="6659" pos:column="13">!=<pos:position pos:line="6659" pos:column="15"/></operator><name pos:line="6659" pos:column="15">SQLITE_OK<pos:position pos:line="6659" pos:column="24"/></name> <operator pos:line="6659" pos:column="25">||<pos:position pos:line="6659" pos:column="27"/></operator> <name pos:line="6659" pos:column="28">nExtraDelete<pos:position pos:line="6659" pos:column="40"/></name><operator pos:line="6659" pos:column="40">==<pos:position pos:line="6659" pos:column="42"/></operator><literal type="number" pos:line="6659" pos:column="42">0<pos:position pos:line="6659" pos:column="43"/></literal> 
       <operator pos:line="6660" pos:column="8">||<pos:position pos:line="6660" pos:column="10"/></operator> <call><name pos:line="6660" pos:column="11">sqlite3_strlike<pos:position pos:line="6660" pos:column="26"/></name><argument_list pos:line="6660" pos:column="26">(<argument><expr><literal type="string" pos:line="6660" pos:column="27">"DELETE%"<pos:position pos:line="6660" pos:column="36"/></literal></expr></argument>,<argument><expr><name><name pos:line="6660" pos:column="37">p<pos:position pos:line="6660" pos:column="38"/></name><operator pos:line="6660" pos:column="38">-&gt;<pos:position pos:line="6660" pos:column="43"/></operator><name pos:line="6660" pos:column="40">zSql<pos:position pos:line="6660" pos:column="44"/></name></name></expr></argument>,<argument><expr><literal type="number" pos:line="6660" pos:column="45">0<pos:position pos:line="6660" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="6660" pos:column="47"/></argument_list></call><operator pos:line="6660" pos:column="47">!=<pos:position pos:line="6660" pos:column="49"/></operator><literal type="number" pos:line="6660" pos:column="49">0<pos:position pos:line="6660" pos:column="50"/></literal></expr></argument> 
  )<pos:position pos:line="6661" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="6661" pos:column="5"/></expr_stmt>
  <return pos:line="6662" pos:column="3">return <expr><name pos:line="6662" pos:column="10">rc<pos:position pos:line="6662" pos:column="12"/></name></expr>;<pos:position pos:line="6662" pos:column="13"/></return>

  <comment type="block" pos:line="6664" pos:column="3">/* Jump to here if a string or blob larger than SQLITE_MAX_LENGTH
  ** is encountered.
  */</comment>
<label><name pos:line="6667" pos:column="1">too_big<pos:position pos:line="6667" pos:column="8"/></name>:<pos:position pos:line="6667" pos:column="9"/></label>
  <expr_stmt><expr><call><name pos:line="6668" pos:column="3">sqlite3VdbeError<pos:position pos:line="6668" pos:column="19"/></name><argument_list pos:line="6668" pos:column="19">(<argument><expr><name pos:line="6668" pos:column="20">p<pos:position pos:line="6668" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6668" pos:column="23">"string or blob too big"<pos:position pos:line="6668" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="6668" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="6668" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6669" pos:column="3">rc<pos:position pos:line="6669" pos:column="5"/></name> <operator pos:line="6669" pos:column="6">=<pos:position pos:line="6669" pos:column="7"/></operator> <name pos:line="6669" pos:column="8">SQLITE_TOOBIG<pos:position pos:line="6669" pos:column="21"/></name></expr>;<pos:position pos:line="6669" pos:column="22"/></expr_stmt>
  <goto pos:line="6670" pos:column="3">goto <name pos:line="6670" pos:column="8">abort_due_to_error<pos:position pos:line="6670" pos:column="26"/></name>;<pos:position pos:line="6670" pos:column="27"/></goto>

  <comment type="block" pos:line="6672" pos:column="3">/* Jump to here if a malloc() fails.
  */</comment>
<label><name pos:line="6674" pos:column="1">no_mem<pos:position pos:line="6674" pos:column="7"/></name>:<pos:position pos:line="6674" pos:column="8"/></label>
  <expr_stmt><expr><call><name pos:line="6675" pos:column="3">sqlite3OomFault<pos:position pos:line="6675" pos:column="18"/></name><argument_list pos:line="6675" pos:column="18">(<argument><expr><name pos:line="6675" pos:column="19">db<pos:position pos:line="6675" pos:column="21"/></name></expr></argument>)<pos:position pos:line="6675" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6675" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6676" pos:column="3">sqlite3VdbeError<pos:position pos:line="6676" pos:column="19"/></name><argument_list pos:line="6676" pos:column="19">(<argument><expr><name pos:line="6676" pos:column="20">p<pos:position pos:line="6676" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6676" pos:column="23">"out of memory"<pos:position pos:line="6676" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="6676" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="6676" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6677" pos:column="3">rc<pos:position pos:line="6677" pos:column="5"/></name> <operator pos:line="6677" pos:column="6">=<pos:position pos:line="6677" pos:column="7"/></operator> <name pos:line="6677" pos:column="8">SQLITE_NOMEM_BKPT<pos:position pos:line="6677" pos:column="25"/></name></expr>;<pos:position pos:line="6677" pos:column="26"/></expr_stmt>
  <goto pos:line="6678" pos:column="3">goto <name pos:line="6678" pos:column="8">abort_due_to_error<pos:position pos:line="6678" pos:column="26"/></name>;<pos:position pos:line="6678" pos:column="27"/></goto>

  <comment type="block" pos:line="6680" pos:column="3">/* Jump to here if the sqlite3_interrupt() API sets the interrupt
  ** flag.
  */</comment>
<label><name pos:line="6683" pos:column="1">abort_due_to_interrupt<pos:position pos:line="6683" pos:column="23"/></name>:<pos:position pos:line="6683" pos:column="24"/></label>
  <expr_stmt><expr><call><name pos:line="6684" pos:column="3">assert<pos:position pos:line="6684" pos:column="9"/></name><argument_list pos:line="6684" pos:column="9">( <argument><expr><name><name pos:line="6684" pos:column="11">db<pos:position pos:line="6684" pos:column="13"/></name><operator pos:line="6684" pos:column="13">-&gt;<pos:position pos:line="6684" pos:column="18"/></operator><name pos:line="6684" pos:column="15">u1<pos:position pos:line="6684" pos:column="17"/></name><operator pos:line="6684" pos:column="17">.<pos:position pos:line="6684" pos:column="18"/></operator><name pos:line="6684" pos:column="18">isInterrupted<pos:position pos:line="6684" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="6684" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6684" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6685" pos:column="3">rc<pos:position pos:line="6685" pos:column="5"/></name> <operator pos:line="6685" pos:column="6">=<pos:position pos:line="6685" pos:column="7"/></operator> <ternary><condition><expr><name><name pos:line="6685" pos:column="8">db<pos:position pos:line="6685" pos:column="10"/></name><operator pos:line="6685" pos:column="10">-&gt;<pos:position pos:line="6685" pos:column="15"/></operator><name pos:line="6685" pos:column="12">mallocFailed<pos:position pos:line="6685" pos:column="24"/></name></name></expr> ?<pos:position pos:line="6685" pos:column="26"/></condition><then pos:line="6685" pos:column="26"> <expr><name pos:line="6685" pos:column="27">SQLITE_NOMEM_BKPT<pos:position pos:line="6685" pos:column="44"/></name></expr> <pos:position pos:line="6685" pos:column="45"/></then><else pos:line="6685" pos:column="45">: <expr><name pos:line="6685" pos:column="47">SQLITE_INTERRUPT<pos:position pos:line="6685" pos:column="63"/></name></expr></else></ternary></expr>;<pos:position pos:line="6685" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6686" pos:column="3">p<pos:position pos:line="6686" pos:column="4"/></name><operator pos:line="6686" pos:column="4">-&gt;<pos:position pos:line="6686" pos:column="9"/></operator><name pos:line="6686" pos:column="6">rc<pos:position pos:line="6686" pos:column="8"/></name></name> <operator pos:line="6686" pos:column="9">=<pos:position pos:line="6686" pos:column="10"/></operator> <name pos:line="6686" pos:column="11">rc<pos:position pos:line="6686" pos:column="13"/></name></expr>;<pos:position pos:line="6686" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6687" pos:column="3">sqlite3VdbeError<pos:position pos:line="6687" pos:column="19"/></name><argument_list pos:line="6687" pos:column="19">(<argument><expr><name pos:line="6687" pos:column="20">p<pos:position pos:line="6687" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6687" pos:column="23">"%s"<pos:position pos:line="6687" pos:column="27"/></literal></expr></argument>, <argument><expr><call><name pos:line="6687" pos:column="29">sqlite3ErrStr<pos:position pos:line="6687" pos:column="42"/></name><argument_list pos:line="6687" pos:column="42">(<argument><expr><name pos:line="6687" pos:column="43">rc<pos:position pos:line="6687" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6687" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="6687" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="6687" pos:column="48"/></expr_stmt>
  <goto pos:line="6688" pos:column="3">goto <name pos:line="6688" pos:column="8">abort_due_to_error<pos:position pos:line="6688" pos:column="26"/></name>;<pos:position pos:line="6688" pos:column="27"/></goto>
}<pos:position pos:line="6689" pos:column="2"/></block></function></unit>
