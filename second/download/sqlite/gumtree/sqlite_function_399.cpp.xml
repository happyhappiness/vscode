<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_399.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sqlite3_win32_compact_heap<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">LPUINT<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">pnLargest<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list><block pos:line="1" pos:column="49">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">rc<pos:position pos:line="2" pos:column="9"/></name> <init pos:line="2" pos:column="10">= <expr><name pos:line="2" pos:column="12">SQLITE_OK<pos:position pos:line="2" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">UINT<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">nLargest<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">HANDLE<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">hHeap<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">winMemAssertMagic<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">()<pos:position pos:line="6" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="7" pos:column="3">hHeap<pos:position pos:line="7" pos:column="8"/></name> <operator pos:line="7" pos:column="9">=<pos:position pos:line="7" pos:column="10"/></operator> <call><name pos:line="7" pos:column="11">winMemGetHeap<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">()<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">assert<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">( <argument><expr><name pos:line="8" pos:column="11">hHeap<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">!=<pos:position pos:line="8" pos:column="18"/></operator><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></argument> )<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">assert<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">( <argument><expr><name pos:line="9" pos:column="11">hHeap<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">!=<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">INVALID_HANDLE_VALUE<pos:position pos:line="9" pos:column="38"/></name></expr></argument> )<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><operator pos:line="10" pos:column="5">!<pos:position pos:line="10" pos:column="6"/></operator><name pos:line="10" pos:column="6">SQLITE_OS_WINRT<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">&amp;&amp;<pos:position pos:line="10" pos:column="32"/></operator> <call><name pos:line="10" pos:column="25">defined<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">SQLITE_WIN32_MALLOC_VALIDATE<pos:position pos:line="10" pos:column="61"/></name></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">assert<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">( <argument><expr><call><name pos:line="11" pos:column="11">osHeapValidate<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">hHeap<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">SQLITE_WIN32_HEAP_FLAGS<pos:position pos:line="11" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="58">NULL<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call></expr></argument> )<pos:position pos:line="11" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><operator pos:line="13" pos:column="5">!<pos:position pos:line="13" pos:column="6"/></operator><name pos:line="13" pos:column="6">SQLITE_OS_WINCE<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">&amp;&amp;<pos:position pos:line="13" pos:column="32"/></operator> <operator pos:line="13" pos:column="25">!<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">SQLITE_OS_WINRT<pos:position pos:line="13" pos:column="41"/></name></expr></cpp:if>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">( <expr><operator pos:line="14" pos:column="7">(<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">nLargest<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator><call><name pos:line="14" pos:column="17">osHeapCompact<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">hHeap<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">SQLITE_WIN32_HEAP_FLAGS<pos:position pos:line="14" pos:column="61"/></name></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call><operator pos:line="14" pos:column="62">)<pos:position pos:line="14" pos:column="63"/></operator><operator pos:line="14" pos:column="63">==<pos:position pos:line="14" pos:column="65"/></operator><literal type="number" pos:line="14" pos:column="65">0<pos:position pos:line="14" pos:column="66"/></literal></expr> )<pos:position pos:line="14" pos:column="68"/></condition><then><block pos:line="14" pos:column="68">{
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">DWORD<pos:position pos:line="15" pos:column="10"/></name></type> <name pos:line="15" pos:column="11">lastErrno<pos:position pos:line="15" pos:column="20"/></name> <init pos:line="15" pos:column="21">= <expr><call><name pos:line="15" pos:column="23">osGetLastError<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">()<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="40"/></decl_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">( <expr><name pos:line="16" pos:column="9">lastErrno<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">==<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">NO_ERROR<pos:position pos:line="16" pos:column="28"/></name></expr> )<pos:position pos:line="16" pos:column="30"/></condition><then><block pos:line="16" pos:column="30">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">sqlite3_log<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">SQLITE_NOMEM<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="33">"failed to HeapCompact (no space), heap=%p"<pos:position pos:line="17" pos:column="76"/></literal></expr></argument>,
                  <argument><expr><operator pos:line="18" pos:column="19">(<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">void<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">*<pos:position pos:line="18" pos:column="25"/></operator><operator pos:line="18" pos:column="25">)<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">hHeap<pos:position pos:line="18" pos:column="31"/></name></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="19" pos:column="7">rc<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <name pos:line="19" pos:column="12">SQLITE_NOMEM_BKPT<pos:position pos:line="19" pos:column="29"/></name></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then><else pos:line="20" pos:column="6">else<block pos:line="20" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">sqlite3_log<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">SQLITE_ERROR<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="33">"failed to HeapCompact (%lu), heap=%p"<pos:position pos:line="21" pos:column="71"/></literal></expr></argument>,
                  <argument><expr><call><name pos:line="22" pos:column="19">osGetLastError<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">()<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="22" pos:column="37">(<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="38">void<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">*<pos:position pos:line="22" pos:column="43"/></operator><operator pos:line="22" pos:column="43">)<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="44">hHeap<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name pos:line="23" pos:column="7">rc<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <name pos:line="23" pos:column="12">SQLITE_ERROR<pos:position pos:line="23" pos:column="24"/></name></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></else></if>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>
<cpp:else pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">else<pos:position pos:line="26" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">sqlite3_log<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">SQLITE_NOTFOUND<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="32">"failed to HeapCompact, heap=%p"<pos:position pos:line="27" pos:column="64"/></literal></expr></argument>,
              <argument><expr><operator pos:line="28" pos:column="15">(<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">void<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">*<pos:position pos:line="28" pos:column="21"/></operator><operator pos:line="28" pos:column="21">)<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">hHeap<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">rc<pos:position pos:line="29" pos:column="5"/></name> <operator pos:line="29" pos:column="6">=<pos:position pos:line="29" pos:column="7"/></operator> <name pos:line="29" pos:column="8">SQLITE_NOTFOUND<pos:position pos:line="29" pos:column="23"/></name></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">( <expr><name pos:line="31" pos:column="7">pnLargest<pos:position pos:line="31" pos:column="16"/></name></expr> )<pos:position pos:line="31" pos:column="18"/></condition><then pos:line="31" pos:column="18"> <block type="pseudo"><expr_stmt><expr><operator pos:line="31" pos:column="19">*<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="20">pnLargest<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <name pos:line="31" pos:column="32">nLargest<pos:position pos:line="31" pos:column="40"/></name></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt></block></then></if>
  <return pos:line="32" pos:column="3">return <expr><name pos:line="32" pos:column="10">rc<pos:position pos:line="32" pos:column="12"/></name></expr>;<pos:position pos:line="32" pos:column="13"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
