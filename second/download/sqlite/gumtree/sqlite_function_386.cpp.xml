<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_386.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">sqlite3MemRealloc<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">pPrior<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">nByte<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list><block pos:line="1" pos:column="56">{
<cpp:ifdef pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">ifdef<pos:position pos:line="2" pos:column="7"/></cpp:directive> <name pos:line="2" pos:column="8">SQLITE_MALLOCSIZE<pos:position pos:line="2" pos:column="25"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">void<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">p<pos:position pos:line="3" pos:column="10"/></name> <init pos:line="3" pos:column="11">= <expr><call><name pos:line="3" pos:column="13">SQLITE_REALLOC<pos:position pos:line="3" pos:column="27"/></name><argument_list pos:line="3" pos:column="27">(<argument><expr><name pos:line="3" pos:column="28">pPrior<pos:position pos:line="3" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="36">nByte<pos:position pos:line="3" pos:column="41"/></name></expr></argument>)<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">( <expr><name pos:line="4" pos:column="7">p<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">==<pos:position pos:line="4" pos:column="10"/></operator><literal type="number" pos:line="4" pos:column="10">0<pos:position pos:line="4" pos:column="11"/></literal></expr> )<pos:position pos:line="4" pos:column="13"/></condition><then><block pos:line="4" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">testcase<pos:position pos:line="5" pos:column="13"/></name><argument_list pos:line="5" pos:column="13">( <argument><expr><name><name pos:line="5" pos:column="15">sqlite3GlobalConfig<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">.<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="35">xLog<pos:position pos:line="5" pos:column="39"/></name></name><operator pos:line="5" pos:column="39">!=<pos:position pos:line="5" pos:column="41"/></operator><literal type="number" pos:line="5" pos:column="41">0<pos:position pos:line="5" pos:column="42"/></literal></expr></argument> )<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">sqlite3_log<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">SQLITE_NOMEM<pos:position pos:line="6" pos:column="29"/></name></expr></argument>,
      <argument><expr><literal type="string" pos:line="7" pos:column="7">"failed memory resize %u to %u bytes"<pos:position pos:line="7" pos:column="44"/></literal></expr></argument>,
      <argument><expr><call><name pos:line="8" pos:column="7">SQLITE_MALLOCSIZE<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">pPrior<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="8" pos:column="34">nByte<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>
  <return pos:line="10" pos:column="3">return <expr><name pos:line="10" pos:column="10">p<pos:position pos:line="10" pos:column="11"/></name></expr>;<pos:position pos:line="10" pos:column="12"/></return>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">sqlite3_int64<pos:position pos:line="12" pos:column="16"/></name> <modifier pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></modifier></type><name pos:line="12" pos:column="18">p<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><operator pos:line="12" pos:column="22">(<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">sqlite3_int64<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">*<pos:position pos:line="12" pos:column="37"/></operator><operator pos:line="12" pos:column="37">)<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="38">pPrior<pos:position pos:line="12" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="45"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">assert<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">( <argument><expr><name pos:line="13" pos:column="11">pPrior<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">!=<pos:position pos:line="13" pos:column="19"/></operator><literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal> <operator pos:line="13" pos:column="21">&amp;&amp;<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="24">nByte<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">&gt;<pos:position pos:line="13" pos:column="33"/></operator><literal type="number" pos:line="13" pos:column="30">0<pos:position pos:line="13" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">assert<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">( <argument><expr><name pos:line="14" pos:column="11">nByte<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">==<pos:position pos:line="14" pos:column="18"/></operator><call><name pos:line="14" pos:column="18">ROUND8<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">nByte<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr></argument> )<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt> <comment type="block" pos:line="14" pos:column="35">/* EV: R-46199-30249 */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">p<pos:position pos:line="15" pos:column="4"/></name><operator pos:line="15" pos:column="4">--<pos:position pos:line="15" pos:column="6"/></operator></expr>;<pos:position pos:line="15" pos:column="7"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">p<pos:position pos:line="16" pos:column="4"/></name> <operator pos:line="16" pos:column="5">=<pos:position pos:line="16" pos:column="6"/></operator> <call><name pos:line="16" pos:column="7">SQLITE_REALLOC<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">p<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="25">nByte<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">+<pos:position pos:line="16" pos:column="31"/></operator><literal type="number" pos:line="16" pos:column="31">8<pos:position pos:line="16" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">( <expr><name pos:line="17" pos:column="7">p<pos:position pos:line="17" pos:column="8"/></name></expr> )<pos:position pos:line="17" pos:column="10"/></condition><then><block pos:line="17" pos:column="10">{
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">p<pos:position pos:line="18" pos:column="6"/></name><index pos:line="18" pos:column="6">[<expr><literal type="number" pos:line="18" pos:column="7">0<pos:position pos:line="18" pos:column="8"/></literal></expr>]<pos:position pos:line="18" pos:column="9"/></index></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <name pos:line="18" pos:column="12">nByte<pos:position pos:line="18" pos:column="17"/></name></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">p<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">++<pos:position pos:line="19" pos:column="8"/></operator></expr>;<pos:position pos:line="19" pos:column="9"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then><else pos:line="20" pos:column="4">else<block pos:line="20" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">testcase<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">( <argument><expr><name><name pos:line="21" pos:column="15">sqlite3GlobalConfig<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">.<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">xLog<pos:position pos:line="21" pos:column="39"/></name></name><operator pos:line="21" pos:column="39">!=<pos:position pos:line="21" pos:column="41"/></operator><literal type="number" pos:line="21" pos:column="41">0<pos:position pos:line="21" pos:column="42"/></literal></expr></argument> )<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">sqlite3_log<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">SQLITE_NOMEM<pos:position pos:line="22" pos:column="29"/></name></expr></argument>,
      <argument><expr><literal type="string" pos:line="23" pos:column="7">"failed memory resize %u to %u bytes"<pos:position pos:line="23" pos:column="44"/></literal></expr></argument>,
      <argument><expr><call><name pos:line="24" pos:column="7">sqlite3MemSize<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">pPrior<pos:position pos:line="24" pos:column="28"/></name></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="24" pos:column="31">nByte<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="25" pos:column="4"/></block></else></if>
  <return pos:line="26" pos:column="3">return <expr><operator pos:line="26" pos:column="10">(<pos:position pos:line="26" pos:column="11"/></operator><name pos:line="26" pos:column="11">void<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">*<pos:position pos:line="26" pos:column="16"/></operator><operator pos:line="26" pos:column="16">)<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">p<pos:position pos:line="26" pos:column="18"/></name></expr>;<pos:position pos:line="26" pos:column="19"/></return>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
