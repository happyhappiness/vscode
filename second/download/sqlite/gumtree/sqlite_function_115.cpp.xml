<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_115.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">void<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">sqlite3_errmsg16<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">sqlite3<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">db<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list><block pos:line="1" pos:column="42">{
  <decl_stmt><decl><specifier pos:line="2" pos:column="3">static<pos:position pos:line="2" pos:column="9"/></specifier> <type><specifier pos:line="2" pos:column="10">const<pos:position pos:line="2" pos:column="15"/></specifier> <name pos:line="2" pos:column="16">u16<pos:position pos:line="2" pos:column="19"/></name></type> <name><name pos:line="2" pos:column="20">outOfMem<pos:position pos:line="2" pos:column="28"/></name><index pos:line="2" pos:column="28">[]<pos:position pos:line="2" pos:column="30"/></index></name> <init pos:line="2" pos:column="31">= <expr><block pos:line="2" pos:column="33">{
    <expr><literal type="char" pos:line="3" pos:column="5">'o'<pos:position pos:line="3" pos:column="8"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="10">'u'<pos:position pos:line="3" pos:column="13"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="15">'t'<pos:position pos:line="3" pos:column="18"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="20">' '<pos:position pos:line="3" pos:column="23"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="25">'o'<pos:position pos:line="3" pos:column="28"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="30">'f'<pos:position pos:line="3" pos:column="33"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="35">' '<pos:position pos:line="3" pos:column="38"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="40">'m'<pos:position pos:line="3" pos:column="43"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="45">'e'<pos:position pos:line="3" pos:column="48"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="50">'m'<pos:position pos:line="3" pos:column="53"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="55">'o'<pos:position pos:line="3" pos:column="58"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="60">'r'<pos:position pos:line="3" pos:column="63"/></literal></expr>, <expr><literal type="char" pos:line="3" pos:column="65">'y'<pos:position pos:line="3" pos:column="68"/></literal></expr>, <expr><literal type="number" pos:line="3" pos:column="70">0<pos:position pos:line="3" pos:column="71"/></literal></expr>
  }<pos:position pos:line="4" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="5"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><specifier pos:line="5" pos:column="10">const<pos:position pos:line="5" pos:column="15"/></specifier> <name pos:line="5" pos:column="16">u16<pos:position pos:line="5" pos:column="19"/></name></type> <name><name pos:line="5" pos:column="20">misuse<pos:position pos:line="5" pos:column="26"/></name><index pos:line="5" pos:column="26">[]<pos:position pos:line="5" pos:column="28"/></index></name> <init pos:line="5" pos:column="29">= <expr><block pos:line="5" pos:column="31">{
    <expr><literal type="char" pos:line="6" pos:column="5">'b'<pos:position pos:line="6" pos:column="8"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="10">'a'<pos:position pos:line="6" pos:column="13"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="15">'d'<pos:position pos:line="6" pos:column="18"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="20">' '<pos:position pos:line="6" pos:column="23"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="25">'p'<pos:position pos:line="6" pos:column="28"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="30">'a'<pos:position pos:line="6" pos:column="33"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="35">'r'<pos:position pos:line="6" pos:column="38"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="40">'a'<pos:position pos:line="6" pos:column="43"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="45">'m'<pos:position pos:line="6" pos:column="48"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="50">'e'<pos:position pos:line="6" pos:column="53"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="55">'t'<pos:position pos:line="6" pos:column="58"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="60">'e'<pos:position pos:line="6" pos:column="63"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="65">'r'<pos:position pos:line="6" pos:column="68"/></literal></expr>, <expr><literal type="char" pos:line="6" pos:column="70">' '<pos:position pos:line="6" pos:column="73"/></literal></expr>,
    <expr><literal type="char" pos:line="7" pos:column="5">'o'<pos:position pos:line="7" pos:column="8"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="10">'r'<pos:position pos:line="7" pos:column="13"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="15">' '<pos:position pos:line="7" pos:column="18"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="20">'o'<pos:position pos:line="7" pos:column="23"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="25">'t'<pos:position pos:line="7" pos:column="28"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="30">'h'<pos:position pos:line="7" pos:column="33"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="35">'e'<pos:position pos:line="7" pos:column="38"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="40">'r'<pos:position pos:line="7" pos:column="43"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="45">' '<pos:position pos:line="7" pos:column="48"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="50">'A'<pos:position pos:line="7" pos:column="53"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="55">'P'<pos:position pos:line="7" pos:column="58"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="60">'I'<pos:position pos:line="7" pos:column="63"/></literal></expr>, <expr><literal type="char" pos:line="7" pos:column="65">' '<pos:position pos:line="7" pos:column="68"/></literal></expr>,
    <expr><literal type="char" pos:line="8" pos:column="5">'m'<pos:position pos:line="8" pos:column="8"/></literal></expr>, <expr><literal type="char" pos:line="8" pos:column="10">'i'<pos:position pos:line="8" pos:column="13"/></literal></expr>, <expr><literal type="char" pos:line="8" pos:column="15">'s'<pos:position pos:line="8" pos:column="18"/></literal></expr>, <expr><literal type="char" pos:line="8" pos:column="20">'u'<pos:position pos:line="8" pos:column="23"/></literal></expr>, <expr><literal type="char" pos:line="8" pos:column="25">'s'<pos:position pos:line="8" pos:column="28"/></literal></expr>, <expr><literal type="char" pos:line="8" pos:column="30">'e'<pos:position pos:line="8" pos:column="33"/></literal></expr>, <expr><literal type="number" pos:line="8" pos:column="35">0<pos:position pos:line="8" pos:column="36"/></literal></expr>
  }<pos:position pos:line="9" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="9" pos:column="5"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">void<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">z<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">( <expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">db<pos:position pos:line="12" pos:column="10"/></name></expr> )<pos:position pos:line="12" pos:column="12"/></condition><then><block pos:line="12" pos:column="12">{
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">void<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">*<pos:position pos:line="13" pos:column="19"/></operator><operator pos:line="13" pos:column="19">)<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">outOfMem<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">( <expr><operator pos:line="15" pos:column="7">!<pos:position pos:line="15" pos:column="8"/></operator><call><name pos:line="15" pos:column="8">sqlite3SafetyCheckSickOrOk<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">db<pos:position pos:line="15" pos:column="37"/></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr> )<pos:position pos:line="15" pos:column="40"/></condition><then><block pos:line="15" pos:column="40">{
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">void<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">*<pos:position pos:line="16" pos:column="19"/></operator><operator pos:line="16" pos:column="19">)<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">misuse<pos:position pos:line="16" pos:column="26"/></name></expr>;<pos:position pos:line="16" pos:column="27"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">sqlite3_mutex_enter<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name><name pos:line="18" pos:column="23">db<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">-&gt;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="27">mutex<pos:position pos:line="18" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">( <expr><name><name pos:line="19" pos:column="7">db<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">mallocFailed<pos:position pos:line="19" pos:column="23"/></name></name></expr> )<pos:position pos:line="19" pos:column="25"/></condition><then><block pos:line="19" pos:column="25">{
    <expr_stmt><expr><name pos:line="20" pos:column="5">z<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">void<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">*<pos:position pos:line="20" pos:column="16"/></operator><operator pos:line="20" pos:column="16">)<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">outOfMem<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then><else pos:line="21" pos:column="4">else<block pos:line="21" pos:column="8">{
    <expr_stmt><expr><name pos:line="22" pos:column="5">z<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <call><name pos:line="22" pos:column="9">sqlite3_value_text16<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name><name pos:line="22" pos:column="30">db<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">pErr<pos:position pos:line="22" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">( <expr><name pos:line="23" pos:column="9">z<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">==<pos:position pos:line="23" pos:column="12"/></operator><literal type="number" pos:line="23" pos:column="12">0<pos:position pos:line="23" pos:column="13"/></literal></expr> )<pos:position pos:line="23" pos:column="15"/></condition><then><block pos:line="23" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">sqlite3ErrorWithMsg<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">db<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="31">db<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">-&gt;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="35">errCode<pos:position pos:line="24" pos:column="42"/></name></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="44">sqlite3ErrStr<pos:position pos:line="24" pos:column="57"/></name><argument_list pos:line="24" pos:column="57">(<argument><expr><name><name pos:line="24" pos:column="58">db<pos:position pos:line="24" pos:column="60"/></name><operator pos:line="24" pos:column="60">-&gt;<pos:position pos:line="24" pos:column="65"/></operator><name pos:line="24" pos:column="62">errCode<pos:position pos:line="24" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="72"/></expr_stmt>
      <expr_stmt><expr><name pos:line="25" pos:column="7">z<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <call><name pos:line="25" pos:column="11">sqlite3_value_text16<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name><name pos:line="25" pos:column="32">db<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">-&gt;<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="36">pErr<pos:position pos:line="25" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="27" pos:column="5">/* A malloc() may have failed within the call to sqlite3_value_text16()
    ** above. If this is the case, then the db-&gt;mallocFailed flag needs to
    ** be cleared before returning. Do this directly, instead of via
    ** sqlite3ApiExit(), to avoid setting the database handle error message.
    */</comment>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">sqlite3OomClear<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">db<pos:position pos:line="32" pos:column="23"/></name></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">sqlite3_mutex_leave<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name><name pos:line="34" pos:column="23">db<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">-&gt;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="27">mutex<pos:position pos:line="34" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">z<pos:position pos:line="35" pos:column="11"/></name></expr>;<pos:position pos:line="35" pos:column="12"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
