<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_87.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">checkTreePage<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(
  <parameter><decl><type><name pos:line="2" pos:column="3">IntegrityCk<pos:position pos:line="2" pos:column="14"/></name> <modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">pCheck<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>,  <comment type="block" pos:line="2" pos:column="25">/* Context for the sanity check */</comment>
  <parameter><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">iPage<pos:position pos:line="3" pos:column="12"/></name></decl></parameter>,            <comment type="block" pos:line="3" pos:column="25">/* Page number of the page to check */</comment>
  <parameter><decl><type><name pos:line="4" pos:column="3">i64<pos:position pos:line="4" pos:column="6"/></name> <modifier pos:line="4" pos:column="7">*<pos:position pos:line="4" pos:column="8"/></modifier></type><name pos:line="4" pos:column="8">piMinKey<pos:position pos:line="4" pos:column="16"/></name></decl></parameter>,        <comment type="block" pos:line="4" pos:column="25">/* Write minimum integer primary key here */</comment>
  <parameter><decl><type><name pos:line="5" pos:column="3">i64<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">maxKey<pos:position pos:line="5" pos:column="13"/></name></decl></parameter>            <comment type="block" pos:line="5" pos:column="25">/* Error if integer primary key greater than this */</comment>
)<pos:position pos:line="6" pos:column="2"/></parameter_list><block pos:line="6" pos:column="2">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">MemPage<pos:position pos:line="7" pos:column="10"/></name> <modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">pPage<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>      <comment type="block" pos:line="7" pos:column="28">/* The page being analyzed */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>;<pos:position pos:line="8" pos:column="9"/></decl_stmt>                   <comment type="block" pos:line="8" pos:column="28">/* Loop counter */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">rc<pos:position pos:line="9" pos:column="9"/></name></decl>;<pos:position pos:line="9" pos:column="10"/></decl_stmt>                  <comment type="block" pos:line="9" pos:column="28">/* Result code from subroutine call */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">depth<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><operator pos:line="10" pos:column="15">-<pos:position pos:line="10" pos:column="16"/></operator><literal type="number" pos:line="10" pos:column="16">1<pos:position pos:line="10" pos:column="17"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="19">d2<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>      <comment type="block" pos:line="10" pos:column="28">/* Depth of a subtree */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">pgno<pos:position pos:line="11" pos:column="11"/></name></decl>;<pos:position pos:line="11" pos:column="12"/></decl_stmt>                <comment type="block" pos:line="11" pos:column="28">/* Page number */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">nFrag<pos:position pos:line="12" pos:column="12"/></name></decl>;<pos:position pos:line="12" pos:column="13"/></decl_stmt>               <comment type="block" pos:line="12" pos:column="28">/* Number of fragmented bytes on the page */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">hdr<pos:position pos:line="13" pos:column="10"/></name></decl>;<pos:position pos:line="13" pos:column="11"/></decl_stmt>                 <comment type="block" pos:line="13" pos:column="28">/* Offset to the page header */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">cellStart<pos:position pos:line="14" pos:column="16"/></name></decl>;<pos:position pos:line="14" pos:column="17"/></decl_stmt>           <comment type="block" pos:line="14" pos:column="28">/* Offset to the start of the cell pointer array */</comment>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">nCell<pos:position pos:line="15" pos:column="12"/></name></decl>;<pos:position pos:line="15" pos:column="13"/></decl_stmt>               <comment type="block" pos:line="15" pos:column="28">/* Number of cells */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">doCoverageCheck<pos:position pos:line="16" pos:column="22"/></name> <init pos:line="16" pos:column="23">= <expr><literal type="number" pos:line="16" pos:column="25">1<pos:position pos:line="16" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="27"/></decl_stmt> <comment type="block" pos:line="16" pos:column="28">/* True if cell coverage checking should be done */</comment>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">int<pos:position pos:line="17" pos:column="6"/></name></type> <name pos:line="17" pos:column="7">keyCanBeEqual<pos:position pos:line="17" pos:column="20"/></name> <init pos:line="17" pos:column="21">= <expr><literal type="number" pos:line="17" pos:column="23">1<pos:position pos:line="17" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="25"/></decl_stmt>   <comment type="block" pos:line="17" pos:column="28">/* True if IPK can be equal to maxKey
                           ** False if IPK must be strictly less than maxKey */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">u8<pos:position pos:line="19" pos:column="5"/></name> <modifier pos:line="19" pos:column="6">*<pos:position pos:line="19" pos:column="7"/></modifier></type><name pos:line="19" pos:column="7">data<pos:position pos:line="19" pos:column="11"/></name></decl>;<pos:position pos:line="19" pos:column="12"/></decl_stmt>                <comment type="block" pos:line="19" pos:column="28">/* Page content */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">u8<pos:position pos:line="20" pos:column="5"/></name> <modifier pos:line="20" pos:column="6">*<pos:position pos:line="20" pos:column="7"/></modifier></type><name pos:line="20" pos:column="7">pCell<pos:position pos:line="20" pos:column="12"/></name></decl>;<pos:position pos:line="20" pos:column="13"/></decl_stmt>               <comment type="block" pos:line="20" pos:column="28">/* Cell content */</comment>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">u8<pos:position pos:line="21" pos:column="5"/></name> <modifier pos:line="21" pos:column="6">*<pos:position pos:line="21" pos:column="7"/></modifier></type><name pos:line="21" pos:column="7">pCellIdx<pos:position pos:line="21" pos:column="15"/></name></decl>;<pos:position pos:line="21" pos:column="16"/></decl_stmt>            <comment type="block" pos:line="21" pos:column="28">/* Next element of the cell pointer array */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">BtShared<pos:position pos:line="22" pos:column="11"/></name> <modifier pos:line="22" pos:column="12">*<pos:position pos:line="22" pos:column="13"/></modifier></type><name pos:line="22" pos:column="13">pBt<pos:position pos:line="22" pos:column="16"/></name></decl>;<pos:position pos:line="22" pos:column="17"/></decl_stmt>           <comment type="block" pos:line="22" pos:column="28">/* The BtShared object that owns pPage */</comment>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">u32<pos:position pos:line="23" pos:column="6"/></name></type> <name pos:line="23" pos:column="7">pc<pos:position pos:line="23" pos:column="9"/></name></decl>;<pos:position pos:line="23" pos:column="10"/></decl_stmt>                  <comment type="block" pos:line="23" pos:column="28">/* Address of a cell */</comment>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">u32<pos:position pos:line="24" pos:column="6"/></name></type> <name pos:line="24" pos:column="7">usableSize<pos:position pos:line="24" pos:column="17"/></name></decl>;<pos:position pos:line="24" pos:column="18"/></decl_stmt>          <comment type="block" pos:line="24" pos:column="28">/* Usable size of the page */</comment>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">u32<pos:position pos:line="25" pos:column="6"/></name></type> <name pos:line="25" pos:column="7">contentOffset<pos:position pos:line="25" pos:column="20"/></name></decl>;<pos:position pos:line="25" pos:column="21"/></decl_stmt>       <comment type="block" pos:line="25" pos:column="28">/* Offset to the start of the cell content area */</comment>
  <decl_stmt><decl><type><name pos:line="26" pos:column="3">u32<pos:position pos:line="26" pos:column="6"/></name> <modifier pos:line="26" pos:column="7">*<pos:position pos:line="26" pos:column="8"/></modifier></type><name pos:line="26" pos:column="8">heap<pos:position pos:line="26" pos:column="12"/></name> <init pos:line="26" pos:column="13">= <expr><literal type="number" pos:line="26" pos:column="15">0<pos:position pos:line="26" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="17"/></decl_stmt>           <comment type="block" pos:line="26" pos:column="28">/* Min-heap used for checking cell coverage */</comment>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">u32<pos:position pos:line="27" pos:column="6"/></name></type> <name pos:line="27" pos:column="7">x<pos:position pos:line="27" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="27" pos:column="10">prev<pos:position pos:line="27" pos:column="14"/></name> <init pos:line="27" pos:column="15">= <expr><literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="19"/></decl_stmt>         <comment type="block" pos:line="27" pos:column="28">/* Next and previous entry on the min-heap */</comment>
  <decl_stmt><decl><type><specifier pos:line="28" pos:column="3">const<pos:position pos:line="28" pos:column="8"/></specifier> <name pos:line="28" pos:column="9">char<pos:position pos:line="28" pos:column="13"/></name> <modifier pos:line="28" pos:column="14">*<pos:position pos:line="28" pos:column="15"/></modifier></type><name pos:line="28" pos:column="15">saved_zPfx<pos:position pos:line="28" pos:column="25"/></name> <init pos:line="28" pos:column="26">= <expr><name><name pos:line="28" pos:column="28">pCheck<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">-&gt;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="36">zPfx<pos:position pos:line="28" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="28" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">int<pos:position pos:line="29" pos:column="6"/></name></type> <name pos:line="29" pos:column="7">saved_v1<pos:position pos:line="29" pos:column="15"/></name> <init pos:line="29" pos:column="16">= <expr><name><name pos:line="29" pos:column="18">pCheck<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">-&gt;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="26">v1<pos:position pos:line="29" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="29" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="30" pos:column="3">int<pos:position pos:line="30" pos:column="6"/></name></type> <name pos:line="30" pos:column="7">saved_v2<pos:position pos:line="30" pos:column="15"/></name> <init pos:line="30" pos:column="16">= <expr><name><name pos:line="30" pos:column="18">pCheck<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">-&gt;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="26">v2<pos:position pos:line="30" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="30" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="31" pos:column="3">u8<pos:position pos:line="31" pos:column="5"/></name></type> <name pos:line="31" pos:column="6">savedIsInit<pos:position pos:line="31" pos:column="17"/></name> <init pos:line="31" pos:column="18">= <expr><literal type="number" pos:line="31" pos:column="20">0<pos:position pos:line="31" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="22"/></decl_stmt>

  <comment type="block" pos:line="33" pos:column="3">/* Check that the page exists
  */</comment>
  <expr_stmt><expr><name pos:line="35" pos:column="3">pBt<pos:position pos:line="35" pos:column="6"/></name> <operator pos:line="35" pos:column="7">=<pos:position pos:line="35" pos:column="8"/></operator> <name><name pos:line="35" pos:column="9">pCheck<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">-&gt;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="17">pBt<pos:position pos:line="35" pos:column="20"/></name></name></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="36" pos:column="3">usableSize<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">=<pos:position pos:line="36" pos:column="15"/></operator> <name><name pos:line="36" pos:column="16">pBt<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">usableSize<pos:position pos:line="36" pos:column="31"/></name></name></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">( <expr><name pos:line="37" pos:column="7">iPage<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">==<pos:position pos:line="37" pos:column="14"/></operator><literal type="number" pos:line="37" pos:column="14">0<pos:position pos:line="37" pos:column="15"/></literal></expr> )<pos:position pos:line="37" pos:column="17"/></condition><then pos:line="37" pos:column="17"> <block type="pseudo"><return pos:line="37" pos:column="18">return <expr><literal type="number" pos:line="37" pos:column="25">0<pos:position pos:line="37" pos:column="26"/></literal></expr>;<pos:position pos:line="37" pos:column="27"/></return></block></then></if>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">( <expr><call><name pos:line="38" pos:column="7">checkRef<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">pCheck<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="24">iPage<pos:position pos:line="38" pos:column="29"/></name></expr></argument>)<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr> )<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32"> <block type="pseudo"><return pos:line="38" pos:column="33">return <expr><literal type="number" pos:line="38" pos:column="40">0<pos:position pos:line="38" pos:column="41"/></literal></expr>;<pos:position pos:line="38" pos:column="42"/></return></block></then></if>
  <expr_stmt><expr><name><name pos:line="39" pos:column="3">pCheck<pos:position pos:line="39" pos:column="9"/></name><operator pos:line="39" pos:column="9">-&gt;<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="11">zPfx<pos:position pos:line="39" pos:column="15"/></name></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <literal type="string" pos:line="39" pos:column="18">"Page %d: "<pos:position pos:line="39" pos:column="29"/></literal></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">pCheck<pos:position pos:line="40" pos:column="9"/></name><operator pos:line="40" pos:column="9">-&gt;<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="11">v1<pos:position pos:line="40" pos:column="13"/></name></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">iPage<pos:position pos:line="40" pos:column="21"/></name></expr>;<pos:position pos:line="40" pos:column="22"/></expr_stmt>
  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">( <expr><operator pos:line="41" pos:column="7">(<pos:position pos:line="41" pos:column="8"/></operator><name pos:line="41" pos:column="8">rc<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <call><name pos:line="41" pos:column="13">btreeGetPage<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">pBt<pos:position pos:line="41" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="31">(<pos:position pos:line="41" pos:column="32"/></operator><name pos:line="41" pos:column="32">Pgno<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">)<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="37">iPage<pos:position pos:line="41" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="44">&amp;<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="45">pPage<pos:position pos:line="41" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="52">0<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call><operator pos:line="41" pos:column="54">)<pos:position pos:line="41" pos:column="55"/></operator><operator pos:line="41" pos:column="55">!=<pos:position pos:line="41" pos:column="57"/></operator><literal type="number" pos:line="41" pos:column="57">0<pos:position pos:line="41" pos:column="58"/></literal></expr> )<pos:position pos:line="41" pos:column="60"/></condition><then><block pos:line="41" pos:column="60">{
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">checkAppendMsg<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">pCheck<pos:position pos:line="42" pos:column="26"/></name></expr></argument>,
       <argument><expr><literal type="string" pos:line="43" pos:column="8">"unable to get the page. error code=%d"<pos:position pos:line="43" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="49">rc<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
    <goto pos:line="44" pos:column="5">goto <name pos:line="44" pos:column="10">end_of_check<pos:position pos:line="44" pos:column="22"/></name>;<pos:position pos:line="44" pos:column="23"/></goto>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="47" pos:column="3">/* Clear MemPage.isInit to make sure the corruption detection code in
  ** btreeInitPage() is executed.  */</comment>
  <expr_stmt><expr><name pos:line="49" pos:column="3">savedIsInit<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <name><name pos:line="49" pos:column="17">pPage<pos:position pos:line="49" pos:column="22"/></name><operator pos:line="49" pos:column="22">-&gt;<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="24">isInit<pos:position pos:line="49" pos:column="30"/></name></name></expr>;<pos:position pos:line="49" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">pPage<pos:position pos:line="50" pos:column="8"/></name><operator pos:line="50" pos:column="8">-&gt;<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="10">isInit<pos:position pos:line="50" pos:column="16"/></name></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <literal type="number" pos:line="50" pos:column="19">0<pos:position pos:line="50" pos:column="20"/></literal></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
  <if pos:line="51" pos:column="3">if<condition pos:line="51" pos:column="5">( <expr><operator pos:line="51" pos:column="7">(<pos:position pos:line="51" pos:column="8"/></operator><name pos:line="51" pos:column="8">rc<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <call><name pos:line="51" pos:column="13">btreeInitPage<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">pPage<pos:position pos:line="51" pos:column="32"/></name></expr></argument>)<pos:position pos:line="51" pos:column="33"/></argument_list></call><operator pos:line="51" pos:column="33">)<pos:position pos:line="51" pos:column="34"/></operator><operator pos:line="51" pos:column="34">!=<pos:position pos:line="51" pos:column="36"/></operator><literal type="number" pos:line="51" pos:column="36">0<pos:position pos:line="51" pos:column="37"/></literal></expr> )<pos:position pos:line="51" pos:column="39"/></condition><then><block pos:line="51" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">assert<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">( <argument><expr><name pos:line="52" pos:column="13">rc<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">==<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="17">SQLITE_CORRUPT<pos:position pos:line="52" pos:column="31"/></name></expr></argument> )<pos:position pos:line="52" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>  <comment type="block" pos:line="52" pos:column="36">/* The only possible error from InitPage */</comment>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">checkAppendMsg<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">pCheck<pos:position pos:line="53" pos:column="26"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="54" pos:column="20">"btreeInitPage() returns error code %d"<pos:position pos:line="54" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="61">rc<pos:position pos:line="54" pos:column="63"/></name></expr></argument>)<pos:position pos:line="54" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt>
    <goto pos:line="55" pos:column="5">goto <name pos:line="55" pos:column="10">end_of_check<pos:position pos:line="55" pos:column="22"/></name>;<pos:position pos:line="55" pos:column="23"/></goto>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="57" pos:column="3">data<pos:position pos:line="57" pos:column="7"/></name> <operator pos:line="57" pos:column="8">=<pos:position pos:line="57" pos:column="9"/></operator> <name><name pos:line="57" pos:column="10">pPage<pos:position pos:line="57" pos:column="15"/></name><operator pos:line="57" pos:column="15">-&gt;<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="17">aData<pos:position pos:line="57" pos:column="22"/></name></name></expr>;<pos:position pos:line="57" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="58" pos:column="3">hdr<pos:position pos:line="58" pos:column="6"/></name> <operator pos:line="58" pos:column="7">=<pos:position pos:line="58" pos:column="8"/></operator> <name><name pos:line="58" pos:column="9">pPage<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">-&gt;<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="16">hdrOffset<pos:position pos:line="58" pos:column="25"/></name></name></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="60" pos:column="3">/* Set up for cell analysis */</comment>
  <expr_stmt><expr><name><name pos:line="61" pos:column="3">pCheck<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">-&gt;<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="11">zPfx<pos:position pos:line="61" pos:column="15"/></name></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <literal type="string" pos:line="61" pos:column="18">"On tree page %d cell %d: "<pos:position pos:line="61" pos:column="45"/></literal></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="62" pos:column="3">contentOffset<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <call><name pos:line="62" pos:column="19">get2byteNotZero<pos:position pos:line="62" pos:column="34"/></name><argument_list pos:line="62" pos:column="34">(<argument><expr><operator pos:line="62" pos:column="35">&amp;<pos:position pos:line="62" pos:column="40"/></operator><name><name pos:line="62" pos:column="36">data<pos:position pos:line="62" pos:column="40"/></name><index pos:line="62" pos:column="40">[<expr><name pos:line="62" pos:column="41">hdr<pos:position pos:line="62" pos:column="44"/></name><operator pos:line="62" pos:column="44">+<pos:position pos:line="62" pos:column="45"/></operator><literal type="number" pos:line="62" pos:column="45">5<pos:position pos:line="62" pos:column="46"/></literal></expr>]<pos:position pos:line="62" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="62" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="63" pos:column="3">assert<pos:position pos:line="63" pos:column="9"/></name><argument_list pos:line="63" pos:column="9">( <argument><expr><name pos:line="63" pos:column="11">contentOffset<pos:position pos:line="63" pos:column="24"/></name><operator pos:line="63" pos:column="24">&lt;=<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="26">usableSize<pos:position pos:line="63" pos:column="36"/></name></expr></argument> )<pos:position pos:line="63" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="39"/></expr_stmt>  <comment type="block" pos:line="63" pos:column="41">/* Enforced by btreeInitPage() */</comment>

  <comment type="block" pos:line="65" pos:column="3">/* EVIDENCE-OF: R-37002-32774 The two-byte integer at offset 3 gives the
  ** number of cells on the page. */</comment>
  <expr_stmt><expr><name pos:line="67" pos:column="3">nCell<pos:position pos:line="67" pos:column="8"/></name> <operator pos:line="67" pos:column="9">=<pos:position pos:line="67" pos:column="10"/></operator> <call><name pos:line="67" pos:column="11">get2byte<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><operator pos:line="67" pos:column="20">&amp;<pos:position pos:line="67" pos:column="25"/></operator><name><name pos:line="67" pos:column="21">data<pos:position pos:line="67" pos:column="25"/></name><index pos:line="67" pos:column="25">[<expr><name pos:line="67" pos:column="26">hdr<pos:position pos:line="67" pos:column="29"/></name><operator pos:line="67" pos:column="29">+<pos:position pos:line="67" pos:column="30"/></operator><literal type="number" pos:line="67" pos:column="30">3<pos:position pos:line="67" pos:column="31"/></literal></expr>]<pos:position pos:line="67" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">assert<pos:position pos:line="68" pos:column="9"/></name><argument_list pos:line="68" pos:column="9">( <argument><expr><name><name pos:line="68" pos:column="11">pPage<pos:position pos:line="68" pos:column="16"/></name><operator pos:line="68" pos:column="16">-&gt;<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="18">nCell<pos:position pos:line="68" pos:column="23"/></name></name><operator pos:line="68" pos:column="23">==<pos:position pos:line="68" pos:column="25"/></operator><name pos:line="68" pos:column="25">nCell<pos:position pos:line="68" pos:column="30"/></name></expr></argument> )<pos:position pos:line="68" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="70" pos:column="3">/* EVIDENCE-OF: R-23882-45353 The cell pointer array of a b-tree page
  ** immediately follows the b-tree page header. */</comment>
  <expr_stmt><expr><name pos:line="72" pos:column="3">cellStart<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">=<pos:position pos:line="72" pos:column="14"/></operator> <name pos:line="72" pos:column="15">hdr<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">+<pos:position pos:line="72" pos:column="20"/></operator> <literal type="number" pos:line="72" pos:column="21">12<pos:position pos:line="72" pos:column="23"/></literal> <operator pos:line="72" pos:column="24">-<pos:position pos:line="72" pos:column="25"/></operator> <literal type="number" pos:line="72" pos:column="26">4<pos:position pos:line="72" pos:column="27"/></literal><operator pos:line="72" pos:column="27">*<pos:position pos:line="72" pos:column="28"/></operator><name><name pos:line="72" pos:column="28">pPage<pos:position pos:line="72" pos:column="33"/></name><operator pos:line="72" pos:column="33">-&gt;<pos:position pos:line="72" pos:column="38"/></operator><name pos:line="72" pos:column="35">leaf<pos:position pos:line="72" pos:column="39"/></name></name></expr>;<pos:position pos:line="72" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="73" pos:column="3">assert<pos:position pos:line="73" pos:column="9"/></name><argument_list pos:line="73" pos:column="9">( <argument><expr><name><name pos:line="73" pos:column="11">pPage<pos:position pos:line="73" pos:column="16"/></name><operator pos:line="73" pos:column="16">-&gt;<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="18">aCellIdx<pos:position pos:line="73" pos:column="26"/></name></name><operator pos:line="73" pos:column="26">==<pos:position pos:line="73" pos:column="28"/></operator><operator pos:line="73" pos:column="28">&amp;<pos:position pos:line="73" pos:column="33"/></operator><name><name pos:line="73" pos:column="29">data<pos:position pos:line="73" pos:column="33"/></name><index pos:line="73" pos:column="33">[<expr><name pos:line="73" pos:column="34">cellStart<pos:position pos:line="73" pos:column="43"/></name></expr>]<pos:position pos:line="73" pos:column="44"/></index></name></expr></argument> )<pos:position pos:line="73" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name pos:line="74" pos:column="3">pCellIdx<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">=<pos:position pos:line="74" pos:column="13"/></operator> <operator pos:line="74" pos:column="14">&amp;<pos:position pos:line="74" pos:column="19"/></operator><name><name pos:line="74" pos:column="15">data<pos:position pos:line="74" pos:column="19"/></name><index pos:line="74" pos:column="19">[<expr><name pos:line="74" pos:column="20">cellStart<pos:position pos:line="74" pos:column="29"/></name> <operator pos:line="74" pos:column="30">+<pos:position pos:line="74" pos:column="31"/></operator> <literal type="number" pos:line="74" pos:column="32">2<pos:position pos:line="74" pos:column="33"/></literal><operator pos:line="74" pos:column="33">*<pos:position pos:line="74" pos:column="34"/></operator><operator pos:line="74" pos:column="34">(<pos:position pos:line="74" pos:column="35"/></operator><name pos:line="74" pos:column="35">nCell<pos:position pos:line="74" pos:column="40"/></name><operator pos:line="74" pos:column="40">-<pos:position pos:line="74" pos:column="41"/></operator><literal type="number" pos:line="74" pos:column="41">1<pos:position pos:line="74" pos:column="42"/></literal><operator pos:line="74" pos:column="42">)<pos:position pos:line="74" pos:column="43"/></operator></expr>]<pos:position pos:line="74" pos:column="44"/></index></name></expr>;<pos:position pos:line="74" pos:column="45"/></expr_stmt>

  <if pos:line="76" pos:column="3">if<condition pos:line="76" pos:column="5">( <expr><operator pos:line="76" pos:column="7">!<pos:position pos:line="76" pos:column="8"/></operator><name><name pos:line="76" pos:column="8">pPage<pos:position pos:line="76" pos:column="13"/></name><operator pos:line="76" pos:column="13">-&gt;<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="15">leaf<pos:position pos:line="76" pos:column="19"/></name></name></expr> )<pos:position pos:line="76" pos:column="21"/></condition><then><block pos:line="76" pos:column="21">{
    <comment type="block" pos:line="77" pos:column="5">/* Analyze the right-child page of internal pages */</comment>
    <expr_stmt><expr><name pos:line="78" pos:column="5">pgno<pos:position pos:line="78" pos:column="9"/></name> <operator pos:line="78" pos:column="10">=<pos:position pos:line="78" pos:column="11"/></operator> <call><name pos:line="78" pos:column="12">get4byte<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">(<argument><expr><operator pos:line="78" pos:column="21">&amp;<pos:position pos:line="78" pos:column="26"/></operator><name><name pos:line="78" pos:column="22">data<pos:position pos:line="78" pos:column="26"/></name><index pos:line="78" pos:column="26">[<expr><name pos:line="78" pos:column="27">hdr<pos:position pos:line="78" pos:column="30"/></name><operator pos:line="78" pos:column="30">+<pos:position pos:line="78" pos:column="31"/></operator><literal type="number" pos:line="78" pos:column="31">8<pos:position pos:line="78" pos:column="32"/></literal></expr>]<pos:position pos:line="78" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="78" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="35"/></expr_stmt>
<cpp:ifndef pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">ifndef<pos:position pos:line="79" pos:column="8"/></cpp:directive> <name pos:line="79" pos:column="9">SQLITE_OMIT_AUTOVACUUM<pos:position pos:line="79" pos:column="31"/></name></cpp:ifndef>
    <if pos:line="80" pos:column="5">if<condition pos:line="80" pos:column="7">( <expr><name><name pos:line="80" pos:column="9">pBt<pos:position pos:line="80" pos:column="12"/></name><operator pos:line="80" pos:column="12">-&gt;<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="14">autoVacuum<pos:position pos:line="80" pos:column="24"/></name></name></expr> )<pos:position pos:line="80" pos:column="26"/></condition><then><block pos:line="80" pos:column="26">{
      <expr_stmt><expr><name><name pos:line="81" pos:column="7">pCheck<pos:position pos:line="81" pos:column="13"/></name><operator pos:line="81" pos:column="13">-&gt;<pos:position pos:line="81" pos:column="18"/></operator><name pos:line="81" pos:column="15">zPfx<pos:position pos:line="81" pos:column="19"/></name></name> <operator pos:line="81" pos:column="20">=<pos:position pos:line="81" pos:column="21"/></operator> <literal type="string" pos:line="81" pos:column="22">"On page %d at right child: "<pos:position pos:line="81" pos:column="51"/></literal></expr>;<pos:position pos:line="81" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="82" pos:column="7">checkPtrmap<pos:position pos:line="82" pos:column="18"/></name><argument_list pos:line="82" pos:column="18">(<argument><expr><name pos:line="82" pos:column="19">pCheck<pos:position pos:line="82" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="27">pgno<pos:position pos:line="82" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="33">PTRMAP_BTREE<pos:position pos:line="82" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="47">iPage<pos:position pos:line="82" pos:column="52"/></name></expr></argument>)<pos:position pos:line="82" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="85" pos:column="5">depth<pos:position pos:line="85" pos:column="10"/></name> <operator pos:line="85" pos:column="11">=<pos:position pos:line="85" pos:column="12"/></operator> <call><name pos:line="85" pos:column="13">checkTreePage<pos:position pos:line="85" pos:column="26"/></name><argument_list pos:line="85" pos:column="26">(<argument><expr><name pos:line="85" pos:column="27">pCheck<pos:position pos:line="85" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="35">pgno<pos:position pos:line="85" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="41">&amp;<pos:position pos:line="85" pos:column="46"/></operator><name pos:line="85" pos:column="42">maxKey<pos:position pos:line="85" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="50">maxKey<pos:position pos:line="85" pos:column="56"/></name></expr></argument>)<pos:position pos:line="85" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="86" pos:column="5">keyCanBeEqual<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">=<pos:position pos:line="86" pos:column="20"/></operator> <literal type="number" pos:line="86" pos:column="21">0<pos:position pos:line="86" pos:column="22"/></literal></expr>;<pos:position pos:line="86" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="87" pos:column="4"/></block></then><else pos:line="87" pos:column="4">else<block pos:line="87" pos:column="8">{
    <comment type="block" pos:line="88" pos:column="5">/* For leaf pages, the coverage check will occur in the same loop
    ** as the other cell checks, so initialize the heap.  */</comment>
    <expr_stmt><expr><name pos:line="90" pos:column="5">heap<pos:position pos:line="90" pos:column="9"/></name> <operator pos:line="90" pos:column="10">=<pos:position pos:line="90" pos:column="11"/></operator> <name><name pos:line="90" pos:column="12">pCheck<pos:position pos:line="90" pos:column="18"/></name><operator pos:line="90" pos:column="18">-&gt;<pos:position pos:line="90" pos:column="23"/></operator><name pos:line="90" pos:column="20">heap<pos:position pos:line="90" pos:column="24"/></name></name></expr>;<pos:position pos:line="90" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">heap<pos:position pos:line="91" pos:column="9"/></name><index pos:line="91" pos:column="9">[<expr><literal type="number" pos:line="91" pos:column="10">0<pos:position pos:line="91" pos:column="11"/></literal></expr>]<pos:position pos:line="91" pos:column="12"/></index></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <literal type="number" pos:line="91" pos:column="15">0<pos:position pos:line="91" pos:column="16"/></literal></expr>;<pos:position pos:line="91" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="92" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="94" pos:column="3">/* EVIDENCE-OF: R-02776-14802 The cell pointer array consists of K 2-byte
  ** integer offsets to the cell contents. */</comment>
  <for pos:line="96" pos:column="3">for<control pos:line="96" pos:column="6">(<init><expr><name pos:line="96" pos:column="7">i<pos:position pos:line="96" pos:column="8"/></name><operator pos:line="96" pos:column="8">=<pos:position pos:line="96" pos:column="9"/></operator><name pos:line="96" pos:column="9">nCell<pos:position pos:line="96" pos:column="14"/></name><operator pos:line="96" pos:column="14">-<pos:position pos:line="96" pos:column="15"/></operator><literal type="number" pos:line="96" pos:column="15">1<pos:position pos:line="96" pos:column="16"/></literal></expr>;<pos:position pos:line="96" pos:column="17"/></init> <condition><expr><name pos:line="96" pos:column="18">i<pos:position pos:line="96" pos:column="19"/></name><operator pos:line="96" pos:column="19">&gt;=<pos:position pos:line="96" pos:column="24"/></operator><literal type="number" pos:line="96" pos:column="21">0<pos:position pos:line="96" pos:column="22"/></literal> <operator pos:line="96" pos:column="23">&amp;&amp;<pos:position pos:line="96" pos:column="33"/></operator> <name><name pos:line="96" pos:column="26">pCheck<pos:position pos:line="96" pos:column="32"/></name><operator pos:line="96" pos:column="32">-&gt;<pos:position pos:line="96" pos:column="37"/></operator><name pos:line="96" pos:column="34">mxErr<pos:position pos:line="96" pos:column="39"/></name></name></expr>;<pos:position pos:line="96" pos:column="40"/></condition> <incr><expr><name pos:line="96" pos:column="41">i<pos:position pos:line="96" pos:column="42"/></name><operator pos:line="96" pos:column="42">--<pos:position pos:line="96" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="96" pos:column="45"/></control><block pos:line="96" pos:column="45">{
    <decl_stmt><decl><type><name pos:line="97" pos:column="5">CellInfo<pos:position pos:line="97" pos:column="13"/></name></type> <name pos:line="97" pos:column="14">info<pos:position pos:line="97" pos:column="18"/></name></decl>;<pos:position pos:line="97" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="99" pos:column="5">/* Check cell size */</comment>
    <expr_stmt><expr><name><name pos:line="100" pos:column="5">pCheck<pos:position pos:line="100" pos:column="11"/></name><operator pos:line="100" pos:column="11">-&gt;<pos:position pos:line="100" pos:column="16"/></operator><name pos:line="100" pos:column="13">v2<pos:position pos:line="100" pos:column="15"/></name></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <name pos:line="100" pos:column="18">i<pos:position pos:line="100" pos:column="19"/></name></expr>;<pos:position pos:line="100" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">assert<pos:position pos:line="101" pos:column="11"/></name><argument_list pos:line="101" pos:column="11">( <argument><expr><name pos:line="101" pos:column="13">pCellIdx<pos:position pos:line="101" pos:column="21"/></name><operator pos:line="101" pos:column="21">==<pos:position pos:line="101" pos:column="23"/></operator><operator pos:line="101" pos:column="23">&amp;<pos:position pos:line="101" pos:column="28"/></operator><name><name pos:line="101" pos:column="24">data<pos:position pos:line="101" pos:column="28"/></name><index pos:line="101" pos:column="28">[<expr><name pos:line="101" pos:column="29">cellStart<pos:position pos:line="101" pos:column="38"/></name> <operator pos:line="101" pos:column="39">+<pos:position pos:line="101" pos:column="40"/></operator> <name pos:line="101" pos:column="41">i<pos:position pos:line="101" pos:column="42"/></name><operator pos:line="101" pos:column="42">*<pos:position pos:line="101" pos:column="43"/></operator><literal type="number" pos:line="101" pos:column="43">2<pos:position pos:line="101" pos:column="44"/></literal></expr>]<pos:position pos:line="101" pos:column="45"/></index></name></expr></argument> )<pos:position pos:line="101" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="102" pos:column="5">pc<pos:position pos:line="102" pos:column="7"/></name> <operator pos:line="102" pos:column="8">=<pos:position pos:line="102" pos:column="9"/></operator> <call><name pos:line="102" pos:column="10">get2byteAligned<pos:position pos:line="102" pos:column="25"/></name><argument_list pos:line="102" pos:column="25">(<argument><expr><name pos:line="102" pos:column="26">pCellIdx<pos:position pos:line="102" pos:column="34"/></name></expr></argument>)<pos:position pos:line="102" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="103" pos:column="5">pCellIdx<pos:position pos:line="103" pos:column="13"/></name> <operator pos:line="103" pos:column="14">-=<pos:position pos:line="103" pos:column="16"/></operator> <literal type="number" pos:line="103" pos:column="17">2<pos:position pos:line="103" pos:column="18"/></literal></expr>;<pos:position pos:line="103" pos:column="19"/></expr_stmt>
    <if pos:line="104" pos:column="5">if<condition pos:line="104" pos:column="7">( <expr><name><name pos:line="104" pos:column="9">pc<pos:position pos:line="104" pos:column="11"/></name><argument_list type="generic" pos:line="104" pos:column="11">&lt;<argument><expr><name pos:line="104" pos:column="12">contentOffset<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">||<pos:position pos:line="104" pos:column="28"/></operator> <name pos:line="104" pos:column="29">pc<pos:position pos:line="104" pos:column="31"/></name></expr></argument>&gt;<pos:position pos:line="104" pos:column="35"/></argument_list></name><name pos:line="104" pos:column="32">usableSize<pos:position pos:line="104" pos:column="42"/></name><operator pos:line="104" pos:column="42">-<pos:position pos:line="104" pos:column="43"/></operator><literal type="number" pos:line="104" pos:column="43">4<pos:position pos:line="104" pos:column="44"/></literal></expr> )<pos:position pos:line="104" pos:column="46"/></condition><then><block pos:line="104" pos:column="46">{
      <expr_stmt><expr><call><name pos:line="105" pos:column="7">checkAppendMsg<pos:position pos:line="105" pos:column="21"/></name><argument_list pos:line="105" pos:column="21">(<argument><expr><name pos:line="105" pos:column="22">pCheck<pos:position pos:line="105" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="30">"Offset %d out of range %d..%d"<pos:position pos:line="105" pos:column="61"/></literal></expr></argument>,
                             <argument><expr><name pos:line="106" pos:column="30">pc<pos:position pos:line="106" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="34">contentOffset<pos:position pos:line="106" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="49">usableSize<pos:position pos:line="106" pos:column="59"/></name><operator pos:line="106" pos:column="59">-<pos:position pos:line="106" pos:column="60"/></operator><literal type="number" pos:line="106" pos:column="60">4<pos:position pos:line="106" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><name pos:line="107" pos:column="7">doCoverageCheck<pos:position pos:line="107" pos:column="22"/></name> <operator pos:line="107" pos:column="23">=<pos:position pos:line="107" pos:column="24"/></operator> <literal type="number" pos:line="107" pos:column="25">0<pos:position pos:line="107" pos:column="26"/></literal></expr>;<pos:position pos:line="107" pos:column="27"/></expr_stmt>
      <continue pos:line="108" pos:column="7">continue;<pos:position pos:line="108" pos:column="16"/></continue>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="110" pos:column="5">pCell<pos:position pos:line="110" pos:column="10"/></name> <operator pos:line="110" pos:column="11">=<pos:position pos:line="110" pos:column="12"/></operator> <operator pos:line="110" pos:column="13">&amp;<pos:position pos:line="110" pos:column="18"/></operator><name><name pos:line="110" pos:column="14">data<pos:position pos:line="110" pos:column="18"/></name><index pos:line="110" pos:column="18">[<expr><name pos:line="110" pos:column="19">pc<pos:position pos:line="110" pos:column="21"/></name></expr>]<pos:position pos:line="110" pos:column="22"/></index></name></expr>;<pos:position pos:line="110" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="111" pos:column="5">pPage<pos:position pos:line="111" pos:column="10"/></name><operator pos:line="111" pos:column="10">-&gt;<pos:position pos:line="111" pos:column="15"/></operator><name pos:line="111" pos:column="12">xParseCell<pos:position pos:line="111" pos:column="22"/></name></name><argument_list pos:line="111" pos:column="22">(<argument><expr><name pos:line="111" pos:column="23">pPage<pos:position pos:line="111" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="30">pCell<pos:position pos:line="111" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="37">&amp;<pos:position pos:line="111" pos:column="42"/></operator><name pos:line="111" pos:column="38">info<pos:position pos:line="111" pos:column="42"/></name></expr></argument>)<pos:position pos:line="111" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="44"/></expr_stmt>
    <if pos:line="112" pos:column="5">if<condition pos:line="112" pos:column="7">( <expr><name pos:line="112" pos:column="9">pc<pos:position pos:line="112" pos:column="11"/></name><operator pos:line="112" pos:column="11">+<pos:position pos:line="112" pos:column="12"/></operator><name><name pos:line="112" pos:column="12">info<pos:position pos:line="112" pos:column="16"/></name><operator pos:line="112" pos:column="16">.<pos:position pos:line="112" pos:column="17"/></operator><name pos:line="112" pos:column="17">nSize<pos:position pos:line="112" pos:column="22"/></name></name><operator pos:line="112" pos:column="22">&gt;<pos:position pos:line="112" pos:column="26"/></operator><name pos:line="112" pos:column="23">usableSize<pos:position pos:line="112" pos:column="33"/></name></expr> )<pos:position pos:line="112" pos:column="35"/></condition><then><block pos:line="112" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="113" pos:column="7">checkAppendMsg<pos:position pos:line="113" pos:column="21"/></name><argument_list pos:line="113" pos:column="21">(<argument><expr><name pos:line="113" pos:column="22">pCheck<pos:position pos:line="113" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="30">"Extends off end of page"<pos:position pos:line="113" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name pos:line="114" pos:column="7">doCoverageCheck<pos:position pos:line="114" pos:column="22"/></name> <operator pos:line="114" pos:column="23">=<pos:position pos:line="114" pos:column="24"/></operator> <literal type="number" pos:line="114" pos:column="25">0<pos:position pos:line="114" pos:column="26"/></literal></expr>;<pos:position pos:line="114" pos:column="27"/></expr_stmt>
      <continue pos:line="115" pos:column="7">continue;<pos:position pos:line="115" pos:column="16"/></continue>
    }<pos:position pos:line="116" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="118" pos:column="5">/* Check for integer primary key out of range */</comment>
    <if pos:line="119" pos:column="5">if<condition pos:line="119" pos:column="7">( <expr><name><name pos:line="119" pos:column="9">pPage<pos:position pos:line="119" pos:column="14"/></name><operator pos:line="119" pos:column="14">-&gt;<pos:position pos:line="119" pos:column="19"/></operator><name pos:line="119" pos:column="16">intKey<pos:position pos:line="119" pos:column="22"/></name></name></expr> )<pos:position pos:line="119" pos:column="24"/></condition><then><block pos:line="119" pos:column="24">{
      <if pos:line="120" pos:column="7">if<condition pos:line="120" pos:column="9">( <expr><ternary><condition><expr><name pos:line="120" pos:column="11">keyCanBeEqual<pos:position pos:line="120" pos:column="24"/></name></expr> ?<pos:position pos:line="120" pos:column="26"/></condition><then pos:line="120" pos:column="26"> <expr><operator pos:line="120" pos:column="27">(<pos:position pos:line="120" pos:column="28"/></operator><name><name pos:line="120" pos:column="28">info<pos:position pos:line="120" pos:column="32"/></name><operator pos:line="120" pos:column="32">.<pos:position pos:line="120" pos:column="33"/></operator><name pos:line="120" pos:column="33">nKey<pos:position pos:line="120" pos:column="37"/></name></name> <operator pos:line="120" pos:column="38">&gt;<pos:position pos:line="120" pos:column="42"/></operator> <name pos:line="120" pos:column="40">maxKey<pos:position pos:line="120" pos:column="46"/></name><operator pos:line="120" pos:column="46">)<pos:position pos:line="120" pos:column="47"/></operator></expr> <pos:position pos:line="120" pos:column="48"/></then><else pos:line="120" pos:column="48">: <expr><operator pos:line="120" pos:column="50">(<pos:position pos:line="120" pos:column="51"/></operator><name><name pos:line="120" pos:column="51">info<pos:position pos:line="120" pos:column="55"/></name><operator pos:line="120" pos:column="55">.<pos:position pos:line="120" pos:column="56"/></operator><name pos:line="120" pos:column="56">nKey<pos:position pos:line="120" pos:column="60"/></name></name> <operator pos:line="120" pos:column="61">&gt;=<pos:position pos:line="120" pos:column="66"/></operator> <name pos:line="120" pos:column="64">maxKey<pos:position pos:line="120" pos:column="70"/></name><operator pos:line="120" pos:column="70">)<pos:position pos:line="120" pos:column="71"/></operator></expr></else></ternary></expr> )<pos:position pos:line="120" pos:column="73"/></condition><then><block pos:line="120" pos:column="73">{
        <expr_stmt><expr><call><name pos:line="121" pos:column="9">checkAppendMsg<pos:position pos:line="121" pos:column="23"/></name><argument_list pos:line="121" pos:column="23">(<argument><expr><name pos:line="121" pos:column="24">pCheck<pos:position pos:line="121" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="32">"Rowid %lld out of order"<pos:position pos:line="121" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="59">info<pos:position pos:line="121" pos:column="63"/></name><operator pos:line="121" pos:column="63">.<pos:position pos:line="121" pos:column="64"/></operator><name pos:line="121" pos:column="64">nKey<pos:position pos:line="121" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="70"/></expr_stmt>
      }<pos:position pos:line="122" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="123" pos:column="7">maxKey<pos:position pos:line="123" pos:column="13"/></name> <operator pos:line="123" pos:column="14">=<pos:position pos:line="123" pos:column="15"/></operator> <name><name pos:line="123" pos:column="16">info<pos:position pos:line="123" pos:column="20"/></name><operator pos:line="123" pos:column="20">.<pos:position pos:line="123" pos:column="21"/></operator><name pos:line="123" pos:column="21">nKey<pos:position pos:line="123" pos:column="25"/></name></name></expr>;<pos:position pos:line="123" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="124" pos:column="7">keyCanBeEqual<pos:position pos:line="124" pos:column="20"/></name> <operator pos:line="124" pos:column="21">=<pos:position pos:line="124" pos:column="22"/></operator> <literal type="number" pos:line="124" pos:column="23">0<pos:position pos:line="124" pos:column="24"/></literal></expr>;<pos:position pos:line="124" pos:column="25"/></expr_stmt>     <comment type="block" pos:line="124" pos:column="30">/* Only the first key on the page may ==maxKey */</comment>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="127" pos:column="5">/* Check the content overflow list */</comment>
    <if pos:line="128" pos:column="5">if<condition pos:line="128" pos:column="7">( <expr><name><name pos:line="128" pos:column="9">info<pos:position pos:line="128" pos:column="13"/></name><operator pos:line="128" pos:column="13">.<pos:position pos:line="128" pos:column="14"/></operator><name pos:line="128" pos:column="14">nPayload<pos:position pos:line="128" pos:column="22"/></name></name><operator pos:line="128" pos:column="22">&gt;<pos:position pos:line="128" pos:column="26"/></operator><name><name pos:line="128" pos:column="23">info<pos:position pos:line="128" pos:column="27"/></name><operator pos:line="128" pos:column="27">.<pos:position pos:line="128" pos:column="28"/></operator><name pos:line="128" pos:column="28">nLocal<pos:position pos:line="128" pos:column="34"/></name></name></expr> )<pos:position pos:line="128" pos:column="36"/></condition><then><block pos:line="128" pos:column="36">{
      <decl_stmt><decl><type><name pos:line="129" pos:column="7">int<pos:position pos:line="129" pos:column="10"/></name></type> <name pos:line="129" pos:column="11">nPage<pos:position pos:line="129" pos:column="16"/></name></decl>;<pos:position pos:line="129" pos:column="17"/></decl_stmt>       <comment type="block" pos:line="129" pos:column="24">/* Number of pages on the overflow chain */</comment>
      <decl_stmt><decl><type><name pos:line="130" pos:column="7">Pgno<pos:position pos:line="130" pos:column="11"/></name></type> <name pos:line="130" pos:column="12">pgnoOvfl<pos:position pos:line="130" pos:column="20"/></name></decl>;<pos:position pos:line="130" pos:column="21"/></decl_stmt>   <comment type="block" pos:line="130" pos:column="24">/* First page of the overflow chain */</comment>
      <expr_stmt><expr><call><name pos:line="131" pos:column="7">assert<pos:position pos:line="131" pos:column="13"/></name><argument_list pos:line="131" pos:column="13">( <argument><expr><name pos:line="131" pos:column="15">pc<pos:position pos:line="131" pos:column="17"/></name> <operator pos:line="131" pos:column="18">+<pos:position pos:line="131" pos:column="19"/></operator> <name><name pos:line="131" pos:column="20">info<pos:position pos:line="131" pos:column="24"/></name><operator pos:line="131" pos:column="24">.<pos:position pos:line="131" pos:column="25"/></operator><name pos:line="131" pos:column="25">nSize<pos:position pos:line="131" pos:column="30"/></name></name> <operator pos:line="131" pos:column="31">-<pos:position pos:line="131" pos:column="32"/></operator> <literal type="number" pos:line="131" pos:column="33">4<pos:position pos:line="131" pos:column="34"/></literal> <operator pos:line="131" pos:column="35">&lt;=<pos:position pos:line="131" pos:column="40"/></operator> <name pos:line="131" pos:column="38">usableSize<pos:position pos:line="131" pos:column="48"/></name></expr></argument> )<pos:position pos:line="131" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name pos:line="132" pos:column="7">nPage<pos:position pos:line="132" pos:column="12"/></name> <operator pos:line="132" pos:column="13">=<pos:position pos:line="132" pos:column="14"/></operator> <operator pos:line="132" pos:column="15">(<pos:position pos:line="132" pos:column="16"/></operator><name><name pos:line="132" pos:column="16">info<pos:position pos:line="132" pos:column="20"/></name><operator pos:line="132" pos:column="20">.<pos:position pos:line="132" pos:column="21"/></operator><name pos:line="132" pos:column="21">nPayload<pos:position pos:line="132" pos:column="29"/></name></name> <operator pos:line="132" pos:column="30">-<pos:position pos:line="132" pos:column="31"/></operator> <name><name pos:line="132" pos:column="32">info<pos:position pos:line="132" pos:column="36"/></name><operator pos:line="132" pos:column="36">.<pos:position pos:line="132" pos:column="37"/></operator><name pos:line="132" pos:column="37">nLocal<pos:position pos:line="132" pos:column="43"/></name></name> <operator pos:line="132" pos:column="44">+<pos:position pos:line="132" pos:column="45"/></operator> <name pos:line="132" pos:column="46">usableSize<pos:position pos:line="132" pos:column="56"/></name> <operator pos:line="132" pos:column="57">-<pos:position pos:line="132" pos:column="58"/></operator> <literal type="number" pos:line="132" pos:column="59">5<pos:position pos:line="132" pos:column="60"/></literal><operator pos:line="132" pos:column="60">)<pos:position pos:line="132" pos:column="61"/></operator><operator pos:line="132" pos:column="61">/<pos:position pos:line="132" pos:column="62"/></operator><operator pos:line="132" pos:column="62">(<pos:position pos:line="132" pos:column="63"/></operator><name pos:line="132" pos:column="63">usableSize<pos:position pos:line="132" pos:column="73"/></name> <operator pos:line="132" pos:column="74">-<pos:position pos:line="132" pos:column="75"/></operator> <literal type="number" pos:line="132" pos:column="76">4<pos:position pos:line="132" pos:column="77"/></literal><operator pos:line="132" pos:column="77">)<pos:position pos:line="132" pos:column="78"/></operator></expr>;<pos:position pos:line="132" pos:column="79"/></expr_stmt>
      <expr_stmt><expr><name pos:line="133" pos:column="7">pgnoOvfl<pos:position pos:line="133" pos:column="15"/></name> <operator pos:line="133" pos:column="16">=<pos:position pos:line="133" pos:column="17"/></operator> <call><name pos:line="133" pos:column="18">get4byte<pos:position pos:line="133" pos:column="26"/></name><argument_list pos:line="133" pos:column="26">(<argument><expr><operator pos:line="133" pos:column="27">&amp;<pos:position pos:line="133" pos:column="32"/></operator><name><name pos:line="133" pos:column="28">pCell<pos:position pos:line="133" pos:column="33"/></name><index pos:line="133" pos:column="33">[<expr><name><name pos:line="133" pos:column="34">info<pos:position pos:line="133" pos:column="38"/></name><operator pos:line="133" pos:column="38">.<pos:position pos:line="133" pos:column="39"/></operator><name pos:line="133" pos:column="39">nSize<pos:position pos:line="133" pos:column="44"/></name></name> <operator pos:line="133" pos:column="45">-<pos:position pos:line="133" pos:column="46"/></operator> <literal type="number" pos:line="133" pos:column="47">4<pos:position pos:line="133" pos:column="48"/></literal></expr>]<pos:position pos:line="133" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="133" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="51"/></expr_stmt>
<cpp:ifndef pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">ifndef<pos:position pos:line="134" pos:column="8"/></cpp:directive> <name pos:line="134" pos:column="9">SQLITE_OMIT_AUTOVACUUM<pos:position pos:line="134" pos:column="31"/></name></cpp:ifndef>
      <if pos:line="135" pos:column="7">if<condition pos:line="135" pos:column="9">( <expr><name><name pos:line="135" pos:column="11">pBt<pos:position pos:line="135" pos:column="14"/></name><operator pos:line="135" pos:column="14">-&gt;<pos:position pos:line="135" pos:column="19"/></operator><name pos:line="135" pos:column="16">autoVacuum<pos:position pos:line="135" pos:column="26"/></name></name></expr> )<pos:position pos:line="135" pos:column="28"/></condition><then><block pos:line="135" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="136" pos:column="9">checkPtrmap<pos:position pos:line="136" pos:column="20"/></name><argument_list pos:line="136" pos:column="20">(<argument><expr><name pos:line="136" pos:column="21">pCheck<pos:position pos:line="136" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="29">pgnoOvfl<pos:position pos:line="136" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="39">PTRMAP_OVERFLOW1<pos:position pos:line="136" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="57">iPage<pos:position pos:line="136" pos:column="62"/></name></expr></argument>)<pos:position pos:line="136" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="64"/></expr_stmt>
      }<pos:position pos:line="137" pos:column="8"/></block></then></if>
<cpp:endif pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">endif<pos:position pos:line="138" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="139" pos:column="7">checkList<pos:position pos:line="139" pos:column="16"/></name><argument_list pos:line="139" pos:column="16">(<argument><expr><name pos:line="139" pos:column="17">pCheck<pos:position pos:line="139" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="139" pos:column="25">0<pos:position pos:line="139" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="28">pgnoOvfl<pos:position pos:line="139" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="38">nPage<pos:position pos:line="139" pos:column="43"/></name></expr></argument>)<pos:position pos:line="139" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="140" pos:column="6"/></block></then></if>

    <if pos:line="142" pos:column="5">if<condition pos:line="142" pos:column="7">( <expr><operator pos:line="142" pos:column="9">!<pos:position pos:line="142" pos:column="10"/></operator><name><name pos:line="142" pos:column="10">pPage<pos:position pos:line="142" pos:column="15"/></name><operator pos:line="142" pos:column="15">-&gt;<pos:position pos:line="142" pos:column="20"/></operator><name pos:line="142" pos:column="17">leaf<pos:position pos:line="142" pos:column="21"/></name></name></expr> )<pos:position pos:line="142" pos:column="23"/></condition><then><block pos:line="142" pos:column="23">{
      <comment type="block" pos:line="143" pos:column="7">/* Check sanity of left child page for internal pages */</comment>
      <expr_stmt><expr><name pos:line="144" pos:column="7">pgno<pos:position pos:line="144" pos:column="11"/></name> <operator pos:line="144" pos:column="12">=<pos:position pos:line="144" pos:column="13"/></operator> <call><name pos:line="144" pos:column="14">get4byte<pos:position pos:line="144" pos:column="22"/></name><argument_list pos:line="144" pos:column="22">(<argument><expr><name pos:line="144" pos:column="23">pCell<pos:position pos:line="144" pos:column="28"/></name></expr></argument>)<pos:position pos:line="144" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="30"/></expr_stmt>
<cpp:ifndef pos:line="145" pos:column="1">#<cpp:directive pos:line="145" pos:column="2">ifndef<pos:position pos:line="145" pos:column="8"/></cpp:directive> <name pos:line="145" pos:column="9">SQLITE_OMIT_AUTOVACUUM<pos:position pos:line="145" pos:column="31"/></name></cpp:ifndef>
      <if pos:line="146" pos:column="7">if<condition pos:line="146" pos:column="9">( <expr><name><name pos:line="146" pos:column="11">pBt<pos:position pos:line="146" pos:column="14"/></name><operator pos:line="146" pos:column="14">-&gt;<pos:position pos:line="146" pos:column="19"/></operator><name pos:line="146" pos:column="16">autoVacuum<pos:position pos:line="146" pos:column="26"/></name></name></expr> )<pos:position pos:line="146" pos:column="28"/></condition><then><block pos:line="146" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="147" pos:column="9">checkPtrmap<pos:position pos:line="147" pos:column="20"/></name><argument_list pos:line="147" pos:column="20">(<argument><expr><name pos:line="147" pos:column="21">pCheck<pos:position pos:line="147" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="29">pgno<pos:position pos:line="147" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="35">PTRMAP_BTREE<pos:position pos:line="147" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="49">iPage<pos:position pos:line="147" pos:column="54"/></name></expr></argument>)<pos:position pos:line="147" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="148" pos:column="8"/></block></then></if>
<cpp:endif pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">endif<pos:position pos:line="149" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="150" pos:column="7">d2<pos:position pos:line="150" pos:column="9"/></name> <operator pos:line="150" pos:column="10">=<pos:position pos:line="150" pos:column="11"/></operator> <call><name pos:line="150" pos:column="12">checkTreePage<pos:position pos:line="150" pos:column="25"/></name><argument_list pos:line="150" pos:column="25">(<argument><expr><name pos:line="150" pos:column="26">pCheck<pos:position pos:line="150" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="34">pgno<pos:position pos:line="150" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="150" pos:column="40">&amp;<pos:position pos:line="150" pos:column="45"/></operator><name pos:line="150" pos:column="41">maxKey<pos:position pos:line="150" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="49">maxKey<pos:position pos:line="150" pos:column="55"/></name></expr></argument>)<pos:position pos:line="150" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name pos:line="151" pos:column="7">keyCanBeEqual<pos:position pos:line="151" pos:column="20"/></name> <operator pos:line="151" pos:column="21">=<pos:position pos:line="151" pos:column="22"/></operator> <literal type="number" pos:line="151" pos:column="23">0<pos:position pos:line="151" pos:column="24"/></literal></expr>;<pos:position pos:line="151" pos:column="25"/></expr_stmt>
      <if pos:line="152" pos:column="7">if<condition pos:line="152" pos:column="9">( <expr><name pos:line="152" pos:column="11">d2<pos:position pos:line="152" pos:column="13"/></name><operator pos:line="152" pos:column="13">!=<pos:position pos:line="152" pos:column="15"/></operator><name pos:line="152" pos:column="15">depth<pos:position pos:line="152" pos:column="20"/></name></expr> )<pos:position pos:line="152" pos:column="22"/></condition><then><block pos:line="152" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="153" pos:column="9">checkAppendMsg<pos:position pos:line="153" pos:column="23"/></name><argument_list pos:line="153" pos:column="23">(<argument><expr><name pos:line="153" pos:column="24">pCheck<pos:position pos:line="153" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="153" pos:column="32">"Child page depth differs"<pos:position pos:line="153" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name pos:line="154" pos:column="9">depth<pos:position pos:line="154" pos:column="14"/></name> <operator pos:line="154" pos:column="15">=<pos:position pos:line="154" pos:column="16"/></operator> <name pos:line="154" pos:column="17">d2<pos:position pos:line="154" pos:column="19"/></name></expr>;<pos:position pos:line="154" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="155" pos:column="8"/></block></then></if>
    }<pos:position pos:line="156" pos:column="6"/></block></then><else pos:line="156" pos:column="6">else<block pos:line="156" pos:column="10">{
      <comment type="block" pos:line="157" pos:column="7">/* Populate the coverage-checking heap for leaf pages */</comment>
      <expr_stmt><expr><call><name pos:line="158" pos:column="7">btreeHeapInsert<pos:position pos:line="158" pos:column="22"/></name><argument_list pos:line="158" pos:column="22">(<argument><expr><name pos:line="158" pos:column="23">heap<pos:position pos:line="158" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="158" pos:column="29">(<pos:position pos:line="158" pos:column="30"/></operator><name pos:line="158" pos:column="30">pc<pos:position pos:line="158" pos:column="32"/></name><operator pos:line="158" pos:column="32">&lt;&lt;<pos:position pos:line="158" pos:column="40"/></operator><literal type="number" pos:line="158" pos:column="34">16<pos:position pos:line="158" pos:column="36"/></literal><operator pos:line="158" pos:column="36">)<pos:position pos:line="158" pos:column="37"/></operator><operator pos:line="158" pos:column="37">|<pos:position pos:line="158" pos:column="38"/></operator><operator pos:line="158" pos:column="38">(<pos:position pos:line="158" pos:column="39"/></operator><name pos:line="158" pos:column="39">pc<pos:position pos:line="158" pos:column="41"/></name><operator pos:line="158" pos:column="41">+<pos:position pos:line="158" pos:column="42"/></operator><name><name pos:line="158" pos:column="42">info<pos:position pos:line="158" pos:column="46"/></name><operator pos:line="158" pos:column="46">.<pos:position pos:line="158" pos:column="47"/></operator><name pos:line="158" pos:column="47">nSize<pos:position pos:line="158" pos:column="52"/></name></name><operator pos:line="158" pos:column="52">-<pos:position pos:line="158" pos:column="53"/></operator><literal type="number" pos:line="158" pos:column="53">1<pos:position pos:line="158" pos:column="54"/></literal><operator pos:line="158" pos:column="54">)<pos:position pos:line="158" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="158" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="159" pos:column="6"/></block></else></if>
  }<pos:position pos:line="160" pos:column="4"/></block></for>
  <expr_stmt><expr><operator pos:line="161" pos:column="3">*<pos:position pos:line="161" pos:column="4"/></operator><name pos:line="161" pos:column="4">piMinKey<pos:position pos:line="161" pos:column="12"/></name> <operator pos:line="161" pos:column="13">=<pos:position pos:line="161" pos:column="14"/></operator> <name pos:line="161" pos:column="15">maxKey<pos:position pos:line="161" pos:column="21"/></name></expr>;<pos:position pos:line="161" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="163" pos:column="3">/* Check for complete coverage of the page
  */</comment>
  <expr_stmt><expr><name><name pos:line="165" pos:column="3">pCheck<pos:position pos:line="165" pos:column="9"/></name><operator pos:line="165" pos:column="9">-&gt;<pos:position pos:line="165" pos:column="14"/></operator><name pos:line="165" pos:column="11">zPfx<pos:position pos:line="165" pos:column="15"/></name></name> <operator pos:line="165" pos:column="16">=<pos:position pos:line="165" pos:column="17"/></operator> <literal type="number" pos:line="165" pos:column="18">0<pos:position pos:line="165" pos:column="19"/></literal></expr>;<pos:position pos:line="165" pos:column="20"/></expr_stmt>
  <if pos:line="166" pos:column="3">if<condition pos:line="166" pos:column="5">( <expr><name pos:line="166" pos:column="7">doCoverageCheck<pos:position pos:line="166" pos:column="22"/></name> <operator pos:line="166" pos:column="23">&amp;&amp;<pos:position pos:line="166" pos:column="33"/></operator> <name><name pos:line="166" pos:column="26">pCheck<pos:position pos:line="166" pos:column="32"/></name><operator pos:line="166" pos:column="32">-&gt;<pos:position pos:line="166" pos:column="37"/></operator><name pos:line="166" pos:column="34">mxErr<pos:position pos:line="166" pos:column="39"/></name></name><operator pos:line="166" pos:column="39">&gt;<pos:position pos:line="166" pos:column="43"/></operator><literal type="number" pos:line="166" pos:column="40">0<pos:position pos:line="166" pos:column="41"/></literal></expr> )<pos:position pos:line="166" pos:column="43"/></condition><then><block pos:line="166" pos:column="43">{
    <comment type="block" pos:line="167" pos:column="5">/* For leaf pages, the min-heap has already been initialized and the
    ** cells have already been inserted.  But for internal pages, that has
    ** not yet been done, so do it now */</comment>
    <if pos:line="170" pos:column="5">if<condition pos:line="170" pos:column="7">( <expr><operator pos:line="170" pos:column="9">!<pos:position pos:line="170" pos:column="10"/></operator><name><name pos:line="170" pos:column="10">pPage<pos:position pos:line="170" pos:column="15"/></name><operator pos:line="170" pos:column="15">-&gt;<pos:position pos:line="170" pos:column="20"/></operator><name pos:line="170" pos:column="17">leaf<pos:position pos:line="170" pos:column="21"/></name></name></expr> )<pos:position pos:line="170" pos:column="23"/></condition><then><block pos:line="170" pos:column="23">{
      <expr_stmt><expr><name pos:line="171" pos:column="7">heap<pos:position pos:line="171" pos:column="11"/></name> <operator pos:line="171" pos:column="12">=<pos:position pos:line="171" pos:column="13"/></operator> <name><name pos:line="171" pos:column="14">pCheck<pos:position pos:line="171" pos:column="20"/></name><operator pos:line="171" pos:column="20">-&gt;<pos:position pos:line="171" pos:column="25"/></operator><name pos:line="171" pos:column="22">heap<pos:position pos:line="171" pos:column="26"/></name></name></expr>;<pos:position pos:line="171" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="172" pos:column="7">heap<pos:position pos:line="172" pos:column="11"/></name><index pos:line="172" pos:column="11">[<expr><literal type="number" pos:line="172" pos:column="12">0<pos:position pos:line="172" pos:column="13"/></literal></expr>]<pos:position pos:line="172" pos:column="14"/></index></name> <operator pos:line="172" pos:column="15">=<pos:position pos:line="172" pos:column="16"/></operator> <literal type="number" pos:line="172" pos:column="17">0<pos:position pos:line="172" pos:column="18"/></literal></expr>;<pos:position pos:line="172" pos:column="19"/></expr_stmt>
      <for pos:line="173" pos:column="7">for<control pos:line="173" pos:column="10">(<init><expr><name pos:line="173" pos:column="11">i<pos:position pos:line="173" pos:column="12"/></name><operator pos:line="173" pos:column="12">=<pos:position pos:line="173" pos:column="13"/></operator><name pos:line="173" pos:column="13">nCell<pos:position pos:line="173" pos:column="18"/></name><operator pos:line="173" pos:column="18">-<pos:position pos:line="173" pos:column="19"/></operator><literal type="number" pos:line="173" pos:column="19">1<pos:position pos:line="173" pos:column="20"/></literal></expr>;<pos:position pos:line="173" pos:column="21"/></init> <condition><expr><name pos:line="173" pos:column="22">i<pos:position pos:line="173" pos:column="23"/></name><operator pos:line="173" pos:column="23">&gt;=<pos:position pos:line="173" pos:column="28"/></operator><literal type="number" pos:line="173" pos:column="25">0<pos:position pos:line="173" pos:column="26"/></literal></expr>;<pos:position pos:line="173" pos:column="27"/></condition> <incr><expr><name pos:line="173" pos:column="28">i<pos:position pos:line="173" pos:column="29"/></name><operator pos:line="173" pos:column="29">--<pos:position pos:line="173" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="173" pos:column="32"/></control><block pos:line="173" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="174" pos:column="9">u32<pos:position pos:line="174" pos:column="12"/></name></type> <name pos:line="174" pos:column="13">size<pos:position pos:line="174" pos:column="17"/></name></decl>;<pos:position pos:line="174" pos:column="18"/></decl_stmt>
        <expr_stmt><expr><name pos:line="175" pos:column="9">pc<pos:position pos:line="175" pos:column="11"/></name> <operator pos:line="175" pos:column="12">=<pos:position pos:line="175" pos:column="13"/></operator> <call><name pos:line="175" pos:column="14">get2byteAligned<pos:position pos:line="175" pos:column="29"/></name><argument_list pos:line="175" pos:column="29">(<argument><expr><operator pos:line="175" pos:column="30">&amp;<pos:position pos:line="175" pos:column="35"/></operator><name><name pos:line="175" pos:column="31">data<pos:position pos:line="175" pos:column="35"/></name><index pos:line="175" pos:column="35">[<expr><name pos:line="175" pos:column="36">cellStart<pos:position pos:line="175" pos:column="45"/></name><operator pos:line="175" pos:column="45">+<pos:position pos:line="175" pos:column="46"/></operator><name pos:line="175" pos:column="46">i<pos:position pos:line="175" pos:column="47"/></name><operator pos:line="175" pos:column="47">*<pos:position pos:line="175" pos:column="48"/></operator><literal type="number" pos:line="175" pos:column="48">2<pos:position pos:line="175" pos:column="49"/></literal></expr>]<pos:position pos:line="175" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="175" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="176" pos:column="9">size<pos:position pos:line="176" pos:column="13"/></name> <operator pos:line="176" pos:column="14">=<pos:position pos:line="176" pos:column="15"/></operator> <call><name><name pos:line="176" pos:column="16">pPage<pos:position pos:line="176" pos:column="21"/></name><operator pos:line="176" pos:column="21">-&gt;<pos:position pos:line="176" pos:column="26"/></operator><name pos:line="176" pos:column="23">xCellSize<pos:position pos:line="176" pos:column="32"/></name></name><argument_list pos:line="176" pos:column="32">(<argument><expr><name pos:line="176" pos:column="33">pPage<pos:position pos:line="176" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="176" pos:column="40">&amp;<pos:position pos:line="176" pos:column="45"/></operator><name><name pos:line="176" pos:column="41">data<pos:position pos:line="176" pos:column="45"/></name><index pos:line="176" pos:column="45">[<expr><name pos:line="176" pos:column="46">pc<pos:position pos:line="176" pos:column="48"/></name></expr>]<pos:position pos:line="176" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="176" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="177" pos:column="9">btreeHeapInsert<pos:position pos:line="177" pos:column="24"/></name><argument_list pos:line="177" pos:column="24">(<argument><expr><name pos:line="177" pos:column="25">heap<pos:position pos:line="177" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="177" pos:column="31">(<pos:position pos:line="177" pos:column="32"/></operator><name pos:line="177" pos:column="32">pc<pos:position pos:line="177" pos:column="34"/></name><operator pos:line="177" pos:column="34">&lt;&lt;<pos:position pos:line="177" pos:column="42"/></operator><literal type="number" pos:line="177" pos:column="36">16<pos:position pos:line="177" pos:column="38"/></literal><operator pos:line="177" pos:column="38">)<pos:position pos:line="177" pos:column="39"/></operator><operator pos:line="177" pos:column="39">|<pos:position pos:line="177" pos:column="40"/></operator><operator pos:line="177" pos:column="40">(<pos:position pos:line="177" pos:column="41"/></operator><name pos:line="177" pos:column="41">pc<pos:position pos:line="177" pos:column="43"/></name><operator pos:line="177" pos:column="43">+<pos:position pos:line="177" pos:column="44"/></operator><name pos:line="177" pos:column="44">size<pos:position pos:line="177" pos:column="48"/></name><operator pos:line="177" pos:column="48">-<pos:position pos:line="177" pos:column="49"/></operator><literal type="number" pos:line="177" pos:column="49">1<pos:position pos:line="177" pos:column="50"/></literal><operator pos:line="177" pos:column="50">)<pos:position pos:line="177" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="177" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="53"/></expr_stmt>
      }<pos:position pos:line="178" pos:column="8"/></block></for>
    }<pos:position pos:line="179" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="180" pos:column="5">/* Add the freeblocks to the min-heap
    **
    ** EVIDENCE-OF: R-20690-50594 The second field of the b-tree page header
    ** is the offset of the first freeblock, or zero if there are no
    ** freeblocks on the page. 
    */</comment>
    <expr_stmt><expr><name pos:line="186" pos:column="5">i<pos:position pos:line="186" pos:column="6"/></name> <operator pos:line="186" pos:column="7">=<pos:position pos:line="186" pos:column="8"/></operator> <call><name pos:line="186" pos:column="9">get2byte<pos:position pos:line="186" pos:column="17"/></name><argument_list pos:line="186" pos:column="17">(<argument><expr><operator pos:line="186" pos:column="18">&amp;<pos:position pos:line="186" pos:column="23"/></operator><name><name pos:line="186" pos:column="19">data<pos:position pos:line="186" pos:column="23"/></name><index pos:line="186" pos:column="23">[<expr><name pos:line="186" pos:column="24">hdr<pos:position pos:line="186" pos:column="27"/></name><operator pos:line="186" pos:column="27">+<pos:position pos:line="186" pos:column="28"/></operator><literal type="number" pos:line="186" pos:column="28">1<pos:position pos:line="186" pos:column="29"/></literal></expr>]<pos:position pos:line="186" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="186" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="32"/></expr_stmt>
    <while pos:line="187" pos:column="5">while<condition pos:line="187" pos:column="10">( <expr><name pos:line="187" pos:column="12">i<pos:position pos:line="187" pos:column="13"/></name><operator pos:line="187" pos:column="13">&gt;<pos:position pos:line="187" pos:column="17"/></operator><literal type="number" pos:line="187" pos:column="14">0<pos:position pos:line="187" pos:column="15"/></literal></expr> )<pos:position pos:line="187" pos:column="17"/></condition><block pos:line="187" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="188" pos:column="7">int<pos:position pos:line="188" pos:column="10"/></name></type> <name pos:line="188" pos:column="11">size<pos:position pos:line="188" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="188" pos:column="17">j<pos:position pos:line="188" pos:column="18"/></name></decl>;<pos:position pos:line="188" pos:column="19"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="189" pos:column="7">assert<pos:position pos:line="189" pos:column="13"/></name><argument_list pos:line="189" pos:column="13">( <argument><expr><operator pos:line="189" pos:column="15">(<pos:position pos:line="189" pos:column="16"/></operator><name pos:line="189" pos:column="16">u32<pos:position pos:line="189" pos:column="19"/></name><operator pos:line="189" pos:column="19">)<pos:position pos:line="189" pos:column="20"/></operator><name pos:line="189" pos:column="20">i<pos:position pos:line="189" pos:column="21"/></name><operator pos:line="189" pos:column="21">&lt;=<pos:position pos:line="189" pos:column="26"/></operator><name pos:line="189" pos:column="23">usableSize<pos:position pos:line="189" pos:column="33"/></name><operator pos:line="189" pos:column="33">-<pos:position pos:line="189" pos:column="34"/></operator><literal type="number" pos:line="189" pos:column="34">4<pos:position pos:line="189" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="189" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="38"/></expr_stmt>     <comment type="block" pos:line="189" pos:column="43">/* Enforced by btreeInitPage() */</comment>
      <expr_stmt><expr><name pos:line="190" pos:column="7">size<pos:position pos:line="190" pos:column="11"/></name> <operator pos:line="190" pos:column="12">=<pos:position pos:line="190" pos:column="13"/></operator> <call><name pos:line="190" pos:column="14">get2byte<pos:position pos:line="190" pos:column="22"/></name><argument_list pos:line="190" pos:column="22">(<argument><expr><operator pos:line="190" pos:column="23">&amp;<pos:position pos:line="190" pos:column="28"/></operator><name><name pos:line="190" pos:column="24">data<pos:position pos:line="190" pos:column="28"/></name><index pos:line="190" pos:column="28">[<expr><name pos:line="190" pos:column="29">i<pos:position pos:line="190" pos:column="30"/></name><operator pos:line="190" pos:column="30">+<pos:position pos:line="190" pos:column="31"/></operator><literal type="number" pos:line="190" pos:column="31">2<pos:position pos:line="190" pos:column="32"/></literal></expr>]<pos:position pos:line="190" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="190" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="191" pos:column="7">assert<pos:position pos:line="191" pos:column="13"/></name><argument_list pos:line="191" pos:column="13">( <argument><expr><call pos:line="191" pos:column="15">(<name pos:line="191" pos:column="16">u32<pos:position pos:line="191" pos:column="19"/></name>)<argument_list pos:line="191" pos:column="20">(<argument><expr><name pos:line="191" pos:column="21">i<pos:position pos:line="191" pos:column="22"/></name><operator pos:line="191" pos:column="22">+<pos:position pos:line="191" pos:column="23"/></operator><name pos:line="191" pos:column="23">size<pos:position pos:line="191" pos:column="27"/></name></expr></argument>)<pos:position pos:line="191" pos:column="28"/></argument_list></call><operator pos:line="191" pos:column="28">&lt;=<pos:position pos:line="191" pos:column="33"/></operator><name pos:line="191" pos:column="30">usableSize<pos:position pos:line="191" pos:column="40"/></name></expr></argument> )<pos:position pos:line="191" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="43"/></expr_stmt>  <comment type="block" pos:line="191" pos:column="45">/* Enforced by btreeInitPage() */</comment>
      <expr_stmt><expr><call><name pos:line="192" pos:column="7">btreeHeapInsert<pos:position pos:line="192" pos:column="22"/></name><argument_list pos:line="192" pos:column="22">(<argument><expr><name pos:line="192" pos:column="23">heap<pos:position pos:line="192" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="192" pos:column="29">(<pos:position pos:line="192" pos:column="30"/></operator><operator pos:line="192" pos:column="30">(<pos:position pos:line="192" pos:column="31"/></operator><operator pos:line="192" pos:column="31">(<pos:position pos:line="192" pos:column="32"/></operator><name pos:line="192" pos:column="32">u32<pos:position pos:line="192" pos:column="35"/></name><operator pos:line="192" pos:column="35">)<pos:position pos:line="192" pos:column="36"/></operator><name pos:line="192" pos:column="36">i<pos:position pos:line="192" pos:column="37"/></name><operator pos:line="192" pos:column="37">)<pos:position pos:line="192" pos:column="38"/></operator><operator pos:line="192" pos:column="38">&lt;&lt;<pos:position pos:line="192" pos:column="46"/></operator><literal type="number" pos:line="192" pos:column="40">16<pos:position pos:line="192" pos:column="42"/></literal><operator pos:line="192" pos:column="42">)<pos:position pos:line="192" pos:column="43"/></operator><operator pos:line="192" pos:column="43">|<pos:position pos:line="192" pos:column="44"/></operator><operator pos:line="192" pos:column="44">(<pos:position pos:line="192" pos:column="45"/></operator><name pos:line="192" pos:column="45">i<pos:position pos:line="192" pos:column="46"/></name><operator pos:line="192" pos:column="46">+<pos:position pos:line="192" pos:column="47"/></operator><name pos:line="192" pos:column="47">size<pos:position pos:line="192" pos:column="51"/></name><operator pos:line="192" pos:column="51">-<pos:position pos:line="192" pos:column="52"/></operator><literal type="number" pos:line="192" pos:column="52">1<pos:position pos:line="192" pos:column="53"/></literal><operator pos:line="192" pos:column="53">)<pos:position pos:line="192" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="192" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="56"/></expr_stmt>
      <comment type="block" pos:line="193" pos:column="7">/* EVIDENCE-OF: R-58208-19414 The first 2 bytes of a freeblock are a
      ** big-endian integer which is the offset in the b-tree page of the next
      ** freeblock in the chain, or zero if the freeblock is the last on the
      ** chain. */</comment>
      <expr_stmt><expr><name pos:line="197" pos:column="7">j<pos:position pos:line="197" pos:column="8"/></name> <operator pos:line="197" pos:column="9">=<pos:position pos:line="197" pos:column="10"/></operator> <call><name pos:line="197" pos:column="11">get2byte<pos:position pos:line="197" pos:column="19"/></name><argument_list pos:line="197" pos:column="19">(<argument><expr><operator pos:line="197" pos:column="20">&amp;<pos:position pos:line="197" pos:column="25"/></operator><name><name pos:line="197" pos:column="21">data<pos:position pos:line="197" pos:column="25"/></name><index pos:line="197" pos:column="25">[<expr><name pos:line="197" pos:column="26">i<pos:position pos:line="197" pos:column="27"/></name></expr>]<pos:position pos:line="197" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="197" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="30"/></expr_stmt>
      <comment type="block" pos:line="198" pos:column="7">/* EVIDENCE-OF: R-06866-39125 Freeblocks are always connected in order of
      ** increasing offset. */</comment>
      <expr_stmt><expr><call><name pos:line="200" pos:column="7">assert<pos:position pos:line="200" pos:column="13"/></name><argument_list pos:line="200" pos:column="13">( <argument><expr><name pos:line="200" pos:column="15">j<pos:position pos:line="200" pos:column="16"/></name><operator pos:line="200" pos:column="16">==<pos:position pos:line="200" pos:column="18"/></operator><literal type="number" pos:line="200" pos:column="18">0<pos:position pos:line="200" pos:column="19"/></literal> <operator pos:line="200" pos:column="20">||<pos:position pos:line="200" pos:column="22"/></operator> <name pos:line="200" pos:column="23">j<pos:position pos:line="200" pos:column="24"/></name><operator pos:line="200" pos:column="24">&gt;<pos:position pos:line="200" pos:column="28"/></operator><name pos:line="200" pos:column="25">i<pos:position pos:line="200" pos:column="26"/></name><operator pos:line="200" pos:column="26">+<pos:position pos:line="200" pos:column="27"/></operator><name pos:line="200" pos:column="27">size<pos:position pos:line="200" pos:column="31"/></name></expr></argument> )<pos:position pos:line="200" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="34"/></expr_stmt>  <comment type="block" pos:line="200" pos:column="36">/* Enforced by btreeInitPage() */</comment>
      <expr_stmt><expr><call><name pos:line="201" pos:column="7">assert<pos:position pos:line="201" pos:column="13"/></name><argument_list pos:line="201" pos:column="13">( <argument><expr><operator pos:line="201" pos:column="15">(<pos:position pos:line="201" pos:column="16"/></operator><name pos:line="201" pos:column="16">u32<pos:position pos:line="201" pos:column="19"/></name><operator pos:line="201" pos:column="19">)<pos:position pos:line="201" pos:column="20"/></operator><name pos:line="201" pos:column="20">j<pos:position pos:line="201" pos:column="21"/></name><operator pos:line="201" pos:column="21">&lt;=<pos:position pos:line="201" pos:column="26"/></operator><name pos:line="201" pos:column="23">usableSize<pos:position pos:line="201" pos:column="33"/></name><operator pos:line="201" pos:column="33">-<pos:position pos:line="201" pos:column="34"/></operator><literal type="number" pos:line="201" pos:column="34">4<pos:position pos:line="201" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="201" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="38"/></expr_stmt>   <comment type="block" pos:line="201" pos:column="41">/* Enforced by btreeInitPage() */</comment>
      <expr_stmt><expr><name pos:line="202" pos:column="7">i<pos:position pos:line="202" pos:column="8"/></name> <operator pos:line="202" pos:column="9">=<pos:position pos:line="202" pos:column="10"/></operator> <name pos:line="202" pos:column="11">j<pos:position pos:line="202" pos:column="12"/></name></expr>;<pos:position pos:line="202" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="203" pos:column="6"/></block></while>
    <comment type="block" pos:line="204" pos:column="5">/* Analyze the min-heap looking for overlap between cells and/or 
    ** freeblocks, and counting the number of untracked bytes in nFrag.
    ** 
    ** Each min-heap entry is of the form:    (start_address&lt;&lt;16)|end_address.
    ** There is an implied first entry the covers the page header, the cell
    ** pointer index, and the gap between the cell pointer index and the start
    ** of cell content.  
    **
    ** The loop below pulls entries from the min-heap in order and compares
    ** the start_address against the previous end_address.  If there is an
    ** overlap, that means bytes are used multiple times.  If there is a gap,
    ** that gap is added to the fragmentation count.
    */</comment>
    <expr_stmt><expr><name pos:line="217" pos:column="5">nFrag<pos:position pos:line="217" pos:column="10"/></name> <operator pos:line="217" pos:column="11">=<pos:position pos:line="217" pos:column="12"/></operator> <literal type="number" pos:line="217" pos:column="13">0<pos:position pos:line="217" pos:column="14"/></literal></expr>;<pos:position pos:line="217" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="218" pos:column="5">prev<pos:position pos:line="218" pos:column="9"/></name> <operator pos:line="218" pos:column="10">=<pos:position pos:line="218" pos:column="11"/></operator> <name pos:line="218" pos:column="12">contentOffset<pos:position pos:line="218" pos:column="25"/></name> <operator pos:line="218" pos:column="26">-<pos:position pos:line="218" pos:column="27"/></operator> <literal type="number" pos:line="218" pos:column="28">1<pos:position pos:line="218" pos:column="29"/></literal></expr>;<pos:position pos:line="218" pos:column="30"/></expr_stmt>   <comment type="block" pos:line="218" pos:column="33">/* Implied first min-heap entry */</comment>
    <while pos:line="219" pos:column="5">while<condition pos:line="219" pos:column="10">( <expr><call><name pos:line="219" pos:column="12">btreeHeapPull<pos:position pos:line="219" pos:column="25"/></name><argument_list pos:line="219" pos:column="25">(<argument><expr><name pos:line="219" pos:column="26">heap<pos:position pos:line="219" pos:column="30"/></name></expr></argument>,<argument><expr><operator pos:line="219" pos:column="31">&amp;<pos:position pos:line="219" pos:column="36"/></operator><name pos:line="219" pos:column="32">x<pos:position pos:line="219" pos:column="33"/></name></expr></argument>)<pos:position pos:line="219" pos:column="34"/></argument_list></call></expr> )<pos:position pos:line="219" pos:column="36"/></condition><block pos:line="219" pos:column="36">{
      <if pos:line="220" pos:column="7">if<condition pos:line="220" pos:column="9">( <expr><operator pos:line="220" pos:column="11">(<pos:position pos:line="220" pos:column="12"/></operator><name pos:line="220" pos:column="12">prev<pos:position pos:line="220" pos:column="16"/></name><operator pos:line="220" pos:column="16">&amp;<pos:position pos:line="220" pos:column="21"/></operator><literal type="number" pos:line="220" pos:column="17">0xffff<pos:position pos:line="220" pos:column="23"/></literal><operator pos:line="220" pos:column="23">)<pos:position pos:line="220" pos:column="24"/></operator><operator pos:line="220" pos:column="24">&gt;=<pos:position pos:line="220" pos:column="29"/></operator><operator pos:line="220" pos:column="26">(<pos:position pos:line="220" pos:column="27"/></operator><name pos:line="220" pos:column="27">x<pos:position pos:line="220" pos:column="28"/></name><operator pos:line="220" pos:column="28">&gt;&gt;<pos:position pos:line="220" pos:column="33"/></operator><literal type="number" pos:line="220" pos:column="30">16<pos:position pos:line="220" pos:column="32"/></literal><operator pos:line="220" pos:column="32">)<pos:position pos:line="220" pos:column="33"/></operator></expr> )<pos:position pos:line="220" pos:column="35"/></condition><then><block pos:line="220" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="221" pos:column="9">checkAppendMsg<pos:position pos:line="221" pos:column="23"/></name><argument_list pos:line="221" pos:column="23">(<argument><expr><name pos:line="221" pos:column="24">pCheck<pos:position pos:line="221" pos:column="30"/></name></expr></argument>,
          <argument><expr><literal type="string" pos:line="222" pos:column="11">"Multiple uses for byte %u of page %d"<pos:position pos:line="222" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="51">x<pos:position pos:line="222" pos:column="52"/></name><operator pos:line="222" pos:column="52">&gt;&gt;<pos:position pos:line="222" pos:column="57"/></operator><literal type="number" pos:line="222" pos:column="54">16<pos:position pos:line="222" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="58">iPage<pos:position pos:line="222" pos:column="63"/></name></expr></argument>)<pos:position pos:line="222" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="65"/></expr_stmt>
        <break pos:line="223" pos:column="9">break;<pos:position pos:line="223" pos:column="15"/></break>
      }<pos:position pos:line="224" pos:column="8"/></block></then><else pos:line="224" pos:column="8">else<block pos:line="224" pos:column="12">{
        <expr_stmt><expr><name pos:line="225" pos:column="9">nFrag<pos:position pos:line="225" pos:column="14"/></name> <operator pos:line="225" pos:column="15">+=<pos:position pos:line="225" pos:column="17"/></operator> <operator pos:line="225" pos:column="18">(<pos:position pos:line="225" pos:column="19"/></operator><name pos:line="225" pos:column="19">x<pos:position pos:line="225" pos:column="20"/></name><operator pos:line="225" pos:column="20">&gt;&gt;<pos:position pos:line="225" pos:column="25"/></operator><literal type="number" pos:line="225" pos:column="22">16<pos:position pos:line="225" pos:column="24"/></literal><operator pos:line="225" pos:column="24">)<pos:position pos:line="225" pos:column="25"/></operator> <operator pos:line="225" pos:column="26">-<pos:position pos:line="225" pos:column="27"/></operator> <operator pos:line="225" pos:column="28">(<pos:position pos:line="225" pos:column="29"/></operator><name pos:line="225" pos:column="29">prev<pos:position pos:line="225" pos:column="33"/></name><operator pos:line="225" pos:column="33">&amp;<pos:position pos:line="225" pos:column="38"/></operator><literal type="number" pos:line="225" pos:column="34">0xffff<pos:position pos:line="225" pos:column="40"/></literal><operator pos:line="225" pos:column="40">)<pos:position pos:line="225" pos:column="41"/></operator> <operator pos:line="225" pos:column="42">-<pos:position pos:line="225" pos:column="43"/></operator> <literal type="number" pos:line="225" pos:column="44">1<pos:position pos:line="225" pos:column="45"/></literal></expr>;<pos:position pos:line="225" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="226" pos:column="9">prev<pos:position pos:line="226" pos:column="13"/></name> <operator pos:line="226" pos:column="14">=<pos:position pos:line="226" pos:column="15"/></operator> <name pos:line="226" pos:column="16">x<pos:position pos:line="226" pos:column="17"/></name></expr>;<pos:position pos:line="226" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="227" pos:column="8"/></block></else></if>
    }<pos:position pos:line="228" pos:column="6"/></block></while>
    <expr_stmt><expr><name pos:line="229" pos:column="5">nFrag<pos:position pos:line="229" pos:column="10"/></name> <operator pos:line="229" pos:column="11">+=<pos:position pos:line="229" pos:column="13"/></operator> <name pos:line="229" pos:column="14">usableSize<pos:position pos:line="229" pos:column="24"/></name> <operator pos:line="229" pos:column="25">-<pos:position pos:line="229" pos:column="26"/></operator> <operator pos:line="229" pos:column="27">(<pos:position pos:line="229" pos:column="28"/></operator><name pos:line="229" pos:column="28">prev<pos:position pos:line="229" pos:column="32"/></name><operator pos:line="229" pos:column="32">&amp;<pos:position pos:line="229" pos:column="37"/></operator><literal type="number" pos:line="229" pos:column="33">0xffff<pos:position pos:line="229" pos:column="39"/></literal><operator pos:line="229" pos:column="39">)<pos:position pos:line="229" pos:column="40"/></operator> <operator pos:line="229" pos:column="41">-<pos:position pos:line="229" pos:column="42"/></operator> <literal type="number" pos:line="229" pos:column="43">1<pos:position pos:line="229" pos:column="44"/></literal></expr>;<pos:position pos:line="229" pos:column="45"/></expr_stmt>
    <comment type="block" pos:line="230" pos:column="5">/* EVIDENCE-OF: R-43263-13491 The total number of bytes in all fragments
    ** is stored in the fifth field of the b-tree page header.
    ** EVIDENCE-OF: R-07161-27322 The one-byte integer at offset 7 gives the
    ** number of fragmented free bytes within the cell content area.
    */</comment>
    <if pos:line="235" pos:column="5">if<condition pos:line="235" pos:column="7">( <expr><name><name pos:line="235" pos:column="9">heap<pos:position pos:line="235" pos:column="13"/></name><index pos:line="235" pos:column="13">[<expr><literal type="number" pos:line="235" pos:column="14">0<pos:position pos:line="235" pos:column="15"/></literal></expr>]<pos:position pos:line="235" pos:column="16"/></index></name><operator pos:line="235" pos:column="16">==<pos:position pos:line="235" pos:column="18"/></operator><literal type="number" pos:line="235" pos:column="18">0<pos:position pos:line="235" pos:column="19"/></literal> <operator pos:line="235" pos:column="20">&amp;&amp;<pos:position pos:line="235" pos:column="30"/></operator> <name pos:line="235" pos:column="23">nFrag<pos:position pos:line="235" pos:column="28"/></name><operator pos:line="235" pos:column="28">!=<pos:position pos:line="235" pos:column="30"/></operator><name><name pos:line="235" pos:column="30">data<pos:position pos:line="235" pos:column="34"/></name><index pos:line="235" pos:column="34">[<expr><name pos:line="235" pos:column="35">hdr<pos:position pos:line="235" pos:column="38"/></name><operator pos:line="235" pos:column="38">+<pos:position pos:line="235" pos:column="39"/></operator><literal type="number" pos:line="235" pos:column="39">7<pos:position pos:line="235" pos:column="40"/></literal></expr>]<pos:position pos:line="235" pos:column="41"/></index></name></expr> )<pos:position pos:line="235" pos:column="43"/></condition><then><block pos:line="235" pos:column="43">{
      <expr_stmt><expr><call><name pos:line="236" pos:column="7">checkAppendMsg<pos:position pos:line="236" pos:column="21"/></name><argument_list pos:line="236" pos:column="21">(<argument><expr><name pos:line="236" pos:column="22">pCheck<pos:position pos:line="236" pos:column="28"/></name></expr></argument>,
          <argument><expr><literal type="string" pos:line="237" pos:column="11">"Fragmentation of %d bytes reported as %d on page %d"<pos:position pos:line="237" pos:column="64"/></literal></expr></argument>,
          <argument><expr><name pos:line="238" pos:column="11">nFrag<pos:position pos:line="238" pos:column="16"/></name></expr></argument>, <argument><expr><name><name pos:line="238" pos:column="18">data<pos:position pos:line="238" pos:column="22"/></name><index pos:line="238" pos:column="22">[<expr><name pos:line="238" pos:column="23">hdr<pos:position pos:line="238" pos:column="26"/></name><operator pos:line="238" pos:column="26">+<pos:position pos:line="238" pos:column="27"/></operator><literal type="number" pos:line="238" pos:column="27">7<pos:position pos:line="238" pos:column="28"/></literal></expr>]<pos:position pos:line="238" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="31">iPage<pos:position pos:line="238" pos:column="36"/></name></expr></argument>)<pos:position pos:line="238" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="239" pos:column="6"/></block></then></if>
  }<pos:position pos:line="240" pos:column="4"/></block></then></if>

<label><name pos:line="242" pos:column="1">end_of_check<pos:position pos:line="242" pos:column="13"/></name>:<pos:position pos:line="242" pos:column="14"/></label>
  <if pos:line="243" pos:column="3">if<condition pos:line="243" pos:column="5">( <expr><operator pos:line="243" pos:column="7">!<pos:position pos:line="243" pos:column="8"/></operator><name pos:line="243" pos:column="8">doCoverageCheck<pos:position pos:line="243" pos:column="23"/></name></expr> )<pos:position pos:line="243" pos:column="25"/></condition><then pos:line="243" pos:column="25"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="243" pos:column="26">pPage<pos:position pos:line="243" pos:column="31"/></name><operator pos:line="243" pos:column="31">-&gt;<pos:position pos:line="243" pos:column="36"/></operator><name pos:line="243" pos:column="33">isInit<pos:position pos:line="243" pos:column="39"/></name></name> <operator pos:line="243" pos:column="40">=<pos:position pos:line="243" pos:column="41"/></operator> <name pos:line="243" pos:column="42">savedIsInit<pos:position pos:line="243" pos:column="53"/></name></expr>;<pos:position pos:line="243" pos:column="54"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="244" pos:column="3">releasePage<pos:position pos:line="244" pos:column="14"/></name><argument_list pos:line="244" pos:column="14">(<argument><expr><name pos:line="244" pos:column="15">pPage<pos:position pos:line="244" pos:column="20"/></name></expr></argument>)<pos:position pos:line="244" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="245" pos:column="3">pCheck<pos:position pos:line="245" pos:column="9"/></name><operator pos:line="245" pos:column="9">-&gt;<pos:position pos:line="245" pos:column="14"/></operator><name pos:line="245" pos:column="11">zPfx<pos:position pos:line="245" pos:column="15"/></name></name> <operator pos:line="245" pos:column="16">=<pos:position pos:line="245" pos:column="17"/></operator> <name pos:line="245" pos:column="18">saved_zPfx<pos:position pos:line="245" pos:column="28"/></name></expr>;<pos:position pos:line="245" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="246" pos:column="3">pCheck<pos:position pos:line="246" pos:column="9"/></name><operator pos:line="246" pos:column="9">-&gt;<pos:position pos:line="246" pos:column="14"/></operator><name pos:line="246" pos:column="11">v1<pos:position pos:line="246" pos:column="13"/></name></name> <operator pos:line="246" pos:column="14">=<pos:position pos:line="246" pos:column="15"/></operator> <name pos:line="246" pos:column="16">saved_v1<pos:position pos:line="246" pos:column="24"/></name></expr>;<pos:position pos:line="246" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="247" pos:column="3">pCheck<pos:position pos:line="247" pos:column="9"/></name><operator pos:line="247" pos:column="9">-&gt;<pos:position pos:line="247" pos:column="14"/></operator><name pos:line="247" pos:column="11">v2<pos:position pos:line="247" pos:column="13"/></name></name> <operator pos:line="247" pos:column="14">=<pos:position pos:line="247" pos:column="15"/></operator> <name pos:line="247" pos:column="16">saved_v2<pos:position pos:line="247" pos:column="24"/></name></expr>;<pos:position pos:line="247" pos:column="25"/></expr_stmt>
  <return pos:line="248" pos:column="3">return <expr><name pos:line="248" pos:column="10">depth<pos:position pos:line="248" pos:column="15"/></name><operator pos:line="248" pos:column="15">+<pos:position pos:line="248" pos:column="16"/></operator><literal type="number" pos:line="248" pos:column="16">1<pos:position pos:line="248" pos:column="17"/></literal></expr>;<pos:position pos:line="248" pos:column="18"/></return>
}<pos:position pos:line="249" pos:column="2"/></block></function></unit>
