<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_283_curl-7.55.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">BIO<pos:position pos:line="3" pos:column="6"/></name><modifier pos:line="3" pos:column="6">*<pos:position pos:line="3" pos:column="7"/></modifier></type> <name pos:line="3" pos:column="8">in<pos:position pos:line="3" pos:column="10"/></name><init pos:line="3" pos:column="10">=<expr><name pos:line="3" pos:column="11">NULL<pos:position pos:line="3" pos:column="15"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">BIO<pos:position pos:line="4" pos:column="6"/></name><modifier pos:line="4" pos:column="6">*<pos:position pos:line="4" pos:column="7"/></modifier></type> <name pos:line="4" pos:column="8">out<pos:position pos:line="4" pos:column="11"/></name><init pos:line="4" pos:column="11">=<expr><name pos:line="4" pos:column="12">NULL<pos:position pos:line="4" pos:column="16"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">outfile<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><name pos:line="6" pos:column="19">NULL<pos:position pos:line="6" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">infile<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name pos:line="7" pos:column="18">NULL<pos:position pos:line="7" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">tabLength<pos:position pos:line="9" pos:column="16"/></name><init pos:line="9" pos:column="16">=<expr><literal type="number" pos:line="9" pos:column="17">100<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">binaryptr<pos:position pos:line="10" pos:column="18"/></name></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">mimetype<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">mimetypeaccept<pos:position pos:line="12" pos:column="23"/></name><init pos:line="12" pos:column="23">=<expr><name pos:line="12" pos:column="24">NULL<pos:position pos:line="12" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">contenttype<pos:position pos:line="13" pos:column="20"/></name></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier><modifier pos:line="14" pos:column="15">*<pos:position pos:line="14" pos:column="16"/></modifier></type><name pos:line="14" pos:column="16">pp<pos:position pos:line="14" pos:column="18"/></name></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">unsigned<pos:position pos:line="15" pos:column="11"/></name> <name pos:line="15" pos:column="12">char<pos:position pos:line="15" pos:column="16"/></name> <modifier pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></modifier></type><name pos:line="15" pos:column="18">hostporturl<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><name pos:line="15" pos:column="32">NULL<pos:position pos:line="15" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">BIO<pos:position pos:line="16" pos:column="6"/></name> <modifier pos:line="16" pos:column="7">*<pos:position pos:line="16" pos:column="8"/></modifier></type><name pos:line="16" pos:column="8">p12bio<pos:position pos:line="16" pos:column="14"/></name></decl>;<pos:position pos:line="16" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name> <modifier pos:line="17" pos:column="8">*<pos:position pos:line="17" pos:column="9"/></modifier><modifier pos:line="17" pos:column="9">*<pos:position pos:line="17" pos:column="10"/></modifier></type><name pos:line="17" pos:column="10">args<pos:position pos:line="17" pos:column="14"/></name> <init pos:line="17" pos:column="15">= <expr><name pos:line="17" pos:column="17">argv<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">+<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="24">1<pos:position pos:line="17" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">unsigned<pos:position pos:line="18" pos:column="11"/></name> <name pos:line="18" pos:column="12">char<pos:position pos:line="18" pos:column="16"/></name> <modifier pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></modifier></type><name pos:line="18" pos:column="18">serverurl<pos:position pos:line="18" pos:column="27"/></name></decl>;<pos:position pos:line="18" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">sslctxparm<pos:position pos:line="19" pos:column="13"/></name></type> <name pos:line="19" pos:column="14">p<pos:position pos:line="19" pos:column="15"/></name></decl>;<pos:position pos:line="19" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name> <modifier pos:line="20" pos:column="8">*<pos:position pos:line="20" pos:column="9"/></modifier></type><name pos:line="20" pos:column="9">response<pos:position pos:line="20" pos:column="17"/></name></decl>;<pos:position pos:line="20" pos:column="18"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="22" pos:column="3">CURLcode<pos:position pos:line="22" pos:column="11"/></name></type> <name pos:line="22" pos:column="12">res<pos:position pos:line="22" pos:column="15"/></name></decl>;<pos:position pos:line="22" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="23" pos:column="3">struct<pos:position pos:line="23" pos:column="9"/></name> <name pos:line="23" pos:column="10">curl_slist<pos:position pos:line="23" pos:column="20"/></name></name> <modifier pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></modifier></type><name pos:line="23" pos:column="22">headers<pos:position pos:line="23" pos:column="29"/></name><init pos:line="23" pos:column="29">=<expr><name pos:line="23" pos:column="30">NULL<pos:position pos:line="23" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">int<pos:position pos:line="24" pos:column="6"/></name></type> <name pos:line="24" pos:column="7">badarg<pos:position pos:line="24" pos:column="13"/></name><init pos:line="24" pos:column="13">=<expr><literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><name pos:line="26" pos:column="3">binaryptr<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">malloc<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">tabLength<pos:position pos:line="26" pos:column="31"/></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="28" pos:column="3">p<pos:position pos:line="28" pos:column="4"/></name><operator pos:line="28" pos:column="4">.<pos:position pos:line="28" pos:column="5"/></operator><name pos:line="28" pos:column="5">verbose<pos:position pos:line="28" pos:column="12"/></name></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <literal type="number" pos:line="28" pos:column="15">0<pos:position pos:line="28" pos:column="16"/></literal></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="29" pos:column="3">p<pos:position pos:line="29" pos:column="4"/></name><operator pos:line="29" pos:column="4">.<pos:position pos:line="29" pos:column="5"/></operator><name pos:line="29" pos:column="5">errorbio<pos:position pos:line="29" pos:column="13"/></name></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="16">BIO_new_fp<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">stderr<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">BIO_NOCLOSE<pos:position pos:line="29" pos:column="46"/></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="31" pos:column="3">curl_global_init<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">CURL_GLOBAL_DEFAULT<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="33" pos:column="3">/* we need some more for the P12 decoding */</comment>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">OpenSSL_add_all_ciphers<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">()<pos:position pos:line="35" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">OpenSSL_add_all_digests<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">()<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">ERR_load_crypto_strings<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">()<pos:position pos:line="37" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>

  <while pos:line="39" pos:column="3">while<condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">*<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">args<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">&amp;&amp;<pos:position pos:line="39" pos:column="25"/></operator> <operator pos:line="39" pos:column="18">*<pos:position pos:line="39" pos:column="19"/></operator><name><name pos:line="39" pos:column="19">args<pos:position pos:line="39" pos:column="23"/></name><index pos:line="39" pos:column="23">[<expr><literal type="number" pos:line="39" pos:column="24">0<pos:position pos:line="39" pos:column="25"/></literal></expr>]<pos:position pos:line="39" pos:column="26"/></index></name> <operator pos:line="39" pos:column="27">==<pos:position pos:line="39" pos:column="29"/></operator> <literal type="char" pos:line="39" pos:column="30">'-'<pos:position pos:line="39" pos:column="33"/></literal></expr>)<pos:position pos:line="39" pos:column="34"/></condition> <block pos:line="39" pos:column="35">{
    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><operator pos:line="40" pos:column="8">!<pos:position pos:line="40" pos:column="9"/></operator><call><name pos:line="40" pos:column="9">strcmp<pos:position pos:line="40" pos:column="15"/></name> <argument_list pos:line="40" pos:column="16">(<argument><expr><operator pos:line="40" pos:column="17">*<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="18">args<pos:position pos:line="40" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="24">"-in"<pos:position pos:line="40" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block pos:line="40" pos:column="32">{
      <if pos:line="41" pos:column="7">if<condition pos:line="41" pos:column="9">(<expr><name><name pos:line="41" pos:column="10">args<pos:position pos:line="41" pos:column="14"/></name><index pos:line="41" pos:column="14">[<expr><literal type="number" pos:line="41" pos:column="15">1<pos:position pos:line="41" pos:column="16"/></literal></expr>]<pos:position pos:line="41" pos:column="17"/></index></name></expr>)<pos:position pos:line="41" pos:column="18"/></condition><then pos:line="41" pos:column="18"> <block pos:line="41" pos:column="19">{
        <expr_stmt><expr><name pos:line="42" pos:column="9">infile<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator><operator pos:line="42" pos:column="16">*<pos:position pos:line="42" pos:column="17"/></operator><operator pos:line="42" pos:column="17">(<pos:position pos:line="42" pos:column="18"/></operator><operator pos:line="42" pos:column="18">++<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="20">args<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">)<pos:position pos:line="42" pos:column="25"/></operator></expr>;<pos:position pos:line="42" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="43" pos:column="8"/></block></then>
      <else pos:line="44" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="9">badarg<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator><literal type="number" pos:line="45" pos:column="16">1<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if<condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><call><name pos:line="47" pos:column="14">strcmp<pos:position pos:line="47" pos:column="20"/></name> <argument_list pos:line="47" pos:column="21">(<argument><expr><operator pos:line="47" pos:column="22">*<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="23">args<pos:position pos:line="47" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="29">"-out"<pos:position pos:line="47" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="37"/></condition><then pos:line="47" pos:column="37"> <block pos:line="47" pos:column="38">{
      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><name><name pos:line="48" pos:column="10">args<pos:position pos:line="48" pos:column="14"/></name><index pos:line="48" pos:column="14">[<expr><literal type="number" pos:line="48" pos:column="15">1<pos:position pos:line="48" pos:column="16"/></literal></expr>]<pos:position pos:line="48" pos:column="17"/></index></name></expr>)<pos:position pos:line="48" pos:column="18"/></condition><then pos:line="48" pos:column="18"> <block pos:line="48" pos:column="19">{
        <expr_stmt><expr><name pos:line="49" pos:column="9">outfile<pos:position pos:line="49" pos:column="16"/></name><operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator><operator pos:line="49" pos:column="17">*<pos:position pos:line="49" pos:column="18"/></operator><operator pos:line="49" pos:column="18">(<pos:position pos:line="49" pos:column="19"/></operator><operator pos:line="49" pos:column="19">++<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="21">args<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">)<pos:position pos:line="49" pos:column="26"/></operator></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="50" pos:column="8"/></block></then>
      <else pos:line="51" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="9">badarg<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator><literal type="number" pos:line="52" pos:column="16">1<pos:position pos:line="52" pos:column="17"/></literal></expr>;<pos:position pos:line="52" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="54" pos:column="5">else <if pos:line="54" pos:column="10">if<condition pos:line="54" pos:column="12">(<expr><operator pos:line="54" pos:column="13">!<pos:position pos:line="54" pos:column="14"/></operator><call><name pos:line="54" pos:column="14">strcmp<pos:position pos:line="54" pos:column="20"/></name> <argument_list pos:line="54" pos:column="21">(<argument><expr><operator pos:line="54" pos:column="22">*<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="23">args<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="29">"-p12"<pos:position pos:line="54" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="37"/></condition><then pos:line="54" pos:column="37"> <block pos:line="54" pos:column="38">{
      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">(<expr><name><name pos:line="55" pos:column="10">args<pos:position pos:line="55" pos:column="14"/></name><index pos:line="55" pos:column="14">[<expr><literal type="number" pos:line="55" pos:column="15">1<pos:position pos:line="55" pos:column="16"/></literal></expr>]<pos:position pos:line="55" pos:column="17"/></index></name></expr>)<pos:position pos:line="55" pos:column="18"/></condition><then pos:line="55" pos:column="18"> <block pos:line="55" pos:column="19">{
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">p<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">.<pos:position pos:line="56" pos:column="11"/></operator><name pos:line="56" pos:column="11">p12file<pos:position pos:line="56" pos:column="18"/></name></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <operator pos:line="56" pos:column="21">*<pos:position pos:line="56" pos:column="22"/></operator><operator pos:line="56" pos:column="22">(<pos:position pos:line="56" pos:column="23"/></operator><operator pos:line="56" pos:column="23">++<pos:position pos:line="56" pos:column="25"/></operator><name pos:line="56" pos:column="25">args<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">)<pos:position pos:line="56" pos:column="30"/></operator></expr>;<pos:position pos:line="56" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="57" pos:column="8"/></block></then>
      <else pos:line="58" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="9">badarg<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator><literal type="number" pos:line="59" pos:column="16">1<pos:position pos:line="59" pos:column="17"/></literal></expr>;<pos:position pos:line="59" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="61" pos:column="5">else <if pos:line="61" pos:column="10">if<condition pos:line="61" pos:column="12">(<expr><call><name pos:line="61" pos:column="13">strcmp<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><operator pos:line="61" pos:column="20">*<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="21">args<pos:position pos:line="61" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="27">"-envpass"<pos:position pos:line="61" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="38"/></argument_list></call> <operator pos:line="61" pos:column="39">==<pos:position pos:line="61" pos:column="41"/></operator> <literal type="number" pos:line="61" pos:column="42">0<pos:position pos:line="61" pos:column="43"/></literal></expr>)<pos:position pos:line="61" pos:column="44"/></condition><then pos:line="61" pos:column="44"> <block pos:line="61" pos:column="45">{
      <if pos:line="62" pos:column="7">if<condition pos:line="62" pos:column="9">(<expr><name><name pos:line="62" pos:column="10">args<pos:position pos:line="62" pos:column="14"/></name><index pos:line="62" pos:column="14">[<expr><literal type="number" pos:line="62" pos:column="15">1<pos:position pos:line="62" pos:column="16"/></literal></expr>]<pos:position pos:line="62" pos:column="17"/></index></name></expr>)<pos:position pos:line="62" pos:column="18"/></condition><then pos:line="62" pos:column="18"> <block pos:line="62" pos:column="19">{
        <expr_stmt><expr><name><name pos:line="63" pos:column="9">p<pos:position pos:line="63" pos:column="10"/></name><operator pos:line="63" pos:column="10">.<pos:position pos:line="63" pos:column="11"/></operator><name pos:line="63" pos:column="11">pst<pos:position pos:line="63" pos:column="14"/></name></name> <operator pos:line="63" pos:column="15">=<pos:position pos:line="63" pos:column="16"/></operator> <call><name pos:line="63" pos:column="17">getenv<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><operator pos:line="63" pos:column="24">*<pos:position pos:line="63" pos:column="25"/></operator><operator pos:line="63" pos:column="25">(<pos:position pos:line="63" pos:column="26"/></operator><operator pos:line="63" pos:column="26">++<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="28">args<pos:position pos:line="63" pos:column="32"/></name><operator pos:line="63" pos:column="32">)<pos:position pos:line="63" pos:column="33"/></operator></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="64" pos:column="8"/></block></then>
      <else pos:line="65" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="9">badarg<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">=<pos:position pos:line="66" pos:column="16"/></operator><literal type="number" pos:line="66" pos:column="16">1<pos:position pos:line="66" pos:column="17"/></literal></expr>;<pos:position pos:line="66" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="68" pos:column="5">else <if pos:line="68" pos:column="10">if<condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">strcmp<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">(<argument><expr><operator pos:line="68" pos:column="20">*<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="21">args<pos:position pos:line="68" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="27">"-connect"<pos:position pos:line="68" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="38"/></argument_list></call> <operator pos:line="68" pos:column="39">==<pos:position pos:line="68" pos:column="41"/></operator> <literal type="number" pos:line="68" pos:column="42">0<pos:position pos:line="68" pos:column="43"/></literal></expr>)<pos:position pos:line="68" pos:column="44"/></condition><then pos:line="68" pos:column="44"> <block pos:line="68" pos:column="45">{
      <if pos:line="69" pos:column="7">if<condition pos:line="69" pos:column="9">(<expr><name><name pos:line="69" pos:column="10">args<pos:position pos:line="69" pos:column="14"/></name><index pos:line="69" pos:column="14">[<expr><literal type="number" pos:line="69" pos:column="15">1<pos:position pos:line="69" pos:column="16"/></literal></expr>]<pos:position pos:line="69" pos:column="17"/></index></name></expr>)<pos:position pos:line="69" pos:column="18"/></condition><then pos:line="69" pos:column="18"> <block pos:line="69" pos:column="19">{
        <expr_stmt><expr><name pos:line="70" pos:column="9">hostporturl<pos:position pos:line="70" pos:column="20"/></name> <operator pos:line="70" pos:column="21">=<pos:position pos:line="70" pos:column="22"/></operator> <operator pos:line="70" pos:column="23">*<pos:position pos:line="70" pos:column="24"/></operator><operator pos:line="70" pos:column="24">(<pos:position pos:line="70" pos:column="25"/></operator><operator pos:line="70" pos:column="25">++<pos:position pos:line="70" pos:column="27"/></operator><name pos:line="70" pos:column="27">args<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">)<pos:position pos:line="70" pos:column="32"/></operator></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="71" pos:column="8"/></block></then>
      <else pos:line="72" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="9">badarg<pos:position pos:line="73" pos:column="15"/></name><operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator><literal type="number" pos:line="73" pos:column="16">1<pos:position pos:line="73" pos:column="17"/></literal></expr>;<pos:position pos:line="73" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="75" pos:column="5">else <if pos:line="75" pos:column="10">if<condition pos:line="75" pos:column="12">(<expr><call><name pos:line="75" pos:column="13">strcmp<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><operator pos:line="75" pos:column="20">*<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="21">args<pos:position pos:line="75" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="27">"-mimetype"<pos:position pos:line="75" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="39"/></argument_list></call> <operator pos:line="75" pos:column="40">==<pos:position pos:line="75" pos:column="42"/></operator> <literal type="number" pos:line="75" pos:column="43">0<pos:position pos:line="75" pos:column="44"/></literal></expr>)<pos:position pos:line="75" pos:column="45"/></condition><then pos:line="75" pos:column="45"> <block pos:line="75" pos:column="46">{
      <if pos:line="76" pos:column="7">if<condition pos:line="76" pos:column="9">(<expr><name><name pos:line="76" pos:column="10">args<pos:position pos:line="76" pos:column="14"/></name><index pos:line="76" pos:column="14">[<expr><literal type="number" pos:line="76" pos:column="15">1<pos:position pos:line="76" pos:column="16"/></literal></expr>]<pos:position pos:line="76" pos:column="17"/></index></name></expr>)<pos:position pos:line="76" pos:column="18"/></condition><then pos:line="76" pos:column="18"> <block pos:line="76" pos:column="19">{
        <expr_stmt><expr><name pos:line="77" pos:column="9">mimetype<pos:position pos:line="77" pos:column="17"/></name> <operator pos:line="77" pos:column="18">=<pos:position pos:line="77" pos:column="19"/></operator> <operator pos:line="77" pos:column="20">*<pos:position pos:line="77" pos:column="21"/></operator><operator pos:line="77" pos:column="21">(<pos:position pos:line="77" pos:column="22"/></operator><operator pos:line="77" pos:column="22">++<pos:position pos:line="77" pos:column="24"/></operator><name pos:line="77" pos:column="24">args<pos:position pos:line="77" pos:column="28"/></name><operator pos:line="77" pos:column="28">)<pos:position pos:line="77" pos:column="29"/></operator></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="78" pos:column="8"/></block></then>
      <else pos:line="79" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="80" pos:column="9">badarg<pos:position pos:line="80" pos:column="15"/></name><operator pos:line="80" pos:column="15">=<pos:position pos:line="80" pos:column="16"/></operator><literal type="number" pos:line="80" pos:column="16">1<pos:position pos:line="80" pos:column="17"/></literal></expr>;<pos:position pos:line="80" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="82" pos:column="5">else <if pos:line="82" pos:column="10">if<condition pos:line="82" pos:column="12">(<expr><call><name pos:line="82" pos:column="13">strcmp<pos:position pos:line="82" pos:column="19"/></name><argument_list pos:line="82" pos:column="19">(<argument><expr><operator pos:line="82" pos:column="20">*<pos:position pos:line="82" pos:column="21"/></operator><name pos:line="82" pos:column="21">args<pos:position pos:line="82" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="27">"-acceptmime"<pos:position pos:line="82" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="41"/></argument_list></call> <operator pos:line="82" pos:column="42">==<pos:position pos:line="82" pos:column="44"/></operator> <literal type="number" pos:line="82" pos:column="45">0<pos:position pos:line="82" pos:column="46"/></literal></expr>)<pos:position pos:line="82" pos:column="47"/></condition><then pos:line="82" pos:column="47"> <block pos:line="82" pos:column="48">{
      <if pos:line="83" pos:column="7">if<condition pos:line="83" pos:column="9">(<expr><name><name pos:line="83" pos:column="10">args<pos:position pos:line="83" pos:column="14"/></name><index pos:line="83" pos:column="14">[<expr><literal type="number" pos:line="83" pos:column="15">1<pos:position pos:line="83" pos:column="16"/></literal></expr>]<pos:position pos:line="83" pos:column="17"/></index></name></expr>)<pos:position pos:line="83" pos:column="18"/></condition><then pos:line="83" pos:column="18"> <block pos:line="83" pos:column="19">{
        <expr_stmt><expr><name pos:line="84" pos:column="9">mimetypeaccept<pos:position pos:line="84" pos:column="23"/></name> <operator pos:line="84" pos:column="24">=<pos:position pos:line="84" pos:column="25"/></operator> <operator pos:line="84" pos:column="26">*<pos:position pos:line="84" pos:column="27"/></operator><operator pos:line="84" pos:column="27">(<pos:position pos:line="84" pos:column="28"/></operator><operator pos:line="84" pos:column="28">++<pos:position pos:line="84" pos:column="30"/></operator><name pos:line="84" pos:column="30">args<pos:position pos:line="84" pos:column="34"/></name><operator pos:line="84" pos:column="34">)<pos:position pos:line="84" pos:column="35"/></operator></expr>;<pos:position pos:line="84" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="85" pos:column="8"/></block></then>
      <else pos:line="86" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="9">badarg<pos:position pos:line="87" pos:column="15"/></name><operator pos:line="87" pos:column="15">=<pos:position pos:line="87" pos:column="16"/></operator><literal type="number" pos:line="87" pos:column="16">1<pos:position pos:line="87" pos:column="17"/></literal></expr>;<pos:position pos:line="87" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="89" pos:column="5">else <if pos:line="89" pos:column="10">if<condition pos:line="89" pos:column="12">(<expr><call><name pos:line="89" pos:column="13">strcmp<pos:position pos:line="89" pos:column="19"/></name><argument_list pos:line="89" pos:column="19">(<argument><expr><operator pos:line="89" pos:column="20">*<pos:position pos:line="89" pos:column="21"/></operator><name pos:line="89" pos:column="21">args<pos:position pos:line="89" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="27">"-accesstype"<pos:position pos:line="89" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="41"/></argument_list></call> <operator pos:line="89" pos:column="42">==<pos:position pos:line="89" pos:column="44"/></operator> <literal type="number" pos:line="89" pos:column="45">0<pos:position pos:line="89" pos:column="46"/></literal></expr>)<pos:position pos:line="89" pos:column="47"/></condition><then pos:line="89" pos:column="47"> <block pos:line="89" pos:column="48">{
      <if pos:line="90" pos:column="7">if<condition pos:line="90" pos:column="9">(<expr><name><name pos:line="90" pos:column="10">args<pos:position pos:line="90" pos:column="14"/></name><index pos:line="90" pos:column="14">[<expr><literal type="number" pos:line="90" pos:column="15">1<pos:position pos:line="90" pos:column="16"/></literal></expr>]<pos:position pos:line="90" pos:column="17"/></index></name></expr>)<pos:position pos:line="90" pos:column="18"/></condition><then pos:line="90" pos:column="18"> <block pos:line="90" pos:column="19">{
        <expr_stmt><expr><name><name pos:line="91" pos:column="9">p<pos:position pos:line="91" pos:column="10"/></name><operator pos:line="91" pos:column="10">.<pos:position pos:line="91" pos:column="11"/></operator><name pos:line="91" pos:column="11">accesstype<pos:position pos:line="91" pos:column="21"/></name></name> <operator pos:line="91" pos:column="22">=<pos:position pos:line="91" pos:column="23"/></operator> <call><name pos:line="91" pos:column="24">OBJ_obj2nid<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">(<argument><expr><call><name pos:line="91" pos:column="36">OBJ_txt2obj<pos:position pos:line="91" pos:column="47"/></name><argument_list pos:line="91" pos:column="47">(<argument><expr><operator pos:line="91" pos:column="48">*<pos:position pos:line="91" pos:column="49"/></operator><operator pos:line="91" pos:column="49">++<pos:position pos:line="91" pos:column="51"/></operator><name pos:line="91" pos:column="51">args<pos:position pos:line="91" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="57">0<pos:position pos:line="91" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="61"/></expr_stmt>
        <if pos:line="92" pos:column="9">if<condition pos:line="92" pos:column="11">(<expr><name><name pos:line="92" pos:column="12">p<pos:position pos:line="92" pos:column="13"/></name><operator pos:line="92" pos:column="13">.<pos:position pos:line="92" pos:column="14"/></operator><name pos:line="92" pos:column="14">accesstype<pos:position pos:line="92" pos:column="24"/></name></name> <operator pos:line="92" pos:column="25">==<pos:position pos:line="92" pos:column="27"/></operator> <literal type="number" pos:line="92" pos:column="28">0<pos:position pos:line="92" pos:column="29"/></literal></expr>)<pos:position pos:line="92" pos:column="30"/></condition><then pos:line="92" pos:column="30">
          <block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="11">badarg<pos:position pos:line="93" pos:column="17"/></name><operator pos:line="93" pos:column="17">=<pos:position pos:line="93" pos:column="18"/></operator><literal type="number" pos:line="93" pos:column="18">1<pos:position pos:line="93" pos:column="19"/></literal></expr>;<pos:position pos:line="93" pos:column="20"/></expr_stmt></block></then></if>
      }<pos:position pos:line="94" pos:column="8"/></block></then>
      <else pos:line="95" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="9">badarg<pos:position pos:line="96" pos:column="15"/></name><operator pos:line="96" pos:column="15">=<pos:position pos:line="96" pos:column="16"/></operator><literal type="number" pos:line="96" pos:column="16">1<pos:position pos:line="96" pos:column="17"/></literal></expr>;<pos:position pos:line="96" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="98" pos:column="5">else <if pos:line="98" pos:column="10">if<condition pos:line="98" pos:column="12">(<expr><call><name pos:line="98" pos:column="13">strcmp<pos:position pos:line="98" pos:column="19"/></name><argument_list pos:line="98" pos:column="19">(<argument><expr><operator pos:line="98" pos:column="20">*<pos:position pos:line="98" pos:column="21"/></operator><name pos:line="98" pos:column="21">args<pos:position pos:line="98" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="27">"-verbose"<pos:position pos:line="98" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="38"/></argument_list></call> <operator pos:line="98" pos:column="39">==<pos:position pos:line="98" pos:column="41"/></operator> <literal type="number" pos:line="98" pos:column="42">0<pos:position pos:line="98" pos:column="43"/></literal></expr>)<pos:position pos:line="98" pos:column="44"/></condition><then pos:line="98" pos:column="44"> <block pos:line="98" pos:column="45">{
      <expr_stmt><expr><name><name pos:line="99" pos:column="7">p<pos:position pos:line="99" pos:column="8"/></name><operator pos:line="99" pos:column="8">.<pos:position pos:line="99" pos:column="9"/></operator><name pos:line="99" pos:column="9">verbose<pos:position pos:line="99" pos:column="16"/></name></name><operator pos:line="99" pos:column="16">++<pos:position pos:line="99" pos:column="18"/></operator></expr>;<pos:position pos:line="99" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="100" pos:column="6"/></block></then></if></elseif>
    <else pos:line="101" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="7">badarg<pos:position pos:line="102" pos:column="13"/></name><operator pos:line="102" pos:column="13">=<pos:position pos:line="102" pos:column="14"/></operator><literal type="number" pos:line="102" pos:column="14">1<pos:position pos:line="102" pos:column="15"/></literal></expr>;<pos:position pos:line="102" pos:column="16"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="103" pos:column="5">args<pos:position pos:line="103" pos:column="9"/></name><operator pos:line="103" pos:column="9">++<pos:position pos:line="103" pos:column="11"/></operator></expr>;<pos:position pos:line="103" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="104" pos:column="4"/></block></while>

  <if pos:line="106" pos:column="3">if<condition pos:line="106" pos:column="5">(<expr><name pos:line="106" pos:column="6">mimetype<pos:position pos:line="106" pos:column="14"/></name><operator pos:line="106" pos:column="14">==<pos:position pos:line="106" pos:column="16"/></operator><name pos:line="106" pos:column="16">NULL<pos:position pos:line="106" pos:column="20"/></name> <operator pos:line="106" pos:column="21">||<pos:position pos:line="106" pos:column="23"/></operator> <name pos:line="106" pos:column="24">mimetypeaccept<pos:position pos:line="106" pos:column="38"/></name> <operator pos:line="106" pos:column="39">==<pos:position pos:line="106" pos:column="41"/></operator> <name pos:line="106" pos:column="42">NULL<pos:position pos:line="106" pos:column="46"/></name></expr>)<pos:position pos:line="106" pos:column="47"/></condition><then pos:line="106" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><name pos:line="107" pos:column="5">badarg<pos:position pos:line="107" pos:column="11"/></name> <operator pos:line="107" pos:column="12">=<pos:position pos:line="107" pos:column="13"/></operator> <literal type="number" pos:line="107" pos:column="14">1<pos:position pos:line="107" pos:column="15"/></literal></expr>;<pos:position pos:line="107" pos:column="16"/></expr_stmt></block></then></if>

  <if pos:line="109" pos:column="3">if<condition pos:line="109" pos:column="5">(<expr><name pos:line="109" pos:column="6">badarg<pos:position pos:line="109" pos:column="12"/></name></expr>)<pos:position pos:line="109" pos:column="13"/></condition><then pos:line="109" pos:column="13"> <block pos:line="109" pos:column="14">{
    <for pos:line="110" pos:column="5">for<control pos:line="110" pos:column="8">(<init><expr><name pos:line="110" pos:column="9">pp<pos:position pos:line="110" pos:column="11"/></name><operator pos:line="110" pos:column="11">=<pos:position pos:line="110" pos:column="12"/></operator><name pos:line="110" pos:column="12">curlx_usage<pos:position pos:line="110" pos:column="23"/></name></expr>;<pos:position pos:line="110" pos:column="24"/></init> <condition><expr><operator pos:line="110" pos:column="25">(<pos:position pos:line="110" pos:column="26"/></operator><operator pos:line="110" pos:column="26">*<pos:position pos:line="110" pos:column="27"/></operator><name pos:line="110" pos:column="27">pp<pos:position pos:line="110" pos:column="29"/></name> <operator pos:line="110" pos:column="30">!=<pos:position pos:line="110" pos:column="32"/></operator> <name pos:line="110" pos:column="33">NULL<pos:position pos:line="110" pos:column="37"/></name><operator pos:line="110" pos:column="37">)<pos:position pos:line="110" pos:column="38"/></operator></expr>;<pos:position pos:line="110" pos:column="39"/></condition> <incr><expr><name pos:line="110" pos:column="40">pp<pos:position pos:line="110" pos:column="42"/></name><operator pos:line="110" pos:column="42">++<pos:position pos:line="110" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="110" pos:column="45"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="7">BIO_printf<pos:position pos:line="111" pos:column="17"/></name><argument_list pos:line="111" pos:column="17">(<argument><expr><name><name pos:line="111" pos:column="18">p<pos:position pos:line="111" pos:column="19"/></name><operator pos:line="111" pos:column="19">.<pos:position pos:line="111" pos:column="20"/></operator><name pos:line="111" pos:column="20">errorbio<pos:position pos:line="111" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="30">"%s\n"<pos:position pos:line="111" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="111" pos:column="38">*<pos:position pos:line="111" pos:column="39"/></operator><name pos:line="111" pos:column="39">pp<pos:position pos:line="111" pos:column="41"/></name></expr></argument>)<pos:position pos:line="111" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="43"/></expr_stmt></block></for>
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">BIO_printf<pos:position pos:line="112" pos:column="15"/></name><argument_list pos:line="112" pos:column="15">(<argument><expr><name><name pos:line="112" pos:column="16">p<pos:position pos:line="112" pos:column="17"/></name><operator pos:line="112" pos:column="17">.<pos:position pos:line="112" pos:column="18"/></operator><name pos:line="112" pos:column="18">errorbio<pos:position pos:line="112" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="28">"\n"<pos:position pos:line="112" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="34"/></expr_stmt>
    <goto pos:line="113" pos:column="5">goto <name pos:line="113" pos:column="10">err<pos:position pos:line="113" pos:column="13"/></name>;<pos:position pos:line="113" pos:column="14"/></goto>
  }<pos:position pos:line="114" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="116" pos:column="3">/* set input */</comment>

  <if pos:line="118" pos:column="3">if<condition pos:line="118" pos:column="5">(<expr><operator pos:line="118" pos:column="6">(<pos:position pos:line="118" pos:column="7"/></operator><name pos:line="118" pos:column="7">in<pos:position pos:line="118" pos:column="9"/></name><operator pos:line="118" pos:column="9">=<pos:position pos:line="118" pos:column="10"/></operator><call><name pos:line="118" pos:column="10">BIO_new<pos:position pos:line="118" pos:column="17"/></name><argument_list pos:line="118" pos:column="17">(<argument><expr><call><name pos:line="118" pos:column="18">BIO_s_file<pos:position pos:line="118" pos:column="28"/></name><argument_list pos:line="118" pos:column="28">()<pos:position pos:line="118" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="118" pos:column="31"/></argument_list></call><operator pos:line="118" pos:column="31">)<pos:position pos:line="118" pos:column="32"/></operator> <operator pos:line="118" pos:column="33">==<pos:position pos:line="118" pos:column="35"/></operator> <name pos:line="118" pos:column="36">NULL<pos:position pos:line="118" pos:column="40"/></name></expr>)<pos:position pos:line="118" pos:column="41"/></condition><then pos:line="118" pos:column="41"> <block pos:line="118" pos:column="42">{
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">BIO_printf<pos:position pos:line="119" pos:column="15"/></name><argument_list pos:line="119" pos:column="15">(<argument><expr><name><name pos:line="119" pos:column="16">p<pos:position pos:line="119" pos:column="17"/></name><operator pos:line="119" pos:column="17">.<pos:position pos:line="119" pos:column="18"/></operator><name pos:line="119" pos:column="18">errorbio<pos:position pos:line="119" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="28">"Error setting input bio\n"<pos:position pos:line="119" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="57"/></expr_stmt>
    <goto pos:line="120" pos:column="5">goto <name pos:line="120" pos:column="10">err<pos:position pos:line="120" pos:column="13"/></name>;<pos:position pos:line="120" pos:column="14"/></goto>
  }<pos:position pos:line="121" pos:column="4"/></block></then>
  <elseif pos:line="122" pos:column="3">else <if pos:line="122" pos:column="8">if<condition pos:line="122" pos:column="10">(<expr><name pos:line="122" pos:column="11">infile<pos:position pos:line="122" pos:column="17"/></name> <operator pos:line="122" pos:column="18">==<pos:position pos:line="122" pos:column="20"/></operator> <name pos:line="122" pos:column="21">NULL<pos:position pos:line="122" pos:column="25"/></name></expr>)<pos:position pos:line="122" pos:column="26"/></condition><then pos:line="122" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="123" pos:column="5">BIO_set_fp<pos:position pos:line="123" pos:column="15"/></name><argument_list pos:line="123" pos:column="15">(<argument><expr><name pos:line="123" pos:column="16">in<pos:position pos:line="123" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="20">stdin<pos:position pos:line="123" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="27">BIO_NOCLOSE<pos:position pos:line="123" pos:column="38"/></name><operator pos:line="123" pos:column="38">|<pos:position pos:line="123" pos:column="39"/></operator><name pos:line="123" pos:column="39">BIO_FP_TEXT<pos:position pos:line="123" pos:column="50"/></name></expr></argument>)<pos:position pos:line="123" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="52"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="124" pos:column="3">else <if pos:line="124" pos:column="8">if<condition pos:line="124" pos:column="10">(<expr><call><name pos:line="124" pos:column="11">BIO_read_filename<pos:position pos:line="124" pos:column="28"/></name><argument_list pos:line="124" pos:column="28">(<argument><expr><name pos:line="124" pos:column="29">in<pos:position pos:line="124" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="33">infile<pos:position pos:line="124" pos:column="39"/></name></expr></argument>)<pos:position pos:line="124" pos:column="40"/></argument_list></call> <operator pos:line="124" pos:column="41">&lt;=<pos:position pos:line="124" pos:column="46"/></operator> <literal type="number" pos:line="124" pos:column="44">0<pos:position pos:line="124" pos:column="45"/></literal></expr>)<pos:position pos:line="124" pos:column="46"/></condition><then pos:line="124" pos:column="46"> <block pos:line="124" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="125" pos:column="5">BIO_printf<pos:position pos:line="125" pos:column="15"/></name><argument_list pos:line="125" pos:column="15">(<argument><expr><name><name pos:line="125" pos:column="16">p<pos:position pos:line="125" pos:column="17"/></name><operator pos:line="125" pos:column="17">.<pos:position pos:line="125" pos:column="18"/></operator><name pos:line="125" pos:column="18">errorbio<pos:position pos:line="125" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="28">"Error opening input file %s\n"<pos:position pos:line="125" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="61">infile<pos:position pos:line="125" pos:column="67"/></name></expr></argument>)<pos:position pos:line="125" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">BIO_free<pos:position pos:line="126" pos:column="13"/></name><argument_list pos:line="126" pos:column="13">(<argument><expr><name pos:line="126" pos:column="14">in<pos:position pos:line="126" pos:column="16"/></name></expr></argument>)<pos:position pos:line="126" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="18"/></expr_stmt>
    <goto pos:line="127" pos:column="5">goto <name pos:line="127" pos:column="10">err<pos:position pos:line="127" pos:column="13"/></name>;<pos:position pos:line="127" pos:column="14"/></goto>
  }<pos:position pos:line="128" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="130" pos:column="3">/* set output  */</comment>

  <if pos:line="132" pos:column="3">if<condition pos:line="132" pos:column="5">(<expr><operator pos:line="132" pos:column="6">(<pos:position pos:line="132" pos:column="7"/></operator><name pos:line="132" pos:column="7">out<pos:position pos:line="132" pos:column="10"/></name><operator pos:line="132" pos:column="10">=<pos:position pos:line="132" pos:column="11"/></operator><call><name pos:line="132" pos:column="11">BIO_new<pos:position pos:line="132" pos:column="18"/></name><argument_list pos:line="132" pos:column="18">(<argument><expr><call><name pos:line="132" pos:column="19">BIO_s_file<pos:position pos:line="132" pos:column="29"/></name><argument_list pos:line="132" pos:column="29">()<pos:position pos:line="132" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="132" pos:column="32"/></argument_list></call><operator pos:line="132" pos:column="32">)<pos:position pos:line="132" pos:column="33"/></operator> <operator pos:line="132" pos:column="34">==<pos:position pos:line="132" pos:column="36"/></operator> <name pos:line="132" pos:column="37">NULL<pos:position pos:line="132" pos:column="41"/></name></expr>)<pos:position pos:line="132" pos:column="42"/></condition><then pos:line="132" pos:column="42"> <block pos:line="132" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">BIO_printf<pos:position pos:line="133" pos:column="15"/></name><argument_list pos:line="133" pos:column="15">(<argument><expr><name><name pos:line="133" pos:column="16">p<pos:position pos:line="133" pos:column="17"/></name><operator pos:line="133" pos:column="17">.<pos:position pos:line="133" pos:column="18"/></operator><name pos:line="133" pos:column="18">errorbio<pos:position pos:line="133" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="28">"Error setting output bio.\n"<pos:position pos:line="133" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="59"/></expr_stmt>
    <goto pos:line="134" pos:column="5">goto <name pos:line="134" pos:column="10">err<pos:position pos:line="134" pos:column="13"/></name>;<pos:position pos:line="134" pos:column="14"/></goto>
  }<pos:position pos:line="135" pos:column="4"/></block></then>
  <elseif pos:line="136" pos:column="3">else <if pos:line="136" pos:column="8">if<condition pos:line="136" pos:column="10">(<expr><name pos:line="136" pos:column="11">outfile<pos:position pos:line="136" pos:column="18"/></name> <operator pos:line="136" pos:column="19">==<pos:position pos:line="136" pos:column="21"/></operator> <name pos:line="136" pos:column="22">NULL<pos:position pos:line="136" pos:column="26"/></name></expr>)<pos:position pos:line="136" pos:column="27"/></condition><then pos:line="136" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="137" pos:column="5">BIO_set_fp<pos:position pos:line="137" pos:column="15"/></name><argument_list pos:line="137" pos:column="15">(<argument><expr><name pos:line="137" pos:column="16">out<pos:position pos:line="137" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="21">stdout<pos:position pos:line="137" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="29">BIO_NOCLOSE<pos:position pos:line="137" pos:column="40"/></name><operator pos:line="137" pos:column="40">|<pos:position pos:line="137" pos:column="41"/></operator><name pos:line="137" pos:column="41">BIO_FP_TEXT<pos:position pos:line="137" pos:column="52"/></name></expr></argument>)<pos:position pos:line="137" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="54"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="138" pos:column="3">else <if pos:line="138" pos:column="8">if<condition pos:line="138" pos:column="10">(<expr><call><name pos:line="138" pos:column="11">BIO_write_filename<pos:position pos:line="138" pos:column="29"/></name><argument_list pos:line="138" pos:column="29">(<argument><expr><name pos:line="138" pos:column="30">out<pos:position pos:line="138" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="35">outfile<pos:position pos:line="138" pos:column="42"/></name></expr></argument>)<pos:position pos:line="138" pos:column="43"/></argument_list></call> <operator pos:line="138" pos:column="44">&lt;=<pos:position pos:line="138" pos:column="49"/></operator> <literal type="number" pos:line="138" pos:column="47">0<pos:position pos:line="138" pos:column="48"/></literal></expr>)<pos:position pos:line="138" pos:column="49"/></condition><then pos:line="138" pos:column="49"> <block pos:line="138" pos:column="50">{
    <expr_stmt><expr><call><name pos:line="139" pos:column="5">BIO_printf<pos:position pos:line="139" pos:column="15"/></name><argument_list pos:line="139" pos:column="15">(<argument><expr><name><name pos:line="139" pos:column="16">p<pos:position pos:line="139" pos:column="17"/></name><operator pos:line="139" pos:column="17">.<pos:position pos:line="139" pos:column="18"/></operator><name pos:line="139" pos:column="18">errorbio<pos:position pos:line="139" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="28">"Error opening output file %s\n"<pos:position pos:line="139" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="62">outfile<pos:position pos:line="139" pos:column="69"/></name></expr></argument>)<pos:position pos:line="139" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="140" pos:column="5">BIO_free<pos:position pos:line="140" pos:column="13"/></name><argument_list pos:line="140" pos:column="13">(<argument><expr><name pos:line="140" pos:column="14">out<pos:position pos:line="140" pos:column="17"/></name></expr></argument>)<pos:position pos:line="140" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="19"/></expr_stmt>
    <goto pos:line="141" pos:column="5">goto <name pos:line="141" pos:column="10">err<pos:position pos:line="141" pos:column="13"/></name>;<pos:position pos:line="141" pos:column="14"/></goto>
  }<pos:position pos:line="142" pos:column="4"/></block></then></if></elseif></if>


  <expr_stmt><expr><name><name pos:line="145" pos:column="3">p<pos:position pos:line="145" pos:column="4"/></name><operator pos:line="145" pos:column="4">.<pos:position pos:line="145" pos:column="5"/></operator><name pos:line="145" pos:column="5">errorbio<pos:position pos:line="145" pos:column="13"/></name></name> <operator pos:line="145" pos:column="14">=<pos:position pos:line="145" pos:column="15"/></operator> <call><name pos:line="145" pos:column="16">BIO_new_fp<pos:position pos:line="145" pos:column="26"/></name><argument_list pos:line="145" pos:column="26">(<argument><expr><name pos:line="145" pos:column="27">stderr<pos:position pos:line="145" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="35">BIO_NOCLOSE<pos:position pos:line="145" pos:column="46"/></name></expr></argument>)<pos:position pos:line="145" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="48"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="147" pos:column="3">p<pos:position pos:line="147" pos:column="4"/></name><operator pos:line="147" pos:column="4">.<pos:position pos:line="147" pos:column="5"/></operator><name pos:line="147" pos:column="5">curl<pos:position pos:line="147" pos:column="9"/></name></name> <operator pos:line="147" pos:column="10">=<pos:position pos:line="147" pos:column="11"/></operator> <call><name pos:line="147" pos:column="12">curl_easy_init<pos:position pos:line="147" pos:column="26"/></name><argument_list pos:line="147" pos:column="26">()<pos:position pos:line="147" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="29"/></expr_stmt>
  <if pos:line="148" pos:column="3">if<condition pos:line="148" pos:column="5">(<expr><operator pos:line="148" pos:column="6">!<pos:position pos:line="148" pos:column="7"/></operator><name><name pos:line="148" pos:column="7">p<pos:position pos:line="148" pos:column="8"/></name><operator pos:line="148" pos:column="8">.<pos:position pos:line="148" pos:column="9"/></operator><name pos:line="148" pos:column="9">curl<pos:position pos:line="148" pos:column="13"/></name></name></expr>)<pos:position pos:line="148" pos:column="14"/></condition><then pos:line="148" pos:column="14"> <block pos:line="148" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="149" pos:column="5">BIO_printf<pos:position pos:line="149" pos:column="15"/></name><argument_list pos:line="149" pos:column="15">(<argument><expr><name><name pos:line="149" pos:column="16">p<pos:position pos:line="149" pos:column="17"/></name><operator pos:line="149" pos:column="17">.<pos:position pos:line="149" pos:column="18"/></operator><name pos:line="149" pos:column="18">errorbio<pos:position pos:line="149" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="149" pos:column="28">"Cannot init curl lib\n"<pos:position pos:line="149" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="54"/></expr_stmt>
    <goto pos:line="150" pos:column="5">goto <name pos:line="150" pos:column="10">err<pos:position pos:line="150" pos:column="13"/></name>;<pos:position pos:line="150" pos:column="14"/></goto>
  }<pos:position pos:line="151" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="153" pos:column="3">p12bio<pos:position pos:line="153" pos:column="9"/></name> <operator pos:line="153" pos:column="10">=<pos:position pos:line="153" pos:column="11"/></operator> <call><name pos:line="153" pos:column="12">BIO_new_file<pos:position pos:line="153" pos:column="24"/></name><argument_list pos:line="153" pos:column="24">(<argument><expr><name><name pos:line="153" pos:column="25">p<pos:position pos:line="153" pos:column="26"/></name><operator pos:line="153" pos:column="26">.<pos:position pos:line="153" pos:column="27"/></operator><name pos:line="153" pos:column="27">p12file<pos:position pos:line="153" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="153" pos:column="36">"rb"<pos:position pos:line="153" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="42"/></expr_stmt>
  <if pos:line="154" pos:column="3">if<condition pos:line="154" pos:column="5">(<expr><operator pos:line="154" pos:column="6">!<pos:position pos:line="154" pos:column="7"/></operator><name pos:line="154" pos:column="7">p12bio<pos:position pos:line="154" pos:column="13"/></name></expr>)<pos:position pos:line="154" pos:column="14"/></condition><then pos:line="154" pos:column="14"> <block pos:line="154" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="155" pos:column="5">BIO_printf<pos:position pos:line="155" pos:column="15"/></name><argument_list pos:line="155" pos:column="15">(<argument><expr><name><name pos:line="155" pos:column="16">p<pos:position pos:line="155" pos:column="17"/></name><operator pos:line="155" pos:column="17">.<pos:position pos:line="155" pos:column="18"/></operator><name pos:line="155" pos:column="18">errorbio<pos:position pos:line="155" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="155" pos:column="28">"Error opening P12 file %s\n"<pos:position pos:line="155" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="155" pos:column="59">p<pos:position pos:line="155" pos:column="60"/></name><operator pos:line="155" pos:column="60">.<pos:position pos:line="155" pos:column="61"/></operator><name pos:line="155" pos:column="61">p12file<pos:position pos:line="155" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="155" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="70"/></expr_stmt>
    <goto pos:line="156" pos:column="5">goto <name pos:line="156" pos:column="10">err<pos:position pos:line="156" pos:column="13"/></name>;<pos:position pos:line="156" pos:column="14"/></goto>
  }<pos:position pos:line="157" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="158" pos:column="3">p<pos:position pos:line="158" pos:column="4"/></name><operator pos:line="158" pos:column="4">.<pos:position pos:line="158" pos:column="5"/></operator><name pos:line="158" pos:column="5">p12<pos:position pos:line="158" pos:column="8"/></name></name> <operator pos:line="158" pos:column="9">=<pos:position pos:line="158" pos:column="10"/></operator> <call><name pos:line="158" pos:column="11">d2i_PKCS12_bio<pos:position pos:line="158" pos:column="25"/></name><argument_list pos:line="158" pos:column="25">(<argument><expr><name pos:line="158" pos:column="26">p12bio<pos:position pos:line="158" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="34">NULL<pos:position pos:line="158" pos:column="38"/></name></expr></argument>)<pos:position pos:line="158" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="40"/></expr_stmt>
  <if pos:line="159" pos:column="3">if<condition pos:line="159" pos:column="5">(<expr><operator pos:line="159" pos:column="6">!<pos:position pos:line="159" pos:column="7"/></operator><name><name pos:line="159" pos:column="7">p<pos:position pos:line="159" pos:column="8"/></name><operator pos:line="159" pos:column="8">.<pos:position pos:line="159" pos:column="9"/></operator><name pos:line="159" pos:column="9">p12<pos:position pos:line="159" pos:column="12"/></name></name></expr>)<pos:position pos:line="159" pos:column="13"/></condition><then pos:line="159" pos:column="13"> <block pos:line="159" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="160" pos:column="5">BIO_printf<pos:position pos:line="160" pos:column="15"/></name><argument_list pos:line="160" pos:column="15">(<argument><expr><name><name pos:line="160" pos:column="16">p<pos:position pos:line="160" pos:column="17"/></name><operator pos:line="160" pos:column="17">.<pos:position pos:line="160" pos:column="18"/></operator><name pos:line="160" pos:column="18">errorbio<pos:position pos:line="160" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="160" pos:column="28">"Cannot decode P12 structure %s\n"<pos:position pos:line="160" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="160" pos:column="64">p<pos:position pos:line="160" pos:column="65"/></name><operator pos:line="160" pos:column="65">.<pos:position pos:line="160" pos:column="66"/></operator><name pos:line="160" pos:column="66">p12file<pos:position pos:line="160" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="160" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="75"/></expr_stmt>
    <goto pos:line="161" pos:column="5">goto <name pos:line="161" pos:column="10">err<pos:position pos:line="161" pos:column="13"/></name>;<pos:position pos:line="161" pos:column="14"/></goto>
  }<pos:position pos:line="162" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="164" pos:column="3">p<pos:position pos:line="164" pos:column="4"/></name><operator pos:line="164" pos:column="4">.<pos:position pos:line="164" pos:column="5"/></operator><name pos:line="164" pos:column="5">ca<pos:position pos:line="164" pos:column="7"/></name></name><operator pos:line="164" pos:column="7">=<pos:position pos:line="164" pos:column="8"/></operator> <name pos:line="164" pos:column="9">NULL<pos:position pos:line="164" pos:column="13"/></name></expr>;<pos:position pos:line="164" pos:column="14"/></expr_stmt>
  <if pos:line="165" pos:column="3">if<condition pos:line="165" pos:column="5">(<expr><operator pos:line="165" pos:column="6">!<pos:position pos:line="165" pos:column="7"/></operator><operator pos:line="165" pos:column="7">(<pos:position pos:line="165" pos:column="8"/></operator><call><name pos:line="165" pos:column="8">PKCS12_parse<pos:position pos:line="165" pos:column="20"/></name> <argument_list pos:line="165" pos:column="21">(<argument><expr><name><name pos:line="165" pos:column="22">p<pos:position pos:line="165" pos:column="23"/></name><operator pos:line="165" pos:column="23">.<pos:position pos:line="165" pos:column="24"/></operator><name pos:line="165" pos:column="24">p12<pos:position pos:line="165" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="165" pos:column="29">p<pos:position pos:line="165" pos:column="30"/></name><operator pos:line="165" pos:column="30">.<pos:position pos:line="165" pos:column="31"/></operator><name pos:line="165" pos:column="31">pst<pos:position pos:line="165" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="165" pos:column="36">&amp;<pos:position pos:line="165" pos:column="41"/></operator><operator pos:line="165" pos:column="37">(<pos:position pos:line="165" pos:column="38"/></operator><name><name pos:line="165" pos:column="38">p<pos:position pos:line="165" pos:column="39"/></name><operator pos:line="165" pos:column="39">.<pos:position pos:line="165" pos:column="40"/></operator><name pos:line="165" pos:column="40">pkey<pos:position pos:line="165" pos:column="44"/></name></name><operator pos:line="165" pos:column="44">)<pos:position pos:line="165" pos:column="45"/></operator></expr></argument>, <argument><expr><operator pos:line="165" pos:column="47">&amp;<pos:position pos:line="165" pos:column="52"/></operator><operator pos:line="165" pos:column="48">(<pos:position pos:line="165" pos:column="49"/></operator><name><name pos:line="165" pos:column="49">p<pos:position pos:line="165" pos:column="50"/></name><operator pos:line="165" pos:column="50">.<pos:position pos:line="165" pos:column="51"/></operator><name pos:line="165" pos:column="51">usercert<pos:position pos:line="165" pos:column="59"/></name></name><operator pos:line="165" pos:column="59">)<pos:position pos:line="165" pos:column="60"/></operator></expr></argument>, <argument><expr><operator pos:line="165" pos:column="62">&amp;<pos:position pos:line="165" pos:column="67"/></operator><operator pos:line="165" pos:column="63">(<pos:position pos:line="165" pos:column="64"/></operator><name><name pos:line="165" pos:column="64">p<pos:position pos:line="165" pos:column="65"/></name><operator pos:line="165" pos:column="65">.<pos:position pos:line="165" pos:column="66"/></operator><name pos:line="165" pos:column="66">ca<pos:position pos:line="165" pos:column="68"/></name></name><operator pos:line="165" pos:column="68">)<pos:position pos:line="165" pos:column="69"/></operator></expr></argument> )<pos:position pos:line="165" pos:column="71"/></argument_list></call> <operator pos:line="165" pos:column="72">)<pos:position pos:line="165" pos:column="73"/></operator></expr>)<pos:position pos:line="165" pos:column="74"/></condition><then pos:line="165" pos:column="74"> <block pos:line="165" pos:column="75">{
    <expr_stmt><expr><call><name pos:line="166" pos:column="5">BIO_printf<pos:position pos:line="166" pos:column="15"/></name><argument_list pos:line="166" pos:column="15">(<argument><expr><name><name pos:line="166" pos:column="16">p<pos:position pos:line="166" pos:column="17"/></name><operator pos:line="166" pos:column="17">.<pos:position pos:line="166" pos:column="18"/></operator><name pos:line="166" pos:column="18">errorbio<pos:position pos:line="166" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="28">"Invalid P12 structure in %s\n"<pos:position pos:line="166" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="61">p<pos:position pos:line="166" pos:column="62"/></name><operator pos:line="166" pos:column="62">.<pos:position pos:line="166" pos:column="63"/></operator><name pos:line="166" pos:column="63">p12file<pos:position pos:line="166" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="72"/></expr_stmt>
    <goto pos:line="167" pos:column="5">goto <name pos:line="167" pos:column="10">err<pos:position pos:line="167" pos:column="13"/></name>;<pos:position pos:line="167" pos:column="14"/></goto>
  }<pos:position pos:line="168" pos:column="4"/></block></then></if>

  <if pos:line="170" pos:column="3">if<condition pos:line="170" pos:column="5">(<expr><call><name pos:line="170" pos:column="6">sk_X509_num<pos:position pos:line="170" pos:column="17"/></name><argument_list pos:line="170" pos:column="17">(<argument><expr><name><name pos:line="170" pos:column="18">p<pos:position pos:line="170" pos:column="19"/></name><operator pos:line="170" pos:column="19">.<pos:position pos:line="170" pos:column="20"/></operator><name pos:line="170" pos:column="20">ca<pos:position pos:line="170" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="170" pos:column="23"/></argument_list></call> <operator pos:line="170" pos:column="24">&lt;=<pos:position pos:line="170" pos:column="29"/></operator> <literal type="number" pos:line="170" pos:column="27">0<pos:position pos:line="170" pos:column="28"/></literal></expr>)<pos:position pos:line="170" pos:column="29"/></condition><then pos:line="170" pos:column="29"> <block pos:line="170" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="171" pos:column="5">BIO_printf<pos:position pos:line="171" pos:column="15"/></name><argument_list pos:line="171" pos:column="15">(<argument><expr><name><name pos:line="171" pos:column="16">p<pos:position pos:line="171" pos:column="17"/></name><operator pos:line="171" pos:column="17">.<pos:position pos:line="171" pos:column="18"/></operator><name pos:line="171" pos:column="18">errorbio<pos:position pos:line="171" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="28">"No trustworthy CA given.%s\n"<pos:position pos:line="171" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="60">p<pos:position pos:line="171" pos:column="61"/></name><operator pos:line="171" pos:column="61">.<pos:position pos:line="171" pos:column="62"/></operator><name pos:line="171" pos:column="62">p12file<pos:position pos:line="171" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="171" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="71"/></expr_stmt>
    <goto pos:line="172" pos:column="5">goto <name pos:line="172" pos:column="10">err<pos:position pos:line="172" pos:column="13"/></name>;<pos:position pos:line="172" pos:column="14"/></goto>
  }<pos:position pos:line="173" pos:column="4"/></block></then></if>

  <if pos:line="175" pos:column="3">if<condition pos:line="175" pos:column="5">(<expr><name><name pos:line="175" pos:column="6">p<pos:position pos:line="175" pos:column="7"/></name><operator pos:line="175" pos:column="7">.<pos:position pos:line="175" pos:column="8"/></operator><name pos:line="175" pos:column="8">verbose<pos:position pos:line="175" pos:column="15"/></name></name> <operator pos:line="175" pos:column="16">&gt;<pos:position pos:line="175" pos:column="20"/></operator> <literal type="number" pos:line="175" pos:column="18">1<pos:position pos:line="175" pos:column="19"/></literal></expr>)<pos:position pos:line="175" pos:column="20"/></condition><then pos:line="175" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="176" pos:column="5">X509_print_ex<pos:position pos:line="176" pos:column="18"/></name><argument_list pos:line="176" pos:column="18">(<argument><expr><name><name pos:line="176" pos:column="19">p<pos:position pos:line="176" pos:column="20"/></name><operator pos:line="176" pos:column="20">.<pos:position pos:line="176" pos:column="21"/></operator><name pos:line="176" pos:column="21">errorbio<pos:position pos:line="176" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="31">p<pos:position pos:line="176" pos:column="32"/></name><operator pos:line="176" pos:column="32">.<pos:position pos:line="176" pos:column="33"/></operator><name pos:line="176" pos:column="33">usercert<pos:position pos:line="176" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="176" pos:column="43">0<pos:position pos:line="176" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="176" pos:column="46">0<pos:position pos:line="176" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="176" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="49"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="178" pos:column="3">/* determine URL to go */</comment>

  <if pos:line="180" pos:column="3">if<condition pos:line="180" pos:column="5">(<expr><name pos:line="180" pos:column="6">hostporturl<pos:position pos:line="180" pos:column="17"/></name></expr>)<pos:position pos:line="180" pos:column="18"/></condition><then pos:line="180" pos:column="18"> <block pos:line="180" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="181" pos:column="5">size_t<pos:position pos:line="181" pos:column="11"/></name></type> <name pos:line="181" pos:column="12">len<pos:position pos:line="181" pos:column="15"/></name> <init pos:line="181" pos:column="16">= <expr><call><name pos:line="181" pos:column="18">strlen<pos:position pos:line="181" pos:column="24"/></name><argument_list pos:line="181" pos:column="24">(<argument><expr><name pos:line="181" pos:column="25">hostporturl<pos:position pos:line="181" pos:column="36"/></name></expr></argument>)<pos:position pos:line="181" pos:column="37"/></argument_list></call> <operator pos:line="181" pos:column="38">+<pos:position pos:line="181" pos:column="39"/></operator> <literal type="number" pos:line="181" pos:column="40">9<pos:position pos:line="181" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="181" pos:column="42"/></decl_stmt>
    <expr_stmt><expr><name pos:line="182" pos:column="5">serverurl<pos:position pos:line="182" pos:column="14"/></name> <operator pos:line="182" pos:column="15">=<pos:position pos:line="182" pos:column="16"/></operator> <call><name pos:line="182" pos:column="17">malloc<pos:position pos:line="182" pos:column="23"/></name><argument_list pos:line="182" pos:column="23">(<argument><expr><name pos:line="182" pos:column="24">len<pos:position pos:line="182" pos:column="27"/></name></expr></argument>)<pos:position pos:line="182" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="183" pos:column="5">snprintf<pos:position pos:line="183" pos:column="13"/></name><argument_list pos:line="183" pos:column="13">(<argument><expr><name pos:line="183" pos:column="14">serverurl<pos:position pos:line="183" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="25">len<pos:position pos:line="183" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="183" pos:column="30">"https://%s"<pos:position pos:line="183" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="44">hostporturl<pos:position pos:line="183" pos:column="55"/></name></expr></argument>)<pos:position pos:line="183" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="184" pos:column="4"/></block></then>
  <elseif pos:line="185" pos:column="3">else <if pos:line="185" pos:column="8">if<condition pos:line="185" pos:column="10">(<expr><name><name pos:line="185" pos:column="11">p<pos:position pos:line="185" pos:column="12"/></name><operator pos:line="185" pos:column="12">.<pos:position pos:line="185" pos:column="13"/></operator><name pos:line="185" pos:column="13">accesstype<pos:position pos:line="185" pos:column="23"/></name></name> <operator pos:line="185" pos:column="24">!=<pos:position pos:line="185" pos:column="26"/></operator> <literal type="number" pos:line="185" pos:column="27">0<pos:position pos:line="185" pos:column="28"/></literal></expr>)<pos:position pos:line="185" pos:column="29"/></condition><then pos:line="185" pos:column="29"> <block pos:line="185" pos:column="30">{ <comment type="block" pos:line="185" pos:column="32">/* see whether we can find an AIA or SIA for a
                                  given access type */</comment>
    <expr_stmt><expr><name pos:line="187" pos:column="5">serverurl<pos:position pos:line="187" pos:column="14"/></name> <operator pos:line="187" pos:column="15">=<pos:position pos:line="187" pos:column="16"/></operator> <call><name pos:line="187" pos:column="17">my_get_ext<pos:position pos:line="187" pos:column="27"/></name><argument_list pos:line="187" pos:column="27">(<argument><expr><name><name pos:line="187" pos:column="28">p<pos:position pos:line="187" pos:column="29"/></name><operator pos:line="187" pos:column="29">.<pos:position pos:line="187" pos:column="30"/></operator><name pos:line="187" pos:column="30">usercert<pos:position pos:line="187" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="187" pos:column="40">p<pos:position pos:line="187" pos:column="41"/></name><operator pos:line="187" pos:column="41">.<pos:position pos:line="187" pos:column="42"/></operator><name pos:line="187" pos:column="42">accesstype<pos:position pos:line="187" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="54">NID_info_access<pos:position pos:line="187" pos:column="69"/></name></expr></argument>)<pos:position pos:line="187" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="71"/></expr_stmt>
    <if pos:line="188" pos:column="5">if<condition pos:line="188" pos:column="7">(<expr><operator pos:line="188" pos:column="8">!<pos:position pos:line="188" pos:column="9"/></operator><name pos:line="188" pos:column="9">serverurl<pos:position pos:line="188" pos:column="18"/></name></expr>)<pos:position pos:line="188" pos:column="19"/></condition><then pos:line="188" pos:column="19"> <block pos:line="188" pos:column="20">{
      <decl_stmt><decl><type><name pos:line="189" pos:column="7">int<pos:position pos:line="189" pos:column="10"/></name></type> <name pos:line="189" pos:column="11">j<pos:position pos:line="189" pos:column="12"/></name><init pos:line="189" pos:column="12">=<expr><literal type="number" pos:line="189" pos:column="13">0<pos:position pos:line="189" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="189" pos:column="15"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="190" pos:column="7">BIO_printf<pos:position pos:line="190" pos:column="17"/></name><argument_list pos:line="190" pos:column="17">(<argument><expr><name><name pos:line="190" pos:column="18">p<pos:position pos:line="190" pos:column="19"/></name><operator pos:line="190" pos:column="19">.<pos:position pos:line="190" pos:column="20"/></operator><name pos:line="190" pos:column="20">errorbio<pos:position pos:line="190" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="190" pos:column="30">"no service URL in user cert "<pos:position pos:line="190" pos:column="60"/></literal>
                 <literal type="string" pos:line="191" pos:column="18">"cherching in others certificats\n"<pos:position pos:line="191" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="55"/></expr_stmt>
      <for pos:line="192" pos:column="7">for<control pos:line="192" pos:column="10">(<init><expr><name pos:line="192" pos:column="11">j<pos:position pos:line="192" pos:column="12"/></name><operator pos:line="192" pos:column="12">=<pos:position pos:line="192" pos:column="13"/></operator><literal type="number" pos:line="192" pos:column="13">0<pos:position pos:line="192" pos:column="14"/></literal></expr>;<pos:position pos:line="192" pos:column="15"/></init> <condition><expr><name pos:line="192" pos:column="16">j<pos:position pos:line="192" pos:column="17"/></name><operator pos:line="192" pos:column="17">&lt;<pos:position pos:line="192" pos:column="21"/></operator><call><name pos:line="192" pos:column="18">sk_X509_num<pos:position pos:line="192" pos:column="29"/></name><argument_list pos:line="192" pos:column="29">(<argument><expr><name><name pos:line="192" pos:column="30">p<pos:position pos:line="192" pos:column="31"/></name><operator pos:line="192" pos:column="31">.<pos:position pos:line="192" pos:column="32"/></operator><name pos:line="192" pos:column="32">ca<pos:position pos:line="192" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="192" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="36"/></condition> <incr><expr><name pos:line="192" pos:column="37">j<pos:position pos:line="192" pos:column="38"/></name><operator pos:line="192" pos:column="38">++<pos:position pos:line="192" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="192" pos:column="41"/></control> <block pos:line="192" pos:column="42">{
        <expr_stmt><expr><name pos:line="193" pos:column="9">serverurl<pos:position pos:line="193" pos:column="18"/></name> <operator pos:line="193" pos:column="19">=<pos:position pos:line="193" pos:column="20"/></operator> <call><name pos:line="193" pos:column="21">my_get_ext<pos:position pos:line="193" pos:column="31"/></name><argument_list pos:line="193" pos:column="31">(<argument><expr><call><name pos:line="193" pos:column="32">sk_X509_value<pos:position pos:line="193" pos:column="45"/></name><argument_list pos:line="193" pos:column="45">(<argument><expr><name><name pos:line="193" pos:column="46">p<pos:position pos:line="193" pos:column="47"/></name><operator pos:line="193" pos:column="47">.<pos:position pos:line="193" pos:column="48"/></operator><name pos:line="193" pos:column="48">ca<pos:position pos:line="193" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="52">j<pos:position pos:line="193" pos:column="53"/></name></expr></argument>)<pos:position pos:line="193" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="193" pos:column="56">p<pos:position pos:line="193" pos:column="57"/></name><operator pos:line="193" pos:column="57">.<pos:position pos:line="193" pos:column="58"/></operator><name pos:line="193" pos:column="58">accesstype<pos:position pos:line="193" pos:column="68"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="194" pos:column="32">NID_info_access<pos:position pos:line="194" pos:column="47"/></name></expr></argument>)<pos:position pos:line="194" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="49"/></expr_stmt>
        <if pos:line="195" pos:column="9">if<condition pos:line="195" pos:column="11">(<expr><name pos:line="195" pos:column="12">serverurl<pos:position pos:line="195" pos:column="21"/></name></expr>)<pos:position pos:line="195" pos:column="22"/></condition><then pos:line="195" pos:column="22">
          <block type="pseudo"><break pos:line="196" pos:column="11">break;<pos:position pos:line="196" pos:column="17"/></break></block></then></if>
        <expr_stmt><expr><name pos:line="197" pos:column="9">serverurl<pos:position pos:line="197" pos:column="18"/></name> <operator pos:line="197" pos:column="19">=<pos:position pos:line="197" pos:column="20"/></operator> <call><name pos:line="197" pos:column="21">my_get_ext<pos:position pos:line="197" pos:column="31"/></name><argument_list pos:line="197" pos:column="31">(<argument><expr><call><name pos:line="197" pos:column="32">sk_X509_value<pos:position pos:line="197" pos:column="45"/></name><argument_list pos:line="197" pos:column="45">(<argument><expr><name><name pos:line="197" pos:column="46">p<pos:position pos:line="197" pos:column="47"/></name><operator pos:line="197" pos:column="47">.<pos:position pos:line="197" pos:column="48"/></operator><name pos:line="197" pos:column="48">ca<pos:position pos:line="197" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="52">j<pos:position pos:line="197" pos:column="53"/></name></expr></argument>)<pos:position pos:line="197" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="56">p<pos:position pos:line="197" pos:column="57"/></name><operator pos:line="197" pos:column="57">.<pos:position pos:line="197" pos:column="58"/></operator><name pos:line="197" pos:column="58">accesstype<pos:position pos:line="197" pos:column="68"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="198" pos:column="32">NID_sinfo_access<pos:position pos:line="198" pos:column="48"/></name></expr></argument>)<pos:position pos:line="198" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="50"/></expr_stmt>
        <if pos:line="199" pos:column="9">if<condition pos:line="199" pos:column="11">(<expr><name pos:line="199" pos:column="12">serverurl<pos:position pos:line="199" pos:column="21"/></name></expr>)<pos:position pos:line="199" pos:column="22"/></condition><then pos:line="199" pos:column="22">
          <block type="pseudo"><break pos:line="200" pos:column="11">break;<pos:position pos:line="200" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="201" pos:column="8"/></block></for>
    }<pos:position pos:line="202" pos:column="6"/></block></then></if>
  }<pos:position pos:line="203" pos:column="4"/></block></then></if></elseif></if>

  <if pos:line="205" pos:column="3">if<condition pos:line="205" pos:column="5">(<expr><operator pos:line="205" pos:column="6">!<pos:position pos:line="205" pos:column="7"/></operator><name pos:line="205" pos:column="7">serverurl<pos:position pos:line="205" pos:column="16"/></name></expr>)<pos:position pos:line="205" pos:column="17"/></condition><then pos:line="205" pos:column="17"> <block pos:line="205" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="206" pos:column="5">BIO_printf<pos:position pos:line="206" pos:column="15"/></name><argument_list pos:line="206" pos:column="15">(<argument><expr><name><name pos:line="206" pos:column="16">p<pos:position pos:line="206" pos:column="17"/></name><operator pos:line="206" pos:column="17">.<pos:position pos:line="206" pos:column="18"/></operator><name pos:line="206" pos:column="18">errorbio<pos:position pos:line="206" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="206" pos:column="28">"no service URL in certificats,"<pos:position pos:line="206" pos:column="60"/></literal>
               <literal type="string" pos:line="207" pos:column="16">" check '-accesstype (AD_DVCS | ad_timestamping)'"<pos:position pos:line="207" pos:column="66"/></literal>
               <literal type="string" pos:line="208" pos:column="16">" or use '-connect'\n"<pos:position pos:line="208" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="40"/></expr_stmt>
    <goto pos:line="209" pos:column="5">goto <name pos:line="209" pos:column="10">err<pos:position pos:line="209" pos:column="13"/></name>;<pos:position pos:line="209" pos:column="14"/></goto>
  }<pos:position pos:line="210" pos:column="4"/></block></then></if>

  <if pos:line="212" pos:column="3">if<condition pos:line="212" pos:column="5">(<expr><name><name pos:line="212" pos:column="6">p<pos:position pos:line="212" pos:column="7"/></name><operator pos:line="212" pos:column="7">.<pos:position pos:line="212" pos:column="8"/></operator><name pos:line="212" pos:column="8">verbose<pos:position pos:line="212" pos:column="15"/></name></name></expr>)<pos:position pos:line="212" pos:column="16"/></condition><then pos:line="212" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="213" pos:column="5">BIO_printf<pos:position pos:line="213" pos:column="15"/></name><argument_list pos:line="213" pos:column="15">(<argument><expr><name><name pos:line="213" pos:column="16">p<pos:position pos:line="213" pos:column="17"/></name><operator pos:line="213" pos:column="17">.<pos:position pos:line="213" pos:column="18"/></operator><name pos:line="213" pos:column="18">errorbio<pos:position pos:line="213" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="213" pos:column="28">"Service URL: &lt;%s&gt;\n"<pos:position pos:line="213" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="213" pos:column="51">serverurl<pos:position pos:line="213" pos:column="60"/></name></expr></argument>)<pos:position pos:line="213" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="62"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="215" pos:column="3">curl_easy_setopt<pos:position pos:line="215" pos:column="19"/></name><argument_list pos:line="215" pos:column="19">(<argument><expr><name><name pos:line="215" pos:column="20">p<pos:position pos:line="215" pos:column="21"/></name><operator pos:line="215" pos:column="21">.<pos:position pos:line="215" pos:column="22"/></operator><name pos:line="215" pos:column="22">curl<pos:position pos:line="215" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="28">CURLOPT_URL<pos:position pos:line="215" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="41">serverurl<pos:position pos:line="215" pos:column="50"/></name></expr></argument>)<pos:position pos:line="215" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="52"/></expr_stmt>

  <comment type="block" pos:line="217" pos:column="3">/* Now specify the POST binary data */</comment>

  <expr_stmt><expr><call><name pos:line="219" pos:column="3">curl_easy_setopt<pos:position pos:line="219" pos:column="19"/></name><argument_list pos:line="219" pos:column="19">(<argument><expr><name><name pos:line="219" pos:column="20">p<pos:position pos:line="219" pos:column="21"/></name><operator pos:line="219" pos:column="21">.<pos:position pos:line="219" pos:column="22"/></operator><name pos:line="219" pos:column="22">curl<pos:position pos:line="219" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="28">CURLOPT_POSTFIELDS<pos:position pos:line="219" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="48">binaryptr<pos:position pos:line="219" pos:column="57"/></name></expr></argument>)<pos:position pos:line="219" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="220" pos:column="3">curl_easy_setopt<pos:position pos:line="220" pos:column="19"/></name><argument_list pos:line="220" pos:column="19">(<argument><expr><name><name pos:line="220" pos:column="20">p<pos:position pos:line="220" pos:column="21"/></name><operator pos:line="220" pos:column="21">.<pos:position pos:line="220" pos:column="22"/></operator><name pos:line="220" pos:column="22">curl<pos:position pos:line="220" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="28">CURLOPT_POSTFIELDSIZE<pos:position pos:line="220" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="220" pos:column="51">(<pos:position pos:line="220" pos:column="52"/></operator><name pos:line="220" pos:column="52">long<pos:position pos:line="220" pos:column="56"/></name><operator pos:line="220" pos:column="56">)<pos:position pos:line="220" pos:column="57"/></operator><name pos:line="220" pos:column="57">tabLength<pos:position pos:line="220" pos:column="66"/></name></expr></argument>)<pos:position pos:line="220" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="68"/></expr_stmt>

  <comment type="block" pos:line="222" pos:column="3">/* pass our list of custom made headers */</comment>

  <expr_stmt><expr><name pos:line="224" pos:column="3">contenttype<pos:position pos:line="224" pos:column="14"/></name> <operator pos:line="224" pos:column="15">=<pos:position pos:line="224" pos:column="16"/></operator> <call><name pos:line="224" pos:column="17">malloc<pos:position pos:line="224" pos:column="23"/></name><argument_list pos:line="224" pos:column="23">(<argument><expr><literal type="number" pos:line="224" pos:column="24">15<pos:position pos:line="224" pos:column="26"/></literal><operator pos:line="224" pos:column="26">+<pos:position pos:line="224" pos:column="27"/></operator><call><name pos:line="224" pos:column="27">strlen<pos:position pos:line="224" pos:column="33"/></name><argument_list pos:line="224" pos:column="33">(<argument><expr><name pos:line="224" pos:column="34">mimetype<pos:position pos:line="224" pos:column="42"/></name></expr></argument>)<pos:position pos:line="224" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="224" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="225" pos:column="3">snprintf<pos:position pos:line="225" pos:column="11"/></name><argument_list pos:line="225" pos:column="11">(<argument><expr><name pos:line="225" pos:column="12">contenttype<pos:position pos:line="225" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="225" pos:column="25">15<pos:position pos:line="225" pos:column="27"/></literal><operator pos:line="225" pos:column="27">+<pos:position pos:line="225" pos:column="28"/></operator><call><name pos:line="225" pos:column="28">strlen<pos:position pos:line="225" pos:column="34"/></name><argument_list pos:line="225" pos:column="34">(<argument><expr><name pos:line="225" pos:column="35">mimetype<pos:position pos:line="225" pos:column="43"/></name></expr></argument>)<pos:position pos:line="225" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="225" pos:column="46">"Content-type: %s"<pos:position pos:line="225" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="225" pos:column="66">mimetype<pos:position pos:line="225" pos:column="74"/></name></expr></argument>)<pos:position pos:line="225" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="76"/></expr_stmt>
  <expr_stmt><expr><name pos:line="226" pos:column="3">headers<pos:position pos:line="226" pos:column="10"/></name> <operator pos:line="226" pos:column="11">=<pos:position pos:line="226" pos:column="12"/></operator> <call><name pos:line="226" pos:column="13">curl_slist_append<pos:position pos:line="226" pos:column="30"/></name><argument_list pos:line="226" pos:column="30">(<argument><expr><name pos:line="226" pos:column="31">headers<pos:position pos:line="226" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="40">contenttype<pos:position pos:line="226" pos:column="51"/></name></expr></argument>)<pos:position pos:line="226" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="227" pos:column="3">curl_easy_setopt<pos:position pos:line="227" pos:column="19"/></name><argument_list pos:line="227" pos:column="19">(<argument><expr><name><name pos:line="227" pos:column="20">p<pos:position pos:line="227" pos:column="21"/></name><operator pos:line="227" pos:column="21">.<pos:position pos:line="227" pos:column="22"/></operator><name pos:line="227" pos:column="22">curl<pos:position pos:line="227" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="28">CURLOPT_HTTPHEADER<pos:position pos:line="227" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="48">headers<pos:position pos:line="227" pos:column="55"/></name></expr></argument>)<pos:position pos:line="227" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="57"/></expr_stmt>

  <if pos:line="229" pos:column="3">if<condition pos:line="229" pos:column="5">(<expr><name><name pos:line="229" pos:column="6">p<pos:position pos:line="229" pos:column="7"/></name><operator pos:line="229" pos:column="7">.<pos:position pos:line="229" pos:column="8"/></operator><name pos:line="229" pos:column="8">verbose<pos:position pos:line="229" pos:column="15"/></name></name></expr>)<pos:position pos:line="229" pos:column="16"/></condition><then pos:line="229" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="230" pos:column="5">BIO_printf<pos:position pos:line="230" pos:column="15"/></name><argument_list pos:line="230" pos:column="15">(<argument><expr><name><name pos:line="230" pos:column="16">p<pos:position pos:line="230" pos:column="17"/></name><operator pos:line="230" pos:column="17">.<pos:position pos:line="230" pos:column="18"/></operator><name pos:line="230" pos:column="18">errorbio<pos:position pos:line="230" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="230" pos:column="28">"Service URL: &lt;%s&gt;\n"<pos:position pos:line="230" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="51">serverurl<pos:position pos:line="230" pos:column="60"/></name></expr></argument>)<pos:position pos:line="230" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="62"/></expr_stmt></block></then></if>

  <block pos:line="232" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="233" pos:column="5">FILE<pos:position pos:line="233" pos:column="9"/></name> <modifier pos:line="233" pos:column="10">*<pos:position pos:line="233" pos:column="11"/></modifier></type><name pos:line="233" pos:column="11">outfp<pos:position pos:line="233" pos:column="16"/></name></decl>;<pos:position pos:line="233" pos:column="17"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="234" pos:column="5">BIO_get_fp<pos:position pos:line="234" pos:column="15"/></name><argument_list pos:line="234" pos:column="15">(<argument><expr><name pos:line="234" pos:column="16">out<pos:position pos:line="234" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="234" pos:column="21">&amp;<pos:position pos:line="234" pos:column="26"/></operator><name pos:line="234" pos:column="22">outfp<pos:position pos:line="234" pos:column="27"/></name></expr></argument>)<pos:position pos:line="234" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="235" pos:column="5">curl_easy_setopt<pos:position pos:line="235" pos:column="21"/></name><argument_list pos:line="235" pos:column="21">(<argument><expr><name><name pos:line="235" pos:column="22">p<pos:position pos:line="235" pos:column="23"/></name><operator pos:line="235" pos:column="23">.<pos:position pos:line="235" pos:column="24"/></operator><name pos:line="235" pos:column="24">curl<pos:position pos:line="235" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="235" pos:column="30">CURLOPT_WRITEDATA<pos:position pos:line="235" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="235" pos:column="49">outfp<pos:position pos:line="235" pos:column="54"/></name></expr></argument>)<pos:position pos:line="235" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="236" pos:column="4"/></block>

  <expr_stmt><expr><name pos:line="238" pos:column="3">res<pos:position pos:line="238" pos:column="6"/></name> <operator pos:line="238" pos:column="7">=<pos:position pos:line="238" pos:column="8"/></operator> <call><name pos:line="238" pos:column="9">curl_easy_setopt<pos:position pos:line="238" pos:column="25"/></name><argument_list pos:line="238" pos:column="25">(<argument><expr><name><name pos:line="238" pos:column="26">p<pos:position pos:line="238" pos:column="27"/></name><operator pos:line="238" pos:column="27">.<pos:position pos:line="238" pos:column="28"/></operator><name pos:line="238" pos:column="28">curl<pos:position pos:line="238" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="34">CURLOPT_SSL_CTX_FUNCTION<pos:position pos:line="238" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="60">sslctxfun<pos:position pos:line="238" pos:column="69"/></name></expr></argument>)<pos:position pos:line="238" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="71"/></expr_stmt>

  <if pos:line="240" pos:column="3">if<condition pos:line="240" pos:column="5">(<expr><name pos:line="240" pos:column="6">res<pos:position pos:line="240" pos:column="9"/></name> <operator pos:line="240" pos:column="10">!=<pos:position pos:line="240" pos:column="12"/></operator> <name pos:line="240" pos:column="13">CURLE_OK<pos:position pos:line="240" pos:column="21"/></name></expr>)<pos:position pos:line="240" pos:column="22"/></condition><then pos:line="240" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="241" pos:column="5">BIO_printf<pos:position pos:line="241" pos:column="15"/></name><argument_list pos:line="241" pos:column="15">(<argument><expr><name><name pos:line="241" pos:column="16">p<pos:position pos:line="241" pos:column="17"/></name><operator pos:line="241" pos:column="17">.<pos:position pos:line="241" pos:column="18"/></operator><name pos:line="241" pos:column="18">errorbio<pos:position pos:line="241" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="241" pos:column="28">"%d %s=%d %d\n"<pos:position pos:line="241" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="241" pos:column="45">__LINE__<pos:position pos:line="241" pos:column="53"/></name></expr></argument>,
               <argument><expr><literal type="string" pos:line="242" pos:column="16">"CURLOPT_SSL_CTX_FUNCTION"<pos:position pos:line="242" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="242" pos:column="44">CURLOPT_SSL_CTX_FUNCTION<pos:position pos:line="242" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="242" pos:column="70">res<pos:position pos:line="242" pos:column="73"/></name></expr></argument>)<pos:position pos:line="242" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="75"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="244" pos:column="3">curl_easy_setopt<pos:position pos:line="244" pos:column="19"/></name><argument_list pos:line="244" pos:column="19">(<argument><expr><name><name pos:line="244" pos:column="20">p<pos:position pos:line="244" pos:column="21"/></name><operator pos:line="244" pos:column="21">.<pos:position pos:line="244" pos:column="22"/></operator><name pos:line="244" pos:column="22">curl<pos:position pos:line="244" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="244" pos:column="28">CURLOPT_SSL_CTX_DATA<pos:position pos:line="244" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="244" pos:column="50">&amp;<pos:position pos:line="244" pos:column="55"/></operator><name pos:line="244" pos:column="51">p<pos:position pos:line="244" pos:column="52"/></name></expr></argument>)<pos:position pos:line="244" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="54"/></expr_stmt>

  <block pos:line="246" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="247" pos:column="5">int<pos:position pos:line="247" pos:column="8"/></name></type> <name pos:line="247" pos:column="9">lu<pos:position pos:line="247" pos:column="11"/></name></decl>;<pos:position pos:line="247" pos:column="12"/></decl_stmt> <decl_stmt><decl><type><name pos:line="247" pos:column="13">int<pos:position pos:line="247" pos:column="16"/></name></type> <name pos:line="247" pos:column="17">i<pos:position pos:line="247" pos:column="18"/></name><init pos:line="247" pos:column="18">=<expr><literal type="number" pos:line="247" pos:column="19">0<pos:position pos:line="247" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="247" pos:column="21"/></decl_stmt>
    <while pos:line="248" pos:column="5">while<condition pos:line="248" pos:column="10">(<expr><operator pos:line="248" pos:column="11">(<pos:position pos:line="248" pos:column="12"/></operator><name pos:line="248" pos:column="12">lu<pos:position pos:line="248" pos:column="14"/></name> <operator pos:line="248" pos:column="15">=<pos:position pos:line="248" pos:column="16"/></operator> <call><name pos:line="248" pos:column="17">BIO_read<pos:position pos:line="248" pos:column="25"/></name><argument_list pos:line="248" pos:column="25">(<argument><expr><name pos:line="248" pos:column="26">in<pos:position pos:line="248" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="248" pos:column="30">&amp;<pos:position pos:line="248" pos:column="35"/></operator><name><name pos:line="248" pos:column="31">binaryptr<pos:position pos:line="248" pos:column="40"/></name><index pos:line="248" pos:column="40">[<expr><name pos:line="248" pos:column="41">i<pos:position pos:line="248" pos:column="42"/></name></expr>]<pos:position pos:line="248" pos:column="43"/></index></name></expr></argument>, <argument><expr><name pos:line="248" pos:column="45">tabLength<pos:position pos:line="248" pos:column="54"/></name><operator pos:line="248" pos:column="54">-<pos:position pos:line="248" pos:column="55"/></operator><name pos:line="248" pos:column="55">i<pos:position pos:line="248" pos:column="56"/></name></expr></argument>)<pos:position pos:line="248" pos:column="57"/></argument_list></call><operator pos:line="248" pos:column="57">)<pos:position pos:line="248" pos:column="58"/></operator> <operator pos:line="248" pos:column="59">&gt;<pos:position pos:line="248" pos:column="63"/></operator><literal type="number" pos:line="248" pos:column="60">0<pos:position pos:line="248" pos:column="61"/></literal></expr>)<pos:position pos:line="248" pos:column="62"/></condition> <block pos:line="248" pos:column="63">{
      <expr_stmt><expr><name pos:line="249" pos:column="7">i<pos:position pos:line="249" pos:column="8"/></name><operator pos:line="249" pos:column="8">+=<pos:position pos:line="249" pos:column="10"/></operator><name pos:line="249" pos:column="10">lu<pos:position pos:line="249" pos:column="12"/></name></expr>;<pos:position pos:line="249" pos:column="13"/></expr_stmt>
      <if pos:line="250" pos:column="7">if<condition pos:line="250" pos:column="9">(<expr><name pos:line="250" pos:column="10">i<pos:position pos:line="250" pos:column="11"/></name><operator pos:line="250" pos:column="11">==<pos:position pos:line="250" pos:column="13"/></operator> <name pos:line="250" pos:column="14">tabLength<pos:position pos:line="250" pos:column="23"/></name></expr>)<pos:position pos:line="250" pos:column="24"/></condition><then pos:line="250" pos:column="24"> <block pos:line="250" pos:column="25">{
        <expr_stmt><expr><name pos:line="251" pos:column="9">tabLength<pos:position pos:line="251" pos:column="18"/></name><operator pos:line="251" pos:column="18">+=<pos:position pos:line="251" pos:column="20"/></operator><literal type="number" pos:line="251" pos:column="20">100<pos:position pos:line="251" pos:column="23"/></literal></expr>;<pos:position pos:line="251" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="252" pos:column="9">binaryptr<pos:position pos:line="252" pos:column="18"/></name><operator pos:line="252" pos:column="18">=<pos:position pos:line="252" pos:column="19"/></operator><call><name pos:line="252" pos:column="19">realloc<pos:position pos:line="252" pos:column="26"/></name><argument_list pos:line="252" pos:column="26">(<argument><expr><name pos:line="252" pos:column="27">binaryptr<pos:position pos:line="252" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="38">tabLength<pos:position pos:line="252" pos:column="47"/></name></expr></argument>)<pos:position pos:line="252" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="49"/></expr_stmt> <comment type="block" pos:line="252" pos:column="50">/* should be more careful */</comment>
      }<pos:position pos:line="253" pos:column="8"/></block></then></if>
    }<pos:position pos:line="254" pos:column="6"/></block></while>
    <expr_stmt><expr><name pos:line="255" pos:column="5">tabLength<pos:position pos:line="255" pos:column="14"/></name> <operator pos:line="255" pos:column="15">=<pos:position pos:line="255" pos:column="16"/></operator> <name pos:line="255" pos:column="17">i<pos:position pos:line="255" pos:column="18"/></name></expr>;<pos:position pos:line="255" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="256" pos:column="4"/></block>
  <comment type="block" pos:line="257" pos:column="3">/* Now specify the POST binary data */</comment>

  <expr_stmt><expr><call><name pos:line="259" pos:column="3">curl_easy_setopt<pos:position pos:line="259" pos:column="19"/></name><argument_list pos:line="259" pos:column="19">(<argument><expr><name><name pos:line="259" pos:column="20">p<pos:position pos:line="259" pos:column="21"/></name><operator pos:line="259" pos:column="21">.<pos:position pos:line="259" pos:column="22"/></operator><name pos:line="259" pos:column="22">curl<pos:position pos:line="259" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="259" pos:column="28">CURLOPT_POSTFIELDS<pos:position pos:line="259" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="259" pos:column="48">binaryptr<pos:position pos:line="259" pos:column="57"/></name></expr></argument>)<pos:position pos:line="259" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="260" pos:column="3">curl_easy_setopt<pos:position pos:line="260" pos:column="19"/></name><argument_list pos:line="260" pos:column="19">(<argument><expr><name><name pos:line="260" pos:column="20">p<pos:position pos:line="260" pos:column="21"/></name><operator pos:line="260" pos:column="21">.<pos:position pos:line="260" pos:column="22"/></operator><name pos:line="260" pos:column="22">curl<pos:position pos:line="260" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="260" pos:column="28">CURLOPT_POSTFIELDSIZE<pos:position pos:line="260" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="260" pos:column="51">(<pos:position pos:line="260" pos:column="52"/></operator><name pos:line="260" pos:column="52">long<pos:position pos:line="260" pos:column="56"/></name><operator pos:line="260" pos:column="56">)<pos:position pos:line="260" pos:column="57"/></operator><name pos:line="260" pos:column="57">tabLength<pos:position pos:line="260" pos:column="66"/></name></expr></argument>)<pos:position pos:line="260" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="68"/></expr_stmt>


  <comment type="block" pos:line="263" pos:column="3">/* Perform the request, res will get the return code */</comment>

  <expr_stmt><expr><call><name pos:line="265" pos:column="3">BIO_printf<pos:position pos:line="265" pos:column="13"/></name><argument_list pos:line="265" pos:column="13">(<argument><expr><name><name pos:line="265" pos:column="14">p<pos:position pos:line="265" pos:column="15"/></name><operator pos:line="265" pos:column="15">.<pos:position pos:line="265" pos:column="16"/></operator><name pos:line="265" pos:column="16">errorbio<pos:position pos:line="265" pos:column="24"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="265" pos:column="26">"%d %s %d\n"<pos:position pos:line="265" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="265" pos:column="40">__LINE__<pos:position pos:line="265" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="265" pos:column="50">"curl_easy_perform"<pos:position pos:line="265" pos:column="69"/></literal></expr></argument>,
             <argument><expr><name pos:line="266" pos:column="14">res<pos:position pos:line="266" pos:column="17"/></name> <operator pos:line="266" pos:column="18">=<pos:position pos:line="266" pos:column="19"/></operator> <call><name pos:line="266" pos:column="20">curl_easy_perform<pos:position pos:line="266" pos:column="37"/></name><argument_list pos:line="266" pos:column="37">(<argument><expr><name><name pos:line="266" pos:column="38">p<pos:position pos:line="266" pos:column="39"/></name><operator pos:line="266" pos:column="39">.<pos:position pos:line="266" pos:column="40"/></operator><name pos:line="266" pos:column="40">curl<pos:position pos:line="266" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="266" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="266" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="266" pos:column="47"/></expr_stmt>
  <block pos:line="267" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="268" pos:column="5">int<pos:position pos:line="268" pos:column="8"/></name></type> <name pos:line="268" pos:column="9">result<pos:position pos:line="268" pos:column="15"/></name> <init pos:line="268" pos:column="16">=<expr><call><name pos:line="268" pos:column="17">curl_easy_getinfo<pos:position pos:line="268" pos:column="34"/></name><argument_list pos:line="268" pos:column="34">(<argument><expr><name><name pos:line="268" pos:column="35">p<pos:position pos:line="268" pos:column="36"/></name><operator pos:line="268" pos:column="36">.<pos:position pos:line="268" pos:column="37"/></operator><name pos:line="268" pos:column="37">curl<pos:position pos:line="268" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="268" pos:column="43">CURLINFO_CONTENT_TYPE<pos:position pos:line="268" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="268" pos:column="66">&amp;<pos:position pos:line="268" pos:column="71"/></operator><name pos:line="268" pos:column="67">response<pos:position pos:line="268" pos:column="75"/></name></expr></argument>)<pos:position pos:line="268" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="268" pos:column="77"/></decl_stmt>
    <if pos:line="269" pos:column="5">if<condition pos:line="269" pos:column="7">(<expr><name pos:line="269" pos:column="8">mimetypeaccept<pos:position pos:line="269" pos:column="22"/></name> <operator pos:line="269" pos:column="23">&amp;&amp;<pos:position pos:line="269" pos:column="33"/></operator> <name><name pos:line="269" pos:column="26">p<pos:position pos:line="269" pos:column="27"/></name><operator pos:line="269" pos:column="27">.<pos:position pos:line="269" pos:column="28"/></operator><name pos:line="269" pos:column="28">verbose<pos:position pos:line="269" pos:column="35"/></name></name></expr>)<pos:position pos:line="269" pos:column="36"/></condition><then pos:line="269" pos:column="36">
      <block type="pseudo"><if pos:line="270" pos:column="7">if<condition pos:line="270" pos:column="9">(<expr><operator pos:line="270" pos:column="10">!<pos:position pos:line="270" pos:column="11"/></operator><call><name pos:line="270" pos:column="11">strcmp<pos:position pos:line="270" pos:column="17"/></name><argument_list pos:line="270" pos:column="17">(<argument><expr><name pos:line="270" pos:column="18">mimetypeaccept<pos:position pos:line="270" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="34">response<pos:position pos:line="270" pos:column="42"/></name></expr></argument>)<pos:position pos:line="270" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="270" pos:column="44"/></condition><then pos:line="270" pos:column="44">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="271" pos:column="9">BIO_printf<pos:position pos:line="271" pos:column="19"/></name><argument_list pos:line="271" pos:column="19">(<argument><expr><name><name pos:line="271" pos:column="20">p<pos:position pos:line="271" pos:column="21"/></name><operator pos:line="271" pos:column="21">.<pos:position pos:line="271" pos:column="22"/></operator><name pos:line="271" pos:column="22">errorbio<pos:position pos:line="271" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="271" pos:column="32">"the response has a correct mimetype : %s\n"<pos:position pos:line="271" pos:column="76"/></literal></expr></argument>,
                   <argument><expr><name pos:line="272" pos:column="20">response<pos:position pos:line="272" pos:column="28"/></name></expr></argument>)<pos:position pos:line="272" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="30"/></expr_stmt></block></then>
      <else pos:line="273" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="274" pos:column="9">BIO_printf<pos:position pos:line="274" pos:column="19"/></name><argument_list pos:line="274" pos:column="19">(<argument><expr><name><name pos:line="274" pos:column="20">p<pos:position pos:line="274" pos:column="21"/></name><operator pos:line="274" pos:column="21">.<pos:position pos:line="274" pos:column="22"/></operator><name pos:line="274" pos:column="22">errorbio<pos:position pos:line="274" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="274" pos:column="32">"the response doesn\'t have an acceptable "<pos:position pos:line="274" pos:column="75"/></literal>
                   <literal type="string" pos:line="275" pos:column="20">"mime type, it is %s instead of %s\n"<pos:position pos:line="275" pos:column="57"/></literal></expr></argument>,
                   <argument><expr><name pos:line="276" pos:column="20">response<pos:position pos:line="276" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="276" pos:column="30">mimetypeaccept<pos:position pos:line="276" pos:column="44"/></name></expr></argument>)<pos:position pos:line="276" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="46"/></expr_stmt></block></else></if></block></then></if>
  }<pos:position pos:line="277" pos:column="4"/></block>

  <comment type="block" format="doxygen" pos:line="279" pos:column="3">/*** code d'erreur si accept mime ***, egalement code return HTTP != 200 ***/</comment>

<comment type="block" pos:line="281" pos:column="1">/* free the header list*/</comment>

  <expr_stmt><expr><call><name pos:line="283" pos:column="3">curl_slist_free_all<pos:position pos:line="283" pos:column="22"/></name><argument_list pos:line="283" pos:column="22">(<argument><expr><name pos:line="283" pos:column="23">headers<pos:position pos:line="283" pos:column="30"/></name></expr></argument>)<pos:position pos:line="283" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="32"/></expr_stmt>

  <comment type="block" pos:line="285" pos:column="3">/* always cleanup */</comment>
  <expr_stmt><expr><call><name pos:line="286" pos:column="3">curl_easy_cleanup<pos:position pos:line="286" pos:column="20"/></name><argument_list pos:line="286" pos:column="20">(<argument><expr><name><name pos:line="286" pos:column="21">p<pos:position pos:line="286" pos:column="22"/></name><operator pos:line="286" pos:column="22">.<pos:position pos:line="286" pos:column="23"/></operator><name pos:line="286" pos:column="23">curl<pos:position pos:line="286" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="286" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="288" pos:column="3">BIO_free<pos:position pos:line="288" pos:column="11"/></name><argument_list pos:line="288" pos:column="11">(<argument><expr><name pos:line="288" pos:column="12">in<pos:position pos:line="288" pos:column="14"/></name></expr></argument>)<pos:position pos:line="288" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="289" pos:column="3">BIO_free<pos:position pos:line="289" pos:column="11"/></name><argument_list pos:line="289" pos:column="11">(<argument><expr><name pos:line="289" pos:column="12">out<pos:position pos:line="289" pos:column="15"/></name></expr></argument>)<pos:position pos:line="289" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="17"/></expr_stmt>
  <return pos:line="290" pos:column="3">return <expr><operator pos:line="290" pos:column="10">(<pos:position pos:line="290" pos:column="11"/></operator><name pos:line="290" pos:column="11">EXIT_SUCCESS<pos:position pos:line="290" pos:column="23"/></name><operator pos:line="290" pos:column="23">)<pos:position pos:line="290" pos:column="24"/></operator></expr>;<pos:position pos:line="290" pos:column="25"/></return>

  <label><name pos:line="292" pos:column="3">err<pos:position pos:line="292" pos:column="6"/></name>:<pos:position pos:line="292" pos:column="7"/></label> <expr_stmt><expr><call><name pos:line="292" pos:column="8">BIO_printf<pos:position pos:line="292" pos:column="18"/></name><argument_list pos:line="292" pos:column="18">(<argument><expr><name><name pos:line="292" pos:column="19">p<pos:position pos:line="292" pos:column="20"/></name><operator pos:line="292" pos:column="20">.<pos:position pos:line="292" pos:column="21"/></operator><name pos:line="292" pos:column="21">errorbio<pos:position pos:line="292" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="292" pos:column="31">"error"<pos:position pos:line="292" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="292" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="293" pos:column="3">exit<pos:position pos:line="293" pos:column="7"/></name><argument_list pos:line="293" pos:column="7">(<argument><expr><literal type="number" pos:line="293" pos:column="8">1<pos:position pos:line="293" pos:column="9"/></literal></expr></argument>)<pos:position pos:line="293" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="11"/></expr_stmt>
}<pos:position pos:line="294" pos:column="2"/></block></function></unit>
