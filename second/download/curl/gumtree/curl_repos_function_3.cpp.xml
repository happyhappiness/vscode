<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">glob_word<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">char<pos:position pos:line="1" pos:column="19"/></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">pattern<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">pos<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list> <block pos:line="1" pos:column="39">{
  <comment type="block" pos:line="2" pos:column="3">/* processes a literal string component of a URL
     special characters '{' and '[' branch to set/range processing functions
   */</comment> 
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name><modifier pos:line="5" pos:column="7">*<pos:position pos:line="5" pos:column="8"/></modifier></type> <name pos:line="5" pos:column="9">buf<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">glob_buffer<pos:position pos:line="5" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">litindex<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

  <while pos:line="8" pos:column="3">while <condition pos:line="8" pos:column="9">(<expr><operator pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">pattern<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">!=<pos:position pos:line="8" pos:column="21"/></operator> <literal type="char" pos:line="8" pos:column="22">'\0'<pos:position pos:line="8" pos:column="26"/></literal> <operator pos:line="8" pos:column="27">&amp;&amp;<pos:position pos:line="8" pos:column="37"/></operator> <operator pos:line="8" pos:column="30">*<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">pattern<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">!=<pos:position pos:line="8" pos:column="41"/></operator> <literal type="char" pos:line="8" pos:column="42">'{'<pos:position pos:line="8" pos:column="45"/></literal> <operator pos:line="8" pos:column="46">&amp;&amp;<pos:position pos:line="8" pos:column="56"/></operator> <operator pos:line="8" pos:column="49">*<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="50">pattern<pos:position pos:line="8" pos:column="57"/></name> <operator pos:line="8" pos:column="58">!=<pos:position pos:line="8" pos:column="60"/></operator> <literal type="char" pos:line="8" pos:column="61">'['<pos:position pos:line="8" pos:column="64"/></literal></expr>)<pos:position pos:line="8" pos:column="65"/></condition> <block pos:line="8" pos:column="66">{
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">pattern<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">==<pos:position pos:line="9" pos:column="20"/></operator> <literal type="char" pos:line="9" pos:column="21">'}'<pos:position pos:line="9" pos:column="24"/></literal> <operator pos:line="9" pos:column="25">||<pos:position pos:line="9" pos:column="27"/></operator> <operator pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">pattern<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">==<pos:position pos:line="9" pos:column="39"/></operator> <literal type="char" pos:line="9" pos:column="40">']'<pos:position pos:line="9" pos:column="43"/></literal></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44"> <block pos:line="9" pos:column="45">{
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">printf<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><literal type="string" pos:line="10" pos:column="14">"illegal character at position %d\n"<pos:position pos:line="10" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="52">pos<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="11" pos:column="7">exit<pos:position pos:line="11" pos:column="11"/></name> <argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">CURLE_URL_MALFORMAT<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">pattern<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">==<pos:position pos:line="13" pos:column="20"/></operator> <literal type="char" pos:line="13" pos:column="21">'\\'<pos:position pos:line="13" pos:column="25"/></literal></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26"> <block pos:line="13" pos:column="27">{		<comment type="block" pos:line="13" pos:column="41">/* escape character, skip '\' */</comment>
      <expr_stmt><expr><operator pos:line="14" pos:column="7">++<pos:position pos:line="14" pos:column="9"/></operator><name pos:line="14" pos:column="9">pattern<pos:position pos:line="14" pos:column="16"/></name></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="15" pos:column="7">++<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">pos<pos:position pos:line="15" pos:column="12"/></name></expr>;<pos:position pos:line="15" pos:column="13"/></expr_stmt>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><operator pos:line="16" pos:column="11">*<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">pattern<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">==<pos:position pos:line="16" pos:column="22"/></operator> <literal type="char" pos:line="16" pos:column="23">'\0'<pos:position pos:line="16" pos:column="27"/></literal></expr>)<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28"> <block pos:line="16" pos:column="29">{		<comment type="block" pos:line="16" pos:column="41">/* but no escaping of '\0'! */</comment>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">printf<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="string" pos:line="17" pos:column="16">"illegal character at position %d\n"<pos:position pos:line="17" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="54">pos<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">exit<pos:position pos:line="18" pos:column="13"/></name> <argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">CURLE_URL_MALFORMAT<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="19" pos:column="8"/></block></then></if>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="21" pos:column="5">*<pos:position pos:line="21" pos:column="6"/></operator><name pos:line="21" pos:column="6">buf<pos:position pos:line="21" pos:column="9"/></name><operator pos:line="21" pos:column="9">++<pos:position pos:line="21" pos:column="11"/></operator> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <operator pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">pattern<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">++<pos:position pos:line="21" pos:column="24"/></operator></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>		<comment type="block" pos:line="21" pos:column="41">/* copy character to literal */</comment>
    <expr_stmt><expr><operator pos:line="22" pos:column="5">++<pos:position pos:line="22" pos:column="7"/></operator><name pos:line="22" pos:column="7">pos<pos:position pos:line="22" pos:column="10"/></name></expr>;<pos:position pos:line="22" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></while>
  <expr_stmt><expr><operator pos:line="24" pos:column="3">*<pos:position pos:line="24" pos:column="4"/></operator><name pos:line="24" pos:column="4">buf<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <literal type="char" pos:line="24" pos:column="10">'\0'<pos:position pos:line="24" pos:column="14"/></literal></expr>;<pos:position pos:line="24" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">litindex<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name><name pos:line="25" pos:column="14">glob_expand<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">-&gt;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="27">size<pos:position pos:line="25" pos:column="31"/></name></name> <operator pos:line="25" pos:column="32">/<pos:position pos:line="25" pos:column="33"/></operator> <literal type="number" pos:line="25" pos:column="34">2<pos:position pos:line="25" pos:column="35"/></literal></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
  <comment type="block" pos:line="26" pos:column="3">/* literals 0,1,2,... correspond to size=0,2,4,... */</comment>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">glob_expand<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">-&gt;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="16">literal<pos:position pos:line="27" pos:column="23"/></name><index pos:line="27" pos:column="23">[<expr><name pos:line="27" pos:column="24">litindex<pos:position pos:line="27" pos:column="32"/></name></expr>]<pos:position pos:line="27" pos:column="33"/></index></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <call><name pos:line="27" pos:column="36">strdup<pos:position pos:line="27" pos:column="42"/></name><argument_list pos:line="27" pos:column="42">(<argument><expr><name pos:line="27" pos:column="43">glob_buffer<pos:position pos:line="27" pos:column="54"/></name></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="28" pos:column="3">++<pos:position pos:line="28" pos:column="5"/></operator><name><name pos:line="28" pos:column="5">glob_expand<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">size<pos:position pos:line="28" pos:column="22"/></name></name></expr>;<pos:position pos:line="28" pos:column="23"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><operator pos:line="29" pos:column="7">*<pos:position pos:line="29" pos:column="8"/></operator><name pos:line="29" pos:column="8">pattern<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">==<pos:position pos:line="29" pos:column="18"/></operator> <literal type="char" pos:line="29" pos:column="19">'\0'<pos:position pos:line="29" pos:column="23"/></literal></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24">
    <block type="pseudo"><return pos:line="30" pos:column="5">return <expr><literal type="number" pos:line="30" pos:column="12">1<pos:position pos:line="30" pos:column="13"/></literal></expr>;<pos:position pos:line="30" pos:column="14"/></return></block></then></if>				<comment type="block" pos:line="30" pos:column="41">/* singular URL processed  */</comment>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><operator pos:line="31" pos:column="7">*<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">pattern<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">==<pos:position pos:line="31" pos:column="18"/></operator> <literal type="char" pos:line="31" pos:column="19">'{'<pos:position pos:line="31" pos:column="22"/></literal></expr>)<pos:position pos:line="31" pos:column="23"/></condition><then pos:line="31" pos:column="23"> <block pos:line="31" pos:column="24">{
    <return pos:line="32" pos:column="5">return <expr><call><name pos:line="32" pos:column="12">glob_set<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><operator pos:line="32" pos:column="21">++<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">pattern<pos:position pos:line="32" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="32">++<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="34">pos<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></return>	<comment type="block" pos:line="32" pos:column="41">/* process set pattern */</comment>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><operator pos:line="34" pos:column="7">*<pos:position pos:line="34" pos:column="8"/></operator><name pos:line="34" pos:column="8">pattern<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">==<pos:position pos:line="34" pos:column="18"/></operator> <literal type="char" pos:line="34" pos:column="19">'['<pos:position pos:line="34" pos:column="22"/></literal></expr>)<pos:position pos:line="34" pos:column="23"/></condition><then pos:line="34" pos:column="23"> <block pos:line="34" pos:column="24">{
    <return pos:line="35" pos:column="5">return <expr><call><name pos:line="35" pos:column="12">glob_range<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">(<argument><expr><operator pos:line="35" pos:column="23">++<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">pattern<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="34">++<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="36">pos<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></return><comment type="block" pos:line="35" pos:column="41">/* process range pattern */</comment>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">printf<pos:position pos:line="37" pos:column="9"/></name><argument_list pos:line="37" pos:column="9">(<argument><expr><literal type="string" pos:line="37" pos:column="10">"internal error\n"<pos:position pos:line="37" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">exit<pos:position pos:line="38" pos:column="7"/></name> <argument_list pos:line="38" pos:column="8">(<argument><expr><name pos:line="38" pos:column="9">CURLE_FAILED_INIT<pos:position pos:line="38" pos:column="26"/></name></expr></argument>)<pos:position pos:line="38" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
