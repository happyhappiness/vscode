<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_724_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_tftp<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">testcase<pos:position pos:line="1" pos:column="35"/></name></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">test<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">tftphdr<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">tp<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">ssize_t<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">size<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">cp<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">first<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><literal type="number" pos:line="4" pos:column="15">1<pos:position pos:line="4" pos:column="16"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">ecode<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">formats<pos:position pos:line="5" pos:column="17"/></name></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">pf<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">filename<pos:position pos:line="6" pos:column="17"/></name></decl>, <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="20">mode<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><name pos:line="6" pos:column="27">NULL<pos:position pos:line="6" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">error<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">FILE<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">server<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">USE_WINSOCK<pos:position pos:line="9" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">DWORD<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">recvtimeout<pos:position pos:line="10" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="22">recvtimeoutbak<pos:position pos:line="10" pos:column="36"/></name></decl>;<pos:position pos:line="10" pos:column="37"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><specifier pos:line="12" pos:column="3">const<pos:position pos:line="12" pos:column="8"/></specifier> <name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">option<pos:position pos:line="12" pos:column="21"/></name> <init pos:line="12" pos:column="22">= <expr><literal type="string" pos:line="12" pos:column="24">"mode"<pos:position pos:line="12" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt> <comment type="block" pos:line="12" pos:column="32">/* mode is implicit */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">toggle<pos:position pos:line="13" pos:column="13"/></name> <init pos:line="13" pos:column="14">= <expr><literal type="number" pos:line="13" pos:column="16">1<pos:position pos:line="13" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="18"/></decl_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* Open request dump file. */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">server<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">fopen<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">REQUEST_DUMP<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="32">"ab"<pos:position pos:line="16" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">server<pos:position pos:line="17" pos:column="13"/></name></expr>)<pos:position pos:line="17" pos:column="14"/></condition><then pos:line="17" pos:column="14"> <block pos:line="17" pos:column="15">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">error<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <name pos:line="18" pos:column="13">errno<pos:position pos:line="18" pos:column="18"/></name></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">logmsg<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="string" pos:line="19" pos:column="12">"fopen() failed with error: %d %s"<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="48">error<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="55">strerror<pos:position pos:line="19" pos:column="63"/></name><argument_list pos:line="19" pos:column="63">(<argument><expr><name pos:line="19" pos:column="64">error<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">logmsg<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="string" pos:line="20" pos:column="12">"Error opening file: %s"<pos:position pos:line="20" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">REQUEST_DUMP<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="24" pos:column="3">/* store input protocol */</comment>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">fprintf<pos:position pos:line="25" pos:column="10"/></name><argument_list pos:line="25" pos:column="10">(<argument><expr><name pos:line="25" pos:column="11">server<pos:position pos:line="25" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="19">"opcode: %x\n"<pos:position pos:line="25" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="35">tp<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">-&gt;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="39">th_opcode<pos:position pos:line="25" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>

  <expr_stmt><expr><name pos:line="27" pos:column="3">cp<pos:position pos:line="27" pos:column="5"/></name> <operator pos:line="27" pos:column="6">=<pos:position pos:line="27" pos:column="7"/></operator> <operator pos:line="27" pos:column="8">(<pos:position pos:line="27" pos:column="9"/></operator><name pos:line="27" pos:column="9">char<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">*<pos:position pos:line="27" pos:column="15"/></operator><operator pos:line="27" pos:column="15">)<pos:position pos:line="27" pos:column="16"/></operator><operator pos:line="27" pos:column="16">&amp;<pos:position pos:line="27" pos:column="21"/></operator><name><name pos:line="27" pos:column="17">tp<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">-&gt;<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="21">th_stuff<pos:position pos:line="27" pos:column="29"/></name></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="28" pos:column="3">filename<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">cp<pos:position pos:line="28" pos:column="16"/></name></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>
  <do pos:line="29" pos:column="3">do <block pos:line="29" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">bool<pos:position pos:line="30" pos:column="9"/></name></type> <name pos:line="30" pos:column="10">endofit<pos:position pos:line="30" pos:column="17"/></name> <init pos:line="30" pos:column="18">= <expr><literal type="boolean" pos:line="30" pos:column="20">true<pos:position pos:line="30" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="30" pos:column="25"/></decl_stmt>
    <while pos:line="31" pos:column="5">while<condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">cp<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">&lt;<pos:position pos:line="31" pos:column="18"/></operator> <operator pos:line="31" pos:column="16">&amp;<pos:position pos:line="31" pos:column="21"/></operator><name><name pos:line="31" pos:column="17">buf<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">.<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">storage<pos:position pos:line="31" pos:column="28"/></name><index pos:line="31" pos:column="28">[<expr><name pos:line="31" pos:column="29">size<pos:position pos:line="31" pos:column="33"/></name></expr>]<pos:position pos:line="31" pos:column="34"/></index></name></expr>)<pos:position pos:line="31" pos:column="35"/></condition> <block pos:line="31" pos:column="36">{
      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><operator pos:line="32" pos:column="10">*<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">cp<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">==<pos:position pos:line="32" pos:column="16"/></operator> <literal type="char" pos:line="32" pos:column="17">'\0'<pos:position pos:line="32" pos:column="21"/></literal></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22"> <block pos:line="32" pos:column="23">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">endofit<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <literal type="boolean" pos:line="33" pos:column="19">false<pos:position pos:line="33" pos:column="24"/></literal></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
        <break pos:line="34" pos:column="9">break;<pos:position pos:line="34" pos:column="15"/></break>
      }<pos:position pos:line="35" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="36" pos:column="7">cp<pos:position pos:line="36" pos:column="9"/></name><operator pos:line="36" pos:column="9">++<pos:position pos:line="36" pos:column="11"/></operator></expr>;<pos:position pos:line="36" pos:column="12"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></while>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">endofit<pos:position pos:line="38" pos:column="15"/></name></expr>)<pos:position pos:line="38" pos:column="16"/></condition><then pos:line="38" pos:column="16">
      <comment type="block" pos:line="39" pos:column="7">/* no more options */</comment>
      <block type="pseudo"><break pos:line="40" pos:column="7">break;<pos:position pos:line="40" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="42" pos:column="5">/* before increasing pointer, make sure it is still within the legal
       space */</comment>
    <if pos:line="44" pos:column="5">if<condition pos:line="44" pos:column="7">(<expr><operator pos:line="44" pos:column="8">(<pos:position pos:line="44" pos:column="9"/></operator><name pos:line="44" pos:column="9">cp<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">+<pos:position pos:line="44" pos:column="13"/></operator> <literal type="number" pos:line="44" pos:column="14">1<pos:position pos:line="44" pos:column="15"/></literal><operator pos:line="44" pos:column="15">)<pos:position pos:line="44" pos:column="16"/></operator> <operator pos:line="44" pos:column="17">&lt;<pos:position pos:line="44" pos:column="21"/></operator> <operator pos:line="44" pos:column="19">&amp;<pos:position pos:line="44" pos:column="24"/></operator><name><name pos:line="44" pos:column="20">buf<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">.<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="24">storage<pos:position pos:line="44" pos:column="31"/></name><index pos:line="44" pos:column="31">[<expr><name pos:line="44" pos:column="32">size<pos:position pos:line="44" pos:column="36"/></name></expr>]<pos:position pos:line="44" pos:column="37"/></index></name></expr>)<pos:position pos:line="44" pos:column="38"/></condition><then pos:line="44" pos:column="38"> <block pos:line="44" pos:column="39">{
      <expr_stmt><expr><operator pos:line="45" pos:column="7">++<pos:position pos:line="45" pos:column="9"/></operator><name pos:line="45" pos:column="9">cp<pos:position pos:line="45" pos:column="11"/></name></expr>;<pos:position pos:line="45" pos:column="12"/></expr_stmt>
      <if pos:line="46" pos:column="7">if<condition pos:line="46" pos:column="9">(<expr><name pos:line="46" pos:column="10">first<pos:position pos:line="46" pos:column="15"/></name></expr>)<pos:position pos:line="46" pos:column="16"/></condition><then pos:line="46" pos:column="16"> <block pos:line="46" pos:column="17">{
        <comment type="block" pos:line="47" pos:column="9">/* store the mode since we need it later */</comment>
        <expr_stmt><expr><name pos:line="48" pos:column="9">mode<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <name pos:line="48" pos:column="16">cp<pos:position pos:line="48" pos:column="18"/></name></expr>;<pos:position pos:line="48" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">first<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <literal type="number" pos:line="49" pos:column="17">0<pos:position pos:line="49" pos:column="18"/></literal></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt>
      }<pos:position pos:line="50" pos:column="8"/></block></then></if>
      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><name pos:line="51" pos:column="10">toggle<pos:position pos:line="51" pos:column="16"/></name></expr>)<pos:position pos:line="51" pos:column="17"/></condition><then pos:line="51" pos:column="17">
        <comment type="block" pos:line="52" pos:column="9">/* name/value pair: */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="9">fprintf<pos:position pos:line="53" pos:column="16"/></name><argument_list pos:line="53" pos:column="16">(<argument><expr><name pos:line="53" pos:column="17">server<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="25">"%s: %s\n"<pos:position pos:line="53" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="37">option<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="45">cp<pos:position pos:line="53" pos:column="47"/></name></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="49"/></expr_stmt></block></then>
      <else pos:line="54" pos:column="7">else <block pos:line="54" pos:column="12">{
        <comment type="block" pos:line="55" pos:column="9">/* store the name pointer */</comment>
        <expr_stmt><expr><name pos:line="56" pos:column="9">option<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <name pos:line="56" pos:column="18">cp<pos:position pos:line="56" pos:column="20"/></name></expr>;<pos:position pos:line="56" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="57" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name pos:line="58" pos:column="7">toggle<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">^=<pos:position pos:line="58" pos:column="16"/></operator> <literal type="number" pos:line="58" pos:column="17">1<pos:position pos:line="58" pos:column="18"/></literal></expr>;<pos:position pos:line="58" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></then>
    <else pos:line="60" pos:column="5">else
      <comment type="block" pos:line="61" pos:column="7">/* No more options */</comment>
      <block type="pseudo"><break pos:line="62" pos:column="7">break;<pos:position pos:line="62" pos:column="13"/></break></block></else></if>
  }<pos:position pos:line="63" pos:column="4"/></block> while<condition pos:line="63" pos:column="10">(<expr><literal type="number" pos:line="63" pos:column="11">1<pos:position pos:line="63" pos:column="12"/></literal></expr>)<pos:position pos:line="63" pos:column="13"/></condition>;<pos:position pos:line="63" pos:column="14"/></do>

  <if pos:line="65" pos:column="3">if<condition pos:line="65" pos:column="5">(<expr><operator pos:line="65" pos:column="6">*<pos:position pos:line="65" pos:column="7"/></operator><name pos:line="65" pos:column="7">cp<pos:position pos:line="65" pos:column="9"/></name></expr>)<pos:position pos:line="65" pos:column="10"/></condition><then pos:line="65" pos:column="10"> <block pos:line="65" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">nak<pos:position pos:line="66" pos:column="8"/></name><argument_list pos:line="66" pos:column="8">(<argument><expr><name pos:line="66" pos:column="9">EBADOP<pos:position pos:line="66" pos:column="15"/></name></expr></argument>)<pos:position pos:line="66" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">fclose<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><name pos:line="67" pos:column="12">server<pos:position pos:line="67" pos:column="18"/></name></expr></argument>)<pos:position pos:line="67" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="20"/></expr_stmt>
    <return pos:line="68" pos:column="5">return <expr><literal type="number" pos:line="68" pos:column="12">3<pos:position pos:line="68" pos:column="13"/></literal></expr>;<pos:position pos:line="68" pos:column="14"/></return>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="71" pos:column="3">/* store input protocol */</comment>
  <expr_stmt><expr><call><name pos:line="72" pos:column="3">fprintf<pos:position pos:line="72" pos:column="10"/></name><argument_list pos:line="72" pos:column="10">(<argument><expr><name pos:line="72" pos:column="11">server<pos:position pos:line="72" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="19">"filename: %s\n"<pos:position pos:line="72" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="37">filename<pos:position pos:line="72" pos:column="45"/></name></expr></argument>)<pos:position pos:line="72" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="47"/></expr_stmt>

  <for pos:line="74" pos:column="3">for<control pos:line="74" pos:column="6">(<init><expr><name pos:line="74" pos:column="7">cp<pos:position pos:line="74" pos:column="9"/></name> <operator pos:line="74" pos:column="10">=<pos:position pos:line="74" pos:column="11"/></operator> <name pos:line="74" pos:column="12">mode<pos:position pos:line="74" pos:column="16"/></name></expr>;<pos:position pos:line="74" pos:column="17"/></init> <condition><expr><name pos:line="74" pos:column="18">cp<pos:position pos:line="74" pos:column="20"/></name> <operator pos:line="74" pos:column="21">&amp;&amp;<pos:position pos:line="74" pos:column="31"/></operator> <operator pos:line="74" pos:column="24">*<pos:position pos:line="74" pos:column="25"/></operator><name pos:line="74" pos:column="25">cp<pos:position pos:line="74" pos:column="27"/></name></expr>;<pos:position pos:line="74" pos:column="28"/></condition> <incr><expr><name pos:line="74" pos:column="29">cp<pos:position pos:line="74" pos:column="31"/></name><operator pos:line="74" pos:column="31">++<pos:position pos:line="74" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="74" pos:column="34"/></control>
    <block type="pseudo"><if pos:line="75" pos:column="5">if<condition pos:line="75" pos:column="7">(<expr><call><name pos:line="75" pos:column="8">ISUPPER<pos:position pos:line="75" pos:column="15"/></name><argument_list pos:line="75" pos:column="15">(<argument><expr><operator pos:line="75" pos:column="16">*<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="17">cp<pos:position pos:line="75" pos:column="19"/></name></expr></argument>)<pos:position pos:line="75" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="21"/></condition><then pos:line="75" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="76" pos:column="7">*<pos:position pos:line="76" pos:column="8"/></operator><name pos:line="76" pos:column="8">cp<pos:position pos:line="76" pos:column="10"/></name> <operator pos:line="76" pos:column="11">=<pos:position pos:line="76" pos:column="12"/></operator> <operator pos:line="76" pos:column="13">(<pos:position pos:line="76" pos:column="14"/></operator><name pos:line="76" pos:column="14">char<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">)<pos:position pos:line="76" pos:column="19"/></operator><call><name pos:line="76" pos:column="19">tolower<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><operator pos:line="76" pos:column="27">(<pos:position pos:line="76" pos:column="28"/></operator><name pos:line="76" pos:column="28">int<pos:position pos:line="76" pos:column="31"/></name><operator pos:line="76" pos:column="31">)<pos:position pos:line="76" pos:column="32"/></operator><operator pos:line="76" pos:column="32">*<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="33">cp<pos:position pos:line="76" pos:column="35"/></name></expr></argument>)<pos:position pos:line="76" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="37"/></expr_stmt></block></then></if></block></for>

  <comment type="block" pos:line="78" pos:column="3">/* store input protocol */</comment>
  <expr_stmt><expr><call><name pos:line="79" pos:column="3">fclose<pos:position pos:line="79" pos:column="9"/></name><argument_list pos:line="79" pos:column="9">(<argument><expr><name pos:line="79" pos:column="10">server<pos:position pos:line="79" pos:column="16"/></name></expr></argument>)<pos:position pos:line="79" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="18"/></expr_stmt>

  <for pos:line="81" pos:column="3">for<control pos:line="81" pos:column="6">(<init><expr><name pos:line="81" pos:column="7">pf<pos:position pos:line="81" pos:column="9"/></name> <operator pos:line="81" pos:column="10">=<pos:position pos:line="81" pos:column="11"/></operator> <name pos:line="81" pos:column="12">formata<pos:position pos:line="81" pos:column="19"/></name></expr>;<pos:position pos:line="81" pos:column="20"/></init> <condition><expr><name><name pos:line="81" pos:column="21">pf<pos:position pos:line="81" pos:column="23"/></name><operator pos:line="81" pos:column="23">-&gt;<pos:position pos:line="81" pos:column="28"/></operator><name pos:line="81" pos:column="25">f_mode<pos:position pos:line="81" pos:column="31"/></name></name></expr>;<pos:position pos:line="81" pos:column="32"/></condition> <incr><expr><name pos:line="81" pos:column="33">pf<pos:position pos:line="81" pos:column="35"/></name><operator pos:line="81" pos:column="35">++<pos:position pos:line="81" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="81" pos:column="38"/></control>
    <block type="pseudo"><if pos:line="82" pos:column="5">if<condition pos:line="82" pos:column="7">(<expr><call><name pos:line="82" pos:column="8">strcmp<pos:position pos:line="82" pos:column="14"/></name><argument_list pos:line="82" pos:column="14">(<argument><expr><name><name pos:line="82" pos:column="15">pf<pos:position pos:line="82" pos:column="17"/></name><operator pos:line="82" pos:column="17">-&gt;<pos:position pos:line="82" pos:column="22"/></operator><name pos:line="82" pos:column="19">f_mode<pos:position pos:line="82" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="27">mode<pos:position pos:line="82" pos:column="31"/></name></expr></argument>)<pos:position pos:line="82" pos:column="32"/></argument_list></call> <operator pos:line="82" pos:column="33">==<pos:position pos:line="82" pos:column="35"/></operator> <literal type="number" pos:line="82" pos:column="36">0<pos:position pos:line="82" pos:column="37"/></literal></expr>)<pos:position pos:line="82" pos:column="38"/></condition><then pos:line="82" pos:column="38">
      <block type="pseudo"><break pos:line="83" pos:column="7">break;<pos:position pos:line="83" pos:column="13"/></break></block></then></if></block></for>
  <if pos:line="84" pos:column="3">if<condition pos:line="84" pos:column="5">(<expr><operator pos:line="84" pos:column="6">!<pos:position pos:line="84" pos:column="7"/></operator><name><name pos:line="84" pos:column="7">pf<pos:position pos:line="84" pos:column="9"/></name><operator pos:line="84" pos:column="9">-&gt;<pos:position pos:line="84" pos:column="14"/></operator><name pos:line="84" pos:column="11">f_mode<pos:position pos:line="84" pos:column="17"/></name></name></expr>)<pos:position pos:line="84" pos:column="18"/></condition><then pos:line="84" pos:column="18"> <block pos:line="84" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">nak<pos:position pos:line="85" pos:column="8"/></name><argument_list pos:line="85" pos:column="8">(<argument><expr><name pos:line="85" pos:column="9">EBADOP<pos:position pos:line="85" pos:column="15"/></name></expr></argument>)<pos:position pos:line="85" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="17"/></expr_stmt>
    <return pos:line="86" pos:column="5">return <expr><literal type="number" pos:line="86" pos:column="12">2<pos:position pos:line="86" pos:column="13"/></literal></expr>;<pos:position pos:line="86" pos:column="14"/></return>
  }<pos:position pos:line="87" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="88" pos:column="3">ecode<pos:position pos:line="88" pos:column="8"/></name> <operator pos:line="88" pos:column="9">=<pos:position pos:line="88" pos:column="10"/></operator> <call><name pos:line="88" pos:column="11">validate_access<pos:position pos:line="88" pos:column="26"/></name><argument_list pos:line="88" pos:column="26">(<argument><expr><name pos:line="88" pos:column="27">test<pos:position pos:line="88" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="33">filename<pos:position pos:line="88" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="43">tp<pos:position pos:line="88" pos:column="45"/></name><operator pos:line="88" pos:column="45">-&gt;<pos:position pos:line="88" pos:column="50"/></operator><name pos:line="88" pos:column="47">th_opcode<pos:position pos:line="88" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="58"/></expr_stmt>
  <if pos:line="89" pos:column="3">if<condition pos:line="89" pos:column="5">(<expr><name pos:line="89" pos:column="6">ecode<pos:position pos:line="89" pos:column="11"/></name></expr>)<pos:position pos:line="89" pos:column="12"/></condition><then pos:line="89" pos:column="12"> <block pos:line="89" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">nak<pos:position pos:line="90" pos:column="8"/></name><argument_list pos:line="90" pos:column="8">(<argument><expr><name pos:line="90" pos:column="9">ecode<pos:position pos:line="90" pos:column="14"/></name></expr></argument>)<pos:position pos:line="90" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="16"/></expr_stmt>
    <return pos:line="91" pos:column="5">return <expr><literal type="number" pos:line="91" pos:column="12">1<pos:position pos:line="91" pos:column="13"/></literal></expr>;<pos:position pos:line="91" pos:column="14"/></return>
  }<pos:position pos:line="92" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">ifdef<pos:position pos:line="94" pos:column="7"/></cpp:directive> <name pos:line="94" pos:column="8">USE_WINSOCK<pos:position pos:line="94" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="95" pos:column="3">recvtimeout<pos:position pos:line="95" pos:column="14"/></name> <operator pos:line="95" pos:column="15">=<pos:position pos:line="95" pos:column="16"/></operator> <sizeof pos:line="95" pos:column="17">sizeof<argument_list pos:line="95" pos:column="23">(<argument><expr><name pos:line="95" pos:column="24">recvtimeoutbak<pos:position pos:line="95" pos:column="38"/></name></expr></argument>)<pos:position pos:line="95" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="95" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="96" pos:column="3">getsockopt<pos:position pos:line="96" pos:column="13"/></name><argument_list pos:line="96" pos:column="13">(<argument><expr><name pos:line="96" pos:column="14">peer<pos:position pos:line="96" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="20">SOL_SOCKET<pos:position pos:line="96" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="32">SO_RCVTIMEO<pos:position pos:line="96" pos:column="43"/></name></expr></argument>,
             <argument><expr><operator pos:line="97" pos:column="14">(<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="15">char<pos:position pos:line="97" pos:column="19"/></name> <operator pos:line="97" pos:column="20">*<pos:position pos:line="97" pos:column="21"/></operator><operator pos:line="97" pos:column="21">)<pos:position pos:line="97" pos:column="22"/></operator><operator pos:line="97" pos:column="22">&amp;<pos:position pos:line="97" pos:column="27"/></operator><name pos:line="97" pos:column="23">recvtimeoutbak<pos:position pos:line="97" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="39">(<pos:position pos:line="97" pos:column="40"/></operator><name pos:line="97" pos:column="40">int<pos:position pos:line="97" pos:column="43"/></name> <operator pos:line="97" pos:column="44">*<pos:position pos:line="97" pos:column="45"/></operator><operator pos:line="97" pos:column="45">)<pos:position pos:line="97" pos:column="46"/></operator><operator pos:line="97" pos:column="46">&amp;<pos:position pos:line="97" pos:column="51"/></operator><name pos:line="97" pos:column="47">recvtimeout<pos:position pos:line="97" pos:column="58"/></name></expr></argument>)<pos:position pos:line="97" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="98" pos:column="3">recvtimeout<pos:position pos:line="98" pos:column="14"/></name> <operator pos:line="98" pos:column="15">=<pos:position pos:line="98" pos:column="16"/></operator> <name pos:line="98" pos:column="17">TIMEOUT<pos:position pos:line="98" pos:column="24"/></name><operator pos:line="98" pos:column="24">*<pos:position pos:line="98" pos:column="25"/></operator><literal type="number" pos:line="98" pos:column="25">1000<pos:position pos:line="98" pos:column="29"/></literal></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="99" pos:column="3">setsockopt<pos:position pos:line="99" pos:column="13"/></name><argument_list pos:line="99" pos:column="13">(<argument><expr><name pos:line="99" pos:column="14">peer<pos:position pos:line="99" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="20">SOL_SOCKET<pos:position pos:line="99" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="32">SO_RCVTIMEO<pos:position pos:line="99" pos:column="43"/></name></expr></argument>,
             <argument><expr><operator pos:line="100" pos:column="14">(<pos:position pos:line="100" pos:column="15"/></operator><specifier pos:line="100" pos:column="15">const<pos:position pos:line="100" pos:column="20"/></specifier> <name pos:line="100" pos:column="21">char<pos:position pos:line="100" pos:column="25"/></name> <operator pos:line="100" pos:column="26">*<pos:position pos:line="100" pos:column="27"/></operator><operator pos:line="100" pos:column="27">)<pos:position pos:line="100" pos:column="28"/></operator><operator pos:line="100" pos:column="28">&amp;<pos:position pos:line="100" pos:column="33"/></operator><name pos:line="100" pos:column="29">recvtimeout<pos:position pos:line="100" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="100" pos:column="42">sizeof<argument_list pos:line="100" pos:column="48">(<argument><expr><name pos:line="100" pos:column="49">recvtimeout<pos:position pos:line="100" pos:column="60"/></name></expr></argument>)<pos:position pos:line="100" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="100" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="103" pos:column="3">if<condition pos:line="103" pos:column="5">(<expr><name><name pos:line="103" pos:column="6">tp<pos:position pos:line="103" pos:column="8"/></name><operator pos:line="103" pos:column="8">-&gt;<pos:position pos:line="103" pos:column="13"/></operator><name pos:line="103" pos:column="10">th_opcode<pos:position pos:line="103" pos:column="19"/></name></name> <operator pos:line="103" pos:column="20">==<pos:position pos:line="103" pos:column="22"/></operator> <name pos:line="103" pos:column="23">opcode_WRQ<pos:position pos:line="103" pos:column="33"/></name></expr>)<pos:position pos:line="103" pos:column="34"/></condition><then pos:line="103" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="104" pos:column="5">recvtftp<pos:position pos:line="104" pos:column="13"/></name><argument_list pos:line="104" pos:column="13">(<argument><expr><name pos:line="104" pos:column="14">test<pos:position pos:line="104" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="20">pf<pos:position pos:line="104" pos:column="22"/></name></expr></argument>)<pos:position pos:line="104" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="24"/></expr_stmt></block></then>
  <else pos:line="105" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="5">sendtftp<pos:position pos:line="106" pos:column="13"/></name><argument_list pos:line="106" pos:column="13">(<argument><expr><name pos:line="106" pos:column="14">test<pos:position pos:line="106" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="20">pf<pos:position pos:line="106" pos:column="22"/></name></expr></argument>)<pos:position pos:line="106" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="24"/></expr_stmt></block></else></if>

<cpp:ifdef pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">ifdef<pos:position pos:line="108" pos:column="7"/></cpp:directive> <name pos:line="108" pos:column="8">USE_WINSOCK<pos:position pos:line="108" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="109" pos:column="3">recvtimeout<pos:position pos:line="109" pos:column="14"/></name> <operator pos:line="109" pos:column="15">=<pos:position pos:line="109" pos:column="16"/></operator> <name pos:line="109" pos:column="17">recvtimeoutbak<pos:position pos:line="109" pos:column="31"/></name></expr>;<pos:position pos:line="109" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="110" pos:column="3">setsockopt<pos:position pos:line="110" pos:column="13"/></name><argument_list pos:line="110" pos:column="13">(<argument><expr><name pos:line="110" pos:column="14">peer<pos:position pos:line="110" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="20">SOL_SOCKET<pos:position pos:line="110" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="32">SO_RCVTIMEO<pos:position pos:line="110" pos:column="43"/></name></expr></argument>,
             <argument><expr><operator pos:line="111" pos:column="14">(<pos:position pos:line="111" pos:column="15"/></operator><specifier pos:line="111" pos:column="15">const<pos:position pos:line="111" pos:column="20"/></specifier> <name pos:line="111" pos:column="21">char<pos:position pos:line="111" pos:column="25"/></name> <operator pos:line="111" pos:column="26">*<pos:position pos:line="111" pos:column="27"/></operator><operator pos:line="111" pos:column="27">)<pos:position pos:line="111" pos:column="28"/></operator><operator pos:line="111" pos:column="28">&amp;<pos:position pos:line="111" pos:column="33"/></operator><name pos:line="111" pos:column="29">recvtimeout<pos:position pos:line="111" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="111" pos:column="42">sizeof<argument_list pos:line="111" pos:column="48">(<argument><expr><name pos:line="111" pos:column="49">recvtimeout<pos:position pos:line="111" pos:column="60"/></name></expr></argument>)<pos:position pos:line="111" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="111" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">endif<pos:position pos:line="112" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="114" pos:column="3">return <expr><literal type="number" pos:line="114" pos:column="10">0<pos:position pos:line="114" pos:column="11"/></literal></expr>;<pos:position pos:line="114" pos:column="12"/></return>
}<pos:position pos:line="115" pos:column="2"/></block></function></unit>
