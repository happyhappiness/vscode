<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_268_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">synchnet<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">curl_socket_t<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">f<pos:position pos:line="1" pos:column="36"/></name></decl></parameter> <comment type="block" pos:line="1" pos:column="37">/* socket to flush */</comment>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{

<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><call><name pos:line="4" pos:column="5">defined<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">HAVE_IOCTLSOCKET<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">long<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">i<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">j<pos:position pos:line="9" pos:column="8"/></name> <init pos:line="9" pos:column="9">= <expr><literal type="number" pos:line="9" pos:column="11">0<pos:position pos:line="9" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">rbuf<pos:position pos:line="10" pos:column="12"/></name><index pos:line="10" pos:column="12">[<expr><name pos:line="10" pos:column="13">PKTSIZE<pos:position pos:line="10" pos:column="20"/></name></expr>]<pos:position pos:line="10" pos:column="21"/></index></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">sockaddr_in<pos:position pos:line="11" pos:column="21"/></name></name></type> <name pos:line="11" pos:column="22">fromaddr<pos:position pos:line="11" pos:column="30"/></name></decl>;<pos:position pos:line="11" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">socklen_t<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">fromaddrlen<pos:position pos:line="12" pos:column="24"/></name></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>

  <while pos:line="14" pos:column="3">while <condition pos:line="14" pos:column="9">(<expr><literal type="number" pos:line="14" pos:column="10">1<pos:position pos:line="14" pos:column="11"/></literal></expr>)<pos:position pos:line="14" pos:column="12"/></condition> <block pos:line="14" pos:column="13">{
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><call><name pos:line="15" pos:column="5">defined<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">HAVE_IOCTLSOCKET<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><operator pos:line="16" pos:column="5">(<pos:position pos:line="16" pos:column="6"/></operator><name pos:line="16" pos:column="6">void<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">)<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">ioctlsocket<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">f<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="27">FIONREAD<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="37">&amp;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="38">i<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>
<cpp:else pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">else<pos:position pos:line="17" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><operator pos:line="18" pos:column="5">(<pos:position pos:line="18" pos:column="6"/></operator><name pos:line="18" pos:column="6">void<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">)<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">ioctl<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">f<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="21">FIONREAD<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">i<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">i<pos:position pos:line="20" pos:column="10"/></name></expr>)<pos:position pos:line="20" pos:column="11"/></condition><then pos:line="20" pos:column="11"> <block pos:line="20" pos:column="12">{
      <expr_stmt><expr><name pos:line="21" pos:column="7">j<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">++<pos:position pos:line="21" pos:column="10"/></operator></expr>;<pos:position pos:line="21" pos:column="11"/></expr_stmt>
      <expr_stmt><expr><name pos:line="22" pos:column="7">fromaddrlen<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <sizeof pos:line="22" pos:column="21">sizeof <name pos:line="22" pos:column="28">fromaddr<pos:position pos:line="22" pos:column="36"/></name></sizeof></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="23" pos:column="7">(<pos:position pos:line="23" pos:column="8"/></operator><name pos:line="23" pos:column="8">void<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">)<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">recvfrom<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">f<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="26">rbuf<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="32">sizeof <argument_list pos:line="23" pos:column="39">(<argument><expr><name pos:line="23" pos:column="40">rbuf<pos:position pos:line="23" pos:column="44"/></name></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="47">0<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>,
                      <argument><expr><operator pos:line="24" pos:column="23">(<pos:position pos:line="24" pos:column="24"/></operator>struct <name pos:line="24" pos:column="31">sockaddr<pos:position pos:line="24" pos:column="39"/></name> <operator pos:line="24" pos:column="40">*<pos:position pos:line="24" pos:column="41"/></operator><operator pos:line="24" pos:column="41">)<pos:position pos:line="24" pos:column="42"/></operator><operator pos:line="24" pos:column="42">&amp;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="43">fromaddr<pos:position pos:line="24" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="53">&amp;<pos:position pos:line="24" pos:column="58"/></operator><name pos:line="24" pos:column="54">fromaddrlen<pos:position pos:line="24" pos:column="65"/></name></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then>
    <else pos:line="26" pos:column="5">else
      <block type="pseudo"><break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break></block></else></if>
  }<pos:position pos:line="28" pos:column="4"/></block></while>
  <return pos:line="29" pos:column="3">return <expr><name pos:line="29" pos:column="10">j<pos:position pos:line="29" pos:column="11"/></name></expr>;<pos:position pos:line="29" pos:column="12"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
