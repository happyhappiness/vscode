<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1671.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type> <name pos:line="1" pos:column="21">octet2str<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type> <name pos:line="1" pos:column="44">beg<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type> <name pos:line="1" pos:column="62">end<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">n<pos:position pos:line="3" pos:column="11"/></name> <init pos:line="3" pos:column="12">= <expr><name pos:line="3" pos:column="14">end<pos:position pos:line="3" pos:column="17"/></name> <operator pos:line="3" pos:column="18">-<pos:position pos:line="3" pos:column="19"/></operator> <name pos:line="3" pos:column="20">beg<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type> <name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Convert an ASN.1 octet string to a printable string.
     Return the dynamically allocated string, or NULL if an error occurs. */</comment>

  <expr_stmt><expr><name pos:line="9" pos:column="3">buf<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <call><name pos:line="9" pos:column="9">malloc<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">3<pos:position pos:line="9" pos:column="17"/></literal> <operator pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">n<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">+<pos:position pos:line="9" pos:column="23"/></operator> <literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">buf<pos:position pos:line="10" pos:column="9"/></name></expr>)<pos:position pos:line="10" pos:column="10"/></condition><then pos:line="10" pos:column="10">
    <block type="pseudo"><for pos:line="11" pos:column="5">for<control pos:line="11" pos:column="8">(<init><expr><name pos:line="11" pos:column="9">n<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>;<pos:position pos:line="11" pos:column="15"/></init> <condition><expr><name pos:line="11" pos:column="16">beg<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">&lt;<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="22">end<pos:position pos:line="11" pos:column="25"/></name></expr>;<pos:position pos:line="11" pos:column="26"/></condition> <incr><expr><name pos:line="11" pos:column="27">n<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">+=<pos:position pos:line="11" pos:column="31"/></operator> <literal type="number" pos:line="11" pos:column="32">3<pos:position pos:line="11" pos:column="33"/></literal></expr></incr>)<pos:position pos:line="11" pos:column="34"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="7">snprintf<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">buf<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">+<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">n<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="25">4<pos:position pos:line="12" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="28">"%02x:"<pos:position pos:line="12" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="37">*<pos:position pos:line="12" pos:column="38"/></operator><operator pos:line="12" pos:column="38">(<pos:position pos:line="12" pos:column="39"/></operator><specifier pos:line="12" pos:column="39">const<pos:position pos:line="12" pos:column="44"/></specifier> <name pos:line="12" pos:column="45">unsigned<pos:position pos:line="12" pos:column="53"/></name> <name pos:line="12" pos:column="54">char<pos:position pos:line="12" pos:column="58"/></name> <operator pos:line="12" pos:column="59">*<pos:position pos:line="12" pos:column="60"/></operator><operator pos:line="12" pos:column="60">)<pos:position pos:line="12" pos:column="61"/></operator> <name pos:line="12" pos:column="62">beg<pos:position pos:line="12" pos:column="65"/></name><operator pos:line="12" pos:column="65">++<pos:position pos:line="12" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="69"/></expr_stmt></block></for></block></then></if>
  <return pos:line="13" pos:column="3">return <expr><name pos:line="13" pos:column="10">buf<pos:position pos:line="13" pos:column="13"/></name></expr>;<pos:position pos:line="13" pos:column="14"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
