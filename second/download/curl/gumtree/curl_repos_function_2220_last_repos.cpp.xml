<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2220_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">smtp_state_command_resp<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">connectdata<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">conn<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">smtpcode<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="2" pos:column="41">smtpstate<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">instate<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SMTP<pos:position pos:line="6" pos:column="14"/></name></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">smtp<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name><name pos:line="6" pos:column="23">data<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">-&gt;<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="29">req<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">.<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">protop<pos:position pos:line="6" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">line<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><name><name pos:line="7" pos:column="16">data<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">-&gt;<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="22">state<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">.<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="28">buffer<pos:position pos:line="7" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">len<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><call><name pos:line="8" pos:column="16">strlen<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">line<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="10" pos:column="3">(<pos:position pos:line="10" pos:column="4"/></operator><name pos:line="10" pos:column="4">void<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">)<pos:position pos:line="10" pos:column="9"/></operator><name pos:line="10" pos:column="9">instate<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt> <comment type="block" pos:line="10" pos:column="18">/* no use for this yet */</comment>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">(<pos:position pos:line="12" pos:column="7"/></operator><name><name pos:line="12" pos:column="7">smtp<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">-&gt;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="13">rcpt<pos:position pos:line="12" pos:column="17"/></name></name> <operator pos:line="12" pos:column="18">&amp;&amp;<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="21">smtpcode<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">/<pos:position pos:line="12" pos:column="30"/></operator><literal type="number" pos:line="12" pos:column="30">100<pos:position pos:line="12" pos:column="33"/></literal> <operator pos:line="12" pos:column="34">!=<pos:position pos:line="12" pos:column="36"/></operator> <literal type="number" pos:line="12" pos:column="37">2<pos:position pos:line="12" pos:column="38"/></literal> <operator pos:line="12" pos:column="39">&amp;&amp;<pos:position pos:line="12" pos:column="49"/></operator> <name pos:line="12" pos:column="42">smtpcode<pos:position pos:line="12" pos:column="50"/></name> <operator pos:line="12" pos:column="51">!=<pos:position pos:line="12" pos:column="53"/></operator> <literal type="number" pos:line="12" pos:column="54">553<pos:position pos:line="12" pos:column="57"/></literal> <operator pos:line="12" pos:column="58">&amp;&amp;<pos:position pos:line="12" pos:column="68"/></operator> <name pos:line="12" pos:column="61">smtpcode<pos:position pos:line="12" pos:column="69"/></name> <operator pos:line="12" pos:column="70">!=<pos:position pos:line="12" pos:column="72"/></operator> <literal type="number" pos:line="12" pos:column="73">1<pos:position pos:line="12" pos:column="74"/></literal><operator pos:line="12" pos:column="74">)<pos:position pos:line="12" pos:column="75"/></operator> <operator pos:line="12" pos:column="76">||<pos:position pos:line="12" pos:column="78"/></operator>
     <operator pos:line="13" pos:column="6">(<pos:position pos:line="13" pos:column="7"/></operator><operator pos:line="13" pos:column="7">!<pos:position pos:line="13" pos:column="8"/></operator><name><name pos:line="13" pos:column="8">smtp<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">rcpt<pos:position pos:line="13" pos:column="18"/></name></name> <operator pos:line="13" pos:column="19">&amp;&amp;<pos:position pos:line="13" pos:column="29"/></operator> <name pos:line="13" pos:column="22">smtpcode<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">/<pos:position pos:line="13" pos:column="31"/></operator><literal type="number" pos:line="13" pos:column="31">100<pos:position pos:line="13" pos:column="34"/></literal> <operator pos:line="13" pos:column="35">!=<pos:position pos:line="13" pos:column="37"/></operator> <literal type="number" pos:line="13" pos:column="38">2<pos:position pos:line="13" pos:column="39"/></literal> <operator pos:line="13" pos:column="40">&amp;&amp;<pos:position pos:line="13" pos:column="50"/></operator> <name pos:line="13" pos:column="43">smtpcode<pos:position pos:line="13" pos:column="51"/></name> <operator pos:line="13" pos:column="52">!=<pos:position pos:line="13" pos:column="54"/></operator> <literal type="number" pos:line="13" pos:column="55">1<pos:position pos:line="13" pos:column="56"/></literal><operator pos:line="13" pos:column="56">)<pos:position pos:line="13" pos:column="57"/></operator></expr>)<pos:position pos:line="13" pos:column="58"/></condition><then pos:line="13" pos:column="58"> <block pos:line="13" pos:column="59">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">failf<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><name pos:line="14" pos:column="11">data<pos:position pos:line="14" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="17">"Command failed: %d"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="39">smtpcode<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">result<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="15" pos:column="30"/></name></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then>
  <else pos:line="17" pos:column="3">else <block pos:line="17" pos:column="8">{
    <comment type="block" pos:line="18" pos:column="5">/* Temporarily add the LF character back and send as body to the client */</comment>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><operator pos:line="19" pos:column="8">!<pos:position pos:line="19" pos:column="9"/></operator><name><name pos:line="19" pos:column="9">data<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">-&gt;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="15">set<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">.<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">opt_no_body<pos:position pos:line="19" pos:column="30"/></name></name></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31"> <block pos:line="19" pos:column="32">{
      <expr_stmt><expr><name><name pos:line="20" pos:column="7">line<pos:position pos:line="20" pos:column="11"/></name><index pos:line="20" pos:column="11">[<expr><name pos:line="20" pos:column="12">len<pos:position pos:line="20" pos:column="15"/></name></expr>]<pos:position pos:line="20" pos:column="16"/></index></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <literal type="char" pos:line="20" pos:column="19">'\n'<pos:position pos:line="20" pos:column="23"/></literal></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><name pos:line="21" pos:column="7">result<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">Curl_client_write<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">conn<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">CLIENTWRITE_BODY<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="58">line<pos:position pos:line="21" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="64">len<pos:position pos:line="21" pos:column="67"/></name> <operator pos:line="21" pos:column="68">+<pos:position pos:line="21" pos:column="69"/></operator> <literal type="number" pos:line="21" pos:column="70">1<pos:position pos:line="21" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="22" pos:column="7">line<pos:position pos:line="22" pos:column="11"/></name><index pos:line="22" pos:column="11">[<expr><name pos:line="22" pos:column="12">len<pos:position pos:line="22" pos:column="15"/></name></expr>]<pos:position pos:line="22" pos:column="16"/></index></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <literal type="char" pos:line="22" pos:column="19">'\0'<pos:position pos:line="22" pos:column="23"/></literal></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">smtpcode<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">!=<pos:position pos:line="25" pos:column="19"/></operator> <literal type="number" pos:line="25" pos:column="20">1<pos:position pos:line="25" pos:column="21"/></literal></expr>)<pos:position pos:line="25" pos:column="22"/></condition><then pos:line="25" pos:column="22"> <block pos:line="25" pos:column="23">{
      <if pos:line="26" pos:column="7">if<condition pos:line="26" pos:column="9">(<expr><name><name pos:line="26" pos:column="10">smtp<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">rcpt<pos:position pos:line="26" pos:column="20"/></name></name></expr>)<pos:position pos:line="26" pos:column="21"/></condition><then pos:line="26" pos:column="21"> <block pos:line="26" pos:column="22">{
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">smtp<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">-&gt;<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="15">rcpt<pos:position pos:line="27" pos:column="19"/></name></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <name><name pos:line="27" pos:column="22">smtp<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-&gt;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="28">rcpt<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">next<pos:position pos:line="27" pos:column="38"/></name></name></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>

        <if pos:line="29" pos:column="9">if<condition pos:line="29" pos:column="11">(<expr><name><name pos:line="29" pos:column="12">smtp<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">rcpt<pos:position pos:line="29" pos:column="22"/></name></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23"> <block pos:line="29" pos:column="24">{
          <comment type="block" pos:line="30" pos:column="11">/* Send the next command */</comment>
          <expr_stmt><expr><name pos:line="31" pos:column="11">result<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <call><name pos:line="31" pos:column="20">smtp_perform_command<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">conn<pos:position pos:line="31" pos:column="45"/></name></expr></argument>)<pos:position pos:line="31" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></then>
        <else pos:line="33" pos:column="9">else
          <comment type="block" pos:line="34" pos:column="11">/* End of DO phase */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="11">state<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">conn<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">SMTP_STOP<pos:position pos:line="35" pos:column="32"/></name></expr></argument>)<pos:position pos:line="35" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="34"/></expr_stmt></block></else></if>
      }<pos:position pos:line="36" pos:column="8"/></block></then>
      <else pos:line="37" pos:column="7">else
        <comment type="block" pos:line="38" pos:column="9">/* End of DO phase */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="9">state<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">conn<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="21">SMTP_STOP<pos:position pos:line="39" pos:column="30"/></name></expr></argument>)<pos:position pos:line="39" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="32"/></expr_stmt></block></else></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
  }<pos:position pos:line="41" pos:column="4"/></block></else></if>

  <return pos:line="43" pos:column="3">return <expr><name pos:line="43" pos:column="10">result<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
