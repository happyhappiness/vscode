<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1210_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ssh_getworkingpath<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">homedir<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>,  <comment type="block" pos:line="2" pos:column="52">/* when SFTP is used */</comment>
                                   <parameter><decl><type><name pos:line="3" pos:column="36">char<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier><modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">path<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list> <comment type="block" pos:line="3" pos:column="49">/* returns the  allocated
                                                   real path to work with */</comment>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">real_path<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><name pos:line="7" pos:column="21">NULL<pos:position pos:line="7" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">working_path<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">working_path_len<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">CURLcode<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">result<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">=
    <expr><call><name pos:line="11" pos:column="5">Curl_urldecode<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">data<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="26">data<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">-&gt;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="32">state<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">.<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">path<pos:position pos:line="11" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="44">0<pos:position pos:line="11" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="47">&amp;<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="48">working_path<pos:position pos:line="11" pos:column="60"/></name></expr></argument>,
                   <argument><expr><operator pos:line="12" pos:column="20">&amp;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="21">working_path_len<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="39">FALSE<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="46"/></decl_stmt>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">result<pos:position pos:line="13" pos:column="12"/></name></expr>)<pos:position pos:line="13" pos:column="13"/></condition><then pos:line="13" pos:column="13">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">result<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></return></block></then></if>

  <comment type="block" pos:line="16" pos:column="3">/* Check for /~/, indicating relative to the user's home directory */</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name><name pos:line="17" pos:column="6">conn<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">handler<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">protocol<pos:position pos:line="17" pos:column="29"/></name></name> <operator pos:line="17" pos:column="30">&amp;<pos:position pos:line="17" pos:column="35"/></operator> <name pos:line="17" pos:column="32">CURLPROTO_SCP<pos:position pos:line="17" pos:column="45"/></name></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">real_path<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <call><name pos:line="18" pos:column="17">malloc<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">working_path_len<pos:position pos:line="18" pos:column="40"/></name> <operator pos:line="18" pos:column="41">+<pos:position pos:line="18" pos:column="42"/></operator> <literal type="number" pos:line="18" pos:column="43">1<pos:position pos:line="18" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><name pos:line="19" pos:column="8">real_path<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">==<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">NULL<pos:position pos:line="19" pos:column="25"/></name></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26"> <block pos:line="19" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">free<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">working_path<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><name pos:line="21" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="21" pos:column="33"/></name></expr>;<pos:position pos:line="21" pos:column="34"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><operator pos:line="23" pos:column="8">(<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">working_path_len<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">&gt;<pos:position pos:line="23" pos:column="30"/></operator> <literal type="number" pos:line="23" pos:column="28">3<pos:position pos:line="23" pos:column="29"/></literal><operator pos:line="23" pos:column="29">)<pos:position pos:line="23" pos:column="30"/></operator> <operator pos:line="23" pos:column="31">&amp;&amp;<pos:position pos:line="23" pos:column="41"/></operator> <operator pos:line="23" pos:column="34">(<pos:position pos:line="23" pos:column="35"/></operator><operator pos:line="23" pos:column="35">!<pos:position pos:line="23" pos:column="36"/></operator><call><name pos:line="23" pos:column="36">memcmp<pos:position pos:line="23" pos:column="42"/></name><argument_list pos:line="23" pos:column="42">(<argument><expr><name pos:line="23" pos:column="43">working_path<pos:position pos:line="23" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="57">"/~/"<pos:position pos:line="23" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="64">3<pos:position pos:line="23" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call><operator pos:line="23" pos:column="66">)<pos:position pos:line="23" pos:column="67"/></operator></expr>)<pos:position pos:line="23" pos:column="68"/></condition><then pos:line="23" pos:column="68">
      <comment type="block" pos:line="24" pos:column="7">/* It is referenced to the home directory, so strip the leading '/~/' */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="7">memcpy<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">real_path<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="25">working_path<pos:position pos:line="25" pos:column="37"/></name> <operator pos:line="25" pos:column="38">+<pos:position pos:line="25" pos:column="39"/></operator> <literal type="number" pos:line="25" pos:column="40">3<pos:position pos:line="25" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="43">4<pos:position pos:line="25" pos:column="44"/></literal> <operator pos:line="25" pos:column="45">+<pos:position pos:line="25" pos:column="46"/></operator> <name pos:line="25" pos:column="47">working_path_len<pos:position pos:line="25" pos:column="63"/></name><operator pos:line="25" pos:column="63">-<pos:position pos:line="25" pos:column="64"/></operator><literal type="number" pos:line="25" pos:column="64">3<pos:position pos:line="25" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt></block></then>
    <else pos:line="26" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="7">memcpy<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">real_path<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="25">working_path<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="39">1<pos:position pos:line="27" pos:column="40"/></literal> <operator pos:line="27" pos:column="41">+<pos:position pos:line="27" pos:column="42"/></operator> <name pos:line="27" pos:column="43">working_path_len<pos:position pos:line="27" pos:column="59"/></name></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="61"/></expr_stmt></block></else></if>
  }<pos:position pos:line="28" pos:column="4"/></block></then>
  <elseif pos:line="29" pos:column="3">else <if pos:line="29" pos:column="8">if<condition pos:line="29" pos:column="10">(<expr><name><name pos:line="29" pos:column="11">conn<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">handler<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">-&gt;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="26">protocol<pos:position pos:line="29" pos:column="34"/></name></name> <operator pos:line="29" pos:column="35">&amp;<pos:position pos:line="29" pos:column="40"/></operator> <name pos:line="29" pos:column="37">CURLPROTO_SFTP<pos:position pos:line="29" pos:column="51"/></name></expr>)<pos:position pos:line="29" pos:column="52"/></condition><then pos:line="29" pos:column="52"> <block pos:line="29" pos:column="53">{
    <if pos:line="30" pos:column="5">if<condition pos:line="30" pos:column="7">(<expr><operator pos:line="30" pos:column="8">(<pos:position pos:line="30" pos:column="9"/></operator><name pos:line="30" pos:column="9">working_path_len<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">&gt;<pos:position pos:line="30" pos:column="30"/></operator> <literal type="number" pos:line="30" pos:column="28">1<pos:position pos:line="30" pos:column="29"/></literal><operator pos:line="30" pos:column="29">)<pos:position pos:line="30" pos:column="30"/></operator> <operator pos:line="30" pos:column="31">&amp;&amp;<pos:position pos:line="30" pos:column="41"/></operator> <operator pos:line="30" pos:column="34">(<pos:position pos:line="30" pos:column="35"/></operator><name><name pos:line="30" pos:column="35">working_path<pos:position pos:line="30" pos:column="47"/></name><index pos:line="30" pos:column="47">[<expr><literal type="number" pos:line="30" pos:column="48">1<pos:position pos:line="30" pos:column="49"/></literal></expr>]<pos:position pos:line="30" pos:column="50"/></index></name> <operator pos:line="30" pos:column="51">==<pos:position pos:line="30" pos:column="53"/></operator> <literal type="char" pos:line="30" pos:column="54">'~'<pos:position pos:line="30" pos:column="57"/></literal><operator pos:line="30" pos:column="57">)<pos:position pos:line="30" pos:column="58"/></operator></expr>)<pos:position pos:line="30" pos:column="59"/></condition><then pos:line="30" pos:column="59"> <block pos:line="30" pos:column="60">{
      <decl_stmt><decl><type><name pos:line="31" pos:column="7">size_t<pos:position pos:line="31" pos:column="13"/></name></type> <name pos:line="31" pos:column="14">homelen<pos:position pos:line="31" pos:column="21"/></name> <init pos:line="31" pos:column="22">= <expr><call><name pos:line="31" pos:column="24">strlen<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">homedir<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="40"/></decl_stmt>
      <expr_stmt><expr><name pos:line="32" pos:column="7">real_path<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">=<pos:position pos:line="32" pos:column="18"/></operator> <call><name pos:line="32" pos:column="19">malloc<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">homelen<pos:position pos:line="32" pos:column="33"/></name> <operator pos:line="32" pos:column="34">+<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="36">working_path_len<pos:position pos:line="32" pos:column="52"/></name> <operator pos:line="32" pos:column="53">+<pos:position pos:line="32" pos:column="54"/></operator> <literal type="number" pos:line="32" pos:column="55">1<pos:position pos:line="32" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>
      <if pos:line="33" pos:column="7">if<condition pos:line="33" pos:column="9">(<expr><name pos:line="33" pos:column="10">real_path<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">==<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">NULL<pos:position pos:line="33" pos:column="27"/></name></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28"> <block pos:line="33" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">free<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">working_path<pos:position pos:line="34" pos:column="26"/></name></expr></argument>)<pos:position pos:line="34" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>
        <return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="35" pos:column="35"/></name></expr>;<pos:position pos:line="35" pos:column="36"/></return>
      }<pos:position pos:line="36" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="37" pos:column="7">/* It is referenced to the home directory, so strip the
         leading '/' */</comment>
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">memcpy<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name pos:line="39" pos:column="14">real_path<pos:position pos:line="39" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="25">homedir<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="34">homelen<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">real_path<pos:position pos:line="40" pos:column="16"/></name><index pos:line="40" pos:column="16">[<expr><name pos:line="40" pos:column="17">homelen<pos:position pos:line="40" pos:column="24"/></name></expr>]<pos:position pos:line="40" pos:column="25"/></index></name> <operator pos:line="40" pos:column="26">=<pos:position pos:line="40" pos:column="27"/></operator> <literal type="char" pos:line="40" pos:column="28">'/'<pos:position pos:line="40" pos:column="31"/></literal></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="41" pos:column="7">real_path<pos:position pos:line="41" pos:column="16"/></name><index pos:line="41" pos:column="16">[<expr><name pos:line="41" pos:column="17">homelen<pos:position pos:line="41" pos:column="24"/></name> <operator pos:line="41" pos:column="25">+<pos:position pos:line="41" pos:column="26"/></operator> <literal type="number" pos:line="41" pos:column="27">1<pos:position pos:line="41" pos:column="28"/></literal></expr>]<pos:position pos:line="41" pos:column="29"/></index></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <literal type="char" pos:line="41" pos:column="32">'\0'<pos:position pos:line="41" pos:column="36"/></literal></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>
      <if pos:line="42" pos:column="7">if<condition pos:line="42" pos:column="9">(<expr><name pos:line="42" pos:column="10">working_path_len<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">&gt;<pos:position pos:line="42" pos:column="31"/></operator> <literal type="number" pos:line="42" pos:column="29">3<pos:position pos:line="42" pos:column="30"/></literal></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">memcpy<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">real_path<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">+<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="28">homelen<pos:position pos:line="43" pos:column="35"/></name> <operator pos:line="43" pos:column="36">+<pos:position pos:line="43" pos:column="37"/></operator> <literal type="number" pos:line="43" pos:column="38">1<pos:position pos:line="43" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="41">working_path<pos:position pos:line="43" pos:column="53"/></name> <operator pos:line="43" pos:column="54">+<pos:position pos:line="43" pos:column="55"/></operator> <literal type="number" pos:line="43" pos:column="56">3<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>,
               <argument><expr><literal type="number" pos:line="44" pos:column="16">1<pos:position pos:line="44" pos:column="17"/></literal> <operator pos:line="44" pos:column="18">+<pos:position pos:line="44" pos:column="19"/></operator> <name pos:line="44" pos:column="20">working_path_len<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">-<pos:position pos:line="44" pos:column="38"/></operator><literal type="number" pos:line="44" pos:column="38">3<pos:position pos:line="44" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="45" pos:column="8"/></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then>
    <else pos:line="47" pos:column="5">else <block pos:line="47" pos:column="10">{
      <expr_stmt><expr><name pos:line="48" pos:column="7">real_path<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <call><name pos:line="48" pos:column="19">malloc<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">working_path_len<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">+<pos:position pos:line="48" pos:column="44"/></operator> <literal type="number" pos:line="48" pos:column="45">1<pos:position pos:line="48" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt>
      <if pos:line="49" pos:column="7">if<condition pos:line="49" pos:column="9">(<expr><name pos:line="49" pos:column="10">real_path<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">==<pos:position pos:line="49" pos:column="22"/></operator> <name pos:line="49" pos:column="23">NULL<pos:position pos:line="49" pos:column="27"/></name></expr>)<pos:position pos:line="49" pos:column="28"/></condition><then pos:line="49" pos:column="28"> <block pos:line="49" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">free<pos:position pos:line="50" pos:column="13"/></name><argument_list pos:line="50" pos:column="13">(<argument><expr><name pos:line="50" pos:column="14">working_path<pos:position pos:line="50" pos:column="26"/></name></expr></argument>)<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
        <return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="51" pos:column="35"/></name></expr>;<pos:position pos:line="51" pos:column="36"/></return>
      }<pos:position pos:line="52" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">memcpy<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><name pos:line="53" pos:column="14">real_path<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="25">working_path<pos:position pos:line="53" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="39">1<pos:position pos:line="53" pos:column="40"/></literal> <operator pos:line="53" pos:column="41">+<pos:position pos:line="53" pos:column="42"/></operator> <name pos:line="53" pos:column="43">working_path_len<pos:position pos:line="53" pos:column="59"/></name></expr></argument>)<pos:position pos:line="53" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></else></if>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="57" pos:column="3">free<pos:position pos:line="57" pos:column="7"/></name><argument_list pos:line="57" pos:column="7">(<argument><expr><name pos:line="57" pos:column="8">working_path<pos:position pos:line="57" pos:column="20"/></name></expr></argument>)<pos:position pos:line="57" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="59" pos:column="3">/* store the pointer for the caller to receive */</comment>
  <expr_stmt><expr><operator pos:line="60" pos:column="3">*<pos:position pos:line="60" pos:column="4"/></operator><name pos:line="60" pos:column="4">path<pos:position pos:line="60" pos:column="8"/></name> <operator pos:line="60" pos:column="9">=<pos:position pos:line="60" pos:column="10"/></operator> <name pos:line="60" pos:column="11">real_path<pos:position pos:line="60" pos:column="20"/></name></expr>;<pos:position pos:line="60" pos:column="21"/></expr_stmt>

  <return pos:line="62" pos:column="3">return <expr><name pos:line="62" pos:column="10">CURLE_OK<pos:position pos:line="62" pos:column="18"/></name></expr>;<pos:position pos:line="62" pos:column="19"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
