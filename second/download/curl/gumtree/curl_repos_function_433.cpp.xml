<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_433.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_async_resolved<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">connectdata<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">conn<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">bool<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">protocol_done<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><call><name pos:line="4" pos:column="5">defined<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">USE_ARES<pos:position pos:line="4" pos:column="21"/></name></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call> <operator pos:line="4" pos:column="23">||<pos:position pos:line="4" pos:column="25"/></operator> <call><name pos:line="4" pos:column="26">defined<pos:position pos:line="4" pos:column="33"/></name><argument_list pos:line="4" pos:column="33">(<argument><expr><name pos:line="4" pos:column="34">USE_THREADING_GETHOSTBYNAME<pos:position pos:line="4" pos:column="61"/></name></expr></argument>)<pos:position pos:line="4" pos:column="62"/></argument_list></call> <operator pos:line="4" pos:column="63">||<pos:position pos:line="4" pos:column="65"/></operator> \
    <call><name pos:line="5" pos:column="5">defined<pos:position pos:line="5" pos:column="12"/></name><argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">USE_THREADING_GETADDRINFO<pos:position pos:line="5" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">code<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><call><name pos:line="6" pos:column="19">SetupConnection<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">conn<pos:position pos:line="6" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="41">conn<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">async<pos:position pos:line="6" pos:column="52"/></name><operator pos:line="6" pos:column="52">.<pos:position pos:line="6" pos:column="53"/></operator><name pos:line="6" pos:column="53">dns<pos:position pos:line="6" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="58">protocol_done<pos:position pos:line="6" pos:column="71"/></name></expr></argument>)<pos:position pos:line="6" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="73"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name pos:line="8" pos:column="6">code<pos:position pos:line="8" pos:column="10"/></name></expr>)<pos:position pos:line="8" pos:column="11"/></condition><then pos:line="8" pos:column="11">
    <comment type="block" pos:line="9" pos:column="5">/* We're not allowed to return failure with memory left allocated
       in the connectdata struct, free those here */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="5">Curl_disconnect<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">conn<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt></block></then></if> <comment type="block" pos:line="11" pos:column="28">/* close the connection */</comment>

  <return pos:line="13" pos:column="3">return <expr><name pos:line="13" pos:column="10">code<pos:position pos:line="13" pos:column="14"/></name></expr>;<pos:position pos:line="13" pos:column="15"/></return>
<cpp:else pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">else<pos:position pos:line="14" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="15" pos:column="3">(<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">void<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">)<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">conn<pos:position pos:line="15" pos:column="13"/></name></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="16" pos:column="3">(<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">void<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">)<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">protocol_done<pos:position pos:line="16" pos:column="22"/></name></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
  <return pos:line="17" pos:column="3">return <expr><name pos:line="17" pos:column="10">CURLE_OK<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></return>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
