<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_121.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">GetLastResponse<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">sockfd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>,
                    <parameter><decl><type><name><name pos:line="2" pos:column="21">struct<pos:position pos:line="2" pos:column="27"/></name> <name pos:line="2" pos:column="28">connectdata<pos:position pos:line="2" pos:column="39"/></name></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">conn<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nread<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">keepon<pos:position pos:line="5" pos:column="13"/></name><init pos:line="5" pos:column="13">=<expr><name pos:line="5" pos:column="14">TRUE<pos:position pos:line="5" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">ptr<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">timeout<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><literal type="number" pos:line="7" pos:column="17">3600<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt> <comment type="block" pos:line="7" pos:column="23">/* in seconds */</comment>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">timeval<pos:position pos:line="8" pos:column="17"/></name></name></type> <name pos:line="8" pos:column="18">interval<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">fd_set<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">rkeepfd<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">fd_set<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">readfd<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">UrlData<pos:position pos:line="11" pos:column="17"/></name></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">data<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><name><name pos:line="11" pos:column="26">conn<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">-&gt;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="32">data<pos:position pos:line="11" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>

<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define<pos:position pos:line="13" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">SELECT_OK<pos:position pos:line="13" pos:column="18"/></name></cpp:macro>      <cpp:value pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">SELECT_ERROR<pos:position pos:line="14" pos:column="21"/></name></cpp:macro>   <cpp:value pos:line="14" pos:column="24">1<pos:position pos:line="14" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">define<pos:position pos:line="15" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="15" pos:column="9">SELECT_TIMEOUT<pos:position pos:line="15" pos:column="23"/></name></cpp:macro> <cpp:value pos:line="15" pos:column="24">2<pos:position pos:line="15" pos:column="25"/></cpp:value></cpp:define>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">error<pos:position pos:line="16" pos:column="12"/></name> <init pos:line="16" pos:column="13">= <expr><name pos:line="16" pos:column="15">SELECT_OK<pos:position pos:line="16" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="25"/></decl_stmt>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name><name pos:line="18" pos:column="6">data<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">timeout<pos:position pos:line="18" pos:column="19"/></name></name></expr>)<pos:position pos:line="18" pos:column="20"/></condition><then pos:line="18" pos:column="20"> <block pos:line="18" pos:column="21">{
    <comment type="block" pos:line="19" pos:column="5">/* if timeout is requested, find out how much remaining time we have */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">timeout<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name><name pos:line="20" pos:column="15">data<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">timeout<pos:position pos:line="20" pos:column="28"/></name></name> <operator pos:line="20" pos:column="29">-<pos:position pos:line="20" pos:column="30"/></operator> <comment type="block" pos:line="20" pos:column="31">/* timeout time */</comment>
      <operator pos:line="21" pos:column="7">(<pos:position pos:line="21" pos:column="8"/></operator><call><name pos:line="21" pos:column="8">tvlong<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><call><name pos:line="21" pos:column="15">tvnow<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">()<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="23"/></argument_list></call> <operator pos:line="21" pos:column="24">-<pos:position pos:line="21" pos:column="25"/></operator> <call><name pos:line="21" pos:column="26">tvlong<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name><name pos:line="21" pos:column="33">conn<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">-&gt;<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="39">now<pos:position pos:line="21" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call><operator pos:line="21" pos:column="43">)<pos:position pos:line="21" pos:column="44"/></operator></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt> <comment type="block" pos:line="21" pos:column="46">/* spent time */</comment>
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><name pos:line="22" pos:column="8">timeout<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">&lt;=<pos:position pos:line="22" pos:column="21"/></operator><literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr> )<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21"> <block pos:line="22" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">failf<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">data<pos:position pos:line="23" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="19">"Transfer aborted due to timeout"<pos:position pos:line="23" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
      <return pos:line="24" pos:column="7">return <expr><operator pos:line="24" pos:column="14">-<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">SELECT_TIMEOUT<pos:position pos:line="24" pos:column="29"/></name></expr>;<pos:position pos:line="24" pos:column="30"/></return> <comment type="block" pos:line="24" pos:column="31">/* already too little time */</comment>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">FD_ZERO<pos:position pos:line="28" pos:column="10"/></name> <argument_list pos:line="28" pos:column="11">(<argument><expr><operator pos:line="28" pos:column="12">&amp;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="13">readfd<pos:position pos:line="28" pos:column="19"/></name></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="28" pos:column="33">/* clear it */</comment>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">FD_SET<pos:position pos:line="29" pos:column="9"/></name> <argument_list pos:line="29" pos:column="10">(<argument><expr><name pos:line="29" pos:column="11">sockfd<pos:position pos:line="29" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="19">&amp;<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="20">readfd<pos:position pos:line="29" pos:column="26"/></name></expr></argument>)<pos:position pos:line="29" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="29" pos:column="33">/* read socket */</comment>

  <comment type="block" pos:line="31" pos:column="3">/* get this in a backup variable to be able to restore it on each lap in the
     select() loop */</comment>
  <expr_stmt><expr><name pos:line="33" pos:column="3">rkeepfd<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <name pos:line="33" pos:column="13">readfd<pos:position pos:line="33" pos:column="19"/></name></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>

  <do pos:line="35" pos:column="3">do <block pos:line="35" pos:column="6">{
    <expr_stmt><expr><name pos:line="36" pos:column="5">ptr<pos:position pos:line="36" pos:column="8"/></name><operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator><name pos:line="36" pos:column="9">buf<pos:position pos:line="36" pos:column="12"/></name></expr>;<pos:position pos:line="36" pos:column="13"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* get us a full line, terminated with a newline */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">nread<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator><literal type="number" pos:line="39" pos:column="11">0<pos:position pos:line="39" pos:column="12"/></literal></expr>;<pos:position pos:line="39" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">keepon<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator><name pos:line="40" pos:column="12">TRUE<pos:position pos:line="40" pos:column="16"/></name></expr>;<pos:position pos:line="40" pos:column="17"/></expr_stmt>
    <while pos:line="41" pos:column="5">while<condition pos:line="41" pos:column="10">(<expr><operator pos:line="41" pos:column="11">(<pos:position pos:line="41" pos:column="12"/></operator><name pos:line="41" pos:column="12">nread<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">&lt;<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="18">BUFSIZE<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">)<pos:position pos:line="41" pos:column="26"/></operator> <operator pos:line="41" pos:column="27">&amp;&amp;<pos:position pos:line="41" pos:column="37"/></operator> <operator pos:line="41" pos:column="30">(<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="31">keepon<pos:position pos:line="41" pos:column="37"/></name> <operator pos:line="41" pos:column="38">&amp;&amp;<pos:position pos:line="41" pos:column="48"/></operator> <operator pos:line="41" pos:column="41">!<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="42">error<pos:position pos:line="41" pos:column="47"/></name><operator pos:line="41" pos:column="47">)<pos:position pos:line="41" pos:column="48"/></operator></expr>)<pos:position pos:line="41" pos:column="49"/></condition> <block pos:line="41" pos:column="50">{
      <expr_stmt><expr><name pos:line="42" pos:column="7">readfd<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <name pos:line="42" pos:column="16">rkeepfd<pos:position pos:line="42" pos:column="23"/></name></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>		   <comment type="block" pos:line="42" pos:column="36">/* set every lap */</comment>
      <expr_stmt><expr><name><name pos:line="43" pos:column="7">interval<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">.<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="16">tv_sec<pos:position pos:line="43" pos:column="22"/></name></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">timeout<pos:position pos:line="43" pos:column="32"/></name></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="44" pos:column="7">interval<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">.<pos:position pos:line="44" pos:column="16"/></operator><name pos:line="44" pos:column="16">tv_usec<pos:position pos:line="44" pos:column="23"/></name></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="26">0<pos:position pos:line="44" pos:column="27"/></literal></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>

      <switch pos:line="46" pos:column="7">switch <condition pos:line="46" pos:column="14">(<expr><call><name pos:line="46" pos:column="15">select<pos:position pos:line="46" pos:column="21"/></name> <argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">sockfd<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">+<pos:position pos:line="46" pos:column="30"/></operator><literal type="number" pos:line="46" pos:column="30">1<pos:position pos:line="46" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="33">&amp;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="34">readfd<pos:position pos:line="46" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="42">NULL<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="48">NULL<pos:position pos:line="46" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="54">&amp;<pos:position pos:line="46" pos:column="59"/></operator><name pos:line="46" pos:column="55">interval<pos:position pos:line="46" pos:column="63"/></name></expr></argument>)<pos:position pos:line="46" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="65"/></condition> <block pos:line="46" pos:column="66">{
      <case pos:line="47" pos:column="7">case <expr><operator pos:line="47" pos:column="12">-<pos:position pos:line="47" pos:column="13"/></operator><literal type="number" pos:line="47" pos:column="13">1<pos:position pos:line="47" pos:column="14"/></literal></expr>:<pos:position pos:line="47" pos:column="15"/></case> <comment type="block" pos:line="47" pos:column="16">/* select() error, stop reading */</comment>
        <expr_stmt><expr><name pos:line="48" pos:column="9">error<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">SELECT_ERROR<pos:position pos:line="48" pos:column="29"/></name></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">failf<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">data<pos:position pos:line="49" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="21">"Transfer aborted due to select() error"<pos:position pos:line="49" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="63"/></expr_stmt>
        <break pos:line="50" pos:column="9">break;<pos:position pos:line="50" pos:column="15"/></break>
      <case pos:line="51" pos:column="7">case <expr><literal type="number" pos:line="51" pos:column="12">0<pos:position pos:line="51" pos:column="13"/></literal></expr>:<pos:position pos:line="51" pos:column="14"/></case> <comment type="block" pos:line="51" pos:column="15">/* timeout */</comment>
        <expr_stmt><expr><name pos:line="52" pos:column="9">error<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <name pos:line="52" pos:column="17">SELECT_TIMEOUT<pos:position pos:line="52" pos:column="31"/></name></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">infof<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">data<pos:position pos:line="53" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="21">"Transfer aborted due to timeout\n"<pos:position pos:line="53" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">failf<pos:position pos:line="54" pos:column="14"/></name><argument_list pos:line="54" pos:column="14">(<argument><expr><name pos:line="54" pos:column="15">data<pos:position pos:line="54" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="21">"Transfer aborted due to timeout"<pos:position pos:line="54" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="56"/></expr_stmt>
        <break pos:line="55" pos:column="9">break;<pos:position pos:line="55" pos:column="15"/></break>
      <default pos:line="56" pos:column="7">default:<pos:position pos:line="56" pos:column="15"/></default>
<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">USE_SSLEAY<pos:position pos:line="57" pos:column="18"/></name></cpp:ifdef>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name><name pos:line="58" pos:column="13">data<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">-&gt;<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="19">use_ssl<pos:position pos:line="58" pos:column="26"/></name></name></expr>)<pos:position pos:line="58" pos:column="27"/></condition><then pos:line="58" pos:column="27"> <block pos:line="58" pos:column="28">{
          <expr_stmt><expr><name pos:line="59" pos:column="11">keepon<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">=<pos:position pos:line="59" pos:column="19"/></operator> <call><name pos:line="59" pos:column="20">SSL_read<pos:position pos:line="59" pos:column="28"/></name><argument_list pos:line="59" pos:column="28">(<argument><expr><name><name pos:line="59" pos:column="29">data<pos:position pos:line="59" pos:column="33"/></name><operator pos:line="59" pos:column="33">-&gt;<pos:position pos:line="59" pos:column="38"/></operator><name pos:line="59" pos:column="35">ssl<pos:position pos:line="59" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="40">ptr<pos:position pos:line="59" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="45">1<pos:position pos:line="59" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="60" pos:column="10"/></block></then>
        <else pos:line="61" pos:column="9">else <block pos:line="61" pos:column="14">{
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>
          <expr_stmt><expr><name pos:line="63" pos:column="11">keepon<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <call><name pos:line="63" pos:column="20">sread<pos:position pos:line="63" pos:column="25"/></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">sockfd<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">ptr<pos:position pos:line="63" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="39">1<pos:position pos:line="63" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
<cpp:ifdef pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">ifdef<pos:position pos:line="64" pos:column="7"/></cpp:directive> <name pos:line="64" pos:column="8">USE_SSLEAY<pos:position pos:line="64" pos:column="18"/></name></cpp:ifdef>
        }<pos:position pos:line="65" pos:column="10"/></block></else></if>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="66" pos:column="8">/* USE_SSLEAY */</comment>

        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><operator pos:line="68" pos:column="13">(<pos:position pos:line="68" pos:column="14"/></operator><operator pos:line="68" pos:column="14">*<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="15">ptr<pos:position pos:line="68" pos:column="18"/></name> <operator pos:line="68" pos:column="19">==<pos:position pos:line="68" pos:column="21"/></operator> <literal type="char" pos:line="68" pos:column="22">'\n'<pos:position pos:line="68" pos:column="26"/></literal><operator pos:line="68" pos:column="26">)<pos:position pos:line="68" pos:column="27"/></operator> <operator pos:line="68" pos:column="28">||<pos:position pos:line="68" pos:column="30"/></operator> <operator pos:line="68" pos:column="31">(<pos:position pos:line="68" pos:column="32"/></operator><operator pos:line="68" pos:column="32">*<pos:position pos:line="68" pos:column="33"/></operator><name pos:line="68" pos:column="33">ptr<pos:position pos:line="68" pos:column="36"/></name> <operator pos:line="68" pos:column="37">==<pos:position pos:line="68" pos:column="39"/></operator> <literal type="char" pos:line="68" pos:column="40">'\r'<pos:position pos:line="68" pos:column="44"/></literal><operator pos:line="68" pos:column="44">)<pos:position pos:line="68" pos:column="45"/></operator></expr>)<pos:position pos:line="68" pos:column="46"/></condition><then pos:line="68" pos:column="46">
          <block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="11">keepon<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">=<pos:position pos:line="69" pos:column="19"/></operator> <name pos:line="69" pos:column="20">FALSE<pos:position pos:line="69" pos:column="25"/></name></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt></block></then></if>
      }<pos:position pos:line="70" pos:column="8"/></block></switch>
      <if pos:line="71" pos:column="7">if<condition pos:line="71" pos:column="9">(<expr><name pos:line="71" pos:column="10">keepon<pos:position pos:line="71" pos:column="16"/></name></expr>)<pos:position pos:line="71" pos:column="17"/></condition><then pos:line="71" pos:column="17"> <block pos:line="71" pos:column="18">{
        <expr_stmt><expr><name pos:line="72" pos:column="9">nread<pos:position pos:line="72" pos:column="14"/></name><operator pos:line="72" pos:column="14">++<pos:position pos:line="72" pos:column="16"/></operator></expr>;<pos:position pos:line="72" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="73" pos:column="9">ptr<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">++<pos:position pos:line="73" pos:column="14"/></operator></expr>;<pos:position pos:line="73" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="74" pos:column="8"/></block></then></if>
    }<pos:position pos:line="75" pos:column="6"/></block></while>
    <expr_stmt><expr><operator pos:line="76" pos:column="5">*<pos:position pos:line="76" pos:column="6"/></operator><name pos:line="76" pos:column="6">ptr<pos:position pos:line="76" pos:column="9"/></name><operator pos:line="76" pos:column="9">=<pos:position pos:line="76" pos:column="10"/></operator><literal type="number" pos:line="76" pos:column="10">0<pos:position pos:line="76" pos:column="11"/></literal></expr>;<pos:position pos:line="76" pos:column="12"/></expr_stmt> <comment type="block" pos:line="76" pos:column="13">/* zero terminate */</comment>

    <if pos:line="78" pos:column="5">if<condition pos:line="78" pos:column="7">(<expr><name><name pos:line="78" pos:column="8">data<pos:position pos:line="78" pos:column="12"/></name><operator pos:line="78" pos:column="12">-&gt;<pos:position pos:line="78" pos:column="17"/></operator><name pos:line="78" pos:column="14">bits<pos:position pos:line="78" pos:column="18"/></name><operator pos:line="78" pos:column="18">.<pos:position pos:line="78" pos:column="19"/></operator><name pos:line="78" pos:column="19">verbose<pos:position pos:line="78" pos:column="26"/></name></name> <operator pos:line="78" pos:column="27">&amp;&amp;<pos:position pos:line="78" pos:column="37"/></operator> <name><name pos:line="78" pos:column="30">buf<pos:position pos:line="78" pos:column="33"/></name><index pos:line="78" pos:column="33">[<expr><literal type="number" pos:line="78" pos:column="34">0<pos:position pos:line="78" pos:column="35"/></literal></expr>]<pos:position pos:line="78" pos:column="36"/></index></name></expr>)<pos:position pos:line="78" pos:column="37"/></condition><then pos:line="78" pos:column="37"> <block pos:line="78" pos:column="38">{
      <expr_stmt><expr><call><name pos:line="79" pos:column="7">fputs<pos:position pos:line="79" pos:column="12"/></name><argument_list pos:line="79" pos:column="12">(<argument><expr><literal type="string" pos:line="79" pos:column="13">"&lt; "<pos:position pos:line="79" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="19">data<pos:position pos:line="79" pos:column="23"/></name><operator pos:line="79" pos:column="23">-&gt;<pos:position pos:line="79" pos:column="28"/></operator><name pos:line="79" pos:column="25">err<pos:position pos:line="79" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="80" pos:column="7">fwrite<pos:position pos:line="80" pos:column="13"/></name><argument_list pos:line="80" pos:column="13">(<argument><expr><name pos:line="80" pos:column="14">buf<pos:position pos:line="80" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="19">1<pos:position pos:line="80" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="22">nread<pos:position pos:line="80" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="29">data<pos:position pos:line="80" pos:column="33"/></name><operator pos:line="80" pos:column="33">-&gt;<pos:position pos:line="80" pos:column="38"/></operator><name pos:line="80" pos:column="35">err<pos:position pos:line="80" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="81" pos:column="7">fputs<pos:position pos:line="81" pos:column="12"/></name><argument_list pos:line="81" pos:column="12">(<argument><expr><literal type="string" pos:line="81" pos:column="13">"\n"<pos:position pos:line="81" pos:column="17"/></literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="19">data<pos:position pos:line="81" pos:column="23"/></name><operator pos:line="81" pos:column="23">-&gt;<pos:position pos:line="81" pos:column="28"/></operator><name pos:line="81" pos:column="25">err<pos:position pos:line="81" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>
  }<pos:position pos:line="83" pos:column="4"/></block> while<condition pos:line="83" pos:column="10">(<expr><operator pos:line="83" pos:column="11">!<pos:position pos:line="83" pos:column="12"/></operator><name pos:line="83" pos:column="12">error<pos:position pos:line="83" pos:column="17"/></name> <operator pos:line="83" pos:column="18">&amp;&amp;<pos:position pos:line="83" pos:column="28"/></operator>
	  <operator pos:line="84" pos:column="11">(<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="12">nread<pos:position pos:line="84" pos:column="17"/></name><operator pos:line="84" pos:column="17">&lt;<pos:position pos:line="84" pos:column="21"/></operator><literal type="number" pos:line="84" pos:column="18">4<pos:position pos:line="84" pos:column="19"/></literal> <operator pos:line="84" pos:column="20">||<pos:position pos:line="84" pos:column="22"/></operator> <operator pos:line="84" pos:column="23">!<pos:position pos:line="84" pos:column="24"/></operator><call><name pos:line="84" pos:column="24">lastline<pos:position pos:line="84" pos:column="32"/></name><argument_list pos:line="84" pos:column="32">(<argument><expr><name pos:line="84" pos:column="33">buf<pos:position pos:line="84" pos:column="36"/></name></expr></argument>)<pos:position pos:line="84" pos:column="37"/></argument_list></call><operator pos:line="84" pos:column="37">)<pos:position pos:line="84" pos:column="38"/></operator></expr> )<pos:position pos:line="84" pos:column="40"/></condition>;<pos:position pos:line="84" pos:column="41"/></do>
  
  <if pos:line="86" pos:column="3">if<condition pos:line="86" pos:column="5">(<expr><name pos:line="86" pos:column="6">error<pos:position pos:line="86" pos:column="11"/></name></expr>)<pos:position pos:line="86" pos:column="12"/></condition><then pos:line="86" pos:column="12">
    <block type="pseudo"><return pos:line="87" pos:column="5">return <expr><operator pos:line="87" pos:column="12">-<pos:position pos:line="87" pos:column="13"/></operator><name pos:line="87" pos:column="13">error<pos:position pos:line="87" pos:column="18"/></name></expr>;<pos:position pos:line="87" pos:column="19"/></return></block></then></if>

  <return pos:line="89" pos:column="3">return <expr><name pos:line="89" pos:column="10">nread<pos:position pos:line="89" pos:column="15"/></name></expr>;<pos:position pos:line="89" pos:column="16"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
