"                                  _   _ ____  _     \n"
"  Project                     ___| | | |  _ \\| |    \n"
"                             / __| | | | |_) | |    \n"
"                            | (__| |_| |  _ <| |___ \n"
"                             \\___|\\___/|_| \\_\\_____|\n"
"NAME\n"
"     curl - transfer a URL\n"
"\n"
"SYNOPSIS\n"
"     curl [options] [URL...]\n"
"\n"
"DESCRIPTION\n"
"     curl  is  a client to get documents/files from or send docu­\n"
"     ments to a server, using  any  of  the  supported  protocols\n"
);
 puts(
"     (HTTP,  HTTPS, FTP, GOPHER, DICT, TELNET, LDAP or FILE). The\n"
"     command is designed to work without user interaction or  any\n"
"     kind of interactivity.\n"
"\n"
"     curl  offers  a busload of useful tricks like proxy support,\n"
"     user authentication, ftp upload,  HTTP  post,  SSL  (https:)\n"
"     connections, cookies, file transfer resume and more.\n"
"\n"
"URL\n"
"     The URL syntax is protocol dependent. You'll find a detailed\n"
"     description in RFC 2396.\n"
"\n"
);
 puts(
"     You can specify multiple URLs or parts of  URLs  by  writing\n"
"     part sets within braces as in:\n"
"\n"
"      http://site.{one,two,three}.com\n"
"\n"
"     or  you can get sequences of alphanumeric series by using []\n"
"     as in:\n"
"\n"
"      ftp://ftp.numericals.com/file[1-100].txt\n"
"      ftp://ftp.numericals.com/file[001-100].txt    (with leading\n"
"     zeros)\n"
"      ftp://ftp.letters.com/file[a-z].txt\n"
"\n"
"     It  is possible to specify up to 9 sets or series for a URL,\n"
);
 puts(
"     but no nesting is supported at the moment:\n"
"\n"
"      http://www.any.org/archive[1996-1999]/vol­\n"
"     ume[1-4]part{a,b,c,index}.html\n"
"\n"
"     You can specify any amount of URLs on the command line. They\n"
"     will be fetched in a  sequential  manner  in  the  specified\n"
"     order.\n"
"\n"
"     Curl  will  attempt  to re-use connections for multiple file\n"
"     transfers, so that getting many files from the  same  server\n"
"     will  not  do  multiple connects / handshakes. This improves\n"
);
 puts(
"     speed. Of course this is only done on files specified  on  a\n"
"     single command line and cannot be used between separate curl\n"
"     invokes.\n"
"OPTIONS\n"
"     -a/--append\n"
"          (FTP) When used in a ftp upload, this will tell curl to\n"
"          append to the target file instead of overwriting it. If\n"
"          the file doesn't exist, it will be created.\n"
"\n"
"          If this option is used twice, the second one will  dis­\n"
"          able append mode again.\n"
"\n"
"     -A/--user-agent <agent string>\n"
);
 puts(
"          (HTTP)  Specify  the  User-Agent  string to send to the\n"
"          HTTP server. Some badly done CGIs fail if its  not  set\n"
"          to \"Mozilla/4.0\".  To encode blanks in the string, sur­\n"
"          round the string with single  quote  marks.   This  can\n"
"          also be set with the -H/--header flag of course.\n"
"\n"
"          If this option is set more than once, the last one will\n"
"          be the one that's used.\n"
"\n"
"     -b/--cookie <name=data>\n"
);
 puts(
"          (HTTP) Pass the data to the HTTP server as a cookie. It\n"
"          is  supposedly  the  data  previously received from the\n"
"          server in a \"Set-Cookie:\" line.  The data should be  in\n"
"          the format \"NAME1=VALUE1; NAME2=VALUE2\".\n"
"\n"
"          If  no '=' letter is used in the line, it is treated as\n"
"          a filename to use  to  read  previously  stored  cookie\n"
"          lines  from,  which  should  be used in this session if\n"
);
 puts(
"          they  match.  Using  this  method  also  activates  the\n"
"          \"cookie  parser\"  which  will make curl record incoming\n"
"          cookies too, which may be handy if you're using this in\n"
"          combination  with  the  -L/--location  option. The file\n"
"          format of the file to read cookies from should be plain\n"
"          HTTP  headers  or the Netscape/Mozilla cookie file for­\n"
"          mat.\n"
"\n"
"          NOTE that the file specified with -b/--cookie  is  only\n"
);
 puts(
"          used  as  input. No cookies will be stored in the file.\n"
"          To store cookies, save the HTTP headers to a file using\n"
"          -D/--dump-header!\n"
"\n"
"          If this option is set more than once, the last one will\n"
"          be the one that's used.\n"
"\n"
"     -B/--use-ascii\n"
"          Use ASCII transfer when getting an  FTP  file  or  LDAP\n"
"          info.  For  FTP,  this can also be enforced by using an\n"
"          URL that ends with \";type=A\". This option  causes  data\n"
);
 puts(
"          sent to stdout to be in text mode for win32 systems.\n"
"\n"
"          If  this option is used twice, the second one will dis­\n"
"          able ASCII usage.\n"
"     --ciphers <list of ciphers>\n"
"          (SSL) Specifies which ciphers to use in the connection.\n"
"          The  list  of ciphers must be using valid ciphers. Read\n"
"          up  on  SSL  cipher   list   details   on   this   URL:\n"
"          http://www.openssl.org/docs/apps/ciphers.html   (Option\n"
"          added in curl 7.9)\n"
"\n"
);
 puts(
"          If this option is used several times, the last one will\n"
"          override the others.\n"
"\n"
"     --connect-timeout <seconds>\n"
"          Maximum  time  in seconds that you allow the connection\n"
"          to the server to take.  This only limits the connection\n"
"          phase,  once  curl  has  connected this option is of no\n"
"          more use. See also the --max-time option.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
);
 puts(
"     -c/--cookie-jar <file name>\n"
"          Specify  to which file you want curl to write all cook­\n"
"          ies after a completed operation. Curl writes all  cook­\n"
"          ies  previously  read  from a specified file as well as\n"
"          all cookies received from remote server(s). If no cook­\n"
"          ies  are  known, no file will be written. The file will\n"
"          be written using the Netscape cookie  file  format.  If\n"
"          you  set the file name to a single dash, \"-\", the cook­\n"
);
 puts(
"          ies will be written to stdout. (Option  added  in  curl\n"
"          7.9)\n"
"\n"
"          If this option is used several times, the last specfied\n"
"          file name will be used.\n"
"\n"
"     -C/--continue-at <offset>\n"
"          Continue/Resume a previous file transfer at  the  given\n"
"          offset.  The  given offset is the exact number of bytes\n"
"          that will be skipped counted from the beginning of  the\n"
"          source file before it is transfered to the destination.\n"
);
 puts(
"          If used with uploads, the ftp server command SIZE  will\n"
"          not be used by curl.\n"
"\n"
"          Use  \"-C  -\"  to  tell  curl  to automatically find out\n"
"          where/how to resume the  transfer.  It  then  uses  the\n"
"          given output/input files to figure that out.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     --crlf\n"
"          (FTP) Convert LF to CRLF  in  upload.  Useful  for  MVS\n"
"          (OS/390).\n"
);
 puts(
"          If  this  option  is  used twice, the second will again\n"
"          disable crlf converting.\n"
"\n"
"     -d/--data <data>\n"
"          (HTTP) Sends the specified data in a  POST  request  to\n"
"          the HTTP server, in a way that can emulate as if a user\n"
"          has filled in a HTML form and pressed the  submit  but­\n"
"          ton.  Note  that  the data is sent exactly as specified\n"
"          with no extra processing (with all newlines  cut  off).\n"
);
 puts(
"          The  data  is  expected  to be \"url-encoded\". This will\n"
"          cause curl to pass the data to  the  server  using  the\n"
"          content-type application/x-www-form-urlencoded. Compare\n"
"          to -F. If more than one -d/--data option is used on the\n"
"          same  command  line,  the data pieces specified will be\n"
"          merged together with a separating &-letter. Thus, using\n"
"          '-d  name=daniel  -d skill=lousy' would generate a post\n"
);
 puts(
"          chunk that looks like 'name=daniel&skill=lousy'.\n"
"\n"
"          If you start the data  with  the  letter  @,  the  rest\n"
"          should  be  a  file name to read the data from, or - if\n"
"          you want curl to read the data from  stdin.   The  con­\n"
"          tents of the file must already be url-encoded. Multiple\n"
"          files can also be specified. Posting data from  a  file\n"
"          named  'foobar'  would  thus be done with \"--data @foo­\n"
"          bar\".\n"
"\n"
);
 puts(
"          To post data purely binary, you should instead use  the\n"
"          --data-binary option.\n"
"\n"
"          -d/--data is the same as --data-ascii.\n"
"\n"
"          If  this option is used several times, the ones follow­\n"
"          ing the first will append data.\n"
"\n"
"     --data-ascii <data>\n"
"          (HTTP) This is an alias for the -d/--data option.\n"
"\n"
"          If this option is used several times, the ones  follow­\n"
"          ing the first will append data.\n"
"\n"
"     --data-binary <data>\n"
);
 puts(
"          (HTTP)  This  posts data in a similar manner as --data-\n"
"          ascii does, although when using this option the  entire\n"
"          context  of  the posted data is kept as-is. If you want\n"
"          to post a binary file without the  strip-newlines  fea­\n"
"          ture of the --data-ascii option, this is for you.\n"
"\n"
"          If  this option is used several times, the ones follow­\n"
"          ing the first will append data.\n"
"\n"
"     --disable-epsv\n"
);
 puts(
"          (FTP) Tell curl to disable the use of the EPSV  command\n"
"          when  doing  passive  FTP downloads. Curl will normally\n"
"          always first attempt to use EPSV before PASV, but  with\n"
"          this option, it will not try using EPSV.\n"
"\n"
"          If  this  option is used several times, each occurrence\n"
"          will toggle this on/off.\n"
"\n"
"     -D/--dump-header <file>\n"
"          Write the protocol headers to the specified file.\n"
"\n"
);
 puts(
"          This option is handy to use when you want to store  the\n"
"          cookies  that  a  HTTP  site  sends to you. The cookies\n"
"          could then be read in a second curl invoke by using the\n"
"          -b/--cookie option!\n"
"\n"
"          When  used  on  FTP,  the ftp server response lines are\n"
"          considered being \"headers\" and thus are saved there.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -e/--referer <URL>\n"
);
 puts(
"          (HTTP) Sends the \"Referer Page\" information to the HTTP\n"
"          server. This can also be set with the -H/--header  flag\n"
"          of course.  When used with -L/--location you can append\n"
"          \";auto\" to the referer URL to make  curl  automatically\n"
"          set  the  previous  URL  when  it  follows  a Location:\n"
"          header. The \";auto\" string can be used alone,  even  if\n"
"          you don't set an initial referer.\n"
"\n"
);
 puts(
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     --environment\n"
"          (RISC OS ONLY) Sets a range of  environment  variables,\n"
"          using the names the -w option supports, to easier allow\n"
"          extraction of useful information after having run curl.\n"
"\n"
"          If  this  option is used several times, each occurrence\n"
"          will toggle this on/off.\n"
"\n"
"     --egd-file <file>\n"
"          (HTTPS) Specify the path name to the Entropy  Gathering\n"
);
 puts(
"          Daemon  socket.  The  socket is used to seed the random\n"
"          engine for SSL connections. See also the  --random-file\n"
"          option.\n"
"\n"
"     -E/--cert <certificate[:password]>\n"
"          (HTTPS)  Tells  curl  to  use the specified certificate\n"
"          file when getting a file with  HTTPS.  The  certificate\n"
"          must  be in PEM format.  If the optional password isn't\n"
"          specified, it will be queried for on the terminal. Note\n"
);
 puts(
"          that  this  certificate is the private key and the pri­\n"
"          vate certificate concatenated!\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     --cacert <CA certificate>\n"
"          (HTTPS)  Tells  curl  to  use the specified certificate\n"
"          file to verify the peer. The file may contain  multiple\n"
"          CA certificates. The certificate(s) must be in PEM for­\n"
"          mat.\n"
"\n"
);
 puts(
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     --capath <CA certificate directory>\n"
"          (HTTPS)  Tells  curl  to  use the specified certificate\n"
"          directory to verify the peer. The certificates must  be\n"
"          in  PEM  format,  and the directory must have been pro­\n"
"          cessed  using  the  c_rehash  utility   supplied   with\n"
"          openssl.  Certificate  directories  are  not  supported\n"
);
 puts(
"          under Windows (because c_rehash uses symbolink links to\n"
"          create  them).  Using  --capath  can allow curl to make\n"
"          https connections  much  more  efficiently  than  using\n"
"          --cacert if the --cacert file contains many CA certifi­\n"
"          cates.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -f/--fail\n"
"          (HTTP)  Fail  silently  (no  output  at  all) on server\n"
);
 puts(
"          errors. This is mostly done like this to better  enable\n"
"          scripts  etc  to  better  deal with failed attempts. In\n"
"          normal cases when a HTTP server fails to deliver a doc­\n"
"          ument,  it  returns  a  HTML document stating so (which\n"
"          often also describes why and more). This flag will pre­\n"
"          vent  curl  from  outputting  that  and  fail  silently\n"
"          instead.\n"
"\n"
"          If this option is used twice,  the  second  will  again\n"
);
 puts(
"          disable silent failure.\n"
"\n"
"     -F/--form <name=content>\n"
"          (HTTP) This lets curl emulate a filled in form in which\n"
"          a user has pressed the submit button. This causes  curl\n"
"          to POST data using the content-type multipart/form-data\n"
"          according to RFC1867. This enables uploading of  binary\n"
"          files etc. To force the 'content' part to be be a file,\n"
"          prefix the file name with an @ sign. To  just  get  the\n"
);
 puts(
"          content part from a file, prefix the file name with the\n"
"          letter <. The difference between @ and < is then that @\n"
"          makes a file get attached in the post as a file upload,\n"
"          while the < makes a text field and just  get  the  con­\n"
"          tents for that text field from a file.\n"
"\n"
"          Example,  to  send  your  password  file to the server,\n"
"          where 'password' is the name of the form-field to which\n"
"          /etc/passwd will be the input:\n"
"\n"
);
 puts(
"          curl -F password=@/etc/passwd www.mypasswords.com\n"
"\n"
"          To read the file's content from stdin insted of a file,\n"
"          use - where the file name should've been. This goes for\n"
"          both @ and < constructs.\n"
"\n"
"          This option can be used multiple times.\n"
"\n"
"     -g/--globoff\n"
"          This  option  switches  off  the \"URL globbing parser\".\n"
"          When you set this option, you  can  specify  URLs  that\n"
"          contain  the  letters  {}[]  without  having them being\n"
);
 puts(
"          interpreted by curl itself. Note that these letters are\n"
"          not  normal  legal  URL  contents  but  they  should be\n"
"          encoded according to the URI standard.\n"
"\n"
"     -G/--get\n"
"          When used, this option will  make  all  data  specified\n"
"          with  -d/--data  or  --data-binary to be used in a HTTP\n"
"          GET request instead of the POST request that  otherwise\n"
"          would  be  used.  The  data will be appended to the URL\n"
);
 puts(
"          with a '?'  separator. (Option added in curl 7.9)\n"
"\n"
"          If used in combination with  -I,  the  POST  data  will\n"
"          instead be appended to the URL with a HEAD request.\n"
"\n"
"          If used multiple times, nothing special happens.\n"
"\n"
"     -h/--help\n"
"          Usage help.\n"
"\n"
"     -H/--header <header>\n"
"          (HTTP) Extra header to use when getting a web page. You\n"
"          may specify any number of extra headers. Note  that  if\n"
);
 puts(
"          you  should  add a custom header that has the same name\n"
"          as one of the internal ones curl would use, your exter­\n"
"          nally  set  header will be used instead of the internal\n"
"          one. This allows you to make even trickier  stuff  than\n"
"          curl  would  normally do. You should not replace inter­\n"
"          nally set headers without knowing perfectly  well  what\n"
"          you're  doing.  Replacing  an  internal header with one\n"
);
 puts(
"          without content on the right side  of  the  colon  will\n"
"          prevent that header from appearing.\n"
"          This   option   can   be   used   multiple   times   to\n"
"          add/replace/remove multiple headers.\n"
"\n"
"     -i/--include\n"
"          (HTTP) Include the HTTP-header in the output. The HTTP-\n"
"          header  includes  things  like server-name, date of the\n"
"          document, HTTP-version and more...\n"
"\n"
"          If this option is used twice,  the  second  will  again\n"
);
 puts(
"          disable header include.\n"
"\n"
"     --interface <name>\n"
"          Perform  an  operation using a specified interface. You\n"
"          can enter interface name, IP address or host  name.  An\n"
"          example could look like:\n"
"\n"
"          curl --interface eth0:1 http://www.netscape.com/\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -I/--head\n"
"          (HTTP/FTP) Fetch  the  HTTP-header  only!  HTTP-servers\n"
);
 puts(
"          feature the command HEAD which this uses to get nothing\n"
"          but the header of a document. When used on a FTP  file,\n"
"          curl displays the file size only.\n"
"\n"
"          If  this  option  is  used twice, the second will again\n"
"          disable header only.\n"
"\n"
"     -j/--junk-session-cookies\n"
"          (HTTP) When curl is told to read cookies from  a  given\n"
"          file,  this  option  will  make it discard all \"session\n"
);
 puts(
"          cookies\". This will basicly have the same effect as  if\n"
"          a  new session is started. Typical browsers always dis­\n"
"          card session cookies when they're closed  down.  (Added\n"
"          in 7.9.7)\n"
"\n"
"          If  this  option is used several times, each occurrence\n"
"          will toggle this on/off.\n"
"\n"
"     -k/--insecure\n"
"          (SSL) This option explicitly  allows  curl  to  perform\n"
"          \"insecure\" SSL connections and transfers. Starting with\n"
);
 puts(
"          curl 7.10, all SSL connections will be attempted to  be\n"
"          made   secure   by  using  the  CA  certificate  bundle\n"
"          installed by default. This makes all  connections  con­\n"
"          sidered  \"insecure\"  to  fail  unless  -k/--insecure is\n"
"          used.\n"
"\n"
"          If this option is used  twice,  the  second  time  will\n"
"          again disable it.\n"
"     --krb4 <level>\n"
"          (FTP)  Enable  kerberos4  authentication  and  use. The\n"
);
 puts(
"          level must be entered and should  be  one  of  'clear',\n"
"          'safe',  'confidential'  or 'private'. Should you use a\n"
"          level that is not one of these, 'private' will  instead\n"
"          be used.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -K/--config <config file>\n"
"          Specify which config file to read curl arguments  from.\n"
"          The  config  file  is a text file in which command line\n"
);
 puts(
"          arguments can be written which then will be used as  if\n"
"          they  were  written on the actual command line. Options\n"
"          and their parameters must be specified on the same con­\n"
"          fig  file  line.  If  the parameter is to contain white\n"
"          spaces, the parameter must be inclosed  within  quotes.\n"
"          If  the  first column of a config line is a '#' charac­\n"
"          ter, the rest of the line will be treated as a comment.\n"
"\n"
);
 puts(
"          Specify  the filename as '-' to make curl read the file\n"
"          from stdin.\n"
"\n"
"          Note that to be able to specify a  URL  in  the  config\n"
"          file,  you  need  to specify it using the --url option,\n"
"          and not by simply writing the URL on its own line.  So,\n"
"          it could look similar to this:\n"
"\n"
"          url = \"http://curl.haxx.se/docs/\"\n"
"\n"
"          This option can be used multiple times.\n"
"\n"
"     --limit-rate <speed>\n"
);
 puts(
"          Specify the maximum transfer rate you want curl to use.\n"
"          This feature is useful if you have a limited  pipe  and\n"
"          you'd prefer you have your transfer not use your entire\n"
"          bandwidth.\n"
"\n"
"          The given speed is measured in bytes/second,  unless  a\n"
"          suffix is appended. Appending 'k' or 'K' will count the\n"
"          number as kilobytes, 'm' or M' makes it megabytes while\n"
"          'g'  or  'G' makes it gigabytes. Examples: 200K, 3m and\n"
"          1G.\n"
"\n"
);
 puts(
"          This option was introduced in curl 7.10.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -l/--list-only\n"
"          (FTP) When listing an FTP directory, this switch forces\n"
"          a name-only view.  Especially useful  if  you  want  to\n"
"          machine-parse  the  contents  of an FTP directory since\n"
"          the normal directory view doesn't use a  standard  look\n"
"          or format.\n"
"\n"
);
 puts(
"          This  option  causes  an  FTP  NLST command to be sent.\n"
"          Some FTP servers list only files in their  response  to\n"
"          NLST;  they  do not include subdirectories and symbolic\n"
"          links.\n"
"\n"
"          If this option is used twice,  the  second  will  again\n"
"          disable list only.\n"
"\n"
"     -L/--location\n"
"          (HTTP/HTTPS)  If  the server reports that the requested\n"
"          page has  a  different  location  (indicated  with  the\n"
);
 puts(
"          header  line Location:) this flag will let curl attempt\n"
"          to reattempt the get on the new place. If used together\n"
"          with -i or -I, headers from all requested pages will be\n"
"          shown. If this flag is used when making  a  HTTP  POST,\n"
"          curl will automatically switch to GET after the initial\n"
"          POST has been done.\n"
"\n"
"          If this option is used twice,  the  second  will  again\n"
"          disable location following.\n"
"\n"
"     -m/--max-time <seconds>\n"
);
 puts(
"          Maximum time in seconds that you allow the whole opera­\n"
"          tion to take.  This is useful for preventing your batch\n"
"          jobs  from  hanging  for  hours due to slow networks or\n"
"          links going down.  This doesn't  work  fully  in  win32\n"
"          systems.  See also the --connect-timeout option.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -M/--manual\n"
"          Manual. Display the huge help text.\n"
"\n"
"     -n/--netrc\n"
);
 puts(
"          Makes curl scan the .netrc  file  in  the  user's  home\n"
"          directory  for  login  name and password. This is typi­\n"
"          cally used for ftp on unix. If  used  with  http,  curl\n"
"          will enable user authentication. See netrc(4) or ftp(1)\n"
"          for details on the file format. Curl will not  complain\n"
"          if  that  file  hasn't the right permissions (it should\n"
"          not be world nor group readable). The environment vari­\n"
);
 puts(
"          able \"HOME\" is used to find the home directory.\n"
"\n"
"          A  quick  and  very  simple  example  of how to setup a\n"
"          .netrc  to  allow  curl   to   ftp   to   the   machine\n"
"          host.domain.com  with  user  name 'myself' and password\n"
"          'secret' should look similar to:\n"
"\n"
"          machine host.domain.com login myself password secret\n"
"\n"
"          If this option is used twice,  the  second  will  again\n"
"          disable netrc usage.\n"
"\n"
"     -N/--no-buffer\n"
);
 puts(
"          Disables  the buffering of the output stream. In normal\n"
"          work situations, curl will use a standard buffered out­\n"
"          put  stream that will have the effect that it will out­\n"
"          put the data in chunks, not  necessarily  exactly  when\n"
"          the  data arrives.  Using this option will disable that\n"
"          buffering.\n"
"\n"
"          If this option is used twice,  the  second  will  again\n"
"          switch on buffering.\n"
"\n"
"     -o/--output <file>\n"
);
 puts(
"          Write  output  to  <file> instead of stdout. If you are\n"
"          using {} or [] to fetch multiple documents, you can use\n"
"          '#'  followed by a number in the <file> specifier. That\n"
"          variable will be replaced with the current  string  for\n"
"          the URL being fetched. Like in:\n"
"\n"
"            curl http://{one,two}.site.com -o \"file_#1.txt\"\n"
"\n"
"          or use several variables like:\n"
"\n"
"            curl http://{site,host}.host[1-5].com -o \"#1_#2\"\n"
"\n"
);
 puts(
"          You  may use this option as many times as you have num­\n"
"          ber of URLs.\n"
"\n"
"     -O/--remote-name\n"
"          Write output to a local file named like the remote file\n"
"          we get. (Only the file part of the remote file is used,\n"
"          the path is cut off.)\n"
"\n"
"          You may use this option as many times as you have  num­\n"
"          ber of URLs.\n"
"\n"
"     -p/--proxytunnel\n"
"          When an HTTP proxy is used, this option will cause non-\n"
);
 puts(
"          HTTP protocols to attempt to tunnel through  the  proxy\n"
"          instead  of merely using it to do HTTP-like operations.\n"
"          The tunnel approach is made with the HTTP proxy CONNECT\n"
"          request  and requires that the proxy allows direct con­\n"
"          nect to the remote port number  curl  wants  to  tunnel\n"
"          through to.\n"
"\n"
"          If  this  option  is  used twice, the second will again\n"
"          disable proxy tunnel.\n"
"\n"
"     -P/--ftpport <address>\n"
);
 puts(
"          (FTP) Reverses the initiator/listener roles  when  con­\n"
"          necting  with  ftp. This switch makes Curl use the PORT\n"
"          command instead of PASV. In practice,  PORT  tells  the\n"
"          server to connect to the client's specified address and\n"
"          port, while PASV asks the server for an ip address  and\n"
"          port to connect to. <address> should be one of:\n"
"\n"
"          interface   i.e  \"eth0\" to specify which interface's IP\n"
);
 puts(
"                      address you want to use  (Unix only)\n"
"\n"
"          IP address  i.e \"192.168.10.1\" to specify exact IP num­\n"
"                      ber\n"
"\n"
"          host name   i.e \"my.host.domain\" to specify machine\n"
"\n"
"          -           (any  single-letter string) to make it pick\n"
"                      the machine's default\n"
"\n"
"     If this option is used several times, the last one  will  be\n"
"     used.\n"
"\n"
"     -q   If used as the first parameter on the command line, the\n"
);
 puts(
"          $HOME/.curlrc file will not be read and used as a  con­\n"
"          fig file.\n"
"\n"
"     -Q/--quote <comand>\n"
"          (FTP)  Send  an  arbitrary  command  to  the remote FTP\n"
"          server, by using the QUOTE command of the  server.  Not\n"
"          all  servers support this command, and the set of QUOTE\n"
"          commands are server specific! Quote commands  are  sent\n"
"          BEFORE  the  transfer is taking place. To make commands\n"
);
 puts(
"          take place after a  successful  transfer,  prefix  them\n"
"          with a dash '-'. You may specify any amount of commands\n"
"          to be run before and after the transfer. If the  server\n"
"          returns  failure  for  one  of the commands, the entire\n"
"          operation will be aborted.\n"
"\n"
"          This option can be used multiple times.\n"
"\n"
"     --random-file <file>\n"
"          (HTTPS) Specify the path name to file  containing  what\n"
);
 puts(
"          will  be considered as random data. The data is used to\n"
"          seed the random engine for SSL connections.   See  also\n"
"          the --edg-file option.\n"
"\n"
"     -r/--range <range>\n"
"          (HTTP/FTP)  Retrieve  a byte range (i.e a partial docu­\n"
"          ment) from a HTTP/1.1 or  FTP  server.  Ranges  can  be\n"
"          specified in a number of ways.\n"
"          0-499     specifies the first 500 bytes\n"
"\n"
"          500-999   specifies the second 500 bytes\n"
"\n"
);
 puts(
"          -500      specifies the last 500 bytes\n"
"\n"
"          9500      specifies the bytes from offset 9500 and for­\n"
"                    ward\n"
"\n"
"          0-0,-1    specifies the first and last byte only(*)(H)\n"
"\n"
"          500-700,600-799\n"
"                    specifies 300 bytes from offset 500(H)\n"
"\n"
"          100-199,500-599\n"
"                    specifies two separate 100 bytes ranges(*)(H)\n"
"\n"
"     (*)  =  NOTE that this will cause the server to reply with a\n"
"     multipart response!\n"
"\n"
);
 puts(
"     You should also be aware that many HTTP/1.1 servers  do  not\n"
"     have this feature enabled, so that when you attempt to get a\n"
"     range, you'll instead get the whole document.\n"
"\n"
"     FTP range downloads only support the simple  syntax  'start-\n"
"     stop'  (optionally  with  one  of  the  numbers omitted). It\n"
"     depends on the non-RFC command SIZE.\n"
"\n"
"     If this option is used several times, the last one  will  be\n"
"     used.\n"
"\n"
"     -R/--remote-time\n"
);
 puts(
"          When used, this will make libcurl attempt to figure out\n"
"          the timestamp of the remote file, and if that is avail­\n"
"          able make the local file get that same timestamp.\n"
"\n"
"          If  this option is used twice, the second time disables\n"
"          this again.\n"
"\n"
"     -s/--silent\n"
"          Silent mode. Don't show progress meter  or  error  mes­\n"
"          sages.  Makes Curl mute.\n"
"\n"
"          If  this  option  is  used twice, the second will again\n"
"          disable mute.\n"
"\n"
);
 puts(
"     -S/--show-error\n"
"          When used with -s it makes curl show error  message  if\n"
"          it fails.\n"
"\n"
"          If  this  option  is  used twice, the second will again\n"
"          disable show error.\n"
"     --stderr <file>\n"
"          Redirect all writes to stderr  to  the  specified  file\n"
"          instead. If the file name is a plain '-', it is instead\n"
"          written to stdout. This option has no point when you're\n"
"          using a shell with decent redirecting capabilities.\n"
"\n"
);
 puts(
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -t/--telnet-option <OPT=val>\n"
"          Pass options to the telnet protocol. Supported  options\n"
"          are:\n"
"\n"
"          TTYPE=<term> Sets the terminal type.\n"
"\n"
"          XDISPLOC=<X display> Sets the X display location.\n"
"\n"
"          NEW_ENV=<var,val> Sets an environment variable.\n"
"\n"
"     -T/--upload-file <file>\n"
"          This  transfers  the specified local file to the remote\n"
);
 puts(
"          URL. If there is no file part  in  the  specified  URL,\n"
"          Curl  will  append  the  local file name. NOTE that you\n"
"          must use a trailing / on the last directory  to  really\n"
"          prove  to  Curl that there is no file name or curl will\n"
"          think that your last directory name is the remote  file\n"
"          name  to  use.  That  will most likely cause the upload\n"
"          operation to fail. If this is used on a http(s) server,\n"
);
 puts(
"          the PUT command will be used.\n"
"\n"
"          Use  the  file  name  \"-\"  (a single dash) to use stdin\n"
"          instead of a given file.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     --trace <file>\n"
"          Enables  a full trace dump of all incoming and outgoing\n"
"          data, including descriptive information, to  the  given\n"
"          output  file.  Use  \"-\"  as filename to have the output\n"
"          sent to stdout.\n"
"\n"
);
 puts(
"          If this option is used several times, the last one will\n"
"          be used. (Added in curl 7.9.7)\n"
"\n"
"     --trace-ascii <file>\n"
"          Enables  a full trace dump of all incoming and outgoing\n"
"          data, including descriptive information, to  the  given\n"
"          output  file.  Use  \"-\"  as filename to have the output\n"
"          sent to stdout.\n"
"\n"
"          This is very similar to --trace, but leaves out the hex\n"
"          part  and  only  shows  the  ASCII part of the dump. It\n"
);
 puts(
"          makes smaller output that might be easier to  read  for\n"
"          untrained humans.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used. (Added in curl 7.9.7)\n"
"\n"
"     -u/--user <user:password>\n"
"          Specify user and password to  use  when  fetching.  See\n"
"          README.curl  for  detailed examples of how to use this.\n"
"          If no password is  specified,  curl  will  ask  for  it\n"
"          interactively.\n"
"\n"
);
 puts(
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -U/--proxy-user <user:password>\n"
"          Specify user and password to use for Proxy  authentica­\n"
"          tion. If no password is specified, curl will ask for it\n"
"          interactively.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     --url <URL>\n"
"          Specify  a  URL  to  fetch. This option is mostly handy\n"
);
 puts(
"          when you want to specify URL(s) in a config file.\n"
"\n"
"          This option may be used any number of times. To control\n"
"          where  this  URL  is  written,  use  the  -o  or the -O\n"
"          options.\n"
"\n"
"     -v/--verbose\n"
"          Makes  the  fetching  more  verbose/talkative.   Mostly\n"
"          usable  for  debugging.  Lines  starting with '>' means\n"
"          data sent by curl, '<' means data received by curl that\n"
"          is  hidden  in normal cases and lines starting with '*'\n"
);
 puts(
"          means additional info provided by curl.\n"
"\n"
"          Note that if you want to see HTTP headers in  the  out­\n"
"          put, -i/--include might be option you're looking for.\n"
"\n"
"          If  this  option  is  used twice, the second will again\n"
"          disable verbose.\n"
"\n"
"     -V/--version\n"
"          Displays the full version of curl,  libcurl  and  other\n"
"          3rd party libraries linked with the executable.\n"
"\n"
"     -w/--write-out <format>\n"
);
 puts(
"          Defines  what to display after a completed and success­\n"
"          ful operation. The format is a string that may  contain\n"
"          plain  text  mixed  with  any  number of variables. The\n"
"          string can be specified as \"string\", to get read from a\n"
"          particular  file you specify it \"@filename\" and to tell\n"
"          curl to read the format from stdin you write \"@-\".\n"
"\n"
"          The variables present in the output format will be sub­\n"
);
 puts(
"          stituted  by the value or text that curl thinks fit, as\n"
"          described  below.  All  variables  are  specified  like\n"
"          %{variable_name}  and  to  output  a  normal % you just\n"
"          write them like %%. You can output a newline  by  using\n"
"          \\n,  a carriage return with \\r and a tab space with \\t.\n"
"\n"
"          NOTE:  The  %-letter  is  a  special  letter   in   the\n"
"          win32-environment,  where  all occurrences of % must be\n"
);
 puts(
"          doubled when using this option.\n"
"\n"
"          Available variables are at this point:\n"
"\n"
"          url_effective  The URL that was fetched last.  This  is\n"
"                         mostly meaningful if you've told curl to\n"
"                         follow location: headers.\n"
"\n"
"          http_code      The numerical code that was found in the\n"
"                         last retrieved HTTP(S) page.\n"
"\n"
"          time_total     The  total  time,  in  seconds, that the\n"
);
 puts(
"                         full operation lasted. The time will  be\n"
"                         displayed with millisecond resolution.\n"
"\n"
"          time_namelookup\n"
"                         The  time,  in seconds, it took from the\n"
"                         start until the name resolving was  com­\n"
"                         pleted.\n"
"\n"
"          time_connect   The  time,  in seconds, it took from the\n"
"                         start until the connect  to  the  remote\n"
);
 puts(
"                         host (or proxy) was completed.\n"
"\n"
"          time_pretransfer\n"
"                         The  time,  in seconds, it took from the\n"
"                         start until the file  transfer  is  just\n"
"                         about  to  begin. This includes all pre-\n"
"                         transfer commands and negotiations  that\n"
"                         are  specific  to  the particular proto­\n"
"                         col(s) involved.\n"
"\n"
"          time_starttransfer\n"
);
 puts(
"                         The time, in seconds, it took  from  the\n"
"                         start until the first byte is just about\n"
"                         to   be   transfered.   This    includes\n"
"                         time_pretransfer  and  also the time the\n"
"                         server needs to calculate the result.\n"
"          size_download  The total  amount  of  bytes  that  were\n"
"                         downloaded.\n"
"\n"
"          size_upload    The  total  amount  of  bytes  that were\n"
);
 puts(
"                         uploaded.\n"
"\n"
"          size_header    The total amount of bytes of  the  down­\n"
"                         loaded headers.\n"
"\n"
"          size_request   The total amount of bytes that were sent\n"
"                         in the HTTP request.\n"
"\n"
"          speed_download The average  download  speed  that  curl\n"
"                         measured for the complete download.\n"
"\n"
"          speed_upload   The  average upload speed that curl mea­\n"
);
 puts(
"                         sured for the complete upload.\n"
"\n"
"          content_type   The Content-Type of the requested  docu­\n"
"                         ment, if there was any. (Added in 7.9.5)\n"
"\n"
"     If this option is used several times, the last one  will  be\n"
"     used.\n"
"\n"
"     -x/--proxy <proxyhost[:port]>\n"
"          Use  specified  HTTP  proxy.  If the port number is not\n"
"          specified, it is assumed at port 1080.\n"
"\n"
"          This option overrides  existing  environment  variables\n"
);
 puts(
"          that sets proxy to use. If there's an environment vari­\n"
"          able setting a proxy, you can set proxy to \"\" to  over­\n"
"          ride it.\n"
"\n"
"          Note that all operations that are performed over a HTTP\n"
"          proxy will transparantly be converted to HTTP. It means\n"
"          that  certain protocol specific operations might not be\n"
"          available. This is not  the  case  if  you  can  tunnel\n"
"          through  the  proxy,  as done with the -p/--proxytunnel\n"
"          option.\n"
);
 puts(
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -X/--request <command>\n"
"          (HTTP)  Specifies a custom request to use when communi­\n"
"          cating with the HTTP  server.   The  specified  request\n"
"          will be used instead of the standard GET. Read the HTTP\n"
"          1.1 specification for details and explanations.\n"
"\n"
"          (FTP) Specifies a custom FTP command to use instead  of\n"
"          LIST when doing file lists with ftp.\n"
);
 puts(
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -y/--speed-time <time>\n"
"          If a download is slower than speed-limit bytes per sec­\n"
"          ond  during  a  speed-time  period,  the  download gets\n"
"          aborted. If speed-time is used, the default speed-limit\n"
"          will be 1 unless set with -y.\n"
"\n"
"          This option controls transfers and thus will not affect\n"
"          slow connects etc. If this is a concern  for  you,  try\n"
);
 puts(
"          the --connect-timeout option.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -Y/--speed-limit <speed>\n"
"          If a download is slower than this given speed, in bytes\n"
"          per  second,  for  speed-time  seconds it gets aborted.\n"
"          speed-time is set with -Y and is 30 if not set.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -z/--time-cond <date expression>\n"
);
 puts(
"          (HTTP)  Request  to  get  a file that has been modified\n"
"          later than the given time and date,  or  one  that  has\n"
"          been modified before that time. The date expression can\n"
"          be all sorts of date strings or if it doesn't match any\n"
"          internal  ones,  it  tries to get the time from a given\n"
"          file name instead! See the  GNU  date(1)  or  curl_get­\n"
"          date(3) man pages for date expression details.\n"
"\n"
);
 puts(
"          Start  the  date  expression with a dash (-) to make it\n"
"          request for a document that is  older  than  the  given\n"
"          date/time, default is a document that is newer than the\n"
"          specified date/time.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -Z/--max-redirs <num>\n"
"          Set  maximum  number of redirection-followings allowed.\n"
"          If -L/--location is used, this option can  be  used  to\n"
);
 puts(
"          prevent curl from following redirections \"in absurdum\".\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -3/--sslv3\n"
"          (HTTPS) Forces curl to use SSL version 3 when negotiat­\n"
"          ing with a remote SSL server.\n"
"     -2/--sslv2\n"
"          (HTTPS) Forces curl to use SSL version 2 when negotiat­\n"
"          ing with a remote SSL server.\n"
"\n"
"     -0/--http1.0\n"
"          (HTTP) Forces curl to issue its requests using HTTP 1.0\n"
);
 puts(
"          instead of using its internally preferred: HTTP 1.1.\n"
"\n"
"     -#/--progress-bar\n"
"          Make curl display progress information  as  a  progress\n"
"          bar instead of the default statistics.\n"
"\n"
"          If  this  option  is  used twice, the second will again\n"
"          disable the progress bar.\n"
"\n"
"FILES\n"
"     ~/.curlrc\n"
"          Default config file.\n"
"\n"
"ENVIRONMENT\n"
"     http_proxy [protocol://]<host>[:port]\n"
"          Sets proxy server to use for HTTP.\n"
"\n"
);
 puts(
"     HTTPS_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for HTTPS.\n"
"\n"
"     FTP_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for FTP.\n"
"\n"
"     GOPHER_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for GOPHER.\n"
"\n"
"     ALL_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use if no protocol-specific  proxy\n"
"          is set.\n"
"\n"
"     NO_PROXY <comma-separated list of hosts>\n"
);
 puts(
"          list of host names that shouldn't go through any proxy.\n"
"          If set to a asterisk\n"
"\n"
"EXIT CODES\n"
"     There exists a bunch of different error codes and their cor­\n"
"     responding  error messages that may appear during bad condi­\n"
"     tions. At the time of this writing, the exit codes are:\n"
"\n"
"     1    Unsupported protocol. This build of curl has no support\n"
"          for this protocol.\n"
"\n"
"     2    Failed to initialize.\n"
"\n"
"     3    URL malformat. The syntax was not correct.\n"
);
 puts(
"     4    URL  user malformatted. The user-part of the URL syntax\n"
"          was not correct.\n"
"\n"
"     5    Couldn't resolve proxy. The given proxy host could  not\n"
"          be resolved.\n"
"\n"
"     6    Couldn't  resolve  host.  The given remote host was not\n"
"          resolved.\n"
"\n"
"     7    Failed to connect to host.\n"
"\n"
"     8    FTP weird server  reply.  The  server  sent  data  curl\n"
"          couldn't parse.\n"
"\n"
"     9    FTP access denied. The server denied login.\n"
"\n"
);
 puts(
"     10   FTP  user/password  incorrect.  Either one or both were\n"
"          not accepted by the server.\n"
"\n"
"     11   FTP weird PASS reply. Curl  couldn't  parse  the  reply\n"
"          sent to the PASS request.\n"
"\n"
"     12   FTP  weird  USER  reply.  Curl couldn't parse the reply\n"
"          sent to the USER request.\n"
"\n"
"     13   FTP weird PASV reply, Curl  couldn't  parse  the  reply\n"
"          sent to the PASV request.\n"
"\n"
"     14   FTP  weird 227 format. Curl couldn't parse the 227-line\n"
);
 puts(
"          the server sent.\n"
"\n"
"     15   FTP can't get host. Couldn't resolve the host IP we got\n"
"          in the 227-line.\n"
"\n"
"     16   FTP  can't  reconnect.  Couldn't connect to the host we\n"
"          got in the 227-line.\n"
"\n"
"     17   FTP  couldn't  set  binary.  Couldn't  change  transfer\n"
"          method to binary.\n"
"\n"
"     18   Partial file. Only a part of the file was transfered.\n"
"\n"
"     19   FTP couldn't RETR file. The RETR command failed.\n"
"\n"
);
 puts(
"     20   FTP  write  error. The transfer was reported bad by the\n"
"          server.\n"
"\n"
"     21   FTP quote error. A quote command  returned  error  from\n"
"          the server.\n"
"\n"
"     22   HTTP  not found. The requested page was not found. This\n"
"          return code only appears if --fail is used.\n"
"     23   Write error.  Curl  couldn't  write  data  to  a  local\n"
"          filesystem or similar.\n"
"\n"
"     24   Malformat user. User name badly specified.\n"
"\n"
);
 puts(
"     25   FTP  couldn't  STOR  file.  The  server denied the STOR\n"
"          operation.\n"
"\n"
"     26   Read error. Various reading problems.\n"
"\n"
"     27   Out of memory. A memory allocation request failed.\n"
"\n"
"     28   Operation timeout. The specified  time-out  period  was\n"
"          reached according to the conditions.\n"
"\n"
"     29   FTP  couldn't set ASCII. The server returned an unknown\n"
"          reply.\n"
"\n"
"     30   FTP PORT failed. The PORT command failed.\n"
"\n"
);
 puts(
"     31   FTP couldn't use REST. The REST command failed.\n"
"\n"
"     32   FTP couldn't use SIZE. The  SIZE  command  failed.  The\n"
"          command  is  an  extension to the original FTP spec RFC\n"
"          959.\n"
"\n"
"     33   HTTP range error. The range \"command\" didn't work.\n"
"\n"
"     34   HTTP  post  error.  Internal  post-request   generation\n"
"          error.\n"
"\n"
"     35   SSL connect error. The SSL handshaking failed.\n"
"\n"
"     36   FTP  bad  download resume. Couldn't continue an earlier\n"
);
 puts(
"          aborted download.\n"
"\n"
"     37   FILE couldn't read file. Failed to open the file.  Per­\n"
"          missions?\n"
"\n"
"     38   LDAP cannot bind. LDAP bind operation failed.\n"
"\n"
"     39   LDAP search failed.\n"
"\n"
"     40   Library not found. The LDAP library was not found.\n"
"\n"
"     41   Function  not  found.  A required LDAP function was not\n"
"          found.\n"
"\n"
"     42   Aborted by callback. An application told curl to  abort\n"
"          the operation.\n"
"\n"
);
 puts(
"     43   Internal  error.  A  function  was  called  with  a bad\n"
"          parameter.\n"
"\n"
"     44   Internal error. A function was called in a bad order.\n"
"\n"
"     45   Interface error. A specified outgoing  interface  could\n"
"          not be used.\n"
"\n"
"     46   Bad  password  entered.  An error was signaled when the\n"
"          password was entered.\n"
"\n"
"     47   Too many redirects. When following redirects, curl  hit\n"
"          the maximum amount.\n"
"\n"
"     48   Unknown TELNET option specified.\n"
"\n"
);
 puts(
"     49   Malformed telnet option.\n"
"\n"
"     51   The remote peer's SSL certificate wasn't ok\n"
"\n"
"     52   The server didn't reply anything, which here is consid­\n"
"          ered an error.\n"
"\n"
"     53   SSL crypto engine not found\n"
"\n"
"     54   Cannot set SSL crypto engine as default\n"
"\n"
"     55   Failed sending network data\n"
"\n"
"     56   Failure in receiving network data\n"
"\n"
"     57   Share is in use (internal error)\n"
"\n"
"     58   Problem with the local certificate\n"
"\n"
"     59   Couldn't use specified SSL cipher\n"
"\n"
);
 puts(
"     60   Problem with the CA cert (path? permission?)\n"
"\n"
"     61   Unrecognized transfer encoding\n"
"\n"
"     XX   There will appear  more  error  codes  here  in  future\n"
"          releases.  The existing ones are meant to never change.\n"
"\n"
"BUGS\n"
"     If you do find bugs, mail them to curl-bug@haxx.se.\n"
"\n"
"AUTHORS / CONTRIBUTORS\n"
"     Daniel Stenberg is the main author, but the  whole  list  of\n"
"     contributors is found in the separate THANKS file.\n"
"\n"
"WWW\n"
"     http://curl.haxx.se\n"
"FTP\n"
);
 puts(
"     ftp://ftp.sunet.se/pub/www/utilities/curl/\n"
"\n"
"SEE ALSO\n"
"     ftp(1), wget(1), snarf(1)\n"
"\n"
"LATEST VERSION\n"
"\n"
"  You always find news about what's going on as well as the latest versions\n"
"  from the curl web pages, located at:\n"
"\n"
"        http://curl.haxx.se\n"
"\n"
"SIMPLE USAGE\n"
"\n"
"  Get the main page from netscape's web-server:\n"
"\n"
"        curl http://www.netscape.com/\n"
"\n"
"  Get the root README file from funet's ftp-server:\n"
"\n"
"        curl ftp://ftp.funet.fi/README\n"
"\n"
"  Get a web page from a server using port 8000:\n"
"\n"
);
 puts(
"        curl http://www.weirdserver.com:8000/\n"
"\n"
"  Get a list of the root directory of an FTP site:\n"
"\n"
"        curl ftp://cool.haxx.se/\n"
"\n"
