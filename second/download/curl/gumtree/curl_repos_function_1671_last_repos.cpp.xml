<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1671_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_client_chop_write<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">connectdata<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">conn<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">type<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="3" pos:column="33">char<pos:position pos:line="3" pos:column="37"/></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">ptr<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="4" pos:column="33">size_t<pos:position pos:line="4" pos:column="39"/></name></type> <name pos:line="4" pos:column="40">len<pos:position pos:line="4" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="44"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">curl_write_callback<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">writeheader<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><name pos:line="7" pos:column="37">NULL<pos:position pos:line="7" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_write_callback<pos:position pos:line="8" pos:column="22"/></name></type> <name pos:line="8" pos:column="23">writebody<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><name pos:line="8" pos:column="35">NULL<pos:position pos:line="8" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">len<pos:position pos:line="10" pos:column="10"/></name></expr>)<pos:position pos:line="10" pos:column="11"/></condition><then pos:line="10" pos:column="11">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">CURLE_OK<pos:position pos:line="11" pos:column="20"/></name></expr>;<pos:position pos:line="11" pos:column="21"/></return></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* If reading is paused, append this data to the already held data for this
     type. */</comment>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name><name pos:line="15" pos:column="6">data<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">req<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">keepon<pos:position pos:line="15" pos:column="22"/></name></name> <operator pos:line="15" pos:column="23">&amp;<pos:position pos:line="15" pos:column="28"/></operator> <name pos:line="15" pos:column="25">KEEP_RECV_PAUSE<pos:position pos:line="15" pos:column="40"/></name></expr>)<pos:position pos:line="15" pos:column="41"/></condition><then pos:line="15" pos:column="41">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><call><name pos:line="16" pos:column="12">pausewrite<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">data<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">type<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">ptr<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">len<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></return></block></then></if>

  <comment type="block" pos:line="18" pos:column="3">/* Determine the callback(s) to use. */</comment>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">type<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">&amp;<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="13">CLIENTWRITE_BODY<pos:position pos:line="19" pos:column="29"/></name></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="5">writebody<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <name><name pos:line="20" pos:column="17">data<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">set<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">.<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="27">fwrite_func<pos:position pos:line="20" pos:column="38"/></name></name></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt></block></then></if>
  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><operator pos:line="21" pos:column="6">(<pos:position pos:line="21" pos:column="7"/></operator><name pos:line="21" pos:column="7">type<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">&amp;<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="14">CLIENTWRITE_HEADER<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">)<pos:position pos:line="21" pos:column="33"/></operator> <operator pos:line="21" pos:column="34">&amp;&amp;<pos:position pos:line="21" pos:column="44"/></operator>
     <operator pos:line="22" pos:column="6">(<pos:position pos:line="22" pos:column="7"/></operator><name><name pos:line="22" pos:column="7">data<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">-&gt;<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="13">set<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">.<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">fwrite_header<pos:position pos:line="22" pos:column="30"/></name></name> <operator pos:line="22" pos:column="31">||<pos:position pos:line="22" pos:column="33"/></operator> <name><name pos:line="22" pos:column="34">data<pos:position pos:line="22" pos:column="38"/></name><operator pos:line="22" pos:column="38">-&gt;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="40">set<pos:position pos:line="22" pos:column="43"/></name><operator pos:line="22" pos:column="43">.<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="44">writeheader<pos:position pos:line="22" pos:column="55"/></name></name><operator pos:line="22" pos:column="55">)<pos:position pos:line="22" pos:column="56"/></operator></expr>)<pos:position pos:line="22" pos:column="57"/></condition><then pos:line="22" pos:column="57"> <block pos:line="22" pos:column="58">{
    <comment type="block" pos:line="23" pos:column="5">/*
     * Write headers to the same callback or to the especially setup
     * header callback function (added after version 7.7.1).
     */</comment>
    <expr_stmt><expr><name pos:line="27" pos:column="5">writeheader<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator>
      <ternary><condition><expr><name><name pos:line="28" pos:column="7">data<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">set<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">.<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">fwrite_header<pos:position pos:line="28" pos:column="30"/></name></name></expr>?<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31"> <expr><name><name pos:line="28" pos:column="32">data<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-&gt;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="38">set<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">.<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="42">fwrite_header<pos:position pos:line="28" pos:column="55"/></name></name></expr></then><else pos:line="28" pos:column="55">: <expr><name><name pos:line="28" pos:column="57">data<pos:position pos:line="28" pos:column="61"/></name><operator pos:line="28" pos:column="61">-&gt;<pos:position pos:line="28" pos:column="66"/></operator><name pos:line="28" pos:column="63">set<pos:position pos:line="28" pos:column="66"/></name><operator pos:line="28" pos:column="66">.<pos:position pos:line="28" pos:column="67"/></operator><name pos:line="28" pos:column="67">fwrite_func<pos:position pos:line="28" pos:column="78"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="28" pos:column="79"/></expr_stmt>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="31" pos:column="3">/* Chop data, write chunks. */</comment>
  <while pos:line="32" pos:column="3">while<condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">len<pos:position pos:line="32" pos:column="12"/></name></expr>)<pos:position pos:line="32" pos:column="13"/></condition> <block pos:line="32" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">size_t<pos:position pos:line="33" pos:column="11"/></name></type> <name pos:line="33" pos:column="12">chunklen<pos:position pos:line="33" pos:column="20"/></name> <init pos:line="33" pos:column="21">= <expr><ternary><condition><expr><name pos:line="33" pos:column="23">len<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">&lt;=<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="30">CURL_MAX_WRITE_SIZE<pos:position pos:line="33" pos:column="49"/></name></expr>?<pos:position pos:line="33" pos:column="50"/></condition><then pos:line="33" pos:column="50"> <expr><name pos:line="33" pos:column="51">len<pos:position pos:line="33" pos:column="54"/></name></expr></then><else pos:line="33" pos:column="54">: <expr><name pos:line="33" pos:column="56">CURL_MAX_WRITE_SIZE<pos:position pos:line="33" pos:column="75"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="33" pos:column="76"/></decl_stmt>

    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name pos:line="35" pos:column="8">writebody<pos:position pos:line="35" pos:column="17"/></name></expr>)<pos:position pos:line="35" pos:column="18"/></condition><then pos:line="35" pos:column="18"> <block pos:line="35" pos:column="19">{
      <decl_stmt><decl><type><name pos:line="36" pos:column="7">size_t<pos:position pos:line="36" pos:column="13"/></name></type> <name pos:line="36" pos:column="14">wrote<pos:position pos:line="36" pos:column="19"/></name> <init pos:line="36" pos:column="20">= <expr><call><name pos:line="36" pos:column="22">writebody<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><name pos:line="36" pos:column="32">ptr<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="37">1<pos:position pos:line="36" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="40">chunklen<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="50">data<pos:position pos:line="36" pos:column="54"/></name><operator pos:line="36" pos:column="54">-&gt;<pos:position pos:line="36" pos:column="59"/></operator><name pos:line="36" pos:column="56">set<pos:position pos:line="36" pos:column="59"/></name><operator pos:line="36" pos:column="59">.<pos:position pos:line="36" pos:column="60"/></operator><name pos:line="36" pos:column="60">out<pos:position pos:line="36" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="65"/></decl_stmt>

      <if pos:line="38" pos:column="7">if<condition pos:line="38" pos:column="9">(<expr><name pos:line="38" pos:column="10">CURL_WRITEFUNC_PAUSE<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">==<pos:position pos:line="38" pos:column="33"/></operator> <name pos:line="38" pos:column="34">wrote<pos:position pos:line="38" pos:column="39"/></name></expr>)<pos:position pos:line="38" pos:column="40"/></condition><then pos:line="38" pos:column="40"> <block pos:line="38" pos:column="41">{
        <if pos:line="39" pos:column="9">if<condition pos:line="39" pos:column="11">(<expr><name><name pos:line="39" pos:column="12">conn<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">handler<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">-&gt;<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="27">flags<pos:position pos:line="39" pos:column="32"/></name></name> <operator pos:line="39" pos:column="33">&amp;<pos:position pos:line="39" pos:column="38"/></operator> <name pos:line="39" pos:column="35">PROTOPT_NONETWORK<pos:position pos:line="39" pos:column="52"/></name></expr>)<pos:position pos:line="39" pos:column="53"/></condition><then pos:line="39" pos:column="53"> <block pos:line="39" pos:column="54">{
          <comment type="block" pos:line="40" pos:column="11">/* Protocols that work without network cannot be paused. This is
             actually only FILE:// just now, and it can't pause since the
             transfer isn't done using the "normal" procedure. */</comment>
          <expr_stmt><expr><call><name pos:line="43" pos:column="11">failf<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">data<pos:position pos:line="43" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="23">"Write callback asked for PAUSE when not supported!"<pos:position pos:line="43" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="77"/></expr_stmt>
          <return pos:line="44" pos:column="11">return <expr><name pos:line="44" pos:column="18">CURLE_WRITE_ERROR<pos:position pos:line="44" pos:column="35"/></name></expr>;<pos:position pos:line="44" pos:column="36"/></return>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
        <return pos:line="46" pos:column="9">return <expr><call><name pos:line="46" pos:column="16">pausewrite<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">data<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="33">type<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">ptr<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="44">len<pos:position pos:line="46" pos:column="47"/></name></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="49"/></return>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if>
      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><name pos:line="48" pos:column="10">wrote<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">!=<pos:position pos:line="48" pos:column="18"/></operator> <name pos:line="48" pos:column="19">chunklen<pos:position pos:line="48" pos:column="27"/></name></expr>)<pos:position pos:line="48" pos:column="28"/></condition><then pos:line="48" pos:column="28"> <block pos:line="48" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">failf<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">data<pos:position pos:line="49" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="21">"Failed writing body (%zu != %zu)"<pos:position pos:line="49" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="57">wrote<pos:position pos:line="49" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="64">chunklen<pos:position pos:line="49" pos:column="72"/></name></expr></argument>)<pos:position pos:line="49" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="74"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">CURLE_WRITE_ERROR<pos:position pos:line="50" pos:column="33"/></name></expr>;<pos:position pos:line="50" pos:column="34"/></return>
      }<pos:position pos:line="51" pos:column="8"/></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <if pos:line="54" pos:column="5">if<condition pos:line="54" pos:column="7">(<expr><name pos:line="54" pos:column="8">writeheader<pos:position pos:line="54" pos:column="19"/></name></expr>)<pos:position pos:line="54" pos:column="20"/></condition><then pos:line="54" pos:column="20"> <block pos:line="54" pos:column="21">{
      <decl_stmt><decl><type><name pos:line="55" pos:column="7">size_t<pos:position pos:line="55" pos:column="13"/></name></type> <name pos:line="55" pos:column="14">wrote<pos:position pos:line="55" pos:column="19"/></name> <init pos:line="55" pos:column="20">= <expr><call><name pos:line="55" pos:column="22">writeheader<pos:position pos:line="55" pos:column="33"/></name><argument_list pos:line="55" pos:column="33">(<argument><expr><name pos:line="55" pos:column="34">ptr<pos:position pos:line="55" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="39">1<pos:position pos:line="55" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="42">chunklen<pos:position pos:line="55" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="52">data<pos:position pos:line="55" pos:column="56"/></name><operator pos:line="55" pos:column="56">-&gt;<pos:position pos:line="55" pos:column="61"/></operator><name pos:line="55" pos:column="58">set<pos:position pos:line="55" pos:column="61"/></name><operator pos:line="55" pos:column="61">.<pos:position pos:line="55" pos:column="62"/></operator><name pos:line="55" pos:column="62">writeheader<pos:position pos:line="55" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="75"/></decl_stmt>

      <if pos:line="57" pos:column="7">if<condition pos:line="57" pos:column="9">(<expr><name pos:line="57" pos:column="10">CURL_WRITEFUNC_PAUSE<pos:position pos:line="57" pos:column="30"/></name> <operator pos:line="57" pos:column="31">==<pos:position pos:line="57" pos:column="33"/></operator> <name pos:line="57" pos:column="34">wrote<pos:position pos:line="57" pos:column="39"/></name></expr>)<pos:position pos:line="57" pos:column="40"/></condition><then pos:line="57" pos:column="40">
        <comment type="block" pos:line="58" pos:column="9">/* here we pass in the HEADER bit only since if this was body as well
           then it was passed already and clearly that didn't trigger the
           pause, so this is saved for later with the HEADER bit only */</comment>
        <block type="pseudo"><return pos:line="61" pos:column="9">return <expr><call><name pos:line="61" pos:column="16">pausewrite<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><name pos:line="61" pos:column="27">data<pos:position pos:line="61" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="33">CLIENTWRITE_HEADER<pos:position pos:line="61" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="53">ptr<pos:position pos:line="61" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="58">len<pos:position pos:line="61" pos:column="61"/></name></expr></argument>)<pos:position pos:line="61" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="63"/></return></block></then></if>

      <if pos:line="63" pos:column="7">if<condition pos:line="63" pos:column="9">(<expr><name pos:line="63" pos:column="10">wrote<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">!=<pos:position pos:line="63" pos:column="18"/></operator> <name pos:line="63" pos:column="19">chunklen<pos:position pos:line="63" pos:column="27"/></name></expr>)<pos:position pos:line="63" pos:column="28"/></condition><then pos:line="63" pos:column="28"> <block pos:line="63" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">failf<pos:position pos:line="64" pos:column="14"/></name><argument_list pos:line="64" pos:column="14">(<argument><expr><name pos:line="64" pos:column="15">data<pos:position pos:line="64" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="21">"Failed writing header"<pos:position pos:line="64" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="46"/></expr_stmt>
        <return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">CURLE_WRITE_ERROR<pos:position pos:line="65" pos:column="33"/></name></expr>;<pos:position pos:line="65" pos:column="34"/></return>
      }<pos:position pos:line="66" pos:column="8"/></block></then></if>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="69" pos:column="5">ptr<pos:position pos:line="69" pos:column="8"/></name> <operator pos:line="69" pos:column="9">+=<pos:position pos:line="69" pos:column="11"/></operator> <name pos:line="69" pos:column="12">chunklen<pos:position pos:line="69" pos:column="20"/></name></expr>;<pos:position pos:line="69" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="70" pos:column="5">len<pos:position pos:line="70" pos:column="8"/></name> <operator pos:line="70" pos:column="9">-=<pos:position pos:line="70" pos:column="11"/></operator> <name pos:line="70" pos:column="12">chunklen<pos:position pos:line="70" pos:column="20"/></name></expr>;<pos:position pos:line="70" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="71" pos:column="4"/></block></while>

  <return pos:line="73" pos:column="3">return <expr><name pos:line="73" pos:column="10">CURLE_OK<pos:position pos:line="73" pos:column="18"/></name></expr>;<pos:position pos:line="73" pos:column="19"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
