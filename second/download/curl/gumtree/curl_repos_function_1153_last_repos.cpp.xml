<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1153_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">imap_endofresp<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">line<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">size_t<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">len<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">resp<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">IMAP<pos:position pos:line="4" pos:column="14"/></name></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">imap<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name><name pos:line="4" pos:column="23">conn<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">-&gt;<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="29">data<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">-&gt;<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="35">req<pos:position pos:line="4" pos:column="38"/></name><operator pos:line="4" pos:column="38">.<pos:position pos:line="4" pos:column="39"/></operator><name pos:line="4" pos:column="39">protop<pos:position pos:line="4" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">imap_conn<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">imapc<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><operator pos:line="5" pos:column="29">&amp;<pos:position pos:line="5" pos:column="34"/></operator><name><name pos:line="5" pos:column="30">conn<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">-&gt;<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="36">proto<pos:position pos:line="5" pos:column="41"/></name><operator pos:line="5" pos:column="41">.<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="42">imapc<pos:position pos:line="5" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">id<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><name><name pos:line="6" pos:column="20">imapc<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">resptag<pos:position pos:line="6" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">id_len<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><call><name pos:line="7" pos:column="19">strlen<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><name pos:line="7" pos:column="26">id<pos:position pos:line="7" pos:column="28"/></name></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Do we have a tagged command response? */</comment>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">len<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">&gt;=<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="13">id_len<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">+<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="22">1<pos:position pos:line="10" pos:column="23"/></literal> <operator pos:line="10" pos:column="24">&amp;&amp;<pos:position pos:line="10" pos:column="34"/></operator> <operator pos:line="10" pos:column="27">!<pos:position pos:line="10" pos:column="28"/></operator><call><name pos:line="10" pos:column="28">memcmp<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">id<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="39">line<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="45">id_len<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call> <operator pos:line="10" pos:column="53">&amp;&amp;<pos:position pos:line="10" pos:column="63"/></operator> <name><name pos:line="10" pos:column="56">line<pos:position pos:line="10" pos:column="60"/></name><index pos:line="10" pos:column="60">[<expr><name pos:line="10" pos:column="61">id_len<pos:position pos:line="10" pos:column="67"/></name></expr>]<pos:position pos:line="10" pos:column="68"/></index></name> <operator pos:line="10" pos:column="69">==<pos:position pos:line="10" pos:column="71"/></operator> <literal type="char" pos:line="10" pos:column="72">' '<pos:position pos:line="10" pos:column="75"/></literal></expr>)<pos:position pos:line="10" pos:column="76"/></condition><then pos:line="10" pos:column="76"> <block pos:line="10" pos:column="77">{
    <expr_stmt><expr><name pos:line="11" pos:column="5">line<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">+=<pos:position pos:line="11" pos:column="12"/></operator> <name pos:line="11" pos:column="13">id_len<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">+<pos:position pos:line="11" pos:column="21"/></operator> <literal type="number" pos:line="11" pos:column="22">1<pos:position pos:line="11" pos:column="23"/></literal></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">len<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">-=<pos:position pos:line="12" pos:column="11"/></operator> <name pos:line="12" pos:column="12">id_len<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">+<pos:position pos:line="12" pos:column="20"/></operator> <literal type="number" pos:line="12" pos:column="21">1<pos:position pos:line="12" pos:column="22"/></literal></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>

    <if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><name pos:line="14" pos:column="8">len<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">&gt;=<pos:position pos:line="14" pos:column="17"/></operator> <literal type="number" pos:line="14" pos:column="15">2<pos:position pos:line="14" pos:column="16"/></literal> <operator pos:line="14" pos:column="17">&amp;&amp;<pos:position pos:line="14" pos:column="27"/></operator> <operator pos:line="14" pos:column="20">!<pos:position pos:line="14" pos:column="21"/></operator><call><name pos:line="14" pos:column="21">memcmp<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">line<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="34">"OK"<pos:position pos:line="14" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="40">2<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="43"/></condition><then pos:line="14" pos:column="43">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="15" pos:column="7">*<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">resp<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">IMAP_RESP_OK<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt></block></then>
    <elseif pos:line="16" pos:column="5">else <if pos:line="16" pos:column="10">if<condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">len<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&gt;=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="20">7<pos:position pos:line="16" pos:column="21"/></literal> <operator pos:line="16" pos:column="22">&amp;&amp;<pos:position pos:line="16" pos:column="32"/></operator> <operator pos:line="16" pos:column="25">!<pos:position pos:line="16" pos:column="26"/></operator><call><name pos:line="16" pos:column="26">memcmp<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">line<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="39">"PREAUTH"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="50">7<pos:position pos:line="16" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="53"/></condition><then pos:line="16" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="7">*<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">resp<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">IMAP_RESP_PREAUTH<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt></block></then></if></elseif>
    <else pos:line="18" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><operator pos:line="19" pos:column="7">*<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">resp<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <name pos:line="19" pos:column="15">IMAP_RESP_NOT_OK<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt></block></else></if>

    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">TRUE<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="24" pos:column="3">/* Do we have an untagged command response? */</comment>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">len<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">&gt;=<pos:position pos:line="25" pos:column="15"/></operator> <literal type="number" pos:line="25" pos:column="13">2<pos:position pos:line="25" pos:column="14"/></literal> <operator pos:line="25" pos:column="15">&amp;&amp;<pos:position pos:line="25" pos:column="25"/></operator> <operator pos:line="25" pos:column="18">!<pos:position pos:line="25" pos:column="19"/></operator><call><name pos:line="25" pos:column="19">memcmp<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><literal type="string" pos:line="25" pos:column="26">"* "<pos:position pos:line="25" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="32">line<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="38">2<pos:position pos:line="25" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="41"/></condition><then pos:line="25" pos:column="41"> <block pos:line="25" pos:column="42">{
    <switch pos:line="26" pos:column="5">switch<condition pos:line="26" pos:column="11">(<expr><name><name pos:line="26" pos:column="12">imapc<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">state<pos:position pos:line="26" pos:column="24"/></name></name></expr>)<pos:position pos:line="26" pos:column="25"/></condition> <block pos:line="26" pos:column="26">{
      <comment type="block" pos:line="27" pos:column="7">/* States which are interested in untagged responses */</comment>
      <case pos:line="28" pos:column="7">case <expr><name pos:line="28" pos:column="12">IMAP_CAPABILITY<pos:position pos:line="28" pos:column="27"/></name></expr>:<pos:position pos:line="28" pos:column="28"/></case>
        <if pos:line="29" pos:column="9">if<condition pos:line="29" pos:column="11">(<expr><operator pos:line="29" pos:column="12">!<pos:position pos:line="29" pos:column="13"/></operator><call><name pos:line="29" pos:column="13">imap_matchresp<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">line<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="34">len<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="39">"CAPABILITY"<pos:position pos:line="29" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="53"/></condition><then pos:line="29" pos:column="53">
          <block type="pseudo"><return pos:line="30" pos:column="11">return <expr><name pos:line="30" pos:column="18">FALSE<pos:position pos:line="30" pos:column="23"/></name></expr>;<pos:position pos:line="30" pos:column="24"/></return></block></then></if>
        <break pos:line="31" pos:column="9">break;<pos:position pos:line="31" pos:column="15"/></break>

      <case pos:line="33" pos:column="7">case <expr><name pos:line="33" pos:column="12">IMAP_LIST<pos:position pos:line="33" pos:column="21"/></name></expr>:<pos:position pos:line="33" pos:column="22"/></case>
        <if pos:line="34" pos:column="9">if<condition pos:line="34" pos:column="11">(<expr><operator pos:line="34" pos:column="12">(<pos:position pos:line="34" pos:column="13"/></operator><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name><name pos:line="34" pos:column="14">imap<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">-&gt;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="20">custom<pos:position pos:line="34" pos:column="26"/></name></name> <operator pos:line="34" pos:column="27">&amp;&amp;<pos:position pos:line="34" pos:column="37"/></operator> <operator pos:line="34" pos:column="30">!<pos:position pos:line="34" pos:column="31"/></operator><call><name pos:line="34" pos:column="31">imap_matchresp<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">line<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">len<pos:position pos:line="34" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="57">"LIST"<pos:position pos:line="34" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></call><operator pos:line="34" pos:column="64">)<pos:position pos:line="34" pos:column="65"/></operator> <operator pos:line="34" pos:column="66">||<pos:position pos:line="34" pos:column="68"/></operator>
          <operator pos:line="35" pos:column="11">(<pos:position pos:line="35" pos:column="12"/></operator><name><name pos:line="35" pos:column="12">imap<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">custom<pos:position pos:line="35" pos:column="24"/></name></name> <operator pos:line="35" pos:column="25">&amp;&amp;<pos:position pos:line="35" pos:column="35"/></operator> <operator pos:line="35" pos:column="28">!<pos:position pos:line="35" pos:column="29"/></operator><call><name pos:line="35" pos:column="29">imap_matchresp<pos:position pos:line="35" pos:column="43"/></name><argument_list pos:line="35" pos:column="43">(<argument><expr><name pos:line="35" pos:column="44">line<pos:position pos:line="35" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="50">len<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="55">imap<pos:position pos:line="35" pos:column="59"/></name><operator pos:line="35" pos:column="59">-&gt;<pos:position pos:line="35" pos:column="64"/></operator><name pos:line="35" pos:column="61">custom<pos:position pos:line="35" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="68"/></argument_list></call> <operator pos:line="35" pos:column="69">&amp;&amp;<pos:position pos:line="35" pos:column="79"/></operator>
           <operator pos:line="36" pos:column="12">(<pos:position pos:line="36" pos:column="13"/></operator><call><name pos:line="36" pos:column="13">strcmp<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name><name pos:line="36" pos:column="20">imap<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">custom<pos:position pos:line="36" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="34">"STORE"<pos:position pos:line="36" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call> <operator pos:line="36" pos:column="43">||<pos:position pos:line="36" pos:column="45"/></operator>
            <operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><call><name pos:line="37" pos:column="14">imap_matchresp<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">line<pos:position pos:line="37" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="35">len<pos:position pos:line="37" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="40">"FETCH"<pos:position pos:line="37" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></call><operator pos:line="37" pos:column="48">)<pos:position pos:line="37" pos:column="49"/></operator> <operator pos:line="37" pos:column="50">&amp;&amp;<pos:position pos:line="37" pos:column="60"/></operator>
           <call><name pos:line="38" pos:column="12">strcmp<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><name><name pos:line="38" pos:column="19">imap<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">-&gt;<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="25">custom<pos:position pos:line="38" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="33">"SELECT"<pos:position pos:line="38" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call> <operator pos:line="38" pos:column="43">&amp;&amp;<pos:position pos:line="38" pos:column="53"/></operator>
           <call><name pos:line="39" pos:column="12">strcmp<pos:position pos:line="39" pos:column="18"/></name><argument_list pos:line="39" pos:column="18">(<argument><expr><name><name pos:line="39" pos:column="19">imap<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">-&gt;<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="25">custom<pos:position pos:line="39" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="33">"EXAMINE"<pos:position pos:line="39" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call> <operator pos:line="39" pos:column="44">&amp;&amp;<pos:position pos:line="39" pos:column="54"/></operator>
           <call><name pos:line="40" pos:column="12">strcmp<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name><name pos:line="40" pos:column="19">imap<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">custom<pos:position pos:line="40" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="33">"SEARCH"<pos:position pos:line="40" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call> <operator pos:line="40" pos:column="43">&amp;&amp;<pos:position pos:line="40" pos:column="53"/></operator>
           <call><name pos:line="41" pos:column="12">strcmp<pos:position pos:line="41" pos:column="18"/></name><argument_list pos:line="41" pos:column="18">(<argument><expr><name><name pos:line="41" pos:column="19">imap<pos:position pos:line="41" pos:column="23"/></name><operator pos:line="41" pos:column="23">-&gt;<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="25">custom<pos:position pos:line="41" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="33">"EXPUNGE"<pos:position pos:line="41" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call> <operator pos:line="41" pos:column="44">&amp;&amp;<pos:position pos:line="41" pos:column="54"/></operator>
           <call><name pos:line="42" pos:column="12">strcmp<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name><name pos:line="42" pos:column="19">imap<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">-&gt;<pos:position pos:line="42" pos:column="28"/></operator><name pos:line="42" pos:column="25">custom<pos:position pos:line="42" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="33">"LSUB"<pos:position pos:line="42" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call> <operator pos:line="42" pos:column="41">&amp;&amp;<pos:position pos:line="42" pos:column="51"/></operator>
           <call><name pos:line="43" pos:column="12">strcmp<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name><name pos:line="43" pos:column="19">imap<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">-&gt;<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="25">custom<pos:position pos:line="43" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="33">"UID"<pos:position pos:line="43" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="39"/></argument_list></call> <operator pos:line="43" pos:column="40">&amp;&amp;<pos:position pos:line="43" pos:column="50"/></operator>
           <call><name pos:line="44" pos:column="12">strcmp<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">(<argument><expr><name><name pos:line="44" pos:column="19">imap<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">-&gt;<pos:position pos:line="44" pos:column="28"/></operator><name pos:line="44" pos:column="25">custom<pos:position pos:line="44" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="33">"NOOP"<pos:position pos:line="44" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="40"/></argument_list></call><operator pos:line="44" pos:column="40">)<pos:position pos:line="44" pos:column="41"/></operator></expr>)<pos:position pos:line="44" pos:column="42"/></condition><then pos:line="44" pos:column="42">
          <block type="pseudo"><return pos:line="45" pos:column="11">return <expr><name pos:line="45" pos:column="18">FALSE<pos:position pos:line="45" pos:column="23"/></name></expr>;<pos:position pos:line="45" pos:column="24"/></return></block></then></if>
        <break pos:line="46" pos:column="9">break;<pos:position pos:line="46" pos:column="15"/></break>

      <case pos:line="48" pos:column="7">case <expr><name pos:line="48" pos:column="12">IMAP_SELECT<pos:position pos:line="48" pos:column="23"/></name></expr>:<pos:position pos:line="48" pos:column="24"/></case>
        <comment type="block" pos:line="49" pos:column="9">/* SELECT is special in that its untagged responses do not have a
           common prefix so accept anything! */</comment>
        <break pos:line="51" pos:column="9">break;<pos:position pos:line="51" pos:column="15"/></break>

      <case pos:line="53" pos:column="7">case <expr><name pos:line="53" pos:column="12">IMAP_FETCH<pos:position pos:line="53" pos:column="22"/></name></expr>:<pos:position pos:line="53" pos:column="23"/></case>
        <if pos:line="54" pos:column="9">if<condition pos:line="54" pos:column="11">(<expr><operator pos:line="54" pos:column="12">!<pos:position pos:line="54" pos:column="13"/></operator><call><name pos:line="54" pos:column="13">imap_matchresp<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><name pos:line="54" pos:column="28">line<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="34">len<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="39">"FETCH"<pos:position pos:line="54" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="48"/></condition><then pos:line="54" pos:column="48">
          <block type="pseudo"><return pos:line="55" pos:column="11">return <expr><name pos:line="55" pos:column="18">FALSE<pos:position pos:line="55" pos:column="23"/></name></expr>;<pos:position pos:line="55" pos:column="24"/></return></block></then></if>
        <break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break>

      <case pos:line="58" pos:column="7">case <expr><name pos:line="58" pos:column="12">IMAP_SEARCH<pos:position pos:line="58" pos:column="23"/></name></expr>:<pos:position pos:line="58" pos:column="24"/></case>
        <if pos:line="59" pos:column="9">if<condition pos:line="59" pos:column="11">(<expr><operator pos:line="59" pos:column="12">!<pos:position pos:line="59" pos:column="13"/></operator><call><name pos:line="59" pos:column="13">imap_matchresp<pos:position pos:line="59" pos:column="27"/></name><argument_list pos:line="59" pos:column="27">(<argument><expr><name pos:line="59" pos:column="28">line<pos:position pos:line="59" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="34">len<pos:position pos:line="59" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="39">"SEARCH"<pos:position pos:line="59" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="49"/></condition><then pos:line="59" pos:column="49">
          <block type="pseudo"><return pos:line="60" pos:column="11">return <expr><name pos:line="60" pos:column="18">FALSE<pos:position pos:line="60" pos:column="23"/></name></expr>;<pos:position pos:line="60" pos:column="24"/></return></block></then></if>
        <break pos:line="61" pos:column="9">break;<pos:position pos:line="61" pos:column="15"/></break>

      <comment type="block" pos:line="63" pos:column="7">/* Ignore other untagged responses */</comment>
      <default pos:line="64" pos:column="7">default:<pos:position pos:line="64" pos:column="15"/></default>
        <return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">FALSE<pos:position pos:line="65" pos:column="21"/></name></expr>;<pos:position pos:line="65" pos:column="22"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></switch>

    <expr_stmt><expr><operator pos:line="68" pos:column="5">*<pos:position pos:line="68" pos:column="6"/></operator><name pos:line="68" pos:column="6">resp<pos:position pos:line="68" pos:column="10"/></name> <operator pos:line="68" pos:column="11">=<pos:position pos:line="68" pos:column="12"/></operator> <literal type="char" pos:line="68" pos:column="13">'*'<pos:position pos:line="68" pos:column="16"/></literal></expr>;<pos:position pos:line="68" pos:column="17"/></expr_stmt>
    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">TRUE<pos:position pos:line="69" pos:column="16"/></name></expr>;<pos:position pos:line="69" pos:column="17"/></return>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="72" pos:column="3">/* Do we have a continuation response? This should be a + symbol followed by
     a space and optionally some text as per RFC-3501 for the AUTHENTICATE and
     APPEND commands and as outlined in Section 4. Examples of RFC-4959 but
     some e-mail servers ignore this and only send a single + instead. */</comment>
  <if pos:line="76" pos:column="3">if<condition pos:line="76" pos:column="5">(<expr><name pos:line="76" pos:column="6">imap<pos:position pos:line="76" pos:column="10"/></name> <operator pos:line="76" pos:column="11">&amp;&amp;<pos:position pos:line="76" pos:column="21"/></operator> <operator pos:line="76" pos:column="14">!<pos:position pos:line="76" pos:column="15"/></operator><name><name pos:line="76" pos:column="15">imap<pos:position pos:line="76" pos:column="19"/></name><operator pos:line="76" pos:column="19">-&gt;<pos:position pos:line="76" pos:column="24"/></operator><name pos:line="76" pos:column="21">custom<pos:position pos:line="76" pos:column="27"/></name></name> <operator pos:line="76" pos:column="28">&amp;&amp;<pos:position pos:line="76" pos:column="38"/></operator> <operator pos:line="76" pos:column="31">(<pos:position pos:line="76" pos:column="32"/></operator><operator pos:line="76" pos:column="32">(<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="33">len<pos:position pos:line="76" pos:column="36"/></name> <operator pos:line="76" pos:column="37">==<pos:position pos:line="76" pos:column="39"/></operator> <literal type="number" pos:line="76" pos:column="40">3<pos:position pos:line="76" pos:column="41"/></literal> <operator pos:line="76" pos:column="42">&amp;&amp;<pos:position pos:line="76" pos:column="52"/></operator> <operator pos:line="76" pos:column="45">!<pos:position pos:line="76" pos:column="46"/></operator><call><name pos:line="76" pos:column="46">memcmp<pos:position pos:line="76" pos:column="52"/></name><argument_list pos:line="76" pos:column="52">(<argument><expr><literal type="string" pos:line="76" pos:column="53">"+"<pos:position pos:line="76" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="58">line<pos:position pos:line="76" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="64">1<pos:position pos:line="76" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="66"/></argument_list></call><operator pos:line="76" pos:column="66">)<pos:position pos:line="76" pos:column="67"/></operator> <operator pos:line="76" pos:column="68">||<pos:position pos:line="76" pos:column="70"/></operator>
     <operator pos:line="77" pos:column="6">(<pos:position pos:line="77" pos:column="7"/></operator><name pos:line="77" pos:column="7">len<pos:position pos:line="77" pos:column="10"/></name> <operator pos:line="77" pos:column="11">&gt;=<pos:position pos:line="77" pos:column="16"/></operator> <literal type="number" pos:line="77" pos:column="14">2<pos:position pos:line="77" pos:column="15"/></literal> <operator pos:line="77" pos:column="16">&amp;&amp;<pos:position pos:line="77" pos:column="26"/></operator> <operator pos:line="77" pos:column="19">!<pos:position pos:line="77" pos:column="20"/></operator><call><name pos:line="77" pos:column="20">memcmp<pos:position pos:line="77" pos:column="26"/></name><argument_list pos:line="77" pos:column="26">(<argument><expr><literal type="string" pos:line="77" pos:column="27">"+ "<pos:position pos:line="77" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="33">line<pos:position pos:line="77" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="39">2<pos:position pos:line="77" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="41"/></argument_list></call><operator pos:line="77" pos:column="41">)<pos:position pos:line="77" pos:column="42"/></operator><operator pos:line="77" pos:column="42">)<pos:position pos:line="77" pos:column="43"/></operator></expr>)<pos:position pos:line="77" pos:column="44"/></condition><then pos:line="77" pos:column="44"> <block pos:line="77" pos:column="45">{
    <switch pos:line="78" pos:column="5">switch<condition pos:line="78" pos:column="11">(<expr><name><name pos:line="78" pos:column="12">imapc<pos:position pos:line="78" pos:column="17"/></name><operator pos:line="78" pos:column="17">-&gt;<pos:position pos:line="78" pos:column="22"/></operator><name pos:line="78" pos:column="19">state<pos:position pos:line="78" pos:column="24"/></name></name></expr>)<pos:position pos:line="78" pos:column="25"/></condition> <block pos:line="78" pos:column="26">{
      <comment type="block" pos:line="79" pos:column="7">/* States which are interested in continuation responses */</comment>
      <case pos:line="80" pos:column="7">case <expr><name pos:line="80" pos:column="12">IMAP_AUTHENTICATE<pos:position pos:line="80" pos:column="29"/></name></expr>:<pos:position pos:line="80" pos:column="30"/></case>
      <case pos:line="81" pos:column="7">case <expr><name pos:line="81" pos:column="12">IMAP_APPEND<pos:position pos:line="81" pos:column="23"/></name></expr>:<pos:position pos:line="81" pos:column="24"/></case>
        <expr_stmt><expr><operator pos:line="82" pos:column="9">*<pos:position pos:line="82" pos:column="10"/></operator><name pos:line="82" pos:column="10">resp<pos:position pos:line="82" pos:column="14"/></name> <operator pos:line="82" pos:column="15">=<pos:position pos:line="82" pos:column="16"/></operator> <literal type="char" pos:line="82" pos:column="17">'+'<pos:position pos:line="82" pos:column="20"/></literal></expr>;<pos:position pos:line="82" pos:column="21"/></expr_stmt>
        <break pos:line="83" pos:column="9">break;<pos:position pos:line="83" pos:column="15"/></break>

      <default pos:line="85" pos:column="7">default:<pos:position pos:line="85" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">failf<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><name><name pos:line="86" pos:column="15">conn<pos:position pos:line="86" pos:column="19"/></name><operator pos:line="86" pos:column="19">-&gt;<pos:position pos:line="86" pos:column="24"/></operator><name pos:line="86" pos:column="21">data<pos:position pos:line="86" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="27">"Unexpected continuation response"<pos:position pos:line="86" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="87" pos:column="9">*<pos:position pos:line="87" pos:column="10"/></operator><name pos:line="87" pos:column="10">resp<pos:position pos:line="87" pos:column="14"/></name> <operator pos:line="87" pos:column="15">=<pos:position pos:line="87" pos:column="16"/></operator> <operator pos:line="87" pos:column="17">-<pos:position pos:line="87" pos:column="18"/></operator><literal type="number" pos:line="87" pos:column="18">1<pos:position pos:line="87" pos:column="19"/></literal></expr>;<pos:position pos:line="87" pos:column="20"/></expr_stmt>
        <break pos:line="88" pos:column="9">break;<pos:position pos:line="88" pos:column="15"/></break>
    }<pos:position pos:line="89" pos:column="6"/></block></switch>

    <return pos:line="91" pos:column="5">return <expr><name pos:line="91" pos:column="12">TRUE<pos:position pos:line="91" pos:column="16"/></name></expr>;<pos:position pos:line="91" pos:column="17"/></return>
  }<pos:position pos:line="92" pos:column="4"/></block></then></if>

  <return pos:line="94" pos:column="3">return <expr><name pos:line="94" pos:column="10">FALSE<pos:position pos:line="94" pos:column="15"/></name></expr>;<pos:position pos:line="94" pos:column="16"/></return> <comment type="block" pos:line="94" pos:column="17">/* Nothing for us */</comment>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
