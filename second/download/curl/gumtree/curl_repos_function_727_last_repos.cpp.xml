<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_727_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">sendtftp<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">testcase<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">test<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">formats<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">pf<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">size<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ssize_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">n<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <comment type="block" pos:line="5" pos:column="3">/* These are volatile to live through a siglongjmp */</comment>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">volatile<pos:position pos:line="6" pos:column="11"/></specifier> <name pos:line="6" pos:column="12">unsigned<pos:position pos:line="6" pos:column="20"/></name> <name pos:line="6" pos:column="21">short<pos:position pos:line="6" pos:column="26"/></name></type> <name pos:line="6" pos:column="27">sendblock<pos:position pos:line="6" pos:column="36"/></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt> <comment type="block" pos:line="6" pos:column="38">/* block count */</comment>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">tftphdr<pos:position pos:line="7" pos:column="17"/></name></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier> <specifier pos:line="7" pos:column="20">volatile<pos:position pos:line="7" pos:column="28"/></specifier></type> <name pos:line="7" pos:column="29">sdp<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><call><name pos:line="7" pos:column="35">r_init<pos:position pos:line="7" pos:column="41"/></name><argument_list pos:line="7" pos:column="41">()<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt> <comment type="block" pos:line="7" pos:column="45">/* data buffer */</comment>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">tftphdr<pos:position pos:line="8" pos:column="17"/></name></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier> <specifier pos:line="8" pos:column="20">const<pos:position pos:line="8" pos:column="25"/></specifier></type> <name pos:line="8" pos:column="26">sap<pos:position pos:line="8" pos:column="29"/></name> <init pos:line="8" pos:column="30">= <expr><operator pos:line="8" pos:column="32">&amp;<pos:position pos:line="8" pos:column="37"/></operator><name><name pos:line="8" pos:column="33">ackbuf<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">.<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">hdr<pos:position pos:line="8" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt> <comment type="block" pos:line="8" pos:column="45">/* ack buffer */</comment>

  <expr_stmt><expr><name pos:line="10" pos:column="3">sendblock<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <literal type="number" pos:line="10" pos:column="15">1<pos:position pos:line="10" pos:column="16"/></literal></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><call><name pos:line="11" pos:column="5">defined<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">HAVE_ALARM<pos:position pos:line="11" pos:column="23"/></name></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call> <operator pos:line="11" pos:column="25">&amp;&amp;<pos:position pos:line="11" pos:column="35"/></operator> <call><name pos:line="11" pos:column="28">defined<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><name pos:line="11" pos:column="36">SIGALRM<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">mysignal<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">SIGALRM<pos:position pos:line="12" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="21">timer<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
  <do pos:line="14" pos:column="3">do <block pos:line="14" pos:column="6">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">size<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">readit<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">test<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator>struct <name pos:line="15" pos:column="33">tftphdr<pos:position pos:line="15" pos:column="40"/></name> <operator pos:line="15" pos:column="41">*<pos:position pos:line="15" pos:column="42"/></operator><operator pos:line="15" pos:column="42">*<pos:position pos:line="15" pos:column="43"/></operator><operator pos:line="15" pos:column="43">)<pos:position pos:line="15" pos:column="44"/></operator><operator pos:line="15" pos:column="44">&amp;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="45">sdp<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="50">pf<pos:position pos:line="15" pos:column="52"/></name><operator pos:line="15" pos:column="52">-&gt;<pos:position pos:line="15" pos:column="57"/></operator><name pos:line="15" pos:column="54">f_convert<pos:position pos:line="15" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="65"/></expr_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name pos:line="16" pos:column="8">size<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">&lt;<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="15">0<pos:position pos:line="16" pos:column="16"/></literal></expr>)<pos:position pos:line="16" pos:column="17"/></condition><then pos:line="16" pos:column="17"> <block pos:line="16" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">nak<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">errno<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">+<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="19">100<pos:position pos:line="17" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
      <return pos:line="18" pos:column="7">return;<pos:position pos:line="18" pos:column="14"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">sdp<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">-&gt;<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="10">th_opcode<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <call><name pos:line="20" pos:column="22">htons<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><operator pos:line="20" pos:column="28">(<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="29">unsigned<pos:position pos:line="20" pos:column="37"/></name> <name pos:line="20" pos:column="38">short<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">)<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="44">opcode_DATA<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">sdp<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">-&gt;<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="10">th_block<pos:position pos:line="21" pos:column="18"/></name></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">htons<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">sendblock<pos:position pos:line="21" pos:column="36"/></name></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">timeout<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <literal type="number" pos:line="22" pos:column="15">0<pos:position pos:line="22" pos:column="16"/></literal></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt>
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">HAVE_SIGSETJMP<pos:position pos:line="23" pos:column="22"/></name></cpp:ifdef>
    <expr_stmt><expr><operator pos:line="24" pos:column="5">(<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">void<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">)<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">sigsetjmp<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">timeoutbuf<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="34">1<pos:position pos:line="24" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><name><name pos:line="26" pos:column="8">test<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">writedelay<pos:position pos:line="26" pos:column="24"/></name></name></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25"> <block pos:line="26" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">logmsg<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><literal type="string" pos:line="27" pos:column="14">"Pausing %d seconds before %d bytes"<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="52">test<pos:position pos:line="27" pos:column="56"/></name><operator pos:line="27" pos:column="56">-&gt;<pos:position pos:line="27" pos:column="61"/></operator><name pos:line="27" pos:column="58">writedelay<pos:position pos:line="27" pos:column="68"/></name></name></expr></argument>,
             <argument><expr><name pos:line="28" pos:column="14">size<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">wait_ms<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><literal type="number" pos:line="29" pos:column="15">1000<pos:position pos:line="29" pos:column="19"/></literal><operator pos:line="29" pos:column="19">*<pos:position pos:line="29" pos:column="20"/></operator><name><name pos:line="29" pos:column="20">test<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">-&gt;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="26">writedelay<pos:position pos:line="29" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <label><name pos:line="32" pos:column="5">send_data<pos:position pos:line="32" pos:column="14"/></name>:<pos:position pos:line="32" pos:column="15"/></label>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><call><name pos:line="33" pos:column="8">swrite<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">peer<pos:position pos:line="33" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="21">sdp<pos:position pos:line="33" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="26">size<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">+<pos:position pos:line="33" pos:column="32"/></operator> <literal type="number" pos:line="33" pos:column="33">4<pos:position pos:line="33" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call> <operator pos:line="33" pos:column="36">!=<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="39">size<pos:position pos:line="33" pos:column="43"/></name> <operator pos:line="33" pos:column="44">+<pos:position pos:line="33" pos:column="45"/></operator> <literal type="number" pos:line="33" pos:column="46">4<pos:position pos:line="33" pos:column="47"/></literal></expr>)<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48"> <block pos:line="33" pos:column="49">{
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">logmsg<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><literal type="string" pos:line="34" pos:column="14">"write"<pos:position pos:line="34" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
      <return pos:line="35" pos:column="7">return;<pos:position pos:line="35" pos:column="14"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">read_ahead<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">test<pos:position pos:line="37" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="22">pf<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-&gt;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="26">f_convert<pos:position pos:line="37" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
    <for pos:line="38" pos:column="5">for<control pos:line="38" pos:column="8">(<init pos:line="38" pos:column="9">;<pos:position pos:line="38" pos:column="10"/></init><condition pos:line="38" pos:column="10">;<pos:position pos:line="38" pos:column="11"/></condition><incr/>)<pos:position pos:line="38" pos:column="12"/></control> <block pos:line="38" pos:column="13">{
<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">HAVE_ALARM<pos:position pos:line="39" pos:column="18"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">alarm<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">rexmtval<pos:position pos:line="40" pos:column="21"/></name></expr></argument>)<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>        <comment type="block" pos:line="40" pos:column="31">/* read the ack */</comment>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="42" pos:column="7">n<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <call><name pos:line="42" pos:column="11">sread<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><name pos:line="42" pos:column="17">peer<pos:position pos:line="42" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="23">&amp;<pos:position pos:line="42" pos:column="28"/></operator><name><name pos:line="42" pos:column="24">ackbuf<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">.<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="31">storage<pos:position pos:line="42" pos:column="38"/></name><index pos:line="42" pos:column="38">[<expr><literal type="number" pos:line="42" pos:column="39">0<pos:position pos:line="42" pos:column="40"/></literal></expr>]<pos:position pos:line="42" pos:column="41"/></index></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="43">sizeof<argument_list pos:line="42" pos:column="49">(<argument><expr><name><name pos:line="42" pos:column="50">ackbuf<pos:position pos:line="42" pos:column="56"/></name><operator pos:line="42" pos:column="56">.<pos:position pos:line="42" pos:column="57"/></operator><name pos:line="42" pos:column="57">storage<pos:position pos:line="42" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="67"/></expr_stmt>
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">HAVE_ALARM<pos:position pos:line="43" pos:column="18"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">alarm<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><literal type="number" pos:line="44" pos:column="13">0<pos:position pos:line="44" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>
      <if pos:line="46" pos:column="7">if<condition pos:line="46" pos:column="9">(<expr><name pos:line="46" pos:column="10">got_exit_signal<pos:position pos:line="46" pos:column="25"/></name></expr>)<pos:position pos:line="46" pos:column="26"/></condition><then pos:line="46" pos:column="26">
        <block type="pseudo"><return pos:line="47" pos:column="9">return;<pos:position pos:line="47" pos:column="16"/></return></block></then></if>
      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><name pos:line="48" pos:column="10">n<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">&lt;<pos:position pos:line="48" pos:column="16"/></operator> <literal type="number" pos:line="48" pos:column="14">0<pos:position pos:line="48" pos:column="15"/></literal></expr>)<pos:position pos:line="48" pos:column="16"/></condition><then pos:line="48" pos:column="16"> <block pos:line="48" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">logmsg<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="string" pos:line="49" pos:column="16">"read: fail"<pos:position pos:line="49" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
        <return pos:line="50" pos:column="9">return;<pos:position pos:line="50" pos:column="16"/></return>
      }<pos:position pos:line="51" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="52" pos:column="7">sap<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">th_opcode<pos:position pos:line="52" pos:column="21"/></name></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <call><name pos:line="52" pos:column="24">ntohs<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><operator pos:line="52" pos:column="30">(<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="31">unsigned<pos:position pos:line="52" pos:column="39"/></name> <name pos:line="52" pos:column="40">short<pos:position pos:line="52" pos:column="45"/></name><operator pos:line="52" pos:column="45">)<pos:position pos:line="52" pos:column="46"/></operator><name><name pos:line="52" pos:column="46">sap<pos:position pos:line="52" pos:column="49"/></name><operator pos:line="52" pos:column="49">-&gt;<pos:position pos:line="52" pos:column="54"/></operator><name pos:line="52" pos:column="51">th_opcode<pos:position pos:line="52" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">sap<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">-&gt;<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="12">th_block<pos:position pos:line="53" pos:column="20"/></name></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <call><name pos:line="53" pos:column="23">ntohs<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name><name pos:line="53" pos:column="29">sap<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">-&gt;<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="34">th_block<pos:position pos:line="53" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="44"/></expr_stmt>

      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">(<expr><name><name pos:line="55" pos:column="10">sap<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">-&gt;<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="15">th_opcode<pos:position pos:line="55" pos:column="24"/></name></name> <operator pos:line="55" pos:column="25">==<pos:position pos:line="55" pos:column="27"/></operator> <name pos:line="55" pos:column="28">opcode_ERROR<pos:position pos:line="55" pos:column="40"/></name></expr>)<pos:position pos:line="55" pos:column="41"/></condition><then pos:line="55" pos:column="41"> <block pos:line="55" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">logmsg<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><literal type="string" pos:line="56" pos:column="16">"got ERROR"<pos:position pos:line="56" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="29"/></expr_stmt>
        <return pos:line="57" pos:column="9">return;<pos:position pos:line="57" pos:column="16"/></return>
      }<pos:position pos:line="58" pos:column="8"/></block></then></if>

      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><name><name pos:line="60" pos:column="10">sap<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">-&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">th_opcode<pos:position pos:line="60" pos:column="24"/></name></name> <operator pos:line="60" pos:column="25">==<pos:position pos:line="60" pos:column="27"/></operator> <name pos:line="60" pos:column="28">opcode_ACK<pos:position pos:line="60" pos:column="38"/></name></expr>)<pos:position pos:line="60" pos:column="39"/></condition><then pos:line="60" pos:column="39"> <block pos:line="60" pos:column="40">{
        <if pos:line="61" pos:column="9">if<condition pos:line="61" pos:column="11">(<expr><name><name pos:line="61" pos:column="12">sap<pos:position pos:line="61" pos:column="15"/></name><operator pos:line="61" pos:column="15">-&gt;<pos:position pos:line="61" pos:column="20"/></operator><name pos:line="61" pos:column="17">th_block<pos:position pos:line="61" pos:column="25"/></name></name> <operator pos:line="61" pos:column="26">==<pos:position pos:line="61" pos:column="28"/></operator> <name pos:line="61" pos:column="29">sendblock<pos:position pos:line="61" pos:column="38"/></name></expr>)<pos:position pos:line="61" pos:column="39"/></condition><then pos:line="61" pos:column="39"> <block pos:line="61" pos:column="40">{
          <break pos:line="62" pos:column="11">break;<pos:position pos:line="62" pos:column="17"/></break>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="64" pos:column="9">/* Re-synchronize with the other side */</comment>
        <expr_stmt><expr><operator pos:line="65" pos:column="9">(<pos:position pos:line="65" pos:column="10"/></operator><name pos:line="65" pos:column="10">void<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">)<pos:position pos:line="65" pos:column="15"/></operator> <call><name pos:line="65" pos:column="16">synchnet<pos:position pos:line="65" pos:column="24"/></name><argument_list pos:line="65" pos:column="24">(<argument><expr><name pos:line="65" pos:column="25">peer<pos:position pos:line="65" pos:column="29"/></name></expr></argument>)<pos:position pos:line="65" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>
        <if pos:line="66" pos:column="9">if<condition pos:line="66" pos:column="11">(<expr><name><name pos:line="66" pos:column="12">sap<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">-&gt;<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="17">th_block<pos:position pos:line="66" pos:column="25"/></name></name> <operator pos:line="66" pos:column="26">==<pos:position pos:line="66" pos:column="28"/></operator> <operator pos:line="66" pos:column="29">(<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="30">sendblock<pos:position pos:line="66" pos:column="39"/></name><operator pos:line="66" pos:column="39">-<pos:position pos:line="66" pos:column="40"/></operator><literal type="number" pos:line="66" pos:column="40">1<pos:position pos:line="66" pos:column="41"/></literal><operator pos:line="66" pos:column="41">)<pos:position pos:line="66" pos:column="42"/></operator></expr>)<pos:position pos:line="66" pos:column="43"/></condition><then pos:line="66" pos:column="43"> <block pos:line="66" pos:column="44">{
          <goto pos:line="67" pos:column="11">goto <name pos:line="67" pos:column="16">send_data<pos:position pos:line="67" pos:column="25"/></name>;<pos:position pos:line="67" pos:column="26"/></goto>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if>
      }<pos:position pos:line="69" pos:column="8"/></block></then></if>

    }<pos:position pos:line="71" pos:column="6"/></block></for>
    <expr_stmt><expr><name pos:line="72" pos:column="5">sendblock<pos:position pos:line="72" pos:column="14"/></name><operator pos:line="72" pos:column="14">++<pos:position pos:line="72" pos:column="16"/></operator></expr>;<pos:position pos:line="72" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="73" pos:column="4"/></block> while<condition pos:line="73" pos:column="10">(<expr><name pos:line="73" pos:column="11">size<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">==<pos:position pos:line="73" pos:column="18"/></operator> <name pos:line="73" pos:column="19">SEGSIZE<pos:position pos:line="73" pos:column="26"/></name></expr>)<pos:position pos:line="73" pos:column="27"/></condition>;<pos:position pos:line="73" pos:column="28"/></do>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
