<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_714_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">restore_signal_handlers<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">void<pos:position pos:line="1" pos:column="41"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">SIGHUP<pos:position pos:line="3" pos:column="14"/></name></cpp:ifdef>
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><name pos:line="4" pos:column="6">SIG_ERR<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">!=<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">old_sighup_handler<pos:position pos:line="4" pos:column="35"/></name></expr>)<pos:position pos:line="4" pos:column="36"/></condition><then pos:line="4" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="5" pos:column="5">(<pos:position pos:line="5" pos:column="6"/></operator><name pos:line="5" pos:column="6">void<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">)<pos:position pos:line="5" pos:column="11"/></operator><call><name pos:line="5" pos:column="11">signal<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">(<argument><expr><name pos:line="5" pos:column="18">SIGHUP<pos:position pos:line="5" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="26">old_sighup_handler<pos:position pos:line="5" pos:column="44"/></name></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="46"/></expr_stmt></block></then></if>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">SIGPIPE<pos:position pos:line="7" pos:column="15"/></name></cpp:ifdef>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name pos:line="8" pos:column="6">SIG_ERR<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">!=<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">old_sigpipe_handler<pos:position pos:line="8" pos:column="36"/></name></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="9" pos:column="5">(<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">void<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">)<pos:position pos:line="9" pos:column="11"/></operator><call><name pos:line="9" pos:column="11">signal<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">SIGPIPE<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">old_sigpipe_handler<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="48"/></expr_stmt></block></then></if>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">SIGINT<pos:position pos:line="11" pos:column="14"/></name></cpp:ifdef>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name pos:line="12" pos:column="6">SIG_ERR<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">!=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">old_sigint_handler<pos:position pos:line="12" pos:column="35"/></name></expr>)<pos:position pos:line="12" pos:column="36"/></condition><then pos:line="12" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="13" pos:column="5">(<pos:position pos:line="13" pos:column="6"/></operator><name pos:line="13" pos:column="6">void<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">)<pos:position pos:line="13" pos:column="11"/></operator><call><name pos:line="13" pos:column="11">signal<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">SIGINT<pos:position pos:line="13" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="26">old_sigint_handler<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt></block></then></if>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">SIGTERM<pos:position pos:line="15" pos:column="15"/></name></cpp:ifdef>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">SIG_ERR<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">!=<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">old_sigterm_handler<pos:position pos:line="16" pos:column="36"/></name></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="5">(<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">void<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">)<pos:position pos:line="17" pos:column="11"/></operator><call><name pos:line="17" pos:column="11">signal<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">(<argument><expr><name pos:line="17" pos:column="18">SIGTERM<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="27">old_sigterm_handler<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt></block></then></if>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><call><name pos:line="19" pos:column="5">defined<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><name pos:line="19" pos:column="13">SIGBREAK<pos:position pos:line="19" pos:column="21"/></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call> <operator pos:line="19" pos:column="23">&amp;&amp;<pos:position pos:line="19" pos:column="33"/></operator> <call><name pos:line="19" pos:column="26">defined<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">WIN32<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr></cpp:if>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">SIG_ERR<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">!=<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">old_sigbreak_handler<pos:position pos:line="20" pos:column="37"/></name></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="5">(<pos:position pos:line="21" pos:column="6"/></operator><name pos:line="21" pos:column="6">void<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">)<pos:position pos:line="21" pos:column="11"/></operator><call><name pos:line="21" pos:column="11">signal<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">SIGBREAK<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">old_sigbreak_handler<pos:position pos:line="21" pos:column="48"/></name></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt></block></then></if>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
