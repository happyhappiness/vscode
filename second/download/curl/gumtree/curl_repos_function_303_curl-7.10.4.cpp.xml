<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_303_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">Curl_addrinfo<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">my_getaddrinfo<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">SessionHandle<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">data<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">hostname<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="3" pos:column="38">int<pos:position pos:line="3" pos:column="41"/></name></type> <name pos:line="3" pos:column="42">port<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="4" pos:column="38">char<pos:position pos:line="4" pos:column="42"/></name> <modifier pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></modifier><modifier pos:line="4" pos:column="44">*<pos:position pos:line="4" pos:column="45"/></modifier></type><name pos:line="4" pos:column="45">bufp<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="50"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">hints<pos:position pos:line="6" pos:column="24"/></name></decl>, <modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="27">res<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">error<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">sbuf<pos:position pos:line="8" pos:column="12"/></name><index pos:line="8" pos:column="12">[<expr><name pos:line="8" pos:column="13">NI_MAXSERV<pos:position pos:line="8" pos:column="23"/></name></expr>]<pos:position pos:line="8" pos:column="24"/></index></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">s<pos:position pos:line="9" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="10">pf<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><name pos:line="9" pos:column="15">PF_UNSPEC<pos:position pos:line="9" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* see if we have an IPv6 stack */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">s<pos:position pos:line="12" pos:column="4"/></name> <operator pos:line="12" pos:column="5">=<pos:position pos:line="12" pos:column="6"/></operator> <call><name pos:line="12" pos:column="7">socket<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">PF_INET6<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="24">SOCK_DGRAM<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="36">0<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">s<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">&lt;<pos:position pos:line="13" pos:column="13"/></operator> <literal type="number" pos:line="13" pos:column="11">0<pos:position pos:line="13" pos:column="12"/></literal></expr>)<pos:position pos:line="13" pos:column="13"/></condition><then pos:line="13" pos:column="13">
    <comment type="block" pos:line="14" pos:column="5">/* Some non-IPv6 stacks have been found to make very slow name resolves
     * when PF_UNSPEC is used, so thus we switch to a mere PF_INET lookup if
     * the stack seems to be a non-ipv6 one. */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="5">pf<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <name pos:line="17" pos:column="10">PF_INET<pos:position pos:line="17" pos:column="17"/></name></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt></block></then>
  <else pos:line="18" pos:column="3">else
    <comment type="block" pos:line="19" pos:column="5">/* This seems to be an IPv6-capable stack, use PF_UNSPEC for the widest
     * possible checks. And close the socket again.
     */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="5">sclose<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name pos:line="22" pos:column="12">s<pos:position pos:line="22" pos:column="13"/></name></expr></argument>)<pos:position pos:line="22" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="15"/></expr_stmt></block></else></if>
 
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">memset<pos:position pos:line="24" pos:column="9"/></name><argument_list pos:line="24" pos:column="9">(<argument><expr><operator pos:line="24" pos:column="10">&amp;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="11">hints<pos:position pos:line="24" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="18">0<pos:position pos:line="24" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="21">sizeof<argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">hints<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">hints<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">.<pos:position pos:line="25" pos:column="9"/></operator><name pos:line="25" pos:column="9">ai_family<pos:position pos:line="25" pos:column="18"/></name></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">pf<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">hints<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">.<pos:position pos:line="26" pos:column="9"/></operator><name pos:line="26" pos:column="9">ai_socktype<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">SOCK_STREAM<pos:position pos:line="26" pos:column="34"/></name></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">hints<pos:position pos:line="27" pos:column="8"/></name><operator pos:line="27" pos:column="8">.<pos:position pos:line="27" pos:column="9"/></operator><name pos:line="27" pos:column="9">ai_flags<pos:position pos:line="27" pos:column="17"/></name></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">AI_CANONNAME<pos:position pos:line="27" pos:column="32"/></name></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">snprintf<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">sbuf<pos:position pos:line="28" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="18">sizeof<argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">sbuf<pos:position pos:line="28" pos:column="29"/></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="32">"%d"<pos:position pos:line="28" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">port<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">error<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <call><name pos:line="29" pos:column="11">getaddrinfo<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">hostname<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">sbuf<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="39">&amp;<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="40">hints<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="47">&amp;<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="48">res<pos:position pos:line="29" pos:column="51"/></name></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="53"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">error<pos:position pos:line="30" pos:column="12"/></name></expr>)<pos:position pos:line="30" pos:column="13"/></condition><then pos:line="30" pos:column="13"> <block pos:line="30" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">infof<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><name pos:line="31" pos:column="11">data<pos:position pos:line="31" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="17">"getaddrinfo(3) failed for %s:%d\n"<pos:position pos:line="31" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">hostname<pos:position pos:line="31" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="64">port<pos:position pos:line="31" pos:column="68"/></name></expr></argument>)<pos:position pos:line="31" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="70"/></expr_stmt>    
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">NULL<pos:position pos:line="32" pos:column="16"/></name></expr>;<pos:position pos:line="32" pos:column="17"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>
  <expr_stmt><expr><operator pos:line="34" pos:column="3">*<pos:position pos:line="34" pos:column="4"/></operator><name pos:line="34" pos:column="4">bufp<pos:position pos:line="34" pos:column="8"/></name><operator pos:line="34" pos:column="8">=<pos:position pos:line="34" pos:column="9"/></operator><operator pos:line="34" pos:column="9">(<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">char<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">*<pos:position pos:line="34" pos:column="16"/></operator><operator pos:line="34" pos:column="16">)<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">res<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt> <comment type="block" pos:line="34" pos:column="22">/* make it point to the result struct */</comment>

  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">res<pos:position pos:line="36" pos:column="13"/></name></expr>;<pos:position pos:line="36" pos:column="14"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
