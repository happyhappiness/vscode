<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_17260.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">krb4_auth<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">void<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">app_data<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="27">struct<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">connectdata<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">conn<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">ret<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">p<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">len<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">KTEXT_ST<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">adat<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">MSG_DAT<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">msg_data<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">checksum<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">u_int32_t<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">cs<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">krb4_data<pos:position pos:line="11" pos:column="19"/></name></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">d<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><name pos:line="11" pos:column="25">app_data<pos:position pos:line="11" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">host<pos:position pos:line="12" pos:column="13"/></name> <init pos:line="12" pos:column="14">= <expr><name><name pos:line="12" pos:column="16">conn<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">-&gt;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="22">hostname<pos:position pos:line="12" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">ssize_t<pos:position pos:line="13" pos:column="10"/></name></type> <name pos:line="13" pos:column="11">nread<pos:position pos:line="13" pos:column="16"/></name></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">l<pos:position pos:line="14" pos:column="8"/></name> <init pos:line="14" pos:column="9">= <expr><sizeof pos:line="14" pos:column="11">sizeof<argument_list pos:line="14" pos:column="17">(<argument><expr><name><name pos:line="14" pos:column="18">conn<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">local_addr<pos:position pos:line="14" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="14" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">SessionHandle<pos:position pos:line="15" pos:column="23"/></name></name> <modifier pos:line="15" pos:column="24">*<pos:position pos:line="15" pos:column="25"/></modifier></type><name pos:line="15" pos:column="25">data<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><name><name pos:line="15" pos:column="32">conn<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">data<pos:position pos:line="15" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="15" pos:column="43"/></decl_stmt>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><call><name pos:line="17" pos:column="6">getsockname<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">(<argument><expr><name><name pos:line="17" pos:column="18">conn<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">-&gt;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="24">firstsocket<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>,
                 <argument><expr><operator pos:line="18" pos:column="18">(<pos:position pos:line="18" pos:column="19"/></operator>struct <name pos:line="18" pos:column="26">sockaddr<pos:position pos:line="18" pos:column="34"/></name> <operator pos:line="18" pos:column="35">*<pos:position pos:line="18" pos:column="36"/></operator><operator pos:line="18" pos:column="36">)<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="37">LOCAL_ADDR<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="49">&amp;<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="50">l<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call> <operator pos:line="18" pos:column="53">&lt;<pos:position pos:line="18" pos:column="57"/></operator> <literal type="number" pos:line="18" pos:column="55">0<pos:position pos:line="18" pos:column="56"/></literal></expr>)<pos:position pos:line="18" pos:column="57"/></condition><then pos:line="18" pos:column="57">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="5">perror<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="string" pos:line="19" pos:column="12">"getsockname()"<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">checksum<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <call><name pos:line="21" pos:column="14">getpid<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">()<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="22" pos:column="3">ret<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <call><name pos:line="22" pos:column="9">mk_auth<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">d<pos:position pos:line="22" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="20">&amp;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="21">adat<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="27">"ftp"<pos:position pos:line="22" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">host<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">checksum<pos:position pos:line="22" pos:column="48"/></name></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="50"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">ret<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">==<pos:position pos:line="23" pos:column="12"/></operator> <name pos:line="23" pos:column="13">KDC_PR_UNKNOWN<pos:position pos:line="23" pos:column="27"/></name></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="5">ret<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">mk_auth<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">d<pos:position pos:line="24" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="22">&amp;<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="23">adat<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="29">"rcmd"<pos:position pos:line="24" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="37">host<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="43">checksum<pos:position pos:line="24" pos:column="51"/></name></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt></block></then></if>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">ret<pos:position pos:line="25" pos:column="9"/></name></expr>)<pos:position pos:line="25" pos:column="10"/></condition><then pos:line="25" pos:column="10"> <block pos:line="25" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">Curl_infof<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">data<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="22">"%s\n"<pos:position pos:line="26" pos:column="28"/></literal></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="30">krb_get_err_text<pos:position pos:line="26" pos:column="46"/></name><argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">ret<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="53"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">AUTH_CONTINUE<pos:position pos:line="27" pos:column="25"/></name></expr>;<pos:position pos:line="27" pos:column="26"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>
  
<cpp:ifdef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifdef<pos:position pos:line="30" pos:column="7"/></cpp:directive> <name pos:line="30" pos:column="8">HAVE_KRB_GET_OUR_IP_FOR_REALM<pos:position pos:line="30" pos:column="37"/></name></cpp:ifdef>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><call><name pos:line="31" pos:column="7">krb_get_config_bool<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><literal type="string" pos:line="31" pos:column="27">"nat_in_use"<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="41"/></condition><then pos:line="31" pos:column="41"> <block pos:line="31" pos:column="42">{
    <decl_stmt><decl><type><name><name pos:line="32" pos:column="5">struct<pos:position pos:line="32" pos:column="11"/></name> <name pos:line="32" pos:column="12">sockaddr_in<pos:position pos:line="32" pos:column="23"/></name></name> <modifier pos:line="32" pos:column="24">*<pos:position pos:line="32" pos:column="25"/></modifier></type><name pos:line="32" pos:column="25">localaddr<pos:position pos:line="32" pos:column="34"/></name>  <init pos:line="32" pos:column="36">= <expr><operator pos:line="32" pos:column="38">(<pos:position pos:line="32" pos:column="39"/></operator>struct <name pos:line="32" pos:column="46">sockaddr_in<pos:position pos:line="32" pos:column="57"/></name> <operator pos:line="32" pos:column="58">*<pos:position pos:line="32" pos:column="59"/></operator><operator pos:line="32" pos:column="59">)<pos:position pos:line="32" pos:column="60"/></operator><name pos:line="32" pos:column="60">LOCAL_ADDR<pos:position pos:line="32" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="71"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="33" pos:column="5">struct<pos:position pos:line="33" pos:column="11"/></name> <name pos:line="33" pos:column="12">in_addr<pos:position pos:line="33" pos:column="19"/></name></name></type> <name pos:line="33" pos:column="20">natAddr<pos:position pos:line="33" pos:column="27"/></name></decl>;<pos:position pos:line="33" pos:column="28"/></decl_stmt>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">krb_get_our_ip_for_realm<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><call><name pos:line="35" pos:column="34">krb_realmofhost<pos:position pos:line="35" pos:column="49"/></name><argument_list pos:line="35" pos:column="49">(<argument><expr><name pos:line="35" pos:column="50">host<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr></argument>,
                                 <argument><expr><operator pos:line="36" pos:column="34">&amp;<pos:position pos:line="36" pos:column="39"/></operator><name pos:line="36" pos:column="35">natAddr<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call> <operator pos:line="36" pos:column="44">!=<pos:position pos:line="36" pos:column="46"/></operator> <name pos:line="36" pos:column="47">KSUCCESS<pos:position pos:line="36" pos:column="55"/></name>
        <operator pos:line="37" pos:column="9">&amp;&amp;<pos:position pos:line="37" pos:column="19"/></operator> <call><name pos:line="37" pos:column="12">krb_get_our_ip_for_realm<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><name pos:line="37" pos:column="37">NULL<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="43">&amp;<pos:position pos:line="37" pos:column="48"/></operator><name pos:line="37" pos:column="44">natAddr<pos:position pos:line="37" pos:column="51"/></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call> <operator pos:line="37" pos:column="53">!=<pos:position pos:line="37" pos:column="55"/></operator> <name pos:line="37" pos:column="56">KSUCCESS<pos:position pos:line="37" pos:column="64"/></name></expr>)<pos:position pos:line="37" pos:column="65"/></condition><then pos:line="37" pos:column="65">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="7">Curl_infof<pos:position pos:line="38" pos:column="17"/></name><argument_list pos:line="38" pos:column="17">(<argument><expr><name pos:line="38" pos:column="18">data<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="24">"Can't get address for realm %s\n"<pos:position pos:line="38" pos:column="58"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="39" pos:column="18">krb_realmofhost<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">host<pos:position pos:line="39" pos:column="38"/></name></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt></block></then>
    <else pos:line="40" pos:column="5">else <block pos:line="40" pos:column="10">{
      <if pos:line="41" pos:column="7">if <condition pos:line="41" pos:column="10">(<expr><name><name pos:line="41" pos:column="11">natAddr<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">.<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">s_addr<pos:position pos:line="41" pos:column="25"/></name></name> <operator pos:line="41" pos:column="26">!=<pos:position pos:line="41" pos:column="28"/></operator> <name><name pos:line="41" pos:column="29">localaddr<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">-&gt;<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="40">sin_addr<pos:position pos:line="41" pos:column="48"/></name><operator pos:line="41" pos:column="48">.<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="49">s_addr<pos:position pos:line="41" pos:column="55"/></name></name></expr>)<pos:position pos:line="41" pos:column="56"/></condition><then pos:line="41" pos:column="56"> <block pos:line="41" pos:column="57">{
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">HAVE_INET_NTOA_R<pos:position pos:line="42" pos:column="24"/></name></cpp:ifdef>
        <decl_stmt><decl><type><name pos:line="43" pos:column="9">char<pos:position pos:line="43" pos:column="13"/></name></type> <name><name pos:line="43" pos:column="14">ntoa_buf<pos:position pos:line="43" pos:column="22"/></name><index pos:line="43" pos:column="22">[<expr><literal type="number" pos:line="43" pos:column="23">64<pos:position pos:line="43" pos:column="25"/></literal></expr>]<pos:position pos:line="43" pos:column="26"/></index></name></decl>;<pos:position pos:line="43" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="44" pos:column="9">char<pos:position pos:line="44" pos:column="13"/></name> <modifier pos:line="44" pos:column="14">*<pos:position pos:line="44" pos:column="15"/></modifier></type><name pos:line="44" pos:column="15">ip<pos:position pos:line="44" pos:column="17"/></name> <init pos:line="44" pos:column="18">= <expr><operator pos:line="44" pos:column="20">(<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">char<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">*<pos:position pos:line="44" pos:column="27"/></operator><operator pos:line="44" pos:column="27">)<pos:position pos:line="44" pos:column="28"/></operator><call><name pos:line="44" pos:column="28">inet_ntoa_r<pos:position pos:line="44" pos:column="39"/></name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">natAddr<pos:position pos:line="44" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="49">ntoa_buf<pos:position pos:line="44" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="59">sizeof<argument_list pos:line="44" pos:column="65">(<argument><expr><name pos:line="44" pos:column="66">ntoa_buf<pos:position pos:line="44" pos:column="74"/></name></expr></argument>)<pos:position pos:line="44" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="44" pos:column="77"/></decl_stmt>
<cpp:else pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">else<pos:position pos:line="45" pos:column="6"/></cpp:directive></cpp:else>
        <decl_stmt><decl><type><name pos:line="46" pos:column="9">char<pos:position pos:line="46" pos:column="13"/></name> <modifier pos:line="46" pos:column="14">*<pos:position pos:line="46" pos:column="15"/></modifier></type><name pos:line="46" pos:column="15">ip<pos:position pos:line="46" pos:column="17"/></name> <init pos:line="46" pos:column="18">= <expr><operator pos:line="46" pos:column="20">(<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="21">char<pos:position pos:line="46" pos:column="25"/></name> <operator pos:line="46" pos:column="26">*<pos:position pos:line="46" pos:column="27"/></operator><operator pos:line="46" pos:column="27">)<pos:position pos:line="46" pos:column="28"/></operator><call><name pos:line="46" pos:column="28">inet_ntoa<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">natAddr<pos:position pos:line="46" pos:column="45"/></name></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="47"/></decl_stmt>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">Curl_infof<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><name pos:line="48" pos:column="20">data<pos:position pos:line="48" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="26">"Using NAT IP address (%s) for kerberos 4\n"<pos:position pos:line="48" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="72">ip<pos:position pos:line="48" pos:column="74"/></name></expr></argument>)<pos:position pos:line="48" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">localaddr<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">-&gt;<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="20">sin_addr<pos:position pos:line="49" pos:column="28"/></name></name> <operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator> <name pos:line="49" pos:column="31">natAddr<pos:position pos:line="49" pos:column="38"/></name></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="50" pos:column="8"/></block></then></if>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>
  }<pos:position pos:line="52" pos:column="4"/></block></then></if>
<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="55" pos:column="3">if<condition pos:line="55" pos:column="5">(<expr><call><name pos:line="55" pos:column="6">Curl_base64_encode<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><name><name pos:line="55" pos:column="25">adat<pos:position pos:line="55" pos:column="29"/></name><operator pos:line="55" pos:column="29">.<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="30">dat<pos:position pos:line="55" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="35">adat<pos:position pos:line="55" pos:column="39"/></name><operator pos:line="55" pos:column="39">.<pos:position pos:line="55" pos:column="40"/></operator><name pos:line="55" pos:column="40">length<pos:position pos:line="55" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="48">&amp;<pos:position pos:line="55" pos:column="53"/></operator><name pos:line="55" pos:column="49">p<pos:position pos:line="55" pos:column="50"/></name></expr></argument>)<pos:position pos:line="55" pos:column="51"/></argument_list></call> <operator pos:line="55" pos:column="52">&lt;<pos:position pos:line="55" pos:column="56"/></operator> <literal type="number" pos:line="55" pos:column="54">0<pos:position pos:line="55" pos:column="55"/></literal></expr>)<pos:position pos:line="55" pos:column="56"/></condition><then pos:line="55" pos:column="56"> <block pos:line="55" pos:column="57">{
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">Curl_failf<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><name pos:line="56" pos:column="16">data<pos:position pos:line="56" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="22">"Out of memory base64-encoding"<pos:position pos:line="56" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="55"/></expr_stmt>
    <return pos:line="57" pos:column="5">return <expr><name pos:line="57" pos:column="12">AUTH_CONTINUE<pos:position pos:line="57" pos:column="25"/></name></expr>;<pos:position pos:line="57" pos:column="26"/></return>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><call><name pos:line="60" pos:column="6">Curl_ftpsendf<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">conn<pos:position pos:line="60" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="26">"ADAT %s"<pos:position pos:line="60" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="37">p<pos:position pos:line="60" pos:column="38"/></name></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="40"/></condition><then pos:line="60" pos:column="40">
    <block type="pseudo"><return pos:line="61" pos:column="5">return <expr><operator pos:line="61" pos:column="12">-<pos:position pos:line="61" pos:column="13"/></operator><literal type="number" pos:line="61" pos:column="13">2<pos:position pos:line="61" pos:column="14"/></literal></expr>;<pos:position pos:line="61" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="63" pos:column="3">nread<pos:position pos:line="63" pos:column="8"/></name> <operator pos:line="63" pos:column="9">=<pos:position pos:line="63" pos:column="10"/></operator> <call><name pos:line="63" pos:column="11">Curl_GetFTPResponse<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><name><name pos:line="63" pos:column="31">data<pos:position pos:line="63" pos:column="35"/></name><operator pos:line="63" pos:column="35">-&gt;<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="37">state<pos:position pos:line="63" pos:column="42"/></name><operator pos:line="63" pos:column="42">.<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="43">buffer<pos:position pos:line="63" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="51">conn<pos:position pos:line="63" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="57">NULL<pos:position pos:line="63" pos:column="61"/></name></expr></argument>)<pos:position pos:line="63" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="63"/></expr_stmt>
  <if pos:line="64" pos:column="3">if<condition pos:line="64" pos:column="5">(<expr><name pos:line="64" pos:column="6">nread<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">&lt;<pos:position pos:line="64" pos:column="16"/></operator> <literal type="number" pos:line="64" pos:column="14">0<pos:position pos:line="64" pos:column="15"/></literal></expr>)<pos:position pos:line="64" pos:column="16"/></condition><then pos:line="64" pos:column="16">
    <block type="pseudo"><return pos:line="65" pos:column="5">return <expr><operator pos:line="65" pos:column="12">-<pos:position pos:line="65" pos:column="13"/></operator><literal type="number" pos:line="65" pos:column="13">1<pos:position pos:line="65" pos:column="14"/></literal></expr>;<pos:position pos:line="65" pos:column="15"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">free<pos:position pos:line="66" pos:column="7"/></name><argument_list pos:line="66" pos:column="7">(<argument><expr><name pos:line="66" pos:column="8">p<pos:position pos:line="66" pos:column="9"/></name></expr></argument>)<pos:position pos:line="66" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="11"/></expr_stmt>

  <if pos:line="68" pos:column="3">if<condition pos:line="68" pos:column="5">(<expr><name><name pos:line="68" pos:column="6">data<pos:position pos:line="68" pos:column="10"/></name><operator pos:line="68" pos:column="10">-&gt;<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="12">state<pos:position pos:line="68" pos:column="17"/></name><operator pos:line="68" pos:column="17">.<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="18">buffer<pos:position pos:line="68" pos:column="24"/></name><index pos:line="68" pos:column="24">[<expr><literal type="number" pos:line="68" pos:column="25">0<pos:position pos:line="68" pos:column="26"/></literal></expr>]<pos:position pos:line="68" pos:column="27"/></index></name> <operator pos:line="68" pos:column="28">!=<pos:position pos:line="68" pos:column="30"/></operator> <literal type="char" pos:line="68" pos:column="31">'2'<pos:position pos:line="68" pos:column="34"/></literal></expr>)<pos:position pos:line="68" pos:column="35"/></condition><then><block pos:line="68" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">Curl_failf<pos:position pos:line="69" pos:column="15"/></name><argument_list pos:line="69" pos:column="15">(<argument><expr><name pos:line="69" pos:column="16">data<pos:position pos:line="69" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="22">"Server didn't accept auth data"<pos:position pos:line="69" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="56"/></expr_stmt>
    <return pos:line="70" pos:column="5">return <expr><name pos:line="70" pos:column="12">AUTH_ERROR<pos:position pos:line="70" pos:column="22"/></name></expr>;<pos:position pos:line="70" pos:column="23"/></return>
  }<pos:position pos:line="71" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="73" pos:column="3">p<pos:position pos:line="73" pos:column="4"/></name> <operator pos:line="73" pos:column="5">=<pos:position pos:line="73" pos:column="6"/></operator> <call><name pos:line="73" pos:column="7">strstr<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">(<argument><expr><name><name pos:line="73" pos:column="14">data<pos:position pos:line="73" pos:column="18"/></name><operator pos:line="73" pos:column="18">-&gt;<pos:position pos:line="73" pos:column="23"/></operator><name pos:line="73" pos:column="20">state<pos:position pos:line="73" pos:column="25"/></name><operator pos:line="73" pos:column="25">.<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="26">buffer<pos:position pos:line="73" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="34">"ADAT="<pos:position pos:line="73" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="43"/></expr_stmt>
  <if pos:line="74" pos:column="3">if<condition pos:line="74" pos:column="5">(<expr><operator pos:line="74" pos:column="6">!<pos:position pos:line="74" pos:column="7"/></operator><name pos:line="74" pos:column="7">p<pos:position pos:line="74" pos:column="8"/></name></expr>)<pos:position pos:line="74" pos:column="9"/></condition><then pos:line="74" pos:column="9"> <block pos:line="74" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">Curl_failf<pos:position pos:line="75" pos:column="15"/></name><argument_list pos:line="75" pos:column="15">(<argument><expr><name pos:line="75" pos:column="16">data<pos:position pos:line="75" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="22">"Remote host didn't send adat reply"<pos:position pos:line="75" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="60"/></expr_stmt>
    <return pos:line="76" pos:column="5">return <expr><name pos:line="76" pos:column="12">AUTH_ERROR<pos:position pos:line="76" pos:column="22"/></name></expr>;<pos:position pos:line="76" pos:column="23"/></return>
  }<pos:position pos:line="77" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="78" pos:column="3">p<pos:position pos:line="78" pos:column="4"/></name> <operator pos:line="78" pos:column="5">+=<pos:position pos:line="78" pos:column="7"/></operator> <literal type="number" pos:line="78" pos:column="8">5<pos:position pos:line="78" pos:column="9"/></literal></expr>;<pos:position pos:line="78" pos:column="10"/></expr_stmt>
  <expr_stmt><expr><name pos:line="79" pos:column="3">len<pos:position pos:line="79" pos:column="6"/></name> <operator pos:line="79" pos:column="7">=<pos:position pos:line="79" pos:column="8"/></operator> <call><name pos:line="79" pos:column="9">Curl_base64_decode<pos:position pos:line="79" pos:column="27"/></name><argument_list pos:line="79" pos:column="27">(<argument><expr><name pos:line="79" pos:column="28">p<pos:position pos:line="79" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="31">adat<pos:position pos:line="79" pos:column="35"/></name><operator pos:line="79" pos:column="35">.<pos:position pos:line="79" pos:column="36"/></operator><name pos:line="79" pos:column="36">dat<pos:position pos:line="79" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt>
  <if pos:line="80" pos:column="3">if<condition pos:line="80" pos:column="5">(<expr><name pos:line="80" pos:column="6">len<pos:position pos:line="80" pos:column="9"/></name> <operator pos:line="80" pos:column="10">&lt;<pos:position pos:line="80" pos:column="14"/></operator> <literal type="number" pos:line="80" pos:column="12">0<pos:position pos:line="80" pos:column="13"/></literal></expr>)<pos:position pos:line="80" pos:column="14"/></condition><then pos:line="80" pos:column="14"> <block pos:line="80" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">Curl_failf<pos:position pos:line="81" pos:column="15"/></name><argument_list pos:line="81" pos:column="15">(<argument><expr><name pos:line="81" pos:column="16">data<pos:position pos:line="81" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="22">"Failed to decode base64 from server"<pos:position pos:line="81" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="61"/></expr_stmt>
    <return pos:line="82" pos:column="5">return <expr><name pos:line="82" pos:column="12">AUTH_ERROR<pos:position pos:line="82" pos:column="22"/></name></expr>;<pos:position pos:line="82" pos:column="23"/></return>
  }<pos:position pos:line="83" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="84" pos:column="3">adat<pos:position pos:line="84" pos:column="7"/></name><operator pos:line="84" pos:column="7">.<pos:position pos:line="84" pos:column="8"/></operator><name pos:line="84" pos:column="8">length<pos:position pos:line="84" pos:column="14"/></name></name> <operator pos:line="84" pos:column="15">=<pos:position pos:line="84" pos:column="16"/></operator> <name pos:line="84" pos:column="17">len<pos:position pos:line="84" pos:column="20"/></name></expr>;<pos:position pos:line="84" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="85" pos:column="3">ret<pos:position pos:line="85" pos:column="6"/></name> <operator pos:line="85" pos:column="7">=<pos:position pos:line="85" pos:column="8"/></operator> <call><name pos:line="85" pos:column="9">krb_rd_safe<pos:position pos:line="85" pos:column="20"/></name><argument_list pos:line="85" pos:column="20">(<argument><expr><name><name pos:line="85" pos:column="21">adat<pos:position pos:line="85" pos:column="25"/></name><operator pos:line="85" pos:column="25">.<pos:position pos:line="85" pos:column="26"/></operator><name pos:line="85" pos:column="26">dat<pos:position pos:line="85" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="31">adat<pos:position pos:line="85" pos:column="35"/></name><operator pos:line="85" pos:column="35">.<pos:position pos:line="85" pos:column="36"/></operator><name pos:line="85" pos:column="36">length<pos:position pos:line="85" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="44">&amp;<pos:position pos:line="85" pos:column="49"/></operator><name><name pos:line="85" pos:column="45">d<pos:position pos:line="85" pos:column="46"/></name><operator pos:line="85" pos:column="46">-&gt;<pos:position pos:line="85" pos:column="51"/></operator><name pos:line="85" pos:column="48">key<pos:position pos:line="85" pos:column="51"/></name></name></expr></argument>, 
                    <argument><expr><operator pos:line="86" pos:column="21">(<pos:position pos:line="86" pos:column="22"/></operator>struct <name pos:line="86" pos:column="29">sockaddr_in<pos:position pos:line="86" pos:column="40"/></name> <operator pos:line="86" pos:column="41">*<pos:position pos:line="86" pos:column="42"/></operator><operator pos:line="86" pos:column="42">)<pos:position pos:line="86" pos:column="43"/></operator><name pos:line="86" pos:column="43">hisctladdr<pos:position pos:line="86" pos:column="53"/></name></expr></argument>, 
                    <argument><expr><operator pos:line="87" pos:column="21">(<pos:position pos:line="87" pos:column="22"/></operator>struct <name pos:line="87" pos:column="29">sockaddr_in<pos:position pos:line="87" pos:column="40"/></name> <operator pos:line="87" pos:column="41">*<pos:position pos:line="87" pos:column="42"/></operator><operator pos:line="87" pos:column="42">)<pos:position pos:line="87" pos:column="43"/></operator><name pos:line="87" pos:column="43">myctladdr<pos:position pos:line="87" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="54">&amp;<pos:position pos:line="87" pos:column="59"/></operator><name pos:line="87" pos:column="55">msg_data<pos:position pos:line="87" pos:column="63"/></name></expr></argument>)<pos:position pos:line="87" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="65"/></expr_stmt>
  <if pos:line="88" pos:column="3">if<condition pos:line="88" pos:column="5">(<expr><name pos:line="88" pos:column="6">ret<pos:position pos:line="88" pos:column="9"/></name></expr>)<pos:position pos:line="88" pos:column="10"/></condition><then pos:line="88" pos:column="10"> <block pos:line="88" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">Curl_failf<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><name pos:line="89" pos:column="16">data<pos:position pos:line="89" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="22">"Error reading reply from server: %s"<pos:position pos:line="89" pos:column="59"/></literal></expr></argument>, 
               <argument><expr><call><name pos:line="90" pos:column="16">krb_get_err_text<pos:position pos:line="90" pos:column="32"/></name><argument_list pos:line="90" pos:column="32">(<argument><expr><name pos:line="90" pos:column="33">ret<pos:position pos:line="90" pos:column="36"/></name></expr></argument>)<pos:position pos:line="90" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="90" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="39"/></expr_stmt>
    <return pos:line="91" pos:column="5">return <expr><name pos:line="91" pos:column="12">AUTH_ERROR<pos:position pos:line="91" pos:column="22"/></name></expr>;<pos:position pos:line="91" pos:column="23"/></return>
  }<pos:position pos:line="92" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="93" pos:column="3">krb_get_int<pos:position pos:line="93" pos:column="14"/></name><argument_list pos:line="93" pos:column="14">(<argument><expr><name><name pos:line="93" pos:column="15">msg_data<pos:position pos:line="93" pos:column="23"/></name><operator pos:line="93" pos:column="23">.<pos:position pos:line="93" pos:column="24"/></operator><name pos:line="93" pos:column="24">app_data<pos:position pos:line="93" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="34">&amp;<pos:position pos:line="93" pos:column="39"/></operator><name pos:line="93" pos:column="35">cs<pos:position pos:line="93" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="39">4<pos:position pos:line="93" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="42">0<pos:position pos:line="93" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="45"/></expr_stmt>
  <if pos:line="94" pos:column="3">if<condition pos:line="94" pos:column="5">(<expr><name pos:line="94" pos:column="6">cs<pos:position pos:line="94" pos:column="8"/></name> <operator pos:line="94" pos:column="9">-<pos:position pos:line="94" pos:column="10"/></operator> <name pos:line="94" pos:column="11">checksum<pos:position pos:line="94" pos:column="19"/></name> <operator pos:line="94" pos:column="20">!=<pos:position pos:line="94" pos:column="22"/></operator> <literal type="number" pos:line="94" pos:column="23">1<pos:position pos:line="94" pos:column="24"/></literal></expr>)<pos:position pos:line="94" pos:column="25"/></condition><then pos:line="94" pos:column="25"> <block pos:line="94" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">Curl_failf<pos:position pos:line="95" pos:column="15"/></name><argument_list pos:line="95" pos:column="15">(<argument><expr><name pos:line="95" pos:column="16">data<pos:position pos:line="95" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="22">"Bad checksum returned from server"<pos:position pos:line="95" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="59"/></expr_stmt>
    <return pos:line="96" pos:column="5">return <expr><name pos:line="96" pos:column="12">AUTH_ERROR<pos:position pos:line="96" pos:column="22"/></name></expr>;<pos:position pos:line="96" pos:column="23"/></return>
  }<pos:position pos:line="97" pos:column="4"/></block></then></if>
  <return pos:line="98" pos:column="3">return <expr><name pos:line="98" pos:column="10">AUTH_OK<pos:position pos:line="98" pos:column="17"/></name></expr>;<pos:position pos:line="98" pos:column="18"/></return>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
