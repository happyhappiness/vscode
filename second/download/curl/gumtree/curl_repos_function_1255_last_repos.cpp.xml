<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1255_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_dostrdup<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">str<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">line<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">source<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">mem<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">len<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">DEBUGASSERT<pos:position pos:line="6" pos:column="14"/></name><argument_list pos:line="6" pos:column="14">(<argument><expr><name pos:line="6" pos:column="15">str<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">!=<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="22">NULL<pos:position pos:line="6" pos:column="26"/></name></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><call><name pos:line="8" pos:column="6">countcheck<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><literal type="string" pos:line="8" pos:column="17">"strdup"<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">line<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="33">source<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="41"/></condition><then pos:line="8" pos:column="41">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">NULL<pos:position pos:line="9" pos:column="16"/></name></expr>;<pos:position pos:line="9" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">len<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">strlen<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">str<pos:position pos:line="11" pos:column="19"/></name></expr></argument>)<pos:position pos:line="11" pos:column="20"/></argument_list></call> <operator pos:line="11" pos:column="21">+<pos:position pos:line="11" pos:column="22"/></operator> <literal type="number" pos:line="11" pos:column="23">1<pos:position pos:line="11" pos:column="24"/></literal></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">mem<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">curl_domalloc<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">len<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">NULL<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt> <comment type="block" pos:line="13" pos:column="38">/* NULL prevents logging */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">mem<pos:position pos:line="14" pos:column="9"/></name></expr>)<pos:position pos:line="14" pos:column="10"/></condition><then pos:line="14" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="5">memcpy<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">mem<pos:position pos:line="15" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="17">str<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="22">len<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt></block></then></if>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name pos:line="17" pos:column="6">source<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="5">curl_memlog<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><literal type="string" pos:line="18" pos:column="17">"MEM %s:%d strdup(%p) (%zu) = %p\n"<pos:position pos:line="18" pos:column="52"/></literal></expr></argument>,
                <argument><expr><name pos:line="19" pos:column="17">source<pos:position pos:line="19" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="25">line<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="31">(<pos:position pos:line="19" pos:column="32"/></operator><specifier pos:line="19" pos:column="32">const<pos:position pos:line="19" pos:column="37"/></specifier> <name pos:line="19" pos:column="38">void<pos:position pos:line="19" pos:column="42"/></name> <operator pos:line="19" pos:column="43">*<pos:position pos:line="19" pos:column="44"/></operator><operator pos:line="19" pos:column="44">)<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="45">str<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="50">len<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="55">(<pos:position pos:line="19" pos:column="56"/></operator><specifier pos:line="19" pos:column="56">const<pos:position pos:line="19" pos:column="61"/></specifier> <name pos:line="19" pos:column="62">void<pos:position pos:line="19" pos:column="66"/></name> <operator pos:line="19" pos:column="67">*<pos:position pos:line="19" pos:column="68"/></operator><operator pos:line="19" pos:column="68">)<pos:position pos:line="19" pos:column="69"/></operator><name pos:line="19" pos:column="69">mem<pos:position pos:line="19" pos:column="72"/></name></expr></argument>)<pos:position pos:line="19" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="74"/></expr_stmt></block></then></if>

  <return pos:line="21" pos:column="3">return <expr><name pos:line="21" pos:column="10">mem<pos:position pos:line="21" pos:column="13"/></name></expr>;<pos:position pos:line="21" pos:column="14"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
