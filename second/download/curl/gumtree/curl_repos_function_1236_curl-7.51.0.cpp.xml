<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1236_curl-7.51.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_resolver_getaddrinfo<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">connectdata<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">conn<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                                         <parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">hostname<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="3" pos:column="42">int<pos:position pos:line="3" pos:column="45"/></name></type> <name pos:line="3" pos:column="46">port<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="4" pos:column="42">int<pos:position pos:line="4" pos:column="45"/></name> <modifier pos:line="4" pos:column="46">*<pos:position pos:line="4" pos:column="47"/></modifier></type><name pos:line="4" pos:column="47">waitp<pos:position pos:line="4" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="53"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">hints<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">in_addr<pos:position pos:line="7" pos:column="17"/></name></name></type> <name pos:line="7" pos:column="18">in<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">Curl_addrinfo<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">res<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">error<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">sbuf<pos:position pos:line="10" pos:column="12"/></name><index pos:line="10" pos:column="12">[<expr><literal type="number" pos:line="10" pos:column="13">12<pos:position pos:line="10" pos:column="15"/></literal></expr>]<pos:position pos:line="10" pos:column="16"/></index></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">pf<pos:position pos:line="11" pos:column="9"/></name> <init pos:line="11" pos:column="10">= <expr><name pos:line="11" pos:column="12">PF_INET<pos:position pos:line="11" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
<cpp:ifdef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifdef<pos:position pos:line="12" pos:column="7"/></cpp:directive> <name pos:line="12" pos:column="8">CURLRES_IPV6<pos:position pos:line="12" pos:column="20"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">in6_addr<pos:position pos:line="13" pos:column="18"/></name></name></type> <name pos:line="13" pos:column="19">in6<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="14" pos:column="8">/* CURLRES_IPV6 */</comment>

  <expr_stmt><expr><operator pos:line="16" pos:column="3">*<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">waitp<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <literal type="number" pos:line="16" pos:column="12">0<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></expr_stmt> <comment type="block" pos:line="16" pos:column="15">/* default to synchronous response */</comment>

<cpp:ifndef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifndef<pos:position pos:line="18" pos:column="8"/></cpp:directive> <name pos:line="18" pos:column="9">USE_RESOLVE_ON_IPS<pos:position pos:line="18" pos:column="27"/></name></cpp:ifndef>
  <comment type="block" pos:line="19" pos:column="3">/* First check if this is an IPv4 address string */</comment>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><call><name pos:line="20" pos:column="6">Curl_inet_pton<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">AF_INET<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">hostname<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="40">&amp;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="41">in<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call> <operator pos:line="20" pos:column="45">&gt;<pos:position pos:line="20" pos:column="49"/></operator> <literal type="number" pos:line="20" pos:column="47">0<pos:position pos:line="20" pos:column="48"/></literal></expr>)<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49">
    <comment type="block" pos:line="21" pos:column="5">/* This is a dotted IP address 123.123.123.123-style */</comment>
    <block type="pseudo"><return pos:line="22" pos:column="5">return <expr><call><name pos:line="22" pos:column="12">Curl_ip2addr<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">AF_INET<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="34">&amp;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="35">in<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">hostname<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="49">port<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></return></block></then></if>

<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">CURLRES_IPV6<pos:position pos:line="24" pos:column="20"/></name></cpp:ifdef>
  <comment type="block" pos:line="25" pos:column="3">/* check if this is an IPv6 address string */</comment>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><call><name pos:line="26" pos:column="6">Curl_inet_pton<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">AF_INET6<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="31">hostname<pos:position pos:line="26" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="41">&amp;<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="42">in6<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call> <operator pos:line="26" pos:column="47">&gt;<pos:position pos:line="26" pos:column="51"/></operator> <literal type="number" pos:line="26" pos:column="49">0<pos:position pos:line="26" pos:column="50"/></literal></expr>)<pos:position pos:line="26" pos:column="51"/></condition><then pos:line="26" pos:column="51">
    <comment type="block" pos:line="27" pos:column="5">/* This is an IPv6 address literal */</comment>
    <block type="pseudo"><return pos:line="28" pos:column="5">return <expr><call><name pos:line="28" pos:column="12">Curl_ip2addr<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">AF_INET6<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="35">&amp;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="36">in6<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">hostname<pos:position pos:line="28" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">port<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></return></block></then></if>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="29" pos:column="8">/* CURLRES_IPV6 */</comment>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="30" pos:column="8">/* !USE_RESOLVE_ON_IPS */</comment>

<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">CURLRES_IPV6<pos:position pos:line="32" pos:column="20"/></name></cpp:ifdef>
  <comment type="block" pos:line="33" pos:column="3">/*
   * Check if a limited name resolve has been requested.
   */</comment>
  <switch pos:line="36" pos:column="3">switch<condition pos:line="36" pos:column="9">(<expr><name><name pos:line="36" pos:column="10">conn<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">-&gt;<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="16">ip_version<pos:position pos:line="36" pos:column="26"/></name></name></expr>)<pos:position pos:line="36" pos:column="27"/></condition> <block pos:line="36" pos:column="28">{
  <case pos:line="37" pos:column="3">case <expr><name pos:line="37" pos:column="8">CURL_IPRESOLVE_V4<pos:position pos:line="37" pos:column="25"/></name></expr>:<pos:position pos:line="37" pos:column="26"/></case>
    <expr_stmt><expr><name pos:line="38" pos:column="5">pf<pos:position pos:line="38" pos:column="7"/></name> <operator pos:line="38" pos:column="8">=<pos:position pos:line="38" pos:column="9"/></operator> <name pos:line="38" pos:column="10">PF_INET<pos:position pos:line="38" pos:column="17"/></name></expr>;<pos:position pos:line="38" pos:column="18"/></expr_stmt>
    <break pos:line="39" pos:column="5">break;<pos:position pos:line="39" pos:column="11"/></break>
  <case pos:line="40" pos:column="3">case <expr><name pos:line="40" pos:column="8">CURL_IPRESOLVE_V6<pos:position pos:line="40" pos:column="25"/></name></expr>:<pos:position pos:line="40" pos:column="26"/></case>
    <expr_stmt><expr><name pos:line="41" pos:column="5">pf<pos:position pos:line="41" pos:column="7"/></name> <operator pos:line="41" pos:column="8">=<pos:position pos:line="41" pos:column="9"/></operator> <name pos:line="41" pos:column="10">PF_INET6<pos:position pos:line="41" pos:column="18"/></name></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt>
    <break pos:line="42" pos:column="5">break;<pos:position pos:line="42" pos:column="11"/></break>
  <default pos:line="43" pos:column="3">default:<pos:position pos:line="43" pos:column="11"/></default>
    <expr_stmt><expr><name pos:line="44" pos:column="5">pf<pos:position pos:line="44" pos:column="7"/></name> <operator pos:line="44" pos:column="8">=<pos:position pos:line="44" pos:column="9"/></operator> <name pos:line="44" pos:column="10">PF_UNSPEC<pos:position pos:line="44" pos:column="19"/></name></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
    <break pos:line="45" pos:column="5">break;<pos:position pos:line="45" pos:column="11"/></break>
  }<pos:position pos:line="46" pos:column="4"/></block></switch>

  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><operator pos:line="48" pos:column="6">(<pos:position pos:line="48" pos:column="7"/></operator><name pos:line="48" pos:column="7">pf<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">!=<pos:position pos:line="48" pos:column="12"/></operator> <name pos:line="48" pos:column="13">PF_INET<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">)<pos:position pos:line="48" pos:column="21"/></operator> <operator pos:line="48" pos:column="22">&amp;&amp;<pos:position pos:line="48" pos:column="32"/></operator> <operator pos:line="48" pos:column="25">!<pos:position pos:line="48" pos:column="26"/></operator><call><name pos:line="48" pos:column="26">Curl_ipv6works<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">()<pos:position pos:line="48" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="43"/></condition><then pos:line="48" pos:column="43">
    <comment type="block" pos:line="49" pos:column="5">/* The stack seems to be a non-IPv6 one */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="5">pf<pos:position pos:line="50" pos:column="7"/></name> <operator pos:line="50" pos:column="8">=<pos:position pos:line="50" pos:column="9"/></operator> <name pos:line="50" pos:column="10">PF_INET<pos:position pos:line="50" pos:column="17"/></name></expr>;<pos:position pos:line="50" pos:column="18"/></expr_stmt></block></then></if>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="51" pos:column="8">/* CURLRES_IPV6 */</comment>

  <expr_stmt><expr><call><name pos:line="53" pos:column="3">memset<pos:position pos:line="53" pos:column="9"/></name><argument_list pos:line="53" pos:column="9">(<argument><expr><operator pos:line="53" pos:column="10">&amp;<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="11">hints<pos:position pos:line="53" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="18">0<pos:position pos:line="53" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="21">sizeof<argument_list pos:line="53" pos:column="27">(<argument><expr><name pos:line="53" pos:column="28">hints<pos:position pos:line="53" pos:column="33"/></name></expr></argument>)<pos:position pos:line="53" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="54" pos:column="3">hints<pos:position pos:line="54" pos:column="8"/></name><operator pos:line="54" pos:column="8">.<pos:position pos:line="54" pos:column="9"/></operator><name pos:line="54" pos:column="9">ai_family<pos:position pos:line="54" pos:column="18"/></name></name> <operator pos:line="54" pos:column="19">=<pos:position pos:line="54" pos:column="20"/></operator> <name pos:line="54" pos:column="21">pf<pos:position pos:line="54" pos:column="23"/></name></expr>;<pos:position pos:line="54" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="55" pos:column="3">hints<pos:position pos:line="55" pos:column="8"/></name><operator pos:line="55" pos:column="8">.<pos:position pos:line="55" pos:column="9"/></operator><name pos:line="55" pos:column="9">ai_socktype<pos:position pos:line="55" pos:column="20"/></name></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <name><name pos:line="55" pos:column="23">conn<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">-&gt;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="29">socktype<pos:position pos:line="55" pos:column="37"/></name></name></expr>;<pos:position pos:line="55" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="57" pos:column="3">snprintf<pos:position pos:line="57" pos:column="11"/></name><argument_list pos:line="57" pos:column="11">(<argument><expr><name pos:line="57" pos:column="12">sbuf<pos:position pos:line="57" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="18">sizeof<argument_list pos:line="57" pos:column="24">(<argument><expr><name pos:line="57" pos:column="25">sbuf<pos:position pos:line="57" pos:column="29"/></name></expr></argument>)<pos:position pos:line="57" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="32">"%d"<pos:position pos:line="57" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="38">port<pos:position pos:line="57" pos:column="42"/></name></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>

  <comment type="block" pos:line="59" pos:column="3">/* fire up a new resolver thread! */</comment>
  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><call><name pos:line="60" pos:column="6">init_resolve_thread<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">conn<pos:position pos:line="60" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="32">hostname<pos:position pos:line="60" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="42">port<pos:position pos:line="60" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="48">&amp;<pos:position pos:line="60" pos:column="53"/></operator><name pos:line="60" pos:column="49">hints<pos:position pos:line="60" pos:column="54"/></name></expr></argument>)<pos:position pos:line="60" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="56"/></condition><then pos:line="60" pos:column="56"> <block pos:line="60" pos:column="57">{
    <expr_stmt><expr><operator pos:line="61" pos:column="5">*<pos:position pos:line="61" pos:column="6"/></operator><name pos:line="61" pos:column="6">waitp<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <literal type="number" pos:line="61" pos:column="14">1<pos:position pos:line="61" pos:column="15"/></literal></expr>;<pos:position pos:line="61" pos:column="16"/></expr_stmt> <comment type="block" pos:line="61" pos:column="17">/* expect asynchronous response */</comment>
    <return pos:line="62" pos:column="5">return <expr><name pos:line="62" pos:column="12">NULL<pos:position pos:line="62" pos:column="16"/></name></expr>;<pos:position pos:line="62" pos:column="17"/></return>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="65" pos:column="3">/* fall-back to blocking version */</comment>
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">infof<pos:position pos:line="66" pos:column="8"/></name><argument_list pos:line="66" pos:column="8">(<argument><expr><name><name pos:line="66" pos:column="9">conn<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">-&gt;<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="15">data<pos:position pos:line="66" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="21">"init_resolve_thread() failed for %s; %s\n"<pos:position pos:line="66" pos:column="64"/></literal></expr></argument>,
        <argument><expr><name pos:line="67" pos:column="9">hostname<pos:position pos:line="67" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="19">Curl_strerror<pos:position pos:line="67" pos:column="32"/></name><argument_list pos:line="67" pos:column="32">(<argument><expr><name pos:line="67" pos:column="33">conn<pos:position pos:line="67" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="39">ERRNO<pos:position pos:line="67" pos:column="44"/></name></expr></argument>)<pos:position pos:line="67" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>

  <expr_stmt><expr><name pos:line="69" pos:column="3">error<pos:position pos:line="69" pos:column="8"/></name> <operator pos:line="69" pos:column="9">=<pos:position pos:line="69" pos:column="10"/></operator> <call><name pos:line="69" pos:column="11">Curl_getaddrinfo_ex<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">hostname<pos:position pos:line="69" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="41">sbuf<pos:position pos:line="69" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="47">&amp;<pos:position pos:line="69" pos:column="52"/></operator><name pos:line="69" pos:column="48">hints<pos:position pos:line="69" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="55">&amp;<pos:position pos:line="69" pos:column="60"/></operator><name pos:line="69" pos:column="56">res<pos:position pos:line="69" pos:column="59"/></name></expr></argument>)<pos:position pos:line="69" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="61"/></expr_stmt>
  <if pos:line="70" pos:column="3">if<condition pos:line="70" pos:column="5">(<expr><name pos:line="70" pos:column="6">error<pos:position pos:line="70" pos:column="11"/></name></expr>)<pos:position pos:line="70" pos:column="12"/></condition><then pos:line="70" pos:column="12"> <block pos:line="70" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">infof<pos:position pos:line="71" pos:column="10"/></name><argument_list pos:line="71" pos:column="10">(<argument><expr><name><name pos:line="71" pos:column="11">conn<pos:position pos:line="71" pos:column="15"/></name><operator pos:line="71" pos:column="15">-&gt;<pos:position pos:line="71" pos:column="20"/></operator><name pos:line="71" pos:column="17">data<pos:position pos:line="71" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="23">"getaddrinfo() failed for %s:%d; %s\n"<pos:position pos:line="71" pos:column="61"/></literal></expr></argument>,
          <argument><expr><name pos:line="72" pos:column="11">hostname<pos:position pos:line="72" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="21">port<pos:position pos:line="72" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="72" pos:column="27">Curl_strerror<pos:position pos:line="72" pos:column="40"/></name><argument_list pos:line="72" pos:column="40">(<argument><expr><name pos:line="72" pos:column="41">conn<pos:position pos:line="72" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="47">SOCKERRNO<pos:position pos:line="72" pos:column="56"/></name></expr></argument>)<pos:position pos:line="72" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="59"/></expr_stmt>
    <return pos:line="73" pos:column="5">return <expr><name pos:line="73" pos:column="12">NULL<pos:position pos:line="73" pos:column="16"/></name></expr>;<pos:position pos:line="73" pos:column="17"/></return>
  }<pos:position pos:line="74" pos:column="4"/></block></then>
  <else pos:line="75" pos:column="3">else <block pos:line="75" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">Curl_addrinfo_set_port<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name pos:line="76" pos:column="28">res<pos:position pos:line="76" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="33">port<pos:position pos:line="76" pos:column="37"/></name></expr></argument>)<pos:position pos:line="76" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="77" pos:column="4"/></block></else></if>

  <return pos:line="79" pos:column="3">return <expr><name pos:line="79" pos:column="10">res<pos:position pos:line="79" pos:column="13"/></name></expr>;<pos:position pos:line="79" pos:column="14"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
