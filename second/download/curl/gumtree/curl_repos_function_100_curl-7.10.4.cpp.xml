<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_100_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_connecthost<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,  <comment type="block" pos:line="1" pos:column="54">/* context */</comment>
                          <parameter><decl><type><name><name pos:line="2" pos:column="27">struct<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">Curl_dns_entry<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">remotehost<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <comment type="block" pos:line="2" pos:column="62">/* use this one */</comment>
                          <parameter><decl><type><name pos:line="3" pos:column="27">int<pos:position pos:line="3" pos:column="30"/></name></type> <name pos:line="3" pos:column="31">port<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>,                  <comment type="block" pos:line="3" pos:column="54">/* connect to this */</comment>
                          <parameter><decl><type><name pos:line="4" pos:column="27">int<pos:position pos:line="4" pos:column="30"/></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">sockconn<pos:position pos:line="4" pos:column="40"/></name></decl></parameter>,             <comment type="block" pos:line="4" pos:column="54">/* the connected socket */</comment>
                          <parameter><decl><type><name pos:line="5" pos:column="27">Curl_ipconnect<pos:position pos:line="5" pos:column="41"/></name> <modifier pos:line="5" pos:column="42">*<pos:position pos:line="5" pos:column="43"/></modifier><modifier pos:line="5" pos:column="43">*<pos:position pos:line="5" pos:column="44"/></modifier></type><name pos:line="5" pos:column="44">addr<pos:position pos:line="5" pos:column="48"/></name></decl></parameter>,     <comment type="block" pos:line="5" pos:column="54">/* the one we used */</comment>
                          <parameter><decl><type><name pos:line="6" pos:column="27">bool<pos:position pos:line="6" pos:column="31"/></name> <modifier pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></modifier></type><name pos:line="6" pos:column="33">connected<pos:position pos:line="6" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="43"/></parameter_list>           <comment type="block" pos:line="6" pos:column="54">/* really connected? */</comment>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">SessionHandle<pos:position pos:line="8" pos:column="23"/></name></name> <modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type><name pos:line="8" pos:column="25">data<pos:position pos:line="8" pos:column="29"/></name> <init pos:line="8" pos:column="30">= <expr><name><name pos:line="8" pos:column="32">conn<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">-&gt;<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="38">data<pos:position pos:line="8" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">rc<pos:position pos:line="9" pos:column="9"/></name></decl>;<pos:position pos:line="9" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">sockfd<pos:position pos:line="10" pos:column="13"/></name><init pos:line="10" pos:column="13">=<expr><operator pos:line="10" pos:column="14">-<pos:position pos:line="10" pos:column="15"/></operator><literal type="number" pos:line="10" pos:column="15">1<pos:position pos:line="10" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">aliasindex<pos:position pos:line="11" pos:column="17"/></name><init pos:line="11" pos:column="17">=<expr><literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">hostname<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">timeval<pos:position pos:line="14" pos:column="17"/></name></name></type> <name pos:line="14" pos:column="18">after<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">timeval<pos:position pos:line="15" pos:column="17"/></name></name></type> <name pos:line="15" pos:column="18">before<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><call><name pos:line="15" pos:column="27">Curl_tvnow<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">()<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="40"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="17" pos:column="3">/*************************************************************
   * Figure out what maximum time we have left
   *************************************************************/</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">long<pos:position pos:line="20" pos:column="7"/></name></type> <name pos:line="20" pos:column="8">timeout_ms<pos:position pos:line="20" pos:column="18"/></name><init pos:line="20" pos:column="18">=<expr><literal type="number" pos:line="20" pos:column="19">300000<pos:position pos:line="20" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="26"/></decl_stmt> <comment type="block" pos:line="20" pos:column="27">/* milliseconds, default to five minutes */</comment>

  <expr_stmt><expr><operator pos:line="22" pos:column="3">*<pos:position pos:line="22" pos:column="4"/></operator><name pos:line="22" pos:column="4">connected<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">FALSE<pos:position pos:line="22" pos:column="21"/></name></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt> <comment type="block" pos:line="22" pos:column="23">/* default to not connected */</comment>

  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><name><name pos:line="24" pos:column="6">data<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">set<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">.<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">timeout<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">||<pos:position pos:line="24" pos:column="26"/></operator> <name><name pos:line="24" pos:column="27">data<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">-&gt;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="33">set<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">.<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="37">connecttimeout<pos:position pos:line="24" pos:column="51"/></name></name></expr>)<pos:position pos:line="24" pos:column="52"/></condition><then pos:line="24" pos:column="52"> <block pos:line="24" pos:column="53">{
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">double<pos:position pos:line="25" pos:column="11"/></name></type> <name pos:line="25" pos:column="12">has_passed<pos:position pos:line="25" pos:column="22"/></name></decl>;<pos:position pos:line="25" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="27" pos:column="5">/* Evaluate in milliseconds how much time that has passed */</comment>
    <expr_stmt><expr><name pos:line="28" pos:column="5">has_passed<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">Curl_tvdiff<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><call><name pos:line="28" pos:column="30">Curl_tvnow<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">()<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="44">data<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">-&gt;<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="50">progress<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">.<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="59">start<pos:position pos:line="28" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>

<cpp:ifndef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifndef<pos:position pos:line="30" pos:column="8"/></cpp:directive> <name pos:line="30" pos:column="9">min<pos:position pos:line="30" pos:column="12"/></name></cpp:ifndef>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define<pos:position pos:line="31" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">min<pos:position pos:line="31" pos:column="12"/></name><parameter_list pos:line="31" pos:column="12">(<parameter><type><name pos:line="31" pos:column="13">a<pos:position pos:line="31" pos:column="14"/></name></type></parameter>, <parameter><type><name pos:line="31" pos:column="16">b<pos:position pos:line="31" pos:column="17"/></name></type></parameter>)<pos:position pos:line="31" pos:column="18"/></parameter_list></cpp:macro>   <cpp:value pos:line="31" pos:column="21">((a) &lt; (b) ? (a) : (b))<pos:position pos:line="31" pos:column="44"/></cpp:value></cpp:define>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="34" pos:column="5">/* get the most strict timeout of the ones converted to milliseconds */</comment>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name><name pos:line="35" pos:column="8">data<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">-&gt;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="14">set<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">.<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="18">timeout<pos:position pos:line="35" pos:column="25"/></name></name> <operator pos:line="35" pos:column="26">&amp;&amp;<pos:position pos:line="35" pos:column="36"/></operator> <name><name pos:line="35" pos:column="29">data<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">-&gt;<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="35">set<pos:position pos:line="35" pos:column="38"/></name><operator pos:line="35" pos:column="38">.<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="39">connecttimeout<pos:position pos:line="35" pos:column="53"/></name></name></expr>)<pos:position pos:line="35" pos:column="54"/></condition><then pos:line="35" pos:column="54"> <block pos:line="35" pos:column="55">{
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><name><name pos:line="36" pos:column="11">data<pos:position pos:line="36" pos:column="15"/></name><operator pos:line="36" pos:column="15">-&gt;<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="17">set<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">.<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">timeout<pos:position pos:line="36" pos:column="28"/></name></name> <operator pos:line="36" pos:column="29">&lt;<pos:position pos:line="36" pos:column="33"/></operator> <name><name pos:line="36" pos:column="31">data<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">-&gt;<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="37">set<pos:position pos:line="36" pos:column="40"/></name><operator pos:line="36" pos:column="40">.<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="41">connecttimeout<pos:position pos:line="36" pos:column="55"/></name></name></expr>)<pos:position pos:line="36" pos:column="56"/></condition><then pos:line="36" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">timeout_ms<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <name><name pos:line="37" pos:column="22">data<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">-&gt;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="28">set<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">.<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="32">timeout<pos:position pos:line="37" pos:column="39"/></name></name><operator pos:line="37" pos:column="39">*<pos:position pos:line="37" pos:column="40"/></operator><literal type="number" pos:line="37" pos:column="40">1000<pos:position pos:line="37" pos:column="44"/></literal></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt></block></then>
      <else pos:line="38" pos:column="7">else 
        <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="9">timeout_ms<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name><name pos:line="39" pos:column="22">data<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">-&gt;<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="28">set<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">.<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">connecttimeout<pos:position pos:line="39" pos:column="46"/></name></name><operator pos:line="39" pos:column="46">*<pos:position pos:line="39" pos:column="47"/></operator><literal type="number" pos:line="39" pos:column="47">1000<pos:position pos:line="39" pos:column="51"/></literal></expr>;<pos:position pos:line="39" pos:column="52"/></expr_stmt></block></else></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then>
    <elseif pos:line="41" pos:column="5">else <if pos:line="41" pos:column="10">if<condition pos:line="41" pos:column="12">(<expr><name><name pos:line="41" pos:column="13">data<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">-&gt;<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="19">set<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">timeout<pos:position pos:line="41" pos:column="30"/></name></name></expr>)<pos:position pos:line="41" pos:column="31"/></condition><then pos:line="41" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="7">timeout_ms<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">=<pos:position pos:line="42" pos:column="19"/></operator> <name><name pos:line="42" pos:column="20">data<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">-&gt;<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="26">set<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">.<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">timeout<pos:position pos:line="42" pos:column="37"/></name></name><operator pos:line="42" pos:column="37">*<pos:position pos:line="42" pos:column="38"/></operator><literal type="number" pos:line="42" pos:column="38">1000<pos:position pos:line="42" pos:column="42"/></literal></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt></block></then></if></elseif>
    <else pos:line="43" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="7">timeout_ms<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <name><name pos:line="44" pos:column="20">data<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">-&gt;<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="26">set<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">connecttimeout<pos:position pos:line="44" pos:column="44"/></name></name><operator pos:line="44" pos:column="44">*<pos:position pos:line="44" pos:column="45"/></operator><literal type="number" pos:line="44" pos:column="45">1000<pos:position pos:line="44" pos:column="49"/></literal></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="46" pos:column="5">/* subtract the passed time */</comment>
    <expr_stmt><expr><name pos:line="47" pos:column="5">timeout_ms<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">-=<pos:position pos:line="47" pos:column="18"/></operator> <operator pos:line="47" pos:column="19">(<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="20">long<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">)<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="25">has_passed<pos:position pos:line="47" pos:column="35"/></name></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>

    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><name pos:line="49" pos:column="8">timeout_ms<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">&lt;<pos:position pos:line="49" pos:column="23"/></operator> <literal type="number" pos:line="49" pos:column="21">0<pos:position pos:line="49" pos:column="22"/></literal></expr>)<pos:position pos:line="49" pos:column="23"/></condition><then pos:line="49" pos:column="23"> <block pos:line="49" pos:column="24">{
      <comment type="block" pos:line="50" pos:column="7">/* a precaution, no need to continue if time already is up */</comment>
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">failf<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">(<argument><expr><name pos:line="51" pos:column="13">data<pos:position pos:line="51" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="19">"Connection time-out"<pos:position pos:line="51" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
      <return pos:line="52" pos:column="7">return <expr><name pos:line="52" pos:column="14">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="52" pos:column="39"/></name></expr>;<pos:position pos:line="52" pos:column="40"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="56" pos:column="3">hostname<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <ternary><condition><expr><name><name pos:line="56" pos:column="14">data<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">-&gt;<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="20">change<pos:position pos:line="56" pos:column="26"/></name><operator pos:line="56" pos:column="26">.<pos:position pos:line="56" pos:column="27"/></operator><name pos:line="56" pos:column="27">proxy<pos:position pos:line="56" pos:column="32"/></name></name></expr>?<pos:position pos:line="56" pos:column="33"/></condition><then><expr><name><name pos:line="56" pos:column="33">conn<pos:position pos:line="56" pos:column="37"/></name><operator pos:line="56" pos:column="37">-&gt;<pos:position pos:line="56" pos:column="42"/></operator><name pos:line="56" pos:column="39">proxyhost<pos:position pos:line="56" pos:column="48"/></name></name></expr></then><else pos:line="56" pos:column="48">:<expr><name><name pos:line="56" pos:column="49">conn<pos:position pos:line="56" pos:column="53"/></name><operator pos:line="56" pos:column="53">-&gt;<pos:position pos:line="56" pos:column="58"/></operator><name pos:line="56" pos:column="55">hostname<pos:position pos:line="56" pos:column="63"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="56" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="57" pos:column="3">infof<pos:position pos:line="57" pos:column="8"/></name><argument_list pos:line="57" pos:column="8">(<argument><expr><name pos:line="57" pos:column="9">data<pos:position pos:line="57" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="15">"About to connect() to %s%s%s:%d\n"<pos:position pos:line="57" pos:column="50"/></literal></expr></argument>,
        <argument><expr><ternary><condition><expr><name><name pos:line="58" pos:column="9">conn<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">bits<pos:position pos:line="58" pos:column="19"/></name><operator pos:line="58" pos:column="19">.<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">ipv6_ip<pos:position pos:line="58" pos:column="27"/></name></name></expr>?<pos:position pos:line="58" pos:column="28"/></condition><then><expr><literal type="string" pos:line="58" pos:column="28">"["<pos:position pos:line="58" pos:column="31"/></literal></expr></then><else pos:line="58" pos:column="31">:<expr><literal type="string" pos:line="58" pos:column="32">""<pos:position pos:line="58" pos:column="34"/></literal></expr></else></ternary></expr></argument>,
        <argument><expr><name pos:line="59" pos:column="9">hostname<pos:position pos:line="59" pos:column="17"/></name></expr></argument>,
        <argument><expr><ternary><condition><expr><name><name pos:line="60" pos:column="9">conn<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">-&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">bits<pos:position pos:line="60" pos:column="19"/></name><operator pos:line="60" pos:column="19">.<pos:position pos:line="60" pos:column="20"/></operator><name pos:line="60" pos:column="20">ipv6_ip<pos:position pos:line="60" pos:column="27"/></name></name></expr>?<pos:position pos:line="60" pos:column="28"/></condition><then><expr><literal type="string" pos:line="60" pos:column="28">"]"<pos:position pos:line="60" pos:column="31"/></literal></expr></then><else pos:line="60" pos:column="31">:<expr><literal type="string" pos:line="60" pos:column="32">""<pos:position pos:line="60" pos:column="34"/></literal></expr></else></ternary></expr></argument>,
        <argument><expr><name pos:line="61" pos:column="9">port<pos:position pos:line="61" pos:column="13"/></name></expr></argument>)<pos:position pos:line="61" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="15"/></expr_stmt>

<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">ENABLE_IPV6<pos:position pos:line="63" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" pos:line="64" pos:column="3">/*
   * Connecting with IPv6 support is so much easier and cleanly done
   */</comment>
  <block pos:line="67" pos:column="3">{
    <decl_stmt><decl><type><name><name pos:line="68" pos:column="5">struct<pos:position pos:line="68" pos:column="11"/></name> <name pos:line="68" pos:column="12">addrinfo<pos:position pos:line="68" pos:column="20"/></name></name> <modifier pos:line="68" pos:column="21">*<pos:position pos:line="68" pos:column="22"/></modifier></type><name pos:line="68" pos:column="22">ai<pos:position pos:line="68" pos:column="24"/></name></decl>;<pos:position pos:line="68" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><name pos:line="69" pos:column="5">port<pos:position pos:line="69" pos:column="9"/></name> <operator pos:line="69" pos:column="10">=<pos:position pos:line="69" pos:column="11"/></operator><literal type="number" pos:line="69" pos:column="11">0<pos:position pos:line="69" pos:column="12"/></literal></expr>;<pos:position pos:line="69" pos:column="13"/></expr_stmt> <comment type="block" pos:line="69" pos:column="14">/* prevent compiler warning */</comment>

    <for pos:line="71" pos:column="5">for <control pos:line="71" pos:column="9">(<init><expr><name pos:line="71" pos:column="10">ai<pos:position pos:line="71" pos:column="12"/></name> <operator pos:line="71" pos:column="13">=<pos:position pos:line="71" pos:column="14"/></operator> <name><name pos:line="71" pos:column="15">remotehost<pos:position pos:line="71" pos:column="25"/></name><operator pos:line="71" pos:column="25">-&gt;<pos:position pos:line="71" pos:column="30"/></operator><name pos:line="71" pos:column="27">addr<pos:position pos:line="71" pos:column="31"/></name></name></expr>;<pos:position pos:line="71" pos:column="32"/></init> <condition><expr><name pos:line="71" pos:column="33">ai<pos:position pos:line="71" pos:column="35"/></name></expr>;<pos:position pos:line="71" pos:column="36"/></condition> <incr><expr><name pos:line="71" pos:column="37">ai<pos:position pos:line="71" pos:column="39"/></name> <operator pos:line="71" pos:column="40">=<pos:position pos:line="71" pos:column="41"/></operator> <name><name pos:line="71" pos:column="42">ai<pos:position pos:line="71" pos:column="44"/></name><operator pos:line="71" pos:column="44">-&gt;<pos:position pos:line="71" pos:column="49"/></operator><name pos:line="71" pos:column="46">ai_next<pos:position pos:line="71" pos:column="53"/></name></name></expr><operator pos:line="71" pos:column="53">,<pos:position pos:line="71" pos:column="54"/></operator> <expr><name pos:line="71" pos:column="55">aliasindex<pos:position pos:line="71" pos:column="65"/></name><operator pos:line="71" pos:column="65">++<pos:position pos:line="71" pos:column="67"/></operator></expr></incr>)<pos:position pos:line="71" pos:column="68"/></control> <block pos:line="71" pos:column="69">{
      <expr_stmt><expr><name pos:line="72" pos:column="7">sockfd<pos:position pos:line="72" pos:column="13"/></name> <operator pos:line="72" pos:column="14">=<pos:position pos:line="72" pos:column="15"/></operator> <call><name pos:line="72" pos:column="16">socket<pos:position pos:line="72" pos:column="22"/></name><argument_list pos:line="72" pos:column="22">(<argument><expr><name><name pos:line="72" pos:column="23">ai<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">-&gt;<pos:position pos:line="72" pos:column="30"/></operator><name pos:line="72" pos:column="27">ai_family<pos:position pos:line="72" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="38">ai<pos:position pos:line="72" pos:column="40"/></name><operator pos:line="72" pos:column="40">-&gt;<pos:position pos:line="72" pos:column="45"/></operator><name pos:line="72" pos:column="42">ai_socktype<pos:position pos:line="72" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="55">ai<pos:position pos:line="72" pos:column="57"/></name><operator pos:line="72" pos:column="57">-&gt;<pos:position pos:line="72" pos:column="62"/></operator><name pos:line="72" pos:column="59">ai_protocol<pos:position pos:line="72" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="72"/></expr_stmt>
      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><name pos:line="73" pos:column="11">sockfd<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">&lt;<pos:position pos:line="73" pos:column="22"/></operator> <literal type="number" pos:line="73" pos:column="20">0<pos:position pos:line="73" pos:column="21"/></literal></expr>)<pos:position pos:line="73" pos:column="22"/></condition><then pos:line="73" pos:column="22">
        <block type="pseudo"><continue pos:line="74" pos:column="9">continue;<pos:position pos:line="74" pos:column="18"/></continue></block></then></if>

      <if pos:line="76" pos:column="7">if<condition pos:line="76" pos:column="9">(<expr><name><name pos:line="76" pos:column="10">conn<pos:position pos:line="76" pos:column="14"/></name><operator pos:line="76" pos:column="14">-&gt;<pos:position pos:line="76" pos:column="19"/></operator><name pos:line="76" pos:column="16">data<pos:position pos:line="76" pos:column="20"/></name><operator pos:line="76" pos:column="20">-&gt;<pos:position pos:line="76" pos:column="25"/></operator><name pos:line="76" pos:column="22">set<pos:position pos:line="76" pos:column="25"/></name><operator pos:line="76" pos:column="25">.<pos:position pos:line="76" pos:column="26"/></operator><name pos:line="76" pos:column="26">device<pos:position pos:line="76" pos:column="32"/></name></name></expr>)<pos:position pos:line="76" pos:column="33"/></condition><then pos:line="76" pos:column="33"> <block pos:line="76" pos:column="34">{
        <comment type="block" pos:line="77" pos:column="9">/* user selected to bind the outgoing socket to a specified "device"
           before doing connect */</comment>
        <decl_stmt><decl><type><name pos:line="79" pos:column="9">CURLcode<pos:position pos:line="79" pos:column="17"/></name></type> <name pos:line="79" pos:column="18">res<pos:position pos:line="79" pos:column="21"/></name> <init pos:line="79" pos:column="22">= <expr><call><name pos:line="79" pos:column="24">bindlocal<pos:position pos:line="79" pos:column="33"/></name><argument_list pos:line="79" pos:column="33">(<argument><expr><name pos:line="79" pos:column="34">conn<pos:position pos:line="79" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="40">sockfd<pos:position pos:line="79" pos:column="46"/></name></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="79" pos:column="48"/></decl_stmt>
        <if pos:line="80" pos:column="9">if<condition pos:line="80" pos:column="11">(<expr><name pos:line="80" pos:column="12">res<pos:position pos:line="80" pos:column="15"/></name></expr>)<pos:position pos:line="80" pos:column="16"/></condition><then pos:line="80" pos:column="16">
          <block type="pseudo"><return pos:line="81" pos:column="11">return <expr><name pos:line="81" pos:column="18">res<pos:position pos:line="81" pos:column="21"/></name></expr>;<pos:position pos:line="81" pos:column="22"/></return></block></then></if>
      }<pos:position pos:line="82" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="84" pos:column="7">/* set socket non-blocking */</comment>
      <expr_stmt><expr><call><name pos:line="85" pos:column="7">Curl_nonblock<pos:position pos:line="85" pos:column="20"/></name><argument_list pos:line="85" pos:column="20">(<argument><expr><name pos:line="85" pos:column="21">sockfd<pos:position pos:line="85" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="29">TRUE<pos:position pos:line="85" pos:column="33"/></name></expr></argument>)<pos:position pos:line="85" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="35"/></expr_stmt>

      <expr_stmt><expr><name pos:line="87" pos:column="7">rc<pos:position pos:line="87" pos:column="9"/></name> <operator pos:line="87" pos:column="10">=<pos:position pos:line="87" pos:column="11"/></operator> <call><name pos:line="87" pos:column="12">connect<pos:position pos:line="87" pos:column="19"/></name><argument_list pos:line="87" pos:column="19">(<argument><expr><name pos:line="87" pos:column="20">sockfd<pos:position pos:line="87" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="28">ai<pos:position pos:line="87" pos:column="30"/></name><operator pos:line="87" pos:column="30">-&gt;<pos:position pos:line="87" pos:column="35"/></operator><name pos:line="87" pos:column="32">ai_addr<pos:position pos:line="87" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="41">ai<pos:position pos:line="87" pos:column="43"/></name><operator pos:line="87" pos:column="43">-&gt;<pos:position pos:line="87" pos:column="48"/></operator><name pos:line="87" pos:column="45">ai_addrlen<pos:position pos:line="87" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="57"/></expr_stmt>

      <if pos:line="89" pos:column="7">if<condition pos:line="89" pos:column="9">(<expr><operator pos:line="89" pos:column="10">-<pos:position pos:line="89" pos:column="11"/></operator><literal type="number" pos:line="89" pos:column="11">1<pos:position pos:line="89" pos:column="12"/></literal> <operator pos:line="89" pos:column="13">==<pos:position pos:line="89" pos:column="15"/></operator> <name pos:line="89" pos:column="16">rc<pos:position pos:line="89" pos:column="18"/></name></expr>)<pos:position pos:line="89" pos:column="19"/></condition><then pos:line="89" pos:column="19"> <block pos:line="89" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="90" pos:column="9">int<pos:position pos:line="90" pos:column="12"/></name></type> <name pos:line="90" pos:column="13">error<pos:position pos:line="90" pos:column="18"/></name><init pos:line="90" pos:column="18">=<expr><call><name pos:line="90" pos:column="19">ourerrno<pos:position pos:line="90" pos:column="27"/></name><argument_list pos:line="90" pos:column="27">()<pos:position pos:line="90" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="90" pos:column="30"/></decl_stmt>

        <switch pos:line="92" pos:column="9">switch <condition pos:line="92" pos:column="16">(<expr><name pos:line="92" pos:column="17">error<pos:position pos:line="92" pos:column="22"/></name></expr>)<pos:position pos:line="92" pos:column="23"/></condition> <block pos:line="92" pos:column="24">{
        <case pos:line="93" pos:column="9">case <expr><name pos:line="93" pos:column="14">EINPROGRESS<pos:position pos:line="93" pos:column="25"/></name></expr>:<pos:position pos:line="93" pos:column="26"/></case>
        <case pos:line="94" pos:column="9">case <expr><name pos:line="94" pos:column="14">EWOULDBLOCK<pos:position pos:line="94" pos:column="25"/></name></expr>:<pos:position pos:line="94" pos:column="26"/></case>
<cpp:if pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">if<pos:position pos:line="95" pos:column="4"/></cpp:directive> <expr><call><name pos:line="95" pos:column="5">defined<pos:position pos:line="95" pos:column="12"/></name><argument_list pos:line="95" pos:column="12">(<argument><expr><name pos:line="95" pos:column="13">EAGAIN<pos:position pos:line="95" pos:column="19"/></name></expr></argument>)<pos:position pos:line="95" pos:column="20"/></argument_list></call> <operator pos:line="95" pos:column="21">&amp;&amp;<pos:position pos:line="95" pos:column="31"/></operator> <name pos:line="95" pos:column="24">EAGAIN<pos:position pos:line="95" pos:column="30"/></name> <operator pos:line="95" pos:column="31">!=<pos:position pos:line="95" pos:column="33"/></operator> <name pos:line="95" pos:column="34">EWOULDBLOCK<pos:position pos:line="95" pos:column="45"/></name></expr></cpp:if>
          <comment type="block" pos:line="96" pos:column="11">/* On some platforms EAGAIN and EWOULDBLOCK are the
           * same value, and on others they are different, hence
           * the odd #if
           */</comment>
        <case pos:line="100" pos:column="9">case <expr><name pos:line="100" pos:column="14">EAGAIN<pos:position pos:line="100" pos:column="20"/></name></expr>:<pos:position pos:line="100" pos:column="21"/></case>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>
        <case pos:line="102" pos:column="9">case <expr><name pos:line="102" pos:column="14">EINTR<pos:position pos:line="102" pos:column="19"/></name></expr>:<pos:position pos:line="102" pos:column="20"/></case>
          <comment type="block" pos:line="103" pos:column="11">/* asynchronous connect, wait for connect or timeout */</comment>
          <if pos:line="104" pos:column="11">if<condition pos:line="104" pos:column="13">(<expr><name><name pos:line="104" pos:column="14">data<pos:position pos:line="104" pos:column="18"/></name><operator pos:line="104" pos:column="18">-&gt;<pos:position pos:line="104" pos:column="23"/></operator><name pos:line="104" pos:column="20">state<pos:position pos:line="104" pos:column="25"/></name><operator pos:line="104" pos:column="25">.<pos:position pos:line="104" pos:column="26"/></operator><name pos:line="104" pos:column="26">used_interface<pos:position pos:line="104" pos:column="40"/></name></name> <operator pos:line="104" pos:column="41">==<pos:position pos:line="104" pos:column="43"/></operator> <name pos:line="104" pos:column="44">Curl_if_multi<pos:position pos:line="104" pos:column="57"/></name></expr>)<pos:position pos:line="104" pos:column="58"/></condition><then pos:line="104" pos:column="58">
            <comment type="block" pos:line="105" pos:column="13">/* don't hang when doing multi */</comment>
            <block type="pseudo"><expr_stmt><expr><name pos:line="106" pos:column="13">timeout_ms<pos:position pos:line="106" pos:column="23"/></name> <operator pos:line="106" pos:column="24">=<pos:position pos:line="106" pos:column="25"/></operator> <literal type="number" pos:line="106" pos:column="26">0<pos:position pos:line="106" pos:column="27"/></literal></expr>;<pos:position pos:line="106" pos:column="28"/></expr_stmt></block></then></if>

          <expr_stmt><expr><name pos:line="108" pos:column="11">rc<pos:position pos:line="108" pos:column="13"/></name> <operator pos:line="108" pos:column="14">=<pos:position pos:line="108" pos:column="15"/></operator> <call><name pos:line="108" pos:column="16">waitconnect<pos:position pos:line="108" pos:column="27"/></name><argument_list pos:line="108" pos:column="27">(<argument><expr><name pos:line="108" pos:column="28">sockfd<pos:position pos:line="108" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="36">timeout_ms<pos:position pos:line="108" pos:column="46"/></name></expr></argument>)<pos:position pos:line="108" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="48"/></expr_stmt>
          <break pos:line="109" pos:column="11">break;<pos:position pos:line="109" pos:column="17"/></break>
        <case pos:line="110" pos:column="9">case <expr><name pos:line="110" pos:column="14">ECONNREFUSED<pos:position pos:line="110" pos:column="26"/></name></expr>:<pos:position pos:line="110" pos:column="27"/></case> <comment type="block" pos:line="110" pos:column="28">/* no one listening */</comment>
        <default pos:line="111" pos:column="9">default:<pos:position pos:line="111" pos:column="17"/></default>
          <comment type="block" pos:line="112" pos:column="11">/* unknown error, fallthrough and try another address! */</comment>
          <expr_stmt><expr><call><name pos:line="113" pos:column="11">failf<pos:position pos:line="113" pos:column="16"/></name><argument_list pos:line="113" pos:column="16">(<argument><expr><name pos:line="113" pos:column="17">data<pos:position pos:line="113" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="23">"Failed connect to %s: %d"<pos:position pos:line="113" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="51">hostname<pos:position pos:line="113" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="61">error<pos:position pos:line="113" pos:column="66"/></name></expr></argument>)<pos:position pos:line="113" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="68"/></expr_stmt>
          <break pos:line="114" pos:column="11">break;<pos:position pos:line="114" pos:column="17"/></break>
        }<pos:position pos:line="115" pos:column="10"/></block></switch>
      }<pos:position pos:line="116" pos:column="8"/></block></then></if>

      <if pos:line="118" pos:column="7">if<condition pos:line="118" pos:column="9">(<expr><literal type="number" pos:line="118" pos:column="10">0<pos:position pos:line="118" pos:column="11"/></literal> <operator pos:line="118" pos:column="12">==<pos:position pos:line="118" pos:column="14"/></operator> <name pos:line="118" pos:column="15">rc<pos:position pos:line="118" pos:column="17"/></name></expr>)<pos:position pos:line="118" pos:column="18"/></condition><then pos:line="118" pos:column="18"> <block pos:line="118" pos:column="19">{
        <comment type="block" pos:line="119" pos:column="9">/* we might be connected, if the socket says it is OK! Ask it! */</comment>
        <decl_stmt><decl><type><name pos:line="120" pos:column="9">int<pos:position pos:line="120" pos:column="12"/></name></type> <name pos:line="120" pos:column="13">err<pos:position pos:line="120" pos:column="16"/></name></decl>;<pos:position pos:line="120" pos:column="17"/></decl_stmt>

        <expr_stmt><expr><name pos:line="122" pos:column="9">err<pos:position pos:line="122" pos:column="12"/></name> <operator pos:line="122" pos:column="13">=<pos:position pos:line="122" pos:column="14"/></operator> <call><name pos:line="122" pos:column="15">socketerror<pos:position pos:line="122" pos:column="26"/></name><argument_list pos:line="122" pos:column="26">(<argument><expr><name pos:line="122" pos:column="27">sockfd<pos:position pos:line="122" pos:column="33"/></name></expr></argument>)<pos:position pos:line="122" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="35"/></expr_stmt>
        <if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><operator pos:line="123" pos:column="13">(<pos:position pos:line="123" pos:column="14"/></operator><literal type="number" pos:line="123" pos:column="14">0<pos:position pos:line="123" pos:column="15"/></literal> <operator pos:line="123" pos:column="16">==<pos:position pos:line="123" pos:column="18"/></operator> <name pos:line="123" pos:column="19">err<pos:position pos:line="123" pos:column="22"/></name><operator pos:line="123" pos:column="22">)<pos:position pos:line="123" pos:column="23"/></operator> <operator pos:line="123" pos:column="24">||<pos:position pos:line="123" pos:column="26"/></operator> <operator pos:line="123" pos:column="27">(<pos:position pos:line="123" pos:column="28"/></operator><name pos:line="123" pos:column="28">EISCONN<pos:position pos:line="123" pos:column="35"/></name> <operator pos:line="123" pos:column="36">==<pos:position pos:line="123" pos:column="38"/></operator> <name pos:line="123" pos:column="39">err<pos:position pos:line="123" pos:column="42"/></name><operator pos:line="123" pos:column="42">)<pos:position pos:line="123" pos:column="43"/></operator></expr>)<pos:position pos:line="123" pos:column="44"/></condition><then pos:line="123" pos:column="44"> <block pos:line="123" pos:column="45">{
          <comment type="block" pos:line="124" pos:column="11">/* we are connected, awesome! */</comment>
          <expr_stmt><expr><operator pos:line="125" pos:column="11">*<pos:position pos:line="125" pos:column="12"/></operator><name pos:line="125" pos:column="12">connected<pos:position pos:line="125" pos:column="21"/></name> <operator pos:line="125" pos:column="22">=<pos:position pos:line="125" pos:column="23"/></operator> <name pos:line="125" pos:column="24">TRUE<pos:position pos:line="125" pos:column="28"/></name></expr>;<pos:position pos:line="125" pos:column="29"/></expr_stmt> <comment type="block" pos:line="125" pos:column="30">/* this is truly a connect */</comment>
          <break pos:line="126" pos:column="11">break;<pos:position pos:line="126" pos:column="17"/></break>
	}<pos:position pos:line="127" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="128" pos:column="9">failf<pos:position pos:line="128" pos:column="14"/></name><argument_list pos:line="128" pos:column="14">(<argument><expr><name pos:line="128" pos:column="15">data<pos:position pos:line="128" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="21">"socket error: %d"<pos:position pos:line="128" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="128" pos:column="41">err<pos:position pos:line="128" pos:column="44"/></name></expr></argument>)<pos:position pos:line="128" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="46"/></expr_stmt>
        <comment type="block" pos:line="129" pos:column="9">/* we are _not_ connected, it was a false alert, continue please */</comment>
      }<pos:position pos:line="130" pos:column="8"/></block></then>
      <elseif pos:line="131" pos:column="7">else <if pos:line="131" pos:column="12">if<condition pos:line="131" pos:column="14">(<expr><literal type="number" pos:line="131" pos:column="15">2<pos:position pos:line="131" pos:column="16"/></literal> <operator pos:line="131" pos:column="17">==<pos:position pos:line="131" pos:column="19"/></operator> <name pos:line="131" pos:column="20">rc<pos:position pos:line="131" pos:column="22"/></name></expr>)<pos:position pos:line="131" pos:column="23"/></condition><then pos:line="131" pos:column="23">
        <comment type="block" pos:line="132" pos:column="9">/* waitconnect() returned error */</comment>
        <block type="pseudo"><empty_stmt pos:line="133" pos:column="9">;<pos:position pos:line="133" pos:column="10"/></empty_stmt></block></then></if></elseif>
      <elseif pos:line="134" pos:column="7">else <if pos:line="134" pos:column="12">if<condition pos:line="134" pos:column="14">(<expr><name><name pos:line="134" pos:column="15">data<pos:position pos:line="134" pos:column="19"/></name><operator pos:line="134" pos:column="19">-&gt;<pos:position pos:line="134" pos:column="24"/></operator><name pos:line="134" pos:column="21">state<pos:position pos:line="134" pos:column="26"/></name><operator pos:line="134" pos:column="26">.<pos:position pos:line="134" pos:column="27"/></operator><name pos:line="134" pos:column="27">used_interface<pos:position pos:line="134" pos:column="41"/></name></name> <operator pos:line="134" pos:column="42">==<pos:position pos:line="134" pos:column="44"/></operator> <name pos:line="134" pos:column="45">Curl_if_multi<pos:position pos:line="134" pos:column="58"/></name></expr>)<pos:position pos:line="134" pos:column="59"/></condition><then pos:line="134" pos:column="59"> <block pos:line="134" pos:column="60">{
        <comment type="block" pos:line="135" pos:column="9">/* When running the multi interface, we bail out here */</comment>
        <expr_stmt><expr><name pos:line="136" pos:column="9">rc<pos:position pos:line="136" pos:column="11"/></name> <operator pos:line="136" pos:column="12">=<pos:position pos:line="136" pos:column="13"/></operator> <literal type="number" pos:line="136" pos:column="14">0<pos:position pos:line="136" pos:column="15"/></literal></expr>;<pos:position pos:line="136" pos:column="16"/></expr_stmt>
        <break pos:line="137" pos:column="9">break;<pos:position pos:line="137" pos:column="15"/></break>
      }<pos:position pos:line="138" pos:column="8"/></block></then></if></elseif></if>

      <comment type="block" pos:line="140" pos:column="7">/* connect failed or timed out */</comment>
      <expr_stmt><expr><call><name pos:line="141" pos:column="7">sclose<pos:position pos:line="141" pos:column="13"/></name><argument_list pos:line="141" pos:column="13">(<argument><expr><name pos:line="141" pos:column="14">sockfd<pos:position pos:line="141" pos:column="20"/></name></expr></argument>)<pos:position pos:line="141" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="142" pos:column="7">sockfd<pos:position pos:line="142" pos:column="13"/></name> <operator pos:line="142" pos:column="14">=<pos:position pos:line="142" pos:column="15"/></operator> <operator pos:line="142" pos:column="16">-<pos:position pos:line="142" pos:column="17"/></operator><literal type="number" pos:line="142" pos:column="17">1<pos:position pos:line="142" pos:column="18"/></literal></expr>;<pos:position pos:line="142" pos:column="19"/></expr_stmt>

      <comment type="block" pos:line="144" pos:column="7">/* get a new timeout for next attempt */</comment>
      <expr_stmt><expr><name pos:line="145" pos:column="7">after<pos:position pos:line="145" pos:column="12"/></name> <operator pos:line="145" pos:column="13">=<pos:position pos:line="145" pos:column="14"/></operator> <call><name pos:line="145" pos:column="15">Curl_tvnow<pos:position pos:line="145" pos:column="25"/></name><argument_list pos:line="145" pos:column="25">()<pos:position pos:line="145" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="146" pos:column="7">timeout_ms<pos:position pos:line="146" pos:column="17"/></name> <operator pos:line="146" pos:column="18">-=<pos:position pos:line="146" pos:column="20"/></operator> <call><name pos:line="146" pos:column="21">Curl_tvdiff<pos:position pos:line="146" pos:column="32"/></name><argument_list pos:line="146" pos:column="32">(<argument><expr><name pos:line="146" pos:column="33">after<pos:position pos:line="146" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="40">before<pos:position pos:line="146" pos:column="46"/></name></expr></argument>)<pos:position pos:line="146" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="48"/></expr_stmt>
      <if pos:line="147" pos:column="7">if<condition pos:line="147" pos:column="9">(<expr><name pos:line="147" pos:column="10">timeout_ms<pos:position pos:line="147" pos:column="20"/></name> <operator pos:line="147" pos:column="21">&lt;<pos:position pos:line="147" pos:column="25"/></operator> <literal type="number" pos:line="147" pos:column="23">0<pos:position pos:line="147" pos:column="24"/></literal></expr>)<pos:position pos:line="147" pos:column="25"/></condition><then pos:line="147" pos:column="25"> <block pos:line="147" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="148" pos:column="9">failf<pos:position pos:line="148" pos:column="14"/></name><argument_list pos:line="148" pos:column="14">(<argument><expr><name pos:line="148" pos:column="15">data<pos:position pos:line="148" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="21">"connect() timed out!"<pos:position pos:line="148" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="45"/></expr_stmt>
        <return pos:line="149" pos:column="9">return <expr><name pos:line="149" pos:column="16">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="149" pos:column="41"/></name></expr>;<pos:position pos:line="149" pos:column="42"/></return>
      }<pos:position pos:line="150" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="151" pos:column="7">before<pos:position pos:line="151" pos:column="13"/></name> <operator pos:line="151" pos:column="14">=<pos:position pos:line="151" pos:column="15"/></operator> <name pos:line="151" pos:column="16">after<pos:position pos:line="151" pos:column="21"/></name></expr>;<pos:position pos:line="151" pos:column="22"/></expr_stmt>
      <continue pos:line="152" pos:column="7">continue;<pos:position pos:line="152" pos:column="16"/></continue>
    }<pos:position pos:line="153" pos:column="6"/></block></for>
    <if pos:line="154" pos:column="5">if <condition pos:line="154" pos:column="8">(<expr><name pos:line="154" pos:column="9">sockfd<pos:position pos:line="154" pos:column="15"/></name> <operator pos:line="154" pos:column="16">&lt;<pos:position pos:line="154" pos:column="20"/></operator> <literal type="number" pos:line="154" pos:column="18">0<pos:position pos:line="154" pos:column="19"/></literal></expr>)<pos:position pos:line="154" pos:column="20"/></condition><then pos:line="154" pos:column="20">
      <block type="pseudo"><return pos:line="155" pos:column="7">return <expr><name pos:line="155" pos:column="14">CURLE_COULDNT_CONNECT<pos:position pos:line="155" pos:column="35"/></name></expr>;<pos:position pos:line="155" pos:column="36"/></return></block></then></if>

    <comment type="block" pos:line="157" pos:column="5">/* leave the socket in non-blocking mode */</comment>

    <if pos:line="159" pos:column="5">if<condition pos:line="159" pos:column="7">(<expr><name pos:line="159" pos:column="8">addr<pos:position pos:line="159" pos:column="12"/></name></expr>)<pos:position pos:line="159" pos:column="13"/></condition><then pos:line="159" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="160" pos:column="7">*<pos:position pos:line="160" pos:column="8"/></operator><name pos:line="160" pos:column="8">addr<pos:position pos:line="160" pos:column="12"/></name> <operator pos:line="160" pos:column="13">=<pos:position pos:line="160" pos:column="14"/></operator> <name pos:line="160" pos:column="15">ai<pos:position pos:line="160" pos:column="17"/></name></expr>;<pos:position pos:line="160" pos:column="18"/></expr_stmt></block></then></if> <comment type="block" pos:line="160" pos:column="19">/* the address we ended up connected to */</comment>
  }<pos:position pos:line="161" pos:column="4"/></block>
<cpp:else pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">else<pos:position pos:line="162" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="163" pos:column="3">/*
   * Connecting with IPv4-only support
   */</comment>
  <if pos:line="166" pos:column="3">if<condition pos:line="166" pos:column="5">(<expr><operator pos:line="166" pos:column="6">!<pos:position pos:line="166" pos:column="7"/></operator><name><name pos:line="166" pos:column="7">remotehost<pos:position pos:line="166" pos:column="17"/></name><operator pos:line="166" pos:column="17">-&gt;<pos:position pos:line="166" pos:column="22"/></operator><name pos:line="166" pos:column="19">addr<pos:position pos:line="166" pos:column="23"/></name><operator pos:line="166" pos:column="23">-&gt;<pos:position pos:line="166" pos:column="28"/></operator><name pos:line="166" pos:column="25">h_addr_list<pos:position pos:line="166" pos:column="36"/></name><index pos:line="166" pos:column="36">[<expr><literal type="number" pos:line="166" pos:column="37">0<pos:position pos:line="166" pos:column="38"/></literal></expr>]<pos:position pos:line="166" pos:column="39"/></index></name></expr>)<pos:position pos:line="166" pos:column="40"/></condition><then pos:line="166" pos:column="40"> <block pos:line="166" pos:column="41">{
    <comment type="block" pos:line="167" pos:column="5">/* If there is no addresses in the address list, then we return
       error right away */</comment>
    <expr_stmt><expr><call><name pos:line="169" pos:column="5">failf<pos:position pos:line="169" pos:column="10"/></name><argument_list pos:line="169" pos:column="10">(<argument><expr><name pos:line="169" pos:column="11">data<pos:position pos:line="169" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="169" pos:column="17">"no address available"<pos:position pos:line="169" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="169" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="41"/></expr_stmt>
    <return pos:line="170" pos:column="5">return <expr><name pos:line="170" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="170" pos:column="33"/></name></expr>;<pos:position pos:line="170" pos:column="34"/></return>
  }<pos:position pos:line="171" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="172" pos:column="3">/* create an IPv4 TCP socket */</comment>
  <expr_stmt><expr><name pos:line="173" pos:column="3">sockfd<pos:position pos:line="173" pos:column="9"/></name> <operator pos:line="173" pos:column="10">=<pos:position pos:line="173" pos:column="11"/></operator> <call><name pos:line="173" pos:column="12">socket<pos:position pos:line="173" pos:column="18"/></name><argument_list pos:line="173" pos:column="18">(<argument><expr><name pos:line="173" pos:column="19">AF_INET<pos:position pos:line="173" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="28">SOCK_STREAM<pos:position pos:line="173" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="173" pos:column="41">0<pos:position pos:line="173" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="44"/></expr_stmt>
  <if pos:line="174" pos:column="3">if<condition pos:line="174" pos:column="5">(<expr><operator pos:line="174" pos:column="6">-<pos:position pos:line="174" pos:column="7"/></operator><literal type="number" pos:line="174" pos:column="7">1<pos:position pos:line="174" pos:column="8"/></literal> <operator pos:line="174" pos:column="9">==<pos:position pos:line="174" pos:column="11"/></operator> <name pos:line="174" pos:column="12">sockfd<pos:position pos:line="174" pos:column="18"/></name></expr>)<pos:position pos:line="174" pos:column="19"/></condition><then pos:line="174" pos:column="19"> <block pos:line="174" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="175" pos:column="5">failf<pos:position pos:line="175" pos:column="10"/></name><argument_list pos:line="175" pos:column="10">(<argument><expr><name pos:line="175" pos:column="11">data<pos:position pos:line="175" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="17">"couldn't create socket"<pos:position pos:line="175" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="43"/></expr_stmt>
    <return pos:line="176" pos:column="5">return <expr><name pos:line="176" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="176" pos:column="33"/></name></expr>;<pos:position pos:line="176" pos:column="34"/></return> <comment type="block" pos:line="176" pos:column="35">/* big time error */</comment>
  }<pos:position pos:line="177" pos:column="4"/></block></then></if>
  
  <if pos:line="179" pos:column="3">if<condition pos:line="179" pos:column="5">(<expr><name><name pos:line="179" pos:column="6">conn<pos:position pos:line="179" pos:column="10"/></name><operator pos:line="179" pos:column="10">-&gt;<pos:position pos:line="179" pos:column="15"/></operator><name pos:line="179" pos:column="12">data<pos:position pos:line="179" pos:column="16"/></name><operator pos:line="179" pos:column="16">-&gt;<pos:position pos:line="179" pos:column="21"/></operator><name pos:line="179" pos:column="18">set<pos:position pos:line="179" pos:column="21"/></name><operator pos:line="179" pos:column="21">.<pos:position pos:line="179" pos:column="22"/></operator><name pos:line="179" pos:column="22">device<pos:position pos:line="179" pos:column="28"/></name></name></expr>)<pos:position pos:line="179" pos:column="29"/></condition><then pos:line="179" pos:column="29"> <block pos:line="179" pos:column="30">{
    <comment type="block" pos:line="180" pos:column="5">/* user selected to bind the outgoing socket to a specified "device"
       before doing connect */</comment>
    <decl_stmt><decl><type><name pos:line="182" pos:column="5">CURLcode<pos:position pos:line="182" pos:column="13"/></name></type> <name pos:line="182" pos:column="14">res<pos:position pos:line="182" pos:column="17"/></name> <init pos:line="182" pos:column="18">= <expr><call><name pos:line="182" pos:column="20">bindlocal<pos:position pos:line="182" pos:column="29"/></name><argument_list pos:line="182" pos:column="29">(<argument><expr><name pos:line="182" pos:column="30">conn<pos:position pos:line="182" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="182" pos:column="36">sockfd<pos:position pos:line="182" pos:column="42"/></name></expr></argument>)<pos:position pos:line="182" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="182" pos:column="44"/></decl_stmt>
    <if pos:line="183" pos:column="5">if<condition pos:line="183" pos:column="7">(<expr><name pos:line="183" pos:column="8">res<pos:position pos:line="183" pos:column="11"/></name></expr>)<pos:position pos:line="183" pos:column="12"/></condition><then pos:line="183" pos:column="12">
      <block type="pseudo"><return pos:line="184" pos:column="7">return <expr><name pos:line="184" pos:column="14">res<pos:position pos:line="184" pos:column="17"/></name></expr>;<pos:position pos:line="184" pos:column="18"/></return></block></then></if>
  }<pos:position pos:line="185" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="187" pos:column="3">/* Convert socket to non-blocking type */</comment>
  <expr_stmt><expr><call><name pos:line="188" pos:column="3">Curl_nonblock<pos:position pos:line="188" pos:column="16"/></name><argument_list pos:line="188" pos:column="16">(<argument><expr><name pos:line="188" pos:column="17">sockfd<pos:position pos:line="188" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="25">TRUE<pos:position pos:line="188" pos:column="29"/></name></expr></argument>)<pos:position pos:line="188" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="190" pos:column="3">/* This is the loop that attempts to connect to all IP-addresses we
     know for the given host. One by one. */</comment>
  <for pos:line="192" pos:column="3">for<control pos:line="192" pos:column="6">(<init><expr><name pos:line="192" pos:column="7">rc<pos:position pos:line="192" pos:column="9"/></name><operator pos:line="192" pos:column="9">=<pos:position pos:line="192" pos:column="10"/></operator><operator pos:line="192" pos:column="10">-<pos:position pos:line="192" pos:column="11"/></operator><literal type="number" pos:line="192" pos:column="11">1<pos:position pos:line="192" pos:column="12"/></literal></expr><operator pos:line="192" pos:column="12">,<pos:position pos:line="192" pos:column="13"/></operator> <expr><name pos:line="192" pos:column="14">aliasindex<pos:position pos:line="192" pos:column="24"/></name><operator pos:line="192" pos:column="24">=<pos:position pos:line="192" pos:column="25"/></operator><literal type="number" pos:line="192" pos:column="25">0<pos:position pos:line="192" pos:column="26"/></literal></expr>;<pos:position pos:line="192" pos:column="27"/></init>
      <condition><expr><name pos:line="193" pos:column="7">rc<pos:position pos:line="193" pos:column="9"/></name> <operator pos:line="193" pos:column="10">&amp;&amp;<pos:position pos:line="193" pos:column="20"/></operator> <operator pos:line="193" pos:column="13">(<pos:position pos:line="193" pos:column="14"/></operator>struct <name pos:line="193" pos:column="21">in_addr<pos:position pos:line="193" pos:column="28"/></name> <operator pos:line="193" pos:column="29">*<pos:position pos:line="193" pos:column="30"/></operator><operator pos:line="193" pos:column="30">)<pos:position pos:line="193" pos:column="31"/></operator><name><name pos:line="193" pos:column="31">remotehost<pos:position pos:line="193" pos:column="41"/></name><operator pos:line="193" pos:column="41">-&gt;<pos:position pos:line="193" pos:column="46"/></operator><name pos:line="193" pos:column="43">addr<pos:position pos:line="193" pos:column="47"/></name><operator pos:line="193" pos:column="47">-&gt;<pos:position pos:line="193" pos:column="52"/></operator><name pos:line="193" pos:column="49">h_addr_list<pos:position pos:line="193" pos:column="60"/></name><index pos:line="193" pos:column="60">[<expr><name pos:line="193" pos:column="61">aliasindex<pos:position pos:line="193" pos:column="71"/></name></expr>]<pos:position pos:line="193" pos:column="72"/></index></name></expr>;<pos:position pos:line="193" pos:column="73"/></condition>
      <incr><expr><name pos:line="194" pos:column="7">aliasindex<pos:position pos:line="194" pos:column="17"/></name><operator pos:line="194" pos:column="17">++<pos:position pos:line="194" pos:column="19"/></operator></expr></incr>)<pos:position pos:line="194" pos:column="20"/></control> <block pos:line="194" pos:column="21">{
    <decl_stmt><decl><type><name><name pos:line="195" pos:column="5">struct<pos:position pos:line="195" pos:column="11"/></name> <name pos:line="195" pos:column="12">sockaddr_in<pos:position pos:line="195" pos:column="23"/></name></name></type> <name pos:line="195" pos:column="24">serv_addr<pos:position pos:line="195" pos:column="33"/></name></decl>;<pos:position pos:line="195" pos:column="34"/></decl_stmt>

    <comment type="block" pos:line="197" pos:column="5">/* do this nasty work to do the connect */</comment>
    <expr_stmt><expr><call><name pos:line="198" pos:column="5">memset<pos:position pos:line="198" pos:column="11"/></name><argument_list pos:line="198" pos:column="11">(<argument><expr><operator pos:line="198" pos:column="12">(<pos:position pos:line="198" pos:column="13"/></operator><name pos:line="198" pos:column="13">char<pos:position pos:line="198" pos:column="17"/></name> <operator pos:line="198" pos:column="18">*<pos:position pos:line="198" pos:column="19"/></operator><operator pos:line="198" pos:column="19">)<pos:position pos:line="198" pos:column="20"/></operator> <operator pos:line="198" pos:column="21">&amp;<pos:position pos:line="198" pos:column="26"/></operator><name pos:line="198" pos:column="22">serv_addr<pos:position pos:line="198" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="198" pos:column="33">'\0'<pos:position pos:line="198" pos:column="37"/></literal></expr></argument>, <argument><expr><sizeof pos:line="198" pos:column="39">sizeof<argument_list pos:line="198" pos:column="45">(<argument><expr><name pos:line="198" pos:column="46">serv_addr<pos:position pos:line="198" pos:column="55"/></name></expr></argument>)<pos:position pos:line="198" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="198" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="199" pos:column="5">memcpy<pos:position pos:line="199" pos:column="11"/></name><argument_list pos:line="199" pos:column="11">(<argument><expr><operator pos:line="199" pos:column="12">(<pos:position pos:line="199" pos:column="13"/></operator><name pos:line="199" pos:column="13">char<pos:position pos:line="199" pos:column="17"/></name> <operator pos:line="199" pos:column="18">*<pos:position pos:line="199" pos:column="19"/></operator><operator pos:line="199" pos:column="19">)<pos:position pos:line="199" pos:column="20"/></operator><operator pos:line="199" pos:column="20">&amp;<pos:position pos:line="199" pos:column="25"/></operator><operator pos:line="199" pos:column="21">(<pos:position pos:line="199" pos:column="22"/></operator><name><name pos:line="199" pos:column="22">serv_addr<pos:position pos:line="199" pos:column="31"/></name><operator pos:line="199" pos:column="31">.<pos:position pos:line="199" pos:column="32"/></operator><name pos:line="199" pos:column="32">sin_addr<pos:position pos:line="199" pos:column="40"/></name></name><operator pos:line="199" pos:column="40">)<pos:position pos:line="199" pos:column="41"/></operator></expr></argument>,
           <argument><expr><operator pos:line="200" pos:column="12">(<pos:position pos:line="200" pos:column="13"/></operator>struct <name pos:line="200" pos:column="20">in_addr<pos:position pos:line="200" pos:column="27"/></name> <operator pos:line="200" pos:column="28">*<pos:position pos:line="200" pos:column="29"/></operator><operator pos:line="200" pos:column="29">)<pos:position pos:line="200" pos:column="30"/></operator><name><name pos:line="200" pos:column="30">remotehost<pos:position pos:line="200" pos:column="40"/></name><operator pos:line="200" pos:column="40">-&gt;<pos:position pos:line="200" pos:column="45"/></operator><name pos:line="200" pos:column="42">addr<pos:position pos:line="200" pos:column="46"/></name><operator pos:line="200" pos:column="46">-&gt;<pos:position pos:line="200" pos:column="51"/></operator><name pos:line="200" pos:column="48">h_addr_list<pos:position pos:line="200" pos:column="59"/></name><index pos:line="200" pos:column="59">[<expr><name pos:line="200" pos:column="60">aliasindex<pos:position pos:line="200" pos:column="70"/></name></expr>]<pos:position pos:line="200" pos:column="71"/></index></name></expr></argument>,
           <argument><expr><sizeof pos:line="201" pos:column="12">sizeof<argument_list pos:line="201" pos:column="18">(<argument><expr pos:line="201" pos:column="19">struct <name pos:line="201" pos:column="26">in_addr<pos:position pos:line="201" pos:column="33"/></name></expr></argument>)<pos:position pos:line="201" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="201" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="202" pos:column="5">serv_addr<pos:position pos:line="202" pos:column="14"/></name><operator pos:line="202" pos:column="14">.<pos:position pos:line="202" pos:column="15"/></operator><name pos:line="202" pos:column="15">sin_family<pos:position pos:line="202" pos:column="25"/></name></name> <operator pos:line="202" pos:column="26">=<pos:position pos:line="202" pos:column="27"/></operator> <name><name pos:line="202" pos:column="28">remotehost<pos:position pos:line="202" pos:column="38"/></name><operator pos:line="202" pos:column="38">-&gt;<pos:position pos:line="202" pos:column="43"/></operator><name pos:line="202" pos:column="40">addr<pos:position pos:line="202" pos:column="44"/></name><operator pos:line="202" pos:column="44">-&gt;<pos:position pos:line="202" pos:column="49"/></operator><name pos:line="202" pos:column="46">h_addrtype<pos:position pos:line="202" pos:column="56"/></name></name></expr>;<pos:position pos:line="202" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="203" pos:column="5">serv_addr<pos:position pos:line="203" pos:column="14"/></name><operator pos:line="203" pos:column="14">.<pos:position pos:line="203" pos:column="15"/></operator><name pos:line="203" pos:column="15">sin_port<pos:position pos:line="203" pos:column="23"/></name></name> <operator pos:line="203" pos:column="24">=<pos:position pos:line="203" pos:column="25"/></operator> <call><name pos:line="203" pos:column="26">htons<pos:position pos:line="203" pos:column="31"/></name><argument_list pos:line="203" pos:column="31">(<argument><expr><operator pos:line="203" pos:column="32">(<pos:position pos:line="203" pos:column="33"/></operator><name pos:line="203" pos:column="33">unsigned<pos:position pos:line="203" pos:column="41"/></name> <name pos:line="203" pos:column="42">short<pos:position pos:line="203" pos:column="47"/></name><operator pos:line="203" pos:column="47">)<pos:position pos:line="203" pos:column="48"/></operator><name pos:line="203" pos:column="48">port<pos:position pos:line="203" pos:column="52"/></name></expr></argument>)<pos:position pos:line="203" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="54"/></expr_stmt>
  
    <expr_stmt><expr><name pos:line="205" pos:column="5">rc<pos:position pos:line="205" pos:column="7"/></name> <operator pos:line="205" pos:column="8">=<pos:position pos:line="205" pos:column="9"/></operator> <call><name pos:line="205" pos:column="10">connect<pos:position pos:line="205" pos:column="17"/></name><argument_list pos:line="205" pos:column="17">(<argument><expr><name pos:line="205" pos:column="18">sockfd<pos:position pos:line="205" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="205" pos:column="26">(<pos:position pos:line="205" pos:column="27"/></operator>struct <name pos:line="205" pos:column="34">sockaddr<pos:position pos:line="205" pos:column="42"/></name> <operator pos:line="205" pos:column="43">*<pos:position pos:line="205" pos:column="44"/></operator><operator pos:line="205" pos:column="44">)<pos:position pos:line="205" pos:column="45"/></operator><operator pos:line="205" pos:column="45">&amp;<pos:position pos:line="205" pos:column="50"/></operator><name pos:line="205" pos:column="46">serv_addr<pos:position pos:line="205" pos:column="55"/></name></expr></argument>,
                 <argument><expr><sizeof pos:line="206" pos:column="18">sizeof<argument_list pos:line="206" pos:column="24">(<argument><expr><name pos:line="206" pos:column="25">serv_addr<pos:position pos:line="206" pos:column="34"/></name></expr></argument>)<pos:position pos:line="206" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="206" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="37"/></expr_stmt>

    <if pos:line="208" pos:column="5">if<condition pos:line="208" pos:column="7">(<expr><operator pos:line="208" pos:column="8">-<pos:position pos:line="208" pos:column="9"/></operator><literal type="number" pos:line="208" pos:column="9">1<pos:position pos:line="208" pos:column="10"/></literal> <operator pos:line="208" pos:column="11">==<pos:position pos:line="208" pos:column="13"/></operator> <name pos:line="208" pos:column="14">rc<pos:position pos:line="208" pos:column="16"/></name></expr>)<pos:position pos:line="208" pos:column="17"/></condition><then pos:line="208" pos:column="17"> <block pos:line="208" pos:column="18">{
      <decl_stmt><decl><type><name pos:line="209" pos:column="7">int<pos:position pos:line="209" pos:column="10"/></name></type> <name pos:line="209" pos:column="11">error<pos:position pos:line="209" pos:column="16"/></name><init pos:line="209" pos:column="16">=<expr><call><name pos:line="209" pos:column="17">ourerrno<pos:position pos:line="209" pos:column="25"/></name><argument_list pos:line="209" pos:column="25">()<pos:position pos:line="209" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="209" pos:column="28"/></decl_stmt>

      <switch pos:line="211" pos:column="7">switch <condition pos:line="211" pos:column="14">(<expr><name pos:line="211" pos:column="15">error<pos:position pos:line="211" pos:column="20"/></name></expr>)<pos:position pos:line="211" pos:column="21"/></condition> <block pos:line="211" pos:column="22">{
      <case pos:line="212" pos:column="7">case <expr><name pos:line="212" pos:column="12">EINPROGRESS<pos:position pos:line="212" pos:column="23"/></name></expr>:<pos:position pos:line="212" pos:column="24"/></case>
      <case pos:line="213" pos:column="7">case <expr><name pos:line="213" pos:column="12">EWOULDBLOCK<pos:position pos:line="213" pos:column="23"/></name></expr>:<pos:position pos:line="213" pos:column="24"/></case>
<cpp:if pos:line="214" pos:column="1">#<cpp:directive pos:line="214" pos:column="2">if<pos:position pos:line="214" pos:column="4"/></cpp:directive> <expr><call><name pos:line="214" pos:column="5">defined<pos:position pos:line="214" pos:column="12"/></name><argument_list pos:line="214" pos:column="12">(<argument><expr><name pos:line="214" pos:column="13">EAGAIN<pos:position pos:line="214" pos:column="19"/></name></expr></argument>)<pos:position pos:line="214" pos:column="20"/></argument_list></call> <operator pos:line="214" pos:column="21">&amp;&amp;<pos:position pos:line="214" pos:column="31"/></operator> <name pos:line="214" pos:column="24">EAGAIN<pos:position pos:line="214" pos:column="30"/></name> <operator pos:line="214" pos:column="31">!=<pos:position pos:line="214" pos:column="33"/></operator> <name pos:line="214" pos:column="34">EWOULDBLOCK<pos:position pos:line="214" pos:column="45"/></name></expr></cpp:if>
        <comment type="block" pos:line="215" pos:column="9">/* On some platforms EAGAIN and EWOULDBLOCK are the
         * same value, and on others they are different, hence
         * the odd #if
         */</comment>
      <case pos:line="219" pos:column="7">case <expr><name pos:line="219" pos:column="12">EAGAIN<pos:position pos:line="219" pos:column="18"/></name></expr>:<pos:position pos:line="219" pos:column="19"/></case>
<cpp:endif pos:line="220" pos:column="1">#<cpp:directive pos:line="220" pos:column="2">endif<pos:position pos:line="220" pos:column="7"/></cpp:directive></cpp:endif>
        <comment type="block" pos:line="221" pos:column="9">/* asynchronous connect, wait for connect or timeout */</comment>
        <if pos:line="222" pos:column="9">if<condition pos:line="222" pos:column="11">(<expr><name><name pos:line="222" pos:column="12">data<pos:position pos:line="222" pos:column="16"/></name><operator pos:line="222" pos:column="16">-&gt;<pos:position pos:line="222" pos:column="21"/></operator><name pos:line="222" pos:column="18">state<pos:position pos:line="222" pos:column="23"/></name><operator pos:line="222" pos:column="23">.<pos:position pos:line="222" pos:column="24"/></operator><name pos:line="222" pos:column="24">used_interface<pos:position pos:line="222" pos:column="38"/></name></name> <operator pos:line="222" pos:column="39">==<pos:position pos:line="222" pos:column="41"/></operator> <name pos:line="222" pos:column="42">Curl_if_multi<pos:position pos:line="222" pos:column="55"/></name></expr>)<pos:position pos:line="222" pos:column="56"/></condition><then pos:line="222" pos:column="56">
          <comment type="block" pos:line="223" pos:column="11">/* don't hang when doing multi */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="224" pos:column="11">timeout_ms<pos:position pos:line="224" pos:column="21"/></name> <operator pos:line="224" pos:column="22">=<pos:position pos:line="224" pos:column="23"/></operator> <literal type="number" pos:line="224" pos:column="24">0<pos:position pos:line="224" pos:column="25"/></literal></expr>;<pos:position pos:line="224" pos:column="26"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="226" pos:column="9">rc<pos:position pos:line="226" pos:column="11"/></name> <operator pos:line="226" pos:column="12">=<pos:position pos:line="226" pos:column="13"/></operator> <call><name pos:line="226" pos:column="14">waitconnect<pos:position pos:line="226" pos:column="25"/></name><argument_list pos:line="226" pos:column="25">(<argument><expr><name pos:line="226" pos:column="26">sockfd<pos:position pos:line="226" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="34">timeout_ms<pos:position pos:line="226" pos:column="44"/></name></expr></argument>)<pos:position pos:line="226" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="46"/></expr_stmt>
        <break pos:line="227" pos:column="9">break;<pos:position pos:line="227" pos:column="15"/></break>
      <default pos:line="228" pos:column="7">default:<pos:position pos:line="228" pos:column="15"/></default>
        <comment type="block" pos:line="229" pos:column="9">/* unknown error, fallthrough and try another address! */</comment>
        <expr_stmt><expr><call><name pos:line="230" pos:column="9">failf<pos:position pos:line="230" pos:column="14"/></name><argument_list pos:line="230" pos:column="14">(<argument><expr><name pos:line="230" pos:column="15">data<pos:position pos:line="230" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="230" pos:column="21">"Failed to connect to %s IP number %d: %d"<pos:position pos:line="230" pos:column="63"/></literal></expr></argument>,
              <argument><expr><name pos:line="231" pos:column="15">hostname<pos:position pos:line="231" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="231" pos:column="25">aliasindex<pos:position pos:line="231" pos:column="35"/></name><operator pos:line="231" pos:column="35">+<pos:position pos:line="231" pos:column="36"/></operator><literal type="number" pos:line="231" pos:column="36">1<pos:position pos:line="231" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="231" pos:column="39">error<pos:position pos:line="231" pos:column="44"/></name></expr></argument>)<pos:position pos:line="231" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="46"/></expr_stmt>
        <break pos:line="232" pos:column="9">break;<pos:position pos:line="232" pos:column="15"/></break>
      }<pos:position pos:line="233" pos:column="8"/></block></switch>
    }<pos:position pos:line="234" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="236" pos:column="5">/* The '1 == rc' comes from the waitconnect(), and not from connect().
       We can be sure of this since connect() cannot return 1. */</comment>
    <if pos:line="238" pos:column="5">if<condition pos:line="238" pos:column="7">(<expr><operator pos:line="238" pos:column="8">(<pos:position pos:line="238" pos:column="9"/></operator><literal type="number" pos:line="238" pos:column="9">1<pos:position pos:line="238" pos:column="10"/></literal> <operator pos:line="238" pos:column="11">==<pos:position pos:line="238" pos:column="13"/></operator> <name pos:line="238" pos:column="14">rc<pos:position pos:line="238" pos:column="16"/></name><operator pos:line="238" pos:column="16">)<pos:position pos:line="238" pos:column="17"/></operator> <operator pos:line="238" pos:column="18">&amp;&amp;<pos:position pos:line="238" pos:column="28"/></operator> <operator pos:line="238" pos:column="21">(<pos:position pos:line="238" pos:column="22"/></operator><name><name pos:line="238" pos:column="22">data<pos:position pos:line="238" pos:column="26"/></name><operator pos:line="238" pos:column="26">-&gt;<pos:position pos:line="238" pos:column="31"/></operator><name pos:line="238" pos:column="28">state<pos:position pos:line="238" pos:column="33"/></name><operator pos:line="238" pos:column="33">.<pos:position pos:line="238" pos:column="34"/></operator><name pos:line="238" pos:column="34">used_interface<pos:position pos:line="238" pos:column="48"/></name></name> <operator pos:line="238" pos:column="49">==<pos:position pos:line="238" pos:column="51"/></operator> <name pos:line="238" pos:column="52">Curl_if_multi<pos:position pos:line="238" pos:column="65"/></name><operator pos:line="238" pos:column="65">)<pos:position pos:line="238" pos:column="66"/></operator></expr>)<pos:position pos:line="238" pos:column="67"/></condition><then pos:line="238" pos:column="67"> <block pos:line="238" pos:column="68">{
      <comment type="block" pos:line="239" pos:column="7">/* Timeout when running the multi interface, we return here with a
         CURLE_OK return code. */</comment>
      <expr_stmt><expr><name pos:line="241" pos:column="7">rc<pos:position pos:line="241" pos:column="9"/></name> <operator pos:line="241" pos:column="10">=<pos:position pos:line="241" pos:column="11"/></operator> <literal type="number" pos:line="241" pos:column="12">0<pos:position pos:line="241" pos:column="13"/></literal></expr>;<pos:position pos:line="241" pos:column="14"/></expr_stmt>
      <break pos:line="242" pos:column="7">break;<pos:position pos:line="242" pos:column="13"/></break>
    }<pos:position pos:line="243" pos:column="6"/></block></then></if>

    <if pos:line="245" pos:column="5">if<condition pos:line="245" pos:column="7">(<expr><literal type="number" pos:line="245" pos:column="8">0<pos:position pos:line="245" pos:column="9"/></literal> <operator pos:line="245" pos:column="10">==<pos:position pos:line="245" pos:column="12"/></operator> <name pos:line="245" pos:column="13">rc<pos:position pos:line="245" pos:column="15"/></name></expr>)<pos:position pos:line="245" pos:column="16"/></condition><then pos:line="245" pos:column="16"> <block pos:line="245" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="246" pos:column="7">int<pos:position pos:line="246" pos:column="10"/></name></type> <name pos:line="246" pos:column="11">err<pos:position pos:line="246" pos:column="14"/></name> <init pos:line="246" pos:column="15">= <expr><call><name pos:line="246" pos:column="17">socketerror<pos:position pos:line="246" pos:column="28"/></name><argument_list pos:line="246" pos:column="28">(<argument><expr><name pos:line="246" pos:column="29">sockfd<pos:position pos:line="246" pos:column="35"/></name></expr></argument>)<pos:position pos:line="246" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="246" pos:column="37"/></decl_stmt>
      <if pos:line="247" pos:column="7">if <condition pos:line="247" pos:column="10">(<expr><operator pos:line="247" pos:column="11">(<pos:position pos:line="247" pos:column="12"/></operator><literal type="number" pos:line="247" pos:column="12">0<pos:position pos:line="247" pos:column="13"/></literal> <operator pos:line="247" pos:column="14">==<pos:position pos:line="247" pos:column="16"/></operator> <name pos:line="247" pos:column="17">err<pos:position pos:line="247" pos:column="20"/></name><operator pos:line="247" pos:column="20">)<pos:position pos:line="247" pos:column="21"/></operator> <operator pos:line="247" pos:column="22">||<pos:position pos:line="247" pos:column="24"/></operator> <operator pos:line="247" pos:column="25">(<pos:position pos:line="247" pos:column="26"/></operator><name pos:line="247" pos:column="26">EISCONN<pos:position pos:line="247" pos:column="33"/></name> <operator pos:line="247" pos:column="34">==<pos:position pos:line="247" pos:column="36"/></operator> <name pos:line="247" pos:column="37">err<pos:position pos:line="247" pos:column="40"/></name><operator pos:line="247" pos:column="40">)<pos:position pos:line="247" pos:column="41"/></operator></expr>)<pos:position pos:line="247" pos:column="42"/></condition><then pos:line="247" pos:column="42"> <block pos:line="247" pos:column="43">{
        <comment type="block" pos:line="248" pos:column="9">/* we are connected, awesome! */</comment>
        <expr_stmt><expr><operator pos:line="249" pos:column="9">*<pos:position pos:line="249" pos:column="10"/></operator><name pos:line="249" pos:column="10">connected<pos:position pos:line="249" pos:column="19"/></name> <operator pos:line="249" pos:column="20">=<pos:position pos:line="249" pos:column="21"/></operator> <name pos:line="249" pos:column="22">TRUE<pos:position pos:line="249" pos:column="26"/></name></expr>;<pos:position pos:line="249" pos:column="27"/></expr_stmt> <comment type="block" pos:line="249" pos:column="28">/* this is a true connect */</comment>
        <break pos:line="250" pos:column="9">break;<pos:position pos:line="250" pos:column="15"/></break>
      }<pos:position pos:line="251" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="252" pos:column="7">/* nope, not connected for real */</comment>
      <expr_stmt><expr><name pos:line="253" pos:column="7">rc<pos:position pos:line="253" pos:column="9"/></name> <operator pos:line="253" pos:column="10">=<pos:position pos:line="253" pos:column="11"/></operator> <operator pos:line="253" pos:column="12">-<pos:position pos:line="253" pos:column="13"/></operator><literal type="number" pos:line="253" pos:column="13">1<pos:position pos:line="253" pos:column="14"/></literal></expr>;<pos:position pos:line="253" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="254" pos:column="6"/></block></then></if>

    <if pos:line="256" pos:column="5">if<condition pos:line="256" pos:column="7">(<expr><literal type="number" pos:line="256" pos:column="8">0<pos:position pos:line="256" pos:column="9"/></literal> <operator pos:line="256" pos:column="10">!=<pos:position pos:line="256" pos:column="12"/></operator> <name pos:line="256" pos:column="13">rc<pos:position pos:line="256" pos:column="15"/></name></expr>)<pos:position pos:line="256" pos:column="16"/></condition><then pos:line="256" pos:column="16"> <block pos:line="256" pos:column="17">{
      <comment type="block" pos:line="257" pos:column="7">/* get a new timeout for next attempt */</comment>
      <expr_stmt><expr><name pos:line="258" pos:column="7">after<pos:position pos:line="258" pos:column="12"/></name> <operator pos:line="258" pos:column="13">=<pos:position pos:line="258" pos:column="14"/></operator> <call><name pos:line="258" pos:column="15">Curl_tvnow<pos:position pos:line="258" pos:column="25"/></name><argument_list pos:line="258" pos:column="25">()<pos:position pos:line="258" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="259" pos:column="7">timeout_ms<pos:position pos:line="259" pos:column="17"/></name> <operator pos:line="259" pos:column="18">-=<pos:position pos:line="259" pos:column="20"/></operator> <call><name pos:line="259" pos:column="21">Curl_tvdiff<pos:position pos:line="259" pos:column="32"/></name><argument_list pos:line="259" pos:column="32">(<argument><expr><name pos:line="259" pos:column="33">after<pos:position pos:line="259" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="259" pos:column="40">before<pos:position pos:line="259" pos:column="46"/></name></expr></argument>)<pos:position pos:line="259" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="48"/></expr_stmt>
      <if pos:line="260" pos:column="7">if<condition pos:line="260" pos:column="9">(<expr><name pos:line="260" pos:column="10">timeout_ms<pos:position pos:line="260" pos:column="20"/></name> <operator pos:line="260" pos:column="21">&lt;<pos:position pos:line="260" pos:column="25"/></operator> <literal type="number" pos:line="260" pos:column="23">0<pos:position pos:line="260" pos:column="24"/></literal></expr>)<pos:position pos:line="260" pos:column="25"/></condition><then pos:line="260" pos:column="25"> <block pos:line="260" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="261" pos:column="9">failf<pos:position pos:line="261" pos:column="14"/></name><argument_list pos:line="261" pos:column="14">(<argument><expr><name pos:line="261" pos:column="15">data<pos:position pos:line="261" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="261" pos:column="21">"Connect timeout on IP number %d"<pos:position pos:line="261" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="261" pos:column="56">aliasindex<pos:position pos:line="261" pos:column="66"/></name><operator pos:line="261" pos:column="66">+<pos:position pos:line="261" pos:column="67"/></operator><literal type="number" pos:line="261" pos:column="67">1<pos:position pos:line="261" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="261" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="70"/></expr_stmt>
        <break pos:line="262" pos:column="9">break;<pos:position pos:line="262" pos:column="15"/></break>
      }<pos:position pos:line="263" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="264" pos:column="7">before<pos:position pos:line="264" pos:column="13"/></name> <operator pos:line="264" pos:column="14">=<pos:position pos:line="264" pos:column="15"/></operator> <name pos:line="264" pos:column="16">after<pos:position pos:line="264" pos:column="21"/></name></expr>;<pos:position pos:line="264" pos:column="22"/></expr_stmt>
      <continue pos:line="265" pos:column="7">continue;<pos:position pos:line="265" pos:column="16"/></continue> <comment type="block" pos:line="265" pos:column="17">/* try next address */</comment>
    }<pos:position pos:line="266" pos:column="6"/></block></then></if>
    <break pos:line="267" pos:column="5">break;<pos:position pos:line="267" pos:column="11"/></break>
  }<pos:position pos:line="268" pos:column="4"/></block></for>
  <if pos:line="269" pos:column="3">if<condition pos:line="269" pos:column="5">(<expr><literal type="number" pos:line="269" pos:column="6">0<pos:position pos:line="269" pos:column="7"/></literal> <operator pos:line="269" pos:column="8">!=<pos:position pos:line="269" pos:column="10"/></operator> <name pos:line="269" pos:column="11">rc<pos:position pos:line="269" pos:column="13"/></name></expr>)<pos:position pos:line="269" pos:column="14"/></condition><then pos:line="269" pos:column="14"> <block pos:line="269" pos:column="15">{
    <comment type="block" pos:line="270" pos:column="5">/* no good connect was made */</comment>
    <expr_stmt><expr><call><name pos:line="271" pos:column="5">sclose<pos:position pos:line="271" pos:column="11"/></name><argument_list pos:line="271" pos:column="11">(<argument><expr><name pos:line="271" pos:column="12">sockfd<pos:position pos:line="271" pos:column="18"/></name></expr></argument>)<pos:position pos:line="271" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="272" pos:column="5">*<pos:position pos:line="272" pos:column="6"/></operator><name pos:line="272" pos:column="6">sockconn<pos:position pos:line="272" pos:column="14"/></name> <operator pos:line="272" pos:column="15">=<pos:position pos:line="272" pos:column="16"/></operator> <operator pos:line="272" pos:column="17">-<pos:position pos:line="272" pos:column="18"/></operator><literal type="number" pos:line="272" pos:column="18">1<pos:position pos:line="272" pos:column="19"/></literal></expr>;<pos:position pos:line="272" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="273" pos:column="5">failf<pos:position pos:line="273" pos:column="10"/></name><argument_list pos:line="273" pos:column="10">(<argument><expr><name pos:line="273" pos:column="11">data<pos:position pos:line="273" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="273" pos:column="17">"Connect failed"<pos:position pos:line="273" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="273" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="35"/></expr_stmt>
    <return pos:line="274" pos:column="5">return <expr><name pos:line="274" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="274" pos:column="33"/></name></expr>;<pos:position pos:line="274" pos:column="34"/></return>
  }<pos:position pos:line="275" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="277" pos:column="3">/* leave the socket in non-blocking mode */</comment>

  <if pos:line="279" pos:column="3">if<condition pos:line="279" pos:column="5">(<expr><name pos:line="279" pos:column="6">addr<pos:position pos:line="279" pos:column="10"/></name></expr>)<pos:position pos:line="279" pos:column="11"/></condition><then pos:line="279" pos:column="11">
    <comment type="block" pos:line="280" pos:column="5">/* this is the address we've connected to */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="281" pos:column="5">*<pos:position pos:line="281" pos:column="6"/></operator><name pos:line="281" pos:column="6">addr<pos:position pos:line="281" pos:column="10"/></name> <operator pos:line="281" pos:column="11">=<pos:position pos:line="281" pos:column="12"/></operator> <operator pos:line="281" pos:column="13">(<pos:position pos:line="281" pos:column="14"/></operator>struct <name pos:line="281" pos:column="21">in_addr<pos:position pos:line="281" pos:column="28"/></name> <operator pos:line="281" pos:column="29">*<pos:position pos:line="281" pos:column="30"/></operator><operator pos:line="281" pos:column="30">)<pos:position pos:line="281" pos:column="31"/></operator><name><name pos:line="281" pos:column="31">remotehost<pos:position pos:line="281" pos:column="41"/></name><operator pos:line="281" pos:column="41">-&gt;<pos:position pos:line="281" pos:column="46"/></operator><name pos:line="281" pos:column="43">addr<pos:position pos:line="281" pos:column="47"/></name><operator pos:line="281" pos:column="47">-&gt;<pos:position pos:line="281" pos:column="52"/></operator><name pos:line="281" pos:column="49">h_addr_list<pos:position pos:line="281" pos:column="60"/></name><index pos:line="281" pos:column="60">[<expr><name pos:line="281" pos:column="61">aliasindex<pos:position pos:line="281" pos:column="71"/></name></expr>]<pos:position pos:line="281" pos:column="72"/></index></name></expr>;<pos:position pos:line="281" pos:column="73"/></expr_stmt></block></then></if>
<cpp:endif pos:line="282" pos:column="1">#<cpp:directive pos:line="282" pos:column="2">endif<pos:position pos:line="282" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="284" pos:column="3">/* allow NULL-pointers to get passed in */</comment>
  <if pos:line="285" pos:column="3">if<condition pos:line="285" pos:column="5">(<expr><name pos:line="285" pos:column="6">sockconn<pos:position pos:line="285" pos:column="14"/></name></expr>)<pos:position pos:line="285" pos:column="15"/></condition><then pos:line="285" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="286" pos:column="5">*<pos:position pos:line="286" pos:column="6"/></operator><name pos:line="286" pos:column="6">sockconn<pos:position pos:line="286" pos:column="14"/></name> <operator pos:line="286" pos:column="15">=<pos:position pos:line="286" pos:column="16"/></operator> <name pos:line="286" pos:column="17">sockfd<pos:position pos:line="286" pos:column="23"/></name></expr>;<pos:position pos:line="286" pos:column="24"/></expr_stmt></block></then></if>    <comment type="block" pos:line="286" pos:column="28">/* the socket descriptor we've connected */</comment>

  <return pos:line="288" pos:column="3">return <expr><name pos:line="288" pos:column="10">CURLE_OK<pos:position pos:line="288" pos:column="18"/></name></expr>;<pos:position pos:line="288" pos:column="19"/></return>
}<pos:position pos:line="289" pos:column="2"/></block></function></unit>
