<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_37.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">UrgSSLConnect<pos:position pos:line="2" pos:column="14"/></name> <parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name><name pos:line="2" pos:column="16">struct<pos:position pos:line="2" pos:column="22"/></name> <name pos:line="2" pos:column="23">UrlData<pos:position pos:line="2" pos:column="30"/></name></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">data<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">USE_SSLEAY<pos:position pos:line="4" pos:column="18"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">err<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type> <name pos:line="6" pos:column="12">str<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">SSL_METHOD<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">req_method<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* mark this is being ssl enabled from here on out. */</comment>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">data<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">use_ssl<pos:position pos:line="10" pos:column="18"/></name></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <literal type="number" pos:line="10" pos:column="21">1<pos:position pos:line="10" pos:column="22"/></literal></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Lets get nice error messages */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">SSL_load_error_strings<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">()<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">HAVE_RAND_STATUS<pos:position pos:line="15" pos:column="24"/></name></cpp:ifdef>
    <comment type="block" pos:line="16" pos:column="5">/* RAND_status() was introduced in OpenSSL 0.9.5 */</comment>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><literal type="number" pos:line="17" pos:column="8">0<pos:position pos:line="17" pos:column="9"/></literal> <operator pos:line="17" pos:column="10">==<pos:position pos:line="17" pos:column="12"/></operator> <call><name pos:line="17" pos:column="13">RAND_status<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">()<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27">
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="19" pos:column="5">{
      <comment type="block" pos:line="20" pos:column="7">/* We need to seed the PRNG properly! */</comment>
<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">HAVE_RAND_SCREEN<pos:position pos:line="21" pos:column="24"/></name></cpp:ifdef>
      <comment type="block" pos:line="22" pos:column="7">/* This one gets a random value by reading the currently shown screen */</comment>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">RAND_screen<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">()<pos:position pos:line="23" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>
<cpp:else pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">else<pos:position pos:line="24" pos:column="6"/></cpp:directive></cpp:else>
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">int<pos:position pos:line="25" pos:column="10"/></name></type> <name pos:line="25" pos:column="11">len<pos:position pos:line="25" pos:column="14"/></name></decl>;<pos:position pos:line="25" pos:column="15"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">char<pos:position pos:line="26" pos:column="11"/></name> <modifier pos:line="26" pos:column="12">*<pos:position pos:line="26" pos:column="13"/></modifier></type><name pos:line="26" pos:column="13">area<pos:position pos:line="26" pos:column="17"/></name> <init pos:line="26" pos:column="18">= <expr><call><name pos:line="26" pos:column="20">MakeFormBoundary<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">()<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="39"/></decl_stmt>
      <if pos:line="27" pos:column="7">if<condition pos:line="27" pos:column="9">(<expr><operator pos:line="27" pos:column="10">!<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">area<pos:position pos:line="27" pos:column="15"/></name></expr>)<pos:position pos:line="27" pos:column="16"/></condition><then pos:line="27" pos:column="16">
	<block type="pseudo"><return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">3<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return></block></then></if> <comment type="block" pos:line="28" pos:column="19">/* out of memory */</comment>
	
      <expr_stmt><expr><name pos:line="30" pos:column="7">len<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <call><name pos:line="30" pos:column="13">strlen<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">area<pos:position pos:line="30" pos:column="24"/></name></expr></argument>)<pos:position pos:line="30" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="32" pos:column="7">RAND_seed<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">area<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="23">len<pos:position pos:line="32" pos:column="26"/></name></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="34" pos:column="7">free<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><name pos:line="34" pos:column="12">area<pos:position pos:line="34" pos:column="16"/></name></expr></argument>)<pos:position pos:line="34" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="18"/></expr_stmt> <comment type="block" pos:line="34" pos:column="19">/* now remove the random junk */</comment>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    
    <comment type="block" pos:line="38" pos:column="5">/* Setup all the global SSL stuff */</comment>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">SSLeay_add_ssl_algorithms<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">()<pos:position pos:line="39" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt>

    <switch pos:line="41" pos:column="5">switch<condition pos:line="41" pos:column="11">(<expr><name><name pos:line="41" pos:column="12">data<pos:position pos:line="41" pos:column="16"/></name><operator pos:line="41" pos:column="16">-&gt;<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="18">ssl_version<pos:position pos:line="41" pos:column="29"/></name></name></expr>)<pos:position pos:line="41" pos:column="30"/></condition> <block pos:line="41" pos:column="31">{
    <default pos:line="42" pos:column="5">default:<pos:position pos:line="42" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="43" pos:column="7">req_method<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <call><name pos:line="43" pos:column="20">SSLv23_client_method<pos:position pos:line="43" pos:column="40"/></name><argument_list pos:line="43" pos:column="40">()<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
      <break pos:line="44" pos:column="7">break;<pos:position pos:line="44" pos:column="13"/></break>
    <case pos:line="45" pos:column="5">case <expr><literal type="number" pos:line="45" pos:column="10">2<pos:position pos:line="45" pos:column="11"/></literal></expr>:<pos:position pos:line="45" pos:column="12"/></case>
      <expr_stmt><expr><name pos:line="46" pos:column="7">req_method<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <call><name pos:line="46" pos:column="20">SSLv2_client_method<pos:position pos:line="46" pos:column="39"/></name><argument_list pos:line="46" pos:column="39">()<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    <case pos:line="48" pos:column="5">case <expr><literal type="number" pos:line="48" pos:column="10">3<pos:position pos:line="48" pos:column="11"/></literal></expr>:<pos:position pos:line="48" pos:column="12"/></case>
      <expr_stmt><expr><name pos:line="49" pos:column="7">req_method<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <call><name pos:line="49" pos:column="20">SSLv3_client_method<pos:position pos:line="49" pos:column="39"/></name><argument_list pos:line="49" pos:column="39">()<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
      <break pos:line="50" pos:column="7">break;<pos:position pos:line="50" pos:column="13"/></break>
    }<pos:position pos:line="51" pos:column="6"/></block></switch>
    
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">data<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">-&gt;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="11">ctx<pos:position pos:line="53" pos:column="14"/></name></name> <operator pos:line="53" pos:column="15">=<pos:position pos:line="53" pos:column="16"/></operator> <call><name pos:line="53" pos:column="17">SSL_CTX_new<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">req_method<pos:position pos:line="53" pos:column="39"/></name></expr></argument>)<pos:position pos:line="53" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="41"/></expr_stmt>

    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><operator pos:line="55" pos:column="8">!<pos:position pos:line="55" pos:column="9"/></operator><name><name pos:line="55" pos:column="9">data<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">-&gt;<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="15">ctx<pos:position pos:line="55" pos:column="18"/></name></name></expr>)<pos:position pos:line="55" pos:column="19"/></condition><then pos:line="55" pos:column="19"> <block pos:line="55" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">failf<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">data<pos:position pos:line="56" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="19">"SSL: couldn't create a context!"<pos:position pos:line="56" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>
      <return pos:line="57" pos:column="7">return <expr><literal type="number" pos:line="57" pos:column="14">1<pos:position pos:line="57" pos:column="15"/></literal></expr>;<pos:position pos:line="57" pos:column="16"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>
    
    <if pos:line="60" pos:column="5">if<condition pos:line="60" pos:column="7">(<expr><name><name pos:line="60" pos:column="8">data<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">-&gt;<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="14">cert<pos:position pos:line="60" pos:column="18"/></name></name></expr>)<pos:position pos:line="60" pos:column="19"/></condition><then pos:line="60" pos:column="19"> <block pos:line="60" pos:column="20">{
      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><operator pos:line="61" pos:column="11">!<pos:position pos:line="61" pos:column="12"/></operator><call><name pos:line="61" pos:column="12">SSL_cert_stuff<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><name pos:line="61" pos:column="27">data<pos:position pos:line="61" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="33">data<pos:position pos:line="61" pos:column="37"/></name><operator pos:line="61" pos:column="37">-&gt;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="39">cert<pos:position pos:line="61" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="45">data<pos:position pos:line="61" pos:column="49"/></name><operator pos:line="61" pos:column="49">-&gt;<pos:position pos:line="61" pos:column="54"/></operator><name pos:line="61" pos:column="51">cert<pos:position pos:line="61" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="57"/></condition><then pos:line="61" pos:column="57"> <block pos:line="61" pos:column="58">{
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">failf<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><name pos:line="62" pos:column="15">data<pos:position pos:line="62" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="21">"couldn't use certificate!\n"<pos:position pos:line="62" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="52"/></expr_stmt>
	<return pos:line="63" pos:column="9">return <expr><literal type="number" pos:line="63" pos:column="16">2<pos:position pos:line="63" pos:column="17"/></literal></expr>;<pos:position pos:line="63" pos:column="18"/></return>
      }<pos:position pos:line="64" pos:column="8"/></block></then></if>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

<cpp:if pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">if<pos:position pos:line="67" pos:column="4"/></cpp:directive> <expr><name pos:line="67" pos:column="5">SSL_VERIFY_CERT<pos:position pos:line="67" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">SSL_CTX_set_verify<pos:position pos:line="68" pos:column="23"/></name><argument_list pos:line="68" pos:column="23">(<argument><expr><name><name pos:line="68" pos:column="24">data<pos:position pos:line="68" pos:column="28"/></name><operator pos:line="68" pos:column="28">-&gt;<pos:position pos:line="68" pos:column="33"/></operator><name pos:line="68" pos:column="30">ctx<pos:position pos:line="68" pos:column="33"/></name></name></expr></argument>,
                       <argument><expr><name pos:line="69" pos:column="24">SSL_VERIFY_PEER<pos:position pos:line="69" pos:column="39"/></name><operator pos:line="69" pos:column="39">|<pos:position pos:line="69" pos:column="40"/></operator><name pos:line="69" pos:column="40">SSL_VERIFY_FAIL_IF_NO_PEER_CERT<pos:position pos:line="69" pos:column="71"/></name><operator pos:line="69" pos:column="71">|<pos:position pos:line="69" pos:column="72"/></operator>
                       <name pos:line="70" pos:column="24">SSL_VERIFY_CLIENT_ONCE<pos:position pos:line="70" pos:column="46"/></name></expr></argument>,
                       <argument><expr><name pos:line="71" pos:column="24">cert_verify_callback<pos:position pos:line="71" pos:column="44"/></name></expr></argument>)<pos:position pos:line="71" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">endif<pos:position pos:line="72" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="74" pos:column="5">/* Lets make an SSL structure */</comment>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">data<pos:position pos:line="75" pos:column="9"/></name><operator pos:line="75" pos:column="9">-&gt;<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="11">ssl<pos:position pos:line="75" pos:column="14"/></name></name> <operator pos:line="75" pos:column="15">=<pos:position pos:line="75" pos:column="16"/></operator> <call><name pos:line="75" pos:column="17">SSL_new<pos:position pos:line="75" pos:column="24"/></name> <argument_list pos:line="75" pos:column="25">(<argument><expr><name><name pos:line="75" pos:column="26">data<pos:position pos:line="75" pos:column="30"/></name><operator pos:line="75" pos:column="30">-&gt;<pos:position pos:line="75" pos:column="35"/></operator><name pos:line="75" pos:column="32">ctx<pos:position pos:line="75" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">SSL_set_connect_state<pos:position pos:line="76" pos:column="26"/></name> <argument_list pos:line="76" pos:column="27">(<argument><expr><name><name pos:line="76" pos:column="28">data<pos:position pos:line="76" pos:column="32"/></name><operator pos:line="76" pos:column="32">-&gt;<pos:position pos:line="76" pos:column="37"/></operator><name pos:line="76" pos:column="34">ssl<pos:position pos:line="76" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="78" pos:column="5">data<pos:position pos:line="78" pos:column="9"/></name><operator pos:line="78" pos:column="9">-&gt;<pos:position pos:line="78" pos:column="14"/></operator><name pos:line="78" pos:column="11">server_cert<pos:position pos:line="78" pos:column="22"/></name></name> <operator pos:line="78" pos:column="23">=<pos:position pos:line="78" pos:column="24"/></operator> <literal type="number" pos:line="78" pos:column="25">0x0<pos:position pos:line="78" pos:column="28"/></literal></expr>;<pos:position pos:line="78" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="80" pos:column="5">/* pass the raw socket into the SSL layers */</comment>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">SSL_set_fd<pos:position pos:line="81" pos:column="15"/></name> <argument_list pos:line="81" pos:column="16">(<argument><expr><name><name pos:line="81" pos:column="17">data<pos:position pos:line="81" pos:column="21"/></name><operator pos:line="81" pos:column="21">-&gt;<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="23">ssl<pos:position pos:line="81" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="28">data<pos:position pos:line="81" pos:column="32"/></name><operator pos:line="81" pos:column="32">-&gt;<pos:position pos:line="81" pos:column="37"/></operator><name pos:line="81" pos:column="34">firstsocket<pos:position pos:line="81" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name pos:line="82" pos:column="5">err<pos:position pos:line="82" pos:column="8"/></name> <operator pos:line="82" pos:column="9">=<pos:position pos:line="82" pos:column="10"/></operator> <call><name pos:line="82" pos:column="11">SSL_connect<pos:position pos:line="82" pos:column="22"/></name> <argument_list pos:line="82" pos:column="23">(<argument><expr><name><name pos:line="82" pos:column="24">data<pos:position pos:line="82" pos:column="28"/></name><operator pos:line="82" pos:column="28">-&gt;<pos:position pos:line="82" pos:column="33"/></operator><name pos:line="82" pos:column="30">ssl<pos:position pos:line="82" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="35"/></expr_stmt>

    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><operator pos:line="84" pos:column="9">-<pos:position pos:line="84" pos:column="10"/></operator><literal type="number" pos:line="84" pos:column="10">1<pos:position pos:line="84" pos:column="11"/></literal> <operator pos:line="84" pos:column="12">==<pos:position pos:line="84" pos:column="14"/></operator> <name pos:line="84" pos:column="15">err<pos:position pos:line="84" pos:column="18"/></name></expr>)<pos:position pos:line="84" pos:column="19"/></condition><then pos:line="84" pos:column="19"> <block pos:line="84" pos:column="20">{
      <expr_stmt><expr><name pos:line="85" pos:column="7">err<pos:position pos:line="85" pos:column="10"/></name> <operator pos:line="85" pos:column="11">=<pos:position pos:line="85" pos:column="12"/></operator> <call><name pos:line="85" pos:column="13">ERR_get_error<pos:position pos:line="85" pos:column="26"/></name><argument_list pos:line="85" pos:column="26">()<pos:position pos:line="85" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="29"/></expr_stmt> 
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">failf<pos:position pos:line="86" pos:column="12"/></name><argument_list pos:line="86" pos:column="12">(<argument><expr><name pos:line="86" pos:column="13">data<pos:position pos:line="86" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="19">"SSL: %s"<pos:position pos:line="86" pos:column="28"/></literal></expr></argument>, <argument><expr><call><name pos:line="86" pos:column="30">ERR_error_string<pos:position pos:line="86" pos:column="46"/></name><argument_list pos:line="86" pos:column="46">(<argument><expr><name pos:line="86" pos:column="47">err<pos:position pos:line="86" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="52">NULL<pos:position pos:line="86" pos:column="56"/></name></expr></argument>)<pos:position pos:line="86" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="59"/></expr_stmt>
      <return pos:line="87" pos:column="7">return <expr><literal type="number" pos:line="87" pos:column="14">10<pos:position pos:line="87" pos:column="16"/></literal></expr>;<pos:position pos:line="87" pos:column="17"/></return>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>


    <expr_stmt><expr><call><name pos:line="91" pos:column="5">infof<pos:position pos:line="91" pos:column="10"/></name> <argument_list pos:line="91" pos:column="11">(<argument><expr><name pos:line="91" pos:column="12">data<pos:position pos:line="91" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="18">"SSL connection using %s\n"<pos:position pos:line="91" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="91" pos:column="47">SSL_get_cipher<pos:position pos:line="91" pos:column="61"/></name> <argument_list pos:line="91" pos:column="62">(<argument><expr><name><name pos:line="91" pos:column="63">data<pos:position pos:line="91" pos:column="67"/></name><operator pos:line="91" pos:column="67">-&gt;<pos:position pos:line="91" pos:column="72"/></operator><name pos:line="91" pos:column="69">ssl<pos:position pos:line="91" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="75"/></expr_stmt>
  
    <comment type="block" pos:line="93" pos:column="5">/* Get server's certificate (note: beware of dynamic allocation) - opt */</comment>
    <comment type="block" pos:line="94" pos:column="5">/* major serious hack alert -- we should check certificates
     * to authenticate the server; otherwise we risk man-in-the-middle
     * attack
     */</comment>

    <expr_stmt><expr><name><name pos:line="99" pos:column="5">data<pos:position pos:line="99" pos:column="9"/></name><operator pos:line="99" pos:column="9">-&gt;<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="11">server_cert<pos:position pos:line="99" pos:column="22"/></name></name> <operator pos:line="99" pos:column="23">=<pos:position pos:line="99" pos:column="24"/></operator> <call><name pos:line="99" pos:column="25">SSL_get_peer_certificate<pos:position pos:line="99" pos:column="49"/></name> <argument_list pos:line="99" pos:column="50">(<argument><expr><name><name pos:line="99" pos:column="51">data<pos:position pos:line="99" pos:column="55"/></name><operator pos:line="99" pos:column="55">-&gt;<pos:position pos:line="99" pos:column="60"/></operator><name pos:line="99" pos:column="57">ssl<pos:position pos:line="99" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="62"/></expr_stmt>
    <if pos:line="100" pos:column="5">if<condition pos:line="100" pos:column="7">(<expr><operator pos:line="100" pos:column="8">!<pos:position pos:line="100" pos:column="9"/></operator><name><name pos:line="100" pos:column="9">data<pos:position pos:line="100" pos:column="13"/></name><operator pos:line="100" pos:column="13">-&gt;<pos:position pos:line="100" pos:column="18"/></operator><name pos:line="100" pos:column="15">server_cert<pos:position pos:line="100" pos:column="26"/></name></name></expr>)<pos:position pos:line="100" pos:column="27"/></condition><then pos:line="100" pos:column="27"> <block pos:line="100" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="101" pos:column="7">failf<pos:position pos:line="101" pos:column="12"/></name><argument_list pos:line="101" pos:column="12">(<argument><expr><name pos:line="101" pos:column="13">data<pos:position pos:line="101" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="19">"SSL: couldn't get peer certificate!"<pos:position pos:line="101" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="58"/></expr_stmt>
      <return pos:line="102" pos:column="7">return <expr><literal type="number" pos:line="102" pos:column="14">3<pos:position pos:line="102" pos:column="15"/></literal></expr>;<pos:position pos:line="102" pos:column="16"/></return>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">infof<pos:position pos:line="104" pos:column="10"/></name> <argument_list pos:line="104" pos:column="11">(<argument><expr><name pos:line="104" pos:column="12">data<pos:position pos:line="104" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="18">"Server certificate:\n"<pos:position pos:line="104" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="43"/></expr_stmt>
  
    <expr_stmt><expr><name pos:line="106" pos:column="5">str<pos:position pos:line="106" pos:column="8"/></name> <operator pos:line="106" pos:column="9">=<pos:position pos:line="106" pos:column="10"/></operator> <call><name pos:line="106" pos:column="11">X509_NAME_oneline<pos:position pos:line="106" pos:column="28"/></name> <argument_list pos:line="106" pos:column="29">(<argument><expr><call><name pos:line="106" pos:column="30">X509_get_subject_name<pos:position pos:line="106" pos:column="51"/></name> <argument_list pos:line="106" pos:column="52">(<argument><expr><name><name pos:line="106" pos:column="53">data<pos:position pos:line="106" pos:column="57"/></name><operator pos:line="106" pos:column="57">-&gt;<pos:position pos:line="106" pos:column="62"/></operator><name pos:line="106" pos:column="59">server_cert<pos:position pos:line="106" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="106" pos:column="73">NULL<pos:position pos:line="106" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="79">0<pos:position pos:line="106" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="82"/></expr_stmt>
    <if pos:line="107" pos:column="5">if<condition pos:line="107" pos:column="7">(<expr><operator pos:line="107" pos:column="8">!<pos:position pos:line="107" pos:column="9"/></operator><name pos:line="107" pos:column="9">str<pos:position pos:line="107" pos:column="12"/></name></expr>)<pos:position pos:line="107" pos:column="13"/></condition><then pos:line="107" pos:column="13"> <block pos:line="107" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="108" pos:column="7">failf<pos:position pos:line="108" pos:column="12"/></name><argument_list pos:line="108" pos:column="12">(<argument><expr><name pos:line="108" pos:column="13">data<pos:position pos:line="108" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="19">"SSL: couldn't get X509-subject!"<pos:position pos:line="108" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="54"/></expr_stmt>
      <return pos:line="109" pos:column="7">return <expr><literal type="number" pos:line="109" pos:column="14">4<pos:position pos:line="109" pos:column="15"/></literal></expr>;<pos:position pos:line="109" pos:column="16"/></return>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="111" pos:column="5">infof<pos:position pos:line="111" pos:column="10"/></name> <argument_list pos:line="111" pos:column="11">(<argument><expr><name pos:line="111" pos:column="12">data<pos:position pos:line="111" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="18">"\t subject: %s\n"<pos:position pos:line="111" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="38">str<pos:position pos:line="111" pos:column="41"/></name></expr></argument>)<pos:position pos:line="111" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">Free<pos:position pos:line="112" pos:column="9"/></name> <argument_list pos:line="112" pos:column="10">(<argument><expr><name pos:line="112" pos:column="11">str<pos:position pos:line="112" pos:column="14"/></name></expr></argument>)<pos:position pos:line="112" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><name pos:line="114" pos:column="5">str<pos:position pos:line="114" pos:column="8"/></name> <operator pos:line="114" pos:column="9">=<pos:position pos:line="114" pos:column="10"/></operator> <call><name pos:line="114" pos:column="11">X509_NAME_oneline<pos:position pos:line="114" pos:column="28"/></name> <argument_list pos:line="114" pos:column="29">(<argument><expr><call><name pos:line="114" pos:column="30">X509_get_issuer_name<pos:position pos:line="114" pos:column="50"/></name>  <argument_list pos:line="114" pos:column="52">(<argument><expr><name><name pos:line="114" pos:column="53">data<pos:position pos:line="114" pos:column="57"/></name><operator pos:line="114" pos:column="57">-&gt;<pos:position pos:line="114" pos:column="62"/></operator><name pos:line="114" pos:column="59">server_cert<pos:position pos:line="114" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="114" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="114" pos:column="73">NULL<pos:position pos:line="114" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="114" pos:column="79">0<pos:position pos:line="114" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="82"/></expr_stmt>
    <if pos:line="115" pos:column="5">if<condition pos:line="115" pos:column="7">(<expr><operator pos:line="115" pos:column="8">!<pos:position pos:line="115" pos:column="9"/></operator><name pos:line="115" pos:column="9">str<pos:position pos:line="115" pos:column="12"/></name></expr>)<pos:position pos:line="115" pos:column="13"/></condition><then pos:line="115" pos:column="13"> <block pos:line="115" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="116" pos:column="7">failf<pos:position pos:line="116" pos:column="12"/></name><argument_list pos:line="116" pos:column="12">(<argument><expr><name pos:line="116" pos:column="13">data<pos:position pos:line="116" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="19">"SSL: couldn't get X509-issuer name!"<pos:position pos:line="116" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="58"/></expr_stmt>
      <return pos:line="117" pos:column="7">return <expr><literal type="number" pos:line="117" pos:column="14">5<pos:position pos:line="117" pos:column="15"/></literal></expr>;<pos:position pos:line="117" pos:column="16"/></return>
    }<pos:position pos:line="118" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">infof<pos:position pos:line="119" pos:column="10"/></name> <argument_list pos:line="119" pos:column="11">(<argument><expr><name pos:line="119" pos:column="12">data<pos:position pos:line="119" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="18">"\t issuer: %s\n"<pos:position pos:line="119" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="37">str<pos:position pos:line="119" pos:column="40"/></name></expr></argument>)<pos:position pos:line="119" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">Free<pos:position pos:line="120" pos:column="9"/></name> <argument_list pos:line="120" pos:column="10">(<argument><expr><name pos:line="120" pos:column="11">str<pos:position pos:line="120" pos:column="14"/></name></expr></argument>)<pos:position pos:line="120" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="16"/></expr_stmt>

    <comment type="block" pos:line="122" pos:column="5">/* We could do all sorts of certificate verification stuff here before
       deallocating the certificate. */</comment>


<cpp:if pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">if<pos:position pos:line="126" pos:column="4"/></cpp:directive> <expr><name pos:line="126" pos:column="5">SSL_VERIFY_CERT<pos:position pos:line="126" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="127" pos:column="5">infof<pos:position pos:line="127" pos:column="10"/></name><argument_list pos:line="127" pos:column="10">(<argument><expr><name pos:line="127" pos:column="11">data<pos:position pos:line="127" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="17">"Verify result: %d\n"<pos:position pos:line="127" pos:column="38"/></literal></expr></argument>, <argument><expr><call><name pos:line="127" pos:column="40">SSL_get_verify_result<pos:position pos:line="127" pos:column="61"/></name><argument_list pos:line="127" pos:column="61">(<argument><expr><name><name pos:line="127" pos:column="62">data<pos:position pos:line="127" pos:column="66"/></name><operator pos:line="127" pos:column="66">-&gt;<pos:position pos:line="127" pos:column="71"/></operator><name pos:line="127" pos:column="68">ssl<pos:position pos:line="127" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="127" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="74"/></expr_stmt>
<cpp:endif pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">endif<pos:position pos:line="128" pos:column="7"/></cpp:directive></cpp:endif>



    <expr_stmt><expr><call><name pos:line="132" pos:column="5">X509_free<pos:position pos:line="132" pos:column="14"/></name> <argument_list pos:line="132" pos:column="15">(<argument><expr><name><name pos:line="132" pos:column="16">data<pos:position pos:line="132" pos:column="20"/></name><operator pos:line="132" pos:column="20">-&gt;<pos:position pos:line="132" pos:column="25"/></operator><name pos:line="132" pos:column="22">server_cert<pos:position pos:line="132" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="35"/></expr_stmt>
<cpp:else pos:line="133" pos:column="1">#<cpp:directive pos:line="133" pos:column="2">else<pos:position pos:line="133" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="133" pos:column="7">/* USE_SSLEAY */</comment>
    <comment type="block" pos:line="134" pos:column="5">/* this is for "-ansi -Wall -pedantic" to stop complaining!   (rabe) */</comment>
    <expr_stmt><expr><operator pos:line="135" pos:column="5">(<pos:position pos:line="135" pos:column="6"/></operator><name pos:line="135" pos:column="6">void<pos:position pos:line="135" pos:column="10"/></name><operator pos:line="135" pos:column="10">)<pos:position pos:line="135" pos:column="11"/></operator> <name pos:line="135" pos:column="12">data<pos:position pos:line="135" pos:column="16"/></name></expr>;<pos:position pos:line="135" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">endif<pos:position pos:line="136" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="137" pos:column="5">return <expr><literal type="number" pos:line="137" pos:column="12">0<pos:position pos:line="137" pos:column="13"/></literal></expr>;<pos:position pos:line="137" pos:column="14"/></return>
}<pos:position pos:line="138" pos:column="2"/></block></function></unit>
