<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1821_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">OID2str<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">beg<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">end<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">bool<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">symbolic<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">buf<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><operator pos:line="3" pos:column="15">(<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name> <operator pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></operator><operator pos:line="3" pos:column="22">)<pos:position pos:line="3" pos:column="23"/></operator> <name pos:line="3" pos:column="24">NULL<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">curl_OID<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type> <name pos:line="4" pos:column="20">op<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">n<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* Convert an ASN.1 OID into its dotted or symbolic string representation.
     Return the dynamically allocated string, or NULL if an error occurs. */</comment>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">beg<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">&lt;<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="12">end<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16"> <block pos:line="10" pos:column="17">{
    <expr_stmt><expr><name pos:line="11" pos:column="5">n<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">encodeOID<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><operator pos:line="11" pos:column="19">(<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">char<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></operator><operator pos:line="11" pos:column="26">)<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="28">NULL<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="34">-<pos:position pos:line="11" pos:column="35"/></operator><literal type="number" pos:line="11" pos:column="35">1<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">beg<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">end<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt>
    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><name pos:line="12" pos:column="8">n<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">&gt;=<pos:position pos:line="12" pos:column="15"/></operator> <literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal></expr>)<pos:position pos:line="12" pos:column="15"/></condition><then pos:line="12" pos:column="15"> <block pos:line="12" pos:column="16">{
      <expr_stmt><expr><name pos:line="13" pos:column="7">buf<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">malloc<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">n<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">+<pos:position pos:line="13" pos:column="23"/></operator> <literal type="number" pos:line="13" pos:column="24">1<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
      <if pos:line="14" pos:column="7">if<condition pos:line="14" pos:column="9">(<expr><name pos:line="14" pos:column="10">buf<pos:position pos:line="14" pos:column="13"/></name></expr>)<pos:position pos:line="14" pos:column="14"/></condition><then pos:line="14" pos:column="14"> <block pos:line="14" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">encodeOID<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">buf<pos:position pos:line="15" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="24">n<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="27">beg<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">end<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">buf<pos:position pos:line="16" pos:column="12"/></name><index pos:line="16" pos:column="12">[<expr><name pos:line="16" pos:column="13">n<pos:position pos:line="16" pos:column="14"/></name></expr>]<pos:position pos:line="16" pos:column="15"/></index></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="char" pos:line="16" pos:column="18">'\0'<pos:position pos:line="16" pos:column="22"/></literal></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>

        <if pos:line="18" pos:column="9">if<condition pos:line="18" pos:column="11">(<expr><name pos:line="18" pos:column="12">symbolic<pos:position pos:line="18" pos:column="20"/></name></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21"> <block pos:line="18" pos:column="22">{
          <expr_stmt><expr><name pos:line="19" pos:column="11">op<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">searchOID<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">buf<pos:position pos:line="19" pos:column="29"/></name></expr></argument>)<pos:position pos:line="19" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
          <if pos:line="20" pos:column="11">if<condition pos:line="20" pos:column="13">(<expr><name pos:line="20" pos:column="14">op<pos:position pos:line="20" pos:column="16"/></name></expr>)<pos:position pos:line="20" pos:column="17"/></condition><then pos:line="20" pos:column="17"> <block pos:line="20" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">free<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">buf<pos:position pos:line="21" pos:column="21"/></name></expr></argument>)<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name pos:line="22" pos:column="13">buf<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">strdup<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">op<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">-&gt;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="30">textoid<pos:position pos:line="22" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
          }<pos:position pos:line="23" pos:column="12"/></block></then></if>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>
      }<pos:position pos:line="25" pos:column="8"/></block></then></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>
  <return pos:line="28" pos:column="3">return <expr><name pos:line="28" pos:column="10">buf<pos:position pos:line="28" pos:column="13"/></name></expr>;<pos:position pos:line="28" pos:column="14"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
