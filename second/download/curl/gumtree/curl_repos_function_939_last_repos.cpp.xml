<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_939_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">glob_set<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">URLGlob<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">glob<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">patternp<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">size_t<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">posp<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">unsigned<pos:position pos:line="2" pos:column="48"/></name> <name pos:line="2" pos:column="49">long<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">amount<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="3" pos:column="26">int<pos:position pos:line="3" pos:column="29"/></name></type> <name pos:line="3" pos:column="30">globindex<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="40"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <comment type="block" pos:line="5" pos:column="3">/* processes a set expression with the point behind the opening '{'
     ','-separated elements are collected until the next closing '}'
  */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">URLPattern<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">pat<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">bool<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">done<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><name pos:line="9" pos:column="15">FALSE<pos:position pos:line="9" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">buf<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><name><name pos:line="10" pos:column="15">glob<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">glob_buffer<pos:position pos:line="10" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">pattern<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><operator pos:line="11" pos:column="19">*<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">patternp<pos:position pos:line="11" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">opattern<pos:position pos:line="12" pos:column="17"/></name> <init pos:line="12" pos:column="18">= <expr><name pos:line="12" pos:column="20">pattern<pos:position pos:line="12" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">size_t<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">opos<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><operator pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">posp<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-<pos:position pos:line="13" pos:column="23"/></operator><literal type="number" pos:line="13" pos:column="23">1<pos:position pos:line="13" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">pat<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <operator pos:line="15" pos:column="9">&amp;<pos:position pos:line="15" pos:column="14"/></operator><name><name pos:line="15" pos:column="10">glob<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">pattern<pos:position pos:line="15" pos:column="23"/></name><index pos:line="15" pos:column="23">[<expr><name><name pos:line="15" pos:column="24">glob<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">size<pos:position pos:line="15" pos:column="34"/></name></name></expr>]<pos:position pos:line="15" pos:column="35"/></index></name></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
  <comment type="block" pos:line="16" pos:column="3">/* patterns 0,1,2,... correspond to size=1,3,5,... */</comment>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">pat<pos:position pos:line="17" pos:column="6"/></name><operator pos:line="17" pos:column="6">-&gt;<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="8">type<pos:position pos:line="17" pos:column="12"/></name></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">UPTSet<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">pat<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">-&gt;<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="8">content<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">.<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">Set<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">size<pos:position pos:line="18" pos:column="24"/></name></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <literal type="number" pos:line="18" pos:column="27">0<pos:position pos:line="18" pos:column="28"/></literal></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">pat<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">-&gt;<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="8">content<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">Set<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">.<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">ptr_s<pos:position pos:line="19" pos:column="25"/></name></name> <operator pos:line="19" pos:column="26">=<pos:position pos:line="19" pos:column="27"/></operator> <literal type="number" pos:line="19" pos:column="28">0<pos:position pos:line="19" pos:column="29"/></literal></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">pat<pos:position pos:line="20" pos:column="6"/></name><operator pos:line="20" pos:column="6">-&gt;<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="8">content<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">.<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">Set<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">.<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">elements<pos:position pos:line="20" pos:column="28"/></name></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="31">NULL<pos:position pos:line="20" pos:column="35"/></name></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">pat<pos:position pos:line="21" pos:column="6"/></name><operator pos:line="21" pos:column="6">-&gt;<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="8">globindex<pos:position pos:line="21" pos:column="17"/></name></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">globindex<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>

  <while pos:line="23" pos:column="3">while<condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">done<pos:position pos:line="23" pos:column="14"/></name></expr>)<pos:position pos:line="23" pos:column="15"/></condition> <block pos:line="23" pos:column="16">{
    <switch pos:line="24" pos:column="5">switch <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">*<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">pattern<pos:position pos:line="24" pos:column="21"/></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition> <block pos:line="24" pos:column="23">{
    <case pos:line="25" pos:column="5">case <expr><literal type="char" pos:line="25" pos:column="10">'\0'<pos:position pos:line="25" pos:column="14"/></literal></expr>:<pos:position pos:line="25" pos:column="15"/></case>                  <comment type="block" pos:line="25" pos:column="33">/* URL ended while set was still open */</comment>
      <return pos:line="26" pos:column="7">return <expr><call><name pos:line="26" pos:column="14">GLOBERROR<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="string" pos:line="26" pos:column="24">"unmatched brace"<pos:position pos:line="26" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">opos<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">CURLE_URL_MALFORMAT<pos:position pos:line="26" pos:column="68"/></name></expr></argument>)<pos:position pos:line="26" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="70"/></return>

    <case pos:line="28" pos:column="5">case <expr><literal type="char" pos:line="28" pos:column="10">'{'<pos:position pos:line="28" pos:column="13"/></literal></expr>:<pos:position pos:line="28" pos:column="14"/></case>
    <case pos:line="29" pos:column="5">case <expr><literal type="char" pos:line="29" pos:column="10">'['<pos:position pos:line="29" pos:column="13"/></literal></expr>:<pos:position pos:line="29" pos:column="14"/></case>                   <comment type="block" pos:line="29" pos:column="33">/* no nested expressions at this time */</comment>
      <return pos:line="30" pos:column="7">return <expr><call><name pos:line="30" pos:column="14">GLOBERROR<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><literal type="string" pos:line="30" pos:column="24">"nested brace"<pos:position pos:line="30" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="40">*<pos:position pos:line="30" pos:column="41"/></operator><name pos:line="30" pos:column="41">posp<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">CURLE_URL_MALFORMAT<pos:position pos:line="30" pos:column="66"/></name></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></return>

    <case pos:line="32" pos:column="5">case <expr><literal type="char" pos:line="32" pos:column="10">'}'<pos:position pos:line="32" pos:column="13"/></literal></expr>:<pos:position pos:line="32" pos:column="14"/></case>                           <comment type="block" pos:line="32" pos:column="41">/* set element completed */</comment>
      <if pos:line="33" pos:column="7">if<condition pos:line="33" pos:column="9">(<expr><name pos:line="33" pos:column="10">opattern<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">==<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">pattern<pos:position pos:line="33" pos:column="29"/></name></expr>)<pos:position pos:line="33" pos:column="30"/></condition><then pos:line="33" pos:column="30">
        <block type="pseudo"><return pos:line="34" pos:column="9">return <expr><call><name pos:line="34" pos:column="16">GLOBERROR<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><literal type="string" pos:line="34" pos:column="26">"empty string within braces"<pos:position pos:line="34" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="56">*<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="57">posp<pos:position pos:line="34" pos:column="61"/></name></expr></argument>,
                         <argument><expr><name pos:line="35" pos:column="26">CURLE_URL_MALFORMAT<pos:position pos:line="35" pos:column="45"/></name></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="47"/></return></block></then></if>

      <comment type="block" pos:line="37" pos:column="7">/* add 1 to size since it'll be incremented below */</comment>
      <if pos:line="38" pos:column="7">if<condition pos:line="38" pos:column="9">(<expr><call><name pos:line="38" pos:column="10">multiply<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><name pos:line="38" pos:column="19">amount<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="27">pat<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">-&gt;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="32">content<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">.<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="40">Set<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">.<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="44">size<pos:position pos:line="38" pos:column="48"/></name></name> <operator pos:line="38" pos:column="49">+<pos:position pos:line="38" pos:column="50"/></operator> <literal type="number" pos:line="38" pos:column="51">1<pos:position pos:line="38" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="54"/></condition><then pos:line="38" pos:column="54">
        <block type="pseudo"><return pos:line="39" pos:column="9">return <expr><call><name pos:line="39" pos:column="16">GLOBERROR<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><literal type="string" pos:line="39" pos:column="26">"range overflow"<pos:position pos:line="39" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="44">0<pos:position pos:line="39" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="47">CURLE_URL_MALFORMAT<pos:position pos:line="39" pos:column="66"/></name></expr></argument>)<pos:position pos:line="39" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="68"/></return></block></then></if>

      <comment type="block" pos:line="41" pos:column="7">/* fall-through */</comment>
    <case pos:line="42" pos:column="5">case <expr><literal type="char" pos:line="42" pos:column="10">','<pos:position pos:line="42" pos:column="13"/></literal></expr>:<pos:position pos:line="42" pos:column="14"/></case>

      <expr_stmt><expr><operator pos:line="44" pos:column="7">*<pos:position pos:line="44" pos:column="8"/></operator><name pos:line="44" pos:column="8">buf<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <literal type="char" pos:line="44" pos:column="14">'\0'<pos:position pos:line="44" pos:column="18"/></literal></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><name><name pos:line="45" pos:column="10">pat<pos:position pos:line="45" pos:column="13"/></name><operator pos:line="45" pos:column="13">-&gt;<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="15">content<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">.<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">Set<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">.<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">elements<pos:position pos:line="45" pos:column="35"/></name></name></expr>)<pos:position pos:line="45" pos:column="36"/></condition><then pos:line="45" pos:column="36"> <block pos:line="45" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="46" pos:column="9">char<pos:position pos:line="46" pos:column="13"/></name> <modifier pos:line="46" pos:column="14">*<pos:position pos:line="46" pos:column="15"/></modifier><modifier pos:line="46" pos:column="15">*<pos:position pos:line="46" pos:column="16"/></modifier></type><name pos:line="46" pos:column="16">new_arr<pos:position pos:line="46" pos:column="23"/></name> <init pos:line="46" pos:column="24">= <expr><call><name pos:line="46" pos:column="26">realloc<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name><name pos:line="46" pos:column="34">pat<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">-&gt;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="39">content<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">.<pos:position pos:line="46" pos:column="47"/></operator><name pos:line="46" pos:column="47">Set<pos:position pos:line="46" pos:column="50"/></name><operator pos:line="46" pos:column="50">.<pos:position pos:line="46" pos:column="51"/></operator><name pos:line="46" pos:column="51">elements<pos:position pos:line="46" pos:column="59"/></name></name></expr></argument>,
                                 <argument><expr><operator pos:line="47" pos:column="34">(<pos:position pos:line="47" pos:column="35"/></operator><name><name pos:line="47" pos:column="35">pat<pos:position pos:line="47" pos:column="38"/></name><operator pos:line="47" pos:column="38">-&gt;<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="40">content<pos:position pos:line="47" pos:column="47"/></name><operator pos:line="47" pos:column="47">.<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="48">Set<pos:position pos:line="47" pos:column="51"/></name><operator pos:line="47" pos:column="51">.<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="52">size<pos:position pos:line="47" pos:column="56"/></name></name> <operator pos:line="47" pos:column="57">+<pos:position pos:line="47" pos:column="58"/></operator> <literal type="number" pos:line="47" pos:column="59">1<pos:position pos:line="47" pos:column="60"/></literal><operator pos:line="47" pos:column="60">)<pos:position pos:line="47" pos:column="61"/></operator> <operator pos:line="47" pos:column="62">*<pos:position pos:line="47" pos:column="63"/></operator> <sizeof pos:line="47" pos:column="64">sizeof<argument_list pos:line="47" pos:column="70">(<argument><expr><name pos:line="47" pos:column="71">char<pos:position pos:line="47" pos:column="75"/></name> <operator pos:line="47" pos:column="76">*<pos:position pos:line="47" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="47" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="47" pos:column="80"/></decl_stmt>
        <if pos:line="48" pos:column="9">if<condition pos:line="48" pos:column="11">(<expr><operator pos:line="48" pos:column="12">!<pos:position pos:line="48" pos:column="13"/></operator><name pos:line="48" pos:column="13">new_arr<pos:position pos:line="48" pos:column="20"/></name></expr>)<pos:position pos:line="48" pos:column="21"/></condition><then pos:line="48" pos:column="21">
          <block type="pseudo"><return pos:line="49" pos:column="11">return <expr><call><name pos:line="49" pos:column="18">GLOBERROR<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><literal type="string" pos:line="49" pos:column="28">"out of memory"<pos:position pos:line="49" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="45">0<pos:position pos:line="49" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="48">CURLE_OUT_OF_MEMORY<pos:position pos:line="49" pos:column="67"/></name></expr></argument>)<pos:position pos:line="49" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="69"/></return></block></then></if>

        <expr_stmt><expr><name><name pos:line="51" pos:column="9">pat<pos:position pos:line="51" pos:column="12"/></name><operator pos:line="51" pos:column="12">-&gt;<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="14">content<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">.<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">Set<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">.<pos:position pos:line="51" pos:column="26"/></operator><name pos:line="51" pos:column="26">elements<pos:position pos:line="51" pos:column="34"/></name></name> <operator pos:line="51" pos:column="35">=<pos:position pos:line="51" pos:column="36"/></operator> <name pos:line="51" pos:column="37">new_arr<pos:position pos:line="51" pos:column="44"/></name></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
      }<pos:position pos:line="52" pos:column="8"/></block></then>
      <else pos:line="53" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="9">pat<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">-&gt;<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="14">content<pos:position pos:line="54" pos:column="21"/></name><operator pos:line="54" pos:column="21">.<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="22">Set<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">.<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">elements<pos:position pos:line="54" pos:column="34"/></name></name> <operator pos:line="54" pos:column="35">=<pos:position pos:line="54" pos:column="36"/></operator> <call><name pos:line="54" pos:column="37">malloc<pos:position pos:line="54" pos:column="43"/></name><argument_list pos:line="54" pos:column="43">(<argument><expr><sizeof pos:line="54" pos:column="44">sizeof<argument_list pos:line="54" pos:column="50">(<argument><expr><name pos:line="54" pos:column="51">char<pos:position pos:line="54" pos:column="55"/></name> <operator pos:line="54" pos:column="56">*<pos:position pos:line="54" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="60"/></expr_stmt></block></else></if>

      <if pos:line="56" pos:column="7">if<condition pos:line="56" pos:column="9">(<expr><operator pos:line="56" pos:column="10">!<pos:position pos:line="56" pos:column="11"/></operator><name><name pos:line="56" pos:column="11">pat<pos:position pos:line="56" pos:column="14"/></name><operator pos:line="56" pos:column="14">-&gt;<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="16">content<pos:position pos:line="56" pos:column="23"/></name><operator pos:line="56" pos:column="23">.<pos:position pos:line="56" pos:column="24"/></operator><name pos:line="56" pos:column="24">Set<pos:position pos:line="56" pos:column="27"/></name><operator pos:line="56" pos:column="27">.<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="28">elements<pos:position pos:line="56" pos:column="36"/></name></name></expr>)<pos:position pos:line="56" pos:column="37"/></condition><then pos:line="56" pos:column="37">
        <block type="pseudo"><return pos:line="57" pos:column="9">return <expr><call><name pos:line="57" pos:column="16">GLOBERROR<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><literal type="string" pos:line="57" pos:column="26">"out of memory"<pos:position pos:line="57" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="43">0<pos:position pos:line="57" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="46">CURLE_OUT_OF_MEMORY<pos:position pos:line="57" pos:column="65"/></name></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="67"/></return></block></then></if>

      <expr_stmt><expr><name><name pos:line="59" pos:column="7">pat<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">-&gt;<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="12">content<pos:position pos:line="59" pos:column="19"/></name><operator pos:line="59" pos:column="19">.<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="20">Set<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">.<pos:position pos:line="59" pos:column="24"/></operator><name pos:line="59" pos:column="24">elements<pos:position pos:line="59" pos:column="32"/></name><index pos:line="59" pos:column="32">[<expr><name><name pos:line="59" pos:column="33">pat<pos:position pos:line="59" pos:column="36"/></name><operator pos:line="59" pos:column="36">-&gt;<pos:position pos:line="59" pos:column="41"/></operator><name pos:line="59" pos:column="38">content<pos:position pos:line="59" pos:column="45"/></name><operator pos:line="59" pos:column="45">.<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="46">Set<pos:position pos:line="59" pos:column="49"/></name><operator pos:line="59" pos:column="49">.<pos:position pos:line="59" pos:column="50"/></operator><name pos:line="59" pos:column="50">size<pos:position pos:line="59" pos:column="54"/></name></name></expr>]<pos:position pos:line="59" pos:column="55"/></index></name> <operator pos:line="59" pos:column="56">=<pos:position pos:line="59" pos:column="57"/></operator>
        <call><name pos:line="60" pos:column="9">strdup<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><name><name pos:line="60" pos:column="16">glob<pos:position pos:line="60" pos:column="20"/></name><operator pos:line="60" pos:column="20">-&gt;<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="22">glob_buffer<pos:position pos:line="60" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt>
      <if pos:line="61" pos:column="7">if<condition pos:line="61" pos:column="9">(<expr><operator pos:line="61" pos:column="10">!<pos:position pos:line="61" pos:column="11"/></operator><name><name pos:line="61" pos:column="11">pat<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">-&gt;<pos:position pos:line="61" pos:column="19"/></operator><name pos:line="61" pos:column="16">content<pos:position pos:line="61" pos:column="23"/></name><operator pos:line="61" pos:column="23">.<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="24">Set<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">.<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="28">elements<pos:position pos:line="61" pos:column="36"/></name><index pos:line="61" pos:column="36">[<expr><name><name pos:line="61" pos:column="37">pat<pos:position pos:line="61" pos:column="40"/></name><operator pos:line="61" pos:column="40">-&gt;<pos:position pos:line="61" pos:column="45"/></operator><name pos:line="61" pos:column="42">content<pos:position pos:line="61" pos:column="49"/></name><operator pos:line="61" pos:column="49">.<pos:position pos:line="61" pos:column="50"/></operator><name pos:line="61" pos:column="50">Set<pos:position pos:line="61" pos:column="53"/></name><operator pos:line="61" pos:column="53">.<pos:position pos:line="61" pos:column="54"/></operator><name pos:line="61" pos:column="54">size<pos:position pos:line="61" pos:column="58"/></name></name></expr>]<pos:position pos:line="61" pos:column="59"/></index></name></expr>)<pos:position pos:line="61" pos:column="60"/></condition><then pos:line="61" pos:column="60">
        <block type="pseudo"><return pos:line="62" pos:column="9">return <expr><call><name pos:line="62" pos:column="16">GLOBERROR<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><literal type="string" pos:line="62" pos:column="26">"out of memory"<pos:position pos:line="62" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="43">0<pos:position pos:line="62" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="46">CURLE_OUT_OF_MEMORY<pos:position pos:line="62" pos:column="65"/></name></expr></argument>)<pos:position pos:line="62" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="67"/></return></block></then></if>
      <expr_stmt><expr><operator pos:line="63" pos:column="7">++<pos:position pos:line="63" pos:column="9"/></operator><name><name pos:line="63" pos:column="9">pat<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">-&gt;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="14">content<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">.<pos:position pos:line="63" pos:column="22"/></operator><name pos:line="63" pos:column="22">Set<pos:position pos:line="63" pos:column="25"/></name><operator pos:line="63" pos:column="25">.<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="26">size<pos:position pos:line="63" pos:column="30"/></name></name></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>

      <if pos:line="65" pos:column="7">if<condition pos:line="65" pos:column="9">(<expr><operator pos:line="65" pos:column="10">*<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="11">pattern<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">==<pos:position pos:line="65" pos:column="21"/></operator> <literal type="char" pos:line="65" pos:column="22">'}'<pos:position pos:line="65" pos:column="25"/></literal></expr>)<pos:position pos:line="65" pos:column="26"/></condition><then pos:line="65" pos:column="26"> <block pos:line="65" pos:column="27">{
        <expr_stmt><expr><name pos:line="66" pos:column="9">pattern<pos:position pos:line="66" pos:column="16"/></name><operator pos:line="66" pos:column="16">++<pos:position pos:line="66" pos:column="18"/></operator></expr>;<pos:position pos:line="66" pos:column="19"/></expr_stmt> <comment type="block" pos:line="66" pos:column="20">/* pass the closing brace */</comment>
        <expr_stmt><expr><name pos:line="67" pos:column="9">done<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">=<pos:position pos:line="67" pos:column="15"/></operator> <name pos:line="67" pos:column="16">TRUE<pos:position pos:line="67" pos:column="20"/></name></expr>;<pos:position pos:line="67" pos:column="21"/></expr_stmt>
        <continue pos:line="68" pos:column="9">continue;<pos:position pos:line="68" pos:column="18"/></continue>
      }<pos:position pos:line="69" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="71" pos:column="7">buf<pos:position pos:line="71" pos:column="10"/></name> <operator pos:line="71" pos:column="11">=<pos:position pos:line="71" pos:column="12"/></operator> <name><name pos:line="71" pos:column="13">glob<pos:position pos:line="71" pos:column="17"/></name><operator pos:line="71" pos:column="17">-&gt;<pos:position pos:line="71" pos:column="22"/></operator><name pos:line="71" pos:column="19">glob_buffer<pos:position pos:line="71" pos:column="30"/></name></name></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="72" pos:column="7">++<pos:position pos:line="72" pos:column="9"/></operator><name pos:line="72" pos:column="9">pattern<pos:position pos:line="72" pos:column="16"/></name></expr>;<pos:position pos:line="72" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="73" pos:column="7">++<pos:position pos:line="73" pos:column="9"/></operator><operator pos:line="73" pos:column="9">(<pos:position pos:line="73" pos:column="10"/></operator><operator pos:line="73" pos:column="10">*<pos:position pos:line="73" pos:column="11"/></operator><name pos:line="73" pos:column="11">posp<pos:position pos:line="73" pos:column="15"/></name><operator pos:line="73" pos:column="15">)<pos:position pos:line="73" pos:column="16"/></operator></expr>;<pos:position pos:line="73" pos:column="17"/></expr_stmt>
      <break pos:line="74" pos:column="7">break;<pos:position pos:line="74" pos:column="13"/></break>

    <case pos:line="76" pos:column="5">case <expr><literal type="char" pos:line="76" pos:column="10">']'<pos:position pos:line="76" pos:column="13"/></literal></expr>:<pos:position pos:line="76" pos:column="14"/></case>                           <comment type="block" pos:line="76" pos:column="41">/* illegal closing bracket */</comment>
      <return pos:line="77" pos:column="7">return <expr><call><name pos:line="77" pos:column="14">GLOBERROR<pos:position pos:line="77" pos:column="23"/></name><argument_list pos:line="77" pos:column="23">(<argument><expr><literal type="string" pos:line="77" pos:column="24">"unexpected close bracket"<pos:position pos:line="77" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="77" pos:column="52">*<pos:position pos:line="77" pos:column="53"/></operator><name pos:line="77" pos:column="53">posp<pos:position pos:line="77" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="59">CURLE_URL_MALFORMAT<pos:position pos:line="77" pos:column="78"/></name></expr></argument>)<pos:position pos:line="77" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="80"/></return>

    <case pos:line="79" pos:column="5">case <expr><literal type="char" pos:line="79" pos:column="10">'\\'<pos:position pos:line="79" pos:column="14"/></literal></expr>:<pos:position pos:line="79" pos:column="15"/></case>                          <comment type="block" pos:line="79" pos:column="41">/* escaped character, skip '\' */</comment>
      <if pos:line="80" pos:column="7">if<condition pos:line="80" pos:column="9">(<expr><name><name pos:line="80" pos:column="10">pattern<pos:position pos:line="80" pos:column="17"/></name><index pos:line="80" pos:column="17">[<expr><literal type="number" pos:line="80" pos:column="18">1<pos:position pos:line="80" pos:column="19"/></literal></expr>]<pos:position pos:line="80" pos:column="20"/></index></name></expr>)<pos:position pos:line="80" pos:column="21"/></condition><then pos:line="80" pos:column="21"> <block pos:line="80" pos:column="22">{
        <expr_stmt><expr><operator pos:line="81" pos:column="9">++<pos:position pos:line="81" pos:column="11"/></operator><name pos:line="81" pos:column="11">pattern<pos:position pos:line="81" pos:column="18"/></name></expr>;<pos:position pos:line="81" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="82" pos:column="9">++<pos:position pos:line="82" pos:column="11"/></operator><operator pos:line="82" pos:column="11">(<pos:position pos:line="82" pos:column="12"/></operator><operator pos:line="82" pos:column="12">*<pos:position pos:line="82" pos:column="13"/></operator><name pos:line="82" pos:column="13">posp<pos:position pos:line="82" pos:column="17"/></name><operator pos:line="82" pos:column="17">)<pos:position pos:line="82" pos:column="18"/></operator></expr>;<pos:position pos:line="82" pos:column="19"/></expr_stmt>
      }<pos:position pos:line="83" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="84" pos:column="7">/* intentional fallthrough */</comment>
    <default pos:line="85" pos:column="5">default:<pos:position pos:line="85" pos:column="13"/></default>
      <expr_stmt><expr><operator pos:line="86" pos:column="7">*<pos:position pos:line="86" pos:column="8"/></operator><name pos:line="86" pos:column="8">buf<pos:position pos:line="86" pos:column="11"/></name><operator pos:line="86" pos:column="11">++<pos:position pos:line="86" pos:column="13"/></operator> <operator pos:line="86" pos:column="14">=<pos:position pos:line="86" pos:column="15"/></operator> <operator pos:line="86" pos:column="16">*<pos:position pos:line="86" pos:column="17"/></operator><name pos:line="86" pos:column="17">pattern<pos:position pos:line="86" pos:column="24"/></name><operator pos:line="86" pos:column="24">++<pos:position pos:line="86" pos:column="26"/></operator></expr>;<pos:position pos:line="86" pos:column="27"/></expr_stmt>              <comment type="block" pos:line="86" pos:column="41">/* copy character to set element */</comment>
      <expr_stmt><expr><operator pos:line="87" pos:column="7">++<pos:position pos:line="87" pos:column="9"/></operator><operator pos:line="87" pos:column="9">(<pos:position pos:line="87" pos:column="10"/></operator><operator pos:line="87" pos:column="10">*<pos:position pos:line="87" pos:column="11"/></operator><name pos:line="87" pos:column="11">posp<pos:position pos:line="87" pos:column="15"/></name><operator pos:line="87" pos:column="15">)<pos:position pos:line="87" pos:column="16"/></operator></expr>;<pos:position pos:line="87" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></switch>
  }<pos:position pos:line="89" pos:column="4"/></block></while>

  <expr_stmt><expr><operator pos:line="91" pos:column="3">*<pos:position pos:line="91" pos:column="4"/></operator><name pos:line="91" pos:column="4">patternp<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <name pos:line="91" pos:column="15">pattern<pos:position pos:line="91" pos:column="22"/></name></expr>;<pos:position pos:line="91" pos:column="23"/></expr_stmt> <comment type="block" pos:line="91" pos:column="24">/* return with the new position */</comment>
  <return pos:line="92" pos:column="3">return <expr><name pos:line="92" pos:column="10">CURLE_OK<pos:position pos:line="92" pos:column="18"/></name></expr>;<pos:position pos:line="92" pos:column="19"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
