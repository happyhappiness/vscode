<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_750_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">srvr_sockaddr_union_t<pos:position pos:line="3" pos:column="24"/></name></type> <name pos:line="3" pos:column="25">me<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">sock<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">CURL_SOCKET_BAD<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_socket_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">msgsock<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">CURL_SOCKET_BAD<pos:position pos:line="5" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">wrotepidfile<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">flag<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">unsigned<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">short<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">port<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><name pos:line="8" pos:column="25">DEFAULT_PORT<pos:position pos:line="8" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">pidname<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><literal type="string" pos:line="9" pos:column="25">".rtsp.pid"<pos:position pos:line="9" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">httprequest<pos:position pos:line="10" pos:column="21"/></name></name></type> <name pos:line="10" pos:column="22">req<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">rc<pos:position pos:line="11" pos:column="9"/></name></decl>;<pos:position pos:line="11" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">error<pos:position pos:line="12" pos:column="12"/></name></decl>;<pos:position pos:line="12" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">arg<pos:position pos:line="13" pos:column="10"/></name> <init pos:line="13" pos:column="11">= <expr><literal type="number" pos:line="13" pos:column="13">1<pos:position pos:line="13" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">long<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">pid<pos:position pos:line="14" pos:column="11"/></name></decl>;<pos:position pos:line="14" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">memset<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><operator pos:line="16" pos:column="10">&amp;<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="11">req<pos:position pos:line="16" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="19">sizeof<argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">req<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>

  <while pos:line="18" pos:column="3">while<condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">argc<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">arg<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition> <block pos:line="18" pos:column="19">{
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><operator pos:line="19" pos:column="8">!<pos:position pos:line="19" pos:column="9"/></operator><call><name pos:line="19" pos:column="9">strcmp<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="string" pos:line="19" pos:column="16">"--version"<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="29">argv<pos:position pos:line="19" pos:column="33"/></name><index pos:line="19" pos:column="33">[<expr><name pos:line="19" pos:column="34">arg<pos:position pos:line="19" pos:column="37"/></name></expr>]<pos:position pos:line="19" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="40"/></condition><then pos:line="19" pos:column="40"> <block pos:line="19" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">printf<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><literal type="string" pos:line="20" pos:column="14">"rtspd IPv4%s"<pos:position pos:line="20" pos:column="28"/></literal>
             <literal type="string" pos:line="21" pos:column="14">"\n"<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>
             ,
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">ENABLE_IPV6<pos:position pos:line="23" pos:column="19"/></name></cpp:ifdef>
             <argument><expr><literal type="string" pos:line="24" pos:column="14">"/IPv6"<pos:position pos:line="24" pos:column="21"/></literal>
<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>
             <literal type="string" pos:line="26" pos:column="14">""<pos:position pos:line="26" pos:column="16"/></literal></expr></argument>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
             )<pos:position pos:line="28" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="16"/></expr_stmt>
      <return pos:line="29" pos:column="7">return <expr><literal type="number" pos:line="29" pos:column="14">0<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then>
    <elseif pos:line="31" pos:column="5">else <if pos:line="31" pos:column="10">if<condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><call><name pos:line="31" pos:column="14">strcmp<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><literal type="string" pos:line="31" pos:column="21">"--pidfile"<pos:position pos:line="31" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="34">argv<pos:position pos:line="31" pos:column="38"/></name><index pos:line="31" pos:column="38">[<expr><name pos:line="31" pos:column="39">arg<pos:position pos:line="31" pos:column="42"/></name></expr>]<pos:position pos:line="31" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="45"/></condition><then pos:line="31" pos:column="45"> <block pos:line="31" pos:column="46">{
      <expr_stmt><expr><name pos:line="32" pos:column="7">arg<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">++<pos:position pos:line="32" pos:column="12"/></operator></expr>;<pos:position pos:line="32" pos:column="13"/></expr_stmt>
      <if pos:line="33" pos:column="7">if<condition pos:line="33" pos:column="9">(<expr><name pos:line="33" pos:column="10">argc<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">&gt;<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="15">arg<pos:position pos:line="33" pos:column="18"/></name></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="9">pidname<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <name><name pos:line="34" pos:column="19">argv<pos:position pos:line="34" pos:column="23"/></name><index pos:line="34" pos:column="23">[<expr><name pos:line="34" pos:column="24">arg<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">++<pos:position pos:line="34" pos:column="29"/></operator></expr>]<pos:position pos:line="34" pos:column="30"/></index></name></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="36" pos:column="5">else <if pos:line="36" pos:column="10">if<condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><call><name pos:line="36" pos:column="14">strcmp<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><literal type="string" pos:line="36" pos:column="21">"--logfile"<pos:position pos:line="36" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="34">argv<pos:position pos:line="36" pos:column="38"/></name><index pos:line="36" pos:column="38">[<expr><name pos:line="36" pos:column="39">arg<pos:position pos:line="36" pos:column="42"/></name></expr>]<pos:position pos:line="36" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="45"/></condition><then pos:line="36" pos:column="45"> <block pos:line="36" pos:column="46">{
      <expr_stmt><expr><name pos:line="37" pos:column="7">arg<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">++<pos:position pos:line="37" pos:column="12"/></operator></expr>;<pos:position pos:line="37" pos:column="13"/></expr_stmt>
      <if pos:line="38" pos:column="7">if<condition pos:line="38" pos:column="9">(<expr><name pos:line="38" pos:column="10">argc<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">&gt;<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="15">arg<pos:position pos:line="38" pos:column="18"/></name></expr>)<pos:position pos:line="38" pos:column="19"/></condition><then pos:line="38" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="9">serverlogfile<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <name><name pos:line="39" pos:column="25">argv<pos:position pos:line="39" pos:column="29"/></name><index pos:line="39" pos:column="29">[<expr><name pos:line="39" pos:column="30">arg<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">++<pos:position pos:line="39" pos:column="35"/></operator></expr>]<pos:position pos:line="39" pos:column="36"/></index></name></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="41" pos:column="5">else <if pos:line="41" pos:column="10">if<condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">!<pos:position pos:line="41" pos:column="14"/></operator><call><name pos:line="41" pos:column="14">strcmp<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><literal type="string" pos:line="41" pos:column="21">"--ipv4"<pos:position pos:line="41" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="31">argv<pos:position pos:line="41" pos:column="35"/></name><index pos:line="41" pos:column="35">[<expr><name pos:line="41" pos:column="36">arg<pos:position pos:line="41" pos:column="39"/></name></expr>]<pos:position pos:line="41" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="42"/></condition><then pos:line="41" pos:column="42"> <block pos:line="41" pos:column="43">{
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">ENABLE_IPV6<pos:position pos:line="42" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="43" pos:column="7">ipv_inuse<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <literal type="string" pos:line="43" pos:column="19">"IPv4"<pos:position pos:line="43" pos:column="25"/></literal></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="44" pos:column="7">use_ipv6<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">FALSE<pos:position pos:line="44" pos:column="23"/></name></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="46" pos:column="7">arg<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">++<pos:position pos:line="46" pos:column="12"/></operator></expr>;<pos:position pos:line="46" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="48" pos:column="5">else <if pos:line="48" pos:column="10">if<condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">!<pos:position pos:line="48" pos:column="14"/></operator><call><name pos:line="48" pos:column="14">strcmp<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><literal type="string" pos:line="48" pos:column="21">"--ipv6"<pos:position pos:line="48" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="31">argv<pos:position pos:line="48" pos:column="35"/></name><index pos:line="48" pos:column="35">[<expr><name pos:line="48" pos:column="36">arg<pos:position pos:line="48" pos:column="39"/></name></expr>]<pos:position pos:line="48" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="42"/></condition><then pos:line="48" pos:column="42"> <block pos:line="48" pos:column="43">{
<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">ENABLE_IPV6<pos:position pos:line="49" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="50" pos:column="7">ipv_inuse<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <literal type="string" pos:line="50" pos:column="19">"IPv6"<pos:position pos:line="50" pos:column="25"/></literal></expr>;<pos:position pos:line="50" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="51" pos:column="7">use_ipv6<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <name pos:line="51" pos:column="18">TRUE<pos:position pos:line="51" pos:column="22"/></name></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="53" pos:column="7">arg<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">++<pos:position pos:line="53" pos:column="12"/></operator></expr>;<pos:position pos:line="53" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="55" pos:column="5">else <if pos:line="55" pos:column="10">if<condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">strcmp<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><literal type="string" pos:line="55" pos:column="21">"--port"<pos:position pos:line="55" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="31">argv<pos:position pos:line="55" pos:column="35"/></name><index pos:line="55" pos:column="35">[<expr><name pos:line="55" pos:column="36">arg<pos:position pos:line="55" pos:column="39"/></name></expr>]<pos:position pos:line="55" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="42"/></condition><then pos:line="55" pos:column="42"> <block pos:line="55" pos:column="43">{
      <expr_stmt><expr><name pos:line="56" pos:column="7">arg<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">++<pos:position pos:line="56" pos:column="12"/></operator></expr>;<pos:position pos:line="56" pos:column="13"/></expr_stmt>
      <if pos:line="57" pos:column="7">if<condition pos:line="57" pos:column="9">(<expr><name pos:line="57" pos:column="10">argc<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">&gt;<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="15">arg<pos:position pos:line="57" pos:column="18"/></name></expr>)<pos:position pos:line="57" pos:column="19"/></condition><then pos:line="57" pos:column="19"> <block pos:line="57" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">char<pos:position pos:line="58" pos:column="13"/></name> <modifier pos:line="58" pos:column="14">*<pos:position pos:line="58" pos:column="15"/></modifier></type><name pos:line="58" pos:column="15">endptr<pos:position pos:line="58" pos:column="21"/></name></decl>;<pos:position pos:line="58" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="59" pos:column="9">unsigned<pos:position pos:line="59" pos:column="17"/></name> <name pos:line="59" pos:column="18">long<pos:position pos:line="59" pos:column="22"/></name></type> <name pos:line="59" pos:column="23">ulnum<pos:position pos:line="59" pos:column="28"/></name> <init pos:line="59" pos:column="29">= <expr><call><name pos:line="59" pos:column="31">strtoul<pos:position pos:line="59" pos:column="38"/></name><argument_list pos:line="59" pos:column="38">(<argument><expr><name><name pos:line="59" pos:column="39">argv<pos:position pos:line="59" pos:column="43"/></name><index pos:line="59" pos:column="43">[<expr><name pos:line="59" pos:column="44">arg<pos:position pos:line="59" pos:column="47"/></name></expr>]<pos:position pos:line="59" pos:column="48"/></index></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="50">&amp;<pos:position pos:line="59" pos:column="55"/></operator><name pos:line="59" pos:column="51">endptr<pos:position pos:line="59" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="59">10<pos:position pos:line="59" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="59" pos:column="63"/></decl_stmt>
        <if pos:line="60" pos:column="9">if<condition pos:line="60" pos:column="11">(<expr><operator pos:line="60" pos:column="12">(<pos:position pos:line="60" pos:column="13"/></operator><name pos:line="60" pos:column="13">endptr<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">!=<pos:position pos:line="60" pos:column="22"/></operator> <name><name pos:line="60" pos:column="23">argv<pos:position pos:line="60" pos:column="27"/></name><index pos:line="60" pos:column="27">[<expr><name pos:line="60" pos:column="28">arg<pos:position pos:line="60" pos:column="31"/></name></expr>]<pos:position pos:line="60" pos:column="32"/></index></name> <operator pos:line="60" pos:column="33">+<pos:position pos:line="60" pos:column="34"/></operator> <call><name pos:line="60" pos:column="35">strlen<pos:position pos:line="60" pos:column="41"/></name><argument_list pos:line="60" pos:column="41">(<argument><expr><name><name pos:line="60" pos:column="42">argv<pos:position pos:line="60" pos:column="46"/></name><index pos:line="60" pos:column="46">[<expr><name pos:line="60" pos:column="47">arg<pos:position pos:line="60" pos:column="50"/></name></expr>]<pos:position pos:line="60" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="60" pos:column="52"/></argument_list></call><operator pos:line="60" pos:column="52">)<pos:position pos:line="60" pos:column="53"/></operator> <operator pos:line="60" pos:column="54">||<pos:position pos:line="60" pos:column="56"/></operator>
           <operator pos:line="61" pos:column="12">(<pos:position pos:line="61" pos:column="13"/></operator><name pos:line="61" pos:column="13">ulnum<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">&lt;<pos:position pos:line="61" pos:column="23"/></operator> <literal type="number" pos:line="61" pos:column="21">1025UL<pos:position pos:line="61" pos:column="27"/></literal><operator pos:line="61" pos:column="27">)<pos:position pos:line="61" pos:column="28"/></operator> <operator pos:line="61" pos:column="29">||<pos:position pos:line="61" pos:column="31"/></operator> <operator pos:line="61" pos:column="32">(<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="33">ulnum<pos:position pos:line="61" pos:column="38"/></name> <operator pos:line="61" pos:column="39">&gt;<pos:position pos:line="61" pos:column="43"/></operator> <literal type="number" pos:line="61" pos:column="41">65535UL<pos:position pos:line="61" pos:column="48"/></literal><operator pos:line="61" pos:column="48">)<pos:position pos:line="61" pos:column="49"/></operator></expr>)<pos:position pos:line="61" pos:column="50"/></condition><then pos:line="61" pos:column="50"> <block pos:line="61" pos:column="51">{
          <expr_stmt><expr><call><name pos:line="62" pos:column="11">fprintf<pos:position pos:line="62" pos:column="18"/></name><argument_list pos:line="62" pos:column="18">(<argument><expr><name pos:line="62" pos:column="19">stderr<pos:position pos:line="62" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="27">"rtspd: invalid --port argument (%s)\n"<pos:position pos:line="62" pos:column="66"/></literal></expr></argument>,
                  <argument><expr><name><name pos:line="63" pos:column="19">argv<pos:position pos:line="63" pos:column="23"/></name><index pos:line="63" pos:column="23">[<expr><name pos:line="63" pos:column="24">arg<pos:position pos:line="63" pos:column="27"/></name></expr>]<pos:position pos:line="63" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="63" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="30"/></expr_stmt>
          <return pos:line="64" pos:column="11">return <expr><literal type="number" pos:line="64" pos:column="18">0<pos:position pos:line="64" pos:column="19"/></literal></expr>;<pos:position pos:line="64" pos:column="20"/></return>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="66" pos:column="9">port<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <call><name pos:line="66" pos:column="16">curlx_ultous<pos:position pos:line="66" pos:column="28"/></name><argument_list pos:line="66" pos:column="28">(<argument><expr><name pos:line="66" pos:column="29">ulnum<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="67" pos:column="9">arg<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">++<pos:position pos:line="67" pos:column="14"/></operator></expr>;<pos:position pos:line="67" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="70" pos:column="5">else <if pos:line="70" pos:column="10">if<condition pos:line="70" pos:column="12">(<expr><operator pos:line="70" pos:column="13">!<pos:position pos:line="70" pos:column="14"/></operator><call><name pos:line="70" pos:column="14">strcmp<pos:position pos:line="70" pos:column="20"/></name><argument_list pos:line="70" pos:column="20">(<argument><expr><literal type="string" pos:line="70" pos:column="21">"--srcdir"<pos:position pos:line="70" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="33">argv<pos:position pos:line="70" pos:column="37"/></name><index pos:line="70" pos:column="37">[<expr><name pos:line="70" pos:column="38">arg<pos:position pos:line="70" pos:column="41"/></name></expr>]<pos:position pos:line="70" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="70" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="44"/></condition><then pos:line="70" pos:column="44"> <block pos:line="70" pos:column="45">{
      <expr_stmt><expr><name pos:line="71" pos:column="7">arg<pos:position pos:line="71" pos:column="10"/></name><operator pos:line="71" pos:column="10">++<pos:position pos:line="71" pos:column="12"/></operator></expr>;<pos:position pos:line="71" pos:column="13"/></expr_stmt>
      <if pos:line="72" pos:column="7">if<condition pos:line="72" pos:column="9">(<expr><name pos:line="72" pos:column="10">argc<pos:position pos:line="72" pos:column="14"/></name><operator pos:line="72" pos:column="14">&gt;<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="15">arg<pos:position pos:line="72" pos:column="18"/></name></expr>)<pos:position pos:line="72" pos:column="19"/></condition><then pos:line="72" pos:column="19"> <block pos:line="72" pos:column="20">{
        <expr_stmt><expr><name pos:line="73" pos:column="9">path<pos:position pos:line="73" pos:column="13"/></name> <operator pos:line="73" pos:column="14">=<pos:position pos:line="73" pos:column="15"/></operator> <name><name pos:line="73" pos:column="16">argv<pos:position pos:line="73" pos:column="20"/></name><index pos:line="73" pos:column="20">[<expr><name pos:line="73" pos:column="21">arg<pos:position pos:line="73" pos:column="24"/></name></expr>]<pos:position pos:line="73" pos:column="25"/></index></name></expr>;<pos:position pos:line="73" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="74" pos:column="9">arg<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">++<pos:position pos:line="74" pos:column="14"/></operator></expr>;<pos:position pos:line="74" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="75" pos:column="8"/></block></then></if>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if></elseif>
    <else pos:line="77" pos:column="5">else <block pos:line="77" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="78" pos:column="7">puts<pos:position pos:line="78" pos:column="11"/></name><argument_list pos:line="78" pos:column="11">(<argument><expr><literal type="string" pos:line="78" pos:column="12">"Usage: rtspd [option]\n"<pos:position pos:line="78" pos:column="37"/></literal>
           <literal type="string" pos:line="79" pos:column="12">" --version\n"<pos:position pos:line="79" pos:column="26"/></literal>
           <literal type="string" pos:line="80" pos:column="12">" --logfile [file]\n"<pos:position pos:line="80" pos:column="33"/></literal>
           <literal type="string" pos:line="81" pos:column="12">" --pidfile [file]\n"<pos:position pos:line="81" pos:column="33"/></literal>
           <literal type="string" pos:line="82" pos:column="12">" --ipv4\n"<pos:position pos:line="82" pos:column="23"/></literal>
           <literal type="string" pos:line="83" pos:column="12">" --ipv6\n"<pos:position pos:line="83" pos:column="23"/></literal>
           <literal type="string" pos:line="84" pos:column="12">" --port [port]\n"<pos:position pos:line="84" pos:column="30"/></literal>
           <literal type="string" pos:line="85" pos:column="12">" --srcdir [path]"<pos:position pos:line="85" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="32"/></expr_stmt>
      <return pos:line="86" pos:column="7">return <expr><literal type="number" pos:line="86" pos:column="14">0<pos:position pos:line="86" pos:column="15"/></literal></expr>;<pos:position pos:line="86" pos:column="16"/></return>
    }<pos:position pos:line="87" pos:column="6"/></block></else></if>
  }<pos:position pos:line="88" pos:column="4"/></block></while>

<cpp:ifdef pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">ifdef<pos:position pos:line="90" pos:column="7"/></cpp:directive> <name pos:line="90" pos:column="8">WIN32<pos:position pos:line="90" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="91" pos:column="3">win32_init<pos:position pos:line="91" pos:column="13"/></name><argument_list pos:line="91" pos:column="13">()<pos:position pos:line="91" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="92" pos:column="3">atexit<pos:position pos:line="92" pos:column="9"/></name><argument_list pos:line="92" pos:column="9">(<argument><expr><name pos:line="92" pos:column="10">win32_cleanup<pos:position pos:line="92" pos:column="23"/></name></expr></argument>)<pos:position pos:line="92" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="95" pos:column="3">install_signal_handlers<pos:position pos:line="95" pos:column="26"/></name><argument_list pos:line="95" pos:column="26">()<pos:position pos:line="95" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name pos:line="97" pos:column="3">pid<pos:position pos:line="97" pos:column="6"/></name> <operator pos:line="97" pos:column="7">=<pos:position pos:line="97" pos:column="8"/></operator> <operator pos:line="97" pos:column="9">(<pos:position pos:line="97" pos:column="10"/></operator><name pos:line="97" pos:column="10">long<pos:position pos:line="97" pos:column="14"/></name><operator pos:line="97" pos:column="14">)<pos:position pos:line="97" pos:column="15"/></operator><call><name pos:line="97" pos:column="15">getpid<pos:position pos:line="97" pos:column="21"/></name><argument_list pos:line="97" pos:column="21">()<pos:position pos:line="97" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="24"/></expr_stmt>

<cpp:ifdef pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">ifdef<pos:position pos:line="99" pos:column="7"/></cpp:directive> <name pos:line="99" pos:column="8">ENABLE_IPV6<pos:position pos:line="99" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="100" pos:column="3">if<condition pos:line="100" pos:column="5">(<expr><operator pos:line="100" pos:column="6">!<pos:position pos:line="100" pos:column="7"/></operator><name pos:line="100" pos:column="7">use_ipv6<pos:position pos:line="100" pos:column="15"/></name></expr>)<pos:position pos:line="100" pos:column="16"/></condition><then pos:line="100" pos:column="16">
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="5">sock<pos:position pos:line="102" pos:column="9"/></name> <operator pos:line="102" pos:column="10">=<pos:position pos:line="102" pos:column="11"/></operator> <call><name pos:line="102" pos:column="12">socket<pos:position pos:line="102" pos:column="18"/></name><argument_list pos:line="102" pos:column="18">(<argument><expr><name pos:line="102" pos:column="19">AF_INET<pos:position pos:line="102" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="28">SOCK_STREAM<pos:position pos:line="102" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="41">0<pos:position pos:line="102" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="44"/></expr_stmt></block></then>
<cpp:ifdef pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">ifdef<pos:position pos:line="103" pos:column="7"/></cpp:directive> <name pos:line="103" pos:column="8">ENABLE_IPV6<pos:position pos:line="103" pos:column="19"/></name></cpp:ifdef>
  <else pos:line="104" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="5">sock<pos:position pos:line="105" pos:column="9"/></name> <operator pos:line="105" pos:column="10">=<pos:position pos:line="105" pos:column="11"/></operator> <call><name pos:line="105" pos:column="12">socket<pos:position pos:line="105" pos:column="18"/></name><argument_list pos:line="105" pos:column="18">(<argument><expr><name pos:line="105" pos:column="19">AF_INET6<pos:position pos:line="105" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="29">SOCK_STREAM<pos:position pos:line="105" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="105" pos:column="42">0<pos:position pos:line="105" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="45"/></expr_stmt></block></else></if>
<cpp:endif pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">endif<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="108" pos:column="3">if<condition pos:line="108" pos:column="5">(<expr><name pos:line="108" pos:column="6">CURL_SOCKET_BAD<pos:position pos:line="108" pos:column="21"/></name> <operator pos:line="108" pos:column="22">==<pos:position pos:line="108" pos:column="24"/></operator> <name pos:line="108" pos:column="25">sock<pos:position pos:line="108" pos:column="29"/></name></expr>)<pos:position pos:line="108" pos:column="30"/></condition><then pos:line="108" pos:column="30"> <block pos:line="108" pos:column="31">{
    <expr_stmt><expr><name pos:line="109" pos:column="5">error<pos:position pos:line="109" pos:column="10"/></name> <operator pos:line="109" pos:column="11">=<pos:position pos:line="109" pos:column="12"/></operator> <name pos:line="109" pos:column="13">SOCKERRNO<pos:position pos:line="109" pos:column="22"/></name></expr>;<pos:position pos:line="109" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">logmsg<pos:position pos:line="110" pos:column="11"/></name><argument_list pos:line="110" pos:column="11">(<argument><expr><literal type="string" pos:line="110" pos:column="12">"Error creating socket: (%d) %s"<pos:position pos:line="110" pos:column="44"/></literal></expr></argument>,
           <argument><expr><name pos:line="111" pos:column="12">error<pos:position pos:line="111" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="111" pos:column="19">strerror<pos:position pos:line="111" pos:column="27"/></name><argument_list pos:line="111" pos:column="27">(<argument><expr><name pos:line="111" pos:column="28">error<pos:position pos:line="111" pos:column="33"/></name></expr></argument>)<pos:position pos:line="111" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="111" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="36"/></expr_stmt>
    <goto pos:line="112" pos:column="5">goto <name pos:line="112" pos:column="10">server_cleanup<pos:position pos:line="112" pos:column="24"/></name>;<pos:position pos:line="112" pos:column="25"/></goto>
  }<pos:position pos:line="113" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="115" pos:column="3">flag<pos:position pos:line="115" pos:column="7"/></name> <operator pos:line="115" pos:column="8">=<pos:position pos:line="115" pos:column="9"/></operator> <literal type="number" pos:line="115" pos:column="10">1<pos:position pos:line="115" pos:column="11"/></literal></expr>;<pos:position pos:line="115" pos:column="12"/></expr_stmt>
  <if pos:line="116" pos:column="3">if<condition pos:line="116" pos:column="5">(<expr><literal type="number" pos:line="116" pos:column="6">0<pos:position pos:line="116" pos:column="7"/></literal> <operator pos:line="116" pos:column="8">!=<pos:position pos:line="116" pos:column="10"/></operator> <call><name pos:line="116" pos:column="11">setsockopt<pos:position pos:line="116" pos:column="21"/></name><argument_list pos:line="116" pos:column="21">(<argument><expr><name pos:line="116" pos:column="22">sock<pos:position pos:line="116" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="28">SOL_SOCKET<pos:position pos:line="116" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="40">SO_REUSEADDR<pos:position pos:line="116" pos:column="52"/></name></expr></argument>,
            <argument><expr><operator pos:line="117" pos:column="13">(<pos:position pos:line="117" pos:column="14"/></operator><name pos:line="117" pos:column="14">void<pos:position pos:line="117" pos:column="18"/></name> <operator pos:line="117" pos:column="19">*<pos:position pos:line="117" pos:column="20"/></operator><operator pos:line="117" pos:column="20">)<pos:position pos:line="117" pos:column="21"/></operator><operator pos:line="117" pos:column="21">&amp;<pos:position pos:line="117" pos:column="26"/></operator><name pos:line="117" pos:column="22">flag<pos:position pos:line="117" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="117" pos:column="28">sizeof<argument_list pos:line="117" pos:column="34">(<argument><expr><name pos:line="117" pos:column="35">flag<pos:position pos:line="117" pos:column="39"/></name></expr></argument>)<pos:position pos:line="117" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="117" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="42"/></condition><then pos:line="117" pos:column="42"> <block pos:line="117" pos:column="43">{
    <expr_stmt><expr><name pos:line="118" pos:column="5">error<pos:position pos:line="118" pos:column="10"/></name> <operator pos:line="118" pos:column="11">=<pos:position pos:line="118" pos:column="12"/></operator> <name pos:line="118" pos:column="13">SOCKERRNO<pos:position pos:line="118" pos:column="22"/></name></expr>;<pos:position pos:line="118" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">logmsg<pos:position pos:line="119" pos:column="11"/></name><argument_list pos:line="119" pos:column="11">(<argument><expr><literal type="string" pos:line="119" pos:column="12">"setsockopt(SO_REUSEADDR) failed with error: (%d) %s"<pos:position pos:line="119" pos:column="65"/></literal></expr></argument>,
           <argument><expr><name pos:line="120" pos:column="12">error<pos:position pos:line="120" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="120" pos:column="19">strerror<pos:position pos:line="120" pos:column="27"/></name><argument_list pos:line="120" pos:column="27">(<argument><expr><name pos:line="120" pos:column="28">error<pos:position pos:line="120" pos:column="33"/></name></expr></argument>)<pos:position pos:line="120" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="120" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="36"/></expr_stmt>
    <goto pos:line="121" pos:column="5">goto <name pos:line="121" pos:column="10">server_cleanup<pos:position pos:line="121" pos:column="24"/></name>;<pos:position pos:line="121" pos:column="25"/></goto>
  }<pos:position pos:line="122" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="124" pos:column="1">#<cpp:directive pos:line="124" pos:column="2">ifdef<pos:position pos:line="124" pos:column="7"/></cpp:directive> <name pos:line="124" pos:column="8">ENABLE_IPV6<pos:position pos:line="124" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="125" pos:column="3">if<condition pos:line="125" pos:column="5">(<expr><operator pos:line="125" pos:column="6">!<pos:position pos:line="125" pos:column="7"/></operator><name pos:line="125" pos:column="7">use_ipv6<pos:position pos:line="125" pos:column="15"/></name></expr>)<pos:position pos:line="125" pos:column="16"/></condition><then pos:line="125" pos:column="16"> <block pos:line="125" pos:column="17">{
<cpp:endif pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">endif<pos:position pos:line="126" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="127" pos:column="5">memset<pos:position pos:line="127" pos:column="11"/></name><argument_list pos:line="127" pos:column="11">(<argument><expr><operator pos:line="127" pos:column="12">&amp;<pos:position pos:line="127" pos:column="17"/></operator><name><name pos:line="127" pos:column="13">me<pos:position pos:line="127" pos:column="15"/></name><operator pos:line="127" pos:column="15">.<pos:position pos:line="127" pos:column="16"/></operator><name pos:line="127" pos:column="16">sa4<pos:position pos:line="127" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="21">0<pos:position pos:line="127" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="127" pos:column="24">sizeof<argument_list pos:line="127" pos:column="30">(<argument><expr><name><name pos:line="127" pos:column="31">me<pos:position pos:line="127" pos:column="33"/></name><operator pos:line="127" pos:column="33">.<pos:position pos:line="127" pos:column="34"/></operator><name pos:line="127" pos:column="34">sa4<pos:position pos:line="127" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="127" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="128" pos:column="5">me<pos:position pos:line="128" pos:column="7"/></name><operator pos:line="128" pos:column="7">.<pos:position pos:line="128" pos:column="8"/></operator><name pos:line="128" pos:column="8">sa4<pos:position pos:line="128" pos:column="11"/></name><operator pos:line="128" pos:column="11">.<pos:position pos:line="128" pos:column="12"/></operator><name pos:line="128" pos:column="12">sin_family<pos:position pos:line="128" pos:column="22"/></name></name> <operator pos:line="128" pos:column="23">=<pos:position pos:line="128" pos:column="24"/></operator> <name pos:line="128" pos:column="25">AF_INET<pos:position pos:line="128" pos:column="32"/></name></expr>;<pos:position pos:line="128" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="129" pos:column="5">me<pos:position pos:line="129" pos:column="7"/></name><operator pos:line="129" pos:column="7">.<pos:position pos:line="129" pos:column="8"/></operator><name pos:line="129" pos:column="8">sa4<pos:position pos:line="129" pos:column="11"/></name><operator pos:line="129" pos:column="11">.<pos:position pos:line="129" pos:column="12"/></operator><name pos:line="129" pos:column="12">sin_addr<pos:position pos:line="129" pos:column="20"/></name><operator pos:line="129" pos:column="20">.<pos:position pos:line="129" pos:column="21"/></operator><name pos:line="129" pos:column="21">s_addr<pos:position pos:line="129" pos:column="27"/></name></name> <operator pos:line="129" pos:column="28">=<pos:position pos:line="129" pos:column="29"/></operator> <name pos:line="129" pos:column="30">INADDR_ANY<pos:position pos:line="129" pos:column="40"/></name></expr>;<pos:position pos:line="129" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="130" pos:column="5">me<pos:position pos:line="130" pos:column="7"/></name><operator pos:line="130" pos:column="7">.<pos:position pos:line="130" pos:column="8"/></operator><name pos:line="130" pos:column="8">sa4<pos:position pos:line="130" pos:column="11"/></name><operator pos:line="130" pos:column="11">.<pos:position pos:line="130" pos:column="12"/></operator><name pos:line="130" pos:column="12">sin_port<pos:position pos:line="130" pos:column="20"/></name></name> <operator pos:line="130" pos:column="21">=<pos:position pos:line="130" pos:column="22"/></operator> <call><name pos:line="130" pos:column="23">htons<pos:position pos:line="130" pos:column="28"/></name><argument_list pos:line="130" pos:column="28">(<argument><expr><name pos:line="130" pos:column="29">port<pos:position pos:line="130" pos:column="33"/></name></expr></argument>)<pos:position pos:line="130" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="131" pos:column="5">rc<pos:position pos:line="131" pos:column="7"/></name> <operator pos:line="131" pos:column="8">=<pos:position pos:line="131" pos:column="9"/></operator> <call><name pos:line="131" pos:column="10">bind<pos:position pos:line="131" pos:column="14"/></name><argument_list pos:line="131" pos:column="14">(<argument><expr><name pos:line="131" pos:column="15">sock<pos:position pos:line="131" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="21">&amp;<pos:position pos:line="131" pos:column="26"/></operator><name><name pos:line="131" pos:column="22">me<pos:position pos:line="131" pos:column="24"/></name><operator pos:line="131" pos:column="24">.<pos:position pos:line="131" pos:column="25"/></operator><name pos:line="131" pos:column="25">sa<pos:position pos:line="131" pos:column="27"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="131" pos:column="29">sizeof<argument_list pos:line="131" pos:column="35">(<argument><expr><name><name pos:line="131" pos:column="36">me<pos:position pos:line="131" pos:column="38"/></name><operator pos:line="131" pos:column="38">.<pos:position pos:line="131" pos:column="39"/></operator><name pos:line="131" pos:column="39">sa4<pos:position pos:line="131" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="131" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="45"/></expr_stmt>
<cpp:ifdef pos:line="132" pos:column="1">#<cpp:directive pos:line="132" pos:column="2">ifdef<pos:position pos:line="132" pos:column="7"/></cpp:directive> <name pos:line="132" pos:column="8">ENABLE_IPV6<pos:position pos:line="132" pos:column="19"/></name></cpp:ifdef>
  }<pos:position pos:line="133" pos:column="4"/></block></then>
  <else pos:line="134" pos:column="3">else <block pos:line="134" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">memset<pos:position pos:line="135" pos:column="11"/></name><argument_list pos:line="135" pos:column="11">(<argument><expr><operator pos:line="135" pos:column="12">&amp;<pos:position pos:line="135" pos:column="17"/></operator><name><name pos:line="135" pos:column="13">me<pos:position pos:line="135" pos:column="15"/></name><operator pos:line="135" pos:column="15">.<pos:position pos:line="135" pos:column="16"/></operator><name pos:line="135" pos:column="16">sa6<pos:position pos:line="135" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="135" pos:column="21">0<pos:position pos:line="135" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="135" pos:column="24">sizeof<argument_list pos:line="135" pos:column="30">(<argument><expr><name><name pos:line="135" pos:column="31">me<pos:position pos:line="135" pos:column="33"/></name><operator pos:line="135" pos:column="33">.<pos:position pos:line="135" pos:column="34"/></operator><name pos:line="135" pos:column="34">sa6<pos:position pos:line="135" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="135" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="136" pos:column="5">me<pos:position pos:line="136" pos:column="7"/></name><operator pos:line="136" pos:column="7">.<pos:position pos:line="136" pos:column="8"/></operator><name pos:line="136" pos:column="8">sa6<pos:position pos:line="136" pos:column="11"/></name><operator pos:line="136" pos:column="11">.<pos:position pos:line="136" pos:column="12"/></operator><name pos:line="136" pos:column="12">sin6_family<pos:position pos:line="136" pos:column="23"/></name></name> <operator pos:line="136" pos:column="24">=<pos:position pos:line="136" pos:column="25"/></operator> <name pos:line="136" pos:column="26">AF_INET6<pos:position pos:line="136" pos:column="34"/></name></expr>;<pos:position pos:line="136" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="137" pos:column="5">me<pos:position pos:line="137" pos:column="7"/></name><operator pos:line="137" pos:column="7">.<pos:position pos:line="137" pos:column="8"/></operator><name pos:line="137" pos:column="8">sa6<pos:position pos:line="137" pos:column="11"/></name><operator pos:line="137" pos:column="11">.<pos:position pos:line="137" pos:column="12"/></operator><name pos:line="137" pos:column="12">sin6_addr<pos:position pos:line="137" pos:column="21"/></name></name> <operator pos:line="137" pos:column="22">=<pos:position pos:line="137" pos:column="23"/></operator> <name pos:line="137" pos:column="24">in6addr_any<pos:position pos:line="137" pos:column="35"/></name></expr>;<pos:position pos:line="137" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="138" pos:column="5">me<pos:position pos:line="138" pos:column="7"/></name><operator pos:line="138" pos:column="7">.<pos:position pos:line="138" pos:column="8"/></operator><name pos:line="138" pos:column="8">sa6<pos:position pos:line="138" pos:column="11"/></name><operator pos:line="138" pos:column="11">.<pos:position pos:line="138" pos:column="12"/></operator><name pos:line="138" pos:column="12">sin6_port<pos:position pos:line="138" pos:column="21"/></name></name> <operator pos:line="138" pos:column="22">=<pos:position pos:line="138" pos:column="23"/></operator> <call><name pos:line="138" pos:column="24">htons<pos:position pos:line="138" pos:column="29"/></name><argument_list pos:line="138" pos:column="29">(<argument><expr><name pos:line="138" pos:column="30">port<pos:position pos:line="138" pos:column="34"/></name></expr></argument>)<pos:position pos:line="138" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="139" pos:column="5">rc<pos:position pos:line="139" pos:column="7"/></name> <operator pos:line="139" pos:column="8">=<pos:position pos:line="139" pos:column="9"/></operator> <call><name pos:line="139" pos:column="10">bind<pos:position pos:line="139" pos:column="14"/></name><argument_list pos:line="139" pos:column="14">(<argument><expr><name pos:line="139" pos:column="15">sock<pos:position pos:line="139" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="139" pos:column="21">&amp;<pos:position pos:line="139" pos:column="26"/></operator><name><name pos:line="139" pos:column="22">me<pos:position pos:line="139" pos:column="24"/></name><operator pos:line="139" pos:column="24">.<pos:position pos:line="139" pos:column="25"/></operator><name pos:line="139" pos:column="25">sa<pos:position pos:line="139" pos:column="27"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="139" pos:column="29">sizeof<argument_list pos:line="139" pos:column="35">(<argument><expr><name><name pos:line="139" pos:column="36">me<pos:position pos:line="139" pos:column="38"/></name><operator pos:line="139" pos:column="38">.<pos:position pos:line="139" pos:column="39"/></operator><name pos:line="139" pos:column="39">sa6<pos:position pos:line="139" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="139" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="139" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="140" pos:column="4"/></block></else></if>
<cpp:endif pos:line="141" pos:column="1">#<cpp:directive pos:line="141" pos:column="2">endif<pos:position pos:line="141" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="141" pos:column="8">/* ENABLE_IPV6 */</comment>
  <if pos:line="142" pos:column="3">if<condition pos:line="142" pos:column="5">(<expr><literal type="number" pos:line="142" pos:column="6">0<pos:position pos:line="142" pos:column="7"/></literal> <operator pos:line="142" pos:column="8">!=<pos:position pos:line="142" pos:column="10"/></operator> <name pos:line="142" pos:column="11">rc<pos:position pos:line="142" pos:column="13"/></name></expr>)<pos:position pos:line="142" pos:column="14"/></condition><then pos:line="142" pos:column="14"> <block pos:line="142" pos:column="15">{
    <expr_stmt><expr><name pos:line="143" pos:column="5">error<pos:position pos:line="143" pos:column="10"/></name> <operator pos:line="143" pos:column="11">=<pos:position pos:line="143" pos:column="12"/></operator> <name pos:line="143" pos:column="13">SOCKERRNO<pos:position pos:line="143" pos:column="22"/></name></expr>;<pos:position pos:line="143" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="144" pos:column="5">logmsg<pos:position pos:line="144" pos:column="11"/></name><argument_list pos:line="144" pos:column="11">(<argument><expr><literal type="string" pos:line="144" pos:column="12">"Error binding socket on port %hu: (%d) %s"<pos:position pos:line="144" pos:column="55"/></literal></expr></argument>,
           <argument><expr><name pos:line="145" pos:column="12">port<pos:position pos:line="145" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="18">error<pos:position pos:line="145" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="145" pos:column="25">strerror<pos:position pos:line="145" pos:column="33"/></name><argument_list pos:line="145" pos:column="33">(<argument><expr><name pos:line="145" pos:column="34">error<pos:position pos:line="145" pos:column="39"/></name></expr></argument>)<pos:position pos:line="145" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="145" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="42"/></expr_stmt>
    <goto pos:line="146" pos:column="5">goto <name pos:line="146" pos:column="10">server_cleanup<pos:position pos:line="146" pos:column="24"/></name>;<pos:position pos:line="146" pos:column="25"/></goto>
  }<pos:position pos:line="147" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="149" pos:column="3">logmsg<pos:position pos:line="149" pos:column="9"/></name><argument_list pos:line="149" pos:column="9">(<argument><expr><literal type="string" pos:line="149" pos:column="10">"Running %s version on port %d"<pos:position pos:line="149" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="149" pos:column="43">ipv_inuse<pos:position pos:line="149" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="149" pos:column="54">(<pos:position pos:line="149" pos:column="55"/></operator><name pos:line="149" pos:column="55">int<pos:position pos:line="149" pos:column="58"/></name><operator pos:line="149" pos:column="58">)<pos:position pos:line="149" pos:column="59"/></operator><name pos:line="149" pos:column="59">port<pos:position pos:line="149" pos:column="63"/></name></expr></argument>)<pos:position pos:line="149" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="65"/></expr_stmt>

  <comment type="block" pos:line="151" pos:column="3">/* start accepting connections */</comment>
  <expr_stmt><expr><name pos:line="152" pos:column="3">rc<pos:position pos:line="152" pos:column="5"/></name> <operator pos:line="152" pos:column="6">=<pos:position pos:line="152" pos:column="7"/></operator> <call><name pos:line="152" pos:column="8">listen<pos:position pos:line="152" pos:column="14"/></name><argument_list pos:line="152" pos:column="14">(<argument><expr><name pos:line="152" pos:column="15">sock<pos:position pos:line="152" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="152" pos:column="21">5<pos:position pos:line="152" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="24"/></expr_stmt>
  <if pos:line="153" pos:column="3">if<condition pos:line="153" pos:column="5">(<expr><literal type="number" pos:line="153" pos:column="6">0<pos:position pos:line="153" pos:column="7"/></literal> <operator pos:line="153" pos:column="8">!=<pos:position pos:line="153" pos:column="10"/></operator> <name pos:line="153" pos:column="11">rc<pos:position pos:line="153" pos:column="13"/></name></expr>)<pos:position pos:line="153" pos:column="14"/></condition><then pos:line="153" pos:column="14"> <block pos:line="153" pos:column="15">{
    <expr_stmt><expr><name pos:line="154" pos:column="5">error<pos:position pos:line="154" pos:column="10"/></name> <operator pos:line="154" pos:column="11">=<pos:position pos:line="154" pos:column="12"/></operator> <name pos:line="154" pos:column="13">SOCKERRNO<pos:position pos:line="154" pos:column="22"/></name></expr>;<pos:position pos:line="154" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="155" pos:column="5">logmsg<pos:position pos:line="155" pos:column="11"/></name><argument_list pos:line="155" pos:column="11">(<argument><expr><literal type="string" pos:line="155" pos:column="12">"listen() failed with error: (%d) %s"<pos:position pos:line="155" pos:column="49"/></literal></expr></argument>,
           <argument><expr><name pos:line="156" pos:column="12">error<pos:position pos:line="156" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="156" pos:column="19">strerror<pos:position pos:line="156" pos:column="27"/></name><argument_list pos:line="156" pos:column="27">(<argument><expr><name pos:line="156" pos:column="28">error<pos:position pos:line="156" pos:column="33"/></name></expr></argument>)<pos:position pos:line="156" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="156" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="36"/></expr_stmt>
    <goto pos:line="157" pos:column="5">goto <name pos:line="157" pos:column="10">server_cleanup<pos:position pos:line="157" pos:column="24"/></name>;<pos:position pos:line="157" pos:column="25"/></goto>
  }<pos:position pos:line="158" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="160" pos:column="3">/*
  ** As soon as this server writes its pid file the test harness will
  ** attempt to connect to this server and initiate its verification.
  */</comment>

  <expr_stmt><expr><name pos:line="165" pos:column="3">wrotepidfile<pos:position pos:line="165" pos:column="15"/></name> <operator pos:line="165" pos:column="16">=<pos:position pos:line="165" pos:column="17"/></operator> <call><name pos:line="165" pos:column="18">write_pidfile<pos:position pos:line="165" pos:column="31"/></name><argument_list pos:line="165" pos:column="31">(<argument><expr><name pos:line="165" pos:column="32">pidname<pos:position pos:line="165" pos:column="39"/></name></expr></argument>)<pos:position pos:line="165" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="41"/></expr_stmt>
  <if pos:line="166" pos:column="3">if<condition pos:line="166" pos:column="5">(<expr><operator pos:line="166" pos:column="6">!<pos:position pos:line="166" pos:column="7"/></operator><name pos:line="166" pos:column="7">wrotepidfile<pos:position pos:line="166" pos:column="19"/></name></expr>)<pos:position pos:line="166" pos:column="20"/></condition><then pos:line="166" pos:column="20">
    <block type="pseudo"><goto pos:line="167" pos:column="5">goto <name pos:line="167" pos:column="10">server_cleanup<pos:position pos:line="167" pos:column="24"/></name>;<pos:position pos:line="167" pos:column="25"/></goto></block></then></if>

  <for pos:line="169" pos:column="3">for<control pos:line="169" pos:column="6">(<init pos:line="169" pos:column="7">;<pos:position pos:line="169" pos:column="8"/></init><condition pos:line="169" pos:column="8">;<pos:position pos:line="169" pos:column="9"/></condition><incr/>)<pos:position pos:line="169" pos:column="10"/></control> <block pos:line="169" pos:column="11">{
    <expr_stmt><expr><name pos:line="170" pos:column="5">msgsock<pos:position pos:line="170" pos:column="12"/></name> <operator pos:line="170" pos:column="13">=<pos:position pos:line="170" pos:column="14"/></operator> <call><name pos:line="170" pos:column="15">accept<pos:position pos:line="170" pos:column="21"/></name><argument_list pos:line="170" pos:column="21">(<argument><expr><name pos:line="170" pos:column="22">sock<pos:position pos:line="170" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="28">NULL<pos:position pos:line="170" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="34">NULL<pos:position pos:line="170" pos:column="38"/></name></expr></argument>)<pos:position pos:line="170" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="40"/></expr_stmt>

    <if pos:line="172" pos:column="5">if<condition pos:line="172" pos:column="7">(<expr><name pos:line="172" pos:column="8">got_exit_signal<pos:position pos:line="172" pos:column="23"/></name></expr>)<pos:position pos:line="172" pos:column="24"/></condition><then pos:line="172" pos:column="24">
      <block type="pseudo"><break pos:line="173" pos:column="7">break;<pos:position pos:line="173" pos:column="13"/></break></block></then></if>
    <if pos:line="174" pos:column="5">if<condition pos:line="174" pos:column="7">(<expr><name pos:line="174" pos:column="8">CURL_SOCKET_BAD<pos:position pos:line="174" pos:column="23"/></name> <operator pos:line="174" pos:column="24">==<pos:position pos:line="174" pos:column="26"/></operator> <name pos:line="174" pos:column="27">msgsock<pos:position pos:line="174" pos:column="34"/></name></expr>)<pos:position pos:line="174" pos:column="35"/></condition><then pos:line="174" pos:column="35"> <block pos:line="174" pos:column="36">{
      <expr_stmt><expr><name pos:line="175" pos:column="7">error<pos:position pos:line="175" pos:column="12"/></name> <operator pos:line="175" pos:column="13">=<pos:position pos:line="175" pos:column="14"/></operator> <name pos:line="175" pos:column="15">SOCKERRNO<pos:position pos:line="175" pos:column="24"/></name></expr>;<pos:position pos:line="175" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="176" pos:column="7">logmsg<pos:position pos:line="176" pos:column="13"/></name><argument_list pos:line="176" pos:column="13">(<argument><expr><literal type="string" pos:line="176" pos:column="14">"MAJOR ERROR: accept() failed with error: (%d) %s"<pos:position pos:line="176" pos:column="64"/></literal></expr></argument>,
             <argument><expr><name pos:line="177" pos:column="14">error<pos:position pos:line="177" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="177" pos:column="21">strerror<pos:position pos:line="177" pos:column="29"/></name><argument_list pos:line="177" pos:column="29">(<argument><expr><name pos:line="177" pos:column="30">error<pos:position pos:line="177" pos:column="35"/></name></expr></argument>)<pos:position pos:line="177" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="177" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="38"/></expr_stmt>
      <break pos:line="178" pos:column="7">break;<pos:position pos:line="178" pos:column="13"/></break>
    }<pos:position pos:line="179" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="181" pos:column="5">/*
    ** As soon as this server acepts a connection from the test harness it
    ** must set the server logs advisor read lock to indicate that server
    ** logs should not be read until this lock is removed by this server.
    */</comment>

    <expr_stmt><expr><call><name pos:line="187" pos:column="5">set_advisor_read_lock<pos:position pos:line="187" pos:column="26"/></name><argument_list pos:line="187" pos:column="26">(<argument><expr><name pos:line="187" pos:column="27">SERVERLOGS_LOCK<pos:position pos:line="187" pos:column="42"/></name></expr></argument>)<pos:position pos:line="187" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="188" pos:column="5">serverlogslocked<pos:position pos:line="188" pos:column="21"/></name> <operator pos:line="188" pos:column="22">=<pos:position pos:line="188" pos:column="23"/></operator> <literal type="number" pos:line="188" pos:column="24">1<pos:position pos:line="188" pos:column="25"/></literal></expr>;<pos:position pos:line="188" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="190" pos:column="5">logmsg<pos:position pos:line="190" pos:column="11"/></name><argument_list pos:line="190" pos:column="11">(<argument><expr><literal type="string" pos:line="190" pos:column="12">"====&gt; Client connect"<pos:position pos:line="190" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="36"/></expr_stmt>

<cpp:ifdef pos:line="192" pos:column="1">#<cpp:directive pos:line="192" pos:column="2">ifdef<pos:position pos:line="192" pos:column="7"/></cpp:directive> <name pos:line="192" pos:column="8">TCP_NODELAY<pos:position pos:line="192" pos:column="19"/></name></cpp:ifdef>
    <comment type="block" pos:line="193" pos:column="5">/*
     * Disable the Nagle algorithm to make it easier to send out a large
     * response in many small segments to torture the clients more.
     */</comment>
    <expr_stmt><expr><name pos:line="197" pos:column="5">flag<pos:position pos:line="197" pos:column="9"/></name> <operator pos:line="197" pos:column="10">=<pos:position pos:line="197" pos:column="11"/></operator> <literal type="number" pos:line="197" pos:column="12">1<pos:position pos:line="197" pos:column="13"/></literal></expr>;<pos:position pos:line="197" pos:column="14"/></expr_stmt>
    <if pos:line="198" pos:column="5">if<condition pos:line="198" pos:column="7">(<expr><call><name pos:line="198" pos:column="8">setsockopt<pos:position pos:line="198" pos:column="18"/></name><argument_list pos:line="198" pos:column="18">(<argument><expr><name pos:line="198" pos:column="19">msgsock<pos:position pos:line="198" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="28">IPPROTO_TCP<pos:position pos:line="198" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="41">TCP_NODELAY<pos:position pos:line="198" pos:column="52"/></name></expr></argument>,
                   <argument><expr><operator pos:line="199" pos:column="20">(<pos:position pos:line="199" pos:column="21"/></operator><name pos:line="199" pos:column="21">void<pos:position pos:line="199" pos:column="25"/></name> <operator pos:line="199" pos:column="26">*<pos:position pos:line="199" pos:column="27"/></operator><operator pos:line="199" pos:column="27">)<pos:position pos:line="199" pos:column="28"/></operator><operator pos:line="199" pos:column="28">&amp;<pos:position pos:line="199" pos:column="33"/></operator><name pos:line="199" pos:column="29">flag<pos:position pos:line="199" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="199" pos:column="35">sizeof<argument_list pos:line="199" pos:column="41">(<argument><expr><name pos:line="199" pos:column="42">flag<pos:position pos:line="199" pos:column="46"/></name></expr></argument>)<pos:position pos:line="199" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="199" pos:column="48"/></argument_list></call> <operator pos:line="199" pos:column="49">==<pos:position pos:line="199" pos:column="51"/></operator> <operator pos:line="199" pos:column="52">-<pos:position pos:line="199" pos:column="53"/></operator><literal type="number" pos:line="199" pos:column="53">1<pos:position pos:line="199" pos:column="54"/></literal></expr>)<pos:position pos:line="199" pos:column="55"/></condition><then pos:line="199" pos:column="55"> <block pos:line="199" pos:column="56">{
      <expr_stmt><expr><call><name pos:line="200" pos:column="7">logmsg<pos:position pos:line="200" pos:column="13"/></name><argument_list pos:line="200" pos:column="13">(<argument><expr><literal type="string" pos:line="200" pos:column="14">"====&gt; TCP_NODELAY failed"<pos:position pos:line="200" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="200" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="201" pos:column="6"/></block></then></if>
<cpp:endif pos:line="202" pos:column="1">#<cpp:directive pos:line="202" pos:column="2">endif<pos:position pos:line="202" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="204" pos:column="5">/* initialization of httprequest struct is done in get_request(), but due
       to pipelining treatment the pipelining struct field must be initialized
       previously to FALSE every time a new connection arrives. */</comment>

    <expr_stmt><expr><name><name pos:line="208" pos:column="5">req<pos:position pos:line="208" pos:column="8"/></name><operator pos:line="208" pos:column="8">.<pos:position pos:line="208" pos:column="9"/></operator><name pos:line="208" pos:column="9">pipelining<pos:position pos:line="208" pos:column="19"/></name></name> <operator pos:line="208" pos:column="20">=<pos:position pos:line="208" pos:column="21"/></operator> <name pos:line="208" pos:column="22">FALSE<pos:position pos:line="208" pos:column="27"/></name></expr>;<pos:position pos:line="208" pos:column="28"/></expr_stmt>

    <do pos:line="210" pos:column="5">do <block pos:line="210" pos:column="8">{
      <if pos:line="211" pos:column="7">if<condition pos:line="211" pos:column="9">(<expr><name pos:line="211" pos:column="10">got_exit_signal<pos:position pos:line="211" pos:column="25"/></name></expr>)<pos:position pos:line="211" pos:column="26"/></condition><then pos:line="211" pos:column="26">
        <block type="pseudo"><break pos:line="212" pos:column="9">break;<pos:position pos:line="212" pos:column="15"/></break></block></then></if>

      <if pos:line="214" pos:column="7">if<condition pos:line="214" pos:column="9">(<expr><call><name pos:line="214" pos:column="10">get_request<pos:position pos:line="214" pos:column="21"/></name><argument_list pos:line="214" pos:column="21">(<argument><expr><name pos:line="214" pos:column="22">msgsock<pos:position pos:line="214" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="214" pos:column="31">&amp;<pos:position pos:line="214" pos:column="36"/></operator><name pos:line="214" pos:column="32">req<pos:position pos:line="214" pos:column="35"/></name></expr></argument>)<pos:position pos:line="214" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="214" pos:column="37"/></condition><then pos:line="214" pos:column="37">
        <comment type="block" pos:line="215" pos:column="9">/* non-zero means error, break out of loop */</comment>
        <block type="pseudo"><break pos:line="216" pos:column="9">break;<pos:position pos:line="216" pos:column="15"/></break></block></then></if>

      <if pos:line="218" pos:column="7">if<condition pos:line="218" pos:column="9">(<expr><name pos:line="218" pos:column="10">prevbounce<pos:position pos:line="218" pos:column="20"/></name></expr>)<pos:position pos:line="218" pos:column="21"/></condition><then pos:line="218" pos:column="21"> <block pos:line="218" pos:column="22">{
        <comment type="block" pos:line="219" pos:column="9">/* bounce treatment requested */</comment>
        <if pos:line="220" pos:column="9">if<condition pos:line="220" pos:column="11">(<expr><operator pos:line="220" pos:column="12">(<pos:position pos:line="220" pos:column="13"/></operator><name><name pos:line="220" pos:column="13">req<pos:position pos:line="220" pos:column="16"/></name><operator pos:line="220" pos:column="16">.<pos:position pos:line="220" pos:column="17"/></operator><name pos:line="220" pos:column="17">testno<pos:position pos:line="220" pos:column="23"/></name></name> <operator pos:line="220" pos:column="24">==<pos:position pos:line="220" pos:column="26"/></operator> <name pos:line="220" pos:column="27">prevtestno<pos:position pos:line="220" pos:column="37"/></name><operator pos:line="220" pos:column="37">)<pos:position pos:line="220" pos:column="38"/></operator> <operator pos:line="220" pos:column="39">&amp;&amp;<pos:position pos:line="220" pos:column="49"/></operator>
           <operator pos:line="221" pos:column="12">(<pos:position pos:line="221" pos:column="13"/></operator><name><name pos:line="221" pos:column="13">req<pos:position pos:line="221" pos:column="16"/></name><operator pos:line="221" pos:column="16">.<pos:position pos:line="221" pos:column="17"/></operator><name pos:line="221" pos:column="17">partno<pos:position pos:line="221" pos:column="23"/></name></name> <operator pos:line="221" pos:column="24">==<pos:position pos:line="221" pos:column="26"/></operator> <name pos:line="221" pos:column="27">prevpartno<pos:position pos:line="221" pos:column="37"/></name><operator pos:line="221" pos:column="37">)<pos:position pos:line="221" pos:column="38"/></operator></expr>)<pos:position pos:line="221" pos:column="39"/></condition><then pos:line="221" pos:column="39"> <block pos:line="221" pos:column="40">{
          <expr_stmt><expr><name><name pos:line="222" pos:column="11">req<pos:position pos:line="222" pos:column="14"/></name><operator pos:line="222" pos:column="14">.<pos:position pos:line="222" pos:column="15"/></operator><name pos:line="222" pos:column="15">partno<pos:position pos:line="222" pos:column="21"/></name></name><operator pos:line="222" pos:column="21">++<pos:position pos:line="222" pos:column="23"/></operator></expr>;<pos:position pos:line="222" pos:column="24"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="223" pos:column="11">logmsg<pos:position pos:line="223" pos:column="17"/></name><argument_list pos:line="223" pos:column="17">(<argument><expr><literal type="string" pos:line="223" pos:column="18">"BOUNCE part number to %ld"<pos:position pos:line="223" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="223" pos:column="47">req<pos:position pos:line="223" pos:column="50"/></name><operator pos:line="223" pos:column="50">.<pos:position pos:line="223" pos:column="51"/></operator><name pos:line="223" pos:column="51">partno<pos:position pos:line="223" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="223" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="224" pos:column="10"/></block></then>
        <else pos:line="225" pos:column="9">else <block pos:line="225" pos:column="14">{
          <expr_stmt><expr><name pos:line="226" pos:column="11">prevbounce<pos:position pos:line="226" pos:column="21"/></name> <operator pos:line="226" pos:column="22">=<pos:position pos:line="226" pos:column="23"/></operator> <name pos:line="226" pos:column="24">FALSE<pos:position pos:line="226" pos:column="29"/></name></expr>;<pos:position pos:line="226" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><name pos:line="227" pos:column="11">prevtestno<pos:position pos:line="227" pos:column="21"/></name> <operator pos:line="227" pos:column="22">=<pos:position pos:line="227" pos:column="23"/></operator> <operator pos:line="227" pos:column="24">-<pos:position pos:line="227" pos:column="25"/></operator><literal type="number" pos:line="227" pos:column="25">1<pos:position pos:line="227" pos:column="26"/></literal></expr>;<pos:position pos:line="227" pos:column="27"/></expr_stmt>
          <expr_stmt><expr><name pos:line="228" pos:column="11">prevpartno<pos:position pos:line="228" pos:column="21"/></name> <operator pos:line="228" pos:column="22">=<pos:position pos:line="228" pos:column="23"/></operator> <operator pos:line="228" pos:column="24">-<pos:position pos:line="228" pos:column="25"/></operator><literal type="number" pos:line="228" pos:column="25">1<pos:position pos:line="228" pos:column="26"/></literal></expr>;<pos:position pos:line="228" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="229" pos:column="10"/></block></else></if>
      }<pos:position pos:line="230" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="232" pos:column="7">send_doc<pos:position pos:line="232" pos:column="15"/></name><argument_list pos:line="232" pos:column="15">(<argument><expr><name pos:line="232" pos:column="16">msgsock<pos:position pos:line="232" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="232" pos:column="25">&amp;<pos:position pos:line="232" pos:column="30"/></operator><name pos:line="232" pos:column="26">req<pos:position pos:line="232" pos:column="29"/></name></expr></argument>)<pos:position pos:line="232" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="31"/></expr_stmt>
      <if pos:line="233" pos:column="7">if<condition pos:line="233" pos:column="9">(<expr><name pos:line="233" pos:column="10">got_exit_signal<pos:position pos:line="233" pos:column="25"/></name></expr>)<pos:position pos:line="233" pos:column="26"/></condition><then pos:line="233" pos:column="26">
        <block type="pseudo"><break pos:line="234" pos:column="9">break;<pos:position pos:line="234" pos:column="15"/></break></block></then></if>

      <if pos:line="236" pos:column="7">if<condition pos:line="236" pos:column="9">(<expr><operator pos:line="236" pos:column="10">(<pos:position pos:line="236" pos:column="11"/></operator><name><name pos:line="236" pos:column="11">req<pos:position pos:line="236" pos:column="14"/></name><operator pos:line="236" pos:column="14">.<pos:position pos:line="236" pos:column="15"/></operator><name pos:line="236" pos:column="15">testno<pos:position pos:line="236" pos:column="21"/></name></name> <operator pos:line="236" pos:column="22">&lt;<pos:position pos:line="236" pos:column="26"/></operator> <literal type="number" pos:line="236" pos:column="24">0<pos:position pos:line="236" pos:column="25"/></literal><operator pos:line="236" pos:column="25">)<pos:position pos:line="236" pos:column="26"/></operator> <operator pos:line="236" pos:column="27">&amp;&amp;<pos:position pos:line="236" pos:column="37"/></operator> <operator pos:line="236" pos:column="30">(<pos:position pos:line="236" pos:column="31"/></operator><name><name pos:line="236" pos:column="31">req<pos:position pos:line="236" pos:column="34"/></name><operator pos:line="236" pos:column="34">.<pos:position pos:line="236" pos:column="35"/></operator><name pos:line="236" pos:column="35">testno<pos:position pos:line="236" pos:column="41"/></name></name> <operator pos:line="236" pos:column="42">!=<pos:position pos:line="236" pos:column="44"/></operator> <name pos:line="236" pos:column="45">DOCNUMBER_CONNECT<pos:position pos:line="236" pos:column="62"/></name><operator pos:line="236" pos:column="62">)<pos:position pos:line="236" pos:column="63"/></operator></expr>)<pos:position pos:line="236" pos:column="64"/></condition><then pos:line="236" pos:column="64"> <block pos:line="236" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="237" pos:column="9">logmsg<pos:position pos:line="237" pos:column="15"/></name><argument_list pos:line="237" pos:column="15">(<argument><expr><literal type="string" pos:line="237" pos:column="16">"special request received, no persistency"<pos:position pos:line="237" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="237" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="60"/></expr_stmt>
        <break pos:line="238" pos:column="9">break;<pos:position pos:line="238" pos:column="15"/></break>
      }<pos:position pos:line="239" pos:column="8"/></block></then></if>
      <if pos:line="240" pos:column="7">if<condition pos:line="240" pos:column="9">(<expr><operator pos:line="240" pos:column="10">!<pos:position pos:line="240" pos:column="11"/></operator><name><name pos:line="240" pos:column="11">req<pos:position pos:line="240" pos:column="14"/></name><operator pos:line="240" pos:column="14">.<pos:position pos:line="240" pos:column="15"/></operator><name pos:line="240" pos:column="15">open<pos:position pos:line="240" pos:column="19"/></name></name></expr>)<pos:position pos:line="240" pos:column="20"/></condition><then pos:line="240" pos:column="20"> <block pos:line="240" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="241" pos:column="9">logmsg<pos:position pos:line="241" pos:column="15"/></name><argument_list pos:line="241" pos:column="15">(<argument><expr><literal type="string" pos:line="241" pos:column="16">"instructed to close connection after server-reply"<pos:position pos:line="241" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="241" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="69"/></expr_stmt>
        <break pos:line="242" pos:column="9">break;<pos:position pos:line="242" pos:column="15"/></break>
      }<pos:position pos:line="243" pos:column="8"/></block></then></if>

      <if pos:line="245" pos:column="7">if<condition pos:line="245" pos:column="9">(<expr><name><name pos:line="245" pos:column="10">req<pos:position pos:line="245" pos:column="13"/></name><operator pos:line="245" pos:column="13">.<pos:position pos:line="245" pos:column="14"/></operator><name pos:line="245" pos:column="14">open<pos:position pos:line="245" pos:column="18"/></name></name></expr>)<pos:position pos:line="245" pos:column="19"/></condition><then pos:line="245" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="246" pos:column="9">logmsg<pos:position pos:line="246" pos:column="15"/></name><argument_list pos:line="246" pos:column="15">(<argument><expr><literal type="string" pos:line="246" pos:column="16">"=&gt; persistant connection request ended, awaits new request"<pos:position pos:line="246" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="78"/></expr_stmt></block></then></if>
      <comment type="block" pos:line="247" pos:column="7">/* if we got a CONNECT, loop and get another request as well! */</comment>
    }<pos:position pos:line="248" pos:column="6"/></block> while<condition pos:line="248" pos:column="12">(<expr><name><name pos:line="248" pos:column="13">req<pos:position pos:line="248" pos:column="16"/></name><operator pos:line="248" pos:column="16">.<pos:position pos:line="248" pos:column="17"/></operator><name pos:line="248" pos:column="17">open<pos:position pos:line="248" pos:column="21"/></name></name> <operator pos:line="248" pos:column="22">||<pos:position pos:line="248" pos:column="24"/></operator> <operator pos:line="248" pos:column="25">(<pos:position pos:line="248" pos:column="26"/></operator><name><name pos:line="248" pos:column="26">req<pos:position pos:line="248" pos:column="29"/></name><operator pos:line="248" pos:column="29">.<pos:position pos:line="248" pos:column="30"/></operator><name pos:line="248" pos:column="30">testno<pos:position pos:line="248" pos:column="36"/></name></name> <operator pos:line="248" pos:column="37">==<pos:position pos:line="248" pos:column="39"/></operator> <name pos:line="248" pos:column="40">DOCNUMBER_CONNECT<pos:position pos:line="248" pos:column="57"/></name><operator pos:line="248" pos:column="57">)<pos:position pos:line="248" pos:column="58"/></operator></expr>)<pos:position pos:line="248" pos:column="59"/></condition>;<pos:position pos:line="248" pos:column="60"/></do>

    <if pos:line="250" pos:column="5">if<condition pos:line="250" pos:column="7">(<expr><name pos:line="250" pos:column="8">got_exit_signal<pos:position pos:line="250" pos:column="23"/></name></expr>)<pos:position pos:line="250" pos:column="24"/></condition><then pos:line="250" pos:column="24">
      <block type="pseudo"><break pos:line="251" pos:column="7">break;<pos:position pos:line="251" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><call><name pos:line="253" pos:column="5">logmsg<pos:position pos:line="253" pos:column="11"/></name><argument_list pos:line="253" pos:column="11">(<argument><expr><literal type="string" pos:line="253" pos:column="12">"====&gt; Client disconnect"<pos:position pos:line="253" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="253" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="254" pos:column="5">sclose<pos:position pos:line="254" pos:column="11"/></name><argument_list pos:line="254" pos:column="11">(<argument><expr><name pos:line="254" pos:column="12">msgsock<pos:position pos:line="254" pos:column="19"/></name></expr></argument>)<pos:position pos:line="254" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="255" pos:column="5">msgsock<pos:position pos:line="255" pos:column="12"/></name> <operator pos:line="255" pos:column="13">=<pos:position pos:line="255" pos:column="14"/></operator> <name pos:line="255" pos:column="15">CURL_SOCKET_BAD<pos:position pos:line="255" pos:column="30"/></name></expr>;<pos:position pos:line="255" pos:column="31"/></expr_stmt>

    <if pos:line="257" pos:column="5">if<condition pos:line="257" pos:column="7">(<expr><name pos:line="257" pos:column="8">serverlogslocked<pos:position pos:line="257" pos:column="24"/></name></expr>)<pos:position pos:line="257" pos:column="25"/></condition><then pos:line="257" pos:column="25"> <block pos:line="257" pos:column="26">{
      <expr_stmt><expr><name pos:line="258" pos:column="7">serverlogslocked<pos:position pos:line="258" pos:column="23"/></name> <operator pos:line="258" pos:column="24">=<pos:position pos:line="258" pos:column="25"/></operator> <literal type="number" pos:line="258" pos:column="26">0<pos:position pos:line="258" pos:column="27"/></literal></expr>;<pos:position pos:line="258" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="259" pos:column="7">clear_advisor_read_lock<pos:position pos:line="259" pos:column="30"/></name><argument_list pos:line="259" pos:column="30">(<argument><expr><name pos:line="259" pos:column="31">SERVERLOGS_LOCK<pos:position pos:line="259" pos:column="46"/></name></expr></argument>)<pos:position pos:line="259" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="260" pos:column="6"/></block></then></if>

    <if pos:line="262" pos:column="5">if<condition pos:line="262" pos:column="7">(<expr><name><name pos:line="262" pos:column="8">req<pos:position pos:line="262" pos:column="11"/></name><operator pos:line="262" pos:column="11">.<pos:position pos:line="262" pos:column="12"/></operator><name pos:line="262" pos:column="12">testno<pos:position pos:line="262" pos:column="18"/></name></name> <operator pos:line="262" pos:column="19">==<pos:position pos:line="262" pos:column="21"/></operator> <name pos:line="262" pos:column="22">DOCNUMBER_QUIT<pos:position pos:line="262" pos:column="36"/></name></expr>)<pos:position pos:line="262" pos:column="37"/></condition><then pos:line="262" pos:column="37">
      <block type="pseudo"><break pos:line="263" pos:column="7">break;<pos:position pos:line="263" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="264" pos:column="4"/></block></for>

<label><name pos:line="266" pos:column="1">server_cleanup<pos:position pos:line="266" pos:column="15"/></name>:<pos:position pos:line="266" pos:column="16"/></label>

  <if pos:line="268" pos:column="3">if<condition pos:line="268" pos:column="5">(<expr><operator pos:line="268" pos:column="6">(<pos:position pos:line="268" pos:column="7"/></operator><name pos:line="268" pos:column="7">msgsock<pos:position pos:line="268" pos:column="14"/></name> <operator pos:line="268" pos:column="15">!=<pos:position pos:line="268" pos:column="17"/></operator> <name pos:line="268" pos:column="18">sock<pos:position pos:line="268" pos:column="22"/></name><operator pos:line="268" pos:column="22">)<pos:position pos:line="268" pos:column="23"/></operator> <operator pos:line="268" pos:column="24">&amp;&amp;<pos:position pos:line="268" pos:column="34"/></operator> <operator pos:line="268" pos:column="27">(<pos:position pos:line="268" pos:column="28"/></operator><name pos:line="268" pos:column="28">msgsock<pos:position pos:line="268" pos:column="35"/></name> <operator pos:line="268" pos:column="36">!=<pos:position pos:line="268" pos:column="38"/></operator> <name pos:line="268" pos:column="39">CURL_SOCKET_BAD<pos:position pos:line="268" pos:column="54"/></name><operator pos:line="268" pos:column="54">)<pos:position pos:line="268" pos:column="55"/></operator></expr>)<pos:position pos:line="268" pos:column="56"/></condition><then pos:line="268" pos:column="56">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="269" pos:column="5">sclose<pos:position pos:line="269" pos:column="11"/></name><argument_list pos:line="269" pos:column="11">(<argument><expr><name pos:line="269" pos:column="12">msgsock<pos:position pos:line="269" pos:column="19"/></name></expr></argument>)<pos:position pos:line="269" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="21"/></expr_stmt></block></then></if>

  <if pos:line="271" pos:column="3">if<condition pos:line="271" pos:column="5">(<expr><name pos:line="271" pos:column="6">sock<pos:position pos:line="271" pos:column="10"/></name> <operator pos:line="271" pos:column="11">!=<pos:position pos:line="271" pos:column="13"/></operator> <name pos:line="271" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="271" pos:column="29"/></name></expr>)<pos:position pos:line="271" pos:column="30"/></condition><then pos:line="271" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="272" pos:column="5">sclose<pos:position pos:line="272" pos:column="11"/></name><argument_list pos:line="272" pos:column="11">(<argument><expr><name pos:line="272" pos:column="12">sock<pos:position pos:line="272" pos:column="16"/></name></expr></argument>)<pos:position pos:line="272" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="18"/></expr_stmt></block></then></if>

  <if pos:line="274" pos:column="3">if<condition pos:line="274" pos:column="5">(<expr><name pos:line="274" pos:column="6">got_exit_signal<pos:position pos:line="274" pos:column="21"/></name></expr>)<pos:position pos:line="274" pos:column="22"/></condition><then pos:line="274" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="275" pos:column="5">logmsg<pos:position pos:line="275" pos:column="11"/></name><argument_list pos:line="275" pos:column="11">(<argument><expr><literal type="string" pos:line="275" pos:column="12">"signalled to die"<pos:position pos:line="275" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="275" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="32"/></expr_stmt></block></then></if>

  <if pos:line="277" pos:column="3">if<condition pos:line="277" pos:column="5">(<expr><name pos:line="277" pos:column="6">wrotepidfile<pos:position pos:line="277" pos:column="18"/></name></expr>)<pos:position pos:line="277" pos:column="19"/></condition><then pos:line="277" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="278" pos:column="5">unlink<pos:position pos:line="278" pos:column="11"/></name><argument_list pos:line="278" pos:column="11">(<argument><expr><name pos:line="278" pos:column="12">pidname<pos:position pos:line="278" pos:column="19"/></name></expr></argument>)<pos:position pos:line="278" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="278" pos:column="21"/></expr_stmt></block></then></if>

  <if pos:line="280" pos:column="3">if<condition pos:line="280" pos:column="5">(<expr><name pos:line="280" pos:column="6">serverlogslocked<pos:position pos:line="280" pos:column="22"/></name></expr>)<pos:position pos:line="280" pos:column="23"/></condition><then pos:line="280" pos:column="23"> <block pos:line="280" pos:column="24">{
    <expr_stmt><expr><name pos:line="281" pos:column="5">serverlogslocked<pos:position pos:line="281" pos:column="21"/></name> <operator pos:line="281" pos:column="22">=<pos:position pos:line="281" pos:column="23"/></operator> <literal type="number" pos:line="281" pos:column="24">0<pos:position pos:line="281" pos:column="25"/></literal></expr>;<pos:position pos:line="281" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="282" pos:column="5">clear_advisor_read_lock<pos:position pos:line="282" pos:column="28"/></name><argument_list pos:line="282" pos:column="28">(<argument><expr><name pos:line="282" pos:column="29">SERVERLOGS_LOCK<pos:position pos:line="282" pos:column="44"/></name></expr></argument>)<pos:position pos:line="282" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="282" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="283" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="285" pos:column="3">restore_signal_handlers<pos:position pos:line="285" pos:column="26"/></name><argument_list pos:line="285" pos:column="26">()<pos:position pos:line="285" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="285" pos:column="29"/></expr_stmt>

  <if pos:line="287" pos:column="3">if<condition pos:line="287" pos:column="5">(<expr><name pos:line="287" pos:column="6">got_exit_signal<pos:position pos:line="287" pos:column="21"/></name></expr>)<pos:position pos:line="287" pos:column="22"/></condition><then pos:line="287" pos:column="22"> <block pos:line="287" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="288" pos:column="5">logmsg<pos:position pos:line="288" pos:column="11"/></name><argument_list pos:line="288" pos:column="11">(<argument><expr><literal type="string" pos:line="288" pos:column="12">"========&gt; %s rtspd (port: %d pid: %ld) exits with signal (%d)"<pos:position pos:line="288" pos:column="78"/></literal></expr></argument>,
           <argument><expr><name pos:line="289" pos:column="12">ipv_inuse<pos:position pos:line="289" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="289" pos:column="23">(<pos:position pos:line="289" pos:column="24"/></operator><name pos:line="289" pos:column="24">int<pos:position pos:line="289" pos:column="27"/></name><operator pos:line="289" pos:column="27">)<pos:position pos:line="289" pos:column="28"/></operator><name pos:line="289" pos:column="28">port<pos:position pos:line="289" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="34">pid<pos:position pos:line="289" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="39">exit_signal<pos:position pos:line="289" pos:column="50"/></name></expr></argument>)<pos:position pos:line="289" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="52"/></expr_stmt>
    <comment type="block" pos:line="290" pos:column="5">/*
     * To properly set the return status of the process we
     * must raise the same signal SIGINT or SIGTERM that we
     * caught and let the old handler take care of it.
     */</comment>
    <expr_stmt><expr><call><name pos:line="295" pos:column="5">raise<pos:position pos:line="295" pos:column="10"/></name><argument_list pos:line="295" pos:column="10">(<argument><expr><name pos:line="295" pos:column="11">exit_signal<pos:position pos:line="295" pos:column="22"/></name></expr></argument>)<pos:position pos:line="295" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="295" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="296" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="298" pos:column="3">logmsg<pos:position pos:line="298" pos:column="9"/></name><argument_list pos:line="298" pos:column="9">(<argument><expr><literal type="string" pos:line="298" pos:column="10">"========&gt; rtspd quits"<pos:position pos:line="298" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="298" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="35"/></expr_stmt>
  <return pos:line="299" pos:column="3">return <expr><literal type="number" pos:line="299" pos:column="10">0<pos:position pos:line="299" pos:column="11"/></literal></expr>;<pos:position pos:line="299" pos:column="12"/></return>
}<pos:position pos:line="300" pos:column="2"/></block></function></unit>
