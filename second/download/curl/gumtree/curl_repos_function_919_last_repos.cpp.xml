<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_919_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">memory_tracking_init<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">void<pos:position pos:line="1" pos:column="38"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">env<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <comment type="block" pos:line="4" pos:column="3">/* if CURL_MEMDEBUG is set, this starts memory tracking message logging */</comment>
  <expr_stmt><expr><name pos:line="5" pos:column="3">env<pos:position pos:line="5" pos:column="6"/></name> <operator pos:line="5" pos:column="7">=<pos:position pos:line="5" pos:column="8"/></operator> <call><name pos:line="5" pos:column="9">curlx_getenv<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><literal type="string" pos:line="5" pos:column="22">"CURL_MEMDEBUG"<pos:position pos:line="5" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="39"/></expr_stmt>
  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><name pos:line="6" pos:column="6">env<pos:position pos:line="6" pos:column="9"/></name></expr>)<pos:position pos:line="6" pos:column="10"/></condition><then pos:line="6" pos:column="10"> <block pos:line="6" pos:column="11">{
    <comment type="block" pos:line="7" pos:column="5">/* use the value as file name */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">fname<pos:position pos:line="8" pos:column="15"/></name><index pos:line="8" pos:column="15">[<expr><name pos:line="8" pos:column="16">CURL_MT_LOGFNAME_BUFSIZE<pos:position pos:line="8" pos:column="40"/></name></expr>]<pos:position pos:line="8" pos:column="41"/></index></name></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>
    <if pos:line="9" pos:column="5">if<condition pos:line="9" pos:column="7">(<expr><call><name pos:line="9" pos:column="8">strlen<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">env<pos:position pos:line="9" pos:column="18"/></name></expr></argument>)<pos:position pos:line="9" pos:column="19"/></argument_list></call> <operator pos:line="9" pos:column="20">&gt;=<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="23">CURL_MT_LOGFNAME_BUFSIZE<pos:position pos:line="9" pos:column="47"/></name></expr>)<pos:position pos:line="9" pos:column="48"/></condition><then pos:line="9" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="10" pos:column="7">env<pos:position pos:line="10" pos:column="10"/></name><index pos:line="10" pos:column="10">[<expr><name pos:line="10" pos:column="11">CURL_MT_LOGFNAME_BUFSIZE<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-<pos:position pos:line="10" pos:column="36"/></operator><literal type="number" pos:line="10" pos:column="36">1<pos:position pos:line="10" pos:column="37"/></literal></expr>]<pos:position pos:line="10" pos:column="38"/></index></name> <operator pos:line="10" pos:column="39">=<pos:position pos:line="10" pos:column="40"/></operator> <literal type="char" pos:line="10" pos:column="41">'\0'<pos:position pos:line="10" pos:column="45"/></literal></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">strcpy<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">fname<pos:position pos:line="11" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="19">env<pos:position pos:line="11" pos:column="22"/></name></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">curl_free<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">env<pos:position pos:line="12" pos:column="18"/></name></expr></argument>)<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">curl_memdebug<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">fname<pos:position pos:line="13" pos:column="24"/></name></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="14" pos:column="5">/* this weird stuff here is to make curl_free() get called
       before curl_memdebug() as otherwise memory tracking will
       log a free() without an alloc! */</comment>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="18" pos:column="3">/* if CURL_MEMLIMIT is set, this enables fail-on-alloc-number-N feature */</comment>
  <expr_stmt><expr><name pos:line="19" pos:column="3">env<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <call><name pos:line="19" pos:column="9">curlx_getenv<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><literal type="string" pos:line="19" pos:column="22">"CURL_MEMLIMIT"<pos:position pos:line="19" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">env<pos:position pos:line="20" pos:column="9"/></name></expr>)<pos:position pos:line="20" pos:column="10"/></condition><then pos:line="20" pos:column="10"> <block pos:line="20" pos:column="11">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name> <modifier pos:line="21" pos:column="10">*<pos:position pos:line="21" pos:column="11"/></modifier></type><name pos:line="21" pos:column="11">endptr<pos:position pos:line="21" pos:column="17"/></name></decl>;<pos:position pos:line="21" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">long<pos:position pos:line="22" pos:column="9"/></name></type> <name pos:line="22" pos:column="10">num<pos:position pos:line="22" pos:column="13"/></name> <init pos:line="22" pos:column="14">= <expr><call><name pos:line="22" pos:column="16">strtol<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">env<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="28">&amp;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="29">endptr<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="37">10<pos:position pos:line="22" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="41"/></decl_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><operator pos:line="23" pos:column="8">(<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">endptr<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">!=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">env<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">)<pos:position pos:line="23" pos:column="23"/></operator> <operator pos:line="23" pos:column="24">&amp;&amp;<pos:position pos:line="23" pos:column="34"/></operator> <operator pos:line="23" pos:column="27">(<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="28">endptr<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">==<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="38">env<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">+<pos:position pos:line="23" pos:column="43"/></operator> <call><name pos:line="23" pos:column="44">strlen<pos:position pos:line="23" pos:column="50"/></name><argument_list pos:line="23" pos:column="50">(<argument><expr><name pos:line="23" pos:column="51">env<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call><operator pos:line="23" pos:column="55">)<pos:position pos:line="23" pos:column="56"/></operator> <operator pos:line="23" pos:column="57">&amp;&amp;<pos:position pos:line="23" pos:column="67"/></operator> <operator pos:line="23" pos:column="60">(<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="61">num<pos:position pos:line="23" pos:column="64"/></name> <operator pos:line="23" pos:column="65">&gt;<pos:position pos:line="23" pos:column="69"/></operator> <literal type="number" pos:line="23" pos:column="67">0<pos:position pos:line="23" pos:column="68"/></literal><operator pos:line="23" pos:column="68">)<pos:position pos:line="23" pos:column="69"/></operator></expr>)<pos:position pos:line="23" pos:column="70"/></condition><then pos:line="23" pos:column="70">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="7">curl_memlimit<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">num<pos:position pos:line="24" pos:column="24"/></name></expr></argument>)<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">curl_free<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">env<pos:position pos:line="25" pos:column="18"/></name></expr></argument>)<pos:position pos:line="25" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
