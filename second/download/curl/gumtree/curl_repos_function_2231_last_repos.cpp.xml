<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2231_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">smtp_done<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">CURLcode<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">status<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">bool<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">premature<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SMTP<pos:position pos:line="6" pos:column="14"/></name></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">smtp<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name><name pos:line="6" pos:column="23">data<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">-&gt;<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="29">req<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">.<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">protop<pos:position pos:line="6" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">pingpong<pos:position pos:line="7" pos:column="18"/></name></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">pp<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><operator pos:line="7" pos:column="25">&amp;<pos:position pos:line="7" pos:column="30"/></operator><name><name pos:line="7" pos:column="26">conn<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">-&gt;<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="32">proto<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">.<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">smtpc<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">.<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">pp<pos:position pos:line="7" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">eob<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">ssize_t<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">len<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">ssize_t<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">bytes_written<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="12" pos:column="3">(<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">void<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">)<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">premature<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">!<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">smtp<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">||<pos:position pos:line="14" pos:column="14"/></operator> <operator pos:line="14" pos:column="15">!<pos:position pos:line="14" pos:column="16"/></operator><name><name pos:line="14" pos:column="16">pp<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">conn<pos:position pos:line="14" pos:column="24"/></name></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">CURLE_OK<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></return></block></then></if>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name pos:line="17" pos:column="6">status<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13"> <block pos:line="17" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">connclose<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">conn<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="21">"SMTP done with bad status"<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt> <comment type="block" pos:line="18" pos:column="51">/* marked for closure */</comment>
    <expr_stmt><expr><name pos:line="19" pos:column="5">result<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">status<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt>         <comment type="block" pos:line="19" pos:column="30">/* use the already set error code */</comment>
  }<pos:position pos:line="20" pos:column="4"/></block></then>
  <elseif pos:line="21" pos:column="3">else <if pos:line="21" pos:column="8">if<condition pos:line="21" pos:column="10">(<expr><operator pos:line="21" pos:column="11">!<pos:position pos:line="21" pos:column="12"/></operator><name><name pos:line="21" pos:column="12">data<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">set<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">.<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">connect_only<pos:position pos:line="21" pos:column="34"/></name></name> <operator pos:line="21" pos:column="35">&amp;&amp;<pos:position pos:line="21" pos:column="45"/></operator> <name><name pos:line="21" pos:column="38">data<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">-&gt;<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="44">set<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">.<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="48">mail_rcpt<pos:position pos:line="21" pos:column="57"/></name></name> <operator pos:line="21" pos:column="58">&amp;&amp;<pos:position pos:line="21" pos:column="68"/></operator>
          <operator pos:line="22" pos:column="11">(<pos:position pos:line="22" pos:column="12"/></operator><name><name pos:line="22" pos:column="12">data<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">-&gt;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="18">set<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">.<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">upload<pos:position pos:line="22" pos:column="28"/></name></name> <operator pos:line="22" pos:column="29">||<pos:position pos:line="22" pos:column="31"/></operator> <name><name pos:line="22" pos:column="32">data<pos:position pos:line="22" pos:column="36"/></name><operator pos:line="22" pos:column="36">-&gt;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="38">set<pos:position pos:line="22" pos:column="41"/></name><operator pos:line="22" pos:column="41">.<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="42">mimepost<pos:position pos:line="22" pos:column="50"/></name><operator pos:line="22" pos:column="50">.<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="51">kind<pos:position pos:line="22" pos:column="55"/></name></name><operator pos:line="22" pos:column="55">)<pos:position pos:line="22" pos:column="56"/></operator></expr>)<pos:position pos:line="22" pos:column="57"/></condition><then pos:line="22" pos:column="57"> <block pos:line="22" pos:column="58">{
    <comment type="block" pos:line="23" pos:column="5">/* Calculate the EOB taking into account any terminating CRLF from the
       previous line of the email or the CRLF of the DATA command when there
       is "no mail data". RFC-5321, sect. 4.1.1.4.

       Note: As some SSL backends, such as OpenSSL, will cause Curl_write() to
       fail when using a different pointer following a previous write, that
       returned CURLE_AGAIN, we duplicate the EOB now rather than when the
       bytes written doesn't equal len. */</comment>
    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><name><name pos:line="31" pos:column="8">smtp<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">trailing_crlf<pos:position pos:line="31" pos:column="27"/></name></name> <operator pos:line="31" pos:column="28">||<pos:position pos:line="31" pos:column="30"/></operator> <operator pos:line="31" pos:column="31">!<pos:position pos:line="31" pos:column="32"/></operator><name><name pos:line="31" pos:column="32">conn<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">-&gt;<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="38">data<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">-&gt;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="44">state<pos:position pos:line="31" pos:column="49"/></name><operator pos:line="31" pos:column="49">.<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="50">infilesize<pos:position pos:line="31" pos:column="60"/></name></name></expr>)<pos:position pos:line="31" pos:column="61"/></condition><then pos:line="31" pos:column="61"> <block pos:line="31" pos:column="62">{
      <expr_stmt><expr><name pos:line="32" pos:column="7">eob<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <call><name pos:line="32" pos:column="13">strdup<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">SMTP_EOB<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">+<pos:position pos:line="32" pos:column="30"/></operator> <literal type="number" pos:line="32" pos:column="31">2<pos:position pos:line="32" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="33" pos:column="7">len<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <name pos:line="33" pos:column="13">SMTP_EOB_LEN<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">-<pos:position pos:line="33" pos:column="27"/></operator> <literal type="number" pos:line="33" pos:column="28">2<pos:position pos:line="33" pos:column="29"/></literal></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then>
    <else pos:line="35" pos:column="5">else <block pos:line="35" pos:column="10">{
      <expr_stmt><expr><name pos:line="36" pos:column="7">eob<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">=<pos:position pos:line="36" pos:column="12"/></operator> <call><name pos:line="36" pos:column="13">strdup<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name pos:line="36" pos:column="20">SMTP_EOB<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name pos:line="37" pos:column="7">len<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <name pos:line="37" pos:column="13">SMTP_EOB_LEN<pos:position pos:line="37" pos:column="25"/></name></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>

    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><operator pos:line="40" pos:column="8">!<pos:position pos:line="40" pos:column="9"/></operator><name pos:line="40" pos:column="9">eob<pos:position pos:line="40" pos:column="12"/></name></expr>)<pos:position pos:line="40" pos:column="13"/></condition><then pos:line="40" pos:column="13">
      <block type="pseudo"><return pos:line="41" pos:column="7">return <expr><name pos:line="41" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="41" pos:column="33"/></name></expr>;<pos:position pos:line="41" pos:column="34"/></return></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/* Send the end of block data */</comment>
    <expr_stmt><expr><name pos:line="44" pos:column="5">result<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">Curl_write<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">conn<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="31">conn<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">-&gt;<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="37">writesockfd<pos:position pos:line="44" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="50">eob<pos:position pos:line="44" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="55">len<pos:position pos:line="44" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="60">&amp;<pos:position pos:line="44" pos:column="65"/></operator><name pos:line="44" pos:column="61">bytes_written<pos:position pos:line="44" pos:column="74"/></name></expr></argument>)<pos:position pos:line="44" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="76"/></expr_stmt>
    <if pos:line="45" pos:column="5">if<condition pos:line="45" pos:column="7">(<expr><name pos:line="45" pos:column="8">result<pos:position pos:line="45" pos:column="14"/></name></expr>)<pos:position pos:line="45" pos:column="15"/></condition><then pos:line="45" pos:column="15"> <block pos:line="45" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">free<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><name pos:line="46" pos:column="12">eob<pos:position pos:line="46" pos:column="15"/></name></expr></argument>)<pos:position pos:line="46" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="17"/></expr_stmt>
      <return pos:line="47" pos:column="7">return <expr><name pos:line="47" pos:column="14">result<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><name pos:line="50" pos:column="8">bytes_written<pos:position pos:line="50" pos:column="21"/></name> <operator pos:line="50" pos:column="22">!=<pos:position pos:line="50" pos:column="24"/></operator> <name pos:line="50" pos:column="25">len<pos:position pos:line="50" pos:column="28"/></name></expr>)<pos:position pos:line="50" pos:column="29"/></condition><then pos:line="50" pos:column="29"> <block pos:line="50" pos:column="30">{
      <comment type="block" pos:line="51" pos:column="7">/* The whole chunk was not sent so keep it around and adjust the
         pingpong structure accordingly */</comment>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">pp<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">-&gt;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="11">sendthis<pos:position pos:line="53" pos:column="19"/></name></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">eob<pos:position pos:line="53" pos:column="25"/></name></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="54" pos:column="7">pp<pos:position pos:line="54" pos:column="9"/></name><operator pos:line="54" pos:column="9">-&gt;<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="11">sendsize<pos:position pos:line="54" pos:column="19"/></name></name> <operator pos:line="54" pos:column="20">=<pos:position pos:line="54" pos:column="21"/></operator> <name pos:line="54" pos:column="22">len<pos:position pos:line="54" pos:column="25"/></name></expr>;<pos:position pos:line="54" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="55" pos:column="7">pp<pos:position pos:line="55" pos:column="9"/></name><operator pos:line="55" pos:column="9">-&gt;<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="11">sendleft<pos:position pos:line="55" pos:column="19"/></name></name> <operator pos:line="55" pos:column="20">=<pos:position pos:line="55" pos:column="21"/></operator> <name pos:line="55" pos:column="22">len<pos:position pos:line="55" pos:column="25"/></name> <operator pos:line="55" pos:column="26">-<pos:position pos:line="55" pos:column="27"/></operator> <name pos:line="55" pos:column="28">bytes_written<pos:position pos:line="55" pos:column="41"/></name></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then>
    <else pos:line="57" pos:column="5">else <block pos:line="57" pos:column="10">{
      <comment type="block" pos:line="58" pos:column="7">/* Successfully sent so adjust the response timeout relative to now */</comment>
      <expr_stmt><expr><name><name pos:line="59" pos:column="7">pp<pos:position pos:line="59" pos:column="9"/></name><operator pos:line="59" pos:column="9">-&gt;<pos:position pos:line="59" pos:column="14"/></operator><name pos:line="59" pos:column="11">response<pos:position pos:line="59" pos:column="19"/></name></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <call><name pos:line="59" pos:column="22">Curl_tvnow<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">()<pos:position pos:line="59" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="35"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="61" pos:column="7">free<pos:position pos:line="61" pos:column="11"/></name><argument_list pos:line="61" pos:column="11">(<argument><expr><name pos:line="61" pos:column="12">eob<pos:position pos:line="61" pos:column="15"/></name></expr></argument>)<pos:position pos:line="61" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="64" pos:column="5">state<pos:position pos:line="64" pos:column="10"/></name><argument_list pos:line="64" pos:column="10">(<argument><expr><name pos:line="64" pos:column="11">conn<pos:position pos:line="64" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="17">SMTP_POSTDATA<pos:position pos:line="64" pos:column="30"/></name></expr></argument>)<pos:position pos:line="64" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="66" pos:column="5">/* Run the state-machine

       TODO: when the multi interface is used, this _really_ should be using
       the smtp_multi_statemach function but we have no general support for
       non-blocking DONE operations!
    */</comment>
    <expr_stmt><expr><name pos:line="72" pos:column="5">result<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">=<pos:position pos:line="72" pos:column="13"/></operator> <call><name pos:line="72" pos:column="14">smtp_block_statemach<pos:position pos:line="72" pos:column="34"/></name><argument_list pos:line="72" pos:column="34">(<argument><expr><name pos:line="72" pos:column="35">conn<pos:position pos:line="72" pos:column="39"/></name></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="73" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="75" pos:column="3">/* Cleanup our per-request based variables */</comment>
  <expr_stmt><expr><call><name pos:line="76" pos:column="3">Curl_safefree<pos:position pos:line="76" pos:column="16"/></name><argument_list pos:line="76" pos:column="16">(<argument><expr><name><name pos:line="76" pos:column="17">smtp<pos:position pos:line="76" pos:column="21"/></name><operator pos:line="76" pos:column="21">-&gt;<pos:position pos:line="76" pos:column="26"/></operator><name pos:line="76" pos:column="23">custom<pos:position pos:line="76" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="78" pos:column="3">/* Clear the transfer mode for the next request */</comment>
  <expr_stmt><expr><name><name pos:line="79" pos:column="3">smtp<pos:position pos:line="79" pos:column="7"/></name><operator pos:line="79" pos:column="7">-&gt;<pos:position pos:line="79" pos:column="12"/></operator><name pos:line="79" pos:column="9">transfer<pos:position pos:line="79" pos:column="17"/></name></name> <operator pos:line="79" pos:column="18">=<pos:position pos:line="79" pos:column="19"/></operator> <name pos:line="79" pos:column="20">FTPTRANSFER_BODY<pos:position pos:line="79" pos:column="36"/></name></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt>

  <return pos:line="81" pos:column="3">return <expr><name pos:line="81" pos:column="10">result<pos:position pos:line="81" pos:column="16"/></name></expr>;<pos:position pos:line="81" pos:column="17"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
