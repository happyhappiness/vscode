<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1746_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">HMODULE<pos:position pos:line="1" pos:column="8"/></name></type> <name pos:line="1" pos:column="9">Curl_load_library<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">LPCTSTR<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">filename<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">HMODULE<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">hModule<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">NULL<pos:position pos:line="3" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">LOADLIBRARYEX_FN<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">pLoadLibraryEx<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">NULL<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Get a handle to kernel32 so we can access it's functions at runtime */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">HMODULE<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">hKernel32<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><call><name pos:line="7" pos:column="23">GetModuleHandle<pos:position pos:line="7" pos:column="38"/></name><argument_list pos:line="7" pos:column="38">(<argument><expr><call><name pos:line="7" pos:column="39">TEXT<pos:position pos:line="7" pos:column="43"/></name><argument_list pos:line="7" pos:column="43">(<argument><expr><literal type="string" pos:line="7" pos:column="44">"kernel32"<pos:position pos:line="7" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="57"/></decl_stmt>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><name pos:line="8" pos:column="7">hKernel32<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">NULL<pos:position pos:line="9" pos:column="16"/></name></expr>;<pos:position pos:line="9" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="11" pos:column="3">/* Attempt to find LoadLibraryEx() which is only available on Windows 2000
     and above */</comment>
  <expr_stmt><expr><name pos:line="13" pos:column="3">pLoadLibraryEx<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <operator pos:line="13" pos:column="20">(<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">LOADLIBRARYEX_FN<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">)<pos:position pos:line="13" pos:column="38"/></operator> <call><name pos:line="13" pos:column="39">GetProcAddress<pos:position pos:line="13" pos:column="53"/></name><argument_list pos:line="13" pos:column="53">(<argument><expr><name pos:line="13" pos:column="54">hKernel32<pos:position pos:line="13" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="65">LOADLIBARYEX<pos:position pos:line="13" pos:column="77"/></name></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* Detect if there's already a path in the filename and load the library if
     there is. Note: Both back slashes and forward slashes have been supported
     since the earlier days of DOS at an API level although they are not
     supported by command prompt */</comment>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><call><name pos:line="19" pos:column="6">_tcspbrk<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">filename<pos:position pos:line="19" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="25">TEXT<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="string" pos:line="19" pos:column="30">"\\/"<pos:position pos:line="19" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38"> <block pos:line="19" pos:column="39">{
    <comment type="block" format="doxygen" pos:line="20" pos:column="5">/** !checksrc! disable BANNEDFUNC 1 **/</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">hModule<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <ternary><condition><expr><name pos:line="21" pos:column="15">pLoadLibraryEx<pos:position pos:line="21" pos:column="29"/></name></expr> ?<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31">
      <expr><call><name pos:line="22" pos:column="7">pLoadLibraryEx<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">filename<pos:position pos:line="22" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="32">NULL<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">LOAD_WITH_ALTERED_SEARCH_PATH<pos:position pos:line="22" pos:column="67"/></name></expr></argument>)<pos:position pos:line="22" pos:column="68"/></argument_list></call></expr> <pos:position pos:line="22" pos:column="69"/></then><else pos:line="22" pos:column="69">:
      <expr><call><name pos:line="23" pos:column="7">LoadLibrary<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">filename<pos:position pos:line="23" pos:column="27"/></name></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></then>
  <comment type="block" pos:line="25" pos:column="3">/* Detect if KB2533623 is installed, as LOAD_LIBARY_SEARCH_SYSTEM32 is only
     supported on Windows Vista, Windows Server 2008, Windows 7 and Windows
     Server 2008 R2 with this patch or natively on Windows 8 and above */</comment>
  <elseif pos:line="28" pos:column="3">else <if pos:line="28" pos:column="8">if<condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">pLoadLibraryEx<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">&amp;&amp;<pos:position pos:line="28" pos:column="36"/></operator> <call><name pos:line="28" pos:column="29">GetProcAddress<pos:position pos:line="28" pos:column="43"/></name><argument_list pos:line="28" pos:column="43">(<argument><expr><name pos:line="28" pos:column="44">hKernel32<pos:position pos:line="28" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="55">"AddDllDirectory"<pos:position pos:line="28" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="74"/></condition><then pos:line="28" pos:column="74"> <block pos:line="28" pos:column="75">{
    <comment type="block" pos:line="29" pos:column="5">/* Load the DLL from the Windows system directory */</comment>
    <expr_stmt><expr><name pos:line="30" pos:column="5">hModule<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">pLoadLibraryEx<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">filename<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">NULL<pos:position pos:line="30" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="46">LOAD_LIBRARY_SEARCH_SYSTEM32<pos:position pos:line="30" pos:column="74"/></name></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if></elseif>
  <else pos:line="32" pos:column="3">else <block pos:line="32" pos:column="8">{
    <comment type="block" pos:line="33" pos:column="5">/* Attempt to get the Windows system path */</comment>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">UINT<pos:position pos:line="34" pos:column="9"/></name></type> <name pos:line="34" pos:column="10">systemdirlen<pos:position pos:line="34" pos:column="22"/></name> <init pos:line="34" pos:column="23">= <expr><call><name pos:line="34" pos:column="25">GetSystemDirectory<pos:position pos:line="34" pos:column="43"/></name><argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">NULL<pos:position pos:line="34" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="50">0<pos:position pos:line="34" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="53"/></decl_stmt>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name pos:line="35" pos:column="8">systemdirlen<pos:position pos:line="35" pos:column="20"/></name></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <block pos:line="35" pos:column="22">{
      <comment type="block" pos:line="36" pos:column="7">/* Allocate space for the full DLL path (Room for the null terminator
         is included in systemdirlen) */</comment>
      <decl_stmt><decl><type><name pos:line="38" pos:column="7">size_t<pos:position pos:line="38" pos:column="13"/></name></type> <name pos:line="38" pos:column="14">filenamelen<pos:position pos:line="38" pos:column="25"/></name> <init pos:line="38" pos:column="26">= <expr><call><name pos:line="38" pos:column="28">_tcslen<pos:position pos:line="38" pos:column="35"/></name><argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">filename<pos:position pos:line="38" pos:column="44"/></name></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="46"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="39" pos:column="7">TCHAR<pos:position pos:line="39" pos:column="12"/></name> <modifier pos:line="39" pos:column="13">*<pos:position pos:line="39" pos:column="14"/></modifier></type><name pos:line="39" pos:column="14">path<pos:position pos:line="39" pos:column="18"/></name> <init pos:line="39" pos:column="19">= <expr><call><name pos:line="39" pos:column="21">malloc<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><sizeof pos:line="39" pos:column="28">sizeof<argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">TCHAR<pos:position pos:line="39" pos:column="40"/></name></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></sizeof> <operator pos:line="39" pos:column="42">*<pos:position pos:line="39" pos:column="43"/></operator> <operator pos:line="39" pos:column="44">(<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="45">systemdirlen<pos:position pos:line="39" pos:column="57"/></name> <operator pos:line="39" pos:column="58">+<pos:position pos:line="39" pos:column="59"/></operator> <literal type="number" pos:line="39" pos:column="60">1<pos:position pos:line="39" pos:column="61"/></literal> <operator pos:line="39" pos:column="62">+<pos:position pos:line="39" pos:column="63"/></operator> <name pos:line="39" pos:column="64">filenamelen<pos:position pos:line="39" pos:column="75"/></name><operator pos:line="39" pos:column="75">)<pos:position pos:line="39" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="78"/></decl_stmt>
      <if pos:line="40" pos:column="7">if<condition pos:line="40" pos:column="9">(<expr><name pos:line="40" pos:column="10">path<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">&amp;&amp;<pos:position pos:line="40" pos:column="25"/></operator> <call><name pos:line="40" pos:column="18">GetSystemDirectory<pos:position pos:line="40" pos:column="36"/></name><argument_list pos:line="40" pos:column="36">(<argument><expr><name pos:line="40" pos:column="37">path<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="43">systemdirlen<pos:position pos:line="40" pos:column="55"/></name></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="57"/></condition><then pos:line="40" pos:column="57"> <block pos:line="40" pos:column="58">{
        <comment type="block" pos:line="41" pos:column="9">/* Calculate the full DLL path */</comment>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">_tcscpy<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><name pos:line="42" pos:column="17">path<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">+<pos:position pos:line="42" pos:column="23"/></operator> <call><name pos:line="42" pos:column="24">_tcslen<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">path<pos:position pos:line="42" pos:column="36"/></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="39">TEXT<pos:position pos:line="42" pos:column="43"/></name><argument_list pos:line="42" pos:column="43">(<argument><expr><literal type="string" pos:line="42" pos:column="44">"\\"<pos:position pos:line="42" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">_tcscpy<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">path<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">+<pos:position pos:line="43" pos:column="23"/></operator> <call><name pos:line="43" pos:column="24">_tcslen<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">path<pos:position pos:line="43" pos:column="36"/></name></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="39">filename<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>

        <comment type="block" pos:line="45" pos:column="9">/* Load the DLL from the Windows system directory */</comment>
        <comment type="block" format="doxygen" pos:line="46" pos:column="9">/** !checksrc! disable BANNEDFUNC 1 **/</comment>
        <expr_stmt><expr><name pos:line="47" pos:column="9">hModule<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <ternary><condition><expr><name pos:line="47" pos:column="19">pLoadLibraryEx<pos:position pos:line="47" pos:column="33"/></name></expr> ?<pos:position pos:line="47" pos:column="35"/></condition><then pos:line="47" pos:column="35">
          <expr><call><name pos:line="48" pos:column="11">pLoadLibraryEx<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">path<pos:position pos:line="48" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="32">NULL<pos:position pos:line="48" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">LOAD_WITH_ALTERED_SEARCH_PATH<pos:position pos:line="48" pos:column="67"/></name></expr></argument>)<pos:position pos:line="48" pos:column="68"/></argument_list></call></expr> <pos:position pos:line="48" pos:column="69"/></then><else pos:line="48" pos:column="69">:
          <expr><call><name pos:line="49" pos:column="11">LoadLibrary<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">path<pos:position pos:line="49" pos:column="27"/></name></expr></argument>)<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>

      }<pos:position pos:line="51" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">free<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name pos:line="52" pos:column="12">path<pos:position pos:line="52" pos:column="16"/></name></expr></argument>)<pos:position pos:line="52" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
  }<pos:position pos:line="54" pos:column="4"/></block></else></if>

  <return pos:line="56" pos:column="3">return <expr><name pos:line="56" pos:column="10">hModule<pos:position pos:line="56" pos:column="17"/></name></expr>;<pos:position pos:line="56" pos:column="18"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
