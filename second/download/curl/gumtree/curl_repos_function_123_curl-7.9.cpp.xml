<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_123_curl-7.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type> <name pos:line="1" pos:column="21">ContentTypeForFilename<pos:position pos:line="1" pos:column="43"/></name> <parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">filename<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
					    <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">char<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">prevtype<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">contenttype<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">NULL<pos:position pos:line="4" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">int<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">i<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <comment type="block" pos:line="6" pos:column="3">/*
   * No type was specified, we scan through a few well-known
   * extensions and pick the first we match!
   */</comment>
  <struct pos:line="10" pos:column="3">struct <name pos:line="10" pos:column="10">ContentType<pos:position pos:line="10" pos:column="21"/></name> <block pos:line="10" pos:column="22">{<public type="default" pos:line="10" pos:column="23">
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">char<pos:position pos:line="11" pos:column="15"/></name> <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier></type><name pos:line="11" pos:column="17">extension<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">type<pos:position pos:line="12" pos:column="21"/></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
  <pos:position pos:line="13" pos:column="3"/></public>}<pos:position pos:line="13" pos:column="4"/></block>;<pos:position pos:line="13" pos:column="5"/></struct>
  <decl_stmt><decl><specifier pos:line="14" pos:column="3">static<pos:position pos:line="14" pos:column="9"/></specifier> <type><name><name pos:line="14" pos:column="10">struct<pos:position pos:line="14" pos:column="16"/></name> <name pos:line="14" pos:column="17">ContentType<pos:position pos:line="14" pos:column="28"/></name></name></type> <name><name pos:line="14" pos:column="29">ctts<pos:position pos:line="14" pos:column="33"/></name><index pos:line="14" pos:column="33">[]<pos:position pos:line="14" pos:column="35"/></index></name><init pos:line="14" pos:column="35">=<expr><block pos:line="14" pos:column="36">{
    <expr><block pos:line="15" pos:column="5">{<expr><literal type="string" pos:line="15" pos:column="6">".gif"<pos:position pos:line="15" pos:column="12"/></literal></expr>,  <expr><literal type="string" pos:line="15" pos:column="15">"image/gif"<pos:position pos:line="15" pos:column="26"/></literal></expr>}<pos:position pos:line="15" pos:column="27"/></block></expr>,
    <expr><block pos:line="16" pos:column="5">{<expr><literal type="string" pos:line="16" pos:column="6">".jpg"<pos:position pos:line="16" pos:column="12"/></literal></expr>,  <expr><literal type="string" pos:line="16" pos:column="15">"image/jpeg"<pos:position pos:line="16" pos:column="27"/></literal></expr>}<pos:position pos:line="16" pos:column="28"/></block></expr>,
    <expr><block pos:line="17" pos:column="5">{<expr><literal type="string" pos:line="17" pos:column="6">".jpeg"<pos:position pos:line="17" pos:column="13"/></literal></expr>, <expr><literal type="string" pos:line="17" pos:column="15">"image/jpeg"<pos:position pos:line="17" pos:column="27"/></literal></expr>}<pos:position pos:line="17" pos:column="28"/></block></expr>,
    <expr><block pos:line="18" pos:column="5">{<expr><literal type="string" pos:line="18" pos:column="6">".txt"<pos:position pos:line="18" pos:column="12"/></literal></expr>,  <expr><literal type="string" pos:line="18" pos:column="15">"text/plain"<pos:position pos:line="18" pos:column="27"/></literal></expr>}<pos:position pos:line="18" pos:column="28"/></block></expr>,
    <expr><block pos:line="19" pos:column="5">{<expr><literal type="string" pos:line="19" pos:column="6">".html"<pos:position pos:line="19" pos:column="13"/></literal></expr>, <expr><literal type="string" pos:line="19" pos:column="15">"text/plain"<pos:position pos:line="19" pos:column="27"/></literal></expr>}<pos:position pos:line="19" pos:column="28"/></block></expr>
  }<pos:position pos:line="20" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="20" pos:column="5"/></decl_stmt>
  
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">prevtype<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15">
    <comment type="block" pos:line="23" pos:column="5">/* default to the previously set/used! */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="5">contenttype<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">prevtype<pos:position pos:line="24" pos:column="27"/></name></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt></block></then>
  <else pos:line="25" pos:column="3">else
    <comment type="block" pos:line="26" pos:column="5">/* It seems RFC1867 defines no Content-Type to default to
       text/plain so we don't actually need to set this: */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="5">contenttype<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">HTTPPOST_CONTENTTYPE_DEFAULT<pos:position pos:line="28" pos:column="47"/></name></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt></block></else></if>
  
  <for pos:line="30" pos:column="3">for<control pos:line="30" pos:column="6">(<init><expr><name pos:line="30" pos:column="7">i<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator><literal type="number" pos:line="30" pos:column="9">0<pos:position pos:line="30" pos:column="10"/></literal></expr>;<pos:position pos:line="30" pos:column="11"/></init> <condition><expr><name pos:line="30" pos:column="12">i<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">&lt;<pos:position pos:line="30" pos:column="17"/></operator><sizeof pos:line="30" pos:column="14">sizeof<argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">ctts<pos:position pos:line="30" pos:column="25"/></name></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></sizeof><operator pos:line="30" pos:column="26">/<pos:position pos:line="30" pos:column="27"/></operator><sizeof pos:line="30" pos:column="27">sizeof<argument_list pos:line="30" pos:column="33">(<argument><expr><name><name pos:line="30" pos:column="34">ctts<pos:position pos:line="30" pos:column="38"/></name><index pos:line="30" pos:column="38">[<expr><literal type="number" pos:line="30" pos:column="39">0<pos:position pos:line="30" pos:column="40"/></literal></expr>]<pos:position pos:line="30" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></sizeof></expr>;<pos:position pos:line="30" pos:column="43"/></condition> <incr><expr><name pos:line="30" pos:column="44">i<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">++<pos:position pos:line="30" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="48"/></control> <block pos:line="30" pos:column="49">{
    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><call><name pos:line="31" pos:column="8">strlen<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">filename<pos:position pos:line="31" pos:column="23"/></name></expr></argument>)<pos:position pos:line="31" pos:column="24"/></argument_list></call> <operator pos:line="31" pos:column="25">&gt;=<pos:position pos:line="31" pos:column="30"/></operator> <call><name pos:line="31" pos:column="28">strlen<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><name><name pos:line="31" pos:column="35">ctts<pos:position pos:line="31" pos:column="39"/></name><index pos:line="31" pos:column="39">[<expr><name pos:line="31" pos:column="40">i<pos:position pos:line="31" pos:column="41"/></name></expr>]<pos:position pos:line="31" pos:column="42"/></index></name><operator pos:line="31" pos:column="42">.<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="43">extension<pos:position pos:line="31" pos:column="52"/></name></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="54"/></condition><then pos:line="31" pos:column="54"> <block pos:line="31" pos:column="55">{
      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><call><name pos:line="32" pos:column="10">strequal<pos:position pos:line="32" pos:column="18"/></name><argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">filename<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">+<pos:position pos:line="32" pos:column="29"/></operator>
		  <call><name pos:line="33" pos:column="19">strlen<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">filename<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call> <operator pos:line="33" pos:column="36">-<pos:position pos:line="33" pos:column="37"/></operator> <call><name pos:line="33" pos:column="38">strlen<pos:position pos:line="33" pos:column="44"/></name><argument_list pos:line="33" pos:column="44">(<argument><expr><name><name pos:line="33" pos:column="45">ctts<pos:position pos:line="33" pos:column="49"/></name><index pos:line="33" pos:column="49">[<expr><name pos:line="33" pos:column="50">i<pos:position pos:line="33" pos:column="51"/></name></expr>]<pos:position pos:line="33" pos:column="52"/></index></name><operator pos:line="33" pos:column="52">.<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="53">extension<pos:position pos:line="33" pos:column="62"/></name></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr></argument>,
		  <argument><expr><name><name pos:line="34" pos:column="19">ctts<pos:position pos:line="34" pos:column="23"/></name><index pos:line="34" pos:column="23">[<expr><name pos:line="34" pos:column="24">i<pos:position pos:line="34" pos:column="25"/></name></expr>]<pos:position pos:line="34" pos:column="26"/></index></name><operator pos:line="34" pos:column="26">.<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="27">extension<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38"> <block pos:line="34" pos:column="39">{
	<expr_stmt><expr><name pos:line="35" pos:column="9">contenttype<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name><name pos:line="35" pos:column="23">ctts<pos:position pos:line="35" pos:column="27"/></name><index pos:line="35" pos:column="27">[<expr><name pos:line="35" pos:column="28">i<pos:position pos:line="35" pos:column="29"/></name></expr>]<pos:position pos:line="35" pos:column="30"/></index></name><operator pos:line="35" pos:column="30">.<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="31">type<pos:position pos:line="35" pos:column="35"/></name></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
	<break pos:line="36" pos:column="9">break;<pos:position pos:line="36" pos:column="15"/></break>
      }<pos:position pos:line="37" pos:column="8"/></block></then></if>	      
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
  }<pos:position pos:line="39" pos:column="4"/></block></for>
  <comment type="block" pos:line="40" pos:column="3">/* we have a contenttype by now */</comment>
  <return pos:line="41" pos:column="3">return <expr><name pos:line="41" pos:column="10">contenttype<pos:position pos:line="41" pos:column="21"/></name></expr>;<pos:position pos:line="41" pos:column="22"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
