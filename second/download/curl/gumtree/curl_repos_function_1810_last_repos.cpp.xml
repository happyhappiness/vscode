<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1810_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">curl_version_info_data<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">curl_version_info<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">CURLversion<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">stamp<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><name pos:line="3" pos:column="10">bool<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">initialized<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">USE_LIBSSH2<pos:position pos:line="4" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">char<pos:position pos:line="5" pos:column="14"/></name></type> <name><name pos:line="5" pos:column="15">ssh_buffer<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">80<pos:position pos:line="5" pos:column="28"/></literal></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">USE_SSL<pos:position pos:line="7" pos:column="15"/></name></cpp:ifdef>
  <decl_stmt><decl><specifier pos:line="8" pos:column="3">static<pos:position pos:line="8" pos:column="9"/></specifier> <type><name pos:line="8" pos:column="10">char<pos:position pos:line="8" pos:column="14"/></name></type> <name><name pos:line="8" pos:column="15">ssl_buffer<pos:position pos:line="8" pos:column="25"/></name><index pos:line="8" pos:column="25">[<expr><literal type="number" pos:line="8" pos:column="26">80<pos:position pos:line="8" pos:column="28"/></literal></expr>]<pos:position pos:line="8" pos:column="29"/></index></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">initialized<pos:position pos:line="11" pos:column="17"/></name></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">&amp;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="13">version_info<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></return></block></then></if>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">USE_SSL<pos:position pos:line="14" pos:column="15"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">Curl_ssl_version<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">ssl_buffer<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="32">sizeof<argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">ssl_buffer<pos:position pos:line="15" pos:column="49"/></name></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">version_info<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">ssl_version<pos:position pos:line="16" pos:column="27"/></name></name> <operator pos:line="16" pos:column="28">=<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="30">ssl_buffer<pos:position pos:line="16" pos:column="40"/></name></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name><name pos:line="17" pos:column="6">Curl_ssl<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">support_https_proxy<pos:position pos:line="17" pos:column="35"/></name></name></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="5">version_info<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">features<pos:position pos:line="18" pos:column="26"/></name></name> <operator pos:line="18" pos:column="27">|=<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">CURL_VERSION_HTTPS_PROXY<pos:position pos:line="18" pos:column="54"/></name></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt></block></then>
  <else pos:line="19" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="5">version_info<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">features<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">&amp;=<pos:position pos:line="20" pos:column="33"/></operator> <operator pos:line="20" pos:column="30">~<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="31">CURL_VERSION_HTTPS_PROXY<pos:position pos:line="20" pos:column="55"/></name></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt></block></else></if>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">HAVE_LIBZ<pos:position pos:line="23" pos:column="17"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">version_info<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">.<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">libz_version<pos:position pos:line="24" pos:column="28"/></name></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <call><name pos:line="24" pos:column="31">zlibVersion<pos:position pos:line="24" pos:column="42"/></name><argument_list pos:line="24" pos:column="42">()<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
  <comment type="block" pos:line="25" pos:column="3">/* libz left NULL if non-existing */</comment>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">USE_ARES<pos:position pos:line="27" pos:column="16"/></name></cpp:ifdef>
  <block pos:line="28" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">int<pos:position pos:line="29" pos:column="8"/></name></type> <name pos:line="29" pos:column="9">aresnum<pos:position pos:line="29" pos:column="16"/></name></decl>;<pos:position pos:line="29" pos:column="17"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">version_info<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">.<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">ares<pos:position pos:line="30" pos:column="22"/></name></name> <operator pos:line="30" pos:column="23">=<pos:position pos:line="30" pos:column="24"/></operator> <call><name pos:line="30" pos:column="25">ares_version<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">(<argument><expr><operator pos:line="30" pos:column="38">&amp;<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="39">aresnum<pos:position pos:line="30" pos:column="46"/></name></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">version_info<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">.<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">ares_num<pos:position pos:line="31" pos:column="26"/></name></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <name pos:line="31" pos:column="29">aresnum<pos:position pos:line="31" pos:column="36"/></name></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">USE_LIBIDN2<pos:position pos:line="34" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" pos:line="35" pos:column="3">/* This returns a version string if we use the given version or later,
     otherwise it returns NULL */</comment>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">version_info<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">.<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">libidn<pos:position pos:line="37" pos:column="22"/></name></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <call><name pos:line="37" pos:column="25">idn2_check_version<pos:position pos:line="37" pos:column="43"/></name><argument_list pos:line="37" pos:column="43">(<argument><expr><name pos:line="37" pos:column="44">IDN2_VERSION<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><name><name pos:line="38" pos:column="6">version_info<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">.<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">libidn<pos:position pos:line="38" pos:column="25"/></name></name></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="39" pos:column="5">version_info<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">.<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">features<pos:position pos:line="39" pos:column="26"/></name></name> <operator pos:line="39" pos:column="27">|=<pos:position pos:line="39" pos:column="29"/></operator> <name pos:line="39" pos:column="30">CURL_VERSION_IDN<pos:position pos:line="39" pos:column="46"/></name></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt></block></then></if>
<cpp:elif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">elif<pos:position pos:line="40" pos:column="6"/></cpp:directive> <expr><call><name pos:line="40" pos:column="7">defined<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><name pos:line="40" pos:column="15">USE_WIN32_IDN<pos:position pos:line="40" pos:column="28"/></name></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name pos:line="41" pos:column="3">version_info<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">.<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="16">features<pos:position pos:line="41" pos:column="24"/></name></name> <operator pos:line="41" pos:column="25">|=<pos:position pos:line="41" pos:column="27"/></operator> <name pos:line="41" pos:column="28">CURL_VERSION_IDN<pos:position pos:line="41" pos:column="44"/></name></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">if<pos:position pos:line="44" pos:column="4"/></cpp:directive> <expr><call><name pos:line="44" pos:column="5">defined<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><name pos:line="44" pos:column="13">HAVE_ICONV<pos:position pos:line="44" pos:column="23"/></name></expr></argument>)<pos:position pos:line="44" pos:column="24"/></argument_list></call> <operator pos:line="44" pos:column="25">&amp;&amp;<pos:position pos:line="44" pos:column="35"/></operator> <call><name pos:line="44" pos:column="28">defined<pos:position pos:line="44" pos:column="35"/></name><argument_list pos:line="44" pos:column="35">(<argument><expr><name pos:line="44" pos:column="36">CURL_DOES_CONVERSIONS<pos:position pos:line="44" pos:column="57"/></name></expr></argument>)<pos:position pos:line="44" pos:column="58"/></argument_list></call></expr></cpp:if>
<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">_LIBICONV_VERSION<pos:position pos:line="45" pos:column="25"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="46" pos:column="3">version_info<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">.<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="16">iconv_ver_num<pos:position pos:line="46" pos:column="29"/></name></name> <operator pos:line="46" pos:column="30">=<pos:position pos:line="46" pos:column="31"/></operator> <name pos:line="46" pos:column="32">_LIBICONV_VERSION<pos:position pos:line="46" pos:column="49"/></name></expr>;<pos:position pos:line="46" pos:column="50"/></expr_stmt>
<cpp:else pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">else<pos:position pos:line="47" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="48" pos:column="3">/* version unknown */</comment>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">version_info<pos:position pos:line="49" pos:column="15"/></name><operator pos:line="49" pos:column="15">.<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="16">iconv_ver_num<pos:position pos:line="49" pos:column="29"/></name></name> <operator pos:line="49" pos:column="30">=<pos:position pos:line="49" pos:column="31"/></operator> <operator pos:line="49" pos:column="32">-<pos:position pos:line="49" pos:column="33"/></operator><literal type="number" pos:line="49" pos:column="33">1<pos:position pos:line="49" pos:column="34"/></literal></expr>;<pos:position pos:line="49" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="50" pos:column="8">/* _LIBICONV_VERSION */</comment>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef<pos:position pos:line="53" pos:column="7"/></cpp:directive> <name pos:line="53" pos:column="8">USE_LIBSSH2<pos:position pos:line="53" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">snprintf<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><name pos:line="54" pos:column="12">ssh_buffer<pos:position pos:line="54" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="24">sizeof<argument_list pos:line="54" pos:column="30">(<argument><expr><name pos:line="54" pos:column="31">ssh_buffer<pos:position pos:line="54" pos:column="41"/></name></expr></argument>)<pos:position pos:line="54" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="44">"libssh2/%s"<pos:position pos:line="54" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="58">LIBSSH2_VERSION<pos:position pos:line="54" pos:column="73"/></name></expr></argument>)<pos:position pos:line="54" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="75"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="55" pos:column="3">version_info<pos:position pos:line="55" pos:column="15"/></name><operator pos:line="55" pos:column="15">.<pos:position pos:line="55" pos:column="16"/></operator><name pos:line="55" pos:column="16">libssh_version<pos:position pos:line="55" pos:column="30"/></name></name> <operator pos:line="55" pos:column="31">=<pos:position pos:line="55" pos:column="32"/></operator> <name pos:line="55" pos:column="33">ssh_buffer<pos:position pos:line="55" pos:column="43"/></name></expr>;<pos:position pos:line="55" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><operator pos:line="58" pos:column="3">(<pos:position pos:line="58" pos:column="4"/></operator><name pos:line="58" pos:column="4">void<pos:position pos:line="58" pos:column="8"/></name><operator pos:line="58" pos:column="8">)<pos:position pos:line="58" pos:column="9"/></operator><name pos:line="58" pos:column="9">stamp<pos:position pos:line="58" pos:column="14"/></name></expr>;<pos:position pos:line="58" pos:column="15"/></expr_stmt> <comment type="block" pos:line="58" pos:column="16">/* avoid compiler warnings, we don't use this */</comment>

  <expr_stmt><expr><name pos:line="60" pos:column="3">initialized<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <literal type="boolean" pos:line="60" pos:column="17">true<pos:position pos:line="60" pos:column="21"/></literal></expr>;<pos:position pos:line="60" pos:column="22"/></expr_stmt>
  <return pos:line="61" pos:column="3">return <expr><operator pos:line="61" pos:column="10">&amp;<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="11">version_info<pos:position pos:line="61" pos:column="23"/></name></expr>;<pos:position pos:line="61" pos:column="24"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
