<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1948_curl-7.51.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_convert_from_network<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">Curl_easy<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">data<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">buffer<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">size_t<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">length<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><name><name pos:line="4" pos:column="6">data<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">-&gt;<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="12">set<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">.<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">convfromnetwork<pos:position pos:line="4" pos:column="31"/></name></name></expr>)<pos:position pos:line="4" pos:column="32"/></condition><then pos:line="4" pos:column="32"> <block pos:line="4" pos:column="33">{
    <comment type="block" pos:line="5" pos:column="5">/* use translation callback */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">CURLcode<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">result<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><call><name><name pos:line="6" pos:column="23">data<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">-&gt;<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="29">set<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">.<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">convfromnetwork<pos:position pos:line="6" pos:column="48"/></name></name><argument_list pos:line="6" pos:column="48">(<argument><expr><name pos:line="6" pos:column="49">buffer<pos:position pos:line="6" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="57">length<pos:position pos:line="6" pos:column="63"/></name></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="65"/></decl_stmt>
    <if pos:line="7" pos:column="5">if<condition pos:line="7" pos:column="7">(<expr><name pos:line="7" pos:column="8">result<pos:position pos:line="7" pos:column="14"/></name></expr>)<pos:position pos:line="7" pos:column="15"/></condition><then pos:line="7" pos:column="15"> <block pos:line="7" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="8" pos:column="7">failf<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">data<pos:position pos:line="8" pos:column="17"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="9" pos:column="13">"CURLOPT_CONV_FROM_NETWORK_FUNCTION callback returned %d: %s"<pos:position pos:line="9" pos:column="74"/></literal></expr></argument>,
            <argument><expr><operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">int<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">)<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">result<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="26">curl_easy_strerror<pos:position pos:line="10" pos:column="44"/></name><argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">result<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">result<pos:position pos:line="13" pos:column="18"/></name></expr>;<pos:position pos:line="13" pos:column="19"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then>
  <else pos:line="15" pos:column="3">else <block pos:line="15" pos:column="8">{
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">HAVE_ICONV<pos:position pos:line="16" pos:column="18"/></name></cpp:ifdef>
    <comment type="block" pos:line="17" pos:column="5">/* do the translation ourselves */</comment>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name> <modifier pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></modifier></type><name pos:line="18" pos:column="11">input_ptr<pos:position pos:line="18" pos:column="20"/></name></decl>, <modifier pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></modifier><decl><type ref="prev"/><name pos:line="18" pos:column="23">output_ptr<pos:position pos:line="18" pos:column="33"/></name></decl>;<pos:position pos:line="18" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">size_t<pos:position pos:line="19" pos:column="11"/></name></type> <name pos:line="19" pos:column="12">in_bytes<pos:position pos:line="19" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="19" pos:column="22">out_bytes<pos:position pos:line="19" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="19" pos:column="33">rc<pos:position pos:line="19" pos:column="35"/></name></decl>;<pos:position pos:line="19" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">error<pos:position pos:line="20" pos:column="14"/></name></decl>;<pos:position pos:line="20" pos:column="15"/></decl_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* open an iconv conversion descriptor if necessary */</comment>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><name><name pos:line="23" pos:column="8">data<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">inbound_cd<pos:position pos:line="23" pos:column="24"/></name></name> <operator pos:line="23" pos:column="25">==<pos:position pos:line="23" pos:column="27"/></operator> <operator pos:line="23" pos:column="28">(<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="29">iconv_t<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">)<pos:position pos:line="23" pos:column="37"/></operator><operator pos:line="23" pos:column="37">-<pos:position pos:line="23" pos:column="38"/></operator><literal type="number" pos:line="23" pos:column="38">1<pos:position pos:line="23" pos:column="39"/></literal></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40"> <block pos:line="23" pos:column="41">{
      <expr_stmt><expr><name><name pos:line="24" pos:column="7">data<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">inbound_cd<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <call><name pos:line="24" pos:column="26">iconv_open<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">CURL_ICONV_CODESET_OF_HOST<pos:position pos:line="24" pos:column="63"/></name></expr></argument>,
                                    <argument><expr><name pos:line="25" pos:column="37">CURL_ICONV_CODESET_OF_NETWORK<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
      <if pos:line="26" pos:column="7">if<condition pos:line="26" pos:column="9">(<expr><name><name pos:line="26" pos:column="10">data<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">inbound_cd<pos:position pos:line="26" pos:column="26"/></name></name> <operator pos:line="26" pos:column="27">==<pos:position pos:line="26" pos:column="29"/></operator> <operator pos:line="26" pos:column="30">(<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="31">iconv_t<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">)<pos:position pos:line="26" pos:column="39"/></operator><operator pos:line="26" pos:column="39">-<pos:position pos:line="26" pos:column="40"/></operator><literal type="number" pos:line="26" pos:column="40">1<pos:position pos:line="26" pos:column="41"/></literal></expr>)<pos:position pos:line="26" pos:column="42"/></condition><then pos:line="26" pos:column="42"> <block pos:line="26" pos:column="43">{
        <expr_stmt><expr><name pos:line="27" pos:column="9">error<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">ERRNO<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">failf<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">data<pos:position pos:line="28" pos:column="19"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="29" pos:column="15">"The iconv_open(\"%s\", \"%s\") call failed with errno %i: %s"<pos:position pos:line="29" pos:column="77"/></literal></expr></argument>,
              <argument><expr><name pos:line="30" pos:column="15">CURL_ICONV_CODESET_OF_HOST<pos:position pos:line="30" pos:column="41"/></name></expr></argument>,
              <argument><expr><name pos:line="31" pos:column="15">CURL_ICONV_CODESET_OF_NETWORK<pos:position pos:line="31" pos:column="44"/></name></expr></argument>,
              <argument><expr><name pos:line="32" pos:column="15">error<pos:position pos:line="32" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="22">strerror<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">error<pos:position pos:line="32" pos:column="36"/></name></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">CURLE_CONV_FAILED<pos:position pos:line="33" pos:column="33"/></name></expr>;<pos:position pos:line="33" pos:column="34"/></return>
      }<pos:position pos:line="34" pos:column="8"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="36" pos:column="5">/* call iconv */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">input_ptr<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <name pos:line="37" pos:column="17">output_ptr<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">=<pos:position pos:line="37" pos:column="29"/></operator> <name pos:line="37" pos:column="30">buffer<pos:position pos:line="37" pos:column="36"/></name></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="38" pos:column="5">in_bytes<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <name pos:line="38" pos:column="16">out_bytes<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">=<pos:position pos:line="38" pos:column="27"/></operator> <name pos:line="38" pos:column="28">length<pos:position pos:line="38" pos:column="34"/></name></expr>;<pos:position pos:line="38" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="39" pos:column="5">rc<pos:position pos:line="39" pos:column="7"/></name> <operator pos:line="39" pos:column="8">=<pos:position pos:line="39" pos:column="9"/></operator> <call><name pos:line="39" pos:column="10">iconv<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name><name pos:line="39" pos:column="16">data<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">-&gt;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="22">inbound_cd<pos:position pos:line="39" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="34">(<pos:position pos:line="39" pos:column="35"/></operator><specifier pos:line="39" pos:column="35">const<pos:position pos:line="39" pos:column="40"/></specifier> <name pos:line="39" pos:column="41">char<pos:position pos:line="39" pos:column="45"/></name> <operator pos:line="39" pos:column="46">*<pos:position pos:line="39" pos:column="47"/></operator><operator pos:line="39" pos:column="47">*<pos:position pos:line="39" pos:column="48"/></operator><operator pos:line="39" pos:column="48">)<pos:position pos:line="39" pos:column="49"/></operator><operator pos:line="39" pos:column="49">&amp;<pos:position pos:line="39" pos:column="54"/></operator><name pos:line="39" pos:column="50">input_ptr<pos:position pos:line="39" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="61">&amp;<pos:position pos:line="39" pos:column="66"/></operator><name pos:line="39" pos:column="62">in_bytes<pos:position pos:line="39" pos:column="70"/></name></expr></argument>,
               <argument><expr><operator pos:line="40" pos:column="16">&amp;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="17">output_ptr<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="29">&amp;<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="30">out_bytes<pos:position pos:line="40" pos:column="39"/></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
    <if pos:line="41" pos:column="5">if<condition pos:line="41" pos:column="7">(<expr><operator pos:line="41" pos:column="8">(<pos:position pos:line="41" pos:column="9"/></operator><name pos:line="41" pos:column="9">rc<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">==<pos:position pos:line="41" pos:column="14"/></operator> <name pos:line="41" pos:column="15">ICONV_ERROR<pos:position pos:line="41" pos:column="26"/></name><operator pos:line="41" pos:column="26">)<pos:position pos:line="41" pos:column="27"/></operator> <operator pos:line="41" pos:column="28">||<pos:position pos:line="41" pos:column="30"/></operator> <operator pos:line="41" pos:column="31">(<pos:position pos:line="41" pos:column="32"/></operator><name pos:line="41" pos:column="32">in_bytes<pos:position pos:line="41" pos:column="40"/></name> <operator pos:line="41" pos:column="41">!=<pos:position pos:line="41" pos:column="43"/></operator> <literal type="number" pos:line="41" pos:column="44">0<pos:position pos:line="41" pos:column="45"/></literal><operator pos:line="41" pos:column="45">)<pos:position pos:line="41" pos:column="46"/></operator></expr>)<pos:position pos:line="41" pos:column="47"/></condition><then pos:line="41" pos:column="47"> <block pos:line="41" pos:column="48">{
      <expr_stmt><expr><name pos:line="42" pos:column="7">error<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <name pos:line="42" pos:column="15">ERRNO<pos:position pos:line="42" pos:column="20"/></name></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">failf<pos:position pos:line="43" pos:column="12"/></name><argument_list pos:line="43" pos:column="12">(<argument><expr><name pos:line="43" pos:column="13">data<pos:position pos:line="43" pos:column="17"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="44" pos:column="13">"Curl_convert_from_network iconv call failed with errno %i: %s"<pos:position pos:line="44" pos:column="76"/></literal></expr></argument>,
            <argument><expr><name pos:line="45" pos:column="13">error<pos:position pos:line="45" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="20">strerror<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name pos:line="45" pos:column="29">error<pos:position pos:line="45" pos:column="34"/></name></expr></argument>)<pos:position pos:line="45" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt>
      <return pos:line="46" pos:column="7">return <expr><name pos:line="46" pos:column="14">CURLE_CONV_FAILED<pos:position pos:line="46" pos:column="31"/></name></expr>;<pos:position pos:line="46" pos:column="32"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
<cpp:else pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">else<pos:position pos:line="48" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">failf<pos:position pos:line="49" pos:column="10"/></name><argument_list pos:line="49" pos:column="10">(<argument><expr><name pos:line="49" pos:column="11">data<pos:position pos:line="49" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="17">"CURLOPT_CONV_FROM_NETWORK_FUNCTION callback required"<pos:position pos:line="49" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="73"/></expr_stmt>
    <return pos:line="50" pos:column="5">return <expr><name pos:line="50" pos:column="12">CURLE_CONV_REQD<pos:position pos:line="50" pos:column="27"/></name></expr>;<pos:position pos:line="50" pos:column="28"/></return>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="51" pos:column="8">/* HAVE_ICONV */</comment>
  }<pos:position pos:line="52" pos:column="4"/></block></else></if>

  <return pos:line="54" pos:column="3">return <expr><name pos:line="54" pos:column="10">CURLE_OK<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
