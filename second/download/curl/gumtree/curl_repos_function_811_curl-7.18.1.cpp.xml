<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_811_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_client_write<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">type<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">ptr<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="4" pos:column="28">size_t<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">len<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="39"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">conn<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">wrote<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* If reading is actually paused, we're forced to append this chunk of data
     to the already held data, but only if it is the same type as otherwise it
     can't work and it'll return error instead. */</comment>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name><name pos:line="12" pos:column="6">data<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">req<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">keepon<pos:position pos:line="12" pos:column="22"/></name></name> <operator pos:line="12" pos:column="23">&amp;<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="25">KEEP_READ_PAUSE<pos:position pos:line="12" pos:column="40"/></name></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41"> <block pos:line="12" pos:column="42">{
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">size_t<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">newlen<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name> <modifier pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></modifier></type><name pos:line="14" pos:column="11">newptr<pos:position pos:line="14" pos:column="17"/></name></decl>;<pos:position pos:line="14" pos:column="18"/></decl_stmt>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name pos:line="15" pos:column="8">type<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">!=<pos:position pos:line="15" pos:column="15"/></operator> <name><name pos:line="15" pos:column="16">data<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">state<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">.<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="28">tempwritetype<pos:position pos:line="15" pos:column="41"/></name></name></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42">
      <comment type="block" pos:line="16" pos:column="7">/* major internal confusion */</comment>
      <block type="pseudo"><return pos:line="17" pos:column="7">return <expr><name pos:line="17" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></return></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* figure out the new size of the data to save */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">newlen<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">len<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">+<pos:position pos:line="20" pos:column="19"/></operator> <name><name pos:line="20" pos:column="20">data<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">-&gt;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="26">state<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">tempwritesize<pos:position pos:line="20" pos:column="45"/></name></name></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
    <comment type="block" pos:line="21" pos:column="5">/* allocate the new memory area */</comment>
    <expr_stmt><expr><name pos:line="22" pos:column="5">newptr<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">malloc<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">newlen<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><operator pos:line="23" pos:column="8">!<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">newptr<pos:position pos:line="23" pos:column="15"/></name></expr>)<pos:position pos:line="23" pos:column="16"/></condition><then pos:line="23" pos:column="16">
      <block type="pseudo"><return pos:line="24" pos:column="7">return <expr><name pos:line="24" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="24" pos:column="33"/></name></expr>;<pos:position pos:line="24" pos:column="34"/></return></block></then></if>
    <comment type="block" pos:line="25" pos:column="5">/* copy the previously held data to the new area */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memcpy<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">newptr<pos:position pos:line="26" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="20">data<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">-&gt;<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="26">state<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">.<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">tempwrite<pos:position pos:line="26" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="43">data<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">-&gt;<pos:position pos:line="26" pos:column="52"/></operator><name pos:line="26" pos:column="49">state<pos:position pos:line="26" pos:column="54"/></name><operator pos:line="26" pos:column="54">.<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="55">tempwritesize<pos:position pos:line="26" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="70"/></expr_stmt>
    <comment type="block" pos:line="27" pos:column="5">/* copy the new data to the end of the new area */</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">memcpy<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">newptr<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">+<pos:position pos:line="28" pos:column="20"/></operator> <name><name pos:line="28" pos:column="21">data<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">state<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">.<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="33">tempwritesize<pos:position pos:line="28" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">ptr<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">len<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
    <comment type="block" pos:line="29" pos:column="5">/* free the old data */</comment>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">free<pos:position pos:line="30" pos:column="9"/></name><argument_list pos:line="30" pos:column="9">(<argument><expr><name><name pos:line="30" pos:column="10">data<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">-&gt;<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="16">state<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">.<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">tempwrite<pos:position pos:line="30" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
    <comment type="block" pos:line="31" pos:column="5">/* update the pointer and the size */</comment>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">data<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">-&gt;<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="11">state<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">tempwrite<pos:position pos:line="32" pos:column="26"/></name></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="29">newptr<pos:position pos:line="32" pos:column="35"/></name></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">data<pos:position pos:line="33" pos:column="9"/></name><operator pos:line="33" pos:column="9">-&gt;<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="11">state<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">.<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">tempwritesize<pos:position pos:line="33" pos:column="30"/></name></name> <operator pos:line="33" pos:column="31">=<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="33">newlen<pos:position pos:line="33" pos:column="39"/></name></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>

    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">CURLE_OK<pos:position pos:line="35" pos:column="20"/></name></expr>;<pos:position pos:line="35" pos:column="21"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><literal type="number" pos:line="38" pos:column="6">0<pos:position pos:line="38" pos:column="7"/></literal> <operator pos:line="38" pos:column="8">==<pos:position pos:line="38" pos:column="10"/></operator> <name pos:line="38" pos:column="11">len<pos:position pos:line="38" pos:column="14"/></name></expr>)<pos:position pos:line="38" pos:column="15"/></condition><then pos:line="38" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="5">len<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">=<pos:position pos:line="39" pos:column="10"/></operator> <call><name pos:line="39" pos:column="11">strlen<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><name pos:line="39" pos:column="18">ptr<pos:position pos:line="39" pos:column="21"/></name></expr></argument>)<pos:position pos:line="39" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt></block></then></if>

  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><name pos:line="41" pos:column="6">type<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">&amp;<pos:position pos:line="41" pos:column="16"/></operator> <name pos:line="41" pos:column="13">CLIENTWRITE_BODY<pos:position pos:line="41" pos:column="29"/></name></expr>)<pos:position pos:line="41" pos:column="30"/></condition><then pos:line="41" pos:column="30"> <block pos:line="41" pos:column="31">{
    <if pos:line="42" pos:column="5">if<condition pos:line="42" pos:column="7">(<expr><operator pos:line="42" pos:column="8">(<pos:position pos:line="42" pos:column="9"/></operator><name><name pos:line="42" pos:column="9">conn<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">protocol<pos:position pos:line="42" pos:column="23"/></name></name><operator pos:line="42" pos:column="23">&amp;<pos:position pos:line="42" pos:column="28"/></operator><name pos:line="42" pos:column="24">PROT_FTP<pos:position pos:line="42" pos:column="32"/></name><operator pos:line="42" pos:column="32">)<pos:position pos:line="42" pos:column="33"/></operator> <operator pos:line="42" pos:column="34">&amp;&amp;<pos:position pos:line="42" pos:column="44"/></operator> <name><name pos:line="42" pos:column="37">conn<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">proto<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">.<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="49">ftpc<pos:position pos:line="42" pos:column="53"/></name><operator pos:line="42" pos:column="53">.<pos:position pos:line="42" pos:column="54"/></operator><name pos:line="42" pos:column="54">transfertype<pos:position pos:line="42" pos:column="66"/></name></name> <operator pos:line="42" pos:column="67">==<pos:position pos:line="42" pos:column="69"/></operator> <literal type="char" pos:line="42" pos:column="70">'A'<pos:position pos:line="42" pos:column="73"/></literal></expr>)<pos:position pos:line="42" pos:column="74"/></condition><then pos:line="42" pos:column="74"> <block pos:line="42" pos:column="75">{
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="43" pos:column="29"/></name></cpp:ifdef>
      <comment type="block" pos:line="44" pos:column="7">/* convert from the network encoding */</comment>
      <decl_stmt><decl><type><name pos:line="45" pos:column="7">size_t<pos:position pos:line="45" pos:column="13"/></name></type> <name pos:line="45" pos:column="14">rc<pos:position pos:line="45" pos:column="16"/></name></decl>;<pos:position pos:line="45" pos:column="17"/></decl_stmt>
      <expr_stmt><expr><name pos:line="46" pos:column="7">rc<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <call><name pos:line="46" pos:column="12">Curl_convert_from_network<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">data<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="44">ptr<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="49">len<pos:position pos:line="46" pos:column="52"/></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>
      <comment type="block" pos:line="47" pos:column="7">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><name pos:line="48" pos:column="10">rc<pos:position pos:line="48" pos:column="12"/></name> <operator pos:line="48" pos:column="13">!=<pos:position pos:line="48" pos:column="15"/></operator> <name pos:line="48" pos:column="16">CURLE_OK<pos:position pos:line="48" pos:column="24"/></name></expr>)<pos:position pos:line="48" pos:column="25"/></condition><then pos:line="48" pos:column="25">
        <block type="pseudo"><return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">rc<pos:position pos:line="49" pos:column="18"/></name></expr>;<pos:position pos:line="49" pos:column="19"/></return></block></then></if>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="50" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

<cpp:ifdef pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">ifdef<pos:position pos:line="52" pos:column="7"/></cpp:directive> <name pos:line="52" pos:column="8">CURL_DO_LINEEND_CONV<pos:position pos:line="52" pos:column="28"/></name></cpp:ifdef>
      <comment type="block" pos:line="53" pos:column="7">/* convert end-of-line markers */</comment>
      <expr_stmt><expr><name pos:line="54" pos:column="7">len<pos:position pos:line="54" pos:column="10"/></name> <operator pos:line="54" pos:column="11">=<pos:position pos:line="54" pos:column="12"/></operator> <call><name pos:line="54" pos:column="13">convert_lineends<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">data<pos:position pos:line="54" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="36">ptr<pos:position pos:line="54" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="41">len<pos:position pos:line="54" pos:column="44"/></name></expr></argument>)<pos:position pos:line="54" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="55" pos:column="8">/* CURL_DO_LINEEND_CONV */</comment>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="57" pos:column="5">/* If the previous block of data ended with CR and this block of data is
       just a NL, then the length might be zero */</comment>
    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">(<expr><name pos:line="59" pos:column="8">len<pos:position pos:line="59" pos:column="11"/></name></expr>)<pos:position pos:line="59" pos:column="12"/></condition><then pos:line="59" pos:column="12"> <block pos:line="59" pos:column="13">{
      <expr_stmt><expr><name pos:line="60" pos:column="7">wrote<pos:position pos:line="60" pos:column="12"/></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <call><name><name pos:line="60" pos:column="15">data<pos:position pos:line="60" pos:column="19"/></name><operator pos:line="60" pos:column="19">-&gt;<pos:position pos:line="60" pos:column="24"/></operator><name pos:line="60" pos:column="21">set<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">.<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="25">fwrite_func<pos:position pos:line="60" pos:column="36"/></name></name><argument_list pos:line="60" pos:column="36">(<argument><expr><name pos:line="60" pos:column="37">ptr<pos:position pos:line="60" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="42">1<pos:position pos:line="60" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="45">len<pos:position pos:line="60" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="50">data<pos:position pos:line="60" pos:column="54"/></name><operator pos:line="60" pos:column="54">-&gt;<pos:position pos:line="60" pos:column="59"/></operator><name pos:line="60" pos:column="56">set<pos:position pos:line="60" pos:column="59"/></name><operator pos:line="60" pos:column="59">.<pos:position pos:line="60" pos:column="60"/></operator><name pos:line="60" pos:column="60">out<pos:position pos:line="60" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then>
    <else pos:line="62" pos:column="5">else <block pos:line="62" pos:column="10">{
      <expr_stmt><expr><name pos:line="63" pos:column="7">wrote<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">=<pos:position pos:line="63" pos:column="14"/></operator> <name pos:line="63" pos:column="15">len<pos:position pos:line="63" pos:column="18"/></name></expr>;<pos:position pos:line="63" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></else></if>

    <if pos:line="66" pos:column="5">if<condition pos:line="66" pos:column="7">(<expr><name pos:line="66" pos:column="8">CURL_WRITEFUNC_PAUSE<pos:position pos:line="66" pos:column="28"/></name> <operator pos:line="66" pos:column="29">==<pos:position pos:line="66" pos:column="31"/></operator> <name pos:line="66" pos:column="32">wrote<pos:position pos:line="66" pos:column="37"/></name></expr>)<pos:position pos:line="66" pos:column="38"/></condition><then pos:line="66" pos:column="38">
      <block type="pseudo"><return pos:line="67" pos:column="7">return <expr><call><name pos:line="67" pos:column="14">pausewrite<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">data<pos:position pos:line="67" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="31">type<pos:position pos:line="67" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="37">ptr<pos:position pos:line="67" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="42">len<pos:position pos:line="67" pos:column="45"/></name></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></return></block></then></if>

    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">(<expr><name pos:line="69" pos:column="8">wrote<pos:position pos:line="69" pos:column="13"/></name> <operator pos:line="69" pos:column="14">!=<pos:position pos:line="69" pos:column="16"/></operator> <name pos:line="69" pos:column="17">len<pos:position pos:line="69" pos:column="20"/></name></expr>)<pos:position pos:line="69" pos:column="21"/></condition><then pos:line="69" pos:column="21"> <block pos:line="69" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">failf<pos:position pos:line="70" pos:column="12"/></name><argument_list pos:line="70" pos:column="12">(<argument><expr><name pos:line="70" pos:column="13">data<pos:position pos:line="70" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="19">"Failed writing body (%d != %d)"<pos:position pos:line="70" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="70" pos:column="53">(<pos:position pos:line="70" pos:column="54"/></operator><name pos:line="70" pos:column="54">int<pos:position pos:line="70" pos:column="57"/></name><operator pos:line="70" pos:column="57">)<pos:position pos:line="70" pos:column="58"/></operator><name pos:line="70" pos:column="58">wrote<pos:position pos:line="70" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="65">(<pos:position pos:line="70" pos:column="66"/></operator><name pos:line="70" pos:column="66">int<pos:position pos:line="70" pos:column="69"/></name><operator pos:line="70" pos:column="69">)<pos:position pos:line="70" pos:column="70"/></operator><name pos:line="70" pos:column="70">len<pos:position pos:line="70" pos:column="73"/></name></expr></argument>)<pos:position pos:line="70" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="75"/></expr_stmt>
      <return pos:line="71" pos:column="7">return <expr><name pos:line="71" pos:column="14">CURLE_WRITE_ERROR<pos:position pos:line="71" pos:column="31"/></name></expr>;<pos:position pos:line="71" pos:column="32"/></return>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>
  }<pos:position pos:line="73" pos:column="4"/></block></then></if>

  <if pos:line="75" pos:column="3">if<condition pos:line="75" pos:column="5">(<expr><operator pos:line="75" pos:column="6">(<pos:position pos:line="75" pos:column="7"/></operator><name pos:line="75" pos:column="7">type<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">&amp;<pos:position pos:line="75" pos:column="17"/></operator> <name pos:line="75" pos:column="14">CLIENTWRITE_HEADER<pos:position pos:line="75" pos:column="32"/></name><operator pos:line="75" pos:column="32">)<pos:position pos:line="75" pos:column="33"/></operator> <operator pos:line="75" pos:column="34">&amp;&amp;<pos:position pos:line="75" pos:column="44"/></operator>
     <operator pos:line="76" pos:column="6">(<pos:position pos:line="76" pos:column="7"/></operator><name><name pos:line="76" pos:column="7">data<pos:position pos:line="76" pos:column="11"/></name><operator pos:line="76" pos:column="11">-&gt;<pos:position pos:line="76" pos:column="16"/></operator><name pos:line="76" pos:column="13">set<pos:position pos:line="76" pos:column="16"/></name><operator pos:line="76" pos:column="16">.<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="17">fwrite_header<pos:position pos:line="76" pos:column="30"/></name></name> <operator pos:line="76" pos:column="31">||<pos:position pos:line="76" pos:column="33"/></operator> <name><name pos:line="76" pos:column="34">data<pos:position pos:line="76" pos:column="38"/></name><operator pos:line="76" pos:column="38">-&gt;<pos:position pos:line="76" pos:column="43"/></operator><name pos:line="76" pos:column="40">set<pos:position pos:line="76" pos:column="43"/></name><operator pos:line="76" pos:column="43">.<pos:position pos:line="76" pos:column="44"/></operator><name pos:line="76" pos:column="44">writeheader<pos:position pos:line="76" pos:column="55"/></name></name><operator pos:line="76" pos:column="55">)<pos:position pos:line="76" pos:column="56"/></operator></expr> )<pos:position pos:line="76" pos:column="58"/></condition><then pos:line="76" pos:column="58"> <block pos:line="76" pos:column="59">{
    <comment type="block" pos:line="77" pos:column="5">/*
     * Write headers to the same callback or to the especially setup
     * header callback function (added after version 7.7.1).
     */</comment>
    <decl_stmt><decl><type><name pos:line="81" pos:column="5">curl_write_callback<pos:position pos:line="81" pos:column="24"/></name></type> <name pos:line="81" pos:column="25">writeit<pos:position pos:line="81" pos:column="32"/></name><init pos:line="81" pos:column="32">=
      <expr><ternary><condition><expr><name><name pos:line="82" pos:column="7">data<pos:position pos:line="82" pos:column="11"/></name><operator pos:line="82" pos:column="11">-&gt;<pos:position pos:line="82" pos:column="16"/></operator><name pos:line="82" pos:column="13">set<pos:position pos:line="82" pos:column="16"/></name><operator pos:line="82" pos:column="16">.<pos:position pos:line="82" pos:column="17"/></operator><name pos:line="82" pos:column="17">fwrite_header<pos:position pos:line="82" pos:column="30"/></name></name></expr>?<pos:position pos:line="82" pos:column="31"/></condition><then><expr><name><name pos:line="82" pos:column="31">data<pos:position pos:line="82" pos:column="35"/></name><operator pos:line="82" pos:column="35">-&gt;<pos:position pos:line="82" pos:column="40"/></operator><name pos:line="82" pos:column="37">set<pos:position pos:line="82" pos:column="40"/></name><operator pos:line="82" pos:column="40">.<pos:position pos:line="82" pos:column="41"/></operator><name pos:line="82" pos:column="41">fwrite_header<pos:position pos:line="82" pos:column="54"/></name></name></expr></then><else pos:line="82" pos:column="54">:<expr><name><name pos:line="82" pos:column="55">data<pos:position pos:line="82" pos:column="59"/></name><operator pos:line="82" pos:column="59">-&gt;<pos:position pos:line="82" pos:column="64"/></operator><name pos:line="82" pos:column="61">set<pos:position pos:line="82" pos:column="64"/></name><operator pos:line="82" pos:column="64">.<pos:position pos:line="82" pos:column="65"/></operator><name pos:line="82" pos:column="65">fwrite_func<pos:position pos:line="82" pos:column="76"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="82" pos:column="77"/></decl_stmt>

    <comment type="block" pos:line="84" pos:column="5">/* Note: The header is in the host encoding
       regardless of the ftp transfer mode (ASCII/Image) */</comment>

    <expr_stmt><expr><name pos:line="87" pos:column="5">wrote<pos:position pos:line="87" pos:column="10"/></name> <operator pos:line="87" pos:column="11">=<pos:position pos:line="87" pos:column="12"/></operator> <call><name pos:line="87" pos:column="13">writeit<pos:position pos:line="87" pos:column="20"/></name><argument_list pos:line="87" pos:column="20">(<argument><expr><name pos:line="87" pos:column="21">ptr<pos:position pos:line="87" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="26">1<pos:position pos:line="87" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="29">len<pos:position pos:line="87" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="34">data<pos:position pos:line="87" pos:column="38"/></name><operator pos:line="87" pos:column="38">-&gt;<pos:position pos:line="87" pos:column="43"/></operator><name pos:line="87" pos:column="40">set<pos:position pos:line="87" pos:column="43"/></name><operator pos:line="87" pos:column="43">.<pos:position pos:line="87" pos:column="44"/></operator><name pos:line="87" pos:column="44">writeheader<pos:position pos:line="87" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="57"/></expr_stmt>
    <if pos:line="88" pos:column="5">if<condition pos:line="88" pos:column="7">(<expr><name pos:line="88" pos:column="8">CURL_WRITEFUNC_PAUSE<pos:position pos:line="88" pos:column="28"/></name> <operator pos:line="88" pos:column="29">==<pos:position pos:line="88" pos:column="31"/></operator> <name pos:line="88" pos:column="32">wrote<pos:position pos:line="88" pos:column="37"/></name></expr>)<pos:position pos:line="88" pos:column="38"/></condition><then pos:line="88" pos:column="38">
      <comment type="block" pos:line="89" pos:column="7">/* here we pass in the HEADER bit only since if this was body as well
         then it was passed already and clearly that didn't trigger the pause,
         so this is saved for later with the HEADER bit only */</comment>
      <block type="pseudo"><return pos:line="92" pos:column="7">return <expr><call><name pos:line="92" pos:column="14">pausewrite<pos:position pos:line="92" pos:column="24"/></name><argument_list pos:line="92" pos:column="24">(<argument><expr><name pos:line="92" pos:column="25">data<pos:position pos:line="92" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="31">CLIENTWRITE_HEADER<pos:position pos:line="92" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="51">ptr<pos:position pos:line="92" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="56">len<pos:position pos:line="92" pos:column="59"/></name></expr></argument>)<pos:position pos:line="92" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="61"/></return></block></then></if>

    <if pos:line="94" pos:column="5">if<condition pos:line="94" pos:column="7">(<expr><name pos:line="94" pos:column="8">wrote<pos:position pos:line="94" pos:column="13"/></name> <operator pos:line="94" pos:column="14">!=<pos:position pos:line="94" pos:column="16"/></operator> <name pos:line="94" pos:column="17">len<pos:position pos:line="94" pos:column="20"/></name></expr>)<pos:position pos:line="94" pos:column="21"/></condition><then pos:line="94" pos:column="21"> <block pos:line="94" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="95" pos:column="7">failf<pos:position pos:line="95" pos:column="12"/></name> <argument_list pos:line="95" pos:column="13">(<argument><expr><name pos:line="95" pos:column="14">data<pos:position pos:line="95" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="20">"Failed writing header"<pos:position pos:line="95" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="45"/></expr_stmt>
      <return pos:line="96" pos:column="7">return <expr><name pos:line="96" pos:column="14">CURLE_WRITE_ERROR<pos:position pos:line="96" pos:column="31"/></name></expr>;<pos:position pos:line="96" pos:column="32"/></return>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>
  }<pos:position pos:line="98" pos:column="4"/></block></then></if>

  <return pos:line="100" pos:column="3">return <expr><name pos:line="100" pos:column="10">CURLE_OK<pos:position pos:line="100" pos:column="18"/></name></expr>;<pos:position pos:line="100" pos:column="19"/></return>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
