<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_353_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">convert<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type> <name pos:line="2" pos:column="16">d<pos:position pos:line="2" pos:column="17"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="19">size_t<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">dlen<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">dccsid<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
        <parameter><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type> <name pos:line="3" pos:column="22">s<pos:position pos:line="3" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="25">int<pos:position pos:line="3" pos:column="28"/></name></type> <name pos:line="3" pos:column="29">slen<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="35">int<pos:position pos:line="3" pos:column="38"/></name></type> <name pos:line="3" pos:column="39">sccsid<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="46"/></parameter_list>

<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name></decl>;<pos:position pos:line="6" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">iconv_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">cd<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">lslen<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="10" pos:column="3">/**
  ***  Convert `sccsid'-coded `slen'-data bytes at `s' into `dccsid'-coded
  ***   data stored in the `dlen'-byte buffer at `d'.
  ***  If `slen' &lt; 0, source string is null-terminated.
  ***  CCSID 65535 (no conversion) is replaced by the ASCII CCSID.
  ***  Return the converted destination byte count, or -1 if error.
  **/</comment>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">sccsid<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">==<pos:position pos:line="18" pos:column="15"/></operator> <literal type="number" pos:line="18" pos:column="16">65535<pos:position pos:line="18" pos:column="21"/></literal></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="5">sccsid<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">ASCII_CCSID<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt></block></then></if>

  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><name pos:line="21" pos:column="6">dccsid<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">==<pos:position pos:line="21" pos:column="15"/></operator> <literal type="number" pos:line="21" pos:column="16">65535<pos:position pos:line="21" pos:column="21"/></literal></expr>)<pos:position pos:line="21" pos:column="22"/></condition><then pos:line="21" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="5">dccsid<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <name pos:line="22" pos:column="14">ASCII_CCSID<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt></block></then></if>

  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><name pos:line="24" pos:column="6">sccsid<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">==<pos:position pos:line="24" pos:column="15"/></operator> <name pos:line="24" pos:column="16">dccsid<pos:position pos:line="24" pos:column="22"/></name></expr>)<pos:position pos:line="24" pos:column="23"/></condition><then pos:line="24" pos:column="23"> <block pos:line="24" pos:column="24">{
    <expr_stmt><expr><name pos:line="25" pos:column="5">lslen<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <ternary><condition><expr><name pos:line="25" pos:column="13">slen<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">&gt;=<pos:position pos:line="25" pos:column="23"/></operator> <literal type="number" pos:line="25" pos:column="21">0<pos:position pos:line="25" pos:column="22"/></literal></expr>?<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23"> <expr><name pos:line="25" pos:column="24">slen<pos:position pos:line="25" pos:column="28"/></name></expr></then><else pos:line="25" pos:column="28">: <expr><call><name pos:line="25" pos:column="30">strlen<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">s<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call> <operator pos:line="25" pos:column="40">+<pos:position pos:line="25" pos:column="41"/></operator> <literal type="number" pos:line="25" pos:column="42">1<pos:position pos:line="25" pos:column="43"/></literal></expr></else></ternary></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">i<pos:position pos:line="26" pos:column="6"/></name> <operator pos:line="26" pos:column="7">=<pos:position pos:line="26" pos:column="8"/></operator> <ternary><condition><expr><name pos:line="26" pos:column="9">lslen<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">&lt;<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="17">dlen<pos:position pos:line="26" pos:column="21"/></name></expr>?<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22"> <expr><name pos:line="26" pos:column="23">lslen<pos:position pos:line="26" pos:column="28"/></name></expr></then><else pos:line="26" pos:column="28">: <expr><name pos:line="26" pos:column="30">dlen<pos:position pos:line="26" pos:column="34"/></name></expr></else></ternary></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>

    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><name pos:line="28" pos:column="8">s<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">!=<pos:position pos:line="28" pos:column="12"/></operator> <name pos:line="28" pos:column="13">d<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">&amp;&amp;<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="18">i<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">&gt;<pos:position pos:line="28" pos:column="24"/></operator> <literal type="number" pos:line="28" pos:column="22">0<pos:position pos:line="28" pos:column="23"/></literal></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="7">memcpy<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">d<pos:position pos:line="29" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="17">s<pos:position pos:line="29" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="20">i<pos:position pos:line="29" pos:column="21"/></name></expr></argument>)<pos:position pos:line="29" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt></block></then></if>

    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">i<pos:position pos:line="31" pos:column="13"/></name></expr>;<pos:position pos:line="31" pos:column="14"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name pos:line="34" pos:column="6">slen<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">&lt;<pos:position pos:line="34" pos:column="15"/></operator> <literal type="number" pos:line="34" pos:column="13">0<pos:position pos:line="34" pos:column="14"/></literal></expr>)<pos:position pos:line="34" pos:column="15"/></condition><then pos:line="34" pos:column="15"> <block pos:line="34" pos:column="16">{
    <expr_stmt><expr><name pos:line="35" pos:column="5">lslen<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <literal type="number" pos:line="35" pos:column="13">0<pos:position pos:line="35" pos:column="14"/></literal></expr>;<pos:position pos:line="35" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">cd<pos:position pos:line="36" pos:column="7"/></name> <operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator> <call><name pos:line="36" pos:column="10">iconv_open_CCSID<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">dccsid<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">sccsid<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="43">1<pos:position pos:line="36" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then>
  <else pos:line="38" pos:column="3">else <block pos:line="38" pos:column="8">{
    <expr_stmt><expr><name pos:line="39" pos:column="5">lslen<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <operator pos:line="39" pos:column="13">(<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">size_t<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">)<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="22">slen<pos:position pos:line="39" pos:column="26"/></name></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">cd<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <call><name pos:line="40" pos:column="10">iconv_open_CCSID<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name pos:line="40" pos:column="27">dccsid<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">sccsid<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="43">0<pos:position pos:line="40" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></else></if>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><call><name pos:line="43" pos:column="6">ICONV_OPEN_ERROR<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">cd<pos:position pos:line="43" pos:column="25"/></name></expr></argument>)<pos:position pos:line="43" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="27"/></condition><then pos:line="43" pos:column="27">
    <block type="pseudo"><return pos:line="44" pos:column="5">return <expr><operator pos:line="44" pos:column="12">-<pos:position pos:line="44" pos:column="13"/></operator><literal type="number" pos:line="44" pos:column="13">1<pos:position pos:line="44" pos:column="14"/></literal></expr>;<pos:position pos:line="44" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="46" pos:column="3">i<pos:position pos:line="46" pos:column="4"/></name> <operator pos:line="46" pos:column="5">=<pos:position pos:line="46" pos:column="6"/></operator> <name pos:line="46" pos:column="7">dlen<pos:position pos:line="46" pos:column="11"/></name></expr>;<pos:position pos:line="46" pos:column="12"/></expr_stmt>

  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><operator pos:line="48" pos:column="6">(<pos:position pos:line="48" pos:column="7"/></operator><name pos:line="48" pos:column="7">int<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">)<pos:position pos:line="48" pos:column="11"/></operator> <call><name pos:line="48" pos:column="12">iconv<pos:position pos:line="48" pos:column="17"/></name><argument_list pos:line="48" pos:column="17">(<argument><expr><name pos:line="48" pos:column="18">cd<pos:position pos:line="48" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="22">(<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">char<pos:position pos:line="48" pos:column="27"/></name> <operator pos:line="48" pos:column="28">*<pos:position pos:line="48" pos:column="29"/></operator> <operator pos:line="48" pos:column="30">*<pos:position pos:line="48" pos:column="31"/></operator><operator pos:line="48" pos:column="31">)<pos:position pos:line="48" pos:column="32"/></operator> <operator pos:line="48" pos:column="33">&amp;<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="34">s<pos:position pos:line="48" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="37">&amp;<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="38">lslen<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="45">&amp;<pos:position pos:line="48" pos:column="50"/></operator><name pos:line="48" pos:column="46">d<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="49">&amp;<pos:position pos:line="48" pos:column="54"/></operator><name pos:line="48" pos:column="50">dlen<pos:position pos:line="48" pos:column="54"/></name></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call> <operator pos:line="48" pos:column="56">&lt;<pos:position pos:line="48" pos:column="60"/></operator> <literal type="number" pos:line="48" pos:column="58">0<pos:position pos:line="48" pos:column="59"/></literal></expr>)<pos:position pos:line="48" pos:column="60"/></condition><then pos:line="48" pos:column="60">
    <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="5">i<pos:position pos:line="49" pos:column="6"/></name> <operator pos:line="49" pos:column="7">=<pos:position pos:line="49" pos:column="8"/></operator> <operator pos:line="49" pos:column="9">-<pos:position pos:line="49" pos:column="10"/></operator><literal type="number" pos:line="49" pos:column="10">1<pos:position pos:line="49" pos:column="11"/></literal></expr>;<pos:position pos:line="49" pos:column="12"/></expr_stmt></block></then>
  <else pos:line="50" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="5">i<pos:position pos:line="51" pos:column="6"/></name> <operator pos:line="51" pos:column="7">-=<pos:position pos:line="51" pos:column="9"/></operator> <name pos:line="51" pos:column="10">dlen<pos:position pos:line="51" pos:column="14"/></name></expr>;<pos:position pos:line="51" pos:column="15"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="53" pos:column="3">iconv_close<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">cd<pos:position pos:line="53" pos:column="17"/></name></expr></argument>)<pos:position pos:line="53" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="19"/></expr_stmt>
  <return pos:line="54" pos:column="3">return <expr><name pos:line="54" pos:column="10">i<pos:position pos:line="54" pos:column="11"/></name></expr>;<pos:position pos:line="54" pos:column="12"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
