<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1432_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">checkhttpprefix<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">Curl_easy<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">data<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">s<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">curl_slist<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">head<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name><name pos:line="5" pos:column="29">data<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">-&gt;<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="35">set<pos:position pos:line="5" pos:column="38"/></name><operator pos:line="5" pos:column="38">.<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="39">http200aliases<pos:position pos:line="5" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">rc<pos:position pos:line="6" pos:column="10"/></name> <init pos:line="6" pos:column="11">= <expr><name pos:line="6" pos:column="13">FALSE<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="7" pos:column="29"/></name></cpp:ifdef>
  <comment type="block" pos:line="8" pos:column="3">/* convert from the network encoding using a scratch area */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">scratch<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><call><name pos:line="9" pos:column="19">strdup<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">s<pos:position pos:line="9" pos:column="27"/></name></expr></argument>)<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">NULL<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">==<pos:position pos:line="10" pos:column="13"/></operator> <name pos:line="10" pos:column="14">scratch<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">failf<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><name pos:line="11" pos:column="11">data<pos:position pos:line="11" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="17">"Failed to allocate memory for conversion!"<pos:position pos:line="11" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">FALSE<pos:position pos:line="12" pos:column="17"/></name></expr>;<pos:position pos:line="12" pos:column="18"/></return> <comment type="block" pos:line="12" pos:column="19">/* can't return CURLE_OUT_OF_MEMORY so return FALSE */</comment>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">CURLE_OK<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">!=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">Curl_convert_from_network<pos:position pos:line="14" pos:column="43"/></name><argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">data<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="50">scratch<pos:position pos:line="14" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="59">strlen<pos:position pos:line="14" pos:column="65"/></name><argument_list pos:line="14" pos:column="65">(<argument><expr><name pos:line="14" pos:column="66">s<pos:position pos:line="14" pos:column="67"/></name></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call> <operator pos:line="14" pos:column="69">+<pos:position pos:line="14" pos:column="70"/></operator> <literal type="number" pos:line="14" pos:column="71">1<pos:position pos:line="14" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="74"/></condition><then pos:line="14" pos:column="74"> <block pos:line="14" pos:column="75">{
    <comment type="block" pos:line="15" pos:column="5">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">free<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><name pos:line="16" pos:column="10">scratch<pos:position pos:line="16" pos:column="17"/></name></expr></argument>)<pos:position pos:line="16" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">FALSE<pos:position pos:line="17" pos:column="17"/></name></expr>;<pos:position pos:line="17" pos:column="18"/></return> <comment type="block" pos:line="17" pos:column="19">/* can't return CURLE_foobar so return FALSE */</comment>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="19" pos:column="3">s<pos:position pos:line="19" pos:column="4"/></name> <operator pos:line="19" pos:column="5">=<pos:position pos:line="19" pos:column="6"/></operator> <name pos:line="19" pos:column="7">scratch<pos:position pos:line="19" pos:column="14"/></name></expr>;<pos:position pos:line="19" pos:column="15"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="20" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

  <while pos:line="22" pos:column="3">while<condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">head<pos:position pos:line="22" pos:column="13"/></name></expr>)<pos:position pos:line="22" pos:column="14"/></condition> <block pos:line="22" pos:column="15">{
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><call><name pos:line="23" pos:column="8">checkprefix<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name><name pos:line="23" pos:column="20">head<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">data<pos:position pos:line="23" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">s<pos:position pos:line="23" pos:column="33"/></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <block pos:line="23" pos:column="36">{
      <expr_stmt><expr><name pos:line="24" pos:column="7">rc<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <name pos:line="24" pos:column="12">TRUE<pos:position pos:line="24" pos:column="16"/></name></expr>;<pos:position pos:line="24" pos:column="17"/></expr_stmt>
      <break pos:line="25" pos:column="7">break;<pos:position pos:line="25" pos:column="13"/></break>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="27" pos:column="5">head<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <name><name pos:line="27" pos:column="12">head<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">-&gt;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="18">next<pos:position pos:line="27" pos:column="22"/></name></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></while>

  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><operator pos:line="30" pos:column="6">!<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">rc<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">&amp;&amp;<pos:position pos:line="30" pos:column="20"/></operator> <operator pos:line="30" pos:column="13">(<pos:position pos:line="30" pos:column="14"/></operator><call><name pos:line="30" pos:column="14">checkprefix<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><literal type="string" pos:line="30" pos:column="26">"HTTP/"<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">s<pos:position pos:line="30" pos:column="36"/></name></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call><operator pos:line="30" pos:column="37">)<pos:position pos:line="30" pos:column="38"/></operator></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39">
    <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="5">rc<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <name pos:line="31" pos:column="10">TRUE<pos:position pos:line="31" pos:column="14"/></name></expr>;<pos:position pos:line="31" pos:column="15"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifdef<pos:position pos:line="33" pos:column="7"/></cpp:directive> <name pos:line="33" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="33" pos:column="29"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">free<pos:position pos:line="34" pos:column="7"/></name><argument_list pos:line="34" pos:column="7">(<argument><expr><name pos:line="34" pos:column="8">scratch<pos:position pos:line="34" pos:column="15"/></name></expr></argument>)<pos:position pos:line="34" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="35" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>
  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">rc<pos:position pos:line="36" pos:column="12"/></name></expr>;<pos:position pos:line="36" pos:column="13"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
