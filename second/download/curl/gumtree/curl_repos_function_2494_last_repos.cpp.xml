<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2494_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">long<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">pem_to_der<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">in<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">unsigned<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier><modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">out<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">size_t<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">outlen<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">sep_start<pos:position pos:line="3" pos:column="18"/></name></decl>, <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="21">sep_end<pos:position pos:line="3" pos:column="28"/></name></decl>, <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="31">cert_start<pos:position pos:line="3" pos:column="41"/></name></decl>, <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="44">cert_end<pos:position pos:line="3" pos:column="52"/></name></decl>;<pos:position pos:line="3" pos:column="53"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">i<pos:position pos:line="4" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="13">j<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">err<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">len<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">b64<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Jump through the separators at the beginning of the certificate. */</comment>
  <expr_stmt><expr><name pos:line="9" pos:column="3">sep_start<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">strstr<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">in<pos:position pos:line="9" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="26">"-----"<pos:position pos:line="9" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">sep_start<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">NULL<pos:position pos:line="10" pos:column="23"/></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><literal type="number" pos:line="11" pos:column="12">0<pos:position pos:line="11" pos:column="13"/></literal></expr>;<pos:position pos:line="11" pos:column="14"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="12" pos:column="3">cert_start<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">strstr<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">sep_start<pos:position pos:line="12" pos:column="32"/></name> <operator pos:line="12" pos:column="33">+<pos:position pos:line="12" pos:column="34"/></operator> <literal type="number" pos:line="12" pos:column="35">1<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="38">"-----"<pos:position pos:line="12" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">cert_start<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">==<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">cert_start<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">+=<pos:position pos:line="16" pos:column="16"/></operator> <literal type="number" pos:line="16" pos:column="17">5<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* Find separator after the end of the certificate. */</comment>
  <expr_stmt><expr><name pos:line="19" pos:column="3">cert_end<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">strstr<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">cert_start<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="33">"-----"<pos:position pos:line="19" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">cert_end<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">==<pos:position pos:line="20" pos:column="17"/></operator> <name pos:line="20" pos:column="18">NULL<pos:position pos:line="20" pos:column="22"/></name></expr>)<pos:position pos:line="20" pos:column="23"/></condition><then pos:line="20" pos:column="23">
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="23" pos:column="3">sep_end<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">strstr<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">cert_end<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">+<pos:position pos:line="23" pos:column="30"/></operator> <literal type="number" pos:line="23" pos:column="31">1<pos:position pos:line="23" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="34">"-----"<pos:position pos:line="23" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><name pos:line="24" pos:column="6">sep_end<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">==<pos:position pos:line="24" pos:column="16"/></operator> <name pos:line="24" pos:column="17">NULL<pos:position pos:line="24" pos:column="21"/></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22">
    <block type="pseudo"><return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">-<pos:position pos:line="25" pos:column="13"/></operator><literal type="number" pos:line="25" pos:column="13">1<pos:position pos:line="25" pos:column="14"/></literal></expr>;<pos:position pos:line="25" pos:column="15"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="26" pos:column="3">sep_end<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">+=<pos:position pos:line="26" pos:column="13"/></operator> <literal type="number" pos:line="26" pos:column="14">5<pos:position pos:line="26" pos:column="15"/></literal></expr>;<pos:position pos:line="26" pos:column="16"/></expr_stmt>

  <expr_stmt><expr><name pos:line="28" pos:column="3">len<pos:position pos:line="28" pos:column="6"/></name> <operator pos:line="28" pos:column="7">=<pos:position pos:line="28" pos:column="8"/></operator> <name pos:line="28" pos:column="9">cert_end<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">-<pos:position pos:line="28" pos:column="19"/></operator> <name pos:line="28" pos:column="20">cert_start<pos:position pos:line="28" pos:column="30"/></name></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">b64<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <call><name pos:line="29" pos:column="9">malloc<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">len<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">+<pos:position pos:line="29" pos:column="21"/></operator> <literal type="number" pos:line="29" pos:column="22">1<pos:position pos:line="29" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><operator pos:line="30" pos:column="6">!<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">b64<pos:position pos:line="30" pos:column="10"/></name></expr>)<pos:position pos:line="30" pos:column="11"/></condition><then pos:line="30" pos:column="11">
    <block type="pseudo"><return pos:line="31" pos:column="5">return <expr><operator pos:line="31" pos:column="12">-<pos:position pos:line="31" pos:column="13"/></operator><literal type="number" pos:line="31" pos:column="13">1<pos:position pos:line="31" pos:column="14"/></literal></expr>;<pos:position pos:line="31" pos:column="15"/></return></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* Create base64 string without linefeeds. */</comment>
  <for pos:line="34" pos:column="3">for<control pos:line="34" pos:column="6">(<init><expr><name pos:line="34" pos:column="7">i<pos:position pos:line="34" pos:column="8"/></name> <operator pos:line="34" pos:column="9">=<pos:position pos:line="34" pos:column="10"/></operator> <literal type="number" pos:line="34" pos:column="11">0<pos:position pos:line="34" pos:column="12"/></literal></expr><operator pos:line="34" pos:column="12">,<pos:position pos:line="34" pos:column="13"/></operator> <expr><name pos:line="34" pos:column="14">j<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="18">0<pos:position pos:line="34" pos:column="19"/></literal></expr>;<pos:position pos:line="34" pos:column="20"/></init> <condition><expr><name pos:line="34" pos:column="21">i<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">&lt;<pos:position pos:line="34" pos:column="27"/></operator> <name pos:line="34" pos:column="25">len<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></condition> <incr><expr><name pos:line="34" pos:column="30">i<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">++<pos:position pos:line="34" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="34"/></control> <block pos:line="34" pos:column="35">{
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name><name pos:line="35" pos:column="8">cert_start<pos:position pos:line="35" pos:column="18"/></name><index pos:line="35" pos:column="18">[<expr><name pos:line="35" pos:column="19">i<pos:position pos:line="35" pos:column="20"/></name></expr>]<pos:position pos:line="35" pos:column="21"/></index></name> <operator pos:line="35" pos:column="22">!=<pos:position pos:line="35" pos:column="24"/></operator> <literal type="char" pos:line="35" pos:column="25">'\r'<pos:position pos:line="35" pos:column="29"/></literal> <operator pos:line="35" pos:column="30">&amp;&amp;<pos:position pos:line="35" pos:column="40"/></operator> <name><name pos:line="35" pos:column="33">cert_start<pos:position pos:line="35" pos:column="43"/></name><index pos:line="35" pos:column="43">[<expr><name pos:line="35" pos:column="44">i<pos:position pos:line="35" pos:column="45"/></name></expr>]<pos:position pos:line="35" pos:column="46"/></index></name> <operator pos:line="35" pos:column="47">!=<pos:position pos:line="35" pos:column="49"/></operator> <literal type="char" pos:line="35" pos:column="50">'\n'<pos:position pos:line="35" pos:column="54"/></literal></expr>)<pos:position pos:line="35" pos:column="55"/></condition><then pos:line="35" pos:column="55">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="7">b64<pos:position pos:line="36" pos:column="10"/></name><index pos:line="36" pos:column="10">[<expr><name pos:line="36" pos:column="11">j<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">++<pos:position pos:line="36" pos:column="14"/></operator></expr>]<pos:position pos:line="36" pos:column="15"/></index></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <name><name pos:line="36" pos:column="18">cert_start<pos:position pos:line="36" pos:column="28"/></name><index pos:line="36" pos:column="28">[<expr><name pos:line="36" pos:column="29">i<pos:position pos:line="36" pos:column="30"/></name></expr>]<pos:position pos:line="36" pos:column="31"/></index></name></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt></block></then></if>
  }<pos:position pos:line="37" pos:column="4"/></block></for>
  <expr_stmt><expr><name><name pos:line="38" pos:column="3">b64<pos:position pos:line="38" pos:column="6"/></name><index pos:line="38" pos:column="6">[<expr><name pos:line="38" pos:column="7">j<pos:position pos:line="38" pos:column="8"/></name></expr>]<pos:position pos:line="38" pos:column="9"/></index></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator> <literal type="char" pos:line="38" pos:column="12">'\0'<pos:position pos:line="38" pos:column="16"/></literal></expr>;<pos:position pos:line="38" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="40" pos:column="3">err<pos:position pos:line="40" pos:column="6"/></name> <operator pos:line="40" pos:column="7">=<pos:position pos:line="40" pos:column="8"/></operator> <call><name pos:line="40" pos:column="9">Curl_base64_decode<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><operator pos:line="40" pos:column="28">(<pos:position pos:line="40" pos:column="29"/></operator><specifier pos:line="40" pos:column="29">const<pos:position pos:line="40" pos:column="34"/></specifier> <name pos:line="40" pos:column="35">char<pos:position pos:line="40" pos:column="39"/></name> <operator pos:line="40" pos:column="40">*<pos:position pos:line="40" pos:column="41"/></operator><operator pos:line="40" pos:column="41">)<pos:position pos:line="40" pos:column="42"/></operator><name pos:line="40" pos:column="42">b64<pos:position pos:line="40" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="47">out<pos:position pos:line="40" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="52">outlen<pos:position pos:line="40" pos:column="58"/></name></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">free<pos:position pos:line="41" pos:column="7"/></name><argument_list pos:line="41" pos:column="7">(<argument><expr><name pos:line="41" pos:column="8">b64<pos:position pos:line="41" pos:column="11"/></name></expr></argument>)<pos:position pos:line="41" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="13"/></expr_stmt>
  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><name pos:line="42" pos:column="6">err<pos:position pos:line="42" pos:column="9"/></name></expr>)<pos:position pos:line="42" pos:column="10"/></condition><then pos:line="42" pos:column="10"> <block pos:line="42" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">free<pos:position pos:line="43" pos:column="9"/></name><argument_list pos:line="43" pos:column="9">(<argument><expr><operator pos:line="43" pos:column="10">*<pos:position pos:line="43" pos:column="11"/></operator><name pos:line="43" pos:column="11">out<pos:position pos:line="43" pos:column="14"/></name></expr></argument>)<pos:position pos:line="43" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="16"/></expr_stmt>
    <return pos:line="44" pos:column="5">return <expr><operator pos:line="44" pos:column="12">-<pos:position pos:line="44" pos:column="13"/></operator><literal type="number" pos:line="44" pos:column="13">1<pos:position pos:line="44" pos:column="14"/></literal></expr>;<pos:position pos:line="44" pos:column="15"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <return pos:line="47" pos:column="3">return <expr><name pos:line="47" pos:column="10">sep_end<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">-<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">in<pos:position pos:line="47" pos:column="22"/></name></expr>;<pos:position pos:line="47" pos:column="23"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
