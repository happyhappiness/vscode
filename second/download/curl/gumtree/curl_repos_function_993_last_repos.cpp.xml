<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_993_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">getpass_r<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">prompt<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="37">/* prompt to display */</comment>
                <parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">password<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>,     <comment type="block" pos:line="2" pos:column="37">/* buffer to store password in */</comment>
                <parameter><decl><type><name pos:line="3" pos:column="17">size_t<pos:position pos:line="3" pos:column="23"/></name></type> <name pos:line="3" pos:column="24">buflen<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>      <comment type="block" pos:line="3" pos:column="37">/* size of buffer to store password in */</comment>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">nread<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">disabled<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">fd<pos:position pos:line="7" pos:column="9"/></name> <init pos:line="7" pos:column="10">= <expr><call><name pos:line="7" pos:column="12">open<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><literal type="string" pos:line="7" pos:column="17">"/dev/tty"<pos:position pos:line="7" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="29">O_RDONLY<pos:position pos:line="7" pos:column="37"/></name></expr></argument>)<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">-<pos:position pos:line="8" pos:column="7"/></operator><literal type="number" pos:line="8" pos:column="7">1<pos:position pos:line="8" pos:column="8"/></literal> <operator pos:line="8" pos:column="9">==<pos:position pos:line="8" pos:column="11"/></operator> <name pos:line="8" pos:column="12">fd<pos:position pos:line="8" pos:column="14"/></name></expr>)<pos:position pos:line="8" pos:column="15"/></condition><then pos:line="8" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="5">fd<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <name pos:line="9" pos:column="10">STDIN_FILENO<pos:position pos:line="9" pos:column="22"/></name></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt></block></then></if> <comment type="block" pos:line="9" pos:column="24">/* use stdin if the tty couldn't be used */</comment>

  <expr_stmt><expr><name pos:line="11" pos:column="3">disabled<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">ttyecho<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">FALSE<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">fd<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt> <comment type="block" pos:line="11" pos:column="34">/* disable terminal echo */</comment>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">fputs<pos:position pos:line="13" pos:column="8"/></name><argument_list pos:line="13" pos:column="8">(<argument><expr><name pos:line="13" pos:column="9">prompt<pos:position pos:line="13" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="17">stderr<pos:position pos:line="13" pos:column="23"/></name></expr></argument>)<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">nread<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">read<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">fd<pos:position pos:line="14" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="20">password<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="30">buflen<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">nread<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">&gt;<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="14">0<pos:position pos:line="15" pos:column="15"/></literal></expr>)<pos:position pos:line="15" pos:column="16"/></condition><then pos:line="15" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="5">password<pos:position pos:line="16" pos:column="13"/></name><index pos:line="16" pos:column="13">[<expr><operator pos:line="16" pos:column="14">--<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">nread<pos:position pos:line="16" pos:column="21"/></name></expr>]<pos:position pos:line="16" pos:column="22"/></index></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <literal type="char" pos:line="16" pos:column="25">'\0'<pos:position pos:line="16" pos:column="29"/></literal></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt></block></then> <comment type="block" pos:line="16" pos:column="31">/* zero terminate where enter is stored */</comment>
  <else pos:line="17" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="5">password<pos:position pos:line="18" pos:column="13"/></name><index pos:line="18" pos:column="13">[<expr><literal type="number" pos:line="18" pos:column="14">0<pos:position pos:line="18" pos:column="15"/></literal></expr>]<pos:position pos:line="18" pos:column="16"/></index></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <literal type="char" pos:line="18" pos:column="19">'\0'<pos:position pos:line="18" pos:column="23"/></literal></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt></block></else></if> <comment type="block" pos:line="18" pos:column="25">/* got nothing */</comment>

  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">disabled<pos:position pos:line="20" pos:column="14"/></name></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15"> <block pos:line="20" pos:column="16">{
    <comment type="block" pos:line="21" pos:column="5">/* if echo actually was disabled, add a newline */</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">fputs<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><literal type="string" pos:line="22" pos:column="11">"\n"<pos:position pos:line="22" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="17">stderr<pos:position pos:line="22" pos:column="23"/></name></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="23" pos:column="5">(<pos:position pos:line="23" pos:column="6"/></operator><name pos:line="23" pos:column="6">void<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">)<pos:position pos:line="23" pos:column="11"/></operator><call><name pos:line="23" pos:column="11">ttyecho<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">TRUE<pos:position pos:line="23" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="25">fd<pos:position pos:line="23" pos:column="27"/></name></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt> <comment type="block" pos:line="23" pos:column="30">/* enable echo */</comment>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name pos:line="26" pos:column="6">STDIN_FILENO<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">!=<pos:position pos:line="26" pos:column="21"/></operator> <name pos:line="26" pos:column="22">fd<pos:position pos:line="26" pos:column="24"/></name></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="5">close<pos:position pos:line="27" pos:column="10"/></name><argument_list pos:line="27" pos:column="10">(<argument><expr><name pos:line="27" pos:column="11">fd<pos:position pos:line="27" pos:column="13"/></name></expr></argument>)<pos:position pos:line="27" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt></block></then></if>

  <return pos:line="29" pos:column="3">return <expr><name pos:line="29" pos:column="10">password<pos:position pos:line="29" pos:column="18"/></name></expr>;<pos:position pos:line="29" pos:column="19"/></return> <comment type="block" pos:line="29" pos:column="20">/* return pointer to buffer */</comment>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
