<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_567_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">test<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">char<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">URL<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">res<pos:position pos:line="3" pos:column="10"/></name> <init pos:line="3" pos:column="11">= <expr><literal type="number" pos:line="3" pos:column="13">0<pos:position pos:line="3" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURL<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name><name pos:line="4" pos:column="9">curl<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">NUM_HANDLES<pos:position pos:line="4" pos:column="25"/></name></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">running<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLM<pos:position pos:line="6" pos:column="8"/></name> <modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">m<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">target_url<pos:position pos:line="8" pos:column="18"/></name><index pos:line="8" pos:column="18">[<expr><literal type="number" pos:line="8" pos:column="19">256<pos:position pos:line="8" pos:column="22"/></literal></expr>]<pos:position pos:line="8" pos:column="23"/></index></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">handles_added<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

  <for pos:line="11" pos:column="3">for<control pos:line="11" pos:column="6">(<init><expr><name pos:line="11" pos:column="7">i<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <literal type="number" pos:line="11" pos:column="11">0<pos:position pos:line="11" pos:column="12"/></literal></expr>;<pos:position pos:line="11" pos:column="13"/></init> <condition><expr><name pos:line="11" pos:column="14">i<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">&lt;<pos:position pos:line="11" pos:column="20"/></operator> <name pos:line="11" pos:column="18">NUM_HANDLES<pos:position pos:line="11" pos:column="29"/></name></expr>;<pos:position pos:line="11" pos:column="30"/></condition> <incr><expr><name pos:line="11" pos:column="31">i<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">++<pos:position pos:line="11" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="35"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="5">curl<pos:position pos:line="12" pos:column="9"/></name><index pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">i<pos:position pos:line="12" pos:column="11"/></name></expr>]<pos:position pos:line="12" pos:column="12"/></index></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">NULL<pos:position pos:line="12" pos:column="19"/></name></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt></block></for>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">start_test_timing<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">()<pos:position pos:line="14" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">global_init<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">CURL_GLOBAL_ALL<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">multi_init<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">m<pos:position pos:line="18" pos:column="15"/></name></expr></argument>)<pos:position pos:line="18" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>

  <comment type="block" pos:line="20" pos:column="3">/* get NUM_HANDLES easy handles */</comment>
  <for pos:line="21" pos:column="3">for<control pos:line="21" pos:column="6">(<init><expr><name pos:line="21" pos:column="7">i<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <literal type="number" pos:line="21" pos:column="11">0<pos:position pos:line="21" pos:column="12"/></literal></expr>;<pos:position pos:line="21" pos:column="13"/></init> <condition><expr><name pos:line="21" pos:column="14">i<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">&lt;<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="18">NUM_HANDLES<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></condition> <incr><expr><name pos:line="21" pos:column="31">i<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">++<pos:position pos:line="21" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="35"/></control> <block pos:line="21" pos:column="36">{
    <comment type="block" pos:line="22" pos:column="5">/* get an easy handle */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">easy_init<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><name><name pos:line="23" pos:column="15">curl<pos:position pos:line="23" pos:column="19"/></name><index pos:line="23" pos:column="19">[<expr><name pos:line="23" pos:column="20">i<pos:position pos:line="23" pos:column="21"/></name></expr>]<pos:position pos:line="23" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
    <comment type="block" pos:line="24" pos:column="5">/* specify target */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">snprintf<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">target_url<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="26">sizeof<argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">target_url<pos:position pos:line="25" pos:column="43"/></name></expr></argument>)<pos:position pos:line="25" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="46">"%s%04i"<pos:position pos:line="25" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="56">URL<pos:position pos:line="25" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="61">i<pos:position pos:line="25" pos:column="62"/></name> <operator pos:line="25" pos:column="63">+<pos:position pos:line="25" pos:column="64"/></operator> <literal type="number" pos:line="25" pos:column="65">1<pos:position pos:line="25" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">target_url<pos:position pos:line="26" pos:column="15"/></name><index pos:line="26" pos:column="15">[<expr><sizeof pos:line="26" pos:column="16">sizeof<argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">target_url<pos:position pos:line="26" pos:column="33"/></name></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></sizeof> <operator pos:line="26" pos:column="35">-<pos:position pos:line="26" pos:column="36"/></operator> <literal type="number" pos:line="26" pos:column="37">1<pos:position pos:line="26" pos:column="38"/></literal></expr>]<pos:position pos:line="26" pos:column="39"/></index></name> <operator pos:line="26" pos:column="40">=<pos:position pos:line="26" pos:column="41"/></operator> <literal type="char" pos:line="26" pos:column="42">'\0'<pos:position pos:line="26" pos:column="46"/></literal></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">easy_setopt<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name><name pos:line="27" pos:column="17">curl<pos:position pos:line="27" pos:column="21"/></name><index pos:line="27" pos:column="21">[<expr><name pos:line="27" pos:column="22">i<pos:position pos:line="27" pos:column="23"/></name></expr>]<pos:position pos:line="27" pos:column="24"/></index></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="26">CURLOPT_URL<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">target_url<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
    <comment type="block" pos:line="28" pos:column="5">/* go verbose */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">easy_setopt<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name><name pos:line="29" pos:column="17">curl<pos:position pos:line="29" pos:column="21"/></name><index pos:line="29" pos:column="21">[<expr><name pos:line="29" pos:column="22">i<pos:position pos:line="29" pos:column="23"/></name></expr>]<pos:position pos:line="29" pos:column="24"/></index></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="26">CURLOPT_VERBOSE<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="43">1L<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="47"/></expr_stmt>
    <comment type="block" pos:line="30" pos:column="5">/* include headers */</comment>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">easy_setopt<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name><name pos:line="31" pos:column="17">curl<pos:position pos:line="31" pos:column="21"/></name><index pos:line="31" pos:column="21">[<expr><name pos:line="31" pos:column="22">i<pos:position pos:line="31" pos:column="23"/></name></expr>]<pos:position pos:line="31" pos:column="24"/></index></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="26">CURLOPT_HEADER<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="42">1L<pos:position pos:line="31" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></for>

  <comment type="block" pos:line="34" pos:column="3">/* Add the first handle to multi. We do this to let libcurl detect
     that the server can do pipelining. The rest of the handles will be
     added later. */</comment>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">multi_add_handle<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">m<pos:position pos:line="37" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="23">curl<pos:position pos:line="37" pos:column="27"/></name><index pos:line="37" pos:column="27">[<expr><name pos:line="37" pos:column="28">handles_added<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">++<pos:position pos:line="37" pos:column="43"/></operator></expr>]<pos:position pos:line="37" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="39" pos:column="3">multi_setopt<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">m<pos:position pos:line="39" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="19">CURLMOPT_PIPELINING<pos:position pos:line="39" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="40">1L<pos:position pos:line="39" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="41" pos:column="3">fprintf<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><name pos:line="41" pos:column="11">stderr<pos:position pos:line="41" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="19">"Start at URL 0\n"<pos:position pos:line="41" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>

  <for pos:line="43" pos:column="3">for<control pos:line="43" pos:column="6">(<init pos:line="43" pos:column="7">;<pos:position pos:line="43" pos:column="8"/></init><condition pos:line="43" pos:column="8">;<pos:position pos:line="43" pos:column="9"/></condition><incr/>)<pos:position pos:line="43" pos:column="10"/></control> <block pos:line="43" pos:column="11">{
    <decl_stmt><decl><type><name><name pos:line="44" pos:column="5">struct<pos:position pos:line="44" pos:column="11"/></name> <name pos:line="44" pos:column="12">timeval<pos:position pos:line="44" pos:column="19"/></name></name></type> <name pos:line="44" pos:column="20">interval<pos:position pos:line="44" pos:column="28"/></name></decl>;<pos:position pos:line="44" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">fd_set<pos:position pos:line="45" pos:column="11"/></name></type> <name pos:line="45" pos:column="12">rd<pos:position pos:line="45" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="45" pos:column="16">wr<pos:position pos:line="45" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="45" pos:column="20">exc<pos:position pos:line="45" pos:column="23"/></name></decl>;<pos:position pos:line="45" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">int<pos:position pos:line="46" pos:column="8"/></name></type> <name pos:line="46" pos:column="9">maxfd<pos:position pos:line="46" pos:column="14"/></name> <init pos:line="46" pos:column="15">= <expr><operator pos:line="46" pos:column="17">-<pos:position pos:line="46" pos:column="18"/></operator><literal type="number" pos:line="46" pos:column="18">99<pos:position pos:line="46" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="46" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="48" pos:column="5">interval<pos:position pos:line="48" pos:column="13"/></name><operator pos:line="48" pos:column="13">.<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">tv_sec<pos:position pos:line="48" pos:column="20"/></name></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <literal type="number" pos:line="48" pos:column="23">1<pos:position pos:line="48" pos:column="24"/></literal></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">interval<pos:position pos:line="49" pos:column="13"/></name><operator pos:line="49" pos:column="13">.<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">tv_usec<pos:position pos:line="49" pos:column="21"/></name></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <literal type="number" pos:line="49" pos:column="24">0<pos:position pos:line="49" pos:column="25"/></literal></expr>;<pos:position pos:line="49" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">multi_perform<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">m<pos:position pos:line="51" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="22">&amp;<pos:position pos:line="51" pos:column="27"/></operator><name pos:line="51" pos:column="23">running<pos:position pos:line="51" pos:column="30"/></name></expr></argument>)<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">abort_on_test_timeout<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">()<pos:position pos:line="53" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>

    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><operator pos:line="55" pos:column="8">!<pos:position pos:line="55" pos:column="9"/></operator><name pos:line="55" pos:column="9">running<pos:position pos:line="55" pos:column="16"/></name></expr>)<pos:position pos:line="55" pos:column="17"/></condition><then pos:line="55" pos:column="17"> <block pos:line="55" pos:column="18">{
      <if pos:line="56" pos:column="7">if<condition pos:line="56" pos:column="9">(<expr><name pos:line="56" pos:column="10">handles_added<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">&gt;=<pos:position pos:line="56" pos:column="29"/></operator> <name pos:line="56" pos:column="27">NUM_HANDLES<pos:position pos:line="56" pos:column="38"/></name></expr>)<pos:position pos:line="56" pos:column="39"/></condition><then pos:line="56" pos:column="39">
        <block type="pseudo"><break pos:line="57" pos:column="9">break;<pos:position pos:line="57" pos:column="15"/></break></block></then></if> <comment type="block" pos:line="57" pos:column="16">/* done */</comment>

      <comment type="block" pos:line="59" pos:column="7">/* Add the rest of the handles now that the first handle has completed
         its request. */</comment>
      <while pos:line="61" pos:column="7">while<condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">handles_added<pos:position pos:line="61" pos:column="26"/></name> <operator pos:line="61" pos:column="27">&lt;<pos:position pos:line="61" pos:column="31"/></operator> <name pos:line="61" pos:column="29">NUM_HANDLES<pos:position pos:line="61" pos:column="40"/></name></expr>)<pos:position pos:line="61" pos:column="41"/></condition>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="9">multi_add_handle<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">m<pos:position pos:line="62" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="29">curl<pos:position pos:line="62" pos:column="33"/></name><index pos:line="62" pos:column="33">[<expr><name pos:line="62" pos:column="34">handles_added<pos:position pos:line="62" pos:column="47"/></name><operator pos:line="62" pos:column="47">++<pos:position pos:line="62" pos:column="49"/></operator></expr>]<pos:position pos:line="62" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="62" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="52"/></expr_stmt></block></while>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">FD_ZERO<pos:position pos:line="65" pos:column="12"/></name><argument_list pos:line="65" pos:column="12">(<argument><expr><operator pos:line="65" pos:column="13">&amp;<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="14">rd<pos:position pos:line="65" pos:column="16"/></name></expr></argument>)<pos:position pos:line="65" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">FD_ZERO<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><operator pos:line="66" pos:column="13">&amp;<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="14">wr<pos:position pos:line="66" pos:column="16"/></name></expr></argument>)<pos:position pos:line="66" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">FD_ZERO<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><operator pos:line="67" pos:column="13">&amp;<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="14">exc<pos:position pos:line="67" pos:column="17"/></name></expr></argument>)<pos:position pos:line="67" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">multi_fdset<pos:position pos:line="69" pos:column="16"/></name><argument_list pos:line="69" pos:column="16">(<argument><expr><name pos:line="69" pos:column="17">m<pos:position pos:line="69" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="20">&amp;<pos:position pos:line="69" pos:column="25"/></operator><name pos:line="69" pos:column="21">rd<pos:position pos:line="69" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="25">&amp;<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="26">wr<pos:position pos:line="69" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="30">&amp;<pos:position pos:line="69" pos:column="35"/></operator><name pos:line="69" pos:column="31">exc<pos:position pos:line="69" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="36">&amp;<pos:position pos:line="69" pos:column="41"/></operator><name pos:line="69" pos:column="37">maxfd<pos:position pos:line="69" pos:column="42"/></name></expr></argument>)<pos:position pos:line="69" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="71" pos:column="5">/* At this point, maxfd is guaranteed to be greater or equal than -1. */</comment>

    <expr_stmt><expr><call><name pos:line="73" pos:column="5">select_test<pos:position pos:line="73" pos:column="16"/></name><argument_list pos:line="73" pos:column="16">(<argument><expr><name pos:line="73" pos:column="17">maxfd<pos:position pos:line="73" pos:column="22"/></name> <operator pos:line="73" pos:column="23">+<pos:position pos:line="73" pos:column="24"/></operator> <literal type="number" pos:line="73" pos:column="25">1<pos:position pos:line="73" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="73" pos:column="28">&amp;<pos:position pos:line="73" pos:column="33"/></operator><name pos:line="73" pos:column="29">rd<pos:position pos:line="73" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="33">&amp;<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="34">wr<pos:position pos:line="73" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="38">&amp;<pos:position pos:line="73" pos:column="43"/></operator><name pos:line="73" pos:column="39">exc<pos:position pos:line="73" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="44">&amp;<pos:position pos:line="73" pos:column="49"/></operator><name pos:line="73" pos:column="45">interval<pos:position pos:line="73" pos:column="53"/></name></expr></argument>)<pos:position pos:line="73" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="75" pos:column="5">abort_on_test_timeout<pos:position pos:line="75" pos:column="26"/></name><argument_list pos:line="75" pos:column="26">()<pos:position pos:line="75" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></for>

<label><name pos:line="78" pos:column="1">test_cleanup<pos:position pos:line="78" pos:column="13"/></name>:<pos:position pos:line="78" pos:column="14"/></label>

  <comment type="block" pos:line="80" pos:column="3">/* proper cleanup sequence - type PB */</comment>

  <for pos:line="82" pos:column="3">for<control pos:line="82" pos:column="6">(<init><expr><name pos:line="82" pos:column="7">i<pos:position pos:line="82" pos:column="8"/></name> <operator pos:line="82" pos:column="9">=<pos:position pos:line="82" pos:column="10"/></operator> <literal type="number" pos:line="82" pos:column="11">0<pos:position pos:line="82" pos:column="12"/></literal></expr>;<pos:position pos:line="82" pos:column="13"/></init> <condition><expr><name pos:line="82" pos:column="14">i<pos:position pos:line="82" pos:column="15"/></name> <operator pos:line="82" pos:column="16">&lt;<pos:position pos:line="82" pos:column="20"/></operator> <name pos:line="82" pos:column="18">NUM_HANDLES<pos:position pos:line="82" pos:column="29"/></name></expr>;<pos:position pos:line="82" pos:column="30"/></condition> <incr><expr><name pos:line="82" pos:column="31">i<pos:position pos:line="82" pos:column="32"/></name><operator pos:line="82" pos:column="32">++<pos:position pos:line="82" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="82" pos:column="35"/></control> <block pos:line="82" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">curl_multi_remove_handle<pos:position pos:line="83" pos:column="29"/></name><argument_list pos:line="83" pos:column="29">(<argument><expr><name pos:line="83" pos:column="30">m<pos:position pos:line="83" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="33">curl<pos:position pos:line="83" pos:column="37"/></name><index pos:line="83" pos:column="37">[<expr><name pos:line="83" pos:column="38">i<pos:position pos:line="83" pos:column="39"/></name></expr>]<pos:position pos:line="83" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="83" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">curl_easy_cleanup<pos:position pos:line="84" pos:column="22"/></name><argument_list pos:line="84" pos:column="22">(<argument><expr><name><name pos:line="84" pos:column="23">curl<pos:position pos:line="84" pos:column="27"/></name><index pos:line="84" pos:column="27">[<expr><name pos:line="84" pos:column="28">i<pos:position pos:line="84" pos:column="29"/></name></expr>]<pos:position pos:line="84" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="84" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="85" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="87" pos:column="3">curl_multi_cleanup<pos:position pos:line="87" pos:column="21"/></name><argument_list pos:line="87" pos:column="21">(<argument><expr><name pos:line="87" pos:column="22">m<pos:position pos:line="87" pos:column="23"/></name></expr></argument>)<pos:position pos:line="87" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="88" pos:column="3">curl_global_cleanup<pos:position pos:line="88" pos:column="22"/></name><argument_list pos:line="88" pos:column="22">()<pos:position pos:line="88" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="25"/></expr_stmt>

  <return pos:line="90" pos:column="3">return <expr><name pos:line="90" pos:column="10">res<pos:position pos:line="90" pos:column="13"/></name></expr>;<pos:position pos:line="90" pos:column="14"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
