<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1998_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">get_line<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">buf<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">len<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">FILE<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">input<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">bool<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">partial<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">FALSE<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <while pos:line="4" pos:column="3">while<condition pos:line="4" pos:column="8">(<expr><literal type="number" pos:line="4" pos:column="9">1<pos:position pos:line="4" pos:column="10"/></literal></expr>)<pos:position pos:line="4" pos:column="11"/></condition> <block pos:line="4" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">b<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><call><name pos:line="5" pos:column="15">fgets<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">(<argument><expr><name pos:line="5" pos:column="21">buf<pos:position pos:line="5" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="26">len<pos:position pos:line="5" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="31">input<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
    <if pos:line="6" pos:column="5">if<condition pos:line="6" pos:column="7">(<expr><name pos:line="6" pos:column="8">b<pos:position pos:line="6" pos:column="9"/></name></expr>)<pos:position pos:line="6" pos:column="10"/></condition><then pos:line="6" pos:column="10"> <block pos:line="6" pos:column="11">{
      <decl_stmt><decl><type><name pos:line="7" pos:column="7">size_t<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">rlen<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><call><name pos:line="7" pos:column="21">strlen<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">b<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
      <if pos:line="8" pos:column="7">if<condition pos:line="8" pos:column="9">(<expr><name pos:line="8" pos:column="10">rlen<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">&amp;&amp;<pos:position pos:line="8" pos:column="25"/></operator> <operator pos:line="8" pos:column="18">(<pos:position pos:line="8" pos:column="19"/></operator><name><name pos:line="8" pos:column="19">b<pos:position pos:line="8" pos:column="20"/></name><index pos:line="8" pos:column="20">[<expr><name pos:line="8" pos:column="21">rlen<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-<pos:position pos:line="8" pos:column="26"/></operator><literal type="number" pos:line="8" pos:column="26">1<pos:position pos:line="8" pos:column="27"/></literal></expr>]<pos:position pos:line="8" pos:column="28"/></index></name> <operator pos:line="8" pos:column="29">==<pos:position pos:line="8" pos:column="31"/></operator> <literal type="char" pos:line="8" pos:column="32">'\n'<pos:position pos:line="8" pos:column="36"/></literal><operator pos:line="8" pos:column="36">)<pos:position pos:line="8" pos:column="37"/></operator></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38"> <block pos:line="8" pos:column="39">{
        <if pos:line="9" pos:column="9">if<condition pos:line="9" pos:column="11">(<expr><name pos:line="9" pos:column="12">partial<pos:position pos:line="9" pos:column="19"/></name></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20"> <block pos:line="9" pos:column="21">{
          <expr_stmt><expr><name pos:line="10" pos:column="11">partial<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">FALSE<pos:position pos:line="10" pos:column="26"/></name></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
          <continue pos:line="11" pos:column="11">continue;<pos:position pos:line="11" pos:column="20"/></continue>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if>
        <return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">b<pos:position pos:line="13" pos:column="17"/></name></expr>;<pos:position pos:line="13" pos:column="18"/></return>
      }<pos:position pos:line="14" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="15" pos:column="7">/* read a partial, discard the next piece that ends with newline */</comment>
      <expr_stmt><expr><name pos:line="16" pos:column="7">partial<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">TRUE<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then>
    <else pos:line="18" pos:column="5">else
      <block type="pseudo"><break pos:line="19" pos:column="7">break;<pos:position pos:line="19" pos:column="13"/></break></block></else></if>
  }<pos:position pos:line="20" pos:column="4"/></block></while>
  <return pos:line="21" pos:column="3">return <expr><name pos:line="21" pos:column="10">NULL<pos:position pos:line="21" pos:column="14"/></name></expr>;<pos:position pos:line="21" pos:column="15"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
