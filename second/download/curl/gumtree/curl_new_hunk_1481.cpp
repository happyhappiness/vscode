"          500-700,600-799\n"
"                    specifies 300 bytes from offset 500(H)\n"
"\n"
"          100-199,500-599\n"
"                    specifies two separate 100 bytes ranges(*)(H)\n"
"\n"
);
 puts(
"     (*) = NOTE that this will cause the server to reply  with  a\n"
"     multipart response!\n"
"\n"
"     You  should  also be aware that many HTTP/1.1 servers do not\n"
"     have this feature enabled, so that when you attempt to get a\n"
"     range, you'll instead get the whole document.\n"
"\n"
"     FTP  range  downloads only support the simple syntax 'start-\n"
"     stop' (optionally with  one  of  the  numbers  omitted).  It\n"
"     depends on the non-RFC command SIZE.\n"
);
 puts(
"     If  this  option is used several times, the last one will be\n"
"     used.\n"
"\n"
"     -R/--remote-time\n"
"          When used, this will make libcurl attempt to figure out\n"
"          the timestamp of the remote file, and if that is avail­\n"
"          able make the local file get that same timestamp.\n"
"\n"
"          If this option is used twice, the second time  disables\n"
"          this again.\n"
"\n"
"     -s/--silent\n"
"          Silent  mode.  Don't  show progress meter or error mes­\n"
"          sages.  Makes Curl mute.\n"
);
 puts(
"\n"
"          If this option is used twice,  the  second  will  again\n"
"          disable mute.\n"
"\n"
"     -S/--show-error\n"
"          When  used  with -s it makes curl show error message if\n"
"          it fails.\n"
"\n"
"          If this option is used twice,  the  second  will  again\n"
"          disable show error.\n"
"\n"
"     --stderr <file>\n"
"          Redirect  all  writes  to  stderr to the specified file\n"
"          instead. If the file name is a plain '-', it is instead\n"
);
 puts(
"          written to stdout. This option has no point when you're\n"
"          using a shell with decent redirecting capabilities.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -t/--telnet-option <OPT=val>\n"
"          Pass  options to the telnet protocol. Supported options\n"
"          are:\n"
"\n"
"          TTYPE=<term> Sets the terminal type.\n"
"\n"
"          XDISPLOC=<X display> Sets the X display location.\n"
"\n"
"          NEW_ENV=<var,val> Sets an environment variable.\n"
"\n"
);
 puts(
"     -T/--upload-file <file>\n"
"          This transfers the specified local file to  the  remote\n"
"          URL.  If  there  is  no file part in the specified URL,\n"
"          Curl will append the local file  name.  NOTE  that  you\n"
"          must  use  a trailing / on the last directory to really\n"
"          prove to Curl that there is no file name or  curl  will\n"
"          think  that your last directory name is the remote file\n"
"          name to use. That will most  likely  cause  the  upload\n"
);
 puts(
"          operation to fail. If this is used on a http(s) server,\n"
"          the PUT command will be used.\n"
"\n"
"          Use the file name \"-\" (a  single  dash)  to  use  stdin\n"
"          instead of a given file.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     --trace <file>\n"
"          Enables a full trace dump of all incoming and  outgoing\n"
"          data,  including  descriptive information, to the given\n"
);
 puts(
"          output file. Use \"-\" as filename  to  have  the  output\n"
"          sent to stdout.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used. (Added in curl 7.9.7)\n"
"\n"
"     --trace-ascii <file>\n"
"          Enables a full trace dump of all incoming and  outgoing\n"
"          data,  including  descriptive information, to the given\n"
"          output file. Use \"-\" as filename  to  have  the  output\n"
"          sent to stdout.\n"
"\n"
);
 puts(
"          This is very similar to --trace, but leaves out the hex\n"
"          part and only shows the ASCII  part  of  the  dump.  It\n"
"          makes  smaller  output that might be easier to read for\n"
"          untrained humans.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used. (Added in curl 7.9.7)\n"
"\n"
"     -u/--user <user:password>\n"
"          Specify  user  and  password  to use when fetching. See\n"
"          README.curl for detailed examples of how to  use  this.\n"
);
 puts(
"          If  no  password  is  specified,  curl  will ask for it\n"
"          interactively.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -U/--proxy-user <user:password>\n"
"          Specify  user and password to use for Proxy authentica­\n"
"          tion. If no password is specified, curl will ask for it\n"
"          interactively.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     --url <URL>\n"
);
 puts(
"          Specify a URL to fetch. This  option  is  mostly  handy\n"
"          when you want to specify URL(s) in a config file.\n"
"          This option may be used any number of times. To control\n"
"          where this URL  is  written,  use  the  -o  or  the  -O\n"
"          options.\n"
"\n"
"     -v/--verbose\n"
"          Makes   the  fetching  more  verbose/talkative.  Mostly\n"
"          usable for debugging. Lines  starting  with  '>'  means\n"
"          data sent by curl, '<' means data received by curl that\n"
);
 puts(
"          is hidden in normal cases and lines starting  with  '*'\n"
"          means additional info provided by curl.\n"
"\n"
"          If  this  option  is  used twice, the second will again\n"
"          disable verbose.\n"
"\n"
"     -V/--version\n"
"          Displays the full version of curl,  libcurl  and  other\n"
"          3rd party libraries linked with the executable.\n"
"\n"
"     -w/--write-out <format>\n"
"          Defines  what to display after a completed and success­\n"
);
 puts(
"          ful operation. The format is a string that may  contain\n"
"          plain  text  mixed  with  any  number of variables. The\n"
"          string can be specified as \"string\", to get read from a\n"
"          particular  file you specify it \"@filename\" and to tell\n"
"          curl to read the format from stdin you write \"@-\".\n"
"\n"
"          The variables present in the output format will be sub­\n"
"          stituted  by the value or text that curl thinks fit, as\n"
);
 puts(
"          described  below.  All  variables  are  specified  like\n"
"          %{variable_name}  and  to  output  a  normal % you just\n"
"          write them like %%. You can output a newline  by  using\n"
"          \\n,  a carriage return with \\r and a tab space with \\t.\n"
"\n"
"          NOTE:  The  %-letter  is  a  special  letter   in   the\n"
"          win32-environment,  where  all occurrences of % must be\n"
"          doubled when using this option.\n"
"\n"
"          Available variables are at this point:\n"
"\n"
);
 puts(
"          url_effective  The URL that was fetched last.  This  is\n"
"                         mostly meaningful if you've told curl to\n"
"                         follow location: headers.\n"
"\n"
"          http_code      The numerical code that was found in the\n"
"                         last retrieved HTTP(S) page.\n"
"\n"
"          time_total     The  total  time,  in  seconds, that the\n"
"                         full operation lasted. The time will  be\n"
);
 puts(
"                         displayed with millisecond resolution.\n"
"\n"
"          time_namelookup\n"
"                         The  time,  in seconds, it took from the\n"
"                         start until the name resolving was  com­\n"
"                         pleted.\n"
"\n"
"          time_connect   The  time,  in seconds, it took from the\n"
"                         start until the connect  to  the  remote\n"
"                         host (or proxy) was completed.\n"
"\n"
"          time_pretransfer\n"
);
 puts(
"                         The  time,  in seconds, it took from the\n"
"                         start until the file  transfer  is  just\n"
"                         about  to  begin. This includes all pre-\n"
"                         transfer commands and negotiations  that\n"
"                         are  specific  to  the particular proto­\n"
"                         col(s) involved.\n"
"\n"
"          time_starttransfer\n"
"                         The time, in seconds, it took  from  the\n"
);
 puts(
"                         start until the first byte is just about\n"
"                         to   be   transfered.   This    includes\n"
"                         time_pretransfer  and  also the time the\n"
"                         server needs to calculate the result.\n"
"\n"
"          size_download  The total  amount  of  bytes  that  were\n"
"                         downloaded.\n"
"\n"
"          size_upload    The  total  amount  of  bytes  that were\n"
"                         uploaded.\n"
"\n"
);
 puts(
"          size_header    The total amount of bytes of  the  down­\n"
"                         loaded headers.\n"
"\n"
"          size_request   The total amount of bytes that were sent\n"
"                         in the HTTP request.\n"
"\n"
"          speed_download The average  download  speed  that  curl\n"
"                         measured for the complete download.\n"
"\n"
"          speed_upload   The  average upload speed that curl mea­\n"
"                         sured for the complete upload.\n"
"\n"
);
 puts(
"          content_type   The Content-Type of the requested  docu­\n"
"                         ment, if there was any. (Added in 7.9.5)\n"
"\n"
"     If this option is used several times, the last one  will  be\n"
"     used.\n"
"\n"
"     -x/--proxy <proxyhost[:port]>\n"
"          Use  specified  HTTP  proxy.  If the port number is not\n"
"          specified, it is assumed at port 1080.\n"
"\n"
"          Note that all operations that are performed over a HTTP\n"
"          proxy will transparantly be converted to HTTP. It means\n"
);
 puts(
"          that certain protocol specific operations might not  be\n"
"          available.  This  is  not  the  case  if you can tunnel\n"
"          through the proxy, as done  with  the  -p/--proxytunnel\n"
"          option.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -X/--request <command>\n"
"          (HTTP) Specifies a custom request to use when  communi­\n"
"          cating  with  the  HTTP  server.  The specified request\n"
);
 puts(
"          will be used instead of the standard GET. Read the HTTP\n"
"          1.1 specification for details and explanations.\n"
"\n"
"          (FTP)  Specifies a custom FTP command to use instead of\n"
"          LIST when doing file lists with ftp.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -y/--speed-time <time>\n"
"          If a download is slower than speed-limit bytes per sec­\n"
"          ond during  a  speed-time  period,  the  download  gets\n"
);
 puts(
"          aborted. If speed-time is used, the default speed-limit\n"
"          will be 1 unless set with -y.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -Y/--speed-limit <speed>\n"
"          If a download is slower than this given speed, in bytes\n"
"          per second, for speed-time  seconds  it  gets  aborted.\n"
"          speed-time is set with -Y and is 30 if not set.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
);
 puts(
"     -z/--time-cond <date expression>\n"
"          (HTTP) Request to get a file  that  has  been  modified\n"
"          later  than  the  given  time and date, or one that has\n"
"          been modified before that time. The date expression can\n"
"          be all sorts of date strings or if it doesn't match any\n"
"          internal ones, it tries to get the time  from  a  given\n"
"          file  name  instead!  See  the GNU date(1) or curl_get­\n"
"          date(3) man pages for date expression details.\n"
"\n"
);
 puts(
"          Start the date expression with a dash (-)  to  make  it\n"
"          request  for  a  document  that is older than the given\n"
"          date/time, default is a document that is newer than the\n"
"          specified date/time.\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -Z/--max-redirs <num>\n"
"          Set maximum number of  redirection-followings  allowed.\n"
"          If  -L/--location  is  used, this option can be used to\n"
);
 puts(
"          prevent curl from following redirections \"in absurdum\".\n"
"\n"
"          If this option is used several times, the last one will\n"
"          be used.\n"
"\n"
"     -3/--sslv3\n"
"          (HTTPS) Forces curl to use SSL version 3 when negotiat­\n"
"          ing with a remote SSL server.\n"
"\n"
"     -2/--sslv2\n"
"          (HTTPS) Forces curl to use SSL version 2 when negotiat­\n"
"          ing with a remote SSL server.\n"
"\n"
"     -0/--http1.0\n"
"          (HTTP) Forces curl to issue its requests using HTTP 1.0\n"
);
 puts(
"          instead of using its internally preferred: HTTP 1.1.\n"
"\n"
"     -#/--progress-bar\n"
"          Make  curl  display  progress information as a progress\n"
"          bar instead of the default statistics.\n"
"\n"
"          If this option is used twice,  the  second  will  again\n"
"          disable the progress bar.\n"
"\n"
"FILES\n"
"     ~/.curlrc\n"
"          Default config file.\n"
"\n"
"ENVIRONMENT\n"
"     http_proxy [protocol://]<host>[:port]\n"
"          Sets proxy server to use for HTTP.\n"
"\n"
);
 puts(
"     HTTPS_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for HTTPS.\n"
"\n"
"     FTP_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for FTP.\n"
"\n"
"     GOPHER_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for GOPHER.\n"
"\n"
"     ALL_PROXY [protocol://]<host>[:port]\n"
"          Sets  proxy server to use if no protocol-specific proxy\n"
"          is set.\n"
"\n"
"     NO_PROXY <comma-separated list of hosts>\n"
);
 puts(
"          list of host names that shouldn't go through any proxy.\n"
"          If set to a asterisk\n"
"\n"
"EXIT CODES\n"
"     There exists a bunch of different error codes and their cor­\n"
"     responding error messages that may appear during bad  condi­\n"
"     tions. At the time of this writing, the exit codes are:\n"
"\n"
"     1    Unsupported protocol. This build of curl has no support\n"
"          for this protocol.\n"
"\n"
"     2    Failed to initialize.\n"
"\n"
"     3    URL malformat. The syntax was not correct.\n"
"\n"
);
 puts(
"     4    URL user malformatted. The user-part of the URL  syntax\n"
"          was not correct.\n"
"\n"
"     5    Couldn't  resolve proxy. The given proxy host could not\n"
"          be resolved.\n"
"\n"
"     6    Couldn't resolve host. The given remote  host  was  not\n"
"          resolved.\n"
"\n"
"     7    Failed to connect to host.\n"
"\n"
"     8    FTP  weird  server  reply.  The  server  sent data curl\n"
"          couldn't parse.\n"
"\n"
"     9    FTP access denied. The server denied login.\n"
"\n"
);
 puts(
"     10   FTP user/password incorrect. Either one  or  both  were\n"
"          not accepted by the server.\n"
"\n"
"     11   FTP  weird  PASS  reply.  Curl couldn't parse the reply\n"
"          sent to the PASS request.\n"
"\n"
"     12   FTP weird USER reply. Curl  couldn't  parse  the  reply\n"
"          sent to the USER request.\n"
"\n"
"     13   FTP  weird  PASV  reply,  Curl couldn't parse the reply\n"
"          sent to the PASV request.\n"
"\n"
"     14   FTP weird 227 format. Curl couldn't parse the  227-line\n"
);
 puts(
"          the server sent.\n"
"\n"
"     15   FTP can't get host. Couldn't resolve the host IP we got\n"
"          in the 227-line.\n"
"\n"
"     16   FTP can't reconnect. Couldn't connect to  the  host  we\n"
"          got in the 227-line.\n"
"     17   FTP  couldn't  set  binary.  Couldn't  change  transfer\n"
"          method to binary.\n"
"\n"
"     18   Partial file. Only a part of the file was transfered.\n"
"\n"
"     19   FTP couldn't RETR file. The RETR command failed.\n"
"\n"
);
 puts(
"     20   FTP write error. The transfer was reported bad  by  the\n"
"          server.\n"
"\n"
"     21   FTP  quote  error.  A quote command returned error from\n"
"          the server.\n"
"\n"
"     22   HTTP not found. The requested page was not found.  This\n"
"          return code only appears if --fail is used.\n"
"\n"
"     23   Write  error.  Curl  couldn't  write  data  to  a local\n"
"          filesystem or similar.\n"
"\n"
"     24   Malformat user. User name badly specified.\n"
"\n"
);
 puts(
"     25   FTP couldn't STOR file.  The  server  denied  the  STOR\n"
"          operation.\n"
"\n"
"     26   Read error. Various reading problems.\n"
"\n"
"     27   Out of memory. A memory allocation request failed.\n"
"\n"
"     28   Operation  timeout.  The  specified time-out period was\n"
"          reached according to the conditions.\n"
"\n"
"     29   FTP couldn't set ASCII. The server returned an  unknown\n"
"          reply.\n"
"\n"
"     30   FTP PORT failed. The PORT command failed.\n"
"\n"
);
 puts(
"     31   FTP couldn't use REST. The REST command failed.\n"
"\n"
"     32   FTP  couldn't  use  SIZE.  The SIZE command failed. The\n"
"          command is an extension to the original  FTP  spec  RFC\n"
"          959.\n"
"\n"
"     33   HTTP range error. The range \"command\" didn't work.\n"
"\n"
"     34   HTTP   post  error.  Internal  post-request  generation\n"
"          error.\n"
"\n"
"     35   SSL connect error. The SSL handshaking failed.\n"
"\n"
"     36   FTP bad download resume. Couldn't continue  an  earlier\n"
);
 puts(
"          aborted download.\n"
"     37   FILE  couldn't read file. Failed to open the file. Per­\n"
"          missions?\n"
"\n"
"     38   LDAP cannot bind. LDAP bind operation failed.\n"
"\n"
"     39   LDAP search failed.\n"
"\n"
"     40   Library not found. The LDAP library was not found.\n"
"\n"
"     41   Function not found. A required LDAP  function  was  not\n"
"          found.\n"
"\n"
"     42   Aborted  by callback. An application told curl to abort\n"
"          the operation.\n"
"\n"
);
 puts(
"     43   Internal error. A function was called with a bad param­\n"
"          eter.\n"
"\n"
"     44   Internal error. A function was called in a bad order.\n"
"\n"
"     45   Interface  error.  A specified outgoing interface could\n"
"          not be used.\n"
"\n"
"     46   Bad password entered. An error was  signaled  when  the\n"
"          password was entered.\n"
"\n"
"     47   Too  many redirects. When following redirects, curl hit\n"
"          the maximum amount.\n"
"\n"
"     48   Unknown TELNET option specified.\n"
"\n"
);
 puts(
"     49   Malformed telnet option.\n"
"\n"
"     51   The remote peer's SSL certificate wasn't ok\n"
"\n"
"     52   The server didn't reply anything, which here is consid­\n"
"          ered an error.\n"
"\n"
"     XX   There  will  appear  more  error  codes  here in future\n"
"          releases. The existing ones are meant to never  change.\n"
"\n"
"BUGS\n"
"     If you do find bugs, mail them to curl-bug@haxx.se.\n"
"\n"
"AUTHORS / CONTRIBUTORS\n"
"     Daniel  Stenberg  is  the main author, but the whole list of\n"
);
 puts(
"     contributors is found in the separate THANKS file.\n"
"\n"
"WWW\n"
"     http://curl.haxx.se\n"
"FTP\n"
"     ftp://ftp.sunet.se/pub/www/utilities/curl/\n"
"\n"
"SEE ALSO\n"
"     ftp(1), wget(1), snarf(1)\n"
"\n"
