<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2466_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type>
<name pos:line="2" pos:column="1">schannel_send<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">connectdata<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">conn<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">sockindex<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
              <parameter><decl><type><specifier pos:line="3" pos:column="15">const<pos:position pos:line="3" pos:column="20"/></specifier> <name pos:line="3" pos:column="21">void<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">buf<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="32">size_t<pos:position pos:line="3" pos:column="38"/></name></type> <name pos:line="3" pos:column="39">len<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="44">CURLcode<pos:position pos:line="3" pos:column="52"/></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">err<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="58"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">written<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><operator pos:line="5" pos:column="21">-<pos:position pos:line="5" pos:column="22"/></operator><literal type="number" pos:line="5" pos:column="22">1<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">data_len<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">char<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">data<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name pos:line="7" pos:column="25">NULL<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">ssl_connect_data<pos:position pos:line="8" pos:column="26"/></name></name> <modifier pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></modifier></type><name pos:line="8" pos:column="28">connssl<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name><name pos:line="8" pos:column="39">conn<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">ssl<pos:position pos:line="8" pos:column="48"/></name><index pos:line="8" pos:column="48">[<expr><name pos:line="8" pos:column="49">sockindex<pos:position pos:line="8" pos:column="58"/></name></expr>]<pos:position pos:line="8" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">SecBuffer<pos:position pos:line="9" pos:column="12"/></name></type> <name><name pos:line="9" pos:column="13">outbuf<pos:position pos:line="9" pos:column="19"/></name><index pos:line="9" pos:column="19">[<expr><literal type="number" pos:line="9" pos:column="20">4<pos:position pos:line="9" pos:column="21"/></literal></expr>]<pos:position pos:line="9" pos:column="22"/></index></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">SecBufferDesc<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">outbuf_desc<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">SECURITY_STATUS<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">sspi_status<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><name pos:line="11" pos:column="33">SEC_E_OK<pos:position pos:line="11" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">CURLcode<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">result<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* check if the maximum stream sizes were queried */</comment>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name><name pos:line="15" pos:column="6">BACKEND<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">stream_sizes<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">.<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="28">cbMaximumMessage<pos:position pos:line="15" pos:column="44"/></name></name> <operator pos:line="15" pos:column="45">==<pos:position pos:line="15" pos:column="47"/></operator> <literal type="number" pos:line="15" pos:column="48">0<pos:position pos:line="15" pos:column="49"/></literal></expr>)<pos:position pos:line="15" pos:column="50"/></condition><then pos:line="15" pos:column="50"> <block pos:line="15" pos:column="51">{
    <expr_stmt><expr><name pos:line="16" pos:column="5">sspi_status<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name><name pos:line="16" pos:column="19">s_pSecFn<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">QueryContextAttributes<pos:position pos:line="16" pos:column="51"/></name></name><argument_list pos:line="16" pos:column="51">(
      <argument><expr><operator pos:line="17" pos:column="7">&amp;<pos:position pos:line="17" pos:column="12"/></operator><name><name pos:line="17" pos:column="8">BACKEND<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">ctxt<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">ctxt_handle<pos:position pos:line="17" pos:column="34"/></name></name></expr></argument>,
      <argument><expr><name pos:line="18" pos:column="7">SECPKG_ATTR_STREAM_SIZES<pos:position pos:line="18" pos:column="31"/></name></expr></argument>,
      <argument><expr><operator pos:line="19" pos:column="7">&amp;<pos:position pos:line="19" pos:column="12"/></operator><name><name pos:line="19" pos:column="8">BACKEND<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">stream_sizes<pos:position pos:line="19" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">sspi_status<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">!=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">SEC_E_OK<pos:position pos:line="20" pos:column="31"/></name></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32"> <block pos:line="20" pos:column="33">{
      <expr_stmt><expr><operator pos:line="21" pos:column="7">*<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">err<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">CURLE_SEND_ERROR<pos:position pos:line="21" pos:column="30"/></name></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
      <return pos:line="22" pos:column="7">return <expr><operator pos:line="22" pos:column="14">-<pos:position pos:line="22" pos:column="15"/></operator><literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal></expr>;<pos:position pos:line="22" pos:column="17"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="26" pos:column="3">/* check if the buffer is longer than the maximum message length */</comment>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name pos:line="27" pos:column="6">len<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">&gt;<pos:position pos:line="27" pos:column="14"/></operator> <name><name pos:line="27" pos:column="12">BACKEND<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">-&gt;<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="21">stream_sizes<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">.<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">cbMaximumMessage<pos:position pos:line="27" pos:column="50"/></name></name></expr>)<pos:position pos:line="27" pos:column="51"/></condition><then pos:line="27" pos:column="51"> <block pos:line="27" pos:column="52">{
    <expr_stmt><expr><name pos:line="28" pos:column="5">len<pos:position pos:line="28" pos:column="8"/></name> <operator pos:line="28" pos:column="9">=<pos:position pos:line="28" pos:column="10"/></operator> <name><name pos:line="28" pos:column="11">BACKEND<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">-&gt;<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="20">stream_sizes<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">.<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="33">cbMaximumMessage<pos:position pos:line="28" pos:column="49"/></name></name></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="31" pos:column="3">/* calculate the complete message length and allocate a buffer for it */</comment>
  <expr_stmt><expr><name pos:line="32" pos:column="3">data_len<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <name><name pos:line="32" pos:column="14">BACKEND<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">-&gt;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="23">stream_sizes<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">.<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="36">cbHeader<pos:position pos:line="32" pos:column="44"/></name></name> <operator pos:line="32" pos:column="45">+<pos:position pos:line="32" pos:column="46"/></operator> <name pos:line="32" pos:column="47">len<pos:position pos:line="32" pos:column="50"/></name> <operator pos:line="32" pos:column="51">+<pos:position pos:line="32" pos:column="52"/></operator>
    <name><name pos:line="33" pos:column="5">BACKEND<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">stream_sizes<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">.<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="27">cbTrailer<pos:position pos:line="33" pos:column="36"/></name></name></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="34" pos:column="3">data<pos:position pos:line="34" pos:column="7"/></name> <operator pos:line="34" pos:column="8">=<pos:position pos:line="34" pos:column="9"/></operator> <operator pos:line="34" pos:column="10">(<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="11">unsigned<pos:position pos:line="34" pos:column="19"/></name> <name pos:line="34" pos:column="20">char<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">*<pos:position pos:line="34" pos:column="26"/></operator><operator pos:line="34" pos:column="26">)<pos:position pos:line="34" pos:column="27"/></operator> <call><name pos:line="34" pos:column="28">malloc<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">data_len<pos:position pos:line="34" pos:column="43"/></name></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt>
  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">(<expr><name pos:line="35" pos:column="6">data<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">==<pos:position pos:line="35" pos:column="13"/></operator> <name pos:line="35" pos:column="14">NULL<pos:position pos:line="35" pos:column="18"/></name></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19"> <block pos:line="35" pos:column="20">{
    <expr_stmt><expr><operator pos:line="36" pos:column="5">*<pos:position pos:line="36" pos:column="6"/></operator><name pos:line="36" pos:column="6">err<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <name pos:line="36" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="36" pos:column="31"/></name></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><operator pos:line="37" pos:column="12">-<pos:position pos:line="37" pos:column="13"/></operator><literal type="number" pos:line="37" pos:column="13">1<pos:position pos:line="37" pos:column="14"/></literal></expr>;<pos:position pos:line="37" pos:column="15"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="40" pos:column="3">/* setup output buffers (header, data, trailer, empty) */</comment>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">InitSecBuffer<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><operator pos:line="41" pos:column="17">&amp;<pos:position pos:line="41" pos:column="22"/></operator><name><name pos:line="41" pos:column="18">outbuf<pos:position pos:line="41" pos:column="24"/></name><index pos:line="41" pos:column="24">[<expr><literal type="number" pos:line="41" pos:column="25">0<pos:position pos:line="41" pos:column="26"/></literal></expr>]<pos:position pos:line="41" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="29">SECBUFFER_STREAM_HEADER<pos:position pos:line="41" pos:column="52"/></name></expr></argument>,
                <argument><expr><name pos:line="42" pos:column="17">data<pos:position pos:line="42" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="23">BACKEND<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">-&gt;<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="32">stream_sizes<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">.<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="45">cbHeader<pos:position pos:line="42" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">InitSecBuffer<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><operator pos:line="43" pos:column="17">&amp;<pos:position pos:line="43" pos:column="22"/></operator><name><name pos:line="43" pos:column="18">outbuf<pos:position pos:line="43" pos:column="24"/></name><index pos:line="43" pos:column="24">[<expr><literal type="number" pos:line="43" pos:column="25">1<pos:position pos:line="43" pos:column="26"/></literal></expr>]<pos:position pos:line="43" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="29">SECBUFFER_DATA<pos:position pos:line="43" pos:column="43"/></name></expr></argument>,
                <argument><expr><name pos:line="44" pos:column="17">data<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">+<pos:position pos:line="44" pos:column="23"/></operator> <name><name pos:line="44" pos:column="24">BACKEND<pos:position pos:line="44" pos:column="31"/></name><operator pos:line="44" pos:column="31">-&gt;<pos:position pos:line="44" pos:column="36"/></operator><name pos:line="44" pos:column="33">stream_sizes<pos:position pos:line="44" pos:column="45"/></name><operator pos:line="44" pos:column="45">.<pos:position pos:line="44" pos:column="46"/></operator><name pos:line="44" pos:column="46">cbHeader<pos:position pos:line="44" pos:column="54"/></name></name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="56">curlx_uztoul<pos:position pos:line="44" pos:column="68"/></name><argument_list pos:line="44" pos:column="68">(<argument><expr><name pos:line="44" pos:column="69">len<pos:position pos:line="44" pos:column="72"/></name></expr></argument>)<pos:position pos:line="44" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="75"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">InitSecBuffer<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><operator pos:line="45" pos:column="17">&amp;<pos:position pos:line="45" pos:column="22"/></operator><name><name pos:line="45" pos:column="18">outbuf<pos:position pos:line="45" pos:column="24"/></name><index pos:line="45" pos:column="24">[<expr><literal type="number" pos:line="45" pos:column="25">2<pos:position pos:line="45" pos:column="26"/></literal></expr>]<pos:position pos:line="45" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="29">SECBUFFER_STREAM_TRAILER<pos:position pos:line="45" pos:column="53"/></name></expr></argument>,
                <argument><expr><name pos:line="46" pos:column="17">data<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">+<pos:position pos:line="46" pos:column="23"/></operator> <name><name pos:line="46" pos:column="24">BACKEND<pos:position pos:line="46" pos:column="31"/></name><operator pos:line="46" pos:column="31">-&gt;<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="33">stream_sizes<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">.<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="46">cbHeader<pos:position pos:line="46" pos:column="54"/></name></name> <operator pos:line="46" pos:column="55">+<pos:position pos:line="46" pos:column="56"/></operator> <name pos:line="46" pos:column="57">len<pos:position pos:line="46" pos:column="60"/></name></expr></argument>,
                <argument><expr><name><name pos:line="47" pos:column="17">BACKEND<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">-&gt;<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="26">stream_sizes<pos:position pos:line="47" pos:column="38"/></name><operator pos:line="47" pos:column="38">.<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="39">cbTrailer<pos:position pos:line="47" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">InitSecBuffer<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><operator pos:line="48" pos:column="17">&amp;<pos:position pos:line="48" pos:column="22"/></operator><name><name pos:line="48" pos:column="18">outbuf<pos:position pos:line="48" pos:column="24"/></name><index pos:line="48" pos:column="24">[<expr><literal type="number" pos:line="48" pos:column="25">3<pos:position pos:line="48" pos:column="26"/></literal></expr>]<pos:position pos:line="48" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="29">SECBUFFER_EMPTY<pos:position pos:line="48" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="46">NULL<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="52">0<pos:position pos:line="48" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="49" pos:column="3">InitSecBufferDesc<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><operator pos:line="49" pos:column="21">&amp;<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="22">outbuf_desc<pos:position pos:line="49" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="35">outbuf<pos:position pos:line="49" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="43">4<pos:position pos:line="49" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>

  <comment type="block" pos:line="51" pos:column="3">/* copy data into output buffer */</comment>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">memcpy<pos:position pos:line="52" pos:column="9"/></name><argument_list pos:line="52" pos:column="9">(<argument><expr><name><name pos:line="52" pos:column="10">outbuf<pos:position pos:line="52" pos:column="16"/></name><index pos:line="52" pos:column="16">[<expr><literal type="number" pos:line="52" pos:column="17">1<pos:position pos:line="52" pos:column="18"/></literal></expr>]<pos:position pos:line="52" pos:column="19"/></index></name><operator pos:line="52" pos:column="19">.<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="20">pvBuffer<pos:position pos:line="52" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="30">buf<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="35">len<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="54" pos:column="3">/* https://msdn.microsoft.com/en-us/library/windows/desktop/aa375390.aspx */</comment>
  <expr_stmt><expr><name pos:line="55" pos:column="3">sspi_status<pos:position pos:line="55" pos:column="14"/></name> <operator pos:line="55" pos:column="15">=<pos:position pos:line="55" pos:column="16"/></operator> <call><name><name pos:line="55" pos:column="17">s_pSecFn<pos:position pos:line="55" pos:column="25"/></name><operator pos:line="55" pos:column="25">-&gt;<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="27">EncryptMessage<pos:position pos:line="55" pos:column="41"/></name></name><argument_list pos:line="55" pos:column="41">(<argument><expr><operator pos:line="55" pos:column="42">&amp;<pos:position pos:line="55" pos:column="47"/></operator><name><name pos:line="55" pos:column="43">BACKEND<pos:position pos:line="55" pos:column="50"/></name><operator pos:line="55" pos:column="50">-&gt;<pos:position pos:line="55" pos:column="55"/></operator><name pos:line="55" pos:column="52">ctxt<pos:position pos:line="55" pos:column="56"/></name><operator pos:line="55" pos:column="56">-&gt;<pos:position pos:line="55" pos:column="61"/></operator><name pos:line="55" pos:column="58">ctxt_handle<pos:position pos:line="55" pos:column="69"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="71">0<pos:position pos:line="55" pos:column="72"/></literal></expr></argument>,
                                         <argument><expr><operator pos:line="56" pos:column="42">&amp;<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="43">outbuf_desc<pos:position pos:line="56" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="56">0<pos:position pos:line="56" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="59"/></expr_stmt>

  <comment type="block" pos:line="58" pos:column="3">/* check if the message was encrypted */</comment>
  <if pos:line="59" pos:column="3">if<condition pos:line="59" pos:column="5">(<expr><name pos:line="59" pos:column="6">sspi_status<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">==<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">SEC_E_OK<pos:position pos:line="59" pos:column="29"/></name></expr>)<pos:position pos:line="59" pos:column="30"/></condition><then pos:line="59" pos:column="30"> <block pos:line="59" pos:column="31">{
    <expr_stmt><expr><name pos:line="60" pos:column="5">written<pos:position pos:line="60" pos:column="12"/></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <literal type="number" pos:line="60" pos:column="15">0<pos:position pos:line="60" pos:column="16"/></literal></expr>;<pos:position pos:line="60" pos:column="17"/></expr_stmt>

    <comment type="block" pos:line="62" pos:column="5">/* send the encrypted message including header, data and trailer */</comment>
    <expr_stmt><expr><name pos:line="63" pos:column="5">len<pos:position pos:line="63" pos:column="8"/></name> <operator pos:line="63" pos:column="9">=<pos:position pos:line="63" pos:column="10"/></operator> <name><name pos:line="63" pos:column="11">outbuf<pos:position pos:line="63" pos:column="17"/></name><index pos:line="63" pos:column="17">[<expr><literal type="number" pos:line="63" pos:column="18">0<pos:position pos:line="63" pos:column="19"/></literal></expr>]<pos:position pos:line="63" pos:column="20"/></index></name><operator pos:line="63" pos:column="20">.<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="21">cbBuffer<pos:position pos:line="63" pos:column="29"/></name> <operator pos:line="63" pos:column="30">+<pos:position pos:line="63" pos:column="31"/></operator> <name><name pos:line="63" pos:column="32">outbuf<pos:position pos:line="63" pos:column="38"/></name><index pos:line="63" pos:column="38">[<expr><literal type="number" pos:line="63" pos:column="39">1<pos:position pos:line="63" pos:column="40"/></literal></expr>]<pos:position pos:line="63" pos:column="41"/></index></name><operator pos:line="63" pos:column="41">.<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="42">cbBuffer<pos:position pos:line="63" pos:column="50"/></name> <operator pos:line="63" pos:column="51">+<pos:position pos:line="63" pos:column="52"/></operator> <name><name pos:line="63" pos:column="53">outbuf<pos:position pos:line="63" pos:column="59"/></name><index pos:line="63" pos:column="59">[<expr><literal type="number" pos:line="63" pos:column="60">2<pos:position pos:line="63" pos:column="61"/></literal></expr>]<pos:position pos:line="63" pos:column="62"/></index></name><operator pos:line="63" pos:column="62">.<pos:position pos:line="63" pos:column="63"/></operator><name pos:line="63" pos:column="63">cbBuffer<pos:position pos:line="63" pos:column="71"/></name></expr>;<pos:position pos:line="63" pos:column="72"/></expr_stmt>

    <comment type="block" pos:line="65" pos:column="5">/*
      It's important to send the full message which includes the header,
      encrypted payload, and trailer.  Until the client receives all the
      data a coherent message has not been delivered and the client
      can't read any of it.

      If we wanted to buffer the unwritten encrypted bytes, we would
      tell the client that all data it has requested to be sent has been
      sent. The unwritten encrypted bytes would be the first bytes to
      send on the next invocation.
      Here's the catch with this - if we tell the client that all the
      bytes have been sent, will the client call this method again to
      send the buffered data?  Looking at who calls this function, it
      seems the answer is NO.
    */</comment>

    <comment type="block" pos:line="81" pos:column="5">/* send entire message or fail */</comment>
    <while pos:line="82" pos:column="5">while<condition pos:line="82" pos:column="10">(<expr><name pos:line="82" pos:column="11">len<pos:position pos:line="82" pos:column="14"/></name> <operator pos:line="82" pos:column="15">&gt;<pos:position pos:line="82" pos:column="19"/></operator> <operator pos:line="82" pos:column="17">(<pos:position pos:line="82" pos:column="18"/></operator><name pos:line="82" pos:column="18">size_t<pos:position pos:line="82" pos:column="24"/></name><operator pos:line="82" pos:column="24">)<pos:position pos:line="82" pos:column="25"/></operator><name pos:line="82" pos:column="25">written<pos:position pos:line="82" pos:column="32"/></name></expr>)<pos:position pos:line="82" pos:column="33"/></condition> <block pos:line="82" pos:column="34">{
      <decl_stmt><decl><type><name pos:line="83" pos:column="7">ssize_t<pos:position pos:line="83" pos:column="14"/></name></type> <name pos:line="83" pos:column="15">this_write<pos:position pos:line="83" pos:column="25"/></name></decl>;<pos:position pos:line="83" pos:column="26"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="84" pos:column="7">time_t<pos:position pos:line="84" pos:column="13"/></name></type> <name pos:line="84" pos:column="14">timeleft<pos:position pos:line="84" pos:column="22"/></name></decl>;<pos:position pos:line="84" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="85" pos:column="7">int<pos:position pos:line="85" pos:column="10"/></name></type> <name pos:line="85" pos:column="11">what<pos:position pos:line="85" pos:column="15"/></name></decl>;<pos:position pos:line="85" pos:column="16"/></decl_stmt>

      <expr_stmt><expr><name pos:line="87" pos:column="7">this_write<pos:position pos:line="87" pos:column="17"/></name> <operator pos:line="87" pos:column="18">=<pos:position pos:line="87" pos:column="19"/></operator> <literal type="number" pos:line="87" pos:column="20">0<pos:position pos:line="87" pos:column="21"/></literal></expr>;<pos:position pos:line="87" pos:column="22"/></expr_stmt>

      <expr_stmt><expr><name pos:line="89" pos:column="7">timeleft<pos:position pos:line="89" pos:column="15"/></name> <operator pos:line="89" pos:column="16">=<pos:position pos:line="89" pos:column="17"/></operator> <call><name pos:line="89" pos:column="18">Curl_timeleft<pos:position pos:line="89" pos:column="31"/></name><argument_list pos:line="89" pos:column="31">(<argument><expr><name><name pos:line="89" pos:column="32">conn<pos:position pos:line="89" pos:column="36"/></name><operator pos:line="89" pos:column="36">-&gt;<pos:position pos:line="89" pos:column="41"/></operator><name pos:line="89" pos:column="38">data<pos:position pos:line="89" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="44">NULL<pos:position pos:line="89" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="50">FALSE<pos:position pos:line="89" pos:column="55"/></name></expr></argument>)<pos:position pos:line="89" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="57"/></expr_stmt>
      <if pos:line="90" pos:column="7">if<condition pos:line="90" pos:column="9">(<expr><name pos:line="90" pos:column="10">timeleft<pos:position pos:line="90" pos:column="18"/></name> <operator pos:line="90" pos:column="19">&lt;<pos:position pos:line="90" pos:column="23"/></operator> <literal type="number" pos:line="90" pos:column="21">0<pos:position pos:line="90" pos:column="22"/></literal></expr>)<pos:position pos:line="90" pos:column="23"/></condition><then pos:line="90" pos:column="23"> <block pos:line="90" pos:column="24">{
        <comment type="block" pos:line="91" pos:column="9">/* we already got the timeout */</comment>
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">failf<pos:position pos:line="92" pos:column="14"/></name><argument_list pos:line="92" pos:column="14">(<argument><expr><name><name pos:line="92" pos:column="15">conn<pos:position pos:line="92" pos:column="19"/></name><operator pos:line="92" pos:column="19">-&gt;<pos:position pos:line="92" pos:column="24"/></operator><name pos:line="92" pos:column="21">data<pos:position pos:line="92" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="27">"schannel: timed out sending data "<pos:position pos:line="92" pos:column="62"/></literal>
              <literal type="string" pos:line="93" pos:column="15">"(bytes sent: %zd)"<pos:position pos:line="93" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="36">written<pos:position pos:line="93" pos:column="43"/></name></expr></argument>)<pos:position pos:line="93" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="94" pos:column="9">*<pos:position pos:line="94" pos:column="10"/></operator><name pos:line="94" pos:column="10">err<pos:position pos:line="94" pos:column="13"/></name> <operator pos:line="94" pos:column="14">=<pos:position pos:line="94" pos:column="15"/></operator> <name pos:line="94" pos:column="16">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="94" pos:column="40"/></name></expr>;<pos:position pos:line="94" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="95" pos:column="9">written<pos:position pos:line="95" pos:column="16"/></name> <operator pos:line="95" pos:column="17">=<pos:position pos:line="95" pos:column="18"/></operator> <operator pos:line="95" pos:column="19">-<pos:position pos:line="95" pos:column="20"/></operator><literal type="number" pos:line="95" pos:column="20">1<pos:position pos:line="95" pos:column="21"/></literal></expr>;<pos:position pos:line="95" pos:column="22"/></expr_stmt>
        <break pos:line="96" pos:column="9">break;<pos:position pos:line="96" pos:column="15"/></break>
      }<pos:position pos:line="97" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="99" pos:column="7">what<pos:position pos:line="99" pos:column="11"/></name> <operator pos:line="99" pos:column="12">=<pos:position pos:line="99" pos:column="13"/></operator> <call><name pos:line="99" pos:column="14">SOCKET_WRITABLE<pos:position pos:line="99" pos:column="29"/></name><argument_list pos:line="99" pos:column="29">(<argument><expr><name><name pos:line="99" pos:column="30">conn<pos:position pos:line="99" pos:column="34"/></name><operator pos:line="99" pos:column="34">-&gt;<pos:position pos:line="99" pos:column="39"/></operator><name pos:line="99" pos:column="36">sock<pos:position pos:line="99" pos:column="40"/></name><index pos:line="99" pos:column="40">[<expr><name pos:line="99" pos:column="41">sockindex<pos:position pos:line="99" pos:column="50"/></name></expr>]<pos:position pos:line="99" pos:column="51"/></index></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="53">timeleft<pos:position pos:line="99" pos:column="61"/></name></expr></argument>)<pos:position pos:line="99" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="63"/></expr_stmt>
      <if pos:line="100" pos:column="7">if<condition pos:line="100" pos:column="9">(<expr><name pos:line="100" pos:column="10">what<pos:position pos:line="100" pos:column="14"/></name> <operator pos:line="100" pos:column="15">&lt;<pos:position pos:line="100" pos:column="19"/></operator> <literal type="number" pos:line="100" pos:column="17">0<pos:position pos:line="100" pos:column="18"/></literal></expr>)<pos:position pos:line="100" pos:column="19"/></condition><then pos:line="100" pos:column="19"> <block pos:line="100" pos:column="20">{
        <comment type="block" pos:line="101" pos:column="9">/* fatal error */</comment>
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">failf<pos:position pos:line="102" pos:column="14"/></name><argument_list pos:line="102" pos:column="14">(<argument><expr><name><name pos:line="102" pos:column="15">conn<pos:position pos:line="102" pos:column="19"/></name><operator pos:line="102" pos:column="19">-&gt;<pos:position pos:line="102" pos:column="24"/></operator><name pos:line="102" pos:column="21">data<pos:position pos:line="102" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="27">"select/poll on SSL socket, errno: %d"<pos:position pos:line="102" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="67">SOCKERRNO<pos:position pos:line="102" pos:column="76"/></name></expr></argument>)<pos:position pos:line="102" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="103" pos:column="9">*<pos:position pos:line="103" pos:column="10"/></operator><name pos:line="103" pos:column="10">err<pos:position pos:line="103" pos:column="13"/></name> <operator pos:line="103" pos:column="14">=<pos:position pos:line="103" pos:column="15"/></operator> <name pos:line="103" pos:column="16">CURLE_SEND_ERROR<pos:position pos:line="103" pos:column="32"/></name></expr>;<pos:position pos:line="103" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="104" pos:column="9">written<pos:position pos:line="104" pos:column="16"/></name> <operator pos:line="104" pos:column="17">=<pos:position pos:line="104" pos:column="18"/></operator> <operator pos:line="104" pos:column="19">-<pos:position pos:line="104" pos:column="20"/></operator><literal type="number" pos:line="104" pos:column="20">1<pos:position pos:line="104" pos:column="21"/></literal></expr>;<pos:position pos:line="104" pos:column="22"/></expr_stmt>
        <break pos:line="105" pos:column="9">break;<pos:position pos:line="105" pos:column="15"/></break>
      }<pos:position pos:line="106" pos:column="8"/></block></then>
      <elseif pos:line="107" pos:column="7">else <if pos:line="107" pos:column="12">if<condition pos:line="107" pos:column="14">(<expr><literal type="number" pos:line="107" pos:column="15">0<pos:position pos:line="107" pos:column="16"/></literal> <operator pos:line="107" pos:column="17">==<pos:position pos:line="107" pos:column="19"/></operator> <name pos:line="107" pos:column="20">what<pos:position pos:line="107" pos:column="24"/></name></expr>)<pos:position pos:line="107" pos:column="25"/></condition><then pos:line="107" pos:column="25"> <block pos:line="107" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="108" pos:column="9">failf<pos:position pos:line="108" pos:column="14"/></name><argument_list pos:line="108" pos:column="14">(<argument><expr><name><name pos:line="108" pos:column="15">conn<pos:position pos:line="108" pos:column="19"/></name><operator pos:line="108" pos:column="19">-&gt;<pos:position pos:line="108" pos:column="24"/></operator><name pos:line="108" pos:column="21">data<pos:position pos:line="108" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="27">"schannel: timed out sending data "<pos:position pos:line="108" pos:column="62"/></literal>
              <literal type="string" pos:line="109" pos:column="15">"(bytes sent: %zd)"<pos:position pos:line="109" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="36">written<pos:position pos:line="109" pos:column="43"/></name></expr></argument>)<pos:position pos:line="109" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="110" pos:column="9">*<pos:position pos:line="110" pos:column="10"/></operator><name pos:line="110" pos:column="10">err<pos:position pos:line="110" pos:column="13"/></name> <operator pos:line="110" pos:column="14">=<pos:position pos:line="110" pos:column="15"/></operator> <name pos:line="110" pos:column="16">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="110" pos:column="40"/></name></expr>;<pos:position pos:line="110" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="111" pos:column="9">written<pos:position pos:line="111" pos:column="16"/></name> <operator pos:line="111" pos:column="17">=<pos:position pos:line="111" pos:column="18"/></operator> <operator pos:line="111" pos:column="19">-<pos:position pos:line="111" pos:column="20"/></operator><literal type="number" pos:line="111" pos:column="20">1<pos:position pos:line="111" pos:column="21"/></literal></expr>;<pos:position pos:line="111" pos:column="22"/></expr_stmt>
        <break pos:line="112" pos:column="9">break;<pos:position pos:line="112" pos:column="15"/></break>
      }<pos:position pos:line="113" pos:column="8"/></block></then></if></elseif></if>
      <comment type="block" pos:line="114" pos:column="7">/* socket is writable */</comment>

      <expr_stmt><expr><name pos:line="116" pos:column="7">result<pos:position pos:line="116" pos:column="13"/></name> <operator pos:line="116" pos:column="14">=<pos:position pos:line="116" pos:column="15"/></operator> <call><name pos:line="116" pos:column="16">Curl_write_plain<pos:position pos:line="116" pos:column="32"/></name><argument_list pos:line="116" pos:column="32">(<argument><expr><name pos:line="116" pos:column="33">conn<pos:position pos:line="116" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="39">conn<pos:position pos:line="116" pos:column="43"/></name><operator pos:line="116" pos:column="43">-&gt;<pos:position pos:line="116" pos:column="48"/></operator><name pos:line="116" pos:column="45">sock<pos:position pos:line="116" pos:column="49"/></name><index pos:line="116" pos:column="49">[<expr><name pos:line="116" pos:column="50">sockindex<pos:position pos:line="116" pos:column="59"/></name></expr>]<pos:position pos:line="116" pos:column="60"/></index></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="62">data<pos:position pos:line="116" pos:column="66"/></name> <operator pos:line="116" pos:column="67">+<pos:position pos:line="116" pos:column="68"/></operator> <name pos:line="116" pos:column="69">written<pos:position pos:line="116" pos:column="76"/></name></expr></argument>,
                                <argument><expr><name pos:line="117" pos:column="33">len<pos:position pos:line="117" pos:column="36"/></name> <operator pos:line="117" pos:column="37">-<pos:position pos:line="117" pos:column="38"/></operator> <name pos:line="117" pos:column="39">written<pos:position pos:line="117" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="117" pos:column="48">&amp;<pos:position pos:line="117" pos:column="53"/></operator><name pos:line="117" pos:column="49">this_write<pos:position pos:line="117" pos:column="59"/></name></expr></argument>)<pos:position pos:line="117" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="61"/></expr_stmt>
      <if pos:line="118" pos:column="7">if<condition pos:line="118" pos:column="9">(<expr><name pos:line="118" pos:column="10">result<pos:position pos:line="118" pos:column="16"/></name> <operator pos:line="118" pos:column="17">==<pos:position pos:line="118" pos:column="19"/></operator> <name pos:line="118" pos:column="20">CURLE_AGAIN<pos:position pos:line="118" pos:column="31"/></name></expr>)<pos:position pos:line="118" pos:column="32"/></condition><then pos:line="118" pos:column="32">
        <block type="pseudo"><continue pos:line="119" pos:column="9">continue;<pos:position pos:line="119" pos:column="18"/></continue></block></then>
      <elseif pos:line="120" pos:column="7">else <if pos:line="120" pos:column="12">if<condition pos:line="120" pos:column="14">(<expr><name pos:line="120" pos:column="15">result<pos:position pos:line="120" pos:column="21"/></name> <operator pos:line="120" pos:column="22">!=<pos:position pos:line="120" pos:column="24"/></operator> <name pos:line="120" pos:column="25">CURLE_OK<pos:position pos:line="120" pos:column="33"/></name></expr>)<pos:position pos:line="120" pos:column="34"/></condition><then pos:line="120" pos:column="34"> <block pos:line="120" pos:column="35">{
        <expr_stmt><expr><operator pos:line="121" pos:column="9">*<pos:position pos:line="121" pos:column="10"/></operator><name pos:line="121" pos:column="10">err<pos:position pos:line="121" pos:column="13"/></name> <operator pos:line="121" pos:column="14">=<pos:position pos:line="121" pos:column="15"/></operator> <name pos:line="121" pos:column="16">result<pos:position pos:line="121" pos:column="22"/></name></expr>;<pos:position pos:line="121" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="122" pos:column="9">written<pos:position pos:line="122" pos:column="16"/></name> <operator pos:line="122" pos:column="17">=<pos:position pos:line="122" pos:column="18"/></operator> <operator pos:line="122" pos:column="19">-<pos:position pos:line="122" pos:column="20"/></operator><literal type="number" pos:line="122" pos:column="20">1<pos:position pos:line="122" pos:column="21"/></literal></expr>;<pos:position pos:line="122" pos:column="22"/></expr_stmt>
        <break pos:line="123" pos:column="9">break;<pos:position pos:line="123" pos:column="15"/></break>
      }<pos:position pos:line="124" pos:column="8"/></block></then></if></elseif></if>

      <expr_stmt><expr><name pos:line="126" pos:column="7">written<pos:position pos:line="126" pos:column="14"/></name> <operator pos:line="126" pos:column="15">+=<pos:position pos:line="126" pos:column="17"/></operator> <name pos:line="126" pos:column="18">this_write<pos:position pos:line="126" pos:column="28"/></name></expr>;<pos:position pos:line="126" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="127" pos:column="6"/></block></while>
  }<pos:position pos:line="128" pos:column="4"/></block></then>
  <elseif pos:line="129" pos:column="3">else <if pos:line="129" pos:column="8">if<condition pos:line="129" pos:column="10">(<expr><name pos:line="129" pos:column="11">sspi_status<pos:position pos:line="129" pos:column="22"/></name> <operator pos:line="129" pos:column="23">==<pos:position pos:line="129" pos:column="25"/></operator> <name pos:line="129" pos:column="26">SEC_E_INSUFFICIENT_MEMORY<pos:position pos:line="129" pos:column="51"/></name></expr>)<pos:position pos:line="129" pos:column="52"/></condition><then pos:line="129" pos:column="52"> <block pos:line="129" pos:column="53">{
    <expr_stmt><expr><operator pos:line="130" pos:column="5">*<pos:position pos:line="130" pos:column="6"/></operator><name pos:line="130" pos:column="6">err<pos:position pos:line="130" pos:column="9"/></name> <operator pos:line="130" pos:column="10">=<pos:position pos:line="130" pos:column="11"/></operator> <name pos:line="130" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="130" pos:column="31"/></name></expr>;<pos:position pos:line="130" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="131" pos:column="4"/></block></then></if></elseif>
  <else pos:line="132" pos:column="3">else<block pos:line="132" pos:column="7">{
    <expr_stmt><expr><operator pos:line="133" pos:column="5">*<pos:position pos:line="133" pos:column="6"/></operator><name pos:line="133" pos:column="6">err<pos:position pos:line="133" pos:column="9"/></name> <operator pos:line="133" pos:column="10">=<pos:position pos:line="133" pos:column="11"/></operator> <name pos:line="133" pos:column="12">CURLE_SEND_ERROR<pos:position pos:line="133" pos:column="28"/></name></expr>;<pos:position pos:line="133" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="134" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="136" pos:column="3">Curl_safefree<pos:position pos:line="136" pos:column="16"/></name><argument_list pos:line="136" pos:column="16">(<argument><expr><name pos:line="136" pos:column="17">data<pos:position pos:line="136" pos:column="21"/></name></expr></argument>)<pos:position pos:line="136" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="23"/></expr_stmt>

  <if pos:line="138" pos:column="3">if<condition pos:line="138" pos:column="5">(<expr><name pos:line="138" pos:column="6">len<pos:position pos:line="138" pos:column="9"/></name> <operator pos:line="138" pos:column="10">==<pos:position pos:line="138" pos:column="12"/></operator> <operator pos:line="138" pos:column="13">(<pos:position pos:line="138" pos:column="14"/></operator><name pos:line="138" pos:column="14">size_t<pos:position pos:line="138" pos:column="20"/></name><operator pos:line="138" pos:column="20">)<pos:position pos:line="138" pos:column="21"/></operator><name pos:line="138" pos:column="21">written<pos:position pos:line="138" pos:column="28"/></name></expr>)<pos:position pos:line="138" pos:column="29"/></condition><then pos:line="138" pos:column="29">
    <comment type="block" pos:line="139" pos:column="5">/* Encrypted message including header, data and trailer entirely sent.
       The return value is the number of unencrypted bytes that were sent. */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="141" pos:column="5">written<pos:position pos:line="141" pos:column="12"/></name> <operator pos:line="141" pos:column="13">=<pos:position pos:line="141" pos:column="14"/></operator> <name><name pos:line="141" pos:column="15">outbuf<pos:position pos:line="141" pos:column="21"/></name><index pos:line="141" pos:column="21">[<expr><literal type="number" pos:line="141" pos:column="22">1<pos:position pos:line="141" pos:column="23"/></literal></expr>]<pos:position pos:line="141" pos:column="24"/></index></name><operator pos:line="141" pos:column="24">.<pos:position pos:line="141" pos:column="25"/></operator><name pos:line="141" pos:column="25">cbBuffer<pos:position pos:line="141" pos:column="33"/></name></expr>;<pos:position pos:line="141" pos:column="34"/></expr_stmt></block></then></if>

  <return pos:line="143" pos:column="3">return <expr><name pos:line="143" pos:column="10">written<pos:position pos:line="143" pos:column="17"/></name></expr>;<pos:position pos:line="143" pos:column="18"/></return>
}<pos:position pos:line="144" pos:column="2"/></block></function></unit>
