<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_749_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">send_doc<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">curl_socket_t<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">sock<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">httprequest<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">req<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ssize_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">written<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">count<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buffer<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">ptr<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">FILE<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">stream<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">cmd<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name pos:line="8" pos:column="15">NULL<pos:position pos:line="8" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">cmdsize<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">FILE<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">dump<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">bool<pos:position pos:line="11" pos:column="7"/></name></type> <name pos:line="11" pos:column="8">persistant<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><name pos:line="11" pos:column="21">TRUE<pos:position pos:line="11" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">bool<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">sendfailure<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">FALSE<pos:position pos:line="12" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">size_t<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">responsesize<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">error<pos:position pos:line="14" pos:column="12"/></name> <init pos:line="14" pos:column="13">= <expr><literal type="number" pos:line="14" pos:column="15">0<pos:position pos:line="14" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">res<pos:position pos:line="15" pos:column="10"/></name></decl>;<pos:position pos:line="15" pos:column="11"/></decl_stmt>

  <decl_stmt><decl><specifier pos:line="17" pos:column="3">static<pos:position pos:line="17" pos:column="9"/></specifier> <type><name pos:line="17" pos:column="10">char<pos:position pos:line="17" pos:column="14"/></name></type> <name><name pos:line="17" pos:column="15">weare<pos:position pos:line="17" pos:column="20"/></name><index pos:line="17" pos:column="20">[<expr><literal type="number" pos:line="17" pos:column="21">256<pos:position pos:line="17" pos:column="24"/></literal></expr>]<pos:position pos:line="17" pos:column="25"/></index></name></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name></type> <name><name pos:line="19" pos:column="8">partbuf<pos:position pos:line="19" pos:column="15"/></name><index pos:line="19" pos:column="15">[<expr><literal type="number" pos:line="19" pos:column="16">80<pos:position pos:line="19" pos:column="18"/></literal></expr>]<pos:position pos:line="19" pos:column="19"/></index></name><init pos:line="19" pos:column="19">=<expr><literal type="string" pos:line="19" pos:column="20">"data"<pos:position pos:line="19" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">logmsg<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><literal type="string" pos:line="21" pos:column="10">"Send response number %ld part %ld"<pos:position pos:line="21" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="47">req<pos:position pos:line="21" pos:column="50"/></name><operator pos:line="21" pos:column="50">-&gt;<pos:position pos:line="21" pos:column="55"/></operator><name pos:line="21" pos:column="52">testno<pos:position pos:line="21" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="60">req<pos:position pos:line="21" pos:column="63"/></name><operator pos:line="21" pos:column="63">-&gt;<pos:position pos:line="21" pos:column="68"/></operator><name pos:line="21" pos:column="65">partno<pos:position pos:line="21" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></expr_stmt>

  <switch pos:line="23" pos:column="3">switch<condition pos:line="23" pos:column="9">(<expr><name><name pos:line="23" pos:column="10">req<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">rcmd<pos:position pos:line="23" pos:column="19"/></name></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition> <block pos:line="23" pos:column="21">{
  <default pos:line="24" pos:column="3">default:<pos:position pos:line="24" pos:column="11"/></default>
  <case pos:line="25" pos:column="3">case <expr><name pos:line="25" pos:column="8">RCMD_NORMALREQ<pos:position pos:line="25" pos:column="22"/></name></expr>:<pos:position pos:line="25" pos:column="23"/></case>
    <break pos:line="26" pos:column="5">break;<pos:position pos:line="26" pos:column="11"/></break> <comment type="block" pos:line="26" pos:column="12">/* continue with business as usual */</comment>
  <case pos:line="27" pos:column="3">case <expr><name pos:line="27" pos:column="8">RCMD_STREAM<pos:position pos:line="27" pos:column="19"/></name></expr>:<pos:position pos:line="27" pos:column="20"/></case>
<cpp:define pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">define<pos:position pos:line="28" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="28" pos:column="9">STREAMTHIS<pos:position pos:line="28" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="28" pos:column="20">"a string to stream 01234567890\n"<pos:position pos:line="28" pos:column="54"/></cpp:value></cpp:define>
    <expr_stmt><expr><name pos:line="29" pos:column="5">count<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <call><name pos:line="29" pos:column="13">strlen<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">STREAMTHIS<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
    <for pos:line="30" pos:column="5">for<control pos:line="30" pos:column="8">(<init pos:line="30" pos:column="9">;<pos:position pos:line="30" pos:column="10"/></init><condition pos:line="30" pos:column="10">;<pos:position pos:line="30" pos:column="11"/></condition><incr/>)<pos:position pos:line="30" pos:column="12"/></control> <block pos:line="30" pos:column="13">{
      <expr_stmt><expr><name pos:line="31" pos:column="7">written<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <call><name pos:line="31" pos:column="17">swrite<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><name pos:line="31" pos:column="24">sock<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">STREAMTHIS<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="42">count<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><name pos:line="32" pos:column="10">got_exit_signal<pos:position pos:line="32" pos:column="25"/></name></expr>)<pos:position pos:line="32" pos:column="26"/></condition><then pos:line="32" pos:column="26">
        <block type="pseudo"><return pos:line="33" pos:column="9">return <expr><operator pos:line="33" pos:column="16">-<pos:position pos:line="33" pos:column="17"/></operator><literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr>;<pos:position pos:line="33" pos:column="19"/></return></block></then></if>
      <if pos:line="34" pos:column="7">if<condition pos:line="34" pos:column="9">(<expr><name pos:line="34" pos:column="10">written<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">!=<pos:position pos:line="34" pos:column="20"/></operator> <operator pos:line="34" pos:column="21">(<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">ssize_t<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">)<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="30">count<pos:position pos:line="34" pos:column="35"/></name></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36"> <block pos:line="34" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">logmsg<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="string" pos:line="35" pos:column="16">"Stopped streaming"<pos:position pos:line="35" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
        <break pos:line="36" pos:column="9">break;<pos:position pos:line="36" pos:column="15"/></break>
      }<pos:position pos:line="37" pos:column="8"/></block></then></if>
    }<pos:position pos:line="38" pos:column="6"/></block></for>
    <return pos:line="39" pos:column="5">return <expr><operator pos:line="39" pos:column="12">-<pos:position pos:line="39" pos:column="13"/></operator><literal type="number" pos:line="39" pos:column="13">1<pos:position pos:line="39" pos:column="14"/></literal></expr>;<pos:position pos:line="39" pos:column="15"/></return>
  <case pos:line="40" pos:column="3">case <expr><name pos:line="40" pos:column="8">RCMD_IDLE<pos:position pos:line="40" pos:column="17"/></name></expr>:<pos:position pos:line="40" pos:column="18"/></case>
    <comment type="block" pos:line="41" pos:column="5">/* Do nothing. Sit idle. Pretend it rains. */</comment>
    <return pos:line="42" pos:column="5">return <expr><literal type="number" pos:line="42" pos:column="12">0<pos:position pos:line="42" pos:column="13"/></literal></expr>;<pos:position pos:line="42" pos:column="14"/></return>
  }<pos:position pos:line="43" pos:column="4"/></block></switch>

  <expr_stmt><expr><name><name pos:line="45" pos:column="3">req<pos:position pos:line="45" pos:column="6"/></name><operator pos:line="45" pos:column="6">-&gt;<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="8">open<pos:position pos:line="45" pos:column="12"/></name></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <name pos:line="45" pos:column="15">FALSE<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></expr_stmt>

  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><name><name pos:line="47" pos:column="6">req<pos:position pos:line="47" pos:column="9"/></name><operator pos:line="47" pos:column="9">-&gt;<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="11">testno<pos:position pos:line="47" pos:column="17"/></name></name> <operator pos:line="47" pos:column="18">&lt;<pos:position pos:line="47" pos:column="22"/></operator> <literal type="number" pos:line="47" pos:column="20">0<pos:position pos:line="47" pos:column="21"/></literal></expr>)<pos:position pos:line="47" pos:column="22"/></condition><then pos:line="47" pos:column="22"> <block pos:line="47" pos:column="23">{
    <decl_stmt><decl><type><name pos:line="48" pos:column="5">size_t<pos:position pos:line="48" pos:column="11"/></name></type> <name pos:line="48" pos:column="12">msglen<pos:position pos:line="48" pos:column="18"/></name></decl>;<pos:position pos:line="48" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="49" pos:column="5">char<pos:position pos:line="49" pos:column="9"/></name></type> <name><name pos:line="49" pos:column="10">msgbuf<pos:position pos:line="49" pos:column="16"/></name><index pos:line="49" pos:column="16">[<expr><literal type="number" pos:line="49" pos:column="17">64<pos:position pos:line="49" pos:column="19"/></literal></expr>]<pos:position pos:line="49" pos:column="20"/></index></name></decl>;<pos:position pos:line="49" pos:column="21"/></decl_stmt>

    <switch pos:line="51" pos:column="5">switch<condition pos:line="51" pos:column="11">(<expr><name><name pos:line="51" pos:column="12">req<pos:position pos:line="51" pos:column="15"/></name><operator pos:line="51" pos:column="15">-&gt;<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="17">testno<pos:position pos:line="51" pos:column="23"/></name></name></expr>)<pos:position pos:line="51" pos:column="24"/></condition> <block pos:line="51" pos:column="25">{
    <case pos:line="52" pos:column="5">case <expr><name pos:line="52" pos:column="10">DOCNUMBER_QUIT<pos:position pos:line="52" pos:column="24"/></name></expr>:<pos:position pos:line="52" pos:column="25"/></case>
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">logmsg<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><literal type="string" pos:line="53" pos:column="14">"Replying to QUIT"<pos:position pos:line="53" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="54" pos:column="7">buffer<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <name pos:line="54" pos:column="16">docquit<pos:position pos:line="54" pos:column="23"/></name></expr>;<pos:position pos:line="54" pos:column="24"/></expr_stmt>
      <break pos:line="55" pos:column="7">break;<pos:position pos:line="55" pos:column="13"/></break>
    <case pos:line="56" pos:column="5">case <expr><name pos:line="56" pos:column="10">DOCNUMBER_WERULEZ<pos:position pos:line="56" pos:column="27"/></name></expr>:<pos:position pos:line="56" pos:column="28"/></case>
      <comment type="block" pos:line="57" pos:column="7">/* we got a "friends?" question, reply back that we sure are */</comment>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">logmsg<pos:position pos:line="58" pos:column="13"/></name><argument_list pos:line="58" pos:column="13">(<argument><expr><literal type="string" pos:line="58" pos:column="14">"Identifying ourselves as friends"<pos:position pos:line="58" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">snprintf<pos:position pos:line="59" pos:column="15"/></name><argument_list pos:line="59" pos:column="15">(<argument><expr><name pos:line="59" pos:column="16">msgbuf<pos:position pos:line="59" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="24">sizeof<argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">msgbuf<pos:position pos:line="59" pos:column="37"/></name></expr></argument>)<pos:position pos:line="59" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="40">"RTSP_SERVER WE ROOLZ: %ld\r\n"<pos:position pos:line="59" pos:column="71"/></literal></expr></argument>,
               <argument><expr><operator pos:line="60" pos:column="16">(<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="17">long<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">)<pos:position pos:line="60" pos:column="22"/></operator><call><name pos:line="60" pos:column="22">getpid<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">()<pos:position pos:line="60" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="61" pos:column="7">msglen<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">=<pos:position pos:line="61" pos:column="15"/></operator> <call><name pos:line="61" pos:column="16">strlen<pos:position pos:line="61" pos:column="22"/></name><argument_list pos:line="61" pos:column="22">(<argument><expr><name pos:line="61" pos:column="23">msgbuf<pos:position pos:line="61" pos:column="29"/></name></expr></argument>)<pos:position pos:line="61" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">snprintf<pos:position pos:line="62" pos:column="15"/></name><argument_list pos:line="62" pos:column="15">(<argument><expr><name pos:line="62" pos:column="16">weare<pos:position pos:line="62" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="23">sizeof<argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">weare<pos:position pos:line="62" pos:column="35"/></name></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></sizeof></expr></argument>,
               <argument><expr><literal type="string" pos:line="63" pos:column="16">"HTTP/1.1 200 OK\r\nContent-Length: %zu\r\n\r\n%s"<pos:position pos:line="63" pos:column="66"/></literal></expr></argument>,
               <argument><expr><name pos:line="64" pos:column="16">msglen<pos:position pos:line="64" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="24">msgbuf<pos:position pos:line="64" pos:column="30"/></name></expr></argument>)<pos:position pos:line="64" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="65" pos:column="7">buffer<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">=<pos:position pos:line="65" pos:column="15"/></operator> <name pos:line="65" pos:column="16">weare<pos:position pos:line="65" pos:column="21"/></name></expr>;<pos:position pos:line="65" pos:column="22"/></expr_stmt>
      <break pos:line="66" pos:column="7">break;<pos:position pos:line="66" pos:column="13"/></break>
    <case pos:line="67" pos:column="5">case <expr><name pos:line="67" pos:column="10">DOCNUMBER_INTERNAL<pos:position pos:line="67" pos:column="28"/></name></expr>:<pos:position pos:line="67" pos:column="29"/></case>
      <expr_stmt><expr><call><name pos:line="68" pos:column="7">logmsg<pos:position pos:line="68" pos:column="13"/></name><argument_list pos:line="68" pos:column="13">(<argument><expr><literal type="string" pos:line="68" pos:column="14">"Bailing out due to internal error"<pos:position pos:line="68" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="51"/></expr_stmt>
      <return pos:line="69" pos:column="7">return <expr><operator pos:line="69" pos:column="14">-<pos:position pos:line="69" pos:column="15"/></operator><literal type="number" pos:line="69" pos:column="15">1<pos:position pos:line="69" pos:column="16"/></literal></expr>;<pos:position pos:line="69" pos:column="17"/></return>
    <case pos:line="70" pos:column="5">case <expr><name pos:line="70" pos:column="10">DOCNUMBER_CONNECT<pos:position pos:line="70" pos:column="27"/></name></expr>:<pos:position pos:line="70" pos:column="28"/></case>
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">logmsg<pos:position pos:line="71" pos:column="13"/></name><argument_list pos:line="71" pos:column="13">(<argument><expr><literal type="string" pos:line="71" pos:column="14">"Replying to CONNECT"<pos:position pos:line="71" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name pos:line="72" pos:column="7">buffer<pos:position pos:line="72" pos:column="13"/></name> <operator pos:line="72" pos:column="14">=<pos:position pos:line="72" pos:column="15"/></operator> <name pos:line="72" pos:column="16">docconnect<pos:position pos:line="72" pos:column="26"/></name></expr>;<pos:position pos:line="72" pos:column="27"/></expr_stmt>
      <break pos:line="73" pos:column="7">break;<pos:position pos:line="73" pos:column="13"/></break>
    <case pos:line="74" pos:column="5">case <expr><name pos:line="74" pos:column="10">DOCNUMBER_BADCONNECT<pos:position pos:line="74" pos:column="30"/></name></expr>:<pos:position pos:line="74" pos:column="31"/></case>
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">logmsg<pos:position pos:line="75" pos:column="13"/></name><argument_list pos:line="75" pos:column="13">(<argument><expr><literal type="string" pos:line="75" pos:column="14">"Replying to a bad CONNECT"<pos:position pos:line="75" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name pos:line="76" pos:column="7">buffer<pos:position pos:line="76" pos:column="13"/></name> <operator pos:line="76" pos:column="14">=<pos:position pos:line="76" pos:column="15"/></operator> <name pos:line="76" pos:column="16">docbadconnect<pos:position pos:line="76" pos:column="29"/></name></expr>;<pos:position pos:line="76" pos:column="30"/></expr_stmt>
      <break pos:line="77" pos:column="7">break;<pos:position pos:line="77" pos:column="13"/></break>
    <case pos:line="78" pos:column="5">case <expr><name pos:line="78" pos:column="10">DOCNUMBER_404<pos:position pos:line="78" pos:column="23"/></name></expr>:<pos:position pos:line="78" pos:column="24"/></case>
    <default pos:line="79" pos:column="5">default:<pos:position pos:line="79" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="80" pos:column="7">logmsg<pos:position pos:line="80" pos:column="13"/></name><argument_list pos:line="80" pos:column="13">(<argument><expr><literal type="string" pos:line="80" pos:column="14">"Replying to with a 404"<pos:position pos:line="80" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="40"/></expr_stmt>
      <if pos:line="81" pos:column="7">if<condition pos:line="81" pos:column="9">(<expr><name><name pos:line="81" pos:column="10">req<pos:position pos:line="81" pos:column="13"/></name><operator pos:line="81" pos:column="13">-&gt;<pos:position pos:line="81" pos:column="18"/></operator><name pos:line="81" pos:column="15">protocol<pos:position pos:line="81" pos:column="23"/></name></name> <operator pos:line="81" pos:column="24">==<pos:position pos:line="81" pos:column="26"/></operator> <name pos:line="81" pos:column="27">RPROT_HTTP<pos:position pos:line="81" pos:column="37"/></name></expr>)<pos:position pos:line="81" pos:column="38"/></condition><then pos:line="81" pos:column="38"> <block pos:line="81" pos:column="39">{
        <expr_stmt><expr><name pos:line="82" pos:column="9">buffer<pos:position pos:line="82" pos:column="15"/></name> <operator pos:line="82" pos:column="16">=<pos:position pos:line="82" pos:column="17"/></operator> <name pos:line="82" pos:column="18">doc404_HTTP<pos:position pos:line="82" pos:column="29"/></name></expr>;<pos:position pos:line="82" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="83" pos:column="8"/></block></then>
      <else pos:line="84" pos:column="7">else <block pos:line="84" pos:column="12">{
        <expr_stmt><expr><name pos:line="85" pos:column="9">buffer<pos:position pos:line="85" pos:column="15"/></name> <operator pos:line="85" pos:column="16">=<pos:position pos:line="85" pos:column="17"/></operator> <name pos:line="85" pos:column="18">doc404_RTSP<pos:position pos:line="85" pos:column="29"/></name></expr>;<pos:position pos:line="85" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="86" pos:column="8"/></block></else></if>
      <break pos:line="87" pos:column="7">break;<pos:position pos:line="87" pos:column="13"/></break>
    }<pos:position pos:line="88" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="90" pos:column="5">count<pos:position pos:line="90" pos:column="10"/></name> <operator pos:line="90" pos:column="11">=<pos:position pos:line="90" pos:column="12"/></operator> <call><name pos:line="90" pos:column="13">strlen<pos:position pos:line="90" pos:column="19"/></name><argument_list pos:line="90" pos:column="19">(<argument><expr><name pos:line="90" pos:column="20">buffer<pos:position pos:line="90" pos:column="26"/></name></expr></argument>)<pos:position pos:line="90" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="91" pos:column="4"/></block></then>
  <else pos:line="92" pos:column="3">else <block pos:line="92" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="93" pos:column="5">char<pos:position pos:line="93" pos:column="9"/></name> <modifier pos:line="93" pos:column="10">*<pos:position pos:line="93" pos:column="11"/></modifier></type><name pos:line="93" pos:column="11">filename<pos:position pos:line="93" pos:column="19"/></name> <init pos:line="93" pos:column="20">= <expr><call><name pos:line="93" pos:column="22">test2file<pos:position pos:line="93" pos:column="31"/></name><argument_list pos:line="93" pos:column="31">(<argument><expr><name><name pos:line="93" pos:column="32">req<pos:position pos:line="93" pos:column="35"/></name><operator pos:line="93" pos:column="35">-&gt;<pos:position pos:line="93" pos:column="40"/></operator><name pos:line="93" pos:column="37">testno<pos:position pos:line="93" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="93" pos:column="45"/></decl_stmt>

    <if pos:line="95" pos:column="5">if<condition pos:line="95" pos:column="7">(<expr><literal type="number" pos:line="95" pos:column="8">0<pos:position pos:line="95" pos:column="9"/></literal> <operator pos:line="95" pos:column="10">!=<pos:position pos:line="95" pos:column="12"/></operator> <name><name pos:line="95" pos:column="13">req<pos:position pos:line="95" pos:column="16"/></name><operator pos:line="95" pos:column="16">-&gt;<pos:position pos:line="95" pos:column="21"/></operator><name pos:line="95" pos:column="18">partno<pos:position pos:line="95" pos:column="24"/></name></name></expr>)<pos:position pos:line="95" pos:column="25"/></condition><then pos:line="95" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="7">snprintf<pos:position pos:line="96" pos:column="15"/></name><argument_list pos:line="96" pos:column="15">(<argument><expr><name pos:line="96" pos:column="16">partbuf<pos:position pos:line="96" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="96" pos:column="25">sizeof<argument_list pos:line="96" pos:column="31">(<argument><expr><name pos:line="96" pos:column="32">partbuf<pos:position pos:line="96" pos:column="39"/></name></expr></argument>)<pos:position pos:line="96" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="42">"data%ld"<pos:position pos:line="96" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="53">req<pos:position pos:line="96" pos:column="56"/></name><operator pos:line="96" pos:column="56">-&gt;<pos:position pos:line="96" pos:column="61"/></operator><name pos:line="96" pos:column="58">partno<pos:position pos:line="96" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="66"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="98" pos:column="5">stream<pos:position pos:line="98" pos:column="11"/></name> <operator pos:line="98" pos:column="12">=<pos:position pos:line="98" pos:column="13"/></operator> <call><name pos:line="98" pos:column="14">fopen<pos:position pos:line="98" pos:column="19"/></name><argument_list pos:line="98" pos:column="19">(<argument><expr><name pos:line="98" pos:column="20">filename<pos:position pos:line="98" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="30">"rb"<pos:position pos:line="98" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="36"/></expr_stmt>
    <if pos:line="99" pos:column="5">if<condition pos:line="99" pos:column="7">(<expr><operator pos:line="99" pos:column="8">!<pos:position pos:line="99" pos:column="9"/></operator><name pos:line="99" pos:column="9">stream<pos:position pos:line="99" pos:column="15"/></name></expr>)<pos:position pos:line="99" pos:column="16"/></condition><then pos:line="99" pos:column="16"> <block pos:line="99" pos:column="17">{
      <expr_stmt><expr><name pos:line="100" pos:column="7">error<pos:position pos:line="100" pos:column="12"/></name> <operator pos:line="100" pos:column="13">=<pos:position pos:line="100" pos:column="14"/></operator> <name pos:line="100" pos:column="15">errno<pos:position pos:line="100" pos:column="20"/></name></expr>;<pos:position pos:line="100" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="101" pos:column="7">logmsg<pos:position pos:line="101" pos:column="13"/></name><argument_list pos:line="101" pos:column="13">(<argument><expr><literal type="string" pos:line="101" pos:column="14">"fopen() failed with error: %d %s"<pos:position pos:line="101" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="50">error<pos:position pos:line="101" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="101" pos:column="57">strerror<pos:position pos:line="101" pos:column="65"/></name><argument_list pos:line="101" pos:column="65">(<argument><expr><name pos:line="101" pos:column="66">error<pos:position pos:line="101" pos:column="71"/></name></expr></argument>)<pos:position pos:line="101" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="101" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="102" pos:column="7">logmsg<pos:position pos:line="102" pos:column="13"/></name><argument_list pos:line="102" pos:column="13">(<argument><expr><literal type="string" pos:line="102" pos:column="14">"Error opening file: %s"<pos:position pos:line="102" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="40">filename<pos:position pos:line="102" pos:column="48"/></name></expr></argument>)<pos:position pos:line="102" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="103" pos:column="7">logmsg<pos:position pos:line="103" pos:column="13"/></name><argument_list pos:line="103" pos:column="13">(<argument><expr><literal type="string" pos:line="103" pos:column="14">"Couldn't open test file"<pos:position pos:line="103" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="41"/></expr_stmt>
      <return pos:line="104" pos:column="7">return <expr><literal type="number" pos:line="104" pos:column="14">0<pos:position pos:line="104" pos:column="15"/></literal></expr>;<pos:position pos:line="104" pos:column="16"/></return>
    }<pos:position pos:line="105" pos:column="6"/></block></then>
    <else pos:line="106" pos:column="5">else <block pos:line="106" pos:column="10">{
      <expr_stmt><expr><name pos:line="107" pos:column="7">error<pos:position pos:line="107" pos:column="12"/></name> <operator pos:line="107" pos:column="13">=<pos:position pos:line="107" pos:column="14"/></operator> <call><name pos:line="107" pos:column="15">getpart<pos:position pos:line="107" pos:column="22"/></name><argument_list pos:line="107" pos:column="22">(<argument><expr><operator pos:line="107" pos:column="23">&amp;<pos:position pos:line="107" pos:column="28"/></operator><name pos:line="107" pos:column="24">ptr<pos:position pos:line="107" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="29">&amp;<pos:position pos:line="107" pos:column="34"/></operator><name pos:line="107" pos:column="30">count<pos:position pos:line="107" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="37">"reply"<pos:position pos:line="107" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="46">partbuf<pos:position pos:line="107" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="55">stream<pos:position pos:line="107" pos:column="61"/></name></expr></argument>)<pos:position pos:line="107" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="108" pos:column="7">fclose<pos:position pos:line="108" pos:column="13"/></name><argument_list pos:line="108" pos:column="13">(<argument><expr><name pos:line="108" pos:column="14">stream<pos:position pos:line="108" pos:column="20"/></name></expr></argument>)<pos:position pos:line="108" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="22"/></expr_stmt>
      <if pos:line="109" pos:column="7">if<condition pos:line="109" pos:column="9">(<expr><name pos:line="109" pos:column="10">error<pos:position pos:line="109" pos:column="15"/></name></expr>)<pos:position pos:line="109" pos:column="16"/></condition><then pos:line="109" pos:column="16"> <block pos:line="109" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="110" pos:column="9">logmsg<pos:position pos:line="110" pos:column="15"/></name><argument_list pos:line="110" pos:column="15">(<argument><expr><literal type="string" pos:line="110" pos:column="16">"getpart() failed with error: %d"<pos:position pos:line="110" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="51">error<pos:position pos:line="110" pos:column="56"/></name></expr></argument>)<pos:position pos:line="110" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="58"/></expr_stmt>
        <return pos:line="111" pos:column="9">return <expr><literal type="number" pos:line="111" pos:column="16">0<pos:position pos:line="111" pos:column="17"/></literal></expr>;<pos:position pos:line="111" pos:column="18"/></return>
      }<pos:position pos:line="112" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="113" pos:column="7">buffer<pos:position pos:line="113" pos:column="13"/></name> <operator pos:line="113" pos:column="14">=<pos:position pos:line="113" pos:column="15"/></operator> <name pos:line="113" pos:column="16">ptr<pos:position pos:line="113" pos:column="19"/></name></expr>;<pos:position pos:line="113" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="114" pos:column="6"/></block></else></if>

    <if pos:line="116" pos:column="5">if<condition pos:line="116" pos:column="7">(<expr><name pos:line="116" pos:column="8">got_exit_signal<pos:position pos:line="116" pos:column="23"/></name></expr>)<pos:position pos:line="116" pos:column="24"/></condition><then pos:line="116" pos:column="24"> <block pos:line="116" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">free<pos:position pos:line="117" pos:column="11"/></name><argument_list pos:line="117" pos:column="11">(<argument><expr><name pos:line="117" pos:column="12">ptr<pos:position pos:line="117" pos:column="15"/></name></expr></argument>)<pos:position pos:line="117" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="17"/></expr_stmt>
      <return pos:line="118" pos:column="7">return <expr><operator pos:line="118" pos:column="14">-<pos:position pos:line="118" pos:column="15"/></operator><literal type="number" pos:line="118" pos:column="15">1<pos:position pos:line="118" pos:column="16"/></literal></expr>;<pos:position pos:line="118" pos:column="17"/></return>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="121" pos:column="5">/* re-open the same file again */</comment>
    <expr_stmt><expr><name pos:line="122" pos:column="5">stream<pos:position pos:line="122" pos:column="11"/></name> <operator pos:line="122" pos:column="12">=<pos:position pos:line="122" pos:column="13"/></operator> <call><name pos:line="122" pos:column="14">fopen<pos:position pos:line="122" pos:column="19"/></name><argument_list pos:line="122" pos:column="19">(<argument><expr><name pos:line="122" pos:column="20">filename<pos:position pos:line="122" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="30">"rb"<pos:position pos:line="122" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="36"/></expr_stmt>
    <if pos:line="123" pos:column="5">if<condition pos:line="123" pos:column="7">(<expr><operator pos:line="123" pos:column="8">!<pos:position pos:line="123" pos:column="9"/></operator><name pos:line="123" pos:column="9">stream<pos:position pos:line="123" pos:column="15"/></name></expr>)<pos:position pos:line="123" pos:column="16"/></condition><then pos:line="123" pos:column="16"> <block pos:line="123" pos:column="17">{
      <expr_stmt><expr><name pos:line="124" pos:column="7">error<pos:position pos:line="124" pos:column="12"/></name> <operator pos:line="124" pos:column="13">=<pos:position pos:line="124" pos:column="14"/></operator> <name pos:line="124" pos:column="15">errno<pos:position pos:line="124" pos:column="20"/></name></expr>;<pos:position pos:line="124" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="125" pos:column="7">logmsg<pos:position pos:line="125" pos:column="13"/></name><argument_list pos:line="125" pos:column="13">(<argument><expr><literal type="string" pos:line="125" pos:column="14">"fopen() failed with error: %d %s"<pos:position pos:line="125" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="50">error<pos:position pos:line="125" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="125" pos:column="57">strerror<pos:position pos:line="125" pos:column="65"/></name><argument_list pos:line="125" pos:column="65">(<argument><expr><name pos:line="125" pos:column="66">error<pos:position pos:line="125" pos:column="71"/></name></expr></argument>)<pos:position pos:line="125" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="125" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="126" pos:column="7">logmsg<pos:position pos:line="126" pos:column="13"/></name><argument_list pos:line="126" pos:column="13">(<argument><expr><literal type="string" pos:line="126" pos:column="14">"Error opening file: %s"<pos:position pos:line="126" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="40">filename<pos:position pos:line="126" pos:column="48"/></name></expr></argument>)<pos:position pos:line="126" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="127" pos:column="7">logmsg<pos:position pos:line="127" pos:column="13"/></name><argument_list pos:line="127" pos:column="13">(<argument><expr><literal type="string" pos:line="127" pos:column="14">"Couldn't open test file"<pos:position pos:line="127" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="128" pos:column="7">free<pos:position pos:line="128" pos:column="11"/></name><argument_list pos:line="128" pos:column="11">(<argument><expr><name pos:line="128" pos:column="12">ptr<pos:position pos:line="128" pos:column="15"/></name></expr></argument>)<pos:position pos:line="128" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="17"/></expr_stmt>
      <return pos:line="129" pos:column="7">return <expr><literal type="number" pos:line="129" pos:column="14">0<pos:position pos:line="129" pos:column="15"/></literal></expr>;<pos:position pos:line="129" pos:column="16"/></return>
    }<pos:position pos:line="130" pos:column="6"/></block></then>
    <else pos:line="131" pos:column="5">else <block pos:line="131" pos:column="10">{
      <comment type="block" pos:line="132" pos:column="7">/* get the custom server control "commands" */</comment>
      <expr_stmt><expr><name pos:line="133" pos:column="7">error<pos:position pos:line="133" pos:column="12"/></name> <operator pos:line="133" pos:column="13">=<pos:position pos:line="133" pos:column="14"/></operator> <call><name pos:line="133" pos:column="15">getpart<pos:position pos:line="133" pos:column="22"/></name><argument_list pos:line="133" pos:column="22">(<argument><expr><operator pos:line="133" pos:column="23">&amp;<pos:position pos:line="133" pos:column="28"/></operator><name pos:line="133" pos:column="24">cmd<pos:position pos:line="133" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="133" pos:column="29">&amp;<pos:position pos:line="133" pos:column="34"/></operator><name pos:line="133" pos:column="30">cmdsize<pos:position pos:line="133" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="39">"reply"<pos:position pos:line="133" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="48">"postcmd"<pos:position pos:line="133" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="59">stream<pos:position pos:line="133" pos:column="65"/></name></expr></argument>)<pos:position pos:line="133" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="134" pos:column="7">fclose<pos:position pos:line="134" pos:column="13"/></name><argument_list pos:line="134" pos:column="13">(<argument><expr><name pos:line="134" pos:column="14">stream<pos:position pos:line="134" pos:column="20"/></name></expr></argument>)<pos:position pos:line="134" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="22"/></expr_stmt>
      <if pos:line="135" pos:column="7">if<condition pos:line="135" pos:column="9">(<expr><name pos:line="135" pos:column="10">error<pos:position pos:line="135" pos:column="15"/></name></expr>)<pos:position pos:line="135" pos:column="16"/></condition><then pos:line="135" pos:column="16"> <block pos:line="135" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="136" pos:column="9">logmsg<pos:position pos:line="136" pos:column="15"/></name><argument_list pos:line="136" pos:column="15">(<argument><expr><literal type="string" pos:line="136" pos:column="16">"getpart() failed with error: %d"<pos:position pos:line="136" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="51">error<pos:position pos:line="136" pos:column="56"/></name></expr></argument>)<pos:position pos:line="136" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="137" pos:column="9">free<pos:position pos:line="137" pos:column="13"/></name><argument_list pos:line="137" pos:column="13">(<argument><expr><name pos:line="137" pos:column="14">ptr<pos:position pos:line="137" pos:column="17"/></name></expr></argument>)<pos:position pos:line="137" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="19"/></expr_stmt>
        <return pos:line="138" pos:column="9">return <expr><literal type="number" pos:line="138" pos:column="16">0<pos:position pos:line="138" pos:column="17"/></literal></expr>;<pos:position pos:line="138" pos:column="18"/></return>
      }<pos:position pos:line="139" pos:column="8"/></block></then></if>
    }<pos:position pos:line="140" pos:column="6"/></block></else></if>
  }<pos:position pos:line="141" pos:column="4"/></block></else></if>

  <if pos:line="143" pos:column="3">if<condition pos:line="143" pos:column="5">(<expr><name pos:line="143" pos:column="6">got_exit_signal<pos:position pos:line="143" pos:column="21"/></name></expr>)<pos:position pos:line="143" pos:column="22"/></condition><then pos:line="143" pos:column="22"> <block pos:line="143" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="144" pos:column="5">free<pos:position pos:line="144" pos:column="9"/></name><argument_list pos:line="144" pos:column="9">(<argument><expr><name pos:line="144" pos:column="10">ptr<pos:position pos:line="144" pos:column="13"/></name></expr></argument>)<pos:position pos:line="144" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="145" pos:column="5">free<pos:position pos:line="145" pos:column="9"/></name><argument_list pos:line="145" pos:column="9">(<argument><expr><name pos:line="145" pos:column="10">cmd<pos:position pos:line="145" pos:column="13"/></name></expr></argument>)<pos:position pos:line="145" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="15"/></expr_stmt>
    <return pos:line="146" pos:column="5">return <expr><operator pos:line="146" pos:column="12">-<pos:position pos:line="146" pos:column="13"/></operator><literal type="number" pos:line="146" pos:column="13">1<pos:position pos:line="146" pos:column="14"/></literal></expr>;<pos:position pos:line="146" pos:column="15"/></return>
  }<pos:position pos:line="147" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="149" pos:column="3">/* If the word 'swsclose' is present anywhere in the reply chunk, the
     connection will be closed after the data has been sent to the requesting
     client... */</comment>
  <if pos:line="152" pos:column="3">if<condition pos:line="152" pos:column="5">(<expr><call><name pos:line="152" pos:column="6">strstr<pos:position pos:line="152" pos:column="12"/></name><argument_list pos:line="152" pos:column="12">(<argument><expr><name pos:line="152" pos:column="13">buffer<pos:position pos:line="152" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="152" pos:column="21">"swsclose"<pos:position pos:line="152" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="32"/></argument_list></call> <operator pos:line="152" pos:column="33">||<pos:position pos:line="152" pos:column="35"/></operator> <operator pos:line="152" pos:column="36">!<pos:position pos:line="152" pos:column="37"/></operator><name pos:line="152" pos:column="37">count<pos:position pos:line="152" pos:column="42"/></name></expr>)<pos:position pos:line="152" pos:column="43"/></condition><then pos:line="152" pos:column="43"> <block pos:line="152" pos:column="44">{
    <expr_stmt><expr><name pos:line="153" pos:column="5">persistant<pos:position pos:line="153" pos:column="15"/></name> <operator pos:line="153" pos:column="16">=<pos:position pos:line="153" pos:column="17"/></operator> <name pos:line="153" pos:column="18">FALSE<pos:position pos:line="153" pos:column="23"/></name></expr>;<pos:position pos:line="153" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="154" pos:column="5">logmsg<pos:position pos:line="154" pos:column="11"/></name><argument_list pos:line="154" pos:column="11">(<argument><expr><literal type="string" pos:line="154" pos:column="12">"connection close instruction \"swsclose\" found in response"<pos:position pos:line="154" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="155" pos:column="4"/></block></then></if>
  <if pos:line="156" pos:column="3">if<condition pos:line="156" pos:column="5">(<expr><call><name pos:line="156" pos:column="6">strstr<pos:position pos:line="156" pos:column="12"/></name><argument_list pos:line="156" pos:column="12">(<argument><expr><name pos:line="156" pos:column="13">buffer<pos:position pos:line="156" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="156" pos:column="21">"swsbounce"<pos:position pos:line="156" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="156" pos:column="34"/></condition><then pos:line="156" pos:column="34"> <block pos:line="156" pos:column="35">{
    <expr_stmt><expr><name pos:line="157" pos:column="5">prevbounce<pos:position pos:line="157" pos:column="15"/></name> <operator pos:line="157" pos:column="16">=<pos:position pos:line="157" pos:column="17"/></operator> <name pos:line="157" pos:column="18">TRUE<pos:position pos:line="157" pos:column="22"/></name></expr>;<pos:position pos:line="157" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="158" pos:column="5">logmsg<pos:position pos:line="158" pos:column="11"/></name><argument_list pos:line="158" pos:column="11">(<argument><expr><literal type="string" pos:line="158" pos:column="12">"enable \"swsbounce\" in the next request"<pos:position pos:line="158" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="159" pos:column="4"/></block></then>
  <else pos:line="160" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="161" pos:column="5">prevbounce<pos:position pos:line="161" pos:column="15"/></name> <operator pos:line="161" pos:column="16">=<pos:position pos:line="161" pos:column="17"/></operator> <name pos:line="161" pos:column="18">FALSE<pos:position pos:line="161" pos:column="23"/></name></expr>;<pos:position pos:line="161" pos:column="24"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="163" pos:column="3">dump<pos:position pos:line="163" pos:column="7"/></name> <operator pos:line="163" pos:column="8">=<pos:position pos:line="163" pos:column="9"/></operator> <call><name pos:line="163" pos:column="10">fopen<pos:position pos:line="163" pos:column="15"/></name><argument_list pos:line="163" pos:column="15">(<argument><expr><name pos:line="163" pos:column="16">RESPONSE_DUMP<pos:position pos:line="163" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="163" pos:column="31">"ab"<pos:position pos:line="163" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="163" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="37"/></expr_stmt></block></function></unit>
