<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_957_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">GetEnv<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">variable<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">do_expand<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">env<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><name pos:line="3" pos:column="15">NULL<pos:position pos:line="3" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">WIN32<pos:position pos:line="4" pos:column="13"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type>  <name><name pos:line="5" pos:column="9">buf1<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><literal type="number" pos:line="5" pos:column="14">1024<pos:position pos:line="5" pos:column="18"/></literal></expr>]<pos:position pos:line="5" pos:column="19"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="5" pos:column="21">buf2<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">1024<pos:position pos:line="5" pos:column="30"/></literal></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">DWORD<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">rc<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Don't use getenv(); it doesn't find variable added after program was
   * started. Don't accept truncated results (i.e. rc &gt;= sizeof(buf1)).  */</comment>

  <expr_stmt><expr><name pos:line="11" pos:column="3">rc<pos:position pos:line="11" pos:column="5"/></name> <operator pos:line="11" pos:column="6">=<pos:position pos:line="11" pos:column="7"/></operator> <call><name pos:line="11" pos:column="8">GetEnvironmentVariableA<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">variable<pos:position pos:line="11" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="42">buf1<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="48">sizeof<argument_list pos:line="11" pos:column="54">(<argument><expr><name pos:line="11" pos:column="55">buf1<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name pos:line="12" pos:column="6">rc<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">&gt;<pos:position pos:line="12" pos:column="13"/></operator> <literal type="number" pos:line="12" pos:column="11">0<pos:position pos:line="12" pos:column="12"/></literal> <operator pos:line="12" pos:column="13">&amp;&amp;<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="16">rc<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">&lt;<pos:position pos:line="12" pos:column="23"/></operator> <sizeof pos:line="12" pos:column="21">sizeof<argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">buf1<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></sizeof></expr>)<pos:position pos:line="12" pos:column="34"/></condition><then pos:line="12" pos:column="34"> <block pos:line="12" pos:column="35">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">env<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <name pos:line="13" pos:column="11">buf1<pos:position pos:line="13" pos:column="15"/></name></expr>;<pos:position pos:line="13" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">variable<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="16">buf1<pos:position pos:line="14" pos:column="20"/></name></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">do_expand<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">&amp;&amp;<pos:position pos:line="16" pos:column="26"/></operator> <call><name pos:line="16" pos:column="19">strchr<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">variable<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="36">'%'<pos:position pos:line="16" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41"> <block pos:line="16" pos:column="42">{
    <comment type="block" pos:line="17" pos:column="5">/* buf2 == variable if not expanded */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">rc<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <call><name pos:line="18" pos:column="10">ExpandEnvironmentStringsA<pos:position pos:line="18" pos:column="35"/></name><argument_list pos:line="18" pos:column="35">(<argument><expr><name pos:line="18" pos:column="36">variable<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">buf2<pos:position pos:line="18" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="52">sizeof<argument_list pos:line="18" pos:column="58">(<argument><expr><name pos:line="18" pos:column="59">buf2<pos:position pos:line="18" pos:column="63"/></name></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><name pos:line="19" pos:column="8">rc<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">&gt;<pos:position pos:line="19" pos:column="15"/></operator> <literal type="number" pos:line="19" pos:column="13">0<pos:position pos:line="19" pos:column="14"/></literal> <operator pos:line="19" pos:column="15">&amp;&amp;<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="18">rc<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">&lt;<pos:position pos:line="19" pos:column="25"/></operator> <sizeof pos:line="19" pos:column="23">sizeof<argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">buf2<pos:position pos:line="19" pos:column="34"/></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></sizeof> <operator pos:line="19" pos:column="36">&amp;&amp;<pos:position pos:line="19" pos:column="46"/></operator>
       <operator pos:line="20" pos:column="8">!<pos:position pos:line="20" pos:column="9"/></operator><call><name pos:line="20" pos:column="9">strchr<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">buf2<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="22">'%'<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27">    <comment type="block" pos:line="20" pos:column="31">/* no vars still unexpanded */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">env<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <name pos:line="21" pos:column="13">buf2<pos:position pos:line="21" pos:column="17"/></name></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt></block></then></if>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else<pos:position pos:line="23" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="24" pos:column="3">(<pos:position pos:line="24" pos:column="4"/></operator><name pos:line="24" pos:column="4">void<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">)<pos:position pos:line="24" pos:column="9"/></operator><name pos:line="24" pos:column="9">do_expand<pos:position pos:line="24" pos:column="18"/></name></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
  <comment type="block" pos:line="25" pos:column="3">/* no length control */</comment>
  <expr_stmt><expr><name pos:line="26" pos:column="3">env<pos:position pos:line="26" pos:column="6"/></name> <operator pos:line="26" pos:column="7">=<pos:position pos:line="26" pos:column="8"/></operator> <call><name pos:line="26" pos:column="9">getenv<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">variable<pos:position pos:line="26" pos:column="24"/></name></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="28" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="28" pos:column="10">(<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">env<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">&amp;&amp;<pos:position pos:line="28" pos:column="25"/></operator> <name><name pos:line="28" pos:column="18">env<pos:position pos:line="28" pos:column="21"/></name><index pos:line="28" pos:column="21">[<expr><literal type="number" pos:line="28" pos:column="22">0<pos:position pos:line="28" pos:column="23"/></literal></expr>]<pos:position pos:line="28" pos:column="24"/></index></name><operator pos:line="28" pos:column="24">)<pos:position pos:line="28" pos:column="25"/></operator></expr> ?<pos:position pos:line="28" pos:column="27"/></condition><then pos:line="28" pos:column="27"> <expr><call><name pos:line="28" pos:column="28">strdup<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">env<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr> <pos:position pos:line="28" pos:column="40"/></then><else pos:line="28" pos:column="40">: <expr><name pos:line="28" pos:column="42">NULL<pos:position pos:line="28" pos:column="46"/></name></expr></else></ternary></expr>;<pos:position pos:line="28" pos:column="47"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
