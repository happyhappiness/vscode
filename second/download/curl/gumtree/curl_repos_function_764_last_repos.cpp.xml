<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_764_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">juggle<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">curl_socket_t<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">sockfdp<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="2" pos:column="20">curl_socket_t<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">listenfd<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
                   <parameter><decl><type><name><name pos:line="3" pos:column="20">enum<pos:position pos:line="3" pos:column="24"/></name> <name pos:line="3" pos:column="25">sockmode<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">mode<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="40"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">timeval<pos:position pos:line="5" pos:column="17"/></name></name></type> <name pos:line="5" pos:column="18">timeout<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">fd_set<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">fds_read<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">fd_set<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">fds_write<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">fd_set<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">fds_err<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">curl_socket_t<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">sockfd<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><name pos:line="9" pos:column="26">CURL_SOCKET_BAD<pos:position pos:line="9" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">maxfd<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><operator pos:line="10" pos:column="15">-<pos:position pos:line="10" pos:column="16"/></operator><literal type="number" pos:line="10" pos:column="16">99<pos:position pos:line="10" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">ssize_t<pos:position pos:line="11" pos:column="10"/></name></type> <name pos:line="11" pos:column="11">rc<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">ssize_t<pos:position pos:line="12" pos:column="10"/></name></type> <name pos:line="12" pos:column="11">nread_socket<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">ssize_t<pos:position pos:line="13" pos:column="10"/></name></type> <name pos:line="13" pos:column="11">bytes_written<pos:position pos:line="13" pos:column="24"/></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">ssize_t<pos:position pos:line="14" pos:column="10"/></name></type> <name pos:line="14" pos:column="11">buffer_len<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">error<pos:position pos:line="15" pos:column="12"/></name> <init pos:line="15" pos:column="13">= <expr><literal type="number" pos:line="15" pos:column="15">0<pos:position pos:line="15" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="17"/></decl_stmt>

 <comment type="block" pos:line="17" pos:column="2">/* 'buffer' is this excessively large only to be able to support things like
    test 1003 which tests exceedingly large server response lines */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">unsigned<pos:position pos:line="19" pos:column="11"/></name> <name pos:line="19" pos:column="12">char<pos:position pos:line="19" pos:column="16"/></name></type> <name><name pos:line="19" pos:column="17">buffer<pos:position pos:line="19" pos:column="23"/></name><index pos:line="19" pos:column="23">[<expr><literal type="number" pos:line="19" pos:column="24">17010<pos:position pos:line="19" pos:column="29"/></literal></expr>]<pos:position pos:line="19" pos:column="30"/></index></name></decl>;<pos:position pos:line="19" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name></type> <name><name pos:line="20" pos:column="8">data<pos:position pos:line="20" pos:column="12"/></name><index pos:line="20" pos:column="12">[<expr><literal type="number" pos:line="20" pos:column="13">16<pos:position pos:line="20" pos:column="15"/></literal></expr>]<pos:position pos:line="20" pos:column="16"/></index></name></decl>;<pos:position pos:line="20" pos:column="17"/></decl_stmt>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">got_exit_signal<pos:position pos:line="22" pos:column="21"/></name></expr>)<pos:position pos:line="22" pos:column="22"/></condition><then pos:line="22" pos:column="22"> <block pos:line="22" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">logmsg<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="string" pos:line="23" pos:column="12">"signalled to die, exiting..."<pos:position pos:line="23" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">FALSE<pos:position pos:line="24" pos:column="17"/></name></expr>;<pos:position pos:line="24" pos:column="18"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">HAVE_GETPPID<pos:position pos:line="27" pos:column="20"/></name></cpp:ifdef>
  <comment type="block" pos:line="28" pos:column="3">/* As a last resort, quit if sockfilt process becomes orphan. Just in case
     parent ftpserver process has died without killing its sockfilt children */</comment>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><call><name pos:line="30" pos:column="6">getppid<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">()<pos:position pos:line="30" pos:column="15"/></argument_list></call> <operator pos:line="30" pos:column="16">&lt;=<pos:position pos:line="30" pos:column="21"/></operator> <literal type="number" pos:line="30" pos:column="19">1<pos:position pos:line="30" pos:column="20"/></literal></expr>)<pos:position pos:line="30" pos:column="21"/></condition><then pos:line="30" pos:column="21"> <block pos:line="30" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">logmsg<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><literal type="string" pos:line="31" pos:column="12">"process becomes orphan, exiting"<pos:position pos:line="31" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">FALSE<pos:position pos:line="32" pos:column="17"/></name></expr>;<pos:position pos:line="32" pos:column="18"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name pos:line="36" pos:column="3">timeout<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">.<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">tv_sec<pos:position pos:line="36" pos:column="17"/></name></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <literal type="number" pos:line="36" pos:column="20">120<pos:position pos:line="36" pos:column="23"/></literal></expr>;<pos:position pos:line="36" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">timeout<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">.<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">tv_usec<pos:position pos:line="37" pos:column="18"/></name></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <literal type="number" pos:line="37" pos:column="21">0<pos:position pos:line="37" pos:column="22"/></literal></expr>;<pos:position pos:line="37" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="39" pos:column="3">FD_ZERO<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(<argument><expr><operator pos:line="39" pos:column="11">&amp;<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="12">fds_read<pos:position pos:line="39" pos:column="20"/></name></expr></argument>)<pos:position pos:line="39" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">FD_ZERO<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><operator pos:line="40" pos:column="11">&amp;<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="12">fds_write<pos:position pos:line="40" pos:column="21"/></name></expr></argument>)<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">FD_ZERO<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><operator pos:line="41" pos:column="11">&amp;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="12">fds_err<pos:position pos:line="41" pos:column="19"/></name></expr></argument>)<pos:position pos:line="41" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="43" pos:column="3">FD_SET<pos:position pos:line="43" pos:column="9"/></name><argument_list pos:line="43" pos:column="9">(<argument><expr><operator pos:line="43" pos:column="10">(<pos:position pos:line="43" pos:column="11"/></operator><name pos:line="43" pos:column="11">curl_socket_t<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">)<pos:position pos:line="43" pos:column="25"/></operator><call><name pos:line="43" pos:column="25">fileno<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">stdin<pos:position pos:line="43" pos:column="37"/></name></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="43" pos:column="40">&amp;<pos:position pos:line="43" pos:column="45"/></operator><name pos:line="43" pos:column="41">fds_read<pos:position pos:line="43" pos:column="49"/></name></expr></argument>)<pos:position pos:line="43" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="51"/></expr_stmt>

  <switch pos:line="45" pos:column="3">switch<condition pos:line="45" pos:column="9">(<expr><operator pos:line="45" pos:column="10">*<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">mode<pos:position pos:line="45" pos:column="15"/></name></expr>)<pos:position pos:line="45" pos:column="16"/></condition> <block pos:line="45" pos:column="17">{

  <case pos:line="47" pos:column="3">case <expr><name pos:line="47" pos:column="8">PASSIVE_LISTEN<pos:position pos:line="47" pos:column="22"/></name></expr>:<pos:position pos:line="47" pos:column="23"/></case>

    <comment type="block" pos:line="49" pos:column="5">/* server mode */</comment>
    <expr_stmt><expr><name pos:line="50" pos:column="5">sockfd<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <name pos:line="50" pos:column="14">listenfd<pos:position pos:line="50" pos:column="22"/></name></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
    <comment type="block" pos:line="51" pos:column="5">/* there's always a socket to wait for */</comment>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">FD_SET<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name pos:line="52" pos:column="12">sockfd<pos:position pos:line="52" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="20">&amp;<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="21">fds_read<pos:position pos:line="52" pos:column="29"/></name></expr></argument>)<pos:position pos:line="52" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="53" pos:column="5">maxfd<pos:position pos:line="53" pos:column="10"/></name> <operator pos:line="53" pos:column="11">=<pos:position pos:line="53" pos:column="12"/></operator> <operator pos:line="53" pos:column="13">(<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">int<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">)<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="18">sockfd<pos:position pos:line="53" pos:column="24"/></name></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>
    <break pos:line="54" pos:column="5">break;<pos:position pos:line="54" pos:column="11"/></break>

  <case pos:line="56" pos:column="3">case <expr><name pos:line="56" pos:column="8">PASSIVE_CONNECT<pos:position pos:line="56" pos:column="23"/></name></expr>:<pos:position pos:line="56" pos:column="24"/></case>

    <expr_stmt><expr><name pos:line="58" pos:column="5">sockfd<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">=<pos:position pos:line="58" pos:column="13"/></operator> <operator pos:line="58" pos:column="14">*<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="15">sockfdp<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>
    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">(<expr><name pos:line="59" pos:column="8">CURL_SOCKET_BAD<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">==<pos:position pos:line="59" pos:column="26"/></operator> <name pos:line="59" pos:column="27">sockfd<pos:position pos:line="59" pos:column="33"/></name></expr>)<pos:position pos:line="59" pos:column="34"/></condition><then pos:line="59" pos:column="34"> <block pos:line="59" pos:column="35">{
      <comment type="block" pos:line="60" pos:column="7">/* eeek, we are supposedly connected and then this cannot be -1 ! */</comment>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">logmsg<pos:position pos:line="61" pos:column="13"/></name><argument_list pos:line="61" pos:column="13">(<argument><expr><literal type="string" pos:line="61" pos:column="14">"socket is -1! on %s:%d"<pos:position pos:line="61" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="40">__FILE__<pos:position pos:line="61" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="50">__LINE__<pos:position pos:line="61" pos:column="58"/></name></expr></argument>)<pos:position pos:line="61" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><name pos:line="62" pos:column="7">maxfd<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <literal type="number" pos:line="62" pos:column="15">0<pos:position pos:line="62" pos:column="16"/></literal></expr>;<pos:position pos:line="62" pos:column="17"/></expr_stmt> <comment type="block" pos:line="62" pos:column="18">/* stdin */</comment>
    }<pos:position pos:line="63" pos:column="6"/></block></then>
    <else pos:line="64" pos:column="5">else <block pos:line="64" pos:column="10">{
      <comment type="block" pos:line="65" pos:column="7">/* there's always a socket to wait for */</comment>
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">FD_SET<pos:position pos:line="66" pos:column="13"/></name><argument_list pos:line="66" pos:column="13">(<argument><expr><name pos:line="66" pos:column="14">sockfd<pos:position pos:line="66" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="22">&amp;<pos:position pos:line="66" pos:column="27"/></operator><name pos:line="66" pos:column="23">fds_read<pos:position pos:line="66" pos:column="31"/></name></expr></argument>)<pos:position pos:line="66" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
<cpp:ifdef pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">ifdef<pos:position pos:line="67" pos:column="7"/></cpp:directive> <name pos:line="67" pos:column="8">USE_WINSOCK<pos:position pos:line="67" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="68" pos:column="7">FD_SET<pos:position pos:line="68" pos:column="13"/></name><argument_list pos:line="68" pos:column="13">(<argument><expr><name pos:line="68" pos:column="14">sockfd<pos:position pos:line="68" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="22">&amp;<pos:position pos:line="68" pos:column="27"/></operator><name pos:line="68" pos:column="23">fds_err<pos:position pos:line="68" pos:column="30"/></name></expr></argument>)<pos:position pos:line="68" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="70" pos:column="7">maxfd<pos:position pos:line="70" pos:column="12"/></name> <operator pos:line="70" pos:column="13">=<pos:position pos:line="70" pos:column="14"/></operator> <operator pos:line="70" pos:column="15">(<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">int<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">)<pos:position pos:line="70" pos:column="20"/></operator><name pos:line="70" pos:column="20">sockfd<pos:position pos:line="70" pos:column="26"/></name></expr>;<pos:position pos:line="70" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></else></if>
    <break pos:line="72" pos:column="5">break;<pos:position pos:line="72" pos:column="11"/></break>

  <case pos:line="74" pos:column="3">case <expr><name pos:line="74" pos:column="8">ACTIVE<pos:position pos:line="74" pos:column="14"/></name></expr>:<pos:position pos:line="74" pos:column="15"/></case>

    <expr_stmt><expr><name pos:line="76" pos:column="5">sockfd<pos:position pos:line="76" pos:column="11"/></name> <operator pos:line="76" pos:column="12">=<pos:position pos:line="76" pos:column="13"/></operator> <operator pos:line="76" pos:column="14">*<pos:position pos:line="76" pos:column="15"/></operator><name pos:line="76" pos:column="15">sockfdp<pos:position pos:line="76" pos:column="22"/></name></expr>;<pos:position pos:line="76" pos:column="23"/></expr_stmt>
    <comment type="block" pos:line="77" pos:column="5">/* sockfd turns CURL_SOCKET_BAD when our connection has been closed */</comment>
    <if pos:line="78" pos:column="5">if<condition pos:line="78" pos:column="7">(<expr><name pos:line="78" pos:column="8">CURL_SOCKET_BAD<pos:position pos:line="78" pos:column="23"/></name> <operator pos:line="78" pos:column="24">!=<pos:position pos:line="78" pos:column="26"/></operator> <name pos:line="78" pos:column="27">sockfd<pos:position pos:line="78" pos:column="33"/></name></expr>)<pos:position pos:line="78" pos:column="34"/></condition><then pos:line="78" pos:column="34"> <block pos:line="78" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="79" pos:column="7">FD_SET<pos:position pos:line="79" pos:column="13"/></name><argument_list pos:line="79" pos:column="13">(<argument><expr><name pos:line="79" pos:column="14">sockfd<pos:position pos:line="79" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="22">&amp;<pos:position pos:line="79" pos:column="27"/></operator><name pos:line="79" pos:column="23">fds_read<pos:position pos:line="79" pos:column="31"/></name></expr></argument>)<pos:position pos:line="79" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="33"/></expr_stmt>
<cpp:ifdef pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">ifdef<pos:position pos:line="80" pos:column="7"/></cpp:directive> <name pos:line="80" pos:column="8">USE_WINSOCK<pos:position pos:line="80" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="81" pos:column="7">FD_SET<pos:position pos:line="81" pos:column="13"/></name><argument_list pos:line="81" pos:column="13">(<argument><expr><name pos:line="81" pos:column="14">sockfd<pos:position pos:line="81" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="22">&amp;<pos:position pos:line="81" pos:column="27"/></operator><name pos:line="81" pos:column="23">fds_err<pos:position pos:line="81" pos:column="30"/></name></expr></argument>)<pos:position pos:line="81" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="83" pos:column="7">maxfd<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">=<pos:position pos:line="83" pos:column="14"/></operator> <operator pos:line="83" pos:column="15">(<pos:position pos:line="83" pos:column="16"/></operator><name pos:line="83" pos:column="16">int<pos:position pos:line="83" pos:column="19"/></name><operator pos:line="83" pos:column="19">)<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="20">sockfd<pos:position pos:line="83" pos:column="26"/></name></expr>;<pos:position pos:line="83" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></then>
    <else pos:line="85" pos:column="5">else <block pos:line="85" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">logmsg<pos:position pos:line="86" pos:column="13"/></name><argument_list pos:line="86" pos:column="13">(<argument><expr><literal type="string" pos:line="86" pos:column="14">"No socket to read on"<pos:position pos:line="86" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="87" pos:column="7">maxfd<pos:position pos:line="87" pos:column="12"/></name> <operator pos:line="87" pos:column="13">=<pos:position pos:line="87" pos:column="14"/></operator> <literal type="number" pos:line="87" pos:column="15">0<pos:position pos:line="87" pos:column="16"/></literal></expr>;<pos:position pos:line="87" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></else></if>
    <break pos:line="89" pos:column="5">break;<pos:position pos:line="89" pos:column="11"/></break>

  <case pos:line="91" pos:column="3">case <expr><name pos:line="91" pos:column="8">ACTIVE_DISCONNECT<pos:position pos:line="91" pos:column="25"/></name></expr>:<pos:position pos:line="91" pos:column="26"/></case>

    <expr_stmt><expr><call><name pos:line="93" pos:column="5">logmsg<pos:position pos:line="93" pos:column="11"/></name><argument_list pos:line="93" pos:column="11">(<argument><expr><literal type="string" pos:line="93" pos:column="12">"disconnected, no socket to read on"<pos:position pos:line="93" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="94" pos:column="5">maxfd<pos:position pos:line="94" pos:column="10"/></name> <operator pos:line="94" pos:column="11">=<pos:position pos:line="94" pos:column="12"/></operator> <literal type="number" pos:line="94" pos:column="13">0<pos:position pos:line="94" pos:column="14"/></literal></expr>;<pos:position pos:line="94" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="95" pos:column="5">sockfd<pos:position pos:line="95" pos:column="11"/></name> <operator pos:line="95" pos:column="12">=<pos:position pos:line="95" pos:column="13"/></operator> <name pos:line="95" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="95" pos:column="29"/></name></expr>;<pos:position pos:line="95" pos:column="30"/></expr_stmt>
    <break pos:line="96" pos:column="5">break;<pos:position pos:line="96" pos:column="11"/></break>

  }<pos:position pos:line="98" pos:column="4"/></block></switch> <comment type="block" pos:line="98" pos:column="5">/* switch(*mode) */</comment>


  <do pos:line="101" pos:column="3">do <block pos:line="101" pos:column="6">{

    <comment type="block" pos:line="103" pos:column="5">/* select() blocking behavior call on blocking descriptors please */</comment>

    <expr_stmt><expr><name pos:line="105" pos:column="5">rc<pos:position pos:line="105" pos:column="7"/></name> <operator pos:line="105" pos:column="8">=<pos:position pos:line="105" pos:column="9"/></operator> <call><name pos:line="105" pos:column="10">select<pos:position pos:line="105" pos:column="16"/></name><argument_list pos:line="105" pos:column="16">(<argument><expr><name pos:line="105" pos:column="17">maxfd<pos:position pos:line="105" pos:column="22"/></name> <operator pos:line="105" pos:column="23">+<pos:position pos:line="105" pos:column="24"/></operator> <literal type="number" pos:line="105" pos:column="25">1<pos:position pos:line="105" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="105" pos:column="28">&amp;<pos:position pos:line="105" pos:column="33"/></operator><name pos:line="105" pos:column="29">fds_read<pos:position pos:line="105" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="39">&amp;<pos:position pos:line="105" pos:column="44"/></operator><name pos:line="105" pos:column="40">fds_write<pos:position pos:line="105" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="51">&amp;<pos:position pos:line="105" pos:column="56"/></operator><name pos:line="105" pos:column="52">fds_err<pos:position pos:line="105" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="61">&amp;<pos:position pos:line="105" pos:column="66"/></operator><name pos:line="105" pos:column="62">timeout<pos:position pos:line="105" pos:column="69"/></name></expr></argument>)<pos:position pos:line="105" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="71"/></expr_stmt>

    <if pos:line="107" pos:column="5">if<condition pos:line="107" pos:column="7">(<expr><name pos:line="107" pos:column="8">got_exit_signal<pos:position pos:line="107" pos:column="23"/></name></expr>)<pos:position pos:line="107" pos:column="24"/></condition><then pos:line="107" pos:column="24"> <block pos:line="107" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="108" pos:column="7">logmsg<pos:position pos:line="108" pos:column="13"/></name><argument_list pos:line="108" pos:column="13">(<argument><expr><literal type="string" pos:line="108" pos:column="14">"signalled to die, exiting..."<pos:position pos:line="108" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="46"/></expr_stmt>
      <return pos:line="109" pos:column="7">return <expr><name pos:line="109" pos:column="14">FALSE<pos:position pos:line="109" pos:column="19"/></name></expr>;<pos:position pos:line="109" pos:column="20"/></return>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if>

  }<pos:position pos:line="112" pos:column="4"/></block> while<condition pos:line="112" pos:column="10">(<expr><operator pos:line="112" pos:column="11">(<pos:position pos:line="112" pos:column="12"/></operator><name pos:line="112" pos:column="12">rc<pos:position pos:line="112" pos:column="14"/></name> <operator pos:line="112" pos:column="15">==<pos:position pos:line="112" pos:column="17"/></operator> <operator pos:line="112" pos:column="18">-<pos:position pos:line="112" pos:column="19"/></operator><literal type="number" pos:line="112" pos:column="19">1<pos:position pos:line="112" pos:column="20"/></literal><operator pos:line="112" pos:column="20">)<pos:position pos:line="112" pos:column="21"/></operator> <operator pos:line="112" pos:column="22">&amp;&amp;<pos:position pos:line="112" pos:column="32"/></operator> <operator pos:line="112" pos:column="25">(<pos:position pos:line="112" pos:column="26"/></operator><operator pos:line="112" pos:column="26">(<pos:position pos:line="112" pos:column="27"/></operator><name pos:line="112" pos:column="27">error<pos:position pos:line="112" pos:column="32"/></name> <operator pos:line="112" pos:column="33">=<pos:position pos:line="112" pos:column="34"/></operator> <name pos:line="112" pos:column="35">errno<pos:position pos:line="112" pos:column="40"/></name><operator pos:line="112" pos:column="40">)<pos:position pos:line="112" pos:column="41"/></operator> <operator pos:line="112" pos:column="42">==<pos:position pos:line="112" pos:column="44"/></operator> <name pos:line="112" pos:column="45">EINTR<pos:position pos:line="112" pos:column="50"/></name><operator pos:line="112" pos:column="50">)<pos:position pos:line="112" pos:column="51"/></operator></expr>)<pos:position pos:line="112" pos:column="52"/></condition>;<pos:position pos:line="112" pos:column="53"/></do>

  <if pos:line="114" pos:column="3">if<condition pos:line="114" pos:column="5">(<expr><name pos:line="114" pos:column="6">rc<pos:position pos:line="114" pos:column="8"/></name> <operator pos:line="114" pos:column="9">&lt;<pos:position pos:line="114" pos:column="13"/></operator> <literal type="number" pos:line="114" pos:column="11">0<pos:position pos:line="114" pos:column="12"/></literal></expr>)<pos:position pos:line="114" pos:column="13"/></condition><then pos:line="114" pos:column="13"> <block pos:line="114" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="115" pos:column="5">logmsg<pos:position pos:line="115" pos:column="11"/></name><argument_list pos:line="115" pos:column="11">(<argument><expr><literal type="string" pos:line="115" pos:column="12">"select() failed with error: (%d) %s"<pos:position pos:line="115" pos:column="49"/></literal></expr></argument>,
           <argument><expr><name pos:line="116" pos:column="12">error<pos:position pos:line="116" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="116" pos:column="19">strerror<pos:position pos:line="116" pos:column="27"/></name><argument_list pos:line="116" pos:column="27">(<argument><expr><name pos:line="116" pos:column="28">error<pos:position pos:line="116" pos:column="33"/></name></expr></argument>)<pos:position pos:line="116" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="116" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="36"/></expr_stmt>
    <return pos:line="117" pos:column="5">return <expr><name pos:line="117" pos:column="12">FALSE<pos:position pos:line="117" pos:column="17"/></name></expr>;<pos:position pos:line="117" pos:column="18"/></return>
  }<pos:position pos:line="118" pos:column="4"/></block></then></if>

  <if pos:line="120" pos:column="3">if<condition pos:line="120" pos:column="5">(<expr><name pos:line="120" pos:column="6">rc<pos:position pos:line="120" pos:column="8"/></name> <operator pos:line="120" pos:column="9">==<pos:position pos:line="120" pos:column="11"/></operator> <literal type="number" pos:line="120" pos:column="12">0<pos:position pos:line="120" pos:column="13"/></literal></expr>)<pos:position pos:line="120" pos:column="14"/></condition><then pos:line="120" pos:column="14">
    <comment type="block" pos:line="121" pos:column="5">/* timeout */</comment>
    <block type="pseudo"><return pos:line="122" pos:column="5">return <expr><name pos:line="122" pos:column="12">TRUE<pos:position pos:line="122" pos:column="16"/></name></expr>;<pos:position pos:line="122" pos:column="17"/></return></block></then></if>


  <if pos:line="125" pos:column="3">if<condition pos:line="125" pos:column="5">(<expr><call><name pos:line="125" pos:column="6">FD_ISSET<pos:position pos:line="125" pos:column="14"/></name><argument_list pos:line="125" pos:column="14">(<argument><expr><call><name pos:line="125" pos:column="15">fileno<pos:position pos:line="125" pos:column="21"/></name><argument_list pos:line="125" pos:column="21">(<argument><expr><name pos:line="125" pos:column="22">stdin<pos:position pos:line="125" pos:column="27"/></name></expr></argument>)<pos:position pos:line="125" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="125" pos:column="30">&amp;<pos:position pos:line="125" pos:column="35"/></operator><name pos:line="125" pos:column="31">fds_read<pos:position pos:line="125" pos:column="39"/></name></expr></argument>)<pos:position pos:line="125" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="41"/></condition><then pos:line="125" pos:column="41"> <block pos:line="125" pos:column="42">{
    <comment type="block" pos:line="126" pos:column="5">/* read from stdin, commands/data to be dealt with and possibly passed on
       to the socket

       protocol:

       4 letter command + LF [mandatory]

       4-digit hexadecimal data length + LF [if the command takes data]
       data                       [the data being as long as set above]

       Commands:

       DATA - plain pass-thru data
    */</comment>

    <if pos:line="141" pos:column="5">if<condition pos:line="141" pos:column="7">(<expr><operator pos:line="141" pos:column="8">!<pos:position pos:line="141" pos:column="9"/></operator><call><name pos:line="141" pos:column="9">read_stdin<pos:position pos:line="141" pos:column="19"/></name><argument_list pos:line="141" pos:column="19">(<argument><expr><name pos:line="141" pos:column="20">buffer<pos:position pos:line="141" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="141" pos:column="28">5<pos:position pos:line="141" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="141" pos:column="31"/></condition><then pos:line="141" pos:column="31">
      <block type="pseudo"><return pos:line="142" pos:column="7">return <expr><name pos:line="142" pos:column="14">FALSE<pos:position pos:line="142" pos:column="19"/></name></expr>;<pos:position pos:line="142" pos:column="20"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="144" pos:column="5">logmsg<pos:position pos:line="144" pos:column="11"/></name><argument_list pos:line="144" pos:column="11">(<argument><expr><literal type="string" pos:line="144" pos:column="12">"Received %c%c%c%c (on stdin)"<pos:position pos:line="144" pos:column="42"/></literal></expr></argument>,
           <argument><expr><name><name pos:line="145" pos:column="12">buffer<pos:position pos:line="145" pos:column="18"/></name><index pos:line="145" pos:column="18">[<expr><literal type="number" pos:line="145" pos:column="19">0<pos:position pos:line="145" pos:column="20"/></literal></expr>]<pos:position pos:line="145" pos:column="21"/></index></name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="23">buffer<pos:position pos:line="145" pos:column="29"/></name><index pos:line="145" pos:column="29">[<expr><literal type="number" pos:line="145" pos:column="30">1<pos:position pos:line="145" pos:column="31"/></literal></expr>]<pos:position pos:line="145" pos:column="32"/></index></name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="34">buffer<pos:position pos:line="145" pos:column="40"/></name><index pos:line="145" pos:column="40">[<expr><literal type="number" pos:line="145" pos:column="41">2<pos:position pos:line="145" pos:column="42"/></literal></expr>]<pos:position pos:line="145" pos:column="43"/></index></name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="45">buffer<pos:position pos:line="145" pos:column="51"/></name><index pos:line="145" pos:column="51">[<expr><literal type="number" pos:line="145" pos:column="52">3<pos:position pos:line="145" pos:column="53"/></literal></expr>]<pos:position pos:line="145" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="145" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="56"/></expr_stmt>

    <if pos:line="147" pos:column="5">if<condition pos:line="147" pos:column="7">(<expr><operator pos:line="147" pos:column="8">!<pos:position pos:line="147" pos:column="9"/></operator><call><name pos:line="147" pos:column="9">memcmp<pos:position pos:line="147" pos:column="15"/></name><argument_list pos:line="147" pos:column="15">(<argument><expr><literal type="string" pos:line="147" pos:column="16">"PING"<pos:position pos:line="147" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="147" pos:column="24">buffer<pos:position pos:line="147" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="147" pos:column="32">4<pos:position pos:line="147" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="35"/></condition><then pos:line="147" pos:column="35"> <block pos:line="147" pos:column="36">{
      <comment type="block" pos:line="148" pos:column="7">/* send reply on stdout, just proving we are alive */</comment>
      <if pos:line="149" pos:column="7">if<condition pos:line="149" pos:column="9">(<expr><operator pos:line="149" pos:column="10">!<pos:position pos:line="149" pos:column="11"/></operator><call><name pos:line="149" pos:column="11">write_stdout<pos:position pos:line="149" pos:column="23"/></name><argument_list pos:line="149" pos:column="23">(<argument><expr><literal type="string" pos:line="149" pos:column="24">"PONG\n"<pos:position pos:line="149" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="149" pos:column="34">5<pos:position pos:line="149" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="149" pos:column="37"/></condition><then pos:line="149" pos:column="37">
        <block type="pseudo"><return pos:line="150" pos:column="9">return <expr><name pos:line="150" pos:column="16">FALSE<pos:position pos:line="150" pos:column="21"/></name></expr>;<pos:position pos:line="150" pos:column="22"/></return></block></then></if>
    }<pos:position pos:line="151" pos:column="6"/></block></then>

    <elseif pos:line="153" pos:column="5">else <if pos:line="153" pos:column="10">if<condition pos:line="153" pos:column="12">(<expr><operator pos:line="153" pos:column="13">!<pos:position pos:line="153" pos:column="14"/></operator><call><name pos:line="153" pos:column="14">memcmp<pos:position pos:line="153" pos:column="20"/></name><argument_list pos:line="153" pos:column="20">(<argument><expr><literal type="string" pos:line="153" pos:column="21">"PORT"<pos:position pos:line="153" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="29">buffer<pos:position pos:line="153" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="153" pos:column="37">4<pos:position pos:line="153" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="153" pos:column="40"/></condition><then pos:line="153" pos:column="40"> <block pos:line="153" pos:column="41">{
      <comment type="block" pos:line="154" pos:column="7">/* Question asking us what PORT number we are listening to.
         Replies to PORT with "IPv[num]/[port]" */</comment>
      <expr_stmt><expr><call><name pos:line="156" pos:column="7">snprintf<pos:position pos:line="156" pos:column="15"/></name><argument_list pos:line="156" pos:column="15">(<argument><expr><operator pos:line="156" pos:column="16">(<pos:position pos:line="156" pos:column="17"/></operator><name pos:line="156" pos:column="17">char<pos:position pos:line="156" pos:column="21"/></name> <operator pos:line="156" pos:column="22">*<pos:position pos:line="156" pos:column="23"/></operator><operator pos:line="156" pos:column="23">)<pos:position pos:line="156" pos:column="24"/></operator><name pos:line="156" pos:column="24">buffer<pos:position pos:line="156" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="156" pos:column="32">sizeof<argument_list pos:line="156" pos:column="38">(<argument><expr><name pos:line="156" pos:column="39">buffer<pos:position pos:line="156" pos:column="45"/></name></expr></argument>)<pos:position pos:line="156" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="156" pos:column="48">"%s/%hu\n"<pos:position pos:line="156" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="60">ipv_inuse<pos:position pos:line="156" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="71">port<pos:position pos:line="156" pos:column="75"/></name></expr></argument>)<pos:position pos:line="156" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="77"/></expr_stmt>
      <expr_stmt><expr><name pos:line="157" pos:column="7">buffer_len<pos:position pos:line="157" pos:column="17"/></name> <operator pos:line="157" pos:column="18">=<pos:position pos:line="157" pos:column="19"/></operator> <operator pos:line="157" pos:column="20">(<pos:position pos:line="157" pos:column="21"/></operator><name pos:line="157" pos:column="21">ssize_t<pos:position pos:line="157" pos:column="28"/></name><operator pos:line="157" pos:column="28">)<pos:position pos:line="157" pos:column="29"/></operator><call><name pos:line="157" pos:column="29">strlen<pos:position pos:line="157" pos:column="35"/></name><argument_list pos:line="157" pos:column="35">(<argument><expr><operator pos:line="157" pos:column="36">(<pos:position pos:line="157" pos:column="37"/></operator><name pos:line="157" pos:column="37">char<pos:position pos:line="157" pos:column="41"/></name> <operator pos:line="157" pos:column="42">*<pos:position pos:line="157" pos:column="43"/></operator><operator pos:line="157" pos:column="43">)<pos:position pos:line="157" pos:column="44"/></operator><name pos:line="157" pos:column="44">buffer<pos:position pos:line="157" pos:column="50"/></name></expr></argument>)<pos:position pos:line="157" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="158" pos:column="7">snprintf<pos:position pos:line="158" pos:column="15"/></name><argument_list pos:line="158" pos:column="15">(<argument><expr><name pos:line="158" pos:column="16">data<pos:position pos:line="158" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="158" pos:column="22">sizeof<argument_list pos:line="158" pos:column="28">(<argument><expr><name pos:line="158" pos:column="29">data<pos:position pos:line="158" pos:column="33"/></name></expr></argument>)<pos:position pos:line="158" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="158" pos:column="36">"PORT\n%04zx\n"<pos:position pos:line="158" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="158" pos:column="53">buffer_len<pos:position pos:line="158" pos:column="63"/></name></expr></argument>)<pos:position pos:line="158" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="65"/></expr_stmt>
      <if pos:line="159" pos:column="7">if<condition pos:line="159" pos:column="9">(<expr><operator pos:line="159" pos:column="10">!<pos:position pos:line="159" pos:column="11"/></operator><call><name pos:line="159" pos:column="11">write_stdout<pos:position pos:line="159" pos:column="23"/></name><argument_list pos:line="159" pos:column="23">(<argument><expr><name pos:line="159" pos:column="24">data<pos:position pos:line="159" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="30">10<pos:position pos:line="159" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="159" pos:column="34"/></condition><then pos:line="159" pos:column="34">
        <block type="pseudo"><return pos:line="160" pos:column="9">return <expr><name pos:line="160" pos:column="16">FALSE<pos:position pos:line="160" pos:column="21"/></name></expr>;<pos:position pos:line="160" pos:column="22"/></return></block></then></if>
      <if pos:line="161" pos:column="7">if<condition pos:line="161" pos:column="9">(<expr><operator pos:line="161" pos:column="10">!<pos:position pos:line="161" pos:column="11"/></operator><call><name pos:line="161" pos:column="11">write_stdout<pos:position pos:line="161" pos:column="23"/></name><argument_list pos:line="161" pos:column="23">(<argument><expr><name pos:line="161" pos:column="24">buffer<pos:position pos:line="161" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="32">buffer_len<pos:position pos:line="161" pos:column="42"/></name></expr></argument>)<pos:position pos:line="161" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="161" pos:column="44"/></condition><then pos:line="161" pos:column="44">
        <block type="pseudo"><return pos:line="162" pos:column="9">return <expr><name pos:line="162" pos:column="16">FALSE<pos:position pos:line="162" pos:column="21"/></name></expr>;<pos:position pos:line="162" pos:column="22"/></return></block></then></if>
    }<pos:position pos:line="163" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="164" pos:column="5">else <if pos:line="164" pos:column="10">if<condition pos:line="164" pos:column="12">(<expr><operator pos:line="164" pos:column="13">!<pos:position pos:line="164" pos:column="14"/></operator><call><name pos:line="164" pos:column="14">memcmp<pos:position pos:line="164" pos:column="20"/></name><argument_list pos:line="164" pos:column="20">(<argument><expr><literal type="string" pos:line="164" pos:column="21">"QUIT"<pos:position pos:line="164" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="29">buffer<pos:position pos:line="164" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="164" pos:column="37">4<pos:position pos:line="164" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="164" pos:column="40"/></condition><then pos:line="164" pos:column="40"> <block pos:line="164" pos:column="41">{
      <comment type="block" pos:line="165" pos:column="7">/* just die */</comment>
      <expr_stmt><expr><call><name pos:line="166" pos:column="7">logmsg<pos:position pos:line="166" pos:column="13"/></name><argument_list pos:line="166" pos:column="13">(<argument><expr><literal type="string" pos:line="166" pos:column="14">"quits"<pos:position pos:line="166" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="23"/></expr_stmt>
      <return pos:line="167" pos:column="7">return <expr><name pos:line="167" pos:column="14">FALSE<pos:position pos:line="167" pos:column="19"/></name></expr>;<pos:position pos:line="167" pos:column="20"/></return>
    }<pos:position pos:line="168" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="169" pos:column="5">else <if pos:line="169" pos:column="10">if<condition pos:line="169" pos:column="12">(<expr><operator pos:line="169" pos:column="13">!<pos:position pos:line="169" pos:column="14"/></operator><call><name pos:line="169" pos:column="14">memcmp<pos:position pos:line="169" pos:column="20"/></name><argument_list pos:line="169" pos:column="20">(<argument><expr><literal type="string" pos:line="169" pos:column="21">"DATA"<pos:position pos:line="169" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="29">buffer<pos:position pos:line="169" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="169" pos:column="37">4<pos:position pos:line="169" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="169" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="169" pos:column="40"/></condition><then pos:line="169" pos:column="40"> <block pos:line="169" pos:column="41">{
      <comment type="block" pos:line="170" pos:column="7">/* data IN =&gt; data OUT */</comment>

      <if pos:line="172" pos:column="7">if<condition pos:line="172" pos:column="9">(<expr><operator pos:line="172" pos:column="10">!<pos:position pos:line="172" pos:column="11"/></operator><call><name pos:line="172" pos:column="11">read_stdin<pos:position pos:line="172" pos:column="21"/></name><argument_list pos:line="172" pos:column="21">(<argument><expr><name pos:line="172" pos:column="22">buffer<pos:position pos:line="172" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="172" pos:column="30">5<pos:position pos:line="172" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="172" pos:column="33"/></condition><then pos:line="172" pos:column="33">
        <block type="pseudo"><return pos:line="173" pos:column="9">return <expr><name pos:line="173" pos:column="16">FALSE<pos:position pos:line="173" pos:column="21"/></name></expr>;<pos:position pos:line="173" pos:column="22"/></return></block></then></if>

      <expr_stmt><expr><name><name pos:line="175" pos:column="7">buffer<pos:position pos:line="175" pos:column="13"/></name><index pos:line="175" pos:column="13">[<expr><literal type="number" pos:line="175" pos:column="14">5<pos:position pos:line="175" pos:column="15"/></literal></expr>]<pos:position pos:line="175" pos:column="16"/></index></name> <operator pos:line="175" pos:column="17">=<pos:position pos:line="175" pos:column="18"/></operator> <literal type="char" pos:line="175" pos:column="19">'\0'<pos:position pos:line="175" pos:column="23"/></literal></expr>;<pos:position pos:line="175" pos:column="24"/></expr_stmt>

      <expr_stmt><expr><name pos:line="177" pos:column="7">buffer_len<pos:position pos:line="177" pos:column="17"/></name> <operator pos:line="177" pos:column="18">=<pos:position pos:line="177" pos:column="19"/></operator> <operator pos:line="177" pos:column="20">(<pos:position pos:line="177" pos:column="21"/></operator><name pos:line="177" pos:column="21">ssize_t<pos:position pos:line="177" pos:column="28"/></name><operator pos:line="177" pos:column="28">)<pos:position pos:line="177" pos:column="29"/></operator><call><name pos:line="177" pos:column="29">strtol<pos:position pos:line="177" pos:column="35"/></name><argument_list pos:line="177" pos:column="35">(<argument><expr><operator pos:line="177" pos:column="36">(<pos:position pos:line="177" pos:column="37"/></operator><name pos:line="177" pos:column="37">char<pos:position pos:line="177" pos:column="41"/></name> <operator pos:line="177" pos:column="42">*<pos:position pos:line="177" pos:column="43"/></operator><operator pos:line="177" pos:column="43">)<pos:position pos:line="177" pos:column="44"/></operator><name pos:line="177" pos:column="44">buffer<pos:position pos:line="177" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="52">NULL<pos:position pos:line="177" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="58">16<pos:position pos:line="177" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="62"/></expr_stmt>
      <if pos:line="178" pos:column="7">if<condition pos:line="178" pos:column="9">(<expr><name pos:line="178" pos:column="10">buffer_len<pos:position pos:line="178" pos:column="20"/></name> <operator pos:line="178" pos:column="21">&gt;<pos:position pos:line="178" pos:column="25"/></operator> <operator pos:line="178" pos:column="23">(<pos:position pos:line="178" pos:column="24"/></operator><name pos:line="178" pos:column="24">ssize_t<pos:position pos:line="178" pos:column="31"/></name><operator pos:line="178" pos:column="31">)<pos:position pos:line="178" pos:column="32"/></operator><sizeof pos:line="178" pos:column="32">sizeof<argument_list pos:line="178" pos:column="38">(<argument><expr><name pos:line="178" pos:column="39">buffer<pos:position pos:line="178" pos:column="45"/></name></expr></argument>)<pos:position pos:line="178" pos:column="46"/></argument_list></sizeof></expr>)<pos:position pos:line="178" pos:column="47"/></condition><then pos:line="178" pos:column="47"> <block pos:line="178" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="179" pos:column="9">logmsg<pos:position pos:line="179" pos:column="15"/></name><argument_list pos:line="179" pos:column="15">(<argument><expr><literal type="string" pos:line="179" pos:column="16">"ERROR: Buffer size (%zu bytes) too small for data size "<pos:position pos:line="179" pos:column="73"/></literal>
               <literal type="string" pos:line="180" pos:column="16">"(%zd bytes)"<pos:position pos:line="180" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="180" pos:column="31">sizeof<argument_list pos:line="180" pos:column="37">(<argument><expr><name pos:line="180" pos:column="38">buffer<pos:position pos:line="180" pos:column="44"/></name></expr></argument>)<pos:position pos:line="180" pos:column="45"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="180" pos:column="47">buffer_len<pos:position pos:line="180" pos:column="57"/></name></expr></argument>)<pos:position pos:line="180" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="59"/></expr_stmt>
        <return pos:line="181" pos:column="9">return <expr><name pos:line="181" pos:column="16">FALSE<pos:position pos:line="181" pos:column="21"/></name></expr>;<pos:position pos:line="181" pos:column="22"/></return>
      }<pos:position pos:line="182" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="183" pos:column="7">logmsg<pos:position pos:line="183" pos:column="13"/></name><argument_list pos:line="183" pos:column="13">(<argument><expr><literal type="string" pos:line="183" pos:column="14">"&gt; %zd bytes data, server =&gt; client"<pos:position pos:line="183" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="52">buffer_len<pos:position pos:line="183" pos:column="62"/></name></expr></argument>)<pos:position pos:line="183" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="64"/></expr_stmt>

      <if pos:line="185" pos:column="7">if<condition pos:line="185" pos:column="9">(<expr><operator pos:line="185" pos:column="10">!<pos:position pos:line="185" pos:column="11"/></operator><call><name pos:line="185" pos:column="11">read_stdin<pos:position pos:line="185" pos:column="21"/></name><argument_list pos:line="185" pos:column="21">(<argument><expr><name pos:line="185" pos:column="22">buffer<pos:position pos:line="185" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="30">buffer_len<pos:position pos:line="185" pos:column="40"/></name></expr></argument>)<pos:position pos:line="185" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="185" pos:column="42"/></condition><then pos:line="185" pos:column="42">
        <block type="pseudo"><return pos:line="186" pos:column="9">return <expr><name pos:line="186" pos:column="16">FALSE<pos:position pos:line="186" pos:column="21"/></name></expr>;<pos:position pos:line="186" pos:column="22"/></return></block></then></if>

      <expr_stmt><expr><call><name pos:line="188" pos:column="7">lograw<pos:position pos:line="188" pos:column="13"/></name><argument_list pos:line="188" pos:column="13">(<argument><expr><name pos:line="188" pos:column="14">buffer<pos:position pos:line="188" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="22">buffer_len<pos:position pos:line="188" pos:column="32"/></name></expr></argument>)<pos:position pos:line="188" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="34"/></expr_stmt>

      <if pos:line="190" pos:column="7">if<condition pos:line="190" pos:column="9">(<expr><operator pos:line="190" pos:column="10">*<pos:position pos:line="190" pos:column="11"/></operator><name pos:line="190" pos:column="11">mode<pos:position pos:line="190" pos:column="15"/></name> <operator pos:line="190" pos:column="16">==<pos:position pos:line="190" pos:column="18"/></operator> <name pos:line="190" pos:column="19">PASSIVE_LISTEN<pos:position pos:line="190" pos:column="33"/></name></expr>)<pos:position pos:line="190" pos:column="34"/></condition><then pos:line="190" pos:column="34"> <block pos:line="190" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="191" pos:column="9">logmsg<pos:position pos:line="191" pos:column="15"/></name><argument_list pos:line="191" pos:column="15">(<argument><expr><literal type="string" pos:line="191" pos:column="16">"*** We are disconnected!"<pos:position pos:line="191" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="44"/></expr_stmt>
        <if pos:line="192" pos:column="9">if<condition pos:line="192" pos:column="11">(<expr><operator pos:line="192" pos:column="12">!<pos:position pos:line="192" pos:column="13"/></operator><call><name pos:line="192" pos:column="13">write_stdout<pos:position pos:line="192" pos:column="25"/></name><argument_list pos:line="192" pos:column="25">(<argument><expr><literal type="string" pos:line="192" pos:column="26">"DISC\n"<pos:position pos:line="192" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="192" pos:column="36">5<pos:position pos:line="192" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="192" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="192" pos:column="39"/></condition><then pos:line="192" pos:column="39">
          <block type="pseudo"><return pos:line="193" pos:column="11">return <expr><name pos:line="193" pos:column="18">FALSE<pos:position pos:line="193" pos:column="23"/></name></expr>;<pos:position pos:line="193" pos:column="24"/></return></block></then></if>
      }<pos:position pos:line="194" pos:column="8"/></block></then>
      <else pos:line="195" pos:column="7">else <block pos:line="195" pos:column="12">{
        <comment type="block" pos:line="196" pos:column="9">/* send away on the socket */</comment>
        <expr_stmt><expr><name pos:line="197" pos:column="9">bytes_written<pos:position pos:line="197" pos:column="22"/></name> <operator pos:line="197" pos:column="23">=<pos:position pos:line="197" pos:column="24"/></operator> <call><name pos:line="197" pos:column="25">swrite<pos:position pos:line="197" pos:column="31"/></name><argument_list pos:line="197" pos:column="31">(<argument><expr><name pos:line="197" pos:column="32">sockfd<pos:position pos:line="197" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="40">buffer<pos:position pos:line="197" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="48">buffer_len<pos:position pos:line="197" pos:column="58"/></name></expr></argument>)<pos:position pos:line="197" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="60"/></expr_stmt>
        <if pos:line="198" pos:column="9">if<condition pos:line="198" pos:column="11">(<expr><name pos:line="198" pos:column="12">bytes_written<pos:position pos:line="198" pos:column="25"/></name> <operator pos:line="198" pos:column="26">!=<pos:position pos:line="198" pos:column="28"/></operator> <name pos:line="198" pos:column="29">buffer_len<pos:position pos:line="198" pos:column="39"/></name></expr>)<pos:position pos:line="198" pos:column="40"/></condition><then pos:line="198" pos:column="40"> <block pos:line="198" pos:column="41">{
          <expr_stmt><expr><call><name pos:line="199" pos:column="11">logmsg<pos:position pos:line="199" pos:column="17"/></name><argument_list pos:line="199" pos:column="17">(<argument><expr><literal type="string" pos:line="199" pos:column="18">"Not all data was sent. Bytes to send: %zd sent: %zd"<pos:position pos:line="199" pos:column="71"/></literal></expr></argument>,
                 <argument><expr><name pos:line="200" pos:column="18">buffer_len<pos:position pos:line="200" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="30">bytes_written<pos:position pos:line="200" pos:column="43"/></name></expr></argument>)<pos:position pos:line="200" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="201" pos:column="10"/></block></then></if>
      }<pos:position pos:line="202" pos:column="8"/></block></else></if>
    }<pos:position pos:line="203" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="204" pos:column="5">else <if pos:line="204" pos:column="10">if<condition pos:line="204" pos:column="12">(<expr><operator pos:line="204" pos:column="13">!<pos:position pos:line="204" pos:column="14"/></operator><call><name pos:line="204" pos:column="14">memcmp<pos:position pos:line="204" pos:column="20"/></name><argument_list pos:line="204" pos:column="20">(<argument><expr><literal type="string" pos:line="204" pos:column="21">"DISC"<pos:position pos:line="204" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="29">buffer<pos:position pos:line="204" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="204" pos:column="37">4<pos:position pos:line="204" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="204" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="204" pos:column="40"/></condition><then pos:line="204" pos:column="40"> <block pos:line="204" pos:column="41">{
      <comment type="block" pos:line="205" pos:column="7">/* disconnect! */</comment>
      <if pos:line="206" pos:column="7">if<condition pos:line="206" pos:column="9">(<expr><operator pos:line="206" pos:column="10">!<pos:position pos:line="206" pos:column="11"/></operator><call><name pos:line="206" pos:column="11">write_stdout<pos:position pos:line="206" pos:column="23"/></name><argument_list pos:line="206" pos:column="23">(<argument><expr><literal type="string" pos:line="206" pos:column="24">"DISC\n"<pos:position pos:line="206" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="206" pos:column="34">5<pos:position pos:line="206" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="206" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="206" pos:column="37"/></condition><then pos:line="206" pos:column="37">
        <block type="pseudo"><return pos:line="207" pos:column="9">return <expr><name pos:line="207" pos:column="16">FALSE<pos:position pos:line="207" pos:column="21"/></name></expr>;<pos:position pos:line="207" pos:column="22"/></return></block></then></if>
      <if pos:line="208" pos:column="7">if<condition pos:line="208" pos:column="9">(<expr><name pos:line="208" pos:column="10">sockfd<pos:position pos:line="208" pos:column="16"/></name> <operator pos:line="208" pos:column="17">!=<pos:position pos:line="208" pos:column="19"/></operator> <name pos:line="208" pos:column="20">CURL_SOCKET_BAD<pos:position pos:line="208" pos:column="35"/></name></expr>)<pos:position pos:line="208" pos:column="36"/></condition><then pos:line="208" pos:column="36"> <block pos:line="208" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="209" pos:column="9">logmsg<pos:position pos:line="209" pos:column="15"/></name><argument_list pos:line="209" pos:column="15">(<argument><expr><literal type="string" pos:line="209" pos:column="16">"====&gt; Client forcibly disconnected"<pos:position pos:line="209" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="209" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="210" pos:column="9">sclose<pos:position pos:line="210" pos:column="15"/></name><argument_list pos:line="210" pos:column="15">(<argument><expr><name pos:line="210" pos:column="16">sockfd<pos:position pos:line="210" pos:column="22"/></name></expr></argument>)<pos:position pos:line="210" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="211" pos:column="9">*<pos:position pos:line="211" pos:column="10"/></operator><name pos:line="211" pos:column="10">sockfdp<pos:position pos:line="211" pos:column="17"/></name> <operator pos:line="211" pos:column="18">=<pos:position pos:line="211" pos:column="19"/></operator> <name pos:line="211" pos:column="20">CURL_SOCKET_BAD<pos:position pos:line="211" pos:column="35"/></name></expr>;<pos:position pos:line="211" pos:column="36"/></expr_stmt>
        <if pos:line="212" pos:column="9">if<condition pos:line="212" pos:column="11">(<expr><operator pos:line="212" pos:column="12">*<pos:position pos:line="212" pos:column="13"/></operator><name pos:line="212" pos:column="13">mode<pos:position pos:line="212" pos:column="17"/></name> <operator pos:line="212" pos:column="18">==<pos:position pos:line="212" pos:column="20"/></operator> <name pos:line="212" pos:column="21">PASSIVE_CONNECT<pos:position pos:line="212" pos:column="36"/></name></expr>)<pos:position pos:line="212" pos:column="37"/></condition><then pos:line="212" pos:column="37">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="213" pos:column="11">*<pos:position pos:line="213" pos:column="12"/></operator><name pos:line="213" pos:column="12">mode<pos:position pos:line="213" pos:column="16"/></name> <operator pos:line="213" pos:column="17">=<pos:position pos:line="213" pos:column="18"/></operator> <name pos:line="213" pos:column="19">PASSIVE_LISTEN<pos:position pos:line="213" pos:column="33"/></name></expr>;<pos:position pos:line="213" pos:column="34"/></expr_stmt></block></then>
        <else pos:line="214" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><operator pos:line="215" pos:column="11">*<pos:position pos:line="215" pos:column="12"/></operator><name pos:line="215" pos:column="12">mode<pos:position pos:line="215" pos:column="16"/></name> <operator pos:line="215" pos:column="17">=<pos:position pos:line="215" pos:column="18"/></operator> <name pos:line="215" pos:column="19">ACTIVE_DISCONNECT<pos:position pos:line="215" pos:column="36"/></name></expr>;<pos:position pos:line="215" pos:column="37"/></expr_stmt></block></else></if>
      }<pos:position pos:line="216" pos:column="8"/></block></then>
      <else pos:line="217" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="218" pos:column="9">logmsg<pos:position pos:line="218" pos:column="15"/></name><argument_list pos:line="218" pos:column="15">(<argument><expr><literal type="string" pos:line="218" pos:column="16">"attempt to close already dead connection"<pos:position pos:line="218" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="218" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="60"/></expr_stmt></block></else></if>
      <return pos:line="219" pos:column="7">return <expr><name pos:line="219" pos:column="14">TRUE<pos:position pos:line="219" pos:column="18"/></name></expr>;<pos:position pos:line="219" pos:column="19"/></return>
    }<pos:position pos:line="220" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="221" pos:column="4"/></block></then></if>


  <if pos:line="224" pos:column="3">if<condition pos:line="224" pos:column="5">(<expr><operator pos:line="224" pos:column="6">(<pos:position pos:line="224" pos:column="7"/></operator><name pos:line="224" pos:column="7">sockfd<pos:position pos:line="224" pos:column="13"/></name> <operator pos:line="224" pos:column="14">!=<pos:position pos:line="224" pos:column="16"/></operator> <name pos:line="224" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="224" pos:column="32"/></name><operator pos:line="224" pos:column="32">)<pos:position pos:line="224" pos:column="33"/></operator> <operator pos:line="224" pos:column="34">&amp;&amp;<pos:position pos:line="224" pos:column="44"/></operator> <operator pos:line="224" pos:column="37">(<pos:position pos:line="224" pos:column="38"/></operator><call><name pos:line="224" pos:column="38">FD_ISSET<pos:position pos:line="224" pos:column="46"/></name><argument_list pos:line="224" pos:column="46">(<argument><expr><name pos:line="224" pos:column="47">sockfd<pos:position pos:line="224" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="224" pos:column="55">&amp;<pos:position pos:line="224" pos:column="60"/></operator><name pos:line="224" pos:column="56">fds_read<pos:position pos:line="224" pos:column="64"/></name></expr></argument>)<pos:position pos:line="224" pos:column="65"/></argument_list></call><operator pos:line="224" pos:column="65">)<pos:position pos:line="224" pos:column="66"/></operator></expr> )<pos:position pos:line="224" pos:column="68"/></condition><then pos:line="224" pos:column="68"> <block pos:line="224" pos:column="69">{

    <decl_stmt><decl><type><name pos:line="226" pos:column="5">curl_socket_t<pos:position pos:line="226" pos:column="18"/></name></type> <name pos:line="226" pos:column="19">newfd<pos:position pos:line="226" pos:column="24"/></name> <init pos:line="226" pos:column="25">= <expr><name pos:line="226" pos:column="27">CURL_SOCKET_BAD<pos:position pos:line="226" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="226" pos:column="43"/></decl_stmt> <comment type="block" pos:line="226" pos:column="44">/* newly accepted socket */</comment>

    <if pos:line="228" pos:column="5">if<condition pos:line="228" pos:column="7">(<expr><operator pos:line="228" pos:column="8">*<pos:position pos:line="228" pos:column="9"/></operator><name pos:line="228" pos:column="9">mode<pos:position pos:line="228" pos:column="13"/></name> <operator pos:line="228" pos:column="14">==<pos:position pos:line="228" pos:column="16"/></operator> <name pos:line="228" pos:column="17">PASSIVE_LISTEN<pos:position pos:line="228" pos:column="31"/></name></expr>)<pos:position pos:line="228" pos:column="32"/></condition><then pos:line="228" pos:column="32"> <block pos:line="228" pos:column="33">{
      <comment type="block" pos:line="229" pos:column="7">/* there's no stream set up yet, this is an indication that there's a
         client connecting. */</comment>
      <expr_stmt><expr><name pos:line="231" pos:column="7">newfd<pos:position pos:line="231" pos:column="12"/></name> <operator pos:line="231" pos:column="13">=<pos:position pos:line="231" pos:column="14"/></operator> <call><name pos:line="231" pos:column="15">accept<pos:position pos:line="231" pos:column="21"/></name><argument_list pos:line="231" pos:column="21">(<argument><expr><name pos:line="231" pos:column="22">sockfd<pos:position pos:line="231" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="231" pos:column="30">NULL<pos:position pos:line="231" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="231" pos:column="36">NULL<pos:position pos:line="231" pos:column="40"/></name></expr></argument>)<pos:position pos:line="231" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="42"/></expr_stmt>
      <if pos:line="232" pos:column="7">if<condition pos:line="232" pos:column="9">(<expr><name pos:line="232" pos:column="10">CURL_SOCKET_BAD<pos:position pos:line="232" pos:column="25"/></name> <operator pos:line="232" pos:column="26">==<pos:position pos:line="232" pos:column="28"/></operator> <name pos:line="232" pos:column="29">newfd<pos:position pos:line="232" pos:column="34"/></name></expr>)<pos:position pos:line="232" pos:column="35"/></condition><then pos:line="232" pos:column="35"> <block pos:line="232" pos:column="36">{
        <expr_stmt><expr><name pos:line="233" pos:column="9">error<pos:position pos:line="233" pos:column="14"/></name> <operator pos:line="233" pos:column="15">=<pos:position pos:line="233" pos:column="16"/></operator> <name pos:line="233" pos:column="17">SOCKERRNO<pos:position pos:line="233" pos:column="26"/></name></expr>;<pos:position pos:line="233" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="234" pos:column="9">logmsg<pos:position pos:line="234" pos:column="15"/></name><argument_list pos:line="234" pos:column="15">(<argument><expr><literal type="string" pos:line="234" pos:column="16">"accept(%d, NULL, NULL) failed with error: (%d) %s"<pos:position pos:line="234" pos:column="67"/></literal></expr></argument>,
               <argument><expr><name pos:line="235" pos:column="16">sockfd<pos:position pos:line="235" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="235" pos:column="24">error<pos:position pos:line="235" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="235" pos:column="31">strerror<pos:position pos:line="235" pos:column="39"/></name><argument_list pos:line="235" pos:column="39">(<argument><expr><name pos:line="235" pos:column="40">error<pos:position pos:line="235" pos:column="45"/></name></expr></argument>)<pos:position pos:line="235" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="235" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="236" pos:column="8"/></block></then>
      <else pos:line="237" pos:column="7">else <block pos:line="237" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="238" pos:column="9">logmsg<pos:position pos:line="238" pos:column="15"/></name><argument_list pos:line="238" pos:column="15">(<argument><expr><literal type="string" pos:line="238" pos:column="16">"====&gt; Client connect"<pos:position pos:line="238" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="238" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="40"/></expr_stmt>
        <if pos:line="239" pos:column="9">if<condition pos:line="239" pos:column="11">(<expr><operator pos:line="239" pos:column="12">!<pos:position pos:line="239" pos:column="13"/></operator><call><name pos:line="239" pos:column="13">write_stdout<pos:position pos:line="239" pos:column="25"/></name><argument_list pos:line="239" pos:column="25">(<argument><expr><literal type="string" pos:line="239" pos:column="26">"CNCT\n"<pos:position pos:line="239" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="239" pos:column="36">5<pos:position pos:line="239" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="239" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="239" pos:column="39"/></condition><then pos:line="239" pos:column="39">
          <block type="pseudo"><return pos:line="240" pos:column="11">return <expr><name pos:line="240" pos:column="18">FALSE<pos:position pos:line="240" pos:column="23"/></name></expr>;<pos:position pos:line="240" pos:column="24"/></return></block></then></if>
        <expr_stmt><expr><operator pos:line="241" pos:column="9">*<pos:position pos:line="241" pos:column="10"/></operator><name pos:line="241" pos:column="10">sockfdp<pos:position pos:line="241" pos:column="17"/></name> <operator pos:line="241" pos:column="18">=<pos:position pos:line="241" pos:column="19"/></operator> <name pos:line="241" pos:column="20">newfd<pos:position pos:line="241" pos:column="25"/></name></expr>;<pos:position pos:line="241" pos:column="26"/></expr_stmt> <comment type="block" pos:line="241" pos:column="27">/* store the new socket */</comment>
        <expr_stmt><expr><operator pos:line="242" pos:column="9">*<pos:position pos:line="242" pos:column="10"/></operator><name pos:line="242" pos:column="10">mode<pos:position pos:line="242" pos:column="14"/></name> <operator pos:line="242" pos:column="15">=<pos:position pos:line="242" pos:column="16"/></operator> <name pos:line="242" pos:column="17">PASSIVE_CONNECT<pos:position pos:line="242" pos:column="32"/></name></expr>;<pos:position pos:line="242" pos:column="33"/></expr_stmt> <comment type="block" pos:line="242" pos:column="34">/* we have connected */</comment>
      }<pos:position pos:line="243" pos:column="8"/></block></else></if>
      <return pos:line="244" pos:column="7">return <expr><name pos:line="244" pos:column="14">TRUE<pos:position pos:line="244" pos:column="18"/></name></expr>;<pos:position pos:line="244" pos:column="19"/></return>
    }<pos:position pos:line="245" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="247" pos:column="5">/* read from socket, pass on data to stdout */</comment>
    <expr_stmt><expr><name pos:line="248" pos:column="5">nread_socket<pos:position pos:line="248" pos:column="17"/></name> <operator pos:line="248" pos:column="18">=<pos:position pos:line="248" pos:column="19"/></operator> <call><name pos:line="248" pos:column="20">sread<pos:position pos:line="248" pos:column="25"/></name><argument_list pos:line="248" pos:column="25">(<argument><expr><name pos:line="248" pos:column="26">sockfd<pos:position pos:line="248" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="248" pos:column="34">buffer<pos:position pos:line="248" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="248" pos:column="42">sizeof<argument_list pos:line="248" pos:column="48">(<argument><expr><name pos:line="248" pos:column="49">buffer<pos:position pos:line="248" pos:column="55"/></name></expr></argument>)<pos:position pos:line="248" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="248" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="58"/></expr_stmt>

    <if pos:line="250" pos:column="5">if<condition pos:line="250" pos:column="7">(<expr><name pos:line="250" pos:column="8">nread_socket<pos:position pos:line="250" pos:column="20"/></name> <operator pos:line="250" pos:column="21">&gt;<pos:position pos:line="250" pos:column="25"/></operator> <literal type="number" pos:line="250" pos:column="23">0<pos:position pos:line="250" pos:column="24"/></literal></expr>)<pos:position pos:line="250" pos:column="25"/></condition><then pos:line="250" pos:column="25"> <block pos:line="250" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="251" pos:column="7">snprintf<pos:position pos:line="251" pos:column="15"/></name><argument_list pos:line="251" pos:column="15">(<argument><expr><name pos:line="251" pos:column="16">data<pos:position pos:line="251" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="251" pos:column="22">sizeof<argument_list pos:line="251" pos:column="28">(<argument><expr><name pos:line="251" pos:column="29">data<pos:position pos:line="251" pos:column="33"/></name></expr></argument>)<pos:position pos:line="251" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="251" pos:column="36">"DATA\n%04zx\n"<pos:position pos:line="251" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="251" pos:column="53">nread_socket<pos:position pos:line="251" pos:column="65"/></name></expr></argument>)<pos:position pos:line="251" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="67"/></expr_stmt>
      <if pos:line="252" pos:column="7">if<condition pos:line="252" pos:column="9">(<expr><operator pos:line="252" pos:column="10">!<pos:position pos:line="252" pos:column="11"/></operator><call><name pos:line="252" pos:column="11">write_stdout<pos:position pos:line="252" pos:column="23"/></name><argument_list pos:line="252" pos:column="23">(<argument><expr><name pos:line="252" pos:column="24">data<pos:position pos:line="252" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="252" pos:column="30">10<pos:position pos:line="252" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="252" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="252" pos:column="34"/></condition><then pos:line="252" pos:column="34">
        <block type="pseudo"><return pos:line="253" pos:column="9">return <expr><name pos:line="253" pos:column="16">FALSE<pos:position pos:line="253" pos:column="21"/></name></expr>;<pos:position pos:line="253" pos:column="22"/></return></block></then></if>
      <if pos:line="254" pos:column="7">if<condition pos:line="254" pos:column="9">(<expr><operator pos:line="254" pos:column="10">!<pos:position pos:line="254" pos:column="11"/></operator><call><name pos:line="254" pos:column="11">write_stdout<pos:position pos:line="254" pos:column="23"/></name><argument_list pos:line="254" pos:column="23">(<argument><expr><name pos:line="254" pos:column="24">buffer<pos:position pos:line="254" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="254" pos:column="32">nread_socket<pos:position pos:line="254" pos:column="44"/></name></expr></argument>)<pos:position pos:line="254" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="254" pos:column="46"/></condition><then pos:line="254" pos:column="46">
        <block type="pseudo"><return pos:line="255" pos:column="9">return <expr><name pos:line="255" pos:column="16">FALSE<pos:position pos:line="255" pos:column="21"/></name></expr>;<pos:position pos:line="255" pos:column="22"/></return></block></then></if>

      <expr_stmt><expr><call><name pos:line="257" pos:column="7">logmsg<pos:position pos:line="257" pos:column="13"/></name><argument_list pos:line="257" pos:column="13">(<argument><expr><literal type="string" pos:line="257" pos:column="14">"&lt; %zd bytes data, client =&gt; server"<pos:position pos:line="257" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="257" pos:column="52">nread_socket<pos:position pos:line="257" pos:column="64"/></name></expr></argument>)<pos:position pos:line="257" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="258" pos:column="7">lograw<pos:position pos:line="258" pos:column="13"/></name><argument_list pos:line="258" pos:column="13">(<argument><expr><name pos:line="258" pos:column="14">buffer<pos:position pos:line="258" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="258" pos:column="22">nread_socket<pos:position pos:line="258" pos:column="34"/></name></expr></argument>)<pos:position pos:line="258" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="259" pos:column="6"/></block></then></if>

    <if pos:line="261" pos:column="5">if<condition pos:line="261" pos:column="7">(<expr><name pos:line="261" pos:column="8">nread_socket<pos:position pos:line="261" pos:column="20"/></name> <operator pos:line="261" pos:column="21">&lt;=<pos:position pos:line="261" pos:column="26"/></operator> <literal type="number" pos:line="261" pos:column="24">0<pos:position pos:line="261" pos:column="25"/></literal>
<cpp:ifdef pos:line="262" pos:column="1">#<cpp:directive pos:line="262" pos:column="2">ifdef<pos:position pos:line="262" pos:column="7"/></cpp:directive> <name pos:line="262" pos:column="8">USE_WINSOCK<pos:position pos:line="262" pos:column="19"/></name></cpp:ifdef>
       <operator pos:line="263" pos:column="8">||<pos:position pos:line="263" pos:column="10"/></operator> <call><name pos:line="263" pos:column="11">FD_ISSET<pos:position pos:line="263" pos:column="19"/></name><argument_list pos:line="263" pos:column="19">(<argument><expr><name pos:line="263" pos:column="20">sockfd<pos:position pos:line="263" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="263" pos:column="28">&amp;<pos:position pos:line="263" pos:column="33"/></operator><name pos:line="263" pos:column="29">fds_err<pos:position pos:line="263" pos:column="36"/></name></expr></argument>)<pos:position pos:line="263" pos:column="37"/></argument_list></call></expr>
<cpp:endif pos:line="264" pos:column="1">#<cpp:directive pos:line="264" pos:column="2">endif<pos:position pos:line="264" pos:column="7"/></cpp:directive></cpp:endif>
       )<pos:position pos:line="265" pos:column="9"/></condition><then pos:line="265" pos:column="9"> <block pos:line="265" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="266" pos:column="7">logmsg<pos:position pos:line="266" pos:column="13"/></name><argument_list pos:line="266" pos:column="13">(<argument><expr><literal type="string" pos:line="266" pos:column="14">"====&gt; Client disconnect"<pos:position pos:line="266" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="266" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="266" pos:column="41"/></expr_stmt>
      <if pos:line="267" pos:column="7">if<condition pos:line="267" pos:column="9">(<expr><operator pos:line="267" pos:column="10">!<pos:position pos:line="267" pos:column="11"/></operator><call><name pos:line="267" pos:column="11">write_stdout<pos:position pos:line="267" pos:column="23"/></name><argument_list pos:line="267" pos:column="23">(<argument><expr><literal type="string" pos:line="267" pos:column="24">"DISC\n"<pos:position pos:line="267" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="267" pos:column="34">5<pos:position pos:line="267" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="267" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="267" pos:column="37"/></condition><then pos:line="267" pos:column="37">
        <block type="pseudo"><return pos:line="268" pos:column="9">return <expr><name pos:line="268" pos:column="16">FALSE<pos:position pos:line="268" pos:column="21"/></name></expr>;<pos:position pos:line="268" pos:column="22"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="269" pos:column="7">sclose<pos:position pos:line="269" pos:column="13"/></name><argument_list pos:line="269" pos:column="13">(<argument><expr><name pos:line="269" pos:column="14">sockfd<pos:position pos:line="269" pos:column="20"/></name></expr></argument>)<pos:position pos:line="269" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="270" pos:column="7">*<pos:position pos:line="270" pos:column="8"/></operator><name pos:line="270" pos:column="8">sockfdp<pos:position pos:line="270" pos:column="15"/></name> <operator pos:line="270" pos:column="16">=<pos:position pos:line="270" pos:column="17"/></operator> <name pos:line="270" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="270" pos:column="33"/></name></expr>;<pos:position pos:line="270" pos:column="34"/></expr_stmt>
      <if pos:line="271" pos:column="7">if<condition pos:line="271" pos:column="9">(<expr><operator pos:line="271" pos:column="10">*<pos:position pos:line="271" pos:column="11"/></operator><name pos:line="271" pos:column="11">mode<pos:position pos:line="271" pos:column="15"/></name> <operator pos:line="271" pos:column="16">==<pos:position pos:line="271" pos:column="18"/></operator> <name pos:line="271" pos:column="19">PASSIVE_CONNECT<pos:position pos:line="271" pos:column="34"/></name></expr>)<pos:position pos:line="271" pos:column="35"/></condition><then pos:line="271" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="272" pos:column="9">*<pos:position pos:line="272" pos:column="10"/></operator><name pos:line="272" pos:column="10">mode<pos:position pos:line="272" pos:column="14"/></name> <operator pos:line="272" pos:column="15">=<pos:position pos:line="272" pos:column="16"/></operator> <name pos:line="272" pos:column="17">PASSIVE_LISTEN<pos:position pos:line="272" pos:column="31"/></name></expr>;<pos:position pos:line="272" pos:column="32"/></expr_stmt></block></then>
      <else pos:line="273" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><operator pos:line="274" pos:column="9">*<pos:position pos:line="274" pos:column="10"/></operator><name pos:line="274" pos:column="10">mode<pos:position pos:line="274" pos:column="14"/></name> <operator pos:line="274" pos:column="15">=<pos:position pos:line="274" pos:column="16"/></operator> <name pos:line="274" pos:column="17">ACTIVE_DISCONNECT<pos:position pos:line="274" pos:column="34"/></name></expr>;<pos:position pos:line="274" pos:column="35"/></expr_stmt></block></else></if>
      <return pos:line="275" pos:column="7">return <expr><name pos:line="275" pos:column="14">TRUE<pos:position pos:line="275" pos:column="18"/></name></expr>;<pos:position pos:line="275" pos:column="19"/></return>
    }<pos:position pos:line="276" pos:column="6"/></block></then></if>
  }<pos:position pos:line="277" pos:column="4"/></block></then></if>

  <return pos:line="279" pos:column="3">return <expr><name pos:line="279" pos:column="10">TRUE<pos:position pos:line="279" pos:column="14"/></name></expr>;<pos:position pos:line="279" pos:column="15"/></return>
}<pos:position pos:line="280" pos:column="2"/></block></function></unit>
