<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2661_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">nss_setup_connect<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">connectdata<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">conn<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">sockindex<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">PRFileDesc<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">model<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><name pos:line="3" pos:column="23">NULL<pos:position pos:line="3" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">PRFileDesc<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">nspr_io<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">NULL<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">PRFileDesc<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">nspr_io_stub<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name pos:line="5" pos:column="30">NULL<pos:position pos:line="5" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">PRBool<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">ssl_no_cache<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">PRBool<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">ssl_cbc_random_iv<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_easy<pos:position pos:line="8" pos:column="19"/></name></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">data<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name><name pos:line="8" pos:column="28">conn<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">-&gt;<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="34">data<pos:position pos:line="8" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">curl_socket_t<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">sockfd<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><name><name pos:line="9" pos:column="26">conn<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">sock<pos:position pos:line="9" pos:column="36"/></name><index pos:line="9" pos:column="36">[<expr><name pos:line="9" pos:column="37">sockindex<pos:position pos:line="9" pos:column="46"/></name></expr>]<pos:position pos:line="9" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="9" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">ssl_connect_data<pos:position pos:line="10" pos:column="26"/></name></name> <modifier pos:line="10" pos:column="27">*<pos:position pos:line="10" pos:column="28"/></modifier></type><name pos:line="10" pos:column="28">connssl<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><operator pos:line="10" pos:column="38">&amp;<pos:position pos:line="10" pos:column="43"/></operator><name><name pos:line="10" pos:column="39">conn<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">-&gt;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="45">ssl<pos:position pos:line="10" pos:column="48"/></name><index pos:line="10" pos:column="48">[<expr><name pos:line="10" pos:column="49">sockindex<pos:position pos:line="10" pos:column="58"/></name></expr>]<pos:position pos:line="10" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLcode<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">result<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">bool<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">second_layer<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><name pos:line="12" pos:column="23">FALSE<pos:position pos:line="12" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="29"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">SSLVersionRange<pos:position pos:line="14" pos:column="18"/></name></type> <name pos:line="14" pos:column="19">sslver<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><block pos:line="14" pos:column="28">{
    <expr><name pos:line="15" pos:column="5">SSL_LIBRARY_VERSION_TLS_1_0<pos:position pos:line="15" pos:column="32"/></name></expr>,  <comment type="block" pos:line="15" pos:column="35">/* min */</comment>
    <expr><name pos:line="16" pos:column="5">SSL_LIBRARY_VERSION_TLS_1_0<pos:position pos:line="16" pos:column="32"/></name></expr>   <comment type="block" pos:line="16" pos:column="35">/* max */</comment>
  }<pos:position pos:line="17" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="17" pos:column="5"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="19" pos:column="3">BACKEND<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">data<pos:position pos:line="19" pos:column="16"/></name></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="19">data<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* list of all NSS objects we need to destroy in Curl_nss_close() */</comment>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">Curl_llist_init<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><operator pos:line="22" pos:column="19">&amp;<pos:position pos:line="22" pos:column="24"/></operator><name><name pos:line="22" pos:column="20">BACKEND<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">obj_list<pos:position pos:line="22" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">nss_destroy_object<pos:position pos:line="22" pos:column="57"/></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt>

  <comment type="block" pos:line="24" pos:column="3">/* FIXME. NSS doesn't support multiple databases open at the same time. */</comment>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">PR_Lock<pos:position pos:line="25" pos:column="10"/></name><argument_list pos:line="25" pos:column="10">(<argument><expr><name pos:line="25" pos:column="11">nss_initlock<pos:position pos:line="25" pos:column="23"/></name></expr></argument>)<pos:position pos:line="25" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="26" pos:column="3">result<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <call><name pos:line="26" pos:column="12">nss_init<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name><name pos:line="26" pos:column="21">conn<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">-&gt;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="27">data<pos:position pos:line="26" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name pos:line="27" pos:column="6">result<pos:position pos:line="27" pos:column="12"/></name></expr>)<pos:position pos:line="27" pos:column="13"/></condition><then pos:line="27" pos:column="13"> <block pos:line="27" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">PR_Unlock<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">nss_initlock<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
    <goto pos:line="29" pos:column="5">goto <name pos:line="29" pos:column="10">error<pos:position pos:line="29" pos:column="15"/></name>;<pos:position pos:line="29" pos:column="16"/></goto>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="32" pos:column="3">PK11_SetPasswordFunc<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">nss_get_password<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="42"/></expr_stmt>

  <expr_stmt><expr><name pos:line="34" pos:column="3">result<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">nss_load_module<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><operator pos:line="34" pos:column="28">&amp;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="29">pem_module<pos:position pos:line="34" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">pem_library<pos:position pos:line="34" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="54">"PEM"<pos:position pos:line="34" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">PR_Unlock<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">nss_initlock<pos:position pos:line="35" pos:column="25"/></name></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
  <if pos:line="36" pos:column="3">if<condition pos:line="36" pos:column="5">(<expr><name pos:line="36" pos:column="6">result<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">==<pos:position pos:line="36" pos:column="15"/></operator> <name pos:line="36" pos:column="16">CURLE_FAILED_INIT<pos:position pos:line="36" pos:column="33"/></name></expr>)<pos:position pos:line="36" pos:column="34"/></condition><then pos:line="36" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="5">infof<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><name pos:line="37" pos:column="11">data<pos:position pos:line="37" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="17">"WARNING: failed to load NSS PEM library %s. Using "<pos:position pos:line="37" pos:column="69"/></literal>
                <literal type="string" pos:line="38" pos:column="17">"OpenSSL PEM certificates will not work.\n"<pos:position pos:line="38" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="62">pem_library<pos:position pos:line="38" pos:column="73"/></name></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="75"/></expr_stmt></block></then>
  <elseif pos:line="39" pos:column="3">else <if pos:line="39" pos:column="8">if<condition pos:line="39" pos:column="10">(<expr><name pos:line="39" pos:column="11">result<pos:position pos:line="39" pos:column="17"/></name></expr>)<pos:position pos:line="39" pos:column="18"/></condition><then pos:line="39" pos:column="18">
    <block type="pseudo"><goto pos:line="40" pos:column="5">goto <name pos:line="40" pos:column="10">error<pos:position pos:line="40" pos:column="15"/></name>;<pos:position pos:line="40" pos:column="16"/></goto></block></then></if></elseif></if>

  <expr_stmt><expr><name pos:line="42" pos:column="3">result<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <name pos:line="42" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="42" pos:column="35"/></name></expr>;<pos:position pos:line="42" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><name pos:line="44" pos:column="3">model<pos:position pos:line="44" pos:column="8"/></name> <operator pos:line="44" pos:column="9">=<pos:position pos:line="44" pos:column="10"/></operator> <call><name pos:line="44" pos:column="11">PR_NewTCPSocket<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">()<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>
  <if pos:line="45" pos:column="3">if<condition pos:line="45" pos:column="5">(<expr><operator pos:line="45" pos:column="6">!<pos:position pos:line="45" pos:column="7"/></operator><name pos:line="45" pos:column="7">model<pos:position pos:line="45" pos:column="12"/></name></expr>)<pos:position pos:line="45" pos:column="13"/></condition><then pos:line="45" pos:column="13">
    <block type="pseudo"><goto pos:line="46" pos:column="5">goto <name pos:line="46" pos:column="10">error<pos:position pos:line="46" pos:column="15"/></name>;<pos:position pos:line="46" pos:column="16"/></goto></block></then></if>
  <expr_stmt><expr><name pos:line="47" pos:column="3">model<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <call><name pos:line="47" pos:column="11">SSL_ImportFD<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><name pos:line="47" pos:column="24">NULL<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="30">model<pos:position pos:line="47" pos:column="35"/></name></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>

  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><call><name pos:line="49" pos:column="6">SSL_OptionSet<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">model<pos:position pos:line="49" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="27">SSL_SECURITY<pos:position pos:line="49" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="41">PR_TRUE<pos:position pos:line="49" pos:column="48"/></name></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call> <operator pos:line="49" pos:column="50">!=<pos:position pos:line="49" pos:column="52"/></operator> <name pos:line="49" pos:column="53">SECSuccess<pos:position pos:line="49" pos:column="63"/></name></expr>)<pos:position pos:line="49" pos:column="64"/></condition><then pos:line="49" pos:column="64">
    <block type="pseudo"><goto pos:line="50" pos:column="5">goto <name pos:line="50" pos:column="10">error<pos:position pos:line="50" pos:column="15"/></name>;<pos:position pos:line="50" pos:column="16"/></goto></block></then></if>
  <if pos:line="51" pos:column="3">if<condition pos:line="51" pos:column="5">(<expr><call><name pos:line="51" pos:column="6">SSL_OptionSet<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><name pos:line="51" pos:column="20">model<pos:position pos:line="51" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="27">SSL_HANDSHAKE_AS_SERVER<pos:position pos:line="51" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="52">PR_FALSE<pos:position pos:line="51" pos:column="60"/></name></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call> <operator pos:line="51" pos:column="62">!=<pos:position pos:line="51" pos:column="64"/></operator> <name pos:line="51" pos:column="65">SECSuccess<pos:position pos:line="51" pos:column="75"/></name></expr>)<pos:position pos:line="51" pos:column="76"/></condition><then pos:line="51" pos:column="76">
    <block type="pseudo"><goto pos:line="52" pos:column="5">goto <name pos:line="52" pos:column="10">error<pos:position pos:line="52" pos:column="15"/></name>;<pos:position pos:line="52" pos:column="16"/></goto></block></then></if>
  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><call><name pos:line="53" pos:column="6">SSL_OptionSet<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">model<pos:position pos:line="53" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="27">SSL_HANDSHAKE_AS_CLIENT<pos:position pos:line="53" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">PR_TRUE<pos:position pos:line="53" pos:column="59"/></name></expr></argument>)<pos:position pos:line="53" pos:column="60"/></argument_list></call> <operator pos:line="53" pos:column="61">!=<pos:position pos:line="53" pos:column="63"/></operator> <name pos:line="53" pos:column="64">SECSuccess<pos:position pos:line="53" pos:column="74"/></name></expr>)<pos:position pos:line="53" pos:column="75"/></condition><then pos:line="53" pos:column="75">
    <block type="pseudo"><goto pos:line="54" pos:column="5">goto <name pos:line="54" pos:column="10">error<pos:position pos:line="54" pos:column="15"/></name>;<pos:position pos:line="54" pos:column="16"/></goto></block></then></if>

  <comment type="block" pos:line="56" pos:column="3">/* do not use SSL cache if disabled or we are not going to verify peer */</comment>
  <expr_stmt><expr><name pos:line="57" pos:column="3">ssl_no_cache<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <ternary><condition><expr><operator pos:line="57" pos:column="18">(<pos:position pos:line="57" pos:column="19"/></operator><call><name pos:line="57" pos:column="19">SSL_SET_OPTION<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><name><name pos:line="57" pos:column="34">primary<pos:position pos:line="57" pos:column="41"/></name><operator pos:line="57" pos:column="41">.<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="42">sessionid<pos:position pos:line="57" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call>
                  <operator pos:line="58" pos:column="19">&amp;&amp;<pos:position pos:line="58" pos:column="29"/></operator> <call><name pos:line="58" pos:column="22">SSL_CONN_CONFIG<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><name pos:line="58" pos:column="38">verifypeer<pos:position pos:line="58" pos:column="48"/></name></expr></argument>)<pos:position pos:line="58" pos:column="49"/></argument_list></call><operator pos:line="58" pos:column="49">)<pos:position pos:line="58" pos:column="50"/></operator></expr> ?<pos:position pos:line="58" pos:column="52"/></condition><then pos:line="58" pos:column="52"> <expr><name pos:line="58" pos:column="53">PR_FALSE<pos:position pos:line="58" pos:column="61"/></name></expr> <pos:position pos:line="58" pos:column="62"/></then><else pos:line="58" pos:column="62">: <expr><name pos:line="58" pos:column="64">PR_TRUE<pos:position pos:line="58" pos:column="71"/></name></expr></else></ternary></expr>;<pos:position pos:line="58" pos:column="72"/></expr_stmt>
  <if pos:line="59" pos:column="3">if<condition pos:line="59" pos:column="5">(<expr><call><name pos:line="59" pos:column="6">SSL_OptionSet<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">model<pos:position pos:line="59" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="27">SSL_NO_CACHE<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">ssl_no_cache<pos:position pos:line="59" pos:column="53"/></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call> <operator pos:line="59" pos:column="55">!=<pos:position pos:line="59" pos:column="57"/></operator> <name pos:line="59" pos:column="58">SECSuccess<pos:position pos:line="59" pos:column="68"/></name></expr>)<pos:position pos:line="59" pos:column="69"/></condition><then pos:line="59" pos:column="69">
    <block type="pseudo"><goto pos:line="60" pos:column="5">goto <name pos:line="60" pos:column="10">error<pos:position pos:line="60" pos:column="15"/></name>;<pos:position pos:line="60" pos:column="16"/></goto></block></then></if>

  <comment type="block" pos:line="62" pos:column="3">/* enable/disable the requested SSL version(s) */</comment>
  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><call><name pos:line="63" pos:column="6">nss_init_sslver<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><operator pos:line="63" pos:column="22">&amp;<pos:position pos:line="63" pos:column="27"/></operator><name pos:line="63" pos:column="23">sslver<pos:position pos:line="63" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="31">data<pos:position pos:line="63" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="37">conn<pos:position pos:line="63" pos:column="41"/></name></expr></argument>)<pos:position pos:line="63" pos:column="42"/></argument_list></call> <operator pos:line="63" pos:column="43">!=<pos:position pos:line="63" pos:column="45"/></operator> <name pos:line="63" pos:column="46">CURLE_OK<pos:position pos:line="63" pos:column="54"/></name></expr>)<pos:position pos:line="63" pos:column="55"/></condition><then pos:line="63" pos:column="55">
    <block type="pseudo"><goto pos:line="64" pos:column="5">goto <name pos:line="64" pos:column="10">error<pos:position pos:line="64" pos:column="15"/></name>;<pos:position pos:line="64" pos:column="16"/></goto></block></then></if>
  <if pos:line="65" pos:column="3">if<condition pos:line="65" pos:column="5">(<expr><call><name pos:line="65" pos:column="6">SSL_VersionRangeSet<pos:position pos:line="65" pos:column="25"/></name><argument_list pos:line="65" pos:column="25">(<argument><expr><name pos:line="65" pos:column="26">model<pos:position pos:line="65" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="33">&amp;<pos:position pos:line="65" pos:column="38"/></operator><name pos:line="65" pos:column="34">sslver<pos:position pos:line="65" pos:column="40"/></name></expr></argument>)<pos:position pos:line="65" pos:column="41"/></argument_list></call> <operator pos:line="65" pos:column="42">!=<pos:position pos:line="65" pos:column="44"/></operator> <name pos:line="65" pos:column="45">SECSuccess<pos:position pos:line="65" pos:column="55"/></name></expr>)<pos:position pos:line="65" pos:column="56"/></condition><then pos:line="65" pos:column="56">
    <block type="pseudo"><goto pos:line="66" pos:column="5">goto <name pos:line="66" pos:column="10">error<pos:position pos:line="66" pos:column="15"/></name>;<pos:position pos:line="66" pos:column="16"/></goto></block></then></if>

  <expr_stmt><expr><name pos:line="68" pos:column="3">ssl_cbc_random_iv<pos:position pos:line="68" pos:column="20"/></name> <operator pos:line="68" pos:column="21">=<pos:position pos:line="68" pos:column="22"/></operator> <operator pos:line="68" pos:column="23">!<pos:position pos:line="68" pos:column="24"/></operator><call><name pos:line="68" pos:column="24">SSL_SET_OPTION<pos:position pos:line="68" pos:column="38"/></name><argument_list pos:line="68" pos:column="38">(<argument><expr><name pos:line="68" pos:column="39">enable_beast<pos:position pos:line="68" pos:column="51"/></name></expr></argument>)<pos:position pos:line="68" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="53"/></expr_stmt>
<cpp:ifdef pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">ifdef<pos:position pos:line="69" pos:column="7"/></cpp:directive> <name pos:line="69" pos:column="8">SSL_CBC_RANDOM_IV<pos:position pos:line="69" pos:column="25"/></name></cpp:ifdef>
  <comment type="block" pos:line="70" pos:column="3">/* unless the user explicitly asks to allow the protocol vulnerability, we
     use the work-around */</comment>
  <if pos:line="72" pos:column="3">if<condition pos:line="72" pos:column="5">(<expr><call><name pos:line="72" pos:column="6">SSL_OptionSet<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument><expr><name pos:line="72" pos:column="20">model<pos:position pos:line="72" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="27">SSL_CBC_RANDOM_IV<pos:position pos:line="72" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="46">ssl_cbc_random_iv<pos:position pos:line="72" pos:column="63"/></name></expr></argument>)<pos:position pos:line="72" pos:column="64"/></argument_list></call> <operator pos:line="72" pos:column="65">!=<pos:position pos:line="72" pos:column="67"/></operator> <name pos:line="72" pos:column="68">SECSuccess<pos:position pos:line="72" pos:column="78"/></name></expr>)<pos:position pos:line="72" pos:column="79"/></condition><then pos:line="72" pos:column="79">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="5">infof<pos:position pos:line="73" pos:column="10"/></name><argument_list pos:line="73" pos:column="10">(<argument><expr><name pos:line="73" pos:column="11">data<pos:position pos:line="73" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="17">"warning: failed to set SSL_CBC_RANDOM_IV = %d\n"<pos:position pos:line="73" pos:column="66"/></literal></expr></argument>,
          <argument><expr><name pos:line="74" pos:column="11">ssl_cbc_random_iv<pos:position pos:line="74" pos:column="28"/></name></expr></argument>)<pos:position pos:line="74" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="30"/></expr_stmt></block></then></if>
<cpp:else pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">else<pos:position pos:line="75" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="76" pos:column="3">if<condition pos:line="76" pos:column="5">(<expr><name pos:line="76" pos:column="6">ssl_cbc_random_iv<pos:position pos:line="76" pos:column="23"/></name></expr>)<pos:position pos:line="76" pos:column="24"/></condition><then pos:line="76" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="5">infof<pos:position pos:line="77" pos:column="10"/></name><argument_list pos:line="77" pos:column="10">(<argument><expr><name pos:line="77" pos:column="11">data<pos:position pos:line="77" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="17">"warning: support for SSL_CBC_RANDOM_IV not compiled in\n"<pos:position pos:line="77" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="77"/></expr_stmt></block></then></if>
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="80" pos:column="3">if<condition pos:line="80" pos:column="5">(<expr><call><name pos:line="80" pos:column="6">SSL_CONN_CONFIG<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name pos:line="80" pos:column="22">cipher_list<pos:position pos:line="80" pos:column="33"/></name></expr></argument>)<pos:position pos:line="80" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="35"/></condition><then pos:line="80" pos:column="35"> <block pos:line="80" pos:column="36">{
    <if pos:line="81" pos:column="5">if<condition pos:line="81" pos:column="7">(<expr><call><name pos:line="81" pos:column="8">set_ciphers<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><name pos:line="81" pos:column="20">data<pos:position pos:line="81" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="26">model<pos:position pos:line="81" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="81" pos:column="33">SSL_CONN_CONFIG<pos:position pos:line="81" pos:column="48"/></name><argument_list pos:line="81" pos:column="48">(<argument><expr><name pos:line="81" pos:column="49">cipher_list<pos:position pos:line="81" pos:column="60"/></name></expr></argument>)<pos:position pos:line="81" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="62"/></argument_list></call> <operator pos:line="81" pos:column="63">!=<pos:position pos:line="81" pos:column="65"/></operator> <name pos:line="81" pos:column="66">SECSuccess<pos:position pos:line="81" pos:column="76"/></name></expr>)<pos:position pos:line="81" pos:column="77"/></condition><then pos:line="81" pos:column="77"> <block pos:line="81" pos:column="78">{
      <expr_stmt><expr><name pos:line="82" pos:column="7">result<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">=<pos:position pos:line="82" pos:column="15"/></operator> <name pos:line="82" pos:column="16">CURLE_SSL_CIPHER<pos:position pos:line="82" pos:column="32"/></name></expr>;<pos:position pos:line="82" pos:column="33"/></expr_stmt>
      <goto pos:line="83" pos:column="7">goto <name pos:line="83" pos:column="12">error<pos:position pos:line="83" pos:column="17"/></name>;<pos:position pos:line="83" pos:column="18"/></goto>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>
  }<pos:position pos:line="85" pos:column="4"/></block></then></if>

  <if pos:line="87" pos:column="3">if<condition pos:line="87" pos:column="5">(<expr><operator pos:line="87" pos:column="6">!<pos:position pos:line="87" pos:column="7"/></operator><call><name pos:line="87" pos:column="7">SSL_CONN_CONFIG<pos:position pos:line="87" pos:column="22"/></name><argument_list pos:line="87" pos:column="22">(<argument><expr><name pos:line="87" pos:column="23">verifypeer<pos:position pos:line="87" pos:column="33"/></name></expr></argument>)<pos:position pos:line="87" pos:column="34"/></argument_list></call> <operator pos:line="87" pos:column="35">&amp;&amp;<pos:position pos:line="87" pos:column="45"/></operator> <call><name pos:line="87" pos:column="38">SSL_CONN_CONFIG<pos:position pos:line="87" pos:column="53"/></name><argument_list pos:line="87" pos:column="53">(<argument><expr><name pos:line="87" pos:column="54">verifyhost<pos:position pos:line="87" pos:column="64"/></name></expr></argument>)<pos:position pos:line="87" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="66"/></condition><then pos:line="87" pos:column="66">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="5">infof<pos:position pos:line="88" pos:column="10"/></name><argument_list pos:line="88" pos:column="10">(<argument><expr><name pos:line="88" pos:column="11">data<pos:position pos:line="88" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="17">"warning: ignoring value of ssl.verifyhost\n"<pos:position pos:line="88" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="64"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="90" pos:column="3">/* bypass the default SSL_AuthCertificate() hook in case we do not want to
   * verify peer */</comment>
  <if pos:line="92" pos:column="3">if<condition pos:line="92" pos:column="5">(<expr><call><name pos:line="92" pos:column="6">SSL_AuthCertificateHook<pos:position pos:line="92" pos:column="29"/></name><argument_list pos:line="92" pos:column="29">(<argument><expr><name pos:line="92" pos:column="30">model<pos:position pos:line="92" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="37">nss_auth_cert_hook<pos:position pos:line="92" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="57">conn<pos:position pos:line="92" pos:column="61"/></name></expr></argument>)<pos:position pos:line="92" pos:column="62"/></argument_list></call> <operator pos:line="92" pos:column="63">!=<pos:position pos:line="92" pos:column="65"/></operator> <name pos:line="92" pos:column="66">SECSuccess<pos:position pos:line="92" pos:column="76"/></name></expr>)<pos:position pos:line="92" pos:column="77"/></condition><then pos:line="92" pos:column="77">
    <block type="pseudo"><goto pos:line="93" pos:column="5">goto <name pos:line="93" pos:column="10">error<pos:position pos:line="93" pos:column="15"/></name>;<pos:position pos:line="93" pos:column="16"/></goto></block></then></if>

  <comment type="block" pos:line="95" pos:column="3">/* not checked yet */</comment>
  <if pos:line="96" pos:column="3">if<condition pos:line="96" pos:column="5">(<expr><call><name pos:line="96" pos:column="6">SSL_IS_PROXY<pos:position pos:line="96" pos:column="18"/></name><argument_list pos:line="96" pos:column="18">()<pos:position pos:line="96" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="21"/></condition><then pos:line="96" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="97" pos:column="5">data<pos:position pos:line="97" pos:column="9"/></name><operator pos:line="97" pos:column="9">-&gt;<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="11">set<pos:position pos:line="97" pos:column="14"/></name><operator pos:line="97" pos:column="14">.<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="15">proxy_ssl<pos:position pos:line="97" pos:column="24"/></name><operator pos:line="97" pos:column="24">.<pos:position pos:line="97" pos:column="25"/></operator><name pos:line="97" pos:column="25">certverifyresult<pos:position pos:line="97" pos:column="41"/></name></name> <operator pos:line="97" pos:column="42">=<pos:position pos:line="97" pos:column="43"/></operator> <literal type="number" pos:line="97" pos:column="44">0<pos:position pos:line="97" pos:column="45"/></literal></expr>;<pos:position pos:line="97" pos:column="46"/></expr_stmt></block></then>
  <else pos:line="98" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="99" pos:column="5">data<pos:position pos:line="99" pos:column="9"/></name><operator pos:line="99" pos:column="9">-&gt;<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="11">set<pos:position pos:line="99" pos:column="14"/></name><operator pos:line="99" pos:column="14">.<pos:position pos:line="99" pos:column="15"/></operator><name pos:line="99" pos:column="15">ssl<pos:position pos:line="99" pos:column="18"/></name><operator pos:line="99" pos:column="18">.<pos:position pos:line="99" pos:column="19"/></operator><name pos:line="99" pos:column="19">certverifyresult<pos:position pos:line="99" pos:column="35"/></name></name> <operator pos:line="99" pos:column="36">=<pos:position pos:line="99" pos:column="37"/></operator> <literal type="number" pos:line="99" pos:column="38">0<pos:position pos:line="99" pos:column="39"/></literal></expr>;<pos:position pos:line="99" pos:column="40"/></expr_stmt></block></else></if>

  <if pos:line="101" pos:column="3">if<condition pos:line="101" pos:column="5">(<expr><call><name pos:line="101" pos:column="6">SSL_BadCertHook<pos:position pos:line="101" pos:column="21"/></name><argument_list pos:line="101" pos:column="21">(<argument><expr><name pos:line="101" pos:column="22">model<pos:position pos:line="101" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="29">BadCertHandler<pos:position pos:line="101" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="45">conn<pos:position pos:line="101" pos:column="49"/></name></expr></argument>)<pos:position pos:line="101" pos:column="50"/></argument_list></call> <operator pos:line="101" pos:column="51">!=<pos:position pos:line="101" pos:column="53"/></operator> <name pos:line="101" pos:column="54">SECSuccess<pos:position pos:line="101" pos:column="64"/></name></expr>)<pos:position pos:line="101" pos:column="65"/></condition><then pos:line="101" pos:column="65">
    <block type="pseudo"><goto pos:line="102" pos:column="5">goto <name pos:line="102" pos:column="10">error<pos:position pos:line="102" pos:column="15"/></name>;<pos:position pos:line="102" pos:column="16"/></goto></block></then></if>

  <if pos:line="104" pos:column="3">if<condition pos:line="104" pos:column="5">(<expr><call><name pos:line="104" pos:column="6">SSL_HandshakeCallback<pos:position pos:line="104" pos:column="27"/></name><argument_list pos:line="104" pos:column="27">(<argument><expr><name pos:line="104" pos:column="28">model<pos:position pos:line="104" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="35">HandshakeCallback<pos:position pos:line="104" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="54">conn<pos:position pos:line="104" pos:column="58"/></name></expr></argument>)<pos:position pos:line="104" pos:column="59"/></argument_list></call> <operator pos:line="104" pos:column="60">!=<pos:position pos:line="104" pos:column="62"/></operator> <name pos:line="104" pos:column="63">SECSuccess<pos:position pos:line="104" pos:column="73"/></name></expr>)<pos:position pos:line="104" pos:column="74"/></condition><then pos:line="104" pos:column="74">
    <block type="pseudo"><goto pos:line="105" pos:column="5">goto <name pos:line="105" pos:column="10">error<pos:position pos:line="105" pos:column="15"/></name>;<pos:position pos:line="105" pos:column="16"/></goto></block></then></if>

  <block pos:line="107" pos:column="3">{
    <decl_stmt><decl><type><specifier pos:line="108" pos:column="5">const<pos:position pos:line="108" pos:column="10"/></specifier> <name pos:line="108" pos:column="11">CURLcode<pos:position pos:line="108" pos:column="19"/></name></type> <name pos:line="108" pos:column="20">rv<pos:position pos:line="108" pos:column="22"/></name> <init pos:line="108" pos:column="23">= <expr><call><name pos:line="108" pos:column="25">nss_load_ca_certificates<pos:position pos:line="108" pos:column="49"/></name><argument_list pos:line="108" pos:column="49">(<argument><expr><name pos:line="108" pos:column="50">conn<pos:position pos:line="108" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="56">sockindex<pos:position pos:line="108" pos:column="65"/></name></expr></argument>)<pos:position pos:line="108" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="108" pos:column="67"/></decl_stmt>
    <if pos:line="109" pos:column="5">if<condition pos:line="109" pos:column="7">(<expr><operator pos:line="109" pos:column="8">(<pos:position pos:line="109" pos:column="9"/></operator><name pos:line="109" pos:column="9">rv<pos:position pos:line="109" pos:column="11"/></name> <operator pos:line="109" pos:column="12">==<pos:position pos:line="109" pos:column="14"/></operator> <name pos:line="109" pos:column="15">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="109" pos:column="39"/></name><operator pos:line="109" pos:column="39">)<pos:position pos:line="109" pos:column="40"/></operator> <operator pos:line="109" pos:column="41">&amp;&amp;<pos:position pos:line="109" pos:column="51"/></operator> <operator pos:line="109" pos:column="44">!<pos:position pos:line="109" pos:column="45"/></operator><call><name pos:line="109" pos:column="45">SSL_CONN_CONFIG<pos:position pos:line="109" pos:column="60"/></name><argument_list pos:line="109" pos:column="60">(<argument><expr><name pos:line="109" pos:column="61">verifypeer<pos:position pos:line="109" pos:column="71"/></name></expr></argument>)<pos:position pos:line="109" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="73"/></condition><then pos:line="109" pos:column="73">
      <comment type="block" pos:line="110" pos:column="7">/* not a fatal error because we are not going to verify the peer */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="7">infof<pos:position pos:line="111" pos:column="12"/></name><argument_list pos:line="111" pos:column="12">(<argument><expr><name pos:line="111" pos:column="13">data<pos:position pos:line="111" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="19">"warning: CA certificates failed to load\n"<pos:position pos:line="111" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="64"/></expr_stmt></block></then>
    <elseif pos:line="112" pos:column="5">else <if pos:line="112" pos:column="10">if<condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">rv<pos:position pos:line="112" pos:column="15"/></name></expr>)<pos:position pos:line="112" pos:column="16"/></condition><then pos:line="112" pos:column="16"> <block pos:line="112" pos:column="17">{
      <expr_stmt><expr><name pos:line="113" pos:column="7">result<pos:position pos:line="113" pos:column="13"/></name> <operator pos:line="113" pos:column="14">=<pos:position pos:line="113" pos:column="15"/></operator> <name pos:line="113" pos:column="16">rv<pos:position pos:line="113" pos:column="18"/></name></expr>;<pos:position pos:line="113" pos:column="19"/></expr_stmt>
      <goto pos:line="114" pos:column="7">goto <name pos:line="114" pos:column="12">error<pos:position pos:line="114" pos:column="17"/></name>;<pos:position pos:line="114" pos:column="18"/></goto>
    }<pos:position pos:line="115" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="116" pos:column="4"/></block>

  <if pos:line="118" pos:column="3">if<condition pos:line="118" pos:column="5">(<expr><call><name pos:line="118" pos:column="6">SSL_SET_OPTION<pos:position pos:line="118" pos:column="20"/></name><argument_list pos:line="118" pos:column="20">(<argument><expr><name pos:line="118" pos:column="21">CRLfile<pos:position pos:line="118" pos:column="28"/></name></expr></argument>)<pos:position pos:line="118" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="30"/></condition><then pos:line="118" pos:column="30"> <block pos:line="118" pos:column="31">{
    <decl_stmt><decl><type><specifier pos:line="119" pos:column="5">const<pos:position pos:line="119" pos:column="10"/></specifier> <name pos:line="119" pos:column="11">CURLcode<pos:position pos:line="119" pos:column="19"/></name></type> <name pos:line="119" pos:column="20">rv<pos:position pos:line="119" pos:column="22"/></name> <init pos:line="119" pos:column="23">= <expr><call><name pos:line="119" pos:column="25">nss_load_crl<pos:position pos:line="119" pos:column="37"/></name><argument_list pos:line="119" pos:column="37">(<argument><expr><call><name pos:line="119" pos:column="38">SSL_SET_OPTION<pos:position pos:line="119" pos:column="52"/></name><argument_list pos:line="119" pos:column="52">(<argument><expr><name pos:line="119" pos:column="53">CRLfile<pos:position pos:line="119" pos:column="60"/></name></expr></argument>)<pos:position pos:line="119" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="119" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="119" pos:column="63"/></decl_stmt>
    <if pos:line="120" pos:column="5">if<condition pos:line="120" pos:column="7">(<expr><name pos:line="120" pos:column="8">rv<pos:position pos:line="120" pos:column="10"/></name></expr>)<pos:position pos:line="120" pos:column="11"/></condition><then pos:line="120" pos:column="11"> <block pos:line="120" pos:column="12">{
      <expr_stmt><expr><name pos:line="121" pos:column="7">result<pos:position pos:line="121" pos:column="13"/></name> <operator pos:line="121" pos:column="14">=<pos:position pos:line="121" pos:column="15"/></operator> <name pos:line="121" pos:column="16">rv<pos:position pos:line="121" pos:column="18"/></name></expr>;<pos:position pos:line="121" pos:column="19"/></expr_stmt>
      <goto pos:line="122" pos:column="7">goto <name pos:line="122" pos:column="12">error<pos:position pos:line="122" pos:column="17"/></name>;<pos:position pos:line="122" pos:column="18"/></goto>
    }<pos:position pos:line="123" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">infof<pos:position pos:line="124" pos:column="10"/></name><argument_list pos:line="124" pos:column="10">(<argument><expr><name pos:line="124" pos:column="11">data<pos:position pos:line="124" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="17">"  CRLfile: %s\n"<pos:position pos:line="124" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="124" pos:column="36">SSL_SET_OPTION<pos:position pos:line="124" pos:column="50"/></name><argument_list pos:line="124" pos:column="50">(<argument><expr><name pos:line="124" pos:column="51">CRLfile<pos:position pos:line="124" pos:column="58"/></name></expr></argument>)<pos:position pos:line="124" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="124" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="61"/></expr_stmt>
  }<pos:position pos:line="125" pos:column="4"/></block></then></if>

  <if pos:line="127" pos:column="3">if<condition pos:line="127" pos:column="5">(<expr><call><name pos:line="127" pos:column="6">SSL_SET_OPTION<pos:position pos:line="127" pos:column="20"/></name><argument_list pos:line="127" pos:column="20">(<argument><expr><name pos:line="127" pos:column="21">cert<pos:position pos:line="127" pos:column="25"/></name></expr></argument>)<pos:position pos:line="127" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="127" pos:column="27"/></condition><then pos:line="127" pos:column="27"> <block pos:line="127" pos:column="28">{
    <decl_stmt><decl><type><name pos:line="128" pos:column="5">char<pos:position pos:line="128" pos:column="9"/></name> <modifier pos:line="128" pos:column="10">*<pos:position pos:line="128" pos:column="11"/></modifier></type><name pos:line="128" pos:column="11">nickname<pos:position pos:line="128" pos:column="19"/></name> <init pos:line="128" pos:column="20">= <expr><call><name pos:line="128" pos:column="22">dup_nickname<pos:position pos:line="128" pos:column="34"/></name><argument_list pos:line="128" pos:column="34">(<argument><expr><name pos:line="128" pos:column="35">data<pos:position pos:line="128" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="128" pos:column="41">SSL_SET_OPTION<pos:position pos:line="128" pos:column="55"/></name><argument_list pos:line="128" pos:column="55">(<argument><expr><name pos:line="128" pos:column="56">cert<pos:position pos:line="128" pos:column="60"/></name></expr></argument>)<pos:position pos:line="128" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="128" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="128" pos:column="63"/></decl_stmt>
    <if pos:line="129" pos:column="5">if<condition pos:line="129" pos:column="7">(<expr><name pos:line="129" pos:column="8">nickname<pos:position pos:line="129" pos:column="16"/></name></expr>)<pos:position pos:line="129" pos:column="17"/></condition><then pos:line="129" pos:column="17"> <block pos:line="129" pos:column="18">{
      <comment type="block" pos:line="130" pos:column="7">/* we are not going to use libnsspem.so to read the client cert */</comment>
      <expr_stmt><expr><name><name pos:line="131" pos:column="7">BACKEND<pos:position pos:line="131" pos:column="14"/></name><operator pos:line="131" pos:column="14">-&gt;<pos:position pos:line="131" pos:column="19"/></operator><name pos:line="131" pos:column="16">obj_clicert<pos:position pos:line="131" pos:column="27"/></name></name> <operator pos:line="131" pos:column="28">=<pos:position pos:line="131" pos:column="29"/></operator> <name pos:line="131" pos:column="30">NULL<pos:position pos:line="131" pos:column="34"/></name></expr>;<pos:position pos:line="131" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="132" pos:column="6"/></block></then>
    <else pos:line="133" pos:column="5">else <block pos:line="133" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="134" pos:column="7">CURLcode<pos:position pos:line="134" pos:column="15"/></name></type> <name pos:line="134" pos:column="16">rv<pos:position pos:line="134" pos:column="18"/></name> <init pos:line="134" pos:column="19">= <expr><call><name pos:line="134" pos:column="21">cert_stuff<pos:position pos:line="134" pos:column="31"/></name><argument_list pos:line="134" pos:column="31">(<argument><expr><name pos:line="134" pos:column="32">conn<pos:position pos:line="134" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="38">sockindex<pos:position pos:line="134" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="134" pos:column="49">SSL_SET_OPTION<pos:position pos:line="134" pos:column="63"/></name><argument_list pos:line="134" pos:column="63">(<argument><expr><name pos:line="134" pos:column="64">cert<pos:position pos:line="134" pos:column="68"/></name></expr></argument>)<pos:position pos:line="134" pos:column="69"/></argument_list></call></expr></argument>,
                               <argument><expr><call><name pos:line="135" pos:column="32">SSL_SET_OPTION<pos:position pos:line="135" pos:column="46"/></name><argument_list pos:line="135" pos:column="46">(<argument><expr><name pos:line="135" pos:column="47">key<pos:position pos:line="135" pos:column="50"/></name></expr></argument>)<pos:position pos:line="135" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="135" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="135" pos:column="53"/></decl_stmt>
      <if pos:line="136" pos:column="7">if<condition pos:line="136" pos:column="9">(<expr><name pos:line="136" pos:column="10">rv<pos:position pos:line="136" pos:column="12"/></name></expr>)<pos:position pos:line="136" pos:column="13"/></condition><then pos:line="136" pos:column="13"> <block pos:line="136" pos:column="14">{
        <comment type="block" pos:line="137" pos:column="9">/* failf() is already done in cert_stuff() */</comment>
        <expr_stmt><expr><name pos:line="138" pos:column="9">result<pos:position pos:line="138" pos:column="15"/></name> <operator pos:line="138" pos:column="16">=<pos:position pos:line="138" pos:column="17"/></operator> <name pos:line="138" pos:column="18">rv<pos:position pos:line="138" pos:column="20"/></name></expr>;<pos:position pos:line="138" pos:column="21"/></expr_stmt>
        <goto pos:line="139" pos:column="9">goto <name pos:line="139" pos:column="14">error<pos:position pos:line="139" pos:column="19"/></name>;<pos:position pos:line="139" pos:column="20"/></goto>
      }<pos:position pos:line="140" pos:column="8"/></block></then></if>
    }<pos:position pos:line="141" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="143" pos:column="5">/* store the nickname for SelectClientCert() called during handshake */</comment>
    <expr_stmt><expr><name><name pos:line="144" pos:column="5">BACKEND<pos:position pos:line="144" pos:column="12"/></name><operator pos:line="144" pos:column="12">-&gt;<pos:position pos:line="144" pos:column="17"/></operator><name pos:line="144" pos:column="14">client_nickname<pos:position pos:line="144" pos:column="29"/></name></name> <operator pos:line="144" pos:column="30">=<pos:position pos:line="144" pos:column="31"/></operator> <name pos:line="144" pos:column="32">nickname<pos:position pos:line="144" pos:column="40"/></name></expr>;<pos:position pos:line="144" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="145" pos:column="4"/></block></then>
  <else pos:line="146" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="147" pos:column="5">BACKEND<pos:position pos:line="147" pos:column="12"/></name><operator pos:line="147" pos:column="12">-&gt;<pos:position pos:line="147" pos:column="17"/></operator><name pos:line="147" pos:column="14">client_nickname<pos:position pos:line="147" pos:column="29"/></name></name> <operator pos:line="147" pos:column="30">=<pos:position pos:line="147" pos:column="31"/></operator> <name pos:line="147" pos:column="32">NULL<pos:position pos:line="147" pos:column="36"/></name></expr>;<pos:position pos:line="147" pos:column="37"/></expr_stmt></block></else></if>

  <if pos:line="149" pos:column="3">if<condition pos:line="149" pos:column="5">(<expr><call><name pos:line="149" pos:column="6">SSL_GetClientAuthDataHook<pos:position pos:line="149" pos:column="31"/></name><argument_list pos:line="149" pos:column="31">(<argument><expr><name pos:line="149" pos:column="32">model<pos:position pos:line="149" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="39">SelectClientCert<pos:position pos:line="149" pos:column="55"/></name></expr></argument>,
                               <argument><expr><operator pos:line="150" pos:column="32">(<pos:position pos:line="150" pos:column="33"/></operator><name pos:line="150" pos:column="33">void<pos:position pos:line="150" pos:column="37"/></name> <operator pos:line="150" pos:column="38">*<pos:position pos:line="150" pos:column="39"/></operator><operator pos:line="150" pos:column="39">)<pos:position pos:line="150" pos:column="40"/></operator><name pos:line="150" pos:column="40">connssl<pos:position pos:line="150" pos:column="47"/></name></expr></argument>)<pos:position pos:line="150" pos:column="48"/></argument_list></call> <operator pos:line="150" pos:column="49">!=<pos:position pos:line="150" pos:column="51"/></operator> <name pos:line="150" pos:column="52">SECSuccess<pos:position pos:line="150" pos:column="62"/></name></expr>)<pos:position pos:line="150" pos:column="63"/></condition><then pos:line="150" pos:column="63"> <block pos:line="150" pos:column="64">{
    <expr_stmt><expr><name pos:line="151" pos:column="5">result<pos:position pos:line="151" pos:column="11"/></name> <operator pos:line="151" pos:column="12">=<pos:position pos:line="151" pos:column="13"/></operator> <name pos:line="151" pos:column="14">CURLE_SSL_CERTPROBLEM<pos:position pos:line="151" pos:column="35"/></name></expr>;<pos:position pos:line="151" pos:column="36"/></expr_stmt>
    <goto pos:line="152" pos:column="5">goto <name pos:line="152" pos:column="10">error<pos:position pos:line="152" pos:column="15"/></name>;<pos:position pos:line="152" pos:column="16"/></goto>
  }<pos:position pos:line="153" pos:column="4"/></block></then></if>

  <if pos:line="155" pos:column="3">if<condition pos:line="155" pos:column="5">(<expr><name><name pos:line="155" pos:column="6">conn<pos:position pos:line="155" pos:column="10"/></name><operator pos:line="155" pos:column="10">-&gt;<pos:position pos:line="155" pos:column="15"/></operator><name pos:line="155" pos:column="12">proxy_ssl<pos:position pos:line="155" pos:column="21"/></name><index pos:line="155" pos:column="21">[<expr><name pos:line="155" pos:column="22">sockindex<pos:position pos:line="155" pos:column="31"/></name></expr>]<pos:position pos:line="155" pos:column="32"/></index></name><operator pos:line="155" pos:column="32">.<pos:position pos:line="155" pos:column="33"/></operator><name pos:line="155" pos:column="33">use<pos:position pos:line="155" pos:column="36"/></name></expr>)<pos:position pos:line="155" pos:column="37"/></condition><then pos:line="155" pos:column="37"> <block pos:line="155" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="156" pos:column="5">DEBUGASSERT<pos:position pos:line="156" pos:column="16"/></name><argument_list pos:line="156" pos:column="16">(<argument><expr><name pos:line="156" pos:column="17">ssl_connection_complete<pos:position pos:line="156" pos:column="40"/></name> <operator pos:line="156" pos:column="41">==<pos:position pos:line="156" pos:column="43"/></operator> <name><name pos:line="156" pos:column="44">conn<pos:position pos:line="156" pos:column="48"/></name><operator pos:line="156" pos:column="48">-&gt;<pos:position pos:line="156" pos:column="53"/></operator><name pos:line="156" pos:column="50">proxy_ssl<pos:position pos:line="156" pos:column="59"/></name><index pos:line="156" pos:column="59">[<expr><name pos:line="156" pos:column="60">sockindex<pos:position pos:line="156" pos:column="69"/></name></expr>]<pos:position pos:line="156" pos:column="70"/></index></name><operator pos:line="156" pos:column="70">.<pos:position pos:line="156" pos:column="71"/></operator><name pos:line="156" pos:column="71">state<pos:position pos:line="156" pos:column="76"/></name></expr></argument>)<pos:position pos:line="156" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="157" pos:column="5">DEBUGASSERT<pos:position pos:line="157" pos:column="16"/></name><argument_list pos:line="157" pos:column="16">(<argument><expr><name><name pos:line="157" pos:column="17">conn<pos:position pos:line="157" pos:column="21"/></name><operator pos:line="157" pos:column="21">-&gt;<pos:position pos:line="157" pos:column="26"/></operator><name pos:line="157" pos:column="23">proxy_ssl<pos:position pos:line="157" pos:column="32"/></name><index pos:line="157" pos:column="32">[<expr><name pos:line="157" pos:column="33">sockindex<pos:position pos:line="157" pos:column="42"/></name></expr>]<pos:position pos:line="157" pos:column="43"/></index></name><operator pos:line="157" pos:column="43">.<pos:position pos:line="157" pos:column="44"/></operator><name><name pos:line="157" pos:column="44">backend<pos:position pos:line="157" pos:column="51"/></name><operator pos:line="157" pos:column="51">-&gt;<pos:position pos:line="157" pos:column="56"/></operator><name pos:line="157" pos:column="53">handle<pos:position pos:line="157" pos:column="59"/></name></name> <operator pos:line="157" pos:column="60">!=<pos:position pos:line="157" pos:column="62"/></operator> <name pos:line="157" pos:column="63">NULL<pos:position pos:line="157" pos:column="67"/></name></expr></argument>)<pos:position pos:line="157" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name pos:line="158" pos:column="5">nspr_io<pos:position pos:line="158" pos:column="12"/></name> <operator pos:line="158" pos:column="13">=<pos:position pos:line="158" pos:column="14"/></operator> <name><name pos:line="158" pos:column="15">conn<pos:position pos:line="158" pos:column="19"/></name><operator pos:line="158" pos:column="19">-&gt;<pos:position pos:line="158" pos:column="24"/></operator><name pos:line="158" pos:column="21">proxy_ssl<pos:position pos:line="158" pos:column="30"/></name><index pos:line="158" pos:column="30">[<expr><name pos:line="158" pos:column="31">sockindex<pos:position pos:line="158" pos:column="40"/></name></expr>]<pos:position pos:line="158" pos:column="41"/></index></name><operator pos:line="158" pos:column="41">.<pos:position pos:line="158" pos:column="42"/></operator><name><name pos:line="158" pos:column="42">backend<pos:position pos:line="158" pos:column="49"/></name><operator pos:line="158" pos:column="49">-&gt;<pos:position pos:line="158" pos:column="54"/></operator><name pos:line="158" pos:column="51">handle<pos:position pos:line="158" pos:column="57"/></name></name></expr>;<pos:position pos:line="158" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="159" pos:column="5">second_layer<pos:position pos:line="159" pos:column="17"/></name> <operator pos:line="159" pos:column="18">=<pos:position pos:line="159" pos:column="19"/></operator> <name pos:line="159" pos:column="20">TRUE<pos:position pos:line="159" pos:column="24"/></name></expr>;<pos:position pos:line="159" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="160" pos:column="4"/></block></then>
  <else pos:line="161" pos:column="3">else <block pos:line="161" pos:column="8">{
    <comment type="block" pos:line="162" pos:column="5">/* wrap OS file descriptor by NSPR's file descriptor abstraction */</comment>
    <expr_stmt><expr><name pos:line="163" pos:column="5">nspr_io<pos:position pos:line="163" pos:column="12"/></name> <operator pos:line="163" pos:column="13">=<pos:position pos:line="163" pos:column="14"/></operator> <call><name pos:line="163" pos:column="15">PR_ImportTCPSocket<pos:position pos:line="163" pos:column="33"/></name><argument_list pos:line="163" pos:column="33">(<argument><expr><name pos:line="163" pos:column="34">sockfd<pos:position pos:line="163" pos:column="40"/></name></expr></argument>)<pos:position pos:line="163" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="42"/></expr_stmt>
    <if pos:line="164" pos:column="5">if<condition pos:line="164" pos:column="7">(<expr><operator pos:line="164" pos:column="8">!<pos:position pos:line="164" pos:column="9"/></operator><name pos:line="164" pos:column="9">nspr_io<pos:position pos:line="164" pos:column="16"/></name></expr>)<pos:position pos:line="164" pos:column="17"/></condition><then pos:line="164" pos:column="17">
      <block type="pseudo"><goto pos:line="165" pos:column="7">goto <name pos:line="165" pos:column="12">error<pos:position pos:line="165" pos:column="17"/></name>;<pos:position pos:line="165" pos:column="18"/></goto></block></then></if>
  }<pos:position pos:line="166" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="168" pos:column="3">/* create our own NSPR I/O layer */</comment>
  <expr_stmt><expr><name pos:line="169" pos:column="3">nspr_io_stub<pos:position pos:line="169" pos:column="15"/></name> <operator pos:line="169" pos:column="16">=<pos:position pos:line="169" pos:column="17"/></operator> <call><name pos:line="169" pos:column="18">PR_CreateIOLayerStub<pos:position pos:line="169" pos:column="38"/></name><argument_list pos:line="169" pos:column="38">(<argument><expr><name pos:line="169" pos:column="39">nspr_io_identity<pos:position pos:line="169" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="169" pos:column="57">&amp;<pos:position pos:line="169" pos:column="62"/></operator><name pos:line="169" pos:column="58">nspr_io_methods<pos:position pos:line="169" pos:column="73"/></name></expr></argument>)<pos:position pos:line="169" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="75"/></expr_stmt>
  <if pos:line="170" pos:column="3">if<condition pos:line="170" pos:column="5">(<expr><operator pos:line="170" pos:column="6">!<pos:position pos:line="170" pos:column="7"/></operator><name pos:line="170" pos:column="7">nspr_io_stub<pos:position pos:line="170" pos:column="19"/></name></expr>)<pos:position pos:line="170" pos:column="20"/></condition><then pos:line="170" pos:column="20"> <block pos:line="170" pos:column="21">{
    <if pos:line="171" pos:column="5">if<condition pos:line="171" pos:column="7">(<expr><operator pos:line="171" pos:column="8">!<pos:position pos:line="171" pos:column="9"/></operator><name pos:line="171" pos:column="9">second_layer<pos:position pos:line="171" pos:column="21"/></name></expr>)<pos:position pos:line="171" pos:column="22"/></condition><then pos:line="171" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="172" pos:column="7">PR_Close<pos:position pos:line="172" pos:column="15"/></name><argument_list pos:line="172" pos:column="15">(<argument><expr><name pos:line="172" pos:column="16">nspr_io<pos:position pos:line="172" pos:column="23"/></name></expr></argument>)<pos:position pos:line="172" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="25"/></expr_stmt></block></then></if>
    <goto pos:line="173" pos:column="5">goto <name pos:line="173" pos:column="10">error<pos:position pos:line="173" pos:column="15"/></name>;<pos:position pos:line="173" pos:column="16"/></goto>
  }<pos:position pos:line="174" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="176" pos:column="3">/* make the per-connection data accessible from NSPR I/O callbacks */</comment>
  <expr_stmt><expr><name><name pos:line="177" pos:column="3">nspr_io_stub<pos:position pos:line="177" pos:column="15"/></name><operator pos:line="177" pos:column="15">-&gt;<pos:position pos:line="177" pos:column="20"/></operator><name pos:line="177" pos:column="17">secret<pos:position pos:line="177" pos:column="23"/></name></name> <operator pos:line="177" pos:column="24">=<pos:position pos:line="177" pos:column="25"/></operator> <operator pos:line="177" pos:column="26">(<pos:position pos:line="177" pos:column="27"/></operator><name pos:line="177" pos:column="27">void<pos:position pos:line="177" pos:column="31"/></name> <operator pos:line="177" pos:column="32">*<pos:position pos:line="177" pos:column="33"/></operator><operator pos:line="177" pos:column="33">)<pos:position pos:line="177" pos:column="34"/></operator><name pos:line="177" pos:column="34">connssl<pos:position pos:line="177" pos:column="41"/></name></expr>;<pos:position pos:line="177" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="179" pos:column="3">/* push our new layer to the NSPR I/O stack */</comment>
  <if pos:line="180" pos:column="3">if<condition pos:line="180" pos:column="5">(<expr><call><name pos:line="180" pos:column="6">PR_PushIOLayer<pos:position pos:line="180" pos:column="20"/></name><argument_list pos:line="180" pos:column="20">(<argument><expr><name pos:line="180" pos:column="21">nspr_io<pos:position pos:line="180" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="30">PR_TOP_IO_LAYER<pos:position pos:line="180" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="47">nspr_io_stub<pos:position pos:line="180" pos:column="59"/></name></expr></argument>)<pos:position pos:line="180" pos:column="60"/></argument_list></call> <operator pos:line="180" pos:column="61">!=<pos:position pos:line="180" pos:column="63"/></operator> <name pos:line="180" pos:column="64">PR_SUCCESS<pos:position pos:line="180" pos:column="74"/></name></expr>)<pos:position pos:line="180" pos:column="75"/></condition><then pos:line="180" pos:column="75"> <block pos:line="180" pos:column="76">{
    <if pos:line="181" pos:column="5">if<condition pos:line="181" pos:column="7">(<expr><operator pos:line="181" pos:column="8">!<pos:position pos:line="181" pos:column="9"/></operator><name pos:line="181" pos:column="9">second_layer<pos:position pos:line="181" pos:column="21"/></name></expr>)<pos:position pos:line="181" pos:column="22"/></condition><then pos:line="181" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="182" pos:column="7">PR_Close<pos:position pos:line="182" pos:column="15"/></name><argument_list pos:line="182" pos:column="15">(<argument><expr><name pos:line="182" pos:column="16">nspr_io<pos:position pos:line="182" pos:column="23"/></name></expr></argument>)<pos:position pos:line="182" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="25"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="183" pos:column="5">PR_Close<pos:position pos:line="183" pos:column="13"/></name><argument_list pos:line="183" pos:column="13">(<argument><expr><name pos:line="183" pos:column="14">nspr_io_stub<pos:position pos:line="183" pos:column="26"/></name></expr></argument>)<pos:position pos:line="183" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="28"/></expr_stmt>
    <goto pos:line="184" pos:column="5">goto <name pos:line="184" pos:column="10">error<pos:position pos:line="184" pos:column="15"/></name>;<pos:position pos:line="184" pos:column="16"/></goto>
  }<pos:position pos:line="185" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="187" pos:column="3">/* import our model socket onto the current I/O stack */</comment>
  <expr_stmt><expr><name><name pos:line="188" pos:column="3">BACKEND<pos:position pos:line="188" pos:column="10"/></name><operator pos:line="188" pos:column="10">-&gt;<pos:position pos:line="188" pos:column="15"/></operator><name pos:line="188" pos:column="12">handle<pos:position pos:line="188" pos:column="18"/></name></name> <operator pos:line="188" pos:column="19">=<pos:position pos:line="188" pos:column="20"/></operator> <call><name pos:line="188" pos:column="21">SSL_ImportFD<pos:position pos:line="188" pos:column="33"/></name><argument_list pos:line="188" pos:column="33">(<argument><expr><name pos:line="188" pos:column="34">model<pos:position pos:line="188" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="41">nspr_io<pos:position pos:line="188" pos:column="48"/></name></expr></argument>)<pos:position pos:line="188" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="50"/></expr_stmt>
  <if pos:line="189" pos:column="3">if<condition pos:line="189" pos:column="5">(<expr><operator pos:line="189" pos:column="6">!<pos:position pos:line="189" pos:column="7"/></operator><name><name pos:line="189" pos:column="7">BACKEND<pos:position pos:line="189" pos:column="14"/></name><operator pos:line="189" pos:column="14">-&gt;<pos:position pos:line="189" pos:column="19"/></operator><name pos:line="189" pos:column="16">handle<pos:position pos:line="189" pos:column="22"/></name></name></expr>)<pos:position pos:line="189" pos:column="23"/></condition><then pos:line="189" pos:column="23"> <block pos:line="189" pos:column="24">{
    <if pos:line="190" pos:column="5">if<condition pos:line="190" pos:column="7">(<expr><operator pos:line="190" pos:column="8">!<pos:position pos:line="190" pos:column="9"/></operator><name pos:line="190" pos:column="9">second_layer<pos:position pos:line="190" pos:column="21"/></name></expr>)<pos:position pos:line="190" pos:column="22"/></condition><then pos:line="190" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="191" pos:column="7">PR_Close<pos:position pos:line="191" pos:column="15"/></name><argument_list pos:line="191" pos:column="15">(<argument><expr><name pos:line="191" pos:column="16">nspr_io<pos:position pos:line="191" pos:column="23"/></name></expr></argument>)<pos:position pos:line="191" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="25"/></expr_stmt></block></then></if>
    <goto pos:line="192" pos:column="5">goto <name pos:line="192" pos:column="10">error<pos:position pos:line="192" pos:column="15"/></name>;<pos:position pos:line="192" pos:column="16"/></goto>
  }<pos:position pos:line="193" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="195" pos:column="3">PR_Close<pos:position pos:line="195" pos:column="11"/></name><argument_list pos:line="195" pos:column="11">(<argument><expr><name pos:line="195" pos:column="12">model<pos:position pos:line="195" pos:column="17"/></name></expr></argument>)<pos:position pos:line="195" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="19"/></expr_stmt> <comment type="block" pos:line="195" pos:column="20">/* We don't need this any more */</comment>
  <expr_stmt><expr><name pos:line="196" pos:column="3">model<pos:position pos:line="196" pos:column="8"/></name> <operator pos:line="196" pos:column="9">=<pos:position pos:line="196" pos:column="10"/></operator> <name pos:line="196" pos:column="11">NULL<pos:position pos:line="196" pos:column="15"/></name></expr>;<pos:position pos:line="196" pos:column="16"/></expr_stmt>

  <comment type="block" pos:line="198" pos:column="3">/* This is the password associated with the cert that we're using */</comment>
  <if pos:line="199" pos:column="3">if<condition pos:line="199" pos:column="5">(<expr><call><name pos:line="199" pos:column="6">SSL_SET_OPTION<pos:position pos:line="199" pos:column="20"/></name><argument_list pos:line="199" pos:column="20">(<argument><expr><name pos:line="199" pos:column="21">key_passwd<pos:position pos:line="199" pos:column="31"/></name></expr></argument>)<pos:position pos:line="199" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="199" pos:column="33"/></condition><then pos:line="199" pos:column="33"> <block pos:line="199" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="200" pos:column="5">SSL_SetPKCS11PinArg<pos:position pos:line="200" pos:column="24"/></name><argument_list pos:line="200" pos:column="24">(<argument><expr><name><name pos:line="200" pos:column="25">BACKEND<pos:position pos:line="200" pos:column="32"/></name><operator pos:line="200" pos:column="32">-&gt;<pos:position pos:line="200" pos:column="37"/></operator><name pos:line="200" pos:column="34">handle<pos:position pos:line="200" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name pos:line="200" pos:column="42">SSL_SET_OPTION<pos:position pos:line="200" pos:column="56"/></name><argument_list pos:line="200" pos:column="56">(<argument><expr><name pos:line="200" pos:column="57">key_passwd<pos:position pos:line="200" pos:column="67"/></name></expr></argument>)<pos:position pos:line="200" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="200" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="70"/></expr_stmt>
  }<pos:position pos:line="201" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="203" pos:column="1">#<cpp:directive pos:line="203" pos:column="2">ifdef<pos:position pos:line="203" pos:column="7"/></cpp:directive> <name pos:line="203" pos:column="8">SSL_ENABLE_OCSP_STAPLING<pos:position pos:line="203" pos:column="32"/></name></cpp:ifdef>
  <if pos:line="204" pos:column="3">if<condition pos:line="204" pos:column="5">(<expr><call><name pos:line="204" pos:column="6">SSL_CONN_CONFIG<pos:position pos:line="204" pos:column="21"/></name><argument_list pos:line="204" pos:column="21">(<argument><expr><name pos:line="204" pos:column="22">verifystatus<pos:position pos:line="204" pos:column="34"/></name></expr></argument>)<pos:position pos:line="204" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="204" pos:column="36"/></condition><then pos:line="204" pos:column="36"> <block pos:line="204" pos:column="37">{
    <if pos:line="205" pos:column="5">if<condition pos:line="205" pos:column="7">(<expr><call><name pos:line="205" pos:column="8">SSL_OptionSet<pos:position pos:line="205" pos:column="21"/></name><argument_list pos:line="205" pos:column="21">(<argument><expr><name><name pos:line="205" pos:column="22">BACKEND<pos:position pos:line="205" pos:column="29"/></name><operator pos:line="205" pos:column="29">-&gt;<pos:position pos:line="205" pos:column="34"/></operator><name pos:line="205" pos:column="31">handle<pos:position pos:line="205" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="39">SSL_ENABLE_OCSP_STAPLING<pos:position pos:line="205" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="65">PR_TRUE<pos:position pos:line="205" pos:column="72"/></name></expr></argument>)<pos:position pos:line="205" pos:column="73"/></argument_list></call>
        <operator pos:line="206" pos:column="9">!=<pos:position pos:line="206" pos:column="11"/></operator> <name pos:line="206" pos:column="12">SECSuccess<pos:position pos:line="206" pos:column="22"/></name></expr>)<pos:position pos:line="206" pos:column="23"/></condition><then pos:line="206" pos:column="23">
      <block type="pseudo"><goto pos:line="207" pos:column="7">goto <name pos:line="207" pos:column="12">error<pos:position pos:line="207" pos:column="17"/></name>;<pos:position pos:line="207" pos:column="18"/></goto></block></then></if>
  }<pos:position pos:line="208" pos:column="4"/></block></then></if>
<cpp:endif pos:line="209" pos:column="1">#<cpp:directive pos:line="209" pos:column="2">endif<pos:position pos:line="209" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="211" pos:column="1">#<cpp:directive pos:line="211" pos:column="2">ifdef<pos:position pos:line="211" pos:column="7"/></cpp:directive> <name pos:line="211" pos:column="8">SSL_ENABLE_NPN<pos:position pos:line="211" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="212" pos:column="3">if<condition pos:line="212" pos:column="5">(<expr><call><name pos:line="212" pos:column="6">SSL_OptionSet<pos:position pos:line="212" pos:column="19"/></name><argument_list pos:line="212" pos:column="19">(<argument><expr><name><name pos:line="212" pos:column="20">BACKEND<pos:position pos:line="212" pos:column="27"/></name><operator pos:line="212" pos:column="27">-&gt;<pos:position pos:line="212" pos:column="32"/></operator><name pos:line="212" pos:column="29">handle<pos:position pos:line="212" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="37">SSL_ENABLE_NPN<pos:position pos:line="212" pos:column="51"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="212" pos:column="53">conn<pos:position pos:line="212" pos:column="57"/></name><operator pos:line="212" pos:column="57">-&gt;<pos:position pos:line="212" pos:column="62"/></operator><name pos:line="212" pos:column="59">bits<pos:position pos:line="212" pos:column="63"/></name><operator pos:line="212" pos:column="63">.<pos:position pos:line="212" pos:column="64"/></operator><name pos:line="212" pos:column="64">tls_enable_npn<pos:position pos:line="212" pos:column="78"/></name></name></expr>
                   ?<pos:position pos:line="213" pos:column="21"/></condition><then pos:line="213" pos:column="21"> <expr><name pos:line="213" pos:column="22">PR_TRUE<pos:position pos:line="213" pos:column="29"/></name></expr> <pos:position pos:line="213" pos:column="30"/></then><else pos:line="213" pos:column="30">: <expr><name pos:line="213" pos:column="32">PR_FALSE<pos:position pos:line="213" pos:column="40"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="213" pos:column="41"/></argument_list></call> <operator pos:line="213" pos:column="42">!=<pos:position pos:line="213" pos:column="44"/></operator> <name pos:line="213" pos:column="45">SECSuccess<pos:position pos:line="213" pos:column="55"/></name></expr>)<pos:position pos:line="213" pos:column="56"/></condition><then pos:line="213" pos:column="56">
    <block type="pseudo"><goto pos:line="214" pos:column="5">goto <name pos:line="214" pos:column="10">error<pos:position pos:line="214" pos:column="15"/></name>;<pos:position pos:line="214" pos:column="16"/></goto></block></then></if>
<cpp:endif pos:line="215" pos:column="1">#<cpp:directive pos:line="215" pos:column="2">endif<pos:position pos:line="215" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="217" pos:column="1">#<cpp:directive pos:line="217" pos:column="2">ifdef<pos:position pos:line="217" pos:column="7"/></cpp:directive> <name pos:line="217" pos:column="8">SSL_ENABLE_ALPN<pos:position pos:line="217" pos:column="23"/></name></cpp:ifdef>
  <if pos:line="218" pos:column="3">if<condition pos:line="218" pos:column="5">(<expr><call><name pos:line="218" pos:column="6">SSL_OptionSet<pos:position pos:line="218" pos:column="19"/></name><argument_list pos:line="218" pos:column="19">(<argument><expr><name><name pos:line="218" pos:column="20">BACKEND<pos:position pos:line="218" pos:column="27"/></name><operator pos:line="218" pos:column="27">-&gt;<pos:position pos:line="218" pos:column="32"/></operator><name pos:line="218" pos:column="29">handle<pos:position pos:line="218" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="37">SSL_ENABLE_ALPN<pos:position pos:line="218" pos:column="52"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="218" pos:column="54">conn<pos:position pos:line="218" pos:column="58"/></name><operator pos:line="218" pos:column="58">-&gt;<pos:position pos:line="218" pos:column="63"/></operator><name pos:line="218" pos:column="60">bits<pos:position pos:line="218" pos:column="64"/></name><operator pos:line="218" pos:column="64">.<pos:position pos:line="218" pos:column="65"/></operator><name pos:line="218" pos:column="65">tls_enable_alpn<pos:position pos:line="218" pos:column="80"/></name></name></expr>
                   ?<pos:position pos:line="219" pos:column="21"/></condition><then pos:line="219" pos:column="21"> <expr><name pos:line="219" pos:column="22">PR_TRUE<pos:position pos:line="219" pos:column="29"/></name></expr> <pos:position pos:line="219" pos:column="30"/></then><else pos:line="219" pos:column="30">: <expr><name pos:line="219" pos:column="32">PR_FALSE<pos:position pos:line="219" pos:column="40"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="219" pos:column="41"/></argument_list></call> <operator pos:line="219" pos:column="42">!=<pos:position pos:line="219" pos:column="44"/></operator> <name pos:line="219" pos:column="45">SECSuccess<pos:position pos:line="219" pos:column="55"/></name></expr>)<pos:position pos:line="219" pos:column="56"/></condition><then pos:line="219" pos:column="56">
    <block type="pseudo"><goto pos:line="220" pos:column="5">goto <name pos:line="220" pos:column="10">error<pos:position pos:line="220" pos:column="15"/></name>;<pos:position pos:line="220" pos:column="16"/></goto></block></then></if>
<cpp:endif pos:line="221" pos:column="1">#<cpp:directive pos:line="221" pos:column="2">endif<pos:position pos:line="221" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="223" pos:column="1">#<cpp:directive pos:line="223" pos:column="2">if<pos:position pos:line="223" pos:column="4"/></cpp:directive> <expr><name pos:line="223" pos:column="5">NSSVERNUM<pos:position pos:line="223" pos:column="14"/></name> <operator pos:line="223" pos:column="15">&gt;=<pos:position pos:line="223" pos:column="20"/></operator> <literal type="number" pos:line="223" pos:column="18">0x030f04<pos:position pos:line="223" pos:column="26"/></literal></expr></cpp:if> <comment type="block" pos:line="223" pos:column="27">/* 3.15.4 */</comment>
  <if pos:line="224" pos:column="3">if<condition pos:line="224" pos:column="5">(<expr><name><name pos:line="224" pos:column="6">data<pos:position pos:line="224" pos:column="10"/></name><operator pos:line="224" pos:column="10">-&gt;<pos:position pos:line="224" pos:column="15"/></operator><name pos:line="224" pos:column="12">set<pos:position pos:line="224" pos:column="15"/></name><operator pos:line="224" pos:column="15">.<pos:position pos:line="224" pos:column="16"/></operator><name pos:line="224" pos:column="16">ssl<pos:position pos:line="224" pos:column="19"/></name><operator pos:line="224" pos:column="19">.<pos:position pos:line="224" pos:column="20"/></operator><name pos:line="224" pos:column="20">falsestart<pos:position pos:line="224" pos:column="30"/></name></name></expr>)<pos:position pos:line="224" pos:column="31"/></condition><then pos:line="224" pos:column="31"> <block pos:line="224" pos:column="32">{
    <if pos:line="225" pos:column="5">if<condition pos:line="225" pos:column="7">(<expr><call><name pos:line="225" pos:column="8">SSL_OptionSet<pos:position pos:line="225" pos:column="21"/></name><argument_list pos:line="225" pos:column="21">(<argument><expr><name><name pos:line="225" pos:column="22">BACKEND<pos:position pos:line="225" pos:column="29"/></name><operator pos:line="225" pos:column="29">-&gt;<pos:position pos:line="225" pos:column="34"/></operator><name pos:line="225" pos:column="31">handle<pos:position pos:line="225" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="39">SSL_ENABLE_FALSE_START<pos:position pos:line="225" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="63">PR_TRUE<pos:position pos:line="225" pos:column="70"/></name></expr></argument>)<pos:position pos:line="225" pos:column="71"/></argument_list></call>
        <operator pos:line="226" pos:column="9">!=<pos:position pos:line="226" pos:column="11"/></operator> <name pos:line="226" pos:column="12">SECSuccess<pos:position pos:line="226" pos:column="22"/></name></expr>)<pos:position pos:line="226" pos:column="23"/></condition><then pos:line="226" pos:column="23">
      <block type="pseudo"><goto pos:line="227" pos:column="7">goto <name pos:line="227" pos:column="12">error<pos:position pos:line="227" pos:column="17"/></name>;<pos:position pos:line="227" pos:column="18"/></goto></block></then></if>

    <if pos:line="229" pos:column="5">if<condition pos:line="229" pos:column="7">(<expr><call><name pos:line="229" pos:column="8">SSL_SetCanFalseStartCallback<pos:position pos:line="229" pos:column="36"/></name><argument_list pos:line="229" pos:column="36">(<argument><expr><name><name pos:line="229" pos:column="37">BACKEND<pos:position pos:line="229" pos:column="44"/></name><operator pos:line="229" pos:column="44">-&gt;<pos:position pos:line="229" pos:column="49"/></operator><name pos:line="229" pos:column="46">handle<pos:position pos:line="229" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="54">CanFalseStartCallback<pos:position pos:line="229" pos:column="75"/></name></expr></argument>,
        <argument><expr><name pos:line="230" pos:column="9">conn<pos:position pos:line="230" pos:column="13"/></name></expr></argument>)<pos:position pos:line="230" pos:column="14"/></argument_list></call> <operator pos:line="230" pos:column="15">!=<pos:position pos:line="230" pos:column="17"/></operator> <name pos:line="230" pos:column="18">SECSuccess<pos:position pos:line="230" pos:column="28"/></name></expr>)<pos:position pos:line="230" pos:column="29"/></condition><then pos:line="230" pos:column="29">
      <block type="pseudo"><goto pos:line="231" pos:column="7">goto <name pos:line="231" pos:column="12">error<pos:position pos:line="231" pos:column="17"/></name>;<pos:position pos:line="231" pos:column="18"/></goto></block></then></if>
  }<pos:position pos:line="232" pos:column="4"/></block></then></if>
<cpp:endif pos:line="233" pos:column="1">#<cpp:directive pos:line="233" pos:column="2">endif<pos:position pos:line="233" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="235" pos:column="1">#<cpp:directive pos:line="235" pos:column="2">if<pos:position pos:line="235" pos:column="4"/></cpp:directive> <expr><call><name pos:line="235" pos:column="5">defined<pos:position pos:line="235" pos:column="12"/></name><argument_list pos:line="235" pos:column="12">(<argument><expr><name pos:line="235" pos:column="13">SSL_ENABLE_NPN<pos:position pos:line="235" pos:column="27"/></name></expr></argument>)<pos:position pos:line="235" pos:column="28"/></argument_list></call> <operator pos:line="235" pos:column="29">||<pos:position pos:line="235" pos:column="31"/></operator> <call><name pos:line="235" pos:column="32">defined<pos:position pos:line="235" pos:column="39"/></name><argument_list pos:line="235" pos:column="39">(<argument><expr><name pos:line="235" pos:column="40">SSL_ENABLE_ALPN<pos:position pos:line="235" pos:column="55"/></name></expr></argument>)<pos:position pos:line="235" pos:column="56"/></argument_list></call></expr></cpp:if>
  <if pos:line="236" pos:column="3">if<condition pos:line="236" pos:column="5">(<expr><name><name pos:line="236" pos:column="6">conn<pos:position pos:line="236" pos:column="10"/></name><operator pos:line="236" pos:column="10">-&gt;<pos:position pos:line="236" pos:column="15"/></operator><name pos:line="236" pos:column="12">bits<pos:position pos:line="236" pos:column="16"/></name><operator pos:line="236" pos:column="16">.<pos:position pos:line="236" pos:column="17"/></operator><name pos:line="236" pos:column="17">tls_enable_npn<pos:position pos:line="236" pos:column="31"/></name></name> <operator pos:line="236" pos:column="32">||<pos:position pos:line="236" pos:column="34"/></operator> <name><name pos:line="236" pos:column="35">conn<pos:position pos:line="236" pos:column="39"/></name><operator pos:line="236" pos:column="39">-&gt;<pos:position pos:line="236" pos:column="44"/></operator><name pos:line="236" pos:column="41">bits<pos:position pos:line="236" pos:column="45"/></name><operator pos:line="236" pos:column="45">.<pos:position pos:line="236" pos:column="46"/></operator><name pos:line="236" pos:column="46">tls_enable_alpn<pos:position pos:line="236" pos:column="61"/></name></name></expr>)<pos:position pos:line="236" pos:column="62"/></condition><then pos:line="236" pos:column="62"> <block pos:line="236" pos:column="63">{
    <decl_stmt><decl><type><name pos:line="237" pos:column="5">int<pos:position pos:line="237" pos:column="8"/></name></type> <name pos:line="237" pos:column="9">cur<pos:position pos:line="237" pos:column="12"/></name> <init pos:line="237" pos:column="13">= <expr><literal type="number" pos:line="237" pos:column="15">0<pos:position pos:line="237" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="237" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="238" pos:column="5">unsigned<pos:position pos:line="238" pos:column="13"/></name> <name pos:line="238" pos:column="14">char<pos:position pos:line="238" pos:column="18"/></name></type> <name><name pos:line="238" pos:column="19">protocols<pos:position pos:line="238" pos:column="28"/></name><index pos:line="238" pos:column="28">[<expr><literal type="number" pos:line="238" pos:column="29">128<pos:position pos:line="238" pos:column="32"/></literal></expr>]<pos:position pos:line="238" pos:column="33"/></index></name></decl>;<pos:position pos:line="238" pos:column="34"/></decl_stmt>

<cpp:ifdef pos:line="240" pos:column="1">#<cpp:directive pos:line="240" pos:column="2">ifdef<pos:position pos:line="240" pos:column="7"/></cpp:directive> <name pos:line="240" pos:column="8">USE_NGHTTP2<pos:position pos:line="240" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="241" pos:column="5">if<condition pos:line="241" pos:column="7">(<expr><name><name pos:line="241" pos:column="8">data<pos:position pos:line="241" pos:column="12"/></name><operator pos:line="241" pos:column="12">-&gt;<pos:position pos:line="241" pos:column="17"/></operator><name pos:line="241" pos:column="14">set<pos:position pos:line="241" pos:column="17"/></name><operator pos:line="241" pos:column="17">.<pos:position pos:line="241" pos:column="18"/></operator><name pos:line="241" pos:column="18">httpversion<pos:position pos:line="241" pos:column="29"/></name></name> <operator pos:line="241" pos:column="30">&gt;=<pos:position pos:line="241" pos:column="35"/></operator> <name pos:line="241" pos:column="33">CURL_HTTP_VERSION_2<pos:position pos:line="241" pos:column="52"/></name> <operator pos:line="241" pos:column="53">&amp;&amp;<pos:position pos:line="241" pos:column="63"/></operator>
       <operator pos:line="242" pos:column="8">(<pos:position pos:line="242" pos:column="9"/></operator><operator pos:line="242" pos:column="9">!<pos:position pos:line="242" pos:column="10"/></operator><call><name pos:line="242" pos:column="10">SSL_IS_PROXY<pos:position pos:line="242" pos:column="22"/></name><argument_list pos:line="242" pos:column="22">()<pos:position pos:line="242" pos:column="24"/></argument_list></call> <operator pos:line="242" pos:column="25">||<pos:position pos:line="242" pos:column="27"/></operator> <operator pos:line="242" pos:column="28">!<pos:position pos:line="242" pos:column="29"/></operator><name><name pos:line="242" pos:column="29">conn<pos:position pos:line="242" pos:column="33"/></name><operator pos:line="242" pos:column="33">-&gt;<pos:position pos:line="242" pos:column="38"/></operator><name pos:line="242" pos:column="35">bits<pos:position pos:line="242" pos:column="39"/></name><operator pos:line="242" pos:column="39">.<pos:position pos:line="242" pos:column="40"/></operator><name pos:line="242" pos:column="40">tunnel_proxy<pos:position pos:line="242" pos:column="52"/></name></name><operator pos:line="242" pos:column="52">)<pos:position pos:line="242" pos:column="53"/></operator></expr>)<pos:position pos:line="242" pos:column="54"/></condition><then pos:line="242" pos:column="54"> <block pos:line="242" pos:column="55">{
      <expr_stmt><expr><name><name pos:line="243" pos:column="7">protocols<pos:position pos:line="243" pos:column="16"/></name><index pos:line="243" pos:column="16">[<expr><name pos:line="243" pos:column="17">cur<pos:position pos:line="243" pos:column="20"/></name><operator pos:line="243" pos:column="20">++<pos:position pos:line="243" pos:column="22"/></operator></expr>]<pos:position pos:line="243" pos:column="23"/></index></name> <operator pos:line="243" pos:column="24">=<pos:position pos:line="243" pos:column="25"/></operator> <name pos:line="243" pos:column="26">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="243" pos:column="54"/></name></expr>;<pos:position pos:line="243" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="244" pos:column="7">memcpy<pos:position pos:line="244" pos:column="13"/></name><argument_list pos:line="244" pos:column="13">(<argument><expr><operator pos:line="244" pos:column="14">&amp;<pos:position pos:line="244" pos:column="19"/></operator><name><name pos:line="244" pos:column="15">protocols<pos:position pos:line="244" pos:column="24"/></name><index pos:line="244" pos:column="24">[<expr><name pos:line="244" pos:column="25">cur<pos:position pos:line="244" pos:column="28"/></name></expr>]<pos:position pos:line="244" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="244" pos:column="31">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="244" pos:column="55"/></name></expr></argument>,
          <argument><expr><name pos:line="245" pos:column="11">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="245" pos:column="39"/></name></expr></argument>)<pos:position pos:line="245" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="246" pos:column="7">cur<pos:position pos:line="246" pos:column="10"/></name> <operator pos:line="246" pos:column="11">+=<pos:position pos:line="246" pos:column="13"/></operator> <name pos:line="246" pos:column="14">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="246" pos:column="42"/></name></expr>;<pos:position pos:line="246" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="247" pos:column="6"/></block></then></if>
<cpp:endif pos:line="248" pos:column="1">#<cpp:directive pos:line="248" pos:column="2">endif<pos:position pos:line="248" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name pos:line="249" pos:column="5">protocols<pos:position pos:line="249" pos:column="14"/></name><index pos:line="249" pos:column="14">[<expr><name pos:line="249" pos:column="15">cur<pos:position pos:line="249" pos:column="18"/></name><operator pos:line="249" pos:column="18">++<pos:position pos:line="249" pos:column="20"/></operator></expr>]<pos:position pos:line="249" pos:column="21"/></index></name> <operator pos:line="249" pos:column="22">=<pos:position pos:line="249" pos:column="23"/></operator> <name pos:line="249" pos:column="24">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="249" pos:column="44"/></name></expr>;<pos:position pos:line="249" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="250" pos:column="5">memcpy<pos:position pos:line="250" pos:column="11"/></name><argument_list pos:line="250" pos:column="11">(<argument><expr><operator pos:line="250" pos:column="12">&amp;<pos:position pos:line="250" pos:column="17"/></operator><name><name pos:line="250" pos:column="13">protocols<pos:position pos:line="250" pos:column="22"/></name><index pos:line="250" pos:column="22">[<expr><name pos:line="250" pos:column="23">cur<pos:position pos:line="250" pos:column="26"/></name></expr>]<pos:position pos:line="250" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="29">ALPN_HTTP_1_1<pos:position pos:line="250" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="44">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="250" pos:column="64"/></name></expr></argument>)<pos:position pos:line="250" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name pos:line="251" pos:column="5">cur<pos:position pos:line="251" pos:column="8"/></name> <operator pos:line="251" pos:column="9">+=<pos:position pos:line="251" pos:column="11"/></operator> <name pos:line="251" pos:column="12">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="251" pos:column="32"/></name></expr>;<pos:position pos:line="251" pos:column="33"/></expr_stmt>

    <if pos:line="253" pos:column="5">if<condition pos:line="253" pos:column="7">(<expr><call><name pos:line="253" pos:column="8">SSL_SetNextProtoNego<pos:position pos:line="253" pos:column="28"/></name><argument_list pos:line="253" pos:column="28">(<argument><expr><name><name pos:line="253" pos:column="29">BACKEND<pos:position pos:line="253" pos:column="36"/></name><operator pos:line="253" pos:column="36">-&gt;<pos:position pos:line="253" pos:column="41"/></operator><name pos:line="253" pos:column="38">handle<pos:position pos:line="253" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="46">protocols<pos:position pos:line="253" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="57">cur<pos:position pos:line="253" pos:column="60"/></name></expr></argument>)<pos:position pos:line="253" pos:column="61"/></argument_list></call> <operator pos:line="253" pos:column="62">!=<pos:position pos:line="253" pos:column="64"/></operator> <name pos:line="253" pos:column="65">SECSuccess<pos:position pos:line="253" pos:column="75"/></name></expr>)<pos:position pos:line="253" pos:column="76"/></condition><then pos:line="253" pos:column="76">
      <block type="pseudo"><goto pos:line="254" pos:column="7">goto <name pos:line="254" pos:column="12">error<pos:position pos:line="254" pos:column="17"/></name>;<pos:position pos:line="254" pos:column="18"/></goto></block></then></if>
  }<pos:position pos:line="255" pos:column="4"/></block></then></if>
<cpp:endif pos:line="256" pos:column="1">#<cpp:directive pos:line="256" pos:column="2">endif<pos:position pos:line="256" pos:column="7"/></cpp:directive></cpp:endif>


  <comment type="block" pos:line="259" pos:column="3">/* Force handshake on next I/O */</comment>
  <if pos:line="260" pos:column="3">if<condition pos:line="260" pos:column="5">(<expr><call><name pos:line="260" pos:column="6">SSL_ResetHandshake<pos:position pos:line="260" pos:column="24"/></name><argument_list pos:line="260" pos:column="24">(<argument><expr><name><name pos:line="260" pos:column="25">BACKEND<pos:position pos:line="260" pos:column="32"/></name><operator pos:line="260" pos:column="32">-&gt;<pos:position pos:line="260" pos:column="37"/></operator><name pos:line="260" pos:column="34">handle<pos:position pos:line="260" pos:column="40"/></name></name></expr></argument>, <comment type="block" pos:line="260" pos:column="42">/* asServer */</comment> <argument><expr><name pos:line="260" pos:column="57">PR_FALSE<pos:position pos:line="260" pos:column="65"/></name></expr></argument>)<pos:position pos:line="260" pos:column="66"/></argument_list></call>
      <operator pos:line="261" pos:column="7">!=<pos:position pos:line="261" pos:column="9"/></operator> <name pos:line="261" pos:column="10">SECSuccess<pos:position pos:line="261" pos:column="20"/></name></expr>)<pos:position pos:line="261" pos:column="21"/></condition><then pos:line="261" pos:column="21">
    <block type="pseudo"><goto pos:line="262" pos:column="5">goto <name pos:line="262" pos:column="10">error<pos:position pos:line="262" pos:column="15"/></name>;<pos:position pos:line="262" pos:column="16"/></goto></block></then></if>

  <comment type="block" pos:line="264" pos:column="3">/* propagate hostname to the TLS layer */</comment>
  <if pos:line="265" pos:column="3">if<condition pos:line="265" pos:column="5">(<expr><call><name pos:line="265" pos:column="6">SSL_SetURL<pos:position pos:line="265" pos:column="16"/></name><argument_list pos:line="265" pos:column="16">(<argument><expr><name><name pos:line="265" pos:column="17">BACKEND<pos:position pos:line="265" pos:column="24"/></name><operator pos:line="265" pos:column="24">-&gt;<pos:position pos:line="265" pos:column="29"/></operator><name pos:line="265" pos:column="26">handle<pos:position pos:line="265" pos:column="32"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="265" pos:column="34">SSL_IS_PROXY<pos:position pos:line="265" pos:column="46"/></name><argument_list pos:line="265" pos:column="46">()<pos:position pos:line="265" pos:column="48"/></argument_list></call></expr> ?<pos:position pos:line="265" pos:column="50"/></condition><then pos:line="265" pos:column="50"> <expr><name><name pos:line="265" pos:column="51">conn<pos:position pos:line="265" pos:column="55"/></name><operator pos:line="265" pos:column="55">-&gt;<pos:position pos:line="265" pos:column="60"/></operator><name pos:line="265" pos:column="57">http_proxy<pos:position pos:line="265" pos:column="67"/></name><operator pos:line="265" pos:column="67">.<pos:position pos:line="265" pos:column="68"/></operator><name pos:line="265" pos:column="68">host<pos:position pos:line="265" pos:column="72"/></name><operator pos:line="265" pos:column="72">.<pos:position pos:line="265" pos:column="73"/></operator><name pos:line="265" pos:column="73">name<pos:position pos:line="265" pos:column="77"/></name></name></expr> <pos:position pos:line="265" pos:column="78"/></then><else pos:line="265" pos:column="78">:
                <expr><name><name pos:line="266" pos:column="17">conn<pos:position pos:line="266" pos:column="21"/></name><operator pos:line="266" pos:column="21">-&gt;<pos:position pos:line="266" pos:column="26"/></operator><name pos:line="266" pos:column="23">host<pos:position pos:line="266" pos:column="27"/></name><operator pos:line="266" pos:column="27">.<pos:position pos:line="266" pos:column="28"/></operator><name pos:line="266" pos:column="28">name<pos:position pos:line="266" pos:column="32"/></name></name></expr></else></ternary></expr></argument>)<pos:position pos:line="266" pos:column="33"/></argument_list></call> <operator pos:line="266" pos:column="34">!=<pos:position pos:line="266" pos:column="36"/></operator> <name pos:line="266" pos:column="37">SECSuccess<pos:position pos:line="266" pos:column="47"/></name></expr>)<pos:position pos:line="266" pos:column="48"/></condition><then pos:line="266" pos:column="48">
    <block type="pseudo"><goto pos:line="267" pos:column="5">goto <name pos:line="267" pos:column="10">error<pos:position pos:line="267" pos:column="15"/></name>;<pos:position pos:line="267" pos:column="16"/></goto></block></then></if>

  <comment type="block" pos:line="269" pos:column="3">/* prevent NSS from re-using the session for a different hostname */</comment>
  <if pos:line="270" pos:column="3">if<condition pos:line="270" pos:column="5">(<expr><call><name pos:line="270" pos:column="6">SSL_SetSockPeerID<pos:position pos:line="270" pos:column="23"/></name><argument_list pos:line="270" pos:column="23">(<argument><expr><name><name pos:line="270" pos:column="24">BACKEND<pos:position pos:line="270" pos:column="31"/></name><operator pos:line="270" pos:column="31">-&gt;<pos:position pos:line="270" pos:column="36"/></operator><name pos:line="270" pos:column="33">handle<pos:position pos:line="270" pos:column="39"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="270" pos:column="41">SSL_IS_PROXY<pos:position pos:line="270" pos:column="53"/></name><argument_list pos:line="270" pos:column="53">()<pos:position pos:line="270" pos:column="55"/></argument_list></call></expr> ?<pos:position pos:line="270" pos:column="57"/></condition><then pos:line="270" pos:column="57">
                       <expr><name><name pos:line="271" pos:column="24">conn<pos:position pos:line="271" pos:column="28"/></name><operator pos:line="271" pos:column="28">-&gt;<pos:position pos:line="271" pos:column="33"/></operator><name pos:line="271" pos:column="30">http_proxy<pos:position pos:line="271" pos:column="40"/></name><operator pos:line="271" pos:column="40">.<pos:position pos:line="271" pos:column="41"/></operator><name pos:line="271" pos:column="41">host<pos:position pos:line="271" pos:column="45"/></name><operator pos:line="271" pos:column="45">.<pos:position pos:line="271" pos:column="46"/></operator><name pos:line="271" pos:column="46">name<pos:position pos:line="271" pos:column="50"/></name></name></expr> <pos:position pos:line="271" pos:column="51"/></then><else pos:line="271" pos:column="51">: <expr><name><name pos:line="271" pos:column="53">conn<pos:position pos:line="271" pos:column="57"/></name><operator pos:line="271" pos:column="57">-&gt;<pos:position pos:line="271" pos:column="62"/></operator><name pos:line="271" pos:column="59">host<pos:position pos:line="271" pos:column="63"/></name><operator pos:line="271" pos:column="63">.<pos:position pos:line="271" pos:column="64"/></operator><name pos:line="271" pos:column="64">name<pos:position pos:line="271" pos:column="68"/></name></name></expr></else></ternary></expr></argument>)<pos:position pos:line="271" pos:column="69"/></argument_list></call>
     <operator pos:line="272" pos:column="6">!=<pos:position pos:line="272" pos:column="8"/></operator> <name pos:line="272" pos:column="9">SECSuccess<pos:position pos:line="272" pos:column="19"/></name></expr>)<pos:position pos:line="272" pos:column="20"/></condition><then pos:line="272" pos:column="20">
    <block type="pseudo"><goto pos:line="273" pos:column="5">goto <name pos:line="273" pos:column="10">error<pos:position pos:line="273" pos:column="15"/></name>;<pos:position pos:line="273" pos:column="16"/></goto></block></then></if>

  <return pos:line="275" pos:column="3">return <expr><name pos:line="275" pos:column="10">CURLE_OK<pos:position pos:line="275" pos:column="18"/></name></expr>;<pos:position pos:line="275" pos:column="19"/></return>

<label><name pos:line="277" pos:column="1">error<pos:position pos:line="277" pos:column="6"/></name>:<pos:position pos:line="277" pos:column="7"/></label>
  <if pos:line="278" pos:column="3">if<condition pos:line="278" pos:column="5">(<expr><name pos:line="278" pos:column="6">model<pos:position pos:line="278" pos:column="11"/></name></expr>)<pos:position pos:line="278" pos:column="12"/></condition><then pos:line="278" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="279" pos:column="5">PR_Close<pos:position pos:line="279" pos:column="13"/></name><argument_list pos:line="279" pos:column="13">(<argument><expr><name pos:line="279" pos:column="14">model<pos:position pos:line="279" pos:column="19"/></name></expr></argument>)<pos:position pos:line="279" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="21"/></expr_stmt></block></then></if>

  <return pos:line="281" pos:column="3">return <expr><call><name pos:line="281" pos:column="10">nss_fail_connect<pos:position pos:line="281" pos:column="26"/></name><argument_list pos:line="281" pos:column="26">(<argument><expr><name pos:line="281" pos:column="27">connssl<pos:position pos:line="281" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="281" pos:column="36">data<pos:position pos:line="281" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="281" pos:column="42">result<pos:position pos:line="281" pos:column="48"/></name></expr></argument>)<pos:position pos:line="281" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="50"/></return>
}<pos:position pos:line="282" pos:column="2"/></block></function></unit>
