<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_351_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">Curl_sec_read_msg<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name><name pos:line="2" pos:column="19">struct<pos:position pos:line="2" pos:column="25"/></name> <name pos:line="2" pos:column="26">connectdata<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">conn<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">s<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">level<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">len<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">buf<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">code<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
    
    <expr_stmt><expr><name pos:line="8" pos:column="5">buf<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <call><name pos:line="8" pos:column="11">malloc<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><call><name pos:line="8" pos:column="18">strlen<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">s<pos:position pos:line="8" pos:column="26"/></name></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="9" pos:column="5">len<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">Curl_base64_decode<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">s<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">+<pos:position pos:line="9" pos:column="33"/></operator> <literal type="number" pos:line="9" pos:column="34">4<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">buf<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt> <comment type="block" pos:line="9" pos:column="43">/* XXX */</comment>
    
    <expr_stmt><expr><name pos:line="11" pos:column="5">len<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <call pos:line="11" pos:column="11">(<name><name pos:line="11" pos:column="12">conn<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">mech<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">decode<pos:position pos:line="11" pos:column="30"/></name></name>)<argument_list pos:line="11" pos:column="31">(<argument><expr><name><name pos:line="11" pos:column="32">conn<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">app_data<pos:position pos:line="11" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">buf<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="53">len<pos:position pos:line="11" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="58">level<pos:position pos:line="11" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="65">conn<pos:position pos:line="11" pos:column="69"/></name></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt>
    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><name pos:line="12" pos:column="8">len<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">&lt;<pos:position pos:line="12" pos:column="16"/></operator> <literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr>)<pos:position pos:line="12" pos:column="16"/></condition><then pos:line="12" pos:column="16">
	<block type="pseudo"><return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">-<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">1<pos:position pos:line="13" pos:column="18"/></literal></expr>;<pos:position pos:line="13" pos:column="19"/></return></block></then></if>
    
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">buf<pos:position pos:line="15" pos:column="8"/></name><index pos:line="15" pos:column="8">[<expr><name pos:line="15" pos:column="9">len<pos:position pos:line="15" pos:column="12"/></name></expr>]<pos:position pos:line="15" pos:column="13"/></index></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <literal type="char" pos:line="15" pos:column="16">'\0'<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>

    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name><name pos:line="17" pos:column="8">buf<pos:position pos:line="17" pos:column="11"/></name><index pos:line="17" pos:column="11">[<expr><literal type="number" pos:line="17" pos:column="12">3<pos:position pos:line="17" pos:column="13"/></literal></expr>]<pos:position pos:line="17" pos:column="14"/></index></name> <operator pos:line="17" pos:column="15">==<pos:position pos:line="17" pos:column="17"/></operator> <literal type="char" pos:line="17" pos:column="18">'-'<pos:position pos:line="17" pos:column="21"/></literal></expr>)<pos:position pos:line="17" pos:column="22"/></condition><then pos:line="17" pos:column="22">
	<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="9">code<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt></block></then>
    <else pos:line="19" pos:column="5">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">sscanf<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">buf<pos:position pos:line="20" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="21">"%d"<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="27">&amp;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="28">code<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt></block></else></if>
    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><name><name pos:line="21" pos:column="8">buf<pos:position pos:line="21" pos:column="11"/></name><index pos:line="21" pos:column="11">[<expr><name pos:line="21" pos:column="12">len<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-<pos:position pos:line="21" pos:column="16"/></operator><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>]<pos:position pos:line="21" pos:column="18"/></index></name> <operator pos:line="21" pos:column="19">==<pos:position pos:line="21" pos:column="21"/></operator> <literal type="char" pos:line="21" pos:column="22">'\n'<pos:position pos:line="21" pos:column="26"/></literal></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27">
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="22" pos:column="9">buf<pos:position pos:line="22" pos:column="12"/></name><index pos:line="22" pos:column="12">[<expr><name pos:line="22" pos:column="13">len<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">-<pos:position pos:line="22" pos:column="17"/></operator><literal type="number" pos:line="22" pos:column="17">1<pos:position pos:line="22" pos:column="18"/></literal></expr>]<pos:position pos:line="22" pos:column="19"/></index></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <literal type="char" pos:line="22" pos:column="22">'\0'<pos:position pos:line="22" pos:column="26"/></literal></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">strcpy<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">s<pos:position pos:line="23" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="15">buf<pos:position pos:line="23" pos:column="18"/></name></expr></argument>)<pos:position pos:line="23" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">free<pos:position pos:line="24" pos:column="9"/></name><argument_list pos:line="24" pos:column="9">(<argument><expr><name pos:line="24" pos:column="10">buf<pos:position pos:line="24" pos:column="13"/></name></expr></argument>)<pos:position pos:line="24" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="15"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">code<pos:position pos:line="25" pos:column="16"/></name></expr>;<pos:position pos:line="25" pos:column="17"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
