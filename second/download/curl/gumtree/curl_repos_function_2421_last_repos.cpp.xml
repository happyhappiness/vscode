<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2421_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">Curl_mbedtls_random<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">Curl_easy<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">data<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">unsigned<pos:position pos:line="2" pos:column="45"/></name> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">entropy<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="61">size_t<pos:position pos:line="2" pos:column="67"/></name></type> <name pos:line="2" pos:column="68">length<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><call><name pos:line="4" pos:column="5">defined<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">MBEDTLS_CTR_DRBG_C<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">ret<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><operator pos:line="5" pos:column="13">-<pos:position pos:line="5" pos:column="14"/></operator><literal type="number" pos:line="5" pos:column="14">1<pos:position pos:line="5" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">errorbuf<pos:position pos:line="6" pos:column="16"/></name><index pos:line="6" pos:column="16">[<expr><literal type="number" pos:line="6" pos:column="17">128<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">mbedtls_entropy_context<pos:position pos:line="7" pos:column="26"/></name></type> <name pos:line="7" pos:column="27">ctr_entropy<pos:position pos:line="7" pos:column="38"/></name></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">mbedtls_ctr_drbg_context<pos:position pos:line="8" pos:column="27"/></name></type> <name pos:line="8" pos:column="28">ctr_drbg<pos:position pos:line="8" pos:column="36"/></name></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">mbedtls_entropy_init<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><operator pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="25">ctr_entropy<pos:position pos:line="9" pos:column="36"/></name></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">mbedtls_ctr_drbg_init<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><operator pos:line="10" pos:column="25">&amp;<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="26">ctr_drbg<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">errorbuf<pos:position pos:line="11" pos:column="11"/></name><index pos:line="11" pos:column="11">[<expr><literal type="number" pos:line="11" pos:column="12">0<pos:position pos:line="11" pos:column="13"/></literal></expr>]<pos:position pos:line="11" pos:column="14"/></index></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">ret<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">mbedtls_ctr_drbg_seed<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><operator pos:line="13" pos:column="31">&amp;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="32">ctr_drbg<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">mbedtls_entropy_func<pos:position pos:line="13" pos:column="62"/></name></expr></argument>,
                              <argument><expr><operator pos:line="14" pos:column="31">&amp;<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="32">ctr_entropy<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="45">NULL<pos:position pos:line="14" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="51">0<pos:position pos:line="14" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">ret<pos:position pos:line="16" pos:column="9"/></name></expr>)<pos:position pos:line="16" pos:column="10"/></condition><then pos:line="16" pos:column="10"> <block pos:line="16" pos:column="11">{
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="17" pos:column="23"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">mbedtls_strerror<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">ret<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="27">errorbuf<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="37">sizeof<argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">errorbuf<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="19" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">failf<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><name pos:line="20" pos:column="11">data<pos:position pos:line="20" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="17">"Failed - mbedTLS: ctr_drbg_seed returned (-0x%04X) %s\n"<pos:position pos:line="20" pos:column="74"/></literal></expr></argument>,
          <argument><expr><operator pos:line="21" pos:column="11">-<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">ret<pos:position pos:line="21" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="17">errorbuf<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></then>
  <else pos:line="23" pos:column="3">else <block pos:line="23" pos:column="8">{
    <expr_stmt><expr><name pos:line="24" pos:column="5">ret<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">mbedtls_ctr_drbg_random<pos:position pos:line="24" pos:column="34"/></name><argument_list pos:line="24" pos:column="34">(<argument><expr><operator pos:line="24" pos:column="35">&amp;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="36">ctr_drbg<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="46">entropy<pos:position pos:line="24" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="55">length<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>

    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><name pos:line="26" pos:column="8">ret<pos:position pos:line="26" pos:column="11"/></name></expr>)<pos:position pos:line="26" pos:column="12"/></condition><then pos:line="26" pos:column="12"> <block pos:line="26" pos:column="13">{
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="27" pos:column="23"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">mbedtls_strerror<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name pos:line="28" pos:column="24">ret<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">errorbuf<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="39">sizeof<argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">errorbuf<pos:position pos:line="28" pos:column="54"/></name></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="29" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">failf<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">data<pos:position pos:line="30" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="19">"mbedTLS: ctr_drbg_init returned (-0x%04X) %s\n"<pos:position pos:line="30" pos:column="67"/></literal></expr></argument>,
            <argument><expr><operator pos:line="31" pos:column="13">-<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">ret<pos:position pos:line="31" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="19">errorbuf<pos:position pos:line="31" pos:column="27"/></name></expr></argument>)<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
  }<pos:position pos:line="33" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">mbedtls_ctr_drbg_free<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><operator pos:line="35" pos:column="25">&amp;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="26">ctr_drbg<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">mbedtls_entropy_free<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><operator pos:line="36" pos:column="24">&amp;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="25">ctr_entropy<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>

  <return pos:line="38" pos:column="3">return <expr><ternary><condition><expr><name pos:line="38" pos:column="10">ret<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">==<pos:position pos:line="38" pos:column="16"/></operator> <literal type="number" pos:line="38" pos:column="17">0<pos:position pos:line="38" pos:column="18"/></literal></expr> ?<pos:position pos:line="38" pos:column="20"/></condition><then pos:line="38" pos:column="20"> <expr><name pos:line="38" pos:column="21">CURLE_OK<pos:position pos:line="38" pos:column="29"/></name></expr> <pos:position pos:line="38" pos:column="30"/></then><else pos:line="38" pos:column="30">: <expr><name pos:line="38" pos:column="32">CURLE_FAILED_INIT<pos:position pos:line="38" pos:column="49"/></name></expr></else></ternary></expr>;<pos:position pos:line="38" pos:column="50"/></return>
<cpp:elif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">elif<pos:position pos:line="39" pos:column="6"/></cpp:directive> <expr><call><name pos:line="39" pos:column="7">defined<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">MBEDTLS_HAVEGE_C<pos:position pos:line="39" pos:column="31"/></name></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name pos:line="40" pos:column="3">mbedtls_havege_state<pos:position pos:line="40" pos:column="23"/></name></type> <name pos:line="40" pos:column="24">hs<pos:position pos:line="40" pos:column="26"/></name></decl>;<pos:position pos:line="40" pos:column="27"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">mbedtls_havege_init<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><operator pos:line="41" pos:column="23">&amp;<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="24">hs<pos:position pos:line="41" pos:column="26"/></name></expr></argument>)<pos:position pos:line="41" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">mbedtls_havege_random<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><operator pos:line="42" pos:column="25">&amp;<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="26">hs<pos:position pos:line="42" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="30">entropy<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">length<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">mbedtls_havege_free<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><operator pos:line="43" pos:column="23">&amp;<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="24">hs<pos:position pos:line="43" pos:column="26"/></name></expr></argument>)<pos:position pos:line="43" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt>
  <return pos:line="44" pos:column="3">return <expr><name pos:line="44" pos:column="10">CURLE_OK<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></return>
<cpp:else pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">else<pos:position pos:line="45" pos:column="6"/></cpp:directive></cpp:else>
  <return pos:line="46" pos:column="3">return <expr><name pos:line="46" pos:column="10">CURLE_NOT_BUILT_IN<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></return>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
