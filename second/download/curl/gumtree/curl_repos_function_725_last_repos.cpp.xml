<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_725_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_servercmd<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">testcase<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">req<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">FILE<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">stream<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">filename<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">error<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">filename<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">test2file<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name><name pos:line="7" pos:column="24">req<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">testno<pos:position pos:line="7" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">stream<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <call><name pos:line="9" pos:column="12">fopen<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">filename<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="28">"rb"<pos:position pos:line="9" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">stream<pos:position pos:line="10" pos:column="13"/></name></expr>)<pos:position pos:line="10" pos:column="14"/></condition><then pos:line="10" pos:column="14"> <block pos:line="10" pos:column="15">{
    <expr_stmt><expr><name pos:line="11" pos:column="5">error<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <name pos:line="11" pos:column="13">errno<pos:position pos:line="11" pos:column="18"/></name></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">logmsg<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="string" pos:line="12" pos:column="12">"fopen() failed with error: %d %s"<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">error<pos:position pos:line="12" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="55">strerror<pos:position pos:line="12" pos:column="63"/></name><argument_list pos:line="12" pos:column="63">(<argument><expr><name pos:line="12" pos:column="64">error<pos:position pos:line="12" pos:column="69"/></name></expr></argument>)<pos:position pos:line="12" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">logmsg<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="string" pos:line="13" pos:column="12">"  [1] Error opening file: %s"<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">filename<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">logmsg<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="string" pos:line="14" pos:column="12">"  Couldn't open test file %ld"<pos:position pos:line="14" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="45">req<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">-&gt;<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="50">testno<pos:position pos:line="14" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="58"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><literal type="number" pos:line="15" pos:column="12">1<pos:position pos:line="15" pos:column="13"/></literal></expr>;<pos:position pos:line="15" pos:column="14"/></return> <comment type="block" pos:line="15" pos:column="15">/* done */</comment>
  }<pos:position pos:line="16" pos:column="4"/></block></then>
  <else pos:line="17" pos:column="3">else <block pos:line="17" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name> <modifier pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></modifier></type><name pos:line="18" pos:column="11">orgcmd<pos:position pos:line="18" pos:column="17"/></name> <init pos:line="18" pos:column="18">= <expr><name pos:line="18" pos:column="20">NULL<pos:position pos:line="18" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name> <modifier pos:line="19" pos:column="10">*<pos:position pos:line="19" pos:column="11"/></modifier></type><name pos:line="19" pos:column="11">cmd<pos:position pos:line="19" pos:column="14"/></name> <init pos:line="19" pos:column="15">= <expr><name pos:line="19" pos:column="17">NULL<pos:position pos:line="19" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">size_t<pos:position pos:line="20" pos:column="11"/></name></type> <name pos:line="20" pos:column="12">cmdsize<pos:position pos:line="20" pos:column="19"/></name> <init pos:line="20" pos:column="20">= <expr><literal type="number" pos:line="20" pos:column="22">0<pos:position pos:line="20" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">num<pos:position pos:line="21" pos:column="12"/></name> <init pos:line="21" pos:column="13">= <expr><literal type="number" pos:line="21" pos:column="15">0<pos:position pos:line="21" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="17"/></decl_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* get the custom server control "commands" */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">error<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <call><name pos:line="24" pos:column="13">getpart<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><operator pos:line="24" pos:column="21">&amp;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="22">orgcmd<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="30">&amp;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="31">cmdsize<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="40">"reply"<pos:position pos:line="24" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="49">"servercmd"<pos:position pos:line="24" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="62">stream<pos:position pos:line="24" pos:column="68"/></name></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">fclose<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><name pos:line="25" pos:column="12">stream<pos:position pos:line="25" pos:column="18"/></name></expr></argument>)<pos:position pos:line="25" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>
    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><name pos:line="26" pos:column="8">error<pos:position pos:line="26" pos:column="13"/></name></expr>)<pos:position pos:line="26" pos:column="14"/></condition><then pos:line="26" pos:column="14"> <block pos:line="26" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">logmsg<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><literal type="string" pos:line="27" pos:column="14">"getpart() failed with error: %d"<pos:position pos:line="27" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">error<pos:position pos:line="27" pos:column="54"/></name></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="56"/></expr_stmt>
      <return pos:line="28" pos:column="7">return <expr><literal type="number" pos:line="28" pos:column="14">1<pos:position pos:line="28" pos:column="15"/></literal></expr>;<pos:position pos:line="28" pos:column="16"/></return> <comment type="block" pos:line="28" pos:column="17">/* done */</comment>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">cmd<pos:position pos:line="31" pos:column="8"/></name> <operator pos:line="31" pos:column="9">=<pos:position pos:line="31" pos:column="10"/></operator> <name pos:line="31" pos:column="11">orgcmd<pos:position pos:line="31" pos:column="17"/></name></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt>
    <while pos:line="32" pos:column="5">while<condition pos:line="32" pos:column="10">(<expr><name pos:line="32" pos:column="11">cmd<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">&amp;&amp;<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="18">cmdsize<pos:position pos:line="32" pos:column="25"/></name></expr>)<pos:position pos:line="32" pos:column="26"/></condition> <block pos:line="32" pos:column="27">{
      <decl_stmt><decl><type><name pos:line="33" pos:column="7">char<pos:position pos:line="33" pos:column="11"/></name> <modifier pos:line="33" pos:column="12">*<pos:position pos:line="33" pos:column="13"/></modifier></type><name pos:line="33" pos:column="13">check<pos:position pos:line="33" pos:column="18"/></name></decl>;<pos:position pos:line="33" pos:column="19"/></decl_stmt>
      <if pos:line="34" pos:column="7">if<condition pos:line="34" pos:column="9">(<expr><literal type="number" pos:line="34" pos:column="10">1<pos:position pos:line="34" pos:column="11"/></literal> <operator pos:line="34" pos:column="12">==<pos:position pos:line="34" pos:column="14"/></operator> <call><name pos:line="34" pos:column="15">sscanf<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name pos:line="34" pos:column="22">cmd<pos:position pos:line="34" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="27">"writedelay: %d"<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="45">&amp;<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="46">num<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="51"/></condition><then pos:line="34" pos:column="51"> <block pos:line="34" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">logmsg<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="string" pos:line="35" pos:column="16">"instructed to delay %d secs between packets"<pos:position pos:line="35" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="63">num<pos:position pos:line="35" pos:column="66"/></name></expr></argument>)<pos:position pos:line="35" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">req<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">writedelay<pos:position pos:line="36" pos:column="24"/></name></name> <operator pos:line="36" pos:column="25">=<pos:position pos:line="36" pos:column="26"/></operator> <name pos:line="36" pos:column="27">num<pos:position pos:line="36" pos:column="30"/></name></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="37" pos:column="8"/></block></then>
      <else pos:line="38" pos:column="7">else <block pos:line="38" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">logmsg<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="string" pos:line="39" pos:column="16">"Unknown &lt;servercmd&gt; instruction found: %s"<pos:position pos:line="39" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="61">cmd<pos:position pos:line="39" pos:column="64"/></name></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="66"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></else></if>
      <comment type="block" pos:line="41" pos:column="7">/* try to deal with CRLF or just LF */</comment>
      <expr_stmt><expr><name pos:line="42" pos:column="7">check<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">strchr<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><name pos:line="42" pos:column="22">cmd<pos:position pos:line="42" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="42" pos:column="27">'\r'<pos:position pos:line="42" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
      <if pos:line="43" pos:column="7">if<condition pos:line="43" pos:column="9">(<expr><operator pos:line="43" pos:column="10">!<pos:position pos:line="43" pos:column="11"/></operator><name pos:line="43" pos:column="11">check<pos:position pos:line="43" pos:column="16"/></name></expr>)<pos:position pos:line="43" pos:column="17"/></condition><then pos:line="43" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="9">check<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <call><name pos:line="44" pos:column="17">strchr<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">cmd<pos:position pos:line="44" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="44" pos:column="29">'\n'<pos:position pos:line="44" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt></block></then></if>

      <if pos:line="46" pos:column="7">if<condition pos:line="46" pos:column="9">(<expr><name pos:line="46" pos:column="10">check<pos:position pos:line="46" pos:column="15"/></name></expr>)<pos:position pos:line="46" pos:column="16"/></condition><then pos:line="46" pos:column="16"> <block pos:line="46" pos:column="17">{
        <comment type="block" pos:line="47" pos:column="9">/* get to the letter following the newline */</comment>
        <while pos:line="48" pos:column="9">while<condition pos:line="48" pos:column="14">(<expr><operator pos:line="48" pos:column="15">(<pos:position pos:line="48" pos:column="16"/></operator><operator pos:line="48" pos:column="16">*<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="17">check<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">==<pos:position pos:line="48" pos:column="25"/></operator> <literal type="char" pos:line="48" pos:column="26">'\r'<pos:position pos:line="48" pos:column="30"/></literal><operator pos:line="48" pos:column="30">)<pos:position pos:line="48" pos:column="31"/></operator> <operator pos:line="48" pos:column="32">||<pos:position pos:line="48" pos:column="34"/></operator> <operator pos:line="48" pos:column="35">(<pos:position pos:line="48" pos:column="36"/></operator><operator pos:line="48" pos:column="36">*<pos:position pos:line="48" pos:column="37"/></operator><name pos:line="48" pos:column="37">check<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">==<pos:position pos:line="48" pos:column="45"/></operator> <literal type="char" pos:line="48" pos:column="46">'\n'<pos:position pos:line="48" pos:column="50"/></literal><operator pos:line="48" pos:column="50">)<pos:position pos:line="48" pos:column="51"/></operator></expr>)<pos:position pos:line="48" pos:column="52"/></condition>
          <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="11">check<pos:position pos:line="49" pos:column="16"/></name><operator pos:line="49" pos:column="16">++<pos:position pos:line="49" pos:column="18"/></operator></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt></block></while>

        <if pos:line="51" pos:column="9">if<condition pos:line="51" pos:column="11">(<expr><operator pos:line="51" pos:column="12">!<pos:position pos:line="51" pos:column="13"/></operator><operator pos:line="51" pos:column="13">*<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">check<pos:position pos:line="51" pos:column="19"/></name></expr>)<pos:position pos:line="51" pos:column="20"/></condition><then pos:line="51" pos:column="20">
          <comment type="block" pos:line="52" pos:column="11">/* if we reached a zero, get out */</comment>
          <block type="pseudo"><break pos:line="53" pos:column="11">break;<pos:position pos:line="53" pos:column="17"/></break></block></then></if>
        <expr_stmt><expr><name pos:line="54" pos:column="9">cmd<pos:position pos:line="54" pos:column="12"/></name> <operator pos:line="54" pos:column="13">=<pos:position pos:line="54" pos:column="14"/></operator> <name pos:line="54" pos:column="15">check<pos:position pos:line="54" pos:column="20"/></name></expr>;<pos:position pos:line="54" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="55" pos:column="8"/></block></then>
      <else pos:line="56" pos:column="7">else
        <block type="pseudo"><break pos:line="57" pos:column="9">break;<pos:position pos:line="57" pos:column="15"/></break></block></else></if>
    }<pos:position pos:line="58" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">free<pos:position pos:line="59" pos:column="9"/></name><argument_list pos:line="59" pos:column="9">(<argument><expr><name pos:line="59" pos:column="10">orgcmd<pos:position pos:line="59" pos:column="16"/></name></expr></argument>)<pos:position pos:line="59" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="60" pos:column="4"/></block></else></if>

  <return pos:line="62" pos:column="3">return <expr><literal type="number" pos:line="62" pos:column="10">0<pos:position pos:line="62" pos:column="11"/></literal></expr>;<pos:position pos:line="62" pos:column="12"/></return> <comment type="block" pos:line="62" pos:column="13">/* OK! */</comment>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
