<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_237_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">verboseconnect<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name><name pos:line="2" pos:column="28">struct<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">Curl_dns_entry<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">dns<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">HAVE_INET_NTOA_R<pos:position pos:line="4" pos:column="24"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">ntoa_buf<pos:position pos:line="5" pos:column="16"/></name><index pos:line="5" pos:column="16">[<expr><literal type="number" pos:line="5" pos:column="17">64<pos:position pos:line="5" pos:column="19"/></literal></expr>]<pos:position pos:line="5" pos:column="20"/></index></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name><name pos:line="7" pos:column="32">conn<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">-&gt;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="38">data<pos:position pos:line="7" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Figure out the ip-number and display the first host name it shows: */</comment>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">ENABLE_IPV6<pos:position pos:line="10" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><operator pos:line="11" pos:column="3">(<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">void<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">)<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">dns<pos:position pos:line="11" pos:column="12"/></name></expr>;<pos:position pos:line="11" pos:column="13"/></expr_stmt> <comment type="block" pos:line="11" pos:column="14">/* not used in the IPv6 enabled version */</comment>
  <block pos:line="12" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name></type> <name><name pos:line="13" pos:column="10">hbuf<pos:position pos:line="13" pos:column="14"/></name><index pos:line="13" pos:column="14">[<expr><name pos:line="13" pos:column="15">NI_MAXHOST<pos:position pos:line="13" pos:column="25"/></name></expr>]<pos:position pos:line="13" pos:column="26"/></index></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">NI_WITHSCOPEID<pos:position pos:line="14" pos:column="22"/></name></cpp:ifdef>
    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">int<pos:position pos:line="15" pos:column="14"/></name></type> <name pos:line="15" pos:column="15">niflags<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><name pos:line="15" pos:column="25">NI_NUMERICHOST<pos:position pos:line="15" pos:column="39"/></name> <operator pos:line="15" pos:column="40">|<pos:position pos:line="15" pos:column="41"/></operator> <name pos:line="15" pos:column="42">NI_WITHSCOPEID<pos:position pos:line="15" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="57"/></decl_stmt>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="17" pos:column="5">const<pos:position pos:line="17" pos:column="10"/></specifier> <name pos:line="17" pos:column="11">int<pos:position pos:line="17" pos:column="14"/></name></type> <name pos:line="17" pos:column="15">niflags<pos:position pos:line="17" pos:column="22"/></name> <init pos:line="17" pos:column="23">= <expr><name pos:line="17" pos:column="25">NI_NUMERICHOST<pos:position pos:line="17" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="40"/></decl_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name><name pos:line="19" pos:column="5">struct<pos:position pos:line="19" pos:column="11"/></name> <name pos:line="19" pos:column="12">addrinfo<pos:position pos:line="19" pos:column="20"/></name></name> <modifier pos:line="19" pos:column="21">*<pos:position pos:line="19" pos:column="22"/></modifier></type><name pos:line="19" pos:column="22">ai<pos:position pos:line="19" pos:column="24"/></name> <init pos:line="19" pos:column="25">= <expr><name><name pos:line="19" pos:column="27">conn<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-&gt;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="33">serv_addr<pos:position pos:line="19" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="43"/></decl_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">getnameinfo<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><name><name pos:line="21" pos:column="21">ai<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">ai_addr<pos:position pos:line="21" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="34">ai<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">ai_addrlen<pos:position pos:line="21" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">hbuf<pos:position pos:line="21" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="56">sizeof<argument_list pos:line="21" pos:column="62">(<argument><expr><name pos:line="21" pos:column="63">hbuf<pos:position pos:line="21" pos:column="67"/></name></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="21" pos:column="70">NULL<pos:position pos:line="21" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="76">0<pos:position pos:line="21" pos:column="77"/></literal></expr></argument>,
	<argument><expr><name pos:line="22" pos:column="9">niflags<pos:position pos:line="22" pos:column="16"/></name></expr></argument>)<pos:position pos:line="22" pos:column="17"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="18"/></condition><then pos:line="22" pos:column="18"> <block pos:line="22" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">snprintf<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">hbuf<pos:position pos:line="23" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="22">sizeof<argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">hbuf<pos:position pos:line="23" pos:column="33"/></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="36">"?"<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">ai<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">ai_canonname<pos:position pos:line="25" pos:column="25"/></name></name></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26"> <block pos:line="25" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">infof<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">data<pos:position pos:line="26" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="19">"Connected to %s (%s) port %d\n"<pos:position pos:line="26" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="53">ai<pos:position pos:line="26" pos:column="55"/></name><operator pos:line="26" pos:column="55">-&gt;<pos:position pos:line="26" pos:column="60"/></operator><name pos:line="26" pos:column="57">ai_canonname<pos:position pos:line="26" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="71">hbuf<pos:position pos:line="26" pos:column="75"/></name></expr></argument>,
            <argument><expr><name><name pos:line="27" pos:column="13">conn<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">port<pos:position pos:line="27" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then> <else pos:line="28" pos:column="7">else <block pos:line="28" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">infof<pos:position pos:line="29" pos:column="12"/></name><argument_list pos:line="29" pos:column="12">(<argument><expr><name pos:line="29" pos:column="13">data<pos:position pos:line="29" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="19">"Connected to %s port %d\n"<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="48">hbuf<pos:position pos:line="29" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="54">conn<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">-&gt;<pos:position pos:line="29" pos:column="63"/></operator><name pos:line="29" pos:column="60">port<pos:position pos:line="29" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>
  }<pos:position pos:line="31" pos:column="4"/></block>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>
  <block pos:line="33" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">Curl_addrinfo<pos:position pos:line="34" pos:column="18"/></name> <modifier pos:line="34" pos:column="19">*<pos:position pos:line="34" pos:column="20"/></modifier></type><name pos:line="34" pos:column="20">hostaddr<pos:position pos:line="34" pos:column="28"/></name><init pos:line="34" pos:column="28">=<expr><ternary><condition><expr><name pos:line="34" pos:column="29">dns<pos:position pos:line="34" pos:column="32"/></name></expr>?<pos:position pos:line="34" pos:column="33"/></condition><then><expr><name><name pos:line="34" pos:column="33">dns<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">-&gt;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="38">addr<pos:position pos:line="34" pos:column="42"/></name></name></expr></then><else pos:line="34" pos:column="42">:<expr><name pos:line="34" pos:column="43">NULL<pos:position pos:line="34" pos:column="47"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="34" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="35" pos:column="5">struct<pos:position pos:line="35" pos:column="11"/></name> <name pos:line="35" pos:column="12">in_addr<pos:position pos:line="35" pos:column="19"/></name></name></type> <name pos:line="35" pos:column="20">in<pos:position pos:line="35" pos:column="22"/></name></decl>;<pos:position pos:line="35" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="36" pos:column="5">(<pos:position pos:line="36" pos:column="6"/></operator><name pos:line="36" pos:column="6">void<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">)<pos:position pos:line="36" pos:column="11"/></operator> <call><name pos:line="36" pos:column="12">memcpy<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><operator pos:line="36" pos:column="19">&amp;<pos:position pos:line="36" pos:column="24"/></operator><name><name pos:line="36" pos:column="20">in<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">.<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">s_addr<pos:position pos:line="36" pos:column="29"/></name></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="31">&amp;<pos:position pos:line="36" pos:column="36"/></operator><name><name pos:line="36" pos:column="32">conn<pos:position pos:line="36" pos:column="36"/></name><operator pos:line="36" pos:column="36">-&gt;<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="38">serv_addr<pos:position pos:line="36" pos:column="47"/></name><operator pos:line="36" pos:column="47">.<pos:position pos:line="36" pos:column="48"/></operator><name pos:line="36" pos:column="48">sin_addr<pos:position pos:line="36" pos:column="56"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="58">sizeof <argument_list pos:line="36" pos:column="65">(<argument><expr><name><name pos:line="36" pos:column="66">in<pos:position pos:line="36" pos:column="68"/></name><operator pos:line="36" pos:column="68">.<pos:position pos:line="36" pos:column="69"/></operator><name pos:line="36" pos:column="69">s_addr<pos:position pos:line="36" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">infof<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><name pos:line="37" pos:column="11">data<pos:position pos:line="37" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="17">"Connected to %s (%s) port %d\n"<pos:position pos:line="37" pos:column="49"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><name pos:line="38" pos:column="11">hostaddr<pos:position pos:line="38" pos:column="19"/></name></expr>?<pos:position pos:line="38" pos:column="20"/></condition><then><expr><name><name pos:line="38" pos:column="20">hostaddr<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">-&gt;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="30">h_name<pos:position pos:line="38" pos:column="36"/></name></name></expr></then><else pos:line="38" pos:column="36">:<expr><literal type="string" pos:line="38" pos:column="37">""<pos:position pos:line="38" pos:column="39"/></literal></expr></else></ternary></expr></argument>,
<cpp:if pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">if<pos:position pos:line="39" pos:column="4"/></cpp:directive> <expr><call><name pos:line="39" pos:column="5">defined<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">HAVE_INET_NTOA_R<pos:position pos:line="39" pos:column="29"/></name></expr></argument>)<pos:position pos:line="39" pos:column="30"/></argument_list></call></expr></cpp:if>
          <argument><expr><call><name pos:line="40" pos:column="11">inet_ntoa_r<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><name pos:line="40" pos:column="23">in<pos:position pos:line="40" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="27">ntoa_buf<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="37">sizeof<argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">ntoa_buf<pos:position pos:line="40" pos:column="52"/></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr></argument>,
<cpp:else pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">else<pos:position pos:line="41" pos:column="6"/></cpp:directive></cpp:else>
          <argument><expr><call><name pos:line="42" pos:column="11">inet_ntoa<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">(<argument><expr><name pos:line="42" pos:column="21">in<pos:position pos:line="42" pos:column="23"/></name></expr></argument>)<pos:position pos:line="42" pos:column="24"/></argument_list></call></expr></argument>,
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
          <argument><expr><name><name pos:line="44" pos:column="11">conn<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">port<pos:position pos:line="44" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
