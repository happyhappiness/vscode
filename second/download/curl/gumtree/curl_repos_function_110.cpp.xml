<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_110.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">test<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">char<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">URL<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">c<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">ret<pos:position pos:line="4" pos:column="10"/></name><init pos:line="4" pos:column="10">=<expr><literal type="number" pos:line="4" pos:column="11">0<pos:position pos:line="4" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLM<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">m<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">fd_set<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">rd<pos:position pos:line="6" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="14">wr<pos:position pos:line="6" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="18">exc<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLMcode<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">res<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">running<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">max_fd<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">rc<pos:position pos:line="10" pos:column="9"/></name></decl>;<pos:position pos:line="10" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">loop<pos:position pos:line="11" pos:column="11"/></name><init pos:line="11" pos:column="11">=<expr><literal type="number" pos:line="11" pos:column="12">10<pos:position pos:line="11" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">curl_global_init<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">CURL_GLOBAL_ALL<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">c<pos:position pos:line="14" pos:column="4"/></name> <operator pos:line="14" pos:column="5">=<pos:position pos:line="14" pos:column="6"/></operator> <call><name pos:line="14" pos:column="7">curl_easy_init<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">()<pos:position pos:line="14" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* the point here being that there must not run anything on the given
     proxy port */</comment>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">curl_easy_setopt<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">c<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="23">CURLOPT_PROXY<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">arg2<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">curl_easy_setopt<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">c<pos:position pos:line="19" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="23">CURLOPT_URL<pos:position pos:line="19" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="36">URL<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">curl_easy_setopt<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">c<pos:position pos:line="20" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="23">CURLOPT_VERBOSE<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="40">1<pos:position pos:line="20" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name pos:line="22" pos:column="3">m<pos:position pos:line="22" pos:column="4"/></name> <operator pos:line="22" pos:column="5">=<pos:position pos:line="22" pos:column="6"/></operator> <call><name pos:line="22" pos:column="7">curl_multi_init<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">()<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">res<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">curl_multi_add_handle<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">m<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">c<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">res<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">&amp;&amp;<pos:position pos:line="25" pos:column="20"/></operator> <operator pos:line="25" pos:column="13">(<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">res<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">!=<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">)<pos:position pos:line="25" pos:column="46"/></operator></expr>)<pos:position pos:line="25" pos:column="47"/></condition><then pos:line="25" pos:column="47">
    <block type="pseudo"><empty_stmt pos:line="26" pos:column="5">;<pos:position pos:line="26" pos:column="6"/></empty_stmt></block></then> <comment type="block" pos:line="26" pos:column="7">/* major failure */</comment>
  <else pos:line="27" pos:column="3">else <block pos:line="27" pos:column="8">{
    <do pos:line="28" pos:column="5">do <block pos:line="28" pos:column="8">{
      <decl_stmt><decl><type><name><name pos:line="29" pos:column="7">struct<pos:position pos:line="29" pos:column="13"/></name> <name pos:line="29" pos:column="14">timeval<pos:position pos:line="29" pos:column="21"/></name></name></type> <name pos:line="29" pos:column="22">interval<pos:position pos:line="29" pos:column="30"/></name></decl>;<pos:position pos:line="29" pos:column="31"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="31" pos:column="7">interval<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">tv_sec<pos:position pos:line="31" pos:column="22"/></name></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <literal type="number" pos:line="31" pos:column="25">1<pos:position pos:line="31" pos:column="26"/></literal></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="32" pos:column="7">interval<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">tv_usec<pos:position pos:line="32" pos:column="23"/></name></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="26">0<pos:position pos:line="32" pos:column="27"/></literal></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="34" pos:column="7">fprintf<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">stderr<pos:position pos:line="34" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="23">"curl_multi_perform()\n"<pos:position pos:line="34" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="49"/></expr_stmt>

      <do pos:line="36" pos:column="7">do <block pos:line="36" pos:column="10">{
        <expr_stmt><expr><name pos:line="37" pos:column="9">res<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">curl_multi_perform<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><name pos:line="37" pos:column="34">m<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">running<pos:position pos:line="37" pos:column="45"/></name></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
      }<pos:position pos:line="38" pos:column="8"/></block> while <condition pos:line="38" pos:column="15">(<expr><name pos:line="38" pos:column="16">res<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">==<pos:position pos:line="38" pos:column="22"/></operator> <name pos:line="38" pos:column="23">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="38" pos:column="47"/></name></expr>)<pos:position pos:line="38" pos:column="48"/></condition>;<pos:position pos:line="38" pos:column="49"/></do>
      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">(<expr><operator pos:line="39" pos:column="10">!<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="11">running<pos:position pos:line="39" pos:column="18"/></name></expr>)<pos:position pos:line="39" pos:column="19"/></condition><then pos:line="39" pos:column="19"> <block pos:line="39" pos:column="20">{
        <comment type="block" pos:line="40" pos:column="9">/* This is where this code is expected to reach */</comment>
        <decl_stmt><decl><type><name pos:line="41" pos:column="9">int<pos:position pos:line="41" pos:column="12"/></name></type> <name pos:line="41" pos:column="13">numleft<pos:position pos:line="41" pos:column="20"/></name></decl>;<pos:position pos:line="41" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="42" pos:column="9">CURLMsg<pos:position pos:line="42" pos:column="16"/></name> <modifier pos:line="42" pos:column="17">*<pos:position pos:line="42" pos:column="18"/></modifier></type><name pos:line="42" pos:column="18">msg<pos:position pos:line="42" pos:column="21"/></name> <init pos:line="42" pos:column="22">= <expr><call><name pos:line="42" pos:column="24">curl_multi_info_read<pos:position pos:line="42" pos:column="44"/></name><argument_list pos:line="42" pos:column="44">(<argument><expr><name pos:line="42" pos:column="45">m<pos:position pos:line="42" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="48">&amp;<pos:position pos:line="42" pos:column="53"/></operator><name pos:line="42" pos:column="49">numleft<pos:position pos:line="42" pos:column="56"/></name></expr></argument>)<pos:position pos:line="42" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="58"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">fprintf<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">stderr<pos:position pos:line="43" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="25">"Expected: not running\n"<pos:position pos:line="43" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
        <if pos:line="44" pos:column="9">if<condition pos:line="44" pos:column="11">(<expr><name pos:line="44" pos:column="12">msg<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">&amp;&amp;<pos:position pos:line="44" pos:column="26"/></operator> <operator pos:line="44" pos:column="19">!<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="20">numleft<pos:position pos:line="44" pos:column="27"/></name></expr>)<pos:position pos:line="44" pos:column="28"/></condition><then pos:line="44" pos:column="28">
          <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="11">ret<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator> <literal type="number" pos:line="45" pos:column="17">100<pos:position pos:line="45" pos:column="20"/></literal></expr>;<pos:position pos:line="45" pos:column="21"/></expr_stmt></block></then> <comment type="block" pos:line="45" pos:column="22">/* this is where we should be */</comment>
        <else pos:line="46" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="11">ret<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <literal type="number" pos:line="47" pos:column="17">99<pos:position pos:line="47" pos:column="19"/></literal></expr>;<pos:position pos:line="47" pos:column="20"/></expr_stmt></block></else></if> <comment type="block" pos:line="47" pos:column="21">/* not correct */</comment>
        <break pos:line="48" pos:column="9">break;<pos:position pos:line="48" pos:column="15"/></break>
      }<pos:position pos:line="49" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">fprintf<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">stderr<pos:position pos:line="50" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="23">"running == %d, res == %d\n"<pos:position pos:line="50" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="53">running<pos:position pos:line="50" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="62">res<pos:position pos:line="50" pos:column="65"/></name></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt>

      <if pos:line="52" pos:column="7">if <condition pos:line="52" pos:column="10">(<expr><name pos:line="52" pos:column="11">res<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">!=<pos:position pos:line="52" pos:column="17"/></operator> <name pos:line="52" pos:column="18">CURLM_OK<pos:position pos:line="52" pos:column="26"/></name></expr>)<pos:position pos:line="52" pos:column="27"/></condition><then pos:line="52" pos:column="27"> <block pos:line="52" pos:column="28">{
        <expr_stmt><expr><name pos:line="53" pos:column="9">ret<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <literal type="number" pos:line="53" pos:column="15">2<pos:position pos:line="53" pos:column="16"/></literal></expr>;<pos:position pos:line="53" pos:column="17"/></expr_stmt>
        <break pos:line="54" pos:column="9">break;<pos:position pos:line="54" pos:column="15"/></break>
      }<pos:position pos:line="55" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="57" pos:column="7">FD_ZERO<pos:position pos:line="57" pos:column="14"/></name><argument_list pos:line="57" pos:column="14">(<argument><expr><operator pos:line="57" pos:column="15">&amp;<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="16">rd<pos:position pos:line="57" pos:column="18"/></name></expr></argument>)<pos:position pos:line="57" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">FD_ZERO<pos:position pos:line="58" pos:column="14"/></name><argument_list pos:line="58" pos:column="14">(<argument><expr><operator pos:line="58" pos:column="15">&amp;<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="16">wr<pos:position pos:line="58" pos:column="18"/></name></expr></argument>)<pos:position pos:line="58" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">FD_ZERO<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><operator pos:line="59" pos:column="15">&amp;<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="16">exc<pos:position pos:line="59" pos:column="19"/></name></expr></argument>)<pos:position pos:line="59" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="60" pos:column="7">max_fd<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <literal type="number" pos:line="60" pos:column="16">0<pos:position pos:line="60" pos:column="17"/></literal></expr>;<pos:position pos:line="60" pos:column="18"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="62" pos:column="7">fprintf<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><name pos:line="62" pos:column="15">stderr<pos:position pos:line="62" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="23">"curl_multi_fdset()\n"<pos:position pos:line="62" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="47"/></expr_stmt>
      <if pos:line="63" pos:column="7">if <condition pos:line="63" pos:column="10">(<expr><call><name pos:line="63" pos:column="11">curl_multi_fdset<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">m<pos:position pos:line="63" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="31">&amp;<pos:position pos:line="63" pos:column="36"/></operator><name pos:line="63" pos:column="32">rd<pos:position pos:line="63" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="36">&amp;<pos:position pos:line="63" pos:column="41"/></operator><name pos:line="63" pos:column="37">wr<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="41">&amp;<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="42">exc<pos:position pos:line="63" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="47">&amp;<pos:position pos:line="63" pos:column="52"/></operator><name pos:line="63" pos:column="48">max_fd<pos:position pos:line="63" pos:column="54"/></name></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call> <operator pos:line="63" pos:column="56">!=<pos:position pos:line="63" pos:column="58"/></operator> <name pos:line="63" pos:column="59">CURLM_OK<pos:position pos:line="63" pos:column="67"/></name></expr>)<pos:position pos:line="63" pos:column="68"/></condition><then pos:line="63" pos:column="68"> <block pos:line="63" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">fprintf<pos:position pos:line="64" pos:column="16"/></name><argument_list pos:line="64" pos:column="16">(<argument><expr><name pos:line="64" pos:column="17">stderr<pos:position pos:line="64" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="25">"unexpected failured of fdset.\n"<pos:position pos:line="64" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name pos:line="65" pos:column="9">ret<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">=<pos:position pos:line="65" pos:column="14"/></operator> <literal type="number" pos:line="65" pos:column="15">3<pos:position pos:line="65" pos:column="16"/></literal></expr>;<pos:position pos:line="65" pos:column="17"/></expr_stmt>
        <break pos:line="66" pos:column="9">break;<pos:position pos:line="66" pos:column="15"/></break>
      }<pos:position pos:line="67" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="68" pos:column="7">rc<pos:position pos:line="68" pos:column="9"/></name> <operator pos:line="68" pos:column="10">=<pos:position pos:line="68" pos:column="11"/></operator> <call><name pos:line="68" pos:column="12">select<pos:position pos:line="68" pos:column="18"/></name><argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">max_fd<pos:position pos:line="68" pos:column="25"/></name><operator pos:line="68" pos:column="25">+<pos:position pos:line="68" pos:column="26"/></operator><literal type="number" pos:line="68" pos:column="26">1<pos:position pos:line="68" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="68" pos:column="29">&amp;<pos:position pos:line="68" pos:column="34"/></operator><name pos:line="68" pos:column="30">rd<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="34">&amp;<pos:position pos:line="68" pos:column="39"/></operator><name pos:line="68" pos:column="35">wr<pos:position pos:line="68" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="39">&amp;<pos:position pos:line="68" pos:column="44"/></operator><name pos:line="68" pos:column="40">exc<pos:position pos:line="68" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="45">&amp;<pos:position pos:line="68" pos:column="50"/></operator><name pos:line="68" pos:column="46">interval<pos:position pos:line="68" pos:column="54"/></name></expr></argument>)<pos:position pos:line="68" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="69" pos:column="7">fprintf<pos:position pos:line="69" pos:column="14"/></name><argument_list pos:line="69" pos:column="14">(<argument><expr><name pos:line="69" pos:column="15">stderr<pos:position pos:line="69" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="23">"select returned %d\n"<pos:position pos:line="69" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="47">rc<pos:position pos:line="69" pos:column="49"/></name></expr></argument>)<pos:position pos:line="69" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="51"/></expr_stmt>

      <comment type="block" pos:line="71" pos:column="7">/* we only allow a certain number of loops to avoid hanging here
         forever */</comment>
    }<pos:position pos:line="73" pos:column="6"/></block> while<condition pos:line="73" pos:column="12">(<expr><operator pos:line="73" pos:column="13">--<pos:position pos:line="73" pos:column="15"/></operator><name pos:line="73" pos:column="15">loop<pos:position pos:line="73" pos:column="19"/></name><operator pos:line="73" pos:column="19">&gt;<pos:position pos:line="73" pos:column="23"/></operator><literal type="number" pos:line="73" pos:column="20">0<pos:position pos:line="73" pos:column="21"/></literal></expr>)<pos:position pos:line="73" pos:column="22"/></condition>;<pos:position pos:line="73" pos:column="23"/></do>
  }<pos:position pos:line="74" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="76" pos:column="3">curl_multi_remove_handle<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name pos:line="76" pos:column="28">m<pos:position pos:line="76" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="31">c<pos:position pos:line="76" pos:column="32"/></name></expr></argument>)<pos:position pos:line="76" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="77" pos:column="3">curl_easy_cleanup<pos:position pos:line="77" pos:column="20"/></name><argument_list pos:line="77" pos:column="20">(<argument><expr><name pos:line="77" pos:column="21">c<pos:position pos:line="77" pos:column="22"/></name></expr></argument>)<pos:position pos:line="77" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="78" pos:column="3">curl_multi_cleanup<pos:position pos:line="78" pos:column="21"/></name><argument_list pos:line="78" pos:column="21">(<argument><expr><name pos:line="78" pos:column="22">m<pos:position pos:line="78" pos:column="23"/></name></expr></argument>)<pos:position pos:line="78" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="25"/></expr_stmt>

  <return pos:line="80" pos:column="3">return <expr><name pos:line="80" pos:column="10">ret<pos:position pos:line="80" pos:column="13"/></name></expr>;<pos:position pos:line="80" pos:column="14"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
