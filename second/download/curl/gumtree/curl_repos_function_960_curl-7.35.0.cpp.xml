<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_960_curl-7.35.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_state_auth_ntlm_type2msg_resp<pos:position pos:line="1" pos:column="51"/></name><parameter_list pos:line="1" pos:column="51">(<parameter><decl><type><name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">connectdata<pos:position pos:line="1" pos:column="70"/></name></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">conn<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
                                                   <parameter><decl><type><name pos:line="2" pos:column="52">int<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">imapcode<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
                                                   <parameter><decl><type><name pos:line="3" pos:column="52">imapstate<pos:position pos:line="3" pos:column="61"/></name></type> <name pos:line="3" pos:column="62">instate<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="70"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">conn<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">type2msg<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><name pos:line="7" pos:column="20">NULL<pos:position pos:line="7" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">type3msg<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><name pos:line="8" pos:column="20">NULL<pos:position pos:line="8" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">len<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="11" pos:column="3">(<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">void<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">)<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">instate<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt> <comment type="block" pos:line="11" pos:column="18">/* no use for this yet */</comment>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">imapcode<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">!=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="char" pos:line="13" pos:column="18">'+'<pos:position pos:line="13" pos:column="21"/></literal></expr>)<pos:position pos:line="13" pos:column="22"/></condition><then pos:line="13" pos:column="22"> <block pos:line="13" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">failf<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><name pos:line="14" pos:column="11">data<pos:position pos:line="14" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="17">"Access denied: %d"<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">imapcode<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">result<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="14">CURLE_LOGIN_DENIED<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then>
  <else pos:line="17" pos:column="3">else <block pos:line="17" pos:column="8">{
    <comment type="block" pos:line="18" pos:column="5">/* Get the challenge message */</comment>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">imap_get_message<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name><name pos:line="19" pos:column="22">data<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">state<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">.<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="34">buffer<pos:position pos:line="19" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="42">&amp;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="43">type2msg<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>

    <comment type="block" pos:line="21" pos:column="5">/* Decode the type-2 message */</comment>
    <expr_stmt><expr><name pos:line="22" pos:column="5">result<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">Curl_sasl_decode_ntlm_type2_message<pos:position pos:line="22" pos:column="49"/></name><argument_list pos:line="22" pos:column="49">(<argument><expr><name pos:line="22" pos:column="50">data<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">type2msg<pos:position pos:line="22" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="66">&amp;<pos:position pos:line="22" pos:column="71"/></operator><name><name pos:line="22" pos:column="67">conn<pos:position pos:line="22" pos:column="71"/></name><operator pos:line="22" pos:column="71">-&gt;<pos:position pos:line="22" pos:column="76"/></operator><name pos:line="22" pos:column="73">ntlm<pos:position pos:line="22" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="79"/></expr_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><name pos:line="23" pos:column="8">result<pos:position pos:line="23" pos:column="14"/></name></expr>)<pos:position pos:line="23" pos:column="15"/></condition><then pos:line="23" pos:column="15"> <block pos:line="23" pos:column="16">{
      <comment type="block" pos:line="24" pos:column="7">/* Send the cancellation */</comment>
      <expr_stmt><expr><name pos:line="25" pos:column="7">result<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">Curl_pp_sendf<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><operator pos:line="25" pos:column="30">&amp;<pos:position pos:line="25" pos:column="35"/></operator><name><name pos:line="25" pos:column="31">conn<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="37">proto<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">.<pos:position pos:line="25" pos:column="43"/></operator><name pos:line="25" pos:column="43">imapc<pos:position pos:line="25" pos:column="48"/></name><operator pos:line="25" pos:column="48">.<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="49">pp<pos:position pos:line="25" pos:column="51"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="53">"%s"<pos:position pos:line="25" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="59">"*"<pos:position pos:line="25" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="64"/></expr_stmt>

      <if pos:line="27" pos:column="7">if<condition pos:line="27" pos:column="9">(<expr><operator pos:line="27" pos:column="10">!<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">result<pos:position pos:line="27" pos:column="17"/></name></expr>)<pos:position pos:line="27" pos:column="18"/></condition><then pos:line="27" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="9">state<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">conn<pos:position pos:line="28" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="21">IMAP_AUTHENTICATE_CANCEL<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></then>
    <else pos:line="30" pos:column="5">else <block pos:line="30" pos:column="10">{
      <comment type="block" pos:line="31" pos:column="7">/* Create the type-3 message */</comment>
      <expr_stmt><expr><name pos:line="32" pos:column="7">result<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <call><name pos:line="32" pos:column="16">Curl_sasl_create_ntlm_type3_message<pos:position pos:line="32" pos:column="51"/></name><argument_list pos:line="32" pos:column="51">(<argument><expr><name pos:line="32" pos:column="52">data<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="58">conn<pos:position pos:line="32" pos:column="62"/></name><operator pos:line="32" pos:column="62">-&gt;<pos:position pos:line="32" pos:column="67"/></operator><name pos:line="32" pos:column="64">user<pos:position pos:line="32" pos:column="68"/></name></name></expr></argument>,
                                                   <argument><expr><name><name pos:line="33" pos:column="52">conn<pos:position pos:line="33" pos:column="56"/></name><operator pos:line="33" pos:column="56">-&gt;<pos:position pos:line="33" pos:column="61"/></operator><name pos:line="33" pos:column="58">passwd<pos:position pos:line="33" pos:column="64"/></name></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="66">&amp;<pos:position pos:line="33" pos:column="71"/></operator><name><name pos:line="33" pos:column="67">conn<pos:position pos:line="33" pos:column="71"/></name><operator pos:line="33" pos:column="71">-&gt;<pos:position pos:line="33" pos:column="76"/></operator><name pos:line="33" pos:column="73">ntlm<pos:position pos:line="33" pos:column="77"/></name></name></expr></argument>,
                                                   <argument><expr><operator pos:line="34" pos:column="52">&amp;<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="53">type3msg<pos:position pos:line="34" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="63">&amp;<pos:position pos:line="34" pos:column="68"/></operator><name pos:line="34" pos:column="64">len<pos:position pos:line="34" pos:column="67"/></name></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
      <if pos:line="35" pos:column="7">if<condition pos:line="35" pos:column="9">(<expr><operator pos:line="35" pos:column="10">!<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="11">result<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">&amp;&amp;<pos:position pos:line="35" pos:column="28"/></operator> <name pos:line="35" pos:column="21">type3msg<pos:position pos:line="35" pos:column="29"/></name></expr>)<pos:position pos:line="35" pos:column="30"/></condition><then pos:line="35" pos:column="30"> <block pos:line="35" pos:column="31">{
        <comment type="block" pos:line="36" pos:column="9">/* Send the message */</comment>
        <expr_stmt><expr><name pos:line="37" pos:column="9">result<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">Curl_pp_sendf<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><operator pos:line="37" pos:column="32">&amp;<pos:position pos:line="37" pos:column="37"/></operator><name><name pos:line="37" pos:column="33">conn<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">-&gt;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="39">proto<pos:position pos:line="37" pos:column="44"/></name><operator pos:line="37" pos:column="44">.<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="45">imapc<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">.<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="51">pp<pos:position pos:line="37" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="55">"%s"<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="61">type3msg<pos:position pos:line="37" pos:column="69"/></name></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></expr_stmt>

        <if pos:line="39" pos:column="9">if<condition pos:line="39" pos:column="11">(<expr><operator pos:line="39" pos:column="12">!<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="13">result<pos:position pos:line="39" pos:column="19"/></name></expr>)<pos:position pos:line="39" pos:column="20"/></condition><then pos:line="39" pos:column="20">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="11">state<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">conn<pos:position pos:line="40" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="23">IMAP_AUTHENTICATE_FINAL<pos:position pos:line="40" pos:column="46"/></name></expr></argument>)<pos:position pos:line="40" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt></block></then></if>
      }<pos:position pos:line="41" pos:column="8"/></block></then></if>
    }<pos:position pos:line="42" pos:column="6"/></block></else></if>
  }<pos:position pos:line="43" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="45" pos:column="3">Curl_safefree<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">type3msg<pos:position pos:line="45" pos:column="25"/></name></expr></argument>)<pos:position pos:line="45" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>

  <return pos:line="47" pos:column="3">return <expr><name pos:line="47" pos:column="10">result<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
