<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1007_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">Curl_updateconninfo<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">curl_socket_t<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">sockfd<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">curl_socklen_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">len<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="4" pos:column="31"/></name></name></type> <name pos:line="4" pos:column="32">ssrem<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="5" pos:column="31"/></name></name></type> <name pos:line="5" pos:column="32">ssloc<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name><name pos:line="8" pos:column="6">conn<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">-&gt;<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="12">socktype<pos:position pos:line="8" pos:column="20"/></name></name> <operator pos:line="8" pos:column="21">==<pos:position pos:line="8" pos:column="23"/></operator> <name pos:line="8" pos:column="24">SOCK_DGRAM<pos:position pos:line="8" pos:column="34"/></name></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35">
    <comment type="block" pos:line="9" pos:column="5">/* there's no connection! */</comment>
    <block type="pseudo"><return pos:line="10" pos:column="5">return;<pos:position pos:line="10" pos:column="12"/></return></block></then></if>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><name><name pos:line="12" pos:column="7">conn<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">-&gt;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="13">bits<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">.<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">reuse<pos:position pos:line="12" pos:column="23"/></name></name> <operator pos:line="12" pos:column="24">&amp;&amp;<pos:position pos:line="12" pos:column="34"/></operator> <operator pos:line="12" pos:column="27">!<pos:position pos:line="12" pos:column="28"/></operator><name><name pos:line="12" pos:column="28">conn<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">bits<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">.<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="39">tcp_fastopen<pos:position pos:line="12" pos:column="51"/></name></name></expr>)<pos:position pos:line="12" pos:column="52"/></condition><then pos:line="12" pos:column="52"> <block pos:line="12" pos:column="53">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">len<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <sizeof pos:line="13" pos:column="11">sizeof<argument_list pos:line="13" pos:column="17">(<argument><expr pos:line="13" pos:column="18">struct <name pos:line="13" pos:column="25">Curl_sockaddr_storage<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></sizeof></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
    <if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><call><name pos:line="14" pos:column="8">getpeername<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">sockfd<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="28">(<pos:position pos:line="14" pos:column="29"/></operator>struct <name pos:line="14" pos:column="36">sockaddr<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">*<pos:position pos:line="14" pos:column="45"/></operator><operator pos:line="14" pos:column="45">)<pos:position pos:line="14" pos:column="46"/></operator> <operator pos:line="14" pos:column="47">&amp;<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="48">ssrem<pos:position pos:line="14" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="55">&amp;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="56">len<pos:position pos:line="14" pos:column="59"/></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="61"/></condition><then pos:line="14" pos:column="61"> <block pos:line="14" pos:column="62">{
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">int<pos:position pos:line="15" pos:column="10"/></name></type> <name pos:line="15" pos:column="11">error<pos:position pos:line="15" pos:column="16"/></name> <init pos:line="15" pos:column="17">= <expr><name pos:line="15" pos:column="19">SOCKERRNO<pos:position pos:line="15" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="29"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">failf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">data<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="19">"getpeername() failed with errno %d: %s"<pos:position pos:line="16" pos:column="59"/></literal></expr></argument>,
            <argument><expr><name pos:line="17" pos:column="13">error<pos:position pos:line="17" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="20">Curl_strerror<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">conn<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">error<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
      <return pos:line="18" pos:column="7">return;<pos:position pos:line="18" pos:column="14"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="21" pos:column="5">len<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <sizeof pos:line="21" pos:column="11">sizeof<argument_list pos:line="21" pos:column="17">(<argument><expr pos:line="21" pos:column="18">struct <name pos:line="21" pos:column="25">Curl_sockaddr_storage<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></sizeof></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">memset<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><operator pos:line="22" pos:column="12">&amp;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="13">ssloc<pos:position pos:line="22" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="20">0<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="23">sizeof<argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">ssloc<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><call><name pos:line="23" pos:column="8">getsockname<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">sockfd<pos:position pos:line="23" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="28">(<pos:position pos:line="23" pos:column="29"/></operator>struct <name pos:line="23" pos:column="36">sockaddr<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">*<pos:position pos:line="23" pos:column="45"/></operator><operator pos:line="23" pos:column="45">)<pos:position pos:line="23" pos:column="46"/></operator> <operator pos:line="23" pos:column="47">&amp;<pos:position pos:line="23" pos:column="52"/></operator><name pos:line="23" pos:column="48">ssloc<pos:position pos:line="23" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="55">&amp;<pos:position pos:line="23" pos:column="60"/></operator><name pos:line="23" pos:column="56">len<pos:position pos:line="23" pos:column="59"/></name></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="61"/></condition><then pos:line="23" pos:column="61"> <block pos:line="23" pos:column="62">{
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">int<pos:position pos:line="24" pos:column="10"/></name></type> <name pos:line="24" pos:column="11">error<pos:position pos:line="24" pos:column="16"/></name> <init pos:line="24" pos:column="17">= <expr><name pos:line="24" pos:column="19">SOCKERRNO<pos:position pos:line="24" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="29"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">failf<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">data<pos:position pos:line="25" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="19">"getsockname() failed with errno %d: %s"<pos:position pos:line="25" pos:column="59"/></literal></expr></argument>,
            <argument><expr><name pos:line="26" pos:column="13">error<pos:position pos:line="26" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="20">Curl_strerror<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">conn<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">error<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
      <return pos:line="27" pos:column="7">return;<pos:position pos:line="27" pos:column="14"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <if pos:line="30" pos:column="5">if<condition pos:line="30" pos:column="7">(<expr><operator pos:line="30" pos:column="8">!<pos:position pos:line="30" pos:column="9"/></operator><call><name pos:line="30" pos:column="9">getaddressinfo<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><operator pos:line="30" pos:column="24">(<pos:position pos:line="30" pos:column="25"/></operator>struct <name pos:line="30" pos:column="32">sockaddr<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">*<pos:position pos:line="30" pos:column="41"/></operator><operator pos:line="30" pos:column="41">)<pos:position pos:line="30" pos:column="42"/></operator><operator pos:line="30" pos:column="42">&amp;<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="43">ssrem<pos:position pos:line="30" pos:column="48"/></name></expr></argument>,
                        <argument><expr><name><name pos:line="31" pos:column="25">conn<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">-&gt;<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="31">primary_ip<pos:position pos:line="31" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="43">&amp;<pos:position pos:line="31" pos:column="48"/></operator><name><name pos:line="31" pos:column="44">conn<pos:position pos:line="31" pos:column="48"/></name><operator pos:line="31" pos:column="48">-&gt;<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="50">primary_port<pos:position pos:line="31" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="64"/></condition><then pos:line="31" pos:column="64"> <block pos:line="31" pos:column="65">{
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">failf<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">data<pos:position pos:line="32" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="19">"ssrem inet_ntop() failed with errno %d: %s"<pos:position pos:line="32" pos:column="63"/></literal></expr></argument>,
            <argument><expr><name pos:line="33" pos:column="13">errno<pos:position pos:line="33" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="20">Curl_strerror<pos:position pos:line="33" pos:column="33"/></name><argument_list pos:line="33" pos:column="33">(<argument><expr><name pos:line="33" pos:column="34">conn<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="40">errno<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
      <return pos:line="34" pos:column="7">return;<pos:position pos:line="34" pos:column="14"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">memcpy<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><name><name pos:line="36" pos:column="12">conn<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">-&gt;<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="18">ip_addr_str<pos:position pos:line="36" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="31">conn<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">-&gt;<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="37">primary_ip<pos:position pos:line="36" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">MAX_IPADR_LEN<pos:position pos:line="36" pos:column="62"/></name></expr></argument>)<pos:position pos:line="36" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="64"/></expr_stmt>

    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><operator pos:line="38" pos:column="8">!<pos:position pos:line="38" pos:column="9"/></operator><call><name pos:line="38" pos:column="9">getaddressinfo<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><operator pos:line="38" pos:column="24">(<pos:position pos:line="38" pos:column="25"/></operator>struct <name pos:line="38" pos:column="32">sockaddr<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">*<pos:position pos:line="38" pos:column="41"/></operator><operator pos:line="38" pos:column="41">)<pos:position pos:line="38" pos:column="42"/></operator><operator pos:line="38" pos:column="42">&amp;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="43">ssloc<pos:position pos:line="38" pos:column="48"/></name></expr></argument>,
                       <argument><expr><name><name pos:line="39" pos:column="24">conn<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">-&gt;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="30">local_ip<pos:position pos:line="39" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="40">&amp;<pos:position pos:line="39" pos:column="45"/></operator><name><name pos:line="39" pos:column="41">conn<pos:position pos:line="39" pos:column="45"/></name><operator pos:line="39" pos:column="45">-&gt;<pos:position pos:line="39" pos:column="50"/></operator><name pos:line="39" pos:column="47">local_port<pos:position pos:line="39" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="59"/></condition><then pos:line="39" pos:column="59"> <block pos:line="39" pos:column="60">{
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">failf<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">data<pos:position pos:line="40" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="19">"ssloc inet_ntop() failed with errno %d: %s"<pos:position pos:line="40" pos:column="63"/></literal></expr></argument>,
            <argument><expr><name pos:line="41" pos:column="13">errno<pos:position pos:line="41" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="20">Curl_strerror<pos:position pos:line="41" pos:column="33"/></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">conn<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="40">errno<pos:position pos:line="41" pos:column="45"/></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
      <return pos:line="42" pos:column="7">return;<pos:position pos:line="42" pos:column="14"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="47" pos:column="3">/* persist connection info in session handle */</comment>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">Curl_persistconninfo<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">conn<pos:position pos:line="48" pos:column="28"/></name></expr></argument>)<pos:position pos:line="48" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
