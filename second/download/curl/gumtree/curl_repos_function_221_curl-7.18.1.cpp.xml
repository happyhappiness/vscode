<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_221_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">test<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">char<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">URL<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name><modifier pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></modifier></type> <name pos:line="3" pos:column="9">curls<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLM<pos:position pos:line="4" pos:column="8"/></name><modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type> <name pos:line="4" pos:column="10">multi<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">still_running<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name> <init pos:line="6" pos:column="9">= <expr><operator pos:line="6" pos:column="11">-<pos:position pos:line="6" pos:column="12"/></operator><literal type="number" pos:line="6" pos:column="12">1<pos:position pos:line="6" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLMsg<pos:position pos:line="7" pos:column="10"/></name> <modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">msg<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLMcode<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">res<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">timeval<pos:position pos:line="9" pos:column="17"/></name></name></type> <name pos:line="9" pos:column="18">ml_start<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">timeval<pos:position pos:line="10" pos:column="17"/></name></name></type> <name pos:line="10" pos:column="18">mp_start<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name pos:line="11" pos:column="8">ml_timedout<pos:position pos:line="11" pos:column="19"/></name> <init pos:line="11" pos:column="20">= <expr><name pos:line="11" pos:column="22">FALSE<pos:position pos:line="11" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">mp_timedout<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">FALSE<pos:position pos:line="12" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><call><name pos:line="14" pos:column="7">curl_global_init<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">CURL_GLOBAL_ALL<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call> <operator pos:line="14" pos:column="41">!=<pos:position pos:line="14" pos:column="43"/></operator> <name pos:line="14" pos:column="44">CURLE_OK<pos:position pos:line="14" pos:column="52"/></name></expr>)<pos:position pos:line="14" pos:column="53"/></condition><then pos:line="14" pos:column="53"> <block pos:line="14" pos:column="54">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">fprintf<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">stderr<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="21">"curl_global_init() failed\n"<pos:position pos:line="15" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><operator pos:line="19" pos:column="7">(<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">multi<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">curl_multi_init<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">()<pos:position pos:line="19" pos:column="33"/></argument_list></call><operator pos:line="19" pos:column="33">)<pos:position pos:line="19" pos:column="34"/></operator> <operator pos:line="19" pos:column="35">==<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">NULL<pos:position pos:line="19" pos:column="42"/></name></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43"> <block pos:line="19" pos:column="44">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">fprintf<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">stderr<pos:position pos:line="20" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="21">"curl_multi_init() failed\n"<pos:position pos:line="20" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">curl_global_cleanup<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">()<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="22" pos:column="30"/></name></expr>;<pos:position pos:line="22" pos:column="31"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><operator pos:line="25" pos:column="7">(<pos:position pos:line="25" pos:column="8"/></operator><name pos:line="25" pos:column="8">curls<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">curl_easy_init<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">()<pos:position pos:line="25" pos:column="32"/></argument_list></call><operator pos:line="25" pos:column="32">)<pos:position pos:line="25" pos:column="33"/></operator> <operator pos:line="25" pos:column="34">==<pos:position pos:line="25" pos:column="36"/></operator> <name pos:line="25" pos:column="37">NULL<pos:position pos:line="25" pos:column="41"/></name></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42"> <block pos:line="25" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">fprintf<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">stderr<pos:position pos:line="26" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="21">"curl_easy_init() failed\n"<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">curl_multi_cleanup<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">multi<pos:position pos:line="27" pos:column="29"/></name></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">curl_global_cleanup<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">()<pos:position pos:line="28" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="32" pos:column="3">curl_easy_setopt<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">curls<pos:position pos:line="32" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="27">CURLOPT_URL<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">URL<pos:position pos:line="32" pos:column="43"/></name></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt>

  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><operator pos:line="34" pos:column="7">(<pos:position pos:line="34" pos:column="8"/></operator><name pos:line="34" pos:column="8">res<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <call><name pos:line="34" pos:column="14">curl_multi_add_handle<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><name pos:line="34" pos:column="36">multi<pos:position pos:line="34" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="43">curls<pos:position pos:line="34" pos:column="48"/></name></expr></argument>)<pos:position pos:line="34" pos:column="49"/></argument_list></call><operator pos:line="34" pos:column="49">)<pos:position pos:line="34" pos:column="50"/></operator> <operator pos:line="34" pos:column="51">!=<pos:position pos:line="34" pos:column="53"/></operator> <name pos:line="34" pos:column="54">CURLM_OK<pos:position pos:line="34" pos:column="62"/></name></expr>)<pos:position pos:line="34" pos:column="63"/></condition><then pos:line="34" pos:column="63"> <block pos:line="34" pos:column="64">{
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">fprintf<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">stderr<pos:position pos:line="35" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="21">"curl_multi_add_handle() failed, "<pos:position pos:line="35" pos:column="55"/></literal>
            <literal type="string" pos:line="36" pos:column="13">"with code %d\n"<pos:position pos:line="36" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="31">res<pos:position pos:line="36" pos:column="34"/></name></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">curl_easy_cleanup<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">curls<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">curl_multi_cleanup<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">multi<pos:position pos:line="38" pos:column="29"/></name></expr></argument>)<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">curl_global_cleanup<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">()<pos:position pos:line="39" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="40" pos:column="30"/></name></expr>;<pos:position pos:line="40" pos:column="31"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="43" pos:column="3">mp_timedout<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">=<pos:position pos:line="43" pos:column="16"/></operator> <name pos:line="43" pos:column="17">FALSE<pos:position pos:line="43" pos:column="22"/></name></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="44" pos:column="3">mp_start<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">tutil_tvnow<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">()<pos:position pos:line="44" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>

  <do pos:line="46" pos:column="3">do <block pos:line="46" pos:column="6">{
    <expr_stmt><expr><name pos:line="47" pos:column="5">res<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <call><name pos:line="47" pos:column="11">curl_multi_perform<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">(<argument><expr><name pos:line="47" pos:column="30">multi<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="37">&amp;<pos:position pos:line="47" pos:column="42"/></operator><name pos:line="47" pos:column="38">still_running<pos:position pos:line="47" pos:column="51"/></name></expr></argument>)<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><call><name pos:line="48" pos:column="9">tutil_tvdiff<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><call><name pos:line="48" pos:column="22">tutil_tvnow<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">()<pos:position pos:line="48" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="48" pos:column="37">mp_start<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call> <operator pos:line="48" pos:column="47">&gt;<pos:position pos:line="48" pos:column="51"/></operator> 
        <name pos:line="49" pos:column="9">MULTI_PERFORM_HANG_TIMEOUT<pos:position pos:line="49" pos:column="35"/></name></expr>)<pos:position pos:line="49" pos:column="36"/></condition><then pos:line="49" pos:column="36"> <block pos:line="49" pos:column="37">{
      <expr_stmt><expr><name pos:line="50" pos:column="7">mp_timedout<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="21">TRUE<pos:position pos:line="50" pos:column="25"/></name></expr>;<pos:position pos:line="50" pos:column="26"/></expr_stmt>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>
  }<pos:position pos:line="53" pos:column="4"/></block> while <condition pos:line="53" pos:column="11">(<expr><name pos:line="53" pos:column="12">res<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">==<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="53" pos:column="43"/></name></expr>)<pos:position pos:line="53" pos:column="44"/></condition>;<pos:position pos:line="53" pos:column="45"/></do>

  <expr_stmt><expr><name pos:line="55" pos:column="3">ml_timedout<pos:position pos:line="55" pos:column="14"/></name> <operator pos:line="55" pos:column="15">=<pos:position pos:line="55" pos:column="16"/></operator> <name pos:line="55" pos:column="17">FALSE<pos:position pos:line="55" pos:column="22"/></name></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="56" pos:column="3">ml_start<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <call><name pos:line="56" pos:column="14">tutil_tvnow<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">()<pos:position pos:line="56" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>

  <while pos:line="58" pos:column="3">while <condition pos:line="58" pos:column="9">(<expr><operator pos:line="58" pos:column="10">(<pos:position pos:line="58" pos:column="11"/></operator><operator pos:line="58" pos:column="11">!<pos:position pos:line="58" pos:column="12"/></operator><name pos:line="58" pos:column="12">ml_timedout<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">)<pos:position pos:line="58" pos:column="24"/></operator> <operator pos:line="58" pos:column="25">&amp;&amp;<pos:position pos:line="58" pos:column="35"/></operator> <operator pos:line="58" pos:column="28">(<pos:position pos:line="58" pos:column="29"/></operator><operator pos:line="58" pos:column="29">!<pos:position pos:line="58" pos:column="30"/></operator><name pos:line="58" pos:column="30">mp_timedout<pos:position pos:line="58" pos:column="41"/></name><operator pos:line="58" pos:column="41">)<pos:position pos:line="58" pos:column="42"/></operator> <operator pos:line="58" pos:column="43">&amp;&amp;<pos:position pos:line="58" pos:column="53"/></operator> <operator pos:line="58" pos:column="46">(<pos:position pos:line="58" pos:column="47"/></operator><name pos:line="58" pos:column="47">still_running<pos:position pos:line="58" pos:column="60"/></name><operator pos:line="58" pos:column="60">)<pos:position pos:line="58" pos:column="61"/></operator></expr>)<pos:position pos:line="58" pos:column="62"/></condition> <block pos:line="58" pos:column="63">{
    <decl_stmt><decl><type><name><name pos:line="59" pos:column="5">struct<pos:position pos:line="59" pos:column="11"/></name> <name pos:line="59" pos:column="12">timeval<pos:position pos:line="59" pos:column="19"/></name></name></type> <name pos:line="59" pos:column="20">timeout<pos:position pos:line="59" pos:column="27"/></name></decl>;<pos:position pos:line="59" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">int<pos:position pos:line="60" pos:column="8"/></name></type> <name pos:line="60" pos:column="9">rc<pos:position pos:line="60" pos:column="11"/></name></decl>;<pos:position pos:line="60" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="61" pos:column="5">fd_set<pos:position pos:line="61" pos:column="11"/></name></type> <name pos:line="61" pos:column="12">fdread<pos:position pos:line="61" pos:column="18"/></name></decl>;<pos:position pos:line="61" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="62" pos:column="5">fd_set<pos:position pos:line="62" pos:column="11"/></name></type> <name pos:line="62" pos:column="12">fdwrite<pos:position pos:line="62" pos:column="19"/></name></decl>;<pos:position pos:line="62" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="63" pos:column="5">fd_set<pos:position pos:line="63" pos:column="11"/></name></type> <name pos:line="63" pos:column="12">fdexcep<pos:position pos:line="63" pos:column="19"/></name></decl>;<pos:position pos:line="63" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="64" pos:column="5">int<pos:position pos:line="64" pos:column="8"/></name></type> <name pos:line="64" pos:column="9">maxfd<pos:position pos:line="64" pos:column="14"/></name></decl>;<pos:position pos:line="64" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="66" pos:column="5">FD_ZERO<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><operator pos:line="66" pos:column="13">&amp;<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="14">fdread<pos:position pos:line="66" pos:column="20"/></name></expr></argument>)<pos:position pos:line="66" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">FD_ZERO<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><operator pos:line="67" pos:column="13">&amp;<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="14">fdwrite<pos:position pos:line="67" pos:column="21"/></name></expr></argument>)<pos:position pos:line="67" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">FD_ZERO<pos:position pos:line="68" pos:column="12"/></name><argument_list pos:line="68" pos:column="12">(<argument><expr><operator pos:line="68" pos:column="13">&amp;<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="14">fdexcep<pos:position pos:line="68" pos:column="21"/></name></expr></argument>)<pos:position pos:line="68" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">timeout<pos:position pos:line="69" pos:column="12"/></name><operator pos:line="69" pos:column="12">.<pos:position pos:line="69" pos:column="13"/></operator><name pos:line="69" pos:column="13">tv_sec<pos:position pos:line="69" pos:column="19"/></name></name> <operator pos:line="69" pos:column="20">=<pos:position pos:line="69" pos:column="21"/></operator> <literal type="number" pos:line="69" pos:column="22">1<pos:position pos:line="69" pos:column="23"/></literal></expr>;<pos:position pos:line="69" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">timeout<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">.<pos:position pos:line="70" pos:column="13"/></operator><name pos:line="70" pos:column="13">tv_usec<pos:position pos:line="70" pos:column="20"/></name></name> <operator pos:line="70" pos:column="21">=<pos:position pos:line="70" pos:column="22"/></operator> <literal type="number" pos:line="70" pos:column="23">0<pos:position pos:line="70" pos:column="24"/></literal></expr>;<pos:position pos:line="70" pos:column="25"/></expr_stmt>

    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><call><name pos:line="72" pos:column="9">tutil_tvdiff<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><call><name pos:line="72" pos:column="22">tutil_tvnow<pos:position pos:line="72" pos:column="33"/></name><argument_list pos:line="72" pos:column="33">()<pos:position pos:line="72" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="72" pos:column="37">ml_start<pos:position pos:line="72" pos:column="45"/></name></expr></argument>)<pos:position pos:line="72" pos:column="46"/></argument_list></call> <operator pos:line="72" pos:column="47">&gt;<pos:position pos:line="72" pos:column="51"/></operator> 
        <name pos:line="73" pos:column="9">MAIN_LOOP_HANG_TIMEOUT<pos:position pos:line="73" pos:column="31"/></name></expr>)<pos:position pos:line="73" pos:column="32"/></condition><then pos:line="73" pos:column="32"> <block pos:line="73" pos:column="33">{
      <expr_stmt><expr><name pos:line="74" pos:column="7">ml_timedout<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <name pos:line="74" pos:column="21">TRUE<pos:position pos:line="74" pos:column="25"/></name></expr>;<pos:position pos:line="74" pos:column="26"/></expr_stmt>
      <break pos:line="75" pos:column="7">break;<pos:position pos:line="75" pos:column="13"/></break>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="78" pos:column="5">curl_multi_fdset<pos:position pos:line="78" pos:column="21"/></name><argument_list pos:line="78" pos:column="21">(<argument><expr><name pos:line="78" pos:column="22">multi<pos:position pos:line="78" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="29">&amp;<pos:position pos:line="78" pos:column="34"/></operator><name pos:line="78" pos:column="30">fdread<pos:position pos:line="78" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="38">&amp;<pos:position pos:line="78" pos:column="43"/></operator><name pos:line="78" pos:column="39">fdwrite<pos:position pos:line="78" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="48">&amp;<pos:position pos:line="78" pos:column="53"/></operator><name pos:line="78" pos:column="49">fdexcep<pos:position pos:line="78" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="58">&amp;<pos:position pos:line="78" pos:column="63"/></operator><name pos:line="78" pos:column="59">maxfd<pos:position pos:line="78" pos:column="64"/></name></expr></argument>)<pos:position pos:line="78" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name pos:line="79" pos:column="5">rc<pos:position pos:line="79" pos:column="7"/></name> <operator pos:line="79" pos:column="8">=<pos:position pos:line="79" pos:column="9"/></operator> <call><name pos:line="79" pos:column="10">select_test<pos:position pos:line="79" pos:column="21"/></name><argument_list pos:line="79" pos:column="21">(<argument><expr><name pos:line="79" pos:column="22">maxfd<pos:position pos:line="79" pos:column="27"/></name><operator pos:line="79" pos:column="27">+<pos:position pos:line="79" pos:column="28"/></operator><literal type="number" pos:line="79" pos:column="28">1<pos:position pos:line="79" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="79" pos:column="31">&amp;<pos:position pos:line="79" pos:column="36"/></operator><name pos:line="79" pos:column="32">fdread<pos:position pos:line="79" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="40">&amp;<pos:position pos:line="79" pos:column="45"/></operator><name pos:line="79" pos:column="41">fdwrite<pos:position pos:line="79" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="50">&amp;<pos:position pos:line="79" pos:column="55"/></operator><name pos:line="79" pos:column="51">fdexcep<pos:position pos:line="79" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="60">&amp;<pos:position pos:line="79" pos:column="65"/></operator><name pos:line="79" pos:column="61">timeout<pos:position pos:line="79" pos:column="68"/></name></expr></argument>)<pos:position pos:line="79" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="70"/></expr_stmt>
    <switch pos:line="80" pos:column="5">switch<condition pos:line="80" pos:column="11">(<expr><name pos:line="80" pos:column="12">rc<pos:position pos:line="80" pos:column="14"/></name></expr>)<pos:position pos:line="80" pos:column="15"/></condition> <block pos:line="80" pos:column="16">{
      <case pos:line="81" pos:column="7">case <expr><operator pos:line="81" pos:column="12">-<pos:position pos:line="81" pos:column="13"/></operator><literal type="number" pos:line="81" pos:column="13">1<pos:position pos:line="81" pos:column="14"/></literal></expr>:<pos:position pos:line="81" pos:column="15"/></case>
        <break pos:line="82" pos:column="9">break;<pos:position pos:line="82" pos:column="15"/></break>
      <case pos:line="83" pos:column="7">case <expr><literal type="number" pos:line="83" pos:column="12">0<pos:position pos:line="83" pos:column="13"/></literal></expr>:<pos:position pos:line="83" pos:column="14"/></case>
      <default pos:line="84" pos:column="7">default:<pos:position pos:line="84" pos:column="15"/></default>
        <expr_stmt><expr><name pos:line="85" pos:column="9">mp_timedout<pos:position pos:line="85" pos:column="20"/></name> <operator pos:line="85" pos:column="21">=<pos:position pos:line="85" pos:column="22"/></operator> <name pos:line="85" pos:column="23">FALSE<pos:position pos:line="85" pos:column="28"/></name></expr>;<pos:position pos:line="85" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="86" pos:column="9">mp_start<pos:position pos:line="86" pos:column="17"/></name> <operator pos:line="86" pos:column="18">=<pos:position pos:line="86" pos:column="19"/></operator> <call><name pos:line="86" pos:column="20">tutil_tvnow<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">()<pos:position pos:line="86" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="34"/></expr_stmt>
        <do pos:line="87" pos:column="9">do <block pos:line="87" pos:column="12">{
          <expr_stmt><expr><name pos:line="88" pos:column="11">res<pos:position pos:line="88" pos:column="14"/></name> <operator pos:line="88" pos:column="15">=<pos:position pos:line="88" pos:column="16"/></operator> <call><name pos:line="88" pos:column="17">curl_multi_perform<pos:position pos:line="88" pos:column="35"/></name><argument_list pos:line="88" pos:column="35">(<argument><expr><name pos:line="88" pos:column="36">multi<pos:position pos:line="88" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="43">&amp;<pos:position pos:line="88" pos:column="48"/></operator><name pos:line="88" pos:column="44">still_running<pos:position pos:line="88" pos:column="57"/></name></expr></argument>)<pos:position pos:line="88" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="59"/></expr_stmt>
          <if pos:line="89" pos:column="11">if <condition pos:line="89" pos:column="14">(<expr><call><name pos:line="89" pos:column="15">tutil_tvdiff<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><call><name pos:line="89" pos:column="28">tutil_tvnow<pos:position pos:line="89" pos:column="39"/></name><argument_list pos:line="89" pos:column="39">()<pos:position pos:line="89" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="89" pos:column="43">mp_start<pos:position pos:line="89" pos:column="51"/></name></expr></argument>)<pos:position pos:line="89" pos:column="52"/></argument_list></call> <operator pos:line="89" pos:column="53">&gt;<pos:position pos:line="89" pos:column="57"/></operator> 
              <name pos:line="90" pos:column="15">MULTI_PERFORM_HANG_TIMEOUT<pos:position pos:line="90" pos:column="41"/></name></expr>)<pos:position pos:line="90" pos:column="42"/></condition><then pos:line="90" pos:column="42"> <block pos:line="90" pos:column="43">{
            <expr_stmt><expr><name pos:line="91" pos:column="13">mp_timedout<pos:position pos:line="91" pos:column="24"/></name> <operator pos:line="91" pos:column="25">=<pos:position pos:line="91" pos:column="26"/></operator> <name pos:line="91" pos:column="27">TRUE<pos:position pos:line="91" pos:column="31"/></name></expr>;<pos:position pos:line="91" pos:column="32"/></expr_stmt>
            <break pos:line="92" pos:column="13">break;<pos:position pos:line="92" pos:column="19"/></break>
          }<pos:position pos:line="93" pos:column="12"/></block></then></if>
        }<pos:position pos:line="94" pos:column="10"/></block> while <condition pos:line="94" pos:column="17">(<expr><name pos:line="94" pos:column="18">res<pos:position pos:line="94" pos:column="21"/></name> <operator pos:line="94" pos:column="22">==<pos:position pos:line="94" pos:column="24"/></operator> <name pos:line="94" pos:column="25">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="94" pos:column="49"/></name></expr>)<pos:position pos:line="94" pos:column="50"/></condition>;<pos:position pos:line="94" pos:column="51"/></do>
        <break pos:line="95" pos:column="9">break;<pos:position pos:line="95" pos:column="15"/></break>
    }<pos:position pos:line="96" pos:column="6"/></block></switch>
  }<pos:position pos:line="97" pos:column="4"/></block></while>
  <if pos:line="98" pos:column="3">if <condition pos:line="98" pos:column="6">(<expr><name pos:line="98" pos:column="7">ml_timedout<pos:position pos:line="98" pos:column="18"/></name> <operator pos:line="98" pos:column="19">||<pos:position pos:line="98" pos:column="21"/></operator> <name pos:line="98" pos:column="22">mp_timedout<pos:position pos:line="98" pos:column="33"/></name></expr>)<pos:position pos:line="98" pos:column="34"/></condition><then pos:line="98" pos:column="34"> <block pos:line="98" pos:column="35">{
    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><name pos:line="99" pos:column="9">ml_timedout<pos:position pos:line="99" pos:column="20"/></name></expr>)<pos:position pos:line="99" pos:column="21"/></condition><then pos:line="99" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="99" pos:column="22">fprintf<pos:position pos:line="99" pos:column="29"/></name><argument_list pos:line="99" pos:column="29">(<argument><expr><name pos:line="99" pos:column="30">stderr<pos:position pos:line="99" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="38">"ml_timedout\n"<pos:position pos:line="99" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="55"/></expr_stmt></block></then></if>
    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><name pos:line="100" pos:column="9">mp_timedout<pos:position pos:line="100" pos:column="20"/></name></expr>)<pos:position pos:line="100" pos:column="21"/></condition><then pos:line="100" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="22">fprintf<pos:position pos:line="100" pos:column="29"/></name><argument_list pos:line="100" pos:column="29">(<argument><expr><name pos:line="100" pos:column="30">stderr<pos:position pos:line="100" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="38">"mp_timedout\n"<pos:position pos:line="100" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="55"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">fprintf<pos:position pos:line="101" pos:column="12"/></name><argument_list pos:line="101" pos:column="12">(<argument><expr><name pos:line="101" pos:column="13">stderr<pos:position pos:line="101" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="21">"ABORTING TEST, since it seems "<pos:position pos:line="101" pos:column="53"/></literal>
            <literal type="string" pos:line="102" pos:column="13">"that it would have run forever.\n"<pos:position pos:line="102" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="103" pos:column="5">i<pos:position pos:line="103" pos:column="6"/></name> <operator pos:line="103" pos:column="7">=<pos:position pos:line="103" pos:column="8"/></operator> <name pos:line="103" pos:column="9">TEST_ERR_RUNS_FOREVER<pos:position pos:line="103" pos:column="30"/></name></expr>;<pos:position pos:line="103" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="104" pos:column="4"/></block></then>
  <else pos:line="105" pos:column="3">else <block pos:line="105" pos:column="8">{
    <expr_stmt><expr><name pos:line="106" pos:column="5">msg<pos:position pos:line="106" pos:column="8"/></name> <operator pos:line="106" pos:column="9">=<pos:position pos:line="106" pos:column="10"/></operator> <call><name pos:line="106" pos:column="11">curl_multi_info_read<pos:position pos:line="106" pos:column="31"/></name><argument_list pos:line="106" pos:column="31">(<argument><expr><name pos:line="106" pos:column="32">multi<pos:position pos:line="106" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="39">&amp;<pos:position pos:line="106" pos:column="44"/></operator><name pos:line="106" pos:column="40">still_running<pos:position pos:line="106" pos:column="53"/></name></expr></argument>)<pos:position pos:line="106" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="55"/></expr_stmt>
    <if pos:line="107" pos:column="5">if<condition pos:line="107" pos:column="7">(<expr><name pos:line="107" pos:column="8">msg<pos:position pos:line="107" pos:column="11"/></name></expr>)<pos:position pos:line="107" pos:column="12"/></condition><then pos:line="107" pos:column="12">
      <comment type="block" pos:line="108" pos:column="7">/* this should now contain a result code from the easy handle,
         get it */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="110" pos:column="7">i<pos:position pos:line="110" pos:column="8"/></name> <operator pos:line="110" pos:column="9">=<pos:position pos:line="110" pos:column="10"/></operator> <name><name pos:line="110" pos:column="11">msg<pos:position pos:line="110" pos:column="14"/></name><operator pos:line="110" pos:column="14">-&gt;<pos:position pos:line="110" pos:column="19"/></operator><name pos:line="110" pos:column="16">data<pos:position pos:line="110" pos:column="20"/></name><operator pos:line="110" pos:column="20">.<pos:position pos:line="110" pos:column="21"/></operator><name pos:line="110" pos:column="21">result<pos:position pos:line="110" pos:column="27"/></name></name></expr>;<pos:position pos:line="110" pos:column="28"/></expr_stmt></block></then></if>
  }<pos:position pos:line="111" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="113" pos:column="3">curl_multi_cleanup<pos:position pos:line="113" pos:column="21"/></name><argument_list pos:line="113" pos:column="21">(<argument><expr><name pos:line="113" pos:column="22">multi<pos:position pos:line="113" pos:column="27"/></name></expr></argument>)<pos:position pos:line="113" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="114" pos:column="3">curl_easy_cleanup<pos:position pos:line="114" pos:column="20"/></name><argument_list pos:line="114" pos:column="20">(<argument><expr><name pos:line="114" pos:column="21">curls<pos:position pos:line="114" pos:column="26"/></name></expr></argument>)<pos:position pos:line="114" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="115" pos:column="3">curl_global_cleanup<pos:position pos:line="115" pos:column="22"/></name><argument_list pos:line="115" pos:column="22">()<pos:position pos:line="115" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="25"/></expr_stmt>

  <return pos:line="117" pos:column="3">return <expr><name pos:line="117" pos:column="10">i<pos:position pos:line="117" pos:column="11"/></name></expr>;<pos:position pos:line="117" pos:column="12"/></return> <comment type="block" pos:line="117" pos:column="13">/* return the final return code */</comment>
}<pos:position pos:line="118" pos:column="2"/></block></function></unit>
