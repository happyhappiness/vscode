<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_262_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">lock_callback<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">mode<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">type<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">file<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">line<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><operator pos:line="3" pos:column="3">(<pos:position pos:line="3" pos:column="4"/></operator><name pos:line="3" pos:column="4">void<pos:position pos:line="3" pos:column="8"/></name><operator pos:line="3" pos:column="8">)<pos:position pos:line="3" pos:column="9"/></operator><name pos:line="3" pos:column="9">file<pos:position pos:line="3" pos:column="13"/></name></expr>;<pos:position pos:line="3" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="4" pos:column="3">(<pos:position pos:line="4" pos:column="4"/></operator><name pos:line="4" pos:column="4">void<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">)<pos:position pos:line="4" pos:column="9"/></operator><name pos:line="4" pos:column="9">line<pos:position pos:line="4" pos:column="13"/></name></expr>;<pos:position pos:line="4" pos:column="14"/></expr_stmt>
  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><name pos:line="5" pos:column="6">mode<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">&amp;<pos:position pos:line="5" pos:column="16"/></operator> <name pos:line="5" pos:column="13">CRYPTO_LOCK<pos:position pos:line="5" pos:column="24"/></name></expr>)<pos:position pos:line="5" pos:column="25"/></condition><then pos:line="5" pos:column="25"> <block pos:line="5" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">pthread_mutex_lock<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><operator pos:line="6" pos:column="24">&amp;<pos:position pos:line="6" pos:column="29"/></operator><operator pos:line="6" pos:column="25">(<pos:position pos:line="6" pos:column="26"/></operator><name><name pos:line="6" pos:column="26">lockarray<pos:position pos:line="6" pos:column="35"/></name><index pos:line="6" pos:column="35">[<expr><name pos:line="6" pos:column="36">type<pos:position pos:line="6" pos:column="40"/></name></expr>]<pos:position pos:line="6" pos:column="41"/></index></name><operator pos:line="6" pos:column="41">)<pos:position pos:line="6" pos:column="42"/></operator></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="7" pos:column="4"/></block></then>
  <else pos:line="8" pos:column="3">else <block pos:line="8" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">pthread_mutex_unlock<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><operator pos:line="9" pos:column="26">&amp;<pos:position pos:line="9" pos:column="31"/></operator><operator pos:line="9" pos:column="27">(<pos:position pos:line="9" pos:column="28"/></operator><name><name pos:line="9" pos:column="28">lockarray<pos:position pos:line="9" pos:column="37"/></name><index pos:line="9" pos:column="37">[<expr><name pos:line="9" pos:column="38">type<pos:position pos:line="9" pos:column="42"/></name></expr>]<pos:position pos:line="9" pos:column="43"/></index></name><operator pos:line="9" pos:column="43">)<pos:position pos:line="9" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></else></if>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
