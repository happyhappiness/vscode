<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1619_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLMcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">curl_multi_perform<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">Curl_multi<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">multi<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">running_handles<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLMcode<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">returncode<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">CURLM_OK<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_tree<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">t<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">curltime<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">now<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><call><name pos:line="6" pos:column="25">Curl_tvnow<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">()<pos:position pos:line="6" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><call><name pos:line="8" pos:column="7">GOOD_MULTI_HANDLE<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">multi<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">CURLM_BAD_HANDLE<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">data<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <name><name pos:line="11" pos:column="10">multi<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">easyp<pos:position pos:line="11" pos:column="22"/></name></name></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>
  <while pos:line="12" pos:column="3">while<condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">data<pos:position pos:line="12" pos:column="13"/></name></expr>)<pos:position pos:line="12" pos:column="14"/></condition> <block pos:line="12" pos:column="15">{
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">CURLMcode<pos:position pos:line="13" pos:column="14"/></name></type> <name pos:line="13" pos:column="15">result<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">SIGPIPE_VARIABLE<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">pipe_st<pos:position pos:line="14" pos:column="29"/></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">sigpipe_ignore<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">data<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="26">&amp;<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="27">pipe_st<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">result<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">multi_runsingle<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">multi<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="37">now<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">data<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">sigpipe_restore<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><operator pos:line="18" pos:column="21">&amp;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="22">pipe_st<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>

    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">result<pos:position pos:line="20" pos:column="14"/></name></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15">
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">returncode<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">result<pos:position pos:line="21" pos:column="26"/></name></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="23" pos:column="5">data<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <name><name pos:line="23" pos:column="12">data<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">next<pos:position pos:line="23" pos:column="22"/></name></name></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt> <comment type="block" pos:line="23" pos:column="24">/* operate on next handle */</comment>
  }<pos:position pos:line="24" pos:column="4"/></block></while>

  <comment type="block" pos:line="26" pos:column="3">/*
   * Simply remove all expired timers from the splay since handles are dealt
   * with unconditionally by this function and curl_multi_timeout() requires
   * that already passed/handled expire times are removed from the splay.
   *
   * It is important that the 'now' value is set at the entry of this function
   * and not for the current time as it may have ticked a little while since
   * then and then we risk this loop to remove timers that actually have not
   * been handled!
   */</comment>
  <do pos:line="36" pos:column="3">do <block pos:line="36" pos:column="6">{
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">multi<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">timetree<pos:position pos:line="37" pos:column="20"/></name></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <call><name pos:line="37" pos:column="23">Curl_splaygetbest<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">now<pos:position pos:line="37" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="46">multi<pos:position pos:line="37" pos:column="51"/></name><operator pos:line="37" pos:column="51">-&gt;<pos:position pos:line="37" pos:column="56"/></operator><name pos:line="37" pos:column="53">timetree<pos:position pos:line="37" pos:column="61"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="63">&amp;<pos:position pos:line="37" pos:column="68"/></operator><name pos:line="37" pos:column="64">t<pos:position pos:line="37" pos:column="65"/></name></expr></argument>)<pos:position pos:line="37" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="67"/></expr_stmt>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">t<pos:position pos:line="38" pos:column="9"/></name></expr>)<pos:position pos:line="38" pos:column="10"/></condition><then pos:line="38" pos:column="10">
      <comment type="block" pos:line="39" pos:column="7">/* the removed may have another timeout in queue */</comment>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="40" pos:column="7">(<pos:position pos:line="40" pos:column="8"/></operator><name pos:line="40" pos:column="8">void<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">)<pos:position pos:line="40" pos:column="13"/></operator><call><name pos:line="40" pos:column="13">add_next_timeout<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">now<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">multi<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="42">t<pos:position pos:line="40" pos:column="43"/></name><operator pos:line="40" pos:column="43">-&gt;<pos:position pos:line="40" pos:column="48"/></operator><name pos:line="40" pos:column="45">payload<pos:position pos:line="40" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt></block></then></if>

  }<pos:position pos:line="42" pos:column="4"/></block> while<condition pos:line="42" pos:column="10">(<expr><name pos:line="42" pos:column="11">t<pos:position pos:line="42" pos:column="12"/></name></expr>)<pos:position pos:line="42" pos:column="13"/></condition>;<pos:position pos:line="42" pos:column="14"/></do>

  <expr_stmt><expr><operator pos:line="44" pos:column="3">*<pos:position pos:line="44" pos:column="4"/></operator><name pos:line="44" pos:column="4">running_handles<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">=<pos:position pos:line="44" pos:column="21"/></operator> <name><name pos:line="44" pos:column="22">multi<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">num_alive<pos:position pos:line="44" pos:column="38"/></name></name></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>

  <if pos:line="46" pos:column="3">if<condition pos:line="46" pos:column="5">(<expr><name pos:line="46" pos:column="6">CURLM_OK<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">&gt;=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="18">returncode<pos:position pos:line="46" pos:column="28"/></name></expr>)<pos:position pos:line="46" pos:column="29"/></condition><then pos:line="46" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="5">update_timer<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">multi<pos:position pos:line="47" pos:column="23"/></name></expr></argument>)<pos:position pos:line="47" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="25"/></expr_stmt></block></then></if>

  <return pos:line="49" pos:column="3">return <expr><name pos:line="49" pos:column="10">returncode<pos:position pos:line="49" pos:column="20"/></name></expr>;<pos:position pos:line="49" pos:column="21"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
