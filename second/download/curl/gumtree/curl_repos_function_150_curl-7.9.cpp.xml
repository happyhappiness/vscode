<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_150_curl-7.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_close<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name><name pos:line="1" pos:column="21">struct<pos:position pos:line="1" pos:column="27"/></name> <name pos:line="1" pos:column="28">SessionHandle<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">data<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* Loop through all open connections and kill them one by one */</comment>
  <while pos:line="4" pos:column="3">while<condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">-<pos:position pos:line="4" pos:column="10"/></operator><literal type="number" pos:line="4" pos:column="10">1<pos:position pos:line="4" pos:column="11"/></literal> <operator pos:line="4" pos:column="12">!=<pos:position pos:line="4" pos:column="14"/></operator> <call><name pos:line="4" pos:column="15">ConnectionKillOne<pos:position pos:line="4" pos:column="32"/></name><argument_list pos:line="4" pos:column="32">(<argument><expr><name pos:line="4" pos:column="33">data<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="39"/></condition><block type="pseudo"><empty_stmt pos:line="4" pos:column="39">;<pos:position pos:line="4" pos:column="40"/></empty_stmt></block></while>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">USE_SSLEAY<pos:position pos:line="6" pos:column="18"/></name></cpp:ifdef>
  <comment type="block" pos:line="7" pos:column="3">/* Close down all open info open SSL and sessions */</comment>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">Curl_SSL_Close_All<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">data<pos:position pos:line="8" pos:column="26"/></name></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name><name pos:line="11" pos:column="6">data<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">state<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">auth_host<pos:position pos:line="11" pos:column="27"/></name></name></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="5">free<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><name><name pos:line="12" pos:column="10">data<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">state<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">.<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">auth_host<pos:position pos:line="12" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt></block></then></if>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name><name pos:line="14" pos:column="6">data<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">change<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">.<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">proxy_alloc<pos:position pos:line="14" pos:column="30"/></name></name></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="5">free<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name><name pos:line="15" pos:column="10">data<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">change<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">.<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">proxy<pos:position pos:line="15" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt></block></then></if>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name><name pos:line="17" pos:column="6">data<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">change<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">referer_alloc<pos:position pos:line="17" pos:column="32"/></name></name></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="5">free<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><name><name pos:line="18" pos:column="10">data<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">change<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">.<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">referer<pos:position pos:line="18" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt></block></then></if>

  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name><name pos:line="20" pos:column="6">data<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">change<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">.<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">url_alloc<pos:position pos:line="20" pos:column="28"/></name></name></expr>)<pos:position pos:line="20" pos:column="29"/></condition><then pos:line="20" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="5">free<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><name><name pos:line="21" pos:column="10">data<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">change<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">url<pos:position pos:line="21" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt></block></then></if>

  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name><name pos:line="23" pos:column="6">data<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">state<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">.<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">headerbuff<pos:position pos:line="23" pos:column="28"/></name></name></expr>)<pos:position pos:line="23" pos:column="29"/></condition><then pos:line="23" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="5">free<pos:position pos:line="24" pos:column="9"/></name><argument_list pos:line="24" pos:column="9">(<argument><expr><name><name pos:line="24" pos:column="10">data<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">state<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">.<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">headerbuff<pos:position pos:line="24" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt></block></then></if>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name><name pos:line="26" pos:column="6">data<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">-&gt;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="12">set<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">.<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">cookiejar<pos:position pos:line="26" pos:column="25"/></name></name></expr>)<pos:position pos:line="26" pos:column="26"/></condition><then pos:line="26" pos:column="26">
    <comment type="block" pos:line="27" pos:column="5">/* we have a "destination" for all the cookies to get dumped to */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="5">Curl_cookie_output<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name><name pos:line="28" pos:column="24">data<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">-&gt;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="30">cookies<pos:position pos:line="28" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="39">data<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">-&gt;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="45">set<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">.<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="49">cookiejar<pos:position pos:line="28" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="60"/></expr_stmt></block></then></if>
    
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">Curl_cookie_cleanup<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name><name pos:line="30" pos:column="23">data<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">-&gt;<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="29">cookies<pos:position pos:line="30" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="32" pos:column="3">/* free the connection cache */</comment>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">free<pos:position pos:line="33" pos:column="7"/></name><argument_list pos:line="33" pos:column="7">(<argument><expr><name><name pos:line="33" pos:column="8">data<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">state<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">connects<pos:position pos:line="33" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">free<pos:position pos:line="35" pos:column="7"/></name><argument_list pos:line="35" pos:column="7">(<argument><expr><name pos:line="35" pos:column="8">data<pos:position pos:line="35" pos:column="12"/></name></expr></argument>)<pos:position pos:line="35" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="14"/></expr_stmt>
  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">CURLE_OK<pos:position pos:line="36" pos:column="18"/></name></expr>;<pos:position pos:line="36" pos:column="19"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
