, stdout);
 fputs(
"       able  the  use  of PORT with --ftp-pasv. Disable the attempt to use the\n"
"       EPRT command instead of PORT by using --disable-eprt.  EPRT  is  really\n"
"       PORT++.\n"
"\n"
"       -q     If  used  as  the  first  parameter  on  the  command  line, the\n"
"              $HOME/.curlrc file will not be read and used as a config file.\n"
"\n"
"       -Q/--quote <comand>\n"
"              (FTP) Send an arbitrary command to the remote FTP server.  Quote\n"
, stdout);
 fputs(
"              commands  are  sent  BEFORE  the  transfer is taking place (just\n"
"              after the initial PWD command to be  exact).  To  make  commands\n"
"              take  place after a successful transfer, prefix them with a dash\n"
"              '-'. To make commands get sent after libcurl has changed working\n"
"              directory,  just before the transfer command(s), prefix the com-\n"
"              mand with '+'. You may specify any amount of  commands.  If  the\n"
, stdout);
 fputs(
"              server returns failure for one of the commands, the entire oper-\n"
"              ation will be aborted. You must send syntactically  correct  FTP\n"
"              commands as RFC959 defines.\n"
"\n"
"              This option can be used multiple times.\n"
"\n"
"       --random-file <file>\n"
"              (HTTPS)  Specify  the  path name to file containing what will be\n"
"              considered as random data. The data is used to seed  the  random\n"
, stdout);
 fputs(
"              engine for SSL connections.  See also the --egd-file option.\n"
"\n"
"       -r/--range <range>\n"
"              (HTTP/FTP) Retrieve a byte range (i.e a partial document) from a\n"
"              HTTP/1.1 or FTP server. Ranges can be specified in a  number  of\n"
"              ways.\n"
"\n"
"              0-499     specifies the first 500 bytes\n"
"\n"
"              500-999   specifies the second 500 bytes\n"
"\n"
"              -500      specifies the last 500 bytes\n"
"\n"
, stdout);
 fputs(
"              9500      specifies the bytes from offset 9500 and forward\n"
"\n"
"              0-0,-1    specifies the first and last byte only(*)(H)\n"
"\n"
"              500-700,600-799\n"
"                        specifies 300 bytes from offset 500(H)\n"
"\n"
"              100-199,500-599\n"
"                        specifies two separate 100 bytes ranges(*)(H)\n"
"\n"
"       (*)  =  NOTE  that this will cause the server to reply with a multipart\n"
"       response!\n"
"\n"
, stdout);
 fputs(
"       You should also be aware that many HTTP/1.1 servers do  not  have  this\n"
"       feature  enabled,  so  that  when  you  attempt  to get a range, you'll\n"
"       instead get the whole document.\n"
"\n"
"       FTP  range  downloads  only  support  the  simple  syntax  'start-stop'\n"
"       (optionally with one of the numbers omitted). It depends on the non-RFC\n"
"       command SIZE.\n"
"\n"
"       If this option is used several times, the last one will be used.\n"
"\n"
"       -R/--remote-time\n"
, stdout);
 fputs(
"              When used, this will make libcurl  attempt  to  figure  out  the\n"
"              timestamp  of the remote file, and if that is available make the\n"
"              local file get that same timestamp.\n"
"\n"
"              If this option is used twice,  the  second  time  disables  this\n"
"              again.\n"
"\n"
"       --retry <num>\n"
"              If  a  transient  error is returned when curl tries to perform a\n"
"              transfer, it will retry this number of times before  giving  up.\n"
, stdout);
 fputs(
"              Setting  the  number to 0 makes curl do no retries (which is the\n"
"              default). Transient error means either: a timeout,  an  FTP  5xx\n"
"              response code or an HTTP 5xx response code.\n"
"\n"
"              When  curl  is about to retry a transfer, it will first wait one\n"
"              second and then for all forthcoming retries it will  double  the\n"
"              waiting  time until it reaches 10 minutes which then will be the\n"
, stdout);
 fputs(
"              delay between the rest of the retries.  By  using  --retry-delay\n"
"              you   disable  this  exponential  backoff  algorithm.  See  also\n"
"              --retry-max-time to limit the total time  allowed  for  retries.\n"
"              (Option added in 7.12.3)\n"
"\n"
"              If  this  option  is  used  multiple  times, the last occurrence\n"
"              decide the amount.\n"
"\n"
"       --retry-delay <seconds>\n"
"              Make curl sleep this amount of time between each  retry  when  a\n"
, stdout);
 fputs(
"              transfer  has  failed  with  a  transient  error (it changes the\n"
"              default backoff time algorithm between retries). This option  is\n"
"              only  interesting if --retry is also used. Setting this delay to\n"
"              zero will make curl use the default backoff time.  (Option added\n"
"              in 7.12.3)\n"
"\n"
"              If  this  option  is  used  multiple  times, the last occurrence\n"
"              decide the amount.\n"
"\n"
"       --retry-max-time <seconds>\n"
, stdout);
 fputs(
"              The retry timer is reset  before  the  first  transfer  attempt.\n"
"              Retries will be done as usual (see --retry) as long as the timer\n"
"              hasn't reached this given limit. Notice that if the timer hasn't\n"
"              reached  the  limit, the request will be made and while perform-\n"
"              ing, it may take longer than this given time period. To limit  a\n"
"              single  request's  maximum  time,  use  -m/--max-time.  Set this\n"
, stdout);
 fputs(
"              option to zero to not timeout retries. (Option added in 7.12.3)\n"
"\n"
"              If this option is  used  multiple  times,  the  last  occurrence\n"
"              decide the amount.\n"
"\n"
"       -s/--silent\n"
"              Silent mode. Don't show progress meter or error messages.  Makes\n"
"              Curl mute.\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              mute.\n"
"\n"
"       -S/--show-error\n"
, stdout);
 fputs(
"              When  used with -s it makes curl show error message if it fails.\n"
"              If this option is used twice, the second will again disable show\n"
"              error.\n"
"\n"
"       --socks <host[:port]>\n"
"              Use the specified SOCKS5 proxy. If the port number is not speci-\n"
"              fied, it is assumed at port 1080. (Option added in 7.11.1)\n"
"\n"
"              This option overrides any previous use of  -x/--proxy,  as  they\n"
"              are mutually exclusive.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --stderr <file>\n"
"              Redirect all writes to stderr to the specified file instead.  If\n"
"              the  file  name is a plain '-', it is instead written to stdout.\n"
"              This option has no point when you're using a shell  with  decent\n"
"              redirecting capabilities.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --tcp-nodelay\n"
, stdout);
 fputs(
"              Turn on the TCP_NODELAY option. See the curl_easy_setopt(3)  man\n"
"              page for details about this option. (Added in 7.11.2)\n"
"\n"
"              If  this  option  is used several times, each occurrence toggles\n"
"              this on/off.\n"
"\n"
"       -t/--telnet-option <OPT=val>\n"
"              Pass options to the telnet protocol. Supported options are:\n"
"\n"
"              TTYPE=<term> Sets the terminal type.\n"
