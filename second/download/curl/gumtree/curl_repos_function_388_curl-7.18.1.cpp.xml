<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_388_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">curl_socket_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">singleipconnect<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">connectdata<pos:position pos:line="2" pos:column="35"/></name></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">conn<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">Curl_addrinfo<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">ai<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="4" pos:column="17">long<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">timeout_ms<pos:position pos:line="4" pos:column="32"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="5" pos:column="17">bool<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">connected<pos:position pos:line="5" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="33"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">addr_buf<pos:position pos:line="7" pos:column="16"/></name><index pos:line="7" pos:column="16">[<expr><literal type="number" pos:line="7" pos:column="17">128<pos:position pos:line="7" pos:column="20"/></literal></expr>]<pos:position pos:line="7" pos:column="21"/></index></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">rc<pos:position pos:line="8" pos:column="9"/></name></decl>;<pos:position pos:line="8" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">error<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">isconnected<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">SessionHandle<pos:position pos:line="11" pos:column="23"/></name></name> <modifier pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></modifier></type><name pos:line="11" pos:column="25">data<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><name><name pos:line="11" pos:column="32">conn<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">data<pos:position pos:line="11" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">curl_socket_t<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">sockfd<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">CURLcode<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">res<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>
  <comment type="block" pos:line="14" pos:column="3">/*
   * Curl_sockaddr_storage, which is basically sockaddr_storage has a space
   * for a largest possible struct sockaddr only. We should add some space for
   * the other fields we are using. Hence the addr_storage size math.
   */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name></type> <name><name pos:line="19" pos:column="8">addr_storage<pos:position pos:line="19" pos:column="20"/></name><index pos:line="19" pos:column="20">[<expr><sizeof pos:line="19" pos:column="21">sizeof<argument_list pos:line="19" pos:column="27">(<argument><expr pos:line="19" pos:column="28">struct <name pos:line="19" pos:column="35">curl_sockaddr<pos:position pos:line="19" pos:column="48"/></name></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></sizeof><operator pos:line="19" pos:column="49">-<pos:position pos:line="19" pos:column="50"/></operator>
                    <sizeof pos:line="20" pos:column="21">sizeof<argument_list pos:line="20" pos:column="27">(<argument><expr pos:line="20" pos:column="28">struct <name pos:line="20" pos:column="35">sockaddr<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></sizeof><operator pos:line="20" pos:column="44">+<pos:position pos:line="20" pos:column="45"/></operator>
                    <sizeof pos:line="21" pos:column="21">sizeof<argument_list pos:line="21" pos:column="27">(<argument><expr pos:line="21" pos:column="28">struct <name pos:line="21" pos:column="35">Curl_sockaddr_storage<pos:position pos:line="21" pos:column="56"/></name></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></sizeof></expr>]<pos:position pos:line="21" pos:column="58"/></index></name></decl>;<pos:position pos:line="21" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="22" pos:column="3">struct<pos:position pos:line="22" pos:column="9"/></name> <name pos:line="22" pos:column="10">curl_sockaddr<pos:position pos:line="22" pos:column="23"/></name></name> <modifier pos:line="22" pos:column="24">*<pos:position pos:line="22" pos:column="25"/></modifier></type><name pos:line="22" pos:column="25">addr<pos:position pos:line="22" pos:column="29"/></name><init pos:line="22" pos:column="29">=<expr><operator pos:line="22" pos:column="30">(<pos:position pos:line="22" pos:column="31"/></operator>struct <name pos:line="22" pos:column="38">curl_sockaddr<pos:position pos:line="22" pos:column="51"/></name><operator pos:line="22" pos:column="51">*<pos:position pos:line="22" pos:column="52"/></operator><operator pos:line="22" pos:column="52">)<pos:position pos:line="22" pos:column="53"/></operator><operator pos:line="22" pos:column="53">&amp;<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="54">addr_storage<pos:position pos:line="22" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="67"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="23" pos:column="3">const<pos:position pos:line="23" pos:column="8"/></specifier> <name pos:line="23" pos:column="9">void<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">iptoprint<pos:position pos:line="23" pos:column="24"/></name></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="25" pos:column="3">addr<pos:position pos:line="25" pos:column="7"/></name><operator pos:line="25" pos:column="7">-&gt;<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="9">family<pos:position pos:line="25" pos:column="15"/></name></name><operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator><name><name pos:line="25" pos:column="16">ai<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">-&gt;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="20">ai_family<pos:position pos:line="25" pos:column="29"/></name></name></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">addr<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">-&gt;<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="9">socktype<pos:position pos:line="26" pos:column="17"/></name></name><operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator><name><name pos:line="26" pos:column="18">conn<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">-&gt;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="24">socktype<pos:position pos:line="26" pos:column="32"/></name></name></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">addr<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">-&gt;<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="9">protocol<pos:position pos:line="27" pos:column="17"/></name></name><operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator><name><name pos:line="27" pos:column="18">ai<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">ai_protocol<pos:position pos:line="27" pos:column="33"/></name></name></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">addr<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">-&gt;<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="9">addrlen<pos:position pos:line="28" pos:column="16"/></name></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator>
    <ternary><condition><expr><operator pos:line="29" pos:column="5">(<pos:position pos:line="29" pos:column="6"/></operator><name><name pos:line="29" pos:column="6">ai<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">-&gt;<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="10">ai_addrlen<pos:position pos:line="29" pos:column="20"/></name></name> <operator pos:line="29" pos:column="21">&lt;<pos:position pos:line="29" pos:column="25"/></operator> <operator pos:line="29" pos:column="23">(<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">socklen_t<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">)<pos:position pos:line="29" pos:column="34"/></operator><sizeof pos:line="29" pos:column="34">sizeof<argument_list pos:line="29" pos:column="40">(<argument><expr pos:line="29" pos:column="41">struct <name pos:line="29" pos:column="48">Curl_sockaddr_storage<pos:position pos:line="29" pos:column="69"/></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></sizeof><operator pos:line="29" pos:column="70">)<pos:position pos:line="29" pos:column="71"/></operator></expr> ?<pos:position pos:line="29" pos:column="73"/></condition><then pos:line="29" pos:column="73">
     <expr><operator pos:line="30" pos:column="6">(<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">unsigned<pos:position pos:line="30" pos:column="15"/></name> <name pos:line="30" pos:column="16">int<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">)<pos:position pos:line="30" pos:column="20"/></operator><name><name pos:line="30" pos:column="20">ai<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">-&gt;<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="24">ai_addrlen<pos:position pos:line="30" pos:column="34"/></name></name></expr> <pos:position pos:line="30" pos:column="35"/></then><else pos:line="30" pos:column="35">: <expr><sizeof pos:line="30" pos:column="37">sizeof<argument_list pos:line="30" pos:column="43">(<argument><expr pos:line="30" pos:column="44">struct <name pos:line="30" pos:column="51">Curl_sockaddr_storage<pos:position pos:line="30" pos:column="72"/></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></sizeof></expr></else></ternary></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">memcpy<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">(<argument><expr><operator pos:line="31" pos:column="10">&amp;<pos:position pos:line="31" pos:column="15"/></operator><name><name pos:line="31" pos:column="11">addr<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">-&gt;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="17">addr<pos:position pos:line="31" pos:column="21"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="23">ai<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">-&gt;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="27">ai_addr<pos:position pos:line="31" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="36">addr<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">-&gt;<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="42">addrlen<pos:position pos:line="31" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>

  <comment type="block" pos:line="33" pos:column="3">/* If set, use opensocket callback to get the socket */</comment>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name><name pos:line="34" pos:column="6">data<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">set<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">.<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">fopensocket<pos:position pos:line="34" pos:column="27"/></name></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="5">sockfd<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name><name pos:line="35" pos:column="14">data<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">-&gt;<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="20">set<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">.<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="24">fopensocket<pos:position pos:line="35" pos:column="35"/></name></name><argument_list pos:line="35" pos:column="35">(<argument><expr><name><name pos:line="35" pos:column="36">data<pos:position pos:line="35" pos:column="40"/></name><operator pos:line="35" pos:column="40">-&gt;<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="42">set<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">.<pos:position pos:line="35" pos:column="46"/></operator><name pos:line="35" pos:column="46">opensocket_client<pos:position pos:line="35" pos:column="63"/></name></name></expr></argument>,
                                   <argument><expr><name pos:line="36" pos:column="36">CURLSOCKTYPE_IPCXN<pos:position pos:line="36" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="56">addr<pos:position pos:line="36" pos:column="60"/></name></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="62"/></expr_stmt></block></then>
  <else pos:line="37" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="5">sockfd<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <call><name pos:line="38" pos:column="14">socket<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name><name pos:line="38" pos:column="21">addr<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">-&gt;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="27">family<pos:position pos:line="38" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="35">addr<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">-&gt;<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="41">socktype<pos:position pos:line="38" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="51">addr<pos:position pos:line="38" pos:column="55"/></name><operator pos:line="38" pos:column="55">-&gt;<pos:position pos:line="38" pos:column="60"/></operator><name pos:line="38" pos:column="57">protocol<pos:position pos:line="38" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="67"/></expr_stmt></block></else></if>
  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name pos:line="39" pos:column="6">sockfd<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">==<pos:position pos:line="39" pos:column="15"/></operator> <name pos:line="39" pos:column="16">CURL_SOCKET_BAD<pos:position pos:line="39" pos:column="31"/></name></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32">
    <block type="pseudo"><return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="40" pos:column="27"/></name></expr>;<pos:position pos:line="40" pos:column="28"/></return></block></then></if>

  <expr_stmt><expr><operator pos:line="42" pos:column="3">*<pos:position pos:line="42" pos:column="4"/></operator><name pos:line="42" pos:column="4">connected<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <name pos:line="42" pos:column="16">FALSE<pos:position pos:line="42" pos:column="21"/></name></expr>;<pos:position pos:line="42" pos:column="22"/></expr_stmt> <comment type="block" pos:line="42" pos:column="23">/* default is not connected */</comment>

  <comment type="block" pos:line="44" pos:column="3">/* FIXME: do we have Curl_printable_address-like with struct sockaddr* as
     argument? */</comment>
  <expr_stmt><expr><name pos:line="46" pos:column="3">iptoprint<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <operator pos:line="46" pos:column="15">&amp;<pos:position pos:line="46" pos:column="20"/></operator><operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><operator pos:line="46" pos:column="17">(<pos:position pos:line="46" pos:column="18"/></operator><specifier pos:line="46" pos:column="18">const<pos:position pos:line="46" pos:column="23"/></specifier> struct <name pos:line="46" pos:column="31">sockaddr_in<pos:position pos:line="46" pos:column="42"/></name><operator pos:line="46" pos:column="42">*<pos:position pos:line="46" pos:column="43"/></operator><operator pos:line="46" pos:column="43">)<pos:position pos:line="46" pos:column="44"/></operator><operator pos:line="46" pos:column="44">(<pos:position pos:line="46" pos:column="45"/></operator><operator pos:line="46" pos:column="45">&amp;<pos:position pos:line="46" pos:column="50"/></operator><name><name pos:line="46" pos:column="46">addr<pos:position pos:line="46" pos:column="50"/></name><operator pos:line="46" pos:column="50">-&gt;<pos:position pos:line="46" pos:column="55"/></operator><name pos:line="46" pos:column="52">addr<pos:position pos:line="46" pos:column="56"/></name></name><operator pos:line="46" pos:column="56">)<pos:position pos:line="46" pos:column="57"/></operator><operator pos:line="46" pos:column="57">)<pos:position pos:line="46" pos:column="58"/></operator><operator pos:line="46" pos:column="58">-&gt;<pos:position pos:line="46" pos:column="63"/></operator><name pos:line="46" pos:column="60">sin_addr<pos:position pos:line="46" pos:column="68"/></name></expr>;<pos:position pos:line="46" pos:column="69"/></expr_stmt>
<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">ENABLE_IPV6<pos:position pos:line="47" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><name><name pos:line="48" pos:column="6">addr<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">-&gt;<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="12">family<pos:position pos:line="48" pos:column="18"/></name></name><operator pos:line="48" pos:column="18">==<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">AF_INET6<pos:position pos:line="48" pos:column="28"/></name></expr>)<pos:position pos:line="48" pos:column="29"/></condition><then pos:line="48" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="5">iptoprint<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <operator pos:line="49" pos:column="16">&amp;<pos:position pos:line="49" pos:column="21"/></operator><operator pos:line="49" pos:column="17">(<pos:position pos:line="49" pos:column="18"/></operator><operator pos:line="49" pos:column="18">(<pos:position pos:line="49" pos:column="19"/></operator><specifier pos:line="49" pos:column="19">const<pos:position pos:line="49" pos:column="24"/></specifier> struct <name pos:line="49" pos:column="32">sockaddr_in6<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">*<pos:position pos:line="49" pos:column="45"/></operator><operator pos:line="49" pos:column="45">)<pos:position pos:line="49" pos:column="46"/></operator><operator pos:line="49" pos:column="46">(<pos:position pos:line="49" pos:column="47"/></operator><operator pos:line="49" pos:column="47">&amp;<pos:position pos:line="49" pos:column="52"/></operator><name><name pos:line="49" pos:column="48">addr<pos:position pos:line="49" pos:column="52"/></name><operator pos:line="49" pos:column="52">-&gt;<pos:position pos:line="49" pos:column="57"/></operator><name pos:line="49" pos:column="54">addr<pos:position pos:line="49" pos:column="58"/></name></name><operator pos:line="49" pos:column="58">)<pos:position pos:line="49" pos:column="59"/></operator><operator pos:line="49" pos:column="59">)<pos:position pos:line="49" pos:column="60"/></operator><operator pos:line="49" pos:column="60">-&gt;<pos:position pos:line="49" pos:column="65"/></operator><name pos:line="49" pos:column="62">sin6_addr<pos:position pos:line="49" pos:column="71"/></name></expr>;<pos:position pos:line="49" pos:column="72"/></expr_stmt></block></then></if>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">Curl_inet_ntop<pos:position pos:line="51" pos:column="17"/></name><argument_list pos:line="51" pos:column="17">(<argument><expr><name><name pos:line="51" pos:column="18">addr<pos:position pos:line="51" pos:column="22"/></name><operator pos:line="51" pos:column="22">-&gt;<pos:position pos:line="51" pos:column="27"/></operator><name pos:line="51" pos:column="24">family<pos:position pos:line="51" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="32">iptoprint<pos:position pos:line="51" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">addr_buf<pos:position pos:line="51" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="53">sizeof<argument_list pos:line="51" pos:column="59">(<argument><expr><name pos:line="51" pos:column="60">addr_buf<pos:position pos:line="51" pos:column="68"/></name></expr></argument>)<pos:position pos:line="51" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="71"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">infof<pos:position pos:line="52" pos:column="8"/></name><argument_list pos:line="52" pos:column="8">(<argument><expr><name pos:line="52" pos:column="9">data<pos:position pos:line="52" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="15">"  Trying %s... "<pos:position pos:line="52" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="34">addr_buf<pos:position pos:line="52" pos:column="42"/></name></expr></argument>)<pos:position pos:line="52" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>

  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">(<expr><name><name pos:line="54" pos:column="6">data<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">set<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">.<pos:position pos:line="54" pos:column="16"/></operator><name pos:line="54" pos:column="16">tcp_nodelay<pos:position pos:line="54" pos:column="27"/></name></name></expr>)<pos:position pos:line="54" pos:column="28"/></condition><then pos:line="54" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="5">tcpnodelay<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><name pos:line="55" pos:column="16">conn<pos:position pos:line="55" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="22">sockfd<pos:position pos:line="55" pos:column="28"/></name></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="57" pos:column="3">nosigpipe<pos:position pos:line="57" pos:column="12"/></name><argument_list pos:line="57" pos:column="12">(<argument><expr><name pos:line="57" pos:column="13">conn<pos:position pos:line="57" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="19">sockfd<pos:position pos:line="57" pos:column="25"/></name></expr></argument>)<pos:position pos:line="57" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="27"/></expr_stmt>

  <if pos:line="59" pos:column="3">if<condition pos:line="59" pos:column="5">(<expr><name><name pos:line="59" pos:column="6">data<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">-&gt;<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="12">set<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">.<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="16">fsockopt<pos:position pos:line="59" pos:column="24"/></name></name></expr>)<pos:position pos:line="59" pos:column="25"/></condition><then pos:line="59" pos:column="25"> <block pos:line="59" pos:column="26">{
    <comment type="block" pos:line="60" pos:column="5">/* activate callback for setting socket options */</comment>
    <expr_stmt><expr><name pos:line="61" pos:column="5">error<pos:position pos:line="61" pos:column="10"/></name> <operator pos:line="61" pos:column="11">=<pos:position pos:line="61" pos:column="12"/></operator> <call><name><name pos:line="61" pos:column="13">data<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">-&gt;<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="19">set<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">.<pos:position pos:line="61" pos:column="23"/></operator><name pos:line="61" pos:column="23">fsockopt<pos:position pos:line="61" pos:column="31"/></name></name><argument_list pos:line="61" pos:column="31">(<argument><expr><name><name pos:line="61" pos:column="32">data<pos:position pos:line="61" pos:column="36"/></name><operator pos:line="61" pos:column="36">-&gt;<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="38">set<pos:position pos:line="61" pos:column="41"/></name><operator pos:line="61" pos:column="41">.<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="42">sockopt_client<pos:position pos:line="61" pos:column="56"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="62" pos:column="32">sockfd<pos:position pos:line="62" pos:column="38"/></name></expr></argument>,
                               <argument><expr><name pos:line="63" pos:column="32">CURLSOCKTYPE_IPCXN<pos:position pos:line="63" pos:column="50"/></name></expr></argument>)<pos:position pos:line="63" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="52"/></expr_stmt>
    <if pos:line="64" pos:column="5">if<condition pos:line="64" pos:column="7">(<expr><name pos:line="64" pos:column="8">error<pos:position pos:line="64" pos:column="13"/></name></expr>)<pos:position pos:line="64" pos:column="14"/></condition><then pos:line="64" pos:column="14"> <block pos:line="64" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">sclose<pos:position pos:line="65" pos:column="13"/></name><argument_list pos:line="65" pos:column="13">(<argument><expr><name pos:line="65" pos:column="14">sockfd<pos:position pos:line="65" pos:column="20"/></name></expr></argument>)<pos:position pos:line="65" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="22"/></expr_stmt> <comment type="block" pos:line="65" pos:column="23">/* close the socket and bail out */</comment>
      <return pos:line="66" pos:column="7">return <expr><name pos:line="66" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="66" pos:column="29"/></name></expr>;<pos:position pos:line="66" pos:column="30"/></return>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>
  }<pos:position pos:line="68" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="70" pos:column="3">/* possibly bind the local end to an IP, interface or port */</comment>
  <expr_stmt><expr><name pos:line="71" pos:column="3">res<pos:position pos:line="71" pos:column="6"/></name> <operator pos:line="71" pos:column="7">=<pos:position pos:line="71" pos:column="8"/></operator> <call><name pos:line="71" pos:column="9">bindlocal<pos:position pos:line="71" pos:column="18"/></name><argument_list pos:line="71" pos:column="18">(<argument><expr><name pos:line="71" pos:column="19">conn<pos:position pos:line="71" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="25">sockfd<pos:position pos:line="71" pos:column="31"/></name></expr></argument>)<pos:position pos:line="71" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="33"/></expr_stmt>
  <if pos:line="72" pos:column="3">if<condition pos:line="72" pos:column="5">(<expr><name pos:line="72" pos:column="6">res<pos:position pos:line="72" pos:column="9"/></name></expr>)<pos:position pos:line="72" pos:column="10"/></condition><then pos:line="72" pos:column="10"> <block pos:line="72" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">sclose<pos:position pos:line="73" pos:column="11"/></name><argument_list pos:line="73" pos:column="11">(<argument><expr><name pos:line="73" pos:column="12">sockfd<pos:position pos:line="73" pos:column="18"/></name></expr></argument>)<pos:position pos:line="73" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="20"/></expr_stmt> <comment type="block" pos:line="73" pos:column="21">/* close socket and bail out */</comment>
    <return pos:line="74" pos:column="5">return <expr><name pos:line="74" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="74" pos:column="27"/></name></expr>;<pos:position pos:line="74" pos:column="28"/></return>
  }<pos:position pos:line="75" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="77" pos:column="3">/* set socket non-blocking */</comment>
  <expr_stmt><expr><call><name pos:line="78" pos:column="3">Curl_nonblock<pos:position pos:line="78" pos:column="16"/></name><argument_list pos:line="78" pos:column="16">(<argument><expr><name pos:line="78" pos:column="17">sockfd<pos:position pos:line="78" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="25">TRUE<pos:position pos:line="78" pos:column="29"/></name></expr></argument>)<pos:position pos:line="78" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="80" pos:column="3">/* Connect TCP sockets, bind UDP */</comment>
  <if pos:line="81" pos:column="3">if<condition pos:line="81" pos:column="5">(<expr><name><name pos:line="81" pos:column="6">conn<pos:position pos:line="81" pos:column="10"/></name><operator pos:line="81" pos:column="10">-&gt;<pos:position pos:line="81" pos:column="15"/></operator><name pos:line="81" pos:column="12">socktype<pos:position pos:line="81" pos:column="20"/></name></name> <operator pos:line="81" pos:column="21">==<pos:position pos:line="81" pos:column="23"/></operator> <name pos:line="81" pos:column="24">SOCK_STREAM<pos:position pos:line="81" pos:column="35"/></name></expr>)<pos:position pos:line="81" pos:column="36"/></condition><then pos:line="81" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="5">rc<pos:position pos:line="82" pos:column="7"/></name> <operator pos:line="82" pos:column="8">=<pos:position pos:line="82" pos:column="9"/></operator> <call><name pos:line="82" pos:column="10">connect<pos:position pos:line="82" pos:column="17"/></name><argument_list pos:line="82" pos:column="17">(<argument><expr><name pos:line="82" pos:column="18">sockfd<pos:position pos:line="82" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="26">&amp;<pos:position pos:line="82" pos:column="31"/></operator><name><name pos:line="82" pos:column="27">addr<pos:position pos:line="82" pos:column="31"/></name><operator pos:line="82" pos:column="31">-&gt;<pos:position pos:line="82" pos:column="36"/></operator><name pos:line="82" pos:column="33">addr<pos:position pos:line="82" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="39">addr<pos:position pos:line="82" pos:column="43"/></name><operator pos:line="82" pos:column="43">-&gt;<pos:position pos:line="82" pos:column="48"/></operator><name pos:line="82" pos:column="45">addrlen<pos:position pos:line="82" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="54"/></expr_stmt></block></then>
  <else pos:line="83" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="84" pos:column="5">rc<pos:position pos:line="84" pos:column="7"/></name> <operator pos:line="84" pos:column="8">=<pos:position pos:line="84" pos:column="9"/></operator> <literal type="number" pos:line="84" pos:column="10">0<pos:position pos:line="84" pos:column="11"/></literal></expr>;<pos:position pos:line="84" pos:column="12"/></expr_stmt></block></else></if>

  <if pos:line="86" pos:column="3">if<condition pos:line="86" pos:column="5">(<expr><operator pos:line="86" pos:column="6">-<pos:position pos:line="86" pos:column="7"/></operator><literal type="number" pos:line="86" pos:column="7">1<pos:position pos:line="86" pos:column="8"/></literal> <operator pos:line="86" pos:column="9">==<pos:position pos:line="86" pos:column="11"/></operator> <name pos:line="86" pos:column="12">rc<pos:position pos:line="86" pos:column="14"/></name></expr>)<pos:position pos:line="86" pos:column="15"/></condition><then pos:line="86" pos:column="15"> <block pos:line="86" pos:column="16">{
    <expr_stmt><expr><name pos:line="87" pos:column="5">error<pos:position pos:line="87" pos:column="10"/></name> <operator pos:line="87" pos:column="11">=<pos:position pos:line="87" pos:column="12"/></operator> <name pos:line="87" pos:column="13">SOCKERRNO<pos:position pos:line="87" pos:column="22"/></name></expr>;<pos:position pos:line="87" pos:column="23"/></expr_stmt>

    <switch pos:line="89" pos:column="5">switch <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">error<pos:position pos:line="89" pos:column="18"/></name></expr>)<pos:position pos:line="89" pos:column="19"/></condition> <block pos:line="89" pos:column="20">{
    <case pos:line="90" pos:column="5">case <expr><name pos:line="90" pos:column="10">EINPROGRESS<pos:position pos:line="90" pos:column="21"/></name></expr>:<pos:position pos:line="90" pos:column="22"/></case>
    <case pos:line="91" pos:column="5">case <expr><name pos:line="91" pos:column="10">EWOULDBLOCK<pos:position pos:line="91" pos:column="21"/></name></expr>:<pos:position pos:line="91" pos:column="22"/></case>
<cpp:if pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">if<pos:position pos:line="92" pos:column="4"/></cpp:directive> <expr><call><name pos:line="92" pos:column="5">defined<pos:position pos:line="92" pos:column="12"/></name><argument_list pos:line="92" pos:column="12">(<argument><expr><name pos:line="92" pos:column="13">EAGAIN<pos:position pos:line="92" pos:column="19"/></name></expr></argument>)<pos:position pos:line="92" pos:column="20"/></argument_list></call> <operator pos:line="92" pos:column="21">&amp;&amp;<pos:position pos:line="92" pos:column="31"/></operator> <name pos:line="92" pos:column="24">EAGAIN<pos:position pos:line="92" pos:column="30"/></name> <operator pos:line="92" pos:column="31">!=<pos:position pos:line="92" pos:column="33"/></operator> <name pos:line="92" pos:column="34">EWOULDBLOCK<pos:position pos:line="92" pos:column="45"/></name></expr></cpp:if>
      <comment type="block" pos:line="93" pos:column="7">/* On some platforms EAGAIN and EWOULDBLOCK are the
       * same value, and on others they are different, hence
       * the odd #if
       */</comment>
    <case pos:line="97" pos:column="5">case <expr><name pos:line="97" pos:column="10">EAGAIN<pos:position pos:line="97" pos:column="16"/></name></expr>:<pos:position pos:line="97" pos:column="17"/></case>
<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif<pos:position pos:line="98" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="99" pos:column="7">rc<pos:position pos:line="99" pos:column="9"/></name> <operator pos:line="99" pos:column="10">=<pos:position pos:line="99" pos:column="11"/></operator> <call><name pos:line="99" pos:column="12">waitconnect<pos:position pos:line="99" pos:column="23"/></name><argument_list pos:line="99" pos:column="23">(<argument><expr><name pos:line="99" pos:column="24">sockfd<pos:position pos:line="99" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="32">timeout_ms<pos:position pos:line="99" pos:column="42"/></name></expr></argument>)<pos:position pos:line="99" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="44"/></expr_stmt>
      <break pos:line="100" pos:column="7">break;<pos:position pos:line="100" pos:column="13"/></break>
    <default pos:line="101" pos:column="5">default:<pos:position pos:line="101" pos:column="13"/></default>
      <comment type="block" pos:line="102" pos:column="7">/* unknown error, fallthrough and try another address! */</comment>
      <expr_stmt><expr><call><name pos:line="103" pos:column="7">failf<pos:position pos:line="103" pos:column="12"/></name><argument_list pos:line="103" pos:column="12">(<argument><expr><name pos:line="103" pos:column="13">data<pos:position pos:line="103" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="19">"Failed to connect to %s: %s"<pos:position pos:line="103" pos:column="48"/></literal></expr></argument>,
            <argument><expr><name pos:line="104" pos:column="13">addr_buf<pos:position pos:line="104" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="104" pos:column="23">Curl_strerror<pos:position pos:line="104" pos:column="36"/></name><argument_list pos:line="104" pos:column="36">(<argument><expr><name pos:line="104" pos:column="37">conn<pos:position pos:line="104" pos:column="41"/></name></expr></argument>,<argument><expr><name pos:line="104" pos:column="42">error<pos:position pos:line="104" pos:column="47"/></name></expr></argument>)<pos:position pos:line="104" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="104" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="105" pos:column="7">data<pos:position pos:line="105" pos:column="11"/></name><operator pos:line="105" pos:column="11">-&gt;<pos:position pos:line="105" pos:column="16"/></operator><name pos:line="105" pos:column="13">state<pos:position pos:line="105" pos:column="18"/></name><operator pos:line="105" pos:column="18">.<pos:position pos:line="105" pos:column="19"/></operator><name pos:line="105" pos:column="19">os_errno<pos:position pos:line="105" pos:column="27"/></name></name> <operator pos:line="105" pos:column="28">=<pos:position pos:line="105" pos:column="29"/></operator> <name pos:line="105" pos:column="30">error<pos:position pos:line="105" pos:column="35"/></name></expr>;<pos:position pos:line="105" pos:column="36"/></expr_stmt>
      <break pos:line="106" pos:column="7">break;<pos:position pos:line="106" pos:column="13"/></break>
    }<pos:position pos:line="107" pos:column="6"/></block></switch>
  }<pos:position pos:line="108" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="110" pos:column="3">/* The 'WAITCONN_TIMEOUT == rc' comes from the waitconnect(), and not from
     connect(). We can be sure of this since connect() cannot return 1. */</comment>
  <if pos:line="112" pos:column="3">if<condition pos:line="112" pos:column="5">(<expr><operator pos:line="112" pos:column="6">(<pos:position pos:line="112" pos:column="7"/></operator><name pos:line="112" pos:column="7">WAITCONN_TIMEOUT<pos:position pos:line="112" pos:column="23"/></name> <operator pos:line="112" pos:column="24">==<pos:position pos:line="112" pos:column="26"/></operator> <name pos:line="112" pos:column="27">rc<pos:position pos:line="112" pos:column="29"/></name><operator pos:line="112" pos:column="29">)<pos:position pos:line="112" pos:column="30"/></operator> <operator pos:line="112" pos:column="31">&amp;&amp;<pos:position pos:line="112" pos:column="41"/></operator>
     <operator pos:line="113" pos:column="6">(<pos:position pos:line="113" pos:column="7"/></operator><name><name pos:line="113" pos:column="7">data<pos:position pos:line="113" pos:column="11"/></name><operator pos:line="113" pos:column="11">-&gt;<pos:position pos:line="113" pos:column="16"/></operator><name pos:line="113" pos:column="13">state<pos:position pos:line="113" pos:column="18"/></name><operator pos:line="113" pos:column="18">.<pos:position pos:line="113" pos:column="19"/></operator><name pos:line="113" pos:column="19">used_interface<pos:position pos:line="113" pos:column="33"/></name></name> <operator pos:line="113" pos:column="34">==<pos:position pos:line="113" pos:column="36"/></operator> <name pos:line="113" pos:column="37">Curl_if_multi<pos:position pos:line="113" pos:column="50"/></name><operator pos:line="113" pos:column="50">)<pos:position pos:line="113" pos:column="51"/></operator></expr>)<pos:position pos:line="113" pos:column="52"/></condition><then pos:line="113" pos:column="52"> <block pos:line="113" pos:column="53">{
    <comment type="block" pos:line="114" pos:column="5">/* Timeout when running the multi interface */</comment>
    <return pos:line="115" pos:column="5">return <expr><name pos:line="115" pos:column="12">sockfd<pos:position pos:line="115" pos:column="18"/></name></expr>;<pos:position pos:line="115" pos:column="19"/></return>
  }<pos:position pos:line="116" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="118" pos:column="3">isconnected<pos:position pos:line="118" pos:column="14"/></name> <operator pos:line="118" pos:column="15">=<pos:position pos:line="118" pos:column="16"/></operator> <call><name pos:line="118" pos:column="17">verifyconnect<pos:position pos:line="118" pos:column="30"/></name><argument_list pos:line="118" pos:column="30">(<argument><expr><name pos:line="118" pos:column="31">sockfd<pos:position pos:line="118" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="118" pos:column="39">&amp;<pos:position pos:line="118" pos:column="44"/></operator><name pos:line="118" pos:column="40">error<pos:position pos:line="118" pos:column="45"/></name></expr></argument>)<pos:position pos:line="118" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="47"/></expr_stmt>

  <if pos:line="120" pos:column="3">if<condition pos:line="120" pos:column="5">(<expr><operator pos:line="120" pos:column="6">!<pos:position pos:line="120" pos:column="7"/></operator><name pos:line="120" pos:column="7">rc<pos:position pos:line="120" pos:column="9"/></name> <operator pos:line="120" pos:column="10">&amp;&amp;<pos:position pos:line="120" pos:column="20"/></operator> <name pos:line="120" pos:column="13">isconnected<pos:position pos:line="120" pos:column="24"/></name></expr>)<pos:position pos:line="120" pos:column="25"/></condition><then pos:line="120" pos:column="25"> <block pos:line="120" pos:column="26">{
    <comment type="block" pos:line="121" pos:column="5">/* we are connected, awesome! */</comment>
    <expr_stmt><expr><operator pos:line="122" pos:column="5">*<pos:position pos:line="122" pos:column="6"/></operator><name pos:line="122" pos:column="6">connected<pos:position pos:line="122" pos:column="15"/></name> <operator pos:line="122" pos:column="16">=<pos:position pos:line="122" pos:column="17"/></operator> <name pos:line="122" pos:column="18">TRUE<pos:position pos:line="122" pos:column="22"/></name></expr>;<pos:position pos:line="122" pos:column="23"/></expr_stmt> <comment type="block" pos:line="122" pos:column="24">/* this is a true connect */</comment>
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">infof<pos:position pos:line="123" pos:column="10"/></name><argument_list pos:line="123" pos:column="10">(<argument><expr><name pos:line="123" pos:column="11">data<pos:position pos:line="123" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="17">"connected\n"<pos:position pos:line="123" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="32"/></expr_stmt>
    <return pos:line="124" pos:column="5">return <expr><name pos:line="124" pos:column="12">sockfd<pos:position pos:line="124" pos:column="18"/></name></expr>;<pos:position pos:line="124" pos:column="19"/></return>
  }<pos:position pos:line="125" pos:column="4"/></block></then>
  <elseif pos:line="126" pos:column="3">else <if pos:line="126" pos:column="8">if<condition pos:line="126" pos:column="10">(<expr><name pos:line="126" pos:column="11">WAITCONN_TIMEOUT<pos:position pos:line="126" pos:column="27"/></name> <operator pos:line="126" pos:column="28">==<pos:position pos:line="126" pos:column="30"/></operator> <name pos:line="126" pos:column="31">rc<pos:position pos:line="126" pos:column="33"/></name></expr>)<pos:position pos:line="126" pos:column="34"/></condition><then pos:line="126" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="5">infof<pos:position pos:line="127" pos:column="10"/></name><argument_list pos:line="127" pos:column="10">(<argument><expr><name pos:line="127" pos:column="11">data<pos:position pos:line="127" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="17">"Timeout\n"<pos:position pos:line="127" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="30"/></expr_stmt></block></then></if></elseif>
  <else pos:line="128" pos:column="3">else <block pos:line="128" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="129" pos:column="5">data<pos:position pos:line="129" pos:column="9"/></name><operator pos:line="129" pos:column="9">-&gt;<pos:position pos:line="129" pos:column="14"/></operator><name pos:line="129" pos:column="11">state<pos:position pos:line="129" pos:column="16"/></name><operator pos:line="129" pos:column="16">.<pos:position pos:line="129" pos:column="17"/></operator><name pos:line="129" pos:column="17">os_errno<pos:position pos:line="129" pos:column="25"/></name></name> <operator pos:line="129" pos:column="26">=<pos:position pos:line="129" pos:column="27"/></operator> <name pos:line="129" pos:column="28">error<pos:position pos:line="129" pos:column="33"/></name></expr>;<pos:position pos:line="129" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="130" pos:column="5">infof<pos:position pos:line="130" pos:column="10"/></name><argument_list pos:line="130" pos:column="10">(<argument><expr><name pos:line="130" pos:column="11">data<pos:position pos:line="130" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="17">"%s\n"<pos:position pos:line="130" pos:column="23"/></literal></expr></argument>, <argument><expr><call><name pos:line="130" pos:column="25">Curl_strerror<pos:position pos:line="130" pos:column="38"/></name><argument_list pos:line="130" pos:column="38">(<argument><expr><name pos:line="130" pos:column="39">conn<pos:position pos:line="130" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="45">error<pos:position pos:line="130" pos:column="50"/></name></expr></argument>)<pos:position pos:line="130" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="130" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="131" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="133" pos:column="3">/* connect failed or timed out */</comment>
  <expr_stmt><expr><call><name pos:line="134" pos:column="3">sclose<pos:position pos:line="134" pos:column="9"/></name><argument_list pos:line="134" pos:column="9">(<argument><expr><name pos:line="134" pos:column="10">sockfd<pos:position pos:line="134" pos:column="16"/></name></expr></argument>)<pos:position pos:line="134" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="18"/></expr_stmt>

  <return pos:line="136" pos:column="3">return <expr><name pos:line="136" pos:column="10">CURL_SOCKET_BAD<pos:position pos:line="136" pos:column="25"/></name></expr>;<pos:position pos:line="136" pos:column="26"/></return>
}<pos:position pos:line="137" pos:column="2"/></block></function></unit>
