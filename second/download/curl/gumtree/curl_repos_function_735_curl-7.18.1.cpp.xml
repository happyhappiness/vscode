<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_735_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">tftp_rx<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">tftp_state_data_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">state<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">tftp_event_t<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">event<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">sbytes<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">rblock<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SessionHandle<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">data<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name><name pos:line="5" pos:column="32">state<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">conn<pos:position pos:line="5" pos:column="43"/></name><operator pos:line="5" pos:column="43">-&gt;<pos:position pos:line="5" pos:column="48"/></operator><name pos:line="5" pos:column="45">data<pos:position pos:line="5" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>

  <switch pos:line="7" pos:column="3">switch<condition pos:line="7" pos:column="9">(<expr><name pos:line="7" pos:column="10">event<pos:position pos:line="7" pos:column="15"/></name></expr>)<pos:position pos:line="7" pos:column="16"/></condition> <block pos:line="7" pos:column="17">{

  <case pos:line="9" pos:column="3">case <expr><name pos:line="9" pos:column="8">TFTP_EVENT_DATA<pos:position pos:line="9" pos:column="23"/></name></expr>:<pos:position pos:line="9" pos:column="24"/></case>

    <comment type="block" pos:line="11" pos:column="5">/* Is this the block we expect? */</comment>
    <expr_stmt><expr><name pos:line="12" pos:column="5">rblock<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">getrpacketblock<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><operator pos:line="12" pos:column="30">&amp;<pos:position pos:line="12" pos:column="35"/></operator><name><name pos:line="12" pos:column="31">state<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">rpacket<pos:position pos:line="12" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
    <if pos:line="13" pos:column="5">if<condition pos:line="13" pos:column="7">(<expr><operator pos:line="13" pos:column="8">(<pos:position pos:line="13" pos:column="9"/></operator><name><name pos:line="13" pos:column="9">state<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">block<pos:position pos:line="13" pos:column="21"/></name></name><operator pos:line="13" pos:column="21">+<pos:position pos:line="13" pos:column="22"/></operator><literal type="number" pos:line="13" pos:column="22">1<pos:position pos:line="13" pos:column="23"/></literal><operator pos:line="13" pos:column="23">)<pos:position pos:line="13" pos:column="24"/></operator> <operator pos:line="13" pos:column="25">!=<pos:position pos:line="13" pos:column="27"/></operator> <name pos:line="13" pos:column="28">rblock<pos:position pos:line="13" pos:column="34"/></name></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35"> <block pos:line="13" pos:column="36">{
      <comment type="block" pos:line="14" pos:column="7">/* No, log it, up the retry count and fail if over the limit */</comment>
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">infof<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">data<pos:position pos:line="15" pos:column="17"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="16" pos:column="13">"Received unexpected DATA packet block %d\n"<pos:position pos:line="16" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="59">rblock<pos:position pos:line="16" pos:column="65"/></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="17" pos:column="7">state<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">retries<pos:position pos:line="17" pos:column="21"/></name></name><operator pos:line="17" pos:column="21">++<pos:position pos:line="17" pos:column="23"/></operator></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
      <if pos:line="18" pos:column="7">if<condition pos:line="18" pos:column="9">(<expr><name><name pos:line="18" pos:column="10">state<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">retries<pos:position pos:line="18" pos:column="24"/></name></name><operator pos:line="18" pos:column="24">&gt;<pos:position pos:line="18" pos:column="28"/></operator><name><name pos:line="18" pos:column="25">state<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">retry_max<pos:position pos:line="18" pos:column="41"/></name></name></expr>)<pos:position pos:line="18" pos:column="42"/></condition><then pos:line="18" pos:column="42"> <block pos:line="18" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">failf<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">data<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="21">"tftp_rx: giving up waiting for block %d"<pos:position pos:line="19" pos:column="62"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="20" pos:column="15">state<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">block<pos:position pos:line="20" pos:column="27"/></name></name><operator pos:line="20" pos:column="27">+<pos:position pos:line="20" pos:column="28"/></operator><literal type="number" pos:line="20" pos:column="28">1<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">CURLE_TFTP_ILLEGAL<pos:position pos:line="21" pos:column="34"/></name></expr>;<pos:position pos:line="21" pos:column="35"/></return>
      }<pos:position pos:line="22" pos:column="8"/></block></then></if>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="24" pos:column="5">/* This is the expected block.  Reset counters and ACK it. */</comment>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">state<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">block<pos:position pos:line="25" pos:column="17"/></name></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <operator pos:line="25" pos:column="20">(<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="21">unsigned<pos:position pos:line="25" pos:column="29"/></name> <name pos:line="25" pos:column="30">short<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">)<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">rblock<pos:position pos:line="25" pos:column="42"/></name></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">state<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">-&gt;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="12">retries<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <literal type="number" pos:line="26" pos:column="22">0<pos:position pos:line="26" pos:column="23"/></literal></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">setpacketevent<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><operator pos:line="27" pos:column="20">&amp;<pos:position pos:line="27" pos:column="25"/></operator><name><name pos:line="27" pos:column="21">state<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-&gt;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="28">spacket<pos:position pos:line="27" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">TFTP_EVENT_ACK<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">setpacketblock<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><operator pos:line="28" pos:column="20">&amp;<pos:position pos:line="28" pos:column="25"/></operator><name><name pos:line="28" pos:column="21">state<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">spacket<pos:position pos:line="28" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="37">state<pos:position pos:line="28" pos:column="42"/></name><operator pos:line="28" pos:column="42">-&gt;<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="44">block<pos:position pos:line="28" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">sbytes<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">sendto<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name><name pos:line="29" pos:column="21">state<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">-&gt;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="28">sockfd<pos:position pos:line="29" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="36">(<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="37">void<pos:position pos:line="29" pos:column="41"/></name> <operator pos:line="29" pos:column="42">*<pos:position pos:line="29" pos:column="43"/></operator><operator pos:line="29" pos:column="43">)<pos:position pos:line="29" pos:column="44"/></operator><name><name pos:line="29" pos:column="44">state<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">-&gt;<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="51">spacket<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">.<pos:position pos:line="29" pos:column="59"/></operator><name pos:line="29" pos:column="59">data<pos:position pos:line="29" pos:column="63"/></name></name></expr></argument>,
                    <argument><expr><literal type="number" pos:line="30" pos:column="21">4<pos:position pos:line="30" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="24">SEND_4TH_ARG<pos:position pos:line="30" pos:column="36"/></name></expr></argument>,
                    <argument><expr><operator pos:line="31" pos:column="21">(<pos:position pos:line="31" pos:column="22"/></operator>struct <name pos:line="31" pos:column="29">sockaddr<pos:position pos:line="31" pos:column="37"/></name> <operator pos:line="31" pos:column="38">*<pos:position pos:line="31" pos:column="39"/></operator><operator pos:line="31" pos:column="39">)<pos:position pos:line="31" pos:column="40"/></operator><operator pos:line="31" pos:column="40">&amp;<pos:position pos:line="31" pos:column="45"/></operator><name><name pos:line="31" pos:column="41">state<pos:position pos:line="31" pos:column="46"/></name><operator pos:line="31" pos:column="46">-&gt;<pos:position pos:line="31" pos:column="51"/></operator><name pos:line="31" pos:column="48">remote_addr<pos:position pos:line="31" pos:column="59"/></name></name></expr></argument>,
                    <argument><expr><name><name pos:line="32" pos:column="21">state<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">-&gt;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="28">remote_addrlen<pos:position pos:line="32" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><name pos:line="33" pos:column="8">sbytes<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">&lt;<pos:position pos:line="33" pos:column="19"/></operator> <literal type="number" pos:line="33" pos:column="17">0<pos:position pos:line="33" pos:column="18"/></literal></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19"> <block pos:line="33" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">failf<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">data<pos:position pos:line="34" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="19">"%s"<pos:position pos:line="34" pos:column="23"/></literal></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="25">Curl_strerror<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><name><name pos:line="34" pos:column="39">state<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">-&gt;<pos:position pos:line="34" pos:column="49"/></operator><name pos:line="34" pos:column="46">conn<pos:position pos:line="34" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">SOCKERRNO<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="64"/></expr_stmt>
      <return pos:line="35" pos:column="7">return <expr><name pos:line="35" pos:column="14">CURLE_SEND_ERROR<pos:position pos:line="35" pos:column="30"/></name></expr>;<pos:position pos:line="35" pos:column="31"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="38" pos:column="5">/* Check if completed (That is, a less than full packet is received) */</comment>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name><name pos:line="39" pos:column="8">state<pos:position pos:line="39" pos:column="13"/></name><operator pos:line="39" pos:column="13">-&gt;<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="15">rbytes<pos:position pos:line="39" pos:column="21"/></name></name> <operator pos:line="39" pos:column="22">&lt;<pos:position pos:line="39" pos:column="26"/></operator> <operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">int<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">)<pos:position pos:line="39" pos:column="29"/></operator><sizeof pos:line="39" pos:column="29">sizeof<argument_list pos:line="39" pos:column="35">(<argument><expr><name><name pos:line="39" pos:column="36">state<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">-&gt;<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="43">spacket<pos:position pos:line="39" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="51"/></argument_list></sizeof></expr>)<pos:position pos:line="39" pos:column="52"/></condition><then><block pos:line="39" pos:column="52">{
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">state<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">-&gt;<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="14">state<pos:position pos:line="40" pos:column="19"/></name></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <name pos:line="40" pos:column="22">TFTP_STATE_FIN<pos:position pos:line="40" pos:column="36"/></name></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then>
    <else pos:line="42" pos:column="5">else <block pos:line="42" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="43" pos:column="7">state<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">state<pos:position pos:line="43" pos:column="19"/></name></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <name pos:line="43" pos:column="22">TFTP_STATE_RX<pos:position pos:line="43" pos:column="35"/></name></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>
    <break pos:line="45" pos:column="5">break;<pos:position pos:line="45" pos:column="11"/></break>

  <case pos:line="47" pos:column="3">case <expr><name pos:line="47" pos:column="8">TFTP_EVENT_TIMEOUT<pos:position pos:line="47" pos:column="26"/></name></expr>:<pos:position pos:line="47" pos:column="27"/></case>
    <comment type="block" pos:line="48" pos:column="5">/* Increment the retry count and fail if over the limit */</comment>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">state<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">-&gt;<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="12">retries<pos:position pos:line="49" pos:column="19"/></name></name><operator pos:line="49" pos:column="19">++<pos:position pos:line="49" pos:column="21"/></operator></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">infof<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><name pos:line="50" pos:column="11">data<pos:position pos:line="50" pos:column="15"/></name></expr></argument>,
          <argument><expr><literal type="string" pos:line="51" pos:column="11">"Timeout waiting for block %d ACK.  Retries = %d\n"<pos:position pos:line="51" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="64">state<pos:position pos:line="51" pos:column="69"/></name><operator pos:line="51" pos:column="69">-&gt;<pos:position pos:line="51" pos:column="74"/></operator><name pos:line="51" pos:column="71">retries<pos:position pos:line="51" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="80"/></expr_stmt>
    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name><name pos:line="52" pos:column="8">state<pos:position pos:line="52" pos:column="13"/></name><operator pos:line="52" pos:column="13">-&gt;<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="15">retries<pos:position pos:line="52" pos:column="22"/></name></name> <operator pos:line="52" pos:column="23">&gt;<pos:position pos:line="52" pos:column="27"/></operator> <name><name pos:line="52" pos:column="25">state<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">-&gt;<pos:position pos:line="52" pos:column="35"/></operator><name pos:line="52" pos:column="32">retry_max<pos:position pos:line="52" pos:column="41"/></name></name></expr>)<pos:position pos:line="52" pos:column="42"/></condition><then pos:line="52" pos:column="42"> <block pos:line="52" pos:column="43">{
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">state<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">error<pos:position pos:line="53" pos:column="19"/></name></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">TFTP_ERR_TIMEOUT<pos:position pos:line="53" pos:column="38"/></name></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="54" pos:column="7">state<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">-&gt;<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="14">state<pos:position pos:line="54" pos:column="19"/></name></name> <operator pos:line="54" pos:column="20">=<pos:position pos:line="54" pos:column="21"/></operator> <name pos:line="54" pos:column="22">TFTP_STATE_FIN<pos:position pos:line="54" pos:column="36"/></name></expr>;<pos:position pos:line="54" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></then>
    <else pos:line="56" pos:column="5">else <block pos:line="56" pos:column="10">{
      <comment type="block" pos:line="57" pos:column="7">/* Resend the previous ACK */</comment>
      <expr_stmt><expr><name pos:line="58" pos:column="7">sbytes<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">=<pos:position pos:line="58" pos:column="15"/></operator> <call><name pos:line="58" pos:column="16">sendto<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><name><name pos:line="58" pos:column="23">state<pos:position pos:line="58" pos:column="28"/></name><operator pos:line="58" pos:column="28">-&gt;<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="30">sockfd<pos:position pos:line="58" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="38">(<pos:position pos:line="58" pos:column="39"/></operator><name pos:line="58" pos:column="39">void<pos:position pos:line="58" pos:column="43"/></name> <operator pos:line="58" pos:column="44">*<pos:position pos:line="58" pos:column="45"/></operator><operator pos:line="58" pos:column="45">)<pos:position pos:line="58" pos:column="46"/></operator><operator pos:line="58" pos:column="46">&amp;<pos:position pos:line="58" pos:column="51"/></operator><name><name pos:line="58" pos:column="47">state<pos:position pos:line="58" pos:column="52"/></name><operator pos:line="58" pos:column="52">-&gt;<pos:position pos:line="58" pos:column="57"/></operator><name pos:line="58" pos:column="54">spacket<pos:position pos:line="58" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><literal type="number" pos:line="59" pos:column="23">4<pos:position pos:line="59" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="26">SEND_4TH_ARG<pos:position pos:line="59" pos:column="38"/></name></expr></argument>,
                      <argument><expr><operator pos:line="60" pos:column="23">(<pos:position pos:line="60" pos:column="24"/></operator>struct <name pos:line="60" pos:column="31">sockaddr<pos:position pos:line="60" pos:column="39"/></name> <operator pos:line="60" pos:column="40">*<pos:position pos:line="60" pos:column="41"/></operator><operator pos:line="60" pos:column="41">)<pos:position pos:line="60" pos:column="42"/></operator><operator pos:line="60" pos:column="42">&amp;<pos:position pos:line="60" pos:column="47"/></operator><name><name pos:line="60" pos:column="43">state<pos:position pos:line="60" pos:column="48"/></name><operator pos:line="60" pos:column="48">-&gt;<pos:position pos:line="60" pos:column="53"/></operator><name pos:line="60" pos:column="50">remote_addr<pos:position pos:line="60" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><name><name pos:line="61" pos:column="23">state<pos:position pos:line="61" pos:column="28"/></name><operator pos:line="61" pos:column="28">-&gt;<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="30">remote_addrlen<pos:position pos:line="61" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
      <comment type="block" pos:line="62" pos:column="7">/* Check all sbytes were sent */</comment>
      <if pos:line="63" pos:column="7">if<condition pos:line="63" pos:column="9">(<expr><name pos:line="63" pos:column="10">sbytes<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">&lt;<pos:position pos:line="63" pos:column="20"/></operator><literal type="number" pos:line="63" pos:column="17">0<pos:position pos:line="63" pos:column="18"/></literal></expr>)<pos:position pos:line="63" pos:column="19"/></condition><then pos:line="63" pos:column="19"> <block pos:line="63" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">failf<pos:position pos:line="64" pos:column="14"/></name><argument_list pos:line="64" pos:column="14">(<argument><expr><name pos:line="64" pos:column="15">data<pos:position pos:line="64" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="21">"%s"<pos:position pos:line="64" pos:column="25"/></literal></expr></argument>, <argument><expr><call><name pos:line="64" pos:column="27">Curl_strerror<pos:position pos:line="64" pos:column="40"/></name><argument_list pos:line="64" pos:column="40">(<argument><expr><name><name pos:line="64" pos:column="41">state<pos:position pos:line="64" pos:column="46"/></name><operator pos:line="64" pos:column="46">-&gt;<pos:position pos:line="64" pos:column="51"/></operator><name pos:line="64" pos:column="48">conn<pos:position pos:line="64" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="54">SOCKERRNO<pos:position pos:line="64" pos:column="63"/></name></expr></argument>)<pos:position pos:line="64" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="66"/></expr_stmt>
        <return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">CURLE_SEND_ERROR<pos:position pos:line="65" pos:column="32"/></name></expr>;<pos:position pos:line="65" pos:column="33"/></return>
      }<pos:position pos:line="66" pos:column="8"/></block></then></if>
    }<pos:position pos:line="67" pos:column="6"/></block></else></if>
    <break pos:line="68" pos:column="5">break;<pos:position pos:line="68" pos:column="11"/></break>

  <case pos:line="70" pos:column="3">case <expr><name pos:line="70" pos:column="8">TFTP_EVENT_ERROR<pos:position pos:line="70" pos:column="24"/></name></expr>:<pos:position pos:line="70" pos:column="25"/></case>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">state<pos:position pos:line="71" pos:column="10"/></name><operator pos:line="71" pos:column="10">-&gt;<pos:position pos:line="71" pos:column="15"/></operator><name pos:line="71" pos:column="12">state<pos:position pos:line="71" pos:column="17"/></name></name> <operator pos:line="71" pos:column="18">=<pos:position pos:line="71" pos:column="19"/></operator> <name pos:line="71" pos:column="20">TFTP_STATE_FIN<pos:position pos:line="71" pos:column="34"/></name></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt>
    <break pos:line="72" pos:column="5">break;<pos:position pos:line="72" pos:column="11"/></break>

  <default pos:line="74" pos:column="3">default:<pos:position pos:line="74" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">failf<pos:position pos:line="75" pos:column="10"/></name><argument_list pos:line="75" pos:column="10">(<argument><expr><name pos:line="75" pos:column="11">data<pos:position pos:line="75" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="17">"%s"<pos:position pos:line="75" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="23">"tftp_rx: internal error"<pos:position pos:line="75" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="50"/></expr_stmt>
    <return pos:line="76" pos:column="5">return <expr><name pos:line="76" pos:column="12">CURLE_TFTP_ILLEGAL<pos:position pos:line="76" pos:column="30"/></name></expr>;<pos:position pos:line="76" pos:column="31"/></return> <comment type="block" pos:line="76" pos:column="32">/* not really the perfect return code for
                                  this */</comment>
  }<pos:position pos:line="78" pos:column="4"/></block></switch>
  <return pos:line="79" pos:column="3">return <expr><name pos:line="79" pos:column="10">CURLE_OK<pos:position pos:line="79" pos:column="18"/></name></expr>;<pos:position pos:line="79" pos:column="19"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
