<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_254_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">char<pos:position pos:line="2" pos:column="5"/></name> <modifier pos:line="2" pos:column="6">*<pos:position pos:line="2" pos:column="7"/></modifier></type><name pos:line="2" pos:column="7">appendstring<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">string<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <comment type="block" pos:line="2" pos:column="34">/* original string */</comment>
                   <parameter><decl><type><name pos:line="3" pos:column="20">char<pos:position pos:line="3" pos:column="24"/></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">buffer<pos:position pos:line="3" pos:column="32"/></name></decl></parameter>, <comment type="block" pos:line="3" pos:column="34">/* to append */</comment>
                   <parameter><decl><type><name pos:line="4" pos:column="20">size_t<pos:position pos:line="4" pos:column="26"/></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">stringlen<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>, <comment type="block" pos:line="4" pos:column="39">/* length of string */</comment>
                   <parameter><decl><type><name pos:line="5" pos:column="20">size_t<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">stralloc<pos:position pos:line="5" pos:column="36"/></name></decl></parameter>,  <comment type="block" pos:line="5" pos:column="39">/* allocated size */</comment>
                   <parameter><decl><type><name pos:line="6" pos:column="20">char<pos:position pos:line="6" pos:column="24"/></name></type> <name pos:line="6" pos:column="25">base64<pos:position pos:line="6" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="32"/></parameter_list> <comment type="block" pos:line="6" pos:column="33">/* 1 if base64 encoded */</comment>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">len<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><call><name pos:line="8" pos:column="16">strlen<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">buffer<pos:position pos:line="8" pos:column="29"/></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">needed_len<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><name pos:line="9" pos:column="23">len<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">+<pos:position pos:line="9" pos:column="28"/></operator> <operator pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">stringlen<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">+<pos:position pos:line="9" pos:column="41"/></operator> <literal type="number" pos:line="9" pos:column="42">1<pos:position pos:line="9" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">buf64<pos:position pos:line="10" pos:column="14"/></name><init pos:line="10" pos:column="14">=<expr><name pos:line="10" pos:column="15">NULL<pos:position pos:line="10" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name pos:line="12" pos:column="6">base64<pos:position pos:line="12" pos:column="12"/></name></expr>)<pos:position pos:line="12" pos:column="13"/></condition><then pos:line="12" pos:column="13"> <block pos:line="12" pos:column="14">{
    <comment type="block" pos:line="13" pos:column="5">/* decode the given buffer first */</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">len<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">Curl_base64_decode<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">buffer<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="38">(<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">unsigned<pos:position pos:line="14" pos:column="47"/></name> <name pos:line="14" pos:column="48">char<pos:position pos:line="14" pos:column="52"/></name><operator pos:line="14" pos:column="52">*<pos:position pos:line="14" pos:column="53"/></operator><operator pos:line="14" pos:column="53">*<pos:position pos:line="14" pos:column="54"/></operator><operator pos:line="14" pos:column="54">)<pos:position pos:line="14" pos:column="55"/></operator><operator pos:line="14" pos:column="55">&amp;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="56">buf64<pos:position pos:line="14" pos:column="61"/></name></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></expr_stmt> <comment type="block" pos:line="14" pos:column="64">/* updated len */</comment>
    <expr_stmt><expr><name pos:line="15" pos:column="5">buffer<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="14">buf64<pos:position pos:line="15" pos:column="19"/></name></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">needed_len<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">len<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">+<pos:position pos:line="16" pos:column="23"/></operator> <operator pos:line="16" pos:column="24">*<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">stringlen<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">+<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt> <comment type="block" pos:line="16" pos:column="40">/* recalculate */</comment>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">needed_len<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">&gt;=<pos:position pos:line="19" pos:column="22"/></operator> <operator pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">stralloc<pos:position pos:line="19" pos:column="29"/></name></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block pos:line="19" pos:column="31">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name> <modifier pos:line="20" pos:column="10">*<pos:position pos:line="20" pos:column="11"/></modifier></type><name pos:line="20" pos:column="11">newptr<pos:position pos:line="20" pos:column="17"/></name></decl>;<pos:position pos:line="20" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">size_t<pos:position pos:line="21" pos:column="11"/></name></type> <name pos:line="21" pos:column="12">newsize<pos:position pos:line="21" pos:column="19"/></name> <init pos:line="21" pos:column="20">= <expr><name pos:line="21" pos:column="22">needed_len<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">*<pos:position pos:line="21" pos:column="33"/></operator><literal type="number" pos:line="21" pos:column="33">2<pos:position pos:line="21" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="35"/></decl_stmt> <comment type="block" pos:line="21" pos:column="36">/* get twice the needed size */</comment>

    <expr_stmt><expr><name pos:line="23" pos:column="5">newptr<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">realloc<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">string<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="30">newsize<pos:position pos:line="23" pos:column="37"/></name></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt>
    <if pos:line="24" pos:column="5">if<condition pos:line="24" pos:column="7">(<expr><name pos:line="24" pos:column="8">newptr<pos:position pos:line="24" pos:column="14"/></name></expr>)<pos:position pos:line="24" pos:column="15"/></condition><then pos:line="24" pos:column="15"> <block pos:line="24" pos:column="16">{
      <expr_stmt><expr><name pos:line="25" pos:column="7">string<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">newptr<pos:position pos:line="25" pos:column="22"/></name></expr>;<pos:position pos:line="25" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="26" pos:column="7">*<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">stralloc<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">newsize<pos:position pos:line="26" pos:column="26"/></name></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then>
    <else pos:line="28" pos:column="5">else <block pos:line="28" pos:column="10">{
      <if pos:line="29" pos:column="7">if<condition pos:line="29" pos:column="9">(<expr><name pos:line="29" pos:column="10">buf64<pos:position pos:line="29" pos:column="15"/></name></expr>)<pos:position pos:line="29" pos:column="16"/></condition><then pos:line="29" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="9">free<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><name pos:line="30" pos:column="14">buf64<pos:position pos:line="30" pos:column="19"/></name></expr></argument>)<pos:position pos:line="30" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="21"/></expr_stmt></block></then></if>
      <return pos:line="31" pos:column="7">return <expr><name pos:line="31" pos:column="14">NULL<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="34" pos:column="3">/* memcpy to support binary blobs */</comment>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">memcpy<pos:position pos:line="35" pos:column="9"/></name><argument_list pos:line="35" pos:column="9">(<argument><expr><operator pos:line="35" pos:column="10">&amp;<pos:position pos:line="35" pos:column="15"/></operator><name><name pos:line="35" pos:column="11">string<pos:position pos:line="35" pos:column="17"/></name><index pos:line="35" pos:column="17">[<expr><operator pos:line="35" pos:column="18">*<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="19">stringlen<pos:position pos:line="35" pos:column="28"/></name></expr>]<pos:position pos:line="35" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="31">buffer<pos:position pos:line="35" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="39">len<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="36" pos:column="3">*<pos:position pos:line="36" pos:column="4"/></operator><name pos:line="36" pos:column="4">stringlen<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">+=<pos:position pos:line="36" pos:column="16"/></operator> <name pos:line="36" pos:column="17">len<pos:position pos:line="36" pos:column="20"/></name></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">string<pos:position pos:line="37" pos:column="9"/></name><index pos:line="37" pos:column="9">[<expr><operator pos:line="37" pos:column="10">*<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">stringlen<pos:position pos:line="37" pos:column="20"/></name></expr>]<pos:position pos:line="37" pos:column="21"/></index></name><operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator><literal type="number" pos:line="37" pos:column="22">0<pos:position pos:line="37" pos:column="23"/></literal></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>

  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name pos:line="39" pos:column="6">buf64<pos:position pos:line="39" pos:column="11"/></name></expr>)<pos:position pos:line="39" pos:column="12"/></condition><then pos:line="39" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="5">free<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><name pos:line="40" pos:column="10">buf64<pos:position pos:line="40" pos:column="15"/></name></expr></argument>)<pos:position pos:line="40" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="17"/></expr_stmt></block></then></if>

  <return pos:line="42" pos:column="3">return <expr><name pos:line="42" pos:column="10">string<pos:position pos:line="42" pos:column="16"/></name></expr>;<pos:position pos:line="42" pos:column="17"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
