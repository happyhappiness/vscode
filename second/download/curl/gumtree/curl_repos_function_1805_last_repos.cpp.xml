<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1805_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">if2ip_result_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">Curl_if2ip<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">af<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">unsigned<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">remote_scope<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">unsigned<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">remote_scope_id<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">char<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">interf<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="3" pos:column="27">char<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">buf<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="38">int<pos:position pos:line="3" pos:column="41"/></name></type> <name pos:line="3" pos:column="42">buf_size<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="51"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">ifreq<pos:position pos:line="5" pos:column="15"/></name></name></type> <name pos:line="5" pos:column="16">req<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">in_addr<pos:position pos:line="6" pos:column="17"/></name></name></type> <name pos:line="6" pos:column="18">in<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">sockaddr_in<pos:position pos:line="7" pos:column="21"/></name></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">s<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socket_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">dummy<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">len<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="11" pos:column="3">(<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">void<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">)<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">remote_scope<pos:position pos:line="11" pos:column="21"/></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="12" pos:column="3">(<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">void<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">)<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">remote_scope_id<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">!<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">interf<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">||<pos:position pos:line="14" pos:column="16"/></operator> <operator pos:line="14" pos:column="17">(<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">af<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">!=<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="24">AF_INET<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">)<pos:position pos:line="14" pos:column="32"/></operator></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">IF2IP_NOT_FOUND<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="17" pos:column="3">len<pos:position pos:line="17" pos:column="6"/></name> <operator pos:line="17" pos:column="7">=<pos:position pos:line="17" pos:column="8"/></operator> <call><name pos:line="17" pos:column="9">strlen<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">interf<pos:position pos:line="17" pos:column="22"/></name></expr></argument>)<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">len<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">&gt;=<pos:position pos:line="18" pos:column="15"/></operator> <sizeof pos:line="18" pos:column="13">sizeof<argument_list pos:line="18" pos:column="19">(<argument><expr><name><name pos:line="18" pos:column="20">req<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">.<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">ifr_name<pos:position pos:line="18" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></sizeof></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">IF2IP_NOT_FOUND<pos:position pos:line="19" pos:column="27"/></name></expr>;<pos:position pos:line="19" pos:column="28"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">dummy<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <call><name pos:line="21" pos:column="11">socket<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">AF_INET<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="27">SOCK_STREAM<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="40">0<pos:position pos:line="21" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">CURL_SOCKET_BAD<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">==<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">dummy<pos:position pos:line="22" pos:column="30"/></name></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31">
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">IF2IP_NOT_FOUND<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="25" pos:column="3">memset<pos:position pos:line="25" pos:column="9"/></name><argument_list pos:line="25" pos:column="9">(<argument><expr><operator pos:line="25" pos:column="10">&amp;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="11">req<pos:position pos:line="25" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="19">sizeof<argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">req<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">memcpy<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><name><name pos:line="26" pos:column="10">req<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">.<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">ifr_name<pos:position pos:line="26" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="24">interf<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">len<pos:position pos:line="26" pos:column="35"/></name> <operator pos:line="26" pos:column="36">+<pos:position pos:line="26" pos:column="37"/></operator> <literal type="number" pos:line="26" pos:column="38">1<pos:position pos:line="26" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">req<pos:position pos:line="27" pos:column="6"/></name><operator pos:line="27" pos:column="6">.<pos:position pos:line="27" pos:column="7"/></operator><name pos:line="27" pos:column="7">ifr_addr<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">sa_family<pos:position pos:line="27" pos:column="25"/></name></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="28">AF_INET<pos:position pos:line="27" pos:column="35"/></name></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>

  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><call><name pos:line="29" pos:column="6">ioctl<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">dummy<pos:position pos:line="29" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="19">SIOCGIFADDR<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="32">&amp;<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="33">req<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call> <operator pos:line="29" pos:column="38">&lt;<pos:position pos:line="29" pos:column="42"/></operator> <literal type="number" pos:line="29" pos:column="40">0<pos:position pos:line="29" pos:column="41"/></literal></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">sclose<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">dummy<pos:position pos:line="30" pos:column="17"/></name></expr></argument>)<pos:position pos:line="30" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="31" pos:column="5">/* With SIOCGIFADDR, we cannot tell the difference between an interface
       that does not exist and an interface that has no address of the
       correct family. Assume the interface does not exist */</comment>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">IF2IP_NOT_FOUND<pos:position pos:line="34" pos:column="27"/></name></expr>;<pos:position pos:line="34" pos:column="28"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="37" pos:column="3">s<pos:position pos:line="37" pos:column="4"/></name> <operator pos:line="37" pos:column="5">=<pos:position pos:line="37" pos:column="6"/></operator> <operator pos:line="37" pos:column="7">(<pos:position pos:line="37" pos:column="8"/></operator>struct <name pos:line="37" pos:column="15">sockaddr_in<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">*<pos:position pos:line="37" pos:column="28"/></operator><operator pos:line="37" pos:column="28">)<pos:position pos:line="37" pos:column="29"/></operator><operator pos:line="37" pos:column="29">(<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">void<pos:position pos:line="37" pos:column="34"/></name> <operator pos:line="37" pos:column="35">*<pos:position pos:line="37" pos:column="36"/></operator><operator pos:line="37" pos:column="36">)<pos:position pos:line="37" pos:column="37"/></operator><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name><name pos:line="37" pos:column="38">req<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">.<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="42">ifr_addr<pos:position pos:line="37" pos:column="50"/></name></name></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">memcpy<pos:position pos:line="38" pos:column="9"/></name><argument_list pos:line="38" pos:column="9">(<argument><expr><operator pos:line="38" pos:column="10">&amp;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="11">in<pos:position pos:line="38" pos:column="13"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="15">&amp;<pos:position pos:line="38" pos:column="20"/></operator><name><name pos:line="38" pos:column="16">s<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">-&gt;<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="19">sin_addr<pos:position pos:line="38" pos:column="27"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="29">sizeof<argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">in<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">Curl_inet_ntop<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><name><name pos:line="39" pos:column="18">s<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">-&gt;<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="21">sin_family<pos:position pos:line="39" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="33">&amp;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="34">in<pos:position pos:line="39" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="38">buf<pos:position pos:line="39" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="43">buf_size<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="41" pos:column="3">sclose<pos:position pos:line="41" pos:column="9"/></name><argument_list pos:line="41" pos:column="9">(<argument><expr><name pos:line="41" pos:column="10">dummy<pos:position pos:line="41" pos:column="15"/></name></expr></argument>)<pos:position pos:line="41" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="17"/></expr_stmt>
  <return pos:line="42" pos:column="3">return <expr><name pos:line="42" pos:column="10">IF2IP_FOUND<pos:position pos:line="42" pos:column="21"/></name></expr>;<pos:position pos:line="42" pos:column="22"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
