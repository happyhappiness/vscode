<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_946_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">glob_match_url<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier><modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">result<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">filename<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">URLGlob<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">glob<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">target<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">allocsize<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">numbuf<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><literal type="number" pos:line="5" pos:column="15">18<pos:position pos:line="5" pos:column="17"/></literal></expr>]<pos:position pos:line="5" pos:column="18"/></index></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">appendthis<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name pos:line="6" pos:column="22">NULL<pos:position pos:line="6" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">appendlen<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">stringlen<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><literal type="number" pos:line="8" pos:column="22">0<pos:position pos:line="8" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="10" pos:column="3">*<pos:position pos:line="10" pos:column="4"/></operator><name pos:line="10" pos:column="4">result<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <name pos:line="10" pos:column="13">NULL<pos:position pos:line="10" pos:column="17"/></name></expr>;<pos:position pos:line="10" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* We cannot use the glob_buffer for storage here since the filename may
   * be longer than the URL we use. We allocate a good start size, then
   * we need to realloc in case of need.
   */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">allocsize<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">strlen<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">filename<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call> <operator pos:line="16" pos:column="32">+<pos:position pos:line="16" pos:column="33"/></operator> <literal type="number" pos:line="16" pos:column="34">1<pos:position pos:line="16" pos:column="35"/></literal></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt> <comment type="block" pos:line="16" pos:column="37">/* make it at least one byte to store the
                                       trailing zero */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">target<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">malloc<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">allocsize<pos:position pos:line="18" pos:column="28"/></name></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><name pos:line="19" pos:column="7">target<pos:position pos:line="19" pos:column="13"/></name></expr>)<pos:position pos:line="19" pos:column="14"/></condition><then pos:line="19" pos:column="14">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="20" pos:column="31"/></name></expr>;<pos:position pos:line="20" pos:column="32"/></return></block></then></if>

  <while pos:line="22" pos:column="3">while<condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">filename<pos:position pos:line="22" pos:column="18"/></name></expr>)<pos:position pos:line="22" pos:column="19"/></condition> <block pos:line="22" pos:column="20">{
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><operator pos:line="23" pos:column="8">*<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">filename<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">==<pos:position pos:line="23" pos:column="20"/></operator> <literal type="char" pos:line="23" pos:column="21">'#'<pos:position pos:line="23" pos:column="24"/></literal> <operator pos:line="23" pos:column="25">&amp;&amp;<pos:position pos:line="23" pos:column="35"/></operator> <call><name pos:line="23" pos:column="28">ISDIGIT<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name><name pos:line="23" pos:column="36">filename<pos:position pos:line="23" pos:column="44"/></name><index pos:line="23" pos:column="44">[<expr><literal type="number" pos:line="23" pos:column="45">1<pos:position pos:line="23" pos:column="46"/></literal></expr>]<pos:position pos:line="23" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49"> <block pos:line="23" pos:column="50">{
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">unsigned<pos:position pos:line="24" pos:column="15"/></name> <name pos:line="24" pos:column="16">long<pos:position pos:line="24" pos:column="20"/></name></type> <name pos:line="24" pos:column="21">i<pos:position pos:line="24" pos:column="22"/></name></decl>;<pos:position pos:line="24" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">char<pos:position pos:line="25" pos:column="11"/></name> <modifier pos:line="25" pos:column="12">*<pos:position pos:line="25" pos:column="13"/></modifier></type><name pos:line="25" pos:column="13">ptr<pos:position pos:line="25" pos:column="16"/></name> <init pos:line="25" pos:column="17">= <expr><name pos:line="25" pos:column="19">filename<pos:position pos:line="25" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="28"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">unsigned<pos:position pos:line="26" pos:column="15"/></name> <name pos:line="26" pos:column="16">long<pos:position pos:line="26" pos:column="20"/></name></type> <name pos:line="26" pos:column="21">num<pos:position pos:line="26" pos:column="24"/></name> <init pos:line="26" pos:column="25">= <expr><call><name pos:line="26" pos:column="27">strtoul<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name><name pos:line="26" pos:column="36">filename<pos:position pos:line="26" pos:column="44"/></name><index pos:line="26" pos:column="44">[<expr><literal type="number" pos:line="26" pos:column="45">1<pos:position pos:line="26" pos:column="46"/></literal></expr>]<pos:position pos:line="26" pos:column="47"/></index></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="49">&amp;<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="50">filename<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="60">10<pos:position pos:line="26" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="64"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="27" pos:column="7">URLPattern<pos:position pos:line="27" pos:column="17"/></name> <modifier pos:line="27" pos:column="18">*<pos:position pos:line="27" pos:column="19"/></modifier></type><name pos:line="27" pos:column="19">pat<pos:position pos:line="27" pos:column="22"/></name> <init pos:line="27" pos:column="23">= <expr><name pos:line="27" pos:column="25">NULL<pos:position pos:line="27" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="30"/></decl_stmt>

      <if pos:line="29" pos:column="7">if<condition pos:line="29" pos:column="9">(<expr><name pos:line="29" pos:column="10">num<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">&lt;<pos:position pos:line="29" pos:column="18"/></operator> <name><name pos:line="29" pos:column="16">glob<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">-&gt;<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="22">size<pos:position pos:line="29" pos:column="26"/></name></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27"> <block pos:line="29" pos:column="28">{
        <expr_stmt><expr><name pos:line="30" pos:column="9">num<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">--<pos:position pos:line="30" pos:column="14"/></operator></expr>;<pos:position pos:line="30" pos:column="15"/></expr_stmt> <comment type="block" pos:line="30" pos:column="16">/* make it zero based */</comment>
        <comment type="block" pos:line="31" pos:column="9">/* find the correct glob entry */</comment>
        <for pos:line="32" pos:column="9">for<control pos:line="32" pos:column="12">(<init><expr><name pos:line="32" pos:column="13">i<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal></expr>;<pos:position pos:line="32" pos:column="19"/></init> <condition><expr><name pos:line="32" pos:column="20">i<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">&lt;<pos:position pos:line="32" pos:column="25"/></operator><name><name pos:line="32" pos:column="22">glob<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">-&gt;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="28">size<pos:position pos:line="32" pos:column="32"/></name></name></expr>;<pos:position pos:line="32" pos:column="33"/></condition> <incr><expr><name pos:line="32" pos:column="34">i<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">++<pos:position pos:line="32" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="32" pos:column="38"/></control> <block pos:line="32" pos:column="39">{
          <if pos:line="33" pos:column="11">if<condition pos:line="33" pos:column="13">(<expr><name><name pos:line="33" pos:column="14">glob<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">-&gt;<pos:position pos:line="33" pos:column="23"/></operator><name pos:line="33" pos:column="20">pattern<pos:position pos:line="33" pos:column="27"/></name><index pos:line="33" pos:column="27">[<expr><name pos:line="33" pos:column="28">i<pos:position pos:line="33" pos:column="29"/></name></expr>]<pos:position pos:line="33" pos:column="30"/></index></name><operator pos:line="33" pos:column="30">.<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">globindex<pos:position pos:line="33" pos:column="40"/></name> <operator pos:line="33" pos:column="41">==<pos:position pos:line="33" pos:column="43"/></operator> <operator pos:line="33" pos:column="44">(<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="45">int<pos:position pos:line="33" pos:column="48"/></name><operator pos:line="33" pos:column="48">)<pos:position pos:line="33" pos:column="49"/></operator><name pos:line="33" pos:column="49">num<pos:position pos:line="33" pos:column="52"/></name></expr>)<pos:position pos:line="33" pos:column="53"/></condition><then pos:line="33" pos:column="53"> <block pos:line="33" pos:column="54">{
            <expr_stmt><expr><name pos:line="34" pos:column="13">pat<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <operator pos:line="34" pos:column="19">&amp;<pos:position pos:line="34" pos:column="24"/></operator><name><name pos:line="34" pos:column="20">glob<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">-&gt;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="26">pattern<pos:position pos:line="34" pos:column="33"/></name><index pos:line="34" pos:column="33">[<expr><name pos:line="34" pos:column="34">i<pos:position pos:line="34" pos:column="35"/></name></expr>]<pos:position pos:line="34" pos:column="36"/></index></name></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break>
          }<pos:position pos:line="36" pos:column="12"/></block></then></if>
        }<pos:position pos:line="37" pos:column="10"/></block></for>
      }<pos:position pos:line="38" pos:column="8"/></block></then></if>

      <if pos:line="40" pos:column="7">if<condition pos:line="40" pos:column="9">(<expr><name pos:line="40" pos:column="10">pat<pos:position pos:line="40" pos:column="13"/></name></expr>)<pos:position pos:line="40" pos:column="14"/></condition><then pos:line="40" pos:column="14"> <block pos:line="40" pos:column="15">{
        <switch pos:line="41" pos:column="9">switch<condition pos:line="41" pos:column="15">(<expr><name><name pos:line="41" pos:column="16">pat<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">-&gt;<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="21">type<pos:position pos:line="41" pos:column="25"/></name></name></expr>)<pos:position pos:line="41" pos:column="26"/></condition> <block pos:line="41" pos:column="27">{
        <case pos:line="42" pos:column="9">case <expr><name pos:line="42" pos:column="14">UPTSet<pos:position pos:line="42" pos:column="20"/></name></expr>:<pos:position pos:line="42" pos:column="21"/></case>
          <if pos:line="43" pos:column="11">if<condition pos:line="43" pos:column="13">(<expr><name><name pos:line="43" pos:column="14">pat<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">-&gt;<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="19">content<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">.<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="27">Set<pos:position pos:line="43" pos:column="30"/></name><operator pos:line="43" pos:column="30">.<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="31">elements<pos:position pos:line="43" pos:column="39"/></name></name></expr>)<pos:position pos:line="43" pos:column="40"/></condition><then pos:line="43" pos:column="40"> <block pos:line="43" pos:column="41">{
            <expr_stmt><expr><name pos:line="44" pos:column="13">appendthis<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <name><name pos:line="44" pos:column="26">pat<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">-&gt;<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="31">content<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">.<pos:position pos:line="44" pos:column="39"/></operator><name pos:line="44" pos:column="39">Set<pos:position pos:line="44" pos:column="42"/></name><operator pos:line="44" pos:column="42">.<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="43">elements<pos:position pos:line="44" pos:column="51"/></name><index pos:line="44" pos:column="51">[<expr><name><name pos:line="44" pos:column="52">pat<pos:position pos:line="44" pos:column="55"/></name><operator pos:line="44" pos:column="55">-&gt;<pos:position pos:line="44" pos:column="60"/></operator><name pos:line="44" pos:column="57">content<pos:position pos:line="44" pos:column="64"/></name><operator pos:line="44" pos:column="64">.<pos:position pos:line="44" pos:column="65"/></operator><name pos:line="44" pos:column="65">Set<pos:position pos:line="44" pos:column="68"/></name><operator pos:line="44" pos:column="68">.<pos:position pos:line="44" pos:column="69"/></operator><name pos:line="44" pos:column="69">ptr_s<pos:position pos:line="44" pos:column="74"/></name></name></expr>]<pos:position pos:line="44" pos:column="75"/></index></name></expr>;<pos:position pos:line="44" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><name pos:line="45" pos:column="13">appendlen<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator>
              <call><name pos:line="46" pos:column="15">strlen<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><name><name pos:line="46" pos:column="22">pat<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">-&gt;<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="27">content<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">.<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="35">Set<pos:position pos:line="46" pos:column="38"/></name><operator pos:line="46" pos:column="38">.<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="39">elements<pos:position pos:line="46" pos:column="47"/></name><index pos:line="46" pos:column="47">[<expr><name><name pos:line="46" pos:column="48">pat<pos:position pos:line="46" pos:column="51"/></name><operator pos:line="46" pos:column="51">-&gt;<pos:position pos:line="46" pos:column="56"/></operator><name pos:line="46" pos:column="53">content<pos:position pos:line="46" pos:column="60"/></name><operator pos:line="46" pos:column="60">.<pos:position pos:line="46" pos:column="61"/></operator><name pos:line="46" pos:column="61">Set<pos:position pos:line="46" pos:column="64"/></name><operator pos:line="46" pos:column="64">.<pos:position pos:line="46" pos:column="65"/></operator><name pos:line="46" pos:column="65">ptr_s<pos:position pos:line="46" pos:column="70"/></name></name></expr>]<pos:position pos:line="46" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="73"/></expr_stmt>
          }<pos:position pos:line="47" pos:column="12"/></block></then></if>
          <break pos:line="48" pos:column="11">break;<pos:position pos:line="48" pos:column="17"/></break>
        <case pos:line="49" pos:column="9">case <expr><name pos:line="49" pos:column="14">UPTCharRange<pos:position pos:line="49" pos:column="26"/></name></expr>:<pos:position pos:line="49" pos:column="27"/></case>
          <expr_stmt><expr><name><name pos:line="50" pos:column="11">numbuf<pos:position pos:line="50" pos:column="17"/></name><index pos:line="50" pos:column="17">[<expr><literal type="number" pos:line="50" pos:column="18">0<pos:position pos:line="50" pos:column="19"/></literal></expr>]<pos:position pos:line="50" pos:column="20"/></index></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <name><name pos:line="50" pos:column="23">pat<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">-&gt;<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="28">content<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">.<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="36">CharRange<pos:position pos:line="50" pos:column="45"/></name><operator pos:line="50" pos:column="45">.<pos:position pos:line="50" pos:column="46"/></operator><name pos:line="50" pos:column="46">ptr_c<pos:position pos:line="50" pos:column="51"/></name></name></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="51" pos:column="11">numbuf<pos:position pos:line="51" pos:column="17"/></name><index pos:line="51" pos:column="17">[<expr><literal type="number" pos:line="51" pos:column="18">1<pos:position pos:line="51" pos:column="19"/></literal></expr>]<pos:position pos:line="51" pos:column="20"/></index></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <literal type="number" pos:line="51" pos:column="23">0<pos:position pos:line="51" pos:column="24"/></literal></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><name pos:line="52" pos:column="11">appendthis<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <name pos:line="52" pos:column="24">numbuf<pos:position pos:line="52" pos:column="30"/></name></expr>;<pos:position pos:line="52" pos:column="31"/></expr_stmt>
          <expr_stmt><expr><name pos:line="53" pos:column="11">appendlen<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <literal type="number" pos:line="53" pos:column="23">1<pos:position pos:line="53" pos:column="24"/></literal></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>
          <break pos:line="54" pos:column="11">break;<pos:position pos:line="54" pos:column="17"/></break>
        <case pos:line="55" pos:column="9">case <expr><name pos:line="55" pos:column="14">UPTNumRange<pos:position pos:line="55" pos:column="25"/></name></expr>:<pos:position pos:line="55" pos:column="26"/></case>
          <expr_stmt><expr><call><name pos:line="56" pos:column="11">snprintf<pos:position pos:line="56" pos:column="19"/></name><argument_list pos:line="56" pos:column="19">(<argument><expr><name pos:line="56" pos:column="20">numbuf<pos:position pos:line="56" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="28">sizeof<argument_list pos:line="56" pos:column="34">(<argument><expr><name pos:line="56" pos:column="35">numbuf<pos:position pos:line="56" pos:column="41"/></name></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="44">"%0*lu"<pos:position pos:line="56" pos:column="51"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="57" pos:column="20">pat<pos:position pos:line="57" pos:column="23"/></name><operator pos:line="57" pos:column="23">-&gt;<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="25">content<pos:position pos:line="57" pos:column="32"/></name><operator pos:line="57" pos:column="32">.<pos:position pos:line="57" pos:column="33"/></operator><name pos:line="57" pos:column="33">NumRange<pos:position pos:line="57" pos:column="41"/></name><operator pos:line="57" pos:column="41">.<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="42">padlength<pos:position pos:line="57" pos:column="51"/></name></name></expr></argument>,
                   <argument><expr><name><name pos:line="58" pos:column="20">pat<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">-&gt;<pos:position pos:line="58" pos:column="28"/></operator><name pos:line="58" pos:column="25">content<pos:position pos:line="58" pos:column="32"/></name><operator pos:line="58" pos:column="32">.<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="33">NumRange<pos:position pos:line="58" pos:column="41"/></name><operator pos:line="58" pos:column="41">.<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="42">ptr_n<pos:position pos:line="58" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="49"/></expr_stmt>
          <expr_stmt><expr><name pos:line="59" pos:column="11">appendthis<pos:position pos:line="59" pos:column="21"/></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <name pos:line="59" pos:column="24">numbuf<pos:position pos:line="59" pos:column="30"/></name></expr>;<pos:position pos:line="59" pos:column="31"/></expr_stmt>
          <expr_stmt><expr><name pos:line="60" pos:column="11">appendlen<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">strlen<pos:position pos:line="60" pos:column="29"/></name><argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">numbuf<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
          <break pos:line="61" pos:column="11">break;<pos:position pos:line="61" pos:column="17"/></break>
        <default pos:line="62" pos:column="9">default:<pos:position pos:line="62" pos:column="17"/></default>
          <expr_stmt><expr><call><name pos:line="63" pos:column="11">fprintf<pos:position pos:line="63" pos:column="18"/></name><argument_list pos:line="63" pos:column="18">(<argument><expr><name pos:line="63" pos:column="19">stderr<pos:position pos:line="63" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="27">"internal error: invalid pattern type (%d)\n"<pos:position pos:line="63" pos:column="72"/></literal></expr></argument>,
                  <argument><expr><operator pos:line="64" pos:column="19">(<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="20">int<pos:position pos:line="64" pos:column="23"/></name><operator pos:line="64" pos:column="23">)<pos:position pos:line="64" pos:column="24"/></operator><name><name pos:line="64" pos:column="24">pat<pos:position pos:line="64" pos:column="27"/></name><operator pos:line="64" pos:column="27">-&gt;<pos:position pos:line="64" pos:column="32"/></operator><name pos:line="64" pos:column="29">type<pos:position pos:line="64" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="65" pos:column="11">Curl_safefree<pos:position pos:line="65" pos:column="24"/></name><argument_list pos:line="65" pos:column="24">(<argument><expr><name pos:line="65" pos:column="25">target<pos:position pos:line="65" pos:column="31"/></name></expr></argument>)<pos:position pos:line="65" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
          <return pos:line="66" pos:column="11">return <expr><name pos:line="66" pos:column="18">CURLE_FAILED_INIT<pos:position pos:line="66" pos:column="35"/></name></expr>;<pos:position pos:line="66" pos:column="36"/></return>
        }<pos:position pos:line="67" pos:column="10"/></block></switch>
      }<pos:position pos:line="68" pos:column="8"/></block></then>
      <else pos:line="69" pos:column="7">else <block pos:line="69" pos:column="12">{
        <comment type="block" pos:line="70" pos:column="9">/* #[num] out of range, use the #[num] in the output */</comment>
        <expr_stmt><expr><name pos:line="71" pos:column="9">filename<pos:position pos:line="71" pos:column="17"/></name> <operator pos:line="71" pos:column="18">=<pos:position pos:line="71" pos:column="19"/></operator> <name pos:line="71" pos:column="20">ptr<pos:position pos:line="71" pos:column="23"/></name></expr>;<pos:position pos:line="71" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="72" pos:column="9">appendthis<pos:position pos:line="72" pos:column="19"/></name> <operator pos:line="72" pos:column="20">=<pos:position pos:line="72" pos:column="21"/></operator> <name pos:line="72" pos:column="22">filename<pos:position pos:line="72" pos:column="30"/></name><operator pos:line="72" pos:column="30">++<pos:position pos:line="72" pos:column="32"/></operator></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="73" pos:column="9">appendlen<pos:position pos:line="73" pos:column="18"/></name> <operator pos:line="73" pos:column="19">=<pos:position pos:line="73" pos:column="20"/></operator> <literal type="number" pos:line="73" pos:column="21">1<pos:position pos:line="73" pos:column="22"/></literal></expr>;<pos:position pos:line="73" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="74" pos:column="8"/></block></else></if>
    }<pos:position pos:line="75" pos:column="6"/></block></then>
    <else pos:line="76" pos:column="5">else <block pos:line="76" pos:column="10">{
      <expr_stmt><expr><name pos:line="77" pos:column="7">appendthis<pos:position pos:line="77" pos:column="17"/></name> <operator pos:line="77" pos:column="18">=<pos:position pos:line="77" pos:column="19"/></operator> <name pos:line="77" pos:column="20">filename<pos:position pos:line="77" pos:column="28"/></name><operator pos:line="77" pos:column="28">++<pos:position pos:line="77" pos:column="30"/></operator></expr>;<pos:position pos:line="77" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="78" pos:column="7">appendlen<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">=<pos:position pos:line="78" pos:column="18"/></operator> <literal type="number" pos:line="78" pos:column="19">1<pos:position pos:line="78" pos:column="20"/></literal></expr>;<pos:position pos:line="78" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></else></if>
    <if pos:line="80" pos:column="5">if<condition pos:line="80" pos:column="7">(<expr><name pos:line="80" pos:column="8">appendlen<pos:position pos:line="80" pos:column="17"/></name> <operator pos:line="80" pos:column="18">+<pos:position pos:line="80" pos:column="19"/></operator> <name pos:line="80" pos:column="20">stringlen<pos:position pos:line="80" pos:column="29"/></name> <operator pos:line="80" pos:column="30">&gt;=<pos:position pos:line="80" pos:column="35"/></operator> <name pos:line="80" pos:column="33">allocsize<pos:position pos:line="80" pos:column="42"/></name></expr>)<pos:position pos:line="80" pos:column="43"/></condition><then pos:line="80" pos:column="43"> <block pos:line="80" pos:column="44">{
      <decl_stmt><decl><type><name pos:line="81" pos:column="7">char<pos:position pos:line="81" pos:column="11"/></name> <modifier pos:line="81" pos:column="12">*<pos:position pos:line="81" pos:column="13"/></modifier></type><name pos:line="81" pos:column="13">newstr<pos:position pos:line="81" pos:column="19"/></name></decl>;<pos:position pos:line="81" pos:column="20"/></decl_stmt>
      <comment type="block" pos:line="82" pos:column="7">/* we append a single byte to allow for the trailing byte to be appended
         at the end of this function outside the while() loop */</comment>
      <expr_stmt><expr><name pos:line="84" pos:column="7">allocsize<pos:position pos:line="84" pos:column="16"/></name> <operator pos:line="84" pos:column="17">=<pos:position pos:line="84" pos:column="18"/></operator> <operator pos:line="84" pos:column="19">(<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="20">appendlen<pos:position pos:line="84" pos:column="29"/></name> <operator pos:line="84" pos:column="30">+<pos:position pos:line="84" pos:column="31"/></operator> <name pos:line="84" pos:column="32">stringlen<pos:position pos:line="84" pos:column="41"/></name><operator pos:line="84" pos:column="41">)<pos:position pos:line="84" pos:column="42"/></operator> <operator pos:line="84" pos:column="43">*<pos:position pos:line="84" pos:column="44"/></operator> <literal type="number" pos:line="84" pos:column="45">2<pos:position pos:line="84" pos:column="46"/></literal></expr>;<pos:position pos:line="84" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><name pos:line="85" pos:column="7">newstr<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">=<pos:position pos:line="85" pos:column="15"/></operator> <call><name pos:line="85" pos:column="16">realloc<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><name pos:line="85" pos:column="24">target<pos:position pos:line="85" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="32">allocsize<pos:position pos:line="85" pos:column="41"/></name> <operator pos:line="85" pos:column="42">+<pos:position pos:line="85" pos:column="43"/></operator> <literal type="number" pos:line="85" pos:column="44">1<pos:position pos:line="85" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="47"/></expr_stmt>
      <if pos:line="86" pos:column="7">if<condition pos:line="86" pos:column="9">(<expr><operator pos:line="86" pos:column="10">!<pos:position pos:line="86" pos:column="11"/></operator><name pos:line="86" pos:column="11">newstr<pos:position pos:line="86" pos:column="17"/></name></expr>)<pos:position pos:line="86" pos:column="18"/></condition><then pos:line="86" pos:column="18"> <block pos:line="86" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">Curl_safefree<pos:position pos:line="87" pos:column="22"/></name><argument_list pos:line="87" pos:column="22">(<argument><expr><name pos:line="87" pos:column="23">target<pos:position pos:line="87" pos:column="29"/></name></expr></argument>)<pos:position pos:line="87" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="31"/></expr_stmt>
        <return pos:line="88" pos:column="9">return <expr><name pos:line="88" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="88" pos:column="35"/></name></expr>;<pos:position pos:line="88" pos:column="36"/></return>
      }<pos:position pos:line="89" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="90" pos:column="7">target<pos:position pos:line="90" pos:column="13"/></name> <operator pos:line="90" pos:column="14">=<pos:position pos:line="90" pos:column="15"/></operator> <name pos:line="90" pos:column="16">newstr<pos:position pos:line="90" pos:column="22"/></name></expr>;<pos:position pos:line="90" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">memcpy<pos:position pos:line="92" pos:column="11"/></name><argument_list pos:line="92" pos:column="11">(<argument><expr><operator pos:line="92" pos:column="12">&amp;<pos:position pos:line="92" pos:column="17"/></operator><name><name pos:line="92" pos:column="13">target<pos:position pos:line="92" pos:column="19"/></name><index pos:line="92" pos:column="19">[<expr><name pos:line="92" pos:column="20">stringlen<pos:position pos:line="92" pos:column="29"/></name></expr>]<pos:position pos:line="92" pos:column="30"/></index></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="32">appendthis<pos:position pos:line="92" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="44">appendlen<pos:position pos:line="92" pos:column="53"/></name></expr></argument>)<pos:position pos:line="92" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name pos:line="93" pos:column="5">stringlen<pos:position pos:line="93" pos:column="14"/></name> <operator pos:line="93" pos:column="15">+=<pos:position pos:line="93" pos:column="17"/></operator> <name pos:line="93" pos:column="18">appendlen<pos:position pos:line="93" pos:column="27"/></name></expr>;<pos:position pos:line="93" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="94" pos:column="4"/></block></while>
  <expr_stmt><expr><name><name pos:line="95" pos:column="3">target<pos:position pos:line="95" pos:column="9"/></name><index pos:line="95" pos:column="9">[<expr><name pos:line="95" pos:column="10">stringlen<pos:position pos:line="95" pos:column="19"/></name></expr>]<pos:position pos:line="95" pos:column="20"/></index></name><operator pos:line="95" pos:column="20">=<pos:position pos:line="95" pos:column="21"/></operator> <literal type="char" pos:line="95" pos:column="22">'\0'<pos:position pos:line="95" pos:column="26"/></literal></expr>;<pos:position pos:line="95" pos:column="27"/></expr_stmt>

<cpp:if pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">if<pos:position pos:line="97" pos:column="4"/></cpp:directive> <expr><call><name pos:line="97" pos:column="5">defined<pos:position pos:line="97" pos:column="12"/></name><argument_list pos:line="97" pos:column="12">(<argument><expr><name pos:line="97" pos:column="13">MSDOS<pos:position pos:line="97" pos:column="18"/></name></expr></argument>)<pos:position pos:line="97" pos:column="19"/></argument_list></call> <operator pos:line="97" pos:column="20">||<pos:position pos:line="97" pos:column="22"/></operator> <call><name pos:line="97" pos:column="23">defined<pos:position pos:line="97" pos:column="30"/></name><argument_list pos:line="97" pos:column="30">(<argument><expr><name pos:line="97" pos:column="31">WIN32<pos:position pos:line="97" pos:column="36"/></name></expr></argument>)<pos:position pos:line="97" pos:column="37"/></argument_list></call></expr></cpp:if>
  <block pos:line="98" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="99" pos:column="5">char<pos:position pos:line="99" pos:column="9"/></name> <modifier pos:line="99" pos:column="10">*<pos:position pos:line="99" pos:column="11"/></modifier></type><name pos:line="99" pos:column="11">sanitized<pos:position pos:line="99" pos:column="20"/></name></decl>;<pos:position pos:line="99" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="100" pos:column="5">SANITIZEcode<pos:position pos:line="100" pos:column="17"/></name></type> <name pos:line="100" pos:column="18">sc<pos:position pos:line="100" pos:column="20"/></name> <init pos:line="100" pos:column="21">= <expr><call><name pos:line="100" pos:column="23">sanitize_file_name<pos:position pos:line="100" pos:column="41"/></name><argument_list pos:line="100" pos:column="41">(<argument><expr><operator pos:line="100" pos:column="42">&amp;<pos:position pos:line="100" pos:column="47"/></operator><name pos:line="100" pos:column="43">sanitized<pos:position pos:line="100" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="54">target<pos:position pos:line="100" pos:column="60"/></name></expr></argument>,
                                         <argument><expr><operator pos:line="101" pos:column="42">(<pos:position pos:line="101" pos:column="43"/></operator><name pos:line="101" pos:column="43">SANITIZE_ALLOW_PATH<pos:position pos:line="101" pos:column="62"/></name> <operator pos:line="101" pos:column="63">|<pos:position pos:line="101" pos:column="64"/></operator>
                                          <name pos:line="102" pos:column="43">SANITIZE_ALLOW_RESERVED<pos:position pos:line="102" pos:column="66"/></name><operator pos:line="102" pos:column="66">)<pos:position pos:line="102" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="102" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="102" pos:column="69"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">Curl_safefree<pos:position pos:line="103" pos:column="18"/></name><argument_list pos:line="103" pos:column="18">(<argument><expr><name pos:line="103" pos:column="19">target<pos:position pos:line="103" pos:column="25"/></name></expr></argument>)<pos:position pos:line="103" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="27"/></expr_stmt>
    <if pos:line="104" pos:column="5">if<condition pos:line="104" pos:column="7">(<expr><name pos:line="104" pos:column="8">sc<pos:position pos:line="104" pos:column="10"/></name></expr>)<pos:position pos:line="104" pos:column="11"/></condition><then pos:line="104" pos:column="11">
      <block type="pseudo"><return pos:line="105" pos:column="7">return <expr><name pos:line="105" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="105" pos:column="33"/></name></expr>;<pos:position pos:line="105" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="106" pos:column="5">target<pos:position pos:line="106" pos:column="11"/></name> <operator pos:line="106" pos:column="12">=<pos:position pos:line="106" pos:column="13"/></operator> <name pos:line="106" pos:column="14">sanitized<pos:position pos:line="106" pos:column="23"/></name></expr>;<pos:position pos:line="106" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="107" pos:column="4"/></block>
<cpp:endif pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">endif<pos:position pos:line="108" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="108" pos:column="8">/* MSDOS || WIN32 */</comment>

  <expr_stmt><expr><operator pos:line="110" pos:column="3">*<pos:position pos:line="110" pos:column="4"/></operator><name pos:line="110" pos:column="4">result<pos:position pos:line="110" pos:column="10"/></name> <operator pos:line="110" pos:column="11">=<pos:position pos:line="110" pos:column="12"/></operator> <name pos:line="110" pos:column="13">target<pos:position pos:line="110" pos:column="19"/></name></expr>;<pos:position pos:line="110" pos:column="20"/></expr_stmt>
  <return pos:line="111" pos:column="3">return <expr><name pos:line="111" pos:column="10">CURLE_OK<pos:position pos:line="111" pos:column="18"/></name></expr>;<pos:position pos:line="111" pos:column="19"/></return>
}<pos:position pos:line="112" pos:column="2"/></block></function></unit>
