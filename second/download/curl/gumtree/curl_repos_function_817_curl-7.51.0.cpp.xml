<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_817_curl-7.51.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ParameterError<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">str2num<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">long<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">val<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">str<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if<condition pos:line="3" pos:column="5">(<expr><name pos:line="3" pos:column="6">str<pos:position pos:line="3" pos:column="9"/></name></expr>)<pos:position pos:line="3" pos:column="10"/></condition><then pos:line="3" pos:column="10"> <block pos:line="3" pos:column="11">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">endptr<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">long<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">num<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><call><name pos:line="5" pos:column="16">strtol<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><name pos:line="5" pos:column="23">str<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="28">&amp;<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="29">endptr<pos:position pos:line="5" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="37">10<pos:position pos:line="5" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
    <if pos:line="6" pos:column="5">if<condition pos:line="6" pos:column="7">(<expr><operator pos:line="6" pos:column="8">(<pos:position pos:line="6" pos:column="9"/></operator><name pos:line="6" pos:column="9">endptr<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">!=<pos:position pos:line="6" pos:column="18"/></operator> <name pos:line="6" pos:column="19">str<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">)<pos:position pos:line="6" pos:column="23"/></operator> <operator pos:line="6" pos:column="24">&amp;&amp;<pos:position pos:line="6" pos:column="34"/></operator> <operator pos:line="6" pos:column="27">(<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">endptr<pos:position pos:line="6" pos:column="34"/></name> <operator pos:line="6" pos:column="35">==<pos:position pos:line="6" pos:column="37"/></operator> <name pos:line="6" pos:column="38">str<pos:position pos:line="6" pos:column="41"/></name> <operator pos:line="6" pos:column="42">+<pos:position pos:line="6" pos:column="43"/></operator> <call><name pos:line="6" pos:column="44">strlen<pos:position pos:line="6" pos:column="50"/></name><argument_list pos:line="6" pos:column="50">(<argument><expr><name pos:line="6" pos:column="51">str<pos:position pos:line="6" pos:column="54"/></name></expr></argument>)<pos:position pos:line="6" pos:column="55"/></argument_list></call><operator pos:line="6" pos:column="55">)<pos:position pos:line="6" pos:column="56"/></operator></expr>)<pos:position pos:line="6" pos:column="57"/></condition><then pos:line="6" pos:column="57"> <block pos:line="6" pos:column="58">{
      <expr_stmt><expr><operator pos:line="7" pos:column="7">*<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">val<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">num<pos:position pos:line="7" pos:column="17"/></name></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>
      <return pos:line="8" pos:column="7">return <expr><name pos:line="8" pos:column="14">PARAM_OK<pos:position pos:line="8" pos:column="22"/></name></expr>;<pos:position pos:line="8" pos:column="23"/></return>  <comment type="block" pos:line="8" pos:column="25">/* Ok */</comment>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>
  <return pos:line="11" pos:column="3">return <expr><name pos:line="11" pos:column="10">PARAM_BAD_NUMERIC<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></return> <comment type="block" pos:line="11" pos:column="29">/* badness */</comment>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
