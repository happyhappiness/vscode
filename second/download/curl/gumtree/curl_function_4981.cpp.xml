<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_4981.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">my_fwrite<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">buffer<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">size_t<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">sz<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">size_t<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">nmemb<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">void<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">stream<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">rc<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">OutStruct<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">out<pos:position pos:line="4" pos:column="24"/></name><init pos:line="4" pos:column="24">=<expr><operator pos:line="4" pos:column="25">(<pos:position pos:line="4" pos:column="26"/></operator>struct <name pos:line="4" pos:column="33">OutStruct<pos:position pos:line="4" pos:column="42"/></name> <operator pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></operator><operator pos:line="4" pos:column="44">)<pos:position pos:line="4" pos:column="45"/></operator><name pos:line="4" pos:column="45">stream<pos:position pos:line="4" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Configurable<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">config<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><name><name pos:line="5" pos:column="33">out<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">config<pos:position pos:line="5" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/*
   * Once that libcurl has called back my_fwrite() the returned value
   * is checked against the amount that was intended to be written, if
   * it does not match then it fails with CURLE_WRITE_ERROR. So at this
   * point returning a value different from sz*nmemb indicates failure.
   */</comment>
  <decl_stmt><decl><type><specifier pos:line="13" pos:column="3">const<pos:position pos:line="13" pos:column="8"/></specifier> <name pos:line="13" pos:column="9">size_t<pos:position pos:line="13" pos:column="15"/></name></type> <name pos:line="13" pos:column="16">err_rc<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><ternary><condition><expr><operator pos:line="13" pos:column="25">(<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">sz<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">*<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="31">nmemb<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator></expr> ?<pos:position pos:line="13" pos:column="39"/></condition><then pos:line="13" pos:column="39"> <expr><literal type="number" pos:line="13" pos:column="40">0<pos:position pos:line="13" pos:column="41"/></literal></expr> <pos:position pos:line="13" pos:column="42"/></then><else pos:line="13" pos:column="42">: <expr><literal type="number" pos:line="13" pos:column="44">1<pos:position pos:line="13" pos:column="45"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="13" pos:column="46"/></decl_stmt>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name><name pos:line="15" pos:column="7">out<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">stream<pos:position pos:line="15" pos:column="18"/></name></name></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19"> <block pos:line="15" pos:column="20">{
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><name><name pos:line="16" pos:column="10">out<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">filename<pos:position pos:line="16" pos:column="23"/></name></name></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24"> <block pos:line="16" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">warnf<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">config<pos:position pos:line="17" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="21">"Remote filename has no length!\n"<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
      <return pos:line="18" pos:column="7">return <expr><name pos:line="18" pos:column="14">err_rc<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></return> <comment type="block" pos:line="18" pos:column="22">/* Failure */</comment>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">config<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">content_disposition<pos:position pos:line="21" pos:column="36"/></name></name></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37"> <block pos:line="21" pos:column="38">{
      <comment type="block" pos:line="22" pos:column="7">/* don't overwrite existing files */</comment>
      <decl_stmt><decl><type><name pos:line="23" pos:column="7">FILE<pos:position pos:line="23" pos:column="11"/></name><modifier pos:line="23" pos:column="11">*<pos:position pos:line="23" pos:column="12"/></modifier></type> <name pos:line="23" pos:column="13">f<pos:position pos:line="23" pos:column="14"/></name> <init pos:line="23" pos:column="15">= <expr><call><name pos:line="23" pos:column="17">fopen<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name><name pos:line="23" pos:column="23">out<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">-&gt;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="28">filename<pos:position pos:line="23" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="38">"r"<pos:position pos:line="23" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="43"/></decl_stmt>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">f<pos:position pos:line="24" pos:column="12"/></name></expr>)<pos:position pos:line="24" pos:column="13"/></condition><then pos:line="24" pos:column="13"> <block pos:line="24" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">fclose<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">f<pos:position pos:line="25" pos:column="17"/></name></expr></argument>)<pos:position pos:line="25" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">warnf<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><name pos:line="26" pos:column="15">config<pos:position pos:line="26" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="23">"Refusing to overwrite %s: %s\n"<pos:position pos:line="26" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="57">out<pos:position pos:line="26" pos:column="60"/></name><operator pos:line="26" pos:column="60">-&gt;<pos:position pos:line="26" pos:column="65"/></operator><name pos:line="26" pos:column="62">filename<pos:position pos:line="26" pos:column="70"/></name></name></expr></argument>,
              <argument><expr><call><name pos:line="27" pos:column="15">strerror<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">EEXIST<pos:position pos:line="27" pos:column="30"/></name></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">err_rc<pos:position pos:line="28" pos:column="22"/></name></expr>;<pos:position pos:line="28" pos:column="23"/></return> <comment type="block" pos:line="28" pos:column="24">/* Failure */</comment>
      }<pos:position pos:line="29" pos:column="8"/></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="32" pos:column="5">/* open file for writing */</comment>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">out<pos:position pos:line="33" pos:column="8"/></name><operator pos:line="33" pos:column="8">-&gt;<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="10">stream<pos:position pos:line="33" pos:column="16"/></name></name><operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator><call><name pos:line="33" pos:column="17">fopen<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><name><name pos:line="33" pos:column="23">out<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">-&gt;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="28">filename<pos:position pos:line="33" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="38">"wb"<pos:position pos:line="33" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><operator pos:line="34" pos:column="8">!<pos:position pos:line="34" pos:column="9"/></operator><name><name pos:line="34" pos:column="9">out<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">stream<pos:position pos:line="34" pos:column="20"/></name></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21"> <block pos:line="34" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">warnf<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">config<pos:position pos:line="35" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="21">"Failed to create the file %s: %s\n"<pos:position pos:line="35" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="59">out<pos:position pos:line="35" pos:column="62"/></name><operator pos:line="35" pos:column="62">-&gt;<pos:position pos:line="35" pos:column="67"/></operator><name pos:line="35" pos:column="64">filename<pos:position pos:line="35" pos:column="72"/></name></name></expr></argument>,
            <argument><expr><call><name pos:line="36" pos:column="13">strerror<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">errno<pos:position pos:line="36" pos:column="27"/></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
      <return pos:line="37" pos:column="7">return <expr><name pos:line="37" pos:column="14">err_rc<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></return> <comment type="block" pos:line="37" pos:column="22">/* failure */</comment>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="41" pos:column="3">rc<pos:position pos:line="41" pos:column="5"/></name> <operator pos:line="41" pos:column="6">=<pos:position pos:line="41" pos:column="7"/></operator> <call><name pos:line="41" pos:column="8">fwrite<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">buffer<pos:position pos:line="41" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="23">sz<pos:position pos:line="41" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="27">nmemb<pos:position pos:line="41" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="34">out<pos:position pos:line="41" pos:column="37"/></name><operator pos:line="41" pos:column="37">-&gt;<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="39">stream<pos:position pos:line="41" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="47"/></expr_stmt>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><operator pos:line="43" pos:column="6">(<pos:position pos:line="43" pos:column="7"/></operator><name pos:line="43" pos:column="7">sz<pos:position pos:line="43" pos:column="9"/></name> <operator pos:line="43" pos:column="10">*<pos:position pos:line="43" pos:column="11"/></operator> <name pos:line="43" pos:column="12">nmemb<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">)<pos:position pos:line="43" pos:column="18"/></operator> <operator pos:line="43" pos:column="19">==<pos:position pos:line="43" pos:column="21"/></operator> <name pos:line="43" pos:column="22">rc<pos:position pos:line="43" pos:column="24"/></name></expr>)<pos:position pos:line="43" pos:column="25"/></condition><then pos:line="43" pos:column="25"> <block pos:line="43" pos:column="26">{
    <comment type="block" pos:line="44" pos:column="5">/* we added this amount of data to the output */</comment>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">out<pos:position pos:line="45" pos:column="8"/></name><operator pos:line="45" pos:column="8">-&gt;<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="10">bytes<pos:position pos:line="45" pos:column="15"/></name></name> <operator pos:line="45" pos:column="16">+=<pos:position pos:line="45" pos:column="18"/></operator> <operator pos:line="45" pos:column="19">(<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">sz<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">*<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">nmemb<pos:position pos:line="45" pos:column="30"/></name><operator pos:line="45" pos:column="30">)<pos:position pos:line="45" pos:column="31"/></operator></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><name><name pos:line="48" pos:column="6">config<pos:position pos:line="48" pos:column="12"/></name><operator pos:line="48" pos:column="12">-&gt;<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="14">readbusy<pos:position pos:line="48" pos:column="22"/></name></name></expr>)<pos:position pos:line="48" pos:column="23"/></condition><then pos:line="48" pos:column="23"> <block pos:line="48" pos:column="24">{
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">config<pos:position pos:line="49" pos:column="11"/></name><operator pos:line="49" pos:column="11">-&gt;<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="13">readbusy<pos:position pos:line="49" pos:column="21"/></name></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <name pos:line="49" pos:column="24">FALSE<pos:position pos:line="49" pos:column="29"/></name></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">curl_easy_pause<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name><name pos:line="50" pos:column="21">config<pos:position pos:line="50" pos:column="27"/></name><operator pos:line="50" pos:column="27">-&gt;<pos:position pos:line="50" pos:column="32"/></operator><name pos:line="50" pos:column="29">easy<pos:position pos:line="50" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="35">CURLPAUSE_CONT<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>

  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name><name pos:line="53" pos:column="6">config<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">nobuffer<pos:position pos:line="53" pos:column="22"/></name></name></expr>)<pos:position pos:line="53" pos:column="23"/></condition><then pos:line="53" pos:column="23"> <block pos:line="53" pos:column="24">{
    <comment type="block" pos:line="54" pos:column="5">/* disable output buffering */</comment>
    <decl_stmt><decl><type><name pos:line="55" pos:column="5">int<pos:position pos:line="55" pos:column="8"/></name></type> <name pos:line="55" pos:column="9">res<pos:position pos:line="55" pos:column="12"/></name> <init pos:line="55" pos:column="13">= <expr><call><name pos:line="55" pos:column="15">fflush<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name><name pos:line="55" pos:column="22">out<pos:position pos:line="55" pos:column="25"/></name><operator pos:line="55" pos:column="25">-&gt;<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="27">stream<pos:position pos:line="55" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="35"/></decl_stmt>
    <if pos:line="56" pos:column="5">if<condition pos:line="56" pos:column="7">(<expr><name pos:line="56" pos:column="8">res<pos:position pos:line="56" pos:column="11"/></name></expr>)<pos:position pos:line="56" pos:column="12"/></condition><then pos:line="56" pos:column="12"> <block pos:line="56" pos:column="13">{
      <comment type="block" pos:line="57" pos:column="7">/* return a value that isn't the same as sz * nmemb */</comment>
      <return pos:line="58" pos:column="7">return <expr><name pos:line="58" pos:column="14">err_rc<pos:position pos:line="58" pos:column="20"/></name></expr>;<pos:position pos:line="58" pos:column="21"/></return> <comment type="block" pos:line="58" pos:column="22">/* failure */</comment>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>

  <return pos:line="62" pos:column="3">return <expr><name pos:line="62" pos:column="10">rc<pos:position pos:line="62" pos:column="12"/></name></expr>;<pos:position pos:line="62" pos:column="13"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
