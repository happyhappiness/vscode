<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_561.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_nbftpsendf<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                       <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">fmt<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="2" pos:column="41">...<pos:position pos:line="2" pos:column="44"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ssize_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">bytes_written<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">s<pos:position pos:line="5" pos:column="9"/></name><index pos:line="5" pos:column="9">[<expr><literal type="number" pos:line="5" pos:column="10">256<pos:position pos:line="5" pos:column="13"/></literal></expr>]<pos:position pos:line="5" pos:column="14"/></index></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">write_len<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">sptr<pos:position pos:line="7" pos:column="13"/></name><init pos:line="7" pos:column="13">=<expr><name pos:line="7" pos:column="14">s<pos:position pos:line="7" pos:column="15"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLcode<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">res<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><name pos:line="8" pos:column="18">CURLE_OK<pos:position pos:line="8" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">FTP<pos:position pos:line="9" pos:column="13"/></name></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">ftp<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><name><name pos:line="9" pos:column="21">conn<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">proto<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">.<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">ftp<pos:position pos:line="9" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">SessionHandle<pos:position pos:line="10" pos:column="23"/></name></name> <modifier pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></modifier></type><name pos:line="10" pos:column="25">data<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><name><name pos:line="10" pos:column="32">conn<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">data<pos:position pos:line="10" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="43"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="12" pos:column="3">va_list<pos:position pos:line="12" pos:column="10"/></name></type> <name pos:line="12" pos:column="11">ap<pos:position pos:line="12" pos:column="13"/></name></decl>;<pos:position pos:line="12" pos:column="14"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">va_start<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name pos:line="13" pos:column="12">ap<pos:position pos:line="13" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="16">fmt<pos:position pos:line="13" pos:column="19"/></name></expr></argument>)<pos:position pos:line="13" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">vsnprintf<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">s<pos:position pos:line="14" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="16">250<pos:position pos:line="14" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="21">fmt<pos:position pos:line="14" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="26">ap<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">va_end<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">ap<pos:position pos:line="15" pos:column="12"/></name></expr></argument>)<pos:position pos:line="15" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">strcat<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name pos:line="17" pos:column="10">s<pos:position pos:line="17" pos:column="11"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="13">"\r\n"<pos:position pos:line="17" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt> <comment type="block" pos:line="17" pos:column="22">/* append a trailing CRLF */</comment>

  <expr_stmt><expr><name pos:line="19" pos:column="3">bytes_written<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator><literal type="number" pos:line="19" pos:column="17">0<pos:position pos:line="19" pos:column="18"/></literal></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">write_len<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">strlen<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">s<pos:position pos:line="20" pos:column="23"/></name></expr></argument>)<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">ftp_respinit<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">conn<pos:position pos:line="22" pos:column="20"/></name></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">res<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">Curl_write<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">conn<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="26">conn<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">-&gt;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="32">sock<pos:position pos:line="24" pos:column="36"/></name><index pos:line="24" pos:column="36">[<expr><name pos:line="24" pos:column="37">FIRSTSOCKET<pos:position pos:line="24" pos:column="48"/></name></expr>]<pos:position pos:line="24" pos:column="49"/></index></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">sptr<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">write_len<pos:position pos:line="24" pos:column="66"/></name></expr></argument>,
                   <argument><expr><operator pos:line="25" pos:column="20">&amp;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="21">bytes_written<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>

  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name pos:line="27" pos:column="6">CURLE_OK<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">!=<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">res<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22">
    <block type="pseudo"><return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">res<pos:position pos:line="28" pos:column="15"/></name></expr>;<pos:position pos:line="28" pos:column="16"/></return></block></then></if>

  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name><name pos:line="30" pos:column="6">conn<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">data<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">-&gt;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="18">set<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">.<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">verbose<pos:position pos:line="30" pos:column="29"/></name></name></expr>)<pos:position pos:line="30" pos:column="30"/></condition><then pos:line="30" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="5">Curl_debug<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name><name pos:line="31" pos:column="16">conn<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">-&gt;<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="22">data<pos:position pos:line="31" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">CURLINFO_HEADER_OUT<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">sptr<pos:position pos:line="31" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="55">bytes_written<pos:position pos:line="31" pos:column="68"/></name></expr></argument>,
               <argument><expr><name pos:line="32" pos:column="16">conn<pos:position pos:line="32" pos:column="20"/></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt></block></then></if>

  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name pos:line="34" pos:column="6">bytes_written<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">!=<pos:position pos:line="34" pos:column="22"/></operator> <operator pos:line="34" pos:column="23">(<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="24">ssize_t<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">)<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">write_len<pos:position pos:line="34" pos:column="41"/></name></expr>)<pos:position pos:line="34" pos:column="42"/></condition><then pos:line="34" pos:column="42"> <block pos:line="34" pos:column="43">{
    <comment type="block" pos:line="35" pos:column="5">/* the whole chunk was not sent, store the rest of the data */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">write_len<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">-=<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">bytes_written<pos:position pos:line="36" pos:column="31"/></name></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">sptr<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">+=<pos:position pos:line="37" pos:column="12"/></operator> <name pos:line="37" pos:column="13">bytes_written<pos:position pos:line="37" pos:column="26"/></name></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">ftp<pos:position pos:line="38" pos:column="8"/></name><operator pos:line="38" pos:column="8">-&gt;<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="10">sendthis<pos:position pos:line="38" pos:column="18"/></name></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <call><name pos:line="38" pos:column="21">malloc<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name pos:line="38" pos:column="28">write_len<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name><name pos:line="39" pos:column="8">ftp<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">-&gt;<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="13">sendthis<pos:position pos:line="39" pos:column="21"/></name></name></expr>)<pos:position pos:line="39" pos:column="22"/></condition><then pos:line="39" pos:column="22"> <block pos:line="39" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">memcpy<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name><name pos:line="40" pos:column="14">ftp<pos:position pos:line="40" pos:column="17"/></name><operator pos:line="40" pos:column="17">-&gt;<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="19">sendthis<pos:position pos:line="40" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="29">sptr<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">write_len<pos:position pos:line="40" pos:column="44"/></name></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="41" pos:column="7">ftp<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">-&gt;<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="12">sendsize<pos:position pos:line="41" pos:column="20"/></name></name><operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator><name><name pos:line="41" pos:column="21">ftp<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">-&gt;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="26">sendleft<pos:position pos:line="41" pos:column="34"/></name></name><operator pos:line="41" pos:column="34">=<pos:position pos:line="41" pos:column="35"/></operator><name pos:line="41" pos:column="35">write_len<pos:position pos:line="41" pos:column="44"/></name></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
    <else pos:line="43" pos:column="5">else <block pos:line="43" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">failf<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><name pos:line="44" pos:column="13">data<pos:position pos:line="44" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="19">"out of memory"<pos:position pos:line="44" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="45" pos:column="7">res<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <name pos:line="45" pos:column="13">CURLE_OUT_OF_MEMORY<pos:position pos:line="45" pos:column="32"/></name></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></else></if>
  }<pos:position pos:line="47" pos:column="4"/></block></then>
  <else pos:line="48" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="5">ftp<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">-&gt;<pos:position pos:line="49" pos:column="13"/></operator><name pos:line="49" pos:column="10">response<pos:position pos:line="49" pos:column="18"/></name></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <call><name pos:line="49" pos:column="21">Curl_tvnow<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">()<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt></block></else></if>

  <return pos:line="51" pos:column="3">return <expr><name pos:line="51" pos:column="10">res<pos:position pos:line="51" pos:column="13"/></name></expr>;<pos:position pos:line="51" pos:column="14"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
