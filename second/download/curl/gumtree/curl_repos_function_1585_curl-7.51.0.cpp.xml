<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1585_curl-7.51.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">pre_receive_plain<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">connectdata<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">conn<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">num<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">curl_socket_t<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">sockfd<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name><name pos:line="3" pos:column="32">conn<pos:position pos:line="3" pos:column="36"/></name><operator pos:line="3" pos:column="36">-&gt;<pos:position pos:line="3" pos:column="41"/></operator><name pos:line="3" pos:column="38">sock<pos:position pos:line="3" pos:column="42"/></name><index pos:line="3" pos:column="42">[<expr><name pos:line="3" pos:column="43">num<pos:position pos:line="3" pos:column="46"/></name></expr>]<pos:position pos:line="3" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">postponed_data<pos:position pos:line="4" pos:column="24"/></name></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier> <specifier pos:line="4" pos:column="27">const<pos:position pos:line="4" pos:column="32"/></specifier></type> <name pos:line="4" pos:column="33">psnd<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><operator pos:line="4" pos:column="40">&amp;<pos:position pos:line="4" pos:column="45"/></operator><operator pos:line="4" pos:column="41">(<pos:position pos:line="4" pos:column="42"/></operator><name><name pos:line="4" pos:column="42">conn<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">-&gt;<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="48">postponed<pos:position pos:line="4" pos:column="57"/></name><index pos:line="4" pos:column="57">[<expr><name pos:line="4" pos:column="58">num<pos:position pos:line="4" pos:column="61"/></name></expr>]<pos:position pos:line="4" pos:column="62"/></index></name><operator pos:line="4" pos:column="62">)<pos:position pos:line="4" pos:column="63"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="64"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">bytestorecv<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name><name pos:line="5" pos:column="24">psnd<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">-&gt;<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="30">allocated_size<pos:position pos:line="5" pos:column="44"/></name></name> <operator pos:line="5" pos:column="45">-<pos:position pos:line="5" pos:column="46"/></operator> <name><name pos:line="5" pos:column="47">psnd<pos:position pos:line="5" pos:column="51"/></name><operator pos:line="5" pos:column="51">-&gt;<pos:position pos:line="5" pos:column="56"/></operator><name pos:line="5" pos:column="53">recv_size<pos:position pos:line="5" pos:column="62"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="63"/></decl_stmt>
  <comment type="block" pos:line="6" pos:column="3">/* WinSock will destroy unread received data if send() is
     failed.
     To avoid lossage of received data, recv() must be
     performed before every send() if any incoming data is
     available. However, skip this, if buffer is already full. */</comment>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><operator pos:line="11" pos:column="6">(<pos:position pos:line="11" pos:column="7"/></operator><name><name pos:line="11" pos:column="7">conn<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">handler<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">-&gt;<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="22">protocol<pos:position pos:line="11" pos:column="30"/></name></name><operator pos:line="11" pos:column="30">&amp;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="31">PROTO_FAMILY_HTTP<pos:position pos:line="11" pos:column="48"/></name><operator pos:line="11" pos:column="48">)<pos:position pos:line="11" pos:column="49"/></operator> <operator pos:line="11" pos:column="50">!=<pos:position pos:line="11" pos:column="52"/></operator> <literal type="number" pos:line="11" pos:column="53">0<pos:position pos:line="11" pos:column="54"/></literal> <operator pos:line="11" pos:column="55">&amp;&amp;<pos:position pos:line="11" pos:column="65"/></operator>
     <name><name pos:line="12" pos:column="6">conn<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">recv<pos:position pos:line="12" pos:column="16"/></name><index pos:line="12" pos:column="16">[<expr><name pos:line="12" pos:column="17">num<pos:position pos:line="12" pos:column="20"/></name></expr>]<pos:position pos:line="12" pos:column="21"/></index></name> <operator pos:line="12" pos:column="22">==<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">Curl_recv_plain<pos:position pos:line="12" pos:column="40"/></name> <operator pos:line="12" pos:column="41">&amp;&amp;<pos:position pos:line="12" pos:column="51"/></operator>
     <operator pos:line="13" pos:column="6">(<pos:position pos:line="13" pos:column="7"/></operator><operator pos:line="13" pos:column="7">!<pos:position pos:line="13" pos:column="8"/></operator><name><name pos:line="13" pos:column="8">psnd<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">buffer<pos:position pos:line="13" pos:column="20"/></name></name> <operator pos:line="13" pos:column="21">||<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">bytestorecv<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">)<pos:position pos:line="13" pos:column="36"/></operator></expr>)<pos:position pos:line="13" pos:column="37"/></condition><then pos:line="13" pos:column="37"> <block pos:line="13" pos:column="38">{
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">int<pos:position pos:line="14" pos:column="14"/></name></type> <name pos:line="14" pos:column="15">readymask<pos:position pos:line="14" pos:column="24"/></name> <init pos:line="14" pos:column="25">= <expr><call><name pos:line="14" pos:column="27">Curl_socket_check<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">(<argument><expr><name pos:line="14" pos:column="45">sockfd<pos:position pos:line="14" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="53">CURL_SOCKET_BAD<pos:position pos:line="14" pos:column="68"/></name></expr></argument>,
                                            <argument><expr><name pos:line="15" pos:column="45">CURL_SOCKET_BAD<pos:position pos:line="15" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="62">0<pos:position pos:line="15" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="65"/></decl_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name pos:line="16" pos:column="8">readymask<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">!=<pos:position pos:line="16" pos:column="20"/></operator> <operator pos:line="16" pos:column="21">-<pos:position pos:line="16" pos:column="22"/></operator><literal type="number" pos:line="16" pos:column="22">1<pos:position pos:line="16" pos:column="23"/></literal> <operator pos:line="16" pos:column="24">&amp;&amp;<pos:position pos:line="16" pos:column="34"/></operator> <operator pos:line="16" pos:column="27">(<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="28">readymask<pos:position pos:line="16" pos:column="37"/></name> <operator pos:line="16" pos:column="38">&amp;<pos:position pos:line="16" pos:column="43"/></operator> <name pos:line="16" pos:column="40">CURL_CSELECT_IN<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">)<pos:position pos:line="16" pos:column="56"/></operator> <operator pos:line="16" pos:column="57">!=<pos:position pos:line="16" pos:column="59"/></operator> <literal type="number" pos:line="16" pos:column="60">0<pos:position pos:line="16" pos:column="61"/></literal></expr>)<pos:position pos:line="16" pos:column="62"/></condition><then pos:line="16" pos:column="62"> <block pos:line="16" pos:column="63">{
      <comment type="block" pos:line="17" pos:column="7">/* Have some incoming data */</comment>
      <if pos:line="18" pos:column="7">if<condition pos:line="18" pos:column="9">(<expr><operator pos:line="18" pos:column="10">!<pos:position pos:line="18" pos:column="11"/></operator><name><name pos:line="18" pos:column="11">psnd<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">buffer<pos:position pos:line="18" pos:column="23"/></name></name></expr>)<pos:position pos:line="18" pos:column="24"/></condition><then pos:line="18" pos:column="24"> <block pos:line="18" pos:column="25">{
        <comment type="block" pos:line="19" pos:column="9">/* Use buffer double default size for intermediate buffer */</comment>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">psnd<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">allocated_size<pos:position pos:line="20" pos:column="29"/></name></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <literal type="number" pos:line="20" pos:column="32">2<pos:position pos:line="20" pos:column="33"/></literal> <operator pos:line="20" pos:column="34">*<pos:position pos:line="20" pos:column="35"/></operator> <name pos:line="20" pos:column="36">BUFSIZE<pos:position pos:line="20" pos:column="43"/></name></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">psnd<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">buffer<pos:position pos:line="21" pos:column="21"/></name></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <call><name pos:line="21" pos:column="24">malloc<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name><name pos:line="21" pos:column="31">psnd<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">allocated_size<pos:position pos:line="21" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">psnd<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">recv_size<pos:position pos:line="22" pos:column="24"/></name></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">psnd<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">recv_processed<pos:position pos:line="23" pos:column="29"/></name></name> <operator pos:line="23" pos:column="30">=<pos:position pos:line="23" pos:column="31"/></operator> <literal type="number" pos:line="23" pos:column="32">0<pos:position pos:line="23" pos:column="33"/></literal></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">DEBUGBUILD<pos:position pos:line="24" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="25" pos:column="9">psnd<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">-&gt;<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="15">bindsock<pos:position pos:line="25" pos:column="23"/></name></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">sockfd<pos:position pos:line="25" pos:column="32"/></name></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt> <comment type="block" pos:line="25" pos:column="34">/* Used only for DEBUGASSERT */</comment>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="26" pos:column="8">/* DEBUGBUILD */</comment>
        <expr_stmt><expr><name pos:line="27" pos:column="9">bytestorecv<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name><name pos:line="27" pos:column="23">psnd<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">allocated_size<pos:position pos:line="27" pos:column="43"/></name></name></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="28" pos:column="8"/></block></then></if>
      <if pos:line="29" pos:column="7">if<condition pos:line="29" pos:column="9">(<expr><name><name pos:line="29" pos:column="10">psnd<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">buffer<pos:position pos:line="29" pos:column="22"/></name></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23"> <block pos:line="29" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">ssize_t<pos:position pos:line="30" pos:column="16"/></name></type> <name pos:line="30" pos:column="17">recvedbytes<pos:position pos:line="30" pos:column="28"/></name></decl>;<pos:position pos:line="30" pos:column="29"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">DEBUGASSERT<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name><name pos:line="31" pos:column="21">psnd<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">-&gt;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="27">bindsock<pos:position pos:line="31" pos:column="35"/></name></name> <operator pos:line="31" pos:column="36">==<pos:position pos:line="31" pos:column="38"/></operator> <name pos:line="31" pos:column="39">sockfd<pos:position pos:line="31" pos:column="45"/></name></expr></argument>)<pos:position pos:line="31" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="32" pos:column="9">recvedbytes<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">sread<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">sockfd<pos:position pos:line="32" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="37">psnd<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">-&gt;<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="43">buffer<pos:position pos:line="32" pos:column="49"/></name></name> <operator pos:line="32" pos:column="50">+<pos:position pos:line="32" pos:column="51"/></operator> <name><name pos:line="32" pos:column="52">psnd<pos:position pos:line="32" pos:column="56"/></name><operator pos:line="32" pos:column="56">-&gt;<pos:position pos:line="32" pos:column="61"/></operator><name pos:line="32" pos:column="58">recv_size<pos:position pos:line="32" pos:column="67"/></name></name></expr></argument>,
                            <argument><expr><name pos:line="33" pos:column="29">bytestorecv<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt>
        <if pos:line="34" pos:column="9">if<condition pos:line="34" pos:column="11">(<expr><name pos:line="34" pos:column="12">recvedbytes<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">&gt;<pos:position pos:line="34" pos:column="28"/></operator> <literal type="number" pos:line="34" pos:column="26">0<pos:position pos:line="34" pos:column="27"/></literal></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="11">psnd<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">-&gt;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="17">recv_size<pos:position pos:line="35" pos:column="26"/></name></name> <operator pos:line="35" pos:column="27">+=<pos:position pos:line="35" pos:column="29"/></operator> <name pos:line="35" pos:column="30">recvedbytes<pos:position pos:line="35" pos:column="41"/></name></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt></block></then></if>
      }<pos:position pos:line="36" pos:column="8"/></block></then>
      <else pos:line="37" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="38" pos:column="9">psnd<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">-&gt;<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="15">allocated_size<pos:position pos:line="38" pos:column="29"/></name></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <literal type="number" pos:line="38" pos:column="32">0<pos:position pos:line="38" pos:column="33"/></literal></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt></block></else></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
