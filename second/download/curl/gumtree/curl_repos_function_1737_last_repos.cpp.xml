<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1737_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_resolver_wait_resolv<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                                   <parameter><decl><type><name><name pos:line="2" pos:column="36">struct<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">Curl_dns_entry<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier><modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">entry<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">long<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">timeout<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">curltime<pos:position pos:line="7" pos:column="18"/></name></name></type> <name pos:line="7" pos:column="19">now<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><call><name pos:line="7" pos:column="25">Curl_tvnow<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">()<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_dns_entry<pos:position pos:line="8" pos:column="24"/></name></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">temp_entry<pos:position pos:line="8" pos:column="36"/></name></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">entry<pos:position pos:line="10" pos:column="11"/></name></expr>)<pos:position pos:line="10" pos:column="12"/></condition><then pos:line="10" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="11" pos:column="5">*<pos:position pos:line="11" pos:column="6"/></operator><name pos:line="11" pos:column="6">entry<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <name pos:line="11" pos:column="14">NULL<pos:position pos:line="11" pos:column="18"/></name></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt></block></then></if> <comment type="block" pos:line="11" pos:column="20">/* clear on entry */</comment>

  <expr_stmt><expr><name pos:line="13" pos:column="3">timeout<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">Curl_timeleft<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">data<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="33">&amp;<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="34">now<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">TRUE<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">timeout<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">&lt;<pos:position pos:line="14" pos:column="18"/></operator> <literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18"> <block pos:line="14" pos:column="19">{
    <comment type="block" pos:line="15" pos:column="5">/* already expired! */</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">connclose<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">conn<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"Timed out before name resolve started"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="17" pos:column="36"/></name></expr>;<pos:position pos:line="17" pos:column="37"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><name pos:line="19" pos:column="7">timeout<pos:position pos:line="19" pos:column="14"/></name></expr>)<pos:position pos:line="19" pos:column="15"/></condition><then pos:line="19" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="5">timeout<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name pos:line="20" pos:column="15">CURL_TIMEOUT_RESOLVE<pos:position pos:line="20" pos:column="35"/></name> <operator pos:line="20" pos:column="36">*<pos:position pos:line="20" pos:column="37"/></operator> <literal type="number" pos:line="20" pos:column="38">1000<pos:position pos:line="20" pos:column="42"/></literal></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt></block></then></if> <comment type="block" pos:line="20" pos:column="44">/* default name resolve timeout */</comment>

  <comment type="block" pos:line="22" pos:column="3">/* Wait for the name resolve query to complete. */</comment>
  <while pos:line="23" pos:column="3">while<condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">result<pos:position pos:line="23" pos:column="16"/></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition> <block pos:line="23" pos:column="18">{
    <decl_stmt><decl><type><name><name pos:line="24" pos:column="5">struct<pos:position pos:line="24" pos:column="11"/></name> <name pos:line="24" pos:column="12">timeval<pos:position pos:line="24" pos:column="19"/></name></name> <modifier pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></modifier></type><name pos:line="24" pos:column="21">tvp<pos:position pos:line="24" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="24" pos:column="26">tv<pos:position pos:line="24" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="24" pos:column="30">store<pos:position pos:line="24" pos:column="35"/></name></decl>;<pos:position pos:line="24" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">int<pos:position pos:line="25" pos:column="8"/></name></type> <name pos:line="25" pos:column="9">itimeout<pos:position pos:line="25" pos:column="17"/></name></decl>;<pos:position pos:line="25" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">timeout_ms<pos:position pos:line="26" pos:column="19"/></name></decl>;<pos:position pos:line="26" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="28" pos:column="5">itimeout<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <ternary><condition><expr><operator pos:line="28" pos:column="16">(<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">timeout<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">&gt;<pos:position pos:line="28" pos:column="29"/></operator> <operator pos:line="28" pos:column="27">(<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">long<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">)<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="33">INT_MAX<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">)<pos:position pos:line="28" pos:column="41"/></operator></expr> ?<pos:position pos:line="28" pos:column="43"/></condition><then pos:line="28" pos:column="43"> <expr><name pos:line="28" pos:column="44">INT_MAX<pos:position pos:line="28" pos:column="51"/></name></expr> <pos:position pos:line="28" pos:column="52"/></then><else pos:line="28" pos:column="52">: <expr><operator pos:line="28" pos:column="54">(<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="55">int<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">)<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="59">timeout<pos:position pos:line="28" pos:column="66"/></name></expr></else></ternary></expr>;<pos:position pos:line="28" pos:column="67"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="30" pos:column="5">store<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">.<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">tv_sec<pos:position pos:line="30" pos:column="17"/></name></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <name pos:line="30" pos:column="20">itimeout<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">/<pos:position pos:line="30" pos:column="29"/></operator><literal type="number" pos:line="30" pos:column="29">1000<pos:position pos:line="30" pos:column="33"/></literal></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">store<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">.<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">tv_usec<pos:position pos:line="31" pos:column="18"/></name></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <operator pos:line="31" pos:column="21">(<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">itimeout<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">%<pos:position pos:line="31" pos:column="31"/></operator><literal type="number" pos:line="31" pos:column="31">1000<pos:position pos:line="31" pos:column="35"/></literal><operator pos:line="31" pos:column="35">)<pos:position pos:line="31" pos:column="36"/></operator><operator pos:line="31" pos:column="36">*<pos:position pos:line="31" pos:column="37"/></operator><literal type="number" pos:line="31" pos:column="37">1000<pos:position pos:line="31" pos:column="41"/></literal></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name pos:line="33" pos:column="5">tvp<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">=<pos:position pos:line="33" pos:column="10"/></operator> <call><name pos:line="33" pos:column="11">ares_timeout<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><operator pos:line="33" pos:column="24">(<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="25">ares_channel<pos:position pos:line="33" pos:column="37"/></name><operator pos:line="33" pos:column="37">)<pos:position pos:line="33" pos:column="38"/></operator><name><name pos:line="33" pos:column="38">data<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">state<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">.<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="50">resolver<pos:position pos:line="33" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="60">&amp;<pos:position pos:line="33" pos:column="65"/></operator><name pos:line="33" pos:column="61">store<pos:position pos:line="33" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="68">&amp;<pos:position pos:line="33" pos:column="73"/></operator><name pos:line="33" pos:column="69">tv<pos:position pos:line="33" pos:column="71"/></name></expr></argument>)<pos:position pos:line="33" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="73"/></expr_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* use the timeout period ares returned to us above if less than one
       second is left, otherwise just use 1000ms to make sure the progress
       callback gets called frequent enough */</comment>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><operator pos:line="38" pos:column="8">!<pos:position pos:line="38" pos:column="9"/></operator><name><name pos:line="38" pos:column="9">tvp<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">tv_sec<pos:position pos:line="38" pos:column="20"/></name></name></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="7">timeout_ms<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator> <call pos:line="39" pos:column="20">(<name pos:line="39" pos:column="21">int<pos:position pos:line="39" pos:column="24"/></name>)<argument_list pos:line="39" pos:column="25">(<argument><expr><name><name pos:line="39" pos:column="26">tvp<pos:position pos:line="39" pos:column="29"/></name><operator pos:line="39" pos:column="29">-&gt;<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="31">tv_usec<pos:position pos:line="39" pos:column="38"/></name></name><operator pos:line="39" pos:column="38">/<pos:position pos:line="39" pos:column="39"/></operator><literal type="number" pos:line="39" pos:column="39">1000<pos:position pos:line="39" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt></block></then>
    <else pos:line="40" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="7">timeout_ms<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <literal type="number" pos:line="41" pos:column="20">1000<pos:position pos:line="41" pos:column="24"/></literal></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">waitperform<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">conn<pos:position pos:line="43" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="23">timeout_ms<pos:position pos:line="43" pos:column="33"/></name></expr></argument>)<pos:position pos:line="43" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="44" pos:column="5">result<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">Curl_resolver_is_resolved<pos:position pos:line="44" pos:column="39"/></name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">conn<pos:position pos:line="44" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="46">&amp;<pos:position pos:line="44" pos:column="51"/></operator><name pos:line="44" pos:column="47">temp_entry<pos:position pos:line="44" pos:column="57"/></name></expr></argument>)<pos:position pos:line="44" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="59"/></expr_stmt>

    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><name pos:line="46" pos:column="8">result<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">||<pos:position pos:line="46" pos:column="17"/></operator> <name><name pos:line="46" pos:column="18">conn<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">-&gt;<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="24">async<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">.<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">done<pos:position pos:line="46" pos:column="34"/></name></name></expr>)<pos:position pos:line="46" pos:column="35"/></condition><then pos:line="46" pos:column="35">
      <block type="pseudo"><break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break></block></then></if>

    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><call><name pos:line="49" pos:column="8">Curl_pgrsUpdate<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">conn<pos:position pos:line="49" pos:column="28"/></name></expr></argument>)<pos:position pos:line="49" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="30"/></condition><then pos:line="49" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="7">result<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <name pos:line="50" pos:column="16">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="50" pos:column="41"/></name></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt></block></then>
    <else pos:line="51" pos:column="5">else <block pos:line="51" pos:column="10">{
      <decl_stmt><decl><type><name><name pos:line="52" pos:column="7">struct<pos:position pos:line="52" pos:column="13"/></name> <name pos:line="52" pos:column="14">curltime<pos:position pos:line="52" pos:column="22"/></name></name></type> <name pos:line="52" pos:column="23">now2<pos:position pos:line="52" pos:column="27"/></name> <init pos:line="52" pos:column="28">= <expr><call><name pos:line="52" pos:column="30">Curl_tvnow<pos:position pos:line="52" pos:column="40"/></name><argument_list pos:line="52" pos:column="40">()<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="43"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="53" pos:column="7">time_t<pos:position pos:line="53" pos:column="13"/></name></type> <name pos:line="53" pos:column="14">timediff<pos:position pos:line="53" pos:column="22"/></name> <init pos:line="53" pos:column="23">= <expr><call><name pos:line="53" pos:column="25">Curl_tvdiff<pos:position pos:line="53" pos:column="36"/></name><argument_list pos:line="53" pos:column="36">(<argument><expr><name pos:line="53" pos:column="37">now2<pos:position pos:line="53" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="43">now<pos:position pos:line="53" pos:column="46"/></name></expr></argument>)<pos:position pos:line="53" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="53" pos:column="48"/></decl_stmt> <comment type="block" pos:line="53" pos:column="49">/* spent time */</comment>
      <if pos:line="54" pos:column="7">if<condition pos:line="54" pos:column="9">(<expr><name pos:line="54" pos:column="10">timediff<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">&lt;=<pos:position pos:line="54" pos:column="24"/></operator> <literal type="number" pos:line="54" pos:column="22">0<pos:position pos:line="54" pos:column="23"/></literal></expr>)<pos:position pos:line="54" pos:column="24"/></condition><then pos:line="54" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="9">timeout<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">-=<pos:position pos:line="55" pos:column="19"/></operator> <literal type="number" pos:line="55" pos:column="20">1<pos:position pos:line="55" pos:column="21"/></literal></expr>;<pos:position pos:line="55" pos:column="22"/></expr_stmt></block></then> <comment type="block" pos:line="55" pos:column="23">/* always deduct at least 1 */</comment>
      <elseif pos:line="56" pos:column="7">else <if pos:line="56" pos:column="12">if<condition pos:line="56" pos:column="14">(<expr><name pos:line="56" pos:column="15">timediff<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">&gt;<pos:position pos:line="56" pos:column="28"/></operator> <name pos:line="56" pos:column="26">timeout<pos:position pos:line="56" pos:column="33"/></name></expr>)<pos:position pos:line="56" pos:column="34"/></condition><then pos:line="56" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="9">timeout<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">=<pos:position pos:line="57" pos:column="18"/></operator> <operator pos:line="57" pos:column="19">-<pos:position pos:line="57" pos:column="20"/></operator><literal type="number" pos:line="57" pos:column="20">1<pos:position pos:line="57" pos:column="21"/></literal></expr>;<pos:position pos:line="57" pos:column="22"/></expr_stmt></block></then></if></elseif>
      <else pos:line="58" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="9">timeout<pos:position pos:line="59" pos:column="16"/></name> <operator pos:line="59" pos:column="17">-=<pos:position pos:line="59" pos:column="19"/></operator> <operator pos:line="59" pos:column="20">(<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="21">long<pos:position pos:line="59" pos:column="25"/></name><operator pos:line="59" pos:column="25">)<pos:position pos:line="59" pos:column="26"/></operator><name pos:line="59" pos:column="26">timediff<pos:position pos:line="59" pos:column="34"/></name></expr>;<pos:position pos:line="59" pos:column="35"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="60" pos:column="7">now<pos:position pos:line="60" pos:column="10"/></name> <operator pos:line="60" pos:column="11">=<pos:position pos:line="60" pos:column="12"/></operator> <name pos:line="60" pos:column="13">now2<pos:position pos:line="60" pos:column="17"/></name></expr>;<pos:position pos:line="60" pos:column="18"/></expr_stmt> <comment type="block" pos:line="60" pos:column="19">/* for next loop */</comment>
    }<pos:position pos:line="61" pos:column="6"/></block></else></if>
    <if pos:line="62" pos:column="5">if<condition pos:line="62" pos:column="7">(<expr><name pos:line="62" pos:column="8">timeout<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">&lt;<pos:position pos:line="62" pos:column="20"/></operator> <literal type="number" pos:line="62" pos:column="18">0<pos:position pos:line="62" pos:column="19"/></literal></expr>)<pos:position pos:line="62" pos:column="20"/></condition><then pos:line="62" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="7">result<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">=<pos:position pos:line="63" pos:column="15"/></operator> <name pos:line="63" pos:column="16">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="63" pos:column="40"/></name></expr>;<pos:position pos:line="63" pos:column="41"/></expr_stmt></block></then></if>
  }<pos:position pos:line="64" pos:column="4"/></block></while>
  <if pos:line="65" pos:column="3">if<condition pos:line="65" pos:column="5">(<expr><name pos:line="65" pos:column="6">result<pos:position pos:line="65" pos:column="12"/></name></expr>)<pos:position pos:line="65" pos:column="13"/></condition><then pos:line="65" pos:column="13">
    <comment type="block" pos:line="66" pos:column="5">/* failure, so we cancel the ares operation */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="5">ares_cancel<pos:position pos:line="67" pos:column="16"/></name><argument_list pos:line="67" pos:column="16">(<argument><expr><operator pos:line="67" pos:column="17">(<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="18">ares_channel<pos:position pos:line="67" pos:column="30"/></name><operator pos:line="67" pos:column="30">)<pos:position pos:line="67" pos:column="31"/></operator><name><name pos:line="67" pos:column="31">data<pos:position pos:line="67" pos:column="35"/></name><operator pos:line="67" pos:column="35">-&gt;<pos:position pos:line="67" pos:column="40"/></operator><name pos:line="67" pos:column="37">state<pos:position pos:line="67" pos:column="42"/></name><operator pos:line="67" pos:column="42">.<pos:position pos:line="67" pos:column="43"/></operator><name pos:line="67" pos:column="43">resolver<pos:position pos:line="67" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="53"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="69" pos:column="3">/* Operation complete, if the lookup was successful we now have the entry
     in the cache. */</comment>
  <if pos:line="71" pos:column="3">if<condition pos:line="71" pos:column="5">(<expr><name pos:line="71" pos:column="6">entry<pos:position pos:line="71" pos:column="11"/></name></expr>)<pos:position pos:line="71" pos:column="12"/></condition><then pos:line="71" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="72" pos:column="5">*<pos:position pos:line="72" pos:column="6"/></operator><name pos:line="72" pos:column="6">entry<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">=<pos:position pos:line="72" pos:column="13"/></operator> <name><name pos:line="72" pos:column="14">conn<pos:position pos:line="72" pos:column="18"/></name><operator pos:line="72" pos:column="18">-&gt;<pos:position pos:line="72" pos:column="23"/></operator><name pos:line="72" pos:column="20">async<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">.<pos:position pos:line="72" pos:column="26"/></operator><name pos:line="72" pos:column="26">dns<pos:position pos:line="72" pos:column="29"/></name></name></expr>;<pos:position pos:line="72" pos:column="30"/></expr_stmt></block></then></if>

  <if pos:line="74" pos:column="3">if<condition pos:line="74" pos:column="5">(<expr><name pos:line="74" pos:column="6">result<pos:position pos:line="74" pos:column="12"/></name></expr>)<pos:position pos:line="74" pos:column="13"/></condition><then pos:line="74" pos:column="13">
    <comment type="block" pos:line="75" pos:column="5">/* close the connection, since we can't return failure here without
       cleaning up this connection properly.
       TODO: remove this action from here, it is not a name resolver decision.
    */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="5">connclose<pos:position pos:line="79" pos:column="14"/></name><argument_list pos:line="79" pos:column="14">(<argument><expr><name pos:line="79" pos:column="15">conn<pos:position pos:line="79" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="21">"c-ares resolve failed"<pos:position pos:line="79" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="46"/></expr_stmt></block></then></if>

  <return pos:line="81" pos:column="3">return <expr><name pos:line="81" pos:column="10">result<pos:position pos:line="81" pos:column="16"/></name></expr>;<pos:position pos:line="81" pos:column="17"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
