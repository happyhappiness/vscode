<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2284_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type>
<name pos:line="2" pos:column="1">Curl_ip2addr<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">int<pos:position pos:line="2" pos:column="17"/></name></type> <name pos:line="2" pos:column="18">af<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">inaddr<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">hostname<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="64">int<pos:position pos:line="2" pos:column="67"/></name></type> <name pos:line="2" pos:column="68">port<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">Curl_addrinfo<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">ai<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><call><name pos:line="6" pos:column="5">defined<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">__VMS<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call> <operator pos:line="6" pos:column="20">&amp;&amp;<pos:position pos:line="6" pos:column="30"/></operator> \
    <call><name pos:line="7" pos:column="5">defined<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><name pos:line="7" pos:column="13">__INITIAL_POINTER_SIZE<pos:position pos:line="7" pos:column="35"/></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call> <operator pos:line="7" pos:column="37">&amp;&amp;<pos:position pos:line="7" pos:column="47"/></operator> <operator pos:line="7" pos:column="40">(<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="41">__INITIAL_POINTER_SIZE<pos:position pos:line="7" pos:column="63"/></name> <operator pos:line="7" pos:column="64">==<pos:position pos:line="7" pos:column="66"/></operator> <literal type="number" pos:line="7" pos:column="67">64<pos:position pos:line="7" pos:column="69"/></literal><operator pos:line="7" pos:column="69">)<pos:position pos:line="7" pos:column="70"/></operator></expr></cpp:if>
<cpp:pragma pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">pragma<pos:position pos:line="8" pos:column="8"/></cpp:directive> <name pos:line="8" pos:column="9">pointer_size<pos:position pos:line="8" pos:column="21"/></name> <name pos:line="8" pos:column="22">save<pos:position pos:line="8" pos:column="26"/></name></cpp:pragma>
<cpp:pragma pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">pragma<pos:position pos:line="9" pos:column="8"/></cpp:directive> <name pos:line="9" pos:column="9">pointer_size<pos:position pos:line="9" pos:column="21"/></name> <name pos:line="9" pos:column="22">short<pos:position pos:line="9" pos:column="27"/></name></cpp:pragma>
<cpp:pragma pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">pragma<pos:position pos:line="10" pos:column="8"/></cpp:directive> <name pos:line="10" pos:column="9">message<pos:position pos:line="10" pos:column="16"/></name> <name pos:line="10" pos:column="17">disable<pos:position pos:line="10" pos:column="24"/></name> <name pos:line="10" pos:column="25">PTRMISMATCH<pos:position pos:line="10" pos:column="36"/></name></cpp:pragma>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">hostent<pos:position pos:line="13" pos:column="17"/></name></name>  <modifier pos:line="13" pos:column="19">*<pos:position pos:line="13" pos:column="20"/></modifier></type><name pos:line="13" pos:column="20">h<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">namebuff<pos:position pos:line="14" pos:column="18"/></name></name> <modifier pos:line="14" pos:column="19">*<pos:position pos:line="14" pos:column="20"/></modifier></type><name pos:line="14" pos:column="20">buf<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name>  <modifier pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></modifier></type><name pos:line="15" pos:column="10">addrentry<pos:position pos:line="15" pos:column="19"/></name></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name>  <modifier pos:line="16" pos:column="9">*<pos:position pos:line="16" pos:column="10"/></modifier></type><name pos:line="16" pos:column="10">hoststr<pos:position pos:line="16" pos:column="17"/></name></decl>;<pos:position pos:line="16" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">size_t<pos:position pos:line="17" pos:column="9"/></name></type> <name pos:line="17" pos:column="10">addrsize<pos:position pos:line="17" pos:column="18"/></name></decl>;<pos:position pos:line="17" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">DEBUGASSERT<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">inaddr<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">&amp;&amp;<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="25">hostname<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><name pos:line="21" pos:column="3">buf<pos:position pos:line="21" pos:column="6"/></name> <operator pos:line="21" pos:column="7">=<pos:position pos:line="21" pos:column="8"/></operator> <call><name pos:line="21" pos:column="9">malloc<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><sizeof pos:line="21" pos:column="16">sizeof<argument_list pos:line="21" pos:column="22">(<argument><expr pos:line="21" pos:column="23">struct <name pos:line="21" pos:column="30">namebuff<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><operator pos:line="22" pos:column="6">!<pos:position pos:line="22" pos:column="7"/></operator><name pos:line="22" pos:column="7">buf<pos:position pos:line="22" pos:column="10"/></name></expr>)<pos:position pos:line="22" pos:column="11"/></condition><then pos:line="22" pos:column="11">
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">NULL<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="25" pos:column="3">hoststr<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">strdup<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">hostname<pos:position pos:line="25" pos:column="28"/></name></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">!<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">hoststr<pos:position pos:line="26" pos:column="14"/></name></expr>)<pos:position pos:line="26" pos:column="15"/></condition><then pos:line="26" pos:column="15"> <block pos:line="26" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">free<pos:position pos:line="27" pos:column="9"/></name><argument_list pos:line="27" pos:column="9">(<argument><expr><name pos:line="27" pos:column="10">buf<pos:position pos:line="27" pos:column="13"/></name></expr></argument>)<pos:position pos:line="27" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">NULL<pos:position pos:line="28" pos:column="16"/></name></expr>;<pos:position pos:line="28" pos:column="17"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <switch pos:line="31" pos:column="3">switch<condition pos:line="31" pos:column="9">(<expr><name pos:line="31" pos:column="10">af<pos:position pos:line="31" pos:column="12"/></name></expr>)<pos:position pos:line="31" pos:column="13"/></condition> <block pos:line="31" pos:column="14">{
  <case pos:line="32" pos:column="3">case <expr><name pos:line="32" pos:column="8">AF_INET<pos:position pos:line="32" pos:column="15"/></name></expr>:<pos:position pos:line="32" pos:column="16"/></case>
    <expr_stmt><expr><name pos:line="33" pos:column="5">addrsize<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <sizeof pos:line="33" pos:column="16">sizeof<argument_list pos:line="33" pos:column="22">(<argument><expr pos:line="33" pos:column="23">struct <name pos:line="33" pos:column="30">in_addr<pos:position pos:line="33" pos:column="37"/></name></expr></argument>)<pos:position pos:line="33" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">addrentry<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <operator pos:line="34" pos:column="17">(<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">void<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">*<pos:position pos:line="34" pos:column="24"/></operator><operator pos:line="34" pos:column="24">)<pos:position pos:line="34" pos:column="25"/></operator><operator pos:line="34" pos:column="25">&amp;<pos:position pos:line="34" pos:column="30"/></operator><name><name pos:line="34" pos:column="26">buf<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">-&gt;<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="31">addrentry<pos:position pos:line="34" pos:column="40"/></name><operator pos:line="34" pos:column="40">.<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="41">ina4<pos:position pos:line="34" pos:column="45"/></name></name></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">memcpy<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name pos:line="35" pos:column="12">addrentry<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">inaddr<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="31">sizeof<argument_list pos:line="35" pos:column="37">(<argument><expr pos:line="35" pos:column="38">struct <name pos:line="35" pos:column="45">in_addr<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt>
    <break pos:line="36" pos:column="5">break;<pos:position pos:line="36" pos:column="11"/></break>
<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">ENABLE_IPV6<pos:position pos:line="37" pos:column="19"/></name></cpp:ifdef>
  <case pos:line="38" pos:column="3">case <expr><name pos:line="38" pos:column="8">AF_INET6<pos:position pos:line="38" pos:column="16"/></name></expr>:<pos:position pos:line="38" pos:column="17"/></case>
    <expr_stmt><expr><name pos:line="39" pos:column="5">addrsize<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <sizeof pos:line="39" pos:column="16">sizeof<argument_list pos:line="39" pos:column="22">(<argument><expr pos:line="39" pos:column="23">struct <name pos:line="39" pos:column="30">in6_addr<pos:position pos:line="39" pos:column="38"/></name></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="39" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">addrentry<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator> <operator pos:line="40" pos:column="17">(<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="18">void<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">*<pos:position pos:line="40" pos:column="24"/></operator><operator pos:line="40" pos:column="24">)<pos:position pos:line="40" pos:column="25"/></operator><operator pos:line="40" pos:column="25">&amp;<pos:position pos:line="40" pos:column="30"/></operator><name><name pos:line="40" pos:column="26">buf<pos:position pos:line="40" pos:column="29"/></name><operator pos:line="40" pos:column="29">-&gt;<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="31">addrentry<pos:position pos:line="40" pos:column="40"/></name><operator pos:line="40" pos:column="40">.<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="41">ina6<pos:position pos:line="40" pos:column="45"/></name></name></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">memcpy<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><name pos:line="41" pos:column="12">addrentry<pos:position pos:line="41" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="23">inaddr<pos:position pos:line="41" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="31">sizeof<argument_list pos:line="41" pos:column="37">(<argument><expr pos:line="41" pos:column="38">struct <name pos:line="41" pos:column="45">in6_addr<pos:position pos:line="41" pos:column="53"/></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="56"/></expr_stmt>
    <break pos:line="42" pos:column="5">break;<pos:position pos:line="42" pos:column="11"/></break>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
  <default pos:line="44" pos:column="3">default:<pos:position pos:line="44" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">free<pos:position pos:line="45" pos:column="9"/></name><argument_list pos:line="45" pos:column="9">(<argument><expr><name pos:line="45" pos:column="10">hoststr<pos:position pos:line="45" pos:column="17"/></name></expr></argument>)<pos:position pos:line="45" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">free<pos:position pos:line="46" pos:column="9"/></name><argument_list pos:line="46" pos:column="9">(<argument><expr><name pos:line="46" pos:column="10">buf<pos:position pos:line="46" pos:column="13"/></name></expr></argument>)<pos:position pos:line="46" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="15"/></expr_stmt>
    <return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">NULL<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></return>
  }<pos:position pos:line="48" pos:column="4"/></block></switch>

  <expr_stmt><expr><name pos:line="50" pos:column="3">h<pos:position pos:line="50" pos:column="4"/></name> <operator pos:line="50" pos:column="5">=<pos:position pos:line="50" pos:column="6"/></operator> <operator pos:line="50" pos:column="7">&amp;<pos:position pos:line="50" pos:column="12"/></operator><name><name pos:line="50" pos:column="8">buf<pos:position pos:line="50" pos:column="11"/></name><operator pos:line="50" pos:column="11">-&gt;<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="13">hostentry<pos:position pos:line="50" pos:column="22"/></name></name></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="51" pos:column="3">h<pos:position pos:line="51" pos:column="4"/></name><operator pos:line="51" pos:column="4">-&gt;<pos:position pos:line="51" pos:column="9"/></operator><name pos:line="51" pos:column="6">h_name<pos:position pos:line="51" pos:column="12"/></name></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <name pos:line="51" pos:column="15">hoststr<pos:position pos:line="51" pos:column="22"/></name></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="52" pos:column="3">h<pos:position pos:line="52" pos:column="4"/></name><operator pos:line="52" pos:column="4">-&gt;<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="6">h_aliases<pos:position pos:line="52" pos:column="15"/></name></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <name pos:line="52" pos:column="18">NULL<pos:position pos:line="52" pos:column="22"/></name></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">h<pos:position pos:line="53" pos:column="4"/></name><operator pos:line="53" pos:column="4">-&gt;<pos:position pos:line="53" pos:column="9"/></operator><name pos:line="53" pos:column="6">h_addrtype<pos:position pos:line="53" pos:column="16"/></name></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <operator pos:line="53" pos:column="19">(<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="20">short<pos:position pos:line="53" pos:column="25"/></name><operator pos:line="53" pos:column="25">)<pos:position pos:line="53" pos:column="26"/></operator><name pos:line="53" pos:column="26">af<pos:position pos:line="53" pos:column="28"/></name></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="54" pos:column="3">h<pos:position pos:line="54" pos:column="4"/></name><operator pos:line="54" pos:column="4">-&gt;<pos:position pos:line="54" pos:column="9"/></operator><name pos:line="54" pos:column="6">h_length<pos:position pos:line="54" pos:column="14"/></name></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <operator pos:line="54" pos:column="17">(<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">short<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">)<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="24">addrsize<pos:position pos:line="54" pos:column="32"/></name></expr>;<pos:position pos:line="54" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="55" pos:column="3">h<pos:position pos:line="55" pos:column="4"/></name><operator pos:line="55" pos:column="4">-&gt;<pos:position pos:line="55" pos:column="9"/></operator><name pos:line="55" pos:column="6">h_addr_list<pos:position pos:line="55" pos:column="17"/></name></name> <operator pos:line="55" pos:column="18">=<pos:position pos:line="55" pos:column="19"/></operator> <operator pos:line="55" pos:column="20">&amp;<pos:position pos:line="55" pos:column="25"/></operator><name><name pos:line="55" pos:column="21">buf<pos:position pos:line="55" pos:column="24"/></name><operator pos:line="55" pos:column="24">-&gt;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="26">h_addr_list<pos:position pos:line="55" pos:column="37"/></name><index pos:line="55" pos:column="37">[<expr><literal type="number" pos:line="55" pos:column="38">0<pos:position pos:line="55" pos:column="39"/></literal></expr>]<pos:position pos:line="55" pos:column="40"/></index></name></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="56" pos:column="3">h<pos:position pos:line="56" pos:column="4"/></name><operator pos:line="56" pos:column="4">-&gt;<pos:position pos:line="56" pos:column="9"/></operator><name pos:line="56" pos:column="6">h_addr_list<pos:position pos:line="56" pos:column="17"/></name><index pos:line="56" pos:column="17">[<expr><literal type="number" pos:line="56" pos:column="18">0<pos:position pos:line="56" pos:column="19"/></literal></expr>]<pos:position pos:line="56" pos:column="20"/></index></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <name pos:line="56" pos:column="23">addrentry<pos:position pos:line="56" pos:column="32"/></name></expr>;<pos:position pos:line="56" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="57" pos:column="3">h<pos:position pos:line="57" pos:column="4"/></name><operator pos:line="57" pos:column="4">-&gt;<pos:position pos:line="57" pos:column="9"/></operator><name pos:line="57" pos:column="6">h_addr_list<pos:position pos:line="57" pos:column="17"/></name><index pos:line="57" pos:column="17">[<expr><literal type="number" pos:line="57" pos:column="18">1<pos:position pos:line="57" pos:column="19"/></literal></expr>]<pos:position pos:line="57" pos:column="20"/></index></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <name pos:line="57" pos:column="23">NULL<pos:position pos:line="57" pos:column="27"/></name></expr>;<pos:position pos:line="57" pos:column="28"/></expr_stmt> <comment type="block" pos:line="57" pos:column="29">/* terminate list of entries */</comment>

<cpp:if pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">if<pos:position pos:line="59" pos:column="4"/></cpp:directive> <expr><call><name pos:line="59" pos:column="5">defined<pos:position pos:line="59" pos:column="12"/></name><argument_list pos:line="59" pos:column="12">(<argument><expr><name pos:line="59" pos:column="13">__VMS<pos:position pos:line="59" pos:column="18"/></name></expr></argument>)<pos:position pos:line="59" pos:column="19"/></argument_list></call> <operator pos:line="59" pos:column="20">&amp;&amp;<pos:position pos:line="59" pos:column="30"/></operator> \
    <call><name pos:line="60" pos:column="5">defined<pos:position pos:line="60" pos:column="12"/></name><argument_list pos:line="60" pos:column="12">(<argument><expr><name pos:line="60" pos:column="13">__INITIAL_POINTER_SIZE<pos:position pos:line="60" pos:column="35"/></name></expr></argument>)<pos:position pos:line="60" pos:column="36"/></argument_list></call> <operator pos:line="60" pos:column="37">&amp;&amp;<pos:position pos:line="60" pos:column="47"/></operator> <operator pos:line="60" pos:column="40">(<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="41">__INITIAL_POINTER_SIZE<pos:position pos:line="60" pos:column="63"/></name> <operator pos:line="60" pos:column="64">==<pos:position pos:line="60" pos:column="66"/></operator> <literal type="number" pos:line="60" pos:column="67">64<pos:position pos:line="60" pos:column="69"/></literal><operator pos:line="60" pos:column="69">)<pos:position pos:line="60" pos:column="70"/></operator></expr></cpp:if>
<cpp:pragma pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">pragma<pos:position pos:line="61" pos:column="8"/></cpp:directive> <name pos:line="61" pos:column="9">pointer_size<pos:position pos:line="61" pos:column="21"/></name> <name pos:line="61" pos:column="22">restore<pos:position pos:line="61" pos:column="29"/></name></cpp:pragma>
<cpp:pragma pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">pragma<pos:position pos:line="62" pos:column="8"/></cpp:directive> <name pos:line="62" pos:column="9">message<pos:position pos:line="62" pos:column="16"/></name> <name pos:line="62" pos:column="17">enable<pos:position pos:line="62" pos:column="23"/></name> <name pos:line="62" pos:column="24">PTRMISMATCH<pos:position pos:line="62" pos:column="35"/></name></cpp:pragma>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="65" pos:column="3">ai<pos:position pos:line="65" pos:column="5"/></name> <operator pos:line="65" pos:column="6">=<pos:position pos:line="65" pos:column="7"/></operator> <call><name pos:line="65" pos:column="8">Curl_he2ai<pos:position pos:line="65" pos:column="18"/></name><argument_list pos:line="65" pos:column="18">(<argument><expr><name pos:line="65" pos:column="19">h<pos:position pos:line="65" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="22">port<pos:position pos:line="65" pos:column="26"/></name></expr></argument>)<pos:position pos:line="65" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="67" pos:column="3">free<pos:position pos:line="67" pos:column="7"/></name><argument_list pos:line="67" pos:column="7">(<argument><expr><name pos:line="67" pos:column="8">hoststr<pos:position pos:line="67" pos:column="15"/></name></expr></argument>)<pos:position pos:line="67" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">free<pos:position pos:line="68" pos:column="7"/></name><argument_list pos:line="68" pos:column="7">(<argument><expr><name pos:line="68" pos:column="8">buf<pos:position pos:line="68" pos:column="11"/></name></expr></argument>)<pos:position pos:line="68" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="13"/></expr_stmt>

  <return pos:line="70" pos:column="3">return <expr><name pos:line="70" pos:column="10">ai<pos:position pos:line="70" pos:column="12"/></name></expr>;<pos:position pos:line="70" pos:column="13"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
