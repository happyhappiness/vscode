<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2464_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">schannel_connect_step3<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">connectdata<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">conn<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">sockindex<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">ssl_connect_data<pos:position pos:line="6" pos:column="26"/></name></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name pos:line="6" pos:column="28">connssl<pos:position pos:line="6" pos:column="35"/></name> <init pos:line="6" pos:column="36">= <expr><operator pos:line="6" pos:column="38">&amp;<pos:position pos:line="6" pos:column="43"/></operator><name><name pos:line="6" pos:column="39">conn<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">-&gt;<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="45">ssl<pos:position pos:line="6" pos:column="48"/></name><index pos:line="6" pos:column="48">[<expr><name pos:line="6" pos:column="49">sockindex<pos:position pos:line="6" pos:column="58"/></name></expr>]<pos:position pos:line="6" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">SECURITY_STATUS<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">sspi_status<pos:position pos:line="7" pos:column="30"/></name> <init pos:line="7" pos:column="31">= <expr><name pos:line="7" pos:column="33">SEC_E_OK<pos:position pos:line="7" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CERT_CONTEXT<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">ccert_context<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><name pos:line="8" pos:column="33">NULL<pos:position pos:line="8" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
<cpp:ifndef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifndef<pos:position pos:line="9" pos:column="8"/></cpp:directive> <name pos:line="9" pos:column="9">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="9" pos:column="37"/></name></cpp:ifndef>
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">const<pos:position pos:line="10" pos:column="8"/></specifier> <name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier> <specifier pos:line="10" pos:column="16">const<pos:position pos:line="10" pos:column="21"/></specifier></type> <name pos:line="10" pos:column="22">hostname<pos:position pos:line="10" pos:column="30"/></name> <init pos:line="10" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="10" pos:column="33">SSL_IS_PROXY<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">()<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="10" pos:column="49"/></condition><then pos:line="10" pos:column="49"> <expr><name><name pos:line="10" pos:column="50">conn<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">-&gt;<pos:position pos:line="10" pos:column="59"/></operator><name pos:line="10" pos:column="56">http_proxy<pos:position pos:line="10" pos:column="66"/></name><operator pos:line="10" pos:column="66">.<pos:position pos:line="10" pos:column="67"/></operator><name pos:line="10" pos:column="67">host<pos:position pos:line="10" pos:column="71"/></name><operator pos:line="10" pos:column="71">.<pos:position pos:line="10" pos:column="72"/></operator><name pos:line="10" pos:column="72">name<pos:position pos:line="10" pos:column="76"/></name></name></expr> <pos:position pos:line="10" pos:column="77"/></then><else pos:line="10" pos:column="77">:
    <expr><name><name pos:line="11" pos:column="5">conn<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">-&gt;<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="11">host<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">name<pos:position pos:line="11" pos:column="20"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">HAS_ALPN<pos:position pos:line="13" pos:column="16"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">SecPkgContext_ApplicationProtocol<pos:position pos:line="14" pos:column="36"/></name></type> <name pos:line="14" pos:column="37">alpn_result<pos:position pos:line="14" pos:column="48"/></name></decl>;<pos:position pos:line="14" pos:column="49"/></decl_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">DEBUGASSERT<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name pos:line="17" pos:column="15">ssl_connect_3<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">==<pos:position pos:line="17" pos:column="31"/></operator> <name><name pos:line="17" pos:column="32">connssl<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">connecting_state<pos:position pos:line="17" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">infof<pos:position pos:line="19" pos:column="8"/></name><argument_list pos:line="19" pos:column="8">(<argument><expr><name pos:line="19" pos:column="9">data<pos:position pos:line="19" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="15">"schannel: SSL/TLS connection with %s port %hu (step 3/3)\n"<pos:position pos:line="19" pos:column="75"/></literal></expr></argument>,
        <argument><expr><name pos:line="20" pos:column="9">hostname<pos:position pos:line="20" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="19">conn<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">remote_port<pos:position pos:line="20" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><operator pos:line="22" pos:column="6">!<pos:position pos:line="22" pos:column="7"/></operator><name><name pos:line="22" pos:column="7">BACKEND<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">-&gt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">cred<pos:position pos:line="22" pos:column="20"/></name></name></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21">
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="23" pos:column="35"/></name></expr>;<pos:position pos:line="23" pos:column="36"/></return></block></then></if>

  <comment type="block" pos:line="25" pos:column="3">/* check if the required context attributes are met */</comment>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name><name pos:line="26" pos:column="6">BACKEND<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">ret_flags<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">!=<pos:position pos:line="26" pos:column="27"/></operator> <name><name pos:line="26" pos:column="28">BACKEND<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">-&gt;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="37">req_flags<pos:position pos:line="26" pos:column="46"/></name></name></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <block pos:line="26" pos:column="48">{
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><operator pos:line="27" pos:column="8">!<pos:position pos:line="27" pos:column="9"/></operator><operator pos:line="27" pos:column="9">(<pos:position pos:line="27" pos:column="10"/></operator><name><name pos:line="27" pos:column="10">BACKEND<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">ret_flags<pos:position pos:line="27" pos:column="28"/></name></name> <operator pos:line="27" pos:column="29">&amp;<pos:position pos:line="27" pos:column="34"/></operator> <name pos:line="27" pos:column="31">ISC_RET_SEQUENCE_DETECT<pos:position pos:line="27" pos:column="54"/></name><operator pos:line="27" pos:column="54">)<pos:position pos:line="27" pos:column="55"/></operator></expr>)<pos:position pos:line="27" pos:column="56"/></condition><then pos:line="27" pos:column="56">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="7">failf<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">data<pos:position pos:line="28" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="19">"schannel: failed to setup sequence detection"<pos:position pos:line="28" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="67"/></expr_stmt></block></then></if>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><operator pos:line="29" pos:column="8">!<pos:position pos:line="29" pos:column="9"/></operator><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name><name pos:line="29" pos:column="10">BACKEND<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">ret_flags<pos:position pos:line="29" pos:column="28"/></name></name> <operator pos:line="29" pos:column="29">&amp;<pos:position pos:line="29" pos:column="34"/></operator> <name pos:line="29" pos:column="31">ISC_RET_REPLAY_DETECT<pos:position pos:line="29" pos:column="52"/></name><operator pos:line="29" pos:column="52">)<pos:position pos:line="29" pos:column="53"/></operator></expr>)<pos:position pos:line="29" pos:column="54"/></condition><then pos:line="29" pos:column="54">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="7">failf<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">data<pos:position pos:line="30" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="19">"schannel: failed to setup replay detection"<pos:position pos:line="30" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="65"/></expr_stmt></block></then></if>
    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><operator pos:line="31" pos:column="8">!<pos:position pos:line="31" pos:column="9"/></operator><operator pos:line="31" pos:column="9">(<pos:position pos:line="31" pos:column="10"/></operator><name><name pos:line="31" pos:column="10">BACKEND<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">-&gt;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="19">ret_flags<pos:position pos:line="31" pos:column="28"/></name></name> <operator pos:line="31" pos:column="29">&amp;<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="31">ISC_RET_CONFIDENTIALITY<pos:position pos:line="31" pos:column="54"/></name><operator pos:line="31" pos:column="54">)<pos:position pos:line="31" pos:column="55"/></operator></expr>)<pos:position pos:line="31" pos:column="56"/></condition><then pos:line="31" pos:column="56">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="7">failf<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">data<pos:position pos:line="32" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="19">"schannel: failed to setup confidentiality"<pos:position pos:line="32" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="64"/></expr_stmt></block></then></if>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><operator pos:line="33" pos:column="8">!<pos:position pos:line="33" pos:column="9"/></operator><operator pos:line="33" pos:column="9">(<pos:position pos:line="33" pos:column="10"/></operator><name><name pos:line="33" pos:column="10">BACKEND<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">ret_flags<pos:position pos:line="33" pos:column="28"/></name></name> <operator pos:line="33" pos:column="29">&amp;<pos:position pos:line="33" pos:column="34"/></operator> <name pos:line="33" pos:column="31">ISC_RET_ALLOCATED_MEMORY<pos:position pos:line="33" pos:column="55"/></name><operator pos:line="33" pos:column="55">)<pos:position pos:line="33" pos:column="56"/></operator></expr>)<pos:position pos:line="33" pos:column="57"/></condition><then pos:line="33" pos:column="57">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="7">failf<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">data<pos:position pos:line="34" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="19">"schannel: failed to setup memory allocation"<pos:position pos:line="34" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="66"/></expr_stmt></block></then></if>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><operator pos:line="35" pos:column="8">!<pos:position pos:line="35" pos:column="9"/></operator><operator pos:line="35" pos:column="9">(<pos:position pos:line="35" pos:column="10"/></operator><name><name pos:line="35" pos:column="10">BACKEND<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">ret_flags<pos:position pos:line="35" pos:column="28"/></name></name> <operator pos:line="35" pos:column="29">&amp;<pos:position pos:line="35" pos:column="34"/></operator> <name pos:line="35" pos:column="31">ISC_RET_STREAM<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">)<pos:position pos:line="35" pos:column="46"/></operator></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="7">failf<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">data<pos:position pos:line="36" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="19">"schannel: failed to setup stream orientation"<pos:position pos:line="36" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="67"/></expr_stmt></block></then></if>
    <return pos:line="37" pos:column="5">return <expr><name pos:line="37" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="37" pos:column="35"/></name></expr>;<pos:position pos:line="37" pos:column="36"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">HAS_ALPN<pos:position pos:line="40" pos:column="16"/></name></cpp:ifdef>
  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><name><name pos:line="41" pos:column="6">BACKEND<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">-&gt;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="15">use_alpn<pos:position pos:line="41" pos:column="23"/></name></name></expr>)<pos:position pos:line="41" pos:column="24"/></condition><then pos:line="41" pos:column="24"> <block pos:line="41" pos:column="25">{
    <expr_stmt><expr><name pos:line="42" pos:column="5">sspi_status<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <call><name><name pos:line="42" pos:column="19">s_pSecFn<pos:position pos:line="42" pos:column="27"/></name><operator pos:line="42" pos:column="27">-&gt;<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="29">QueryContextAttributes<pos:position pos:line="42" pos:column="51"/></name></name><argument_list pos:line="42" pos:column="51">(<argument><expr><operator pos:line="42" pos:column="52">&amp;<pos:position pos:line="42" pos:column="57"/></operator><name><name pos:line="42" pos:column="53">BACKEND<pos:position pos:line="42" pos:column="60"/></name><operator pos:line="42" pos:column="60">-&gt;<pos:position pos:line="42" pos:column="65"/></operator><name pos:line="42" pos:column="62">ctxt<pos:position pos:line="42" pos:column="66"/></name><operator pos:line="42" pos:column="66">-&gt;<pos:position pos:line="42" pos:column="71"/></operator><name pos:line="42" pos:column="68">ctxt_handle<pos:position pos:line="42" pos:column="79"/></name></name></expr></argument>,
      <argument><expr><name pos:line="43" pos:column="7">SECPKG_ATTR_APPLICATION_PROTOCOL<pos:position pos:line="43" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="41">&amp;<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="42">alpn_result<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="55"/></expr_stmt>

    <if pos:line="45" pos:column="5">if<condition pos:line="45" pos:column="7">(<expr><name pos:line="45" pos:column="8">sspi_status<pos:position pos:line="45" pos:column="19"/></name> <operator pos:line="45" pos:column="20">!=<pos:position pos:line="45" pos:column="22"/></operator> <name pos:line="45" pos:column="23">SEC_E_OK<pos:position pos:line="45" pos:column="31"/></name></expr>)<pos:position pos:line="45" pos:column="32"/></condition><then pos:line="45" pos:column="32"> <block pos:line="45" pos:column="33">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">failf<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">data<pos:position pos:line="46" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="19">"schannel: failed to retrieve ALPN result"<pos:position pos:line="46" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="63"/></expr_stmt>
      <return pos:line="47" pos:column="7">return <expr><name pos:line="47" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="47" pos:column="37"/></name></expr>;<pos:position pos:line="47" pos:column="38"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><name><name pos:line="50" pos:column="8">alpn_result<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">.<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">ProtoNegoStatus<pos:position pos:line="50" pos:column="35"/></name></name> <operator pos:line="50" pos:column="36">==<pos:position pos:line="50" pos:column="38"/></operator>
       <name pos:line="51" pos:column="8">SecApplicationProtocolNegotiationStatus_Success<pos:position pos:line="51" pos:column="55"/></name></expr>)<pos:position pos:line="51" pos:column="56"/></condition><then pos:line="51" pos:column="56"> <block pos:line="51" pos:column="57">{

      <expr_stmt><expr><call><name pos:line="53" pos:column="7">infof<pos:position pos:line="53" pos:column="12"/></name><argument_list pos:line="53" pos:column="12">(<argument><expr><name pos:line="53" pos:column="13">data<pos:position pos:line="53" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="19">"schannel: ALPN, server accepted to use %.*s\n"<pos:position pos:line="53" pos:column="66"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="54" pos:column="9">alpn_result<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">.<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="21">ProtocolIdSize<pos:position pos:line="54" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="37">alpn_result<pos:position pos:line="54" pos:column="48"/></name><operator pos:line="54" pos:column="48">.<pos:position pos:line="54" pos:column="49"/></operator><name pos:line="54" pos:column="49">ProtocolId<pos:position pos:line="54" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt>

<cpp:ifdef pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">ifdef<pos:position pos:line="56" pos:column="7"/></cpp:directive> <name pos:line="56" pos:column="8">USE_NGHTTP2<pos:position pos:line="56" pos:column="19"/></name></cpp:ifdef>
      <if pos:line="57" pos:column="7">if<condition pos:line="57" pos:column="9">(<expr><name><name pos:line="57" pos:column="10">alpn_result<pos:position pos:line="57" pos:column="21"/></name><operator pos:line="57" pos:column="21">.<pos:position pos:line="57" pos:column="22"/></operator><name pos:line="57" pos:column="22">ProtocolIdSize<pos:position pos:line="57" pos:column="36"/></name></name> <operator pos:line="57" pos:column="37">==<pos:position pos:line="57" pos:column="39"/></operator> <name pos:line="57" pos:column="40">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="57" pos:column="68"/></name> <operator pos:line="57" pos:column="69">&amp;&amp;<pos:position pos:line="57" pos:column="79"/></operator>
         <operator pos:line="58" pos:column="10">!<pos:position pos:line="58" pos:column="11"/></operator><call><name pos:line="58" pos:column="11">memcmp<pos:position pos:line="58" pos:column="17"/></name><argument_list pos:line="58" pos:column="17">(<argument><expr><name pos:line="58" pos:column="18">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="58" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="44">alpn_result<pos:position pos:line="58" pos:column="55"/></name><operator pos:line="58" pos:column="55">.<pos:position pos:line="58" pos:column="56"/></operator><name pos:line="58" pos:column="56">ProtocolId<pos:position pos:line="58" pos:column="66"/></name></name></expr></argument>,
          <argument><expr><name pos:line="59" pos:column="11">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="59" pos:column="39"/></name></expr></argument>)<pos:position pos:line="59" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="41"/></condition><then pos:line="59" pos:column="41"> <block pos:line="59" pos:column="42">{
        <expr_stmt><expr><name><name pos:line="60" pos:column="9">conn<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">-&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">negnpn<pos:position pos:line="60" pos:column="21"/></name></name> <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">CURL_HTTP_VERSION_2<pos:position pos:line="60" pos:column="43"/></name></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="61" pos:column="8"/></block></then>
      <elseif pos:line="62" pos:column="7">else
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
      <if pos:line="64" pos:column="7">if<condition pos:line="64" pos:column="9">(<expr><name><name pos:line="64" pos:column="10">alpn_result<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">.<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="22">ProtocolIdSize<pos:position pos:line="64" pos:column="36"/></name></name> <operator pos:line="64" pos:column="37">==<pos:position pos:line="64" pos:column="39"/></operator> <name pos:line="64" pos:column="40">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="64" pos:column="60"/></name> <operator pos:line="64" pos:column="61">&amp;&amp;<pos:position pos:line="64" pos:column="71"/></operator>
         <operator pos:line="65" pos:column="10">!<pos:position pos:line="65" pos:column="11"/></operator><call><name pos:line="65" pos:column="11">memcmp<pos:position pos:line="65" pos:column="17"/></name><argument_list pos:line="65" pos:column="17">(<argument><expr><name pos:line="65" pos:column="18">ALPN_HTTP_1_1<pos:position pos:line="65" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="33">alpn_result<pos:position pos:line="65" pos:column="44"/></name><operator pos:line="65" pos:column="44">.<pos:position pos:line="65" pos:column="45"/></operator><name pos:line="65" pos:column="45">ProtocolId<pos:position pos:line="65" pos:column="55"/></name></name></expr></argument>,
           <argument><expr><name pos:line="66" pos:column="12">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="66" pos:column="32"/></name></expr></argument>)<pos:position pos:line="66" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="34"/></condition><then pos:line="66" pos:column="34"> <block pos:line="66" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="67" pos:column="9">conn<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">-&gt;<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="15">negnpn<pos:position pos:line="67" pos:column="21"/></name></name> <operator pos:line="67" pos:column="22">=<pos:position pos:line="67" pos:column="23"/></operator> <name pos:line="67" pos:column="24">CURL_HTTP_VERSION_1_1<pos:position pos:line="67" pos:column="45"/></name></expr>;<pos:position pos:line="67" pos:column="46"/></expr_stmt>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then>
    <else pos:line="70" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="7">infof<pos:position pos:line="71" pos:column="12"/></name><argument_list pos:line="71" pos:column="12">(<argument><expr><name pos:line="71" pos:column="13">data<pos:position pos:line="71" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="19">"ALPN, server did not agree to a protocol\n"<pos:position pos:line="71" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="65"/></expr_stmt></block></else></if>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="75" pos:column="3">/* save the current session data for possible re-use */</comment>
  <if pos:line="76" pos:column="3">if<condition pos:line="76" pos:column="5">(<expr><call><name pos:line="76" pos:column="6">SSL_SET_OPTION<pos:position pos:line="76" pos:column="20"/></name><argument_list pos:line="76" pos:column="20">(<argument><expr><name><name pos:line="76" pos:column="21">primary<pos:position pos:line="76" pos:column="28"/></name><operator pos:line="76" pos:column="28">.<pos:position pos:line="76" pos:column="29"/></operator><name pos:line="76" pos:column="29">sessionid<pos:position pos:line="76" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="40"/></condition><then pos:line="76" pos:column="40"> <block pos:line="76" pos:column="41">{
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">bool<pos:position pos:line="77" pos:column="9"/></name></type> <name pos:line="77" pos:column="10">incache<pos:position pos:line="77" pos:column="17"/></name></decl>;<pos:position pos:line="77" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="78" pos:column="5">struct<pos:position pos:line="78" pos:column="11"/></name> <name pos:line="78" pos:column="12">curl_schannel_cred<pos:position pos:line="78" pos:column="30"/></name></name> <modifier pos:line="78" pos:column="31">*<pos:position pos:line="78" pos:column="32"/></modifier></type><name pos:line="78" pos:column="32">old_cred<pos:position pos:line="78" pos:column="40"/></name> <init pos:line="78" pos:column="41">= <expr><name pos:line="78" pos:column="43">NULL<pos:position pos:line="78" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="78" pos:column="48"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="80" pos:column="5">Curl_ssl_sessionid_lock<pos:position pos:line="80" pos:column="28"/></name><argument_list pos:line="80" pos:column="28">(<argument><expr><name pos:line="80" pos:column="29">conn<pos:position pos:line="80" pos:column="33"/></name></expr></argument>)<pos:position pos:line="80" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="81" pos:column="5">incache<pos:position pos:line="81" pos:column="12"/></name> <operator pos:line="81" pos:column="13">=<pos:position pos:line="81" pos:column="14"/></operator> <operator pos:line="81" pos:column="15">!<pos:position pos:line="81" pos:column="16"/></operator><operator pos:line="81" pos:column="16">(<pos:position pos:line="81" pos:column="17"/></operator><call><name pos:line="81" pos:column="17">Curl_ssl_getsessionid<pos:position pos:line="81" pos:column="38"/></name><argument_list pos:line="81" pos:column="38">(<argument><expr><name pos:line="81" pos:column="39">conn<pos:position pos:line="81" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="45">(<pos:position pos:line="81" pos:column="46"/></operator><name pos:line="81" pos:column="46">void<pos:position pos:line="81" pos:column="50"/></name> <operator pos:line="81" pos:column="51">*<pos:position pos:line="81" pos:column="52"/></operator><operator pos:line="81" pos:column="52">*<pos:position pos:line="81" pos:column="53"/></operator><operator pos:line="81" pos:column="53">)<pos:position pos:line="81" pos:column="54"/></operator><operator pos:line="81" pos:column="54">&amp;<pos:position pos:line="81" pos:column="59"/></operator><name pos:line="81" pos:column="55">old_cred<pos:position pos:line="81" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="65">NULL<pos:position pos:line="81" pos:column="69"/></name></expr></argument>,
                                      <argument><expr><name pos:line="82" pos:column="39">sockindex<pos:position pos:line="82" pos:column="48"/></name></expr></argument>)<pos:position pos:line="82" pos:column="49"/></argument_list></call><operator pos:line="82" pos:column="49">)<pos:position pos:line="82" pos:column="50"/></operator></expr>;<pos:position pos:line="82" pos:column="51"/></expr_stmt>
    <if pos:line="83" pos:column="5">if<condition pos:line="83" pos:column="7">(<expr><name pos:line="83" pos:column="8">incache<pos:position pos:line="83" pos:column="15"/></name></expr>)<pos:position pos:line="83" pos:column="16"/></condition><then pos:line="83" pos:column="16"> <block pos:line="83" pos:column="17">{
      <if pos:line="84" pos:column="7">if<condition pos:line="84" pos:column="9">(<expr><name pos:line="84" pos:column="10">old_cred<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">!=<pos:position pos:line="84" pos:column="21"/></operator> <name><name pos:line="84" pos:column="22">BACKEND<pos:position pos:line="84" pos:column="29"/></name><operator pos:line="84" pos:column="29">-&gt;<pos:position pos:line="84" pos:column="34"/></operator><name pos:line="84" pos:column="31">cred<pos:position pos:line="84" pos:column="35"/></name></name></expr>)<pos:position pos:line="84" pos:column="36"/></condition><then pos:line="84" pos:column="36"> <block pos:line="84" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">infof<pos:position pos:line="85" pos:column="14"/></name><argument_list pos:line="85" pos:column="14">(<argument><expr><name pos:line="85" pos:column="15">data<pos:position pos:line="85" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="21">"schannel: old credential handle is stale, removing\n"<pos:position pos:line="85" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="77"/></expr_stmt>
        <comment type="block" pos:line="86" pos:column="9">/* we're not taking old_cred ownership here, no refcount++ is needed */</comment>
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">Curl_ssl_delsessionid<pos:position pos:line="87" pos:column="30"/></name><argument_list pos:line="87" pos:column="30">(<argument><expr><name pos:line="87" pos:column="31">conn<pos:position pos:line="87" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="37">(<pos:position pos:line="87" pos:column="38"/></operator><name pos:line="87" pos:column="38">void<pos:position pos:line="87" pos:column="42"/></name> <operator pos:line="87" pos:column="43">*<pos:position pos:line="87" pos:column="44"/></operator><operator pos:line="87" pos:column="44">)<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="45">old_cred<pos:position pos:line="87" pos:column="53"/></name></expr></argument>)<pos:position pos:line="87" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="88" pos:column="9">incache<pos:position pos:line="88" pos:column="16"/></name> <operator pos:line="88" pos:column="17">=<pos:position pos:line="88" pos:column="18"/></operator> <name pos:line="88" pos:column="19">FALSE<pos:position pos:line="88" pos:column="24"/></name></expr>;<pos:position pos:line="88" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="89" pos:column="8"/></block></then></if>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>
    <if pos:line="91" pos:column="5">if<condition pos:line="91" pos:column="7">(<expr><operator pos:line="91" pos:column="8">!<pos:position pos:line="91" pos:column="9"/></operator><name pos:line="91" pos:column="9">incache<pos:position pos:line="91" pos:column="16"/></name></expr>)<pos:position pos:line="91" pos:column="17"/></condition><then pos:line="91" pos:column="17"> <block pos:line="91" pos:column="18">{
      <expr_stmt><expr><name pos:line="92" pos:column="7">result<pos:position pos:line="92" pos:column="13"/></name> <operator pos:line="92" pos:column="14">=<pos:position pos:line="92" pos:column="15"/></operator> <call><name pos:line="92" pos:column="16">Curl_ssl_addsessionid<pos:position pos:line="92" pos:column="37"/></name><argument_list pos:line="92" pos:column="37">(<argument><expr><name pos:line="92" pos:column="38">conn<pos:position pos:line="92" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="44">(<pos:position pos:line="92" pos:column="45"/></operator><name pos:line="92" pos:column="45">void<pos:position pos:line="92" pos:column="49"/></name> <operator pos:line="92" pos:column="50">*<pos:position pos:line="92" pos:column="51"/></operator><operator pos:line="92" pos:column="51">)<pos:position pos:line="92" pos:column="52"/></operator><name><name pos:line="92" pos:column="52">BACKEND<pos:position pos:line="92" pos:column="59"/></name><operator pos:line="92" pos:column="59">-&gt;<pos:position pos:line="92" pos:column="64"/></operator><name pos:line="92" pos:column="61">cred<pos:position pos:line="92" pos:column="65"/></name></name></expr></argument>,
                                     <argument><expr><sizeof pos:line="93" pos:column="38">sizeof<argument_list pos:line="93" pos:column="44">(<argument><expr pos:line="93" pos:column="45">struct <name pos:line="93" pos:column="52">curl_schannel_cred<pos:position pos:line="93" pos:column="70"/></name></expr></argument>)<pos:position pos:line="93" pos:column="71"/></argument_list></sizeof></expr></argument>,
                                     <argument><expr><name pos:line="94" pos:column="38">sockindex<pos:position pos:line="94" pos:column="47"/></name></expr></argument>)<pos:position pos:line="94" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="49"/></expr_stmt>
      <if pos:line="95" pos:column="7">if<condition pos:line="95" pos:column="9">(<expr><name pos:line="95" pos:column="10">result<pos:position pos:line="95" pos:column="16"/></name></expr>)<pos:position pos:line="95" pos:column="17"/></condition><then pos:line="95" pos:column="17"> <block pos:line="95" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">Curl_ssl_sessionid_unlock<pos:position pos:line="96" pos:column="34"/></name><argument_list pos:line="96" pos:column="34">(<argument><expr><name pos:line="96" pos:column="35">conn<pos:position pos:line="96" pos:column="39"/></name></expr></argument>)<pos:position pos:line="96" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">failf<pos:position pos:line="97" pos:column="14"/></name><argument_list pos:line="97" pos:column="14">(<argument><expr><name pos:line="97" pos:column="15">data<pos:position pos:line="97" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="21">"schannel: failed to store credential handle"<pos:position pos:line="97" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="68"/></expr_stmt>
        <return pos:line="98" pos:column="9">return <expr><name pos:line="98" pos:column="16">result<pos:position pos:line="98" pos:column="22"/></name></expr>;<pos:position pos:line="98" pos:column="23"/></return>
      }<pos:position pos:line="99" pos:column="8"/></block></then>
      <else pos:line="100" pos:column="7">else <block pos:line="100" pos:column="12">{
        <comment type="block" pos:line="101" pos:column="9">/* this cred session is now also referenced by sessionid cache */</comment>
        <expr_stmt><expr><name><name pos:line="102" pos:column="9">BACKEND<pos:position pos:line="102" pos:column="16"/></name><operator pos:line="102" pos:column="16">-&gt;<pos:position pos:line="102" pos:column="21"/></operator><name pos:line="102" pos:column="18">cred<pos:position pos:line="102" pos:column="22"/></name><operator pos:line="102" pos:column="22">-&gt;<pos:position pos:line="102" pos:column="27"/></operator><name pos:line="102" pos:column="24">refcount<pos:position pos:line="102" pos:column="32"/></name></name><operator pos:line="102" pos:column="32">++<pos:position pos:line="102" pos:column="34"/></operator></expr>;<pos:position pos:line="102" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="103" pos:column="9">infof<pos:position pos:line="103" pos:column="14"/></name><argument_list pos:line="103" pos:column="14">(<argument><expr><name pos:line="103" pos:column="15">data<pos:position pos:line="103" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="21">"schannel: stored credential handle in session cache\n"<pos:position pos:line="103" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="78"/></expr_stmt>
      }<pos:position pos:line="104" pos:column="8"/></block></else></if>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="106" pos:column="5">Curl_ssl_sessionid_unlock<pos:position pos:line="106" pos:column="30"/></name><argument_list pos:line="106" pos:column="30">(<argument><expr><name pos:line="106" pos:column="31">conn<pos:position pos:line="106" pos:column="35"/></name></expr></argument>)<pos:position pos:line="106" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="107" pos:column="4"/></block></then></if>

  <if pos:line="109" pos:column="3">if<condition pos:line="109" pos:column="5">(<expr><name><name pos:line="109" pos:column="6">data<pos:position pos:line="109" pos:column="10"/></name><operator pos:line="109" pos:column="10">-&gt;<pos:position pos:line="109" pos:column="15"/></operator><name pos:line="109" pos:column="12">set<pos:position pos:line="109" pos:column="15"/></name><operator pos:line="109" pos:column="15">.<pos:position pos:line="109" pos:column="16"/></operator><name pos:line="109" pos:column="16">ssl<pos:position pos:line="109" pos:column="19"/></name><operator pos:line="109" pos:column="19">.<pos:position pos:line="109" pos:column="20"/></operator><name pos:line="109" pos:column="20">certinfo<pos:position pos:line="109" pos:column="28"/></name></name></expr>)<pos:position pos:line="109" pos:column="29"/></condition><then pos:line="109" pos:column="29"> <block pos:line="109" pos:column="30">{
    <expr_stmt><expr><name pos:line="110" pos:column="5">sspi_status<pos:position pos:line="110" pos:column="16"/></name> <operator pos:line="110" pos:column="17">=<pos:position pos:line="110" pos:column="18"/></operator> <call><name><name pos:line="110" pos:column="19">s_pSecFn<pos:position pos:line="110" pos:column="27"/></name><operator pos:line="110" pos:column="27">-&gt;<pos:position pos:line="110" pos:column="32"/></operator><name pos:line="110" pos:column="29">QueryContextAttributes<pos:position pos:line="110" pos:column="51"/></name></name><argument_list pos:line="110" pos:column="51">(<argument><expr><operator pos:line="110" pos:column="52">&amp;<pos:position pos:line="110" pos:column="57"/></operator><name><name pos:line="110" pos:column="53">BACKEND<pos:position pos:line="110" pos:column="60"/></name><operator pos:line="110" pos:column="60">-&gt;<pos:position pos:line="110" pos:column="65"/></operator><name pos:line="110" pos:column="62">ctxt<pos:position pos:line="110" pos:column="66"/></name><operator pos:line="110" pos:column="66">-&gt;<pos:position pos:line="110" pos:column="71"/></operator><name pos:line="110" pos:column="68">ctxt_handle<pos:position pos:line="110" pos:column="79"/></name></name></expr></argument>,
      <argument><expr><name pos:line="111" pos:column="7">SECPKG_ATTR_REMOTE_CERT_CONTEXT<pos:position pos:line="111" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="40">&amp;<pos:position pos:line="111" pos:column="45"/></operator><name pos:line="111" pos:column="41">ccert_context<pos:position pos:line="111" pos:column="54"/></name></expr></argument>)<pos:position pos:line="111" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="56"/></expr_stmt>

    <if pos:line="113" pos:column="5">if<condition pos:line="113" pos:column="7">(<expr><operator pos:line="113" pos:column="8">(<pos:position pos:line="113" pos:column="9"/></operator><name pos:line="113" pos:column="9">sspi_status<pos:position pos:line="113" pos:column="20"/></name> <operator pos:line="113" pos:column="21">!=<pos:position pos:line="113" pos:column="23"/></operator> <name pos:line="113" pos:column="24">SEC_E_OK<pos:position pos:line="113" pos:column="32"/></name><operator pos:line="113" pos:column="32">)<pos:position pos:line="113" pos:column="33"/></operator> <operator pos:line="113" pos:column="34">||<pos:position pos:line="113" pos:column="36"/></operator> <operator pos:line="113" pos:column="37">(<pos:position pos:line="113" pos:column="38"/></operator><name pos:line="113" pos:column="38">ccert_context<pos:position pos:line="113" pos:column="51"/></name> <operator pos:line="113" pos:column="52">==<pos:position pos:line="113" pos:column="54"/></operator> <name pos:line="113" pos:column="55">NULL<pos:position pos:line="113" pos:column="59"/></name><operator pos:line="113" pos:column="59">)<pos:position pos:line="113" pos:column="60"/></operator></expr>)<pos:position pos:line="113" pos:column="61"/></condition><then pos:line="113" pos:column="61"> <block pos:line="113" pos:column="62">{
      <expr_stmt><expr><call><name pos:line="114" pos:column="7">failf<pos:position pos:line="114" pos:column="12"/></name><argument_list pos:line="114" pos:column="12">(<argument><expr><name pos:line="114" pos:column="13">data<pos:position pos:line="114" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="19">"schannel: failed to retrieve remote cert context"<pos:position pos:line="114" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="71"/></expr_stmt>
      <return pos:line="115" pos:column="7">return <expr><name pos:line="115" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="115" pos:column="37"/></name></expr>;<pos:position pos:line="115" pos:column="38"/></return>
    }<pos:position pos:line="116" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="118" pos:column="5">result<pos:position pos:line="118" pos:column="11"/></name> <operator pos:line="118" pos:column="12">=<pos:position pos:line="118" pos:column="13"/></operator> <call><name pos:line="118" pos:column="14">Curl_ssl_init_certinfo<pos:position pos:line="118" pos:column="36"/></name><argument_list pos:line="118" pos:column="36">(<argument><expr><name pos:line="118" pos:column="37">data<pos:position pos:line="118" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="118" pos:column="43">1<pos:position pos:line="118" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="46"/></expr_stmt>
    <if pos:line="119" pos:column="5">if<condition pos:line="119" pos:column="7">(<expr><operator pos:line="119" pos:column="8">!<pos:position pos:line="119" pos:column="9"/></operator><name pos:line="119" pos:column="9">result<pos:position pos:line="119" pos:column="15"/></name></expr>)<pos:position pos:line="119" pos:column="16"/></condition><then pos:line="119" pos:column="16"> <block pos:line="119" pos:column="17">{
      <if pos:line="120" pos:column="7">if<condition pos:line="120" pos:column="9">(<expr><operator pos:line="120" pos:column="10">(<pos:position pos:line="120" pos:column="11"/></operator><operator pos:line="120" pos:column="11">(<pos:position pos:line="120" pos:column="12"/></operator><name><name pos:line="120" pos:column="12">ccert_context<pos:position pos:line="120" pos:column="25"/></name><operator pos:line="120" pos:column="25">-&gt;<pos:position pos:line="120" pos:column="30"/></operator><name pos:line="120" pos:column="27">dwCertEncodingType<pos:position pos:line="120" pos:column="45"/></name></name> <operator pos:line="120" pos:column="46">&amp;<pos:position pos:line="120" pos:column="51"/></operator> <name pos:line="120" pos:column="48">X509_ASN_ENCODING<pos:position pos:line="120" pos:column="65"/></name><operator pos:line="120" pos:column="65">)<pos:position pos:line="120" pos:column="66"/></operator> <operator pos:line="120" pos:column="67">!=<pos:position pos:line="120" pos:column="69"/></operator> <literal type="number" pos:line="120" pos:column="70">0<pos:position pos:line="120" pos:column="71"/></literal><operator pos:line="120" pos:column="71">)<pos:position pos:line="120" pos:column="72"/></operator> <operator pos:line="120" pos:column="73">&amp;&amp;<pos:position pos:line="120" pos:column="83"/></operator>
         <operator pos:line="121" pos:column="10">(<pos:position pos:line="121" pos:column="11"/></operator><name><name pos:line="121" pos:column="11">ccert_context<pos:position pos:line="121" pos:column="24"/></name><operator pos:line="121" pos:column="24">-&gt;<pos:position pos:line="121" pos:column="29"/></operator><name pos:line="121" pos:column="26">cbCertEncoded<pos:position pos:line="121" pos:column="39"/></name></name> <operator pos:line="121" pos:column="40">&gt;<pos:position pos:line="121" pos:column="44"/></operator> <literal type="number" pos:line="121" pos:column="42">0<pos:position pos:line="121" pos:column="43"/></literal><operator pos:line="121" pos:column="43">)<pos:position pos:line="121" pos:column="44"/></operator></expr>)<pos:position pos:line="121" pos:column="45"/></condition><then pos:line="121" pos:column="45"> <block pos:line="121" pos:column="46">{

        <decl_stmt><decl><type><specifier pos:line="123" pos:column="9">const<pos:position pos:line="123" pos:column="14"/></specifier> <name pos:line="123" pos:column="15">char<pos:position pos:line="123" pos:column="19"/></name> <modifier pos:line="123" pos:column="20">*<pos:position pos:line="123" pos:column="21"/></modifier></type><name pos:line="123" pos:column="21">beg<pos:position pos:line="123" pos:column="24"/></name> <init pos:line="123" pos:column="25">= <expr><operator pos:line="123" pos:column="27">(<pos:position pos:line="123" pos:column="28"/></operator><specifier pos:line="123" pos:column="28">const<pos:position pos:line="123" pos:column="33"/></specifier> <name pos:line="123" pos:column="34">char<pos:position pos:line="123" pos:column="38"/></name> <operator pos:line="123" pos:column="39">*<pos:position pos:line="123" pos:column="40"/></operator><operator pos:line="123" pos:column="40">)<pos:position pos:line="123" pos:column="41"/></operator> <name><name pos:line="123" pos:column="42">ccert_context<pos:position pos:line="123" pos:column="55"/></name><operator pos:line="123" pos:column="55">-&gt;<pos:position pos:line="123" pos:column="60"/></operator><name pos:line="123" pos:column="57">pbCertEncoded<pos:position pos:line="123" pos:column="70"/></name></name></expr></init></decl>;<pos:position pos:line="123" pos:column="71"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="124" pos:column="9">const<pos:position pos:line="124" pos:column="14"/></specifier> <name pos:line="124" pos:column="15">char<pos:position pos:line="124" pos:column="19"/></name> <modifier pos:line="124" pos:column="20">*<pos:position pos:line="124" pos:column="21"/></modifier></type><name pos:line="124" pos:column="21">end<pos:position pos:line="124" pos:column="24"/></name> <init pos:line="124" pos:column="25">= <expr><name pos:line="124" pos:column="27">beg<pos:position pos:line="124" pos:column="30"/></name> <operator pos:line="124" pos:column="31">+<pos:position pos:line="124" pos:column="32"/></operator> <name><name pos:line="124" pos:column="33">ccert_context<pos:position pos:line="124" pos:column="46"/></name><operator pos:line="124" pos:column="46">-&gt;<pos:position pos:line="124" pos:column="51"/></operator><name pos:line="124" pos:column="48">cbCertEncoded<pos:position pos:line="124" pos:column="61"/></name></name></expr></init></decl>;<pos:position pos:line="124" pos:column="62"/></decl_stmt>
        <expr_stmt><expr><name pos:line="125" pos:column="9">result<pos:position pos:line="125" pos:column="15"/></name> <operator pos:line="125" pos:column="16">=<pos:position pos:line="125" pos:column="17"/></operator> <call><name pos:line="125" pos:column="18">Curl_extract_certinfo<pos:position pos:line="125" pos:column="39"/></name><argument_list pos:line="125" pos:column="39">(<argument><expr><name pos:line="125" pos:column="40">conn<pos:position pos:line="125" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="46">0<pos:position pos:line="125" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="49">beg<pos:position pos:line="125" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="54">end<pos:position pos:line="125" pos:column="57"/></name></expr></argument>)<pos:position pos:line="125" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="59"/></expr_stmt>
      }<pos:position pos:line="126" pos:column="8"/></block></then></if>
    }<pos:position pos:line="127" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="128" pos:column="5">CertFreeCertificateContext<pos:position pos:line="128" pos:column="31"/></name><argument_list pos:line="128" pos:column="31">(<argument><expr><name pos:line="128" pos:column="32">ccert_context<pos:position pos:line="128" pos:column="45"/></name></expr></argument>)<pos:position pos:line="128" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="47"/></expr_stmt>
    <if pos:line="129" pos:column="5">if<condition pos:line="129" pos:column="7">(<expr><name pos:line="129" pos:column="8">result<pos:position pos:line="129" pos:column="14"/></name></expr>)<pos:position pos:line="129" pos:column="15"/></condition><then pos:line="129" pos:column="15">
      <block type="pseudo"><return pos:line="130" pos:column="7">return <expr><name pos:line="130" pos:column="14">result<pos:position pos:line="130" pos:column="20"/></name></expr>;<pos:position pos:line="130" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="131" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="133" pos:column="3">connssl<pos:position pos:line="133" pos:column="10"/></name><operator pos:line="133" pos:column="10">-&gt;<pos:position pos:line="133" pos:column="15"/></operator><name pos:line="133" pos:column="12">connecting_state<pos:position pos:line="133" pos:column="28"/></name></name> <operator pos:line="133" pos:column="29">=<pos:position pos:line="133" pos:column="30"/></operator> <name pos:line="133" pos:column="31">ssl_connect_done<pos:position pos:line="133" pos:column="47"/></name></expr>;<pos:position pos:line="133" pos:column="48"/></expr_stmt>

  <return pos:line="135" pos:column="3">return <expr><name pos:line="135" pos:column="10">CURLE_OK<pos:position pos:line="135" pos:column="18"/></name></expr>;<pos:position pos:line="135" pos:column="19"/></return>
}<pos:position pos:line="136" pos:column="2"/></block></function></unit>
