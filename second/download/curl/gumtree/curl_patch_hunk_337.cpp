  fputs(
 "              filename.  Data is posted in a similar  manner  as  --data-ascii\n"
 "              does,  except  that  newlines  are preserved and conversions are\n"
 "              never done.\n"
 "\n"
 "              If this option is used several times,  the  ones  following  the\n"
-"              first will append data. As described in -d/--data.\n"
+"              first will append data as described in -d/--data.\n"
 "\n"
 "       --data-urlencode <data>\n"
 "              (HTTP) This posts data, similar to the other --data options with\n"
 , stdout);
  fputs(
-"              the exception that this performs URL encoding. (Added in 7.18.0)\n"
-"              To  be  CGI  compliant, the <data> part should begin with a name\n"
+"              the exception that this performs URL-encoding. (Added in 7.18.0)\n"
+"              To  be  CGI-compliant,  the <data> part should begin with a name\n"
 "              followed by a separator and a content specification. The  <data>\n"
 "              part can be passed to curl using one of the following syntaxes:\n"
 "\n"
 "              content\n"
-"                     This  will make curl URL encode the content and pass that\n"
+"                     This  will make curl URL-encode the content and pass that\n"
 "                     on. Just be careful so that the content  doesn't  contain\n"
 , stdout);
  fputs(
 "                     any  =  or  @  letters, as that will then make the syntax\n"
 "                     match one of the other cases below!\n"
 "\n"
 "              =content\n"
-"                     This will make curl URL encode the content and pass  that\n"
+"                     This will make curl URL-encode the content and pass  that\n"
 "                     on. The preceding = letter is not included in the data.\n"
 "\n"
 "              name=content\n"
-"                     This  will make curl URL encode the content part and pass\n"
+"                     This  will make curl URL-encode the content part and pass\n"
 , stdout);
  fputs(
-"                     that on. Note that the name part is expected  to  be  URL\n"
+"                     that on. Note that the name part is expected to  be  URL-\n"
 "                     encoded already.\n"
 "\n"
 "              @filename\n"
 "                     This  will  make  curl  load  data  from  the  given file\n"
-"                     (including any newlines), URL encode that data  and  pass\n"
+"                     (including any newlines), URL-encode that data  and  pass\n"
 "                     it on in the POST.\n"
 "\n"
 "              name@filename\n"
 "                     This  will  make  curl  load  data  from  the  given file\n"
 , stdout);
  fputs(
-"                     (including any newlines), URL encode that data  and  pass\n"
+"                     (including any newlines), URL-encode that data  and  pass\n"
 "                     it  on  in  the  POST.  The  name part gets an equal sign\n"
 "                     appended, resulting in name=urlencoded-file-content. Note\n"
-"                     that the name is expected to be URL encoded already.\n"
+"                     that the name is expected to be URL-encoded already.\n"
 "\n"
 "       --digest\n"
 "              (HTTP) Enables HTTP Digest authentication. This is a authentica-\n"
 "              tion that prevents the password from being sent over the wire in\n"
 , stdout);
  fputs(
