<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1005_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">_ldap_url_parse2<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">LDAPURLDesc<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">ludp<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">p<pos:position pos:line="3" pos:column="10"/></name></decl>, <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="13">q<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">i<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>

  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><operator pos:line="6" pos:column="6">!<pos:position pos:line="6" pos:column="7"/></operator><name><name pos:line="6" pos:column="7">conn<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">data<pos:position pos:line="6" pos:column="17"/></name></name> <operator pos:line="6" pos:column="18">||<pos:position pos:line="6" pos:column="20"/></operator>
      <operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name><name pos:line="7" pos:column="8">conn<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">data<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">-&gt;<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="20">state<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">.<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="26">path<pos:position pos:line="7" pos:column="30"/></name></name> <operator pos:line="7" pos:column="31">||<pos:position pos:line="7" pos:column="33"/></operator>
      <name><name pos:line="8" pos:column="7">conn<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">-&gt;<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="13">data<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">state<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">.<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">path<pos:position pos:line="8" pos:column="29"/></name><index pos:line="8" pos:column="29">[<expr><literal type="number" pos:line="8" pos:column="30">0<pos:position pos:line="8" pos:column="31"/></literal></expr>]<pos:position pos:line="8" pos:column="32"/></index></name> <operator pos:line="8" pos:column="33">!=<pos:position pos:line="8" pos:column="35"/></operator> <literal type="char" pos:line="8" pos:column="36">'/'<pos:position pos:line="8" pos:column="39"/></literal> <operator pos:line="8" pos:column="40">||<pos:position pos:line="8" pos:column="42"/></operator>
      <operator pos:line="9" pos:column="7">!<pos:position pos:line="9" pos:column="8"/></operator><call><name pos:line="9" pos:column="8">checkprefix<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name><name pos:line="9" pos:column="20">conn<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">-&gt;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="26">protostr<pos:position pos:line="9" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="36">conn<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">-&gt;<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="42">data<pos:position pos:line="9" pos:column="46"/></name><operator pos:line="9" pos:column="46">-&gt;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="48">change<pos:position pos:line="9" pos:column="54"/></name><operator pos:line="9" pos:column="54">.<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="55">url<pos:position pos:line="9" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="60"/></condition><then pos:line="9" pos:column="60">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">LDAP_INVALID_SYNTAX<pos:position pos:line="10" pos:column="31"/></name></expr>;<pos:position pos:line="10" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="12" pos:column="3">ludp<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">-&gt;<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="9">lud_scope<pos:position pos:line="12" pos:column="18"/></name></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <name pos:line="12" pos:column="21">LDAP_SCOPE_BASE<pos:position pos:line="12" pos:column="36"/></name></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">ludp<pos:position pos:line="13" pos:column="7"/></name><operator pos:line="13" pos:column="7">-&gt;<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="9">lud_port<pos:position pos:line="13" pos:column="17"/></name></name>  <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <name><name pos:line="13" pos:column="21">conn<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">remote_port<pos:position pos:line="13" pos:column="38"/></name></name></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="14" pos:column="3">ludp<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">-&gt;<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="9">lud_host<pos:position pos:line="14" pos:column="17"/></name></name>  <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <name><name pos:line="14" pos:column="21">conn<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">host<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">.<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">name<pos:position pos:line="14" pos:column="36"/></name></name></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* parse DN (Distinguished Name).
   */</comment>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">ludp<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">-&gt;<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="9">lud_dn<pos:position pos:line="18" pos:column="15"/></name></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <call><name pos:line="18" pos:column="18">strdup<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">conn<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">data<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">-&gt;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="37">state<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">.<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="43">path<pos:position pos:line="18" pos:column="47"/></name></name><operator pos:line="18" pos:column="47">+<pos:position pos:line="18" pos:column="48"/></operator><literal type="number" pos:line="18" pos:column="48">1<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><name><name pos:line="19" pos:column="7">ludp<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">lud_dn<pos:position pos:line="19" pos:column="19"/></name></name></expr>)<pos:position pos:line="19" pos:column="20"/></condition><then pos:line="19" pos:column="20">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">LDAP_NO_MEMORY<pos:position pos:line="20" pos:column="26"/></name></expr>;<pos:position pos:line="20" pos:column="27"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">p<pos:position pos:line="22" pos:column="4"/></name> <operator pos:line="22" pos:column="5">=<pos:position pos:line="22" pos:column="6"/></operator> <call><name pos:line="22" pos:column="7">strchr<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><name><name pos:line="22" pos:column="14">ludp<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">lud_dn<pos:position pos:line="22" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="28">'?'<pos:position pos:line="22" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">LDAP_TRACE<pos:position pos:line="23" pos:column="13"/></name> <argument_list pos:line="23" pos:column="14">(<argument><expr><operator pos:line="23" pos:column="15">(<pos:position pos:line="23" pos:column="16"/></operator><literal type="string" pos:line="23" pos:column="16">"DN '%.*s'\n"<pos:position pos:line="23" pos:column="29"/></literal><operator pos:line="23" pos:column="29">,<pos:position pos:line="23" pos:column="30"/></operator> <ternary><condition><expr><name pos:line="23" pos:column="31">p<pos:position pos:line="23" pos:column="32"/></name></expr> ?<pos:position pos:line="23" pos:column="34"/></condition><then pos:line="23" pos:column="34"> <expr><call pos:line="23" pos:column="35">(<name pos:line="23" pos:column="36">size_t<pos:position pos:line="23" pos:column="42"/></name>)<argument_list pos:line="23" pos:column="43">(<argument><expr><name pos:line="23" pos:column="44">p<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">-<pos:position pos:line="23" pos:column="46"/></operator><name><name pos:line="23" pos:column="46">ludp<pos:position pos:line="23" pos:column="50"/></name><operator pos:line="23" pos:column="50">-&gt;<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="52">lud_dn<pos:position pos:line="23" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr> <pos:position pos:line="23" pos:column="60"/></then><else pos:line="23" pos:column="60">:
               <expr><call><name pos:line="24" pos:column="16">strlen<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name><name pos:line="24" pos:column="23">ludp<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">-&gt;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="29">lud_dn<pos:position pos:line="24" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr></else></ternary><operator pos:line="24" pos:column="36">,<pos:position pos:line="24" pos:column="37"/></operator> <name><name pos:line="24" pos:column="38">ludp<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">-&gt;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="44">lud_dn<pos:position pos:line="24" pos:column="50"/></name></name><operator pos:line="24" pos:column="50">)<pos:position pos:line="24" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">!<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">p<pos:position pos:line="26" pos:column="8"/></name></expr>)<pos:position pos:line="26" pos:column="9"/></condition><then pos:line="26" pos:column="9">
    <block type="pseudo"><goto pos:line="27" pos:column="5">goto <name pos:line="27" pos:column="10">success<pos:position pos:line="27" pos:column="17"/></name>;<pos:position pos:line="27" pos:column="18"/></goto></block></then></if>

  <expr_stmt><expr><operator pos:line="29" pos:column="3">*<pos:position pos:line="29" pos:column="4"/></operator><name pos:line="29" pos:column="4">p<pos:position pos:line="29" pos:column="5"/></name><operator pos:line="29" pos:column="5">++<pos:position pos:line="29" pos:column="7"/></operator> <operator pos:line="29" pos:column="8">=<pos:position pos:line="29" pos:column="9"/></operator> <literal type="char" pos:line="29" pos:column="10">'\0'<pos:position pos:line="29" pos:column="14"/></literal></expr>;<pos:position pos:line="29" pos:column="15"/></expr_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* parse attributes. skip "??".
   */</comment>
  <expr_stmt><expr><name pos:line="33" pos:column="3">q<pos:position pos:line="33" pos:column="4"/></name> <operator pos:line="33" pos:column="5">=<pos:position pos:line="33" pos:column="6"/></operator> <call><name pos:line="33" pos:column="7">strchr<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name pos:line="33" pos:column="14">p<pos:position pos:line="33" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="17">'?'<pos:position pos:line="33" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name pos:line="34" pos:column="6">q<pos:position pos:line="34" pos:column="7"/></name></expr>)<pos:position pos:line="34" pos:column="8"/></condition><then pos:line="34" pos:column="8">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="35" pos:column="5">*<pos:position pos:line="35" pos:column="6"/></operator><name pos:line="35" pos:column="6">q<pos:position pos:line="35" pos:column="7"/></name><operator pos:line="35" pos:column="7">++<pos:position pos:line="35" pos:column="9"/></operator> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <literal type="char" pos:line="35" pos:column="12">'\0'<pos:position pos:line="35" pos:column="16"/></literal></expr>;<pos:position pos:line="35" pos:column="17"/></expr_stmt></block></then></if>

  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">(<expr><operator pos:line="37" pos:column="6">*<pos:position pos:line="37" pos:column="7"/></operator><name pos:line="37" pos:column="7">p<pos:position pos:line="37" pos:column="8"/></name> <operator pos:line="37" pos:column="9">&amp;&amp;<pos:position pos:line="37" pos:column="19"/></operator> <operator pos:line="37" pos:column="12">*<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">p<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">!=<pos:position pos:line="37" pos:column="17"/></operator> <literal type="char" pos:line="37" pos:column="18">'?'<pos:position pos:line="37" pos:column="21"/></literal></expr>)<pos:position pos:line="37" pos:column="22"/></condition><then pos:line="37" pos:column="22"> <block pos:line="37" pos:column="23">{
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">ludp<pos:position pos:line="38" pos:column="9"/></name><operator pos:line="38" pos:column="9">-&gt;<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="11">lud_attrs<pos:position pos:line="38" pos:column="20"/></name></name> <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <call><name pos:line="38" pos:column="23">split_str<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">p<pos:position pos:line="38" pos:column="34"/></name></expr></argument>)<pos:position pos:line="38" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><operator pos:line="39" pos:column="8">!<pos:position pos:line="39" pos:column="9"/></operator><name><name pos:line="39" pos:column="9">ludp<pos:position pos:line="39" pos:column="13"/></name><operator pos:line="39" pos:column="13">-&gt;<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="15">lud_attrs<pos:position pos:line="39" pos:column="24"/></name></name></expr>)<pos:position pos:line="39" pos:column="25"/></condition><then pos:line="39" pos:column="25">
      <block type="pseudo"><return pos:line="40" pos:column="7">return <expr><name pos:line="40" pos:column="14">LDAP_NO_MEMORY<pos:position pos:line="40" pos:column="28"/></name></expr>;<pos:position pos:line="40" pos:column="29"/></return></block></then></if>

    <for pos:line="42" pos:column="5">for <control pos:line="42" pos:column="9">(<init><expr><name pos:line="42" pos:column="10">i<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <literal type="number" pos:line="42" pos:column="14">0<pos:position pos:line="42" pos:column="15"/></literal></expr>;<pos:position pos:line="42" pos:column="16"/></init> <condition><expr><name><name pos:line="42" pos:column="17">ludp<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">-&gt;<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="23">lud_attrs<pos:position pos:line="42" pos:column="32"/></name><index pos:line="42" pos:column="32">[<expr><name pos:line="42" pos:column="33">i<pos:position pos:line="42" pos:column="34"/></name></expr>]<pos:position pos:line="42" pos:column="35"/></index></name></expr>;<pos:position pos:line="42" pos:column="36"/></condition> <incr><expr><name pos:line="42" pos:column="37">i<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">++<pos:position pos:line="42" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="41"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="7">LDAP_TRACE<pos:position pos:line="43" pos:column="17"/></name> <argument_list pos:line="43" pos:column="18">(<argument><expr><operator pos:line="43" pos:column="19">(<pos:position pos:line="43" pos:column="20"/></operator><literal type="string" pos:line="43" pos:column="20">"attr[%d] '%s'\n"<pos:position pos:line="43" pos:column="37"/></literal><operator pos:line="43" pos:column="37">,<pos:position pos:line="43" pos:column="38"/></operator> <name pos:line="43" pos:column="39">i<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">,<pos:position pos:line="43" pos:column="41"/></operator> <name><name pos:line="43" pos:column="42">ludp<pos:position pos:line="43" pos:column="46"/></name><operator pos:line="43" pos:column="46">-&gt;<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="48">lud_attrs<pos:position pos:line="43" pos:column="57"/></name><index pos:line="43" pos:column="57">[<expr><name pos:line="43" pos:column="58">i<pos:position pos:line="43" pos:column="59"/></name></expr>]<pos:position pos:line="43" pos:column="60"/></index></name><operator pos:line="43" pos:column="60">)<pos:position pos:line="43" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="43" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="63"/></expr_stmt></block></for>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="46" pos:column="3">p<pos:position pos:line="46" pos:column="4"/></name> <operator pos:line="46" pos:column="5">=<pos:position pos:line="46" pos:column="6"/></operator> <name pos:line="46" pos:column="7">q<pos:position pos:line="46" pos:column="8"/></name></expr>;<pos:position pos:line="46" pos:column="9"/></expr_stmt>
  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><operator pos:line="47" pos:column="6">!<pos:position pos:line="47" pos:column="7"/></operator><name pos:line="47" pos:column="7">p<pos:position pos:line="47" pos:column="8"/></name></expr>)<pos:position pos:line="47" pos:column="9"/></condition><then pos:line="47" pos:column="9">
    <block type="pseudo"><goto pos:line="48" pos:column="5">goto <name pos:line="48" pos:column="10">success<pos:position pos:line="48" pos:column="17"/></name>;<pos:position pos:line="48" pos:column="18"/></goto></block></then></if>

  <comment type="block" pos:line="50" pos:column="3">/* parse scope. skip "??"
   */</comment>
  <expr_stmt><expr><name pos:line="52" pos:column="3">q<pos:position pos:line="52" pos:column="4"/></name> <operator pos:line="52" pos:column="5">=<pos:position pos:line="52" pos:column="6"/></operator> <call><name pos:line="52" pos:column="7">strchr<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">(<argument><expr><name pos:line="52" pos:column="14">p<pos:position pos:line="52" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="52" pos:column="17">'?'<pos:position pos:line="52" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="22"/></expr_stmt>
  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name pos:line="53" pos:column="6">q<pos:position pos:line="53" pos:column="7"/></name></expr>)<pos:position pos:line="53" pos:column="8"/></condition><then pos:line="53" pos:column="8">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="54" pos:column="5">*<pos:position pos:line="54" pos:column="6"/></operator><name pos:line="54" pos:column="6">q<pos:position pos:line="54" pos:column="7"/></name><operator pos:line="54" pos:column="7">++<pos:position pos:line="54" pos:column="9"/></operator> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <literal type="char" pos:line="54" pos:column="12">'\0'<pos:position pos:line="54" pos:column="16"/></literal></expr>;<pos:position pos:line="54" pos:column="17"/></expr_stmt></block></then></if>

  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><operator pos:line="56" pos:column="6">*<pos:position pos:line="56" pos:column="7"/></operator><name pos:line="56" pos:column="7">p<pos:position pos:line="56" pos:column="8"/></name> <operator pos:line="56" pos:column="9">&amp;&amp;<pos:position pos:line="56" pos:column="19"/></operator> <operator pos:line="56" pos:column="12">*<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="13">p<pos:position pos:line="56" pos:column="14"/></name> <operator pos:line="56" pos:column="15">!=<pos:position pos:line="56" pos:column="17"/></operator> <literal type="char" pos:line="56" pos:column="18">'?'<pos:position pos:line="56" pos:column="21"/></literal></expr>)<pos:position pos:line="56" pos:column="22"/></condition><then pos:line="56" pos:column="22"> <block pos:line="56" pos:column="23">{
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">ludp<pos:position pos:line="57" pos:column="9"/></name><operator pos:line="57" pos:column="9">-&gt;<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="11">lud_scope<pos:position pos:line="57" pos:column="20"/></name></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <call><name pos:line="57" pos:column="23">str2scope<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><name pos:line="57" pos:column="33">p<pos:position pos:line="57" pos:column="34"/></name></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt>
    <if pos:line="58" pos:column="5">if<condition pos:line="58" pos:column="7">(<expr><name><name pos:line="58" pos:column="8">ludp<pos:position pos:line="58" pos:column="12"/></name><operator pos:line="58" pos:column="12">-&gt;<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="14">lud_scope<pos:position pos:line="58" pos:column="23"/></name></name> <operator pos:line="58" pos:column="24">==<pos:position pos:line="58" pos:column="26"/></operator> <operator pos:line="58" pos:column="27">-<pos:position pos:line="58" pos:column="28"/></operator><literal type="number" pos:line="58" pos:column="28">1<pos:position pos:line="58" pos:column="29"/></literal></expr>)<pos:position pos:line="58" pos:column="30"/></condition><then pos:line="58" pos:column="30">
      <block type="pseudo"><return pos:line="59" pos:column="7">return <expr><name pos:line="59" pos:column="14">LDAP_INVALID_SYNTAX<pos:position pos:line="59" pos:column="33"/></name></expr>;<pos:position pos:line="59" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">LDAP_TRACE<pos:position pos:line="60" pos:column="15"/></name> <argument_list pos:line="60" pos:column="16">(<argument><expr><operator pos:line="60" pos:column="17">(<pos:position pos:line="60" pos:column="18"/></operator><literal type="string" pos:line="60" pos:column="18">"scope %d\n"<pos:position pos:line="60" pos:column="30"/></literal><operator pos:line="60" pos:column="30">,<pos:position pos:line="60" pos:column="31"/></operator> <name><name pos:line="60" pos:column="32">ludp<pos:position pos:line="60" pos:column="36"/></name><operator pos:line="60" pos:column="36">-&gt;<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="38">lud_scope<pos:position pos:line="60" pos:column="47"/></name></name><operator pos:line="60" pos:column="47">)<pos:position pos:line="60" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="60" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="63" pos:column="3">p<pos:position pos:line="63" pos:column="4"/></name> <operator pos:line="63" pos:column="5">=<pos:position pos:line="63" pos:column="6"/></operator> <name pos:line="63" pos:column="7">q<pos:position pos:line="63" pos:column="8"/></name></expr>;<pos:position pos:line="63" pos:column="9"/></expr_stmt>
  <if pos:line="64" pos:column="3">if<condition pos:line="64" pos:column="5">(<expr><operator pos:line="64" pos:column="6">!<pos:position pos:line="64" pos:column="7"/></operator><name pos:line="64" pos:column="7">p<pos:position pos:line="64" pos:column="8"/></name></expr>)<pos:position pos:line="64" pos:column="9"/></condition><then pos:line="64" pos:column="9">
    <block type="pseudo"><goto pos:line="65" pos:column="5">goto <name pos:line="65" pos:column="10">success<pos:position pos:line="65" pos:column="17"/></name>;<pos:position pos:line="65" pos:column="18"/></goto></block></then></if>

  <comment type="block" pos:line="67" pos:column="3">/* parse filter
   */</comment>
  <expr_stmt><expr><name pos:line="69" pos:column="3">q<pos:position pos:line="69" pos:column="4"/></name> <operator pos:line="69" pos:column="5">=<pos:position pos:line="69" pos:column="6"/></operator> <call><name pos:line="69" pos:column="7">strchr<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">(<argument><expr><name pos:line="69" pos:column="14">p<pos:position pos:line="69" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="69" pos:column="17">'?'<pos:position pos:line="69" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="22"/></expr_stmt>
  <if pos:line="70" pos:column="3">if<condition pos:line="70" pos:column="5">(<expr><name pos:line="70" pos:column="6">q<pos:position pos:line="70" pos:column="7"/></name></expr>)<pos:position pos:line="70" pos:column="8"/></condition><then pos:line="70" pos:column="8">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="71" pos:column="5">*<pos:position pos:line="71" pos:column="6"/></operator><name pos:line="71" pos:column="6">q<pos:position pos:line="71" pos:column="7"/></name><operator pos:line="71" pos:column="7">++<pos:position pos:line="71" pos:column="9"/></operator> <operator pos:line="71" pos:column="10">=<pos:position pos:line="71" pos:column="11"/></operator> <literal type="char" pos:line="71" pos:column="12">'\0'<pos:position pos:line="71" pos:column="16"/></literal></expr>;<pos:position pos:line="71" pos:column="17"/></expr_stmt></block></then></if>
  <if pos:line="72" pos:column="3">if<condition pos:line="72" pos:column="5">(<expr><operator pos:line="72" pos:column="6">!<pos:position pos:line="72" pos:column="7"/></operator><operator pos:line="72" pos:column="7">*<pos:position pos:line="72" pos:column="8"/></operator><name pos:line="72" pos:column="8">p<pos:position pos:line="72" pos:column="9"/></name></expr>)<pos:position pos:line="72" pos:column="10"/></condition><then pos:line="72" pos:column="10">
    <block type="pseudo"><return pos:line="73" pos:column="5">return <expr><name pos:line="73" pos:column="12">LDAP_INVALID_SYNTAX<pos:position pos:line="73" pos:column="31"/></name></expr>;<pos:position pos:line="73" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="75" pos:column="3">ludp<pos:position pos:line="75" pos:column="7"/></name><operator pos:line="75" pos:column="7">-&gt;<pos:position pos:line="75" pos:column="12"/></operator><name pos:line="75" pos:column="9">lud_filter<pos:position pos:line="75" pos:column="19"/></name></name> <operator pos:line="75" pos:column="20">=<pos:position pos:line="75" pos:column="21"/></operator> <name pos:line="75" pos:column="22">p<pos:position pos:line="75" pos:column="23"/></name></expr>;<pos:position pos:line="75" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="76" pos:column="3">LDAP_TRACE<pos:position pos:line="76" pos:column="13"/></name> <argument_list pos:line="76" pos:column="14">(<argument><expr><operator pos:line="76" pos:column="15">(<pos:position pos:line="76" pos:column="16"/></operator><literal type="string" pos:line="76" pos:column="16">"filter '%s'\n"<pos:position pos:line="76" pos:column="31"/></literal><operator pos:line="76" pos:column="31">,<pos:position pos:line="76" pos:column="32"/></operator> <name><name pos:line="76" pos:column="33">ludp<pos:position pos:line="76" pos:column="37"/></name><operator pos:line="76" pos:column="37">-&gt;<pos:position pos:line="76" pos:column="42"/></operator><name pos:line="76" pos:column="39">lud_filter<pos:position pos:line="76" pos:column="49"/></name></name><operator pos:line="76" pos:column="49">)<pos:position pos:line="76" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="76" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="52"/></expr_stmt>

  <expr_stmt><expr><name pos:line="78" pos:column="3">p<pos:position pos:line="78" pos:column="4"/></name> <operator pos:line="78" pos:column="5">=<pos:position pos:line="78" pos:column="6"/></operator> <name pos:line="78" pos:column="7">q<pos:position pos:line="78" pos:column="8"/></name></expr>;<pos:position pos:line="78" pos:column="9"/></expr_stmt>
  <if pos:line="79" pos:column="3">if<condition pos:line="79" pos:column="5">(<expr><operator pos:line="79" pos:column="6">!<pos:position pos:line="79" pos:column="7"/></operator><name pos:line="79" pos:column="7">p<pos:position pos:line="79" pos:column="8"/></name></expr>)<pos:position pos:line="79" pos:column="9"/></condition><then pos:line="79" pos:column="9">
    <block type="pseudo"><goto pos:line="80" pos:column="5">goto <name pos:line="80" pos:column="10">success<pos:position pos:line="80" pos:column="17"/></name>;<pos:position pos:line="80" pos:column="18"/></goto></block></then></if>

  <comment type="block" pos:line="82" pos:column="3">/* parse extensions
   */</comment>
  <expr_stmt><expr><name><name pos:line="84" pos:column="3">ludp<pos:position pos:line="84" pos:column="7"/></name><operator pos:line="84" pos:column="7">-&gt;<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="9">lud_exts<pos:position pos:line="84" pos:column="17"/></name></name> <operator pos:line="84" pos:column="18">=<pos:position pos:line="84" pos:column="19"/></operator> <call><name pos:line="84" pos:column="20">split_str<pos:position pos:line="84" pos:column="29"/></name><argument_list pos:line="84" pos:column="29">(<argument><expr><name pos:line="84" pos:column="30">p<pos:position pos:line="84" pos:column="31"/></name></expr></argument>)<pos:position pos:line="84" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="33"/></expr_stmt>
  <if pos:line="85" pos:column="3">if<condition pos:line="85" pos:column="5">(<expr><operator pos:line="85" pos:column="6">!<pos:position pos:line="85" pos:column="7"/></operator><name><name pos:line="85" pos:column="7">ludp<pos:position pos:line="85" pos:column="11"/></name><operator pos:line="85" pos:column="11">-&gt;<pos:position pos:line="85" pos:column="16"/></operator><name pos:line="85" pos:column="13">lud_exts<pos:position pos:line="85" pos:column="21"/></name></name></expr>)<pos:position pos:line="85" pos:column="22"/></condition><then pos:line="85" pos:column="22">
    <block type="pseudo"><return pos:line="86" pos:column="5">return <expr><name pos:line="86" pos:column="12">LDAP_NO_MEMORY<pos:position pos:line="86" pos:column="26"/></name></expr>;<pos:position pos:line="86" pos:column="27"/></return></block></then></if>

  <for pos:line="88" pos:column="3">for <control pos:line="88" pos:column="7">(<init><expr><name pos:line="88" pos:column="8">i<pos:position pos:line="88" pos:column="9"/></name> <operator pos:line="88" pos:column="10">=<pos:position pos:line="88" pos:column="11"/></operator> <literal type="number" pos:line="88" pos:column="12">0<pos:position pos:line="88" pos:column="13"/></literal></expr>;<pos:position pos:line="88" pos:column="14"/></init> <condition><expr><name><name pos:line="88" pos:column="15">ludp<pos:position pos:line="88" pos:column="19"/></name><operator pos:line="88" pos:column="19">-&gt;<pos:position pos:line="88" pos:column="24"/></operator><name pos:line="88" pos:column="21">lud_exts<pos:position pos:line="88" pos:column="29"/></name><index pos:line="88" pos:column="29">[<expr><name pos:line="88" pos:column="30">i<pos:position pos:line="88" pos:column="31"/></name></expr>]<pos:position pos:line="88" pos:column="32"/></index></name></expr>;<pos:position pos:line="88" pos:column="33"/></condition> <incr><expr><name pos:line="88" pos:column="34">i<pos:position pos:line="88" pos:column="35"/></name><operator pos:line="88" pos:column="35">++<pos:position pos:line="88" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="88" pos:column="38"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="5">LDAP_TRACE<pos:position pos:line="89" pos:column="15"/></name> <argument_list pos:line="89" pos:column="16">(<argument><expr><operator pos:line="89" pos:column="17">(<pos:position pos:line="89" pos:column="18"/></operator><literal type="string" pos:line="89" pos:column="18">"exts[%d] '%s'\n"<pos:position pos:line="89" pos:column="35"/></literal><operator pos:line="89" pos:column="35">,<pos:position pos:line="89" pos:column="36"/></operator> <name pos:line="89" pos:column="37">i<pos:position pos:line="89" pos:column="38"/></name><operator pos:line="89" pos:column="38">,<pos:position pos:line="89" pos:column="39"/></operator> <name><name pos:line="89" pos:column="40">ludp<pos:position pos:line="89" pos:column="44"/></name><operator pos:line="89" pos:column="44">-&gt;<pos:position pos:line="89" pos:column="49"/></operator><name pos:line="89" pos:column="46">lud_exts<pos:position pos:line="89" pos:column="54"/></name><index pos:line="89" pos:column="54">[<expr><name pos:line="89" pos:column="55">i<pos:position pos:line="89" pos:column="56"/></name></expr>]<pos:position pos:line="89" pos:column="57"/></index></name><operator pos:line="89" pos:column="57">)<pos:position pos:line="89" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="89" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="60"/></expr_stmt></block></for>

  <label><name pos:line="91" pos:column="3">success<pos:position pos:line="91" pos:column="10"/></name>:<pos:position pos:line="91" pos:column="11"/></label>
  <if pos:line="92" pos:column="3">if<condition pos:line="92" pos:column="5">(<expr><operator pos:line="92" pos:column="6">!<pos:position pos:line="92" pos:column="7"/></operator><call><name pos:line="92" pos:column="7">unescape_elements<pos:position pos:line="92" pos:column="24"/></name><argument_list pos:line="92" pos:column="24">(<argument><expr><name><name pos:line="92" pos:column="25">conn<pos:position pos:line="92" pos:column="29"/></name><operator pos:line="92" pos:column="29">-&gt;<pos:position pos:line="92" pos:column="34"/></operator><name pos:line="92" pos:column="31">data<pos:position pos:line="92" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="37">ludp<pos:position pos:line="92" pos:column="41"/></name></expr></argument>)<pos:position pos:line="92" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="92" pos:column="43"/></condition><then pos:line="92" pos:column="43">
    <block type="pseudo"><return pos:line="93" pos:column="5">return <expr><name pos:line="93" pos:column="12">LDAP_NO_MEMORY<pos:position pos:line="93" pos:column="26"/></name></expr>;<pos:position pos:line="93" pos:column="27"/></return></block></then></if>
  <return pos:line="94" pos:column="3">return <expr><name pos:line="94" pos:column="10">LDAP_SUCCESS<pos:position pos:line="94" pos:column="22"/></name></expr>;<pos:position pos:line="94" pos:column="23"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
