<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_403_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_ConnectHTTPProxyTunnel<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">connectdata<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">conn<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">sockindex<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="3" pos:column="38">char<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">hostname<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="4" pos:column="38">int<pos:position pos:line="4" pos:column="41"/></name></type> <name pos:line="4" pos:column="42">remote_port<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="54"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">subversion<pos:position pos:line="6" pos:column="17"/></name><init pos:line="6" pos:column="17">=<expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name><init pos:line="7" pos:column="29">=<expr><name><name pos:line="7" pos:column="30">conn<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">data<pos:position pos:line="7" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_transfer_keeper<pos:position pos:line="8" pos:column="30"/></name></name> <modifier pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></modifier></type><name pos:line="8" pos:column="32">k<pos:position pos:line="8" pos:column="33"/></name> <init pos:line="8" pos:column="34">= <expr><operator pos:line="8" pos:column="36">&amp;<pos:position pos:line="8" pos:column="41"/></operator><name><name pos:line="8" pos:column="37">conn<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">-&gt;<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="43">keep<pos:position pos:line="8" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">CURLcode<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">result<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">res<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">size_t<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">nread<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>   <comment type="block" pos:line="11" pos:column="19">/* total size read */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">perline<pos:position pos:line="12" pos:column="14"/></name></decl>;<pos:position pos:line="12" pos:column="15"/></decl_stmt> <comment type="block" pos:line="12" pos:column="16">/* count bytes per line */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">bool<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">keepon<pos:position pos:line="13" pos:column="14"/></name><init pos:line="13" pos:column="14">=<expr><name pos:line="13" pos:column="15">TRUE<pos:position pos:line="13" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">ssize_t<pos:position pos:line="14" pos:column="10"/></name></type> <name pos:line="14" pos:column="11">gotbytes<pos:position pos:line="14" pos:column="19"/></name></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">ptr<pos:position pos:line="15" pos:column="12"/></name></decl>;<pos:position pos:line="15" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">long<pos:position pos:line="16" pos:column="7"/></name></type> <name pos:line="16" pos:column="8">timeout<pos:position pos:line="16" pos:column="15"/></name> <init pos:line="16" pos:column="16">=
    <expr><ternary><condition><expr><name><name pos:line="17" pos:column="5">data<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">-&gt;<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="11">set<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">.<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">timeout<pos:position pos:line="17" pos:column="22"/></name></name></expr>?<pos:position pos:line="17" pos:column="23"/></condition><then><expr><name><name pos:line="17" pos:column="23">data<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">-&gt;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="29">set<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">.<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">timeout<pos:position pos:line="17" pos:column="40"/></name></name></expr></then><else pos:line="17" pos:column="40">:<expr><literal type="number" pos:line="17" pos:column="41">3600<pos:position pos:line="17" pos:column="45"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="17" pos:column="46"/></decl_stmt> <comment type="block" pos:line="17" pos:column="47">/* in seconds */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name> <modifier pos:line="18" pos:column="8">*<pos:position pos:line="18" pos:column="9"/></modifier></type><name pos:line="18" pos:column="9">line_start<pos:position pos:line="18" pos:column="19"/></name></decl>;<pos:position pos:line="18" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name> <modifier pos:line="19" pos:column="8">*<pos:position pos:line="19" pos:column="9"/></modifier></type><name pos:line="19" pos:column="9">host_port<pos:position pos:line="19" pos:column="18"/></name></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">curl_socket_t<pos:position pos:line="20" pos:column="16"/></name></type> <name pos:line="20" pos:column="17">tunnelsocket<pos:position pos:line="20" pos:column="29"/></name> <init pos:line="20" pos:column="30">= <expr><name><name pos:line="20" pos:column="32">conn<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">sock<pos:position pos:line="20" pos:column="42"/></name><index pos:line="20" pos:column="42">[<expr><name pos:line="20" pos:column="43">sockindex<pos:position pos:line="20" pos:column="52"/></name></expr>]<pos:position pos:line="20" pos:column="53"/></index></name></expr></init></decl>;<pos:position pos:line="20" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">send_buffer<pos:position pos:line="21" pos:column="14"/></name> <modifier pos:line="21" pos:column="15">*<pos:position pos:line="21" pos:column="16"/></modifier></type><name pos:line="21" pos:column="16">req_buffer<pos:position pos:line="21" pos:column="26"/></name></decl>;<pos:position pos:line="21" pos:column="27"/></decl_stmt>

<cpp:define pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">define<pos:position pos:line="23" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="23" pos:column="9">SELECT_OK<pos:position pos:line="23" pos:column="18"/></name></cpp:macro>      <cpp:value pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">define<pos:position pos:line="24" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="24" pos:column="9">SELECT_ERROR<pos:position pos:line="24" pos:column="21"/></name></cpp:macro>   <cpp:value pos:line="24" pos:column="24">1<pos:position pos:line="24" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">define<pos:position pos:line="25" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="25" pos:column="9">SELECT_TIMEOUT<pos:position pos:line="25" pos:column="23"/></name></cpp:macro> <cpp:value pos:line="25" pos:column="24">2<pos:position pos:line="25" pos:column="25"/></cpp:value></cpp:define>
  <decl_stmt><decl><type><name pos:line="26" pos:column="3">int<pos:position pos:line="26" pos:column="6"/></name></type> <name pos:line="26" pos:column="7">error<pos:position pos:line="26" pos:column="12"/></name> <init pos:line="26" pos:column="13">= <expr><name pos:line="26" pos:column="15">SELECT_OK<pos:position pos:line="26" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">infof<pos:position pos:line="28" pos:column="8"/></name><argument_list pos:line="28" pos:column="8">(<argument><expr><name pos:line="28" pos:column="9">data<pos:position pos:line="28" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="15">"Establish HTTP proxy tunnel to %s:%d\n"<pos:position pos:line="28" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="57">hostname<pos:position pos:line="28" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="67">remote_port<pos:position pos:line="28" pos:column="78"/></name></expr></argument>)<pos:position pos:line="28" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="80"/></expr_stmt>

  <do pos:line="30" pos:column="3">do <block pos:line="30" pos:column="6">{
    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><name><name pos:line="31" pos:column="8">conn<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">newurl<pos:position pos:line="31" pos:column="20"/></name></name></expr>)<pos:position pos:line="31" pos:column="21"/></condition><then pos:line="31" pos:column="21"> <block pos:line="31" pos:column="22">{
      <comment type="block" pos:line="32" pos:column="7">/* This only happens if we've looped here due to authentication reasons,
         and we don't really use the newly cloned URL here then. Just free()
         it. */</comment>
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">free<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name><name pos:line="35" pos:column="12">conn<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">newurl<pos:position pos:line="35" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="36" pos:column="7">conn<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">-&gt;<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="13">newurl<pos:position pos:line="36" pos:column="19"/></name></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="22">NULL<pos:position pos:line="36" pos:column="26"/></name></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/* initialize a dynamic send-buffer */</comment>
    <expr_stmt><expr><name pos:line="40" pos:column="5">req_buffer<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <call><name pos:line="40" pos:column="18">add_buffer_init<pos:position pos:line="40" pos:column="33"/></name><argument_list pos:line="40" pos:column="33">()<pos:position pos:line="40" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>

    <if pos:line="42" pos:column="5">if<condition pos:line="42" pos:column="7">(<expr><operator pos:line="42" pos:column="8">!<pos:position pos:line="42" pos:column="9"/></operator><name pos:line="42" pos:column="9">req_buffer<pos:position pos:line="42" pos:column="19"/></name></expr>)<pos:position pos:line="42" pos:column="20"/></condition><then pos:line="42" pos:column="20">
      <block type="pseudo"><return pos:line="43" pos:column="7">return <expr><name pos:line="43" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="43" pos:column="33"/></name></expr>;<pos:position pos:line="43" pos:column="34"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="45" pos:column="5">host_port<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator> <call><name pos:line="45" pos:column="17">aprintf<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><literal type="string" pos:line="45" pos:column="25">"%s:%d"<pos:position pos:line="45" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">hostname<pos:position pos:line="45" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="44">remote_port<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="57"/></expr_stmt>
    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><operator pos:line="46" pos:column="8">!<pos:position pos:line="46" pos:column="9"/></operator><name pos:line="46" pos:column="9">host_port<pos:position pos:line="46" pos:column="18"/></name></expr>)<pos:position pos:line="46" pos:column="19"/></condition><then pos:line="46" pos:column="19">
      <block type="pseudo"><return pos:line="47" pos:column="7">return <expr><name pos:line="47" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="47" pos:column="33"/></name></expr>;<pos:position pos:line="47" pos:column="34"/></return></block></then></if>

    <comment type="block" pos:line="49" pos:column="5">/* Setup the proxy-authorization header, if any */</comment>
    <expr_stmt><expr><name pos:line="50" pos:column="5">result<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <call><name pos:line="50" pos:column="14">Curl_http_output_auth<pos:position pos:line="50" pos:column="35"/></name><argument_list pos:line="50" pos:column="35">(<argument><expr><name pos:line="50" pos:column="36">conn<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="42">(<pos:position pos:line="50" pos:column="43"/></operator><name pos:line="50" pos:column="43">char<pos:position pos:line="50" pos:column="47"/></name> <operator pos:line="50" pos:column="48">*<pos:position pos:line="50" pos:column="49"/></operator><operator pos:line="50" pos:column="49">)<pos:position pos:line="50" pos:column="50"/></operator><literal type="string" pos:line="50" pos:column="50">"CONNECT"<pos:position pos:line="50" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="61">host_port<pos:position pos:line="50" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="72">TRUE<pos:position pos:line="50" pos:column="76"/></name></expr></argument>)<pos:position pos:line="50" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="78"/></expr_stmt>

    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name pos:line="52" pos:column="8">CURLE_OK<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">==<pos:position pos:line="52" pos:column="19"/></operator> <name pos:line="52" pos:column="20">result<pos:position pos:line="52" pos:column="26"/></name></expr>)<pos:position pos:line="52" pos:column="27"/></condition><then pos:line="52" pos:column="27"> <block pos:line="52" pos:column="28">{
      <decl_stmt><decl><type><name pos:line="53" pos:column="7">char<pos:position pos:line="53" pos:column="11"/></name> <modifier pos:line="53" pos:column="12">*<pos:position pos:line="53" pos:column="13"/></modifier></type><name pos:line="53" pos:column="13">host<pos:position pos:line="53" pos:column="17"/></name><init pos:line="53" pos:column="17">=<expr><operator pos:line="53" pos:column="18">(<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="19">char<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">*<pos:position pos:line="53" pos:column="25"/></operator><operator pos:line="53" pos:column="25">)<pos:position pos:line="53" pos:column="26"/></operator><literal type="string" pos:line="53" pos:column="26">""<pos:position pos:line="53" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="53" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="54" pos:column="7">const<pos:position pos:line="54" pos:column="12"/></specifier> <name pos:line="54" pos:column="13">char<pos:position pos:line="54" pos:column="17"/></name> <modifier pos:line="54" pos:column="18">*<pos:position pos:line="54" pos:column="19"/></modifier></type><name pos:line="54" pos:column="19">proxyconn<pos:position pos:line="54" pos:column="28"/></name><init pos:line="54" pos:column="28">=<expr><literal type="string" pos:line="54" pos:column="29">""<pos:position pos:line="54" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="54" pos:column="32"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="55" pos:column="7">char<pos:position pos:line="55" pos:column="11"/></name> <modifier pos:line="55" pos:column="12">*<pos:position pos:line="55" pos:column="13"/></modifier></type><name pos:line="55" pos:column="13">ptr<pos:position pos:line="55" pos:column="16"/></name></decl>;<pos:position pos:line="55" pos:column="17"/></decl_stmt>

      <expr_stmt><expr><name pos:line="57" pos:column="7">ptr<pos:position pos:line="57" pos:column="10"/></name> <operator pos:line="57" pos:column="11">=<pos:position pos:line="57" pos:column="12"/></operator> <call><name pos:line="57" pos:column="13">checkheaders<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">data<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="32">"Host:"<pos:position pos:line="57" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="41"/></expr_stmt>
      <if pos:line="58" pos:column="7">if<condition pos:line="58" pos:column="9">(<expr><operator pos:line="58" pos:column="10">!<pos:position pos:line="58" pos:column="11"/></operator><name pos:line="58" pos:column="11">ptr<pos:position pos:line="58" pos:column="14"/></name></expr>)<pos:position pos:line="58" pos:column="15"/></condition><then pos:line="58" pos:column="15"> <block pos:line="58" pos:column="16">{
        <expr_stmt><expr><name pos:line="59" pos:column="9">host<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">=<pos:position pos:line="59" pos:column="15"/></operator> <call><name pos:line="59" pos:column="16">aprintf<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><literal type="string" pos:line="59" pos:column="24">"Host: %s\r\n"<pos:position pos:line="59" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="40">host_port<pos:position pos:line="59" pos:column="49"/></name></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
        <if pos:line="60" pos:column="9">if<condition pos:line="60" pos:column="11">(<expr><operator pos:line="60" pos:column="12">!<pos:position pos:line="60" pos:column="13"/></operator><name pos:line="60" pos:column="13">host<pos:position pos:line="60" pos:column="17"/></name></expr>)<pos:position pos:line="60" pos:column="18"/></condition><then pos:line="60" pos:column="18">
          <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="11">result<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">=<pos:position pos:line="61" pos:column="19"/></operator> <name pos:line="61" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="61" pos:column="39"/></name></expr>;<pos:position pos:line="61" pos:column="40"/></expr_stmt></block></then></if>
      }<pos:position pos:line="62" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="63" pos:column="7">ptr<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">=<pos:position pos:line="63" pos:column="12"/></operator> <call><name pos:line="63" pos:column="13">checkheaders<pos:position pos:line="63" pos:column="25"/></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">data<pos:position pos:line="63" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="32">"Proxy-Connection:"<pos:position pos:line="63" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="53"/></expr_stmt>
      <if pos:line="64" pos:column="7">if<condition pos:line="64" pos:column="9">(<expr><operator pos:line="64" pos:column="10">!<pos:position pos:line="64" pos:column="11"/></operator><name pos:line="64" pos:column="11">ptr<pos:position pos:line="64" pos:column="14"/></name></expr>)<pos:position pos:line="64" pos:column="15"/></condition><then pos:line="64" pos:column="15">
        <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="9">proxyconn<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">=<pos:position pos:line="65" pos:column="20"/></operator> <literal type="string" pos:line="65" pos:column="21">"Proxy-Connection: Keep-Alive\r\n"<pos:position pos:line="65" pos:column="55"/></literal></expr>;<pos:position pos:line="65" pos:column="56"/></expr_stmt></block></then></if>

      <if pos:line="67" pos:column="7">if<condition pos:line="67" pos:column="9">(<expr><name pos:line="67" pos:column="10">CURLE_OK<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">==<pos:position pos:line="67" pos:column="21"/></operator> <name pos:line="67" pos:column="22">result<pos:position pos:line="67" pos:column="28"/></name></expr>)<pos:position pos:line="67" pos:column="29"/></condition><then pos:line="67" pos:column="29"> <block pos:line="67" pos:column="30">{
        <comment type="block" pos:line="68" pos:column="9">/* Send the connect request to the proxy */</comment>
        <comment type="block" pos:line="69" pos:column="9">/* BLOCKING */</comment>
        <expr_stmt><expr><name pos:line="70" pos:column="9">result<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">=<pos:position pos:line="70" pos:column="17"/></operator>
          <call><name pos:line="71" pos:column="11">add_bufferf<pos:position pos:line="71" pos:column="22"/></name><argument_list pos:line="71" pos:column="22">(<argument><expr><name pos:line="71" pos:column="23">req_buffer<pos:position pos:line="71" pos:column="33"/></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="72" pos:column="23">"CONNECT %s:%d HTTP/1.0\r\n"<pos:position pos:line="72" pos:column="51"/></literal>
                      <literal type="string" pos:line="73" pos:column="23">"%s"<pos:position pos:line="73" pos:column="27"/></literal>  <comment type="block" pos:line="73" pos:column="29">/* Host: */</comment>
                      <literal type="string" pos:line="74" pos:column="23">"%s"<pos:position pos:line="74" pos:column="27"/></literal>  <comment type="block" pos:line="74" pos:column="29">/* Proxy-Authorization */</comment>
                      <literal type="string" pos:line="75" pos:column="23">"%s"<pos:position pos:line="75" pos:column="27"/></literal>  <comment type="block" pos:line="75" pos:column="29">/* User-Agent */</comment>
                      <literal type="string" pos:line="76" pos:column="23">"%s"<pos:position pos:line="76" pos:column="27"/></literal></expr></argument>, <comment type="block" pos:line="76" pos:column="29">/* Proxy-Connection */</comment>
                      <argument><expr><name pos:line="77" pos:column="23">hostname<pos:position pos:line="77" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="33">remote_port<pos:position pos:line="77" pos:column="44"/></name></expr></argument>,
                      <argument><expr><name pos:line="78" pos:column="23">host<pos:position pos:line="78" pos:column="27"/></name></expr></argument>,
                      <argument><expr><ternary><condition><expr><name><name pos:line="79" pos:column="23">conn<pos:position pos:line="79" pos:column="27"/></name><operator pos:line="79" pos:column="27">-&gt;<pos:position pos:line="79" pos:column="32"/></operator><name pos:line="79" pos:column="29">allocptr<pos:position pos:line="79" pos:column="37"/></name><operator pos:line="79" pos:column="37">.<pos:position pos:line="79" pos:column="38"/></operator><name pos:line="79" pos:column="38">proxyuserpwd<pos:position pos:line="79" pos:column="50"/></name></name></expr>?<pos:position pos:line="79" pos:column="51"/></condition><then pos:line="79" pos:column="51">
                      <expr><name><name pos:line="80" pos:column="23">conn<pos:position pos:line="80" pos:column="27"/></name><operator pos:line="80" pos:column="27">-&gt;<pos:position pos:line="80" pos:column="32"/></operator><name pos:line="80" pos:column="29">allocptr<pos:position pos:line="80" pos:column="37"/></name><operator pos:line="80" pos:column="37">.<pos:position pos:line="80" pos:column="38"/></operator><name pos:line="80" pos:column="38">proxyuserpwd<pos:position pos:line="80" pos:column="50"/></name></name></expr></then><else pos:line="80" pos:column="50">:<expr><literal type="string" pos:line="80" pos:column="51">""<pos:position pos:line="80" pos:column="53"/></literal></expr></else></ternary></expr></argument>,
                      <argument><expr><ternary><condition><expr><name><name pos:line="81" pos:column="23">data<pos:position pos:line="81" pos:column="27"/></name><operator pos:line="81" pos:column="27">-&gt;<pos:position pos:line="81" pos:column="32"/></operator><name pos:line="81" pos:column="29">set<pos:position pos:line="81" pos:column="32"/></name><operator pos:line="81" pos:column="32">.<pos:position pos:line="81" pos:column="33"/></operator><name pos:line="81" pos:column="33">useragent<pos:position pos:line="81" pos:column="42"/></name></name></expr>?<pos:position pos:line="81" pos:column="43"/></condition><then><expr><name><name pos:line="81" pos:column="43">conn<pos:position pos:line="81" pos:column="47"/></name><operator pos:line="81" pos:column="47">-&gt;<pos:position pos:line="81" pos:column="52"/></operator><name pos:line="81" pos:column="49">allocptr<pos:position pos:line="81" pos:column="57"/></name><operator pos:line="81" pos:column="57">.<pos:position pos:line="81" pos:column="58"/></operator><name pos:line="81" pos:column="58">uagent<pos:position pos:line="81" pos:column="64"/></name></name></expr></then><else pos:line="81" pos:column="64">:<expr><literal type="string" pos:line="81" pos:column="65">""<pos:position pos:line="81" pos:column="67"/></literal></expr></else></ternary></expr></argument>,
                      <argument><expr><name pos:line="82" pos:column="23">proxyconn<pos:position pos:line="82" pos:column="32"/></name></expr></argument>)<pos:position pos:line="82" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="34"/></expr_stmt>

        <if pos:line="84" pos:column="9">if<condition pos:line="84" pos:column="11">(<expr><name pos:line="84" pos:column="12">CURLE_OK<pos:position pos:line="84" pos:column="20"/></name> <operator pos:line="84" pos:column="21">==<pos:position pos:line="84" pos:column="23"/></operator> <name pos:line="84" pos:column="24">result<pos:position pos:line="84" pos:column="30"/></name></expr>)<pos:position pos:line="84" pos:column="31"/></condition><then pos:line="84" pos:column="31">
          <block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="11">result<pos:position pos:line="85" pos:column="17"/></name> <operator pos:line="85" pos:column="18">=<pos:position pos:line="85" pos:column="19"/></operator> <call><name pos:line="85" pos:column="20">add_custom_headers<pos:position pos:line="85" pos:column="38"/></name><argument_list pos:line="85" pos:column="38">(<argument><expr><name pos:line="85" pos:column="39">conn<pos:position pos:line="85" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="45">req_buffer<pos:position pos:line="85" pos:column="55"/></name></expr></argument>)<pos:position pos:line="85" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="57"/></expr_stmt></block></then></if>

        <if pos:line="87" pos:column="9">if<condition pos:line="87" pos:column="11">(<expr><name pos:line="87" pos:column="12">host<pos:position pos:line="87" pos:column="16"/></name> <operator pos:line="87" pos:column="17">&amp;&amp;<pos:position pos:line="87" pos:column="27"/></operator> <operator pos:line="87" pos:column="20">*<pos:position pos:line="87" pos:column="21"/></operator><name pos:line="87" pos:column="21">host<pos:position pos:line="87" pos:column="25"/></name></expr>)<pos:position pos:line="87" pos:column="26"/></condition><then pos:line="87" pos:column="26">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="11">free<pos:position pos:line="88" pos:column="15"/></name><argument_list pos:line="88" pos:column="15">(<argument><expr><name pos:line="88" pos:column="16">host<pos:position pos:line="88" pos:column="20"/></name></expr></argument>)<pos:position pos:line="88" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="22"/></expr_stmt></block></then></if>

        <if pos:line="90" pos:column="9">if<condition pos:line="90" pos:column="11">(<expr><name pos:line="90" pos:column="12">CURLE_OK<pos:position pos:line="90" pos:column="20"/></name> <operator pos:line="90" pos:column="21">==<pos:position pos:line="90" pos:column="23"/></operator> <name pos:line="90" pos:column="24">result<pos:position pos:line="90" pos:column="30"/></name></expr>)<pos:position pos:line="90" pos:column="31"/></condition><then pos:line="90" pos:column="31">
          <comment type="block" pos:line="91" pos:column="11">/* CRLF terminate the request */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="11">result<pos:position pos:line="92" pos:column="17"/></name> <operator pos:line="92" pos:column="18">=<pos:position pos:line="92" pos:column="19"/></operator> <call><name pos:line="92" pos:column="20">add_bufferf<pos:position pos:line="92" pos:column="31"/></name><argument_list pos:line="92" pos:column="31">(<argument><expr><name pos:line="92" pos:column="32">req_buffer<pos:position pos:line="92" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="44">"\r\n"<pos:position pos:line="92" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="52"/></expr_stmt></block></then></if>

        <if pos:line="94" pos:column="9">if<condition pos:line="94" pos:column="11">(<expr><name pos:line="94" pos:column="12">CURLE_OK<pos:position pos:line="94" pos:column="20"/></name> <operator pos:line="94" pos:column="21">==<pos:position pos:line="94" pos:column="23"/></operator> <name pos:line="94" pos:column="24">result<pos:position pos:line="94" pos:column="30"/></name></expr>)<pos:position pos:line="94" pos:column="31"/></condition><then pos:line="94" pos:column="31">
          <comment type="block" pos:line="95" pos:column="11">/* Now send off the request */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="11">result<pos:position pos:line="96" pos:column="17"/></name> <operator pos:line="96" pos:column="18">=<pos:position pos:line="96" pos:column="19"/></operator> <call><name pos:line="96" pos:column="20">add_buffer_send<pos:position pos:line="96" pos:column="35"/></name><argument_list pos:line="96" pos:column="35">(<argument><expr><name pos:line="96" pos:column="36">req_buffer<pos:position pos:line="96" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="48">conn<pos:position pos:line="96" pos:column="52"/></name></expr></argument>,
                                   <argument><expr><operator pos:line="97" pos:column="36">&amp;<pos:position pos:line="97" pos:column="41"/></operator><name><name pos:line="97" pos:column="37">data<pos:position pos:line="97" pos:column="41"/></name><operator pos:line="97" pos:column="41">-&gt;<pos:position pos:line="97" pos:column="46"/></operator><name pos:line="97" pos:column="43">info<pos:position pos:line="97" pos:column="47"/></name><operator pos:line="97" pos:column="47">.<pos:position pos:line="97" pos:column="48"/></operator><name pos:line="97" pos:column="48">request_size<pos:position pos:line="97" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="62"/></expr_stmt></block></then></if>
      }<pos:position pos:line="98" pos:column="8"/></block></then></if>
      <if pos:line="99" pos:column="7">if<condition pos:line="99" pos:column="9">(<expr><name pos:line="99" pos:column="10">result<pos:position pos:line="99" pos:column="16"/></name></expr>)<pos:position pos:line="99" pos:column="17"/></condition><then pos:line="99" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="9">failf<pos:position pos:line="100" pos:column="14"/></name><argument_list pos:line="100" pos:column="14">(<argument><expr><name pos:line="100" pos:column="15">data<pos:position pos:line="100" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="21">"Failed sending CONNECT to proxy"<pos:position pos:line="100" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="56"/></expr_stmt></block></then></if>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">free<pos:position pos:line="102" pos:column="9"/></name><argument_list pos:line="102" pos:column="9">(<argument><expr><name pos:line="102" pos:column="10">host_port<pos:position pos:line="102" pos:column="19"/></name></expr></argument>)<pos:position pos:line="102" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="21"/></expr_stmt>
    <if pos:line="103" pos:column="5">if<condition pos:line="103" pos:column="7">(<expr><name pos:line="103" pos:column="8">result<pos:position pos:line="103" pos:column="14"/></name></expr>)<pos:position pos:line="103" pos:column="15"/></condition><then pos:line="103" pos:column="15">
      <block type="pseudo"><return pos:line="104" pos:column="7">return <expr><name pos:line="104" pos:column="14">result<pos:position pos:line="104" pos:column="20"/></name></expr>;<pos:position pos:line="104" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="106" pos:column="5">ptr<pos:position pos:line="106" pos:column="8"/></name><operator pos:line="106" pos:column="8">=<pos:position pos:line="106" pos:column="9"/></operator><name><name pos:line="106" pos:column="9">data<pos:position pos:line="106" pos:column="13"/></name><operator pos:line="106" pos:column="13">-&gt;<pos:position pos:line="106" pos:column="18"/></operator><name pos:line="106" pos:column="15">state<pos:position pos:line="106" pos:column="20"/></name><operator pos:line="106" pos:column="20">.<pos:position pos:line="106" pos:column="21"/></operator><name pos:line="106" pos:column="21">buffer<pos:position pos:line="106" pos:column="27"/></name></name></expr>;<pos:position pos:line="106" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="107" pos:column="5">line_start<pos:position pos:line="107" pos:column="15"/></name> <operator pos:line="107" pos:column="16">=<pos:position pos:line="107" pos:column="17"/></operator> <name pos:line="107" pos:column="18">ptr<pos:position pos:line="107" pos:column="21"/></name></expr>;<pos:position pos:line="107" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><name pos:line="109" pos:column="5">nread<pos:position pos:line="109" pos:column="10"/></name><operator pos:line="109" pos:column="10">=<pos:position pos:line="109" pos:column="11"/></operator><literal type="number" pos:line="109" pos:column="11">0<pos:position pos:line="109" pos:column="12"/></literal></expr>;<pos:position pos:line="109" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name pos:line="110" pos:column="5">perline<pos:position pos:line="110" pos:column="12"/></name><operator pos:line="110" pos:column="12">=<pos:position pos:line="110" pos:column="13"/></operator><literal type="number" pos:line="110" pos:column="13">0<pos:position pos:line="110" pos:column="14"/></literal></expr>;<pos:position pos:line="110" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="111" pos:column="5">keepon<pos:position pos:line="111" pos:column="11"/></name><operator pos:line="111" pos:column="11">=<pos:position pos:line="111" pos:column="12"/></operator><name pos:line="111" pos:column="12">TRUE<pos:position pos:line="111" pos:column="16"/></name></expr>;<pos:position pos:line="111" pos:column="17"/></expr_stmt>

    <while pos:line="113" pos:column="5">while<condition pos:line="113" pos:column="10">(<expr><operator pos:line="113" pos:column="11">(<pos:position pos:line="113" pos:column="12"/></operator><name pos:line="113" pos:column="12">nread<pos:position pos:line="113" pos:column="17"/></name><operator pos:line="113" pos:column="17">&lt;<pos:position pos:line="113" pos:column="21"/></operator><name pos:line="113" pos:column="18">BUFSIZE<pos:position pos:line="113" pos:column="25"/></name><operator pos:line="113" pos:column="25">)<pos:position pos:line="113" pos:column="26"/></operator> <operator pos:line="113" pos:column="27">&amp;&amp;<pos:position pos:line="113" pos:column="37"/></operator> <operator pos:line="113" pos:column="30">(<pos:position pos:line="113" pos:column="31"/></operator><name pos:line="113" pos:column="31">keepon<pos:position pos:line="113" pos:column="37"/></name> <operator pos:line="113" pos:column="38">&amp;&amp;<pos:position pos:line="113" pos:column="48"/></operator> <operator pos:line="113" pos:column="41">!<pos:position pos:line="113" pos:column="42"/></operator><name pos:line="113" pos:column="42">error<pos:position pos:line="113" pos:column="47"/></name><operator pos:line="113" pos:column="47">)<pos:position pos:line="113" pos:column="48"/></operator></expr>)<pos:position pos:line="113" pos:column="49"/></condition> <block pos:line="113" pos:column="50">{

      <comment type="block" pos:line="115" pos:column="7">/* if timeout is requested, find out how much remaining time we have */</comment>
      <decl_stmt><decl><type><name pos:line="116" pos:column="7">long<pos:position pos:line="116" pos:column="11"/></name></type> <name pos:line="116" pos:column="12">check<pos:position pos:line="116" pos:column="17"/></name> <init pos:line="116" pos:column="18">= <expr><name pos:line="116" pos:column="20">timeout<pos:position pos:line="116" pos:column="27"/></name> <operator pos:line="116" pos:column="28">-<pos:position pos:line="116" pos:column="29"/></operator> <comment type="block" pos:line="116" pos:column="30">/* timeout time */</comment>
        <call><name pos:line="117" pos:column="9">Curl_tvdiff<pos:position pos:line="117" pos:column="20"/></name><argument_list pos:line="117" pos:column="20">(<argument><expr><call><name pos:line="117" pos:column="21">Curl_tvnow<pos:position pos:line="117" pos:column="31"/></name><argument_list pos:line="117" pos:column="31">()<pos:position pos:line="117" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="35">conn<pos:position pos:line="117" pos:column="39"/></name><operator pos:line="117" pos:column="39">-&gt;<pos:position pos:line="117" pos:column="44"/></operator><name pos:line="117" pos:column="41">now<pos:position pos:line="117" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="45"/></argument_list></call><operator pos:line="117" pos:column="45">/<pos:position pos:line="117" pos:column="46"/></operator><literal type="number" pos:line="117" pos:column="46">1000<pos:position pos:line="117" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="117" pos:column="51"/></decl_stmt> <comment type="block" pos:line="117" pos:column="52">/* spent time */</comment>
      <if pos:line="118" pos:column="7">if<condition pos:line="118" pos:column="9">(<expr><name pos:line="118" pos:column="10">check<pos:position pos:line="118" pos:column="15"/></name> <operator pos:line="118" pos:column="16">&lt;=<pos:position pos:line="118" pos:column="21"/></operator><literal type="number" pos:line="118" pos:column="18">0<pos:position pos:line="118" pos:column="19"/></literal></expr> )<pos:position pos:line="118" pos:column="21"/></condition><then pos:line="118" pos:column="21"> <block pos:line="118" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="119" pos:column="9">failf<pos:position pos:line="119" pos:column="14"/></name><argument_list pos:line="119" pos:column="14">(<argument><expr><name pos:line="119" pos:column="15">data<pos:position pos:line="119" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="21">"Proxy CONNECT aborted due to timeout"<pos:position pos:line="119" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="120" pos:column="9">error<pos:position pos:line="120" pos:column="14"/></name> <operator pos:line="120" pos:column="15">=<pos:position pos:line="120" pos:column="16"/></operator> <name pos:line="120" pos:column="17">SELECT_TIMEOUT<pos:position pos:line="120" pos:column="31"/></name></expr>;<pos:position pos:line="120" pos:column="32"/></expr_stmt> <comment type="block" pos:line="120" pos:column="33">/* already too little time */</comment>
        <break pos:line="121" pos:column="9">break;<pos:position pos:line="121" pos:column="15"/></break>
      }<pos:position pos:line="122" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="124" pos:column="7">/* timeout each second and check the timeout */</comment>
      <switch pos:line="125" pos:column="7">switch <condition pos:line="125" pos:column="14">(<expr><call><name pos:line="125" pos:column="15">Curl_select<pos:position pos:line="125" pos:column="26"/></name><argument_list pos:line="125" pos:column="26">(<argument><expr><name pos:line="125" pos:column="27">tunnelsocket<pos:position pos:line="125" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="41">CURL_SOCKET_BAD<pos:position pos:line="125" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="58">1000<pos:position pos:line="125" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="64"/></condition> <block pos:line="125" pos:column="65">{
      <case pos:line="126" pos:column="7">case <expr><operator pos:line="126" pos:column="12">-<pos:position pos:line="126" pos:column="13"/></operator><literal type="number" pos:line="126" pos:column="13">1<pos:position pos:line="126" pos:column="14"/></literal></expr>:<pos:position pos:line="126" pos:column="15"/></case> <comment type="block" pos:line="126" pos:column="16">/* select() error, stop reading */</comment>
        <expr_stmt><expr><name pos:line="127" pos:column="9">error<pos:position pos:line="127" pos:column="14"/></name> <operator pos:line="127" pos:column="15">=<pos:position pos:line="127" pos:column="16"/></operator> <name pos:line="127" pos:column="17">SELECT_ERROR<pos:position pos:line="127" pos:column="29"/></name></expr>;<pos:position pos:line="127" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="128" pos:column="9">failf<pos:position pos:line="128" pos:column="14"/></name><argument_list pos:line="128" pos:column="14">(<argument><expr><name pos:line="128" pos:column="15">data<pos:position pos:line="128" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="21">"Proxy CONNECT aborted due to select() error"<pos:position pos:line="128" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="68"/></expr_stmt>
        <break pos:line="129" pos:column="9">break;<pos:position pos:line="129" pos:column="15"/></break>
      <case pos:line="130" pos:column="7">case <expr><literal type="number" pos:line="130" pos:column="12">0<pos:position pos:line="130" pos:column="13"/></literal></expr>:<pos:position pos:line="130" pos:column="14"/></case> <comment type="block" pos:line="130" pos:column="15">/* timeout */</comment>
        <break pos:line="131" pos:column="9">break;<pos:position pos:line="131" pos:column="15"/></break>
      <default pos:line="132" pos:column="7">default:<pos:position pos:line="132" pos:column="15"/></default>
        <expr_stmt><expr><name pos:line="133" pos:column="9">res<pos:position pos:line="133" pos:column="12"/></name> <operator pos:line="133" pos:column="13">=<pos:position pos:line="133" pos:column="14"/></operator> <call><name pos:line="133" pos:column="15">Curl_read<pos:position pos:line="133" pos:column="24"/></name><argument_list pos:line="133" pos:column="24">(<argument><expr><name pos:line="133" pos:column="25">conn<pos:position pos:line="133" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="31">tunnelsocket<pos:position pos:line="133" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="45">ptr<pos:position pos:line="133" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="50">BUFSIZE<pos:position pos:line="133" pos:column="57"/></name><operator pos:line="133" pos:column="57">-<pos:position pos:line="133" pos:column="58"/></operator><name pos:line="133" pos:column="58">nread<pos:position pos:line="133" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="133" pos:column="65">&amp;<pos:position pos:line="133" pos:column="70"/></operator><name pos:line="133" pos:column="66">gotbytes<pos:position pos:line="133" pos:column="74"/></name></expr></argument>)<pos:position pos:line="133" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="76"/></expr_stmt>
        <if pos:line="134" pos:column="9">if<condition pos:line="134" pos:column="11">(<expr><name pos:line="134" pos:column="12">res<pos:position pos:line="134" pos:column="15"/></name><operator pos:line="134" pos:column="15">&lt;<pos:position pos:line="134" pos:column="19"/></operator> <literal type="number" pos:line="134" pos:column="17">0<pos:position pos:line="134" pos:column="18"/></literal></expr>)<pos:position pos:line="134" pos:column="19"/></condition><then pos:line="134" pos:column="19">
          <comment type="block" pos:line="135" pos:column="11">/* EWOULDBLOCK */</comment>
          <block type="pseudo"><continue pos:line="136" pos:column="11">continue;<pos:position pos:line="136" pos:column="20"/></continue></block></then> <comment type="block" pos:line="136" pos:column="21">/* go loop yourself */</comment>
        <elseif pos:line="137" pos:column="9">else <if pos:line="137" pos:column="14">if<condition pos:line="137" pos:column="16">(<expr><name pos:line="137" pos:column="17">res<pos:position pos:line="137" pos:column="20"/></name></expr>)<pos:position pos:line="137" pos:column="21"/></condition><then pos:line="137" pos:column="21">
          <block type="pseudo"><expr_stmt><expr><name pos:line="138" pos:column="11">keepon<pos:position pos:line="138" pos:column="17"/></name> <operator pos:line="138" pos:column="18">=<pos:position pos:line="138" pos:column="19"/></operator> <name pos:line="138" pos:column="20">FALSE<pos:position pos:line="138" pos:column="25"/></name></expr>;<pos:position pos:line="138" pos:column="26"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="139" pos:column="9">else <if pos:line="139" pos:column="14">if<condition pos:line="139" pos:column="16">(<expr><name pos:line="139" pos:column="17">gotbytes<pos:position pos:line="139" pos:column="25"/></name> <operator pos:line="139" pos:column="26">&lt;=<pos:position pos:line="139" pos:column="31"/></operator> <literal type="number" pos:line="139" pos:column="29">0<pos:position pos:line="139" pos:column="30"/></literal></expr>)<pos:position pos:line="139" pos:column="31"/></condition><then pos:line="139" pos:column="31"> <block pos:line="139" pos:column="32">{
          <expr_stmt><expr><name pos:line="140" pos:column="11">keepon<pos:position pos:line="140" pos:column="17"/></name> <operator pos:line="140" pos:column="18">=<pos:position pos:line="140" pos:column="19"/></operator> <name pos:line="140" pos:column="20">FALSE<pos:position pos:line="140" pos:column="25"/></name></expr>;<pos:position pos:line="140" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><name pos:line="141" pos:column="11">error<pos:position pos:line="141" pos:column="16"/></name> <operator pos:line="141" pos:column="17">=<pos:position pos:line="141" pos:column="18"/></operator> <name pos:line="141" pos:column="19">SELECT_ERROR<pos:position pos:line="141" pos:column="31"/></name></expr>;<pos:position pos:line="141" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="142" pos:column="11">failf<pos:position pos:line="142" pos:column="16"/></name><argument_list pos:line="142" pos:column="16">(<argument><expr><name pos:line="142" pos:column="17">data<pos:position pos:line="142" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="142" pos:column="23">"Proxy CONNECT aborted"<pos:position pos:line="142" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="143" pos:column="10"/></block></then></if></elseif>
        <else pos:line="144" pos:column="9">else <block pos:line="144" pos:column="14">{
          <comment type="block" pos:line="145" pos:column="11">/*
           * We got a whole chunk of data, which can be anything from one byte
           * to a set of lines and possibly just a piece of the last line.
           */</comment>
          <decl_stmt><decl><type><name pos:line="149" pos:column="11">int<pos:position pos:line="149" pos:column="14"/></name></type> <name pos:line="149" pos:column="15">i<pos:position pos:line="149" pos:column="16"/></name></decl>;<pos:position pos:line="149" pos:column="17"/></decl_stmt>

          <expr_stmt><expr><name pos:line="151" pos:column="11">nread<pos:position pos:line="151" pos:column="16"/></name> <operator pos:line="151" pos:column="17">+=<pos:position pos:line="151" pos:column="19"/></operator> <name pos:line="151" pos:column="20">gotbytes<pos:position pos:line="151" pos:column="28"/></name></expr>;<pos:position pos:line="151" pos:column="29"/></expr_stmt>
          <for pos:line="152" pos:column="11">for<control pos:line="152" pos:column="14">(<init><expr><name pos:line="152" pos:column="15">i<pos:position pos:line="152" pos:column="16"/></name> <operator pos:line="152" pos:column="17">=<pos:position pos:line="152" pos:column="18"/></operator> <literal type="number" pos:line="152" pos:column="19">0<pos:position pos:line="152" pos:column="20"/></literal></expr>;<pos:position pos:line="152" pos:column="21"/></init> <condition><expr><name pos:line="152" pos:column="22">i<pos:position pos:line="152" pos:column="23"/></name> <operator pos:line="152" pos:column="24">&lt;<pos:position pos:line="152" pos:column="28"/></operator> <name pos:line="152" pos:column="26">gotbytes<pos:position pos:line="152" pos:column="34"/></name></expr>;<pos:position pos:line="152" pos:column="35"/></condition> <incr><expr><name pos:line="152" pos:column="36">ptr<pos:position pos:line="152" pos:column="39"/></name><operator pos:line="152" pos:column="39">++<pos:position pos:line="152" pos:column="41"/></operator></expr><operator pos:line="152" pos:column="41">,<pos:position pos:line="152" pos:column="42"/></operator> <expr><name pos:line="152" pos:column="43">i<pos:position pos:line="152" pos:column="44"/></name><operator pos:line="152" pos:column="44">++<pos:position pos:line="152" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="152" pos:column="47"/></control> <block pos:line="152" pos:column="48">{
            <expr_stmt><expr><name pos:line="153" pos:column="13">perline<pos:position pos:line="153" pos:column="20"/></name><operator pos:line="153" pos:column="20">++<pos:position pos:line="153" pos:column="22"/></operator></expr>;<pos:position pos:line="153" pos:column="23"/></expr_stmt> <comment type="block" pos:line="153" pos:column="24">/* amount of bytes in this line so far */</comment>
            <if pos:line="154" pos:column="13">if<condition pos:line="154" pos:column="15">(<expr><operator pos:line="154" pos:column="16">*<pos:position pos:line="154" pos:column="17"/></operator><name pos:line="154" pos:column="17">ptr<pos:position pos:line="154" pos:column="20"/></name><operator pos:line="154" pos:column="20">==<pos:position pos:line="154" pos:column="22"/></operator><literal type="char" pos:line="154" pos:column="22">'\n'<pos:position pos:line="154" pos:column="26"/></literal></expr>)<pos:position pos:line="154" pos:column="27"/></condition><then pos:line="154" pos:column="27"> <block pos:line="154" pos:column="28">{
              <decl_stmt><decl><type><name pos:line="155" pos:column="15">char<pos:position pos:line="155" pos:column="19"/></name></type> <name pos:line="155" pos:column="20">letter<pos:position pos:line="155" pos:column="26"/></name></decl>;<pos:position pos:line="155" pos:column="27"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="156" pos:column="15">int<pos:position pos:line="156" pos:column="18"/></name></type> <name pos:line="156" pos:column="19">writetype<pos:position pos:line="156" pos:column="28"/></name></decl>;<pos:position pos:line="156" pos:column="29"/></decl_stmt>

              <comment type="block" pos:line="158" pos:column="15">/* output debug if that is requested */</comment>
              <if pos:line="159" pos:column="15">if<condition pos:line="159" pos:column="17">(<expr><name><name pos:line="159" pos:column="18">data<pos:position pos:line="159" pos:column="22"/></name><operator pos:line="159" pos:column="22">-&gt;<pos:position pos:line="159" pos:column="27"/></operator><name pos:line="159" pos:column="24">set<pos:position pos:line="159" pos:column="27"/></name><operator pos:line="159" pos:column="27">.<pos:position pos:line="159" pos:column="28"/></operator><name pos:line="159" pos:column="28">verbose<pos:position pos:line="159" pos:column="35"/></name></name></expr>)<pos:position pos:line="159" pos:column="36"/></condition><then pos:line="159" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="160" pos:column="17">Curl_debug<pos:position pos:line="160" pos:column="27"/></name><argument_list pos:line="160" pos:column="27">(<argument><expr><name pos:line="160" pos:column="28">data<pos:position pos:line="160" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="34">CURLINFO_HEADER_IN<pos:position pos:line="160" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="54">line_start<pos:position pos:line="160" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="66">perline<pos:position pos:line="160" pos:column="73"/></name></expr></argument>,
                           <argument><expr><name pos:line="161" pos:column="28">conn<pos:position pos:line="161" pos:column="32"/></name></expr></argument>)<pos:position pos:line="161" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="34"/></expr_stmt></block></then></if>

              <comment type="block" pos:line="163" pos:column="15">/* send the header to the callback */</comment>
              <expr_stmt><expr><name pos:line="164" pos:column="15">writetype<pos:position pos:line="164" pos:column="24"/></name> <operator pos:line="164" pos:column="25">=<pos:position pos:line="164" pos:column="26"/></operator> <name pos:line="164" pos:column="27">CLIENTWRITE_HEADER<pos:position pos:line="164" pos:column="45"/></name></expr>;<pos:position pos:line="164" pos:column="46"/></expr_stmt>
              <if pos:line="165" pos:column="15">if<condition pos:line="165" pos:column="17">(<expr><name><name pos:line="165" pos:column="18">data<pos:position pos:line="165" pos:column="22"/></name><operator pos:line="165" pos:column="22">-&gt;<pos:position pos:line="165" pos:column="27"/></operator><name pos:line="165" pos:column="24">set<pos:position pos:line="165" pos:column="27"/></name><operator pos:line="165" pos:column="27">.<pos:position pos:line="165" pos:column="28"/></operator><name pos:line="165" pos:column="28">include_header<pos:position pos:line="165" pos:column="42"/></name></name></expr>)<pos:position pos:line="165" pos:column="43"/></condition><then pos:line="165" pos:column="43">
                <block type="pseudo"><expr_stmt><expr><name pos:line="166" pos:column="17">writetype<pos:position pos:line="166" pos:column="26"/></name> <operator pos:line="166" pos:column="27">|=<pos:position pos:line="166" pos:column="29"/></operator> <name pos:line="166" pos:column="30">CLIENTWRITE_BODY<pos:position pos:line="166" pos:column="46"/></name></expr>;<pos:position pos:line="166" pos:column="47"/></expr_stmt></block></then></if>

              <expr_stmt><expr><name pos:line="168" pos:column="15">result<pos:position pos:line="168" pos:column="21"/></name> <operator pos:line="168" pos:column="22">=<pos:position pos:line="168" pos:column="23"/></operator> <call><name pos:line="168" pos:column="24">Curl_client_write<pos:position pos:line="168" pos:column="41"/></name><argument_list pos:line="168" pos:column="41">(<argument><expr><name pos:line="168" pos:column="42">data<pos:position pos:line="168" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="48">writetype<pos:position pos:line="168" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="59">line_start<pos:position pos:line="168" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="71">perline<pos:position pos:line="168" pos:column="78"/></name></expr></argument>)<pos:position pos:line="168" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="80"/></expr_stmt>
              <if pos:line="169" pos:column="15">if<condition pos:line="169" pos:column="17">(<expr><name pos:line="169" pos:column="18">result<pos:position pos:line="169" pos:column="24"/></name></expr>)<pos:position pos:line="169" pos:column="25"/></condition><then pos:line="169" pos:column="25">
                <block type="pseudo"><return pos:line="170" pos:column="17">return <expr><name pos:line="170" pos:column="24">result<pos:position pos:line="170" pos:column="30"/></name></expr>;<pos:position pos:line="170" pos:column="31"/></return></block></then></if>

              <comment type="block" pos:line="172" pos:column="15">/* Newlines are CRLF, so the CR is ignored as the line isn't
                 really terminated until the LF comes. Treat a following CR
                 as end-of-headers as well.*/</comment>

              <if pos:line="176" pos:column="15">if<condition pos:line="176" pos:column="17">(<expr><operator pos:line="176" pos:column="18">(<pos:position pos:line="176" pos:column="19"/></operator><literal type="char" pos:line="176" pos:column="19">'\r'<pos:position pos:line="176" pos:column="23"/></literal> <operator pos:line="176" pos:column="24">==<pos:position pos:line="176" pos:column="26"/></operator> <name><name pos:line="176" pos:column="27">line_start<pos:position pos:line="176" pos:column="37"/></name><index pos:line="176" pos:column="37">[<expr><literal type="number" pos:line="176" pos:column="38">0<pos:position pos:line="176" pos:column="39"/></literal></expr>]<pos:position pos:line="176" pos:column="40"/></index></name><operator pos:line="176" pos:column="40">)<pos:position pos:line="176" pos:column="41"/></operator> <operator pos:line="176" pos:column="42">||<pos:position pos:line="176" pos:column="44"/></operator>
                 <operator pos:line="177" pos:column="18">(<pos:position pos:line="177" pos:column="19"/></operator><literal type="char" pos:line="177" pos:column="19">'\n'<pos:position pos:line="177" pos:column="23"/></literal> <operator pos:line="177" pos:column="24">==<pos:position pos:line="177" pos:column="26"/></operator> <name><name pos:line="177" pos:column="27">line_start<pos:position pos:line="177" pos:column="37"/></name><index pos:line="177" pos:column="37">[<expr><literal type="number" pos:line="177" pos:column="38">0<pos:position pos:line="177" pos:column="39"/></literal></expr>]<pos:position pos:line="177" pos:column="40"/></index></name><operator pos:line="177" pos:column="40">)<pos:position pos:line="177" pos:column="41"/></operator></expr>)<pos:position pos:line="177" pos:column="42"/></condition><then pos:line="177" pos:column="42"> <block pos:line="177" pos:column="43">{
                <comment type="block" pos:line="178" pos:column="17">/* end of response-headers from the proxy */</comment>
                <expr_stmt><expr><name pos:line="179" pos:column="17">keepon<pos:position pos:line="179" pos:column="23"/></name><operator pos:line="179" pos:column="23">=<pos:position pos:line="179" pos:column="24"/></operator><name pos:line="179" pos:column="24">FALSE<pos:position pos:line="179" pos:column="29"/></name></expr>;<pos:position pos:line="179" pos:column="30"/></expr_stmt>
                <break pos:line="180" pos:column="17">break;<pos:position pos:line="180" pos:column="23"/></break> <comment type="block" pos:line="180" pos:column="24">/* breaks out of for-loop, not switch() */</comment>
              }<pos:position pos:line="181" pos:column="16"/></block></then></if>

              <comment type="block" pos:line="183" pos:column="15">/* keep a backup of the position we are about to blank */</comment>
              <expr_stmt><expr><name pos:line="184" pos:column="15">letter<pos:position pos:line="184" pos:column="21"/></name> <operator pos:line="184" pos:column="22">=<pos:position pos:line="184" pos:column="23"/></operator> <name><name pos:line="184" pos:column="24">line_start<pos:position pos:line="184" pos:column="34"/></name><index pos:line="184" pos:column="34">[<expr><name pos:line="184" pos:column="35">perline<pos:position pos:line="184" pos:column="42"/></name></expr>]<pos:position pos:line="184" pos:column="43"/></index></name></expr>;<pos:position pos:line="184" pos:column="44"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="185" pos:column="15">line_start<pos:position pos:line="185" pos:column="25"/></name><index pos:line="185" pos:column="25">[<expr><name pos:line="185" pos:column="26">perline<pos:position pos:line="185" pos:column="33"/></name></expr>]<pos:position pos:line="185" pos:column="34"/></index></name><operator pos:line="185" pos:column="34">=<pos:position pos:line="185" pos:column="35"/></operator><literal type="number" pos:line="185" pos:column="35">0<pos:position pos:line="185" pos:column="36"/></literal></expr>;<pos:position pos:line="185" pos:column="37"/></expr_stmt> <comment type="block" pos:line="185" pos:column="38">/* zero terminate the buffer */</comment>
              <if pos:line="186" pos:column="15">if<condition pos:line="186" pos:column="17">(<expr><operator pos:line="186" pos:column="18">(<pos:position pos:line="186" pos:column="19"/></operator><call><name pos:line="186" pos:column="19">checkprefix<pos:position pos:line="186" pos:column="30"/></name><argument_list pos:line="186" pos:column="30">(<argument><expr><literal type="string" pos:line="186" pos:column="31">"WWW-Authenticate:"<pos:position pos:line="186" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="186" pos:column="52">line_start<pos:position pos:line="186" pos:column="62"/></name></expr></argument>)<pos:position pos:line="186" pos:column="63"/></argument_list></call> <operator pos:line="186" pos:column="64">&amp;&amp;<pos:position pos:line="186" pos:column="74"/></operator>
                  <operator pos:line="187" pos:column="19">(<pos:position pos:line="187" pos:column="20"/></operator><literal type="number" pos:line="187" pos:column="20">401<pos:position pos:line="187" pos:column="23"/></literal> <operator pos:line="187" pos:column="24">==<pos:position pos:line="187" pos:column="26"/></operator> <name><name pos:line="187" pos:column="27">k<pos:position pos:line="187" pos:column="28"/></name><operator pos:line="187" pos:column="28">-&gt;<pos:position pos:line="187" pos:column="33"/></operator><name pos:line="187" pos:column="30">httpcode<pos:position pos:line="187" pos:column="38"/></name></name><operator pos:line="187" pos:column="38">)<pos:position pos:line="187" pos:column="39"/></operator><operator pos:line="187" pos:column="39">)<pos:position pos:line="187" pos:column="40"/></operator> <operator pos:line="187" pos:column="41">||<pos:position pos:line="187" pos:column="43"/></operator>
                 <operator pos:line="188" pos:column="18">(<pos:position pos:line="188" pos:column="19"/></operator><call><name pos:line="188" pos:column="19">checkprefix<pos:position pos:line="188" pos:column="30"/></name><argument_list pos:line="188" pos:column="30">(<argument><expr><literal type="string" pos:line="188" pos:column="31">"Proxy-authenticate:"<pos:position pos:line="188" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="188" pos:column="54">line_start<pos:position pos:line="188" pos:column="64"/></name></expr></argument>)<pos:position pos:line="188" pos:column="65"/></argument_list></call> <operator pos:line="188" pos:column="66">&amp;&amp;<pos:position pos:line="188" pos:column="76"/></operator>
                  <operator pos:line="189" pos:column="19">(<pos:position pos:line="189" pos:column="20"/></operator><literal type="number" pos:line="189" pos:column="20">407<pos:position pos:line="189" pos:column="23"/></literal> <operator pos:line="189" pos:column="24">==<pos:position pos:line="189" pos:column="26"/></operator> <name><name pos:line="189" pos:column="27">k<pos:position pos:line="189" pos:column="28"/></name><operator pos:line="189" pos:column="28">-&gt;<pos:position pos:line="189" pos:column="33"/></operator><name pos:line="189" pos:column="30">httpcode<pos:position pos:line="189" pos:column="38"/></name></name><operator pos:line="189" pos:column="38">)<pos:position pos:line="189" pos:column="39"/></operator><operator pos:line="189" pos:column="39">)<pos:position pos:line="189" pos:column="40"/></operator></expr>)<pos:position pos:line="189" pos:column="41"/></condition><then pos:line="189" pos:column="41"> <block pos:line="189" pos:column="42">{
                <expr_stmt><expr><name pos:line="190" pos:column="17">result<pos:position pos:line="190" pos:column="23"/></name> <operator pos:line="190" pos:column="24">=<pos:position pos:line="190" pos:column="25"/></operator> <call><name pos:line="190" pos:column="26">Curl_http_input_auth<pos:position pos:line="190" pos:column="46"/></name><argument_list pos:line="190" pos:column="46">(<argument><expr><name pos:line="190" pos:column="47">conn<pos:position pos:line="190" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="53">k<pos:position pos:line="190" pos:column="54"/></name><operator pos:line="190" pos:column="54">-&gt;<pos:position pos:line="190" pos:column="59"/></operator><name pos:line="190" pos:column="56">httpcode<pos:position pos:line="190" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="66">line_start<pos:position pos:line="190" pos:column="76"/></name></expr></argument>)<pos:position pos:line="190" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="78"/></expr_stmt>
                <if pos:line="191" pos:column="17">if<condition pos:line="191" pos:column="19">(<expr><name pos:line="191" pos:column="20">result<pos:position pos:line="191" pos:column="26"/></name></expr>)<pos:position pos:line="191" pos:column="27"/></condition><then pos:line="191" pos:column="27">
                  <block type="pseudo"><return pos:line="192" pos:column="19">return <expr><name pos:line="192" pos:column="26">result<pos:position pos:line="192" pos:column="32"/></name></expr>;<pos:position pos:line="192" pos:column="33"/></return></block></then></if>
              }<pos:position pos:line="193" pos:column="16"/></block></then>
              <elseif pos:line="194" pos:column="15">else <if pos:line="194" pos:column="20">if<condition pos:line="194" pos:column="22">(<expr><literal type="number" pos:line="194" pos:column="23">2<pos:position pos:line="194" pos:column="24"/></literal> <operator pos:line="194" pos:column="25">==<pos:position pos:line="194" pos:column="27"/></operator> <call><name pos:line="194" pos:column="28">sscanf<pos:position pos:line="194" pos:column="34"/></name><argument_list pos:line="194" pos:column="34">(<argument><expr><name pos:line="194" pos:column="35">line_start<pos:position pos:line="194" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="194" pos:column="47">"HTTP/1.%d %d"<pos:position pos:line="194" pos:column="61"/></literal></expr></argument>,
                                  <argument><expr><operator pos:line="195" pos:column="35">&amp;<pos:position pos:line="195" pos:column="40"/></operator><name pos:line="195" pos:column="36">subversion<pos:position pos:line="195" pos:column="46"/></name></expr></argument>,
                                  <argument><expr><operator pos:line="196" pos:column="35">&amp;<pos:position pos:line="196" pos:column="40"/></operator><name><name pos:line="196" pos:column="36">k<pos:position pos:line="196" pos:column="37"/></name><operator pos:line="196" pos:column="37">-&gt;<pos:position pos:line="196" pos:column="42"/></operator><name pos:line="196" pos:column="39">httpcode<pos:position pos:line="196" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="196" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="196" pos:column="49"/></condition><then pos:line="196" pos:column="49"> <block pos:line="196" pos:column="50">{
                <comment type="block" pos:line="197" pos:column="17">/* store the HTTP code from the proxy */</comment>
                <expr_stmt><expr><name><name pos:line="198" pos:column="17">data<pos:position pos:line="198" pos:column="21"/></name><operator pos:line="198" pos:column="21">-&gt;<pos:position pos:line="198" pos:column="26"/></operator><name pos:line="198" pos:column="23">info<pos:position pos:line="198" pos:column="27"/></name><operator pos:line="198" pos:column="27">.<pos:position pos:line="198" pos:column="28"/></operator><name pos:line="198" pos:column="28">httpproxycode<pos:position pos:line="198" pos:column="41"/></name></name> <operator pos:line="198" pos:column="42">=<pos:position pos:line="198" pos:column="43"/></operator> <name><name pos:line="198" pos:column="44">k<pos:position pos:line="198" pos:column="45"/></name><operator pos:line="198" pos:column="45">-&gt;<pos:position pos:line="198" pos:column="50"/></operator><name pos:line="198" pos:column="47">httpcode<pos:position pos:line="198" pos:column="55"/></name></name></expr>;<pos:position pos:line="198" pos:column="56"/></expr_stmt>
              }<pos:position pos:line="199" pos:column="16"/></block></then></if></elseif></if>
              <comment type="block" pos:line="200" pos:column="15">/* put back the letter we blanked out before */</comment>
              <expr_stmt><expr><name><name pos:line="201" pos:column="15">line_start<pos:position pos:line="201" pos:column="25"/></name><index pos:line="201" pos:column="25">[<expr><name pos:line="201" pos:column="26">perline<pos:position pos:line="201" pos:column="33"/></name></expr>]<pos:position pos:line="201" pos:column="34"/></index></name><operator pos:line="201" pos:column="34">=<pos:position pos:line="201" pos:column="35"/></operator> <name pos:line="201" pos:column="36">letter<pos:position pos:line="201" pos:column="42"/></name></expr>;<pos:position pos:line="201" pos:column="43"/></expr_stmt>

              <expr_stmt><expr><name pos:line="203" pos:column="15">perline<pos:position pos:line="203" pos:column="22"/></name><operator pos:line="203" pos:column="22">=<pos:position pos:line="203" pos:column="23"/></operator><literal type="number" pos:line="203" pos:column="23">0<pos:position pos:line="203" pos:column="24"/></literal></expr>;<pos:position pos:line="203" pos:column="25"/></expr_stmt> <comment type="block" pos:line="203" pos:column="26">/* line starts over here */</comment>
              <expr_stmt><expr><name pos:line="204" pos:column="15">line_start<pos:position pos:line="204" pos:column="25"/></name> <operator pos:line="204" pos:column="26">=<pos:position pos:line="204" pos:column="27"/></operator> <name pos:line="204" pos:column="28">ptr<pos:position pos:line="204" pos:column="31"/></name><operator pos:line="204" pos:column="31">+<pos:position pos:line="204" pos:column="32"/></operator><literal type="number" pos:line="204" pos:column="32">1<pos:position pos:line="204" pos:column="33"/></literal></expr>;<pos:position pos:line="204" pos:column="34"/></expr_stmt> <comment type="block" pos:line="204" pos:column="35">/* this skips the zero byte we wrote */</comment>
            }<pos:position pos:line="205" pos:column="14"/></block></then></if>
          }<pos:position pos:line="206" pos:column="12"/></block></for>
        }<pos:position pos:line="207" pos:column="10"/></block></else></if>
        <break pos:line="208" pos:column="9">break;<pos:position pos:line="208" pos:column="15"/></break>
      }<pos:position pos:line="209" pos:column="8"/></block></switch> <comment type="block" pos:line="209" pos:column="9">/* switch */</comment>
    }<pos:position pos:line="210" pos:column="6"/></block></while> <comment type="block" pos:line="210" pos:column="7">/* while there's buffer left and loop is requested */</comment>

    <if pos:line="212" pos:column="5">if<condition pos:line="212" pos:column="7">(<expr><name pos:line="212" pos:column="8">error<pos:position pos:line="212" pos:column="13"/></name></expr>)<pos:position pos:line="212" pos:column="14"/></condition><then pos:line="212" pos:column="14">
      <block type="pseudo"><return pos:line="213" pos:column="7">return <expr><name pos:line="213" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="213" pos:column="30"/></name></expr>;<pos:position pos:line="213" pos:column="31"/></return></block></then></if>

    <if pos:line="215" pos:column="5">if<condition pos:line="215" pos:column="7">(<expr><name><name pos:line="215" pos:column="8">data<pos:position pos:line="215" pos:column="12"/></name><operator pos:line="215" pos:column="12">-&gt;<pos:position pos:line="215" pos:column="17"/></operator><name pos:line="215" pos:column="14">info<pos:position pos:line="215" pos:column="18"/></name><operator pos:line="215" pos:column="18">.<pos:position pos:line="215" pos:column="19"/></operator><name pos:line="215" pos:column="19">httpproxycode<pos:position pos:line="215" pos:column="32"/></name></name> <operator pos:line="215" pos:column="33">!=<pos:position pos:line="215" pos:column="35"/></operator> <literal type="number" pos:line="215" pos:column="36">200<pos:position pos:line="215" pos:column="39"/></literal></expr>)<pos:position pos:line="215" pos:column="40"/></condition><then pos:line="215" pos:column="40">
      <comment type="block" pos:line="216" pos:column="7">/* Deal with the possibly already received authenticate
         headers. 'newurl' is set to a new URL if we must loop. */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="218" pos:column="7">Curl_http_auth_act<pos:position pos:line="218" pos:column="25"/></name><argument_list pos:line="218" pos:column="25">(<argument><expr><name pos:line="218" pos:column="26">conn<pos:position pos:line="218" pos:column="30"/></name></expr></argument>)<pos:position pos:line="218" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="32"/></expr_stmt></block></then></if>

  }<pos:position pos:line="220" pos:column="4"/></block> while<condition pos:line="220" pos:column="10">(<expr><name><name pos:line="220" pos:column="11">conn<pos:position pos:line="220" pos:column="15"/></name><operator pos:line="220" pos:column="15">-&gt;<pos:position pos:line="220" pos:column="20"/></operator><name pos:line="220" pos:column="17">newurl<pos:position pos:line="220" pos:column="23"/></name></name></expr>)<pos:position pos:line="220" pos:column="24"/></condition>;<pos:position pos:line="220" pos:column="25"/></do>

  <if pos:line="222" pos:column="3">if<condition pos:line="222" pos:column="5">(<expr><literal type="number" pos:line="222" pos:column="6">200<pos:position pos:line="222" pos:column="9"/></literal> <operator pos:line="222" pos:column="10">!=<pos:position pos:line="222" pos:column="12"/></operator> <name><name pos:line="222" pos:column="13">k<pos:position pos:line="222" pos:column="14"/></name><operator pos:line="222" pos:column="14">-&gt;<pos:position pos:line="222" pos:column="19"/></operator><name pos:line="222" pos:column="16">httpcode<pos:position pos:line="222" pos:column="24"/></name></name></expr>)<pos:position pos:line="222" pos:column="25"/></condition><then pos:line="222" pos:column="25"> <block pos:line="222" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="223" pos:column="5">failf<pos:position pos:line="223" pos:column="10"/></name><argument_list pos:line="223" pos:column="10">(<argument><expr><name pos:line="223" pos:column="11">data<pos:position pos:line="223" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="223" pos:column="17">"Received HTTP code %d from proxy after CONNECT"<pos:position pos:line="223" pos:column="65"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="224" pos:column="11">k<pos:position pos:line="224" pos:column="12"/></name><operator pos:line="224" pos:column="12">-&gt;<pos:position pos:line="224" pos:column="17"/></operator><name pos:line="224" pos:column="14">httpcode<pos:position pos:line="224" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="224" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="24"/></expr_stmt>
    <return pos:line="225" pos:column="5">return <expr><name pos:line="225" pos:column="12">CURLE_RECV_ERROR<pos:position pos:line="225" pos:column="28"/></name></expr>;<pos:position pos:line="225" pos:column="29"/></return>
  }<pos:position pos:line="226" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="228" pos:column="3">/* If a proxy-authorization header was used for the proxy, then we should
     make sure that it isn't accidentally used for the document request
     after we've connected. So let's free and clear it here. */</comment>
  <expr_stmt><expr><call><name pos:line="231" pos:column="3">Curl_safefree<pos:position pos:line="231" pos:column="16"/></name><argument_list pos:line="231" pos:column="16">(<argument><expr><name><name pos:line="231" pos:column="17">conn<pos:position pos:line="231" pos:column="21"/></name><operator pos:line="231" pos:column="21">-&gt;<pos:position pos:line="231" pos:column="26"/></operator><name pos:line="231" pos:column="23">allocptr<pos:position pos:line="231" pos:column="31"/></name><operator pos:line="231" pos:column="31">.<pos:position pos:line="231" pos:column="32"/></operator><name pos:line="231" pos:column="32">proxyuserpwd<pos:position pos:line="231" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="231" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="232" pos:column="3">conn<pos:position pos:line="232" pos:column="7"/></name><operator pos:line="232" pos:column="7">-&gt;<pos:position pos:line="232" pos:column="12"/></operator><name pos:line="232" pos:column="9">allocptr<pos:position pos:line="232" pos:column="17"/></name><operator pos:line="232" pos:column="17">.<pos:position pos:line="232" pos:column="18"/></operator><name pos:line="232" pos:column="18">proxyuserpwd<pos:position pos:line="232" pos:column="30"/></name></name> <operator pos:line="232" pos:column="31">=<pos:position pos:line="232" pos:column="32"/></operator> <name pos:line="232" pos:column="33">NULL<pos:position pos:line="232" pos:column="37"/></name></expr>;<pos:position pos:line="232" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="234" pos:column="3">data<pos:position pos:line="234" pos:column="7"/></name><operator pos:line="234" pos:column="7">-&gt;<pos:position pos:line="234" pos:column="12"/></operator><name pos:line="234" pos:column="9">state<pos:position pos:line="234" pos:column="14"/></name><operator pos:line="234" pos:column="14">.<pos:position pos:line="234" pos:column="15"/></operator><name pos:line="234" pos:column="15">authproxy<pos:position pos:line="234" pos:column="24"/></name><operator pos:line="234" pos:column="24">.<pos:position pos:line="234" pos:column="25"/></operator><name pos:line="234" pos:column="25">done<pos:position pos:line="234" pos:column="29"/></name></name> <operator pos:line="234" pos:column="30">=<pos:position pos:line="234" pos:column="31"/></operator> <name pos:line="234" pos:column="32">TRUE<pos:position pos:line="234" pos:column="36"/></name></expr>;<pos:position pos:line="234" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="236" pos:column="3">infof<pos:position pos:line="236" pos:column="8"/></name> <argument_list pos:line="236" pos:column="9">(<argument><expr><name pos:line="236" pos:column="10">data<pos:position pos:line="236" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="236" pos:column="16">"Proxy replied OK to CONNECT request\n"<pos:position pos:line="236" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="57"/></expr_stmt>
  <return pos:line="237" pos:column="3">return <expr><name pos:line="237" pos:column="10">CURLE_OK<pos:position pos:line="237" pos:column="18"/></name></expr>;<pos:position pos:line="237" pos:column="19"/></return>
}<pos:position pos:line="238" pos:column="2"/></block></function></unit>
