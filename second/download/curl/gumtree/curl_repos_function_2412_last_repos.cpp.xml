<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2412_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">mbed_connect_step1<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name><name pos:line="2" pos:column="20">struct<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">connectdata<pos:position pos:line="2" pos:column="38"/></name></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">conn<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="3" pos:column="20">int<pos:position pos:line="3" pos:column="23"/></name></type> <name pos:line="3" pos:column="24">sockindex<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="34"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">ssl_connect_data<pos:position pos:line="6" pos:column="26"/></name></name><modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier></type> <name pos:line="6" pos:column="28">connssl<pos:position pos:line="6" pos:column="35"/></name> <init pos:line="6" pos:column="36">= <expr><operator pos:line="6" pos:column="38">&amp;<pos:position pos:line="6" pos:column="43"/></operator><name><name pos:line="6" pos:column="39">conn<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">-&gt;<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="45">ssl<pos:position pos:line="6" pos:column="48"/></name><index pos:line="6" pos:column="48">[<expr><name pos:line="6" pos:column="49">sockindex<pos:position pos:line="6" pos:column="58"/></name></expr>]<pos:position pos:line="6" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier> <specifier pos:line="7" pos:column="16">const<pos:position pos:line="7" pos:column="21"/></specifier></type> <name pos:line="7" pos:column="22">ssl_cafile<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><call><name pos:line="7" pos:column="35">SSL_CONN_CONFIG<pos:position pos:line="7" pos:column="50"/></name><argument_list pos:line="7" pos:column="50">(<argument><expr><name pos:line="7" pos:column="51">CAfile<pos:position pos:line="7" pos:column="57"/></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">bool<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">verifypeer<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name pos:line="8" pos:column="27">SSL_CONN_CONFIG<pos:position pos:line="8" pos:column="42"/></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">verifypeer<pos:position pos:line="8" pos:column="53"/></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="55"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier> <specifier pos:line="9" pos:column="16">const<pos:position pos:line="9" pos:column="21"/></specifier></type> <name pos:line="9" pos:column="22">ssl_capath<pos:position pos:line="9" pos:column="32"/></name> <init pos:line="9" pos:column="33">= <expr><call><name pos:line="9" pos:column="35">SSL_CONN_CONFIG<pos:position pos:line="9" pos:column="50"/></name><argument_list pos:line="9" pos:column="50">(<argument><expr><name pos:line="9" pos:column="51">CApath<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier> <specifier pos:line="10" pos:column="10">const<pos:position pos:line="10" pos:column="15"/></specifier></type> <name pos:line="10" pos:column="16">ssl_cert<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><call><name pos:line="10" pos:column="27">SSL_SET_OPTION<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><name pos:line="10" pos:column="42">cert<pos:position pos:line="10" pos:column="46"/></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier> <specifier pos:line="11" pos:column="16">const<pos:position pos:line="11" pos:column="21"/></specifier></type> <name pos:line="11" pos:column="22">ssl_crlfile<pos:position pos:line="11" pos:column="33"/></name> <init pos:line="11" pos:column="34">= <expr><call><name pos:line="11" pos:column="36">SSL_SET_OPTION<pos:position pos:line="11" pos:column="50"/></name><argument_list pos:line="11" pos:column="50">(<argument><expr><name pos:line="11" pos:column="51">CRLfile<pos:position pos:line="11" pos:column="58"/></name></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="12" pos:column="3">const<pos:position pos:line="12" pos:column="8"/></specifier> <name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier> <specifier pos:line="12" pos:column="16">const<pos:position pos:line="12" pos:column="21"/></specifier></type> <name pos:line="12" pos:column="22">hostname<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="12" pos:column="33">SSL_IS_PROXY<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">()<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="12" pos:column="49"/></condition><then pos:line="12" pos:column="49"> <expr><name><name pos:line="12" pos:column="50">conn<pos:position pos:line="12" pos:column="54"/></name><operator pos:line="12" pos:column="54">-&gt;<pos:position pos:line="12" pos:column="59"/></operator><name pos:line="12" pos:column="56">http_proxy<pos:position pos:line="12" pos:column="66"/></name><operator pos:line="12" pos:column="66">.<pos:position pos:line="12" pos:column="67"/></operator><name pos:line="12" pos:column="67">host<pos:position pos:line="12" pos:column="71"/></name><operator pos:line="12" pos:column="71">.<pos:position pos:line="12" pos:column="72"/></operator><name pos:line="12" pos:column="72">name<pos:position pos:line="12" pos:column="76"/></name></name></expr> <pos:position pos:line="12" pos:column="77"/></then><else pos:line="12" pos:column="77">:
    <expr><name><name pos:line="13" pos:column="5">conn<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">-&gt;<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="11">host<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">name<pos:position pos:line="13" pos:column="20"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">long<pos:position pos:line="14" pos:column="13"/></name> <name pos:line="14" pos:column="14">int<pos:position pos:line="14" pos:column="17"/></name></type> <name pos:line="14" pos:column="18">port<pos:position pos:line="14" pos:column="22"/></name> <init pos:line="14" pos:column="23">= <expr><ternary><condition><expr><call><name pos:line="14" pos:column="25">SSL_IS_PROXY<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">()<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr> ?<pos:position pos:line="14" pos:column="41"/></condition><then pos:line="14" pos:column="41"> <expr><name><name pos:line="14" pos:column="42">conn<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">-&gt;<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="48">port<pos:position pos:line="14" pos:column="52"/></name></name></expr> <pos:position pos:line="14" pos:column="53"/></then><else pos:line="14" pos:column="53">: <expr><name><name pos:line="14" pos:column="55">conn<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">-&gt;<pos:position pos:line="14" pos:column="64"/></operator><name pos:line="14" pos:column="61">remote_port<pos:position pos:line="14" pos:column="72"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="14" pos:column="73"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">ret<pos:position pos:line="15" pos:column="10"/></name> <init pos:line="15" pos:column="11">= <expr><operator pos:line="15" pos:column="13">-<pos:position pos:line="15" pos:column="14"/></operator><literal type="number" pos:line="15" pos:column="14">1<pos:position pos:line="15" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name></type> <name><name pos:line="16" pos:column="8">errorbuf<pos:position pos:line="16" pos:column="16"/></name><index pos:line="16" pos:column="16">[<expr><literal type="number" pos:line="16" pos:column="17">128<pos:position pos:line="16" pos:column="20"/></literal></expr>]<pos:position pos:line="16" pos:column="21"/></index></name></decl>;<pos:position pos:line="16" pos:column="22"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">errorbuf<pos:position pos:line="17" pos:column="11"/></name><index pos:line="17" pos:column="11">[<expr><literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>]<pos:position pos:line="17" pos:column="14"/></index></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* mbedTLS only supports SSLv3 and TLSv1 */</comment>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><call><name pos:line="20" pos:column="6">SSL_CONN_CONFIG<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">version<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call> <operator pos:line="20" pos:column="31">==<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">CURL_SSLVERSION_SSLv2<pos:position pos:line="20" pos:column="55"/></name></expr>)<pos:position pos:line="20" pos:column="56"/></condition><then pos:line="20" pos:column="56"> <block pos:line="20" pos:column="57">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">failf<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">data<pos:position pos:line="21" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="17">"mbedTLS does not support SSLv2"<pos:position pos:line="21" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="22" pos:column="35"/></name></expr>;<pos:position pos:line="22" pos:column="36"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">THREADING_SUPPORT<pos:position pos:line="25" pos:column="25"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">entropy_init_mutex<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><operator pos:line="26" pos:column="22">&amp;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="23">ts_entropy<pos:position pos:line="26" pos:column="33"/></name></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">mbedtls_ctr_drbg_init<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><operator pos:line="27" pos:column="25">&amp;<pos:position pos:line="27" pos:column="30"/></operator><name><name pos:line="27" pos:column="26">BACKEND<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">-&gt;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="35">ctr_drbg<pos:position pos:line="27" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>

  <expr_stmt><expr><name pos:line="29" pos:column="3">ret<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <call><name pos:line="29" pos:column="9">mbedtls_ctr_drbg_seed<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name><name pos:line="29" pos:column="32">BACKEND<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">-&gt;<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="41">ctr_drbg<pos:position pos:line="29" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="51">entropy_func_mutex<pos:position pos:line="29" pos:column="69"/></name></expr></argument>,
                              <argument><expr><operator pos:line="30" pos:column="31">&amp;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="32">ts_entropy<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">NULL<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="50">0<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>
  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">ret<pos:position pos:line="31" pos:column="9"/></name></expr>)<pos:position pos:line="31" pos:column="10"/></condition><then pos:line="31" pos:column="10"> <block pos:line="31" pos:column="11">{
<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="32" pos:column="23"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">mbedtls_strerror<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">ret<pos:position pos:line="33" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="27">errorbuf<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="37">sizeof<argument_list pos:line="33" pos:column="43">(<argument><expr><name pos:line="33" pos:column="44">errorbuf<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="34" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">failf<pos:position pos:line="35" pos:column="10"/></name><argument_list pos:line="35" pos:column="10">(<argument><expr><name pos:line="35" pos:column="11">data<pos:position pos:line="35" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="17">"Failed - mbedTLS: ctr_drbg_init returned (-0x%04X) %s\n"<pos:position pos:line="35" pos:column="74"/></literal></expr></argument>,
          <argument><expr><operator pos:line="36" pos:column="11">-<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">ret<pos:position pos:line="36" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="17">errorbuf<pos:position pos:line="36" pos:column="25"/></name></expr></argument>)<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>
<cpp:else pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">else<pos:position pos:line="38" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">mbedtls_entropy_init<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><operator pos:line="39" pos:column="24">&amp;<pos:position pos:line="39" pos:column="29"/></operator><name><name pos:line="39" pos:column="25">BACKEND<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">-&gt;<pos:position pos:line="39" pos:column="37"/></operator><name pos:line="39" pos:column="34">entropy<pos:position pos:line="39" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">mbedtls_ctr_drbg_init<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><operator pos:line="40" pos:column="25">&amp;<pos:position pos:line="40" pos:column="30"/></operator><name><name pos:line="40" pos:column="26">BACKEND<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">-&gt;<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="35">ctr_drbg<pos:position pos:line="40" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="45"/></expr_stmt>

  <expr_stmt><expr><name pos:line="42" pos:column="3">ret<pos:position pos:line="42" pos:column="6"/></name> <operator pos:line="42" pos:column="7">=<pos:position pos:line="42" pos:column="8"/></operator> <call><name pos:line="42" pos:column="9">mbedtls_ctr_drbg_seed<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><operator pos:line="42" pos:column="31">&amp;<pos:position pos:line="42" pos:column="36"/></operator><name><name pos:line="42" pos:column="32">BACKEND<pos:position pos:line="42" pos:column="39"/></name><operator pos:line="42" pos:column="39">-&gt;<pos:position pos:line="42" pos:column="44"/></operator><name pos:line="42" pos:column="41">ctr_drbg<pos:position pos:line="42" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="51">mbedtls_entropy_func<pos:position pos:line="42" pos:column="71"/></name></expr></argument>,
                              <argument><expr><operator pos:line="43" pos:column="31">&amp;<pos:position pos:line="43" pos:column="36"/></operator><name><name pos:line="43" pos:column="32">BACKEND<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">-&gt;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="41">entropy<pos:position pos:line="43" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">NULL<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="56">0<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><name pos:line="44" pos:column="6">ret<pos:position pos:line="44" pos:column="9"/></name></expr>)<pos:position pos:line="44" pos:column="10"/></condition><then pos:line="44" pos:column="10"> <block pos:line="44" pos:column="11">{
<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="45" pos:column="23"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">mbedtls_strerror<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><name pos:line="46" pos:column="22">ret<pos:position pos:line="46" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="27">errorbuf<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="37">sizeof<argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">errorbuf<pos:position pos:line="46" pos:column="52"/></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="47" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">failf<pos:position pos:line="48" pos:column="10"/></name><argument_list pos:line="48" pos:column="10">(<argument><expr><name pos:line="48" pos:column="11">data<pos:position pos:line="48" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="17">"Failed - mbedTLS: ctr_drbg_init returned (-0x%04X) %s\n"<pos:position pos:line="48" pos:column="74"/></literal></expr></argument>,
          <argument><expr><operator pos:line="49" pos:column="11">-<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="12">ret<pos:position pos:line="49" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="17">errorbuf<pos:position pos:line="49" pos:column="25"/></name></expr></argument>)<pos:position pos:line="49" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="51" pos:column="8">/* THREADING_SUPPORT */</comment>

  <comment type="block" pos:line="53" pos:column="3">/* Load the trusted CA */</comment>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">mbedtls_x509_crt_init<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><operator pos:line="54" pos:column="25">&amp;<pos:position pos:line="54" pos:column="30"/></operator><name><name pos:line="54" pos:column="26">BACKEND<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">-&gt;<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="35">cacert<pos:position pos:line="54" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="43"/></expr_stmt>

  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><name pos:line="56" pos:column="6">ssl_cafile<pos:position pos:line="56" pos:column="16"/></name></expr>)<pos:position pos:line="56" pos:column="17"/></condition><then pos:line="56" pos:column="17"> <block pos:line="56" pos:column="18">{
    <expr_stmt><expr><name pos:line="57" pos:column="5">ret<pos:position pos:line="57" pos:column="8"/></name> <operator pos:line="57" pos:column="9">=<pos:position pos:line="57" pos:column="10"/></operator> <call><name pos:line="57" pos:column="11">mbedtls_x509_crt_parse_file<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">(<argument><expr><operator pos:line="57" pos:column="39">&amp;<pos:position pos:line="57" pos:column="44"/></operator><name><name pos:line="57" pos:column="40">BACKEND<pos:position pos:line="57" pos:column="47"/></name><operator pos:line="57" pos:column="47">-&gt;<pos:position pos:line="57" pos:column="52"/></operator><name pos:line="57" pos:column="49">cacert<pos:position pos:line="57" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="57">ssl_cafile<pos:position pos:line="57" pos:column="67"/></name></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="69"/></expr_stmt>

    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">(<expr><name pos:line="59" pos:column="8">ret<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">&lt;<pos:position pos:line="59" pos:column="15"/></operator><literal type="number" pos:line="59" pos:column="12">0<pos:position pos:line="59" pos:column="13"/></literal></expr>)<pos:position pos:line="59" pos:column="14"/></condition><then pos:line="59" pos:column="14"> <block pos:line="59" pos:column="15">{
<cpp:ifdef pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">ifdef<pos:position pos:line="60" pos:column="7"/></cpp:directive> <name pos:line="60" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="60" pos:column="23"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">mbedtls_strerror<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">ret<pos:position pos:line="61" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="29">errorbuf<pos:position pos:line="61" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="39">sizeof<argument_list pos:line="61" pos:column="45">(<argument><expr><name pos:line="61" pos:column="46">errorbuf<pos:position pos:line="61" pos:column="54"/></name></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="62" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">failf<pos:position pos:line="63" pos:column="12"/></name><argument_list pos:line="63" pos:column="12">(<argument><expr><name pos:line="63" pos:column="13">data<pos:position pos:line="63" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="19">"Error reading ca cert file %s - mbedTLS: (-0x%04X) %s"<pos:position pos:line="63" pos:column="74"/></literal></expr></argument>,
            <argument><expr><name pos:line="64" pos:column="13">ssl_cafile<pos:position pos:line="64" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="25">-<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="26">ret<pos:position pos:line="64" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="31">errorbuf<pos:position pos:line="64" pos:column="39"/></name></expr></argument>)<pos:position pos:line="64" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt>

      <if pos:line="66" pos:column="7">if<condition pos:line="66" pos:column="9">(<expr><name pos:line="66" pos:column="10">verifypeer<pos:position pos:line="66" pos:column="20"/></name></expr>)<pos:position pos:line="66" pos:column="21"/></condition><then pos:line="66" pos:column="21">
        <block type="pseudo"><return pos:line="67" pos:column="9">return <expr><name pos:line="67" pos:column="16">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="67" pos:column="40"/></name></expr>;<pos:position pos:line="67" pos:column="41"/></return></block></then></if>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <if pos:line="71" pos:column="3">if<condition pos:line="71" pos:column="5">(<expr><name pos:line="71" pos:column="6">ssl_capath<pos:position pos:line="71" pos:column="16"/></name></expr>)<pos:position pos:line="71" pos:column="17"/></condition><then pos:line="71" pos:column="17"> <block pos:line="71" pos:column="18">{
    <expr_stmt><expr><name pos:line="72" pos:column="5">ret<pos:position pos:line="72" pos:column="8"/></name> <operator pos:line="72" pos:column="9">=<pos:position pos:line="72" pos:column="10"/></operator> <call><name pos:line="72" pos:column="11">mbedtls_x509_crt_parse_path<pos:position pos:line="72" pos:column="38"/></name><argument_list pos:line="72" pos:column="38">(<argument><expr><operator pos:line="72" pos:column="39">&amp;<pos:position pos:line="72" pos:column="44"/></operator><name><name pos:line="72" pos:column="40">BACKEND<pos:position pos:line="72" pos:column="47"/></name><operator pos:line="72" pos:column="47">-&gt;<pos:position pos:line="72" pos:column="52"/></operator><name pos:line="72" pos:column="49">cacert<pos:position pos:line="72" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="57">ssl_capath<pos:position pos:line="72" pos:column="67"/></name></expr></argument>)<pos:position pos:line="72" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="69"/></expr_stmt>

    <if pos:line="74" pos:column="5">if<condition pos:line="74" pos:column="7">(<expr><name pos:line="74" pos:column="8">ret<pos:position pos:line="74" pos:column="11"/></name><operator pos:line="74" pos:column="11">&lt;<pos:position pos:line="74" pos:column="15"/></operator><literal type="number" pos:line="74" pos:column="12">0<pos:position pos:line="74" pos:column="13"/></literal></expr>)<pos:position pos:line="74" pos:column="14"/></condition><then pos:line="74" pos:column="14"> <block pos:line="74" pos:column="15">{
<cpp:ifdef pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">ifdef<pos:position pos:line="75" pos:column="7"/></cpp:directive> <name pos:line="75" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="75" pos:column="23"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="76" pos:column="7">mbedtls_strerror<pos:position pos:line="76" pos:column="23"/></name><argument_list pos:line="76" pos:column="23">(<argument><expr><name pos:line="76" pos:column="24">ret<pos:position pos:line="76" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="29">errorbuf<pos:position pos:line="76" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="39">sizeof<argument_list pos:line="76" pos:column="45">(<argument><expr><name pos:line="76" pos:column="46">errorbuf<pos:position pos:line="76" pos:column="54"/></name></expr></argument>)<pos:position pos:line="76" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">endif<pos:position pos:line="77" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="77" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
      <expr_stmt><expr><call><name pos:line="78" pos:column="7">failf<pos:position pos:line="78" pos:column="12"/></name><argument_list pos:line="78" pos:column="12">(<argument><expr><name pos:line="78" pos:column="13">data<pos:position pos:line="78" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="19">"Error reading ca cert path %s - mbedTLS: (-0x%04X) %s"<pos:position pos:line="78" pos:column="74"/></literal></expr></argument>,
            <argument><expr><name pos:line="79" pos:column="13">ssl_capath<pos:position pos:line="79" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="25">-<pos:position pos:line="79" pos:column="26"/></operator><name pos:line="79" pos:column="26">ret<pos:position pos:line="79" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="31">errorbuf<pos:position pos:line="79" pos:column="39"/></name></expr></argument>)<pos:position pos:line="79" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt>

      <if pos:line="81" pos:column="7">if<condition pos:line="81" pos:column="9">(<expr><name pos:line="81" pos:column="10">verifypeer<pos:position pos:line="81" pos:column="20"/></name></expr>)<pos:position pos:line="81" pos:column="21"/></condition><then pos:line="81" pos:column="21">
        <block type="pseudo"><return pos:line="82" pos:column="9">return <expr><name pos:line="82" pos:column="16">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="82" pos:column="40"/></name></expr>;<pos:position pos:line="82" pos:column="41"/></return></block></then></if>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>
  }<pos:position pos:line="84" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="86" pos:column="3">/* Load the client certificate */</comment>
  <expr_stmt><expr><call><name pos:line="87" pos:column="3">mbedtls_x509_crt_init<pos:position pos:line="87" pos:column="24"/></name><argument_list pos:line="87" pos:column="24">(<argument><expr><operator pos:line="87" pos:column="25">&amp;<pos:position pos:line="87" pos:column="30"/></operator><name><name pos:line="87" pos:column="26">BACKEND<pos:position pos:line="87" pos:column="33"/></name><operator pos:line="87" pos:column="33">-&gt;<pos:position pos:line="87" pos:column="38"/></operator><name pos:line="87" pos:column="35">clicert<pos:position pos:line="87" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="44"/></expr_stmt>

  <if pos:line="89" pos:column="3">if<condition pos:line="89" pos:column="5">(<expr><name pos:line="89" pos:column="6">ssl_cert<pos:position pos:line="89" pos:column="14"/></name></expr>)<pos:position pos:line="89" pos:column="15"/></condition><then pos:line="89" pos:column="15"> <block pos:line="89" pos:column="16">{
    <expr_stmt><expr><name pos:line="90" pos:column="5">ret<pos:position pos:line="90" pos:column="8"/></name> <operator pos:line="90" pos:column="9">=<pos:position pos:line="90" pos:column="10"/></operator> <call><name pos:line="90" pos:column="11">mbedtls_x509_crt_parse_file<pos:position pos:line="90" pos:column="38"/></name><argument_list pos:line="90" pos:column="38">(<argument><expr><operator pos:line="90" pos:column="39">&amp;<pos:position pos:line="90" pos:column="44"/></operator><name><name pos:line="90" pos:column="40">BACKEND<pos:position pos:line="90" pos:column="47"/></name><operator pos:line="90" pos:column="47">-&gt;<pos:position pos:line="90" pos:column="52"/></operator><name pos:line="90" pos:column="49">clicert<pos:position pos:line="90" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="58">ssl_cert<pos:position pos:line="90" pos:column="66"/></name></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="68"/></expr_stmt>

    <if pos:line="92" pos:column="5">if<condition pos:line="92" pos:column="7">(<expr><name pos:line="92" pos:column="8">ret<pos:position pos:line="92" pos:column="11"/></name></expr>)<pos:position pos:line="92" pos:column="12"/></condition><then pos:line="92" pos:column="12"> <block pos:line="92" pos:column="13">{
<cpp:ifdef pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">ifdef<pos:position pos:line="93" pos:column="7"/></cpp:directive> <name pos:line="93" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="93" pos:column="23"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="94" pos:column="7">mbedtls_strerror<pos:position pos:line="94" pos:column="23"/></name><argument_list pos:line="94" pos:column="23">(<argument><expr><name pos:line="94" pos:column="24">ret<pos:position pos:line="94" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="29">errorbuf<pos:position pos:line="94" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="94" pos:column="39">sizeof<argument_list pos:line="94" pos:column="45">(<argument><expr><name pos:line="94" pos:column="46">errorbuf<pos:position pos:line="94" pos:column="54"/></name></expr></argument>)<pos:position pos:line="94" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="94" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="95" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
      <expr_stmt><expr><call><name pos:line="96" pos:column="7">failf<pos:position pos:line="96" pos:column="12"/></name><argument_list pos:line="96" pos:column="12">(<argument><expr><name pos:line="96" pos:column="13">data<pos:position pos:line="96" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="19">"Error reading client cert file %s - mbedTLS: (-0x%04X) %s"<pos:position pos:line="96" pos:column="78"/></literal></expr></argument>,
            <argument><expr><name pos:line="97" pos:column="13">ssl_cert<pos:position pos:line="97" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="23">-<pos:position pos:line="97" pos:column="24"/></operator><name pos:line="97" pos:column="24">ret<pos:position pos:line="97" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="29">errorbuf<pos:position pos:line="97" pos:column="37"/></name></expr></argument>)<pos:position pos:line="97" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="39"/></expr_stmt>

      <return pos:line="99" pos:column="7">return <expr><name pos:line="99" pos:column="14">CURLE_SSL_CERTPROBLEM<pos:position pos:line="99" pos:column="35"/></name></expr>;<pos:position pos:line="99" pos:column="36"/></return>
    }<pos:position pos:line="100" pos:column="6"/></block></then></if>
  }<pos:position pos:line="101" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="103" pos:column="3">/* Load the client private key */</comment>
  <expr_stmt><expr><call><name pos:line="104" pos:column="3">mbedtls_pk_init<pos:position pos:line="104" pos:column="18"/></name><argument_list pos:line="104" pos:column="18">(<argument><expr><operator pos:line="104" pos:column="19">&amp;<pos:position pos:line="104" pos:column="24"/></operator><name><name pos:line="104" pos:column="20">BACKEND<pos:position pos:line="104" pos:column="27"/></name><operator pos:line="104" pos:column="27">-&gt;<pos:position pos:line="104" pos:column="32"/></operator><name pos:line="104" pos:column="29">pk<pos:position pos:line="104" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="33"/></expr_stmt>

  <if pos:line="106" pos:column="3">if<condition pos:line="106" pos:column="5">(<expr><call><name pos:line="106" pos:column="6">SSL_SET_OPTION<pos:position pos:line="106" pos:column="20"/></name><argument_list pos:line="106" pos:column="20">(<argument><expr><name pos:line="106" pos:column="21">key<pos:position pos:line="106" pos:column="24"/></name></expr></argument>)<pos:position pos:line="106" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="26"/></condition><then pos:line="106" pos:column="26"> <block pos:line="106" pos:column="27">{
    <expr_stmt><expr><name pos:line="107" pos:column="5">ret<pos:position pos:line="107" pos:column="8"/></name> <operator pos:line="107" pos:column="9">=<pos:position pos:line="107" pos:column="10"/></operator> <call><name pos:line="107" pos:column="11">mbedtls_pk_parse_keyfile<pos:position pos:line="107" pos:column="35"/></name><argument_list pos:line="107" pos:column="35">(<argument><expr><operator pos:line="107" pos:column="36">&amp;<pos:position pos:line="107" pos:column="41"/></operator><name><name pos:line="107" pos:column="37">BACKEND<pos:position pos:line="107" pos:column="44"/></name><operator pos:line="107" pos:column="44">-&gt;<pos:position pos:line="107" pos:column="49"/></operator><name pos:line="107" pos:column="46">pk<pos:position pos:line="107" pos:column="48"/></name></name></expr></argument>, <argument><expr><call><name pos:line="107" pos:column="50">SSL_SET_OPTION<pos:position pos:line="107" pos:column="64"/></name><argument_list pos:line="107" pos:column="64">(<argument><expr><name pos:line="107" pos:column="65">key<pos:position pos:line="107" pos:column="68"/></name></expr></argument>)<pos:position pos:line="107" pos:column="69"/></argument_list></call></expr></argument>,
                                   <argument><expr><call><name pos:line="108" pos:column="36">SSL_SET_OPTION<pos:position pos:line="108" pos:column="50"/></name><argument_list pos:line="108" pos:column="50">(<argument><expr><name pos:line="108" pos:column="51">key_passwd<pos:position pos:line="108" pos:column="61"/></name></expr></argument>)<pos:position pos:line="108" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="108" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="64"/></expr_stmt>
    <if pos:line="109" pos:column="5">if<condition pos:line="109" pos:column="7">(<expr><name pos:line="109" pos:column="8">ret<pos:position pos:line="109" pos:column="11"/></name> <operator pos:line="109" pos:column="12">==<pos:position pos:line="109" pos:column="14"/></operator> <literal type="number" pos:line="109" pos:column="15">0<pos:position pos:line="109" pos:column="16"/></literal> <operator pos:line="109" pos:column="17">&amp;&amp;<pos:position pos:line="109" pos:column="27"/></operator> <operator pos:line="109" pos:column="20">!<pos:position pos:line="109" pos:column="21"/></operator><call><name pos:line="109" pos:column="21">mbedtls_pk_can_do<pos:position pos:line="109" pos:column="38"/></name><argument_list pos:line="109" pos:column="38">(<argument><expr><operator pos:line="109" pos:column="39">&amp;<pos:position pos:line="109" pos:column="44"/></operator><name><name pos:line="109" pos:column="40">BACKEND<pos:position pos:line="109" pos:column="47"/></name><operator pos:line="109" pos:column="47">-&gt;<pos:position pos:line="109" pos:column="52"/></operator><name pos:line="109" pos:column="49">pk<pos:position pos:line="109" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="53">MBEDTLS_PK_RSA<pos:position pos:line="109" pos:column="67"/></name></expr></argument>)<pos:position pos:line="109" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="69"/></condition><then pos:line="109" pos:column="69">
      <block type="pseudo"><expr_stmt><expr><name pos:line="110" pos:column="7">ret<pos:position pos:line="110" pos:column="10"/></name> <operator pos:line="110" pos:column="11">=<pos:position pos:line="110" pos:column="12"/></operator> <name pos:line="110" pos:column="13">MBEDTLS_ERR_PK_TYPE_MISMATCH<pos:position pos:line="110" pos:column="41"/></name></expr>;<pos:position pos:line="110" pos:column="42"/></expr_stmt></block></then></if>

    <if pos:line="112" pos:column="5">if<condition pos:line="112" pos:column="7">(<expr><name pos:line="112" pos:column="8">ret<pos:position pos:line="112" pos:column="11"/></name></expr>)<pos:position pos:line="112" pos:column="12"/></condition><then pos:line="112" pos:column="12"> <block pos:line="112" pos:column="13">{
<cpp:ifdef pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">ifdef<pos:position pos:line="113" pos:column="7"/></cpp:directive> <name pos:line="113" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="113" pos:column="23"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="114" pos:column="7">mbedtls_strerror<pos:position pos:line="114" pos:column="23"/></name><argument_list pos:line="114" pos:column="23">(<argument><expr><name pos:line="114" pos:column="24">ret<pos:position pos:line="114" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="29">errorbuf<pos:position pos:line="114" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="114" pos:column="39">sizeof<argument_list pos:line="114" pos:column="45">(<argument><expr><name pos:line="114" pos:column="46">errorbuf<pos:position pos:line="114" pos:column="54"/></name></expr></argument>)<pos:position pos:line="114" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="114" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">endif<pos:position pos:line="115" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="115" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
      <expr_stmt><expr><call><name pos:line="116" pos:column="7">failf<pos:position pos:line="116" pos:column="12"/></name><argument_list pos:line="116" pos:column="12">(<argument><expr><name pos:line="116" pos:column="13">data<pos:position pos:line="116" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="19">"Error reading private key %s - mbedTLS: (-0x%04X) %s"<pos:position pos:line="116" pos:column="73"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="117" pos:column="13">SSL_SET_OPTION<pos:position pos:line="117" pos:column="27"/></name><argument_list pos:line="117" pos:column="27">(<argument><expr><name pos:line="117" pos:column="28">key<pos:position pos:line="117" pos:column="31"/></name></expr></argument>)<pos:position pos:line="117" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="117" pos:column="34">-<pos:position pos:line="117" pos:column="35"/></operator><name pos:line="117" pos:column="35">ret<pos:position pos:line="117" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="40">errorbuf<pos:position pos:line="117" pos:column="48"/></name></expr></argument>)<pos:position pos:line="117" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="50"/></expr_stmt>

      <return pos:line="119" pos:column="7">return <expr><name pos:line="119" pos:column="14">CURLE_SSL_CERTPROBLEM<pos:position pos:line="119" pos:column="35"/></name></expr>;<pos:position pos:line="119" pos:column="36"/></return>
    }<pos:position pos:line="120" pos:column="6"/></block></then></if>
  }<pos:position pos:line="121" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="123" pos:column="3">/* Load the CRL */</comment>
  <expr_stmt><expr><call><name pos:line="124" pos:column="3">mbedtls_x509_crl_init<pos:position pos:line="124" pos:column="24"/></name><argument_list pos:line="124" pos:column="24">(<argument><expr><operator pos:line="124" pos:column="25">&amp;<pos:position pos:line="124" pos:column="30"/></operator><name><name pos:line="124" pos:column="26">BACKEND<pos:position pos:line="124" pos:column="33"/></name><operator pos:line="124" pos:column="33">-&gt;<pos:position pos:line="124" pos:column="38"/></operator><name pos:line="124" pos:column="35">crl<pos:position pos:line="124" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="40"/></expr_stmt>

  <if pos:line="126" pos:column="3">if<condition pos:line="126" pos:column="5">(<expr><name pos:line="126" pos:column="6">ssl_crlfile<pos:position pos:line="126" pos:column="17"/></name></expr>)<pos:position pos:line="126" pos:column="18"/></condition><then pos:line="126" pos:column="18"> <block pos:line="126" pos:column="19">{
    <expr_stmt><expr><name pos:line="127" pos:column="5">ret<pos:position pos:line="127" pos:column="8"/></name> <operator pos:line="127" pos:column="9">=<pos:position pos:line="127" pos:column="10"/></operator> <call><name pos:line="127" pos:column="11">mbedtls_x509_crl_parse_file<pos:position pos:line="127" pos:column="38"/></name><argument_list pos:line="127" pos:column="38">(<argument><expr><operator pos:line="127" pos:column="39">&amp;<pos:position pos:line="127" pos:column="44"/></operator><name><name pos:line="127" pos:column="40">BACKEND<pos:position pos:line="127" pos:column="47"/></name><operator pos:line="127" pos:column="47">-&gt;<pos:position pos:line="127" pos:column="52"/></operator><name pos:line="127" pos:column="49">crl<pos:position pos:line="127" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="54">ssl_crlfile<pos:position pos:line="127" pos:column="65"/></name></expr></argument>)<pos:position pos:line="127" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="67"/></expr_stmt>

    <if pos:line="129" pos:column="5">if<condition pos:line="129" pos:column="7">(<expr><name pos:line="129" pos:column="8">ret<pos:position pos:line="129" pos:column="11"/></name></expr>)<pos:position pos:line="129" pos:column="12"/></condition><then pos:line="129" pos:column="12"> <block pos:line="129" pos:column="13">{
<cpp:ifdef pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">ifdef<pos:position pos:line="130" pos:column="7"/></cpp:directive> <name pos:line="130" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="130" pos:column="23"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="131" pos:column="7">mbedtls_strerror<pos:position pos:line="131" pos:column="23"/></name><argument_list pos:line="131" pos:column="23">(<argument><expr><name pos:line="131" pos:column="24">ret<pos:position pos:line="131" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="29">errorbuf<pos:position pos:line="131" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="131" pos:column="39">sizeof<argument_list pos:line="131" pos:column="45">(<argument><expr><name pos:line="131" pos:column="46">errorbuf<pos:position pos:line="131" pos:column="54"/></name></expr></argument>)<pos:position pos:line="131" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="131" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="132" pos:column="1">#<cpp:directive pos:line="132" pos:column="2">endif<pos:position pos:line="132" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="132" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
      <expr_stmt><expr><call><name pos:line="133" pos:column="7">failf<pos:position pos:line="133" pos:column="12"/></name><argument_list pos:line="133" pos:column="12">(<argument><expr><name pos:line="133" pos:column="13">data<pos:position pos:line="133" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="19">"Error reading CRL file %s - mbedTLS: (-0x%04X) %s"<pos:position pos:line="133" pos:column="70"/></literal></expr></argument>,
            <argument><expr><name pos:line="134" pos:column="13">ssl_crlfile<pos:position pos:line="134" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="134" pos:column="26">-<pos:position pos:line="134" pos:column="27"/></operator><name pos:line="134" pos:column="27">ret<pos:position pos:line="134" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="32">errorbuf<pos:position pos:line="134" pos:column="40"/></name></expr></argument>)<pos:position pos:line="134" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="42"/></expr_stmt>

      <return pos:line="136" pos:column="7">return <expr><name pos:line="136" pos:column="14">CURLE_SSL_CRL_BADFILE<pos:position pos:line="136" pos:column="35"/></name></expr>;<pos:position pos:line="136" pos:column="36"/></return>
    }<pos:position pos:line="137" pos:column="6"/></block></then></if>
  }<pos:position pos:line="138" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="140" pos:column="3">infof<pos:position pos:line="140" pos:column="8"/></name><argument_list pos:line="140" pos:column="8">(<argument><expr><name pos:line="140" pos:column="9">data<pos:position pos:line="140" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="15">"mbedTLS: Connecting to %s:%d\n"<pos:position pos:line="140" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="140" pos:column="49">hostname<pos:position pos:line="140" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="59">port<pos:position pos:line="140" pos:column="63"/></name></expr></argument>)<pos:position pos:line="140" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="65"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="142" pos:column="3">mbedtls_ssl_config_init<pos:position pos:line="142" pos:column="26"/></name><argument_list pos:line="142" pos:column="26">(<argument><expr><operator pos:line="142" pos:column="27">&amp;<pos:position pos:line="142" pos:column="32"/></operator><name><name pos:line="142" pos:column="28">BACKEND<pos:position pos:line="142" pos:column="35"/></name><operator pos:line="142" pos:column="35">-&gt;<pos:position pos:line="142" pos:column="40"/></operator><name pos:line="142" pos:column="37">config<pos:position pos:line="142" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="142" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="45"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="144" pos:column="3">mbedtls_ssl_init<pos:position pos:line="144" pos:column="19"/></name><argument_list pos:line="144" pos:column="19">(<argument><expr><operator pos:line="144" pos:column="20">&amp;<pos:position pos:line="144" pos:column="25"/></operator><name><name pos:line="144" pos:column="21">BACKEND<pos:position pos:line="144" pos:column="28"/></name><operator pos:line="144" pos:column="28">-&gt;<pos:position pos:line="144" pos:column="33"/></operator><name pos:line="144" pos:column="30">ssl<pos:position pos:line="144" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="35"/></expr_stmt>
  <if pos:line="145" pos:column="3">if<condition pos:line="145" pos:column="5">(<expr><call><name pos:line="145" pos:column="6">mbedtls_ssl_setup<pos:position pos:line="145" pos:column="23"/></name><argument_list pos:line="145" pos:column="23">(<argument><expr><operator pos:line="145" pos:column="24">&amp;<pos:position pos:line="145" pos:column="29"/></operator><name><name pos:line="145" pos:column="25">BACKEND<pos:position pos:line="145" pos:column="32"/></name><operator pos:line="145" pos:column="32">-&gt;<pos:position pos:line="145" pos:column="37"/></operator><name pos:line="145" pos:column="34">ssl<pos:position pos:line="145" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="145" pos:column="39">&amp;<pos:position pos:line="145" pos:column="44"/></operator><name><name pos:line="145" pos:column="40">BACKEND<pos:position pos:line="145" pos:column="47"/></name><operator pos:line="145" pos:column="47">-&gt;<pos:position pos:line="145" pos:column="52"/></operator><name pos:line="145" pos:column="49">config<pos:position pos:line="145" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="145" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="145" pos:column="57"/></condition><then pos:line="145" pos:column="57"> <block pos:line="145" pos:column="58">{
    <expr_stmt><expr><call><name pos:line="146" pos:column="5">failf<pos:position pos:line="146" pos:column="10"/></name><argument_list pos:line="146" pos:column="10">(<argument><expr><name pos:line="146" pos:column="11">data<pos:position pos:line="146" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="17">"mbedTLS: ssl_init failed"<pos:position pos:line="146" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="45"/></expr_stmt>
    <return pos:line="147" pos:column="5">return <expr><name pos:line="147" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="147" pos:column="35"/></name></expr>;<pos:position pos:line="147" pos:column="36"/></return>
  }<pos:position pos:line="148" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="149" pos:column="3">ret<pos:position pos:line="149" pos:column="6"/></name> <operator pos:line="149" pos:column="7">=<pos:position pos:line="149" pos:column="8"/></operator> <call><name pos:line="149" pos:column="9">mbedtls_ssl_config_defaults<pos:position pos:line="149" pos:column="36"/></name><argument_list pos:line="149" pos:column="36">(<argument><expr><operator pos:line="149" pos:column="37">&amp;<pos:position pos:line="149" pos:column="42"/></operator><name><name pos:line="149" pos:column="38">BACKEND<pos:position pos:line="149" pos:column="45"/></name><operator pos:line="149" pos:column="45">-&gt;<pos:position pos:line="149" pos:column="50"/></operator><name pos:line="149" pos:column="47">config<pos:position pos:line="149" pos:column="53"/></name></name></expr></argument>,
                                    <argument><expr><name pos:line="150" pos:column="37">MBEDTLS_SSL_IS_CLIENT<pos:position pos:line="150" pos:column="58"/></name></expr></argument>,
                                    <argument><expr><name pos:line="151" pos:column="37">MBEDTLS_SSL_TRANSPORT_STREAM<pos:position pos:line="151" pos:column="65"/></name></expr></argument>,
                                    <argument><expr><name pos:line="152" pos:column="37">MBEDTLS_SSL_PRESET_DEFAULT<pos:position pos:line="152" pos:column="63"/></name></expr></argument>)<pos:position pos:line="152" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="65"/></expr_stmt>
  <if pos:line="153" pos:column="3">if<condition pos:line="153" pos:column="5">(<expr><name pos:line="153" pos:column="6">ret<pos:position pos:line="153" pos:column="9"/></name></expr>)<pos:position pos:line="153" pos:column="10"/></condition><then pos:line="153" pos:column="10"> <block pos:line="153" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="154" pos:column="5">failf<pos:position pos:line="154" pos:column="10"/></name><argument_list pos:line="154" pos:column="10">(<argument><expr><name pos:line="154" pos:column="11">data<pos:position pos:line="154" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="17">"mbedTLS: ssl_config failed"<pos:position pos:line="154" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="47"/></expr_stmt>
    <return pos:line="155" pos:column="5">return <expr><name pos:line="155" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="155" pos:column="35"/></name></expr>;<pos:position pos:line="155" pos:column="36"/></return>
  }<pos:position pos:line="156" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="158" pos:column="3">/* new profile with RSA min key len = 1024 ... */</comment>
  <expr_stmt><expr><call><name pos:line="159" pos:column="3">mbedtls_ssl_conf_cert_profile<pos:position pos:line="159" pos:column="32"/></name><argument_list pos:line="159" pos:column="32">(<argument><expr><operator pos:line="159" pos:column="33">&amp;<pos:position pos:line="159" pos:column="38"/></operator><name><name pos:line="159" pos:column="34">BACKEND<pos:position pos:line="159" pos:column="41"/></name><operator pos:line="159" pos:column="41">-&gt;<pos:position pos:line="159" pos:column="46"/></operator><name pos:line="159" pos:column="43">config<pos:position pos:line="159" pos:column="49"/></name></name></expr></argument>,
                                <argument><expr><operator pos:line="160" pos:column="33">&amp;<pos:position pos:line="160" pos:column="38"/></operator><name pos:line="160" pos:column="34">mbedtls_x509_crt_profile_fr<pos:position pos:line="160" pos:column="61"/></name></expr></argument>)<pos:position pos:line="160" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="63"/></expr_stmt>

  <switch pos:line="162" pos:column="3">switch<condition pos:line="162" pos:column="9">(<expr><call><name pos:line="162" pos:column="10">SSL_CONN_CONFIG<pos:position pos:line="162" pos:column="25"/></name><argument_list pos:line="162" pos:column="25">(<argument><expr><name pos:line="162" pos:column="26">version<pos:position pos:line="162" pos:column="33"/></name></expr></argument>)<pos:position pos:line="162" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="162" pos:column="35"/></condition> <block pos:line="162" pos:column="36">{
  <case pos:line="163" pos:column="3">case <expr><name pos:line="163" pos:column="8">CURL_SSLVERSION_DEFAULT<pos:position pos:line="163" pos:column="31"/></name></expr>:<pos:position pos:line="163" pos:column="32"/></case>
  <case pos:line="164" pos:column="3">case <expr><name pos:line="164" pos:column="8">CURL_SSLVERSION_TLSv1<pos:position pos:line="164" pos:column="29"/></name></expr>:<pos:position pos:line="164" pos:column="30"/></case>
    <expr_stmt><expr><call><name pos:line="165" pos:column="5">mbedtls_ssl_conf_min_version<pos:position pos:line="165" pos:column="33"/></name><argument_list pos:line="165" pos:column="33">(<argument><expr><operator pos:line="165" pos:column="34">&amp;<pos:position pos:line="165" pos:column="39"/></operator><name><name pos:line="165" pos:column="35">BACKEND<pos:position pos:line="165" pos:column="42"/></name><operator pos:line="165" pos:column="42">-&gt;<pos:position pos:line="165" pos:column="47"/></operator><name pos:line="165" pos:column="44">config<pos:position pos:line="165" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="52">MBEDTLS_SSL_MAJOR_VERSION_3<pos:position pos:line="165" pos:column="79"/></name></expr></argument>,
                                 <argument><expr><name pos:line="166" pos:column="34">MBEDTLS_SSL_MINOR_VERSION_1<pos:position pos:line="166" pos:column="61"/></name></expr></argument>)<pos:position pos:line="166" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="167" pos:column="5">infof<pos:position pos:line="167" pos:column="10"/></name><argument_list pos:line="167" pos:column="10">(<argument><expr><name pos:line="167" pos:column="11">data<pos:position pos:line="167" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="167" pos:column="17">"mbedTLS: Set min SSL version to TLS 1.0\n"<pos:position pos:line="167" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="167" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="62"/></expr_stmt>
    <break pos:line="168" pos:column="5">break;<pos:position pos:line="168" pos:column="11"/></break>
  <case pos:line="169" pos:column="3">case <expr><name pos:line="169" pos:column="8">CURL_SSLVERSION_SSLv3<pos:position pos:line="169" pos:column="29"/></name></expr>:<pos:position pos:line="169" pos:column="30"/></case>
    <expr_stmt><expr><call><name pos:line="170" pos:column="5">mbedtls_ssl_conf_min_version<pos:position pos:line="170" pos:column="33"/></name><argument_list pos:line="170" pos:column="33">(<argument><expr><operator pos:line="170" pos:column="34">&amp;<pos:position pos:line="170" pos:column="39"/></operator><name><name pos:line="170" pos:column="35">BACKEND<pos:position pos:line="170" pos:column="42"/></name><operator pos:line="170" pos:column="42">-&gt;<pos:position pos:line="170" pos:column="47"/></operator><name pos:line="170" pos:column="44">config<pos:position pos:line="170" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="52">MBEDTLS_SSL_MAJOR_VERSION_3<pos:position pos:line="170" pos:column="79"/></name></expr></argument>,
                                 <argument><expr><name pos:line="171" pos:column="34">MBEDTLS_SSL_MINOR_VERSION_0<pos:position pos:line="171" pos:column="61"/></name></expr></argument>)<pos:position pos:line="171" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="172" pos:column="5">mbedtls_ssl_conf_max_version<pos:position pos:line="172" pos:column="33"/></name><argument_list pos:line="172" pos:column="33">(<argument><expr><operator pos:line="172" pos:column="34">&amp;<pos:position pos:line="172" pos:column="39"/></operator><name><name pos:line="172" pos:column="35">BACKEND<pos:position pos:line="172" pos:column="42"/></name><operator pos:line="172" pos:column="42">-&gt;<pos:position pos:line="172" pos:column="47"/></operator><name pos:line="172" pos:column="44">config<pos:position pos:line="172" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="52">MBEDTLS_SSL_MAJOR_VERSION_3<pos:position pos:line="172" pos:column="79"/></name></expr></argument>,
                                 <argument><expr><name pos:line="173" pos:column="34">MBEDTLS_SSL_MINOR_VERSION_0<pos:position pos:line="173" pos:column="61"/></name></expr></argument>)<pos:position pos:line="173" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="174" pos:column="5">infof<pos:position pos:line="174" pos:column="10"/></name><argument_list pos:line="174" pos:column="10">(<argument><expr><name pos:line="174" pos:column="11">data<pos:position pos:line="174" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="174" pos:column="17">"mbedTLS: Set SSL version to SSLv3\n"<pos:position pos:line="174" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="56"/></expr_stmt>
    <break pos:line="175" pos:column="5">break;<pos:position pos:line="175" pos:column="11"/></break>
  <case pos:line="176" pos:column="3">case <expr><name pos:line="176" pos:column="8">CURL_SSLVERSION_TLSv1_0<pos:position pos:line="176" pos:column="31"/></name></expr>:<pos:position pos:line="176" pos:column="32"/></case>
  <case pos:line="177" pos:column="3">case <expr><name pos:line="177" pos:column="8">CURL_SSLVERSION_TLSv1_1<pos:position pos:line="177" pos:column="31"/></name></expr>:<pos:position pos:line="177" pos:column="32"/></case>
  <case pos:line="178" pos:column="3">case <expr><name pos:line="178" pos:column="8">CURL_SSLVERSION_TLSv1_2<pos:position pos:line="178" pos:column="31"/></name></expr>:<pos:position pos:line="178" pos:column="32"/></case>
  <case pos:line="179" pos:column="3">case <expr><name pos:line="179" pos:column="8">CURL_SSLVERSION_TLSv1_3<pos:position pos:line="179" pos:column="31"/></name></expr>:<pos:position pos:line="179" pos:column="32"/></case>
    <block pos:line="180" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="181" pos:column="7">CURLcode<pos:position pos:line="181" pos:column="15"/></name></type> <name pos:line="181" pos:column="16">result<pos:position pos:line="181" pos:column="22"/></name> <init pos:line="181" pos:column="23">= <expr><call><name pos:line="181" pos:column="25">set_ssl_version_min_max<pos:position pos:line="181" pos:column="48"/></name><argument_list pos:line="181" pos:column="48">(<argument><expr><name pos:line="181" pos:column="49">conn<pos:position pos:line="181" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="55">sockindex<pos:position pos:line="181" pos:column="64"/></name></expr></argument>)<pos:position pos:line="181" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="181" pos:column="66"/></decl_stmt>
      <if pos:line="182" pos:column="7">if<condition pos:line="182" pos:column="9">(<expr><name pos:line="182" pos:column="10">result<pos:position pos:line="182" pos:column="16"/></name> <operator pos:line="182" pos:column="17">!=<pos:position pos:line="182" pos:column="19"/></operator> <name pos:line="182" pos:column="20">CURLE_OK<pos:position pos:line="182" pos:column="28"/></name></expr>)<pos:position pos:line="182" pos:column="29"/></condition><then pos:line="182" pos:column="29">
        <block type="pseudo"><return pos:line="183" pos:column="9">return <expr><name pos:line="183" pos:column="16">result<pos:position pos:line="183" pos:column="22"/></name></expr>;<pos:position pos:line="183" pos:column="23"/></return></block></then></if>
      <break pos:line="184" pos:column="7">break;<pos:position pos:line="184" pos:column="13"/></break>
    }<pos:position pos:line="185" pos:column="6"/></block>
  <default pos:line="186" pos:column="3">default:<pos:position pos:line="186" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="187" pos:column="5">failf<pos:position pos:line="187" pos:column="10"/></name><argument_list pos:line="187" pos:column="10">(<argument><expr><name pos:line="187" pos:column="11">data<pos:position pos:line="187" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="187" pos:column="17">"Unrecognized parameter passed via CURLOPT_SSLVERSION"<pos:position pos:line="187" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="187" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="73"/></expr_stmt>
    <return pos:line="188" pos:column="5">return <expr><name pos:line="188" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="188" pos:column="35"/></name></expr>;<pos:position pos:line="188" pos:column="36"/></return>
  }<pos:position pos:line="189" pos:column="4"/></block></switch>

  <expr_stmt><expr><call><name pos:line="191" pos:column="3">mbedtls_ssl_conf_authmode<pos:position pos:line="191" pos:column="28"/></name><argument_list pos:line="191" pos:column="28">(<argument><expr><operator pos:line="191" pos:column="29">&amp;<pos:position pos:line="191" pos:column="34"/></operator><name><name pos:line="191" pos:column="30">BACKEND<pos:position pos:line="191" pos:column="37"/></name><operator pos:line="191" pos:column="37">-&gt;<pos:position pos:line="191" pos:column="42"/></operator><name pos:line="191" pos:column="39">config<pos:position pos:line="191" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="47">MBEDTLS_SSL_VERIFY_OPTIONAL<pos:position pos:line="191" pos:column="74"/></name></expr></argument>)<pos:position pos:line="191" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="76"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="193" pos:column="3">mbedtls_ssl_conf_rng<pos:position pos:line="193" pos:column="23"/></name><argument_list pos:line="193" pos:column="23">(<argument><expr><operator pos:line="193" pos:column="24">&amp;<pos:position pos:line="193" pos:column="29"/></operator><name><name pos:line="193" pos:column="25">BACKEND<pos:position pos:line="193" pos:column="32"/></name><operator pos:line="193" pos:column="32">-&gt;<pos:position pos:line="193" pos:column="37"/></operator><name pos:line="193" pos:column="34">config<pos:position pos:line="193" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="42">mbedtls_ctr_drbg_random<pos:position pos:line="193" pos:column="65"/></name></expr></argument>,
                       <argument><expr><operator pos:line="194" pos:column="24">&amp;<pos:position pos:line="194" pos:column="29"/></operator><name><name pos:line="194" pos:column="25">BACKEND<pos:position pos:line="194" pos:column="32"/></name><operator pos:line="194" pos:column="32">-&gt;<pos:position pos:line="194" pos:column="37"/></operator><name pos:line="194" pos:column="34">ctr_drbg<pos:position pos:line="194" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="194" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="195" pos:column="3">mbedtls_ssl_set_bio<pos:position pos:line="195" pos:column="22"/></name><argument_list pos:line="195" pos:column="22">(<argument><expr><operator pos:line="195" pos:column="23">&amp;<pos:position pos:line="195" pos:column="28"/></operator><name><name pos:line="195" pos:column="24">BACKEND<pos:position pos:line="195" pos:column="31"/></name><operator pos:line="195" pos:column="31">-&gt;<pos:position pos:line="195" pos:column="36"/></operator><name pos:line="195" pos:column="33">ssl<pos:position pos:line="195" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="195" pos:column="38">&amp;<pos:position pos:line="195" pos:column="43"/></operator><name><name pos:line="195" pos:column="39">conn<pos:position pos:line="195" pos:column="43"/></name><operator pos:line="195" pos:column="43">-&gt;<pos:position pos:line="195" pos:column="48"/></operator><name pos:line="195" pos:column="45">sock<pos:position pos:line="195" pos:column="49"/></name><index pos:line="195" pos:column="49">[<expr><name pos:line="195" pos:column="50">sockindex<pos:position pos:line="195" pos:column="59"/></name></expr>]<pos:position pos:line="195" pos:column="60"/></index></name></expr></argument>,
                      <argument><expr><name pos:line="196" pos:column="23">mbedtls_net_send<pos:position pos:line="196" pos:column="39"/></name></expr></argument>,
                      <argument><expr><name pos:line="197" pos:column="23">mbedtls_net_recv<pos:position pos:line="197" pos:column="39"/></name></expr></argument>,
                      <argument><expr><name pos:line="198" pos:column="23">NULL<pos:position pos:line="198" pos:column="27"/></name></expr></argument> <comment type="block" pos:line="198" pos:column="28">/*  rev_timeout() */</comment>)<pos:position pos:line="198" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="50"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="200" pos:column="3">mbedtls_ssl_conf_ciphersuites<pos:position pos:line="200" pos:column="32"/></name><argument_list pos:line="200" pos:column="32">(<argument><expr><operator pos:line="200" pos:column="33">&amp;<pos:position pos:line="200" pos:column="38"/></operator><name><name pos:line="200" pos:column="34">BACKEND<pos:position pos:line="200" pos:column="41"/></name><operator pos:line="200" pos:column="41">-&gt;<pos:position pos:line="200" pos:column="46"/></operator><name pos:line="200" pos:column="43">config<pos:position pos:line="200" pos:column="49"/></name></name></expr></argument>,
                                <argument><expr><call><name pos:line="201" pos:column="33">mbedtls_ssl_list_ciphersuites<pos:position pos:line="201" pos:column="62"/></name><argument_list pos:line="201" pos:column="62">()<pos:position pos:line="201" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="201" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="66"/></expr_stmt>

<cpp:if pos:line="203" pos:column="1">#<cpp:directive pos:line="203" pos:column="2">if<pos:position pos:line="203" pos:column="4"/></cpp:directive> <expr><call><name pos:line="203" pos:column="5">defined<pos:position pos:line="203" pos:column="12"/></name><argument_list pos:line="203" pos:column="12">(<argument><expr><name pos:line="203" pos:column="13">MBEDTLS_SSL_RENEGOTIATION<pos:position pos:line="203" pos:column="38"/></name></expr></argument>)<pos:position pos:line="203" pos:column="39"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="204" pos:column="3">mbedtls_ssl_conf_renegotiation<pos:position pos:line="204" pos:column="33"/></name><argument_list pos:line="204" pos:column="33">(<argument><expr><operator pos:line="204" pos:column="34">&amp;<pos:position pos:line="204" pos:column="39"/></operator><name><name pos:line="204" pos:column="35">BACKEND<pos:position pos:line="204" pos:column="42"/></name><operator pos:line="204" pos:column="42">-&gt;<pos:position pos:line="204" pos:column="47"/></operator><name pos:line="204" pos:column="44">config<pos:position pos:line="204" pos:column="50"/></name></name></expr></argument>,
                                 <argument><expr><name pos:line="205" pos:column="34">MBEDTLS_SSL_RENEGOTIATION_ENABLED<pos:position pos:line="205" pos:column="67"/></name></expr></argument>)<pos:position pos:line="205" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="69"/></expr_stmt>
<cpp:endif pos:line="206" pos:column="1">#<cpp:directive pos:line="206" pos:column="2">endif<pos:position pos:line="206" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="208" pos:column="1">#<cpp:directive pos:line="208" pos:column="2">if<pos:position pos:line="208" pos:column="4"/></cpp:directive> <expr><call><name pos:line="208" pos:column="5">defined<pos:position pos:line="208" pos:column="12"/></name><argument_list pos:line="208" pos:column="12">(<argument><expr><name pos:line="208" pos:column="13">MBEDTLS_SSL_SESSION_TICKETS<pos:position pos:line="208" pos:column="40"/></name></expr></argument>)<pos:position pos:line="208" pos:column="41"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="209" pos:column="3">mbedtls_ssl_conf_session_tickets<pos:position pos:line="209" pos:column="35"/></name><argument_list pos:line="209" pos:column="35">(<argument><expr><operator pos:line="209" pos:column="36">&amp;<pos:position pos:line="209" pos:column="41"/></operator><name><name pos:line="209" pos:column="37">BACKEND<pos:position pos:line="209" pos:column="44"/></name><operator pos:line="209" pos:column="44">-&gt;<pos:position pos:line="209" pos:column="49"/></operator><name pos:line="209" pos:column="46">config<pos:position pos:line="209" pos:column="52"/></name></name></expr></argument>,
                                   <argument><expr><name pos:line="210" pos:column="36">MBEDTLS_SSL_SESSION_TICKETS_DISABLED<pos:position pos:line="210" pos:column="72"/></name></expr></argument>)<pos:position pos:line="210" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="74"/></expr_stmt>
<cpp:endif pos:line="211" pos:column="1">#<cpp:directive pos:line="211" pos:column="2">endif<pos:position pos:line="211" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="213" pos:column="3">/* Check if there's a cached ID we can/should use here! */</comment>
  <if pos:line="214" pos:column="3">if<condition pos:line="214" pos:column="5">(<expr><call><name pos:line="214" pos:column="6">SSL_SET_OPTION<pos:position pos:line="214" pos:column="20"/></name><argument_list pos:line="214" pos:column="20">(<argument><expr><name><name pos:line="214" pos:column="21">primary<pos:position pos:line="214" pos:column="28"/></name><operator pos:line="214" pos:column="28">.<pos:position pos:line="214" pos:column="29"/></operator><name pos:line="214" pos:column="29">sessionid<pos:position pos:line="214" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="214" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="214" pos:column="40"/></condition><then pos:line="214" pos:column="40"> <block pos:line="214" pos:column="41">{
    <decl_stmt><decl><type><name pos:line="215" pos:column="5">void<pos:position pos:line="215" pos:column="9"/></name> <modifier pos:line="215" pos:column="10">*<pos:position pos:line="215" pos:column="11"/></modifier></type><name pos:line="215" pos:column="11">old_session<pos:position pos:line="215" pos:column="22"/></name> <init pos:line="215" pos:column="23">= <expr><name pos:line="215" pos:column="25">NULL<pos:position pos:line="215" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="215" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="217" pos:column="5">Curl_ssl_sessionid_lock<pos:position pos:line="217" pos:column="28"/></name><argument_list pos:line="217" pos:column="28">(<argument><expr><name pos:line="217" pos:column="29">conn<pos:position pos:line="217" pos:column="33"/></name></expr></argument>)<pos:position pos:line="217" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="35"/></expr_stmt>
    <if pos:line="218" pos:column="5">if<condition pos:line="218" pos:column="7">(<expr><operator pos:line="218" pos:column="8">!<pos:position pos:line="218" pos:column="9"/></operator><call><name pos:line="218" pos:column="9">Curl_ssl_getsessionid<pos:position pos:line="218" pos:column="30"/></name><argument_list pos:line="218" pos:column="30">(<argument><expr><name pos:line="218" pos:column="31">conn<pos:position pos:line="218" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="218" pos:column="37">&amp;<pos:position pos:line="218" pos:column="42"/></operator><name pos:line="218" pos:column="38">old_session<pos:position pos:line="218" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="51">NULL<pos:position pos:line="218" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="57">sockindex<pos:position pos:line="218" pos:column="66"/></name></expr></argument>)<pos:position pos:line="218" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="218" pos:column="68"/></condition><then pos:line="218" pos:column="68"> <block pos:line="218" pos:column="69">{
      <expr_stmt><expr><name pos:line="219" pos:column="7">ret<pos:position pos:line="219" pos:column="10"/></name> <operator pos:line="219" pos:column="11">=<pos:position pos:line="219" pos:column="12"/></operator> <call><name pos:line="219" pos:column="13">mbedtls_ssl_set_session<pos:position pos:line="219" pos:column="36"/></name><argument_list pos:line="219" pos:column="36">(<argument><expr><operator pos:line="219" pos:column="37">&amp;<pos:position pos:line="219" pos:column="42"/></operator><name><name pos:line="219" pos:column="38">BACKEND<pos:position pos:line="219" pos:column="45"/></name><operator pos:line="219" pos:column="45">-&gt;<pos:position pos:line="219" pos:column="50"/></operator><name pos:line="219" pos:column="47">ssl<pos:position pos:line="219" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="52">old_session<pos:position pos:line="219" pos:column="63"/></name></expr></argument>)<pos:position pos:line="219" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="65"/></expr_stmt>
      <if pos:line="220" pos:column="7">if<condition pos:line="220" pos:column="9">(<expr><name pos:line="220" pos:column="10">ret<pos:position pos:line="220" pos:column="13"/></name></expr>)<pos:position pos:line="220" pos:column="14"/></condition><then pos:line="220" pos:column="14"> <block pos:line="220" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="221" pos:column="9">Curl_ssl_sessionid_unlock<pos:position pos:line="221" pos:column="34"/></name><argument_list pos:line="221" pos:column="34">(<argument><expr><name pos:line="221" pos:column="35">conn<pos:position pos:line="221" pos:column="39"/></name></expr></argument>)<pos:position pos:line="221" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="222" pos:column="9">failf<pos:position pos:line="222" pos:column="14"/></name><argument_list pos:line="222" pos:column="14">(<argument><expr><name pos:line="222" pos:column="15">data<pos:position pos:line="222" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="222" pos:column="21">"mbedtls_ssl_set_session returned -0x%x"<pos:position pos:line="222" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="222" pos:column="63">-<pos:position pos:line="222" pos:column="64"/></operator><name pos:line="222" pos:column="64">ret<pos:position pos:line="222" pos:column="67"/></name></expr></argument>)<pos:position pos:line="222" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="69"/></expr_stmt>
        <return pos:line="223" pos:column="9">return <expr><name pos:line="223" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="223" pos:column="39"/></name></expr>;<pos:position pos:line="223" pos:column="40"/></return>
      }<pos:position pos:line="224" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="225" pos:column="7">infof<pos:position pos:line="225" pos:column="12"/></name><argument_list pos:line="225" pos:column="12">(<argument><expr><name pos:line="225" pos:column="13">data<pos:position pos:line="225" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="225" pos:column="19">"mbedTLS re-using session\n"<pos:position pos:line="225" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="225" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="226" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="227" pos:column="5">Curl_ssl_sessionid_unlock<pos:position pos:line="227" pos:column="30"/></name><argument_list pos:line="227" pos:column="30">(<argument><expr><name pos:line="227" pos:column="31">conn<pos:position pos:line="227" pos:column="35"/></name></expr></argument>)<pos:position pos:line="227" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="228" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="230" pos:column="3">mbedtls_ssl_conf_ca_chain<pos:position pos:line="230" pos:column="28"/></name><argument_list pos:line="230" pos:column="28">(<argument><expr><operator pos:line="230" pos:column="29">&amp;<pos:position pos:line="230" pos:column="34"/></operator><name><name pos:line="230" pos:column="30">BACKEND<pos:position pos:line="230" pos:column="37"/></name><operator pos:line="230" pos:column="37">-&gt;<pos:position pos:line="230" pos:column="42"/></operator><name pos:line="230" pos:column="39">config<pos:position pos:line="230" pos:column="45"/></name></name></expr></argument>,
                            <argument><expr><operator pos:line="231" pos:column="29">&amp;<pos:position pos:line="231" pos:column="34"/></operator><name><name pos:line="231" pos:column="30">BACKEND<pos:position pos:line="231" pos:column="37"/></name><operator pos:line="231" pos:column="37">-&gt;<pos:position pos:line="231" pos:column="42"/></operator><name pos:line="231" pos:column="39">cacert<pos:position pos:line="231" pos:column="45"/></name></name></expr></argument>,
                            <argument><expr><operator pos:line="232" pos:column="29">&amp;<pos:position pos:line="232" pos:column="34"/></operator><name><name pos:line="232" pos:column="30">BACKEND<pos:position pos:line="232" pos:column="37"/></name><operator pos:line="232" pos:column="37">-&gt;<pos:position pos:line="232" pos:column="42"/></operator><name pos:line="232" pos:column="39">crl<pos:position pos:line="232" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="232" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="44"/></expr_stmt>

  <if pos:line="234" pos:column="3">if<condition pos:line="234" pos:column="5">(<expr><call><name pos:line="234" pos:column="6">SSL_SET_OPTION<pos:position pos:line="234" pos:column="20"/></name><argument_list pos:line="234" pos:column="20">(<argument><expr><name pos:line="234" pos:column="21">key<pos:position pos:line="234" pos:column="24"/></name></expr></argument>)<pos:position pos:line="234" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="234" pos:column="26"/></condition><then pos:line="234" pos:column="26"> <block pos:line="234" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="235" pos:column="5">mbedtls_ssl_conf_own_cert<pos:position pos:line="235" pos:column="30"/></name><argument_list pos:line="235" pos:column="30">(<argument><expr><operator pos:line="235" pos:column="31">&amp;<pos:position pos:line="235" pos:column="36"/></operator><name><name pos:line="235" pos:column="32">BACKEND<pos:position pos:line="235" pos:column="39"/></name><operator pos:line="235" pos:column="39">-&gt;<pos:position pos:line="235" pos:column="44"/></operator><name pos:line="235" pos:column="41">config<pos:position pos:line="235" pos:column="47"/></name></name></expr></argument>,
                              <argument><expr><operator pos:line="236" pos:column="31">&amp;<pos:position pos:line="236" pos:column="36"/></operator><name><name pos:line="236" pos:column="32">BACKEND<pos:position pos:line="236" pos:column="39"/></name><operator pos:line="236" pos:column="39">-&gt;<pos:position pos:line="236" pos:column="44"/></operator><name pos:line="236" pos:column="41">clicert<pos:position pos:line="236" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="236" pos:column="50">&amp;<pos:position pos:line="236" pos:column="55"/></operator><name><name pos:line="236" pos:column="51">BACKEND<pos:position pos:line="236" pos:column="58"/></name><operator pos:line="236" pos:column="58">-&gt;<pos:position pos:line="236" pos:column="63"/></operator><name pos:line="236" pos:column="60">pk<pos:position pos:line="236" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="236" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="64"/></expr_stmt>
  }<pos:position pos:line="237" pos:column="4"/></block></then></if>
  <if pos:line="238" pos:column="3">if<condition pos:line="238" pos:column="5">(<expr><call><name pos:line="238" pos:column="6">mbedtls_ssl_set_hostname<pos:position pos:line="238" pos:column="30"/></name><argument_list pos:line="238" pos:column="30">(<argument><expr><operator pos:line="238" pos:column="31">&amp;<pos:position pos:line="238" pos:column="36"/></operator><name><name pos:line="238" pos:column="32">BACKEND<pos:position pos:line="238" pos:column="39"/></name><operator pos:line="238" pos:column="39">-&gt;<pos:position pos:line="238" pos:column="44"/></operator><name pos:line="238" pos:column="41">ssl<pos:position pos:line="238" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="46">hostname<pos:position pos:line="238" pos:column="54"/></name></expr></argument>)<pos:position pos:line="238" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="238" pos:column="56"/></condition><then pos:line="238" pos:column="56"> <block pos:line="238" pos:column="57">{
    <comment type="block" pos:line="239" pos:column="5">/* mbedtls_ssl_set_hostname() sets the name to use in CN/SAN checks *and*
       the name to set in the SNI extension. So even if curl connects to a
       host specified as an IP address, this function must be used. */</comment>
    <expr_stmt><expr><call><name pos:line="242" pos:column="5">failf<pos:position pos:line="242" pos:column="10"/></name><argument_list pos:line="242" pos:column="10">(<argument><expr><name pos:line="242" pos:column="11">data<pos:position pos:line="242" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="242" pos:column="17">"couldn't set hostname in mbedTLS"<pos:position pos:line="242" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="242" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="53"/></expr_stmt>
    <return pos:line="243" pos:column="5">return <expr><name pos:line="243" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="243" pos:column="35"/></name></expr>;<pos:position pos:line="243" pos:column="36"/></return>
  }<pos:position pos:line="244" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="246" pos:column="1">#<cpp:directive pos:line="246" pos:column="2">ifdef<pos:position pos:line="246" pos:column="7"/></cpp:directive> <name pos:line="246" pos:column="8">HAS_ALPN<pos:position pos:line="246" pos:column="16"/></name></cpp:ifdef>
  <if pos:line="247" pos:column="3">if<condition pos:line="247" pos:column="5">(<expr><name><name pos:line="247" pos:column="6">conn<pos:position pos:line="247" pos:column="10"/></name><operator pos:line="247" pos:column="10">-&gt;<pos:position pos:line="247" pos:column="15"/></operator><name pos:line="247" pos:column="12">bits<pos:position pos:line="247" pos:column="16"/></name><operator pos:line="247" pos:column="16">.<pos:position pos:line="247" pos:column="17"/></operator><name pos:line="247" pos:column="17">tls_enable_alpn<pos:position pos:line="247" pos:column="32"/></name></name></expr>)<pos:position pos:line="247" pos:column="33"/></condition><then pos:line="247" pos:column="33"> <block pos:line="247" pos:column="34">{
    <decl_stmt><decl><type><specifier pos:line="248" pos:column="5">const<pos:position pos:line="248" pos:column="10"/></specifier> <name pos:line="248" pos:column="11">char<pos:position pos:line="248" pos:column="15"/></name> <modifier pos:line="248" pos:column="16">*<pos:position pos:line="248" pos:column="17"/></modifier><modifier pos:line="248" pos:column="17">*<pos:position pos:line="248" pos:column="18"/></modifier></type><name pos:line="248" pos:column="18">p<pos:position pos:line="248" pos:column="19"/></name> <init pos:line="248" pos:column="20">= <expr><operator pos:line="248" pos:column="22">&amp;<pos:position pos:line="248" pos:column="27"/></operator><name><name pos:line="248" pos:column="23">BACKEND<pos:position pos:line="248" pos:column="30"/></name><operator pos:line="248" pos:column="30">-&gt;<pos:position pos:line="248" pos:column="35"/></operator><name pos:line="248" pos:column="32">protocols<pos:position pos:line="248" pos:column="41"/></name><index pos:line="248" pos:column="41">[<expr><literal type="number" pos:line="248" pos:column="42">0<pos:position pos:line="248" pos:column="43"/></literal></expr>]<pos:position pos:line="248" pos:column="44"/></index></name></expr></init></decl>;<pos:position pos:line="248" pos:column="45"/></decl_stmt>
<cpp:ifdef pos:line="249" pos:column="1">#<cpp:directive pos:line="249" pos:column="2">ifdef<pos:position pos:line="249" pos:column="7"/></cpp:directive> <name pos:line="249" pos:column="8">USE_NGHTTP2<pos:position pos:line="249" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="250" pos:column="5">if<condition pos:line="250" pos:column="7">(<expr><name><name pos:line="250" pos:column="8">data<pos:position pos:line="250" pos:column="12"/></name><operator pos:line="250" pos:column="12">-&gt;<pos:position pos:line="250" pos:column="17"/></operator><name pos:line="250" pos:column="14">set<pos:position pos:line="250" pos:column="17"/></name><operator pos:line="250" pos:column="17">.<pos:position pos:line="250" pos:column="18"/></operator><name pos:line="250" pos:column="18">httpversion<pos:position pos:line="250" pos:column="29"/></name></name> <operator pos:line="250" pos:column="30">&gt;=<pos:position pos:line="250" pos:column="35"/></operator> <name pos:line="250" pos:column="33">CURL_HTTP_VERSION_2<pos:position pos:line="250" pos:column="52"/></name></expr>)<pos:position pos:line="250" pos:column="53"/></condition><then pos:line="250" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="251" pos:column="7">*<pos:position pos:line="251" pos:column="8"/></operator><name pos:line="251" pos:column="8">p<pos:position pos:line="251" pos:column="9"/></name><operator pos:line="251" pos:column="9">++<pos:position pos:line="251" pos:column="11"/></operator> <operator pos:line="251" pos:column="12">=<pos:position pos:line="251" pos:column="13"/></operator> <name pos:line="251" pos:column="14">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="251" pos:column="38"/></name></expr>;<pos:position pos:line="251" pos:column="39"/></expr_stmt></block></then></if>
<cpp:endif pos:line="252" pos:column="1">#<cpp:directive pos:line="252" pos:column="2">endif<pos:position pos:line="252" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><operator pos:line="253" pos:column="5">*<pos:position pos:line="253" pos:column="6"/></operator><name pos:line="253" pos:column="6">p<pos:position pos:line="253" pos:column="7"/></name><operator pos:line="253" pos:column="7">++<pos:position pos:line="253" pos:column="9"/></operator> <operator pos:line="253" pos:column="10">=<pos:position pos:line="253" pos:column="11"/></operator> <name pos:line="253" pos:column="12">ALPN_HTTP_1_1<pos:position pos:line="253" pos:column="25"/></name></expr>;<pos:position pos:line="253" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="254" pos:column="5">*<pos:position pos:line="254" pos:column="6"/></operator><name pos:line="254" pos:column="6">p<pos:position pos:line="254" pos:column="7"/></name> <operator pos:line="254" pos:column="8">=<pos:position pos:line="254" pos:column="9"/></operator> <name pos:line="254" pos:column="10">NULL<pos:position pos:line="254" pos:column="14"/></name></expr>;<pos:position pos:line="254" pos:column="15"/></expr_stmt>
    <comment type="block" pos:line="255" pos:column="5">/* this function doesn't clone the protocols array, which is why we need
       to keep it around */</comment>
    <if pos:line="257" pos:column="5">if<condition pos:line="257" pos:column="7">(<expr><call><name pos:line="257" pos:column="8">mbedtls_ssl_conf_alpn_protocols<pos:position pos:line="257" pos:column="39"/></name><argument_list pos:line="257" pos:column="39">(<argument><expr><operator pos:line="257" pos:column="40">&amp;<pos:position pos:line="257" pos:column="45"/></operator><name><name pos:line="257" pos:column="41">BACKEND<pos:position pos:line="257" pos:column="48"/></name><operator pos:line="257" pos:column="48">-&gt;<pos:position pos:line="257" pos:column="53"/></operator><name pos:line="257" pos:column="50">config<pos:position pos:line="257" pos:column="56"/></name></name></expr></argument>,
                                       <argument><expr><operator pos:line="258" pos:column="40">&amp;<pos:position pos:line="258" pos:column="45"/></operator><name><name pos:line="258" pos:column="41">BACKEND<pos:position pos:line="258" pos:column="48"/></name><operator pos:line="258" pos:column="48">-&gt;<pos:position pos:line="258" pos:column="53"/></operator><name pos:line="258" pos:column="50">protocols<pos:position pos:line="258" pos:column="59"/></name><index pos:line="258" pos:column="59">[<expr><literal type="number" pos:line="258" pos:column="60">0<pos:position pos:line="258" pos:column="61"/></literal></expr>]<pos:position pos:line="258" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="258" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="258" pos:column="64"/></condition><then pos:line="258" pos:column="64"> <block pos:line="258" pos:column="65">{
      <expr_stmt><expr><call><name pos:line="259" pos:column="7">failf<pos:position pos:line="259" pos:column="12"/></name><argument_list pos:line="259" pos:column="12">(<argument><expr><name pos:line="259" pos:column="13">data<pos:position pos:line="259" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="259" pos:column="19">"Failed setting ALPN protocols"<pos:position pos:line="259" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="259" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="52"/></expr_stmt>
      <return pos:line="260" pos:column="7">return <expr><name pos:line="260" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="260" pos:column="37"/></name></expr>;<pos:position pos:line="260" pos:column="38"/></return>
    }<pos:position pos:line="261" pos:column="6"/></block></then></if>
    <for pos:line="262" pos:column="5">for<control pos:line="262" pos:column="8">(<init><expr><name pos:line="262" pos:column="9">p<pos:position pos:line="262" pos:column="10"/></name> <operator pos:line="262" pos:column="11">=<pos:position pos:line="262" pos:column="12"/></operator> <operator pos:line="262" pos:column="13">&amp;<pos:position pos:line="262" pos:column="18"/></operator><name><name pos:line="262" pos:column="14">BACKEND<pos:position pos:line="262" pos:column="21"/></name><operator pos:line="262" pos:column="21">-&gt;<pos:position pos:line="262" pos:column="26"/></operator><name pos:line="262" pos:column="23">protocols<pos:position pos:line="262" pos:column="32"/></name><index pos:line="262" pos:column="32">[<expr><literal type="number" pos:line="262" pos:column="33">0<pos:position pos:line="262" pos:column="34"/></literal></expr>]<pos:position pos:line="262" pos:column="35"/></index></name></expr>;<pos:position pos:line="262" pos:column="36"/></init> <condition><expr><operator pos:line="262" pos:column="37">*<pos:position pos:line="262" pos:column="38"/></operator><name pos:line="262" pos:column="38">p<pos:position pos:line="262" pos:column="39"/></name></expr>;<pos:position pos:line="262" pos:column="40"/></condition> <incr><expr><operator pos:line="262" pos:column="41">++<pos:position pos:line="262" pos:column="43"/></operator><name pos:line="262" pos:column="43">p<pos:position pos:line="262" pos:column="44"/></name></expr></incr>)<pos:position pos:line="262" pos:column="45"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="263" pos:column="7">infof<pos:position pos:line="263" pos:column="12"/></name><argument_list pos:line="263" pos:column="12">(<argument><expr><name pos:line="263" pos:column="13">data<pos:position pos:line="263" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="263" pos:column="19">"ALPN, offering %s\n"<pos:position pos:line="263" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="263" pos:column="42">*<pos:position pos:line="263" pos:column="43"/></operator><name pos:line="263" pos:column="43">p<pos:position pos:line="263" pos:column="44"/></name></expr></argument>)<pos:position pos:line="263" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="46"/></expr_stmt></block></for>
  }<pos:position pos:line="264" pos:column="4"/></block></then></if>
<cpp:endif pos:line="265" pos:column="1">#<cpp:directive pos:line="265" pos:column="2">endif<pos:position pos:line="265" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="267" pos:column="1">#<cpp:directive pos:line="267" pos:column="2">ifdef<pos:position pos:line="267" pos:column="7"/></cpp:directive> <name pos:line="267" pos:column="8">MBEDTLS_DEBUG<pos:position pos:line="267" pos:column="21"/></name></cpp:ifdef>
  <comment type="block" pos:line="268" pos:column="3">/* In order to make that work in mbedtls MBEDTLS_DEBUG_C must be defined. */</comment>
  <expr_stmt><expr><call><name pos:line="269" pos:column="3">mbedtls_ssl_conf_dbg<pos:position pos:line="269" pos:column="23"/></name><argument_list pos:line="269" pos:column="23">(<argument><expr><operator pos:line="269" pos:column="24">&amp;<pos:position pos:line="269" pos:column="29"/></operator><name><name pos:line="269" pos:column="25">BACKEND<pos:position pos:line="269" pos:column="32"/></name><operator pos:line="269" pos:column="32">-&gt;<pos:position pos:line="269" pos:column="37"/></operator><name pos:line="269" pos:column="34">config<pos:position pos:line="269" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="269" pos:column="42">mbed_debug<pos:position pos:line="269" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="269" pos:column="54">data<pos:position pos:line="269" pos:column="58"/></name></expr></argument>)<pos:position pos:line="269" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="60"/></expr_stmt>
  <comment type="block" pos:line="270" pos:column="3">/* - 0 No debug
   * - 1 Error
   * - 2 State change
   * - 3 Informational
   * - 4 Verbose
   */</comment>
  <expr_stmt><expr><call><name pos:line="276" pos:column="3">mbedtls_debug_set_threshold<pos:position pos:line="276" pos:column="30"/></name><argument_list pos:line="276" pos:column="30">(<argument><expr><literal type="number" pos:line="276" pos:column="31">4<pos:position pos:line="276" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="276" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="277" pos:column="1">#<cpp:directive pos:line="277" pos:column="2">endif<pos:position pos:line="277" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="279" pos:column="3">/* give application a chance to interfere with mbedTLS set up. */</comment>
  <if pos:line="280" pos:column="3">if<condition pos:line="280" pos:column="5">(<expr><name><name pos:line="280" pos:column="6">data<pos:position pos:line="280" pos:column="10"/></name><operator pos:line="280" pos:column="10">-&gt;<pos:position pos:line="280" pos:column="15"/></operator><name pos:line="280" pos:column="12">set<pos:position pos:line="280" pos:column="15"/></name><operator pos:line="280" pos:column="15">.<pos:position pos:line="280" pos:column="16"/></operator><name pos:line="280" pos:column="16">ssl<pos:position pos:line="280" pos:column="19"/></name><operator pos:line="280" pos:column="19">.<pos:position pos:line="280" pos:column="20"/></operator><name pos:line="280" pos:column="20">fsslctx<pos:position pos:line="280" pos:column="27"/></name></name></expr>)<pos:position pos:line="280" pos:column="28"/></condition><then pos:line="280" pos:column="28"> <block pos:line="280" pos:column="29">{
    <expr_stmt><expr><name pos:line="281" pos:column="5">ret<pos:position pos:line="281" pos:column="8"/></name> <operator pos:line="281" pos:column="9">=<pos:position pos:line="281" pos:column="10"/></operator> <call pos:line="281" pos:column="11">(<modifier pos:line="281" pos:column="12">*<pos:position pos:line="281" pos:column="13"/></modifier><name><name pos:line="281" pos:column="13">data<pos:position pos:line="281" pos:column="17"/></name><operator pos:line="281" pos:column="17">-&gt;<pos:position pos:line="281" pos:column="22"/></operator><name pos:line="281" pos:column="19">set<pos:position pos:line="281" pos:column="22"/></name><operator pos:line="281" pos:column="22">.<pos:position pos:line="281" pos:column="23"/></operator><name pos:line="281" pos:column="23">ssl<pos:position pos:line="281" pos:column="26"/></name><operator pos:line="281" pos:column="26">.<pos:position pos:line="281" pos:column="27"/></operator><name pos:line="281" pos:column="27">fsslctx<pos:position pos:line="281" pos:column="34"/></name></name>)<argument_list pos:line="281" pos:column="35">(<argument><expr><name pos:line="281" pos:column="36">data<pos:position pos:line="281" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="281" pos:column="42">&amp;<pos:position pos:line="281" pos:column="47"/></operator><name><name pos:line="281" pos:column="43">BACKEND<pos:position pos:line="281" pos:column="50"/></name><operator pos:line="281" pos:column="50">-&gt;<pos:position pos:line="281" pos:column="55"/></operator><name pos:line="281" pos:column="52">config<pos:position pos:line="281" pos:column="58"/></name></name></expr></argument>,
                                   <argument><expr><name><name pos:line="282" pos:column="36">data<pos:position pos:line="282" pos:column="40"/></name><operator pos:line="282" pos:column="40">-&gt;<pos:position pos:line="282" pos:column="45"/></operator><name pos:line="282" pos:column="42">set<pos:position pos:line="282" pos:column="45"/></name><operator pos:line="282" pos:column="45">.<pos:position pos:line="282" pos:column="46"/></operator><name pos:line="282" pos:column="46">ssl<pos:position pos:line="282" pos:column="49"/></name><operator pos:line="282" pos:column="49">.<pos:position pos:line="282" pos:column="50"/></operator><name pos:line="282" pos:column="50">fsslctxp<pos:position pos:line="282" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="282" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="282" pos:column="60"/></expr_stmt>
    <if pos:line="283" pos:column="5">if<condition pos:line="283" pos:column="7">(<expr><name pos:line="283" pos:column="8">ret<pos:position pos:line="283" pos:column="11"/></name></expr>)<pos:position pos:line="283" pos:column="12"/></condition><then pos:line="283" pos:column="12"> <block pos:line="283" pos:column="13">{
      <expr_stmt><expr><call><name pos:line="284" pos:column="7">failf<pos:position pos:line="284" pos:column="12"/></name><argument_list pos:line="284" pos:column="12">(<argument><expr><name pos:line="284" pos:column="13">data<pos:position pos:line="284" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="284" pos:column="19">"error signaled by ssl ctx callback"<pos:position pos:line="284" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="284" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="57"/></expr_stmt>
      <return pos:line="285" pos:column="7">return <expr><name pos:line="285" pos:column="14">ret<pos:position pos:line="285" pos:column="17"/></name></expr>;<pos:position pos:line="285" pos:column="18"/></return>
    }<pos:position pos:line="286" pos:column="6"/></block></then></if>
  }<pos:position pos:line="287" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="289" pos:column="3">connssl<pos:position pos:line="289" pos:column="10"/></name><operator pos:line="289" pos:column="10">-&gt;<pos:position pos:line="289" pos:column="15"/></operator><name pos:line="289" pos:column="12">connecting_state<pos:position pos:line="289" pos:column="28"/></name></name> <operator pos:line="289" pos:column="29">=<pos:position pos:line="289" pos:column="30"/></operator> <name pos:line="289" pos:column="31">ssl_connect_2<pos:position pos:line="289" pos:column="44"/></name></expr>;<pos:position pos:line="289" pos:column="45"/></expr_stmt>

  <return pos:line="291" pos:column="3">return <expr><name pos:line="291" pos:column="10">CURLE_OK<pos:position pos:line="291" pos:column="18"/></name></expr>;<pos:position pos:line="291" pos:column="19"/></return>
}<pos:position pos:line="292" pos:column="2"/></block></function></unit>
