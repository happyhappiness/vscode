<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_691_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">appenddata<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name>  <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier><modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">dst_buf<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>,   <comment type="block" pos:line="1" pos:column="42">/* dest buffer */</comment>
                      <parameter><decl><type><name pos:line="2" pos:column="23">size_t<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">dst_len<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,   <comment type="block" pos:line="2" pos:column="42">/* dest buffer data length */</comment>
                      <parameter><decl><type><name pos:line="3" pos:column="23">size_t<pos:position pos:line="3" pos:column="29"/></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">dst_alloc<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, <comment type="block" pos:line="3" pos:column="42">/* dest buffer allocated size */</comment>
                      <parameter><decl><type><name pos:line="4" pos:column="23">char<pos:position pos:line="4" pos:column="27"/></name>   <modifier pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></modifier></type><name pos:line="4" pos:column="31">src_buf<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>,   <comment type="block" pos:line="4" pos:column="42">/* source buffer */</comment>
                      <parameter><decl><type><name pos:line="5" pos:column="23">int<pos:position pos:line="5" pos:column="26"/></name></type>     <name pos:line="5" pos:column="31">src_b64<pos:position pos:line="5" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="39"/></parameter_list>   <comment type="block" pos:line="5" pos:column="42">/* != 0 if source is base64 encoded */</comment>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">need_alloc<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">src_len<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><call><name pos:line="8" pos:column="20">strlen<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">src_buf<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">src_len<pos:position pos:line="10" pos:column="14"/></name></expr>)<pos:position pos:line="10" pos:column="15"/></condition><then pos:line="10" pos:column="15">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">GPE_OK<pos:position pos:line="11" pos:column="18"/></name></expr>;<pos:position pos:line="11" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="13" pos:column="3">need_alloc<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">src_len<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">+<pos:position pos:line="13" pos:column="25"/></operator> <operator pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">dst_len<pos:position pos:line="13" pos:column="34"/></name> <operator pos:line="13" pos:column="35">+<pos:position pos:line="13" pos:column="36"/></operator> <literal type="number" pos:line="13" pos:column="37">1<pos:position pos:line="13" pos:column="38"/></literal></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">src_b64<pos:position pos:line="15" pos:column="13"/></name></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14"> <block pos:line="15" pos:column="15">{
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name><name pos:line="16" pos:column="8">src_buf<pos:position pos:line="16" pos:column="15"/></name><index pos:line="16" pos:column="15">[<expr><name pos:line="16" pos:column="16">src_len<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">-<pos:position pos:line="16" pos:column="25"/></operator> <literal type="number" pos:line="16" pos:column="26">1<pos:position pos:line="16" pos:column="27"/></literal></expr>]<pos:position pos:line="16" pos:column="28"/></index></name> <operator pos:line="16" pos:column="29">==<pos:position pos:line="16" pos:column="31"/></operator> <literal type="char" pos:line="16" pos:column="32">'\r'<pos:position pos:line="16" pos:column="36"/></literal></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="7">src_len<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">--<pos:position pos:line="17" pos:column="16"/></operator></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt></block></then></if>

    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><name><name pos:line="19" pos:column="8">src_buf<pos:position pos:line="19" pos:column="15"/></name><index pos:line="19" pos:column="15">[<expr><name pos:line="19" pos:column="16">src_len<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">-<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="26">1<pos:position pos:line="19" pos:column="27"/></literal></expr>]<pos:position pos:line="19" pos:column="28"/></index></name> <operator pos:line="19" pos:column="29">==<pos:position pos:line="19" pos:column="31"/></operator> <literal type="char" pos:line="19" pos:column="32">'\n'<pos:position pos:line="19" pos:column="36"/></literal></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="7">src_len<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">--<pos:position pos:line="20" pos:column="16"/></operator></expr>;<pos:position pos:line="20" pos:column="17"/></expr_stmt></block></then></if>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="23" pos:column="3">/* enlarge destination buffer if required */</comment>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><name pos:line="24" pos:column="6">need_alloc<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">&gt;<pos:position pos:line="24" pos:column="21"/></operator> <operator pos:line="24" pos:column="19">*<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">dst_alloc<pos:position pos:line="24" pos:column="29"/></name></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30"> <block pos:line="24" pos:column="31">{
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">size_t<pos:position pos:line="25" pos:column="11"/></name></type> <name pos:line="25" pos:column="12">newsize<pos:position pos:line="25" pos:column="19"/></name> <init pos:line="25" pos:column="20">= <expr><name pos:line="25" pos:column="22">need_alloc<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">*<pos:position pos:line="25" pos:column="34"/></operator> <literal type="number" pos:line="25" pos:column="35">2<pos:position pos:line="25" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name> <modifier pos:line="26" pos:column="10">*<pos:position pos:line="26" pos:column="11"/></modifier></type><name pos:line="26" pos:column="11">newptr<pos:position pos:line="26" pos:column="17"/></name> <init pos:line="26" pos:column="18">= <expr><call><name pos:line="26" pos:column="20">realloc<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><operator pos:line="26" pos:column="28">*<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">dst_buf<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">newsize<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="47"/></decl_stmt>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><operator pos:line="27" pos:column="8">!<pos:position pos:line="27" pos:column="9"/></operator><name pos:line="27" pos:column="9">newptr<pos:position pos:line="27" pos:column="15"/></name></expr>)<pos:position pos:line="27" pos:column="16"/></condition><then pos:line="27" pos:column="16"> <block pos:line="27" pos:column="17">{
      <return pos:line="28" pos:column="7">return <expr><name pos:line="28" pos:column="14">GPE_OUT_OF_MEMORY<pos:position pos:line="28" pos:column="31"/></name></expr>;<pos:position pos:line="28" pos:column="32"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="30" pos:column="5">*<pos:position pos:line="30" pos:column="6"/></operator><name pos:line="30" pos:column="6">dst_alloc<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <name pos:line="30" pos:column="18">newsize<pos:position pos:line="30" pos:column="25"/></name></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="31" pos:column="5">*<pos:position pos:line="31" pos:column="6"/></operator><name pos:line="31" pos:column="6">dst_buf<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">newptr<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="34" pos:column="3">/* memcpy to support binary blobs */</comment>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">memcpy<pos:position pos:line="35" pos:column="9"/></name><argument_list pos:line="35" pos:column="9">(<argument><expr><operator pos:line="35" pos:column="10">*<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="11">dst_buf<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">+<pos:position pos:line="35" pos:column="20"/></operator> <operator pos:line="35" pos:column="21">*<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">dst_len<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="31">src_buf<pos:position pos:line="35" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">src_len<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="36" pos:column="3">*<pos:position pos:line="36" pos:column="4"/></operator><name pos:line="36" pos:column="4">dst_len<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">+=<pos:position pos:line="36" pos:column="14"/></operator> <name pos:line="36" pos:column="15">src_len<pos:position pos:line="36" pos:column="22"/></name></expr>;<pos:position pos:line="36" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="37" pos:column="3">*<pos:position pos:line="37" pos:column="4"/></operator><operator pos:line="37" pos:column="4">(<pos:position pos:line="37" pos:column="5"/></operator><operator pos:line="37" pos:column="5">*<pos:position pos:line="37" pos:column="6"/></operator><name pos:line="37" pos:column="6">dst_buf<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">+<pos:position pos:line="37" pos:column="15"/></operator> <operator pos:line="37" pos:column="16">*<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">dst_len<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">)<pos:position pos:line="37" pos:column="25"/></operator> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <literal type="char" pos:line="37" pos:column="28">'\0'<pos:position pos:line="37" pos:column="32"/></literal></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>

  <return pos:line="39" pos:column="3">return <expr><name pos:line="39" pos:column="10">GPE_OK<pos:position pos:line="39" pos:column="16"/></name></expr>;<pos:position pos:line="39" pos:column="17"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
