<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2493_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">darwinssl_connect_step1<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">connectdata<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">conn<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">sockindex<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_socket_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">sockfd<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name><name pos:line="5" pos:column="26">conn<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">-&gt;<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="32">sock<pos:position pos:line="5" pos:column="36"/></name><index pos:line="5" pos:column="36">[<expr><name pos:line="5" pos:column="37">sockindex<pos:position pos:line="5" pos:column="46"/></name></expr>]<pos:position pos:line="5" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">ssl_connect_data<pos:position pos:line="6" pos:column="26"/></name></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name pos:line="6" pos:column="28">connssl<pos:position pos:line="6" pos:column="35"/></name> <init pos:line="6" pos:column="36">= <expr><operator pos:line="6" pos:column="38">&amp;<pos:position pos:line="6" pos:column="43"/></operator><name><name pos:line="6" pos:column="39">conn<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">-&gt;<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="45">ssl<pos:position pos:line="6" pos:column="48"/></name><index pos:line="6" pos:column="48">[<expr><name pos:line="6" pos:column="49">sockindex<pos:position pos:line="6" pos:column="58"/></name></expr>]<pos:position pos:line="6" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier> <specifier pos:line="7" pos:column="16">const<pos:position pos:line="7" pos:column="21"/></specifier></type> <name pos:line="7" pos:column="22">ssl_cafile<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><call><name pos:line="7" pos:column="35">SSL_CONN_CONFIG<pos:position pos:line="7" pos:column="50"/></name><argument_list pos:line="7" pos:column="50">(<argument><expr><name pos:line="7" pos:column="51">CAfile<pos:position pos:line="7" pos:column="57"/></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">bool<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">verifypeer<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name pos:line="8" pos:column="27">SSL_CONN_CONFIG<pos:position pos:line="8" pos:column="42"/></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">verifypeer<pos:position pos:line="8" pos:column="53"/></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="55"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier> <specifier pos:line="9" pos:column="10">const<pos:position pos:line="9" pos:column="15"/></specifier></type> <name pos:line="9" pos:column="16">ssl_cert<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><call><name pos:line="9" pos:column="27">SSL_SET_OPTION<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><name pos:line="9" pos:column="42">cert<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">const<pos:position pos:line="10" pos:column="8"/></specifier> <name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier> <specifier pos:line="10" pos:column="16">const<pos:position pos:line="10" pos:column="21"/></specifier></type> <name pos:line="10" pos:column="22">hostname<pos:position pos:line="10" pos:column="30"/></name> <init pos:line="10" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="10" pos:column="33">SSL_IS_PROXY<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">()<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="10" pos:column="49"/></condition><then pos:line="10" pos:column="49"> <expr><name><name pos:line="10" pos:column="50">conn<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">-&gt;<pos:position pos:line="10" pos:column="59"/></operator><name pos:line="10" pos:column="56">http_proxy<pos:position pos:line="10" pos:column="66"/></name><operator pos:line="10" pos:column="66">.<pos:position pos:line="10" pos:column="67"/></operator><name pos:line="10" pos:column="67">host<pos:position pos:line="10" pos:column="71"/></name><operator pos:line="10" pos:column="71">.<pos:position pos:line="10" pos:column="72"/></operator><name pos:line="10" pos:column="72">name<pos:position pos:line="10" pos:column="76"/></name></name></expr> <pos:position pos:line="10" pos:column="77"/></then><else pos:line="10" pos:column="77">:
    <expr><name><name pos:line="11" pos:column="5">conn<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">-&gt;<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="11">host<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">name<pos:position pos:line="11" pos:column="20"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="12" pos:column="3">const<pos:position pos:line="12" pos:column="8"/></specifier> <name pos:line="12" pos:column="9">long<pos:position pos:line="12" pos:column="13"/></name> <name pos:line="12" pos:column="14">int<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">port<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><ternary><condition><expr><call><name pos:line="12" pos:column="25">SSL_IS_PROXY<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">()<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr> ?<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41"> <expr><name><name pos:line="12" pos:column="42">conn<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">port<pos:position pos:line="12" pos:column="52"/></name></name></expr> <pos:position pos:line="12" pos:column="53"/></then><else pos:line="12" pos:column="53">: <expr><name><name pos:line="12" pos:column="55">conn<pos:position pos:line="12" pos:column="59"/></name><operator pos:line="12" pos:column="59">-&gt;<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="61">remote_port<pos:position pos:line="12" pos:column="72"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="12" pos:column="73"/></decl_stmt>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">ENABLE_IPV6<pos:position pos:line="13" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">in6_addr<pos:position pos:line="14" pos:column="18"/></name></name></type> <name pos:line="14" pos:column="19">addr<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">struct<pos:position pos:line="16" pos:column="9"/></name> <name pos:line="16" pos:column="10">in_addr<pos:position pos:line="16" pos:column="17"/></name></name></type> <name pos:line="16" pos:column="18">addr<pos:position pos:line="16" pos:column="22"/></name></decl>;<pos:position pos:line="16" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="17" pos:column="8">/* ENABLE_IPV6 */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">size_t<pos:position pos:line="18" pos:column="9"/></name></type> <name pos:line="18" pos:column="10">all_ciphers_count<pos:position pos:line="18" pos:column="27"/></name> <init pos:line="18" pos:column="28">= <expr><literal type="number" pos:line="18" pos:column="30">0UL<pos:position pos:line="18" pos:column="33"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="35">allowed_ciphers_count<pos:position pos:line="18" pos:column="56"/></name> <init pos:line="18" pos:column="57">= <expr><literal type="number" pos:line="18" pos:column="59">0UL<pos:position pos:line="18" pos:column="62"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="64">i<pos:position pos:line="18" pos:column="65"/></name></decl>;<pos:position pos:line="18" pos:column="66"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">SSLCipherSuite<pos:position pos:line="19" pos:column="17"/></name> <modifier pos:line="19" pos:column="18">*<pos:position pos:line="19" pos:column="19"/></modifier></type><name pos:line="19" pos:column="19">all_ciphers<pos:position pos:line="19" pos:column="30"/></name> <init pos:line="19" pos:column="31">= <expr><name pos:line="19" pos:column="33">NULL<pos:position pos:line="19" pos:column="37"/></name></expr></init></decl>, <modifier pos:line="19" pos:column="39">*<pos:position pos:line="19" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="19" pos:column="40">allowed_ciphers<pos:position pos:line="19" pos:column="55"/></name> <init pos:line="19" pos:column="56">= <expr><name pos:line="19" pos:column="58">NULL<pos:position pos:line="19" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="63"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">OSStatus<pos:position pos:line="20" pos:column="11"/></name></type> <name pos:line="20" pos:column="12">err<pos:position pos:line="20" pos:column="15"/></name> <init pos:line="20" pos:column="16">= <expr><name pos:line="20" pos:column="18">noErr<pos:position pos:line="20" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="24"/></decl_stmt>
<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><name pos:line="21" pos:column="5">CURL_BUILD_MAC<pos:position pos:line="21" pos:column="19"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">int<pos:position pos:line="22" pos:column="6"/></name></type> <name pos:line="22" pos:column="7">darwinver_maj<pos:position pos:line="22" pos:column="20"/></name> <init pos:line="22" pos:column="21">= <expr><literal type="number" pos:line="22" pos:column="23">0<pos:position pos:line="22" pos:column="24"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="22" pos:column="26">darwinver_min<pos:position pos:line="22" pos:column="39"/></name> <init pos:line="22" pos:column="40">= <expr><literal type="number" pos:line="22" pos:column="42">0<pos:position pos:line="22" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="44"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="24" pos:column="3">GetDarwinVersionNumber<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><operator pos:line="24" pos:column="26">&amp;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="27">darwinver_maj<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="42">&amp;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="43">darwinver_min<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="25" pos:column="8">/* CURL_BUILD_MAC */</comment>

<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><name pos:line="27" pos:column="5">CURL_BUILD_MAC_10_8<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">||<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="28">CURL_BUILD_IOS<pos:position pos:line="27" pos:column="42"/></name></expr></cpp:if>
  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><name pos:line="28" pos:column="6">SSLCreateContext<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">!=<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">NULL<pos:position pos:line="28" pos:column="30"/></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31"> <block pos:line="28" pos:column="32">{  <comment type="block" pos:line="28" pos:column="35">/* use the newer API if avaialble */</comment>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><name><name pos:line="29" pos:column="8">BACKEND<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">ssl_ctx<pos:position pos:line="29" pos:column="24"/></name></name></expr>)<pos:position pos:line="29" pos:column="25"/></condition><then pos:line="29" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="7">CFRelease<pos:position pos:line="30" pos:column="16"/></name><argument_list pos:line="30" pos:column="16">(<argument><expr><name><name pos:line="30" pos:column="17">BACKEND<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">-&gt;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="26">ssl_ctx<pos:position pos:line="30" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">BACKEND<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">ssl_ctx<pos:position pos:line="31" pos:column="21"/></name></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <call><name pos:line="31" pos:column="24">SSLCreateContext<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">NULL<pos:position pos:line="31" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="47">kSSLClientSide<pos:position pos:line="31" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">kSSLStreamType<pos:position pos:line="31" pos:column="77"/></name></expr></argument>)<pos:position pos:line="31" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="79"/></expr_stmt>
    <if pos:line="32" pos:column="5">if<condition pos:line="32" pos:column="7">(<expr><operator pos:line="32" pos:column="8">!<pos:position pos:line="32" pos:column="9"/></operator><name><name pos:line="32" pos:column="9">BACKEND<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">ssl_ctx<pos:position pos:line="32" pos:column="25"/></name></name></expr>)<pos:position pos:line="32" pos:column="26"/></condition><then pos:line="32" pos:column="26"> <block pos:line="32" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">failf<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">data<pos:position pos:line="33" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="19">"SSL: couldn't create a context!"<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
      <return pos:line="34" pos:column="7">return <expr><name pos:line="34" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></then>
  <else pos:line="37" pos:column="3">else <block pos:line="37" pos:column="8">{
  <comment type="block" pos:line="38" pos:column="3">/* The old ST API does not exist under iOS, so don't compile it: */</comment>
<cpp:if pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">if<pos:position pos:line="39" pos:column="4"/></cpp:directive> <expr><name pos:line="39" pos:column="5">CURL_SUPPORT_MAC_10_8<pos:position pos:line="39" pos:column="26"/></name></expr></cpp:if>
    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><name><name pos:line="40" pos:column="8">BACKEND<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">ssl_ctx<pos:position pos:line="40" pos:column="24"/></name></name></expr>)<pos:position pos:line="40" pos:column="25"/></condition><then pos:line="40" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="41" pos:column="7">(<pos:position pos:line="41" pos:column="8"/></operator><name pos:line="41" pos:column="8">void<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">)<pos:position pos:line="41" pos:column="13"/></operator><call><name pos:line="41" pos:column="13">SSLDisposeContext<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">(<argument><expr><name><name pos:line="41" pos:column="31">BACKEND<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">-&gt;<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="40">ssl_ctx<pos:position pos:line="41" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="42" pos:column="5">err<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <call><name pos:line="42" pos:column="11">SSLNewContext<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><literal type="boolean" pos:line="42" pos:column="25">false<pos:position pos:line="42" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="42" pos:column="32">&amp;<pos:position pos:line="42" pos:column="37"/></operator><operator pos:line="42" pos:column="33">(<pos:position pos:line="42" pos:column="34"/></operator><name><name pos:line="42" pos:column="34">BACKEND<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">ssl_ctx<pos:position pos:line="42" pos:column="50"/></name></name><operator pos:line="42" pos:column="50">)<pos:position pos:line="42" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="53"/></expr_stmt>
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><name pos:line="43" pos:column="8">err<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">!=<pos:position pos:line="43" pos:column="14"/></operator> <name pos:line="43" pos:column="15">noErr<pos:position pos:line="43" pos:column="20"/></name></expr>)<pos:position pos:line="43" pos:column="21"/></condition><then pos:line="43" pos:column="21"> <block pos:line="43" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">failf<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><name pos:line="44" pos:column="13">data<pos:position pos:line="44" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="19">"SSL: couldn't create a context: OSStatus %d"<pos:position pos:line="44" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="66">err<pos:position pos:line="44" pos:column="69"/></name></expr></argument>)<pos:position pos:line="44" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="71"/></expr_stmt>
      <return pos:line="45" pos:column="7">return <expr><name pos:line="45" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="45" pos:column="33"/></name></expr>;<pos:position pos:line="45" pos:column="34"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="47" pos:column="8">/* CURL_SUPPORT_MAC_10_8 */</comment>
  }<pos:position pos:line="48" pos:column="4"/></block></else></if>
<cpp:else pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">else<pos:position pos:line="49" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="50" pos:column="3">if<condition pos:line="50" pos:column="5">(<expr><name><name pos:line="50" pos:column="6">BACKEND<pos:position pos:line="50" pos:column="13"/></name><operator pos:line="50" pos:column="13">-&gt;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="15">ssl_ctx<pos:position pos:line="50" pos:column="22"/></name></name></expr>)<pos:position pos:line="50" pos:column="23"/></condition><then pos:line="50" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="51" pos:column="5">(<pos:position pos:line="51" pos:column="6"/></operator><name pos:line="51" pos:column="6">void<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">)<pos:position pos:line="51" pos:column="11"/></operator><call><name pos:line="51" pos:column="11">SSLDisposeContext<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name><name pos:line="51" pos:column="29">BACKEND<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">-&gt;<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="38">ssl_ctx<pos:position pos:line="51" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="47"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="52" pos:column="3">err<pos:position pos:line="52" pos:column="6"/></name> <operator pos:line="52" pos:column="7">=<pos:position pos:line="52" pos:column="8"/></operator> <call><name pos:line="52" pos:column="9">SSLNewContext<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><literal type="boolean" pos:line="52" pos:column="23">false<pos:position pos:line="52" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="52" pos:column="30">&amp;<pos:position pos:line="52" pos:column="35"/></operator><operator pos:line="52" pos:column="31">(<pos:position pos:line="52" pos:column="32"/></operator><name><name pos:line="52" pos:column="32">BACKEND<pos:position pos:line="52" pos:column="39"/></name><operator pos:line="52" pos:column="39">-&gt;<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="41">ssl_ctx<pos:position pos:line="52" pos:column="48"/></name></name><operator pos:line="52" pos:column="48">)<pos:position pos:line="52" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt>
  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name pos:line="53" pos:column="6">err<pos:position pos:line="53" pos:column="9"/></name> <operator pos:line="53" pos:column="10">!=<pos:position pos:line="53" pos:column="12"/></operator> <name pos:line="53" pos:column="13">noErr<pos:position pos:line="53" pos:column="18"/></name></expr>)<pos:position pos:line="53" pos:column="19"/></condition><then pos:line="53" pos:column="19"> <block pos:line="53" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">failf<pos:position pos:line="54" pos:column="10"/></name><argument_list pos:line="54" pos:column="10">(<argument><expr><name pos:line="54" pos:column="11">data<pos:position pos:line="54" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="17">"SSL: couldn't create a context: OSStatus %d"<pos:position pos:line="54" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="64">err<pos:position pos:line="54" pos:column="67"/></name></expr></argument>)<pos:position pos:line="54" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="69"/></expr_stmt>
    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="55" pos:column="31"/></name></expr>;<pos:position pos:line="55" pos:column="32"/></return>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="57" pos:column="8">/* CURL_BUILD_MAC_10_8 || CURL_BUILD_IOS */</comment>
  <expr_stmt><expr><name><name pos:line="58" pos:column="3">BACKEND<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">ssl_write_buffered_length<pos:position pos:line="58" pos:column="37"/></name></name> <operator pos:line="58" pos:column="38">=<pos:position pos:line="58" pos:column="39"/></operator> <literal type="number" pos:line="58" pos:column="40">0UL<pos:position pos:line="58" pos:column="43"/></literal></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt> <comment type="block" pos:line="58" pos:column="45">/* reset buffered write length */</comment>

  <comment type="block" pos:line="60" pos:column="3">/* check to see if we've been told to use an explicit SSL/TLS version */</comment>
<cpp:if pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">if<pos:position pos:line="61" pos:column="4"/></cpp:directive> <expr><name pos:line="61" pos:column="5">CURL_BUILD_MAC_10_8<pos:position pos:line="61" pos:column="24"/></name> <operator pos:line="61" pos:column="25">||<pos:position pos:line="61" pos:column="27"/></operator> <name pos:line="61" pos:column="28">CURL_BUILD_IOS<pos:position pos:line="61" pos:column="42"/></name></expr></cpp:if>
  <if pos:line="62" pos:column="3">if<condition pos:line="62" pos:column="5">(<expr><name pos:line="62" pos:column="6">SSLSetProtocolVersionMax<pos:position pos:line="62" pos:column="30"/></name> <operator pos:line="62" pos:column="31">!=<pos:position pos:line="62" pos:column="33"/></operator> <name pos:line="62" pos:column="34">NULL<pos:position pos:line="62" pos:column="38"/></name></expr>)<pos:position pos:line="62" pos:column="39"/></condition><then pos:line="62" pos:column="39"> <block pos:line="62" pos:column="40">{
    <switch pos:line="63" pos:column="5">switch<condition pos:line="63" pos:column="11">(<expr><name><name pos:line="63" pos:column="12">conn<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">-&gt;<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="18">ssl_config<pos:position pos:line="63" pos:column="28"/></name><operator pos:line="63" pos:column="28">.<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="29">version<pos:position pos:line="63" pos:column="36"/></name></name></expr>)<pos:position pos:line="63" pos:column="37"/></condition> <block pos:line="63" pos:column="38">{
    <case pos:line="64" pos:column="5">case <expr><name pos:line="64" pos:column="10">CURL_SSLVERSION_DEFAULT<pos:position pos:line="64" pos:column="33"/></name></expr>:<pos:position pos:line="64" pos:column="34"/></case>
    <case pos:line="65" pos:column="5">case <expr><name pos:line="65" pos:column="10">CURL_SSLVERSION_TLSv1<pos:position pos:line="65" pos:column="31"/></name></expr>:<pos:position pos:line="65" pos:column="32"/></case>
      <expr_stmt><expr><operator pos:line="66" pos:column="7">(<pos:position pos:line="66" pos:column="8"/></operator><name pos:line="66" pos:column="8">void<pos:position pos:line="66" pos:column="12"/></name><operator pos:line="66" pos:column="12">)<pos:position pos:line="66" pos:column="13"/></operator><call><name pos:line="66" pos:column="13">SSLSetProtocolVersionMin<pos:position pos:line="66" pos:column="37"/></name><argument_list pos:line="66" pos:column="37">(<argument><expr><name><name pos:line="66" pos:column="38">BACKEND<pos:position pos:line="66" pos:column="45"/></name><operator pos:line="66" pos:column="45">-&gt;<pos:position pos:line="66" pos:column="50"/></operator><name pos:line="66" pos:column="47">ssl_ctx<pos:position pos:line="66" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="56">kTLSProtocol1<pos:position pos:line="66" pos:column="69"/></name></expr></argument>)<pos:position pos:line="66" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="71"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="67" pos:column="7">(<pos:position pos:line="67" pos:column="8"/></operator><name pos:line="67" pos:column="8">void<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">)<pos:position pos:line="67" pos:column="13"/></operator><call><name pos:line="67" pos:column="13">SSLSetProtocolVersionMax<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><name><name pos:line="67" pos:column="38">BACKEND<pos:position pos:line="67" pos:column="45"/></name><operator pos:line="67" pos:column="45">-&gt;<pos:position pos:line="67" pos:column="50"/></operator><name pos:line="67" pos:column="47">ssl_ctx<pos:position pos:line="67" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="56">kTLSProtocol12<pos:position pos:line="67" pos:column="70"/></name></expr></argument>)<pos:position pos:line="67" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="72"/></expr_stmt>
      <break pos:line="68" pos:column="7">break;<pos:position pos:line="68" pos:column="13"/></break>
    <case pos:line="69" pos:column="5">case <expr><name pos:line="69" pos:column="10">CURL_SSLVERSION_TLSv1_0<pos:position pos:line="69" pos:column="33"/></name></expr>:<pos:position pos:line="69" pos:column="34"/></case>
    <case pos:line="70" pos:column="5">case <expr><name pos:line="70" pos:column="10">CURL_SSLVERSION_TLSv1_1<pos:position pos:line="70" pos:column="33"/></name></expr>:<pos:position pos:line="70" pos:column="34"/></case>
    <case pos:line="71" pos:column="5">case <expr><name pos:line="71" pos:column="10">CURL_SSLVERSION_TLSv1_2<pos:position pos:line="71" pos:column="33"/></name></expr>:<pos:position pos:line="71" pos:column="34"/></case>
    <case pos:line="72" pos:column="5">case <expr><name pos:line="72" pos:column="10">CURL_SSLVERSION_TLSv1_3<pos:position pos:line="72" pos:column="33"/></name></expr>:<pos:position pos:line="72" pos:column="34"/></case>
      <block pos:line="73" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="74" pos:column="9">CURLcode<pos:position pos:line="74" pos:column="17"/></name></type> <name pos:line="74" pos:column="18">result<pos:position pos:line="74" pos:column="24"/></name> <init pos:line="74" pos:column="25">= <expr><call><name pos:line="74" pos:column="27">set_ssl_version_min_max<pos:position pos:line="74" pos:column="50"/></name><argument_list pos:line="74" pos:column="50">(<argument><expr><name pos:line="74" pos:column="51">conn<pos:position pos:line="74" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="57">sockindex<pos:position pos:line="74" pos:column="66"/></name></expr></argument>)<pos:position pos:line="74" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="74" pos:column="68"/></decl_stmt>
        <if pos:line="75" pos:column="9">if<condition pos:line="75" pos:column="11">(<expr><name pos:line="75" pos:column="12">result<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">!=<pos:position pos:line="75" pos:column="21"/></operator> <name pos:line="75" pos:column="22">CURLE_OK<pos:position pos:line="75" pos:column="30"/></name></expr>)<pos:position pos:line="75" pos:column="31"/></condition><then pos:line="75" pos:column="31">
          <block type="pseudo"><return pos:line="76" pos:column="11">return <expr><name pos:line="76" pos:column="18">result<pos:position pos:line="76" pos:column="24"/></name></expr>;<pos:position pos:line="76" pos:column="25"/></return></block></then></if>
        <break pos:line="77" pos:column="9">break;<pos:position pos:line="77" pos:column="15"/></break>
      }<pos:position pos:line="78" pos:column="8"/></block>
    <case pos:line="79" pos:column="5">case <expr><name pos:line="79" pos:column="10">CURL_SSLVERSION_SSLv3<pos:position pos:line="79" pos:column="31"/></name></expr>:<pos:position pos:line="79" pos:column="32"/></case>
      <expr_stmt><expr><name pos:line="80" pos:column="7">err<pos:position pos:line="80" pos:column="10"/></name> <operator pos:line="80" pos:column="11">=<pos:position pos:line="80" pos:column="12"/></operator> <call><name pos:line="80" pos:column="13">SSLSetProtocolVersionMin<pos:position pos:line="80" pos:column="37"/></name><argument_list pos:line="80" pos:column="37">(<argument><expr><name><name pos:line="80" pos:column="38">BACKEND<pos:position pos:line="80" pos:column="45"/></name><operator pos:line="80" pos:column="45">-&gt;<pos:position pos:line="80" pos:column="50"/></operator><name pos:line="80" pos:column="47">ssl_ctx<pos:position pos:line="80" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="56">kSSLProtocol3<pos:position pos:line="80" pos:column="69"/></name></expr></argument>)<pos:position pos:line="80" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="71"/></expr_stmt>
      <if pos:line="81" pos:column="7">if<condition pos:line="81" pos:column="9">(<expr><name pos:line="81" pos:column="10">err<pos:position pos:line="81" pos:column="13"/></name> <operator pos:line="81" pos:column="14">!=<pos:position pos:line="81" pos:column="16"/></operator> <name pos:line="81" pos:column="17">noErr<pos:position pos:line="81" pos:column="22"/></name></expr>)<pos:position pos:line="81" pos:column="23"/></condition><then pos:line="81" pos:column="23"> <block pos:line="81" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">failf<pos:position pos:line="82" pos:column="14"/></name><argument_list pos:line="82" pos:column="14">(<argument><expr><name pos:line="82" pos:column="15">data<pos:position pos:line="82" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="21">"Your version of the OS does not support SSLv3"<pos:position pos:line="82" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="70"/></expr_stmt>
        <return pos:line="83" pos:column="9">return <expr><name pos:line="83" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="83" pos:column="39"/></name></expr>;<pos:position pos:line="83" pos:column="40"/></return>
      }<pos:position pos:line="84" pos:column="8"/></block></then></if>
      <expr_stmt><expr><operator pos:line="85" pos:column="7">(<pos:position pos:line="85" pos:column="8"/></operator><name pos:line="85" pos:column="8">void<pos:position pos:line="85" pos:column="12"/></name><operator pos:line="85" pos:column="12">)<pos:position pos:line="85" pos:column="13"/></operator><call><name pos:line="85" pos:column="13">SSLSetProtocolVersionMax<pos:position pos:line="85" pos:column="37"/></name><argument_list pos:line="85" pos:column="37">(<argument><expr><name><name pos:line="85" pos:column="38">BACKEND<pos:position pos:line="85" pos:column="45"/></name><operator pos:line="85" pos:column="45">-&gt;<pos:position pos:line="85" pos:column="50"/></operator><name pos:line="85" pos:column="47">ssl_ctx<pos:position pos:line="85" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="56">kSSLProtocol3<pos:position pos:line="85" pos:column="69"/></name></expr></argument>)<pos:position pos:line="85" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="71"/></expr_stmt>
      <break pos:line="86" pos:column="7">break;<pos:position pos:line="86" pos:column="13"/></break>
    <case pos:line="87" pos:column="5">case <expr><name pos:line="87" pos:column="10">CURL_SSLVERSION_SSLv2<pos:position pos:line="87" pos:column="31"/></name></expr>:<pos:position pos:line="87" pos:column="32"/></case>
      <expr_stmt><expr><name pos:line="88" pos:column="7">err<pos:position pos:line="88" pos:column="10"/></name> <operator pos:line="88" pos:column="11">=<pos:position pos:line="88" pos:column="12"/></operator> <call><name pos:line="88" pos:column="13">SSLSetProtocolVersionMin<pos:position pos:line="88" pos:column="37"/></name><argument_list pos:line="88" pos:column="37">(<argument><expr><name><name pos:line="88" pos:column="38">BACKEND<pos:position pos:line="88" pos:column="45"/></name><operator pos:line="88" pos:column="45">-&gt;<pos:position pos:line="88" pos:column="50"/></operator><name pos:line="88" pos:column="47">ssl_ctx<pos:position pos:line="88" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="56">kSSLProtocol2<pos:position pos:line="88" pos:column="69"/></name></expr></argument>)<pos:position pos:line="88" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="71"/></expr_stmt>
      <if pos:line="89" pos:column="7">if<condition pos:line="89" pos:column="9">(<expr><name pos:line="89" pos:column="10">err<pos:position pos:line="89" pos:column="13"/></name> <operator pos:line="89" pos:column="14">!=<pos:position pos:line="89" pos:column="16"/></operator> <name pos:line="89" pos:column="17">noErr<pos:position pos:line="89" pos:column="22"/></name></expr>)<pos:position pos:line="89" pos:column="23"/></condition><then pos:line="89" pos:column="23"> <block pos:line="89" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="90" pos:column="9">failf<pos:position pos:line="90" pos:column="14"/></name><argument_list pos:line="90" pos:column="14">(<argument><expr><name pos:line="90" pos:column="15">data<pos:position pos:line="90" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="21">"Your version of the OS does not support SSLv2"<pos:position pos:line="90" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="70"/></expr_stmt>
        <return pos:line="91" pos:column="9">return <expr><name pos:line="91" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="91" pos:column="39"/></name></expr>;<pos:position pos:line="91" pos:column="40"/></return>
      }<pos:position pos:line="92" pos:column="8"/></block></then></if>
      <expr_stmt><expr><operator pos:line="93" pos:column="7">(<pos:position pos:line="93" pos:column="8"/></operator><name pos:line="93" pos:column="8">void<pos:position pos:line="93" pos:column="12"/></name><operator pos:line="93" pos:column="12">)<pos:position pos:line="93" pos:column="13"/></operator><call><name pos:line="93" pos:column="13">SSLSetProtocolVersionMax<pos:position pos:line="93" pos:column="37"/></name><argument_list pos:line="93" pos:column="37">(<argument><expr><name><name pos:line="93" pos:column="38">BACKEND<pos:position pos:line="93" pos:column="45"/></name><operator pos:line="93" pos:column="45">-&gt;<pos:position pos:line="93" pos:column="50"/></operator><name pos:line="93" pos:column="47">ssl_ctx<pos:position pos:line="93" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="56">kSSLProtocol2<pos:position pos:line="93" pos:column="69"/></name></expr></argument>)<pos:position pos:line="93" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="71"/></expr_stmt>
      <break pos:line="94" pos:column="7">break;<pos:position pos:line="94" pos:column="13"/></break>
    <default pos:line="95" pos:column="5">default:<pos:position pos:line="95" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="96" pos:column="7">failf<pos:position pos:line="96" pos:column="12"/></name><argument_list pos:line="96" pos:column="12">(<argument><expr><name pos:line="96" pos:column="13">data<pos:position pos:line="96" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="19">"Unrecognized parameter passed via CURLOPT_SSLVERSION"<pos:position pos:line="96" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="75"/></expr_stmt>
      <return pos:line="97" pos:column="7">return <expr><name pos:line="97" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="97" pos:column="37"/></name></expr>;<pos:position pos:line="97" pos:column="38"/></return>
    }<pos:position pos:line="98" pos:column="6"/></block></switch>
  }<pos:position pos:line="99" pos:column="4"/></block></then>
  <else pos:line="100" pos:column="3">else <block pos:line="100" pos:column="8">{
<cpp:if pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">if<pos:position pos:line="101" pos:column="4"/></cpp:directive> <expr><name pos:line="101" pos:column="5">CURL_SUPPORT_MAC_10_8<pos:position pos:line="101" pos:column="26"/></name></expr></cpp:if>
    <expr_stmt><expr><operator pos:line="102" pos:column="5">(<pos:position pos:line="102" pos:column="6"/></operator><name pos:line="102" pos:column="6">void<pos:position pos:line="102" pos:column="10"/></name><operator pos:line="102" pos:column="10">)<pos:position pos:line="102" pos:column="11"/></operator><call><name pos:line="102" pos:column="11">SSLSetProtocolVersionEnabled<pos:position pos:line="102" pos:column="39"/></name><argument_list pos:line="102" pos:column="39">(<argument><expr><name><name pos:line="102" pos:column="40">BACKEND<pos:position pos:line="102" pos:column="47"/></name><operator pos:line="102" pos:column="47">-&gt;<pos:position pos:line="102" pos:column="52"/></operator><name pos:line="102" pos:column="49">ssl_ctx<pos:position pos:line="102" pos:column="56"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="103" pos:column="40">kSSLProtocolAll<pos:position pos:line="103" pos:column="55"/></name></expr></argument>,
                                       <argument><expr><literal type="boolean" pos:line="104" pos:column="40">false<pos:position pos:line="104" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="47"/></expr_stmt>
    <switch pos:line="105" pos:column="5">switch<condition pos:line="105" pos:column="11">(<expr><name><name pos:line="105" pos:column="12">conn<pos:position pos:line="105" pos:column="16"/></name><operator pos:line="105" pos:column="16">-&gt;<pos:position pos:line="105" pos:column="21"/></operator><name pos:line="105" pos:column="18">ssl_config<pos:position pos:line="105" pos:column="28"/></name><operator pos:line="105" pos:column="28">.<pos:position pos:line="105" pos:column="29"/></operator><name pos:line="105" pos:column="29">version<pos:position pos:line="105" pos:column="36"/></name></name></expr>)<pos:position pos:line="105" pos:column="37"/></condition> <block pos:line="105" pos:column="38">{
    <case pos:line="106" pos:column="5">case <expr><name pos:line="106" pos:column="10">CURL_SSLVERSION_DEFAULT<pos:position pos:line="106" pos:column="33"/></name></expr>:<pos:position pos:line="106" pos:column="34"/></case>
    <case pos:line="107" pos:column="5">case <expr><name pos:line="107" pos:column="10">CURL_SSLVERSION_TLSv1<pos:position pos:line="107" pos:column="31"/></name></expr>:<pos:position pos:line="107" pos:column="32"/></case>
      <expr_stmt><expr><operator pos:line="108" pos:column="7">(<pos:position pos:line="108" pos:column="8"/></operator><name pos:line="108" pos:column="8">void<pos:position pos:line="108" pos:column="12"/></name><operator pos:line="108" pos:column="12">)<pos:position pos:line="108" pos:column="13"/></operator><call><name pos:line="108" pos:column="13">SSLSetProtocolVersionEnabled<pos:position pos:line="108" pos:column="41"/></name><argument_list pos:line="108" pos:column="41">(<argument><expr><name><name pos:line="108" pos:column="42">BACKEND<pos:position pos:line="108" pos:column="49"/></name><operator pos:line="108" pos:column="49">-&gt;<pos:position pos:line="108" pos:column="54"/></operator><name pos:line="108" pos:column="51">ssl_ctx<pos:position pos:line="108" pos:column="58"/></name></name></expr></argument>,
                                         <argument><expr><name pos:line="109" pos:column="42">kTLSProtocol1<pos:position pos:line="109" pos:column="55"/></name></expr></argument>,
                                         <argument><expr><literal type="boolean" pos:line="110" pos:column="42">true<pos:position pos:line="110" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="111" pos:column="7">(<pos:position pos:line="111" pos:column="8"/></operator><name pos:line="111" pos:column="8">void<pos:position pos:line="111" pos:column="12"/></name><operator pos:line="111" pos:column="12">)<pos:position pos:line="111" pos:column="13"/></operator><call><name pos:line="111" pos:column="13">SSLSetProtocolVersionEnabled<pos:position pos:line="111" pos:column="41"/></name><argument_list pos:line="111" pos:column="41">(<argument><expr><name><name pos:line="111" pos:column="42">BACKEND<pos:position pos:line="111" pos:column="49"/></name><operator pos:line="111" pos:column="49">-&gt;<pos:position pos:line="111" pos:column="54"/></operator><name pos:line="111" pos:column="51">ssl_ctx<pos:position pos:line="111" pos:column="58"/></name></name></expr></argument>,
                                         <argument><expr><name pos:line="112" pos:column="42">kTLSProtocol11<pos:position pos:line="112" pos:column="56"/></name></expr></argument>,
                                         <argument><expr><literal type="boolean" pos:line="113" pos:column="42">true<pos:position pos:line="113" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="114" pos:column="7">(<pos:position pos:line="114" pos:column="8"/></operator><name pos:line="114" pos:column="8">void<pos:position pos:line="114" pos:column="12"/></name><operator pos:line="114" pos:column="12">)<pos:position pos:line="114" pos:column="13"/></operator><call><name pos:line="114" pos:column="13">SSLSetProtocolVersionEnabled<pos:position pos:line="114" pos:column="41"/></name><argument_list pos:line="114" pos:column="41">(<argument><expr><name><name pos:line="114" pos:column="42">BACKEND<pos:position pos:line="114" pos:column="49"/></name><operator pos:line="114" pos:column="49">-&gt;<pos:position pos:line="114" pos:column="54"/></operator><name pos:line="114" pos:column="51">ssl_ctx<pos:position pos:line="114" pos:column="58"/></name></name></expr></argument>,
                                         <argument><expr><name pos:line="115" pos:column="42">kTLSProtocol12<pos:position pos:line="115" pos:column="56"/></name></expr></argument>,
                                         <argument><expr><literal type="boolean" pos:line="116" pos:column="42">true<pos:position pos:line="116" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="48"/></expr_stmt>
      <break pos:line="117" pos:column="7">break;<pos:position pos:line="117" pos:column="13"/></break>
    <case pos:line="118" pos:column="5">case <expr><name pos:line="118" pos:column="10">CURL_SSLVERSION_TLSv1_0<pos:position pos:line="118" pos:column="33"/></name></expr>:<pos:position pos:line="118" pos:column="34"/></case>
    <case pos:line="119" pos:column="5">case <expr><name pos:line="119" pos:column="10">CURL_SSLVERSION_TLSv1_1<pos:position pos:line="119" pos:column="33"/></name></expr>:<pos:position pos:line="119" pos:column="34"/></case>
    <case pos:line="120" pos:column="5">case <expr><name pos:line="120" pos:column="10">CURL_SSLVERSION_TLSv1_2<pos:position pos:line="120" pos:column="33"/></name></expr>:<pos:position pos:line="120" pos:column="34"/></case>
    <case pos:line="121" pos:column="5">case <expr><name pos:line="121" pos:column="10">CURL_SSLVERSION_TLSv1_3<pos:position pos:line="121" pos:column="33"/></name></expr>:<pos:position pos:line="121" pos:column="34"/></case>
      <block pos:line="122" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="123" pos:column="9">CURLcode<pos:position pos:line="123" pos:column="17"/></name></type> <name pos:line="123" pos:column="18">result<pos:position pos:line="123" pos:column="24"/></name> <init pos:line="123" pos:column="25">= <expr><call><name pos:line="123" pos:column="27">set_ssl_version_min_max<pos:position pos:line="123" pos:column="50"/></name><argument_list pos:line="123" pos:column="50">(<argument><expr><name pos:line="123" pos:column="51">conn<pos:position pos:line="123" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="57">sockindex<pos:position pos:line="123" pos:column="66"/></name></expr></argument>)<pos:position pos:line="123" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="123" pos:column="68"/></decl_stmt>
        <if pos:line="124" pos:column="9">if<condition pos:line="124" pos:column="11">(<expr><name pos:line="124" pos:column="12">result<pos:position pos:line="124" pos:column="18"/></name> <operator pos:line="124" pos:column="19">!=<pos:position pos:line="124" pos:column="21"/></operator> <name pos:line="124" pos:column="22">CURLE_OK<pos:position pos:line="124" pos:column="30"/></name></expr>)<pos:position pos:line="124" pos:column="31"/></condition><then pos:line="124" pos:column="31">
          <block type="pseudo"><return pos:line="125" pos:column="11">return <expr><name pos:line="125" pos:column="18">result<pos:position pos:line="125" pos:column="24"/></name></expr>;<pos:position pos:line="125" pos:column="25"/></return></block></then></if>
        <break pos:line="126" pos:column="9">break;<pos:position pos:line="126" pos:column="15"/></break>
      }<pos:position pos:line="127" pos:column="8"/></block>
    <case pos:line="128" pos:column="5">case <expr><name pos:line="128" pos:column="10">CURL_SSLVERSION_SSLv3<pos:position pos:line="128" pos:column="31"/></name></expr>:<pos:position pos:line="128" pos:column="32"/></case>
      <expr_stmt><expr><name pos:line="129" pos:column="7">err<pos:position pos:line="129" pos:column="10"/></name> <operator pos:line="129" pos:column="11">=<pos:position pos:line="129" pos:column="12"/></operator> <call><name pos:line="129" pos:column="13">SSLSetProtocolVersionEnabled<pos:position pos:line="129" pos:column="41"/></name><argument_list pos:line="129" pos:column="41">(<argument><expr><name><name pos:line="129" pos:column="42">BACKEND<pos:position pos:line="129" pos:column="49"/></name><operator pos:line="129" pos:column="49">-&gt;<pos:position pos:line="129" pos:column="54"/></operator><name pos:line="129" pos:column="51">ssl_ctx<pos:position pos:line="129" pos:column="58"/></name></name></expr></argument>,
                                         <argument><expr><name pos:line="130" pos:column="42">kSSLProtocol3<pos:position pos:line="130" pos:column="55"/></name></expr></argument>,
                                         <argument><expr><literal type="boolean" pos:line="131" pos:column="42">true<pos:position pos:line="131" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="48"/></expr_stmt>
      <if pos:line="132" pos:column="7">if<condition pos:line="132" pos:column="9">(<expr><name pos:line="132" pos:column="10">err<pos:position pos:line="132" pos:column="13"/></name> <operator pos:line="132" pos:column="14">!=<pos:position pos:line="132" pos:column="16"/></operator> <name pos:line="132" pos:column="17">noErr<pos:position pos:line="132" pos:column="22"/></name></expr>)<pos:position pos:line="132" pos:column="23"/></condition><then pos:line="132" pos:column="23"> <block pos:line="132" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="133" pos:column="9">failf<pos:position pos:line="133" pos:column="14"/></name><argument_list pos:line="133" pos:column="14">(<argument><expr><name pos:line="133" pos:column="15">data<pos:position pos:line="133" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="21">"Your version of the OS does not support SSLv3"<pos:position pos:line="133" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="70"/></expr_stmt>
        <return pos:line="134" pos:column="9">return <expr><name pos:line="134" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="134" pos:column="39"/></name></expr>;<pos:position pos:line="134" pos:column="40"/></return>
      }<pos:position pos:line="135" pos:column="8"/></block></then></if>
      <break pos:line="136" pos:column="7">break;<pos:position pos:line="136" pos:column="13"/></break>
    <case pos:line="137" pos:column="5">case <expr><name pos:line="137" pos:column="10">CURL_SSLVERSION_SSLv2<pos:position pos:line="137" pos:column="31"/></name></expr>:<pos:position pos:line="137" pos:column="32"/></case>
      <expr_stmt><expr><name pos:line="138" pos:column="7">err<pos:position pos:line="138" pos:column="10"/></name> <operator pos:line="138" pos:column="11">=<pos:position pos:line="138" pos:column="12"/></operator> <call><name pos:line="138" pos:column="13">SSLSetProtocolVersionEnabled<pos:position pos:line="138" pos:column="41"/></name><argument_list pos:line="138" pos:column="41">(<argument><expr><name><name pos:line="138" pos:column="42">BACKEND<pos:position pos:line="138" pos:column="49"/></name><operator pos:line="138" pos:column="49">-&gt;<pos:position pos:line="138" pos:column="54"/></operator><name pos:line="138" pos:column="51">ssl_ctx<pos:position pos:line="138" pos:column="58"/></name></name></expr></argument>,
                                         <argument><expr><name pos:line="139" pos:column="42">kSSLProtocol2<pos:position pos:line="139" pos:column="55"/></name></expr></argument>,
                                         <argument><expr><literal type="boolean" pos:line="140" pos:column="42">true<pos:position pos:line="140" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="48"/></expr_stmt>
      <if pos:line="141" pos:column="7">if<condition pos:line="141" pos:column="9">(<expr><name pos:line="141" pos:column="10">err<pos:position pos:line="141" pos:column="13"/></name> <operator pos:line="141" pos:column="14">!=<pos:position pos:line="141" pos:column="16"/></operator> <name pos:line="141" pos:column="17">noErr<pos:position pos:line="141" pos:column="22"/></name></expr>)<pos:position pos:line="141" pos:column="23"/></condition><then pos:line="141" pos:column="23"> <block pos:line="141" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="142" pos:column="9">failf<pos:position pos:line="142" pos:column="14"/></name><argument_list pos:line="142" pos:column="14">(<argument><expr><name pos:line="142" pos:column="15">data<pos:position pos:line="142" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="142" pos:column="21">"Your version of the OS does not support SSLv2"<pos:position pos:line="142" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="70"/></expr_stmt>
        <return pos:line="143" pos:column="9">return <expr><name pos:line="143" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="143" pos:column="39"/></name></expr>;<pos:position pos:line="143" pos:column="40"/></return>
      }<pos:position pos:line="144" pos:column="8"/></block></then></if>
      <break pos:line="145" pos:column="7">break;<pos:position pos:line="145" pos:column="13"/></break>
    <default pos:line="146" pos:column="5">default:<pos:position pos:line="146" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="147" pos:column="7">failf<pos:position pos:line="147" pos:column="12"/></name><argument_list pos:line="147" pos:column="12">(<argument><expr><name pos:line="147" pos:column="13">data<pos:position pos:line="147" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="19">"Unrecognized parameter passed via CURLOPT_SSLVERSION"<pos:position pos:line="147" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="75"/></expr_stmt>
      <return pos:line="148" pos:column="7">return <expr><name pos:line="148" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="148" pos:column="37"/></name></expr>;<pos:position pos:line="148" pos:column="38"/></return>
    }<pos:position pos:line="149" pos:column="6"/></block></switch>
<cpp:endif pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">endif<pos:position pos:line="150" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="150" pos:column="9">/* CURL_SUPPORT_MAC_10_8 */</comment>
  }<pos:position pos:line="151" pos:column="4"/></block></else></if>
<cpp:else pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">else<pos:position pos:line="152" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="153" pos:column="3">if<condition pos:line="153" pos:column="5">(<expr><name><name pos:line="153" pos:column="6">conn<pos:position pos:line="153" pos:column="10"/></name><operator pos:line="153" pos:column="10">-&gt;<pos:position pos:line="153" pos:column="15"/></operator><name pos:line="153" pos:column="12">ssl_config<pos:position pos:line="153" pos:column="22"/></name><operator pos:line="153" pos:column="22">.<pos:position pos:line="153" pos:column="23"/></operator><name pos:line="153" pos:column="23">version_max<pos:position pos:line="153" pos:column="34"/></name></name> <operator pos:line="153" pos:column="35">!=<pos:position pos:line="153" pos:column="37"/></operator> <name pos:line="153" pos:column="38">CURL_SSLVERSION_MAX_NONE<pos:position pos:line="153" pos:column="62"/></name></expr>)<pos:position pos:line="153" pos:column="63"/></condition><then pos:line="153" pos:column="63"> <block pos:line="153" pos:column="64">{
    <expr_stmt><expr><call><name pos:line="154" pos:column="5">failf<pos:position pos:line="154" pos:column="10"/></name><argument_list pos:line="154" pos:column="10">(<argument><expr><name pos:line="154" pos:column="11">data<pos:position pos:line="154" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="17">"Your version of the OS does not support to set maximum"<pos:position pos:line="154" pos:column="73"/></literal>
                <literal type="string" pos:line="155" pos:column="17">" SSL/TLS version"<pos:position pos:line="155" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="37"/></expr_stmt>
    <return pos:line="156" pos:column="5">return <expr><name pos:line="156" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="156" pos:column="35"/></name></expr>;<pos:position pos:line="156" pos:column="36"/></return>
  }<pos:position pos:line="157" pos:column="4"/></block></then></if>
  <expr_stmt><expr><operator pos:line="158" pos:column="3">(<pos:position pos:line="158" pos:column="4"/></operator><name pos:line="158" pos:column="4">void<pos:position pos:line="158" pos:column="8"/></name><operator pos:line="158" pos:column="8">)<pos:position pos:line="158" pos:column="9"/></operator><call><name pos:line="158" pos:column="9">SSLSetProtocolVersionEnabled<pos:position pos:line="158" pos:column="37"/></name><argument_list pos:line="158" pos:column="37">(<argument><expr><name><name pos:line="158" pos:column="38">BACKEND<pos:position pos:line="158" pos:column="45"/></name><operator pos:line="158" pos:column="45">-&gt;<pos:position pos:line="158" pos:column="50"/></operator><name pos:line="158" pos:column="47">ssl_ctx<pos:position pos:line="158" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="56">kSSLProtocolAll<pos:position pos:line="158" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="158" pos:column="73">false<pos:position pos:line="158" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="80"/></expr_stmt>
  <switch pos:line="159" pos:column="3">switch<condition pos:line="159" pos:column="9">(<expr><name><name pos:line="159" pos:column="10">conn<pos:position pos:line="159" pos:column="14"/></name><operator pos:line="159" pos:column="14">-&gt;<pos:position pos:line="159" pos:column="19"/></operator><name pos:line="159" pos:column="16">ssl_config<pos:position pos:line="159" pos:column="26"/></name><operator pos:line="159" pos:column="26">.<pos:position pos:line="159" pos:column="27"/></operator><name pos:line="159" pos:column="27">version<pos:position pos:line="159" pos:column="34"/></name></name></expr>)<pos:position pos:line="159" pos:column="35"/></condition> <block pos:line="159" pos:column="36">{
  <case pos:line="160" pos:column="3">case <expr><name pos:line="160" pos:column="8">CURL_SSLVERSION_DEFAULT<pos:position pos:line="160" pos:column="31"/></name></expr>:<pos:position pos:line="160" pos:column="32"/></case>
  <case pos:line="161" pos:column="3">case <expr><name pos:line="161" pos:column="8">CURL_SSLVERSION_TLSv1<pos:position pos:line="161" pos:column="29"/></name></expr>:<pos:position pos:line="161" pos:column="30"/></case>
  <case pos:line="162" pos:column="3">case <expr><name pos:line="162" pos:column="8">CURL_SSLVERSION_TLSv1_0<pos:position pos:line="162" pos:column="31"/></name></expr>:<pos:position pos:line="162" pos:column="32"/></case>
    <expr_stmt><expr><operator pos:line="163" pos:column="5">(<pos:position pos:line="163" pos:column="6"/></operator><name pos:line="163" pos:column="6">void<pos:position pos:line="163" pos:column="10"/></name><operator pos:line="163" pos:column="10">)<pos:position pos:line="163" pos:column="11"/></operator><call><name pos:line="163" pos:column="11">SSLSetProtocolVersionEnabled<pos:position pos:line="163" pos:column="39"/></name><argument_list pos:line="163" pos:column="39">(<argument><expr><name><name pos:line="163" pos:column="40">BACKEND<pos:position pos:line="163" pos:column="47"/></name><operator pos:line="163" pos:column="47">-&gt;<pos:position pos:line="163" pos:column="52"/></operator><name pos:line="163" pos:column="49">ssl_ctx<pos:position pos:line="163" pos:column="56"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="164" pos:column="40">kTLSProtocol1<pos:position pos:line="164" pos:column="53"/></name></expr></argument>,
                                       <argument><expr><literal type="boolean" pos:line="165" pos:column="40">true<pos:position pos:line="165" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="46"/></expr_stmt>
    <break pos:line="166" pos:column="5">break;<pos:position pos:line="166" pos:column="11"/></break>
  <case pos:line="167" pos:column="3">case <expr><name pos:line="167" pos:column="8">CURL_SSLVERSION_TLSv1_1<pos:position pos:line="167" pos:column="31"/></name></expr>:<pos:position pos:line="167" pos:column="32"/></case>
    <expr_stmt><expr><call><name pos:line="168" pos:column="5">failf<pos:position pos:line="168" pos:column="10"/></name><argument_list pos:line="168" pos:column="10">(<argument><expr><name pos:line="168" pos:column="11">data<pos:position pos:line="168" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="168" pos:column="17">"Your version of the OS does not support TLSv1.1"<pos:position pos:line="168" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="168" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="68"/></expr_stmt>
    <return pos:line="169" pos:column="5">return <expr><name pos:line="169" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="169" pos:column="35"/></name></expr>;<pos:position pos:line="169" pos:column="36"/></return>
  <case pos:line="170" pos:column="3">case <expr><name pos:line="170" pos:column="8">CURL_SSLVERSION_TLSv1_2<pos:position pos:line="170" pos:column="31"/></name></expr>:<pos:position pos:line="170" pos:column="32"/></case>
    <expr_stmt><expr><call><name pos:line="171" pos:column="5">failf<pos:position pos:line="171" pos:column="10"/></name><argument_list pos:line="171" pos:column="10">(<argument><expr><name pos:line="171" pos:column="11">data<pos:position pos:line="171" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="17">"Your version of the OS does not support TLSv1.2"<pos:position pos:line="171" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="68"/></expr_stmt>
    <return pos:line="172" pos:column="5">return <expr><name pos:line="172" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="172" pos:column="35"/></name></expr>;<pos:position pos:line="172" pos:column="36"/></return>
  <case pos:line="173" pos:column="3">case <expr><name pos:line="173" pos:column="8">CURL_SSLVERSION_TLSv1_3<pos:position pos:line="173" pos:column="31"/></name></expr>:<pos:position pos:line="173" pos:column="32"/></case>
    <expr_stmt><expr><call><name pos:line="174" pos:column="5">failf<pos:position pos:line="174" pos:column="10"/></name><argument_list pos:line="174" pos:column="10">(<argument><expr><name pos:line="174" pos:column="11">data<pos:position pos:line="174" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="174" pos:column="17">"Your version of the OS does not support TLSv1.3"<pos:position pos:line="174" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="68"/></expr_stmt>
    <return pos:line="175" pos:column="5">return <expr><name pos:line="175" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="175" pos:column="35"/></name></expr>;<pos:position pos:line="175" pos:column="36"/></return>
  <case pos:line="176" pos:column="3">case <expr><name pos:line="176" pos:column="8">CURL_SSLVERSION_SSLv2<pos:position pos:line="176" pos:column="29"/></name></expr>:<pos:position pos:line="176" pos:column="30"/></case>
    <expr_stmt><expr><name pos:line="177" pos:column="5">err<pos:position pos:line="177" pos:column="8"/></name> <operator pos:line="177" pos:column="9">=<pos:position pos:line="177" pos:column="10"/></operator> <call><name pos:line="177" pos:column="11">SSLSetProtocolVersionEnabled<pos:position pos:line="177" pos:column="39"/></name><argument_list pos:line="177" pos:column="39">(<argument><expr><name><name pos:line="177" pos:column="40">BACKEND<pos:position pos:line="177" pos:column="47"/></name><operator pos:line="177" pos:column="47">-&gt;<pos:position pos:line="177" pos:column="52"/></operator><name pos:line="177" pos:column="49">ssl_ctx<pos:position pos:line="177" pos:column="56"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="178" pos:column="40">kSSLProtocol2<pos:position pos:line="178" pos:column="53"/></name></expr></argument>,
                                       <argument><expr><literal type="boolean" pos:line="179" pos:column="40">true<pos:position pos:line="179" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="179" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="46"/></expr_stmt>
    <if pos:line="180" pos:column="5">if<condition pos:line="180" pos:column="7">(<expr><name pos:line="180" pos:column="8">err<pos:position pos:line="180" pos:column="11"/></name> <operator pos:line="180" pos:column="12">!=<pos:position pos:line="180" pos:column="14"/></operator> <name pos:line="180" pos:column="15">noErr<pos:position pos:line="180" pos:column="20"/></name></expr>)<pos:position pos:line="180" pos:column="21"/></condition><then pos:line="180" pos:column="21"> <block pos:line="180" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="181" pos:column="7">failf<pos:position pos:line="181" pos:column="12"/></name><argument_list pos:line="181" pos:column="12">(<argument><expr><name pos:line="181" pos:column="13">data<pos:position pos:line="181" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="181" pos:column="19">"Your version of the OS does not support SSLv2"<pos:position pos:line="181" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="68"/></expr_stmt>
      <return pos:line="182" pos:column="7">return <expr><name pos:line="182" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="182" pos:column="37"/></name></expr>;<pos:position pos:line="182" pos:column="38"/></return>
    }<pos:position pos:line="183" pos:column="6"/></block></then></if>
    <break pos:line="184" pos:column="5">break;<pos:position pos:line="184" pos:column="11"/></break>
  <case pos:line="185" pos:column="3">case <expr><name pos:line="185" pos:column="8">CURL_SSLVERSION_SSLv3<pos:position pos:line="185" pos:column="29"/></name></expr>:<pos:position pos:line="185" pos:column="30"/></case>
    <expr_stmt><expr><name pos:line="186" pos:column="5">err<pos:position pos:line="186" pos:column="8"/></name> <operator pos:line="186" pos:column="9">=<pos:position pos:line="186" pos:column="10"/></operator> <call><name pos:line="186" pos:column="11">SSLSetProtocolVersionEnabled<pos:position pos:line="186" pos:column="39"/></name><argument_list pos:line="186" pos:column="39">(<argument><expr><name><name pos:line="186" pos:column="40">BACKEND<pos:position pos:line="186" pos:column="47"/></name><operator pos:line="186" pos:column="47">-&gt;<pos:position pos:line="186" pos:column="52"/></operator><name pos:line="186" pos:column="49">ssl_ctx<pos:position pos:line="186" pos:column="56"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="187" pos:column="40">kSSLProtocol3<pos:position pos:line="187" pos:column="53"/></name></expr></argument>,
                                       <argument><expr><literal type="boolean" pos:line="188" pos:column="40">true<pos:position pos:line="188" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="46"/></expr_stmt>
    <if pos:line="189" pos:column="5">if<condition pos:line="189" pos:column="7">(<expr><name pos:line="189" pos:column="8">err<pos:position pos:line="189" pos:column="11"/></name> <operator pos:line="189" pos:column="12">!=<pos:position pos:line="189" pos:column="14"/></operator> <name pos:line="189" pos:column="15">noErr<pos:position pos:line="189" pos:column="20"/></name></expr>)<pos:position pos:line="189" pos:column="21"/></condition><then pos:line="189" pos:column="21"> <block pos:line="189" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="190" pos:column="7">failf<pos:position pos:line="190" pos:column="12"/></name><argument_list pos:line="190" pos:column="12">(<argument><expr><name pos:line="190" pos:column="13">data<pos:position pos:line="190" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="190" pos:column="19">"Your version of the OS does not support SSLv3"<pos:position pos:line="190" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="68"/></expr_stmt>
      <return pos:line="191" pos:column="7">return <expr><name pos:line="191" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="191" pos:column="37"/></name></expr>;<pos:position pos:line="191" pos:column="38"/></return>
    }<pos:position pos:line="192" pos:column="6"/></block></then></if>
    <break pos:line="193" pos:column="5">break;<pos:position pos:line="193" pos:column="11"/></break>
  <default pos:line="194" pos:column="3">default:<pos:position pos:line="194" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="195" pos:column="5">failf<pos:position pos:line="195" pos:column="10"/></name><argument_list pos:line="195" pos:column="10">(<argument><expr><name pos:line="195" pos:column="11">data<pos:position pos:line="195" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="195" pos:column="17">"Unrecognized parameter passed via CURLOPT_SSLVERSION"<pos:position pos:line="195" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="73"/></expr_stmt>
    <return pos:line="196" pos:column="5">return <expr><name pos:line="196" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="196" pos:column="35"/></name></expr>;<pos:position pos:line="196" pos:column="36"/></return>
  }<pos:position pos:line="197" pos:column="4"/></block></switch>
<cpp:endif pos:line="198" pos:column="1">#<cpp:directive pos:line="198" pos:column="2">endif<pos:position pos:line="198" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="198" pos:column="8">/* CURL_BUILD_MAC_10_8 || CURL_BUILD_IOS */</comment>

  <if pos:line="200" pos:column="3">if<condition pos:line="200" pos:column="5">(<expr><call><name pos:line="200" pos:column="6">SSL_SET_OPTION<pos:position pos:line="200" pos:column="20"/></name><argument_list pos:line="200" pos:column="20">(<argument><expr><name pos:line="200" pos:column="21">key<pos:position pos:line="200" pos:column="24"/></name></expr></argument>)<pos:position pos:line="200" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="200" pos:column="26"/></condition><then pos:line="200" pos:column="26"> <block pos:line="200" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="201" pos:column="5">infof<pos:position pos:line="201" pos:column="10"/></name><argument_list pos:line="201" pos:column="10">(<argument><expr><name pos:line="201" pos:column="11">data<pos:position pos:line="201" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="17">"WARNING: SSL: CURLOPT_SSLKEY is ignored by Secure "<pos:position pos:line="201" pos:column="69"/></literal>
          <literal type="string" pos:line="202" pos:column="11">"Transport. The private key must be in the Keychain.\n"<pos:position pos:line="202" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="68"/></expr_stmt>
  }<pos:position pos:line="203" pos:column="4"/></block></then></if>

  <if pos:line="205" pos:column="3">if<condition pos:line="205" pos:column="5">(<expr><name pos:line="205" pos:column="6">ssl_cert<pos:position pos:line="205" pos:column="14"/></name></expr>)<pos:position pos:line="205" pos:column="15"/></condition><then pos:line="205" pos:column="15"> <block pos:line="205" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="206" pos:column="5">SecIdentityRef<pos:position pos:line="206" pos:column="19"/></name></type> <name pos:line="206" pos:column="20">cert_and_key<pos:position pos:line="206" pos:column="32"/></name> <init pos:line="206" pos:column="33">= <expr><name pos:line="206" pos:column="35">NULL<pos:position pos:line="206" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="206" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="207" pos:column="5">bool<pos:position pos:line="207" pos:column="9"/></name></type> <name pos:line="207" pos:column="10">is_cert_file<pos:position pos:line="207" pos:column="22"/></name> <init pos:line="207" pos:column="23">= <expr><call><name pos:line="207" pos:column="25">is_file<pos:position pos:line="207" pos:column="32"/></name><argument_list pos:line="207" pos:column="32">(<argument><expr><name pos:line="207" pos:column="33">ssl_cert<pos:position pos:line="207" pos:column="41"/></name></expr></argument>)<pos:position pos:line="207" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="207" pos:column="43"/></decl_stmt>

    <comment type="block" pos:line="209" pos:column="5">/* User wants to authenticate with a client cert. Look for it:
       If we detect that this is a file on disk, then let's load it.
       Otherwise, assume that the user wants to use an identity loaded
       from the Keychain. */</comment>
    <if pos:line="213" pos:column="5">if<condition pos:line="213" pos:column="7">(<expr><name pos:line="213" pos:column="8">is_cert_file<pos:position pos:line="213" pos:column="20"/></name></expr>)<pos:position pos:line="213" pos:column="21"/></condition><then pos:line="213" pos:column="21"> <block pos:line="213" pos:column="22">{
      <if pos:line="214" pos:column="7">if<condition pos:line="214" pos:column="9">(<expr><operator pos:line="214" pos:column="10">!<pos:position pos:line="214" pos:column="11"/></operator><call><name pos:line="214" pos:column="11">SSL_SET_OPTION<pos:position pos:line="214" pos:column="25"/></name><argument_list pos:line="214" pos:column="25">(<argument><expr><name pos:line="214" pos:column="26">cert_type<pos:position pos:line="214" pos:column="35"/></name></expr></argument>)<pos:position pos:line="214" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="214" pos:column="37"/></condition><then pos:line="214" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="215" pos:column="9">infof<pos:position pos:line="215" pos:column="14"/></name><argument_list pos:line="215" pos:column="14">(<argument><expr><name pos:line="215" pos:column="15">data<pos:position pos:line="215" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="215" pos:column="21">"WARNING: SSL: Certificate type not set, assuming "<pos:position pos:line="215" pos:column="72"/></literal>
                    <literal type="string" pos:line="216" pos:column="21">"PKCS#12 format.\n"<pos:position pos:line="216" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="216" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="42"/></expr_stmt></block></then>
      <elseif pos:line="217" pos:column="7">else <if pos:line="217" pos:column="12">if<condition pos:line="217" pos:column="14">(<expr><call><name pos:line="217" pos:column="15">strncmp<pos:position pos:line="217" pos:column="22"/></name><argument_list pos:line="217" pos:column="22">(<argument><expr><call><name pos:line="217" pos:column="23">SSL_SET_OPTION<pos:position pos:line="217" pos:column="37"/></name><argument_list pos:line="217" pos:column="37">(<argument><expr><name pos:line="217" pos:column="38">cert_type<pos:position pos:line="217" pos:column="47"/></name></expr></argument>)<pos:position pos:line="217" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="217" pos:column="50">"P12"<pos:position pos:line="217" pos:column="55"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="218" pos:column="9">strlen<pos:position pos:line="218" pos:column="15"/></name><argument_list pos:line="218" pos:column="15">(<argument><expr><call><name pos:line="218" pos:column="16">SSL_SET_OPTION<pos:position pos:line="218" pos:column="30"/></name><argument_list pos:line="218" pos:column="30">(<argument><expr><name pos:line="218" pos:column="31">cert_type<pos:position pos:line="218" pos:column="40"/></name></expr></argument>)<pos:position pos:line="218" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="218" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="218" pos:column="43"/></argument_list></call> <operator pos:line="218" pos:column="44">!=<pos:position pos:line="218" pos:column="46"/></operator> <literal type="number" pos:line="218" pos:column="47">0<pos:position pos:line="218" pos:column="48"/></literal></expr>)<pos:position pos:line="218" pos:column="49"/></condition><then pos:line="218" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="219" pos:column="9">infof<pos:position pos:line="219" pos:column="14"/></name><argument_list pos:line="219" pos:column="14">(<argument><expr><name pos:line="219" pos:column="15">data<pos:position pos:line="219" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="21">"WARNING: SSL: The Security framework only supports "<pos:position pos:line="219" pos:column="74"/></literal>
                    <literal type="string" pos:line="220" pos:column="21">"loading identities that are in PKCS#12 format.\n"<pos:position pos:line="220" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="220" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="73"/></expr_stmt></block></then></if></elseif></if>

      <expr_stmt><expr><name pos:line="222" pos:column="7">err<pos:position pos:line="222" pos:column="10"/></name> <operator pos:line="222" pos:column="11">=<pos:position pos:line="222" pos:column="12"/></operator> <call><name pos:line="222" pos:column="13">CopyIdentityFromPKCS12File<pos:position pos:line="222" pos:column="39"/></name><argument_list pos:line="222" pos:column="39">(<argument><expr><name pos:line="222" pos:column="40">ssl_cert<pos:position pos:line="222" pos:column="48"/></name></expr></argument>,
        <argument><expr><call><name pos:line="223" pos:column="9">SSL_SET_OPTION<pos:position pos:line="223" pos:column="23"/></name><argument_list pos:line="223" pos:column="23">(<argument><expr><name pos:line="223" pos:column="24">key_passwd<pos:position pos:line="223" pos:column="34"/></name></expr></argument>)<pos:position pos:line="223" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="223" pos:column="37">&amp;<pos:position pos:line="223" pos:column="42"/></operator><name pos:line="223" pos:column="38">cert_and_key<pos:position pos:line="223" pos:column="50"/></name></expr></argument>)<pos:position pos:line="223" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="224" pos:column="6"/></block></then>
    <else pos:line="225" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="226" pos:column="7">err<pos:position pos:line="226" pos:column="10"/></name> <operator pos:line="226" pos:column="11">=<pos:position pos:line="226" pos:column="12"/></operator> <call><name pos:line="226" pos:column="13">CopyIdentityWithLabel<pos:position pos:line="226" pos:column="34"/></name><argument_list pos:line="226" pos:column="34">(<argument><expr><name pos:line="226" pos:column="35">ssl_cert<pos:position pos:line="226" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="226" pos:column="45">&amp;<pos:position pos:line="226" pos:column="50"/></operator><name pos:line="226" pos:column="46">cert_and_key<pos:position pos:line="226" pos:column="58"/></name></expr></argument>)<pos:position pos:line="226" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="60"/></expr_stmt></block></else></if>

    <if pos:line="228" pos:column="5">if<condition pos:line="228" pos:column="7">(<expr><name pos:line="228" pos:column="8">err<pos:position pos:line="228" pos:column="11"/></name> <operator pos:line="228" pos:column="12">==<pos:position pos:line="228" pos:column="14"/></operator> <name pos:line="228" pos:column="15">noErr<pos:position pos:line="228" pos:column="20"/></name> <operator pos:line="228" pos:column="21">&amp;&amp;<pos:position pos:line="228" pos:column="31"/></operator> <name pos:line="228" pos:column="24">cert_and_key<pos:position pos:line="228" pos:column="36"/></name></expr>)<pos:position pos:line="228" pos:column="37"/></condition><then pos:line="228" pos:column="37"> <block pos:line="228" pos:column="38">{
      <decl_stmt><decl><type><name pos:line="229" pos:column="7">SecCertificateRef<pos:position pos:line="229" pos:column="24"/></name></type> <name pos:line="229" pos:column="25">cert<pos:position pos:line="229" pos:column="29"/></name> <init pos:line="229" pos:column="30">= <expr><name pos:line="229" pos:column="32">NULL<pos:position pos:line="229" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="229" pos:column="37"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="230" pos:column="7">CFTypeRef<pos:position pos:line="230" pos:column="16"/></name></type> <name><name pos:line="230" pos:column="17">certs_c<pos:position pos:line="230" pos:column="24"/></name><index pos:line="230" pos:column="24">[<expr><literal type="number" pos:line="230" pos:column="25">1<pos:position pos:line="230" pos:column="26"/></literal></expr>]<pos:position pos:line="230" pos:column="27"/></index></name></decl>;<pos:position pos:line="230" pos:column="28"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="231" pos:column="7">CFArrayRef<pos:position pos:line="231" pos:column="17"/></name></type> <name pos:line="231" pos:column="18">certs<pos:position pos:line="231" pos:column="23"/></name></decl>;<pos:position pos:line="231" pos:column="24"/></decl_stmt>

      <comment type="block" pos:line="233" pos:column="7">/* If we found one, print it out: */</comment>
      <expr_stmt><expr><name pos:line="234" pos:column="7">err<pos:position pos:line="234" pos:column="10"/></name> <operator pos:line="234" pos:column="11">=<pos:position pos:line="234" pos:column="12"/></operator> <call><name pos:line="234" pos:column="13">SecIdentityCopyCertificate<pos:position pos:line="234" pos:column="39"/></name><argument_list pos:line="234" pos:column="39">(<argument><expr><name pos:line="234" pos:column="40">cert_and_key<pos:position pos:line="234" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="234" pos:column="54">&amp;<pos:position pos:line="234" pos:column="59"/></operator><name pos:line="234" pos:column="55">cert<pos:position pos:line="234" pos:column="59"/></name></expr></argument>)<pos:position pos:line="234" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="61"/></expr_stmt>
      <if pos:line="235" pos:column="7">if<condition pos:line="235" pos:column="9">(<expr><name pos:line="235" pos:column="10">err<pos:position pos:line="235" pos:column="13"/></name> <operator pos:line="235" pos:column="14">==<pos:position pos:line="235" pos:column="16"/></operator> <name pos:line="235" pos:column="17">noErr<pos:position pos:line="235" pos:column="22"/></name></expr>)<pos:position pos:line="235" pos:column="23"/></condition><then pos:line="235" pos:column="23"> <block pos:line="235" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="236" pos:column="9">char<pos:position pos:line="236" pos:column="13"/></name> <modifier pos:line="236" pos:column="14">*<pos:position pos:line="236" pos:column="15"/></modifier></type><name pos:line="236" pos:column="15">certp<pos:position pos:line="236" pos:column="20"/></name></decl>;<pos:position pos:line="236" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="237" pos:column="9">CURLcode<pos:position pos:line="237" pos:column="17"/></name></type> <name pos:line="237" pos:column="18">result<pos:position pos:line="237" pos:column="24"/></name> <init pos:line="237" pos:column="25">= <expr><call><name pos:line="237" pos:column="27">CopyCertSubject<pos:position pos:line="237" pos:column="42"/></name><argument_list pos:line="237" pos:column="42">(<argument><expr><name pos:line="237" pos:column="43">data<pos:position pos:line="237" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="237" pos:column="49">cert<pos:position pos:line="237" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="237" pos:column="55">&amp;<pos:position pos:line="237" pos:column="60"/></operator><name pos:line="237" pos:column="56">certp<pos:position pos:line="237" pos:column="61"/></name></expr></argument>)<pos:position pos:line="237" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="237" pos:column="63"/></decl_stmt>
        <if pos:line="238" pos:column="9">if<condition pos:line="238" pos:column="11">(<expr><operator pos:line="238" pos:column="12">!<pos:position pos:line="238" pos:column="13"/></operator><name pos:line="238" pos:column="13">result<pos:position pos:line="238" pos:column="19"/></name></expr>)<pos:position pos:line="238" pos:column="20"/></condition><then pos:line="238" pos:column="20"> <block pos:line="238" pos:column="21">{
          <expr_stmt><expr><call><name pos:line="239" pos:column="11">infof<pos:position pos:line="239" pos:column="16"/></name><argument_list pos:line="239" pos:column="16">(<argument><expr><name pos:line="239" pos:column="17">data<pos:position pos:line="239" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="239" pos:column="23">"Client certificate: %s\n"<pos:position pos:line="239" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="239" pos:column="51">certp<pos:position pos:line="239" pos:column="56"/></name></expr></argument>)<pos:position pos:line="239" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="58"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="240" pos:column="11">free<pos:position pos:line="240" pos:column="15"/></name><argument_list pos:line="240" pos:column="15">(<argument><expr><name pos:line="240" pos:column="16">certp<pos:position pos:line="240" pos:column="21"/></name></expr></argument>)<pos:position pos:line="240" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="241" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="243" pos:column="9">CFRelease<pos:position pos:line="243" pos:column="18"/></name><argument_list pos:line="243" pos:column="18">(<argument><expr><name pos:line="243" pos:column="19">cert<pos:position pos:line="243" pos:column="23"/></name></expr></argument>)<pos:position pos:line="243" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="25"/></expr_stmt>
        <if pos:line="244" pos:column="9">if<condition pos:line="244" pos:column="11">(<expr><name pos:line="244" pos:column="12">result<pos:position pos:line="244" pos:column="18"/></name></expr>)<pos:position pos:line="244" pos:column="19"/></condition><then pos:line="244" pos:column="19">
          <block type="pseudo"><return pos:line="245" pos:column="11">return <expr><name pos:line="245" pos:column="18">result<pos:position pos:line="245" pos:column="24"/></name></expr>;<pos:position pos:line="245" pos:column="25"/></return></block></then></if>
      }<pos:position pos:line="246" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="247" pos:column="7">certs_c<pos:position pos:line="247" pos:column="14"/></name><index pos:line="247" pos:column="14">[<expr><literal type="number" pos:line="247" pos:column="15">0<pos:position pos:line="247" pos:column="16"/></literal></expr>]<pos:position pos:line="247" pos:column="17"/></index></name> <operator pos:line="247" pos:column="18">=<pos:position pos:line="247" pos:column="19"/></operator> <name pos:line="247" pos:column="20">cert_and_key<pos:position pos:line="247" pos:column="32"/></name></expr>;<pos:position pos:line="247" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="248" pos:column="7">certs<pos:position pos:line="248" pos:column="12"/></name> <operator pos:line="248" pos:column="13">=<pos:position pos:line="248" pos:column="14"/></operator> <call><name pos:line="248" pos:column="15">CFArrayCreate<pos:position pos:line="248" pos:column="28"/></name><argument_list pos:line="248" pos:column="28">(<argument><expr><name pos:line="248" pos:column="29">NULL<pos:position pos:line="248" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="248" pos:column="35">(<pos:position pos:line="248" pos:column="36"/></operator><specifier pos:line="248" pos:column="36">const<pos:position pos:line="248" pos:column="41"/></specifier> <name pos:line="248" pos:column="42">void<pos:position pos:line="248" pos:column="46"/></name> <operator pos:line="248" pos:column="47">*<pos:position pos:line="248" pos:column="48"/></operator><operator pos:line="248" pos:column="48">*<pos:position pos:line="248" pos:column="49"/></operator><operator pos:line="248" pos:column="49">)<pos:position pos:line="248" pos:column="50"/></operator><name pos:line="248" pos:column="50">certs_c<pos:position pos:line="248" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="248" pos:column="59">1L<pos:position pos:line="248" pos:column="61"/></literal></expr></argument>,
                            <argument><expr><operator pos:line="249" pos:column="29">&amp;<pos:position pos:line="249" pos:column="34"/></operator><name pos:line="249" pos:column="30">kCFTypeArrayCallBacks<pos:position pos:line="249" pos:column="51"/></name></expr></argument>)<pos:position pos:line="249" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name pos:line="250" pos:column="7">err<pos:position pos:line="250" pos:column="10"/></name> <operator pos:line="250" pos:column="11">=<pos:position pos:line="250" pos:column="12"/></operator> <call><name pos:line="250" pos:column="13">SSLSetCertificate<pos:position pos:line="250" pos:column="30"/></name><argument_list pos:line="250" pos:column="30">(<argument><expr><name><name pos:line="250" pos:column="31">BACKEND<pos:position pos:line="250" pos:column="38"/></name><operator pos:line="250" pos:column="38">-&gt;<pos:position pos:line="250" pos:column="43"/></operator><name pos:line="250" pos:column="40">ssl_ctx<pos:position pos:line="250" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="49">certs<pos:position pos:line="250" pos:column="54"/></name></expr></argument>)<pos:position pos:line="250" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="56"/></expr_stmt>
      <if pos:line="251" pos:column="7">if<condition pos:line="251" pos:column="9">(<expr><name pos:line="251" pos:column="10">certs<pos:position pos:line="251" pos:column="15"/></name></expr>)<pos:position pos:line="251" pos:column="16"/></condition><then pos:line="251" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="252" pos:column="9">CFRelease<pos:position pos:line="252" pos:column="18"/></name><argument_list pos:line="252" pos:column="18">(<argument><expr><name pos:line="252" pos:column="19">certs<pos:position pos:line="252" pos:column="24"/></name></expr></argument>)<pos:position pos:line="252" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="26"/></expr_stmt></block></then></if>
      <if pos:line="253" pos:column="7">if<condition pos:line="253" pos:column="9">(<expr><name pos:line="253" pos:column="10">err<pos:position pos:line="253" pos:column="13"/></name> <operator pos:line="253" pos:column="14">!=<pos:position pos:line="253" pos:column="16"/></operator> <name pos:line="253" pos:column="17">noErr<pos:position pos:line="253" pos:column="22"/></name></expr>)<pos:position pos:line="253" pos:column="23"/></condition><then pos:line="253" pos:column="23"> <block pos:line="253" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="254" pos:column="9">failf<pos:position pos:line="254" pos:column="14"/></name><argument_list pos:line="254" pos:column="14">(<argument><expr><name pos:line="254" pos:column="15">data<pos:position pos:line="254" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="254" pos:column="21">"SSL: SSLSetCertificate() failed: OSStatus %d"<pos:position pos:line="254" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="254" pos:column="69">err<pos:position pos:line="254" pos:column="72"/></name></expr></argument>)<pos:position pos:line="254" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="74"/></expr_stmt>
        <return pos:line="255" pos:column="9">return <expr><name pos:line="255" pos:column="16">CURLE_SSL_CERTPROBLEM<pos:position pos:line="255" pos:column="37"/></name></expr>;<pos:position pos:line="255" pos:column="38"/></return>
      }<pos:position pos:line="256" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="257" pos:column="7">CFRelease<pos:position pos:line="257" pos:column="16"/></name><argument_list pos:line="257" pos:column="16">(<argument><expr><name pos:line="257" pos:column="17">cert_and_key<pos:position pos:line="257" pos:column="29"/></name></expr></argument>)<pos:position pos:line="257" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="258" pos:column="6"/></block></then>
    <else pos:line="259" pos:column="5">else <block pos:line="259" pos:column="10">{
      <switch pos:line="260" pos:column="7">switch<condition pos:line="260" pos:column="13">(<expr><name pos:line="260" pos:column="14">err<pos:position pos:line="260" pos:column="17"/></name></expr>)<pos:position pos:line="260" pos:column="18"/></condition> <block pos:line="260" pos:column="19">{
      <case pos:line="261" pos:column="7">case <expr><name pos:line="261" pos:column="12">errSecAuthFailed<pos:position pos:line="261" pos:column="28"/></name></expr>:<pos:position pos:line="261" pos:column="29"/></case> <case pos:line="261" pos:column="30">case <expr><operator pos:line="261" pos:column="35">-<pos:position pos:line="261" pos:column="36"/></operator><literal type="number" pos:line="261" pos:column="36">25264<pos:position pos:line="261" pos:column="41"/></literal></expr>:<pos:position pos:line="261" pos:column="42"/></case> <comment type="block" pos:line="261" pos:column="43">/* errSecPkcs12VerifyFailure */</comment>
        <expr_stmt><expr><call><name pos:line="262" pos:column="9">failf<pos:position pos:line="262" pos:column="14"/></name><argument_list pos:line="262" pos:column="14">(<argument><expr><name pos:line="262" pos:column="15">data<pos:position pos:line="262" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="262" pos:column="21">"SSL: Incorrect password for the certificate \"%s\" "<pos:position pos:line="262" pos:column="74"/></literal>
                    <literal type="string" pos:line="263" pos:column="21">"and its private key."<pos:position pos:line="263" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="263" pos:column="45">ssl_cert<pos:position pos:line="263" pos:column="53"/></name></expr></argument>)<pos:position pos:line="263" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="55"/></expr_stmt>
        <break pos:line="264" pos:column="9">break;<pos:position pos:line="264" pos:column="15"/></break>
      <case pos:line="265" pos:column="7">case <expr><operator pos:line="265" pos:column="12">-<pos:position pos:line="265" pos:column="13"/></operator><literal type="number" pos:line="265" pos:column="13">26275<pos:position pos:line="265" pos:column="18"/></literal></expr>:<pos:position pos:line="265" pos:column="19"/></case> <comment type="block" pos:line="265" pos:column="20">/* errSecDecode */</comment> <case pos:line="265" pos:column="39">case <expr><operator pos:line="265" pos:column="44">-<pos:position pos:line="265" pos:column="45"/></operator><literal type="number" pos:line="265" pos:column="45">25257<pos:position pos:line="265" pos:column="50"/></literal></expr>:<pos:position pos:line="265" pos:column="51"/></case> <comment type="block" pos:line="265" pos:column="52">/* errSecUnknownFormat */</comment>
        <expr_stmt><expr><call><name pos:line="266" pos:column="9">failf<pos:position pos:line="266" pos:column="14"/></name><argument_list pos:line="266" pos:column="14">(<argument><expr><name pos:line="266" pos:column="15">data<pos:position pos:line="266" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="266" pos:column="21">"SSL: Couldn't make sense of the data in the "<pos:position pos:line="266" pos:column="67"/></literal>
                    <literal type="string" pos:line="267" pos:column="21">"certificate \"%s\" and its private key."<pos:position pos:line="267" pos:column="62"/></literal></expr></argument>,
                    <argument><expr><name pos:line="268" pos:column="21">ssl_cert<pos:position pos:line="268" pos:column="29"/></name></expr></argument>)<pos:position pos:line="268" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="31"/></expr_stmt>
        <break pos:line="269" pos:column="9">break;<pos:position pos:line="269" pos:column="15"/></break>
      <case pos:line="270" pos:column="7">case <expr><operator pos:line="270" pos:column="12">-<pos:position pos:line="270" pos:column="13"/></operator><literal type="number" pos:line="270" pos:column="13">25260<pos:position pos:line="270" pos:column="18"/></literal></expr>:<pos:position pos:line="270" pos:column="19"/></case> <comment type="block" pos:line="270" pos:column="20">/* errSecPassphraseRequired */</comment>
        <expr_stmt><expr><call><name pos:line="271" pos:column="9">failf<pos:position pos:line="271" pos:column="14"/></name><argument_list pos:line="271" pos:column="14">(<argument><expr><name pos:line="271" pos:column="15">data<pos:position pos:line="271" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="271" pos:column="21">"SSL The certificate \"%s\" requires a password."<pos:position pos:line="271" pos:column="70"/></literal></expr></argument>,
                    <argument><expr><name pos:line="272" pos:column="21">ssl_cert<pos:position pos:line="272" pos:column="29"/></name></expr></argument>)<pos:position pos:line="272" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="31"/></expr_stmt>
        <break pos:line="273" pos:column="9">break;<pos:position pos:line="273" pos:column="15"/></break>
      <case pos:line="274" pos:column="7">case <expr><name pos:line="274" pos:column="12">errSecItemNotFound<pos:position pos:line="274" pos:column="30"/></name></expr>:<pos:position pos:line="274" pos:column="31"/></case>
        <expr_stmt><expr><call><name pos:line="275" pos:column="9">failf<pos:position pos:line="275" pos:column="14"/></name><argument_list pos:line="275" pos:column="14">(<argument><expr><name pos:line="275" pos:column="15">data<pos:position pos:line="275" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="275" pos:column="21">"SSL: Can't find the certificate \"%s\" and its private "<pos:position pos:line="275" pos:column="78"/></literal>
                    <literal type="string" pos:line="276" pos:column="21">"key in the Keychain."<pos:position pos:line="276" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="276" pos:column="45">ssl_cert<pos:position pos:line="276" pos:column="53"/></name></expr></argument>)<pos:position pos:line="276" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="55"/></expr_stmt>
        <break pos:line="277" pos:column="9">break;<pos:position pos:line="277" pos:column="15"/></break>
      <default pos:line="278" pos:column="7">default:<pos:position pos:line="278" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="279" pos:column="9">failf<pos:position pos:line="279" pos:column="14"/></name><argument_list pos:line="279" pos:column="14">(<argument><expr><name pos:line="279" pos:column="15">data<pos:position pos:line="279" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="279" pos:column="21">"SSL: Can't load the certificate \"%s\" and its private "<pos:position pos:line="279" pos:column="78"/></literal>
                    <literal type="string" pos:line="280" pos:column="21">"key: OSStatus %d"<pos:position pos:line="280" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="280" pos:column="41">ssl_cert<pos:position pos:line="280" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="280" pos:column="51">err<pos:position pos:line="280" pos:column="54"/></name></expr></argument>)<pos:position pos:line="280" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="56"/></expr_stmt>
        <break pos:line="281" pos:column="9">break;<pos:position pos:line="281" pos:column="15"/></break>
      }<pos:position pos:line="282" pos:column="8"/></block></switch>
      <return pos:line="283" pos:column="7">return <expr><name pos:line="283" pos:column="14">CURLE_SSL_CERTPROBLEM<pos:position pos:line="283" pos:column="35"/></name></expr>;<pos:position pos:line="283" pos:column="36"/></return>
    }<pos:position pos:line="284" pos:column="6"/></block></else></if>
  }<pos:position pos:line="285" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="287" pos:column="3">/* SSL always tries to verify the peer, this only says whether it should
   * fail to connect if the verification fails, or if it should continue
   * anyway. In the latter case the result of the verification is checked with
   * SSL_get_verify_result() below. */</comment>
<cpp:if pos:line="291" pos:column="1">#<cpp:directive pos:line="291" pos:column="2">if<pos:position pos:line="291" pos:column="4"/></cpp:directive> <expr><name pos:line="291" pos:column="5">CURL_BUILD_MAC_10_6<pos:position pos:line="291" pos:column="24"/></name> <operator pos:line="291" pos:column="25">||<pos:position pos:line="291" pos:column="27"/></operator> <name pos:line="291" pos:column="28">CURL_BUILD_IOS<pos:position pos:line="291" pos:column="42"/></name></expr></cpp:if>
  <comment type="block" pos:line="292" pos:column="3">/* Snow Leopard introduced the SSLSetSessionOption() function, but due to
     a library bug with the way the kSSLSessionOptionBreakOnServerAuth flag
     works, it doesn't work as expected under Snow Leopard, Lion or
     Mountain Lion.
     So we need to call SSLSetEnableCertVerify() on those older cats in order
     to disable certificate validation if the user turned that off.
     (SecureTransport will always validate the certificate chain by
     default.)
  Note:
  Darwin 11.x.x is Lion (10.7)
  Darwin 12.x.x is Mountain Lion (10.8)
  Darwin 13.x.x is Mavericks (10.9)
  Darwin 14.x.x is Yosemite (10.10)
  Darwin 15.x.x is El Capitan (10.11)
  */</comment>
<cpp:if pos:line="307" pos:column="1">#<cpp:directive pos:line="307" pos:column="2">if<pos:position pos:line="307" pos:column="4"/></cpp:directive> <expr><name pos:line="307" pos:column="5">CURL_BUILD_MAC<pos:position pos:line="307" pos:column="19"/></name></expr></cpp:if>
  <if pos:line="308" pos:column="3">if<condition pos:line="308" pos:column="5">(<expr><name pos:line="308" pos:column="6">SSLSetSessionOption<pos:position pos:line="308" pos:column="25"/></name> <operator pos:line="308" pos:column="26">!=<pos:position pos:line="308" pos:column="28"/></operator> <name pos:line="308" pos:column="29">NULL<pos:position pos:line="308" pos:column="33"/></name> <operator pos:line="308" pos:column="34">&amp;&amp;<pos:position pos:line="308" pos:column="44"/></operator> <name pos:line="308" pos:column="37">darwinver_maj<pos:position pos:line="308" pos:column="50"/></name> <operator pos:line="308" pos:column="51">&gt;=<pos:position pos:line="308" pos:column="56"/></operator> <literal type="number" pos:line="308" pos:column="54">13<pos:position pos:line="308" pos:column="56"/></literal></expr>)<pos:position pos:line="308" pos:column="57"/></condition><then pos:line="308" pos:column="57"> <block pos:line="308" pos:column="58">{
<cpp:else pos:line="309" pos:column="1">#<cpp:directive pos:line="309" pos:column="2">else<pos:position pos:line="309" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="310" pos:column="3">if<condition pos:line="310" pos:column="5">(<expr><name pos:line="310" pos:column="6">SSLSetSessionOption<pos:position pos:line="310" pos:column="25"/></name> <operator pos:line="310" pos:column="26">!=<pos:position pos:line="310" pos:column="28"/></operator> <name pos:line="310" pos:column="29">NULL<pos:position pos:line="310" pos:column="33"/></name></expr>)<pos:position pos:line="310" pos:column="34"/></condition><then pos:line="310" pos:column="34"> <block pos:line="310" pos:column="35">{
<cpp:endif pos:line="311" pos:column="1">#<cpp:directive pos:line="311" pos:column="2">endif<pos:position pos:line="311" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="311" pos:column="8">/* CURL_BUILD_MAC */</comment>
    <decl_stmt><decl><type><name pos:line="312" pos:column="5">bool<pos:position pos:line="312" pos:column="9"/></name></type> <name pos:line="312" pos:column="10">break_on_auth<pos:position pos:line="312" pos:column="23"/></name> <init pos:line="312" pos:column="24">= <expr><operator pos:line="312" pos:column="26">!<pos:position pos:line="312" pos:column="27"/></operator><name><name pos:line="312" pos:column="27">conn<pos:position pos:line="312" pos:column="31"/></name><operator pos:line="312" pos:column="31">-&gt;<pos:position pos:line="312" pos:column="36"/></operator><name pos:line="312" pos:column="33">ssl_config<pos:position pos:line="312" pos:column="43"/></name><operator pos:line="312" pos:column="43">.<pos:position pos:line="312" pos:column="44"/></operator><name pos:line="312" pos:column="44">verifypeer<pos:position pos:line="312" pos:column="54"/></name></name> <operator pos:line="312" pos:column="55">||<pos:position pos:line="312" pos:column="57"/></operator> <name pos:line="312" pos:column="58">ssl_cafile<pos:position pos:line="312" pos:column="68"/></name></expr></init></decl>;<pos:position pos:line="312" pos:column="69"/></decl_stmt>
    <expr_stmt><expr><name pos:line="313" pos:column="5">err<pos:position pos:line="313" pos:column="8"/></name> <operator pos:line="313" pos:column="9">=<pos:position pos:line="313" pos:column="10"/></operator> <call><name pos:line="313" pos:column="11">SSLSetSessionOption<pos:position pos:line="313" pos:column="30"/></name><argument_list pos:line="313" pos:column="30">(<argument><expr><name><name pos:line="313" pos:column="31">BACKEND<pos:position pos:line="313" pos:column="38"/></name><operator pos:line="313" pos:column="38">-&gt;<pos:position pos:line="313" pos:column="43"/></operator><name pos:line="313" pos:column="40">ssl_ctx<pos:position pos:line="313" pos:column="47"/></name></name></expr></argument>,
                              <argument><expr><name pos:line="314" pos:column="31">kSSLSessionOptionBreakOnServerAuth<pos:position pos:line="314" pos:column="65"/></name></expr></argument>,
                              <argument><expr><name pos:line="315" pos:column="31">break_on_auth<pos:position pos:line="315" pos:column="44"/></name></expr></argument>)<pos:position pos:line="315" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="46"/></expr_stmt>
    <if pos:line="316" pos:column="5">if<condition pos:line="316" pos:column="7">(<expr><name pos:line="316" pos:column="8">err<pos:position pos:line="316" pos:column="11"/></name> <operator pos:line="316" pos:column="12">!=<pos:position pos:line="316" pos:column="14"/></operator> <name pos:line="316" pos:column="15">noErr<pos:position pos:line="316" pos:column="20"/></name></expr>)<pos:position pos:line="316" pos:column="21"/></condition><then pos:line="316" pos:column="21"> <block pos:line="316" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="317" pos:column="7">failf<pos:position pos:line="317" pos:column="12"/></name><argument_list pos:line="317" pos:column="12">(<argument><expr><name pos:line="317" pos:column="13">data<pos:position pos:line="317" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="317" pos:column="19">"SSL: SSLSetSessionOption() failed: OSStatus %d"<pos:position pos:line="317" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="317" pos:column="69">err<pos:position pos:line="317" pos:column="72"/></name></expr></argument>)<pos:position pos:line="317" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="317" pos:column="74"/></expr_stmt>
      <return pos:line="318" pos:column="7">return <expr><name pos:line="318" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="318" pos:column="37"/></name></expr>;<pos:position pos:line="318" pos:column="38"/></return>
    }<pos:position pos:line="319" pos:column="6"/></block></then></if>
  }<pos:position pos:line="320" pos:column="4"/></block></then>
  <else pos:line="321" pos:column="3">else <block pos:line="321" pos:column="8">{
<cpp:if pos:line="322" pos:column="1">#<cpp:directive pos:line="322" pos:column="2">if<pos:position pos:line="322" pos:column="4"/></cpp:directive> <expr><name pos:line="322" pos:column="5">CURL_SUPPORT_MAC_10_8<pos:position pos:line="322" pos:column="26"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="323" pos:column="5">err<pos:position pos:line="323" pos:column="8"/></name> <operator pos:line="323" pos:column="9">=<pos:position pos:line="323" pos:column="10"/></operator> <call><name pos:line="323" pos:column="11">SSLSetEnableCertVerify<pos:position pos:line="323" pos:column="33"/></name><argument_list pos:line="323" pos:column="33">(<argument><expr><name><name pos:line="323" pos:column="34">BACKEND<pos:position pos:line="323" pos:column="41"/></name><operator pos:line="323" pos:column="41">-&gt;<pos:position pos:line="323" pos:column="46"/></operator><name pos:line="323" pos:column="43">ssl_ctx<pos:position pos:line="323" pos:column="50"/></name></name></expr></argument>,
                                 <argument><expr><ternary><condition><expr><name><name pos:line="324" pos:column="34">conn<pos:position pos:line="324" pos:column="38"/></name><operator pos:line="324" pos:column="38">-&gt;<pos:position pos:line="324" pos:column="43"/></operator><name pos:line="324" pos:column="40">ssl_config<pos:position pos:line="324" pos:column="50"/></name><operator pos:line="324" pos:column="50">.<pos:position pos:line="324" pos:column="51"/></operator><name pos:line="324" pos:column="51">verifypeer<pos:position pos:line="324" pos:column="61"/></name></name></expr>?<pos:position pos:line="324" pos:column="62"/></condition><then><expr><literal type="boolean" pos:line="324" pos:column="62">true<pos:position pos:line="324" pos:column="66"/></literal></expr></then><else pos:line="324" pos:column="66">:<expr><literal type="boolean" pos:line="324" pos:column="67">false<pos:position pos:line="324" pos:column="72"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="324" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="74"/></expr_stmt>
    <if pos:line="325" pos:column="5">if<condition pos:line="325" pos:column="7">(<expr><name pos:line="325" pos:column="8">err<pos:position pos:line="325" pos:column="11"/></name> <operator pos:line="325" pos:column="12">!=<pos:position pos:line="325" pos:column="14"/></operator> <name pos:line="325" pos:column="15">noErr<pos:position pos:line="325" pos:column="20"/></name></expr>)<pos:position pos:line="325" pos:column="21"/></condition><then pos:line="325" pos:column="21"> <block pos:line="325" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="326" pos:column="7">failf<pos:position pos:line="326" pos:column="12"/></name><argument_list pos:line="326" pos:column="12">(<argument><expr><name pos:line="326" pos:column="13">data<pos:position pos:line="326" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="326" pos:column="19">"SSL: SSLSetEnableCertVerify() failed: OSStatus %d"<pos:position pos:line="326" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="326" pos:column="72">err<pos:position pos:line="326" pos:column="75"/></name></expr></argument>)<pos:position pos:line="326" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="77"/></expr_stmt>
      <return pos:line="327" pos:column="7">return <expr><name pos:line="327" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="327" pos:column="37"/></name></expr>;<pos:position pos:line="327" pos:column="38"/></return>
    }<pos:position pos:line="328" pos:column="6"/></block></then></if>
<cpp:endif pos:line="329" pos:column="1">#<cpp:directive pos:line="329" pos:column="2">endif<pos:position pos:line="329" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="329" pos:column="8">/* CURL_SUPPORT_MAC_10_8 */</comment>
  }<pos:position pos:line="330" pos:column="4"/></block></else></if>
<cpp:else pos:line="331" pos:column="1">#<cpp:directive pos:line="331" pos:column="2">else<pos:position pos:line="331" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="332" pos:column="3">err<pos:position pos:line="332" pos:column="6"/></name> <operator pos:line="332" pos:column="7">=<pos:position pos:line="332" pos:column="8"/></operator> <call><name pos:line="332" pos:column="9">SSLSetEnableCertVerify<pos:position pos:line="332" pos:column="31"/></name><argument_list pos:line="332" pos:column="31">(<argument><expr><name><name pos:line="332" pos:column="32">BACKEND<pos:position pos:line="332" pos:column="39"/></name><operator pos:line="332" pos:column="39">-&gt;<pos:position pos:line="332" pos:column="44"/></operator><name pos:line="332" pos:column="41">ssl_ctx<pos:position pos:line="332" pos:column="48"/></name></name></expr></argument>,
                               <argument><expr><ternary><condition><expr><name><name pos:line="333" pos:column="32">conn<pos:position pos:line="333" pos:column="36"/></name><operator pos:line="333" pos:column="36">-&gt;<pos:position pos:line="333" pos:column="41"/></operator><name pos:line="333" pos:column="38">ssl_config<pos:position pos:line="333" pos:column="48"/></name><operator pos:line="333" pos:column="48">.<pos:position pos:line="333" pos:column="49"/></operator><name pos:line="333" pos:column="49">verifypeer<pos:position pos:line="333" pos:column="59"/></name></name></expr>?<pos:position pos:line="333" pos:column="60"/></condition><then><expr><literal type="boolean" pos:line="333" pos:column="60">true<pos:position pos:line="333" pos:column="64"/></literal></expr></then><else pos:line="333" pos:column="64">:<expr><literal type="boolean" pos:line="333" pos:column="65">false<pos:position pos:line="333" pos:column="70"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="333" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="72"/></expr_stmt>
  <if pos:line="334" pos:column="3">if<condition pos:line="334" pos:column="5">(<expr><name pos:line="334" pos:column="6">err<pos:position pos:line="334" pos:column="9"/></name> <operator pos:line="334" pos:column="10">!=<pos:position pos:line="334" pos:column="12"/></operator> <name pos:line="334" pos:column="13">noErr<pos:position pos:line="334" pos:column="18"/></name></expr>)<pos:position pos:line="334" pos:column="19"/></condition><then pos:line="334" pos:column="19"> <block pos:line="334" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="335" pos:column="5">failf<pos:position pos:line="335" pos:column="10"/></name><argument_list pos:line="335" pos:column="10">(<argument><expr><name pos:line="335" pos:column="11">data<pos:position pos:line="335" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="335" pos:column="17">"SSL: SSLSetEnableCertVerify() failed: OSStatus %d"<pos:position pos:line="335" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="335" pos:column="70">err<pos:position pos:line="335" pos:column="73"/></name></expr></argument>)<pos:position pos:line="335" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="75"/></expr_stmt>
    <return pos:line="336" pos:column="5">return <expr><name pos:line="336" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="336" pos:column="35"/></name></expr>;<pos:position pos:line="336" pos:column="36"/></return>
  }<pos:position pos:line="337" pos:column="4"/></block></then></if>
<cpp:endif pos:line="338" pos:column="1">#<cpp:directive pos:line="338" pos:column="2">endif<pos:position pos:line="338" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="338" pos:column="8">/* CURL_BUILD_MAC_10_6 || CURL_BUILD_IOS */</comment>

  <if pos:line="340" pos:column="3">if<condition pos:line="340" pos:column="5">(<expr><name pos:line="340" pos:column="6">ssl_cafile<pos:position pos:line="340" pos:column="16"/></name> <operator pos:line="340" pos:column="17">&amp;&amp;<pos:position pos:line="340" pos:column="27"/></operator> <name pos:line="340" pos:column="20">verifypeer<pos:position pos:line="340" pos:column="30"/></name></expr>)<pos:position pos:line="340" pos:column="31"/></condition><then pos:line="340" pos:column="31"> <block pos:line="340" pos:column="32">{
    <decl_stmt><decl><type><name pos:line="341" pos:column="5">bool<pos:position pos:line="341" pos:column="9"/></name></type> <name pos:line="341" pos:column="10">is_cert_file<pos:position pos:line="341" pos:column="22"/></name> <init pos:line="341" pos:column="23">= <expr><call><name pos:line="341" pos:column="25">is_file<pos:position pos:line="341" pos:column="32"/></name><argument_list pos:line="341" pos:column="32">(<argument><expr><name pos:line="341" pos:column="33">ssl_cafile<pos:position pos:line="341" pos:column="43"/></name></expr></argument>)<pos:position pos:line="341" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="341" pos:column="45"/></decl_stmt>

    <if pos:line="343" pos:column="5">if<condition pos:line="343" pos:column="7">(<expr><operator pos:line="343" pos:column="8">!<pos:position pos:line="343" pos:column="9"/></operator><name pos:line="343" pos:column="9">is_cert_file<pos:position pos:line="343" pos:column="21"/></name></expr>)<pos:position pos:line="343" pos:column="22"/></condition><then pos:line="343" pos:column="22"> <block pos:line="343" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="344" pos:column="7">failf<pos:position pos:line="344" pos:column="12"/></name><argument_list pos:line="344" pos:column="12">(<argument><expr><name pos:line="344" pos:column="13">data<pos:position pos:line="344" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="344" pos:column="19">"SSL: can't load CA certificate file %s"<pos:position pos:line="344" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="344" pos:column="61">ssl_cafile<pos:position pos:line="344" pos:column="71"/></name></expr></argument>)<pos:position pos:line="344" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="73"/></expr_stmt>
      <return pos:line="345" pos:column="7">return <expr><name pos:line="345" pos:column="14">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="345" pos:column="38"/></name></expr>;<pos:position pos:line="345" pos:column="39"/></return>
    }<pos:position pos:line="346" pos:column="6"/></block></then></if>
  }<pos:position pos:line="347" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="349" pos:column="3">/* Configure hostname check. SNI is used if available.
   * Both hostname check and SNI require SSLSetPeerDomainName().
   * Also: the verifyhost setting influences SNI usage */</comment>
  <if pos:line="352" pos:column="3">if<condition pos:line="352" pos:column="5">(<expr><name><name pos:line="352" pos:column="6">conn<pos:position pos:line="352" pos:column="10"/></name><operator pos:line="352" pos:column="10">-&gt;<pos:position pos:line="352" pos:column="15"/></operator><name pos:line="352" pos:column="12">ssl_config<pos:position pos:line="352" pos:column="22"/></name><operator pos:line="352" pos:column="22">.<pos:position pos:line="352" pos:column="23"/></operator><name pos:line="352" pos:column="23">verifyhost<pos:position pos:line="352" pos:column="33"/></name></name></expr>)<pos:position pos:line="352" pos:column="34"/></condition><then pos:line="352" pos:column="34"> <block pos:line="352" pos:column="35">{
    <expr_stmt><expr><name pos:line="353" pos:column="5">err<pos:position pos:line="353" pos:column="8"/></name> <operator pos:line="353" pos:column="9">=<pos:position pos:line="353" pos:column="10"/></operator> <call><name pos:line="353" pos:column="11">SSLSetPeerDomainName<pos:position pos:line="353" pos:column="31"/></name><argument_list pos:line="353" pos:column="31">(<argument><expr><name><name pos:line="353" pos:column="32">BACKEND<pos:position pos:line="353" pos:column="39"/></name><operator pos:line="353" pos:column="39">-&gt;<pos:position pos:line="353" pos:column="44"/></operator><name pos:line="353" pos:column="41">ssl_ctx<pos:position pos:line="353" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="353" pos:column="50">hostname<pos:position pos:line="353" pos:column="58"/></name></expr></argument>,
    <argument><expr><call><name pos:line="354" pos:column="5">strlen<pos:position pos:line="354" pos:column="11"/></name><argument_list pos:line="354" pos:column="11">(<argument><expr><name pos:line="354" pos:column="12">hostname<pos:position pos:line="354" pos:column="20"/></name></expr></argument>)<pos:position pos:line="354" pos:column="21"/></argument_list></call></expr></argument>)<pos:position pos:line="354" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="354" pos:column="23"/></expr_stmt>

    <if pos:line="356" pos:column="5">if<condition pos:line="356" pos:column="7">(<expr><name pos:line="356" pos:column="8">err<pos:position pos:line="356" pos:column="11"/></name> <operator pos:line="356" pos:column="12">!=<pos:position pos:line="356" pos:column="14"/></operator> <name pos:line="356" pos:column="15">noErr<pos:position pos:line="356" pos:column="20"/></name></expr>)<pos:position pos:line="356" pos:column="21"/></condition><then pos:line="356" pos:column="21"> <block pos:line="356" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="357" pos:column="7">infof<pos:position pos:line="357" pos:column="12"/></name><argument_list pos:line="357" pos:column="12">(<argument><expr><name pos:line="357" pos:column="13">data<pos:position pos:line="357" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="357" pos:column="19">"WARNING: SSL: SSLSetPeerDomainName() failed: OSStatus %d\n"<pos:position pos:line="357" pos:column="79"/></literal></expr></argument>,
            <argument><expr><name pos:line="358" pos:column="13">err<pos:position pos:line="358" pos:column="16"/></name></expr></argument>)<pos:position pos:line="358" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="358" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="359" pos:column="6"/></block></then></if>

    <if pos:line="361" pos:column="5">if<condition pos:line="361" pos:column="7">(<expr><operator pos:line="361" pos:column="8">(<pos:position pos:line="361" pos:column="9"/></operator><call><name pos:line="361" pos:column="9">Curl_inet_pton<pos:position pos:line="361" pos:column="23"/></name><argument_list pos:line="361" pos:column="23">(<argument><expr><name pos:line="361" pos:column="24">AF_INET<pos:position pos:line="361" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="361" pos:column="33">hostname<pos:position pos:line="361" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="361" pos:column="43">&amp;<pos:position pos:line="361" pos:column="48"/></operator><name pos:line="361" pos:column="44">addr<pos:position pos:line="361" pos:column="48"/></name></expr></argument>)<pos:position pos:line="361" pos:column="49"/></argument_list></call><operator pos:line="361" pos:column="49">)<pos:position pos:line="361" pos:column="50"/></operator>
  <cpp:ifdef pos:line="362" pos:column="3">#<cpp:directive pos:line="362" pos:column="4">ifdef<pos:position pos:line="362" pos:column="9"/></cpp:directive> <name pos:line="362" pos:column="10">ENABLE_IPV6<pos:position pos:line="362" pos:column="21"/></name></cpp:ifdef>
    <operator pos:line="363" pos:column="5">||<pos:position pos:line="363" pos:column="7"/></operator> <operator pos:line="363" pos:column="8">(<pos:position pos:line="363" pos:column="9"/></operator><call><name pos:line="363" pos:column="9">Curl_inet_pton<pos:position pos:line="363" pos:column="23"/></name><argument_list pos:line="363" pos:column="23">(<argument><expr><name pos:line="363" pos:column="24">AF_INET6<pos:position pos:line="363" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="363" pos:column="34">hostname<pos:position pos:line="363" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="363" pos:column="44">&amp;<pos:position pos:line="363" pos:column="49"/></operator><name pos:line="363" pos:column="45">addr<pos:position pos:line="363" pos:column="49"/></name></expr></argument>)<pos:position pos:line="363" pos:column="50"/></argument_list></call><operator pos:line="363" pos:column="50">)<pos:position pos:line="363" pos:column="51"/></operator></expr>
  <cpp:endif pos:line="364" pos:column="3">#<cpp:directive pos:line="364" pos:column="4">endif<pos:position pos:line="364" pos:column="9"/></cpp:directive></cpp:endif>
       )<pos:position pos:line="365" pos:column="9"/></condition><then pos:line="365" pos:column="9"> <block pos:line="365" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="366" pos:column="7">infof<pos:position pos:line="366" pos:column="12"/></name><argument_list pos:line="366" pos:column="12">(<argument><expr><name pos:line="366" pos:column="13">data<pos:position pos:line="366" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="366" pos:column="19">"WARNING: using IP address, SNI is being disabled by "<pos:position pos:line="366" pos:column="73"/></literal>
            <literal type="string" pos:line="367" pos:column="13">"the OS.\n"<pos:position pos:line="367" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="367" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="367" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="368" pos:column="6"/></block></then></if>
  }<pos:position pos:line="369" pos:column="4"/></block></then>
  <else pos:line="370" pos:column="3">else <block pos:line="370" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="371" pos:column="5">infof<pos:position pos:line="371" pos:column="10"/></name><argument_list pos:line="371" pos:column="10">(<argument><expr><name pos:line="371" pos:column="11">data<pos:position pos:line="371" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="371" pos:column="17">"WARNING: disabling hostname validation also disables SNI.\n"<pos:position pos:line="371" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="371" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="80"/></expr_stmt>
  }<pos:position pos:line="372" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="374" pos:column="3">/* Disable cipher suites that ST supports but are not safe. These ciphers
     are unlikely to be used in any case since ST gives other ciphers a much
     higher priority, but it's probably better that we not connect at all than
     to give the user a false sense of security if the server only supports
     insecure ciphers. (Note: We don't care about SSLv2-only ciphers.) */</comment>
  <expr_stmt><expr><operator pos:line="379" pos:column="3">(<pos:position pos:line="379" pos:column="4"/></operator><name pos:line="379" pos:column="4">void<pos:position pos:line="379" pos:column="8"/></name><operator pos:line="379" pos:column="8">)<pos:position pos:line="379" pos:column="9"/></operator><call><name pos:line="379" pos:column="9">SSLGetNumberSupportedCiphers<pos:position pos:line="379" pos:column="37"/></name><argument_list pos:line="379" pos:column="37">(<argument><expr><name><name pos:line="379" pos:column="38">BACKEND<pos:position pos:line="379" pos:column="45"/></name><operator pos:line="379" pos:column="45">-&gt;<pos:position pos:line="379" pos:column="50"/></operator><name pos:line="379" pos:column="47">ssl_ctx<pos:position pos:line="379" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="379" pos:column="56">&amp;<pos:position pos:line="379" pos:column="61"/></operator><name pos:line="379" pos:column="57">all_ciphers_count<pos:position pos:line="379" pos:column="74"/></name></expr></argument>)<pos:position pos:line="379" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="379" pos:column="76"/></expr_stmt>
  <expr_stmt><expr><name pos:line="380" pos:column="3">all_ciphers<pos:position pos:line="380" pos:column="14"/></name> <operator pos:line="380" pos:column="15">=<pos:position pos:line="380" pos:column="16"/></operator> <call><name pos:line="380" pos:column="17">malloc<pos:position pos:line="380" pos:column="23"/></name><argument_list pos:line="380" pos:column="23">(<argument><expr><name pos:line="380" pos:column="24">all_ciphers_count<pos:position pos:line="380" pos:column="41"/></name><operator pos:line="380" pos:column="41">*<pos:position pos:line="380" pos:column="42"/></operator><sizeof pos:line="380" pos:column="42">sizeof<argument_list pos:line="380" pos:column="48">(<argument><expr><name pos:line="380" pos:column="49">SSLCipherSuite<pos:position pos:line="380" pos:column="63"/></name></expr></argument>)<pos:position pos:line="380" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="380" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="66"/></expr_stmt>
  <expr_stmt><expr><name pos:line="381" pos:column="3">allowed_ciphers<pos:position pos:line="381" pos:column="18"/></name> <operator pos:line="381" pos:column="19">=<pos:position pos:line="381" pos:column="20"/></operator> <call><name pos:line="381" pos:column="21">malloc<pos:position pos:line="381" pos:column="27"/></name><argument_list pos:line="381" pos:column="27">(<argument><expr><name pos:line="381" pos:column="28">all_ciphers_count<pos:position pos:line="381" pos:column="45"/></name><operator pos:line="381" pos:column="45">*<pos:position pos:line="381" pos:column="46"/></operator><sizeof pos:line="381" pos:column="46">sizeof<argument_list pos:line="381" pos:column="52">(<argument><expr><name pos:line="381" pos:column="53">SSLCipherSuite<pos:position pos:line="381" pos:column="67"/></name></expr></argument>)<pos:position pos:line="381" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="381" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="381" pos:column="70"/></expr_stmt>
  <if pos:line="382" pos:column="3">if<condition pos:line="382" pos:column="5">(<expr><name pos:line="382" pos:column="6">all_ciphers<pos:position pos:line="382" pos:column="17"/></name> <operator pos:line="382" pos:column="18">&amp;&amp;<pos:position pos:line="382" pos:column="28"/></operator> <name pos:line="382" pos:column="21">allowed_ciphers<pos:position pos:line="382" pos:column="36"/></name> <operator pos:line="382" pos:column="37">&amp;&amp;<pos:position pos:line="382" pos:column="47"/></operator>
     <call><name pos:line="383" pos:column="6">SSLGetSupportedCiphers<pos:position pos:line="383" pos:column="28"/></name><argument_list pos:line="383" pos:column="28">(<argument><expr><name><name pos:line="383" pos:column="29">BACKEND<pos:position pos:line="383" pos:column="36"/></name><operator pos:line="383" pos:column="36">-&gt;<pos:position pos:line="383" pos:column="41"/></operator><name pos:line="383" pos:column="38">ssl_ctx<pos:position pos:line="383" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="383" pos:column="47">all_ciphers<pos:position pos:line="383" pos:column="58"/></name></expr></argument>,
       <argument><expr><operator pos:line="384" pos:column="8">&amp;<pos:position pos:line="384" pos:column="13"/></operator><name pos:line="384" pos:column="9">all_ciphers_count<pos:position pos:line="384" pos:column="26"/></name></expr></argument>)<pos:position pos:line="384" pos:column="27"/></argument_list></call> <operator pos:line="384" pos:column="28">==<pos:position pos:line="384" pos:column="30"/></operator> <name pos:line="384" pos:column="31">noErr<pos:position pos:line="384" pos:column="36"/></name></expr>)<pos:position pos:line="384" pos:column="37"/></condition><then pos:line="384" pos:column="37"> <block pos:line="384" pos:column="38">{
    <for pos:line="385" pos:column="5">for<control pos:line="385" pos:column="8">(<init><expr><name pos:line="385" pos:column="9">i<pos:position pos:line="385" pos:column="10"/></name> <operator pos:line="385" pos:column="11">=<pos:position pos:line="385" pos:column="12"/></operator> <literal type="number" pos:line="385" pos:column="13">0UL<pos:position pos:line="385" pos:column="16"/></literal></expr> ;<pos:position pos:line="385" pos:column="18"/></init> <condition><expr><name pos:line="385" pos:column="19">i<pos:position pos:line="385" pos:column="20"/></name> <operator pos:line="385" pos:column="21">&lt;<pos:position pos:line="385" pos:column="25"/></operator> <name pos:line="385" pos:column="23">all_ciphers_count<pos:position pos:line="385" pos:column="40"/></name></expr> ;<pos:position pos:line="385" pos:column="42"/></condition> <incr><expr><name pos:line="385" pos:column="43">i<pos:position pos:line="385" pos:column="44"/></name><operator pos:line="385" pos:column="44">++<pos:position pos:line="385" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="385" pos:column="47"/></control> <block pos:line="385" pos:column="48">{
<cpp:if pos:line="386" pos:column="1">#<cpp:directive pos:line="386" pos:column="2">if<pos:position pos:line="386" pos:column="4"/></cpp:directive> <expr><name pos:line="386" pos:column="5">CURL_BUILD_MAC<pos:position pos:line="386" pos:column="19"/></name></expr></cpp:if>
     <comment type="block" pos:line="387" pos:column="6">/* There's a known bug in early versions of Mountain Lion where ST's ECC
        ciphers (cipher suite 0xC001 through 0xC032) simply do not work.
        Work around the problem here by disabling those ciphers if we are
        running in an affected version of OS X. */</comment>
      <if pos:line="391" pos:column="7">if<condition pos:line="391" pos:column="9">(<expr><name pos:line="391" pos:column="10">darwinver_maj<pos:position pos:line="391" pos:column="23"/></name> <operator pos:line="391" pos:column="24">==<pos:position pos:line="391" pos:column="26"/></operator> <literal type="number" pos:line="391" pos:column="27">12<pos:position pos:line="391" pos:column="29"/></literal> <operator pos:line="391" pos:column="30">&amp;&amp;<pos:position pos:line="391" pos:column="40"/></operator> <name pos:line="391" pos:column="33">darwinver_min<pos:position pos:line="391" pos:column="46"/></name> <operator pos:line="391" pos:column="47">&lt;=<pos:position pos:line="391" pos:column="52"/></operator> <literal type="number" pos:line="391" pos:column="50">3<pos:position pos:line="391" pos:column="51"/></literal> <operator pos:line="391" pos:column="52">&amp;&amp;<pos:position pos:line="391" pos:column="62"/></operator>
         <name><name pos:line="392" pos:column="10">all_ciphers<pos:position pos:line="392" pos:column="21"/></name><index pos:line="392" pos:column="21">[<expr><name pos:line="392" pos:column="22">i<pos:position pos:line="392" pos:column="23"/></name></expr>]<pos:position pos:line="392" pos:column="24"/></index></name> <operator pos:line="392" pos:column="25">&gt;=<pos:position pos:line="392" pos:column="30"/></operator> <literal type="number" pos:line="392" pos:column="28">0xC001<pos:position pos:line="392" pos:column="34"/></literal> <operator pos:line="392" pos:column="35">&amp;&amp;<pos:position pos:line="392" pos:column="45"/></operator> <name><name pos:line="392" pos:column="38">all_ciphers<pos:position pos:line="392" pos:column="49"/></name><index pos:line="392" pos:column="49">[<expr><name pos:line="392" pos:column="50">i<pos:position pos:line="392" pos:column="51"/></name></expr>]<pos:position pos:line="392" pos:column="52"/></index></name> <operator pos:line="392" pos:column="53">&lt;=<pos:position pos:line="392" pos:column="58"/></operator> <literal type="number" pos:line="392" pos:column="56">0xC032<pos:position pos:line="392" pos:column="62"/></literal></expr>)<pos:position pos:line="392" pos:column="63"/></condition><then pos:line="392" pos:column="63"> <block pos:line="392" pos:column="64">{
        <continue pos:line="393" pos:column="9">continue;<pos:position pos:line="393" pos:column="18"/></continue>
      }<pos:position pos:line="394" pos:column="8"/></block></then></if>
<cpp:endif pos:line="395" pos:column="1">#<cpp:directive pos:line="395" pos:column="2">endif<pos:position pos:line="395" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="395" pos:column="8">/* CURL_BUILD_MAC */</comment>
      <switch pos:line="396" pos:column="7">switch<condition pos:line="396" pos:column="13">(<expr><name><name pos:line="396" pos:column="14">all_ciphers<pos:position pos:line="396" pos:column="25"/></name><index pos:line="396" pos:column="25">[<expr><name pos:line="396" pos:column="26">i<pos:position pos:line="396" pos:column="27"/></name></expr>]<pos:position pos:line="396" pos:column="28"/></index></name></expr>)<pos:position pos:line="396" pos:column="29"/></condition> <block pos:line="396" pos:column="30">{
        <comment type="block" pos:line="397" pos:column="9">/* Disable NULL ciphersuites: */</comment>
        <case pos:line="398" pos:column="9">case <expr><name pos:line="398" pos:column="14">SSL_NULL_WITH_NULL_NULL<pos:position pos:line="398" pos:column="37"/></name></expr>:<pos:position pos:line="398" pos:column="38"/></case>
        <case pos:line="399" pos:column="9">case <expr><name pos:line="399" pos:column="14">SSL_RSA_WITH_NULL_MD5<pos:position pos:line="399" pos:column="35"/></name></expr>:<pos:position pos:line="399" pos:column="36"/></case>
        <case pos:line="400" pos:column="9">case <expr><name pos:line="400" pos:column="14">SSL_RSA_WITH_NULL_SHA<pos:position pos:line="400" pos:column="35"/></name></expr>:<pos:position pos:line="400" pos:column="36"/></case>
        <case pos:line="401" pos:column="9">case <expr><literal type="number" pos:line="401" pos:column="14">0x003B<pos:position pos:line="401" pos:column="20"/></literal></expr>:<pos:position pos:line="401" pos:column="21"/></case> <comment type="block" pos:line="401" pos:column="22">/* TLS_RSA_WITH_NULL_SHA256 */</comment>
        <case pos:line="402" pos:column="9">case <expr><name pos:line="402" pos:column="14">SSL_FORTEZZA_DMS_WITH_NULL_SHA<pos:position pos:line="402" pos:column="44"/></name></expr>:<pos:position pos:line="402" pos:column="45"/></case>
        <case pos:line="403" pos:column="9">case <expr><literal type="number" pos:line="403" pos:column="14">0xC001<pos:position pos:line="403" pos:column="20"/></literal></expr>:<pos:position pos:line="403" pos:column="21"/></case> <comment type="block" pos:line="403" pos:column="22">/* TLS_ECDH_ECDSA_WITH_NULL_SHA */</comment>
        <case pos:line="404" pos:column="9">case <expr><literal type="number" pos:line="404" pos:column="14">0xC006<pos:position pos:line="404" pos:column="20"/></literal></expr>:<pos:position pos:line="404" pos:column="21"/></case> <comment type="block" pos:line="404" pos:column="22">/* TLS_ECDHE_ECDSA_WITH_NULL_SHA */</comment>
        <case pos:line="405" pos:column="9">case <expr><literal type="number" pos:line="405" pos:column="14">0xC00B<pos:position pos:line="405" pos:column="20"/></literal></expr>:<pos:position pos:line="405" pos:column="21"/></case> <comment type="block" pos:line="405" pos:column="22">/* TLS_ECDH_RSA_WITH_NULL_SHA */</comment>
        <case pos:line="406" pos:column="9">case <expr><literal type="number" pos:line="406" pos:column="14">0xC010<pos:position pos:line="406" pos:column="20"/></literal></expr>:<pos:position pos:line="406" pos:column="21"/></case> <comment type="block" pos:line="406" pos:column="22">/* TLS_ECDHE_RSA_WITH_NULL_SHA */</comment>
        <case pos:line="407" pos:column="9">case <expr><literal type="number" pos:line="407" pos:column="14">0x002C<pos:position pos:line="407" pos:column="20"/></literal></expr>:<pos:position pos:line="407" pos:column="21"/></case> <comment type="block" pos:line="407" pos:column="22">/* TLS_PSK_WITH_NULL_SHA */</comment>
        <case pos:line="408" pos:column="9">case <expr><literal type="number" pos:line="408" pos:column="14">0x002D<pos:position pos:line="408" pos:column="20"/></literal></expr>:<pos:position pos:line="408" pos:column="21"/></case> <comment type="block" pos:line="408" pos:column="22">/* TLS_DHE_PSK_WITH_NULL_SHA */</comment>
        <case pos:line="409" pos:column="9">case <expr><literal type="number" pos:line="409" pos:column="14">0x002E<pos:position pos:line="409" pos:column="20"/></literal></expr>:<pos:position pos:line="409" pos:column="21"/></case> <comment type="block" pos:line="409" pos:column="22">/* TLS_RSA_PSK_WITH_NULL_SHA */</comment>
        <case pos:line="410" pos:column="9">case <expr><literal type="number" pos:line="410" pos:column="14">0x00B0<pos:position pos:line="410" pos:column="20"/></literal></expr>:<pos:position pos:line="410" pos:column="21"/></case> <comment type="block" pos:line="410" pos:column="22">/* TLS_PSK_WITH_NULL_SHA256 */</comment>
        <case pos:line="411" pos:column="9">case <expr><literal type="number" pos:line="411" pos:column="14">0x00B1<pos:position pos:line="411" pos:column="20"/></literal></expr>:<pos:position pos:line="411" pos:column="21"/></case> <comment type="block" pos:line="411" pos:column="22">/* TLS_PSK_WITH_NULL_SHA384 */</comment>
        <case pos:line="412" pos:column="9">case <expr><literal type="number" pos:line="412" pos:column="14">0x00B4<pos:position pos:line="412" pos:column="20"/></literal></expr>:<pos:position pos:line="412" pos:column="21"/></case> <comment type="block" pos:line="412" pos:column="22">/* TLS_DHE_PSK_WITH_NULL_SHA256 */</comment>
        <case pos:line="413" pos:column="9">case <expr><literal type="number" pos:line="413" pos:column="14">0x00B5<pos:position pos:line="413" pos:column="20"/></literal></expr>:<pos:position pos:line="413" pos:column="21"/></case> <comment type="block" pos:line="413" pos:column="22">/* TLS_DHE_PSK_WITH_NULL_SHA384 */</comment>
        <case pos:line="414" pos:column="9">case <expr><literal type="number" pos:line="414" pos:column="14">0x00B8<pos:position pos:line="414" pos:column="20"/></literal></expr>:<pos:position pos:line="414" pos:column="21"/></case> <comment type="block" pos:line="414" pos:column="22">/* TLS_RSA_PSK_WITH_NULL_SHA256 */</comment>
        <case pos:line="415" pos:column="9">case <expr><literal type="number" pos:line="415" pos:column="14">0x00B9<pos:position pos:line="415" pos:column="20"/></literal></expr>:<pos:position pos:line="415" pos:column="21"/></case> <comment type="block" pos:line="415" pos:column="22">/* TLS_RSA_PSK_WITH_NULL_SHA384 */</comment>
        <comment type="block" pos:line="416" pos:column="9">/* Disable anonymous ciphersuites: */</comment>
        <case pos:line="417" pos:column="9">case <expr><name pos:line="417" pos:column="14">SSL_DH_anon_EXPORT_WITH_RC4_40_MD5<pos:position pos:line="417" pos:column="48"/></name></expr>:<pos:position pos:line="417" pos:column="49"/></case>
        <case pos:line="418" pos:column="9">case <expr><name pos:line="418" pos:column="14">SSL_DH_anon_WITH_RC4_128_MD5<pos:position pos:line="418" pos:column="42"/></name></expr>:<pos:position pos:line="418" pos:column="43"/></case>
        <case pos:line="419" pos:column="9">case <expr><name pos:line="419" pos:column="14">SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA<pos:position pos:line="419" pos:column="51"/></name></expr>:<pos:position pos:line="419" pos:column="52"/></case>
        <case pos:line="420" pos:column="9">case <expr><name pos:line="420" pos:column="14">SSL_DH_anon_WITH_DES_CBC_SHA<pos:position pos:line="420" pos:column="42"/></name></expr>:<pos:position pos:line="420" pos:column="43"/></case>
        <case pos:line="421" pos:column="9">case <expr><name pos:line="421" pos:column="14">SSL_DH_anon_WITH_3DES_EDE_CBC_SHA<pos:position pos:line="421" pos:column="47"/></name></expr>:<pos:position pos:line="421" pos:column="48"/></case>
        <case pos:line="422" pos:column="9">case <expr><name pos:line="422" pos:column="14">TLS_DH_anon_WITH_AES_128_CBC_SHA<pos:position pos:line="422" pos:column="46"/></name></expr>:<pos:position pos:line="422" pos:column="47"/></case>
        <case pos:line="423" pos:column="9">case <expr><name pos:line="423" pos:column="14">TLS_DH_anon_WITH_AES_256_CBC_SHA<pos:position pos:line="423" pos:column="46"/></name></expr>:<pos:position pos:line="423" pos:column="47"/></case>
        <case pos:line="424" pos:column="9">case <expr><literal type="number" pos:line="424" pos:column="14">0xC015<pos:position pos:line="424" pos:column="20"/></literal></expr>:<pos:position pos:line="424" pos:column="21"/></case> <comment type="block" pos:line="424" pos:column="22">/* TLS_ECDH_anon_WITH_NULL_SHA */</comment>
        <case pos:line="425" pos:column="9">case <expr><literal type="number" pos:line="425" pos:column="14">0xC016<pos:position pos:line="425" pos:column="20"/></literal></expr>:<pos:position pos:line="425" pos:column="21"/></case> <comment type="block" pos:line="425" pos:column="22">/* TLS_ECDH_anon_WITH_RC4_128_SHA */</comment>
        <case pos:line="426" pos:column="9">case <expr><literal type="number" pos:line="426" pos:column="14">0xC017<pos:position pos:line="426" pos:column="20"/></literal></expr>:<pos:position pos:line="426" pos:column="21"/></case> <comment type="block" pos:line="426" pos:column="22">/* TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA */</comment>
        <case pos:line="427" pos:column="9">case <expr><literal type="number" pos:line="427" pos:column="14">0xC018<pos:position pos:line="427" pos:column="20"/></literal></expr>:<pos:position pos:line="427" pos:column="21"/></case> <comment type="block" pos:line="427" pos:column="22">/* TLS_ECDH_anon_WITH_AES_128_CBC_SHA */</comment>
        <case pos:line="428" pos:column="9">case <expr><literal type="number" pos:line="428" pos:column="14">0xC019<pos:position pos:line="428" pos:column="20"/></literal></expr>:<pos:position pos:line="428" pos:column="21"/></case> <comment type="block" pos:line="428" pos:column="22">/* TLS_ECDH_anon_WITH_AES_256_CBC_SHA */</comment>
        <case pos:line="429" pos:column="9">case <expr><literal type="number" pos:line="429" pos:column="14">0x006C<pos:position pos:line="429" pos:column="20"/></literal></expr>:<pos:position pos:line="429" pos:column="21"/></case> <comment type="block" pos:line="429" pos:column="22">/* TLS_DH_anon_WITH_AES_128_CBC_SHA256 */</comment>
        <case pos:line="430" pos:column="9">case <expr><literal type="number" pos:line="430" pos:column="14">0x006D<pos:position pos:line="430" pos:column="20"/></literal></expr>:<pos:position pos:line="430" pos:column="21"/></case> <comment type="block" pos:line="430" pos:column="22">/* TLS_DH_anon_WITH_AES_256_CBC_SHA256 */</comment>
        <case pos:line="431" pos:column="9">case <expr><literal type="number" pos:line="431" pos:column="14">0x00A6<pos:position pos:line="431" pos:column="20"/></literal></expr>:<pos:position pos:line="431" pos:column="21"/></case> <comment type="block" pos:line="431" pos:column="22">/* TLS_DH_anon_WITH_AES_128_GCM_SHA256 */</comment>
        <case pos:line="432" pos:column="9">case <expr><literal type="number" pos:line="432" pos:column="14">0x00A7<pos:position pos:line="432" pos:column="20"/></literal></expr>:<pos:position pos:line="432" pos:column="21"/></case> <comment type="block" pos:line="432" pos:column="22">/* TLS_DH_anon_WITH_AES_256_GCM_SHA384 */</comment>
        <comment type="block" pos:line="433" pos:column="9">/* Disable weak key ciphersuites: */</comment>
        <case pos:line="434" pos:column="9">case <expr><name pos:line="434" pos:column="14">SSL_RSA_EXPORT_WITH_RC4_40_MD5<pos:position pos:line="434" pos:column="44"/></name></expr>:<pos:position pos:line="434" pos:column="45"/></case>
        <case pos:line="435" pos:column="9">case <expr><name pos:line="435" pos:column="14">SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5<pos:position pos:line="435" pos:column="48"/></name></expr>:<pos:position pos:line="435" pos:column="49"/></case>
        <case pos:line="436" pos:column="9">case <expr><name pos:line="436" pos:column="14">SSL_RSA_EXPORT_WITH_DES40_CBC_SHA<pos:position pos:line="436" pos:column="47"/></name></expr>:<pos:position pos:line="436" pos:column="48"/></case>
        <case pos:line="437" pos:column="9">case <expr><name pos:line="437" pos:column="14">SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA<pos:position pos:line="437" pos:column="50"/></name></expr>:<pos:position pos:line="437" pos:column="51"/></case>
        <case pos:line="438" pos:column="9">case <expr><name pos:line="438" pos:column="14">SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA<pos:position pos:line="438" pos:column="50"/></name></expr>:<pos:position pos:line="438" pos:column="51"/></case>
        <case pos:line="439" pos:column="9">case <expr><name pos:line="439" pos:column="14">SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA<pos:position pos:line="439" pos:column="51"/></name></expr>:<pos:position pos:line="439" pos:column="52"/></case>
        <case pos:line="440" pos:column="9">case <expr><name pos:line="440" pos:column="14">SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA<pos:position pos:line="440" pos:column="51"/></name></expr>:<pos:position pos:line="440" pos:column="52"/></case>
        <case pos:line="441" pos:column="9">case <expr><name pos:line="441" pos:column="14">SSL_RSA_WITH_DES_CBC_SHA<pos:position pos:line="441" pos:column="38"/></name></expr>:<pos:position pos:line="441" pos:column="39"/></case>
        <case pos:line="442" pos:column="9">case <expr><name pos:line="442" pos:column="14">SSL_DH_DSS_WITH_DES_CBC_SHA<pos:position pos:line="442" pos:column="41"/></name></expr>:<pos:position pos:line="442" pos:column="42"/></case>
        <case pos:line="443" pos:column="9">case <expr><name pos:line="443" pos:column="14">SSL_DH_RSA_WITH_DES_CBC_SHA<pos:position pos:line="443" pos:column="41"/></name></expr>:<pos:position pos:line="443" pos:column="42"/></case>
        <case pos:line="444" pos:column="9">case <expr><name pos:line="444" pos:column="14">SSL_DHE_DSS_WITH_DES_CBC_SHA<pos:position pos:line="444" pos:column="42"/></name></expr>:<pos:position pos:line="444" pos:column="43"/></case>
        <case pos:line="445" pos:column="9">case <expr><name pos:line="445" pos:column="14">SSL_DHE_RSA_WITH_DES_CBC_SHA<pos:position pos:line="445" pos:column="42"/></name></expr>:<pos:position pos:line="445" pos:column="43"/></case>
        <comment type="block" pos:line="446" pos:column="9">/* Disable IDEA: */</comment>
        <case pos:line="447" pos:column="9">case <expr><name pos:line="447" pos:column="14">SSL_RSA_WITH_IDEA_CBC_SHA<pos:position pos:line="447" pos:column="39"/></name></expr>:<pos:position pos:line="447" pos:column="40"/></case>
        <case pos:line="448" pos:column="9">case <expr><name pos:line="448" pos:column="14">SSL_RSA_WITH_IDEA_CBC_MD5<pos:position pos:line="448" pos:column="39"/></name></expr>:<pos:position pos:line="448" pos:column="40"/></case>
        <comment type="block" pos:line="449" pos:column="9">/* Disable RC4: */</comment>
        <case pos:line="450" pos:column="9">case <expr><name pos:line="450" pos:column="14">SSL_RSA_WITH_RC4_128_MD5<pos:position pos:line="450" pos:column="38"/></name></expr>:<pos:position pos:line="450" pos:column="39"/></case>
        <case pos:line="451" pos:column="9">case <expr><name pos:line="451" pos:column="14">SSL_RSA_WITH_RC4_128_SHA<pos:position pos:line="451" pos:column="38"/></name></expr>:<pos:position pos:line="451" pos:column="39"/></case>
        <case pos:line="452" pos:column="9">case <expr><literal type="number" pos:line="452" pos:column="14">0xC002<pos:position pos:line="452" pos:column="20"/></literal></expr>:<pos:position pos:line="452" pos:column="21"/></case> <comment type="block" pos:line="452" pos:column="22">/* TLS_ECDH_ECDSA_WITH_RC4_128_SHA */</comment>
        <case pos:line="453" pos:column="9">case <expr><literal type="number" pos:line="453" pos:column="14">0xC007<pos:position pos:line="453" pos:column="20"/></literal></expr>:<pos:position pos:line="453" pos:column="21"/></case> <comment type="block" pos:line="453" pos:column="22">/* TLS_ECDHE_ECDSA_WITH_RC4_128_SHA*/</comment>
        <case pos:line="454" pos:column="9">case <expr><literal type="number" pos:line="454" pos:column="14">0xC00C<pos:position pos:line="454" pos:column="20"/></literal></expr>:<pos:position pos:line="454" pos:column="21"/></case> <comment type="block" pos:line="454" pos:column="22">/* TLS_ECDH_RSA_WITH_RC4_128_SHA */</comment>
        <case pos:line="455" pos:column="9">case <expr><literal type="number" pos:line="455" pos:column="14">0xC011<pos:position pos:line="455" pos:column="20"/></literal></expr>:<pos:position pos:line="455" pos:column="21"/></case> <comment type="block" pos:line="455" pos:column="22">/* TLS_ECDHE_RSA_WITH_RC4_128_SHA */</comment>
        <case pos:line="456" pos:column="9">case <expr><literal type="number" pos:line="456" pos:column="14">0x008A<pos:position pos:line="456" pos:column="20"/></literal></expr>:<pos:position pos:line="456" pos:column="21"/></case> <comment type="block" pos:line="456" pos:column="22">/* TLS_PSK_WITH_RC4_128_SHA */</comment>
        <case pos:line="457" pos:column="9">case <expr><literal type="number" pos:line="457" pos:column="14">0x008E<pos:position pos:line="457" pos:column="20"/></literal></expr>:<pos:position pos:line="457" pos:column="21"/></case> <comment type="block" pos:line="457" pos:column="22">/* TLS_DHE_PSK_WITH_RC4_128_SHA */</comment>
        <case pos:line="458" pos:column="9">case <expr><literal type="number" pos:line="458" pos:column="14">0x0092<pos:position pos:line="458" pos:column="20"/></literal></expr>:<pos:position pos:line="458" pos:column="21"/></case> <comment type="block" pos:line="458" pos:column="22">/* TLS_RSA_PSK_WITH_RC4_128_SHA */</comment>
          <break pos:line="459" pos:column="11">break;<pos:position pos:line="459" pos:column="17"/></break>
        <default pos:line="460" pos:column="9">default:<pos:position pos:line="460" pos:column="17"/></default> <comment type="block" pos:line="460" pos:column="18">/* enable everything else */</comment>
          <expr_stmt><expr><name><name pos:line="461" pos:column="11">allowed_ciphers<pos:position pos:line="461" pos:column="26"/></name><index pos:line="461" pos:column="26">[<expr><name pos:line="461" pos:column="27">allowed_ciphers_count<pos:position pos:line="461" pos:column="48"/></name><operator pos:line="461" pos:column="48">++<pos:position pos:line="461" pos:column="50"/></operator></expr>]<pos:position pos:line="461" pos:column="51"/></index></name> <operator pos:line="461" pos:column="52">=<pos:position pos:line="461" pos:column="53"/></operator> <name><name pos:line="461" pos:column="54">all_ciphers<pos:position pos:line="461" pos:column="65"/></name><index pos:line="461" pos:column="65">[<expr><name pos:line="461" pos:column="66">i<pos:position pos:line="461" pos:column="67"/></name></expr>]<pos:position pos:line="461" pos:column="68"/></index></name></expr>;<pos:position pos:line="461" pos:column="69"/></expr_stmt>
          <break pos:line="462" pos:column="11">break;<pos:position pos:line="462" pos:column="17"/></break>
      }<pos:position pos:line="463" pos:column="8"/></block></switch>
    }<pos:position pos:line="464" pos:column="6"/></block></for>
    <expr_stmt><expr><name pos:line="465" pos:column="5">err<pos:position pos:line="465" pos:column="8"/></name> <operator pos:line="465" pos:column="9">=<pos:position pos:line="465" pos:column="10"/></operator> <call><name pos:line="465" pos:column="11">SSLSetEnabledCiphers<pos:position pos:line="465" pos:column="31"/></name><argument_list pos:line="465" pos:column="31">(<argument><expr><name><name pos:line="465" pos:column="32">BACKEND<pos:position pos:line="465" pos:column="39"/></name><operator pos:line="465" pos:column="39">-&gt;<pos:position pos:line="465" pos:column="44"/></operator><name pos:line="465" pos:column="41">ssl_ctx<pos:position pos:line="465" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="465" pos:column="50">allowed_ciphers<pos:position pos:line="465" pos:column="65"/></name></expr></argument>,
                               <argument><expr><name pos:line="466" pos:column="32">allowed_ciphers_count<pos:position pos:line="466" pos:column="53"/></name></expr></argument>)<pos:position pos:line="466" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="466" pos:column="55"/></expr_stmt>
    <if pos:line="467" pos:column="5">if<condition pos:line="467" pos:column="7">(<expr><name pos:line="467" pos:column="8">err<pos:position pos:line="467" pos:column="11"/></name> <operator pos:line="467" pos:column="12">!=<pos:position pos:line="467" pos:column="14"/></operator> <name pos:line="467" pos:column="15">noErr<pos:position pos:line="467" pos:column="20"/></name></expr>)<pos:position pos:line="467" pos:column="21"/></condition><then pos:line="467" pos:column="21"> <block pos:line="467" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="468" pos:column="7">failf<pos:position pos:line="468" pos:column="12"/></name><argument_list pos:line="468" pos:column="12">(<argument><expr><name pos:line="468" pos:column="13">data<pos:position pos:line="468" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="468" pos:column="19">"SSL: SSLSetEnabledCiphers() failed: OSStatus %d"<pos:position pos:line="468" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="468" pos:column="70">err<pos:position pos:line="468" pos:column="73"/></name></expr></argument>)<pos:position pos:line="468" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="468" pos:column="75"/></expr_stmt>
      <return pos:line="469" pos:column="7">return <expr><name pos:line="469" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="469" pos:column="37"/></name></expr>;<pos:position pos:line="469" pos:column="38"/></return>
    }<pos:position pos:line="470" pos:column="6"/></block></then></if>
  }<pos:position pos:line="471" pos:column="4"/></block></then>
  <else pos:line="472" pos:column="3">else <block pos:line="472" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="473" pos:column="5">Curl_safefree<pos:position pos:line="473" pos:column="18"/></name><argument_list pos:line="473" pos:column="18">(<argument><expr><name pos:line="473" pos:column="19">all_ciphers<pos:position pos:line="473" pos:column="30"/></name></expr></argument>)<pos:position pos:line="473" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="473" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="474" pos:column="5">Curl_safefree<pos:position pos:line="474" pos:column="18"/></name><argument_list pos:line="474" pos:column="18">(<argument><expr><name pos:line="474" pos:column="19">allowed_ciphers<pos:position pos:line="474" pos:column="34"/></name></expr></argument>)<pos:position pos:line="474" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="474" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="475" pos:column="5">failf<pos:position pos:line="475" pos:column="10"/></name><argument_list pos:line="475" pos:column="10">(<argument><expr><name pos:line="475" pos:column="11">data<pos:position pos:line="475" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="475" pos:column="17">"SSL: Failed to allocate memory for allowed ciphers"<pos:position pos:line="475" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="475" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="475" pos:column="71"/></expr_stmt>
    <return pos:line="476" pos:column="5">return <expr><name pos:line="476" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="476" pos:column="31"/></name></expr>;<pos:position pos:line="476" pos:column="32"/></return>
  }<pos:position pos:line="477" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="478" pos:column="3">Curl_safefree<pos:position pos:line="478" pos:column="16"/></name><argument_list pos:line="478" pos:column="16">(<argument><expr><name pos:line="478" pos:column="17">all_ciphers<pos:position pos:line="478" pos:column="28"/></name></expr></argument>)<pos:position pos:line="478" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="478" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="479" pos:column="3">Curl_safefree<pos:position pos:line="479" pos:column="16"/></name><argument_list pos:line="479" pos:column="16">(<argument><expr><name pos:line="479" pos:column="17">allowed_ciphers<pos:position pos:line="479" pos:column="32"/></name></expr></argument>)<pos:position pos:line="479" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="479" pos:column="34"/></expr_stmt>

<cpp:if pos:line="481" pos:column="1">#<cpp:directive pos:line="481" pos:column="2">if<pos:position pos:line="481" pos:column="4"/></cpp:directive> <expr><name pos:line="481" pos:column="5">CURL_BUILD_MAC_10_9<pos:position pos:line="481" pos:column="24"/></name> <operator pos:line="481" pos:column="25">||<pos:position pos:line="481" pos:column="27"/></operator> <name pos:line="481" pos:column="28">CURL_BUILD_IOS_7<pos:position pos:line="481" pos:column="44"/></name></expr></cpp:if>
  <comment type="block" pos:line="482" pos:column="3">/* We want to enable 1/n-1 when using a CBC cipher unless the user
     specifically doesn't want us doing that: */</comment>
  <if pos:line="484" pos:column="3">if<condition pos:line="484" pos:column="5">(<expr><name pos:line="484" pos:column="6">SSLSetSessionOption<pos:position pos:line="484" pos:column="25"/></name> <operator pos:line="484" pos:column="26">!=<pos:position pos:line="484" pos:column="28"/></operator> <name pos:line="484" pos:column="29">NULL<pos:position pos:line="484" pos:column="33"/></name></expr>)<pos:position pos:line="484" pos:column="34"/></condition><then pos:line="484" pos:column="34"> <block pos:line="484" pos:column="35">{
    <comment type="block" pos:line="485" pos:column="5">/* TODO s/data-&gt;set.ssl.enable_beast/SSL_SET_OPTION(enable_beast)/g */</comment>
    <expr_stmt><expr><call><name pos:line="486" pos:column="5">SSLSetSessionOption<pos:position pos:line="486" pos:column="24"/></name><argument_list pos:line="486" pos:column="24">(<argument><expr><name><name pos:line="486" pos:column="25">BACKEND<pos:position pos:line="486" pos:column="32"/></name><operator pos:line="486" pos:column="32">-&gt;<pos:position pos:line="486" pos:column="37"/></operator><name pos:line="486" pos:column="34">ssl_ctx<pos:position pos:line="486" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="486" pos:column="43">kSSLSessionOptionSendOneByteRecord<pos:position pos:line="486" pos:column="77"/></name></expr></argument>,
                      <argument><expr><operator pos:line="487" pos:column="23">!<pos:position pos:line="487" pos:column="24"/></operator><name><name pos:line="487" pos:column="24">data<pos:position pos:line="487" pos:column="28"/></name><operator pos:line="487" pos:column="28">-&gt;<pos:position pos:line="487" pos:column="33"/></operator><name pos:line="487" pos:column="30">set<pos:position pos:line="487" pos:column="33"/></name><operator pos:line="487" pos:column="33">.<pos:position pos:line="487" pos:column="34"/></operator><name pos:line="487" pos:column="34">ssl<pos:position pos:line="487" pos:column="37"/></name><operator pos:line="487" pos:column="37">.<pos:position pos:line="487" pos:column="38"/></operator><name pos:line="487" pos:column="38">enable_beast<pos:position pos:line="487" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="487" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="487" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="488" pos:column="5">SSLSetSessionOption<pos:position pos:line="488" pos:column="24"/></name><argument_list pos:line="488" pos:column="24">(<argument><expr><name><name pos:line="488" pos:column="25">BACKEND<pos:position pos:line="488" pos:column="32"/></name><operator pos:line="488" pos:column="32">-&gt;<pos:position pos:line="488" pos:column="37"/></operator><name pos:line="488" pos:column="34">ssl_ctx<pos:position pos:line="488" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="488" pos:column="43">kSSLSessionOptionFalseStart<pos:position pos:line="488" pos:column="70"/></name></expr></argument>,
                      <argument><expr><name><name pos:line="489" pos:column="23">data<pos:position pos:line="489" pos:column="27"/></name><operator pos:line="489" pos:column="27">-&gt;<pos:position pos:line="489" pos:column="32"/></operator><name pos:line="489" pos:column="29">set<pos:position pos:line="489" pos:column="32"/></name><operator pos:line="489" pos:column="32">.<pos:position pos:line="489" pos:column="33"/></operator><name pos:line="489" pos:column="33">ssl<pos:position pos:line="489" pos:column="36"/></name><operator pos:line="489" pos:column="36">.<pos:position pos:line="489" pos:column="37"/></operator><name pos:line="489" pos:column="37">falsestart<pos:position pos:line="489" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="489" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="489" pos:column="49"/></expr_stmt> <comment type="block" pos:line="489" pos:column="50">/* false start support */</comment>
  }<pos:position pos:line="490" pos:column="4"/></block></then></if>
<cpp:endif pos:line="491" pos:column="1">#<cpp:directive pos:line="491" pos:column="2">endif<pos:position pos:line="491" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="491" pos:column="8">/* CURL_BUILD_MAC_10_9 || CURL_BUILD_IOS_7 */</comment>

  <comment type="block" pos:line="493" pos:column="3">/* Check if there's a cached ID we can/should use here! */</comment>
  <if pos:line="494" pos:column="3">if<condition pos:line="494" pos:column="5">(<expr><call><name pos:line="494" pos:column="6">SSL_SET_OPTION<pos:position pos:line="494" pos:column="20"/></name><argument_list pos:line="494" pos:column="20">(<argument><expr><name><name pos:line="494" pos:column="21">primary<pos:position pos:line="494" pos:column="28"/></name><operator pos:line="494" pos:column="28">.<pos:position pos:line="494" pos:column="29"/></operator><name pos:line="494" pos:column="29">sessionid<pos:position pos:line="494" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="494" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="494" pos:column="40"/></condition><then pos:line="494" pos:column="40"> <block pos:line="494" pos:column="41">{
    <decl_stmt><decl><type><name pos:line="495" pos:column="5">char<pos:position pos:line="495" pos:column="9"/></name> <modifier pos:line="495" pos:column="10">*<pos:position pos:line="495" pos:column="11"/></modifier></type><name pos:line="495" pos:column="11">ssl_sessionid<pos:position pos:line="495" pos:column="24"/></name></decl>;<pos:position pos:line="495" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="496" pos:column="5">size_t<pos:position pos:line="496" pos:column="11"/></name></type> <name pos:line="496" pos:column="12">ssl_sessionid_len<pos:position pos:line="496" pos:column="29"/></name></decl>;<pos:position pos:line="496" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="498" pos:column="5">Curl_ssl_sessionid_lock<pos:position pos:line="498" pos:column="28"/></name><argument_list pos:line="498" pos:column="28">(<argument><expr><name pos:line="498" pos:column="29">conn<pos:position pos:line="498" pos:column="33"/></name></expr></argument>)<pos:position pos:line="498" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="498" pos:column="35"/></expr_stmt>
    <if pos:line="499" pos:column="5">if<condition pos:line="499" pos:column="7">(<expr><operator pos:line="499" pos:column="8">!<pos:position pos:line="499" pos:column="9"/></operator><call><name pos:line="499" pos:column="9">Curl_ssl_getsessionid<pos:position pos:line="499" pos:column="30"/></name><argument_list pos:line="499" pos:column="30">(<argument><expr><name pos:line="499" pos:column="31">conn<pos:position pos:line="499" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="499" pos:column="37">(<pos:position pos:line="499" pos:column="38"/></operator><name pos:line="499" pos:column="38">void<pos:position pos:line="499" pos:column="42"/></name> <operator pos:line="499" pos:column="43">*<pos:position pos:line="499" pos:column="44"/></operator><operator pos:line="499" pos:column="44">*<pos:position pos:line="499" pos:column="45"/></operator><operator pos:line="499" pos:column="45">)<pos:position pos:line="499" pos:column="46"/></operator><operator pos:line="499" pos:column="46">&amp;<pos:position pos:line="499" pos:column="51"/></operator><name pos:line="499" pos:column="47">ssl_sessionid<pos:position pos:line="499" pos:column="60"/></name></expr></argument>,
                              <argument><expr><operator pos:line="500" pos:column="31">&amp;<pos:position pos:line="500" pos:column="36"/></operator><name pos:line="500" pos:column="32">ssl_sessionid_len<pos:position pos:line="500" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="500" pos:column="51">sockindex<pos:position pos:line="500" pos:column="60"/></name></expr></argument>)<pos:position pos:line="500" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="500" pos:column="62"/></condition><then pos:line="500" pos:column="62"> <block pos:line="500" pos:column="63">{
      <comment type="block" pos:line="501" pos:column="7">/* we got a session id, use it! */</comment>
      <expr_stmt><expr><name pos:line="502" pos:column="7">err<pos:position pos:line="502" pos:column="10"/></name> <operator pos:line="502" pos:column="11">=<pos:position pos:line="502" pos:column="12"/></operator> <call><name pos:line="502" pos:column="13">SSLSetPeerID<pos:position pos:line="502" pos:column="25"/></name><argument_list pos:line="502" pos:column="25">(<argument><expr><name><name pos:line="502" pos:column="26">BACKEND<pos:position pos:line="502" pos:column="33"/></name><operator pos:line="502" pos:column="33">-&gt;<pos:position pos:line="502" pos:column="38"/></operator><name pos:line="502" pos:column="35">ssl_ctx<pos:position pos:line="502" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="502" pos:column="44">ssl_sessionid<pos:position pos:line="502" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="502" pos:column="59">ssl_sessionid_len<pos:position pos:line="502" pos:column="76"/></name></expr></argument>)<pos:position pos:line="502" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="502" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="503" pos:column="7">Curl_ssl_sessionid_unlock<pos:position pos:line="503" pos:column="32"/></name><argument_list pos:line="503" pos:column="32">(<argument><expr><name pos:line="503" pos:column="33">conn<pos:position pos:line="503" pos:column="37"/></name></expr></argument>)<pos:position pos:line="503" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="503" pos:column="39"/></expr_stmt>
      <if pos:line="504" pos:column="7">if<condition pos:line="504" pos:column="9">(<expr><name pos:line="504" pos:column="10">err<pos:position pos:line="504" pos:column="13"/></name> <operator pos:line="504" pos:column="14">!=<pos:position pos:line="504" pos:column="16"/></operator> <name pos:line="504" pos:column="17">noErr<pos:position pos:line="504" pos:column="22"/></name></expr>)<pos:position pos:line="504" pos:column="23"/></condition><then pos:line="504" pos:column="23"> <block pos:line="504" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="505" pos:column="9">failf<pos:position pos:line="505" pos:column="14"/></name><argument_list pos:line="505" pos:column="14">(<argument><expr><name pos:line="505" pos:column="15">data<pos:position pos:line="505" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="505" pos:column="21">"SSL: SSLSetPeerID() failed: OSStatus %d"<pos:position pos:line="505" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="505" pos:column="64">err<pos:position pos:line="505" pos:column="67"/></name></expr></argument>)<pos:position pos:line="505" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="505" pos:column="69"/></expr_stmt>
        <return pos:line="506" pos:column="9">return <expr><name pos:line="506" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="506" pos:column="39"/></name></expr>;<pos:position pos:line="506" pos:column="40"/></return>
      }<pos:position pos:line="507" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="508" pos:column="7">/* Informational message */</comment>
      <expr_stmt><expr><call><name pos:line="509" pos:column="7">infof<pos:position pos:line="509" pos:column="12"/></name><argument_list pos:line="509" pos:column="12">(<argument><expr><name pos:line="509" pos:column="13">data<pos:position pos:line="509" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="509" pos:column="19">"SSL re-using session ID\n"<pos:position pos:line="509" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="509" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="509" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="510" pos:column="6"/></block></then>
    <comment type="block" pos:line="511" pos:column="5">/* If there isn't one, then let's make one up! This has to be done prior
       to starting the handshake. */</comment>
    <else pos:line="513" pos:column="5">else <block pos:line="513" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="514" pos:column="7">CURLcode<pos:position pos:line="514" pos:column="15"/></name></type> <name pos:line="514" pos:column="16">result<pos:position pos:line="514" pos:column="22"/></name></decl>;<pos:position pos:line="514" pos:column="23"/></decl_stmt>
      <expr_stmt><expr><name pos:line="515" pos:column="7">ssl_sessionid<pos:position pos:line="515" pos:column="20"/></name> <operator pos:line="515" pos:column="21">=<pos:position pos:line="515" pos:column="22"/></operator>
        <call><name pos:line="516" pos:column="9">aprintf<pos:position pos:line="516" pos:column="16"/></name><argument_list pos:line="516" pos:column="16">(<argument><expr><literal type="string" pos:line="516" pos:column="17">"%s:%d:%d:%s:%hu"<pos:position pos:line="516" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="516" pos:column="36">ssl_cafile<pos:position pos:line="516" pos:column="46"/></name></expr></argument>,
                <argument><expr><name pos:line="517" pos:column="17">verifypeer<pos:position pos:line="517" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="517" pos:column="29">SSL_CONN_CONFIG<pos:position pos:line="517" pos:column="44"/></name><argument_list pos:line="517" pos:column="44">(<argument><expr><name pos:line="517" pos:column="45">verifyhost<pos:position pos:line="517" pos:column="55"/></name></expr></argument>)<pos:position pos:line="517" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="517" pos:column="58">hostname<pos:position pos:line="517" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="517" pos:column="68">port<pos:position pos:line="517" pos:column="72"/></name></expr></argument>)<pos:position pos:line="517" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="517" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><name pos:line="518" pos:column="7">ssl_sessionid_len<pos:position pos:line="518" pos:column="24"/></name> <operator pos:line="518" pos:column="25">=<pos:position pos:line="518" pos:column="26"/></operator> <call><name pos:line="518" pos:column="27">strlen<pos:position pos:line="518" pos:column="33"/></name><argument_list pos:line="518" pos:column="33">(<argument><expr><name pos:line="518" pos:column="34">ssl_sessionid<pos:position pos:line="518" pos:column="47"/></name></expr></argument>)<pos:position pos:line="518" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="518" pos:column="49"/></expr_stmt>

      <expr_stmt><expr><name pos:line="520" pos:column="7">err<pos:position pos:line="520" pos:column="10"/></name> <operator pos:line="520" pos:column="11">=<pos:position pos:line="520" pos:column="12"/></operator> <call><name pos:line="520" pos:column="13">SSLSetPeerID<pos:position pos:line="520" pos:column="25"/></name><argument_list pos:line="520" pos:column="25">(<argument><expr><name><name pos:line="520" pos:column="26">BACKEND<pos:position pos:line="520" pos:column="33"/></name><operator pos:line="520" pos:column="33">-&gt;<pos:position pos:line="520" pos:column="38"/></operator><name pos:line="520" pos:column="35">ssl_ctx<pos:position pos:line="520" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="520" pos:column="44">ssl_sessionid<pos:position pos:line="520" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="520" pos:column="59">ssl_sessionid_len<pos:position pos:line="520" pos:column="76"/></name></expr></argument>)<pos:position pos:line="520" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="520" pos:column="78"/></expr_stmt>
      <if pos:line="521" pos:column="7">if<condition pos:line="521" pos:column="9">(<expr><name pos:line="521" pos:column="10">err<pos:position pos:line="521" pos:column="13"/></name> <operator pos:line="521" pos:column="14">!=<pos:position pos:line="521" pos:column="16"/></operator> <name pos:line="521" pos:column="17">noErr<pos:position pos:line="521" pos:column="22"/></name></expr>)<pos:position pos:line="521" pos:column="23"/></condition><then pos:line="521" pos:column="23"> <block pos:line="521" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="522" pos:column="9">Curl_ssl_sessionid_unlock<pos:position pos:line="522" pos:column="34"/></name><argument_list pos:line="522" pos:column="34">(<argument><expr><name pos:line="522" pos:column="35">conn<pos:position pos:line="522" pos:column="39"/></name></expr></argument>)<pos:position pos:line="522" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="522" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="523" pos:column="9">failf<pos:position pos:line="523" pos:column="14"/></name><argument_list pos:line="523" pos:column="14">(<argument><expr><name pos:line="523" pos:column="15">data<pos:position pos:line="523" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="523" pos:column="21">"SSL: SSLSetPeerID() failed: OSStatus %d"<pos:position pos:line="523" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="523" pos:column="64">err<pos:position pos:line="523" pos:column="67"/></name></expr></argument>)<pos:position pos:line="523" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="523" pos:column="69"/></expr_stmt>
        <return pos:line="524" pos:column="9">return <expr><name pos:line="524" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="524" pos:column="39"/></name></expr>;<pos:position pos:line="524" pos:column="40"/></return>
      }<pos:position pos:line="525" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="527" pos:column="7">result<pos:position pos:line="527" pos:column="13"/></name> <operator pos:line="527" pos:column="14">=<pos:position pos:line="527" pos:column="15"/></operator> <call><name pos:line="527" pos:column="16">Curl_ssl_addsessionid<pos:position pos:line="527" pos:column="37"/></name><argument_list pos:line="527" pos:column="37">(<argument><expr><name pos:line="527" pos:column="38">conn<pos:position pos:line="527" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="527" pos:column="44">ssl_sessionid<pos:position pos:line="527" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="527" pos:column="59">ssl_sessionid_len<pos:position pos:line="527" pos:column="76"/></name></expr></argument>,
                                     <argument><expr><name pos:line="528" pos:column="38">sockindex<pos:position pos:line="528" pos:column="47"/></name></expr></argument>)<pos:position pos:line="528" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="528" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="529" pos:column="7">Curl_ssl_sessionid_unlock<pos:position pos:line="529" pos:column="32"/></name><argument_list pos:line="529" pos:column="32">(<argument><expr><name pos:line="529" pos:column="33">conn<pos:position pos:line="529" pos:column="37"/></name></expr></argument>)<pos:position pos:line="529" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="529" pos:column="39"/></expr_stmt>
      <if pos:line="530" pos:column="7">if<condition pos:line="530" pos:column="9">(<expr><name pos:line="530" pos:column="10">result<pos:position pos:line="530" pos:column="16"/></name></expr>)<pos:position pos:line="530" pos:column="17"/></condition><then pos:line="530" pos:column="17"> <block pos:line="530" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="531" pos:column="9">failf<pos:position pos:line="531" pos:column="14"/></name><argument_list pos:line="531" pos:column="14">(<argument><expr><name pos:line="531" pos:column="15">data<pos:position pos:line="531" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="531" pos:column="21">"failed to store ssl session"<pos:position pos:line="531" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="531" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="531" pos:column="52"/></expr_stmt>
        <return pos:line="532" pos:column="9">return <expr><name pos:line="532" pos:column="16">result<pos:position pos:line="532" pos:column="22"/></name></expr>;<pos:position pos:line="532" pos:column="23"/></return>
      }<pos:position pos:line="533" pos:column="8"/></block></then></if>
    }<pos:position pos:line="534" pos:column="6"/></block></else></if>
  }<pos:position pos:line="535" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="537" pos:column="3">err<pos:position pos:line="537" pos:column="6"/></name> <operator pos:line="537" pos:column="7">=<pos:position pos:line="537" pos:column="8"/></operator> <call><name pos:line="537" pos:column="9">SSLSetIOFuncs<pos:position pos:line="537" pos:column="22"/></name><argument_list pos:line="537" pos:column="22">(<argument><expr><name><name pos:line="537" pos:column="23">BACKEND<pos:position pos:line="537" pos:column="30"/></name><operator pos:line="537" pos:column="30">-&gt;<pos:position pos:line="537" pos:column="35"/></operator><name pos:line="537" pos:column="32">ssl_ctx<pos:position pos:line="537" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="537" pos:column="41">SocketRead<pos:position pos:line="537" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="537" pos:column="53">SocketWrite<pos:position pos:line="537" pos:column="64"/></name></expr></argument>)<pos:position pos:line="537" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="537" pos:column="66"/></expr_stmt>
  <if pos:line="538" pos:column="3">if<condition pos:line="538" pos:column="5">(<expr><name pos:line="538" pos:column="6">err<pos:position pos:line="538" pos:column="9"/></name> <operator pos:line="538" pos:column="10">!=<pos:position pos:line="538" pos:column="12"/></operator> <name pos:line="538" pos:column="13">noErr<pos:position pos:line="538" pos:column="18"/></name></expr>)<pos:position pos:line="538" pos:column="19"/></condition><then pos:line="538" pos:column="19"> <block pos:line="538" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="539" pos:column="5">failf<pos:position pos:line="539" pos:column="10"/></name><argument_list pos:line="539" pos:column="10">(<argument><expr><name pos:line="539" pos:column="11">data<pos:position pos:line="539" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="539" pos:column="17">"SSL: SSLSetIOFuncs() failed: OSStatus %d"<pos:position pos:line="539" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="539" pos:column="61">err<pos:position pos:line="539" pos:column="64"/></name></expr></argument>)<pos:position pos:line="539" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="539" pos:column="66"/></expr_stmt>
    <return pos:line="540" pos:column="5">return <expr><name pos:line="540" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="540" pos:column="35"/></name></expr>;<pos:position pos:line="540" pos:column="36"/></return>
  }<pos:position pos:line="541" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="543" pos:column="3">/* pass the raw socket into the SSL layers */</comment>
  <comment type="block" pos:line="544" pos:column="3">/* We need to store the FD in a constant memory address, because
   * SSLSetConnection() will not copy that address. I've found that
   * conn-&gt;sock[sockindex] may change on its own. */</comment>
  <expr_stmt><expr><name><name pos:line="547" pos:column="3">BACKEND<pos:position pos:line="547" pos:column="10"/></name><operator pos:line="547" pos:column="10">-&gt;<pos:position pos:line="547" pos:column="15"/></operator><name pos:line="547" pos:column="12">ssl_sockfd<pos:position pos:line="547" pos:column="22"/></name></name> <operator pos:line="547" pos:column="23">=<pos:position pos:line="547" pos:column="24"/></operator> <name pos:line="547" pos:column="25">sockfd<pos:position pos:line="547" pos:column="31"/></name></expr>;<pos:position pos:line="547" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name pos:line="548" pos:column="3">err<pos:position pos:line="548" pos:column="6"/></name> <operator pos:line="548" pos:column="7">=<pos:position pos:line="548" pos:column="8"/></operator> <call><name pos:line="548" pos:column="9">SSLSetConnection<pos:position pos:line="548" pos:column="25"/></name><argument_list pos:line="548" pos:column="25">(<argument><expr><name><name pos:line="548" pos:column="26">BACKEND<pos:position pos:line="548" pos:column="33"/></name><operator pos:line="548" pos:column="33">-&gt;<pos:position pos:line="548" pos:column="38"/></operator><name pos:line="548" pos:column="35">ssl_ctx<pos:position pos:line="548" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="548" pos:column="44">connssl<pos:position pos:line="548" pos:column="51"/></name></expr></argument>)<pos:position pos:line="548" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="548" pos:column="53"/></expr_stmt>
  <if pos:line="549" pos:column="3">if<condition pos:line="549" pos:column="5">(<expr><name pos:line="549" pos:column="6">err<pos:position pos:line="549" pos:column="9"/></name> <operator pos:line="549" pos:column="10">!=<pos:position pos:line="549" pos:column="12"/></operator> <name pos:line="549" pos:column="13">noErr<pos:position pos:line="549" pos:column="18"/></name></expr>)<pos:position pos:line="549" pos:column="19"/></condition><then pos:line="549" pos:column="19"> <block pos:line="549" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="550" pos:column="5">failf<pos:position pos:line="550" pos:column="10"/></name><argument_list pos:line="550" pos:column="10">(<argument><expr><name pos:line="550" pos:column="11">data<pos:position pos:line="550" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="550" pos:column="17">"SSL: SSLSetConnection() failed: %d"<pos:position pos:line="550" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="550" pos:column="55">err<pos:position pos:line="550" pos:column="58"/></name></expr></argument>)<pos:position pos:line="550" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="550" pos:column="60"/></expr_stmt>
    <return pos:line="551" pos:column="5">return <expr><name pos:line="551" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="551" pos:column="35"/></name></expr>;<pos:position pos:line="551" pos:column="36"/></return>
  }<pos:position pos:line="552" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="554" pos:column="3">connssl<pos:position pos:line="554" pos:column="10"/></name><operator pos:line="554" pos:column="10">-&gt;<pos:position pos:line="554" pos:column="15"/></operator><name pos:line="554" pos:column="12">connecting_state<pos:position pos:line="554" pos:column="28"/></name></name> <operator pos:line="554" pos:column="29">=<pos:position pos:line="554" pos:column="30"/></operator> <name pos:line="554" pos:column="31">ssl_connect_2<pos:position pos:line="554" pos:column="44"/></name></expr>;<pos:position pos:line="554" pos:column="45"/></expr_stmt>
  <return pos:line="555" pos:column="3">return <expr><name pos:line="555" pos:column="10">CURLE_OK<pos:position pos:line="555" pos:column="18"/></name></expr>;<pos:position pos:line="555" pos:column="19"/></return>
}<pos:position pos:line="556" pos:column="2"/></block></then></if>

<function><specifier pos:line="558" pos:column="1">static<pos:position pos:line="558" pos:column="7"/></specifier> <type><name pos:line="558" pos:column="8">long<pos:position pos:line="558" pos:column="12"/></name></type> <name pos:line="558" pos:column="13">pem_to_der<pos:position pos:line="558" pos:column="23"/></name><parameter_list pos:line="558" pos:column="23">(<parameter><decl><type><specifier pos:line="558" pos:column="24">const<pos:position pos:line="558" pos:column="29"/></specifier> <name pos:line="558" pos:column="30">char<pos:position pos:line="558" pos:column="34"/></name> <modifier pos:line="558" pos:column="35">*<pos:position pos:line="558" pos:column="36"/></modifier></type><name pos:line="558" pos:column="36">in<pos:position pos:line="558" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="558" pos:column="40">unsigned<pos:position pos:line="558" pos:column="48"/></name> <name pos:line="558" pos:column="49">char<pos:position pos:line="558" pos:column="53"/></name> <modifier pos:line="558" pos:column="54">*<pos:position pos:line="558" pos:column="55"/></modifier><modifier pos:line="558" pos:column="55">*<pos:position pos:line="558" pos:column="56"/></modifier></type><name pos:line="558" pos:column="56">out<pos:position pos:line="558" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="558" pos:column="61">size_t<pos:position pos:line="558" pos:column="67"/></name> <modifier pos:line="558" pos:column="68">*<pos:position pos:line="558" pos:column="69"/></modifier></type><name pos:line="558" pos:column="69">outlen<pos:position pos:line="558" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="558" pos:column="76"/></parameter_list>
<block pos:line="559" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="560" pos:column="3">char<pos:position pos:line="560" pos:column="7"/></name> <modifier pos:line="560" pos:column="8">*<pos:position pos:line="560" pos:column="9"/></modifier></type><name pos:line="560" pos:column="9">sep_start<pos:position pos:line="560" pos:column="18"/></name></decl>, <modifier pos:line="560" pos:column="20">*<pos:position pos:line="560" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="560" pos:column="21">sep_end<pos:position pos:line="560" pos:column="28"/></name></decl>, <modifier pos:line="560" pos:column="30">*<pos:position pos:line="560" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="560" pos:column="31">cert_start<pos:position pos:line="560" pos:column="41"/></name></decl>, <modifier pos:line="560" pos:column="43">*<pos:position pos:line="560" pos:column="44"/></modifier><decl><type ref="prev"/><name pos:line="560" pos:column="44">cert_end<pos:position pos:line="560" pos:column="52"/></name></decl>;<pos:position pos:line="560" pos:column="53"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="561" pos:column="3">size_t<pos:position pos:line="561" pos:column="9"/></name></type> <name pos:line="561" pos:column="10">i<pos:position pos:line="561" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="561" pos:column="13">j<pos:position pos:line="561" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="561" pos:column="16">err<pos:position pos:line="561" pos:column="19"/></name></decl>;<pos:position pos:line="561" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="562" pos:column="3">size_t<pos:position pos:line="562" pos:column="9"/></name></type> <name pos:line="562" pos:column="10">len<pos:position pos:line="562" pos:column="13"/></name></decl>;<pos:position pos:line="562" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="563" pos:column="3">unsigned<pos:position pos:line="563" pos:column="11"/></name> <name pos:line="563" pos:column="12">char<pos:position pos:line="563" pos:column="16"/></name> <modifier pos:line="563" pos:column="17">*<pos:position pos:line="563" pos:column="18"/></modifier></type><name pos:line="563" pos:column="18">b64<pos:position pos:line="563" pos:column="21"/></name></decl>;<pos:position pos:line="563" pos:column="22"/></decl_stmt>

  <comment type="block" pos:line="565" pos:column="3">/* Jump through the separators at the beginning of the certificate. */</comment>
  <expr_stmt><expr><name pos:line="566" pos:column="3">sep_start<pos:position pos:line="566" pos:column="12"/></name> <operator pos:line="566" pos:column="13">=<pos:position pos:line="566" pos:column="14"/></operator> <call><name pos:line="566" pos:column="15">strstr<pos:position pos:line="566" pos:column="21"/></name><argument_list pos:line="566" pos:column="21">(<argument><expr><name pos:line="566" pos:column="22">in<pos:position pos:line="566" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="566" pos:column="26">"-----"<pos:position pos:line="566" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="566" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="566" pos:column="35"/></expr_stmt>
  <if pos:line="567" pos:column="3">if<condition pos:line="567" pos:column="5">(<expr><name pos:line="567" pos:column="6">sep_start<pos:position pos:line="567" pos:column="15"/></name> <operator pos:line="567" pos:column="16">==<pos:position pos:line="567" pos:column="18"/></operator> <name pos:line="567" pos:column="19">NULL<pos:position pos:line="567" pos:column="23"/></name></expr>)<pos:position pos:line="567" pos:column="24"/></condition><then pos:line="567" pos:column="24">
    <block type="pseudo"><return pos:line="568" pos:column="5">return <expr><literal type="number" pos:line="568" pos:column="12">0<pos:position pos:line="568" pos:column="13"/></literal></expr>;<pos:position pos:line="568" pos:column="14"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="569" pos:column="3">cert_start<pos:position pos:line="569" pos:column="13"/></name> <operator pos:line="569" pos:column="14">=<pos:position pos:line="569" pos:column="15"/></operator> <call><name pos:line="569" pos:column="16">strstr<pos:position pos:line="569" pos:column="22"/></name><argument_list pos:line="569" pos:column="22">(<argument><expr><name pos:line="569" pos:column="23">sep_start<pos:position pos:line="569" pos:column="32"/></name> <operator pos:line="569" pos:column="33">+<pos:position pos:line="569" pos:column="34"/></operator> <literal type="number" pos:line="569" pos:column="35">1<pos:position pos:line="569" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="569" pos:column="38">"-----"<pos:position pos:line="569" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="569" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="569" pos:column="47"/></expr_stmt>
  <if pos:line="570" pos:column="3">if<condition pos:line="570" pos:column="5">(<expr><name pos:line="570" pos:column="6">cert_start<pos:position pos:line="570" pos:column="16"/></name> <operator pos:line="570" pos:column="17">==<pos:position pos:line="570" pos:column="19"/></operator> <name pos:line="570" pos:column="20">NULL<pos:position pos:line="570" pos:column="24"/></name></expr>)<pos:position pos:line="570" pos:column="25"/></condition><then pos:line="570" pos:column="25">
    <block type="pseudo"><return pos:line="571" pos:column="5">return <expr><operator pos:line="571" pos:column="12">-<pos:position pos:line="571" pos:column="13"/></operator><literal type="number" pos:line="571" pos:column="13">1<pos:position pos:line="571" pos:column="14"/></literal></expr>;<pos:position pos:line="571" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="573" pos:column="3">cert_start<pos:position pos:line="573" pos:column="13"/></name> <operator pos:line="573" pos:column="14">+=<pos:position pos:line="573" pos:column="16"/></operator> <literal type="number" pos:line="573" pos:column="17">5<pos:position pos:line="573" pos:column="18"/></literal></expr>;<pos:position pos:line="573" pos:column="19"/></expr_stmt>

  <comment type="block" pos:line="575" pos:column="3">/* Find separator after the end of the certificate. */</comment>
  <expr_stmt><expr><name pos:line="576" pos:column="3">cert_end<pos:position pos:line="576" pos:column="11"/></name> <operator pos:line="576" pos:column="12">=<pos:position pos:line="576" pos:column="13"/></operator> <call><name pos:line="576" pos:column="14">strstr<pos:position pos:line="576" pos:column="20"/></name><argument_list pos:line="576" pos:column="20">(<argument><expr><name pos:line="576" pos:column="21">cert_start<pos:position pos:line="576" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="576" pos:column="33">"-----"<pos:position pos:line="576" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="576" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="576" pos:column="42"/></expr_stmt>
  <if pos:line="577" pos:column="3">if<condition pos:line="577" pos:column="5">(<expr><name pos:line="577" pos:column="6">cert_end<pos:position pos:line="577" pos:column="14"/></name> <operator pos:line="577" pos:column="15">==<pos:position pos:line="577" pos:column="17"/></operator> <name pos:line="577" pos:column="18">NULL<pos:position pos:line="577" pos:column="22"/></name></expr>)<pos:position pos:line="577" pos:column="23"/></condition><then pos:line="577" pos:column="23">
    <block type="pseudo"><return pos:line="578" pos:column="5">return <expr><operator pos:line="578" pos:column="12">-<pos:position pos:line="578" pos:column="13"/></operator><literal type="number" pos:line="578" pos:column="13">1<pos:position pos:line="578" pos:column="14"/></literal></expr>;<pos:position pos:line="578" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="580" pos:column="3">sep_end<pos:position pos:line="580" pos:column="10"/></name> <operator pos:line="580" pos:column="11">=<pos:position pos:line="580" pos:column="12"/></operator> <call><name pos:line="580" pos:column="13">strstr<pos:position pos:line="580" pos:column="19"/></name><argument_list pos:line="580" pos:column="19">(<argument><expr><name pos:line="580" pos:column="20">cert_end<pos:position pos:line="580" pos:column="28"/></name> <operator pos:line="580" pos:column="29">+<pos:position pos:line="580" pos:column="30"/></operator> <literal type="number" pos:line="580" pos:column="31">1<pos:position pos:line="580" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="580" pos:column="34">"-----"<pos:position pos:line="580" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="580" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="580" pos:column="43"/></expr_stmt>
  <if pos:line="581" pos:column="3">if<condition pos:line="581" pos:column="5">(<expr><name pos:line="581" pos:column="6">sep_end<pos:position pos:line="581" pos:column="13"/></name> <operator pos:line="581" pos:column="14">==<pos:position pos:line="581" pos:column="16"/></operator> <name pos:line="581" pos:column="17">NULL<pos:position pos:line="581" pos:column="21"/></name></expr>)<pos:position pos:line="581" pos:column="22"/></condition><then pos:line="581" pos:column="22">
    <block type="pseudo"><return pos:line="582" pos:column="5">return <expr><operator pos:line="582" pos:column="12">-<pos:position pos:line="582" pos:column="13"/></operator><literal type="number" pos:line="582" pos:column="13">1<pos:position pos:line="582" pos:column="14"/></literal></expr>;<pos:position pos:line="582" pos:column="15"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="583" pos:column="3">sep_end<pos:position pos:line="583" pos:column="10"/></name> <operator pos:line="583" pos:column="11">+=<pos:position pos:line="583" pos:column="13"/></operator> <literal type="number" pos:line="583" pos:column="14">5<pos:position pos:line="583" pos:column="15"/></literal></expr>;<pos:position pos:line="583" pos:column="16"/></expr_stmt>

  <expr_stmt><expr><name pos:line="585" pos:column="3">len<pos:position pos:line="585" pos:column="6"/></name> <operator pos:line="585" pos:column="7">=<pos:position pos:line="585" pos:column="8"/></operator> <name pos:line="585" pos:column="9">cert_end<pos:position pos:line="585" pos:column="17"/></name> <operator pos:line="585" pos:column="18">-<pos:position pos:line="585" pos:column="19"/></operator> <name pos:line="585" pos:column="20">cert_start<pos:position pos:line="585" pos:column="30"/></name></expr>;<pos:position pos:line="585" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="586" pos:column="3">b64<pos:position pos:line="586" pos:column="6"/></name> <operator pos:line="586" pos:column="7">=<pos:position pos:line="586" pos:column="8"/></operator> <call><name pos:line="586" pos:column="9">malloc<pos:position pos:line="586" pos:column="15"/></name><argument_list pos:line="586" pos:column="15">(<argument><expr><name pos:line="586" pos:column="16">len<pos:position pos:line="586" pos:column="19"/></name> <operator pos:line="586" pos:column="20">+<pos:position pos:line="586" pos:column="21"/></operator> <literal type="number" pos:line="586" pos:column="22">1<pos:position pos:line="586" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="586" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="586" pos:column="25"/></expr_stmt>
  <if pos:line="587" pos:column="3">if<condition pos:line="587" pos:column="5">(<expr><operator pos:line="587" pos:column="6">!<pos:position pos:line="587" pos:column="7"/></operator><name pos:line="587" pos:column="7">b64<pos:position pos:line="587" pos:column="10"/></name></expr>)<pos:position pos:line="587" pos:column="11"/></condition><then pos:line="587" pos:column="11">
    <block type="pseudo"><return pos:line="588" pos:column="5">return <expr><operator pos:line="588" pos:column="12">-<pos:position pos:line="588" pos:column="13"/></operator><literal type="number" pos:line="588" pos:column="13">1<pos:position pos:line="588" pos:column="14"/></literal></expr>;<pos:position pos:line="588" pos:column="15"/></return></block></then></if>

  <comment type="block" pos:line="590" pos:column="3">/* Create base64 string without linefeeds. */</comment>
  <for pos:line="591" pos:column="3">for<control pos:line="591" pos:column="6">(<init><expr><name pos:line="591" pos:column="7">i<pos:position pos:line="591" pos:column="8"/></name> <operator pos:line="591" pos:column="9">=<pos:position pos:line="591" pos:column="10"/></operator> <literal type="number" pos:line="591" pos:column="11">0<pos:position pos:line="591" pos:column="12"/></literal></expr><operator pos:line="591" pos:column="12">,<pos:position pos:line="591" pos:column="13"/></operator> <expr><name pos:line="591" pos:column="14">j<pos:position pos:line="591" pos:column="15"/></name> <operator pos:line="591" pos:column="16">=<pos:position pos:line="591" pos:column="17"/></operator> <literal type="number" pos:line="591" pos:column="18">0<pos:position pos:line="591" pos:column="19"/></literal></expr>;<pos:position pos:line="591" pos:column="20"/></init> <condition><expr><name pos:line="591" pos:column="21">i<pos:position pos:line="591" pos:column="22"/></name> <operator pos:line="591" pos:column="23">&lt;<pos:position pos:line="591" pos:column="27"/></operator> <name pos:line="591" pos:column="25">len<pos:position pos:line="591" pos:column="28"/></name></expr>;<pos:position pos:line="591" pos:column="29"/></condition> <incr><expr><name pos:line="591" pos:column="30">i<pos:position pos:line="591" pos:column="31"/></name><operator pos:line="591" pos:column="31">++<pos:position pos:line="591" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="591" pos:column="34"/></control> <block pos:line="591" pos:column="35">{
    <if pos:line="592" pos:column="5">if<condition pos:line="592" pos:column="7">(<expr><name><name pos:line="592" pos:column="8">cert_start<pos:position pos:line="592" pos:column="18"/></name><index pos:line="592" pos:column="18">[<expr><name pos:line="592" pos:column="19">i<pos:position pos:line="592" pos:column="20"/></name></expr>]<pos:position pos:line="592" pos:column="21"/></index></name> <operator pos:line="592" pos:column="22">!=<pos:position pos:line="592" pos:column="24"/></operator> <literal type="char" pos:line="592" pos:column="25">'\r'<pos:position pos:line="592" pos:column="29"/></literal> <operator pos:line="592" pos:column="30">&amp;&amp;<pos:position pos:line="592" pos:column="40"/></operator> <name><name pos:line="592" pos:column="33">cert_start<pos:position pos:line="592" pos:column="43"/></name><index pos:line="592" pos:column="43">[<expr><name pos:line="592" pos:column="44">i<pos:position pos:line="592" pos:column="45"/></name></expr>]<pos:position pos:line="592" pos:column="46"/></index></name> <operator pos:line="592" pos:column="47">!=<pos:position pos:line="592" pos:column="49"/></operator> <literal type="char" pos:line="592" pos:column="50">'\n'<pos:position pos:line="592" pos:column="54"/></literal></expr>)<pos:position pos:line="592" pos:column="55"/></condition><then pos:line="592" pos:column="55">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="593" pos:column="7">b64<pos:position pos:line="593" pos:column="10"/></name><index pos:line="593" pos:column="10">[<expr><name pos:line="593" pos:column="11">j<pos:position pos:line="593" pos:column="12"/></name><operator pos:line="593" pos:column="12">++<pos:position pos:line="593" pos:column="14"/></operator></expr>]<pos:position pos:line="593" pos:column="15"/></index></name> <operator pos:line="593" pos:column="16">=<pos:position pos:line="593" pos:column="17"/></operator> <name><name pos:line="593" pos:column="18">cert_start<pos:position pos:line="593" pos:column="28"/></name><index pos:line="593" pos:column="28">[<expr><name pos:line="593" pos:column="29">i<pos:position pos:line="593" pos:column="30"/></name></expr>]<pos:position pos:line="593" pos:column="31"/></index></name></expr>;<pos:position pos:line="593" pos:column="32"/></expr_stmt></block></then></if>
  }<pos:position pos:line="594" pos:column="4"/></block></for>
  <expr_stmt><expr><name><name pos:line="595" pos:column="3">b64<pos:position pos:line="595" pos:column="6"/></name><index pos:line="595" pos:column="6">[<expr><name pos:line="595" pos:column="7">j<pos:position pos:line="595" pos:column="8"/></name></expr>]<pos:position pos:line="595" pos:column="9"/></index></name> <operator pos:line="595" pos:column="10">=<pos:position pos:line="595" pos:column="11"/></operator> <literal type="char" pos:line="595" pos:column="12">'\0'<pos:position pos:line="595" pos:column="16"/></literal></expr>;<pos:position pos:line="595" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="597" pos:column="3">err<pos:position pos:line="597" pos:column="6"/></name> <operator pos:line="597" pos:column="7">=<pos:position pos:line="597" pos:column="8"/></operator> <call><name pos:line="597" pos:column="9">Curl_base64_decode<pos:position pos:line="597" pos:column="27"/></name><argument_list pos:line="597" pos:column="27">(<argument><expr><operator pos:line="597" pos:column="28">(<pos:position pos:line="597" pos:column="29"/></operator><specifier pos:line="597" pos:column="29">const<pos:position pos:line="597" pos:column="34"/></specifier> <name pos:line="597" pos:column="35">char<pos:position pos:line="597" pos:column="39"/></name> <operator pos:line="597" pos:column="40">*<pos:position pos:line="597" pos:column="41"/></operator><operator pos:line="597" pos:column="41">)<pos:position pos:line="597" pos:column="42"/></operator><name pos:line="597" pos:column="42">b64<pos:position pos:line="597" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="597" pos:column="47">out<pos:position pos:line="597" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="597" pos:column="52">outlen<pos:position pos:line="597" pos:column="58"/></name></expr></argument>)<pos:position pos:line="597" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="597" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="598" pos:column="3">free<pos:position pos:line="598" pos:column="7"/></name><argument_list pos:line="598" pos:column="7">(<argument><expr><name pos:line="598" pos:column="8">b64<pos:position pos:line="598" pos:column="11"/></name></expr></argument>)<pos:position pos:line="598" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="598" pos:column="13"/></expr_stmt>
  <if pos:line="599" pos:column="3">if<condition pos:line="599" pos:column="5">(<expr><name pos:line="599" pos:column="6">err<pos:position pos:line="599" pos:column="9"/></name></expr>)<pos:position pos:line="599" pos:column="10"/></condition><then pos:line="599" pos:column="10"> <block pos:line="599" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="600" pos:column="5">free<pos:position pos:line="600" pos:column="9"/></name><argument_list pos:line="600" pos:column="9">(<argument><expr><operator pos:line="600" pos:column="10">*<pos:position pos:line="600" pos:column="11"/></operator><name pos:line="600" pos:column="11">out<pos:position pos:line="600" pos:column="14"/></name></expr></argument>)<pos:position pos:line="600" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="600" pos:column="16"/></expr_stmt>
    <return pos:line="601" pos:column="5">return <expr><operator pos:line="601" pos:column="12">-<pos:position pos:line="601" pos:column="13"/></operator><literal type="number" pos:line="601" pos:column="13">1<pos:position pos:line="601" pos:column="14"/></literal></expr>;<pos:position pos:line="601" pos:column="15"/></return>
  }<pos:position pos:line="602" pos:column="4"/></block></then></if>

  <return pos:line="604" pos:column="3">return <expr><name pos:line="604" pos:column="10">sep_end<pos:position pos:line="604" pos:column="17"/></name> <operator pos:line="604" pos:column="18">-<pos:position pos:line="604" pos:column="19"/></operator> <name pos:line="604" pos:column="20">in<pos:position pos:line="604" pos:column="22"/></name></expr>;<pos:position pos:line="604" pos:column="23"/></return>
}<pos:position pos:line="605" pos:column="2"/></block></function>

<function><specifier pos:line="607" pos:column="1">static<pos:position pos:line="607" pos:column="7"/></specifier> <type><name pos:line="607" pos:column="8">int<pos:position pos:line="607" pos:column="11"/></name></type> <name pos:line="607" pos:column="12">read_cert<pos:position pos:line="607" pos:column="21"/></name><parameter_list pos:line="607" pos:column="21">(<parameter><decl><type><specifier pos:line="607" pos:column="22">const<pos:position pos:line="607" pos:column="27"/></specifier> <name pos:line="607" pos:column="28">char<pos:position pos:line="607" pos:column="32"/></name> <modifier pos:line="607" pos:column="33">*<pos:position pos:line="607" pos:column="34"/></modifier></type><name pos:line="607" pos:column="34">file<pos:position pos:line="607" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="607" pos:column="40">unsigned<pos:position pos:line="607" pos:column="48"/></name> <name pos:line="607" pos:column="49">char<pos:position pos:line="607" pos:column="53"/></name> <modifier pos:line="607" pos:column="54">*<pos:position pos:line="607" pos:column="55"/></modifier><modifier pos:line="607" pos:column="55">*<pos:position pos:line="607" pos:column="56"/></modifier></type><name pos:line="607" pos:column="56">out<pos:position pos:line="607" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="607" pos:column="61">size_t<pos:position pos:line="607" pos:column="67"/></name> <modifier pos:line="607" pos:column="68">*<pos:position pos:line="607" pos:column="69"/></modifier></type><name pos:line="607" pos:column="69">outlen<pos:position pos:line="607" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="607" pos:column="76"/></parameter_list>
<block pos:line="608" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="609" pos:column="3">int<pos:position pos:line="609" pos:column="6"/></name></type> <name pos:line="609" pos:column="7">fd<pos:position pos:line="609" pos:column="9"/></name></decl>;<pos:position pos:line="609" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="610" pos:column="3">ssize_t<pos:position pos:line="610" pos:column="10"/></name></type> <name pos:line="610" pos:column="11">n<pos:position pos:line="610" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="610" pos:column="14">len<pos:position pos:line="610" pos:column="17"/></name> <init pos:line="610" pos:column="18">= <expr><literal type="number" pos:line="610" pos:column="20">0<pos:position pos:line="610" pos:column="21"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="610" pos:column="23">cap<pos:position pos:line="610" pos:column="26"/></name> <init pos:line="610" pos:column="27">= <expr><literal type="number" pos:line="610" pos:column="29">512<pos:position pos:line="610" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="610" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="611" pos:column="3">unsigned<pos:position pos:line="611" pos:column="11"/></name> <name pos:line="611" pos:column="12">char<pos:position pos:line="611" pos:column="16"/></name></type> <name><name pos:line="611" pos:column="17">buf<pos:position pos:line="611" pos:column="20"/></name><index pos:line="611" pos:column="20">[<expr><literal type="number" pos:line="611" pos:column="21">512<pos:position pos:line="611" pos:column="24"/></literal></expr>]<pos:position pos:line="611" pos:column="25"/></index></name></decl>, <modifier pos:line="611" pos:column="27">*<pos:position pos:line="611" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="611" pos:column="28">data<pos:position pos:line="611" pos:column="32"/></name></decl>;<pos:position pos:line="611" pos:column="33"/></decl_stmt>

  <expr_stmt><expr><name pos:line="613" pos:column="3">fd<pos:position pos:line="613" pos:column="5"/></name> <operator pos:line="613" pos:column="6">=<pos:position pos:line="613" pos:column="7"/></operator> <call><name pos:line="613" pos:column="8">open<pos:position pos:line="613" pos:column="12"/></name><argument_list pos:line="613" pos:column="12">(<argument><expr><name pos:line="613" pos:column="13">file<pos:position pos:line="613" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="613" pos:column="19">0<pos:position pos:line="613" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="613" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="613" pos:column="22"/></expr_stmt>
  <if pos:line="614" pos:column="3">if<condition pos:line="614" pos:column="5">(<expr><name pos:line="614" pos:column="6">fd<pos:position pos:line="614" pos:column="8"/></name> <operator pos:line="614" pos:column="9">&lt;<pos:position pos:line="614" pos:column="13"/></operator> <literal type="number" pos:line="614" pos:column="11">0<pos:position pos:line="614" pos:column="12"/></literal></expr>)<pos:position pos:line="614" pos:column="13"/></condition><then pos:line="614" pos:column="13">
    <block type="pseudo"><return pos:line="615" pos:column="5">return <expr><operator pos:line="615" pos:column="12">-<pos:position pos:line="615" pos:column="13"/></operator><literal type="number" pos:line="615" pos:column="13">1<pos:position pos:line="615" pos:column="14"/></literal></expr>;<pos:position pos:line="615" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="617" pos:column="3">data<pos:position pos:line="617" pos:column="7"/></name> <operator pos:line="617" pos:column="8">=<pos:position pos:line="617" pos:column="9"/></operator> <call><name pos:line="617" pos:column="10">malloc<pos:position pos:line="617" pos:column="16"/></name><argument_list pos:line="617" pos:column="16">(<argument><expr><name pos:line="617" pos:column="17">cap<pos:position pos:line="617" pos:column="20"/></name></expr></argument>)<pos:position pos:line="617" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="617" pos:column="22"/></expr_stmt>
  <if pos:line="618" pos:column="3">if<condition pos:line="618" pos:column="5">(<expr><operator pos:line="618" pos:column="6">!<pos:position pos:line="618" pos:column="7"/></operator><name pos:line="618" pos:column="7">data<pos:position pos:line="618" pos:column="11"/></name></expr>)<pos:position pos:line="618" pos:column="12"/></condition><then pos:line="618" pos:column="12"> <block pos:line="618" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="619" pos:column="5">close<pos:position pos:line="619" pos:column="10"/></name><argument_list pos:line="619" pos:column="10">(<argument><expr><name pos:line="619" pos:column="11">fd<pos:position pos:line="619" pos:column="13"/></name></expr></argument>)<pos:position pos:line="619" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="619" pos:column="15"/></expr_stmt>
    <return pos:line="620" pos:column="5">return <expr><operator pos:line="620" pos:column="12">-<pos:position pos:line="620" pos:column="13"/></operator><literal type="number" pos:line="620" pos:column="13">1<pos:position pos:line="620" pos:column="14"/></literal></expr>;<pos:position pos:line="620" pos:column="15"/></return>
  }<pos:position pos:line="621" pos:column="4"/></block></then></if>

  <for pos:line="623" pos:column="3">for<control pos:line="623" pos:column="6">(<init pos:line="623" pos:column="7">;<pos:position pos:line="623" pos:column="8"/></init><condition pos:line="623" pos:column="8">;<pos:position pos:line="623" pos:column="9"/></condition><incr/>)<pos:position pos:line="623" pos:column="10"/></control> <block pos:line="623" pos:column="11">{
    <expr_stmt><expr><name pos:line="624" pos:column="5">n<pos:position pos:line="624" pos:column="6"/></name> <operator pos:line="624" pos:column="7">=<pos:position pos:line="624" pos:column="8"/></operator> <call><name pos:line="624" pos:column="9">read<pos:position pos:line="624" pos:column="13"/></name><argument_list pos:line="624" pos:column="13">(<argument><expr><name pos:line="624" pos:column="14">fd<pos:position pos:line="624" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="624" pos:column="18">buf<pos:position pos:line="624" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="624" pos:column="23">sizeof<argument_list pos:line="624" pos:column="29">(<argument><expr><name pos:line="624" pos:column="30">buf<pos:position pos:line="624" pos:column="33"/></name></expr></argument>)<pos:position pos:line="624" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="624" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="624" pos:column="36"/></expr_stmt>
    <if pos:line="625" pos:column="5">if<condition pos:line="625" pos:column="7">(<expr><name pos:line="625" pos:column="8">n<pos:position pos:line="625" pos:column="9"/></name> <operator pos:line="625" pos:column="10">&lt;<pos:position pos:line="625" pos:column="14"/></operator> <literal type="number" pos:line="625" pos:column="12">0<pos:position pos:line="625" pos:column="13"/></literal></expr>)<pos:position pos:line="625" pos:column="14"/></condition><then pos:line="625" pos:column="14"> <block pos:line="625" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="626" pos:column="7">close<pos:position pos:line="626" pos:column="12"/></name><argument_list pos:line="626" pos:column="12">(<argument><expr><name pos:line="626" pos:column="13">fd<pos:position pos:line="626" pos:column="15"/></name></expr></argument>)<pos:position pos:line="626" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="626" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="627" pos:column="7">free<pos:position pos:line="627" pos:column="11"/></name><argument_list pos:line="627" pos:column="11">(<argument><expr><name pos:line="627" pos:column="12">data<pos:position pos:line="627" pos:column="16"/></name></expr></argument>)<pos:position pos:line="627" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="627" pos:column="18"/></expr_stmt>
      <return pos:line="628" pos:column="7">return <expr><operator pos:line="628" pos:column="14">-<pos:position pos:line="628" pos:column="15"/></operator><literal type="number" pos:line="628" pos:column="15">1<pos:position pos:line="628" pos:column="16"/></literal></expr>;<pos:position pos:line="628" pos:column="17"/></return>
    }<pos:position pos:line="629" pos:column="6"/></block></then>
    <elseif pos:line="630" pos:column="5">else <if pos:line="630" pos:column="10">if<condition pos:line="630" pos:column="12">(<expr><name pos:line="630" pos:column="13">n<pos:position pos:line="630" pos:column="14"/></name> <operator pos:line="630" pos:column="15">==<pos:position pos:line="630" pos:column="17"/></operator> <literal type="number" pos:line="630" pos:column="18">0<pos:position pos:line="630" pos:column="19"/></literal></expr>)<pos:position pos:line="630" pos:column="20"/></condition><then pos:line="630" pos:column="20"> <block pos:line="630" pos:column="21">{
      <expr_stmt><expr><call><name pos:line="631" pos:column="7">close<pos:position pos:line="631" pos:column="12"/></name><argument_list pos:line="631" pos:column="12">(<argument><expr><name pos:line="631" pos:column="13">fd<pos:position pos:line="631" pos:column="15"/></name></expr></argument>)<pos:position pos:line="631" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="631" pos:column="17"/></expr_stmt>
      <break pos:line="632" pos:column="7">break;<pos:position pos:line="632" pos:column="13"/></break>
    }<pos:position pos:line="633" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="635" pos:column="5">if<condition pos:line="635" pos:column="7">(<expr><name pos:line="635" pos:column="8">len<pos:position pos:line="635" pos:column="11"/></name> <operator pos:line="635" pos:column="12">+<pos:position pos:line="635" pos:column="13"/></operator> <name pos:line="635" pos:column="14">n<pos:position pos:line="635" pos:column="15"/></name> <operator pos:line="635" pos:column="16">&gt;=<pos:position pos:line="635" pos:column="21"/></operator> <name pos:line="635" pos:column="19">cap<pos:position pos:line="635" pos:column="22"/></name></expr>)<pos:position pos:line="635" pos:column="23"/></condition><then pos:line="635" pos:column="23"> <block pos:line="635" pos:column="24">{
      <expr_stmt><expr><name pos:line="636" pos:column="7">cap<pos:position pos:line="636" pos:column="10"/></name> <operator pos:line="636" pos:column="11">*=<pos:position pos:line="636" pos:column="13"/></operator> <literal type="number" pos:line="636" pos:column="14">2<pos:position pos:line="636" pos:column="15"/></literal></expr>;<pos:position pos:line="636" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="637" pos:column="7">data<pos:position pos:line="637" pos:column="11"/></name> <operator pos:line="637" pos:column="12">=<pos:position pos:line="637" pos:column="13"/></operator> <call><name pos:line="637" pos:column="14">realloc<pos:position pos:line="637" pos:column="21"/></name><argument_list pos:line="637" pos:column="21">(<argument><expr><name pos:line="637" pos:column="22">data<pos:position pos:line="637" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="637" pos:column="28">cap<pos:position pos:line="637" pos:column="31"/></name></expr></argument>)<pos:position pos:line="637" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="637" pos:column="33"/></expr_stmt>
      <if pos:line="638" pos:column="7">if<condition pos:line="638" pos:column="9">(<expr><operator pos:line="638" pos:column="10">!<pos:position pos:line="638" pos:column="11"/></operator><name pos:line="638" pos:column="11">data<pos:position pos:line="638" pos:column="15"/></name></expr>)<pos:position pos:line="638" pos:column="16"/></condition><then pos:line="638" pos:column="16"> <block pos:line="638" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="639" pos:column="9">close<pos:position pos:line="639" pos:column="14"/></name><argument_list pos:line="639" pos:column="14">(<argument><expr><name pos:line="639" pos:column="15">fd<pos:position pos:line="639" pos:column="17"/></name></expr></argument>)<pos:position pos:line="639" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="639" pos:column="19"/></expr_stmt>
        <return pos:line="640" pos:column="9">return <expr><operator pos:line="640" pos:column="16">-<pos:position pos:line="640" pos:column="17"/></operator><literal type="number" pos:line="640" pos:column="17">1<pos:position pos:line="640" pos:column="18"/></literal></expr>;<pos:position pos:line="640" pos:column="19"/></return>
      }<pos:position pos:line="641" pos:column="8"/></block></then></if>
    }<pos:position pos:line="642" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="644" pos:column="5">memcpy<pos:position pos:line="644" pos:column="11"/></name><argument_list pos:line="644" pos:column="11">(<argument><expr><name pos:line="644" pos:column="12">data<pos:position pos:line="644" pos:column="16"/></name> <operator pos:line="644" pos:column="17">+<pos:position pos:line="644" pos:column="18"/></operator> <name pos:line="644" pos:column="19">len<pos:position pos:line="644" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="644" pos:column="24">buf<pos:position pos:line="644" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="644" pos:column="29">n<pos:position pos:line="644" pos:column="30"/></name></expr></argument>)<pos:position pos:line="644" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="644" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="645" pos:column="5">len<pos:position pos:line="645" pos:column="8"/></name> <operator pos:line="645" pos:column="9">+=<pos:position pos:line="645" pos:column="11"/></operator> <name pos:line="645" pos:column="12">n<pos:position pos:line="645" pos:column="13"/></name></expr>;<pos:position pos:line="645" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="646" pos:column="4"/></block></for>
  <expr_stmt><expr><name><name pos:line="647" pos:column="3">data<pos:position pos:line="647" pos:column="7"/></name><index pos:line="647" pos:column="7">[<expr><name pos:line="647" pos:column="8">len<pos:position pos:line="647" pos:column="11"/></name></expr>]<pos:position pos:line="647" pos:column="12"/></index></name> <operator pos:line="647" pos:column="13">=<pos:position pos:line="647" pos:column="14"/></operator> <literal type="char" pos:line="647" pos:column="15">'\0'<pos:position pos:line="647" pos:column="19"/></literal></expr>;<pos:position pos:line="647" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="649" pos:column="3">*<pos:position pos:line="649" pos:column="4"/></operator><name pos:line="649" pos:column="4">out<pos:position pos:line="649" pos:column="7"/></name> <operator pos:line="649" pos:column="8">=<pos:position pos:line="649" pos:column="9"/></operator> <name pos:line="649" pos:column="10">data<pos:position pos:line="649" pos:column="14"/></name></expr>;<pos:position pos:line="649" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="650" pos:column="3">*<pos:position pos:line="650" pos:column="4"/></operator><name pos:line="650" pos:column="4">outlen<pos:position pos:line="650" pos:column="10"/></name> <operator pos:line="650" pos:column="11">=<pos:position pos:line="650" pos:column="12"/></operator> <name pos:line="650" pos:column="13">len<pos:position pos:line="650" pos:column="16"/></name></expr>;<pos:position pos:line="650" pos:column="17"/></expr_stmt>

  <return pos:line="652" pos:column="3">return <expr><literal type="number" pos:line="652" pos:column="10">0<pos:position pos:line="652" pos:column="11"/></literal></expr>;<pos:position pos:line="652" pos:column="12"/></return>
}<pos:position pos:line="653" pos:column="2"/></block></function>

<function><specifier pos:line="655" pos:column="1">static<pos:position pos:line="655" pos:column="7"/></specifier> <type><name pos:line="655" pos:column="8">int<pos:position pos:line="655" pos:column="11"/></name></type> <name pos:line="655" pos:column="12">sslerr_to_curlerr<pos:position pos:line="655" pos:column="29"/></name><parameter_list pos:line="655" pos:column="29">(<parameter><decl><type><name><name pos:line="655" pos:column="30">struct<pos:position pos:line="655" pos:column="36"/></name> <name pos:line="655" pos:column="37">Curl_easy<pos:position pos:line="655" pos:column="46"/></name></name> <modifier pos:line="655" pos:column="47">*<pos:position pos:line="655" pos:column="48"/></modifier></type><name pos:line="655" pos:column="48">data<pos:position pos:line="655" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="655" pos:column="54">int<pos:position pos:line="655" pos:column="57"/></name></type> <name pos:line="655" pos:column="58">err<pos:position pos:line="655" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="655" pos:column="62"/></parameter_list>
<block pos:line="656" pos:column="1">{
  <switch pos:line="657" pos:column="3">switch<condition pos:line="657" pos:column="9">(<expr><name pos:line="657" pos:column="10">err<pos:position pos:line="657" pos:column="13"/></name></expr>)<pos:position pos:line="657" pos:column="14"/></condition> <block pos:line="657" pos:column="15">{
    <case pos:line="658" pos:column="5">case <expr><name pos:line="658" pos:column="10">errSSLXCertChainInvalid<pos:position pos:line="658" pos:column="33"/></name></expr>:<pos:position pos:line="658" pos:column="34"/></case>
      <expr_stmt><expr><call><name pos:line="659" pos:column="7">failf<pos:position pos:line="659" pos:column="12"/></name><argument_list pos:line="659" pos:column="12">(<argument><expr><name pos:line="659" pos:column="13">data<pos:position pos:line="659" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="659" pos:column="19">"SSL certificate problem: Invalid certificate chain"<pos:position pos:line="659" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="659" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="659" pos:column="73"/></expr_stmt>
      <return pos:line="660" pos:column="7">return <expr><name pos:line="660" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="660" pos:column="30"/></name></expr>;<pos:position pos:line="660" pos:column="31"/></return>
    <case pos:line="661" pos:column="5">case <expr><name pos:line="661" pos:column="10">errSSLUnknownRootCert<pos:position pos:line="661" pos:column="31"/></name></expr>:<pos:position pos:line="661" pos:column="32"/></case>
      <expr_stmt><expr><call><name pos:line="662" pos:column="7">failf<pos:position pos:line="662" pos:column="12"/></name><argument_list pos:line="662" pos:column="12">(<argument><expr><name pos:line="662" pos:column="13">data<pos:position pos:line="662" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="662" pos:column="19">"SSL certificate problem: Untrusted root certificate"<pos:position pos:line="662" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="662" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="662" pos:column="74"/></expr_stmt>
      <return pos:line="663" pos:column="7">return <expr><name pos:line="663" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="663" pos:column="30"/></name></expr>;<pos:position pos:line="663" pos:column="31"/></return>
    <case pos:line="664" pos:column="5">case <expr><name pos:line="664" pos:column="10">errSSLNoRootCert<pos:position pos:line="664" pos:column="26"/></name></expr>:<pos:position pos:line="664" pos:column="27"/></case>
      <expr_stmt><expr><call><name pos:line="665" pos:column="7">failf<pos:position pos:line="665" pos:column="12"/></name><argument_list pos:line="665" pos:column="12">(<argument><expr><name pos:line="665" pos:column="13">data<pos:position pos:line="665" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="665" pos:column="19">"SSL certificate problem: No root certificate"<pos:position pos:line="665" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="665" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="665" pos:column="67"/></expr_stmt>
      <return pos:line="666" pos:column="7">return <expr><name pos:line="666" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="666" pos:column="30"/></name></expr>;<pos:position pos:line="666" pos:column="31"/></return>
    <case pos:line="667" pos:column="5">case <expr><name pos:line="667" pos:column="10">errSSLCertExpired<pos:position pos:line="667" pos:column="27"/></name></expr>:<pos:position pos:line="667" pos:column="28"/></case>
      <expr_stmt><expr><call><name pos:line="668" pos:column="7">failf<pos:position pos:line="668" pos:column="12"/></name><argument_list pos:line="668" pos:column="12">(<argument><expr><name pos:line="668" pos:column="13">data<pos:position pos:line="668" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="668" pos:column="19">"SSL certificate problem: Certificate chain had an "<pos:position pos:line="668" pos:column="71"/></literal>
            <literal type="string" pos:line="669" pos:column="13">"expired certificate"<pos:position pos:line="669" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="669" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="669" pos:column="36"/></expr_stmt>
      <return pos:line="670" pos:column="7">return <expr><name pos:line="670" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="670" pos:column="30"/></name></expr>;<pos:position pos:line="670" pos:column="31"/></return>
    <case pos:line="671" pos:column="5">case <expr><name pos:line="671" pos:column="10">errSSLBadCert<pos:position pos:line="671" pos:column="23"/></name></expr>:<pos:position pos:line="671" pos:column="24"/></case>
      <expr_stmt><expr><call><name pos:line="672" pos:column="7">failf<pos:position pos:line="672" pos:column="12"/></name><argument_list pos:line="672" pos:column="12">(<argument><expr><name pos:line="672" pos:column="13">data<pos:position pos:line="672" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="672" pos:column="19">"SSL certificate problem: Couldn't understand the server "<pos:position pos:line="672" pos:column="77"/></literal>
            <literal type="string" pos:line="673" pos:column="13">"certificate format"<pos:position pos:line="673" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="673" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="673" pos:column="35"/></expr_stmt>
      <return pos:line="674" pos:column="7">return <expr><name pos:line="674" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="674" pos:column="37"/></name></expr>;<pos:position pos:line="674" pos:column="38"/></return>
    <case pos:line="675" pos:column="5">case <expr><name pos:line="675" pos:column="10">errSSLHostNameMismatch<pos:position pos:line="675" pos:column="32"/></name></expr>:<pos:position pos:line="675" pos:column="33"/></case>
      <expr_stmt><expr><call><name pos:line="676" pos:column="7">failf<pos:position pos:line="676" pos:column="12"/></name><argument_list pos:line="676" pos:column="12">(<argument><expr><name pos:line="676" pos:column="13">data<pos:position pos:line="676" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="676" pos:column="19">"SSL certificate peer hostname mismatch"<pos:position pos:line="676" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="676" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="676" pos:column="61"/></expr_stmt>
      <return pos:line="677" pos:column="7">return <expr><name pos:line="677" pos:column="14">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="677" pos:column="44"/></name></expr>;<pos:position pos:line="677" pos:column="45"/></return>
    <default pos:line="678" pos:column="5">default:<pos:position pos:line="678" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="679" pos:column="7">failf<pos:position pos:line="679" pos:column="12"/></name><argument_list pos:line="679" pos:column="12">(<argument><expr><name pos:line="679" pos:column="13">data<pos:position pos:line="679" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="679" pos:column="19">"SSL unexpected certificate error %d"<pos:position pos:line="679" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="679" pos:column="58">err<pos:position pos:line="679" pos:column="61"/></name></expr></argument>)<pos:position pos:line="679" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="679" pos:column="63"/></expr_stmt>
      <return pos:line="680" pos:column="7">return <expr><name pos:line="680" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="680" pos:column="30"/></name></expr>;<pos:position pos:line="680" pos:column="31"/></return>
  }<pos:position pos:line="681" pos:column="4"/></block></switch>
}<pos:position pos:line="682" pos:column="2"/></block></function>

<function><specifier pos:line="684" pos:column="1">static<pos:position pos:line="684" pos:column="7"/></specifier> <type><name pos:line="684" pos:column="8">int<pos:position pos:line="684" pos:column="11"/></name></type> <name pos:line="684" pos:column="12">append_cert_to_array<pos:position pos:line="684" pos:column="32"/></name><parameter_list pos:line="684" pos:column="32">(<parameter><decl><type><name><name pos:line="684" pos:column="33">struct<pos:position pos:line="684" pos:column="39"/></name> <name pos:line="684" pos:column="40">Curl_easy<pos:position pos:line="684" pos:column="49"/></name></name> <modifier pos:line="684" pos:column="50">*<pos:position pos:line="684" pos:column="51"/></modifier></type><name pos:line="684" pos:column="51">data<pos:position pos:line="684" pos:column="55"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="685" pos:column="33">unsigned<pos:position pos:line="685" pos:column="41"/></name> <name pos:line="685" pos:column="42">char<pos:position pos:line="685" pos:column="46"/></name> <modifier pos:line="685" pos:column="47">*<pos:position pos:line="685" pos:column="48"/></modifier></type><name pos:line="685" pos:column="48">buf<pos:position pos:line="685" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="685" pos:column="53">size_t<pos:position pos:line="685" pos:column="59"/></name></type> <name pos:line="685" pos:column="60">buflen<pos:position pos:line="685" pos:column="66"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="686" pos:column="33">CFMutableArrayRef<pos:position pos:line="686" pos:column="50"/></name></type> <name pos:line="686" pos:column="51">array<pos:position pos:line="686" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="686" pos:column="57"/></parameter_list>
<block pos:line="687" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="688" pos:column="5">CFDataRef<pos:position pos:line="688" pos:column="14"/></name></type> <name pos:line="688" pos:column="15">certdata<pos:position pos:line="688" pos:column="23"/></name> <init pos:line="688" pos:column="24">= <expr><call><name pos:line="688" pos:column="26">CFDataCreate<pos:position pos:line="688" pos:column="38"/></name><argument_list pos:line="688" pos:column="38">(<argument><expr><name pos:line="688" pos:column="39">kCFAllocatorDefault<pos:position pos:line="688" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="688" pos:column="60">buf<pos:position pos:line="688" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="688" pos:column="65">buflen<pos:position pos:line="688" pos:column="71"/></name></expr></argument>)<pos:position pos:line="688" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="688" pos:column="73"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="689" pos:column="5">char<pos:position pos:line="689" pos:column="9"/></name> <modifier pos:line="689" pos:column="10">*<pos:position pos:line="689" pos:column="11"/></modifier></type><name pos:line="689" pos:column="11">certp<pos:position pos:line="689" pos:column="16"/></name></decl>;<pos:position pos:line="689" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="690" pos:column="5">CURLcode<pos:position pos:line="690" pos:column="13"/></name></type> <name pos:line="690" pos:column="14">result<pos:position pos:line="690" pos:column="20"/></name></decl>;<pos:position pos:line="690" pos:column="21"/></decl_stmt>
    <if pos:line="691" pos:column="5">if<condition pos:line="691" pos:column="7">(<expr><operator pos:line="691" pos:column="8">!<pos:position pos:line="691" pos:column="9"/></operator><name pos:line="691" pos:column="9">certdata<pos:position pos:line="691" pos:column="17"/></name></expr>)<pos:position pos:line="691" pos:column="18"/></condition><then pos:line="691" pos:column="18"> <block pos:line="691" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="692" pos:column="7">failf<pos:position pos:line="692" pos:column="12"/></name><argument_list pos:line="692" pos:column="12">(<argument><expr><name pos:line="692" pos:column="13">data<pos:position pos:line="692" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="692" pos:column="19">"SSL: failed to allocate array for CA certificate"<pos:position pos:line="692" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="692" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="692" pos:column="71"/></expr_stmt>
      <return pos:line="693" pos:column="7">return <expr><name pos:line="693" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="693" pos:column="33"/></name></expr>;<pos:position pos:line="693" pos:column="34"/></return>
    }<pos:position pos:line="694" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="696" pos:column="5">SecCertificateRef<pos:position pos:line="696" pos:column="22"/></name></type> <name pos:line="696" pos:column="23">cacert<pos:position pos:line="696" pos:column="29"/></name> <init pos:line="696" pos:column="30">=
      <expr><call><name pos:line="697" pos:column="7">SecCertificateCreateWithData<pos:position pos:line="697" pos:column="35"/></name><argument_list pos:line="697" pos:column="35">(<argument><expr><name pos:line="697" pos:column="36">kCFAllocatorDefault<pos:position pos:line="697" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="697" pos:column="57">certdata<pos:position pos:line="697" pos:column="65"/></name></expr></argument>)<pos:position pos:line="697" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="697" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="698" pos:column="5">CFRelease<pos:position pos:line="698" pos:column="14"/></name><argument_list pos:line="698" pos:column="14">(<argument><expr><name pos:line="698" pos:column="15">certdata<pos:position pos:line="698" pos:column="23"/></name></expr></argument>)<pos:position pos:line="698" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="698" pos:column="25"/></expr_stmt>
    <if pos:line="699" pos:column="5">if<condition pos:line="699" pos:column="7">(<expr><operator pos:line="699" pos:column="8">!<pos:position pos:line="699" pos:column="9"/></operator><name pos:line="699" pos:column="9">cacert<pos:position pos:line="699" pos:column="15"/></name></expr>)<pos:position pos:line="699" pos:column="16"/></condition><then pos:line="699" pos:column="16"> <block pos:line="699" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="700" pos:column="7">failf<pos:position pos:line="700" pos:column="12"/></name><argument_list pos:line="700" pos:column="12">(<argument><expr><name pos:line="700" pos:column="13">data<pos:position pos:line="700" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="700" pos:column="19">"SSL: failed to create SecCertificate from CA certificate"<pos:position pos:line="700" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="700" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="700" pos:column="79"/></expr_stmt>
      <return pos:line="701" pos:column="7">return <expr><name pos:line="701" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="701" pos:column="30"/></name></expr>;<pos:position pos:line="701" pos:column="31"/></return>
    }<pos:position pos:line="702" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="704" pos:column="5">/* Check if cacert is valid. */</comment>
    <expr_stmt><expr><name pos:line="705" pos:column="5">result<pos:position pos:line="705" pos:column="11"/></name> <operator pos:line="705" pos:column="12">=<pos:position pos:line="705" pos:column="13"/></operator> <call><name pos:line="705" pos:column="14">CopyCertSubject<pos:position pos:line="705" pos:column="29"/></name><argument_list pos:line="705" pos:column="29">(<argument><expr><name pos:line="705" pos:column="30">data<pos:position pos:line="705" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="705" pos:column="36">cacert<pos:position pos:line="705" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="705" pos:column="44">&amp;<pos:position pos:line="705" pos:column="49"/></operator><name pos:line="705" pos:column="45">certp<pos:position pos:line="705" pos:column="50"/></name></expr></argument>)<pos:position pos:line="705" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="705" pos:column="52"/></expr_stmt>
    <if pos:line="706" pos:column="5">if<condition pos:line="706" pos:column="7">(<expr><name pos:line="706" pos:column="8">result<pos:position pos:line="706" pos:column="14"/></name></expr>)<pos:position pos:line="706" pos:column="15"/></condition><then pos:line="706" pos:column="15">
      <block type="pseudo"><return pos:line="707" pos:column="7">return <expr><name pos:line="707" pos:column="14">result<pos:position pos:line="707" pos:column="20"/></name></expr>;<pos:position pos:line="707" pos:column="21"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="708" pos:column="5">free<pos:position pos:line="708" pos:column="9"/></name><argument_list pos:line="708" pos:column="9">(<argument><expr><name pos:line="708" pos:column="10">certp<pos:position pos:line="708" pos:column="15"/></name></expr></argument>)<pos:position pos:line="708" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="708" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="710" pos:column="5">CFArrayAppendValue<pos:position pos:line="710" pos:column="23"/></name><argument_list pos:line="710" pos:column="23">(<argument><expr><name pos:line="710" pos:column="24">array<pos:position pos:line="710" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="710" pos:column="31">cacert<pos:position pos:line="710" pos:column="37"/></name></expr></argument>)<pos:position pos:line="710" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="710" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="711" pos:column="5">CFRelease<pos:position pos:line="711" pos:column="14"/></name><argument_list pos:line="711" pos:column="14">(<argument><expr><name pos:line="711" pos:column="15">cacert<pos:position pos:line="711" pos:column="21"/></name></expr></argument>)<pos:position pos:line="711" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="711" pos:column="23"/></expr_stmt>

    <return pos:line="713" pos:column="5">return <expr><name pos:line="713" pos:column="12">CURLE_OK<pos:position pos:line="713" pos:column="20"/></name></expr>;<pos:position pos:line="713" pos:column="21"/></return>
}<pos:position pos:line="714" pos:column="2"/></block></function>

<function><specifier pos:line="716" pos:column="1">static<pos:position pos:line="716" pos:column="7"/></specifier> <type><name pos:line="716" pos:column="8">int<pos:position pos:line="716" pos:column="11"/></name></type> <name pos:line="716" pos:column="12">verify_cert<pos:position pos:line="716" pos:column="23"/></name><parameter_list pos:line="716" pos:column="23">(<parameter><decl><type><specifier pos:line="716" pos:column="24">const<pos:position pos:line="716" pos:column="29"/></specifier> <name pos:line="716" pos:column="30">char<pos:position pos:line="716" pos:column="34"/></name> <modifier pos:line="716" pos:column="35">*<pos:position pos:line="716" pos:column="36"/></modifier></type><name pos:line="716" pos:column="36">cafile<pos:position pos:line="716" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="716" pos:column="44">struct<pos:position pos:line="716" pos:column="50"/></name> <name pos:line="716" pos:column="51">Curl_easy<pos:position pos:line="716" pos:column="60"/></name></name> <modifier pos:line="716" pos:column="61">*<pos:position pos:line="716" pos:column="62"/></modifier></type><name pos:line="716" pos:column="62">data<pos:position pos:line="716" pos:column="66"/></name></decl></parameter>,
                       <parameter><decl><type><name pos:line="717" pos:column="24">SSLContextRef<pos:position pos:line="717" pos:column="37"/></name></type> <name pos:line="717" pos:column="38">ctx<pos:position pos:line="717" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="717" pos:column="42"/></parameter_list>
<block pos:line="718" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="719" pos:column="3">int<pos:position pos:line="719" pos:column="6"/></name></type> <name pos:line="719" pos:column="7">n<pos:position pos:line="719" pos:column="8"/></name> <init pos:line="719" pos:column="9">= <expr><literal type="number" pos:line="719" pos:column="11">0<pos:position pos:line="719" pos:column="12"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="719" pos:column="14">rc<pos:position pos:line="719" pos:column="16"/></name></decl>;<pos:position pos:line="719" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="720" pos:column="3">long<pos:position pos:line="720" pos:column="7"/></name></type> <name pos:line="720" pos:column="8">res<pos:position pos:line="720" pos:column="11"/></name></decl>;<pos:position pos:line="720" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="721" pos:column="3">unsigned<pos:position pos:line="721" pos:column="11"/></name> <name pos:line="721" pos:column="12">char<pos:position pos:line="721" pos:column="16"/></name> <modifier pos:line="721" pos:column="17">*<pos:position pos:line="721" pos:column="18"/></modifier></type><name pos:line="721" pos:column="18">certbuf<pos:position pos:line="721" pos:column="25"/></name></decl>, <modifier pos:line="721" pos:column="27">*<pos:position pos:line="721" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="721" pos:column="28">der<pos:position pos:line="721" pos:column="31"/></name></decl>;<pos:position pos:line="721" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="722" pos:column="3">size_t<pos:position pos:line="722" pos:column="9"/></name></type> <name pos:line="722" pos:column="10">buflen<pos:position pos:line="722" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="722" pos:column="18">derlen<pos:position pos:line="722" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="722" pos:column="26">offset<pos:position pos:line="722" pos:column="32"/></name> <init pos:line="722" pos:column="33">= <expr><literal type="number" pos:line="722" pos:column="35">0<pos:position pos:line="722" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="722" pos:column="37"/></decl_stmt>

  <if pos:line="724" pos:column="3">if<condition pos:line="724" pos:column="5">(<expr><call><name pos:line="724" pos:column="6">read_cert<pos:position pos:line="724" pos:column="15"/></name><argument_list pos:line="724" pos:column="15">(<argument><expr><name pos:line="724" pos:column="16">cafile<pos:position pos:line="724" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="724" pos:column="24">&amp;<pos:position pos:line="724" pos:column="29"/></operator><name pos:line="724" pos:column="25">certbuf<pos:position pos:line="724" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="724" pos:column="34">&amp;<pos:position pos:line="724" pos:column="39"/></operator><name pos:line="724" pos:column="35">buflen<pos:position pos:line="724" pos:column="41"/></name></expr></argument>)<pos:position pos:line="724" pos:column="42"/></argument_list></call> <operator pos:line="724" pos:column="43">&lt;<pos:position pos:line="724" pos:column="47"/></operator> <literal type="number" pos:line="724" pos:column="45">0<pos:position pos:line="724" pos:column="46"/></literal></expr>)<pos:position pos:line="724" pos:column="47"/></condition><then pos:line="724" pos:column="47"> <block pos:line="724" pos:column="48">{
    <expr_stmt><expr><call><name pos:line="725" pos:column="5">failf<pos:position pos:line="725" pos:column="10"/></name><argument_list pos:line="725" pos:column="10">(<argument><expr><name pos:line="725" pos:column="11">data<pos:position pos:line="725" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="725" pos:column="17">"SSL: failed to read or invalid CA certificate"<pos:position pos:line="725" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="725" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="725" pos:column="66"/></expr_stmt>
    <return pos:line="726" pos:column="5">return <expr><name pos:line="726" pos:column="12">CURLE_SSL_CACERT<pos:position pos:line="726" pos:column="28"/></name></expr>;<pos:position pos:line="726" pos:column="29"/></return>
  }<pos:position pos:line="727" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="729" pos:column="3">/*
   * Certbuf now contains the contents of the certificate file, which can be
   * - a single DER certificate,
   * - a single PEM certificate or
   * - a bunch of PEM certificates (certificate bundle).
   *
   * Go through certbuf, and convert any PEM certificate in it into DER
   * format.
   */</comment>
  <decl_stmt><decl><type><name pos:line="738" pos:column="3">CFMutableArrayRef<pos:position pos:line="738" pos:column="20"/></name></type> <name pos:line="738" pos:column="21">array<pos:position pos:line="738" pos:column="26"/></name> <init pos:line="738" pos:column="27">= <expr><call><name pos:line="738" pos:column="29">CFArrayCreateMutable<pos:position pos:line="738" pos:column="49"/></name><argument_list pos:line="738" pos:column="49">(<argument><expr><name pos:line="738" pos:column="50">kCFAllocatorDefault<pos:position pos:line="738" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="738" pos:column="71">0<pos:position pos:line="738" pos:column="72"/></literal></expr></argument>,
                                                 <argument><expr><operator pos:line="739" pos:column="50">&amp;<pos:position pos:line="739" pos:column="55"/></operator><name pos:line="739" pos:column="51">kCFTypeArrayCallBacks<pos:position pos:line="739" pos:column="72"/></name></expr></argument>)<pos:position pos:line="739" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="739" pos:column="74"/></decl_stmt>
  <if pos:line="740" pos:column="3">if<condition pos:line="740" pos:column="5">(<expr><name pos:line="740" pos:column="6">array<pos:position pos:line="740" pos:column="11"/></name> <operator pos:line="740" pos:column="12">==<pos:position pos:line="740" pos:column="14"/></operator> <name pos:line="740" pos:column="15">NULL<pos:position pos:line="740" pos:column="19"/></name></expr>)<pos:position pos:line="740" pos:column="20"/></condition><then pos:line="740" pos:column="20"> <block pos:line="740" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="741" pos:column="5">free<pos:position pos:line="741" pos:column="9"/></name><argument_list pos:line="741" pos:column="9">(<argument><expr><name pos:line="741" pos:column="10">certbuf<pos:position pos:line="741" pos:column="17"/></name></expr></argument>)<pos:position pos:line="741" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="741" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="742" pos:column="5">failf<pos:position pos:line="742" pos:column="10"/></name><argument_list pos:line="742" pos:column="10">(<argument><expr><name pos:line="742" pos:column="11">data<pos:position pos:line="742" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="742" pos:column="17">"SSL: out of memory creating CA certificate array"<pos:position pos:line="742" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="742" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="742" pos:column="69"/></expr_stmt>
    <return pos:line="743" pos:column="5">return <expr><name pos:line="743" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="743" pos:column="31"/></name></expr>;<pos:position pos:line="743" pos:column="32"/></return>
  }<pos:position pos:line="744" pos:column="4"/></block></then></if>

  <while pos:line="746" pos:column="3">while<condition pos:line="746" pos:column="8">(<expr><name pos:line="746" pos:column="9">offset<pos:position pos:line="746" pos:column="15"/></name> <operator pos:line="746" pos:column="16">&lt;<pos:position pos:line="746" pos:column="20"/></operator> <name pos:line="746" pos:column="18">buflen<pos:position pos:line="746" pos:column="24"/></name></expr>)<pos:position pos:line="746" pos:column="25"/></condition> <block pos:line="746" pos:column="26">{
    <expr_stmt><expr><name pos:line="747" pos:column="5">n<pos:position pos:line="747" pos:column="6"/></name><operator pos:line="747" pos:column="6">++<pos:position pos:line="747" pos:column="8"/></operator></expr>;<pos:position pos:line="747" pos:column="9"/></expr_stmt>

    <comment type="block" pos:line="749" pos:column="5">/*
     * Check if the certificate is in PEM format, and convert it to DER. If
     * this fails, we assume the certificate is in DER format.
     */</comment>
    <expr_stmt><expr><name pos:line="753" pos:column="5">res<pos:position pos:line="753" pos:column="8"/></name> <operator pos:line="753" pos:column="9">=<pos:position pos:line="753" pos:column="10"/></operator> <call><name pos:line="753" pos:column="11">pem_to_der<pos:position pos:line="753" pos:column="21"/></name><argument_list pos:line="753" pos:column="21">(<argument><expr><operator pos:line="753" pos:column="22">(<pos:position pos:line="753" pos:column="23"/></operator><specifier pos:line="753" pos:column="23">const<pos:position pos:line="753" pos:column="28"/></specifier> <name pos:line="753" pos:column="29">char<pos:position pos:line="753" pos:column="33"/></name> <operator pos:line="753" pos:column="34">*<pos:position pos:line="753" pos:column="35"/></operator><operator pos:line="753" pos:column="35">)<pos:position pos:line="753" pos:column="36"/></operator><name pos:line="753" pos:column="36">certbuf<pos:position pos:line="753" pos:column="43"/></name> <operator pos:line="753" pos:column="44">+<pos:position pos:line="753" pos:column="45"/></operator> <name pos:line="753" pos:column="46">offset<pos:position pos:line="753" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="753" pos:column="54">&amp;<pos:position pos:line="753" pos:column="59"/></operator><name pos:line="753" pos:column="55">der<pos:position pos:line="753" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="753" pos:column="60">&amp;<pos:position pos:line="753" pos:column="65"/></operator><name pos:line="753" pos:column="61">derlen<pos:position pos:line="753" pos:column="67"/></name></expr></argument>)<pos:position pos:line="753" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="753" pos:column="69"/></expr_stmt>
    <if pos:line="754" pos:column="5">if<condition pos:line="754" pos:column="7">(<expr><name pos:line="754" pos:column="8">res<pos:position pos:line="754" pos:column="11"/></name> <operator pos:line="754" pos:column="12">&lt;<pos:position pos:line="754" pos:column="16"/></operator> <literal type="number" pos:line="754" pos:column="14">0<pos:position pos:line="754" pos:column="15"/></literal></expr>)<pos:position pos:line="754" pos:column="16"/></condition><then pos:line="754" pos:column="16"> <block pos:line="754" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="755" pos:column="7">free<pos:position pos:line="755" pos:column="11"/></name><argument_list pos:line="755" pos:column="11">(<argument><expr><name pos:line="755" pos:column="12">certbuf<pos:position pos:line="755" pos:column="19"/></name></expr></argument>)<pos:position pos:line="755" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="755" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="756" pos:column="7">CFRelease<pos:position pos:line="756" pos:column="16"/></name><argument_list pos:line="756" pos:column="16">(<argument><expr><name pos:line="756" pos:column="17">array<pos:position pos:line="756" pos:column="22"/></name></expr></argument>)<pos:position pos:line="756" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="756" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="757" pos:column="7">failf<pos:position pos:line="757" pos:column="12"/></name><argument_list pos:line="757" pos:column="12">(<argument><expr><name pos:line="757" pos:column="13">data<pos:position pos:line="757" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="757" pos:column="19">"SSL: invalid CA certificate #%d (offset %d) in bundle"<pos:position pos:line="757" pos:column="74"/></literal></expr></argument>,
            <argument><expr><name pos:line="758" pos:column="13">n<pos:position pos:line="758" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="758" pos:column="16">offset<pos:position pos:line="758" pos:column="22"/></name></expr></argument>)<pos:position pos:line="758" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="758" pos:column="24"/></expr_stmt>
      <return pos:line="759" pos:column="7">return <expr><name pos:line="759" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="759" pos:column="30"/></name></expr>;<pos:position pos:line="759" pos:column="31"/></return>
    }<pos:position pos:line="760" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="761" pos:column="5">offset<pos:position pos:line="761" pos:column="11"/></name> <operator pos:line="761" pos:column="12">+=<pos:position pos:line="761" pos:column="14"/></operator> <name pos:line="761" pos:column="15">res<pos:position pos:line="761" pos:column="18"/></name></expr>;<pos:position pos:line="761" pos:column="19"/></expr_stmt>

    <if pos:line="763" pos:column="5">if<condition pos:line="763" pos:column="7">(<expr><name pos:line="763" pos:column="8">res<pos:position pos:line="763" pos:column="11"/></name> <operator pos:line="763" pos:column="12">==<pos:position pos:line="763" pos:column="14"/></operator> <literal type="number" pos:line="763" pos:column="15">0<pos:position pos:line="763" pos:column="16"/></literal> <operator pos:line="763" pos:column="17">&amp;&amp;<pos:position pos:line="763" pos:column="27"/></operator> <name pos:line="763" pos:column="20">offset<pos:position pos:line="763" pos:column="26"/></name> <operator pos:line="763" pos:column="27">==<pos:position pos:line="763" pos:column="29"/></operator> <literal type="number" pos:line="763" pos:column="30">0<pos:position pos:line="763" pos:column="31"/></literal></expr>)<pos:position pos:line="763" pos:column="32"/></condition><then pos:line="763" pos:column="32"> <block pos:line="763" pos:column="33">{
      <comment type="block" pos:line="764" pos:column="7">/* This is not a PEM file, probably a certificate in DER format. */</comment>
      <expr_stmt><expr><name pos:line="765" pos:column="7">rc<pos:position pos:line="765" pos:column="9"/></name> <operator pos:line="765" pos:column="10">=<pos:position pos:line="765" pos:column="11"/></operator> <call><name pos:line="765" pos:column="12">append_cert_to_array<pos:position pos:line="765" pos:column="32"/></name><argument_list pos:line="765" pos:column="32">(<argument><expr><name pos:line="765" pos:column="33">data<pos:position pos:line="765" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="765" pos:column="39">certbuf<pos:position pos:line="765" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="765" pos:column="48">buflen<pos:position pos:line="765" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="765" pos:column="56">array<pos:position pos:line="765" pos:column="61"/></name></expr></argument>)<pos:position pos:line="765" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="765" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="766" pos:column="7">free<pos:position pos:line="766" pos:column="11"/></name><argument_list pos:line="766" pos:column="11">(<argument><expr><name pos:line="766" pos:column="12">certbuf<pos:position pos:line="766" pos:column="19"/></name></expr></argument>)<pos:position pos:line="766" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="766" pos:column="21"/></expr_stmt>
      <if pos:line="767" pos:column="7">if<condition pos:line="767" pos:column="9">(<expr><name pos:line="767" pos:column="10">rc<pos:position pos:line="767" pos:column="12"/></name> <operator pos:line="767" pos:column="13">!=<pos:position pos:line="767" pos:column="15"/></operator> <name pos:line="767" pos:column="16">CURLE_OK<pos:position pos:line="767" pos:column="24"/></name></expr>)<pos:position pos:line="767" pos:column="25"/></condition><then pos:line="767" pos:column="25"> <block pos:line="767" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="768" pos:column="9">CFRelease<pos:position pos:line="768" pos:column="18"/></name><argument_list pos:line="768" pos:column="18">(<argument><expr><name pos:line="768" pos:column="19">array<pos:position pos:line="768" pos:column="24"/></name></expr></argument>)<pos:position pos:line="768" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="768" pos:column="26"/></expr_stmt>
        <return pos:line="769" pos:column="9">return <expr><name pos:line="769" pos:column="16">rc<pos:position pos:line="769" pos:column="18"/></name></expr>;<pos:position pos:line="769" pos:column="19"/></return>
      }<pos:position pos:line="770" pos:column="8"/></block></then></if>
      <break pos:line="771" pos:column="7">break;<pos:position pos:line="771" pos:column="13"/></break>
    }<pos:position pos:line="772" pos:column="6"/></block></then>
    <elseif pos:line="773" pos:column="5">else <if pos:line="773" pos:column="10">if<condition pos:line="773" pos:column="12">(<expr><name pos:line="773" pos:column="13">res<pos:position pos:line="773" pos:column="16"/></name> <operator pos:line="773" pos:column="17">==<pos:position pos:line="773" pos:column="19"/></operator> <literal type="number" pos:line="773" pos:column="20">0<pos:position pos:line="773" pos:column="21"/></literal></expr>)<pos:position pos:line="773" pos:column="22"/></condition><then pos:line="773" pos:column="22"> <block pos:line="773" pos:column="23">{
      <comment type="block" pos:line="774" pos:column="7">/* No more certificates in the bundle. */</comment>
      <expr_stmt><expr><call><name pos:line="775" pos:column="7">free<pos:position pos:line="775" pos:column="11"/></name><argument_list pos:line="775" pos:column="11">(<argument><expr><name pos:line="775" pos:column="12">certbuf<pos:position pos:line="775" pos:column="19"/></name></expr></argument>)<pos:position pos:line="775" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="775" pos:column="21"/></expr_stmt>
      <break pos:line="776" pos:column="7">break;<pos:position pos:line="776" pos:column="13"/></break>
    }<pos:position pos:line="777" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="779" pos:column="5">rc<pos:position pos:line="779" pos:column="7"/></name> <operator pos:line="779" pos:column="8">=<pos:position pos:line="779" pos:column="9"/></operator> <call><name pos:line="779" pos:column="10">append_cert_to_array<pos:position pos:line="779" pos:column="30"/></name><argument_list pos:line="779" pos:column="30">(<argument><expr><name pos:line="779" pos:column="31">data<pos:position pos:line="779" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="779" pos:column="37">der<pos:position pos:line="779" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="779" pos:column="42">derlen<pos:position pos:line="779" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="779" pos:column="50">array<pos:position pos:line="779" pos:column="55"/></name></expr></argument>)<pos:position pos:line="779" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="779" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="780" pos:column="5">free<pos:position pos:line="780" pos:column="9"/></name><argument_list pos:line="780" pos:column="9">(<argument><expr><name pos:line="780" pos:column="10">der<pos:position pos:line="780" pos:column="13"/></name></expr></argument>)<pos:position pos:line="780" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="780" pos:column="15"/></expr_stmt>
    <if pos:line="781" pos:column="5">if<condition pos:line="781" pos:column="7">(<expr><name pos:line="781" pos:column="8">rc<pos:position pos:line="781" pos:column="10"/></name> <operator pos:line="781" pos:column="11">!=<pos:position pos:line="781" pos:column="13"/></operator> <name pos:line="781" pos:column="14">CURLE_OK<pos:position pos:line="781" pos:column="22"/></name></expr>)<pos:position pos:line="781" pos:column="23"/></condition><then pos:line="781" pos:column="23"> <block pos:line="781" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="782" pos:column="7">free<pos:position pos:line="782" pos:column="11"/></name><argument_list pos:line="782" pos:column="11">(<argument><expr><name pos:line="782" pos:column="12">certbuf<pos:position pos:line="782" pos:column="19"/></name></expr></argument>)<pos:position pos:line="782" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="782" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="783" pos:column="7">CFRelease<pos:position pos:line="783" pos:column="16"/></name><argument_list pos:line="783" pos:column="16">(<argument><expr><name pos:line="783" pos:column="17">array<pos:position pos:line="783" pos:column="22"/></name></expr></argument>)<pos:position pos:line="783" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="783" pos:column="24"/></expr_stmt>
      <return pos:line="784" pos:column="7">return <expr><name pos:line="784" pos:column="14">rc<pos:position pos:line="784" pos:column="16"/></name></expr>;<pos:position pos:line="784" pos:column="17"/></return>
    }<pos:position pos:line="785" pos:column="6"/></block></then></if>
  }<pos:position pos:line="786" pos:column="4"/></block></while>

  <decl_stmt><decl><type><name pos:line="788" pos:column="3">SecTrustRef<pos:position pos:line="788" pos:column="14"/></name></type> <name pos:line="788" pos:column="15">trust<pos:position pos:line="788" pos:column="20"/></name></decl>;<pos:position pos:line="788" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="789" pos:column="3">OSStatus<pos:position pos:line="789" pos:column="11"/></name></type> <name pos:line="789" pos:column="12">ret<pos:position pos:line="789" pos:column="15"/></name> <init pos:line="789" pos:column="16">= <expr><call><name pos:line="789" pos:column="18">SSLCopyPeerTrust<pos:position pos:line="789" pos:column="34"/></name><argument_list pos:line="789" pos:column="34">(<argument><expr><name pos:line="789" pos:column="35">ctx<pos:position pos:line="789" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="789" pos:column="40">&amp;<pos:position pos:line="789" pos:column="45"/></operator><name pos:line="789" pos:column="41">trust<pos:position pos:line="789" pos:column="46"/></name></expr></argument>)<pos:position pos:line="789" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="789" pos:column="48"/></decl_stmt>
  <if pos:line="790" pos:column="3">if<condition pos:line="790" pos:column="5">(<expr><name pos:line="790" pos:column="6">trust<pos:position pos:line="790" pos:column="11"/></name> <operator pos:line="790" pos:column="12">==<pos:position pos:line="790" pos:column="14"/></operator> <name pos:line="790" pos:column="15">NULL<pos:position pos:line="790" pos:column="19"/></name></expr>)<pos:position pos:line="790" pos:column="20"/></condition><then pos:line="790" pos:column="20"> <block pos:line="790" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="791" pos:column="5">failf<pos:position pos:line="791" pos:column="10"/></name><argument_list pos:line="791" pos:column="10">(<argument><expr><name pos:line="791" pos:column="11">data<pos:position pos:line="791" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="791" pos:column="17">"SSL: error getting certificate chain"<pos:position pos:line="791" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="791" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="791" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="792" pos:column="5">CFRelease<pos:position pos:line="792" pos:column="14"/></name><argument_list pos:line="792" pos:column="14">(<argument><expr><name pos:line="792" pos:column="15">array<pos:position pos:line="792" pos:column="20"/></name></expr></argument>)<pos:position pos:line="792" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="792" pos:column="22"/></expr_stmt>
    <return pos:line="793" pos:column="5">return <expr><name pos:line="793" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="793" pos:column="31"/></name></expr>;<pos:position pos:line="793" pos:column="32"/></return>
  }<pos:position pos:line="794" pos:column="4"/></block></then>
  <elseif pos:line="795" pos:column="3">else <if pos:line="795" pos:column="8">if<condition pos:line="795" pos:column="10">(<expr><name pos:line="795" pos:column="11">ret<pos:position pos:line="795" pos:column="14"/></name> <operator pos:line="795" pos:column="15">!=<pos:position pos:line="795" pos:column="17"/></operator> <name pos:line="795" pos:column="18">noErr<pos:position pos:line="795" pos:column="23"/></name></expr>)<pos:position pos:line="795" pos:column="24"/></condition><then pos:line="795" pos:column="24"> <block pos:line="795" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="796" pos:column="5">CFRelease<pos:position pos:line="796" pos:column="14"/></name><argument_list pos:line="796" pos:column="14">(<argument><expr><name pos:line="796" pos:column="15">array<pos:position pos:line="796" pos:column="20"/></name></expr></argument>)<pos:position pos:line="796" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="796" pos:column="22"/></expr_stmt>
    <return pos:line="797" pos:column="5">return <expr><call><name pos:line="797" pos:column="12">sslerr_to_curlerr<pos:position pos:line="797" pos:column="29"/></name><argument_list pos:line="797" pos:column="29">(<argument><expr><name pos:line="797" pos:column="30">data<pos:position pos:line="797" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="797" pos:column="36">ret<pos:position pos:line="797" pos:column="39"/></name></expr></argument>)<pos:position pos:line="797" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="797" pos:column="41"/></return>
  }<pos:position pos:line="798" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><name pos:line="800" pos:column="3">ret<pos:position pos:line="800" pos:column="6"/></name> <operator pos:line="800" pos:column="7">=<pos:position pos:line="800" pos:column="8"/></operator> <call><name pos:line="800" pos:column="9">SecTrustSetAnchorCertificates<pos:position pos:line="800" pos:column="38"/></name><argument_list pos:line="800" pos:column="38">(<argument><expr><name pos:line="800" pos:column="39">trust<pos:position pos:line="800" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="800" pos:column="46">array<pos:position pos:line="800" pos:column="51"/></name></expr></argument>)<pos:position pos:line="800" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="800" pos:column="53"/></expr_stmt>
  <if pos:line="801" pos:column="3">if<condition pos:line="801" pos:column="5">(<expr><name pos:line="801" pos:column="6">ret<pos:position pos:line="801" pos:column="9"/></name> <operator pos:line="801" pos:column="10">!=<pos:position pos:line="801" pos:column="12"/></operator> <name pos:line="801" pos:column="13">noErr<pos:position pos:line="801" pos:column="18"/></name></expr>)<pos:position pos:line="801" pos:column="19"/></condition><then pos:line="801" pos:column="19"> <block pos:line="801" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="802" pos:column="5">CFRelease<pos:position pos:line="802" pos:column="14"/></name><argument_list pos:line="802" pos:column="14">(<argument><expr><name pos:line="802" pos:column="15">trust<pos:position pos:line="802" pos:column="20"/></name></expr></argument>)<pos:position pos:line="802" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="802" pos:column="22"/></expr_stmt>
    <return pos:line="803" pos:column="5">return <expr><call><name pos:line="803" pos:column="12">sslerr_to_curlerr<pos:position pos:line="803" pos:column="29"/></name><argument_list pos:line="803" pos:column="29">(<argument><expr><name pos:line="803" pos:column="30">data<pos:position pos:line="803" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="803" pos:column="36">ret<pos:position pos:line="803" pos:column="39"/></name></expr></argument>)<pos:position pos:line="803" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="803" pos:column="41"/></return>
  }<pos:position pos:line="804" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="805" pos:column="3">ret<pos:position pos:line="805" pos:column="6"/></name> <operator pos:line="805" pos:column="7">=<pos:position pos:line="805" pos:column="8"/></operator> <call><name pos:line="805" pos:column="9">SecTrustSetAnchorCertificatesOnly<pos:position pos:line="805" pos:column="42"/></name><argument_list pos:line="805" pos:column="42">(<argument><expr><name pos:line="805" pos:column="43">trust<pos:position pos:line="805" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="805" pos:column="50">true<pos:position pos:line="805" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="805" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="805" pos:column="56"/></expr_stmt>
  <if pos:line="806" pos:column="3">if<condition pos:line="806" pos:column="5">(<expr><name pos:line="806" pos:column="6">ret<pos:position pos:line="806" pos:column="9"/></name> <operator pos:line="806" pos:column="10">!=<pos:position pos:line="806" pos:column="12"/></operator> <name pos:line="806" pos:column="13">noErr<pos:position pos:line="806" pos:column="18"/></name></expr>)<pos:position pos:line="806" pos:column="19"/></condition><then pos:line="806" pos:column="19"> <block pos:line="806" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="807" pos:column="5">CFRelease<pos:position pos:line="807" pos:column="14"/></name><argument_list pos:line="807" pos:column="14">(<argument><expr><name pos:line="807" pos:column="15">trust<pos:position pos:line="807" pos:column="20"/></name></expr></argument>)<pos:position pos:line="807" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="807" pos:column="22"/></expr_stmt>
    <return pos:line="808" pos:column="5">return <expr><call><name pos:line="808" pos:column="12">sslerr_to_curlerr<pos:position pos:line="808" pos:column="29"/></name><argument_list pos:line="808" pos:column="29">(<argument><expr><name pos:line="808" pos:column="30">data<pos:position pos:line="808" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="808" pos:column="36">ret<pos:position pos:line="808" pos:column="39"/></name></expr></argument>)<pos:position pos:line="808" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="808" pos:column="41"/></return>
  }<pos:position pos:line="809" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="811" pos:column="3">SecTrustResultType<pos:position pos:line="811" pos:column="21"/></name></type> <name pos:line="811" pos:column="22">trust_eval<pos:position pos:line="811" pos:column="32"/></name> <init pos:line="811" pos:column="33">= <expr><literal type="number" pos:line="811" pos:column="35">0<pos:position pos:line="811" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="811" pos:column="37"/></decl_stmt>
  <expr_stmt><expr><name pos:line="812" pos:column="3">ret<pos:position pos:line="812" pos:column="6"/></name> <operator pos:line="812" pos:column="7">=<pos:position pos:line="812" pos:column="8"/></operator> <call><name pos:line="812" pos:column="9">SecTrustEvaluate<pos:position pos:line="812" pos:column="25"/></name><argument_list pos:line="812" pos:column="25">(<argument><expr><name pos:line="812" pos:column="26">trust<pos:position pos:line="812" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="812" pos:column="33">&amp;<pos:position pos:line="812" pos:column="38"/></operator><name pos:line="812" pos:column="34">trust_eval<pos:position pos:line="812" pos:column="44"/></name></expr></argument>)<pos:position pos:line="812" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="812" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="813" pos:column="3">CFRelease<pos:position pos:line="813" pos:column="12"/></name><argument_list pos:line="813" pos:column="12">(<argument><expr><name pos:line="813" pos:column="13">array<pos:position pos:line="813" pos:column="18"/></name></expr></argument>)<pos:position pos:line="813" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="813" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="814" pos:column="3">CFRelease<pos:position pos:line="814" pos:column="12"/></name><argument_list pos:line="814" pos:column="12">(<argument><expr><name pos:line="814" pos:column="13">trust<pos:position pos:line="814" pos:column="18"/></name></expr></argument>)<pos:position pos:line="814" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="814" pos:column="20"/></expr_stmt>
  <if pos:line="815" pos:column="3">if<condition pos:line="815" pos:column="5">(<expr><name pos:line="815" pos:column="6">ret<pos:position pos:line="815" pos:column="9"/></name> <operator pos:line="815" pos:column="10">!=<pos:position pos:line="815" pos:column="12"/></operator> <name pos:line="815" pos:column="13">noErr<pos:position pos:line="815" pos:column="18"/></name></expr>)<pos:position pos:line="815" pos:column="19"/></condition><then pos:line="815" pos:column="19"> <block pos:line="815" pos:column="20">{
    <return pos:line="816" pos:column="5">return <expr><call><name pos:line="816" pos:column="12">sslerr_to_curlerr<pos:position pos:line="816" pos:column="29"/></name><argument_list pos:line="816" pos:column="29">(<argument><expr><name pos:line="816" pos:column="30">data<pos:position pos:line="816" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="816" pos:column="36">ret<pos:position pos:line="816" pos:column="39"/></name></expr></argument>)<pos:position pos:line="816" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="816" pos:column="41"/></return>
  }<pos:position pos:line="817" pos:column="4"/></block></then></if>

  <switch pos:line="819" pos:column="3">switch<condition pos:line="819" pos:column="9">(<expr><name pos:line="819" pos:column="10">trust_eval<pos:position pos:line="819" pos:column="20"/></name></expr>)<pos:position pos:line="819" pos:column="21"/></condition> <block pos:line="819" pos:column="22">{
    <case pos:line="820" pos:column="5">case <expr><name pos:line="820" pos:column="10">kSecTrustResultUnspecified<pos:position pos:line="820" pos:column="36"/></name></expr>:<pos:position pos:line="820" pos:column="37"/></case>
    <case pos:line="821" pos:column="5">case <expr><name pos:line="821" pos:column="10">kSecTrustResultProceed<pos:position pos:line="821" pos:column="32"/></name></expr>:<pos:position pos:line="821" pos:column="33"/></case>
      <return pos:line="822" pos:column="7">return <expr><name pos:line="822" pos:column="14">CURLE_OK<pos:position pos:line="822" pos:column="22"/></name></expr>;<pos:position pos:line="822" pos:column="23"/></return>

    <case pos:line="824" pos:column="5">case <expr><name pos:line="824" pos:column="10">kSecTrustResultRecoverableTrustFailure<pos:position pos:line="824" pos:column="48"/></name></expr>:<pos:position pos:line="824" pos:column="49"/></case>
    <case pos:line="825" pos:column="5">case <expr><name pos:line="825" pos:column="10">kSecTrustResultDeny<pos:position pos:line="825" pos:column="29"/></name></expr>:<pos:position pos:line="825" pos:column="30"/></case>
    <default pos:line="826" pos:column="5">default:<pos:position pos:line="826" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="827" pos:column="7">failf<pos:position pos:line="827" pos:column="12"/></name><argument_list pos:line="827" pos:column="12">(<argument><expr><name pos:line="827" pos:column="13">data<pos:position pos:line="827" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="827" pos:column="19">"SSL: certificate verification failed (result: %d)"<pos:position pos:line="827" pos:column="70"/></literal></expr></argument>,
            <argument><expr><name pos:line="828" pos:column="13">trust_eval<pos:position pos:line="828" pos:column="23"/></name></expr></argument>)<pos:position pos:line="828" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="828" pos:column="25"/></expr_stmt>
      <return pos:line="829" pos:column="7">return <expr><name pos:line="829" pos:column="14">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="829" pos:column="44"/></name></expr>;<pos:position pos:line="829" pos:column="45"/></return>
  }<pos:position pos:line="830" pos:column="4"/></block></switch>
}<pos:position pos:line="831" pos:column="2"/></block></function>

<cpp:ifdef pos:line="833" pos:column="1">#<cpp:directive pos:line="833" pos:column="2">ifdef<pos:position pos:line="833" pos:column="7"/></cpp:directive> <name pos:line="833" pos:column="8">DARWIN_SSL_PINNEDPUBKEY<pos:position pos:line="833" pos:column="31"/></name></cpp:ifdef>
<function><specifier pos:line="834" pos:column="1">static<pos:position pos:line="834" pos:column="7"/></specifier> <type><name pos:line="834" pos:column="8">CURLcode<pos:position pos:line="834" pos:column="16"/></name></type> <name pos:line="834" pos:column="17">pkp_pin_peer_pubkey<pos:position pos:line="834" pos:column="36"/></name><parameter_list pos:line="834" pos:column="36">(<parameter><decl><type><name><name pos:line="834" pos:column="37">struct<pos:position pos:line="834" pos:column="43"/></name> <name pos:line="834" pos:column="44">Curl_easy<pos:position pos:line="834" pos:column="53"/></name></name> <modifier pos:line="834" pos:column="54">*<pos:position pos:line="834" pos:column="55"/></modifier></type><name pos:line="834" pos:column="55">data<pos:position pos:line="834" pos:column="59"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="835" pos:column="37">SSLContextRef<pos:position pos:line="835" pos:column="50"/></name></type> <name pos:line="835" pos:column="51">ctx<pos:position pos:line="835" pos:column="54"/></name></decl></parameter>,
                                    <parameter><decl><type><specifier pos:line="836" pos:column="37">const<pos:position pos:line="836" pos:column="42"/></specifier> <name pos:line="836" pos:column="43">char<pos:position pos:line="836" pos:column="47"/></name> <modifier pos:line="836" pos:column="48">*<pos:position pos:line="836" pos:column="49"/></modifier></type><name pos:line="836" pos:column="49">pinnedpubkey<pos:position pos:line="836" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="836" pos:column="62"/></parameter_list>
<block pos:line="837" pos:column="1">{  <comment type="block" pos:line="837" pos:column="4">/* Scratch */</comment>
  <decl_stmt><decl><type><name pos:line="838" pos:column="3">size_t<pos:position pos:line="838" pos:column="9"/></name></type> <name pos:line="838" pos:column="10">pubkeylen<pos:position pos:line="838" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="838" pos:column="21">realpubkeylen<pos:position pos:line="838" pos:column="34"/></name></decl>, <decl><type ref="prev"/><name pos:line="838" pos:column="36">spkiHeaderLength<pos:position pos:line="838" pos:column="52"/></name> <init pos:line="838" pos:column="53">= <expr><literal type="number" pos:line="838" pos:column="55">24<pos:position pos:line="838" pos:column="57"/></literal></expr></init></decl>;<pos:position pos:line="838" pos:column="58"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="839" pos:column="3">unsigned<pos:position pos:line="839" pos:column="11"/></name> <name pos:line="839" pos:column="12">char<pos:position pos:line="839" pos:column="16"/></name> <modifier pos:line="839" pos:column="17">*<pos:position pos:line="839" pos:column="18"/></modifier></type><name pos:line="839" pos:column="18">pubkey<pos:position pos:line="839" pos:column="24"/></name> <init pos:line="839" pos:column="25">= <expr><name pos:line="839" pos:column="27">NULL<pos:position pos:line="839" pos:column="31"/></name></expr></init></decl>, <modifier pos:line="839" pos:column="33">*<pos:position pos:line="839" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="839" pos:column="34">realpubkey<pos:position pos:line="839" pos:column="44"/></name> <init pos:line="839" pos:column="45">= <expr><name pos:line="839" pos:column="47">NULL<pos:position pos:line="839" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="839" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="840" pos:column="3">const<pos:position pos:line="840" pos:column="8"/></specifier> <name pos:line="840" pos:column="9">unsigned<pos:position pos:line="840" pos:column="17"/></name> <name pos:line="840" pos:column="18">char<pos:position pos:line="840" pos:column="22"/></name> <modifier pos:line="840" pos:column="23">*<pos:position pos:line="840" pos:column="24"/></modifier></type><name pos:line="840" pos:column="24">spkiHeader<pos:position pos:line="840" pos:column="34"/></name> <init pos:line="840" pos:column="35">= <expr><name pos:line="840" pos:column="37">NULL<pos:position pos:line="840" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="840" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="841" pos:column="3">CFDataRef<pos:position pos:line="841" pos:column="12"/></name></type> <name pos:line="841" pos:column="13">publicKeyBits<pos:position pos:line="841" pos:column="26"/></name> <init pos:line="841" pos:column="27">= <expr><name pos:line="841" pos:column="29">NULL<pos:position pos:line="841" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="841" pos:column="34"/></decl_stmt>

  <comment type="block" pos:line="843" pos:column="3">/* Result is returned to caller */</comment>
  <decl_stmt><decl><type><name pos:line="844" pos:column="3">CURLcode<pos:position pos:line="844" pos:column="11"/></name></type> <name pos:line="844" pos:column="12">result<pos:position pos:line="844" pos:column="18"/></name> <init pos:line="844" pos:column="19">= <expr><name pos:line="844" pos:column="21">CURLE_SSL_PINNEDPUBKEYNOTMATCH<pos:position pos:line="844" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="844" pos:column="52"/></decl_stmt>

  <comment type="block" pos:line="846" pos:column="3">/* if a path wasn't specified, don't pin */</comment>
  <if pos:line="847" pos:column="3">if<condition pos:line="847" pos:column="5">(<expr><operator pos:line="847" pos:column="6">!<pos:position pos:line="847" pos:column="7"/></operator><name pos:line="847" pos:column="7">pinnedpubkey<pos:position pos:line="847" pos:column="19"/></name></expr>)<pos:position pos:line="847" pos:column="20"/></condition><then pos:line="847" pos:column="20">
    <block type="pseudo"><return pos:line="848" pos:column="5">return <expr><name pos:line="848" pos:column="12">CURLE_OK<pos:position pos:line="848" pos:column="20"/></name></expr>;<pos:position pos:line="848" pos:column="21"/></return></block></then></if>


  <if pos:line="851" pos:column="3">if<condition pos:line="851" pos:column="5">(<expr><operator pos:line="851" pos:column="6">!<pos:position pos:line="851" pos:column="7"/></operator><name pos:line="851" pos:column="7">ctx<pos:position pos:line="851" pos:column="10"/></name></expr>)<pos:position pos:line="851" pos:column="11"/></condition><then pos:line="851" pos:column="11">
    <block type="pseudo"><return pos:line="852" pos:column="5">return <expr><name pos:line="852" pos:column="12">result<pos:position pos:line="852" pos:column="18"/></name></expr>;<pos:position pos:line="852" pos:column="19"/></return></block></then></if>

  <do pos:line="854" pos:column="3">do <block pos:line="854" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="855" pos:column="5">SecTrustRef<pos:position pos:line="855" pos:column="16"/></name></type> <name pos:line="855" pos:column="17">trust<pos:position pos:line="855" pos:column="22"/></name></decl>;<pos:position pos:line="855" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="856" pos:column="5">OSStatus<pos:position pos:line="856" pos:column="13"/></name></type> <name pos:line="856" pos:column="14">ret<pos:position pos:line="856" pos:column="17"/></name> <init pos:line="856" pos:column="18">= <expr><call><name pos:line="856" pos:column="20">SSLCopyPeerTrust<pos:position pos:line="856" pos:column="36"/></name><argument_list pos:line="856" pos:column="36">(<argument><expr><name pos:line="856" pos:column="37">ctx<pos:position pos:line="856" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="856" pos:column="42">&amp;<pos:position pos:line="856" pos:column="47"/></operator><name pos:line="856" pos:column="43">trust<pos:position pos:line="856" pos:column="48"/></name></expr></argument>)<pos:position pos:line="856" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="856" pos:column="50"/></decl_stmt>
    <if pos:line="857" pos:column="5">if<condition pos:line="857" pos:column="7">(<expr><name pos:line="857" pos:column="8">ret<pos:position pos:line="857" pos:column="11"/></name> <operator pos:line="857" pos:column="12">!=<pos:position pos:line="857" pos:column="14"/></operator> <name pos:line="857" pos:column="15">noErr<pos:position pos:line="857" pos:column="20"/></name> <operator pos:line="857" pos:column="21">||<pos:position pos:line="857" pos:column="23"/></operator> <name pos:line="857" pos:column="24">trust<pos:position pos:line="857" pos:column="29"/></name> <operator pos:line="857" pos:column="30">==<pos:position pos:line="857" pos:column="32"/></operator> <name pos:line="857" pos:column="33">NULL<pos:position pos:line="857" pos:column="37"/></name></expr>)<pos:position pos:line="857" pos:column="38"/></condition><then pos:line="857" pos:column="38">
      <block type="pseudo"><break pos:line="858" pos:column="7">break;<pos:position pos:line="858" pos:column="13"/></break></block></then></if>

    <decl_stmt><decl><type><name pos:line="860" pos:column="5">SecKeyRef<pos:position pos:line="860" pos:column="14"/></name></type> <name pos:line="860" pos:column="15">keyRef<pos:position pos:line="860" pos:column="21"/></name> <init pos:line="860" pos:column="22">= <expr><call><name pos:line="860" pos:column="24">SecTrustCopyPublicKey<pos:position pos:line="860" pos:column="45"/></name><argument_list pos:line="860" pos:column="45">(<argument><expr><name pos:line="860" pos:column="46">trust<pos:position pos:line="860" pos:column="51"/></name></expr></argument>)<pos:position pos:line="860" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="860" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="861" pos:column="5">CFRelease<pos:position pos:line="861" pos:column="14"/></name><argument_list pos:line="861" pos:column="14">(<argument><expr><name pos:line="861" pos:column="15">trust<pos:position pos:line="861" pos:column="20"/></name></expr></argument>)<pos:position pos:line="861" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="861" pos:column="22"/></expr_stmt>
    <if pos:line="862" pos:column="5">if<condition pos:line="862" pos:column="7">(<expr><name pos:line="862" pos:column="8">keyRef<pos:position pos:line="862" pos:column="14"/></name> <operator pos:line="862" pos:column="15">==<pos:position pos:line="862" pos:column="17"/></operator> <name pos:line="862" pos:column="18">NULL<pos:position pos:line="862" pos:column="22"/></name></expr>)<pos:position pos:line="862" pos:column="23"/></condition><then pos:line="862" pos:column="23">
      <block type="pseudo"><break pos:line="863" pos:column="7">break;<pos:position pos:line="863" pos:column="13"/></break></block></then></if>

<cpp:ifdef pos:line="865" pos:column="1">#<cpp:directive pos:line="865" pos:column="2">ifdef<pos:position pos:line="865" pos:column="7"/></cpp:directive> <name pos:line="865" pos:column="8">DARWIN_SSL_PINNEDPUBKEY_V1<pos:position pos:line="865" pos:column="34"/></name></cpp:ifdef>

    <expr_stmt><expr><name pos:line="867" pos:column="5">publicKeyBits<pos:position pos:line="867" pos:column="18"/></name> <operator pos:line="867" pos:column="19">=<pos:position pos:line="867" pos:column="20"/></operator> <call><name pos:line="867" pos:column="21">SecKeyCopyExternalRepresentation<pos:position pos:line="867" pos:column="53"/></name><argument_list pos:line="867" pos:column="53">(<argument><expr><name pos:line="867" pos:column="54">keyRef<pos:position pos:line="867" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="867" pos:column="62">NULL<pos:position pos:line="867" pos:column="66"/></name></expr></argument>)<pos:position pos:line="867" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="867" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="868" pos:column="5">CFRelease<pos:position pos:line="868" pos:column="14"/></name><argument_list pos:line="868" pos:column="14">(<argument><expr><name pos:line="868" pos:column="15">keyRef<pos:position pos:line="868" pos:column="21"/></name></expr></argument>)<pos:position pos:line="868" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="868" pos:column="23"/></expr_stmt>
    <if pos:line="869" pos:column="5">if<condition pos:line="869" pos:column="7">(<expr><name pos:line="869" pos:column="8">publicKeyBits<pos:position pos:line="869" pos:column="21"/></name> <operator pos:line="869" pos:column="22">==<pos:position pos:line="869" pos:column="24"/></operator> <name pos:line="869" pos:column="25">NULL<pos:position pos:line="869" pos:column="29"/></name></expr>)<pos:position pos:line="869" pos:column="30"/></condition><then pos:line="869" pos:column="30">
      <block type="pseudo"><break pos:line="870" pos:column="7">break;<pos:position pos:line="870" pos:column="13"/></break></block></then></if>

<cpp:elif pos:line="872" pos:column="1">#<cpp:directive pos:line="872" pos:column="2">elif<pos:position pos:line="872" pos:column="6"/></cpp:directive> <expr><name pos:line="872" pos:column="7">DARWIN_SSL_PINNEDPUBKEY_V2<pos:position pos:line="872" pos:column="33"/></name></expr></cpp:elif>

    <decl_stmt><decl><type><name pos:line="874" pos:column="5">OSStatus<pos:position pos:line="874" pos:column="13"/></name></type> <name pos:line="874" pos:column="14">success<pos:position pos:line="874" pos:column="21"/></name> <init pos:line="874" pos:column="22">= <expr><call><name pos:line="874" pos:column="24">SecItemExport<pos:position pos:line="874" pos:column="37"/></name><argument_list pos:line="874" pos:column="37">(<argument><expr><name pos:line="874" pos:column="38">keyRef<pos:position pos:line="874" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="874" pos:column="46">kSecFormatOpenSSL<pos:position pos:line="874" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="874" pos:column="65">0<pos:position pos:line="874" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="874" pos:column="68">NULL<pos:position pos:line="874" pos:column="72"/></name></expr></argument>,
                                     <argument><expr><operator pos:line="875" pos:column="38">&amp;<pos:position pos:line="875" pos:column="43"/></operator><name pos:line="875" pos:column="39">publicKeyBits<pos:position pos:line="875" pos:column="52"/></name></expr></argument>)<pos:position pos:line="875" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="875" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="876" pos:column="5">CFRelease<pos:position pos:line="876" pos:column="14"/></name><argument_list pos:line="876" pos:column="14">(<argument><expr><name pos:line="876" pos:column="15">keyRef<pos:position pos:line="876" pos:column="21"/></name></expr></argument>)<pos:position pos:line="876" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="876" pos:column="23"/></expr_stmt>
    <if pos:line="877" pos:column="5">if<condition pos:line="877" pos:column="7">(<expr><name pos:line="877" pos:column="8">success<pos:position pos:line="877" pos:column="15"/></name> <operator pos:line="877" pos:column="16">!=<pos:position pos:line="877" pos:column="18"/></operator> <name pos:line="877" pos:column="19">errSecSuccess<pos:position pos:line="877" pos:column="32"/></name> <operator pos:line="877" pos:column="33">||<pos:position pos:line="877" pos:column="35"/></operator> <name pos:line="877" pos:column="36">publicKeyBits<pos:position pos:line="877" pos:column="49"/></name> <operator pos:line="877" pos:column="50">==<pos:position pos:line="877" pos:column="52"/></operator> <name pos:line="877" pos:column="53">NULL<pos:position pos:line="877" pos:column="57"/></name></expr>)<pos:position pos:line="877" pos:column="58"/></condition><then pos:line="877" pos:column="58">
      <block type="pseudo"><break pos:line="878" pos:column="7">break;<pos:position pos:line="878" pos:column="13"/></break></block></then></if>

<cpp:endif pos:line="880" pos:column="1">#<cpp:directive pos:line="880" pos:column="2">endif<pos:position pos:line="880" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="880" pos:column="8">/* DARWIN_SSL_PINNEDPUBKEY_V2 */</comment>

    <expr_stmt><expr><name pos:line="882" pos:column="5">pubkeylen<pos:position pos:line="882" pos:column="14"/></name> <operator pos:line="882" pos:column="15">=<pos:position pos:line="882" pos:column="16"/></operator> <call><name pos:line="882" pos:column="17">CFDataGetLength<pos:position pos:line="882" pos:column="32"/></name><argument_list pos:line="882" pos:column="32">(<argument><expr><name pos:line="882" pos:column="33">publicKeyBits<pos:position pos:line="882" pos:column="46"/></name></expr></argument>)<pos:position pos:line="882" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="882" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="883" pos:column="5">pubkey<pos:position pos:line="883" pos:column="11"/></name> <operator pos:line="883" pos:column="12">=<pos:position pos:line="883" pos:column="13"/></operator> <operator pos:line="883" pos:column="14">(<pos:position pos:line="883" pos:column="15"/></operator><name pos:line="883" pos:column="15">unsigned<pos:position pos:line="883" pos:column="23"/></name> <name pos:line="883" pos:column="24">char<pos:position pos:line="883" pos:column="28"/></name> <operator pos:line="883" pos:column="29">*<pos:position pos:line="883" pos:column="30"/></operator><operator pos:line="883" pos:column="30">)<pos:position pos:line="883" pos:column="31"/></operator><call><name pos:line="883" pos:column="31">CFDataGetBytePtr<pos:position pos:line="883" pos:column="47"/></name><argument_list pos:line="883" pos:column="47">(<argument><expr><name pos:line="883" pos:column="48">publicKeyBits<pos:position pos:line="883" pos:column="61"/></name></expr></argument>)<pos:position pos:line="883" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="883" pos:column="63"/></expr_stmt>

    <switch pos:line="885" pos:column="5">switch<condition pos:line="885" pos:column="11">(<expr><name pos:line="885" pos:column="12">pubkeylen<pos:position pos:line="885" pos:column="21"/></name></expr>)<pos:position pos:line="885" pos:column="22"/></condition> <block pos:line="885" pos:column="23">{
      <case pos:line="886" pos:column="7">case <expr><literal type="number" pos:line="886" pos:column="12">526<pos:position pos:line="886" pos:column="15"/></literal></expr>:<pos:position pos:line="886" pos:column="16"/></case>
        <comment type="block" pos:line="887" pos:column="9">/* 4096 bit RSA pubkeylen == 526 */</comment>
        <expr_stmt><expr><name pos:line="888" pos:column="9">spkiHeader<pos:position pos:line="888" pos:column="19"/></name> <operator pos:line="888" pos:column="20">=<pos:position pos:line="888" pos:column="21"/></operator> <name pos:line="888" pos:column="22">rsa4096SpkiHeader<pos:position pos:line="888" pos:column="39"/></name></expr>;<pos:position pos:line="888" pos:column="40"/></expr_stmt>
        <break pos:line="889" pos:column="9">break;<pos:position pos:line="889" pos:column="15"/></break>
      <case pos:line="890" pos:column="7">case <expr><literal type="number" pos:line="890" pos:column="12">270<pos:position pos:line="890" pos:column="15"/></literal></expr>:<pos:position pos:line="890" pos:column="16"/></case>
        <comment type="block" pos:line="891" pos:column="9">/* 2048 bit RSA pubkeylen == 270 */</comment>
        <expr_stmt><expr><name pos:line="892" pos:column="9">spkiHeader<pos:position pos:line="892" pos:column="19"/></name> <operator pos:line="892" pos:column="20">=<pos:position pos:line="892" pos:column="21"/></operator> <name pos:line="892" pos:column="22">rsa2048SpkiHeader<pos:position pos:line="892" pos:column="39"/></name></expr>;<pos:position pos:line="892" pos:column="40"/></expr_stmt>
        <break pos:line="893" pos:column="9">break;<pos:position pos:line="893" pos:column="15"/></break>
<cpp:ifdef pos:line="894" pos:column="1">#<cpp:directive pos:line="894" pos:column="2">ifdef<pos:position pos:line="894" pos:column="7"/></cpp:directive> <name pos:line="894" pos:column="8">DARWIN_SSL_PINNEDPUBKEY_V1<pos:position pos:line="894" pos:column="34"/></name></cpp:ifdef>
      <case pos:line="895" pos:column="7">case <expr><literal type="number" pos:line="895" pos:column="12">65<pos:position pos:line="895" pos:column="14"/></literal></expr>:<pos:position pos:line="895" pos:column="15"/></case>
        <comment type="block" pos:line="896" pos:column="9">/* ecDSA secp256r1 pubkeylen == 65 */</comment>
        <expr_stmt><expr><name pos:line="897" pos:column="9">spkiHeader<pos:position pos:line="897" pos:column="19"/></name> <operator pos:line="897" pos:column="20">=<pos:position pos:line="897" pos:column="21"/></operator> <name pos:line="897" pos:column="22">ecDsaSecp256r1SpkiHeader<pos:position pos:line="897" pos:column="46"/></name></expr>;<pos:position pos:line="897" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="898" pos:column="9">spkiHeaderLength<pos:position pos:line="898" pos:column="25"/></name> <operator pos:line="898" pos:column="26">=<pos:position pos:line="898" pos:column="27"/></operator> <literal type="number" pos:line="898" pos:column="28">26<pos:position pos:line="898" pos:column="30"/></literal></expr>;<pos:position pos:line="898" pos:column="31"/></expr_stmt>
        <break pos:line="899" pos:column="9">break;<pos:position pos:line="899" pos:column="15"/></break>
      <case pos:line="900" pos:column="7">case <expr><literal type="number" pos:line="900" pos:column="12">97<pos:position pos:line="900" pos:column="14"/></literal></expr>:<pos:position pos:line="900" pos:column="15"/></case>
        <comment type="block" pos:line="901" pos:column="9">/* ecDSA secp384r1 pubkeylen == 97 */</comment>
        <expr_stmt><expr><name pos:line="902" pos:column="9">spkiHeader<pos:position pos:line="902" pos:column="19"/></name> <operator pos:line="902" pos:column="20">=<pos:position pos:line="902" pos:column="21"/></operator> <name pos:line="902" pos:column="22">ecDsaSecp384r1SpkiHeader<pos:position pos:line="902" pos:column="46"/></name></expr>;<pos:position pos:line="902" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="903" pos:column="9">spkiHeaderLength<pos:position pos:line="903" pos:column="25"/></name> <operator pos:line="903" pos:column="26">=<pos:position pos:line="903" pos:column="27"/></operator> <literal type="number" pos:line="903" pos:column="28">23<pos:position pos:line="903" pos:column="30"/></literal></expr>;<pos:position pos:line="903" pos:column="31"/></expr_stmt>
        <break pos:line="904" pos:column="9">break;<pos:position pos:line="904" pos:column="15"/></break>
      <default pos:line="905" pos:column="7">default:<pos:position pos:line="905" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="906" pos:column="9">infof<pos:position pos:line="906" pos:column="14"/></name><argument_list pos:line="906" pos:column="14">(<argument><expr><name pos:line="906" pos:column="15">data<pos:position pos:line="906" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="906" pos:column="21">"SSL: unhandled public key length: %d\n"<pos:position pos:line="906" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="906" pos:column="63">pubkeylen<pos:position pos:line="906" pos:column="72"/></name></expr></argument>)<pos:position pos:line="906" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="906" pos:column="74"/></expr_stmt>
<cpp:elif pos:line="907" pos:column="1">#<cpp:directive pos:line="907" pos:column="2">elif<pos:position pos:line="907" pos:column="6"/></cpp:directive> <expr><name pos:line="907" pos:column="7">DARWIN_SSL_PINNEDPUBKEY_V2<pos:position pos:line="907" pos:column="33"/></name></expr></cpp:elif>
      <default pos:line="908" pos:column="7">default:<pos:position pos:line="908" pos:column="15"/></default>
        <comment type="block" pos:line="909" pos:column="9">/* ecDSA secp256r1 pubkeylen == 91 header already included?
         * ecDSA secp384r1 header already included too
         * we assume rest of algorithms do same, so do nothing
         */</comment>
        <expr_stmt><expr><name pos:line="913" pos:column="9">result<pos:position pos:line="913" pos:column="15"/></name> <operator pos:line="913" pos:column="16">=<pos:position pos:line="913" pos:column="17"/></operator> <call><name pos:line="913" pos:column="18">Curl_pin_peer_pubkey<pos:position pos:line="913" pos:column="38"/></name><argument_list pos:line="913" pos:column="38">(<argument><expr><name pos:line="913" pos:column="39">data<pos:position pos:line="913" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="913" pos:column="45">pinnedpubkey<pos:position pos:line="913" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="913" pos:column="59">pubkey<pos:position pos:line="913" pos:column="65"/></name></expr></argument>,
                                    <argument><expr><name pos:line="914" pos:column="37">pubkeylen<pos:position pos:line="914" pos:column="46"/></name></expr></argument>)<pos:position pos:line="914" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="914" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="915" pos:column="1">#<cpp:directive pos:line="915" pos:column="2">endif<pos:position pos:line="915" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="915" pos:column="8">/* DARWIN_SSL_PINNEDPUBKEY_V2 */</comment>
        <continue pos:line="916" pos:column="9">continue;<pos:position pos:line="916" pos:column="18"/></continue> <comment type="block" pos:line="916" pos:column="19">/* break from loop */</comment>
    }<pos:position pos:line="917" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="919" pos:column="5">realpubkeylen<pos:position pos:line="919" pos:column="18"/></name> <operator pos:line="919" pos:column="19">=<pos:position pos:line="919" pos:column="20"/></operator> <name pos:line="919" pos:column="21">pubkeylen<pos:position pos:line="919" pos:column="30"/></name> <operator pos:line="919" pos:column="31">+<pos:position pos:line="919" pos:column="32"/></operator> <name pos:line="919" pos:column="33">spkiHeaderLength<pos:position pos:line="919" pos:column="49"/></name></expr>;<pos:position pos:line="919" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="920" pos:column="5">realpubkey<pos:position pos:line="920" pos:column="15"/></name> <operator pos:line="920" pos:column="16">=<pos:position pos:line="920" pos:column="17"/></operator> <call><name pos:line="920" pos:column="18">malloc<pos:position pos:line="920" pos:column="24"/></name><argument_list pos:line="920" pos:column="24">(<argument><expr><name pos:line="920" pos:column="25">realpubkeylen<pos:position pos:line="920" pos:column="38"/></name></expr></argument>)<pos:position pos:line="920" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="920" pos:column="40"/></expr_stmt>
    <if pos:line="921" pos:column="5">if<condition pos:line="921" pos:column="7">(<expr><operator pos:line="921" pos:column="8">!<pos:position pos:line="921" pos:column="9"/></operator><name pos:line="921" pos:column="9">realpubkey<pos:position pos:line="921" pos:column="19"/></name></expr>)<pos:position pos:line="921" pos:column="20"/></condition><then pos:line="921" pos:column="20">
      <block type="pseudo"><break pos:line="922" pos:column="7">break;<pos:position pos:line="922" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><call><name pos:line="924" pos:column="5">memcpy<pos:position pos:line="924" pos:column="11"/></name><argument_list pos:line="924" pos:column="11">(<argument><expr><name pos:line="924" pos:column="12">realpubkey<pos:position pos:line="924" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="924" pos:column="24">spkiHeader<pos:position pos:line="924" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="924" pos:column="36">spkiHeaderLength<pos:position pos:line="924" pos:column="52"/></name></expr></argument>)<pos:position pos:line="924" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="924" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="925" pos:column="5">memcpy<pos:position pos:line="925" pos:column="11"/></name><argument_list pos:line="925" pos:column="11">(<argument><expr><name pos:line="925" pos:column="12">realpubkey<pos:position pos:line="925" pos:column="22"/></name> <operator pos:line="925" pos:column="23">+<pos:position pos:line="925" pos:column="24"/></operator> <name pos:line="925" pos:column="25">spkiHeaderLength<pos:position pos:line="925" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="925" pos:column="43">pubkey<pos:position pos:line="925" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="925" pos:column="51">pubkeylen<pos:position pos:line="925" pos:column="60"/></name></expr></argument>)<pos:position pos:line="925" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="925" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><name pos:line="927" pos:column="5">result<pos:position pos:line="927" pos:column="11"/></name> <operator pos:line="927" pos:column="12">=<pos:position pos:line="927" pos:column="13"/></operator> <call><name pos:line="927" pos:column="14">Curl_pin_peer_pubkey<pos:position pos:line="927" pos:column="34"/></name><argument_list pos:line="927" pos:column="34">(<argument><expr><name pos:line="927" pos:column="35">data<pos:position pos:line="927" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="927" pos:column="41">pinnedpubkey<pos:position pos:line="927" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="927" pos:column="55">realpubkey<pos:position pos:line="927" pos:column="65"/></name></expr></argument>,
                                  <argument><expr><name pos:line="928" pos:column="35">realpubkeylen<pos:position pos:line="928" pos:column="48"/></name></expr></argument>)<pos:position pos:line="928" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="928" pos:column="50"/></expr_stmt>

  }<pos:position pos:line="930" pos:column="4"/></block> while<condition pos:line="930" pos:column="10">(<expr><literal type="number" pos:line="930" pos:column="11">0<pos:position pos:line="930" pos:column="12"/></literal></expr>)<pos:position pos:line="930" pos:column="13"/></condition>;<pos:position pos:line="930" pos:column="14"/></do>

  <expr_stmt><expr><call><name pos:line="932" pos:column="3">Curl_safefree<pos:position pos:line="932" pos:column="16"/></name><argument_list pos:line="932" pos:column="16">(<argument><expr><name pos:line="932" pos:column="17">realpubkey<pos:position pos:line="932" pos:column="27"/></name></expr></argument>)<pos:position pos:line="932" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="932" pos:column="29"/></expr_stmt>
  <if pos:line="933" pos:column="3">if<condition pos:line="933" pos:column="5">(<expr><name pos:line="933" pos:column="6">publicKeyBits<pos:position pos:line="933" pos:column="19"/></name> <operator pos:line="933" pos:column="20">!=<pos:position pos:line="933" pos:column="22"/></operator> <name pos:line="933" pos:column="23">NULL<pos:position pos:line="933" pos:column="27"/></name></expr>)<pos:position pos:line="933" pos:column="28"/></condition><then pos:line="933" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="934" pos:column="5">CFRelease<pos:position pos:line="934" pos:column="14"/></name><argument_list pos:line="934" pos:column="14">(<argument><expr><name pos:line="934" pos:column="15">publicKeyBits<pos:position pos:line="934" pos:column="28"/></name></expr></argument>)<pos:position pos:line="934" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="934" pos:column="30"/></expr_stmt></block></then></if>

  <return pos:line="936" pos:column="3">return <expr><name pos:line="936" pos:column="10">result<pos:position pos:line="936" pos:column="16"/></name></expr>;<pos:position pos:line="936" pos:column="17"/></return>
}<pos:position pos:line="937" pos:column="2"/></block></function>
<cpp:endif pos:line="938" pos:column="1">#<cpp:directive pos:line="938" pos:column="2">endif<pos:position pos:line="938" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="938" pos:column="8">/* DARWIN_SSL_PINNEDPUBKEY */</comment>

<function><specifier pos:line="940" pos:column="1">static<pos:position pos:line="940" pos:column="7"/></specifier> <type><name pos:line="940" pos:column="8">CURLcode<pos:position pos:line="940" pos:column="16"/></name></type>
<name pos:line="941" pos:column="1">darwinssl_connect_step2<pos:position pos:line="941" pos:column="24"/></name><parameter_list pos:line="941" pos:column="24">(<parameter><decl><type><name><name pos:line="941" pos:column="25">struct<pos:position pos:line="941" pos:column="31"/></name> <name pos:line="941" pos:column="32">connectdata<pos:position pos:line="941" pos:column="43"/></name></name> <modifier pos:line="941" pos:column="44">*<pos:position pos:line="941" pos:column="45"/></modifier></type><name pos:line="941" pos:column="45">conn<pos:position pos:line="941" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="941" pos:column="51">int<pos:position pos:line="941" pos:column="54"/></name></type> <name pos:line="941" pos:column="55">sockindex<pos:position pos:line="941" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="941" pos:column="65"/></parameter_list>
<block pos:line="942" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="943" pos:column="3">struct<pos:position pos:line="943" pos:column="9"/></name> <name pos:line="943" pos:column="10">Curl_easy<pos:position pos:line="943" pos:column="19"/></name></name> <modifier pos:line="943" pos:column="20">*<pos:position pos:line="943" pos:column="21"/></modifier></type><name pos:line="943" pos:column="21">data<pos:position pos:line="943" pos:column="25"/></name> <init pos:line="943" pos:column="26">= <expr><name><name pos:line="943" pos:column="28">conn<pos:position pos:line="943" pos:column="32"/></name><operator pos:line="943" pos:column="32">-&gt;<pos:position pos:line="943" pos:column="37"/></operator><name pos:line="943" pos:column="34">data<pos:position pos:line="943" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="943" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="944" pos:column="3">struct<pos:position pos:line="944" pos:column="9"/></name> <name pos:line="944" pos:column="10">ssl_connect_data<pos:position pos:line="944" pos:column="26"/></name></name> <modifier pos:line="944" pos:column="27">*<pos:position pos:line="944" pos:column="28"/></modifier></type><name pos:line="944" pos:column="28">connssl<pos:position pos:line="944" pos:column="35"/></name> <init pos:line="944" pos:column="36">= <expr><operator pos:line="944" pos:column="38">&amp;<pos:position pos:line="944" pos:column="43"/></operator><name><name pos:line="944" pos:column="39">conn<pos:position pos:line="944" pos:column="43"/></name><operator pos:line="944" pos:column="43">-&gt;<pos:position pos:line="944" pos:column="48"/></operator><name pos:line="944" pos:column="45">ssl<pos:position pos:line="944" pos:column="48"/></name><index pos:line="944" pos:column="48">[<expr><name pos:line="944" pos:column="49">sockindex<pos:position pos:line="944" pos:column="58"/></name></expr>]<pos:position pos:line="944" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="944" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="945" pos:column="3">OSStatus<pos:position pos:line="945" pos:column="11"/></name></type> <name pos:line="945" pos:column="12">err<pos:position pos:line="945" pos:column="15"/></name></decl>;<pos:position pos:line="945" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="946" pos:column="3">SSLCipherSuite<pos:position pos:line="946" pos:column="17"/></name></type> <name pos:line="946" pos:column="18">cipher<pos:position pos:line="946" pos:column="24"/></name></decl>;<pos:position pos:line="946" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="947" pos:column="3">SSLProtocol<pos:position pos:line="947" pos:column="14"/></name></type> <name pos:line="947" pos:column="15">protocol<pos:position pos:line="947" pos:column="23"/></name> <init pos:line="947" pos:column="24">= <expr><literal type="number" pos:line="947" pos:column="26">0<pos:position pos:line="947" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="947" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="948" pos:column="3">const<pos:position pos:line="948" pos:column="8"/></specifier> <name pos:line="948" pos:column="9">char<pos:position pos:line="948" pos:column="13"/></name> <modifier pos:line="948" pos:column="14">*<pos:position pos:line="948" pos:column="15"/></modifier> <specifier pos:line="948" pos:column="16">const<pos:position pos:line="948" pos:column="21"/></specifier></type> <name pos:line="948" pos:column="22">hostname<pos:position pos:line="948" pos:column="30"/></name> <init pos:line="948" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="948" pos:column="33">SSL_IS_PROXY<pos:position pos:line="948" pos:column="45"/></name><argument_list pos:line="948" pos:column="45">()<pos:position pos:line="948" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="948" pos:column="49"/></condition><then pos:line="948" pos:column="49"> <expr><name><name pos:line="948" pos:column="50">conn<pos:position pos:line="948" pos:column="54"/></name><operator pos:line="948" pos:column="54">-&gt;<pos:position pos:line="948" pos:column="59"/></operator><name pos:line="948" pos:column="56">http_proxy<pos:position pos:line="948" pos:column="66"/></name><operator pos:line="948" pos:column="66">.<pos:position pos:line="948" pos:column="67"/></operator><name pos:line="948" pos:column="67">host<pos:position pos:line="948" pos:column="71"/></name><operator pos:line="948" pos:column="71">.<pos:position pos:line="948" pos:column="72"/></operator><name pos:line="948" pos:column="72">name<pos:position pos:line="948" pos:column="76"/></name></name></expr> <pos:position pos:line="948" pos:column="77"/></then><else pos:line="948" pos:column="77">:
    <expr><name><name pos:line="949" pos:column="5">conn<pos:position pos:line="949" pos:column="9"/></name><operator pos:line="949" pos:column="9">-&gt;<pos:position pos:line="949" pos:column="14"/></operator><name pos:line="949" pos:column="11">host<pos:position pos:line="949" pos:column="15"/></name><operator pos:line="949" pos:column="15">.<pos:position pos:line="949" pos:column="16"/></operator><name pos:line="949" pos:column="16">name<pos:position pos:line="949" pos:column="20"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="949" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="951" pos:column="3">DEBUGASSERT<pos:position pos:line="951" pos:column="14"/></name><argument_list pos:line="951" pos:column="14">(<argument><expr><name pos:line="951" pos:column="15">ssl_connect_2<pos:position pos:line="951" pos:column="28"/></name> <operator pos:line="951" pos:column="29">==<pos:position pos:line="951" pos:column="31"/></operator> <name><name pos:line="951" pos:column="32">connssl<pos:position pos:line="951" pos:column="39"/></name><operator pos:line="951" pos:column="39">-&gt;<pos:position pos:line="951" pos:column="44"/></operator><name pos:line="951" pos:column="41">connecting_state<pos:position pos:line="951" pos:column="57"/></name></name>
              <operator pos:line="952" pos:column="15">||<pos:position pos:line="952" pos:column="17"/></operator> <name pos:line="952" pos:column="18">ssl_connect_2_reading<pos:position pos:line="952" pos:column="39"/></name> <operator pos:line="952" pos:column="40">==<pos:position pos:line="952" pos:column="42"/></operator> <name><name pos:line="952" pos:column="43">connssl<pos:position pos:line="952" pos:column="50"/></name><operator pos:line="952" pos:column="50">-&gt;<pos:position pos:line="952" pos:column="55"/></operator><name pos:line="952" pos:column="52">connecting_state<pos:position pos:line="952" pos:column="68"/></name></name>
              <operator pos:line="953" pos:column="15">||<pos:position pos:line="953" pos:column="17"/></operator> <name pos:line="953" pos:column="18">ssl_connect_2_writing<pos:position pos:line="953" pos:column="39"/></name> <operator pos:line="953" pos:column="40">==<pos:position pos:line="953" pos:column="42"/></operator> <name><name pos:line="953" pos:column="43">connssl<pos:position pos:line="953" pos:column="50"/></name><operator pos:line="953" pos:column="50">-&gt;<pos:position pos:line="953" pos:column="55"/></operator><name pos:line="953" pos:column="52">connecting_state<pos:position pos:line="953" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="953" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="953" pos:column="70"/></expr_stmt>

  <comment type="block" pos:line="955" pos:column="3">/* Here goes nothing: */</comment>
  <expr_stmt><expr><name pos:line="956" pos:column="3">err<pos:position pos:line="956" pos:column="6"/></name> <operator pos:line="956" pos:column="7">=<pos:position pos:line="956" pos:column="8"/></operator> <call><name pos:line="956" pos:column="9">SSLHandshake<pos:position pos:line="956" pos:column="21"/></name><argument_list pos:line="956" pos:column="21">(<argument><expr><name><name pos:line="956" pos:column="22">BACKEND<pos:position pos:line="956" pos:column="29"/></name><operator pos:line="956" pos:column="29">-&gt;<pos:position pos:line="956" pos:column="34"/></operator><name pos:line="956" pos:column="31">ssl_ctx<pos:position pos:line="956" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="956" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="956" pos:column="40"/></expr_stmt>

  <if pos:line="958" pos:column="3">if<condition pos:line="958" pos:column="5">(<expr><name pos:line="958" pos:column="6">err<pos:position pos:line="958" pos:column="9"/></name> <operator pos:line="958" pos:column="10">!=<pos:position pos:line="958" pos:column="12"/></operator> <name pos:line="958" pos:column="13">noErr<pos:position pos:line="958" pos:column="18"/></name></expr>)<pos:position pos:line="958" pos:column="19"/></condition><then pos:line="958" pos:column="19"> <block pos:line="958" pos:column="20">{
    <switch pos:line="959" pos:column="5">switch<condition pos:line="959" pos:column="11">(<expr><name pos:line="959" pos:column="12">err<pos:position pos:line="959" pos:column="15"/></name></expr>)<pos:position pos:line="959" pos:column="16"/></condition> <block pos:line="959" pos:column="17">{
      <case pos:line="960" pos:column="7">case <expr><name pos:line="960" pos:column="12">errSSLWouldBlock<pos:position pos:line="960" pos:column="28"/></name></expr>:<pos:position pos:line="960" pos:column="29"/></case>  <comment type="block" pos:line="960" pos:column="31">/* they're not done with us yet */</comment>
        <expr_stmt><expr><name><name pos:line="961" pos:column="9">connssl<pos:position pos:line="961" pos:column="16"/></name><operator pos:line="961" pos:column="16">-&gt;<pos:position pos:line="961" pos:column="21"/></operator><name pos:line="961" pos:column="18">connecting_state<pos:position pos:line="961" pos:column="34"/></name></name> <operator pos:line="961" pos:column="35">=<pos:position pos:line="961" pos:column="36"/></operator> <ternary><condition><expr><name><name pos:line="961" pos:column="37">BACKEND<pos:position pos:line="961" pos:column="44"/></name><operator pos:line="961" pos:column="44">-&gt;<pos:position pos:line="961" pos:column="49"/></operator><name pos:line="961" pos:column="46">ssl_direction<pos:position pos:line="961" pos:column="59"/></name></name></expr> ?<pos:position pos:line="961" pos:column="61"/></condition><then pos:line="961" pos:column="61">
            <expr><name pos:line="962" pos:column="13">ssl_connect_2_writing<pos:position pos:line="962" pos:column="34"/></name></expr> <pos:position pos:line="962" pos:column="35"/></then><else pos:line="962" pos:column="35">: <expr><name pos:line="962" pos:column="37">ssl_connect_2_reading<pos:position pos:line="962" pos:column="58"/></name></expr></else></ternary></expr>;<pos:position pos:line="962" pos:column="59"/></expr_stmt>
        <return pos:line="963" pos:column="9">return <expr><name pos:line="963" pos:column="16">CURLE_OK<pos:position pos:line="963" pos:column="24"/></name></expr>;<pos:position pos:line="963" pos:column="25"/></return>

      <comment type="block" pos:line="965" pos:column="7">/* The below is errSSLServerAuthCompleted; it's not defined in
        Leopard's headers */</comment>
      <case pos:line="967" pos:column="7">case <expr><operator pos:line="967" pos:column="12">-<pos:position pos:line="967" pos:column="13"/></operator><literal type="number" pos:line="967" pos:column="13">9841<pos:position pos:line="967" pos:column="17"/></literal></expr>:<pos:position pos:line="967" pos:column="18"/></case>
        <if pos:line="968" pos:column="9">if<condition pos:line="968" pos:column="11">(<expr><call><name pos:line="968" pos:column="12">SSL_CONN_CONFIG<pos:position pos:line="968" pos:column="27"/></name><argument_list pos:line="968" pos:column="27">(<argument><expr><name pos:line="968" pos:column="28">CAfile<pos:position pos:line="968" pos:column="34"/></name></expr></argument>)<pos:position pos:line="968" pos:column="35"/></argument_list></call> <operator pos:line="968" pos:column="36">&amp;&amp;<pos:position pos:line="968" pos:column="46"/></operator> <call><name pos:line="968" pos:column="39">SSL_CONN_CONFIG<pos:position pos:line="968" pos:column="54"/></name><argument_list pos:line="968" pos:column="54">(<argument><expr><name pos:line="968" pos:column="55">verifypeer<pos:position pos:line="968" pos:column="65"/></name></expr></argument>)<pos:position pos:line="968" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="968" pos:column="67"/></condition><then pos:line="968" pos:column="67"> <block pos:line="968" pos:column="68">{
          <decl_stmt><decl><type><name pos:line="969" pos:column="11">int<pos:position pos:line="969" pos:column="14"/></name></type> <name pos:line="969" pos:column="15">res<pos:position pos:line="969" pos:column="18"/></name> <init pos:line="969" pos:column="19">= <expr><call><name pos:line="969" pos:column="21">verify_cert<pos:position pos:line="969" pos:column="32"/></name><argument_list pos:line="969" pos:column="32">(<argument><expr><call><name pos:line="969" pos:column="33">SSL_CONN_CONFIG<pos:position pos:line="969" pos:column="48"/></name><argument_list pos:line="969" pos:column="48">(<argument><expr><name pos:line="969" pos:column="49">CAfile<pos:position pos:line="969" pos:column="55"/></name></expr></argument>)<pos:position pos:line="969" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="969" pos:column="58">data<pos:position pos:line="969" pos:column="62"/></name></expr></argument>,
                                <argument><expr><name><name pos:line="970" pos:column="33">BACKEND<pos:position pos:line="970" pos:column="40"/></name><operator pos:line="970" pos:column="40">-&gt;<pos:position pos:line="970" pos:column="45"/></operator><name pos:line="970" pos:column="42">ssl_ctx<pos:position pos:line="970" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="970" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="970" pos:column="51"/></decl_stmt>
          <if pos:line="971" pos:column="11">if<condition pos:line="971" pos:column="13">(<expr><name pos:line="971" pos:column="14">res<pos:position pos:line="971" pos:column="17"/></name> <operator pos:line="971" pos:column="18">!=<pos:position pos:line="971" pos:column="20"/></operator> <name pos:line="971" pos:column="21">CURLE_OK<pos:position pos:line="971" pos:column="29"/></name></expr>)<pos:position pos:line="971" pos:column="30"/></condition><then pos:line="971" pos:column="30">
            <block type="pseudo"><return pos:line="972" pos:column="13">return <expr><name pos:line="972" pos:column="20">res<pos:position pos:line="972" pos:column="23"/></name></expr>;<pos:position pos:line="972" pos:column="24"/></return></block></then></if>
        }<pos:position pos:line="973" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="974" pos:column="9">/* the documentation says we need to call SSLHandshake() again */</comment>
        <return pos:line="975" pos:column="9">return <expr><call><name pos:line="975" pos:column="16">darwinssl_connect_step2<pos:position pos:line="975" pos:column="39"/></name><argument_list pos:line="975" pos:column="39">(<argument><expr><name pos:line="975" pos:column="40">conn<pos:position pos:line="975" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="975" pos:column="46">sockindex<pos:position pos:line="975" pos:column="55"/></name></expr></argument>)<pos:position pos:line="975" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="975" pos:column="57"/></return>

      <comment type="block" pos:line="977" pos:column="7">/* These are all certificate problems with the server: */</comment>
      <case pos:line="978" pos:column="7">case <expr><name pos:line="978" pos:column="12">errSSLXCertChainInvalid<pos:position pos:line="978" pos:column="35"/></name></expr>:<pos:position pos:line="978" pos:column="36"/></case>
        <expr_stmt><expr><call><name pos:line="979" pos:column="9">failf<pos:position pos:line="979" pos:column="14"/></name><argument_list pos:line="979" pos:column="14">(<argument><expr><name pos:line="979" pos:column="15">data<pos:position pos:line="979" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="979" pos:column="21">"SSL certificate problem: Invalid certificate chain"<pos:position pos:line="979" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="979" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="979" pos:column="75"/></expr_stmt>
        <return pos:line="980" pos:column="9">return <expr><name pos:line="980" pos:column="16">CURLE_SSL_CACERT<pos:position pos:line="980" pos:column="32"/></name></expr>;<pos:position pos:line="980" pos:column="33"/></return>
      <case pos:line="981" pos:column="7">case <expr><name pos:line="981" pos:column="12">errSSLUnknownRootCert<pos:position pos:line="981" pos:column="33"/></name></expr>:<pos:position pos:line="981" pos:column="34"/></case>
        <expr_stmt><expr><call><name pos:line="982" pos:column="9">failf<pos:position pos:line="982" pos:column="14"/></name><argument_list pos:line="982" pos:column="14">(<argument><expr><name pos:line="982" pos:column="15">data<pos:position pos:line="982" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="982" pos:column="21">"SSL certificate problem: Untrusted root certificate"<pos:position pos:line="982" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="982" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="982" pos:column="76"/></expr_stmt>
        <return pos:line="983" pos:column="9">return <expr><name pos:line="983" pos:column="16">CURLE_SSL_CACERT<pos:position pos:line="983" pos:column="32"/></name></expr>;<pos:position pos:line="983" pos:column="33"/></return>
      <case pos:line="984" pos:column="7">case <expr><name pos:line="984" pos:column="12">errSSLNoRootCert<pos:position pos:line="984" pos:column="28"/></name></expr>:<pos:position pos:line="984" pos:column="29"/></case>
        <expr_stmt><expr><call><name pos:line="985" pos:column="9">failf<pos:position pos:line="985" pos:column="14"/></name><argument_list pos:line="985" pos:column="14">(<argument><expr><name pos:line="985" pos:column="15">data<pos:position pos:line="985" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="985" pos:column="21">"SSL certificate problem: No root certificate"<pos:position pos:line="985" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="985" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="985" pos:column="69"/></expr_stmt>
        <return pos:line="986" pos:column="9">return <expr><name pos:line="986" pos:column="16">CURLE_SSL_CACERT<pos:position pos:line="986" pos:column="32"/></name></expr>;<pos:position pos:line="986" pos:column="33"/></return>
      <case pos:line="987" pos:column="7">case <expr><name pos:line="987" pos:column="12">errSSLCertExpired<pos:position pos:line="987" pos:column="29"/></name></expr>:<pos:position pos:line="987" pos:column="30"/></case>
        <expr_stmt><expr><call><name pos:line="988" pos:column="9">failf<pos:position pos:line="988" pos:column="14"/></name><argument_list pos:line="988" pos:column="14">(<argument><expr><name pos:line="988" pos:column="15">data<pos:position pos:line="988" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="988" pos:column="21">"SSL certificate problem: Certificate chain had an "<pos:position pos:line="988" pos:column="73"/></literal>
              <literal type="string" pos:line="989" pos:column="15">"expired certificate"<pos:position pos:line="989" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="989" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="989" pos:column="38"/></expr_stmt>
        <return pos:line="990" pos:column="9">return <expr><name pos:line="990" pos:column="16">CURLE_SSL_CACERT<pos:position pos:line="990" pos:column="32"/></name></expr>;<pos:position pos:line="990" pos:column="33"/></return>
      <case pos:line="991" pos:column="7">case <expr><name pos:line="991" pos:column="12">errSSLBadCert<pos:position pos:line="991" pos:column="25"/></name></expr>:<pos:position pos:line="991" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="992" pos:column="9">failf<pos:position pos:line="992" pos:column="14"/></name><argument_list pos:line="992" pos:column="14">(<argument><expr><name pos:line="992" pos:column="15">data<pos:position pos:line="992" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="992" pos:column="21">"SSL certificate problem: Couldn't understand the server "<pos:position pos:line="992" pos:column="79"/></literal>
              <literal type="string" pos:line="993" pos:column="15">"certificate format"<pos:position pos:line="993" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="993" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="993" pos:column="37"/></expr_stmt>
        <return pos:line="994" pos:column="9">return <expr><name pos:line="994" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="994" pos:column="39"/></name></expr>;<pos:position pos:line="994" pos:column="40"/></return>

      <comment type="block" pos:line="996" pos:column="7">/* These are all certificate problems with the client: */</comment>
      <case pos:line="997" pos:column="7">case <expr><name pos:line="997" pos:column="12">errSecAuthFailed<pos:position pos:line="997" pos:column="28"/></name></expr>:<pos:position pos:line="997" pos:column="29"/></case>
        <expr_stmt><expr><call><name pos:line="998" pos:column="9">failf<pos:position pos:line="998" pos:column="14"/></name><argument_list pos:line="998" pos:column="14">(<argument><expr><name pos:line="998" pos:column="15">data<pos:position pos:line="998" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="998" pos:column="21">"SSL authentication failed"<pos:position pos:line="998" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="998" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="998" pos:column="50"/></expr_stmt>
        <return pos:line="999" pos:column="9">return <expr><name pos:line="999" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="999" pos:column="39"/></name></expr>;<pos:position pos:line="999" pos:column="40"/></return>
      <case pos:line="1000" pos:column="7">case <expr><name pos:line="1000" pos:column="12">errSSLPeerHandshakeFail<pos:position pos:line="1000" pos:column="35"/></name></expr>:<pos:position pos:line="1000" pos:column="36"/></case>
        <expr_stmt><expr><call><name pos:line="1001" pos:column="9">failf<pos:position pos:line="1001" pos:column="14"/></name><argument_list pos:line="1001" pos:column="14">(<argument><expr><name pos:line="1001" pos:column="15">data<pos:position pos:line="1001" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1001" pos:column="21">"SSL peer handshake failed, the server most likely "<pos:position pos:line="1001" pos:column="73"/></literal>
              <literal type="string" pos:line="1002" pos:column="15">"requires a client certificate to connect"<pos:position pos:line="1002" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="1002" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1002" pos:column="59"/></expr_stmt>
        <return pos:line="1003" pos:column="9">return <expr><name pos:line="1003" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1003" pos:column="39"/></name></expr>;<pos:position pos:line="1003" pos:column="40"/></return>
      <case pos:line="1004" pos:column="7">case <expr><name pos:line="1004" pos:column="12">errSSLPeerUnknownCA<pos:position pos:line="1004" pos:column="31"/></name></expr>:<pos:position pos:line="1004" pos:column="32"/></case>
        <expr_stmt><expr><call><name pos:line="1005" pos:column="9">failf<pos:position pos:line="1005" pos:column="14"/></name><argument_list pos:line="1005" pos:column="14">(<argument><expr><name pos:line="1005" pos:column="15">data<pos:position pos:line="1005" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1005" pos:column="21">"SSL server rejected the client certificate due to "<pos:position pos:line="1005" pos:column="73"/></literal>
              <literal type="string" pos:line="1006" pos:column="15">"the certificate being signed by an unknown certificate "<pos:position pos:line="1006" pos:column="72"/></literal>
              <literal type="string" pos:line="1007" pos:column="15">"authority"<pos:position pos:line="1007" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="1007" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1007" pos:column="28"/></expr_stmt>
        <return pos:line="1008" pos:column="9">return <expr><name pos:line="1008" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1008" pos:column="39"/></name></expr>;<pos:position pos:line="1008" pos:column="40"/></return>

      <comment type="block" pos:line="1010" pos:column="7">/* This error is raised if the server's cert didn't match the server's
         host name: */</comment>
      <case pos:line="1012" pos:column="7">case <expr><name pos:line="1012" pos:column="12">errSSLHostNameMismatch<pos:position pos:line="1012" pos:column="34"/></name></expr>:<pos:position pos:line="1012" pos:column="35"/></case>
        <expr_stmt><expr><call><name pos:line="1013" pos:column="9">failf<pos:position pos:line="1013" pos:column="14"/></name><argument_list pos:line="1013" pos:column="14">(<argument><expr><name pos:line="1013" pos:column="15">data<pos:position pos:line="1013" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1013" pos:column="21">"SSL certificate peer verification failed, the "<pos:position pos:line="1013" pos:column="69"/></literal>
              <literal type="string" pos:line="1014" pos:column="15">"certificate did not match \"%s\"\n"<pos:position pos:line="1014" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="1014" pos:column="53">conn<pos:position pos:line="1014" pos:column="57"/></name><operator pos:line="1014" pos:column="57">-&gt;<pos:position pos:line="1014" pos:column="62"/></operator><name pos:line="1014" pos:column="59">host<pos:position pos:line="1014" pos:column="63"/></name><operator pos:line="1014" pos:column="63">.<pos:position pos:line="1014" pos:column="64"/></operator><name pos:line="1014" pos:column="64">dispname<pos:position pos:line="1014" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="1014" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="1014" pos:column="74"/></expr_stmt>
        <return pos:line="1015" pos:column="9">return <expr><name pos:line="1015" pos:column="16">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="1015" pos:column="46"/></name></expr>;<pos:position pos:line="1015" pos:column="47"/></return>

      <comment type="block" pos:line="1017" pos:column="7">/* Generic handshake errors: */</comment>
      <case pos:line="1018" pos:column="7">case <expr><name pos:line="1018" pos:column="12">errSSLConnectionRefused<pos:position pos:line="1018" pos:column="35"/></name></expr>:<pos:position pos:line="1018" pos:column="36"/></case>
        <expr_stmt><expr><call><name pos:line="1019" pos:column="9">failf<pos:position pos:line="1019" pos:column="14"/></name><argument_list pos:line="1019" pos:column="14">(<argument><expr><name pos:line="1019" pos:column="15">data<pos:position pos:line="1019" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1019" pos:column="21">"Server dropped the connection during the SSL handshake"<pos:position pos:line="1019" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="1019" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="1019" pos:column="79"/></expr_stmt>
        <return pos:line="1020" pos:column="9">return <expr><name pos:line="1020" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1020" pos:column="39"/></name></expr>;<pos:position pos:line="1020" pos:column="40"/></return>
      <case pos:line="1021" pos:column="7">case <expr><name pos:line="1021" pos:column="12">errSSLClosedAbort<pos:position pos:line="1021" pos:column="29"/></name></expr>:<pos:position pos:line="1021" pos:column="30"/></case>
        <expr_stmt><expr><call><name pos:line="1022" pos:column="9">failf<pos:position pos:line="1022" pos:column="14"/></name><argument_list pos:line="1022" pos:column="14">(<argument><expr><name pos:line="1022" pos:column="15">data<pos:position pos:line="1022" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1022" pos:column="21">"Server aborted the SSL handshake"<pos:position pos:line="1022" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="1022" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1022" pos:column="57"/></expr_stmt>
        <return pos:line="1023" pos:column="9">return <expr><name pos:line="1023" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1023" pos:column="39"/></name></expr>;<pos:position pos:line="1023" pos:column="40"/></return>
      <case pos:line="1024" pos:column="7">case <expr><name pos:line="1024" pos:column="12">errSSLNegotiation<pos:position pos:line="1024" pos:column="29"/></name></expr>:<pos:position pos:line="1024" pos:column="30"/></case>
        <expr_stmt><expr><call><name pos:line="1025" pos:column="9">failf<pos:position pos:line="1025" pos:column="14"/></name><argument_list pos:line="1025" pos:column="14">(<argument><expr><name pos:line="1025" pos:column="15">data<pos:position pos:line="1025" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1025" pos:column="21">"Could not negotiate an SSL cipher suite with the server"<pos:position pos:line="1025" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="1025" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="1025" pos:column="80"/></expr_stmt>
        <return pos:line="1026" pos:column="9">return <expr><name pos:line="1026" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1026" pos:column="39"/></name></expr>;<pos:position pos:line="1026" pos:column="40"/></return>
      <comment type="block" pos:line="1027" pos:column="7">/* Sometimes paramErr happens with buggy ciphers: */</comment>
      <case pos:line="1028" pos:column="7">case <expr><name pos:line="1028" pos:column="12">paramErr<pos:position pos:line="1028" pos:column="20"/></name></expr>:<pos:position pos:line="1028" pos:column="21"/></case> <case pos:line="1028" pos:column="22">case <expr><name pos:line="1028" pos:column="27">errSSLInternal<pos:position pos:line="1028" pos:column="41"/></name></expr>:<pos:position pos:line="1028" pos:column="42"/></case>
        <expr_stmt><expr><call><name pos:line="1029" pos:column="9">failf<pos:position pos:line="1029" pos:column="14"/></name><argument_list pos:line="1029" pos:column="14">(<argument><expr><name pos:line="1029" pos:column="15">data<pos:position pos:line="1029" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1029" pos:column="21">"Internal SSL engine error encountered during the "<pos:position pos:line="1029" pos:column="72"/></literal>
              <literal type="string" pos:line="1030" pos:column="15">"SSL handshake"<pos:position pos:line="1030" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="1030" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="1030" pos:column="32"/></expr_stmt>
        <return pos:line="1031" pos:column="9">return <expr><name pos:line="1031" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1031" pos:column="39"/></name></expr>;<pos:position pos:line="1031" pos:column="40"/></return>
      <case pos:line="1032" pos:column="7">case <expr><name pos:line="1032" pos:column="12">errSSLFatalAlert<pos:position pos:line="1032" pos:column="28"/></name></expr>:<pos:position pos:line="1032" pos:column="29"/></case>
        <expr_stmt><expr><call><name pos:line="1033" pos:column="9">failf<pos:position pos:line="1033" pos:column="14"/></name><argument_list pos:line="1033" pos:column="14">(<argument><expr><name pos:line="1033" pos:column="15">data<pos:position pos:line="1033" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1033" pos:column="21">"Fatal SSL engine error encountered during the SSL "<pos:position pos:line="1033" pos:column="73"/></literal>
              <literal type="string" pos:line="1034" pos:column="15">"handshake"<pos:position pos:line="1034" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="1034" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1034" pos:column="28"/></expr_stmt>
        <return pos:line="1035" pos:column="9">return <expr><name pos:line="1035" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1035" pos:column="39"/></name></expr>;<pos:position pos:line="1035" pos:column="40"/></return>
      <default pos:line="1036" pos:column="7">default:<pos:position pos:line="1036" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="1037" pos:column="9">failf<pos:position pos:line="1037" pos:column="14"/></name><argument_list pos:line="1037" pos:column="14">(<argument><expr><name pos:line="1037" pos:column="15">data<pos:position pos:line="1037" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1037" pos:column="21">"Unknown SSL protocol error in connection to %s:%d"<pos:position pos:line="1037" pos:column="72"/></literal></expr></argument>,
              <argument><expr><name pos:line="1038" pos:column="15">hostname<pos:position pos:line="1038" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1038" pos:column="25">err<pos:position pos:line="1038" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1038" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="1038" pos:column="30"/></expr_stmt>
        <return pos:line="1039" pos:column="9">return <expr><name pos:line="1039" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1039" pos:column="39"/></name></expr>;<pos:position pos:line="1039" pos:column="40"/></return>
    }<pos:position pos:line="1040" pos:column="6"/></block></switch>
  }<pos:position pos:line="1041" pos:column="4"/></block></then>
  <else pos:line="1042" pos:column="3">else <block pos:line="1042" pos:column="8">{
    <comment type="block" pos:line="1043" pos:column="5">/* we have been connected fine, we're not waiting for anything else. */</comment>
    <expr_stmt><expr><name><name pos:line="1044" pos:column="5">connssl<pos:position pos:line="1044" pos:column="12"/></name><operator pos:line="1044" pos:column="12">-&gt;<pos:position pos:line="1044" pos:column="17"/></operator><name pos:line="1044" pos:column="14">connecting_state<pos:position pos:line="1044" pos:column="30"/></name></name> <operator pos:line="1044" pos:column="31">=<pos:position pos:line="1044" pos:column="32"/></operator> <name pos:line="1044" pos:column="33">ssl_connect_3<pos:position pos:line="1044" pos:column="46"/></name></expr>;<pos:position pos:line="1044" pos:column="47"/></expr_stmt>

<cpp:ifdef pos:line="1046" pos:column="1">#<cpp:directive pos:line="1046" pos:column="2">ifdef<pos:position pos:line="1046" pos:column="7"/></cpp:directive> <name pos:line="1046" pos:column="8">DARWIN_SSL_PINNEDPUBKEY<pos:position pos:line="1046" pos:column="31"/></name></cpp:ifdef>
    <if pos:line="1047" pos:column="5">if<condition pos:line="1047" pos:column="7">(<expr><name><name pos:line="1047" pos:column="8">data<pos:position pos:line="1047" pos:column="12"/></name><operator pos:line="1047" pos:column="12">-&gt;<pos:position pos:line="1047" pos:column="17"/></operator><name pos:line="1047" pos:column="14">set<pos:position pos:line="1047" pos:column="17"/></name><operator pos:line="1047" pos:column="17">.<pos:position pos:line="1047" pos:column="18"/></operator><name pos:line="1047" pos:column="18">str<pos:position pos:line="1047" pos:column="21"/></name><index pos:line="1047" pos:column="21">[<expr><name pos:line="1047" pos:column="22">STRING_SSL_PINNEDPUBLICKEY_ORIG<pos:position pos:line="1047" pos:column="53"/></name></expr>]<pos:position pos:line="1047" pos:column="54"/></index></name></expr>)<pos:position pos:line="1047" pos:column="55"/></condition><then pos:line="1047" pos:column="55"> <block pos:line="1047" pos:column="56">{
      <decl_stmt><decl><type><name pos:line="1048" pos:column="7">CURLcode<pos:position pos:line="1048" pos:column="15"/></name></type> <name pos:line="1048" pos:column="16">result<pos:position pos:line="1048" pos:column="22"/></name> <init pos:line="1048" pos:column="23">= <expr><call><name pos:line="1048" pos:column="25">pkp_pin_peer_pubkey<pos:position pos:line="1048" pos:column="44"/></name><argument_list pos:line="1048" pos:column="44">(<argument><expr><name pos:line="1048" pos:column="45">data<pos:position pos:line="1048" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="1048" pos:column="51">BACKEND<pos:position pos:line="1048" pos:column="58"/></name><operator pos:line="1048" pos:column="58">-&gt;<pos:position pos:line="1048" pos:column="63"/></operator><name pos:line="1048" pos:column="60">ssl_ctx<pos:position pos:line="1048" pos:column="67"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="1049" pos:column="29">data<pos:position pos:line="1049" pos:column="33"/></name><operator pos:line="1049" pos:column="33">-&gt;<pos:position pos:line="1049" pos:column="38"/></operator><name pos:line="1049" pos:column="35">set<pos:position pos:line="1049" pos:column="38"/></name><operator pos:line="1049" pos:column="38">.<pos:position pos:line="1049" pos:column="39"/></operator><name pos:line="1049" pos:column="39">str<pos:position pos:line="1049" pos:column="42"/></name><index pos:line="1049" pos:column="42">[<expr><name pos:line="1049" pos:column="43">STRING_SSL_PINNEDPUBLICKEY_ORIG<pos:position pos:line="1049" pos:column="74"/></name></expr>]<pos:position pos:line="1049" pos:column="75"/></index></name></expr></argument>)<pos:position pos:line="1049" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1049" pos:column="77"/></decl_stmt>
      <if pos:line="1050" pos:column="7">if<condition pos:line="1050" pos:column="9">(<expr><name pos:line="1050" pos:column="10">result<pos:position pos:line="1050" pos:column="16"/></name></expr>)<pos:position pos:line="1050" pos:column="17"/></condition><then pos:line="1050" pos:column="17"> <block pos:line="1050" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="1051" pos:column="9">failf<pos:position pos:line="1051" pos:column="14"/></name><argument_list pos:line="1051" pos:column="14">(<argument><expr><name pos:line="1051" pos:column="15">data<pos:position pos:line="1051" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1051" pos:column="21">"SSL: public key does not match pinned public key!"<pos:position pos:line="1051" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="1051" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="1051" pos:column="74"/></expr_stmt>
        <return pos:line="1052" pos:column="9">return <expr><name pos:line="1052" pos:column="16">result<pos:position pos:line="1052" pos:column="22"/></name></expr>;<pos:position pos:line="1052" pos:column="23"/></return>
      }<pos:position pos:line="1053" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1054" pos:column="6"/></block></then></if>
<cpp:endif pos:line="1055" pos:column="1">#<cpp:directive pos:line="1055" pos:column="2">endif<pos:position pos:line="1055" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1055" pos:column="8">/* DARWIN_SSL_PINNEDPUBKEY */</comment>

    <comment type="block" pos:line="1057" pos:column="5">/* Informational message */</comment>
    <expr_stmt><expr><operator pos:line="1058" pos:column="5">(<pos:position pos:line="1058" pos:column="6"/></operator><name pos:line="1058" pos:column="6">void<pos:position pos:line="1058" pos:column="10"/></name><operator pos:line="1058" pos:column="10">)<pos:position pos:line="1058" pos:column="11"/></operator><call><name pos:line="1058" pos:column="11">SSLGetNegotiatedCipher<pos:position pos:line="1058" pos:column="33"/></name><argument_list pos:line="1058" pos:column="33">(<argument><expr><name><name pos:line="1058" pos:column="34">BACKEND<pos:position pos:line="1058" pos:column="41"/></name><operator pos:line="1058" pos:column="41">-&gt;<pos:position pos:line="1058" pos:column="46"/></operator><name pos:line="1058" pos:column="43">ssl_ctx<pos:position pos:line="1058" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="1058" pos:column="52">&amp;<pos:position pos:line="1058" pos:column="57"/></operator><name pos:line="1058" pos:column="53">cipher<pos:position pos:line="1058" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1058" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1058" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="1059" pos:column="5">(<pos:position pos:line="1059" pos:column="6"/></operator><name pos:line="1059" pos:column="6">void<pos:position pos:line="1059" pos:column="10"/></name><operator pos:line="1059" pos:column="10">)<pos:position pos:line="1059" pos:column="11"/></operator><call><name pos:line="1059" pos:column="11">SSLGetNegotiatedProtocolVersion<pos:position pos:line="1059" pos:column="42"/></name><argument_list pos:line="1059" pos:column="42">(<argument><expr><name><name pos:line="1059" pos:column="43">BACKEND<pos:position pos:line="1059" pos:column="50"/></name><operator pos:line="1059" pos:column="50">-&gt;<pos:position pos:line="1059" pos:column="55"/></operator><name pos:line="1059" pos:column="52">ssl_ctx<pos:position pos:line="1059" pos:column="59"/></name></name></expr></argument>, <argument><expr><operator pos:line="1059" pos:column="61">&amp;<pos:position pos:line="1059" pos:column="66"/></operator><name pos:line="1059" pos:column="62">protocol<pos:position pos:line="1059" pos:column="70"/></name></expr></argument>)<pos:position pos:line="1059" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1059" pos:column="72"/></expr_stmt>
    <switch pos:line="1060" pos:column="5">switch<condition pos:line="1060" pos:column="11">(<expr><name pos:line="1060" pos:column="12">protocol<pos:position pos:line="1060" pos:column="20"/></name></expr>)<pos:position pos:line="1060" pos:column="21"/></condition> <block pos:line="1060" pos:column="22">{
      <case pos:line="1061" pos:column="7">case <expr><name pos:line="1061" pos:column="12">kSSLProtocol2<pos:position pos:line="1061" pos:column="25"/></name></expr>:<pos:position pos:line="1061" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="1062" pos:column="9">infof<pos:position pos:line="1062" pos:column="14"/></name><argument_list pos:line="1062" pos:column="14">(<argument><expr><name pos:line="1062" pos:column="15">data<pos:position pos:line="1062" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1062" pos:column="21">"SSL 2.0 connection using %s\n"<pos:position pos:line="1062" pos:column="52"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="1063" pos:column="15">SSLCipherNameForNumber<pos:position pos:line="1063" pos:column="37"/></name><argument_list pos:line="1063" pos:column="37">(<argument><expr><name pos:line="1063" pos:column="38">cipher<pos:position pos:line="1063" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1063" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="1063" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1063" pos:column="47"/></expr_stmt>
        <break pos:line="1064" pos:column="9">break;<pos:position pos:line="1064" pos:column="15"/></break>
      <case pos:line="1065" pos:column="7">case <expr><name pos:line="1065" pos:column="12">kSSLProtocol3<pos:position pos:line="1065" pos:column="25"/></name></expr>:<pos:position pos:line="1065" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="1066" pos:column="9">infof<pos:position pos:line="1066" pos:column="14"/></name><argument_list pos:line="1066" pos:column="14">(<argument><expr><name pos:line="1066" pos:column="15">data<pos:position pos:line="1066" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1066" pos:column="21">"SSL 3.0 connection using %s\n"<pos:position pos:line="1066" pos:column="52"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="1067" pos:column="15">SSLCipherNameForNumber<pos:position pos:line="1067" pos:column="37"/></name><argument_list pos:line="1067" pos:column="37">(<argument><expr><name pos:line="1067" pos:column="38">cipher<pos:position pos:line="1067" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1067" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="1067" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1067" pos:column="47"/></expr_stmt>
        <break pos:line="1068" pos:column="9">break;<pos:position pos:line="1068" pos:column="15"/></break>
      <case pos:line="1069" pos:column="7">case <expr><name pos:line="1069" pos:column="12">kTLSProtocol1<pos:position pos:line="1069" pos:column="25"/></name></expr>:<pos:position pos:line="1069" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="1070" pos:column="9">infof<pos:position pos:line="1070" pos:column="14"/></name><argument_list pos:line="1070" pos:column="14">(<argument><expr><name pos:line="1070" pos:column="15">data<pos:position pos:line="1070" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1070" pos:column="21">"TLS 1.0 connection using %s\n"<pos:position pos:line="1070" pos:column="52"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="1071" pos:column="15">TLSCipherNameForNumber<pos:position pos:line="1071" pos:column="37"/></name><argument_list pos:line="1071" pos:column="37">(<argument><expr><name pos:line="1071" pos:column="38">cipher<pos:position pos:line="1071" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1071" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="1071" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1071" pos:column="47"/></expr_stmt>
        <break pos:line="1072" pos:column="9">break;<pos:position pos:line="1072" pos:column="15"/></break>
<cpp:if pos:line="1073" pos:column="1">#<cpp:directive pos:line="1073" pos:column="2">if<pos:position pos:line="1073" pos:column="4"/></cpp:directive> <expr><name pos:line="1073" pos:column="5">CURL_BUILD_MAC_10_8<pos:position pos:line="1073" pos:column="24"/></name> <operator pos:line="1073" pos:column="25">||<pos:position pos:line="1073" pos:column="27"/></operator> <name pos:line="1073" pos:column="28">CURL_BUILD_IOS<pos:position pos:line="1073" pos:column="42"/></name></expr></cpp:if>
      <case pos:line="1074" pos:column="7">case <expr><name pos:line="1074" pos:column="12">kTLSProtocol11<pos:position pos:line="1074" pos:column="26"/></name></expr>:<pos:position pos:line="1074" pos:column="27"/></case>
        <expr_stmt><expr><call><name pos:line="1075" pos:column="9">infof<pos:position pos:line="1075" pos:column="14"/></name><argument_list pos:line="1075" pos:column="14">(<argument><expr><name pos:line="1075" pos:column="15">data<pos:position pos:line="1075" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1075" pos:column="21">"TLS 1.1 connection using %s\n"<pos:position pos:line="1075" pos:column="52"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="1076" pos:column="15">TLSCipherNameForNumber<pos:position pos:line="1076" pos:column="37"/></name><argument_list pos:line="1076" pos:column="37">(<argument><expr><name pos:line="1076" pos:column="38">cipher<pos:position pos:line="1076" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1076" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="1076" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1076" pos:column="47"/></expr_stmt>
        <break pos:line="1077" pos:column="9">break;<pos:position pos:line="1077" pos:column="15"/></break>
      <case pos:line="1078" pos:column="7">case <expr><name pos:line="1078" pos:column="12">kTLSProtocol12<pos:position pos:line="1078" pos:column="26"/></name></expr>:<pos:position pos:line="1078" pos:column="27"/></case>
        <expr_stmt><expr><call><name pos:line="1079" pos:column="9">infof<pos:position pos:line="1079" pos:column="14"/></name><argument_list pos:line="1079" pos:column="14">(<argument><expr><name pos:line="1079" pos:column="15">data<pos:position pos:line="1079" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1079" pos:column="21">"TLS 1.2 connection using %s\n"<pos:position pos:line="1079" pos:column="52"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="1080" pos:column="15">TLSCipherNameForNumber<pos:position pos:line="1080" pos:column="37"/></name><argument_list pos:line="1080" pos:column="37">(<argument><expr><name pos:line="1080" pos:column="38">cipher<pos:position pos:line="1080" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1080" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="1080" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1080" pos:column="47"/></expr_stmt>
        <break pos:line="1081" pos:column="9">break;<pos:position pos:line="1081" pos:column="15"/></break>
<cpp:endif pos:line="1082" pos:column="1">#<cpp:directive pos:line="1082" pos:column="2">endif<pos:position pos:line="1082" pos:column="7"/></cpp:directive></cpp:endif>
      <default pos:line="1083" pos:column="7">default:<pos:position pos:line="1083" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="1084" pos:column="9">infof<pos:position pos:line="1084" pos:column="14"/></name><argument_list pos:line="1084" pos:column="14">(<argument><expr><name pos:line="1084" pos:column="15">data<pos:position pos:line="1084" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1084" pos:column="21">"Unknown protocol connection\n"<pos:position pos:line="1084" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="1084" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1084" pos:column="54"/></expr_stmt>
        <break pos:line="1085" pos:column="9">break;<pos:position pos:line="1085" pos:column="15"/></break>
    }<pos:position pos:line="1086" pos:column="6"/></block></switch>

    <return pos:line="1088" pos:column="5">return <expr><name pos:line="1088" pos:column="12">CURLE_OK<pos:position pos:line="1088" pos:column="20"/></name></expr>;<pos:position pos:line="1088" pos:column="21"/></return>
  }<pos:position pos:line="1089" pos:column="4"/></block></else></if>
}<pos:position pos:line="1090" pos:column="2"/></block></function>

<cpp:ifndef pos:line="1092" pos:column="1">#<cpp:directive pos:line="1092" pos:column="2">ifndef<pos:position pos:line="1092" pos:column="8"/></cpp:directive> <name pos:line="1092" pos:column="9">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="1092" pos:column="37"/></name></cpp:ifndef>
<comment type="block" pos:line="1093" pos:column="1">/* This should be called during step3 of the connection at the earliest */</comment>
<function><specifier pos:line="1094" pos:column="1">static<pos:position pos:line="1094" pos:column="7"/></specifier> <type><name pos:line="1094" pos:column="8">void<pos:position pos:line="1094" pos:column="12"/></name></type>
<name pos:line="1095" pos:column="1">show_verbose_server_cert<pos:position pos:line="1095" pos:column="25"/></name><parameter_list pos:line="1095" pos:column="25">(<parameter><decl><type><name><name pos:line="1095" pos:column="26">struct<pos:position pos:line="1095" pos:column="32"/></name> <name pos:line="1095" pos:column="33">connectdata<pos:position pos:line="1095" pos:column="44"/></name></name> <modifier pos:line="1095" pos:column="45">*<pos:position pos:line="1095" pos:column="46"/></modifier></type><name pos:line="1095" pos:column="46">conn<pos:position pos:line="1095" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="1096" pos:column="26">int<pos:position pos:line="1096" pos:column="29"/></name></type> <name pos:line="1096" pos:column="30">sockindex<pos:position pos:line="1096" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1096" pos:column="40"/></parameter_list>
<block pos:line="1097" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="1098" pos:column="3">struct<pos:position pos:line="1098" pos:column="9"/></name> <name pos:line="1098" pos:column="10">Curl_easy<pos:position pos:line="1098" pos:column="19"/></name></name> <modifier pos:line="1098" pos:column="20">*<pos:position pos:line="1098" pos:column="21"/></modifier></type><name pos:line="1098" pos:column="21">data<pos:position pos:line="1098" pos:column="25"/></name> <init pos:line="1098" pos:column="26">= <expr><name><name pos:line="1098" pos:column="28">conn<pos:position pos:line="1098" pos:column="32"/></name><operator pos:line="1098" pos:column="32">-&gt;<pos:position pos:line="1098" pos:column="37"/></operator><name pos:line="1098" pos:column="34">data<pos:position pos:line="1098" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="1098" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="1099" pos:column="3">struct<pos:position pos:line="1099" pos:column="9"/></name> <name pos:line="1099" pos:column="10">ssl_connect_data<pos:position pos:line="1099" pos:column="26"/></name></name> <modifier pos:line="1099" pos:column="27">*<pos:position pos:line="1099" pos:column="28"/></modifier></type><name pos:line="1099" pos:column="28">connssl<pos:position pos:line="1099" pos:column="35"/></name> <init pos:line="1099" pos:column="36">= <expr><operator pos:line="1099" pos:column="38">&amp;<pos:position pos:line="1099" pos:column="43"/></operator><name><name pos:line="1099" pos:column="39">conn<pos:position pos:line="1099" pos:column="43"/></name><operator pos:line="1099" pos:column="43">-&gt;<pos:position pos:line="1099" pos:column="48"/></operator><name pos:line="1099" pos:column="45">ssl<pos:position pos:line="1099" pos:column="48"/></name><index pos:line="1099" pos:column="48">[<expr><name pos:line="1099" pos:column="49">sockindex<pos:position pos:line="1099" pos:column="58"/></name></expr>]<pos:position pos:line="1099" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="1099" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1100" pos:column="3">CFArrayRef<pos:position pos:line="1100" pos:column="13"/></name></type> <name pos:line="1100" pos:column="14">server_certs<pos:position pos:line="1100" pos:column="26"/></name> <init pos:line="1100" pos:column="27">= <expr><name pos:line="1100" pos:column="29">NULL<pos:position pos:line="1100" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="1100" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1101" pos:column="3">SecCertificateRef<pos:position pos:line="1101" pos:column="20"/></name></type> <name pos:line="1101" pos:column="21">server_cert<pos:position pos:line="1101" pos:column="32"/></name></decl>;<pos:position pos:line="1101" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1102" pos:column="3">OSStatus<pos:position pos:line="1102" pos:column="11"/></name></type> <name pos:line="1102" pos:column="12">err<pos:position pos:line="1102" pos:column="15"/></name></decl>;<pos:position pos:line="1102" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1103" pos:column="3">CFIndex<pos:position pos:line="1103" pos:column="10"/></name></type> <name pos:line="1103" pos:column="11">i<pos:position pos:line="1103" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="1103" pos:column="14">count<pos:position pos:line="1103" pos:column="19"/></name></decl>;<pos:position pos:line="1103" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1104" pos:column="3">SecTrustRef<pos:position pos:line="1104" pos:column="14"/></name></type> <name pos:line="1104" pos:column="15">trust<pos:position pos:line="1104" pos:column="20"/></name> <init pos:line="1104" pos:column="21">= <expr><name pos:line="1104" pos:column="23">NULL<pos:position pos:line="1104" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="1104" pos:column="28"/></decl_stmt>

  <if pos:line="1106" pos:column="3">if<condition pos:line="1106" pos:column="5">(<expr><operator pos:line="1106" pos:column="6">!<pos:position pos:line="1106" pos:column="7"/></operator><name><name pos:line="1106" pos:column="7">BACKEND<pos:position pos:line="1106" pos:column="14"/></name><operator pos:line="1106" pos:column="14">-&gt;<pos:position pos:line="1106" pos:column="19"/></operator><name pos:line="1106" pos:column="16">ssl_ctx<pos:position pos:line="1106" pos:column="23"/></name></name></expr>)<pos:position pos:line="1106" pos:column="24"/></condition><then pos:line="1106" pos:column="24">
    <block type="pseudo"><return pos:line="1107" pos:column="5">return;<pos:position pos:line="1107" pos:column="12"/></return></block></then></if>

<cpp:if pos:line="1109" pos:column="1">#<cpp:directive pos:line="1109" pos:column="2">if<pos:position pos:line="1109" pos:column="4"/></cpp:directive> <expr><name pos:line="1109" pos:column="5">CURL_BUILD_MAC_10_7<pos:position pos:line="1109" pos:column="24"/></name> <operator pos:line="1109" pos:column="25">||<pos:position pos:line="1109" pos:column="27"/></operator> <name pos:line="1109" pos:column="28">CURL_BUILD_IOS<pos:position pos:line="1109" pos:column="42"/></name></expr></cpp:if>
<cpp:if pos:line="1110" pos:column="1">#<cpp:directive pos:line="1110" pos:column="2">if<pos:position pos:line="1110" pos:column="4"/></cpp:directive> <expr><name pos:line="1110" pos:column="5">CURL_BUILD_IOS<pos:position pos:line="1110" pos:column="19"/></name></expr></cpp:if>
<cpp:pragma pos:line="1111" pos:column="1">#<cpp:directive pos:line="1111" pos:column="2">pragma<pos:position pos:line="1111" pos:column="8"/></cpp:directive> <name pos:line="1111" pos:column="9">unused<pos:position pos:line="1111" pos:column="15"/></name><name pos:line="1111" pos:column="15">(<pos:position pos:line="1111" pos:column="16"/></name><name pos:line="1111" pos:column="16">server_certs<pos:position pos:line="1111" pos:column="28"/></name><name pos:line="1111" pos:column="28">)<pos:position pos:line="1111" pos:column="29"/></name></cpp:pragma>
  <expr_stmt><expr><name pos:line="1112" pos:column="3">err<pos:position pos:line="1112" pos:column="6"/></name> <operator pos:line="1112" pos:column="7">=<pos:position pos:line="1112" pos:column="8"/></operator> <call><name pos:line="1112" pos:column="9">SSLCopyPeerTrust<pos:position pos:line="1112" pos:column="25"/></name><argument_list pos:line="1112" pos:column="25">(<argument><expr><name><name pos:line="1112" pos:column="26">BACKEND<pos:position pos:line="1112" pos:column="33"/></name><operator pos:line="1112" pos:column="33">-&gt;<pos:position pos:line="1112" pos:column="38"/></operator><name pos:line="1112" pos:column="35">ssl_ctx<pos:position pos:line="1112" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="1112" pos:column="44">&amp;<pos:position pos:line="1112" pos:column="49"/></operator><name pos:line="1112" pos:column="45">trust<pos:position pos:line="1112" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1112" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1112" pos:column="52"/></expr_stmt>
  <comment type="block" pos:line="1113" pos:column="3">/* For some reason, SSLCopyPeerTrust() can return noErr and yet return
     a null trust, so be on guard for that: */</comment>
  <if pos:line="1115" pos:column="3">if<condition pos:line="1115" pos:column="5">(<expr><name pos:line="1115" pos:column="6">err<pos:position pos:line="1115" pos:column="9"/></name> <operator pos:line="1115" pos:column="10">==<pos:position pos:line="1115" pos:column="12"/></operator> <name pos:line="1115" pos:column="13">noErr<pos:position pos:line="1115" pos:column="18"/></name> <operator pos:line="1115" pos:column="19">&amp;&amp;<pos:position pos:line="1115" pos:column="29"/></operator> <name pos:line="1115" pos:column="22">trust<pos:position pos:line="1115" pos:column="27"/></name></expr>)<pos:position pos:line="1115" pos:column="28"/></condition><then pos:line="1115" pos:column="28"> <block pos:line="1115" pos:column="29">{
    <expr_stmt><expr><name pos:line="1116" pos:column="5">count<pos:position pos:line="1116" pos:column="10"/></name> <operator pos:line="1116" pos:column="11">=<pos:position pos:line="1116" pos:column="12"/></operator> <call><name pos:line="1116" pos:column="13">SecTrustGetCertificateCount<pos:position pos:line="1116" pos:column="40"/></name><argument_list pos:line="1116" pos:column="40">(<argument><expr><name pos:line="1116" pos:column="41">trust<pos:position pos:line="1116" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1116" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="1116" pos:column="48"/></expr_stmt>
    <for pos:line="1117" pos:column="5">for<control pos:line="1117" pos:column="8">(<init><expr><name pos:line="1117" pos:column="9">i<pos:position pos:line="1117" pos:column="10"/></name> <operator pos:line="1117" pos:column="11">=<pos:position pos:line="1117" pos:column="12"/></operator> <literal type="number" pos:line="1117" pos:column="13">0L<pos:position pos:line="1117" pos:column="15"/></literal></expr> ;<pos:position pos:line="1117" pos:column="17"/></init> <condition><expr><name pos:line="1117" pos:column="18">i<pos:position pos:line="1117" pos:column="19"/></name> <operator pos:line="1117" pos:column="20">&lt;<pos:position pos:line="1117" pos:column="24"/></operator> <name pos:line="1117" pos:column="22">count<pos:position pos:line="1117" pos:column="27"/></name></expr> ;<pos:position pos:line="1117" pos:column="29"/></condition> <incr><expr><name pos:line="1117" pos:column="30">i<pos:position pos:line="1117" pos:column="31"/></name><operator pos:line="1117" pos:column="31">++<pos:position pos:line="1117" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="1117" pos:column="34"/></control> <block pos:line="1117" pos:column="35">{
      <decl_stmt><decl><type><name pos:line="1118" pos:column="7">CURLcode<pos:position pos:line="1118" pos:column="15"/></name></type> <name pos:line="1118" pos:column="16">result<pos:position pos:line="1118" pos:column="22"/></name></decl>;<pos:position pos:line="1118" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1119" pos:column="7">char<pos:position pos:line="1119" pos:column="11"/></name> <modifier pos:line="1119" pos:column="12">*<pos:position pos:line="1119" pos:column="13"/></modifier></type><name pos:line="1119" pos:column="13">certp<pos:position pos:line="1119" pos:column="18"/></name></decl>;<pos:position pos:line="1119" pos:column="19"/></decl_stmt>
      <expr_stmt><expr><name pos:line="1120" pos:column="7">server_cert<pos:position pos:line="1120" pos:column="18"/></name> <operator pos:line="1120" pos:column="19">=<pos:position pos:line="1120" pos:column="20"/></operator> <call><name pos:line="1120" pos:column="21">SecTrustGetCertificateAtIndex<pos:position pos:line="1120" pos:column="50"/></name><argument_list pos:line="1120" pos:column="50">(<argument><expr><name pos:line="1120" pos:column="51">trust<pos:position pos:line="1120" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1120" pos:column="58">i<pos:position pos:line="1120" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1120" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1120" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1121" pos:column="7">result<pos:position pos:line="1121" pos:column="13"/></name> <operator pos:line="1121" pos:column="14">=<pos:position pos:line="1121" pos:column="15"/></operator> <call><name pos:line="1121" pos:column="16">CopyCertSubject<pos:position pos:line="1121" pos:column="31"/></name><argument_list pos:line="1121" pos:column="31">(<argument><expr><name pos:line="1121" pos:column="32">data<pos:position pos:line="1121" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="38">server_cert<pos:position pos:line="1121" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="1121" pos:column="51">&amp;<pos:position pos:line="1121" pos:column="56"/></operator><name pos:line="1121" pos:column="52">certp<pos:position pos:line="1121" pos:column="57"/></name></expr></argument>)<pos:position pos:line="1121" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1121" pos:column="59"/></expr_stmt>
      <if pos:line="1122" pos:column="7">if<condition pos:line="1122" pos:column="9">(<expr><operator pos:line="1122" pos:column="10">!<pos:position pos:line="1122" pos:column="11"/></operator><name pos:line="1122" pos:column="11">result<pos:position pos:line="1122" pos:column="17"/></name></expr>)<pos:position pos:line="1122" pos:column="18"/></condition><then pos:line="1122" pos:column="18"> <block pos:line="1122" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="1123" pos:column="9">infof<pos:position pos:line="1123" pos:column="14"/></name><argument_list pos:line="1123" pos:column="14">(<argument><expr><name pos:line="1123" pos:column="15">data<pos:position pos:line="1123" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1123" pos:column="21">"Server certificate: %s\n"<pos:position pos:line="1123" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="1123" pos:column="49">certp<pos:position pos:line="1123" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1123" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1123" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1124" pos:column="9">free<pos:position pos:line="1124" pos:column="13"/></name><argument_list pos:line="1124" pos:column="13">(<argument><expr><name pos:line="1124" pos:column="14">certp<pos:position pos:line="1124" pos:column="19"/></name></expr></argument>)<pos:position pos:line="1124" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="1124" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="1125" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1126" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="1127" pos:column="5">CFRelease<pos:position pos:line="1127" pos:column="14"/></name><argument_list pos:line="1127" pos:column="14">(<argument><expr><name pos:line="1127" pos:column="15">trust<pos:position pos:line="1127" pos:column="20"/></name></expr></argument>)<pos:position pos:line="1127" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="1127" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="1128" pos:column="4"/></block></then></if>
<cpp:else pos:line="1129" pos:column="1">#<cpp:directive pos:line="1129" pos:column="2">else<pos:position pos:line="1129" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="1130" pos:column="3">/* SSLCopyPeerCertificates() is deprecated as of Mountain Lion.
     The function SecTrustGetCertificateAtIndex() is officially present
     in Lion, but it is unfortunately also present in Snow Leopard as
     private API and doesn't work as expected. So we have to look for
     a different symbol to make sure this code is only executed under
     Lion or later. */</comment>
  <if pos:line="1136" pos:column="3">if<condition pos:line="1136" pos:column="5">(<expr><name pos:line="1136" pos:column="6">SecTrustEvaluateAsync<pos:position pos:line="1136" pos:column="27"/></name> <operator pos:line="1136" pos:column="28">!=<pos:position pos:line="1136" pos:column="30"/></operator> <name pos:line="1136" pos:column="31">NULL<pos:position pos:line="1136" pos:column="35"/></name></expr>)<pos:position pos:line="1136" pos:column="36"/></condition><then pos:line="1136" pos:column="36"> <block pos:line="1136" pos:column="37">{
<cpp:pragma pos:line="1137" pos:column="1">#<cpp:directive pos:line="1137" pos:column="2">pragma<pos:position pos:line="1137" pos:column="8"/></cpp:directive> <name pos:line="1137" pos:column="9">unused<pos:position pos:line="1137" pos:column="15"/></name><name pos:line="1137" pos:column="15">(<pos:position pos:line="1137" pos:column="16"/></name><name pos:line="1137" pos:column="16">server_certs<pos:position pos:line="1137" pos:column="28"/></name><name pos:line="1137" pos:column="28">)<pos:position pos:line="1137" pos:column="29"/></name></cpp:pragma>
    <expr_stmt><expr><name pos:line="1138" pos:column="5">err<pos:position pos:line="1138" pos:column="8"/></name> <operator pos:line="1138" pos:column="9">=<pos:position pos:line="1138" pos:column="10"/></operator> <call><name pos:line="1138" pos:column="11">SSLCopyPeerTrust<pos:position pos:line="1138" pos:column="27"/></name><argument_list pos:line="1138" pos:column="27">(<argument><expr><name><name pos:line="1138" pos:column="28">BACKEND<pos:position pos:line="1138" pos:column="35"/></name><operator pos:line="1138" pos:column="35">-&gt;<pos:position pos:line="1138" pos:column="40"/></operator><name pos:line="1138" pos:column="37">ssl_ctx<pos:position pos:line="1138" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="1138" pos:column="46">&amp;<pos:position pos:line="1138" pos:column="51"/></operator><name pos:line="1138" pos:column="47">trust<pos:position pos:line="1138" pos:column="52"/></name></expr></argument>)<pos:position pos:line="1138" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1138" pos:column="54"/></expr_stmt>
    <comment type="block" pos:line="1139" pos:column="5">/* For some reason, SSLCopyPeerTrust() can return noErr and yet return
       a null trust, so be on guard for that: */</comment>
    <if pos:line="1141" pos:column="5">if<condition pos:line="1141" pos:column="7">(<expr><name pos:line="1141" pos:column="8">err<pos:position pos:line="1141" pos:column="11"/></name> <operator pos:line="1141" pos:column="12">==<pos:position pos:line="1141" pos:column="14"/></operator> <name pos:line="1141" pos:column="15">noErr<pos:position pos:line="1141" pos:column="20"/></name> <operator pos:line="1141" pos:column="21">&amp;&amp;<pos:position pos:line="1141" pos:column="31"/></operator> <name pos:line="1141" pos:column="24">trust<pos:position pos:line="1141" pos:column="29"/></name></expr>)<pos:position pos:line="1141" pos:column="30"/></condition><then pos:line="1141" pos:column="30"> <block pos:line="1141" pos:column="31">{
      <expr_stmt><expr><name pos:line="1142" pos:column="7">count<pos:position pos:line="1142" pos:column="12"/></name> <operator pos:line="1142" pos:column="13">=<pos:position pos:line="1142" pos:column="14"/></operator> <call><name pos:line="1142" pos:column="15">SecTrustGetCertificateCount<pos:position pos:line="1142" pos:column="42"/></name><argument_list pos:line="1142" pos:column="42">(<argument><expr><name pos:line="1142" pos:column="43">trust<pos:position pos:line="1142" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1142" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1142" pos:column="50"/></expr_stmt>
      <for pos:line="1143" pos:column="7">for<control pos:line="1143" pos:column="10">(<init><expr><name pos:line="1143" pos:column="11">i<pos:position pos:line="1143" pos:column="12"/></name> <operator pos:line="1143" pos:column="13">=<pos:position pos:line="1143" pos:column="14"/></operator> <literal type="number" pos:line="1143" pos:column="15">0L<pos:position pos:line="1143" pos:column="17"/></literal></expr> ;<pos:position pos:line="1143" pos:column="19"/></init> <condition><expr><name pos:line="1143" pos:column="20">i<pos:position pos:line="1143" pos:column="21"/></name> <operator pos:line="1143" pos:column="22">&lt;<pos:position pos:line="1143" pos:column="26"/></operator> <name pos:line="1143" pos:column="24">count<pos:position pos:line="1143" pos:column="29"/></name></expr> ;<pos:position pos:line="1143" pos:column="31"/></condition> <incr><expr><name pos:line="1143" pos:column="32">i<pos:position pos:line="1143" pos:column="33"/></name><operator pos:line="1143" pos:column="33">++<pos:position pos:line="1143" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="1143" pos:column="36"/></control> <block pos:line="1143" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="1144" pos:column="9">char<pos:position pos:line="1144" pos:column="13"/></name> <modifier pos:line="1144" pos:column="14">*<pos:position pos:line="1144" pos:column="15"/></modifier></type><name pos:line="1144" pos:column="15">certp<pos:position pos:line="1144" pos:column="20"/></name></decl>;<pos:position pos:line="1144" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="1145" pos:column="9">CURLcode<pos:position pos:line="1145" pos:column="17"/></name></type> <name pos:line="1145" pos:column="18">result<pos:position pos:line="1145" pos:column="24"/></name></decl>;<pos:position pos:line="1145" pos:column="25"/></decl_stmt>
        <expr_stmt><expr><name pos:line="1146" pos:column="9">server_cert<pos:position pos:line="1146" pos:column="20"/></name> <operator pos:line="1146" pos:column="21">=<pos:position pos:line="1146" pos:column="22"/></operator> <call><name pos:line="1146" pos:column="23">SecTrustGetCertificateAtIndex<pos:position pos:line="1146" pos:column="52"/></name><argument_list pos:line="1146" pos:column="52">(<argument><expr><name pos:line="1146" pos:column="53">trust<pos:position pos:line="1146" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="1146" pos:column="60">i<pos:position pos:line="1146" pos:column="61"/></name></expr></argument>)<pos:position pos:line="1146" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="1146" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1147" pos:column="9">result<pos:position pos:line="1147" pos:column="15"/></name> <operator pos:line="1147" pos:column="16">=<pos:position pos:line="1147" pos:column="17"/></operator> <call><name pos:line="1147" pos:column="18">CopyCertSubject<pos:position pos:line="1147" pos:column="33"/></name><argument_list pos:line="1147" pos:column="33">(<argument><expr><name pos:line="1147" pos:column="34">data<pos:position pos:line="1147" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="1147" pos:column="40">server_cert<pos:position pos:line="1147" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="1147" pos:column="53">&amp;<pos:position pos:line="1147" pos:column="58"/></operator><name pos:line="1147" pos:column="54">certp<pos:position pos:line="1147" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1147" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1147" pos:column="61"/></expr_stmt>
        <if pos:line="1148" pos:column="9">if<condition pos:line="1148" pos:column="11">(<expr><operator pos:line="1148" pos:column="12">!<pos:position pos:line="1148" pos:column="13"/></operator><name pos:line="1148" pos:column="13">result<pos:position pos:line="1148" pos:column="19"/></name></expr>)<pos:position pos:line="1148" pos:column="20"/></condition><then pos:line="1148" pos:column="20"> <block pos:line="1148" pos:column="21">{
          <expr_stmt><expr><call><name pos:line="1149" pos:column="11">infof<pos:position pos:line="1149" pos:column="16"/></name><argument_list pos:line="1149" pos:column="16">(<argument><expr><name pos:line="1149" pos:column="17">data<pos:position pos:line="1149" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1149" pos:column="23">"Server certificate: %s\n"<pos:position pos:line="1149" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="1149" pos:column="51">certp<pos:position pos:line="1149" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1149" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1149" pos:column="58"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1150" pos:column="11">free<pos:position pos:line="1150" pos:column="15"/></name><argument_list pos:line="1150" pos:column="15">(<argument><expr><name pos:line="1150" pos:column="16">certp<pos:position pos:line="1150" pos:column="21"/></name></expr></argument>)<pos:position pos:line="1150" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="1150" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="1151" pos:column="10"/></block></then></if>
      }<pos:position pos:line="1152" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="1153" pos:column="7">CFRelease<pos:position pos:line="1153" pos:column="16"/></name><argument_list pos:line="1153" pos:column="16">(<argument><expr><name pos:line="1153" pos:column="17">trust<pos:position pos:line="1153" pos:column="22"/></name></expr></argument>)<pos:position pos:line="1153" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="1153" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="1154" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1155" pos:column="4"/></block></then>
  <else pos:line="1156" pos:column="3">else <block pos:line="1156" pos:column="8">{
<cpp:if pos:line="1157" pos:column="1">#<cpp:directive pos:line="1157" pos:column="2">if<pos:position pos:line="1157" pos:column="4"/></cpp:directive> <expr><name pos:line="1157" pos:column="5">CURL_SUPPORT_MAC_10_8<pos:position pos:line="1157" pos:column="26"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="1158" pos:column="5">err<pos:position pos:line="1158" pos:column="8"/></name> <operator pos:line="1158" pos:column="9">=<pos:position pos:line="1158" pos:column="10"/></operator> <call><name pos:line="1158" pos:column="11">SSLCopyPeerCertificates<pos:position pos:line="1158" pos:column="34"/></name><argument_list pos:line="1158" pos:column="34">(<argument><expr><name><name pos:line="1158" pos:column="35">BACKEND<pos:position pos:line="1158" pos:column="42"/></name><operator pos:line="1158" pos:column="42">-&gt;<pos:position pos:line="1158" pos:column="47"/></operator><name pos:line="1158" pos:column="44">ssl_ctx<pos:position pos:line="1158" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="1158" pos:column="53">&amp;<pos:position pos:line="1158" pos:column="58"/></operator><name pos:line="1158" pos:column="54">server_certs<pos:position pos:line="1158" pos:column="66"/></name></expr></argument>)<pos:position pos:line="1158" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="1158" pos:column="68"/></expr_stmt>
    <comment type="block" pos:line="1159" pos:column="5">/* Just in case SSLCopyPeerCertificates() returns null too... */</comment>
    <if pos:line="1160" pos:column="5">if<condition pos:line="1160" pos:column="7">(<expr><name pos:line="1160" pos:column="8">err<pos:position pos:line="1160" pos:column="11"/></name> <operator pos:line="1160" pos:column="12">==<pos:position pos:line="1160" pos:column="14"/></operator> <name pos:line="1160" pos:column="15">noErr<pos:position pos:line="1160" pos:column="20"/></name> <operator pos:line="1160" pos:column="21">&amp;&amp;<pos:position pos:line="1160" pos:column="31"/></operator> <name pos:line="1160" pos:column="24">server_certs<pos:position pos:line="1160" pos:column="36"/></name></expr>)<pos:position pos:line="1160" pos:column="37"/></condition><then pos:line="1160" pos:column="37"> <block pos:line="1160" pos:column="38">{
      <expr_stmt><expr><name pos:line="1161" pos:column="7">count<pos:position pos:line="1161" pos:column="12"/></name> <operator pos:line="1161" pos:column="13">=<pos:position pos:line="1161" pos:column="14"/></operator> <call><name pos:line="1161" pos:column="15">CFArrayGetCount<pos:position pos:line="1161" pos:column="30"/></name><argument_list pos:line="1161" pos:column="30">(<argument><expr><name pos:line="1161" pos:column="31">server_certs<pos:position pos:line="1161" pos:column="43"/></name></expr></argument>)<pos:position pos:line="1161" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1161" pos:column="45"/></expr_stmt>
      <for pos:line="1162" pos:column="7">for<control pos:line="1162" pos:column="10">(<init><expr><name pos:line="1162" pos:column="11">i<pos:position pos:line="1162" pos:column="12"/></name> <operator pos:line="1162" pos:column="13">=<pos:position pos:line="1162" pos:column="14"/></operator> <literal type="number" pos:line="1162" pos:column="15">0L<pos:position pos:line="1162" pos:column="17"/></literal></expr> ;<pos:position pos:line="1162" pos:column="19"/></init> <condition><expr><name pos:line="1162" pos:column="20">i<pos:position pos:line="1162" pos:column="21"/></name> <operator pos:line="1162" pos:column="22">&lt;<pos:position pos:line="1162" pos:column="26"/></operator> <name pos:line="1162" pos:column="24">count<pos:position pos:line="1162" pos:column="29"/></name></expr> ;<pos:position pos:line="1162" pos:column="31"/></condition> <incr><expr><name pos:line="1162" pos:column="32">i<pos:position pos:line="1162" pos:column="33"/></name><operator pos:line="1162" pos:column="33">++<pos:position pos:line="1162" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="1162" pos:column="36"/></control> <block pos:line="1162" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="1163" pos:column="9">char<pos:position pos:line="1163" pos:column="13"/></name> <modifier pos:line="1163" pos:column="14">*<pos:position pos:line="1163" pos:column="15"/></modifier></type><name pos:line="1163" pos:column="15">certp<pos:position pos:line="1163" pos:column="20"/></name></decl>;<pos:position pos:line="1163" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="1164" pos:column="9">CURLcode<pos:position pos:line="1164" pos:column="17"/></name></type> <name pos:line="1164" pos:column="18">result<pos:position pos:line="1164" pos:column="24"/></name></decl>;<pos:position pos:line="1164" pos:column="25"/></decl_stmt>
        <expr_stmt><expr><name pos:line="1165" pos:column="9">server_cert<pos:position pos:line="1165" pos:column="20"/></name> <operator pos:line="1165" pos:column="21">=<pos:position pos:line="1165" pos:column="22"/></operator> <operator pos:line="1165" pos:column="23">(<pos:position pos:line="1165" pos:column="24"/></operator><name pos:line="1165" pos:column="24">SecCertificateRef<pos:position pos:line="1165" pos:column="41"/></name><operator pos:line="1165" pos:column="41">)<pos:position pos:line="1165" pos:column="42"/></operator><call><name pos:line="1165" pos:column="42">CFArrayGetValueAtIndex<pos:position pos:line="1165" pos:column="64"/></name><argument_list pos:line="1165" pos:column="64">(<argument><expr><name pos:line="1165" pos:column="65">server_certs<pos:position pos:line="1165" pos:column="77"/></name></expr></argument>,
                                                                <argument><expr><name pos:line="1166" pos:column="65">i<pos:position pos:line="1166" pos:column="66"/></name></expr></argument>)<pos:position pos:line="1166" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="1166" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1167" pos:column="9">result<pos:position pos:line="1167" pos:column="15"/></name> <operator pos:line="1167" pos:column="16">=<pos:position pos:line="1167" pos:column="17"/></operator> <call><name pos:line="1167" pos:column="18">CopyCertSubject<pos:position pos:line="1167" pos:column="33"/></name><argument_list pos:line="1167" pos:column="33">(<argument><expr><name pos:line="1167" pos:column="34">data<pos:position pos:line="1167" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="1167" pos:column="40">server_cert<pos:position pos:line="1167" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="1167" pos:column="53">&amp;<pos:position pos:line="1167" pos:column="58"/></operator><name pos:line="1167" pos:column="54">certp<pos:position pos:line="1167" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1167" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1167" pos:column="61"/></expr_stmt>
        <if pos:line="1168" pos:column="9">if<condition pos:line="1168" pos:column="11">(<expr><operator pos:line="1168" pos:column="12">!<pos:position pos:line="1168" pos:column="13"/></operator><name pos:line="1168" pos:column="13">result<pos:position pos:line="1168" pos:column="19"/></name></expr>)<pos:position pos:line="1168" pos:column="20"/></condition><then pos:line="1168" pos:column="20"> <block pos:line="1168" pos:column="21">{
          <expr_stmt><expr><call><name pos:line="1169" pos:column="11">infof<pos:position pos:line="1169" pos:column="16"/></name><argument_list pos:line="1169" pos:column="16">(<argument><expr><name pos:line="1169" pos:column="17">data<pos:position pos:line="1169" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1169" pos:column="23">"Server certificate: %s\n"<pos:position pos:line="1169" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="1169" pos:column="51">certp<pos:position pos:line="1169" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1169" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1169" pos:column="58"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1170" pos:column="11">free<pos:position pos:line="1170" pos:column="15"/></name><argument_list pos:line="1170" pos:column="15">(<argument><expr><name pos:line="1170" pos:column="16">certp<pos:position pos:line="1170" pos:column="21"/></name></expr></argument>)<pos:position pos:line="1170" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="1170" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="1171" pos:column="10"/></block></then></if>
      }<pos:position pos:line="1172" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="1173" pos:column="7">CFRelease<pos:position pos:line="1173" pos:column="16"/></name><argument_list pos:line="1173" pos:column="16">(<argument><expr><name pos:line="1173" pos:column="17">server_certs<pos:position pos:line="1173" pos:column="29"/></name></expr></argument>)<pos:position pos:line="1173" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1173" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="1174" pos:column="6"/></block></then></if>
<cpp:endif pos:line="1175" pos:column="1">#<cpp:directive pos:line="1175" pos:column="2">endif<pos:position pos:line="1175" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1175" pos:column="8">/* CURL_SUPPORT_MAC_10_8 */</comment>
  }<pos:position pos:line="1176" pos:column="4"/></block></else></if>
<cpp:endif pos:line="1177" pos:column="1">#<cpp:directive pos:line="1177" pos:column="2">endif<pos:position pos:line="1177" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1177" pos:column="8">/* CURL_BUILD_IOS */</comment>
<cpp:else pos:line="1178" pos:column="1">#<cpp:directive pos:line="1178" pos:column="2">else<pos:position pos:line="1178" pos:column="6"/></cpp:directive></cpp:else>
<cpp:pragma pos:line="1179" pos:column="1">#<cpp:directive pos:line="1179" pos:column="2">pragma<pos:position pos:line="1179" pos:column="8"/></cpp:directive> <name pos:line="1179" pos:column="9">unused<pos:position pos:line="1179" pos:column="15"/></name><name pos:line="1179" pos:column="15">(<pos:position pos:line="1179" pos:column="16"/></name><name pos:line="1179" pos:column="16">trust<pos:position pos:line="1179" pos:column="21"/></name><name pos:line="1179" pos:column="21">)<pos:position pos:line="1179" pos:column="22"/></name></cpp:pragma>
  <expr_stmt><expr><name pos:line="1180" pos:column="3">err<pos:position pos:line="1180" pos:column="6"/></name> <operator pos:line="1180" pos:column="7">=<pos:position pos:line="1180" pos:column="8"/></operator> <call><name pos:line="1180" pos:column="9">SSLCopyPeerCertificates<pos:position pos:line="1180" pos:column="32"/></name><argument_list pos:line="1180" pos:column="32">(<argument><expr><name><name pos:line="1180" pos:column="33">BACKEND<pos:position pos:line="1180" pos:column="40"/></name><operator pos:line="1180" pos:column="40">-&gt;<pos:position pos:line="1180" pos:column="45"/></operator><name pos:line="1180" pos:column="42">ssl_ctx<pos:position pos:line="1180" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="1180" pos:column="51">&amp;<pos:position pos:line="1180" pos:column="56"/></operator><name pos:line="1180" pos:column="52">server_certs<pos:position pos:line="1180" pos:column="64"/></name></expr></argument>)<pos:position pos:line="1180" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="1180" pos:column="66"/></expr_stmt>
  <if pos:line="1181" pos:column="3">if<condition pos:line="1181" pos:column="5">(<expr><name pos:line="1181" pos:column="6">err<pos:position pos:line="1181" pos:column="9"/></name> <operator pos:line="1181" pos:column="10">==<pos:position pos:line="1181" pos:column="12"/></operator> <name pos:line="1181" pos:column="13">noErr<pos:position pos:line="1181" pos:column="18"/></name></expr>)<pos:position pos:line="1181" pos:column="19"/></condition><then pos:line="1181" pos:column="19"> <block pos:line="1181" pos:column="20">{
    <expr_stmt><expr><name pos:line="1182" pos:column="5">count<pos:position pos:line="1182" pos:column="10"/></name> <operator pos:line="1182" pos:column="11">=<pos:position pos:line="1182" pos:column="12"/></operator> <call><name pos:line="1182" pos:column="13">CFArrayGetCount<pos:position pos:line="1182" pos:column="28"/></name><argument_list pos:line="1182" pos:column="28">(<argument><expr><name pos:line="1182" pos:column="29">server_certs<pos:position pos:line="1182" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1182" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1182" pos:column="43"/></expr_stmt>
    <for pos:line="1183" pos:column="5">for<control pos:line="1183" pos:column="8">(<init><expr><name pos:line="1183" pos:column="9">i<pos:position pos:line="1183" pos:column="10"/></name> <operator pos:line="1183" pos:column="11">=<pos:position pos:line="1183" pos:column="12"/></operator> <literal type="number" pos:line="1183" pos:column="13">0L<pos:position pos:line="1183" pos:column="15"/></literal></expr> ;<pos:position pos:line="1183" pos:column="17"/></init> <condition><expr><name pos:line="1183" pos:column="18">i<pos:position pos:line="1183" pos:column="19"/></name> <operator pos:line="1183" pos:column="20">&lt;<pos:position pos:line="1183" pos:column="24"/></operator> <name pos:line="1183" pos:column="22">count<pos:position pos:line="1183" pos:column="27"/></name></expr> ;<pos:position pos:line="1183" pos:column="29"/></condition> <incr><expr><name pos:line="1183" pos:column="30">i<pos:position pos:line="1183" pos:column="31"/></name><operator pos:line="1183" pos:column="31">++<pos:position pos:line="1183" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="1183" pos:column="34"/></control> <block pos:line="1183" pos:column="35">{
      <decl_stmt><decl><type><name pos:line="1184" pos:column="7">CURLcode<pos:position pos:line="1184" pos:column="15"/></name></type> <name pos:line="1184" pos:column="16">result<pos:position pos:line="1184" pos:column="22"/></name></decl>;<pos:position pos:line="1184" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1185" pos:column="7">char<pos:position pos:line="1185" pos:column="11"/></name> <modifier pos:line="1185" pos:column="12">*<pos:position pos:line="1185" pos:column="13"/></modifier></type><name pos:line="1185" pos:column="13">certp<pos:position pos:line="1185" pos:column="18"/></name></decl>;<pos:position pos:line="1185" pos:column="19"/></decl_stmt>
      <expr_stmt><expr><name pos:line="1186" pos:column="7">server_cert<pos:position pos:line="1186" pos:column="18"/></name> <operator pos:line="1186" pos:column="19">=<pos:position pos:line="1186" pos:column="20"/></operator> <operator pos:line="1186" pos:column="21">(<pos:position pos:line="1186" pos:column="22"/></operator><name pos:line="1186" pos:column="22">SecCertificateRef<pos:position pos:line="1186" pos:column="39"/></name><operator pos:line="1186" pos:column="39">)<pos:position pos:line="1186" pos:column="40"/></operator><call><name pos:line="1186" pos:column="40">CFArrayGetValueAtIndex<pos:position pos:line="1186" pos:column="62"/></name><argument_list pos:line="1186" pos:column="62">(<argument><expr><name pos:line="1186" pos:column="63">server_certs<pos:position pos:line="1186" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="1186" pos:column="77">i<pos:position pos:line="1186" pos:column="78"/></name></expr></argument>)<pos:position pos:line="1186" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="1186" pos:column="80"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1187" pos:column="7">result<pos:position pos:line="1187" pos:column="13"/></name> <operator pos:line="1187" pos:column="14">=<pos:position pos:line="1187" pos:column="15"/></operator> <call><name pos:line="1187" pos:column="16">CopyCertSubject<pos:position pos:line="1187" pos:column="31"/></name><argument_list pos:line="1187" pos:column="31">(<argument><expr><name pos:line="1187" pos:column="32">data<pos:position pos:line="1187" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="1187" pos:column="38">server_cert<pos:position pos:line="1187" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="1187" pos:column="51">&amp;<pos:position pos:line="1187" pos:column="56"/></operator><name pos:line="1187" pos:column="52">certp<pos:position pos:line="1187" pos:column="57"/></name></expr></argument>)<pos:position pos:line="1187" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1187" pos:column="59"/></expr_stmt>
      <if pos:line="1188" pos:column="7">if<condition pos:line="1188" pos:column="9">(<expr><operator pos:line="1188" pos:column="10">!<pos:position pos:line="1188" pos:column="11"/></operator><name pos:line="1188" pos:column="11">result<pos:position pos:line="1188" pos:column="17"/></name></expr>)<pos:position pos:line="1188" pos:column="18"/></condition><then pos:line="1188" pos:column="18"> <block pos:line="1188" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="1189" pos:column="9">infof<pos:position pos:line="1189" pos:column="14"/></name><argument_list pos:line="1189" pos:column="14">(<argument><expr><name pos:line="1189" pos:column="15">data<pos:position pos:line="1189" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1189" pos:column="21">"Server certificate: %s\n"<pos:position pos:line="1189" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="1189" pos:column="49">certp<pos:position pos:line="1189" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1189" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1189" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1190" pos:column="9">free<pos:position pos:line="1190" pos:column="13"/></name><argument_list pos:line="1190" pos:column="13">(<argument><expr><name pos:line="1190" pos:column="14">certp<pos:position pos:line="1190" pos:column="19"/></name></expr></argument>)<pos:position pos:line="1190" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="1190" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="1191" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1192" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="1193" pos:column="5">CFRelease<pos:position pos:line="1193" pos:column="14"/></name><argument_list pos:line="1193" pos:column="14">(<argument><expr><name pos:line="1193" pos:column="15">server_certs<pos:position pos:line="1193" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1193" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1193" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="1194" pos:column="4"/></block></then></if>
<cpp:endif pos:line="1195" pos:column="1">#<cpp:directive pos:line="1195" pos:column="2">endif<pos:position pos:line="1195" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1195" pos:column="8">/* CURL_BUILD_MAC_10_7 || CURL_BUILD_IOS */</comment>
}<pos:position pos:line="1196" pos:column="2"/></block></function>
<cpp:endif pos:line="1197" pos:column="1">#<cpp:directive pos:line="1197" pos:column="2">endif<pos:position pos:line="1197" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1197" pos:column="8">/* !CURL_DISABLE_VERBOSE_STRINGS */</comment>

<function><specifier pos:line="1199" pos:column="1">static<pos:position pos:line="1199" pos:column="7"/></specifier> <type><name pos:line="1199" pos:column="8">CURLcode<pos:position pos:line="1199" pos:column="16"/></name></type>
<name pos:line="1200" pos:column="1">darwinssl_connect_step3<pos:position pos:line="1200" pos:column="24"/></name><parameter_list pos:line="1200" pos:column="24">(<parameter><decl><type><name><name pos:line="1200" pos:column="25">struct<pos:position pos:line="1200" pos:column="31"/></name> <name pos:line="1200" pos:column="32">connectdata<pos:position pos:line="1200" pos:column="43"/></name></name> <modifier pos:line="1200" pos:column="44">*<pos:position pos:line="1200" pos:column="45"/></modifier></type><name pos:line="1200" pos:column="45">conn<pos:position pos:line="1200" pos:column="49"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="1201" pos:column="25">int<pos:position pos:line="1201" pos:column="28"/></name></type> <name pos:line="1201" pos:column="29">sockindex<pos:position pos:line="1201" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1201" pos:column="39"/></parameter_list>
<block pos:line="1202" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="1203" pos:column="3">struct<pos:position pos:line="1203" pos:column="9"/></name> <name pos:line="1203" pos:column="10">Curl_easy<pos:position pos:line="1203" pos:column="19"/></name></name> <modifier pos:line="1203" pos:column="20">*<pos:position pos:line="1203" pos:column="21"/></modifier></type><name pos:line="1203" pos:column="21">data<pos:position pos:line="1203" pos:column="25"/></name> <init pos:line="1203" pos:column="26">= <expr><name><name pos:line="1203" pos:column="28">conn<pos:position pos:line="1203" pos:column="32"/></name><operator pos:line="1203" pos:column="32">-&gt;<pos:position pos:line="1203" pos:column="37"/></operator><name pos:line="1203" pos:column="34">data<pos:position pos:line="1203" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="1203" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="1204" pos:column="3">struct<pos:position pos:line="1204" pos:column="9"/></name> <name pos:line="1204" pos:column="10">ssl_connect_data<pos:position pos:line="1204" pos:column="26"/></name></name> <modifier pos:line="1204" pos:column="27">*<pos:position pos:line="1204" pos:column="28"/></modifier></type><name pos:line="1204" pos:column="28">connssl<pos:position pos:line="1204" pos:column="35"/></name> <init pos:line="1204" pos:column="36">= <expr><operator pos:line="1204" pos:column="38">&amp;<pos:position pos:line="1204" pos:column="43"/></operator><name><name pos:line="1204" pos:column="39">conn<pos:position pos:line="1204" pos:column="43"/></name><operator pos:line="1204" pos:column="43">-&gt;<pos:position pos:line="1204" pos:column="48"/></operator><name pos:line="1204" pos:column="45">ssl<pos:position pos:line="1204" pos:column="48"/></name><index pos:line="1204" pos:column="48">[<expr><name pos:line="1204" pos:column="49">sockindex<pos:position pos:line="1204" pos:column="58"/></name></expr>]<pos:position pos:line="1204" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="1204" pos:column="60"/></decl_stmt>

  <comment type="block" pos:line="1206" pos:column="3">/* There is no step 3!
   * Well, okay, if verbose mode is on, let's print the details of the
   * server certificates. */</comment>
<cpp:ifndef pos:line="1209" pos:column="1">#<cpp:directive pos:line="1209" pos:column="2">ifndef<pos:position pos:line="1209" pos:column="8"/></cpp:directive> <name pos:line="1209" pos:column="9">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="1209" pos:column="37"/></name></cpp:ifndef>
  <if pos:line="1210" pos:column="3">if<condition pos:line="1210" pos:column="5">(<expr><name><name pos:line="1210" pos:column="6">data<pos:position pos:line="1210" pos:column="10"/></name><operator pos:line="1210" pos:column="10">-&gt;<pos:position pos:line="1210" pos:column="15"/></operator><name pos:line="1210" pos:column="12">set<pos:position pos:line="1210" pos:column="15"/></name><operator pos:line="1210" pos:column="15">.<pos:position pos:line="1210" pos:column="16"/></operator><name pos:line="1210" pos:column="16">verbose<pos:position pos:line="1210" pos:column="23"/></name></name></expr>)<pos:position pos:line="1210" pos:column="24"/></condition><then pos:line="1210" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="1211" pos:column="5">show_verbose_server_cert<pos:position pos:line="1211" pos:column="29"/></name><argument_list pos:line="1211" pos:column="29">(<argument><expr><name pos:line="1211" pos:column="30">conn<pos:position pos:line="1211" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1211" pos:column="36">sockindex<pos:position pos:line="1211" pos:column="45"/></name></expr></argument>)<pos:position pos:line="1211" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1211" pos:column="47"/></expr_stmt></block></then></if>
<cpp:endif pos:line="1212" pos:column="1">#<cpp:directive pos:line="1212" pos:column="2">endif<pos:position pos:line="1212" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name pos:line="1214" pos:column="3">connssl<pos:position pos:line="1214" pos:column="10"/></name><operator pos:line="1214" pos:column="10">-&gt;<pos:position pos:line="1214" pos:column="15"/></operator><name pos:line="1214" pos:column="12">connecting_state<pos:position pos:line="1214" pos:column="28"/></name></name> <operator pos:line="1214" pos:column="29">=<pos:position pos:line="1214" pos:column="30"/></operator> <name pos:line="1214" pos:column="31">ssl_connect_done<pos:position pos:line="1214" pos:column="47"/></name></expr>;<pos:position pos:line="1214" pos:column="48"/></expr_stmt>
  <return pos:line="1215" pos:column="3">return <expr><name pos:line="1215" pos:column="10">CURLE_OK<pos:position pos:line="1215" pos:column="18"/></name></expr>;<pos:position pos:line="1215" pos:column="19"/></return>
}<pos:position pos:line="1216" pos:column="2"/></block></function>

<decl_stmt><decl><specifier pos:line="1218" pos:column="1">static<pos:position pos:line="1218" pos:column="7"/></specifier> <type><name pos:line="1218" pos:column="8">Curl_recv<pos:position pos:line="1218" pos:column="17"/></name></type> <name pos:line="1218" pos:column="18">darwinssl_recv<pos:position pos:line="1218" pos:column="32"/></name></decl>;<pos:position pos:line="1218" pos:column="33"/></decl_stmt>
<decl_stmt><decl><specifier pos:line="1219" pos:column="1">static<pos:position pos:line="1219" pos:column="7"/></specifier> <type><name pos:line="1219" pos:column="8">Curl_send<pos:position pos:line="1219" pos:column="17"/></name></type> <name pos:line="1219" pos:column="18">darwinssl_send<pos:position pos:line="1219" pos:column="32"/></name></decl>;<pos:position pos:line="1219" pos:column="33"/></decl_stmt>

<function><specifier pos:line="1221" pos:column="1">static<pos:position pos:line="1221" pos:column="7"/></specifier> <type><name pos:line="1221" pos:column="8">CURLcode<pos:position pos:line="1221" pos:column="16"/></name></type>
<name pos:line="1222" pos:column="1">darwinssl_connect_common<pos:position pos:line="1222" pos:column="25"/></name><parameter_list pos:line="1222" pos:column="25">(<parameter><decl><type><name><name pos:line="1222" pos:column="26">struct<pos:position pos:line="1222" pos:column="32"/></name> <name pos:line="1222" pos:column="33">connectdata<pos:position pos:line="1222" pos:column="44"/></name></name> <modifier pos:line="1222" pos:column="45">*<pos:position pos:line="1222" pos:column="46"/></modifier></type><name pos:line="1222" pos:column="46">conn<pos:position pos:line="1222" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="1223" pos:column="26">int<pos:position pos:line="1223" pos:column="29"/></name></type> <name pos:line="1223" pos:column="30">sockindex<pos:position pos:line="1223" pos:column="39"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="1224" pos:column="26">bool<pos:position pos:line="1224" pos:column="30"/></name></type> <name pos:line="1224" pos:column="31">nonblocking<pos:position pos:line="1224" pos:column="42"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="1225" pos:column="26">bool<pos:position pos:line="1225" pos:column="30"/></name> <modifier pos:line="1225" pos:column="31">*<pos:position pos:line="1225" pos:column="32"/></modifier></type><name pos:line="1225" pos:column="32">done<pos:position pos:line="1225" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1225" pos:column="37"/></parameter_list>
<block pos:line="1226" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="1227" pos:column="3">CURLcode<pos:position pos:line="1227" pos:column="11"/></name></type> <name pos:line="1227" pos:column="12">result<pos:position pos:line="1227" pos:column="18"/></name></decl>;<pos:position pos:line="1227" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="1228" pos:column="3">struct<pos:position pos:line="1228" pos:column="9"/></name> <name pos:line="1228" pos:column="10">Curl_easy<pos:position pos:line="1228" pos:column="19"/></name></name> <modifier pos:line="1228" pos:column="20">*<pos:position pos:line="1228" pos:column="21"/></modifier></type><name pos:line="1228" pos:column="21">data<pos:position pos:line="1228" pos:column="25"/></name> <init pos:line="1228" pos:column="26">= <expr><name><name pos:line="1228" pos:column="28">conn<pos:position pos:line="1228" pos:column="32"/></name><operator pos:line="1228" pos:column="32">-&gt;<pos:position pos:line="1228" pos:column="37"/></operator><name pos:line="1228" pos:column="34">data<pos:position pos:line="1228" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="1228" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="1229" pos:column="3">struct<pos:position pos:line="1229" pos:column="9"/></name> <name pos:line="1229" pos:column="10">ssl_connect_data<pos:position pos:line="1229" pos:column="26"/></name></name> <modifier pos:line="1229" pos:column="27">*<pos:position pos:line="1229" pos:column="28"/></modifier></type><name pos:line="1229" pos:column="28">connssl<pos:position pos:line="1229" pos:column="35"/></name> <init pos:line="1229" pos:column="36">= <expr><operator pos:line="1229" pos:column="38">&amp;<pos:position pos:line="1229" pos:column="43"/></operator><name><name pos:line="1229" pos:column="39">conn<pos:position pos:line="1229" pos:column="43"/></name><operator pos:line="1229" pos:column="43">-&gt;<pos:position pos:line="1229" pos:column="48"/></operator><name pos:line="1229" pos:column="45">ssl<pos:position pos:line="1229" pos:column="48"/></name><index pos:line="1229" pos:column="48">[<expr><name pos:line="1229" pos:column="49">sockindex<pos:position pos:line="1229" pos:column="58"/></name></expr>]<pos:position pos:line="1229" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="1229" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1230" pos:column="3">curl_socket_t<pos:position pos:line="1230" pos:column="16"/></name></type> <name pos:line="1230" pos:column="17">sockfd<pos:position pos:line="1230" pos:column="23"/></name> <init pos:line="1230" pos:column="24">= <expr><name><name pos:line="1230" pos:column="26">conn<pos:position pos:line="1230" pos:column="30"/></name><operator pos:line="1230" pos:column="30">-&gt;<pos:position pos:line="1230" pos:column="35"/></operator><name pos:line="1230" pos:column="32">sock<pos:position pos:line="1230" pos:column="36"/></name><index pos:line="1230" pos:column="36">[<expr><name pos:line="1230" pos:column="37">sockindex<pos:position pos:line="1230" pos:column="46"/></name></expr>]<pos:position pos:line="1230" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="1230" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1231" pos:column="3">long<pos:position pos:line="1231" pos:column="7"/></name></type> <name pos:line="1231" pos:column="8">timeout_ms<pos:position pos:line="1231" pos:column="18"/></name></decl>;<pos:position pos:line="1231" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1232" pos:column="3">int<pos:position pos:line="1232" pos:column="6"/></name></type> <name pos:line="1232" pos:column="7">what<pos:position pos:line="1232" pos:column="11"/></name></decl>;<pos:position pos:line="1232" pos:column="12"/></decl_stmt>

  <comment type="block" pos:line="1234" pos:column="3">/* check if the connection has already been established */</comment>
  <if pos:line="1235" pos:column="3">if<condition pos:line="1235" pos:column="5">(<expr><name pos:line="1235" pos:column="6">ssl_connection_complete<pos:position pos:line="1235" pos:column="29"/></name> <operator pos:line="1235" pos:column="30">==<pos:position pos:line="1235" pos:column="32"/></operator> <name><name pos:line="1235" pos:column="33">connssl<pos:position pos:line="1235" pos:column="40"/></name><operator pos:line="1235" pos:column="40">-&gt;<pos:position pos:line="1235" pos:column="45"/></operator><name pos:line="1235" pos:column="42">state<pos:position pos:line="1235" pos:column="47"/></name></name></expr>)<pos:position pos:line="1235" pos:column="48"/></condition><then pos:line="1235" pos:column="48"> <block pos:line="1235" pos:column="49">{
    <expr_stmt><expr><operator pos:line="1236" pos:column="5">*<pos:position pos:line="1236" pos:column="6"/></operator><name pos:line="1236" pos:column="6">done<pos:position pos:line="1236" pos:column="10"/></name> <operator pos:line="1236" pos:column="11">=<pos:position pos:line="1236" pos:column="12"/></operator> <name pos:line="1236" pos:column="13">TRUE<pos:position pos:line="1236" pos:column="17"/></name></expr>;<pos:position pos:line="1236" pos:column="18"/></expr_stmt>
    <return pos:line="1237" pos:column="5">return <expr><name pos:line="1237" pos:column="12">CURLE_OK<pos:position pos:line="1237" pos:column="20"/></name></expr>;<pos:position pos:line="1237" pos:column="21"/></return>
  }<pos:position pos:line="1238" pos:column="4"/></block></then></if>

  <if pos:line="1240" pos:column="3">if<condition pos:line="1240" pos:column="5">(<expr><name pos:line="1240" pos:column="6">ssl_connect_1<pos:position pos:line="1240" pos:column="19"/></name> <operator pos:line="1240" pos:column="20">==<pos:position pos:line="1240" pos:column="22"/></operator> <name><name pos:line="1240" pos:column="23">connssl<pos:position pos:line="1240" pos:column="30"/></name><operator pos:line="1240" pos:column="30">-&gt;<pos:position pos:line="1240" pos:column="35"/></operator><name pos:line="1240" pos:column="32">connecting_state<pos:position pos:line="1240" pos:column="48"/></name></name></expr>)<pos:position pos:line="1240" pos:column="49"/></condition><then pos:line="1240" pos:column="49"> <block pos:line="1240" pos:column="50">{
    <comment type="block" pos:line="1241" pos:column="5">/* Find out how much more time we're allowed */</comment>
    <expr_stmt><expr><name pos:line="1242" pos:column="5">timeout_ms<pos:position pos:line="1242" pos:column="15"/></name> <operator pos:line="1242" pos:column="16">=<pos:position pos:line="1242" pos:column="17"/></operator> <call><name pos:line="1242" pos:column="18">Curl_timeleft<pos:position pos:line="1242" pos:column="31"/></name><argument_list pos:line="1242" pos:column="31">(<argument><expr><name pos:line="1242" pos:column="32">data<pos:position pos:line="1242" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="1242" pos:column="38">NULL<pos:position pos:line="1242" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1242" pos:column="44">TRUE<pos:position pos:line="1242" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1242" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1242" pos:column="50"/></expr_stmt>

    <if pos:line="1244" pos:column="5">if<condition pos:line="1244" pos:column="7">(<expr><name pos:line="1244" pos:column="8">timeout_ms<pos:position pos:line="1244" pos:column="18"/></name> <operator pos:line="1244" pos:column="19">&lt;<pos:position pos:line="1244" pos:column="23"/></operator> <literal type="number" pos:line="1244" pos:column="21">0<pos:position pos:line="1244" pos:column="22"/></literal></expr>)<pos:position pos:line="1244" pos:column="23"/></condition><then pos:line="1244" pos:column="23"> <block pos:line="1244" pos:column="24">{
      <comment type="block" pos:line="1245" pos:column="7">/* no need to continue if time already is up */</comment>
      <expr_stmt><expr><call><name pos:line="1246" pos:column="7">failf<pos:position pos:line="1246" pos:column="12"/></name><argument_list pos:line="1246" pos:column="12">(<argument><expr><name pos:line="1246" pos:column="13">data<pos:position pos:line="1246" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1246" pos:column="19">"SSL connection timeout"<pos:position pos:line="1246" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="1246" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1246" pos:column="45"/></expr_stmt>
      <return pos:line="1247" pos:column="7">return <expr><name pos:line="1247" pos:column="14">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="1247" pos:column="38"/></name></expr>;<pos:position pos:line="1247" pos:column="39"/></return>
    }<pos:position pos:line="1248" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="1250" pos:column="5">result<pos:position pos:line="1250" pos:column="11"/></name> <operator pos:line="1250" pos:column="12">=<pos:position pos:line="1250" pos:column="13"/></operator> <call><name pos:line="1250" pos:column="14">darwinssl_connect_step1<pos:position pos:line="1250" pos:column="37"/></name><argument_list pos:line="1250" pos:column="37">(<argument><expr><name pos:line="1250" pos:column="38">conn<pos:position pos:line="1250" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1250" pos:column="44">sockindex<pos:position pos:line="1250" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1250" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1250" pos:column="55"/></expr_stmt>
    <if pos:line="1251" pos:column="5">if<condition pos:line="1251" pos:column="7">(<expr><name pos:line="1251" pos:column="8">result<pos:position pos:line="1251" pos:column="14"/></name></expr>)<pos:position pos:line="1251" pos:column="15"/></condition><then pos:line="1251" pos:column="15">
      <block type="pseudo"><return pos:line="1252" pos:column="7">return <expr><name pos:line="1252" pos:column="14">result<pos:position pos:line="1252" pos:column="20"/></name></expr>;<pos:position pos:line="1252" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="1253" pos:column="4"/></block></then></if>

  <while pos:line="1255" pos:column="3">while<condition pos:line="1255" pos:column="8">(<expr><name pos:line="1255" pos:column="9">ssl_connect_2<pos:position pos:line="1255" pos:column="22"/></name> <operator pos:line="1255" pos:column="23">==<pos:position pos:line="1255" pos:column="25"/></operator> <name><name pos:line="1255" pos:column="26">connssl<pos:position pos:line="1255" pos:column="33"/></name><operator pos:line="1255" pos:column="33">-&gt;<pos:position pos:line="1255" pos:column="38"/></operator><name pos:line="1255" pos:column="35">connecting_state<pos:position pos:line="1255" pos:column="51"/></name></name> <operator pos:line="1255" pos:column="52">||<pos:position pos:line="1255" pos:column="54"/></operator>
        <name pos:line="1256" pos:column="9">ssl_connect_2_reading<pos:position pos:line="1256" pos:column="30"/></name> <operator pos:line="1256" pos:column="31">==<pos:position pos:line="1256" pos:column="33"/></operator> <name><name pos:line="1256" pos:column="34">connssl<pos:position pos:line="1256" pos:column="41"/></name><operator pos:line="1256" pos:column="41">-&gt;<pos:position pos:line="1256" pos:column="46"/></operator><name pos:line="1256" pos:column="43">connecting_state<pos:position pos:line="1256" pos:column="59"/></name></name> <operator pos:line="1256" pos:column="60">||<pos:position pos:line="1256" pos:column="62"/></operator>
        <name pos:line="1257" pos:column="9">ssl_connect_2_writing<pos:position pos:line="1257" pos:column="30"/></name> <operator pos:line="1257" pos:column="31">==<pos:position pos:line="1257" pos:column="33"/></operator> <name><name pos:line="1257" pos:column="34">connssl<pos:position pos:line="1257" pos:column="41"/></name><operator pos:line="1257" pos:column="41">-&gt;<pos:position pos:line="1257" pos:column="46"/></operator><name pos:line="1257" pos:column="43">connecting_state<pos:position pos:line="1257" pos:column="59"/></name></name></expr>)<pos:position pos:line="1257" pos:column="60"/></condition> <block pos:line="1257" pos:column="61">{

    <comment type="block" pos:line="1259" pos:column="5">/* check allowed time left */</comment>
    <expr_stmt><expr><name pos:line="1260" pos:column="5">timeout_ms<pos:position pos:line="1260" pos:column="15"/></name> <operator pos:line="1260" pos:column="16">=<pos:position pos:line="1260" pos:column="17"/></operator> <call><name pos:line="1260" pos:column="18">Curl_timeleft<pos:position pos:line="1260" pos:column="31"/></name><argument_list pos:line="1260" pos:column="31">(<argument><expr><name pos:line="1260" pos:column="32">data<pos:position pos:line="1260" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="1260" pos:column="38">NULL<pos:position pos:line="1260" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1260" pos:column="44">TRUE<pos:position pos:line="1260" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1260" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1260" pos:column="50"/></expr_stmt>

    <if pos:line="1262" pos:column="5">if<condition pos:line="1262" pos:column="7">(<expr><name pos:line="1262" pos:column="8">timeout_ms<pos:position pos:line="1262" pos:column="18"/></name> <operator pos:line="1262" pos:column="19">&lt;<pos:position pos:line="1262" pos:column="23"/></operator> <literal type="number" pos:line="1262" pos:column="21">0<pos:position pos:line="1262" pos:column="22"/></literal></expr>)<pos:position pos:line="1262" pos:column="23"/></condition><then pos:line="1262" pos:column="23"> <block pos:line="1262" pos:column="24">{
      <comment type="block" pos:line="1263" pos:column="7">/* no need to continue if time already is up */</comment>
      <expr_stmt><expr><call><name pos:line="1264" pos:column="7">failf<pos:position pos:line="1264" pos:column="12"/></name><argument_list pos:line="1264" pos:column="12">(<argument><expr><name pos:line="1264" pos:column="13">data<pos:position pos:line="1264" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1264" pos:column="19">"SSL connection timeout"<pos:position pos:line="1264" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="1264" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1264" pos:column="45"/></expr_stmt>
      <return pos:line="1265" pos:column="7">return <expr><name pos:line="1265" pos:column="14">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="1265" pos:column="38"/></name></expr>;<pos:position pos:line="1265" pos:column="39"/></return>
    }<pos:position pos:line="1266" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="1268" pos:column="5">/* if ssl is expecting something, check if it's available. */</comment>
    <if pos:line="1269" pos:column="5">if<condition pos:line="1269" pos:column="7">(<expr><name><name pos:line="1269" pos:column="8">connssl<pos:position pos:line="1269" pos:column="15"/></name><operator pos:line="1269" pos:column="15">-&gt;<pos:position pos:line="1269" pos:column="20"/></operator><name pos:line="1269" pos:column="17">connecting_state<pos:position pos:line="1269" pos:column="33"/></name></name> <operator pos:line="1269" pos:column="34">==<pos:position pos:line="1269" pos:column="36"/></operator> <name pos:line="1269" pos:column="37">ssl_connect_2_reading<pos:position pos:line="1269" pos:column="58"/></name> <operator pos:line="1269" pos:column="59">||<pos:position pos:line="1269" pos:column="61"/></operator>
       <name><name pos:line="1270" pos:column="8">connssl<pos:position pos:line="1270" pos:column="15"/></name><operator pos:line="1270" pos:column="15">-&gt;<pos:position pos:line="1270" pos:column="20"/></operator><name pos:line="1270" pos:column="17">connecting_state<pos:position pos:line="1270" pos:column="33"/></name></name> <operator pos:line="1270" pos:column="34">==<pos:position pos:line="1270" pos:column="36"/></operator> <name pos:line="1270" pos:column="37">ssl_connect_2_writing<pos:position pos:line="1270" pos:column="58"/></name></expr>)<pos:position pos:line="1270" pos:column="59"/></condition><then pos:line="1270" pos:column="59"> <block pos:line="1270" pos:column="60">{

      <decl_stmt><decl><type><name pos:line="1272" pos:column="7">curl_socket_t<pos:position pos:line="1272" pos:column="20"/></name></type> <name pos:line="1272" pos:column="21">writefd<pos:position pos:line="1272" pos:column="28"/></name> <init pos:line="1272" pos:column="29">= <expr><ternary><condition><expr><name pos:line="1272" pos:column="31">ssl_connect_2_writing<pos:position pos:line="1272" pos:column="52"/></name> <operator pos:line="1272" pos:column="53">==<pos:position pos:line="1272" pos:column="55"/></operator>
      <name><name pos:line="1273" pos:column="7">connssl<pos:position pos:line="1273" pos:column="14"/></name><operator pos:line="1273" pos:column="14">-&gt;<pos:position pos:line="1273" pos:column="19"/></operator><name pos:line="1273" pos:column="16">connecting_state<pos:position pos:line="1273" pos:column="32"/></name></name></expr>?<pos:position pos:line="1273" pos:column="33"/></condition><then><expr><name pos:line="1273" pos:column="33">sockfd<pos:position pos:line="1273" pos:column="39"/></name></expr></then><else pos:line="1273" pos:column="39">:<expr><name pos:line="1273" pos:column="40">CURL_SOCKET_BAD<pos:position pos:line="1273" pos:column="55"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="1273" pos:column="56"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1274" pos:column="7">curl_socket_t<pos:position pos:line="1274" pos:column="20"/></name></type> <name pos:line="1274" pos:column="21">readfd<pos:position pos:line="1274" pos:column="27"/></name> <init pos:line="1274" pos:column="28">= <expr><ternary><condition><expr><name pos:line="1274" pos:column="30">ssl_connect_2_reading<pos:position pos:line="1274" pos:column="51"/></name> <operator pos:line="1274" pos:column="52">==<pos:position pos:line="1274" pos:column="54"/></operator>
      <name><name pos:line="1275" pos:column="7">connssl<pos:position pos:line="1275" pos:column="14"/></name><operator pos:line="1275" pos:column="14">-&gt;<pos:position pos:line="1275" pos:column="19"/></operator><name pos:line="1275" pos:column="16">connecting_state<pos:position pos:line="1275" pos:column="32"/></name></name></expr>?<pos:position pos:line="1275" pos:column="33"/></condition><then><expr><name pos:line="1275" pos:column="33">sockfd<pos:position pos:line="1275" pos:column="39"/></name></expr></then><else pos:line="1275" pos:column="39">:<expr><name pos:line="1275" pos:column="40">CURL_SOCKET_BAD<pos:position pos:line="1275" pos:column="55"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="1275" pos:column="56"/></decl_stmt>

      <expr_stmt><expr><name pos:line="1277" pos:column="7">what<pos:position pos:line="1277" pos:column="11"/></name> <operator pos:line="1277" pos:column="12">=<pos:position pos:line="1277" pos:column="13"/></operator> <call><name pos:line="1277" pos:column="14">Curl_socket_check<pos:position pos:line="1277" pos:column="31"/></name><argument_list pos:line="1277" pos:column="31">(<argument><expr><name pos:line="1277" pos:column="32">readfd<pos:position pos:line="1277" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="40">CURL_SOCKET_BAD<pos:position pos:line="1277" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="57">writefd<pos:position pos:line="1277" pos:column="64"/></name></expr></argument>,
                               <argument><expr><ternary><condition><expr><name pos:line="1278" pos:column="32">nonblocking<pos:position pos:line="1278" pos:column="43"/></name></expr>?<pos:position pos:line="1278" pos:column="44"/></condition><then><expr><literal type="number" pos:line="1278" pos:column="44">0<pos:position pos:line="1278" pos:column="45"/></literal></expr></then><else pos:line="1278" pos:column="45">:<expr><name pos:line="1278" pos:column="46">timeout_ms<pos:position pos:line="1278" pos:column="56"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="1278" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1278" pos:column="58"/></expr_stmt>
      <if pos:line="1279" pos:column="7">if<condition pos:line="1279" pos:column="9">(<expr><name pos:line="1279" pos:column="10">what<pos:position pos:line="1279" pos:column="14"/></name> <operator pos:line="1279" pos:column="15">&lt;<pos:position pos:line="1279" pos:column="19"/></operator> <literal type="number" pos:line="1279" pos:column="17">0<pos:position pos:line="1279" pos:column="18"/></literal></expr>)<pos:position pos:line="1279" pos:column="19"/></condition><then pos:line="1279" pos:column="19"> <block pos:line="1279" pos:column="20">{
        <comment type="block" pos:line="1280" pos:column="9">/* fatal error */</comment>
        <expr_stmt><expr><call><name pos:line="1281" pos:column="9">failf<pos:position pos:line="1281" pos:column="14"/></name><argument_list pos:line="1281" pos:column="14">(<argument><expr><name pos:line="1281" pos:column="15">data<pos:position pos:line="1281" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1281" pos:column="21">"select/poll on SSL socket, errno: %d"<pos:position pos:line="1281" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="1281" pos:column="61">SOCKERRNO<pos:position pos:line="1281" pos:column="70"/></name></expr></argument>)<pos:position pos:line="1281" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1281" pos:column="72"/></expr_stmt>
        <return pos:line="1282" pos:column="9">return <expr><name pos:line="1282" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="1282" pos:column="39"/></name></expr>;<pos:position pos:line="1282" pos:column="40"/></return>
      }<pos:position pos:line="1283" pos:column="8"/></block></then>
      <elseif pos:line="1284" pos:column="7">else <if pos:line="1284" pos:column="12">if<condition pos:line="1284" pos:column="14">(<expr><literal type="number" pos:line="1284" pos:column="15">0<pos:position pos:line="1284" pos:column="16"/></literal> <operator pos:line="1284" pos:column="17">==<pos:position pos:line="1284" pos:column="19"/></operator> <name pos:line="1284" pos:column="20">what<pos:position pos:line="1284" pos:column="24"/></name></expr>)<pos:position pos:line="1284" pos:column="25"/></condition><then pos:line="1284" pos:column="25"> <block pos:line="1284" pos:column="26">{
        <if pos:line="1285" pos:column="9">if<condition pos:line="1285" pos:column="11">(<expr><name pos:line="1285" pos:column="12">nonblocking<pos:position pos:line="1285" pos:column="23"/></name></expr>)<pos:position pos:line="1285" pos:column="24"/></condition><then pos:line="1285" pos:column="24"> <block pos:line="1285" pos:column="25">{
          <expr_stmt><expr><operator pos:line="1286" pos:column="11">*<pos:position pos:line="1286" pos:column="12"/></operator><name pos:line="1286" pos:column="12">done<pos:position pos:line="1286" pos:column="16"/></name> <operator pos:line="1286" pos:column="17">=<pos:position pos:line="1286" pos:column="18"/></operator> <name pos:line="1286" pos:column="19">FALSE<pos:position pos:line="1286" pos:column="24"/></name></expr>;<pos:position pos:line="1286" pos:column="25"/></expr_stmt>
          <return pos:line="1287" pos:column="11">return <expr><name pos:line="1287" pos:column="18">CURLE_OK<pos:position pos:line="1287" pos:column="26"/></name></expr>;<pos:position pos:line="1287" pos:column="27"/></return>
        }<pos:position pos:line="1288" pos:column="10"/></block></then>
        <else pos:line="1289" pos:column="9">else <block pos:line="1289" pos:column="14">{
          <comment type="block" pos:line="1290" pos:column="11">/* timeout */</comment>
          <expr_stmt><expr><call><name pos:line="1291" pos:column="11">failf<pos:position pos:line="1291" pos:column="16"/></name><argument_list pos:line="1291" pos:column="16">(<argument><expr><name pos:line="1291" pos:column="17">data<pos:position pos:line="1291" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1291" pos:column="23">"SSL connection timeout"<pos:position pos:line="1291" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="1291" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1291" pos:column="49"/></expr_stmt>
          <return pos:line="1292" pos:column="11">return <expr><name pos:line="1292" pos:column="18">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="1292" pos:column="42"/></name></expr>;<pos:position pos:line="1292" pos:column="43"/></return>
        }<pos:position pos:line="1293" pos:column="10"/></block></else></if>
      }<pos:position pos:line="1294" pos:column="8"/></block></then></if></elseif></if>
      <comment type="block" pos:line="1295" pos:column="7">/* socket is readable or writable */</comment>
    }<pos:position pos:line="1296" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="1298" pos:column="5">/* Run transaction, and return to the caller if it failed or if this
     * connection is done nonblocking and this loop would execute again. This
     * permits the owner of a multi handle to abort a connection attempt
     * before step2 has completed while ensuring that a client using select()
     * or epoll() will always have a valid fdset to wait on.
     */</comment>
    <expr_stmt><expr><name pos:line="1304" pos:column="5">result<pos:position pos:line="1304" pos:column="11"/></name> <operator pos:line="1304" pos:column="12">=<pos:position pos:line="1304" pos:column="13"/></operator> <call><name pos:line="1304" pos:column="14">darwinssl_connect_step2<pos:position pos:line="1304" pos:column="37"/></name><argument_list pos:line="1304" pos:column="37">(<argument><expr><name pos:line="1304" pos:column="38">conn<pos:position pos:line="1304" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1304" pos:column="44">sockindex<pos:position pos:line="1304" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1304" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1304" pos:column="55"/></expr_stmt>
    <if pos:line="1305" pos:column="5">if<condition pos:line="1305" pos:column="7">(<expr><name pos:line="1305" pos:column="8">result<pos:position pos:line="1305" pos:column="14"/></name> <operator pos:line="1305" pos:column="15">||<pos:position pos:line="1305" pos:column="17"/></operator> <operator pos:line="1305" pos:column="18">(<pos:position pos:line="1305" pos:column="19"/></operator><name pos:line="1305" pos:column="19">nonblocking<pos:position pos:line="1305" pos:column="30"/></name> <operator pos:line="1305" pos:column="31">&amp;&amp;<pos:position pos:line="1305" pos:column="41"/></operator>
                  <operator pos:line="1306" pos:column="19">(<pos:position pos:line="1306" pos:column="20"/></operator><name pos:line="1306" pos:column="20">ssl_connect_2<pos:position pos:line="1306" pos:column="33"/></name> <operator pos:line="1306" pos:column="34">==<pos:position pos:line="1306" pos:column="36"/></operator> <name><name pos:line="1306" pos:column="37">connssl<pos:position pos:line="1306" pos:column="44"/></name><operator pos:line="1306" pos:column="44">-&gt;<pos:position pos:line="1306" pos:column="49"/></operator><name pos:line="1306" pos:column="46">connecting_state<pos:position pos:line="1306" pos:column="62"/></name></name> <operator pos:line="1306" pos:column="63">||<pos:position pos:line="1306" pos:column="65"/></operator>
                   <name pos:line="1307" pos:column="20">ssl_connect_2_reading<pos:position pos:line="1307" pos:column="41"/></name> <operator pos:line="1307" pos:column="42">==<pos:position pos:line="1307" pos:column="44"/></operator> <name><name pos:line="1307" pos:column="45">connssl<pos:position pos:line="1307" pos:column="52"/></name><operator pos:line="1307" pos:column="52">-&gt;<pos:position pos:line="1307" pos:column="57"/></operator><name pos:line="1307" pos:column="54">connecting_state<pos:position pos:line="1307" pos:column="70"/></name></name> <operator pos:line="1307" pos:column="71">||<pos:position pos:line="1307" pos:column="73"/></operator>
                   <name pos:line="1308" pos:column="20">ssl_connect_2_writing<pos:position pos:line="1308" pos:column="41"/></name> <operator pos:line="1308" pos:column="42">==<pos:position pos:line="1308" pos:column="44"/></operator> <name><name pos:line="1308" pos:column="45">connssl<pos:position pos:line="1308" pos:column="52"/></name><operator pos:line="1308" pos:column="52">-&gt;<pos:position pos:line="1308" pos:column="57"/></operator><name pos:line="1308" pos:column="54">connecting_state<pos:position pos:line="1308" pos:column="70"/></name></name><operator pos:line="1308" pos:column="70">)<pos:position pos:line="1308" pos:column="71"/></operator><operator pos:line="1308" pos:column="71">)<pos:position pos:line="1308" pos:column="72"/></operator></expr>)<pos:position pos:line="1308" pos:column="73"/></condition><then pos:line="1308" pos:column="73">
      <block type="pseudo"><return pos:line="1309" pos:column="7">return <expr><name pos:line="1309" pos:column="14">result<pos:position pos:line="1309" pos:column="20"/></name></expr>;<pos:position pos:line="1309" pos:column="21"/></return></block></then></if>

  }<pos:position pos:line="1311" pos:column="4"/></block></while> <comment type="block" pos:line="1311" pos:column="5">/* repeat step2 until all transactions are done. */</comment>


  <if pos:line="1314" pos:column="3">if<condition pos:line="1314" pos:column="5">(<expr><name pos:line="1314" pos:column="6">ssl_connect_3<pos:position pos:line="1314" pos:column="19"/></name> <operator pos:line="1314" pos:column="20">==<pos:position pos:line="1314" pos:column="22"/></operator> <name><name pos:line="1314" pos:column="23">connssl<pos:position pos:line="1314" pos:column="30"/></name><operator pos:line="1314" pos:column="30">-&gt;<pos:position pos:line="1314" pos:column="35"/></operator><name pos:line="1314" pos:column="32">connecting_state<pos:position pos:line="1314" pos:column="48"/></name></name></expr>)<pos:position pos:line="1314" pos:column="49"/></condition><then pos:line="1314" pos:column="49"> <block pos:line="1314" pos:column="50">{
    <expr_stmt><expr><name pos:line="1315" pos:column="5">result<pos:position pos:line="1315" pos:column="11"/></name> <operator pos:line="1315" pos:column="12">=<pos:position pos:line="1315" pos:column="13"/></operator> <call><name pos:line="1315" pos:column="14">darwinssl_connect_step3<pos:position pos:line="1315" pos:column="37"/></name><argument_list pos:line="1315" pos:column="37">(<argument><expr><name pos:line="1315" pos:column="38">conn<pos:position pos:line="1315" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1315" pos:column="44">sockindex<pos:position pos:line="1315" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1315" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1315" pos:column="55"/></expr_stmt>
    <if pos:line="1316" pos:column="5">if<condition pos:line="1316" pos:column="7">(<expr><name pos:line="1316" pos:column="8">result<pos:position pos:line="1316" pos:column="14"/></name></expr>)<pos:position pos:line="1316" pos:column="15"/></condition><then pos:line="1316" pos:column="15">
      <block type="pseudo"><return pos:line="1317" pos:column="7">return <expr><name pos:line="1317" pos:column="14">result<pos:position pos:line="1317" pos:column="20"/></name></expr>;<pos:position pos:line="1317" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="1318" pos:column="4"/></block></then></if>

  <if pos:line="1320" pos:column="3">if<condition pos:line="1320" pos:column="5">(<expr><name pos:line="1320" pos:column="6">ssl_connect_done<pos:position pos:line="1320" pos:column="22"/></name> <operator pos:line="1320" pos:column="23">==<pos:position pos:line="1320" pos:column="25"/></operator> <name><name pos:line="1320" pos:column="26">connssl<pos:position pos:line="1320" pos:column="33"/></name><operator pos:line="1320" pos:column="33">-&gt;<pos:position pos:line="1320" pos:column="38"/></operator><name pos:line="1320" pos:column="35">connecting_state<pos:position pos:line="1320" pos:column="51"/></name></name></expr>)<pos:position pos:line="1320" pos:column="52"/></condition><then pos:line="1320" pos:column="52"> <block pos:line="1320" pos:column="53">{
    <expr_stmt><expr><name><name pos:line="1321" pos:column="5">connssl<pos:position pos:line="1321" pos:column="12"/></name><operator pos:line="1321" pos:column="12">-&gt;<pos:position pos:line="1321" pos:column="17"/></operator><name pos:line="1321" pos:column="14">state<pos:position pos:line="1321" pos:column="19"/></name></name> <operator pos:line="1321" pos:column="20">=<pos:position pos:line="1321" pos:column="21"/></operator> <name pos:line="1321" pos:column="22">ssl_connection_complete<pos:position pos:line="1321" pos:column="45"/></name></expr>;<pos:position pos:line="1321" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1322" pos:column="5">conn<pos:position pos:line="1322" pos:column="9"/></name><operator pos:line="1322" pos:column="9">-&gt;<pos:position pos:line="1322" pos:column="14"/></operator><name pos:line="1322" pos:column="11">recv<pos:position pos:line="1322" pos:column="15"/></name><index pos:line="1322" pos:column="15">[<expr><name pos:line="1322" pos:column="16">sockindex<pos:position pos:line="1322" pos:column="25"/></name></expr>]<pos:position pos:line="1322" pos:column="26"/></index></name> <operator pos:line="1322" pos:column="27">=<pos:position pos:line="1322" pos:column="28"/></operator> <name pos:line="1322" pos:column="29">darwinssl_recv<pos:position pos:line="1322" pos:column="43"/></name></expr>;<pos:position pos:line="1322" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1323" pos:column="5">conn<pos:position pos:line="1323" pos:column="9"/></name><operator pos:line="1323" pos:column="9">-&gt;<pos:position pos:line="1323" pos:column="14"/></operator><name pos:line="1323" pos:column="11">send<pos:position pos:line="1323" pos:column="15"/></name><index pos:line="1323" pos:column="15">[<expr><name pos:line="1323" pos:column="16">sockindex<pos:position pos:line="1323" pos:column="25"/></name></expr>]<pos:position pos:line="1323" pos:column="26"/></index></name> <operator pos:line="1323" pos:column="27">=<pos:position pos:line="1323" pos:column="28"/></operator> <name pos:line="1323" pos:column="29">darwinssl_send<pos:position pos:line="1323" pos:column="43"/></name></expr>;<pos:position pos:line="1323" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="1324" pos:column="5">*<pos:position pos:line="1324" pos:column="6"/></operator><name pos:line="1324" pos:column="6">done<pos:position pos:line="1324" pos:column="10"/></name> <operator pos:line="1324" pos:column="11">=<pos:position pos:line="1324" pos:column="12"/></operator> <name pos:line="1324" pos:column="13">TRUE<pos:position pos:line="1324" pos:column="17"/></name></expr>;<pos:position pos:line="1324" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="1325" pos:column="4"/></block></then>
  <else pos:line="1326" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><operator pos:line="1327" pos:column="5">*<pos:position pos:line="1327" pos:column="6"/></operator><name pos:line="1327" pos:column="6">done<pos:position pos:line="1327" pos:column="10"/></name> <operator pos:line="1327" pos:column="11">=<pos:position pos:line="1327" pos:column="12"/></operator> <name pos:line="1327" pos:column="13">FALSE<pos:position pos:line="1327" pos:column="18"/></name></expr>;<pos:position pos:line="1327" pos:column="19"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="1329" pos:column="3">/* Reset our connect state machine */</comment>
  <expr_stmt><expr><name><name pos:line="1330" pos:column="3">connssl<pos:position pos:line="1330" pos:column="10"/></name><operator pos:line="1330" pos:column="10">-&gt;<pos:position pos:line="1330" pos:column="15"/></operator><name pos:line="1330" pos:column="12">connecting_state<pos:position pos:line="1330" pos:column="28"/></name></name> <operator pos:line="1330" pos:column="29">=<pos:position pos:line="1330" pos:column="30"/></operator> <name pos:line="1330" pos:column="31">ssl_connect_1<pos:position pos:line="1330" pos:column="44"/></name></expr>;<pos:position pos:line="1330" pos:column="45"/></expr_stmt>

  <return pos:line="1332" pos:column="3">return <expr><name pos:line="1332" pos:column="10">CURLE_OK<pos:position pos:line="1332" pos:column="18"/></name></expr>;<pos:position pos:line="1332" pos:column="19"/></return>
}<pos:position pos:line="1333" pos:column="2"/></block></function>

<function><specifier pos:line="1335" pos:column="1">static<pos:position pos:line="1335" pos:column="7"/></specifier> <type><name pos:line="1335" pos:column="8">CURLcode<pos:position pos:line="1335" pos:column="16"/></name></type> <name pos:line="1335" pos:column="17">Curl_darwinssl_connect_nonblocking<pos:position pos:line="1335" pos:column="51"/></name><parameter_list pos:line="1335" pos:column="51">(<parameter><decl><type><name><name pos:line="1335" pos:column="52">struct<pos:position pos:line="1335" pos:column="58"/></name> <name pos:line="1335" pos:column="59">connectdata<pos:position pos:line="1335" pos:column="70"/></name></name> <modifier pos:line="1335" pos:column="71">*<pos:position pos:line="1335" pos:column="72"/></modifier></type><name pos:line="1335" pos:column="72">conn<pos:position pos:line="1335" pos:column="76"/></name></decl></parameter>,
                                                   <parameter><decl><type><name pos:line="1336" pos:column="52">int<pos:position pos:line="1336" pos:column="55"/></name></type> <name pos:line="1336" pos:column="56">sockindex<pos:position pos:line="1336" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1336" pos:column="67">bool<pos:position pos:line="1336" pos:column="71"/></name> <modifier pos:line="1336" pos:column="72">*<pos:position pos:line="1336" pos:column="73"/></modifier></type><name pos:line="1336" pos:column="73">done<pos:position pos:line="1336" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1336" pos:column="78"/></parameter_list>
<block pos:line="1337" pos:column="1">{
  <return pos:line="1338" pos:column="3">return <expr><call><name pos:line="1338" pos:column="10">darwinssl_connect_common<pos:position pos:line="1338" pos:column="34"/></name><argument_list pos:line="1338" pos:column="34">(<argument><expr><name pos:line="1338" pos:column="35">conn<pos:position pos:line="1338" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="1338" pos:column="41">sockindex<pos:position pos:line="1338" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1338" pos:column="52">TRUE<pos:position pos:line="1338" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1338" pos:column="58">done<pos:position pos:line="1338" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1338" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1338" pos:column="64"/></return>
}<pos:position pos:line="1339" pos:column="2"/></block></function>

<function><specifier pos:line="1341" pos:column="1">static<pos:position pos:line="1341" pos:column="7"/></specifier> <type><name pos:line="1341" pos:column="8">CURLcode<pos:position pos:line="1341" pos:column="16"/></name></type> <name pos:line="1341" pos:column="17">Curl_darwinssl_connect<pos:position pos:line="1341" pos:column="39"/></name><parameter_list pos:line="1341" pos:column="39">(<parameter><decl><type><name><name pos:line="1341" pos:column="40">struct<pos:position pos:line="1341" pos:column="46"/></name> <name pos:line="1341" pos:column="47">connectdata<pos:position pos:line="1341" pos:column="58"/></name></name> <modifier pos:line="1341" pos:column="59">*<pos:position pos:line="1341" pos:column="60"/></modifier></type><name pos:line="1341" pos:column="60">conn<pos:position pos:line="1341" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1341" pos:column="66">int<pos:position pos:line="1341" pos:column="69"/></name></type> <name pos:line="1341" pos:column="70">sockindex<pos:position pos:line="1341" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1341" pos:column="80"/></parameter_list>
<block pos:line="1342" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="1343" pos:column="3">CURLcode<pos:position pos:line="1343" pos:column="11"/></name></type> <name pos:line="1343" pos:column="12">result<pos:position pos:line="1343" pos:column="18"/></name></decl>;<pos:position pos:line="1343" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1344" pos:column="3">bool<pos:position pos:line="1344" pos:column="7"/></name></type> <name pos:line="1344" pos:column="8">done<pos:position pos:line="1344" pos:column="12"/></name> <init pos:line="1344" pos:column="13">= <expr><name pos:line="1344" pos:column="15">FALSE<pos:position pos:line="1344" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="1344" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="1346" pos:column="3">result<pos:position pos:line="1346" pos:column="9"/></name> <operator pos:line="1346" pos:column="10">=<pos:position pos:line="1346" pos:column="11"/></operator> <call><name pos:line="1346" pos:column="12">darwinssl_connect_common<pos:position pos:line="1346" pos:column="36"/></name><argument_list pos:line="1346" pos:column="36">(<argument><expr><name pos:line="1346" pos:column="37">conn<pos:position pos:line="1346" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="1346" pos:column="43">sockindex<pos:position pos:line="1346" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="1346" pos:column="54">FALSE<pos:position pos:line="1346" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="1346" pos:column="61">&amp;<pos:position pos:line="1346" pos:column="66"/></operator><name pos:line="1346" pos:column="62">done<pos:position pos:line="1346" pos:column="66"/></name></expr></argument>)<pos:position pos:line="1346" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="1346" pos:column="68"/></expr_stmt>

  <if pos:line="1348" pos:column="3">if<condition pos:line="1348" pos:column="5">(<expr><name pos:line="1348" pos:column="6">result<pos:position pos:line="1348" pos:column="12"/></name></expr>)<pos:position pos:line="1348" pos:column="13"/></condition><then pos:line="1348" pos:column="13">
    <block type="pseudo"><return pos:line="1349" pos:column="5">return <expr><name pos:line="1349" pos:column="12">result<pos:position pos:line="1349" pos:column="18"/></name></expr>;<pos:position pos:line="1349" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="1351" pos:column="3">DEBUGASSERT<pos:position pos:line="1351" pos:column="14"/></name><argument_list pos:line="1351" pos:column="14">(<argument><expr><name pos:line="1351" pos:column="15">done<pos:position pos:line="1351" pos:column="19"/></name></expr></argument>)<pos:position pos:line="1351" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="1351" pos:column="21"/></expr_stmt>

  <return pos:line="1353" pos:column="3">return <expr><name pos:line="1353" pos:column="10">CURLE_OK<pos:position pos:line="1353" pos:column="18"/></name></expr>;<pos:position pos:line="1353" pos:column="19"/></return>
}<pos:position pos:line="1354" pos:column="2"/></block></function>

<function><specifier pos:line="1356" pos:column="1">static<pos:position pos:line="1356" pos:column="7"/></specifier> <type><name pos:line="1356" pos:column="8">void<pos:position pos:line="1356" pos:column="12"/></name></type> <name pos:line="1356" pos:column="13">Curl_darwinssl_close<pos:position pos:line="1356" pos:column="33"/></name><parameter_list pos:line="1356" pos:column="33">(<parameter><decl><type><name><name pos:line="1356" pos:column="34">struct<pos:position pos:line="1356" pos:column="40"/></name> <name pos:line="1356" pos:column="41">connectdata<pos:position pos:line="1356" pos:column="52"/></name></name> <modifier pos:line="1356" pos:column="53">*<pos:position pos:line="1356" pos:column="54"/></modifier></type><name pos:line="1356" pos:column="54">conn<pos:position pos:line="1356" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1356" pos:column="60">int<pos:position pos:line="1356" pos:column="63"/></name></type> <name pos:line="1356" pos:column="64">sockindex<pos:position pos:line="1356" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1356" pos:column="74"/></parameter_list>
<block pos:line="1357" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="1358" pos:column="3">struct<pos:position pos:line="1358" pos:column="9"/></name> <name pos:line="1358" pos:column="10">ssl_connect_data<pos:position pos:line="1358" pos:column="26"/></name></name> <modifier pos:line="1358" pos:column="27">*<pos:position pos:line="1358" pos:column="28"/></modifier></type><name pos:line="1358" pos:column="28">connssl<pos:position pos:line="1358" pos:column="35"/></name> <init pos:line="1358" pos:column="36">= <expr><operator pos:line="1358" pos:column="38">&amp;<pos:position pos:line="1358" pos:column="43"/></operator><name><name pos:line="1358" pos:column="39">conn<pos:position pos:line="1358" pos:column="43"/></name><operator pos:line="1358" pos:column="43">-&gt;<pos:position pos:line="1358" pos:column="48"/></operator><name pos:line="1358" pos:column="45">ssl<pos:position pos:line="1358" pos:column="48"/></name><index pos:line="1358" pos:column="48">[<expr><name pos:line="1358" pos:column="49">sockindex<pos:position pos:line="1358" pos:column="58"/></name></expr>]<pos:position pos:line="1358" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="1358" pos:column="60"/></decl_stmt>

  <if pos:line="1360" pos:column="3">if<condition pos:line="1360" pos:column="5">(<expr><name><name pos:line="1360" pos:column="6">BACKEND<pos:position pos:line="1360" pos:column="13"/></name><operator pos:line="1360" pos:column="13">-&gt;<pos:position pos:line="1360" pos:column="18"/></operator><name pos:line="1360" pos:column="15">ssl_ctx<pos:position pos:line="1360" pos:column="22"/></name></name></expr>)<pos:position pos:line="1360" pos:column="23"/></condition><then pos:line="1360" pos:column="23"> <block pos:line="1360" pos:column="24">{
    <expr_stmt><expr><operator pos:line="1361" pos:column="5">(<pos:position pos:line="1361" pos:column="6"/></operator><name pos:line="1361" pos:column="6">void<pos:position pos:line="1361" pos:column="10"/></name><operator pos:line="1361" pos:column="10">)<pos:position pos:line="1361" pos:column="11"/></operator><call><name pos:line="1361" pos:column="11">SSLClose<pos:position pos:line="1361" pos:column="19"/></name><argument_list pos:line="1361" pos:column="19">(<argument><expr><name><name pos:line="1361" pos:column="20">BACKEND<pos:position pos:line="1361" pos:column="27"/></name><operator pos:line="1361" pos:column="27">-&gt;<pos:position pos:line="1361" pos:column="32"/></operator><name pos:line="1361" pos:column="29">ssl_ctx<pos:position pos:line="1361" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="1361" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1361" pos:column="38"/></expr_stmt>
<cpp:if pos:line="1362" pos:column="1">#<cpp:directive pos:line="1362" pos:column="2">if<pos:position pos:line="1362" pos:column="4"/></cpp:directive> <expr><name pos:line="1362" pos:column="5">CURL_BUILD_MAC_10_8<pos:position pos:line="1362" pos:column="24"/></name> <operator pos:line="1362" pos:column="25">||<pos:position pos:line="1362" pos:column="27"/></operator> <name pos:line="1362" pos:column="28">CURL_BUILD_IOS<pos:position pos:line="1362" pos:column="42"/></name></expr></cpp:if>
    <if pos:line="1363" pos:column="5">if<condition pos:line="1363" pos:column="7">(<expr><name pos:line="1363" pos:column="8">SSLCreateContext<pos:position pos:line="1363" pos:column="24"/></name> <operator pos:line="1363" pos:column="25">!=<pos:position pos:line="1363" pos:column="27"/></operator> <name pos:line="1363" pos:column="28">NULL<pos:position pos:line="1363" pos:column="32"/></name></expr>)<pos:position pos:line="1363" pos:column="33"/></condition><then pos:line="1363" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="1364" pos:column="7">CFRelease<pos:position pos:line="1364" pos:column="16"/></name><argument_list pos:line="1364" pos:column="16">(<argument><expr><name><name pos:line="1364" pos:column="17">BACKEND<pos:position pos:line="1364" pos:column="24"/></name><operator pos:line="1364" pos:column="24">-&gt;<pos:position pos:line="1364" pos:column="29"/></operator><name pos:line="1364" pos:column="26">ssl_ctx<pos:position pos:line="1364" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="1364" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1364" pos:column="35"/></expr_stmt></block></then>
<cpp:if pos:line="1365" pos:column="1">#<cpp:directive pos:line="1365" pos:column="2">if<pos:position pos:line="1365" pos:column="4"/></cpp:directive> <expr><name pos:line="1365" pos:column="5">CURL_SUPPORT_MAC_10_8<pos:position pos:line="1365" pos:column="26"/></name></expr></cpp:if>
    <else pos:line="1366" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><operator pos:line="1367" pos:column="7">(<pos:position pos:line="1367" pos:column="8"/></operator><name pos:line="1367" pos:column="8">void<pos:position pos:line="1367" pos:column="12"/></name><operator pos:line="1367" pos:column="12">)<pos:position pos:line="1367" pos:column="13"/></operator><call><name pos:line="1367" pos:column="13">SSLDisposeContext<pos:position pos:line="1367" pos:column="30"/></name><argument_list pos:line="1367" pos:column="30">(<argument><expr><name><name pos:line="1367" pos:column="31">BACKEND<pos:position pos:line="1367" pos:column="38"/></name><operator pos:line="1367" pos:column="38">-&gt;<pos:position pos:line="1367" pos:column="43"/></operator><name pos:line="1367" pos:column="40">ssl_ctx<pos:position pos:line="1367" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="1367" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1367" pos:column="49"/></expr_stmt></block></else></if>
<cpp:endif pos:line="1368" pos:column="1">#<cpp:directive pos:line="1368" pos:column="2">endif<pos:position pos:line="1368" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="1368" pos:column="9">/* CURL_SUPPORT_MAC_10_8 */</comment>
<cpp:else pos:line="1369" pos:column="1">#<cpp:directive pos:line="1369" pos:column="2">else<pos:position pos:line="1369" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><operator pos:line="1370" pos:column="5">(<pos:position pos:line="1370" pos:column="6"/></operator><name pos:line="1370" pos:column="6">void<pos:position pos:line="1370" pos:column="10"/></name><operator pos:line="1370" pos:column="10">)<pos:position pos:line="1370" pos:column="11"/></operator><call><name pos:line="1370" pos:column="11">SSLDisposeContext<pos:position pos:line="1370" pos:column="28"/></name><argument_list pos:line="1370" pos:column="28">(<argument><expr><name><name pos:line="1370" pos:column="29">BACKEND<pos:position pos:line="1370" pos:column="36"/></name><operator pos:line="1370" pos:column="36">-&gt;<pos:position pos:line="1370" pos:column="41"/></operator><name pos:line="1370" pos:column="38">ssl_ctx<pos:position pos:line="1370" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="1370" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1370" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="1371" pos:column="1">#<cpp:directive pos:line="1371" pos:column="2">endif<pos:position pos:line="1371" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1371" pos:column="8">/* CURL_BUILD_MAC_10_8 || CURL_BUILD_IOS */</comment>
    <expr_stmt><expr><name><name pos:line="1372" pos:column="5">BACKEND<pos:position pos:line="1372" pos:column="12"/></name><operator pos:line="1372" pos:column="12">-&gt;<pos:position pos:line="1372" pos:column="17"/></operator><name pos:line="1372" pos:column="14">ssl_ctx<pos:position pos:line="1372" pos:column="21"/></name></name> <operator pos:line="1372" pos:column="22">=<pos:position pos:line="1372" pos:column="23"/></operator> <name pos:line="1372" pos:column="24">NULL<pos:position pos:line="1372" pos:column="28"/></name></expr>;<pos:position pos:line="1372" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="1373" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="1374" pos:column="3">BACKEND<pos:position pos:line="1374" pos:column="10"/></name><operator pos:line="1374" pos:column="10">-&gt;<pos:position pos:line="1374" pos:column="15"/></operator><name pos:line="1374" pos:column="12">ssl_sockfd<pos:position pos:line="1374" pos:column="22"/></name></name> <operator pos:line="1374" pos:column="23">=<pos:position pos:line="1374" pos:column="24"/></operator> <literal type="number" pos:line="1374" pos:column="25">0<pos:position pos:line="1374" pos:column="26"/></literal></expr>;<pos:position pos:line="1374" pos:column="27"/></expr_stmt>
}<pos:position pos:line="1375" pos:column="2"/></block></function>

<function><specifier pos:line="1377" pos:column="1">static<pos:position pos:line="1377" pos:column="7"/></specifier> <type><name pos:line="1377" pos:column="8">int<pos:position pos:line="1377" pos:column="11"/></name></type> <name pos:line="1377" pos:column="12">Curl_darwinssl_shutdown<pos:position pos:line="1377" pos:column="35"/></name><parameter_list pos:line="1377" pos:column="35">(<parameter><decl><type><name><name pos:line="1377" pos:column="36">struct<pos:position pos:line="1377" pos:column="42"/></name> <name pos:line="1377" pos:column="43">connectdata<pos:position pos:line="1377" pos:column="54"/></name></name> <modifier pos:line="1377" pos:column="55">*<pos:position pos:line="1377" pos:column="56"/></modifier></type><name pos:line="1377" pos:column="56">conn<pos:position pos:line="1377" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1377" pos:column="62">int<pos:position pos:line="1377" pos:column="65"/></name></type> <name pos:line="1377" pos:column="66">sockindex<pos:position pos:line="1377" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1377" pos:column="76"/></parameter_list>
<block pos:line="1378" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="1379" pos:column="3">struct<pos:position pos:line="1379" pos:column="9"/></name> <name pos:line="1379" pos:column="10">ssl_connect_data<pos:position pos:line="1379" pos:column="26"/></name></name> <modifier pos:line="1379" pos:column="27">*<pos:position pos:line="1379" pos:column="28"/></modifier></type><name pos:line="1379" pos:column="28">connssl<pos:position pos:line="1379" pos:column="35"/></name> <init pos:line="1379" pos:column="36">= <expr><operator pos:line="1379" pos:column="38">&amp;<pos:position pos:line="1379" pos:column="43"/></operator><name><name pos:line="1379" pos:column="39">conn<pos:position pos:line="1379" pos:column="43"/></name><operator pos:line="1379" pos:column="43">-&gt;<pos:position pos:line="1379" pos:column="48"/></operator><name pos:line="1379" pos:column="45">ssl<pos:position pos:line="1379" pos:column="48"/></name><index pos:line="1379" pos:column="48">[<expr><name pos:line="1379" pos:column="49">sockindex<pos:position pos:line="1379" pos:column="58"/></name></expr>]<pos:position pos:line="1379" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="1379" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="1380" pos:column="3">struct<pos:position pos:line="1380" pos:column="9"/></name> <name pos:line="1380" pos:column="10">Curl_easy<pos:position pos:line="1380" pos:column="19"/></name></name> <modifier pos:line="1380" pos:column="20">*<pos:position pos:line="1380" pos:column="21"/></modifier></type><name pos:line="1380" pos:column="21">data<pos:position pos:line="1380" pos:column="25"/></name> <init pos:line="1380" pos:column="26">= <expr><name><name pos:line="1380" pos:column="28">conn<pos:position pos:line="1380" pos:column="32"/></name><operator pos:line="1380" pos:column="32">-&gt;<pos:position pos:line="1380" pos:column="37"/></operator><name pos:line="1380" pos:column="34">data<pos:position pos:line="1380" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="1380" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1381" pos:column="3">ssize_t<pos:position pos:line="1381" pos:column="10"/></name></type> <name pos:line="1381" pos:column="11">nread<pos:position pos:line="1381" pos:column="16"/></name></decl>;<pos:position pos:line="1381" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1382" pos:column="3">int<pos:position pos:line="1382" pos:column="6"/></name></type> <name pos:line="1382" pos:column="7">what<pos:position pos:line="1382" pos:column="11"/></name></decl>;<pos:position pos:line="1382" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1383" pos:column="3">int<pos:position pos:line="1383" pos:column="6"/></name></type> <name pos:line="1383" pos:column="7">rc<pos:position pos:line="1383" pos:column="9"/></name></decl>;<pos:position pos:line="1383" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1384" pos:column="3">char<pos:position pos:line="1384" pos:column="7"/></name></type> <name><name pos:line="1384" pos:column="8">buf<pos:position pos:line="1384" pos:column="11"/></name><index pos:line="1384" pos:column="11">[<expr><literal type="number" pos:line="1384" pos:column="12">120<pos:position pos:line="1384" pos:column="15"/></literal></expr>]<pos:position pos:line="1384" pos:column="16"/></index></name></decl>;<pos:position pos:line="1384" pos:column="17"/></decl_stmt>

  <if pos:line="1386" pos:column="3">if<condition pos:line="1386" pos:column="5">(<expr><operator pos:line="1386" pos:column="6">!<pos:position pos:line="1386" pos:column="7"/></operator><name><name pos:line="1386" pos:column="7">BACKEND<pos:position pos:line="1386" pos:column="14"/></name><operator pos:line="1386" pos:column="14">-&gt;<pos:position pos:line="1386" pos:column="19"/></operator><name pos:line="1386" pos:column="16">ssl_ctx<pos:position pos:line="1386" pos:column="23"/></name></name></expr>)<pos:position pos:line="1386" pos:column="24"/></condition><then pos:line="1386" pos:column="24">
    <block type="pseudo"><return pos:line="1387" pos:column="5">return <expr><literal type="number" pos:line="1387" pos:column="12">0<pos:position pos:line="1387" pos:column="13"/></literal></expr>;<pos:position pos:line="1387" pos:column="14"/></return></block></then></if>

  <if pos:line="1389" pos:column="3">if<condition pos:line="1389" pos:column="5">(<expr><name><name pos:line="1389" pos:column="6">data<pos:position pos:line="1389" pos:column="10"/></name><operator pos:line="1389" pos:column="10">-&gt;<pos:position pos:line="1389" pos:column="15"/></operator><name pos:line="1389" pos:column="12">set<pos:position pos:line="1389" pos:column="15"/></name><operator pos:line="1389" pos:column="15">.<pos:position pos:line="1389" pos:column="16"/></operator><name pos:line="1389" pos:column="16">ftp_ccc<pos:position pos:line="1389" pos:column="23"/></name></name> <operator pos:line="1389" pos:column="24">!=<pos:position pos:line="1389" pos:column="26"/></operator> <name pos:line="1389" pos:column="27">CURLFTPSSL_CCC_ACTIVE<pos:position pos:line="1389" pos:column="48"/></name></expr>)<pos:position pos:line="1389" pos:column="49"/></condition><then pos:line="1389" pos:column="49">
    <block type="pseudo"><return pos:line="1390" pos:column="5">return <expr><literal type="number" pos:line="1390" pos:column="12">0<pos:position pos:line="1390" pos:column="13"/></literal></expr>;<pos:position pos:line="1390" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="1392" pos:column="3">Curl_darwinssl_close<pos:position pos:line="1392" pos:column="23"/></name><argument_list pos:line="1392" pos:column="23">(<argument><expr><name pos:line="1392" pos:column="24">conn<pos:position pos:line="1392" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="1392" pos:column="30">sockindex<pos:position pos:line="1392" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1392" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1392" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><name pos:line="1394" pos:column="3">rc<pos:position pos:line="1394" pos:column="5"/></name> <operator pos:line="1394" pos:column="6">=<pos:position pos:line="1394" pos:column="7"/></operator> <literal type="number" pos:line="1394" pos:column="8">0<pos:position pos:line="1394" pos:column="9"/></literal></expr>;<pos:position pos:line="1394" pos:column="10"/></expr_stmt>

  <expr_stmt><expr><name pos:line="1396" pos:column="3">what<pos:position pos:line="1396" pos:column="7"/></name> <operator pos:line="1396" pos:column="8">=<pos:position pos:line="1396" pos:column="9"/></operator> <call><name pos:line="1396" pos:column="10">SOCKET_READABLE<pos:position pos:line="1396" pos:column="25"/></name><argument_list pos:line="1396" pos:column="25">(<argument><expr><name><name pos:line="1396" pos:column="26">conn<pos:position pos:line="1396" pos:column="30"/></name><operator pos:line="1396" pos:column="30">-&gt;<pos:position pos:line="1396" pos:column="35"/></operator><name pos:line="1396" pos:column="32">sock<pos:position pos:line="1396" pos:column="36"/></name><index pos:line="1396" pos:column="36">[<expr><name pos:line="1396" pos:column="37">sockindex<pos:position pos:line="1396" pos:column="46"/></name></expr>]<pos:position pos:line="1396" pos:column="47"/></index></name></expr></argument>, <argument><expr><name pos:line="1396" pos:column="49">SSL_SHUTDOWN_TIMEOUT<pos:position pos:line="1396" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1396" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="1396" pos:column="71"/></expr_stmt>

  <for pos:line="1398" pos:column="3">for<control pos:line="1398" pos:column="6">(<init pos:line="1398" pos:column="7">;<pos:position pos:line="1398" pos:column="8"/></init><condition pos:line="1398" pos:column="8">;<pos:position pos:line="1398" pos:column="9"/></condition><incr/>)<pos:position pos:line="1398" pos:column="10"/></control> <block pos:line="1398" pos:column="11">{
    <if pos:line="1399" pos:column="5">if<condition pos:line="1399" pos:column="7">(<expr><name pos:line="1399" pos:column="8">what<pos:position pos:line="1399" pos:column="12"/></name> <operator pos:line="1399" pos:column="13">&lt;<pos:position pos:line="1399" pos:column="17"/></operator> <literal type="number" pos:line="1399" pos:column="15">0<pos:position pos:line="1399" pos:column="16"/></literal></expr>)<pos:position pos:line="1399" pos:column="17"/></condition><then pos:line="1399" pos:column="17"> <block pos:line="1399" pos:column="18">{
      <comment type="block" pos:line="1400" pos:column="7">/* anything that gets here is fatally bad */</comment>
      <expr_stmt><expr><call><name pos:line="1401" pos:column="7">failf<pos:position pos:line="1401" pos:column="12"/></name><argument_list pos:line="1401" pos:column="12">(<argument><expr><name pos:line="1401" pos:column="13">data<pos:position pos:line="1401" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1401" pos:column="19">"select/poll on SSL socket, errno: %d"<pos:position pos:line="1401" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="1401" pos:column="59">SOCKERRNO<pos:position pos:line="1401" pos:column="68"/></name></expr></argument>)<pos:position pos:line="1401" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="1401" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1402" pos:column="7">rc<pos:position pos:line="1402" pos:column="9"/></name> <operator pos:line="1402" pos:column="10">=<pos:position pos:line="1402" pos:column="11"/></operator> <operator pos:line="1402" pos:column="12">-<pos:position pos:line="1402" pos:column="13"/></operator><literal type="number" pos:line="1402" pos:column="13">1<pos:position pos:line="1402" pos:column="14"/></literal></expr>;<pos:position pos:line="1402" pos:column="15"/></expr_stmt>
      <break pos:line="1403" pos:column="7">break;<pos:position pos:line="1403" pos:column="13"/></break>
    }<pos:position pos:line="1404" pos:column="6"/></block></then></if>

    <if pos:line="1406" pos:column="5">if<condition pos:line="1406" pos:column="7">(<expr><operator pos:line="1406" pos:column="8">!<pos:position pos:line="1406" pos:column="9"/></operator><name pos:line="1406" pos:column="9">what<pos:position pos:line="1406" pos:column="13"/></name></expr>)<pos:position pos:line="1406" pos:column="14"/></condition><then pos:line="1406" pos:column="14"> <block pos:line="1406" pos:column="15">{                                <comment type="block" pos:line="1406" pos:column="48">/* timeout */</comment>
      <expr_stmt><expr><call><name pos:line="1407" pos:column="7">failf<pos:position pos:line="1407" pos:column="12"/></name><argument_list pos:line="1407" pos:column="12">(<argument><expr><name pos:line="1407" pos:column="13">data<pos:position pos:line="1407" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1407" pos:column="19">"SSL shutdown timeout"<pos:position pos:line="1407" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="1407" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1407" pos:column="43"/></expr_stmt>
      <break pos:line="1408" pos:column="7">break;<pos:position pos:line="1408" pos:column="13"/></break>
    }<pos:position pos:line="1409" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="1411" pos:column="5">/* Something to read, let's do it and hope that it is the close
     notify alert from the server. No way to SSL_Read now, so use read(). */</comment>

    <expr_stmt><expr><name pos:line="1414" pos:column="5">nread<pos:position pos:line="1414" pos:column="10"/></name> <operator pos:line="1414" pos:column="11">=<pos:position pos:line="1414" pos:column="12"/></operator> <call><name pos:line="1414" pos:column="13">read<pos:position pos:line="1414" pos:column="17"/></name><argument_list pos:line="1414" pos:column="17">(<argument><expr><name><name pos:line="1414" pos:column="18">conn<pos:position pos:line="1414" pos:column="22"/></name><operator pos:line="1414" pos:column="22">-&gt;<pos:position pos:line="1414" pos:column="27"/></operator><name pos:line="1414" pos:column="24">sock<pos:position pos:line="1414" pos:column="28"/></name><index pos:line="1414" pos:column="28">[<expr><name pos:line="1414" pos:column="29">sockindex<pos:position pos:line="1414" pos:column="38"/></name></expr>]<pos:position pos:line="1414" pos:column="39"/></index></name></expr></argument>, <argument><expr><name pos:line="1414" pos:column="41">buf<pos:position pos:line="1414" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="1414" pos:column="46">sizeof<argument_list pos:line="1414" pos:column="52">(<argument><expr><name pos:line="1414" pos:column="53">buf<pos:position pos:line="1414" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1414" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1414" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1414" pos:column="59"/></expr_stmt>

    <if pos:line="1416" pos:column="5">if<condition pos:line="1416" pos:column="7">(<expr><name pos:line="1416" pos:column="8">nread<pos:position pos:line="1416" pos:column="13"/></name> <operator pos:line="1416" pos:column="14">&lt;<pos:position pos:line="1416" pos:column="18"/></operator> <literal type="number" pos:line="1416" pos:column="16">0<pos:position pos:line="1416" pos:column="17"/></literal></expr>)<pos:position pos:line="1416" pos:column="18"/></condition><then pos:line="1416" pos:column="18"> <block pos:line="1416" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="1417" pos:column="7">failf<pos:position pos:line="1417" pos:column="12"/></name><argument_list pos:line="1417" pos:column="12">(<argument><expr><name pos:line="1417" pos:column="13">data<pos:position pos:line="1417" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1417" pos:column="19">"read: %s"<pos:position pos:line="1417" pos:column="29"/></literal></expr></argument>, <argument><expr><call><name pos:line="1417" pos:column="31">strerror<pos:position pos:line="1417" pos:column="39"/></name><argument_list pos:line="1417" pos:column="39">(<argument><expr><name pos:line="1417" pos:column="40">errno<pos:position pos:line="1417" pos:column="45"/></name></expr></argument>)<pos:position pos:line="1417" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="1417" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="1417" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1418" pos:column="7">rc<pos:position pos:line="1418" pos:column="9"/></name> <operator pos:line="1418" pos:column="10">=<pos:position pos:line="1418" pos:column="11"/></operator> <operator pos:line="1418" pos:column="12">-<pos:position pos:line="1418" pos:column="13"/></operator><literal type="number" pos:line="1418" pos:column="13">1<pos:position pos:line="1418" pos:column="14"/></literal></expr>;<pos:position pos:line="1418" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="1419" pos:column="6"/></block></then></if>

    <if pos:line="1421" pos:column="5">if<condition pos:line="1421" pos:column="7">(<expr><name pos:line="1421" pos:column="8">nread<pos:position pos:line="1421" pos:column="13"/></name> <operator pos:line="1421" pos:column="14">&lt;=<pos:position pos:line="1421" pos:column="19"/></operator> <literal type="number" pos:line="1421" pos:column="17">0<pos:position pos:line="1421" pos:column="18"/></literal></expr>)<pos:position pos:line="1421" pos:column="19"/></condition><then pos:line="1421" pos:column="19">
      <block type="pseudo"><break pos:line="1422" pos:column="7">break;<pos:position pos:line="1422" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="1424" pos:column="5">what<pos:position pos:line="1424" pos:column="9"/></name> <operator pos:line="1424" pos:column="10">=<pos:position pos:line="1424" pos:column="11"/></operator> <call><name pos:line="1424" pos:column="12">SOCKET_READABLE<pos:position pos:line="1424" pos:column="27"/></name><argument_list pos:line="1424" pos:column="27">(<argument><expr><name><name pos:line="1424" pos:column="28">conn<pos:position pos:line="1424" pos:column="32"/></name><operator pos:line="1424" pos:column="32">-&gt;<pos:position pos:line="1424" pos:column="37"/></operator><name pos:line="1424" pos:column="34">sock<pos:position pos:line="1424" pos:column="38"/></name><index pos:line="1424" pos:column="38">[<expr><name pos:line="1424" pos:column="39">sockindex<pos:position pos:line="1424" pos:column="48"/></name></expr>]<pos:position pos:line="1424" pos:column="49"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="1424" pos:column="51">0<pos:position pos:line="1424" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="1424" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1424" pos:column="54"/></expr_stmt>
  }<pos:position pos:line="1425" pos:column="4"/></block></for>

  <return pos:line="1427" pos:column="3">return <expr><name pos:line="1427" pos:column="10">rc<pos:position pos:line="1427" pos:column="12"/></name></expr>;<pos:position pos:line="1427" pos:column="13"/></return>
}<pos:position pos:line="1428" pos:column="2"/></block></function>

<function><specifier pos:line="1430" pos:column="1">static<pos:position pos:line="1430" pos:column="7"/></specifier> <type><name pos:line="1430" pos:column="8">void<pos:position pos:line="1430" pos:column="12"/></name></type> <name pos:line="1430" pos:column="13">Curl_darwinssl_session_free<pos:position pos:line="1430" pos:column="40"/></name><parameter_list pos:line="1430" pos:column="40">(<parameter><decl><type><name pos:line="1430" pos:column="41">void<pos:position pos:line="1430" pos:column="45"/></name> <modifier pos:line="1430" pos:column="46">*<pos:position pos:line="1430" pos:column="47"/></modifier></type><name pos:line="1430" pos:column="47">ptr<pos:position pos:line="1430" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1430" pos:column="51"/></parameter_list>
<block pos:line="1431" pos:column="1">{
  <comment type="block" pos:line="1432" pos:column="3">/* ST, as of iOS 5 and Mountain Lion, has no public method of deleting a
     cached session ID inside the Security framework. There is a private
     function that does this, but I don't want to have to explain to you why I
     got your application rejected from the App Store due to the use of a
     private API, so the best we can do is free up our own char array that we
     created way back in darwinssl_connect_step1... */</comment>
  <expr_stmt><expr><call><name pos:line="1438" pos:column="3">Curl_safefree<pos:position pos:line="1438" pos:column="16"/></name><argument_list pos:line="1438" pos:column="16">(<argument><expr><name pos:line="1438" pos:column="17">ptr<pos:position pos:line="1438" pos:column="20"/></name></expr></argument>)<pos:position pos:line="1438" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="1438" pos:column="22"/></expr_stmt>
}<pos:position pos:line="1439" pos:column="2"/></block></function>

<function><specifier pos:line="1441" pos:column="1">static<pos:position pos:line="1441" pos:column="7"/></specifier> <type><name pos:line="1441" pos:column="8">size_t<pos:position pos:line="1441" pos:column="14"/></name></type> <name pos:line="1441" pos:column="15">Curl_darwinssl_version<pos:position pos:line="1441" pos:column="37"/></name><parameter_list pos:line="1441" pos:column="37">(<parameter><decl><type><name pos:line="1441" pos:column="38">char<pos:position pos:line="1441" pos:column="42"/></name> <modifier pos:line="1441" pos:column="43">*<pos:position pos:line="1441" pos:column="44"/></modifier></type><name pos:line="1441" pos:column="44">buffer<pos:position pos:line="1441" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1441" pos:column="52">size_t<pos:position pos:line="1441" pos:column="58"/></name></type> <name pos:line="1441" pos:column="59">size<pos:position pos:line="1441" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1441" pos:column="64"/></parameter_list>
<block pos:line="1442" pos:column="1">{
  <return pos:line="1443" pos:column="3">return <expr><call><name pos:line="1443" pos:column="10">snprintf<pos:position pos:line="1443" pos:column="18"/></name><argument_list pos:line="1443" pos:column="18">(<argument><expr><name pos:line="1443" pos:column="19">buffer<pos:position pos:line="1443" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="1443" pos:column="27">size<pos:position pos:line="1443" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1443" pos:column="33">"SecureTransport"<pos:position pos:line="1443" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="1443" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1443" pos:column="52"/></return>
}<pos:position pos:line="1444" pos:column="2"/></block></function>

<comment type="block" pos:line="1446" pos:column="1">/*
 * This function uses SSLGetSessionState to determine connection status.
 *
 * Return codes:
 *     1 means the connection is still in place
 *     0 means the connection has been closed
 *    -1 means the connection status is unknown
 */</comment>
<function><specifier pos:line="1454" pos:column="1">static<pos:position pos:line="1454" pos:column="7"/></specifier> <type><name pos:line="1454" pos:column="8">int<pos:position pos:line="1454" pos:column="11"/></name></type> <name pos:line="1454" pos:column="12">Curl_darwinssl_check_cxn<pos:position pos:line="1454" pos:column="36"/></name><parameter_list pos:line="1454" pos:column="36">(<parameter><decl><type><name><name pos:line="1454" pos:column="37">struct<pos:position pos:line="1454" pos:column="43"/></name> <name pos:line="1454" pos:column="44">connectdata<pos:position pos:line="1454" pos:column="55"/></name></name> <modifier pos:line="1454" pos:column="56">*<pos:position pos:line="1454" pos:column="57"/></modifier></type><name pos:line="1454" pos:column="57">conn<pos:position pos:line="1454" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1454" pos:column="62"/></parameter_list>
<block pos:line="1455" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="1456" pos:column="3">struct<pos:position pos:line="1456" pos:column="9"/></name> <name pos:line="1456" pos:column="10">ssl_connect_data<pos:position pos:line="1456" pos:column="26"/></name></name> <modifier pos:line="1456" pos:column="27">*<pos:position pos:line="1456" pos:column="28"/></modifier></type><name pos:line="1456" pos:column="28">connssl<pos:position pos:line="1456" pos:column="35"/></name> <init pos:line="1456" pos:column="36">= <expr><operator pos:line="1456" pos:column="38">&amp;<pos:position pos:line="1456" pos:column="43"/></operator><name><name pos:line="1456" pos:column="39">conn<pos:position pos:line="1456" pos:column="43"/></name><operator pos:line="1456" pos:column="43">-&gt;<pos:position pos:line="1456" pos:column="48"/></operator><name pos:line="1456" pos:column="45">ssl<pos:position pos:line="1456" pos:column="48"/></name><index pos:line="1456" pos:column="48">[<expr><name pos:line="1456" pos:column="49">FIRSTSOCKET<pos:position pos:line="1456" pos:column="60"/></name></expr>]<pos:position pos:line="1456" pos:column="61"/></index></name></expr></init></decl>;<pos:position pos:line="1456" pos:column="62"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1457" pos:column="3">OSStatus<pos:position pos:line="1457" pos:column="11"/></name></type> <name pos:line="1457" pos:column="12">err<pos:position pos:line="1457" pos:column="15"/></name></decl>;<pos:position pos:line="1457" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1458" pos:column="3">SSLSessionState<pos:position pos:line="1458" pos:column="18"/></name></type> <name pos:line="1458" pos:column="19">state<pos:position pos:line="1458" pos:column="24"/></name></decl>;<pos:position pos:line="1458" pos:column="25"/></decl_stmt>

  <if pos:line="1460" pos:column="3">if<condition pos:line="1460" pos:column="5">(<expr><name><name pos:line="1460" pos:column="6">BACKEND<pos:position pos:line="1460" pos:column="13"/></name><operator pos:line="1460" pos:column="13">-&gt;<pos:position pos:line="1460" pos:column="18"/></operator><name pos:line="1460" pos:column="15">ssl_ctx<pos:position pos:line="1460" pos:column="22"/></name></name></expr>)<pos:position pos:line="1460" pos:column="23"/></condition><then pos:line="1460" pos:column="23"> <block pos:line="1460" pos:column="24">{
    <expr_stmt><expr><name pos:line="1461" pos:column="5">err<pos:position pos:line="1461" pos:column="8"/></name> <operator pos:line="1461" pos:column="9">=<pos:position pos:line="1461" pos:column="10"/></operator> <call><name pos:line="1461" pos:column="11">SSLGetSessionState<pos:position pos:line="1461" pos:column="29"/></name><argument_list pos:line="1461" pos:column="29">(<argument><expr><name><name pos:line="1461" pos:column="30">BACKEND<pos:position pos:line="1461" pos:column="37"/></name><operator pos:line="1461" pos:column="37">-&gt;<pos:position pos:line="1461" pos:column="42"/></operator><name pos:line="1461" pos:column="39">ssl_ctx<pos:position pos:line="1461" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="1461" pos:column="48">&amp;<pos:position pos:line="1461" pos:column="53"/></operator><name pos:line="1461" pos:column="49">state<pos:position pos:line="1461" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1461" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1461" pos:column="56"/></expr_stmt>
    <if pos:line="1462" pos:column="5">if<condition pos:line="1462" pos:column="7">(<expr><name pos:line="1462" pos:column="8">err<pos:position pos:line="1462" pos:column="11"/></name> <operator pos:line="1462" pos:column="12">==<pos:position pos:line="1462" pos:column="14"/></operator> <name pos:line="1462" pos:column="15">noErr<pos:position pos:line="1462" pos:column="20"/></name></expr>)<pos:position pos:line="1462" pos:column="21"/></condition><then pos:line="1462" pos:column="21">
      <block type="pseudo"><return pos:line="1463" pos:column="7">return <expr><name pos:line="1463" pos:column="14">state<pos:position pos:line="1463" pos:column="19"/></name> <operator pos:line="1463" pos:column="20">==<pos:position pos:line="1463" pos:column="22"/></operator> <name pos:line="1463" pos:column="23">kSSLConnected<pos:position pos:line="1463" pos:column="36"/></name> <operator pos:line="1463" pos:column="37">||<pos:position pos:line="1463" pos:column="39"/></operator> <name pos:line="1463" pos:column="40">state<pos:position pos:line="1463" pos:column="45"/></name> <operator pos:line="1463" pos:column="46">==<pos:position pos:line="1463" pos:column="48"/></operator> <name pos:line="1463" pos:column="49">kSSLHandshake<pos:position pos:line="1463" pos:column="62"/></name></expr>;<pos:position pos:line="1463" pos:column="63"/></return></block></then></if>
    <return pos:line="1464" pos:column="5">return <expr><operator pos:line="1464" pos:column="12">-<pos:position pos:line="1464" pos:column="13"/></operator><literal type="number" pos:line="1464" pos:column="13">1<pos:position pos:line="1464" pos:column="14"/></literal></expr>;<pos:position pos:line="1464" pos:column="15"/></return>
  }<pos:position pos:line="1465" pos:column="4"/></block></then></if>
  <return pos:line="1466" pos:column="3">return <expr><literal type="number" pos:line="1466" pos:column="10">0<pos:position pos:line="1466" pos:column="11"/></literal></expr>;<pos:position pos:line="1466" pos:column="12"/></return>
}<pos:position pos:line="1467" pos:column="2"/></block></function>

<function><specifier pos:line="1469" pos:column="1">static<pos:position pos:line="1469" pos:column="7"/></specifier> <type><name pos:line="1469" pos:column="8">bool<pos:position pos:line="1469" pos:column="12"/></name></type> <name pos:line="1469" pos:column="13">Curl_darwinssl_data_pending<pos:position pos:line="1469" pos:column="40"/></name><parameter_list pos:line="1469" pos:column="40">(<parameter><decl><type><specifier pos:line="1469" pos:column="41">const<pos:position pos:line="1469" pos:column="46"/></specifier> <name><name pos:line="1469" pos:column="47">struct<pos:position pos:line="1469" pos:column="53"/></name> <name pos:line="1469" pos:column="54">connectdata<pos:position pos:line="1469" pos:column="65"/></name></name> <modifier pos:line="1469" pos:column="66">*<pos:position pos:line="1469" pos:column="67"/></modifier></type><name pos:line="1469" pos:column="67">conn<pos:position pos:line="1469" pos:column="71"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="1470" pos:column="41">int<pos:position pos:line="1470" pos:column="44"/></name></type> <name pos:line="1470" pos:column="45">connindex<pos:position pos:line="1470" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1470" pos:column="55"/></parameter_list>
<block pos:line="1471" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="1472" pos:column="3">const<pos:position pos:line="1472" pos:column="8"/></specifier> <name><name pos:line="1472" pos:column="9">struct<pos:position pos:line="1472" pos:column="15"/></name> <name pos:line="1472" pos:column="16">ssl_connect_data<pos:position pos:line="1472" pos:column="32"/></name></name> <modifier pos:line="1472" pos:column="33">*<pos:position pos:line="1472" pos:column="34"/></modifier></type><name pos:line="1472" pos:column="34">connssl<pos:position pos:line="1472" pos:column="41"/></name> <init pos:line="1472" pos:column="42">= <expr><operator pos:line="1472" pos:column="44">&amp;<pos:position pos:line="1472" pos:column="49"/></operator><name><name pos:line="1472" pos:column="45">conn<pos:position pos:line="1472" pos:column="49"/></name><operator pos:line="1472" pos:column="49">-&gt;<pos:position pos:line="1472" pos:column="54"/></operator><name pos:line="1472" pos:column="51">ssl<pos:position pos:line="1472" pos:column="54"/></name><index pos:line="1472" pos:column="54">[<expr><name pos:line="1472" pos:column="55">connindex<pos:position pos:line="1472" pos:column="64"/></name></expr>]<pos:position pos:line="1472" pos:column="65"/></index></name></expr></init></decl>;<pos:position pos:line="1472" pos:column="66"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1473" pos:column="3">OSStatus<pos:position pos:line="1473" pos:column="11"/></name></type> <name pos:line="1473" pos:column="12">err<pos:position pos:line="1473" pos:column="15"/></name></decl>;<pos:position pos:line="1473" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1474" pos:column="3">size_t<pos:position pos:line="1474" pos:column="9"/></name></type> <name pos:line="1474" pos:column="10">buffer<pos:position pos:line="1474" pos:column="16"/></name></decl>;<pos:position pos:line="1474" pos:column="17"/></decl_stmt>

  <if pos:line="1476" pos:column="3">if<condition pos:line="1476" pos:column="5">(<expr><name><name pos:line="1476" pos:column="6">BACKEND<pos:position pos:line="1476" pos:column="13"/></name><operator pos:line="1476" pos:column="13">-&gt;<pos:position pos:line="1476" pos:column="18"/></operator><name pos:line="1476" pos:column="15">ssl_ctx<pos:position pos:line="1476" pos:column="22"/></name></name></expr>)<pos:position pos:line="1476" pos:column="23"/></condition><then pos:line="1476" pos:column="23"> <block pos:line="1476" pos:column="24">{  <comment type="block" pos:line="1476" pos:column="27">/* SSL is in use */</comment>
    <expr_stmt><expr><name pos:line="1477" pos:column="5">err<pos:position pos:line="1477" pos:column="8"/></name> <operator pos:line="1477" pos:column="9">=<pos:position pos:line="1477" pos:column="10"/></operator> <call><name pos:line="1477" pos:column="11">SSLGetBufferedReadSize<pos:position pos:line="1477" pos:column="33"/></name><argument_list pos:line="1477" pos:column="33">(<argument><expr><name><name pos:line="1477" pos:column="34">BACKEND<pos:position pos:line="1477" pos:column="41"/></name><operator pos:line="1477" pos:column="41">-&gt;<pos:position pos:line="1477" pos:column="46"/></operator><name pos:line="1477" pos:column="43">ssl_ctx<pos:position pos:line="1477" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="1477" pos:column="52">&amp;<pos:position pos:line="1477" pos:column="57"/></operator><name pos:line="1477" pos:column="53">buffer<pos:position pos:line="1477" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1477" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1477" pos:column="61"/></expr_stmt>
    <if pos:line="1478" pos:column="5">if<condition pos:line="1478" pos:column="7">(<expr><name pos:line="1478" pos:column="8">err<pos:position pos:line="1478" pos:column="11"/></name> <operator pos:line="1478" pos:column="12">==<pos:position pos:line="1478" pos:column="14"/></operator> <name pos:line="1478" pos:column="15">noErr<pos:position pos:line="1478" pos:column="20"/></name></expr>)<pos:position pos:line="1478" pos:column="21"/></condition><then pos:line="1478" pos:column="21">
      <block type="pseudo"><return pos:line="1479" pos:column="7">return <expr><name pos:line="1479" pos:column="14">buffer<pos:position pos:line="1479" pos:column="20"/></name> <operator pos:line="1479" pos:column="21">&gt;<pos:position pos:line="1479" pos:column="25"/></operator> <literal type="number" pos:line="1479" pos:column="23">0UL<pos:position pos:line="1479" pos:column="26"/></literal></expr>;<pos:position pos:line="1479" pos:column="27"/></return></block></then></if>
    <return pos:line="1480" pos:column="5">return <expr><literal type="boolean" pos:line="1480" pos:column="12">false<pos:position pos:line="1480" pos:column="17"/></literal></expr>;<pos:position pos:line="1480" pos:column="18"/></return>
  }<pos:position pos:line="1481" pos:column="4"/></block></then>
  <else pos:line="1482" pos:column="3">else
    <block type="pseudo"><return pos:line="1483" pos:column="5">return <expr><literal type="boolean" pos:line="1483" pos:column="12">false<pos:position pos:line="1483" pos:column="17"/></literal></expr>;<pos:position pos:line="1483" pos:column="18"/></return></block></else></if>
}<pos:position pos:line="1484" pos:column="2"/></block></function>

<function><specifier pos:line="1486" pos:column="1">static<pos:position pos:line="1486" pos:column="7"/></specifier> <type><name pos:line="1486" pos:column="8">CURLcode<pos:position pos:line="1486" pos:column="16"/></name></type> <name pos:line="1486" pos:column="17">Curl_darwinssl_random<pos:position pos:line="1486" pos:column="38"/></name><parameter_list pos:line="1486" pos:column="38">(<parameter><decl><type><name><name pos:line="1486" pos:column="39">struct<pos:position pos:line="1486" pos:column="45"/></name> <name pos:line="1486" pos:column="46">Curl_easy<pos:position pos:line="1486" pos:column="55"/></name></name> <modifier pos:line="1486" pos:column="56">*<pos:position pos:line="1486" pos:column="57"/></modifier><name pos:line="1486" pos:column="57">data<pos:position pos:line="1486" pos:column="61"/></name></type> <name pos:line="1486" pos:column="62">UNUSED_PARAM<pos:position pos:line="1486" pos:column="74"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="1487" pos:column="39">unsigned<pos:position pos:line="1487" pos:column="47"/></name> <name pos:line="1487" pos:column="48">char<pos:position pos:line="1487" pos:column="52"/></name> <modifier pos:line="1487" pos:column="53">*<pos:position pos:line="1487" pos:column="54"/></modifier></type><name pos:line="1487" pos:column="54">entropy<pos:position pos:line="1487" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1487" pos:column="63">size_t<pos:position pos:line="1487" pos:column="69"/></name></type> <name pos:line="1487" pos:column="70">length<pos:position pos:line="1487" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1487" pos:column="77"/></parameter_list>
<block pos:line="1488" pos:column="1">{
  <comment type="block" pos:line="1489" pos:column="3">/* arc4random_buf() isn't available on cats older than Lion, so let's
     do this manually for the benefit of the older cats. */</comment>
  <decl_stmt><decl><type><name pos:line="1491" pos:column="3">size_t<pos:position pos:line="1491" pos:column="9"/></name></type> <name pos:line="1491" pos:column="10">i<pos:position pos:line="1491" pos:column="11"/></name></decl>;<pos:position pos:line="1491" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1492" pos:column="3">u_int32_t<pos:position pos:line="1492" pos:column="12"/></name></type> <name pos:line="1492" pos:column="13">random_number<pos:position pos:line="1492" pos:column="26"/></name> <init pos:line="1492" pos:column="27">= <expr><literal type="number" pos:line="1492" pos:column="29">0<pos:position pos:line="1492" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="1492" pos:column="31"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="1494" pos:column="3">(<pos:position pos:line="1494" pos:column="4"/></operator><name pos:line="1494" pos:column="4">void<pos:position pos:line="1494" pos:column="8"/></name><operator pos:line="1494" pos:column="8">)<pos:position pos:line="1494" pos:column="9"/></operator><name pos:line="1494" pos:column="9">data<pos:position pos:line="1494" pos:column="13"/></name></expr>;<pos:position pos:line="1494" pos:column="14"/></expr_stmt>

  <for pos:line="1496" pos:column="3">for<control pos:line="1496" pos:column="6">(<init><expr><name pos:line="1496" pos:column="7">i<pos:position pos:line="1496" pos:column="8"/></name> <operator pos:line="1496" pos:column="9">=<pos:position pos:line="1496" pos:column="10"/></operator> <literal type="number" pos:line="1496" pos:column="11">0<pos:position pos:line="1496" pos:column="12"/></literal></expr> ;<pos:position pos:line="1496" pos:column="14"/></init> <condition><expr><name pos:line="1496" pos:column="15">i<pos:position pos:line="1496" pos:column="16"/></name> <operator pos:line="1496" pos:column="17">&lt;<pos:position pos:line="1496" pos:column="21"/></operator> <name pos:line="1496" pos:column="19">length<pos:position pos:line="1496" pos:column="25"/></name></expr> ;<pos:position pos:line="1496" pos:column="27"/></condition> <incr><expr><name pos:line="1496" pos:column="28">i<pos:position pos:line="1496" pos:column="29"/></name><operator pos:line="1496" pos:column="29">++<pos:position pos:line="1496" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="1496" pos:column="32"/></control> <block pos:line="1496" pos:column="33">{
    <if pos:line="1497" pos:column="5">if<condition pos:line="1497" pos:column="7">(<expr><name pos:line="1497" pos:column="8">i<pos:position pos:line="1497" pos:column="9"/></name> <operator pos:line="1497" pos:column="10">%<pos:position pos:line="1497" pos:column="11"/></operator> <sizeof pos:line="1497" pos:column="12">sizeof<argument_list pos:line="1497" pos:column="18">(<argument><expr><name pos:line="1497" pos:column="19">u_int32_t<pos:position pos:line="1497" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1497" pos:column="29"/></argument_list></sizeof> <operator pos:line="1497" pos:column="30">==<pos:position pos:line="1497" pos:column="32"/></operator> <literal type="number" pos:line="1497" pos:column="33">0<pos:position pos:line="1497" pos:column="34"/></literal></expr>)<pos:position pos:line="1497" pos:column="35"/></condition><then pos:line="1497" pos:column="35">
      <block type="pseudo"><expr_stmt><expr><name pos:line="1498" pos:column="7">random_number<pos:position pos:line="1498" pos:column="20"/></name> <operator pos:line="1498" pos:column="21">=<pos:position pos:line="1498" pos:column="22"/></operator> <call><name pos:line="1498" pos:column="23">arc4random<pos:position pos:line="1498" pos:column="33"/></name><argument_list pos:line="1498" pos:column="33">()<pos:position pos:line="1498" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1498" pos:column="36"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="1499" pos:column="5">entropy<pos:position pos:line="1499" pos:column="12"/></name><index pos:line="1499" pos:column="12">[<expr><name pos:line="1499" pos:column="13">i<pos:position pos:line="1499" pos:column="14"/></name></expr>]<pos:position pos:line="1499" pos:column="15"/></index></name> <operator pos:line="1499" pos:column="16">=<pos:position pos:line="1499" pos:column="17"/></operator> <name pos:line="1499" pos:column="18">random_number<pos:position pos:line="1499" pos:column="31"/></name> <operator pos:line="1499" pos:column="32">&amp;<pos:position pos:line="1499" pos:column="37"/></operator> <literal type="number" pos:line="1499" pos:column="34">0xFF<pos:position pos:line="1499" pos:column="38"/></literal></expr>;<pos:position pos:line="1499" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1500" pos:column="5">random_number<pos:position pos:line="1500" pos:column="18"/></name> <operator pos:line="1500" pos:column="19">&gt;&gt;=<pos:position pos:line="1500" pos:column="28"/></operator> <literal type="number" pos:line="1500" pos:column="23">8<pos:position pos:line="1500" pos:column="24"/></literal></expr>;<pos:position pos:line="1500" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="1501" pos:column="4"/></block></for>
  <expr_stmt><expr><name pos:line="1502" pos:column="3">i<pos:position pos:line="1502" pos:column="4"/></name> <operator pos:line="1502" pos:column="5">=<pos:position pos:line="1502" pos:column="6"/></operator> <name pos:line="1502" pos:column="7">random_number<pos:position pos:line="1502" pos:column="20"/></name> <operator pos:line="1502" pos:column="21">=<pos:position pos:line="1502" pos:column="22"/></operator> <literal type="number" pos:line="1502" pos:column="23">0<pos:position pos:line="1502" pos:column="24"/></literal></expr>;<pos:position pos:line="1502" pos:column="25"/></expr_stmt>
  <return pos:line="1503" pos:column="3">return <expr><name pos:line="1503" pos:column="10">CURLE_OK<pos:position pos:line="1503" pos:column="18"/></name></expr>;<pos:position pos:line="1503" pos:column="19"/></return>
}<pos:position pos:line="1504" pos:column="2"/></block></function>

<function><specifier pos:line="1506" pos:column="1">static<pos:position pos:line="1506" pos:column="7"/></specifier> <type><name pos:line="1506" pos:column="8">CURLcode<pos:position pos:line="1506" pos:column="16"/></name></type> <name pos:line="1506" pos:column="17">Curl_darwinssl_md5sum<pos:position pos:line="1506" pos:column="38"/></name><parameter_list pos:line="1506" pos:column="38">(<parameter><decl><type><name pos:line="1506" pos:column="39">unsigned<pos:position pos:line="1506" pos:column="47"/></name> <name pos:line="1506" pos:column="48">char<pos:position pos:line="1506" pos:column="52"/></name> <modifier pos:line="1506" pos:column="53">*<pos:position pos:line="1506" pos:column="54"/></modifier></type><name pos:line="1506" pos:column="54">tmp<pos:position pos:line="1506" pos:column="57"/></name></decl></parameter>, <comment type="block" pos:line="1506" pos:column="59">/* input */</comment>
                                      <parameter><decl><type><name pos:line="1507" pos:column="39">size_t<pos:position pos:line="1507" pos:column="45"/></name></type> <name pos:line="1507" pos:column="46">tmplen<pos:position pos:line="1507" pos:column="52"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="1508" pos:column="39">unsigned<pos:position pos:line="1508" pos:column="47"/></name> <name pos:line="1508" pos:column="48">char<pos:position pos:line="1508" pos:column="52"/></name> <modifier pos:line="1508" pos:column="53">*<pos:position pos:line="1508" pos:column="54"/></modifier></type><name pos:line="1508" pos:column="54">md5sum<pos:position pos:line="1508" pos:column="60"/></name></decl></parameter>, <comment type="block" pos:line="1508" pos:column="62">/* output */</comment>
                                      <parameter><decl><type><name pos:line="1509" pos:column="39">size_t<pos:position pos:line="1509" pos:column="45"/></name></type> <name pos:line="1509" pos:column="46">md5len<pos:position pos:line="1509" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1509" pos:column="53"/></parameter_list>
<block pos:line="1510" pos:column="1">{
  <expr_stmt><expr><operator pos:line="1511" pos:column="3">(<pos:position pos:line="1511" pos:column="4"/></operator><name pos:line="1511" pos:column="4">void<pos:position pos:line="1511" pos:column="8"/></name><operator pos:line="1511" pos:column="8">)<pos:position pos:line="1511" pos:column="9"/></operator><name pos:line="1511" pos:column="9">md5len<pos:position pos:line="1511" pos:column="15"/></name></expr>;<pos:position pos:line="1511" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="1512" pos:column="3">(<pos:position pos:line="1512" pos:column="4"/></operator><name pos:line="1512" pos:column="4">void<pos:position pos:line="1512" pos:column="8"/></name><operator pos:line="1512" pos:column="8">)<pos:position pos:line="1512" pos:column="9"/></operator><call><name pos:line="1512" pos:column="9">CC_MD5<pos:position pos:line="1512" pos:column="15"/></name><argument_list pos:line="1512" pos:column="15">(<argument><expr><name pos:line="1512" pos:column="16">tmp<pos:position pos:line="1512" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="1512" pos:column="21">(<pos:position pos:line="1512" pos:column="22"/></operator><name pos:line="1512" pos:column="22">CC_LONG<pos:position pos:line="1512" pos:column="29"/></name><operator pos:line="1512" pos:column="29">)<pos:position pos:line="1512" pos:column="30"/></operator><name pos:line="1512" pos:column="30">tmplen<pos:position pos:line="1512" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="1512" pos:column="38">md5sum<pos:position pos:line="1512" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1512" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1512" pos:column="46"/></expr_stmt>
  <return pos:line="1513" pos:column="3">return <expr><name pos:line="1513" pos:column="10">CURLE_OK<pos:position pos:line="1513" pos:column="18"/></name></expr>;<pos:position pos:line="1513" pos:column="19"/></return>
}<pos:position pos:line="1514" pos:column="2"/></block></function>

<function><specifier pos:line="1516" pos:column="1">static<pos:position pos:line="1516" pos:column="7"/></specifier> <type><name pos:line="1516" pos:column="8">void<pos:position pos:line="1516" pos:column="12"/></name></type> <name pos:line="1516" pos:column="13">Curl_darwinssl_sha256sum<pos:position pos:line="1516" pos:column="37"/></name><parameter_list pos:line="1516" pos:column="37">(<parameter><decl><type><specifier pos:line="1516" pos:column="38">const<pos:position pos:line="1516" pos:column="43"/></specifier> <name pos:line="1516" pos:column="44">unsigned<pos:position pos:line="1516" pos:column="52"/></name> <name pos:line="1516" pos:column="53">char<pos:position pos:line="1516" pos:column="57"/></name> <modifier pos:line="1516" pos:column="58">*<pos:position pos:line="1516" pos:column="59"/></modifier></type><name pos:line="1516" pos:column="59">tmp<pos:position pos:line="1516" pos:column="62"/></name></decl></parameter>, <comment type="block" pos:line="1516" pos:column="64">/* input */</comment>
                                     <parameter><decl><type><name pos:line="1517" pos:column="38">size_t<pos:position pos:line="1517" pos:column="44"/></name></type> <name pos:line="1517" pos:column="45">tmplen<pos:position pos:line="1517" pos:column="51"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="1518" pos:column="38">unsigned<pos:position pos:line="1518" pos:column="46"/></name> <name pos:line="1518" pos:column="47">char<pos:position pos:line="1518" pos:column="51"/></name> <modifier pos:line="1518" pos:column="52">*<pos:position pos:line="1518" pos:column="53"/></modifier></type><name pos:line="1518" pos:column="53">sha256sum<pos:position pos:line="1518" pos:column="62"/></name></decl></parameter>, <comment type="block" pos:line="1518" pos:column="64">/* output */</comment>
                                     <parameter><decl><type><name pos:line="1519" pos:column="38">size_t<pos:position pos:line="1519" pos:column="44"/></name></type> <name pos:line="1519" pos:column="45">sha256len<pos:position pos:line="1519" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1519" pos:column="55"/></parameter_list>
<block pos:line="1520" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="1521" pos:column="3">assert<pos:position pos:line="1521" pos:column="9"/></name><argument_list pos:line="1521" pos:column="9">(<argument><expr><name pos:line="1521" pos:column="10">sha256len<pos:position pos:line="1521" pos:column="19"/></name> <operator pos:line="1521" pos:column="20">&gt;=<pos:position pos:line="1521" pos:column="25"/></operator> <name pos:line="1521" pos:column="23">CURL_SHA256_DIGEST_LENGTH<pos:position pos:line="1521" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1521" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1521" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="1522" pos:column="3">(<pos:position pos:line="1522" pos:column="4"/></operator><name pos:line="1522" pos:column="4">void<pos:position pos:line="1522" pos:column="8"/></name><operator pos:line="1522" pos:column="8">)<pos:position pos:line="1522" pos:column="9"/></operator><call><name pos:line="1522" pos:column="9">CC_SHA256<pos:position pos:line="1522" pos:column="18"/></name><argument_list pos:line="1522" pos:column="18">(<argument><expr><name pos:line="1522" pos:column="19">tmp<pos:position pos:line="1522" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="1522" pos:column="24">(<pos:position pos:line="1522" pos:column="25"/></operator><name pos:line="1522" pos:column="25">CC_LONG<pos:position pos:line="1522" pos:column="32"/></name><operator pos:line="1522" pos:column="32">)<pos:position pos:line="1522" pos:column="33"/></operator><name pos:line="1522" pos:column="33">tmplen<pos:position pos:line="1522" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="1522" pos:column="41">sha256sum<pos:position pos:line="1522" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1522" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1522" pos:column="52"/></expr_stmt>
}<pos:position pos:line="1523" pos:column="2"/></block></function>

<function><specifier pos:line="1525" pos:column="1">static<pos:position pos:line="1525" pos:column="7"/></specifier> <type><name pos:line="1525" pos:column="8">bool<pos:position pos:line="1525" pos:column="12"/></name></type> <name pos:line="1525" pos:column="13">Curl_darwinssl_false_start<pos:position pos:line="1525" pos:column="39"/></name><parameter_list pos:line="1525" pos:column="39">(<parameter><decl><type><name pos:line="1525" pos:column="40">void<pos:position pos:line="1525" pos:column="44"/></name></type></decl></parameter>)<pos:position pos:line="1525" pos:column="45"/></parameter_list>
<block pos:line="1526" pos:column="1">{
<cpp:if pos:line="1527" pos:column="1">#<cpp:directive pos:line="1527" pos:column="2">if<pos:position pos:line="1527" pos:column="4"/></cpp:directive> <expr><name pos:line="1527" pos:column="5">CURL_BUILD_MAC_10_9<pos:position pos:line="1527" pos:column="24"/></name> <operator pos:line="1527" pos:column="25">||<pos:position pos:line="1527" pos:column="27"/></operator> <name pos:line="1527" pos:column="28">CURL_BUILD_IOS_7<pos:position pos:line="1527" pos:column="44"/></name></expr></cpp:if>
  <if pos:line="1528" pos:column="3">if<condition pos:line="1528" pos:column="5">(<expr><name pos:line="1528" pos:column="6">SSLSetSessionOption<pos:position pos:line="1528" pos:column="25"/></name> <operator pos:line="1528" pos:column="26">!=<pos:position pos:line="1528" pos:column="28"/></operator> <name pos:line="1528" pos:column="29">NULL<pos:position pos:line="1528" pos:column="33"/></name></expr>)<pos:position pos:line="1528" pos:column="34"/></condition><then pos:line="1528" pos:column="34">
    <block type="pseudo"><return pos:line="1529" pos:column="5">return <expr><name pos:line="1529" pos:column="12">TRUE<pos:position pos:line="1529" pos:column="16"/></name></expr>;<pos:position pos:line="1529" pos:column="17"/></return></block></then></if>
<cpp:endif pos:line="1530" pos:column="1">#<cpp:directive pos:line="1530" pos:column="2">endif<pos:position pos:line="1530" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="1531" pos:column="3">return <expr><name pos:line="1531" pos:column="10">FALSE<pos:position pos:line="1531" pos:column="15"/></name></expr>;<pos:position pos:line="1531" pos:column="16"/></return>
}<pos:position pos:line="1532" pos:column="2"/></block></function>

<function><specifier pos:line="1534" pos:column="1">static<pos:position pos:line="1534" pos:column="7"/></specifier> <type><name pos:line="1534" pos:column="8">ssize_t<pos:position pos:line="1534" pos:column="15"/></name></type> <name pos:line="1534" pos:column="16">darwinssl_send<pos:position pos:line="1534" pos:column="30"/></name><parameter_list pos:line="1534" pos:column="30">(<parameter><decl><type><name><name pos:line="1534" pos:column="31">struct<pos:position pos:line="1534" pos:column="37"/></name> <name pos:line="1534" pos:column="38">connectdata<pos:position pos:line="1534" pos:column="49"/></name></name> <modifier pos:line="1534" pos:column="50">*<pos:position pos:line="1534" pos:column="51"/></modifier></type><name pos:line="1534" pos:column="51">conn<pos:position pos:line="1534" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="1535" pos:column="31">int<pos:position pos:line="1535" pos:column="34"/></name></type> <name pos:line="1535" pos:column="35">sockindex<pos:position pos:line="1535" pos:column="44"/></name></decl></parameter>,
                              <parameter><decl><type><specifier pos:line="1536" pos:column="31">const<pos:position pos:line="1536" pos:column="36"/></specifier> <name pos:line="1536" pos:column="37">void<pos:position pos:line="1536" pos:column="41"/></name> <modifier pos:line="1536" pos:column="42">*<pos:position pos:line="1536" pos:column="43"/></modifier></type><name pos:line="1536" pos:column="43">mem<pos:position pos:line="1536" pos:column="46"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="1537" pos:column="31">size_t<pos:position pos:line="1537" pos:column="37"/></name></type> <name pos:line="1537" pos:column="38">len<pos:position pos:line="1537" pos:column="41"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="1538" pos:column="31">CURLcode<pos:position pos:line="1538" pos:column="39"/></name> <modifier pos:line="1538" pos:column="40">*<pos:position pos:line="1538" pos:column="41"/></modifier></type><name pos:line="1538" pos:column="41">curlcode<pos:position pos:line="1538" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1538" pos:column="50"/></parameter_list>
<block pos:line="1539" pos:column="1">{
  <comment type="block" pos:line="1540" pos:column="3">/*struct Curl_easy *data = conn-&gt;data;*/</comment>
  <decl_stmt><decl><type><name><name pos:line="1541" pos:column="3">struct<pos:position pos:line="1541" pos:column="9"/></name> <name pos:line="1541" pos:column="10">ssl_connect_data<pos:position pos:line="1541" pos:column="26"/></name></name> <modifier pos:line="1541" pos:column="27">*<pos:position pos:line="1541" pos:column="28"/></modifier></type><name pos:line="1541" pos:column="28">connssl<pos:position pos:line="1541" pos:column="35"/></name> <init pos:line="1541" pos:column="36">= <expr><operator pos:line="1541" pos:column="38">&amp;<pos:position pos:line="1541" pos:column="43"/></operator><name><name pos:line="1541" pos:column="39">conn<pos:position pos:line="1541" pos:column="43"/></name><operator pos:line="1541" pos:column="43">-&gt;<pos:position pos:line="1541" pos:column="48"/></operator><name pos:line="1541" pos:column="45">ssl<pos:position pos:line="1541" pos:column="48"/></name><index pos:line="1541" pos:column="48">[<expr><name pos:line="1541" pos:column="49">sockindex<pos:position pos:line="1541" pos:column="58"/></name></expr>]<pos:position pos:line="1541" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="1541" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1542" pos:column="3">size_t<pos:position pos:line="1542" pos:column="9"/></name></type> <name pos:line="1542" pos:column="10">processed<pos:position pos:line="1542" pos:column="19"/></name> <init pos:line="1542" pos:column="20">= <expr><literal type="number" pos:line="1542" pos:column="22">0UL<pos:position pos:line="1542" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="1542" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1543" pos:column="3">OSStatus<pos:position pos:line="1543" pos:column="11"/></name></type> <name pos:line="1543" pos:column="12">err<pos:position pos:line="1543" pos:column="15"/></name></decl>;<pos:position pos:line="1543" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="1545" pos:column="3">/* The SSLWrite() function works a little differently than expected. The
     fourth argument (processed) is currently documented in Apple's
     documentation as: "On return, the length, in bytes, of the data actually
     written."

     Now, one could interpret that as "written to the socket," but actually,
     it returns the amount of data that was written to a buffer internal to
     the SSLContextRef instead. So it's possible for SSLWrite() to return
     errSSLWouldBlock and a number of bytes "written" because those bytes were
     encrypted and written to a buffer, not to the socket.

     So if this happens, then we need to keep calling SSLWrite() over and
     over again with no new data until it quits returning errSSLWouldBlock. */</comment>

  <comment type="block" pos:line="1559" pos:column="3">/* Do we have buffered data to write from the last time we were called? */</comment>
  <if pos:line="1560" pos:column="3">if<condition pos:line="1560" pos:column="5">(<expr><name><name pos:line="1560" pos:column="6">BACKEND<pos:position pos:line="1560" pos:column="13"/></name><operator pos:line="1560" pos:column="13">-&gt;<pos:position pos:line="1560" pos:column="18"/></operator><name pos:line="1560" pos:column="15">ssl_write_buffered_length<pos:position pos:line="1560" pos:column="40"/></name></name></expr>)<pos:position pos:line="1560" pos:column="41"/></condition><then pos:line="1560" pos:column="41"> <block pos:line="1560" pos:column="42">{
    <comment type="block" pos:line="1561" pos:column="5">/* Write the buffered data: */</comment>
    <expr_stmt><expr><name pos:line="1562" pos:column="5">err<pos:position pos:line="1562" pos:column="8"/></name> <operator pos:line="1562" pos:column="9">=<pos:position pos:line="1562" pos:column="10"/></operator> <call><name pos:line="1562" pos:column="11">SSLWrite<pos:position pos:line="1562" pos:column="19"/></name><argument_list pos:line="1562" pos:column="19">(<argument><expr><name><name pos:line="1562" pos:column="20">BACKEND<pos:position pos:line="1562" pos:column="27"/></name><operator pos:line="1562" pos:column="27">-&gt;<pos:position pos:line="1562" pos:column="32"/></operator><name pos:line="1562" pos:column="29">ssl_ctx<pos:position pos:line="1562" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="1562" pos:column="38">NULL<pos:position pos:line="1562" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1562" pos:column="44">0UL<pos:position pos:line="1562" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="1562" pos:column="49">&amp;<pos:position pos:line="1562" pos:column="54"/></operator><name pos:line="1562" pos:column="50">processed<pos:position pos:line="1562" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1562" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1562" pos:column="61"/></expr_stmt>
    <switch pos:line="1563" pos:column="5">switch<condition pos:line="1563" pos:column="11">(<expr><name pos:line="1563" pos:column="12">err<pos:position pos:line="1563" pos:column="15"/></name></expr>)<pos:position pos:line="1563" pos:column="16"/></condition> <block pos:line="1563" pos:column="17">{
      <case pos:line="1564" pos:column="7">case <expr><name pos:line="1564" pos:column="12">noErr<pos:position pos:line="1564" pos:column="17"/></name></expr>:<pos:position pos:line="1564" pos:column="18"/></case>
        <comment type="block" pos:line="1565" pos:column="9">/* processed is always going to be 0 because we didn't write to
           the buffer, so return how much was written to the socket */</comment>
        <expr_stmt><expr><name pos:line="1567" pos:column="9">processed<pos:position pos:line="1567" pos:column="18"/></name> <operator pos:line="1567" pos:column="19">=<pos:position pos:line="1567" pos:column="20"/></operator> <name><name pos:line="1567" pos:column="21">BACKEND<pos:position pos:line="1567" pos:column="28"/></name><operator pos:line="1567" pos:column="28">-&gt;<pos:position pos:line="1567" pos:column="33"/></operator><name pos:line="1567" pos:column="30">ssl_write_buffered_length<pos:position pos:line="1567" pos:column="55"/></name></name></expr>;<pos:position pos:line="1567" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="1568" pos:column="9">BACKEND<pos:position pos:line="1568" pos:column="16"/></name><operator pos:line="1568" pos:column="16">-&gt;<pos:position pos:line="1568" pos:column="21"/></operator><name pos:line="1568" pos:column="18">ssl_write_buffered_length<pos:position pos:line="1568" pos:column="43"/></name></name> <operator pos:line="1568" pos:column="44">=<pos:position pos:line="1568" pos:column="45"/></operator> <literal type="number" pos:line="1568" pos:column="46">0UL<pos:position pos:line="1568" pos:column="49"/></literal></expr>;<pos:position pos:line="1568" pos:column="50"/></expr_stmt>
        <break pos:line="1569" pos:column="9">break;<pos:position pos:line="1569" pos:column="15"/></break>
      <case pos:line="1570" pos:column="7">case <expr><name pos:line="1570" pos:column="12">errSSLWouldBlock<pos:position pos:line="1570" pos:column="28"/></name></expr>:<pos:position pos:line="1570" pos:column="29"/></case> <comment type="block" pos:line="1570" pos:column="30">/* argh, try again */</comment>
        <expr_stmt><expr><operator pos:line="1571" pos:column="9">*<pos:position pos:line="1571" pos:column="10"/></operator><name pos:line="1571" pos:column="10">curlcode<pos:position pos:line="1571" pos:column="18"/></name> <operator pos:line="1571" pos:column="19">=<pos:position pos:line="1571" pos:column="20"/></operator> <name pos:line="1571" pos:column="21">CURLE_AGAIN<pos:position pos:line="1571" pos:column="32"/></name></expr>;<pos:position pos:line="1571" pos:column="33"/></expr_stmt>
        <return pos:line="1572" pos:column="9">return <expr><operator pos:line="1572" pos:column="16">-<pos:position pos:line="1572" pos:column="17"/></operator><literal type="number" pos:line="1572" pos:column="17">1L<pos:position pos:line="1572" pos:column="19"/></literal></expr>;<pos:position pos:line="1572" pos:column="20"/></return>
      <default pos:line="1573" pos:column="7">default:<pos:position pos:line="1573" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="1574" pos:column="9">failf<pos:position pos:line="1574" pos:column="14"/></name><argument_list pos:line="1574" pos:column="14">(<argument><expr><name><name pos:line="1574" pos:column="15">conn<pos:position pos:line="1574" pos:column="19"/></name><operator pos:line="1574" pos:column="19">-&gt;<pos:position pos:line="1574" pos:column="24"/></operator><name pos:line="1574" pos:column="21">data<pos:position pos:line="1574" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1574" pos:column="27">"SSLWrite() returned error %d"<pos:position pos:line="1574" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="1574" pos:column="59">err<pos:position pos:line="1574" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1574" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1574" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="1575" pos:column="9">*<pos:position pos:line="1575" pos:column="10"/></operator><name pos:line="1575" pos:column="10">curlcode<pos:position pos:line="1575" pos:column="18"/></name> <operator pos:line="1575" pos:column="19">=<pos:position pos:line="1575" pos:column="20"/></operator> <name pos:line="1575" pos:column="21">CURLE_SEND_ERROR<pos:position pos:line="1575" pos:column="37"/></name></expr>;<pos:position pos:line="1575" pos:column="38"/></expr_stmt>
        <return pos:line="1576" pos:column="9">return <expr><operator pos:line="1576" pos:column="16">-<pos:position pos:line="1576" pos:column="17"/></operator><literal type="number" pos:line="1576" pos:column="17">1L<pos:position pos:line="1576" pos:column="19"/></literal></expr>;<pos:position pos:line="1576" pos:column="20"/></return>
    }<pos:position pos:line="1577" pos:column="6"/></block></switch>
  }<pos:position pos:line="1578" pos:column="4"/></block></then>
  <else pos:line="1579" pos:column="3">else <block pos:line="1579" pos:column="8">{
    <comment type="block" pos:line="1580" pos:column="5">/* We've got new data to write: */</comment>
    <expr_stmt><expr><name pos:line="1581" pos:column="5">err<pos:position pos:line="1581" pos:column="8"/></name> <operator pos:line="1581" pos:column="9">=<pos:position pos:line="1581" pos:column="10"/></operator> <call><name pos:line="1581" pos:column="11">SSLWrite<pos:position pos:line="1581" pos:column="19"/></name><argument_list pos:line="1581" pos:column="19">(<argument><expr><name><name pos:line="1581" pos:column="20">BACKEND<pos:position pos:line="1581" pos:column="27"/></name><operator pos:line="1581" pos:column="27">-&gt;<pos:position pos:line="1581" pos:column="32"/></operator><name pos:line="1581" pos:column="29">ssl_ctx<pos:position pos:line="1581" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="1581" pos:column="38">mem<pos:position pos:line="1581" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="1581" pos:column="43">len<pos:position pos:line="1581" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="1581" pos:column="48">&amp;<pos:position pos:line="1581" pos:column="53"/></operator><name pos:line="1581" pos:column="49">processed<pos:position pos:line="1581" pos:column="58"/></name></expr></argument>)<pos:position pos:line="1581" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1581" pos:column="60"/></expr_stmt>
    <if pos:line="1582" pos:column="5">if<condition pos:line="1582" pos:column="7">(<expr><name pos:line="1582" pos:column="8">err<pos:position pos:line="1582" pos:column="11"/></name> <operator pos:line="1582" pos:column="12">!=<pos:position pos:line="1582" pos:column="14"/></operator> <name pos:line="1582" pos:column="15">noErr<pos:position pos:line="1582" pos:column="20"/></name></expr>)<pos:position pos:line="1582" pos:column="21"/></condition><then pos:line="1582" pos:column="21"> <block pos:line="1582" pos:column="22">{
      <switch pos:line="1583" pos:column="7">switch<condition pos:line="1583" pos:column="13">(<expr><name pos:line="1583" pos:column="14">err<pos:position pos:line="1583" pos:column="17"/></name></expr>)<pos:position pos:line="1583" pos:column="18"/></condition> <block pos:line="1583" pos:column="19">{
        <case pos:line="1584" pos:column="9">case <expr><name pos:line="1584" pos:column="14">errSSLWouldBlock<pos:position pos:line="1584" pos:column="30"/></name></expr>:<pos:position pos:line="1584" pos:column="31"/></case>
          <comment type="block" pos:line="1585" pos:column="11">/* Data was buffered but not sent, we have to tell the caller
             to try sending again, and remember how much was buffered */</comment>
          <expr_stmt><expr><name><name pos:line="1587" pos:column="11">BACKEND<pos:position pos:line="1587" pos:column="18"/></name><operator pos:line="1587" pos:column="18">-&gt;<pos:position pos:line="1587" pos:column="23"/></operator><name pos:line="1587" pos:column="20">ssl_write_buffered_length<pos:position pos:line="1587" pos:column="45"/></name></name> <operator pos:line="1587" pos:column="46">=<pos:position pos:line="1587" pos:column="47"/></operator> <name pos:line="1587" pos:column="48">len<pos:position pos:line="1587" pos:column="51"/></name></expr>;<pos:position pos:line="1587" pos:column="52"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="1588" pos:column="11">*<pos:position pos:line="1588" pos:column="12"/></operator><name pos:line="1588" pos:column="12">curlcode<pos:position pos:line="1588" pos:column="20"/></name> <operator pos:line="1588" pos:column="21">=<pos:position pos:line="1588" pos:column="22"/></operator> <name pos:line="1588" pos:column="23">CURLE_AGAIN<pos:position pos:line="1588" pos:column="34"/></name></expr>;<pos:position pos:line="1588" pos:column="35"/></expr_stmt>
          <return pos:line="1589" pos:column="11">return <expr><operator pos:line="1589" pos:column="18">-<pos:position pos:line="1589" pos:column="19"/></operator><literal type="number" pos:line="1589" pos:column="19">1L<pos:position pos:line="1589" pos:column="21"/></literal></expr>;<pos:position pos:line="1589" pos:column="22"/></return>
        <default pos:line="1590" pos:column="9">default:<pos:position pos:line="1590" pos:column="17"/></default>
          <expr_stmt><expr><call><name pos:line="1591" pos:column="11">failf<pos:position pos:line="1591" pos:column="16"/></name><argument_list pos:line="1591" pos:column="16">(<argument><expr><name><name pos:line="1591" pos:column="17">conn<pos:position pos:line="1591" pos:column="21"/></name><operator pos:line="1591" pos:column="21">-&gt;<pos:position pos:line="1591" pos:column="26"/></operator><name pos:line="1591" pos:column="23">data<pos:position pos:line="1591" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1591" pos:column="29">"SSLWrite() returned error %d"<pos:position pos:line="1591" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="1591" pos:column="61">err<pos:position pos:line="1591" pos:column="64"/></name></expr></argument>)<pos:position pos:line="1591" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="1591" pos:column="66"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="1592" pos:column="11">*<pos:position pos:line="1592" pos:column="12"/></operator><name pos:line="1592" pos:column="12">curlcode<pos:position pos:line="1592" pos:column="20"/></name> <operator pos:line="1592" pos:column="21">=<pos:position pos:line="1592" pos:column="22"/></operator> <name pos:line="1592" pos:column="23">CURLE_SEND_ERROR<pos:position pos:line="1592" pos:column="39"/></name></expr>;<pos:position pos:line="1592" pos:column="40"/></expr_stmt>
          <return pos:line="1593" pos:column="11">return <expr><operator pos:line="1593" pos:column="18">-<pos:position pos:line="1593" pos:column="19"/></operator><literal type="number" pos:line="1593" pos:column="19">1L<pos:position pos:line="1593" pos:column="21"/></literal></expr>;<pos:position pos:line="1593" pos:column="22"/></return>
      }<pos:position pos:line="1594" pos:column="8"/></block></switch>
    }<pos:position pos:line="1595" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1596" pos:column="4"/></block></else></if>
  <return pos:line="1597" pos:column="3">return <expr><operator pos:line="1597" pos:column="10">(<pos:position pos:line="1597" pos:column="11"/></operator><name pos:line="1597" pos:column="11">ssize_t<pos:position pos:line="1597" pos:column="18"/></name><operator pos:line="1597" pos:column="18">)<pos:position pos:line="1597" pos:column="19"/></operator><name pos:line="1597" pos:column="19">processed<pos:position pos:line="1597" pos:column="28"/></name></expr>;<pos:position pos:line="1597" pos:column="29"/></return>
}<pos:position pos:line="1598" pos:column="2"/></block></function>

<function><specifier pos:line="1600" pos:column="1">static<pos:position pos:line="1600" pos:column="7"/></specifier> <type><name pos:line="1600" pos:column="8">ssize_t<pos:position pos:line="1600" pos:column="15"/></name></type> <name pos:line="1600" pos:column="16">darwinssl_recv<pos:position pos:line="1600" pos:column="30"/></name><parameter_list pos:line="1600" pos:column="30">(<parameter><decl><type><name><name pos:line="1600" pos:column="31">struct<pos:position pos:line="1600" pos:column="37"/></name> <name pos:line="1600" pos:column="38">connectdata<pos:position pos:line="1600" pos:column="49"/></name></name> <modifier pos:line="1600" pos:column="50">*<pos:position pos:line="1600" pos:column="51"/></modifier></type><name pos:line="1600" pos:column="51">conn<pos:position pos:line="1600" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="1601" pos:column="31">int<pos:position pos:line="1601" pos:column="34"/></name></type> <name pos:line="1601" pos:column="35">num<pos:position pos:line="1601" pos:column="38"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="1602" pos:column="31">char<pos:position pos:line="1602" pos:column="35"/></name> <modifier pos:line="1602" pos:column="36">*<pos:position pos:line="1602" pos:column="37"/></modifier></type><name pos:line="1602" pos:column="37">buf<pos:position pos:line="1602" pos:column="40"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="1603" pos:column="31">size_t<pos:position pos:line="1603" pos:column="37"/></name></type> <name pos:line="1603" pos:column="38">buffersize<pos:position pos:line="1603" pos:column="48"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="1604" pos:column="31">CURLcode<pos:position pos:line="1604" pos:column="39"/></name> <modifier pos:line="1604" pos:column="40">*<pos:position pos:line="1604" pos:column="41"/></modifier></type><name pos:line="1604" pos:column="41">curlcode<pos:position pos:line="1604" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1604" pos:column="50"/></parameter_list>
<block pos:line="1605" pos:column="1">{
  <comment type="block" pos:line="1606" pos:column="3">/*struct Curl_easy *data = conn-&gt;data;*/</comment>
  <decl_stmt><decl><type><name><name pos:line="1607" pos:column="3">struct<pos:position pos:line="1607" pos:column="9"/></name> <name pos:line="1607" pos:column="10">ssl_connect_data<pos:position pos:line="1607" pos:column="26"/></name></name> <modifier pos:line="1607" pos:column="27">*<pos:position pos:line="1607" pos:column="28"/></modifier></type><name pos:line="1607" pos:column="28">connssl<pos:position pos:line="1607" pos:column="35"/></name> <init pos:line="1607" pos:column="36">= <expr><operator pos:line="1607" pos:column="38">&amp;<pos:position pos:line="1607" pos:column="43"/></operator><name><name pos:line="1607" pos:column="39">conn<pos:position pos:line="1607" pos:column="43"/></name><operator pos:line="1607" pos:column="43">-&gt;<pos:position pos:line="1607" pos:column="48"/></operator><name pos:line="1607" pos:column="45">ssl<pos:position pos:line="1607" pos:column="48"/></name><index pos:line="1607" pos:column="48">[<expr><name pos:line="1607" pos:column="49">num<pos:position pos:line="1607" pos:column="52"/></name></expr>]<pos:position pos:line="1607" pos:column="53"/></index></name></expr></init></decl>;<pos:position pos:line="1607" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1608" pos:column="3">size_t<pos:position pos:line="1608" pos:column="9"/></name></type> <name pos:line="1608" pos:column="10">processed<pos:position pos:line="1608" pos:column="19"/></name> <init pos:line="1608" pos:column="20">= <expr><literal type="number" pos:line="1608" pos:column="22">0UL<pos:position pos:line="1608" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="1608" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1609" pos:column="3">OSStatus<pos:position pos:line="1609" pos:column="11"/></name></type> <name pos:line="1609" pos:column="12">err<pos:position pos:line="1609" pos:column="15"/></name> <init pos:line="1609" pos:column="16">= <expr><call><name pos:line="1609" pos:column="18">SSLRead<pos:position pos:line="1609" pos:column="25"/></name><argument_list pos:line="1609" pos:column="25">(<argument><expr><name><name pos:line="1609" pos:column="26">BACKEND<pos:position pos:line="1609" pos:column="33"/></name><operator pos:line="1609" pos:column="33">-&gt;<pos:position pos:line="1609" pos:column="38"/></operator><name pos:line="1609" pos:column="35">ssl_ctx<pos:position pos:line="1609" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="1609" pos:column="44">buf<pos:position pos:line="1609" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1609" pos:column="49">buffersize<pos:position pos:line="1609" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="1609" pos:column="61">&amp;<pos:position pos:line="1609" pos:column="66"/></operator><name pos:line="1609" pos:column="62">processed<pos:position pos:line="1609" pos:column="71"/></name></expr></argument>)<pos:position pos:line="1609" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1609" pos:column="73"/></decl_stmt>

  <if pos:line="1611" pos:column="3">if<condition pos:line="1611" pos:column="5">(<expr><name pos:line="1611" pos:column="6">err<pos:position pos:line="1611" pos:column="9"/></name> <operator pos:line="1611" pos:column="10">!=<pos:position pos:line="1611" pos:column="12"/></operator> <name pos:line="1611" pos:column="13">noErr<pos:position pos:line="1611" pos:column="18"/></name></expr>)<pos:position pos:line="1611" pos:column="19"/></condition><then pos:line="1611" pos:column="19"> <block pos:line="1611" pos:column="20">{
    <switch pos:line="1612" pos:column="5">switch<condition pos:line="1612" pos:column="11">(<expr><name pos:line="1612" pos:column="12">err<pos:position pos:line="1612" pos:column="15"/></name></expr>)<pos:position pos:line="1612" pos:column="16"/></condition> <block pos:line="1612" pos:column="17">{
      <case pos:line="1613" pos:column="7">case <expr><name pos:line="1613" pos:column="12">errSSLWouldBlock<pos:position pos:line="1613" pos:column="28"/></name></expr>:<pos:position pos:line="1613" pos:column="29"/></case>  <comment type="block" pos:line="1613" pos:column="31">/* return how much we read (if anything) */</comment>
        <if pos:line="1614" pos:column="9">if<condition pos:line="1614" pos:column="11">(<expr><name pos:line="1614" pos:column="12">processed<pos:position pos:line="1614" pos:column="21"/></name></expr>)<pos:position pos:line="1614" pos:column="22"/></condition><then pos:line="1614" pos:column="22">
          <block type="pseudo"><return pos:line="1615" pos:column="11">return <expr><operator pos:line="1615" pos:column="18">(<pos:position pos:line="1615" pos:column="19"/></operator><name pos:line="1615" pos:column="19">ssize_t<pos:position pos:line="1615" pos:column="26"/></name><operator pos:line="1615" pos:column="26">)<pos:position pos:line="1615" pos:column="27"/></operator><name pos:line="1615" pos:column="27">processed<pos:position pos:line="1615" pos:column="36"/></name></expr>;<pos:position pos:line="1615" pos:column="37"/></return></block></then></if>
        <expr_stmt><expr><operator pos:line="1616" pos:column="9">*<pos:position pos:line="1616" pos:column="10"/></operator><name pos:line="1616" pos:column="10">curlcode<pos:position pos:line="1616" pos:column="18"/></name> <operator pos:line="1616" pos:column="19">=<pos:position pos:line="1616" pos:column="20"/></operator> <name pos:line="1616" pos:column="21">CURLE_AGAIN<pos:position pos:line="1616" pos:column="32"/></name></expr>;<pos:position pos:line="1616" pos:column="33"/></expr_stmt>
        <return pos:line="1617" pos:column="9">return <expr><operator pos:line="1617" pos:column="16">-<pos:position pos:line="1617" pos:column="17"/></operator><literal type="number" pos:line="1617" pos:column="17">1L<pos:position pos:line="1617" pos:column="19"/></literal></expr>;<pos:position pos:line="1617" pos:column="20"/></return>
        <break pos:line="1618" pos:column="9">break;<pos:position pos:line="1618" pos:column="15"/></break>

      <comment type="block" pos:line="1620" pos:column="7">/* errSSLClosedGraceful - server gracefully shut down the SSL session
         errSSLClosedNoNotify - server hung up on us instead of sending a
           closure alert notice, read() is returning 0
         Either way, inform the caller that the server disconnected. */</comment>
      <case pos:line="1624" pos:column="7">case <expr><name pos:line="1624" pos:column="12">errSSLClosedGraceful<pos:position pos:line="1624" pos:column="32"/></name></expr>:<pos:position pos:line="1624" pos:column="33"/></case>
      <case pos:line="1625" pos:column="7">case <expr><name pos:line="1625" pos:column="12">errSSLClosedNoNotify<pos:position pos:line="1625" pos:column="32"/></name></expr>:<pos:position pos:line="1625" pos:column="33"/></case>
        <expr_stmt><expr><operator pos:line="1626" pos:column="9">*<pos:position pos:line="1626" pos:column="10"/></operator><name pos:line="1626" pos:column="10">curlcode<pos:position pos:line="1626" pos:column="18"/></name> <operator pos:line="1626" pos:column="19">=<pos:position pos:line="1626" pos:column="20"/></operator> <name pos:line="1626" pos:column="21">CURLE_OK<pos:position pos:line="1626" pos:column="29"/></name></expr>;<pos:position pos:line="1626" pos:column="30"/></expr_stmt>
        <return pos:line="1627" pos:column="9">return <expr><operator pos:line="1627" pos:column="16">-<pos:position pos:line="1627" pos:column="17"/></operator><literal type="number" pos:line="1627" pos:column="17">1L<pos:position pos:line="1627" pos:column="19"/></literal></expr>;<pos:position pos:line="1627" pos:column="20"/></return>
        <break pos:line="1628" pos:column="9">break;<pos:position pos:line="1628" pos:column="15"/></break>

      <default pos:line="1630" pos:column="7">default:<pos:position pos:line="1630" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="1631" pos:column="9">failf<pos:position pos:line="1631" pos:column="14"/></name><argument_list pos:line="1631" pos:column="14">(<argument><expr><name><name pos:line="1631" pos:column="15">conn<pos:position pos:line="1631" pos:column="19"/></name><operator pos:line="1631" pos:column="19">-&gt;<pos:position pos:line="1631" pos:column="24"/></operator><name pos:line="1631" pos:column="21">data<pos:position pos:line="1631" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1631" pos:column="27">"SSLRead() return error %d"<pos:position pos:line="1631" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="1631" pos:column="56">err<pos:position pos:line="1631" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1631" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1631" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="1632" pos:column="9">*<pos:position pos:line="1632" pos:column="10"/></operator><name pos:line="1632" pos:column="10">curlcode<pos:position pos:line="1632" pos:column="18"/></name> <operator pos:line="1632" pos:column="19">=<pos:position pos:line="1632" pos:column="20"/></operator> <name pos:line="1632" pos:column="21">CURLE_RECV_ERROR<pos:position pos:line="1632" pos:column="37"/></name></expr>;<pos:position pos:line="1632" pos:column="38"/></expr_stmt>
        <return pos:line="1633" pos:column="9">return <expr><operator pos:line="1633" pos:column="16">-<pos:position pos:line="1633" pos:column="17"/></operator><literal type="number" pos:line="1633" pos:column="17">1L<pos:position pos:line="1633" pos:column="19"/></literal></expr>;<pos:position pos:line="1633" pos:column="20"/></return>
        <break pos:line="1634" pos:column="9">break;<pos:position pos:line="1634" pos:column="15"/></break>
    }<pos:position pos:line="1635" pos:column="6"/></block></switch>
  }<pos:position pos:line="1636" pos:column="4"/></block></then></if>
  <return pos:line="1637" pos:column="3">return <expr><operator pos:line="1637" pos:column="10">(<pos:position pos:line="1637" pos:column="11"/></operator><name pos:line="1637" pos:column="11">ssize_t<pos:position pos:line="1637" pos:column="18"/></name><operator pos:line="1637" pos:column="18">)<pos:position pos:line="1637" pos:column="19"/></operator><name pos:line="1637" pos:column="19">processed<pos:position pos:line="1637" pos:column="28"/></name></expr>;<pos:position pos:line="1637" pos:column="29"/></return>
}<pos:position pos:line="1638" pos:column="2"/></block></function>

<function><specifier pos:line="1640" pos:column="1">static<pos:position pos:line="1640" pos:column="7"/></specifier> <type><name pos:line="1640" pos:column="8">void<pos:position pos:line="1640" pos:column="12"/></name> <modifier pos:line="1640" pos:column="13">*<pos:position pos:line="1640" pos:column="14"/></modifier></type><name pos:line="1640" pos:column="14">Curl_darwinssl_get_internals<pos:position pos:line="1640" pos:column="42"/></name><parameter_list pos:line="1640" pos:column="42">(<parameter><decl><type><name><name pos:line="1640" pos:column="43">struct<pos:position pos:line="1640" pos:column="49"/></name> <name pos:line="1640" pos:column="50">ssl_connect_data<pos:position pos:line="1640" pos:column="66"/></name></name> <modifier pos:line="1640" pos:column="67">*<pos:position pos:line="1640" pos:column="68"/></modifier></type><name pos:line="1640" pos:column="68">connssl<pos:position pos:line="1640" pos:column="75"/></name></decl></parameter>,
                                          <parameter><decl><type><name pos:line="1641" pos:column="43">CURLINFO<pos:position pos:line="1641" pos:column="51"/></name> <name pos:line="1641" pos:column="52">info<pos:position pos:line="1641" pos:column="56"/></name></type> <name pos:line="1641" pos:column="57">UNUSED_PARAM<pos:position pos:line="1641" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1641" pos:column="70"/></parameter_list>
<block pos:line="1642" pos:column="1">{
  <expr_stmt><expr><operator pos:line="1643" pos:column="3">(<pos:position pos:line="1643" pos:column="4"/></operator><name pos:line="1643" pos:column="4">void<pos:position pos:line="1643" pos:column="8"/></name><operator pos:line="1643" pos:column="8">)<pos:position pos:line="1643" pos:column="9"/></operator><name pos:line="1643" pos:column="9">info<pos:position pos:line="1643" pos:column="13"/></name></expr>;<pos:position pos:line="1643" pos:column="14"/></expr_stmt>
  <return pos:line="1644" pos:column="3">return <expr><name><name pos:line="1644" pos:column="10">BACKEND<pos:position pos:line="1644" pos:column="17"/></name><operator pos:line="1644" pos:column="17">-&gt;<pos:position pos:line="1644" pos:column="22"/></operator><name pos:line="1644" pos:column="19">ssl_ctx<pos:position pos:line="1644" pos:column="26"/></name></name></expr>;<pos:position pos:line="1644" pos:column="27"/></return>
}<pos:position pos:line="1645" pos:column="2"/></block></function>

<decl_stmt><decl><type><specifier pos:line="1647" pos:column="1">const<pos:position pos:line="1647" pos:column="6"/></specifier> <name><name pos:line="1647" pos:column="7">struct<pos:position pos:line="1647" pos:column="13"/></name> <name pos:line="1647" pos:column="14">Curl_ssl<pos:position pos:line="1647" pos:column="22"/></name></name></type> <name pos:line="1647" pos:column="23">Curl_ssl_darwinssl<pos:position pos:line="1647" pos:column="41"/></name> <init pos:line="1647" pos:column="42">= <expr><block pos:line="1647" pos:column="44">{
  <expr><block pos:line="1648" pos:column="3">{ <expr><name pos:line="1648" pos:column="5">CURLSSLBACKEND_DARWINSSL<pos:position pos:line="1648" pos:column="29"/></name></expr>, <expr><literal type="string" pos:line="1648" pos:column="31">"darwinssl"<pos:position pos:line="1648" pos:column="42"/></literal></expr> }<pos:position pos:line="1648" pos:column="44"/></block></expr>, <comment type="block" pos:line="1648" pos:column="46">/* info */</comment>

  <expr><literal type="number" pos:line="1650" pos:column="3">0<pos:position pos:line="1650" pos:column="4"/></literal></expr>, <comment type="block" pos:line="1650" pos:column="6">/* have_ca_path */</comment>
  <expr><literal type="number" pos:line="1651" pos:column="3">0<pos:position pos:line="1651" pos:column="4"/></literal></expr>, <comment type="block" pos:line="1651" pos:column="6">/* have_certinfo */</comment>
<cpp:ifdef pos:line="1652" pos:column="1">#<cpp:directive pos:line="1652" pos:column="2">ifdef<pos:position pos:line="1652" pos:column="7"/></cpp:directive> <name pos:line="1652" pos:column="8">DARWIN_SSL_PINNEDPUBKEY<pos:position pos:line="1652" pos:column="31"/></name></cpp:ifdef>
  <expr><literal type="number" pos:line="1653" pos:column="3">1<pos:position pos:line="1653" pos:column="4"/></literal></expr>, <comment type="block" pos:line="1653" pos:column="6">/* have_pinnedpubkey */</comment>
<cpp:else pos:line="1654" pos:column="1">#<cpp:directive pos:line="1654" pos:column="2">else<pos:position pos:line="1654" pos:column="6"/></cpp:directive></cpp:else>
  <expr><literal type="number" pos:line="1655" pos:column="3">0<pos:position pos:line="1655" pos:column="4"/></literal></expr>, <comment type="block" pos:line="1655" pos:column="6">/* have_pinnedpubkey */</comment>
<cpp:endif pos:line="1656" pos:column="1">#<cpp:directive pos:line="1656" pos:column="2">endif<pos:position pos:line="1656" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1656" pos:column="8">/* DARWIN_SSL_PINNEDPUBKEY */</comment>
  <expr><literal type="number" pos:line="1657" pos:column="3">0<pos:position pos:line="1657" pos:column="4"/></literal></expr>, <comment type="block" pos:line="1657" pos:column="6">/* have_ssl_ctx */</comment>
  <expr><literal type="number" pos:line="1658" pos:column="3">0<pos:position pos:line="1658" pos:column="4"/></literal></expr>, <comment type="block" pos:line="1658" pos:column="6">/* support_https_proxy */</comment>

  <expr><sizeof pos:line="1660" pos:column="3">sizeof<argument_list pos:line="1660" pos:column="9">(<argument><expr pos:line="1660" pos:column="10">struct <name pos:line="1660" pos:column="17">ssl_backend_data<pos:position pos:line="1660" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1660" pos:column="34"/></argument_list></sizeof></expr>,

  <expr><name pos:line="1662" pos:column="3">Curl_none_init<pos:position pos:line="1662" pos:column="17"/></name></expr>,                     <comment type="block" pos:line="1662" pos:column="39">/* init */</comment>
  <expr><name pos:line="1663" pos:column="3">Curl_none_cleanup<pos:position pos:line="1663" pos:column="20"/></name></expr>,                  <comment type="block" pos:line="1663" pos:column="39">/* cleanup */</comment>
  <expr><name pos:line="1664" pos:column="3">Curl_darwinssl_version<pos:position pos:line="1664" pos:column="25"/></name></expr>,             <comment type="block" pos:line="1664" pos:column="39">/* version */</comment>
  <expr><name pos:line="1665" pos:column="3">Curl_darwinssl_check_cxn<pos:position pos:line="1665" pos:column="27"/></name></expr>,           <comment type="block" pos:line="1665" pos:column="39">/* check_cxn */</comment>
  <expr><name pos:line="1666" pos:column="3">Curl_darwinssl_shutdown<pos:position pos:line="1666" pos:column="26"/></name></expr>,            <comment type="block" pos:line="1666" pos:column="39">/* shutdown */</comment>
  <expr><name pos:line="1667" pos:column="3">Curl_darwinssl_data_pending<pos:position pos:line="1667" pos:column="30"/></name></expr>,        <comment type="block" pos:line="1667" pos:column="39">/* data_pending */</comment>
  <expr><name pos:line="1668" pos:column="3">Curl_darwinssl_random<pos:position pos:line="1668" pos:column="24"/></name></expr>,              <comment type="block" pos:line="1668" pos:column="39">/* random */</comment>
  <expr><name pos:line="1669" pos:column="3">Curl_none_cert_status_request<pos:position pos:line="1669" pos:column="32"/></name></expr>,      <comment type="block" pos:line="1669" pos:column="39">/* cert_status_request */</comment>
  <expr><name pos:line="1670" pos:column="3">Curl_darwinssl_connect<pos:position pos:line="1670" pos:column="25"/></name></expr>,             <comment type="block" pos:line="1670" pos:column="39">/* connect */</comment>
  <expr><name pos:line="1671" pos:column="3">Curl_darwinssl_connect_nonblocking<pos:position pos:line="1671" pos:column="37"/></name></expr>, <comment type="block" pos:line="1671" pos:column="39">/* connect_nonblocking */</comment>
  <expr><name pos:line="1672" pos:column="3">Curl_darwinssl_get_internals<pos:position pos:line="1672" pos:column="31"/></name></expr>,       <comment type="block" pos:line="1672" pos:column="39">/* get_internals */</comment>
  <expr><name pos:line="1673" pos:column="3">Curl_darwinssl_close<pos:position pos:line="1673" pos:column="23"/></name></expr>,               <comment type="block" pos:line="1673" pos:column="39">/* close */</comment>
  <expr><name pos:line="1674" pos:column="3">Curl_none_close_all<pos:position pos:line="1674" pos:column="22"/></name></expr>,                <comment type="block" pos:line="1674" pos:column="39">/* close_all */</comment>
  <expr><name pos:line="1675" pos:column="3">Curl_darwinssl_session_free<pos:position pos:line="1675" pos:column="30"/></name></expr>,        <comment type="block" pos:line="1675" pos:column="39">/* session_free */</comment>
  <expr><name pos:line="1676" pos:column="3">Curl_none_set_engine<pos:position pos:line="1676" pos:column="23"/></name></expr>,               <comment type="block" pos:line="1676" pos:column="39">/* set_engine */</comment>
  <expr><name pos:line="1677" pos:column="3">Curl_none_set_engine_default<pos:position pos:line="1677" pos:column="31"/></name></expr>,       <comment type="block" pos:line="1677" pos:column="39">/* set_engine_default */</comment>
  <expr><name pos:line="1678" pos:column="3">Curl_none_engines_list<pos:position pos:line="1678" pos:column="25"/></name></expr>,             <comment type="block" pos:line="1678" pos:column="39">/* engines_list */</comment>
  <expr><name pos:line="1679" pos:column="3">Curl_darwinssl_false_start<pos:position pos:line="1679" pos:column="29"/></name></expr>,         <comment type="block" pos:line="1679" pos:column="39">/* false_start */</comment>
  <expr><name pos:line="1680" pos:column="3">Curl_darwinssl_md5sum<pos:position pos:line="1680" pos:column="24"/></name></expr>,              <comment type="block" pos:line="1680" pos:column="39">/* md5sum */</comment>
  <expr><name pos:line="1681" pos:column="3">Curl_darwinssl_sha256sum<pos:position pos:line="1681" pos:column="27"/></name></expr>            <comment type="block" pos:line="1681" pos:column="39">/* sha256sum */</comment>
}<pos:position pos:line="1682" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="1682" pos:column="3"/></decl_stmt></block></function></unit>
