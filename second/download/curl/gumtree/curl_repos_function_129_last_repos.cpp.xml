<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_129_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">parseStreamCallback<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">void<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">contents<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">length<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">size_t<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">nmemb<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">void<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">userp<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">XML_Parser<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">parser<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><operator pos:line="4" pos:column="23">(<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">XML_Parser<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">)<pos:position pos:line="4" pos:column="35"/></operator> <name pos:line="4" pos:column="36">userp<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">real_size<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name pos:line="5" pos:column="22">length<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">nmemb<pos:position pos:line="5" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">ParserStruct<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">state<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><operator pos:line="6" pos:column="32">(<pos:position pos:line="6" pos:column="33"/></operator>struct <name pos:line="6" pos:column="40">ParserStruct<pos:position pos:line="6" pos:column="52"/></name> <operator pos:line="6" pos:column="53">*<pos:position pos:line="6" pos:column="54"/></operator><operator pos:line="6" pos:column="54">)<pos:position pos:line="6" pos:column="55"/></operator> <call><name pos:line="6" pos:column="56">XML_GetUserData<pos:position pos:line="6" pos:column="71"/></name><argument_list pos:line="6" pos:column="71">(<argument><expr><name pos:line="6" pos:column="72">parser<pos:position pos:line="6" pos:column="78"/></name></expr></argument>)<pos:position pos:line="6" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="80"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Only parse if we're not already in a failure state. */</comment>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name><name pos:line="9" pos:column="6">state<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">ok<pos:position pos:line="9" pos:column="15"/></name></name> <operator pos:line="9" pos:column="16">&amp;&amp;<pos:position pos:line="9" pos:column="26"/></operator> <call><name pos:line="9" pos:column="19">XML_Parse<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">parser<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">contents<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="47">real_size<pos:position pos:line="9" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="58">0<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call> <operator pos:line="9" pos:column="61">==<pos:position pos:line="9" pos:column="63"/></operator> <literal type="number" pos:line="9" pos:column="64">0<pos:position pos:line="9" pos:column="65"/></literal></expr>)<pos:position pos:line="9" pos:column="66"/></condition><then pos:line="9" pos:column="66"> <block pos:line="9" pos:column="67">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">error_code<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><call><name pos:line="10" pos:column="22">XML_GetErrorCode<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">(<argument><expr><name pos:line="10" pos:column="39">parser<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="47"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">fprintf<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">stderr<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="21">"Parsing response buffer of length %lu failed"<pos:position pos:line="11" pos:column="67"/></literal>
            <literal type="string" pos:line="12" pos:column="13">" with error code %d (%s).\n"<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>,
            <argument><expr><name pos:line="13" pos:column="13">real_size<pos:position pos:line="13" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="24">error_code<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="36">XML_ErrorString<pos:position pos:line="13" pos:column="51"/></name><argument_list pos:line="13" pos:column="51">(<argument><expr><name pos:line="13" pos:column="52">error_code<pos:position pos:line="13" pos:column="62"/></name></expr></argument>)<pos:position pos:line="13" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">state<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">ok<pos:position pos:line="14" pos:column="14"/></name></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <return pos:line="17" pos:column="3">return <expr><name pos:line="17" pos:column="10">real_size<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
