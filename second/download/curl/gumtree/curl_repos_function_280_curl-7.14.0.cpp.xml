<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_280_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">verifyhost<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">X509<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">server_cert<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">bool<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">matched<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">FALSE<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt> <comment type="block" pos:line="4" pos:column="25">/* no alternative match yet */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">target<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><name pos:line="5" pos:column="16">GEN_DNS<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt> <comment type="block" pos:line="5" pos:column="25">/* target type, GEN_DNS or GEN_IPADD */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">addrlen<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name><name pos:line="7" pos:column="32">conn<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">-&gt;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="38">data<pos:position pos:line="7" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">STACK_OF<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">GENERAL_NAME<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call> <operator pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">altnames<pos:position pos:line="8" pos:column="35"/></name></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">ENABLE_IPV6<pos:position pos:line="9" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">in6_addr<pos:position pos:line="10" pos:column="18"/></name></name></type> <name pos:line="10" pos:column="19">addr<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name pos:line="12" pos:column="3">struct<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">in_addr<pos:position pos:line="12" pos:column="17"/></name></name></type> <name pos:line="12" pos:column="18">addr<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">CURLcode<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">res<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><name pos:line="14" pos:column="18">CURLE_OK<pos:position pos:line="14" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>

<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">ENABLE_IPV6<pos:position pos:line="16" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name><name pos:line="17" pos:column="6">conn<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">bits<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">ipv6_ip<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">&amp;&amp;<pos:position pos:line="17" pos:column="35"/></operator>
     <call><name pos:line="18" pos:column="6">Curl_inet_pton<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">AF_INET6<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="31">conn<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">-&gt;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="37">host<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">.<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="42">name<pos:position pos:line="18" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="48">&amp;<pos:position pos:line="18" pos:column="53"/></operator><name pos:line="18" pos:column="49">addr<pos:position pos:line="18" pos:column="53"/></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="55"/></condition><then pos:line="18" pos:column="55"> <block pos:line="18" pos:column="56">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">target<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">GEN_IPADD<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">addrlen<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <sizeof pos:line="20" pos:column="15">sizeof<argument_list pos:line="20" pos:column="21">(<argument><expr pos:line="20" pos:column="22">struct <name pos:line="20" pos:column="29">in6_addr<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then>
  <elseif pos:line="22" pos:column="3">else
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="24" pos:column="5">if<condition pos:line="24" pos:column="7">(<expr><call><name pos:line="24" pos:column="8">Curl_inet_pton<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">AF_INET<pos:position pos:line="24" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="32">conn<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">-&gt;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="38">host<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">.<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="43">name<pos:position pos:line="24" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="49">&amp;<pos:position pos:line="24" pos:column="54"/></operator><name pos:line="24" pos:column="50">addr<pos:position pos:line="24" pos:column="54"/></name></expr></argument>)<pos:position pos:line="24" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="56"/></condition><then pos:line="24" pos:column="56"> <block pos:line="24" pos:column="57">{
      <expr_stmt><expr><name pos:line="25" pos:column="7">target<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">GEN_IPADD<pos:position pos:line="25" pos:column="25"/></name></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="26" pos:column="7">addrlen<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <sizeof pos:line="26" pos:column="17">sizeof<argument_list pos:line="26" pos:column="23">(<argument><expr pos:line="26" pos:column="24">struct <name pos:line="26" pos:column="31">in_addr<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if></elseif></if>

  <comment type="block" pos:line="29" pos:column="3">/* get a "list" of alternative names */</comment>
  <expr_stmt><expr><name pos:line="30" pos:column="3">altnames<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">X509_get_ext_d2i<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">server_cert<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">NID_subject_alt_name<pos:position pos:line="30" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="66">NULL<pos:position pos:line="30" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="72">NULL<pos:position pos:line="30" pos:column="76"/></name></expr></argument>)<pos:position pos:line="30" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="78"/></expr_stmt>

  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><name pos:line="32" pos:column="6">altnames<pos:position pos:line="32" pos:column="14"/></name></expr>)<pos:position pos:line="32" pos:column="15"/></condition><then pos:line="32" pos:column="15"> <block pos:line="32" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">int<pos:position pos:line="33" pos:column="8"/></name></type> <name pos:line="33" pos:column="9">numalts<pos:position pos:line="33" pos:column="16"/></name></decl>;<pos:position pos:line="33" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">int<pos:position pos:line="34" pos:column="8"/></name></type> <name pos:line="34" pos:column="9">i<pos:position pos:line="34" pos:column="10"/></name></decl>;<pos:position pos:line="34" pos:column="11"/></decl_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* get amount of alternatives, RFC2459 claims there MUST be at least
       one, but we don't depend on it... */</comment>
    <expr_stmt><expr><name pos:line="38" pos:column="5">numalts<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <call><name pos:line="38" pos:column="15">sk_GENERAL_NAME_num<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">altnames<pos:position pos:line="38" pos:column="43"/></name></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>

    <comment type="block" pos:line="40" pos:column="5">/* loop through all alternatives while none has matched */</comment>
    <for pos:line="41" pos:column="5">for <control pos:line="41" pos:column="9">(<init><expr><name pos:line="41" pos:column="10">i<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator><literal type="number" pos:line="41" pos:column="12">0<pos:position pos:line="41" pos:column="13"/></literal></expr>;<pos:position pos:line="41" pos:column="14"/></init> <condition><expr><operator pos:line="41" pos:column="15">(<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="16">i<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">&lt;<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="18">numalts<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">)<pos:position pos:line="41" pos:column="26"/></operator> <operator pos:line="41" pos:column="27">&amp;&amp;<pos:position pos:line="41" pos:column="37"/></operator> <operator pos:line="41" pos:column="30">!<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="31">matched<pos:position pos:line="41" pos:column="38"/></name></expr>;<pos:position pos:line="41" pos:column="39"/></condition> <incr><expr><name pos:line="41" pos:column="40">i<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">++<pos:position pos:line="41" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="44"/></control> <block pos:line="41" pos:column="45">{
      <comment type="block" pos:line="42" pos:column="7">/* get a handle to alternative name number i */</comment>
      <decl_stmt><decl><type><specifier pos:line="43" pos:column="7">const<pos:position pos:line="43" pos:column="12"/></specifier> <name pos:line="43" pos:column="13">GENERAL_NAME<pos:position pos:line="43" pos:column="25"/></name> <modifier pos:line="43" pos:column="26">*<pos:position pos:line="43" pos:column="27"/></modifier></type><name pos:line="43" pos:column="27">check<pos:position pos:line="43" pos:column="32"/></name> <init pos:line="43" pos:column="33">= <expr><call><name pos:line="43" pos:column="35">sk_GENERAL_NAME_value<pos:position pos:line="43" pos:column="56"/></name><argument_list pos:line="43" pos:column="56">(<argument><expr><name pos:line="43" pos:column="57">altnames<pos:position pos:line="43" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="67">i<pos:position pos:line="43" pos:column="68"/></name></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="70"/></decl_stmt>

      <comment type="block" pos:line="45" pos:column="7">/* only check alternatives of the same type the target is */</comment>
      <if pos:line="46" pos:column="7">if<condition pos:line="46" pos:column="9">(<expr><name><name pos:line="46" pos:column="10">check<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">-&gt;<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="17">type<pos:position pos:line="46" pos:column="21"/></name></name> <operator pos:line="46" pos:column="22">==<pos:position pos:line="46" pos:column="24"/></operator> <name pos:line="46" pos:column="25">target<pos:position pos:line="46" pos:column="31"/></name></expr>)<pos:position pos:line="46" pos:column="32"/></condition><then pos:line="46" pos:column="32"> <block pos:line="46" pos:column="33">{
        <comment type="block" pos:line="47" pos:column="9">/* get data and length */</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">const<pos:position pos:line="48" pos:column="14"/></specifier> <name pos:line="48" pos:column="15">char<pos:position pos:line="48" pos:column="19"/></name> <modifier pos:line="48" pos:column="20">*<pos:position pos:line="48" pos:column="21"/></modifier></type><name pos:line="48" pos:column="21">altptr<pos:position pos:line="48" pos:column="27"/></name> <init pos:line="48" pos:column="28">= <expr><operator pos:line="48" pos:column="30">(<pos:position pos:line="48" pos:column="31"/></operator><name pos:line="48" pos:column="31">char<pos:position pos:line="48" pos:column="35"/></name> <operator pos:line="48" pos:column="36">*<pos:position pos:line="48" pos:column="37"/></operator><operator pos:line="48" pos:column="37">)<pos:position pos:line="48" pos:column="38"/></operator><call><name pos:line="48" pos:column="38">ASN1_STRING_data<pos:position pos:line="48" pos:column="54"/></name><argument_list pos:line="48" pos:column="54">(<argument><expr><name><name pos:line="48" pos:column="55">check<pos:position pos:line="48" pos:column="60"/></name><operator pos:line="48" pos:column="60">-&gt;<pos:position pos:line="48" pos:column="65"/></operator><name pos:line="48" pos:column="62">d<pos:position pos:line="48" pos:column="63"/></name><operator pos:line="48" pos:column="63">.<pos:position pos:line="48" pos:column="64"/></operator><name pos:line="48" pos:column="64">ia5<pos:position pos:line="48" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="48" pos:column="69"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">int<pos:position pos:line="49" pos:column="12"/></name></type> <name pos:line="49" pos:column="13">altlen<pos:position pos:line="49" pos:column="19"/></name></decl>;<pos:position pos:line="49" pos:column="20"/></decl_stmt>

        <switch pos:line="51" pos:column="9">switch<condition pos:line="51" pos:column="15">(<expr><name pos:line="51" pos:column="16">target<pos:position pos:line="51" pos:column="22"/></name></expr>)<pos:position pos:line="51" pos:column="23"/></condition> <block pos:line="51" pos:column="24">{
        <case pos:line="52" pos:column="9">case <expr><name pos:line="52" pos:column="14">GEN_DNS<pos:position pos:line="52" pos:column="21"/></name></expr>:<pos:position pos:line="52" pos:column="22"/></case> <comment type="block" pos:line="52" pos:column="23">/* name/pattern comparison */</comment>
          <comment type="block" pos:line="53" pos:column="11">/* The OpenSSL man page explicitly says: "In general it cannot be
             assumed that the data returned by ASN1_STRING_data() is null
             terminated or does not contain embedded nulls." But also that
             "The actual format of the data will depend on the actual string
             type itself: for example for and IA5String the data will be ASCII"

             Gisle researched the OpenSSL sources:
             "I checked the 0.9.6 and 0.9.8 sources before my patch and
             it always 0-terminates an IA5String."
          */</comment>
          <if pos:line="63" pos:column="11">if <condition pos:line="63" pos:column="14">(<expr><call><name pos:line="63" pos:column="15">cert_hostcheck<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">altptr<pos:position pos:line="63" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="38">conn<pos:position pos:line="63" pos:column="42"/></name><operator pos:line="63" pos:column="42">-&gt;<pos:position pos:line="63" pos:column="47"/></operator><name pos:line="63" pos:column="44">host<pos:position pos:line="63" pos:column="48"/></name><operator pos:line="63" pos:column="48">.<pos:position pos:line="63" pos:column="49"/></operator><name pos:line="63" pos:column="49">name<pos:position pos:line="63" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="55"/></condition><then pos:line="63" pos:column="55">
            <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="13">matched<pos:position pos:line="64" pos:column="20"/></name> <operator pos:line="64" pos:column="21">=<pos:position pos:line="64" pos:column="22"/></operator> <name pos:line="64" pos:column="23">TRUE<pos:position pos:line="64" pos:column="27"/></name></expr>;<pos:position pos:line="64" pos:column="28"/></expr_stmt></block></then></if>
          <break pos:line="65" pos:column="11">break;<pos:position pos:line="65" pos:column="17"/></break>

        <case pos:line="67" pos:column="9">case <expr><name pos:line="67" pos:column="14">GEN_IPADD<pos:position pos:line="67" pos:column="23"/></name></expr>:<pos:position pos:line="67" pos:column="24"/></case> <comment type="block" pos:line="67" pos:column="25">/* IP address comparison */</comment>
          <comment type="block" pos:line="68" pos:column="11">/* compare alternative IP address if the data chunk is the same size
             our server IP address is */</comment>
          <expr_stmt><expr><name pos:line="70" pos:column="11">altlen<pos:position pos:line="70" pos:column="17"/></name> <operator pos:line="70" pos:column="18">=<pos:position pos:line="70" pos:column="19"/></operator> <call><name pos:line="70" pos:column="20">ASN1_STRING_length<pos:position pos:line="70" pos:column="38"/></name><argument_list pos:line="70" pos:column="38">(<argument><expr><name><name pos:line="70" pos:column="39">check<pos:position pos:line="70" pos:column="44"/></name><operator pos:line="70" pos:column="44">-&gt;<pos:position pos:line="70" pos:column="49"/></operator><name pos:line="70" pos:column="46">d<pos:position pos:line="70" pos:column="47"/></name><operator pos:line="70" pos:column="47">.<pos:position pos:line="70" pos:column="48"/></operator><name pos:line="70" pos:column="48">ia5<pos:position pos:line="70" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="53"/></expr_stmt>
          <if pos:line="71" pos:column="11">if<condition pos:line="71" pos:column="13">(<expr><operator pos:line="71" pos:column="14">(<pos:position pos:line="71" pos:column="15"/></operator><name pos:line="71" pos:column="15">altlen<pos:position pos:line="71" pos:column="21"/></name> <operator pos:line="71" pos:column="22">==<pos:position pos:line="71" pos:column="24"/></operator> <name pos:line="71" pos:column="25">addrlen<pos:position pos:line="71" pos:column="32"/></name><operator pos:line="71" pos:column="32">)<pos:position pos:line="71" pos:column="33"/></operator> <operator pos:line="71" pos:column="34">&amp;&amp;<pos:position pos:line="71" pos:column="44"/></operator> <operator pos:line="71" pos:column="37">!<pos:position pos:line="71" pos:column="38"/></operator><call><name pos:line="71" pos:column="38">memcmp<pos:position pos:line="71" pos:column="44"/></name><argument_list pos:line="71" pos:column="44">(<argument><expr><name pos:line="71" pos:column="45">altptr<pos:position pos:line="71" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="53">&amp;<pos:position pos:line="71" pos:column="58"/></operator><name pos:line="71" pos:column="54">addr<pos:position pos:line="71" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="60">altlen<pos:position pos:line="71" pos:column="66"/></name></expr></argument>)<pos:position pos:line="71" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="68"/></condition><then pos:line="71" pos:column="68">
            <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="13">matched<pos:position pos:line="72" pos:column="20"/></name> <operator pos:line="72" pos:column="21">=<pos:position pos:line="72" pos:column="22"/></operator> <name pos:line="72" pos:column="23">TRUE<pos:position pos:line="72" pos:column="27"/></name></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt></block></then></if>
          <break pos:line="73" pos:column="11">break;<pos:position pos:line="73" pos:column="17"/></break>
        }<pos:position pos:line="74" pos:column="10"/></block></switch>
      }<pos:position pos:line="75" pos:column="8"/></block></then></if>
    }<pos:position pos:line="76" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">GENERAL_NAMES_free<pos:position pos:line="77" pos:column="23"/></name><argument_list pos:line="77" pos:column="23">(<argument><expr><name pos:line="77" pos:column="24">altnames<pos:position pos:line="77" pos:column="32"/></name></expr></argument>)<pos:position pos:line="77" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="78" pos:column="4"/></block></then></if>

  <if pos:line="80" pos:column="3">if<condition pos:line="80" pos:column="5">(<expr><name pos:line="80" pos:column="6">matched<pos:position pos:line="80" pos:column="13"/></name></expr>)<pos:position pos:line="80" pos:column="14"/></condition><then pos:line="80" pos:column="14">
    <comment type="block" pos:line="81" pos:column="5">/* an alternative name matched the server hostname */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="5">infof<pos:position pos:line="82" pos:column="10"/></name><argument_list pos:line="82" pos:column="10">(<argument><expr><name pos:line="82" pos:column="11">data<pos:position pos:line="82" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="17">"\t subjectAltName: %s matched\n"<pos:position pos:line="82" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="52">conn<pos:position pos:line="82" pos:column="56"/></name><operator pos:line="82" pos:column="56">-&gt;<pos:position pos:line="82" pos:column="61"/></operator><name pos:line="82" pos:column="58">host<pos:position pos:line="82" pos:column="62"/></name><operator pos:line="82" pos:column="62">.<pos:position pos:line="82" pos:column="63"/></operator><name pos:line="82" pos:column="63">dispname<pos:position pos:line="82" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="73"/></expr_stmt></block></then>
  <else pos:line="83" pos:column="3">else <block pos:line="83" pos:column="8">{
    <comment type="block" pos:line="84" pos:column="5">/* we have to look to the last occurence of a commonName in the
       distinguished one to get the most significant one. */</comment>
    <decl_stmt><decl><type><name pos:line="86" pos:column="5">int<pos:position pos:line="86" pos:column="8"/></name></type> <name pos:line="86" pos:column="9">j<pos:position pos:line="86" pos:column="10"/></name></decl>,<decl><type ref="prev"/><name pos:line="86" pos:column="11">i<pos:position pos:line="86" pos:column="12"/></name><init pos:line="86" pos:column="12">=<expr><operator pos:line="86" pos:column="13">-<pos:position pos:line="86" pos:column="14"/></operator><literal type="number" pos:line="86" pos:column="14">1<pos:position pos:line="86" pos:column="15"/></literal></expr></init></decl> ;<pos:position pos:line="86" pos:column="17"/></decl_stmt>

<comment type="block" pos:line="88" pos:column="1">/* The following is done because of a bug in 0.9.6b */</comment>

    <decl_stmt><decl><type><name pos:line="90" pos:column="5">unsigned<pos:position pos:line="90" pos:column="13"/></name> <name pos:line="90" pos:column="14">char<pos:position pos:line="90" pos:column="18"/></name> <modifier pos:line="90" pos:column="19">*<pos:position pos:line="90" pos:column="20"/></modifier></type><name pos:line="90" pos:column="20">nulstr<pos:position pos:line="90" pos:column="26"/></name> <init pos:line="90" pos:column="27">= <expr><operator pos:line="90" pos:column="29">(<pos:position pos:line="90" pos:column="30"/></operator><name pos:line="90" pos:column="30">unsigned<pos:position pos:line="90" pos:column="38"/></name> <name pos:line="90" pos:column="39">char<pos:position pos:line="90" pos:column="43"/></name> <operator pos:line="90" pos:column="44">*<pos:position pos:line="90" pos:column="45"/></operator><operator pos:line="90" pos:column="45">)<pos:position pos:line="90" pos:column="46"/></operator><literal type="string" pos:line="90" pos:column="46">""<pos:position pos:line="90" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="90" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="91" pos:column="5">unsigned<pos:position pos:line="91" pos:column="13"/></name> <name pos:line="91" pos:column="14">char<pos:position pos:line="91" pos:column="18"/></name> <modifier pos:line="91" pos:column="19">*<pos:position pos:line="91" pos:column="20"/></modifier></type><name pos:line="91" pos:column="20">peer_CN<pos:position pos:line="91" pos:column="27"/></name> <init pos:line="91" pos:column="28">= <expr><name pos:line="91" pos:column="30">nulstr<pos:position pos:line="91" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="91" pos:column="37"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="93" pos:column="5">X509_NAME<pos:position pos:line="93" pos:column="14"/></name> <modifier pos:line="93" pos:column="15">*<pos:position pos:line="93" pos:column="16"/></modifier></type><name pos:line="93" pos:column="16">name<pos:position pos:line="93" pos:column="20"/></name> <init pos:line="93" pos:column="21">= <expr><call><name pos:line="93" pos:column="23">X509_get_subject_name<pos:position pos:line="93" pos:column="44"/></name><argument_list pos:line="93" pos:column="44">(<argument><expr><name pos:line="93" pos:column="45">server_cert<pos:position pos:line="93" pos:column="56"/></name></expr></argument>)<pos:position pos:line="93" pos:column="57"/></argument_list></call></expr></init></decl> ;<pos:position pos:line="93" pos:column="59"/></decl_stmt>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name pos:line="94" pos:column="9">name<pos:position pos:line="94" pos:column="13"/></name></expr>)<pos:position pos:line="94" pos:column="14"/></condition><then pos:line="94" pos:column="14">
      <block type="pseudo"><while pos:line="95" pos:column="7">while <condition pos:line="95" pos:column="13">(<expr><operator pos:line="95" pos:column="14">(<pos:position pos:line="95" pos:column="15"/></operator><name pos:line="95" pos:column="15">j<pos:position pos:line="95" pos:column="16"/></name><operator pos:line="95" pos:column="16">=<pos:position pos:line="95" pos:column="17"/></operator><call><name pos:line="95" pos:column="17">X509_NAME_get_index_by_NID<pos:position pos:line="95" pos:column="43"/></name><argument_list pos:line="95" pos:column="43">(<argument><expr><name pos:line="95" pos:column="44">name<pos:position pos:line="95" pos:column="48"/></name></expr></argument>,<argument><expr><name pos:line="95" pos:column="49">NID_commonName<pos:position pos:line="95" pos:column="63"/></name></expr></argument>,<argument><expr><name pos:line="95" pos:column="64">i<pos:position pos:line="95" pos:column="65"/></name></expr></argument>)<pos:position pos:line="95" pos:column="66"/></argument_list></call><operator pos:line="95" pos:column="66">)<pos:position pos:line="95" pos:column="67"/></operator><operator pos:line="95" pos:column="67">&gt;=<pos:position pos:line="95" pos:column="72"/></operator><literal type="number" pos:line="95" pos:column="69">0<pos:position pos:line="95" pos:column="70"/></literal></expr>)<pos:position pos:line="95" pos:column="71"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="9">i<pos:position pos:line="96" pos:column="10"/></name><operator pos:line="96" pos:column="10">=<pos:position pos:line="96" pos:column="11"/></operator><name pos:line="96" pos:column="11">j<pos:position pos:line="96" pos:column="12"/></name></expr>;<pos:position pos:line="96" pos:column="13"/></expr_stmt></block></while></block></then></if>

    <comment type="block" pos:line="98" pos:column="5">/* we have the name entry and we will now convert this to a string
       that we can use for comparison. Doing this we support BMPstring,
       UTF8 etc. */</comment>

    <if pos:line="102" pos:column="5">if <condition pos:line="102" pos:column="8">(<expr><name pos:line="102" pos:column="9">i<pos:position pos:line="102" pos:column="10"/></name><operator pos:line="102" pos:column="10">&gt;=<pos:position pos:line="102" pos:column="15"/></operator><literal type="number" pos:line="102" pos:column="12">0<pos:position pos:line="102" pos:column="13"/></literal></expr>)<pos:position pos:line="102" pos:column="14"/></condition><then pos:line="102" pos:column="14"> <block pos:line="102" pos:column="15">{
      <decl_stmt><decl><type><name pos:line="103" pos:column="7">ASN1_STRING<pos:position pos:line="103" pos:column="18"/></name> <modifier pos:line="103" pos:column="19">*<pos:position pos:line="103" pos:column="20"/></modifier></type><name pos:line="103" pos:column="20">tmp<pos:position pos:line="103" pos:column="23"/></name> <init pos:line="103" pos:column="24">= <expr><call><name pos:line="103" pos:column="26">X509_NAME_ENTRY_get_data<pos:position pos:line="103" pos:column="50"/></name><argument_list pos:line="103" pos:column="50">(<argument><expr><call><name pos:line="103" pos:column="51">X509_NAME_get_entry<pos:position pos:line="103" pos:column="70"/></name><argument_list pos:line="103" pos:column="70">(<argument><expr><name pos:line="103" pos:column="71">name<pos:position pos:line="103" pos:column="75"/></name></expr></argument>,<argument><expr><name pos:line="103" pos:column="76">i<pos:position pos:line="103" pos:column="77"/></name></expr></argument>)<pos:position pos:line="103" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="103" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="103" pos:column="80"/></decl_stmt>

      <comment type="block" pos:line="105" pos:column="7">/* In OpenSSL 0.9.7d and earlier, ASN1_STRING_to_UTF8 fails if the input
         is already UTF-8 encoded. We check for this case and copy the raw
         string manually to avoid the problem. This code can be made
         conditional in the future when OpenSSL has been fixed. Work-around
         brought by Alexis S. L. Carvalho. */</comment>
      <if pos:line="110" pos:column="7">if <condition pos:line="110" pos:column="10">(<expr><name pos:line="110" pos:column="11">tmp<pos:position pos:line="110" pos:column="14"/></name> <operator pos:line="110" pos:column="15">&amp;&amp;<pos:position pos:line="110" pos:column="25"/></operator> <call><name pos:line="110" pos:column="18">ASN1_STRING_type<pos:position pos:line="110" pos:column="34"/></name><argument_list pos:line="110" pos:column="34">(<argument><expr><name pos:line="110" pos:column="35">tmp<pos:position pos:line="110" pos:column="38"/></name></expr></argument>)<pos:position pos:line="110" pos:column="39"/></argument_list></call> <operator pos:line="110" pos:column="40">==<pos:position pos:line="110" pos:column="42"/></operator> <name pos:line="110" pos:column="43">V_ASN1_UTF8STRING<pos:position pos:line="110" pos:column="60"/></name></expr>)<pos:position pos:line="110" pos:column="61"/></condition><then pos:line="110" pos:column="61"> <block pos:line="110" pos:column="62">{
        <expr_stmt><expr><name pos:line="111" pos:column="9">j<pos:position pos:line="111" pos:column="10"/></name> <operator pos:line="111" pos:column="11">=<pos:position pos:line="111" pos:column="12"/></operator> <call><name pos:line="111" pos:column="13">ASN1_STRING_length<pos:position pos:line="111" pos:column="31"/></name><argument_list pos:line="111" pos:column="31">(<argument><expr><name pos:line="111" pos:column="32">tmp<pos:position pos:line="111" pos:column="35"/></name></expr></argument>)<pos:position pos:line="111" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="37"/></expr_stmt>
        <if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">j<pos:position pos:line="112" pos:column="14"/></name> <operator pos:line="112" pos:column="15">&gt;=<pos:position pos:line="112" pos:column="20"/></operator> <literal type="number" pos:line="112" pos:column="18">0<pos:position pos:line="112" pos:column="19"/></literal></expr>)<pos:position pos:line="112" pos:column="20"/></condition><then pos:line="112" pos:column="20"> <block pos:line="112" pos:column="21">{
          <expr_stmt><expr><name pos:line="113" pos:column="11">peer_CN<pos:position pos:line="113" pos:column="18"/></name> <operator pos:line="113" pos:column="19">=<pos:position pos:line="113" pos:column="20"/></operator> <call><name pos:line="113" pos:column="21">OPENSSL_malloc<pos:position pos:line="113" pos:column="35"/></name><argument_list pos:line="113" pos:column="35">(<argument><expr><name pos:line="113" pos:column="36">j<pos:position pos:line="113" pos:column="37"/></name><operator pos:line="113" pos:column="37">+<pos:position pos:line="113" pos:column="38"/></operator><literal type="number" pos:line="113" pos:column="38">1<pos:position pos:line="113" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="41"/></expr_stmt>
          <if pos:line="114" pos:column="11">if <condition pos:line="114" pos:column="14">(<expr><name pos:line="114" pos:column="15">peer_CN<pos:position pos:line="114" pos:column="22"/></name></expr>)<pos:position pos:line="114" pos:column="23"/></condition><then pos:line="114" pos:column="23"> <block pos:line="114" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">memcpy<pos:position pos:line="115" pos:column="19"/></name><argument_list pos:line="115" pos:column="19">(<argument><expr><name pos:line="115" pos:column="20">peer_CN<pos:position pos:line="115" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="115" pos:column="29">ASN1_STRING_data<pos:position pos:line="115" pos:column="45"/></name><argument_list pos:line="115" pos:column="45">(<argument><expr><name pos:line="115" pos:column="46">tmp<pos:position pos:line="115" pos:column="49"/></name></expr></argument>)<pos:position pos:line="115" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="115" pos:column="52">j<pos:position pos:line="115" pos:column="53"/></name></expr></argument>)<pos:position pos:line="115" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="116" pos:column="13">peer_CN<pos:position pos:line="116" pos:column="20"/></name><index pos:line="116" pos:column="20">[<expr><name pos:line="116" pos:column="21">j<pos:position pos:line="116" pos:column="22"/></name></expr>]<pos:position pos:line="116" pos:column="23"/></index></name> <operator pos:line="116" pos:column="24">=<pos:position pos:line="116" pos:column="25"/></operator> <literal type="char" pos:line="116" pos:column="26">'\0'<pos:position pos:line="116" pos:column="30"/></literal></expr>;<pos:position pos:line="116" pos:column="31"/></expr_stmt>
          }<pos:position pos:line="117" pos:column="12"/></block></then></if>
        }<pos:position pos:line="118" pos:column="10"/></block></then></if>
      }<pos:position pos:line="119" pos:column="8"/></block></then>
      <else pos:line="120" pos:column="7">else <comment type="block" pos:line="120" pos:column="12">/* not a UTF8 name */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="9">j<pos:position pos:line="121" pos:column="10"/></name> <operator pos:line="121" pos:column="11">=<pos:position pos:line="121" pos:column="12"/></operator> <call><name pos:line="121" pos:column="13">ASN1_STRING_to_UTF8<pos:position pos:line="121" pos:column="32"/></name><argument_list pos:line="121" pos:column="32">(<argument><expr><operator pos:line="121" pos:column="33">&amp;<pos:position pos:line="121" pos:column="38"/></operator><name pos:line="121" pos:column="34">peer_CN<pos:position pos:line="121" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="43">tmp<pos:position pos:line="121" pos:column="46"/></name></expr></argument>)<pos:position pos:line="121" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="48"/></expr_stmt></block></else></if>
    }<pos:position pos:line="122" pos:column="6"/></block></then></if>

    <if pos:line="124" pos:column="5">if <condition pos:line="124" pos:column="8">(<expr><name pos:line="124" pos:column="9">peer_CN<pos:position pos:line="124" pos:column="16"/></name> <operator pos:line="124" pos:column="17">==<pos:position pos:line="124" pos:column="19"/></operator> <name pos:line="124" pos:column="20">nulstr<pos:position pos:line="124" pos:column="26"/></name></expr>)<pos:position pos:line="124" pos:column="27"/></condition><then pos:line="124" pos:column="27">
       <block type="pseudo"><expr_stmt><expr><name pos:line="125" pos:column="8">peer_CN<pos:position pos:line="125" pos:column="15"/></name> <operator pos:line="125" pos:column="16">=<pos:position pos:line="125" pos:column="17"/></operator> <name pos:line="125" pos:column="18">NULL<pos:position pos:line="125" pos:column="22"/></name></expr>;<pos:position pos:line="125" pos:column="23"/></expr_stmt></block></then></if>

    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><operator pos:line="127" pos:column="9">!<pos:position pos:line="127" pos:column="10"/></operator><name pos:line="127" pos:column="10">peer_CN<pos:position pos:line="127" pos:column="17"/></name></expr>)<pos:position pos:line="127" pos:column="18"/></condition><then pos:line="127" pos:column="18"> <block pos:line="127" pos:column="19">{
      <if pos:line="128" pos:column="7">if<condition pos:line="128" pos:column="9">(<expr><name><name pos:line="128" pos:column="10">data<pos:position pos:line="128" pos:column="14"/></name><operator pos:line="128" pos:column="14">-&gt;<pos:position pos:line="128" pos:column="19"/></operator><name pos:line="128" pos:column="16">set<pos:position pos:line="128" pos:column="19"/></name><operator pos:line="128" pos:column="19">.<pos:position pos:line="128" pos:column="20"/></operator><name pos:line="128" pos:column="20">ssl<pos:position pos:line="128" pos:column="23"/></name><operator pos:line="128" pos:column="23">.<pos:position pos:line="128" pos:column="24"/></operator><name pos:line="128" pos:column="24">verifyhost<pos:position pos:line="128" pos:column="34"/></name></name> <operator pos:line="128" pos:column="35">&gt;<pos:position pos:line="128" pos:column="39"/></operator> <literal type="number" pos:line="128" pos:column="37">1<pos:position pos:line="128" pos:column="38"/></literal></expr>)<pos:position pos:line="128" pos:column="39"/></condition><then pos:line="128" pos:column="39"> <block pos:line="128" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="129" pos:column="9">failf<pos:position pos:line="129" pos:column="14"/></name><argument_list pos:line="129" pos:column="14">(<argument><expr><name pos:line="129" pos:column="15">data<pos:position pos:line="129" pos:column="19"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="130" pos:column="15">"SSL: unable to obtain common name from peer certificate"<pos:position pos:line="130" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="74"/></expr_stmt>
        <return pos:line="131" pos:column="9">return <expr><name pos:line="131" pos:column="16">CURLE_SSL_PEER_CERTIFICATE<pos:position pos:line="131" pos:column="42"/></name></expr>;<pos:position pos:line="131" pos:column="43"/></return>
      }<pos:position pos:line="132" pos:column="8"/></block></then>
      <else pos:line="133" pos:column="7">else <block pos:line="133" pos:column="12">{
        <comment type="block" pos:line="134" pos:column="9">/* Consider verifyhost == 1 as an "OK" for a missing CN field, but we
           output a note about the situation */</comment>
        <expr_stmt><expr><call><name pos:line="136" pos:column="9">infof<pos:position pos:line="136" pos:column="14"/></name><argument_list pos:line="136" pos:column="14">(<argument><expr><name pos:line="136" pos:column="15">data<pos:position pos:line="136" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="21">"\t common name: WARNING couldn't obtain\n"<pos:position pos:line="136" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="66"/></expr_stmt>
      }<pos:position pos:line="137" pos:column="8"/></block></else></if>
    }<pos:position pos:line="138" pos:column="6"/></block></then>
    <elseif pos:line="139" pos:column="5">else <if pos:line="139" pos:column="10">if<condition pos:line="139" pos:column="12">(<expr><operator pos:line="139" pos:column="13">!<pos:position pos:line="139" pos:column="14"/></operator><call><name pos:line="139" pos:column="14">cert_hostcheck<pos:position pos:line="139" pos:column="28"/></name><argument_list pos:line="139" pos:column="28">(<argument><expr><operator pos:line="139" pos:column="29">(<pos:position pos:line="139" pos:column="30"/></operator><specifier pos:line="139" pos:column="30">const<pos:position pos:line="139" pos:column="35"/></specifier> <name pos:line="139" pos:column="36">char<pos:position pos:line="139" pos:column="40"/></name> <operator pos:line="139" pos:column="41">*<pos:position pos:line="139" pos:column="42"/></operator><operator pos:line="139" pos:column="42">)<pos:position pos:line="139" pos:column="43"/></operator><name pos:line="139" pos:column="43">peer_CN<pos:position pos:line="139" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="52">conn<pos:position pos:line="139" pos:column="56"/></name><operator pos:line="139" pos:column="56">-&gt;<pos:position pos:line="139" pos:column="61"/></operator><name pos:line="139" pos:column="58">host<pos:position pos:line="139" pos:column="62"/></name><operator pos:line="139" pos:column="62">.<pos:position pos:line="139" pos:column="63"/></operator><name pos:line="139" pos:column="63">name<pos:position pos:line="139" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="139" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="139" pos:column="69"/></condition><then pos:line="139" pos:column="69"> <block pos:line="139" pos:column="70">{
      <if pos:line="140" pos:column="7">if<condition pos:line="140" pos:column="9">(<expr><name><name pos:line="140" pos:column="10">data<pos:position pos:line="140" pos:column="14"/></name><operator pos:line="140" pos:column="14">-&gt;<pos:position pos:line="140" pos:column="19"/></operator><name pos:line="140" pos:column="16">set<pos:position pos:line="140" pos:column="19"/></name><operator pos:line="140" pos:column="19">.<pos:position pos:line="140" pos:column="20"/></operator><name pos:line="140" pos:column="20">ssl<pos:position pos:line="140" pos:column="23"/></name><operator pos:line="140" pos:column="23">.<pos:position pos:line="140" pos:column="24"/></operator><name pos:line="140" pos:column="24">verifyhost<pos:position pos:line="140" pos:column="34"/></name></name> <operator pos:line="140" pos:column="35">&gt;<pos:position pos:line="140" pos:column="39"/></operator> <literal type="number" pos:line="140" pos:column="37">1<pos:position pos:line="140" pos:column="38"/></literal></expr>)<pos:position pos:line="140" pos:column="39"/></condition><then pos:line="140" pos:column="39"> <block pos:line="140" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="141" pos:column="9">failf<pos:position pos:line="141" pos:column="14"/></name><argument_list pos:line="141" pos:column="14">(<argument><expr><name pos:line="141" pos:column="15">data<pos:position pos:line="141" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="21">"SSL: certificate subject name '%s' does not match "<pos:position pos:line="141" pos:column="73"/></literal>
              <literal type="string" pos:line="142" pos:column="15">"target host name '%s'"<pos:position pos:line="142" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="142" pos:column="40">peer_CN<pos:position pos:line="142" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="142" pos:column="49">conn<pos:position pos:line="142" pos:column="53"/></name><operator pos:line="142" pos:column="53">-&gt;<pos:position pos:line="142" pos:column="58"/></operator><name pos:line="142" pos:column="55">host<pos:position pos:line="142" pos:column="59"/></name><operator pos:line="142" pos:column="59">.<pos:position pos:line="142" pos:column="60"/></operator><name pos:line="142" pos:column="60">dispname<pos:position pos:line="142" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="142" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name pos:line="143" pos:column="9">res<pos:position pos:line="143" pos:column="12"/></name> <operator pos:line="143" pos:column="13">=<pos:position pos:line="143" pos:column="14"/></operator> <name pos:line="143" pos:column="15">CURLE_SSL_PEER_CERTIFICATE<pos:position pos:line="143" pos:column="41"/></name></expr>;<pos:position pos:line="143" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="144" pos:column="8"/></block></then>
      <else pos:line="145" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="146" pos:column="9">infof<pos:position pos:line="146" pos:column="14"/></name><argument_list pos:line="146" pos:column="14">(<argument><expr><name pos:line="146" pos:column="15">data<pos:position pos:line="146" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="21">"\t common name: %s (does not match '%s')\n"<pos:position pos:line="146" pos:column="65"/></literal></expr></argument>,
              <argument><expr><name pos:line="147" pos:column="15">peer_CN<pos:position pos:line="147" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="24">conn<pos:position pos:line="147" pos:column="28"/></name><operator pos:line="147" pos:column="28">-&gt;<pos:position pos:line="147" pos:column="33"/></operator><name pos:line="147" pos:column="30">host<pos:position pos:line="147" pos:column="34"/></name><operator pos:line="147" pos:column="34">.<pos:position pos:line="147" pos:column="35"/></operator><name pos:line="147" pos:column="35">dispname<pos:position pos:line="147" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="45"/></expr_stmt></block></else></if>
    }<pos:position pos:line="148" pos:column="6"/></block></then></if></elseif>
    <else pos:line="149" pos:column="5">else <block pos:line="149" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="150" pos:column="7">infof<pos:position pos:line="150" pos:column="12"/></name><argument_list pos:line="150" pos:column="12">(<argument><expr><name pos:line="150" pos:column="13">data<pos:position pos:line="150" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="19">"\t common name: %s (matched)\n"<pos:position pos:line="150" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="53">peer_CN<pos:position pos:line="150" pos:column="60"/></name></expr></argument>)<pos:position pos:line="150" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="151" pos:column="6"/></block></else></if>
    <if pos:line="152" pos:column="5">if<condition pos:line="152" pos:column="7">(<expr><name pos:line="152" pos:column="8">peer_CN<pos:position pos:line="152" pos:column="15"/></name></expr>)<pos:position pos:line="152" pos:column="16"/></condition><then pos:line="152" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="153" pos:column="7">OPENSSL_free<pos:position pos:line="153" pos:column="19"/></name><argument_list pos:line="153" pos:column="19">(<argument><expr><name pos:line="153" pos:column="20">peer_CN<pos:position pos:line="153" pos:column="27"/></name></expr></argument>)<pos:position pos:line="153" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="29"/></expr_stmt></block></then></if>
  }<pos:position pos:line="154" pos:column="4"/></block></else></if>
  <return pos:line="155" pos:column="3">return <expr><name pos:line="155" pos:column="10">res<pos:position pos:line="155" pos:column="13"/></name></expr>;<pos:position pos:line="155" pos:column="14"/></return>
}<pos:position pos:line="156" pos:column="2"/></block></function></unit>
