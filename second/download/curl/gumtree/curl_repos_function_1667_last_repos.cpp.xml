<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1667_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ssize_t<pos:position pos:line="1" pos:column="8"/></name></type> <name pos:line="1" pos:column="9">Curl_send_plain<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">connectdata<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conn<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">num<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                        <parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">void<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">mem<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">size_t<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">len<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">CURLcode<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">code<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">sockfd<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name><name pos:line="4" pos:column="26">conn<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">-&gt;<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="32">sock<pos:position pos:line="4" pos:column="36"/></name><index pos:line="4" pos:column="36">[<expr><name pos:line="4" pos:column="37">num<pos:position pos:line="4" pos:column="40"/></name></expr>]<pos:position pos:line="4" pos:column="41"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">bytes_written<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <comment type="block" pos:line="6" pos:column="3">/* WinSock will destroy unread received data if send() is
     failed.
     To avoid lossage of received data, recv() must be
     performed before every send() if any incoming data is
     available. */</comment>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">pre_receive_plain<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">conn<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="27">num<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">MSG_FASTOPEN<pos:position pos:line="13" pos:column="20"/></name></cpp:ifdef> <comment type="block" pos:line="13" pos:column="21">/* Linux */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name><name pos:line="14" pos:column="6">conn<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">bits<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">.<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">tcp_fastopen<pos:position pos:line="14" pos:column="29"/></name></name></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <block pos:line="14" pos:column="31">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">bytes_written<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <call><name pos:line="15" pos:column="21">sendto<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">sockfd<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">mem<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">len<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">MSG_FASTOPEN<pos:position pos:line="15" pos:column="58"/></name></expr></argument>,
                           <argument><expr><name><name pos:line="16" pos:column="28">conn<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">ip_addr<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">-&gt;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="43">ai_addr<pos:position pos:line="16" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="52">conn<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">-&gt;<pos:position pos:line="16" pos:column="61"/></operator><name pos:line="16" pos:column="58">ip_addr<pos:position pos:line="16" pos:column="65"/></name><operator pos:line="16" pos:column="65">-&gt;<pos:position pos:line="16" pos:column="70"/></operator><name pos:line="16" pos:column="67">ai_addrlen<pos:position pos:line="16" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">conn<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">-&gt;<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="11">bits<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">.<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">tcp_fastopen<pos:position pos:line="17" pos:column="28"/></name></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <name pos:line="17" pos:column="31">FALSE<pos:position pos:line="17" pos:column="36"/></name></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then>
  <else pos:line="19" pos:column="3">else
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="5">bytes_written<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">swrite<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">sockfd<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">mem<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">len<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt></block></else></if>

  <expr_stmt><expr><operator pos:line="23" pos:column="3">*<pos:position pos:line="23" pos:column="4"/></operator><name pos:line="23" pos:column="4">code<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <name pos:line="23" pos:column="11">CURLE_OK<pos:position pos:line="23" pos:column="19"/></name></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><operator pos:line="24" pos:column="6">-<pos:position pos:line="24" pos:column="7"/></operator><literal type="number" pos:line="24" pos:column="7">1<pos:position pos:line="24" pos:column="8"/></literal> <operator pos:line="24" pos:column="9">==<pos:position pos:line="24" pos:column="11"/></operator> <name pos:line="24" pos:column="12">bytes_written<pos:position pos:line="24" pos:column="25"/></name></expr>)<pos:position pos:line="24" pos:column="26"/></condition><then pos:line="24" pos:column="26"> <block pos:line="24" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">int<pos:position pos:line="25" pos:column="8"/></name></type> <name pos:line="25" pos:column="9">err<pos:position pos:line="25" pos:column="12"/></name> <init pos:line="25" pos:column="13">= <expr><name pos:line="25" pos:column="15">SOCKERRNO<pos:position pos:line="25" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>

    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(
<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef<pos:position pos:line="28" pos:column="7"/></cpp:directive> <name pos:line="28" pos:column="8">WSAEWOULDBLOCK<pos:position pos:line="28" pos:column="22"/></name></cpp:ifdef>
      <comment type="block" pos:line="29" pos:column="7">/* This is how Windows does it */</comment>
      <expr><operator pos:line="30" pos:column="7">(<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">WSAEWOULDBLOCK<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">==<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">err<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">)<pos:position pos:line="30" pos:column="30"/></operator>
<cpp:else pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">else<pos:position pos:line="31" pos:column="6"/></cpp:directive></cpp:else>
      <comment type="block" pos:line="32" pos:column="7">/* errno may be EWOULDBLOCK or on some systems EAGAIN when it returned
         due to its inability to send off data without blocking. We therefor
         treat both error codes the same here */</comment>
      <operator pos:line="35" pos:column="7">(<pos:position pos:line="35" pos:column="8"/></operator><name pos:line="35" pos:column="8">EWOULDBLOCK<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">==<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">err<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">)<pos:position pos:line="35" pos:column="27"/></operator> <operator pos:line="35" pos:column="28">||<pos:position pos:line="35" pos:column="30"/></operator> <operator pos:line="35" pos:column="31">(<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="32">EAGAIN<pos:position pos:line="35" pos:column="38"/></name> <operator pos:line="35" pos:column="39">==<pos:position pos:line="35" pos:column="41"/></operator> <name pos:line="35" pos:column="42">err<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">)<pos:position pos:line="35" pos:column="46"/></operator> <operator pos:line="35" pos:column="47">||<pos:position pos:line="35" pos:column="49"/></operator> <operator pos:line="35" pos:column="50">(<pos:position pos:line="35" pos:column="51"/></operator><name pos:line="35" pos:column="51">EINTR<pos:position pos:line="35" pos:column="56"/></name> <operator pos:line="35" pos:column="57">==<pos:position pos:line="35" pos:column="59"/></operator> <name pos:line="35" pos:column="60">err<pos:position pos:line="35" pos:column="63"/></name><operator pos:line="35" pos:column="63">)<pos:position pos:line="35" pos:column="64"/></operator> <operator pos:line="35" pos:column="65">||<pos:position pos:line="35" pos:column="67"/></operator>
      <operator pos:line="36" pos:column="7">(<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">EINPROGRESS<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">==<pos:position pos:line="36" pos:column="22"/></operator> <name pos:line="36" pos:column="23">err<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">)<pos:position pos:line="36" pos:column="27"/></operator></expr>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif>
      )<pos:position pos:line="38" pos:column="8"/></condition><then pos:line="38" pos:column="8"> <block pos:line="38" pos:column="9">{
      <comment type="block" pos:line="39" pos:column="7">/* this is just a case of EWOULDBLOCK */</comment>
      <expr_stmt><expr><name pos:line="40" pos:column="7">bytes_written<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <literal type="number" pos:line="40" pos:column="23">0<pos:position pos:line="40" pos:column="24"/></literal></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="41" pos:column="7">*<pos:position pos:line="41" pos:column="8"/></operator><name pos:line="41" pos:column="8">code<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <name pos:line="41" pos:column="15">CURLE_AGAIN<pos:position pos:line="41" pos:column="26"/></name></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
    <else pos:line="43" pos:column="5">else <block pos:line="43" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">failf<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><name><name pos:line="44" pos:column="13">conn<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">-&gt;<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="19">data<pos:position pos:line="44" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="25">"Send failure: %s"<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="45" pos:column="13">Curl_strerror<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">conn<pos:position pos:line="45" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="33">err<pos:position pos:line="45" pos:column="36"/></name></expr></argument>)<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="46" pos:column="7">conn<pos:position pos:line="46" pos:column="11"/></name><operator pos:line="46" pos:column="11">-&gt;<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="13">data<pos:position pos:line="46" pos:column="17"/></name><operator pos:line="46" pos:column="17">-&gt;<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="19">state<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">.<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="25">os_errno<pos:position pos:line="46" pos:column="33"/></name></name> <operator pos:line="46" pos:column="34">=<pos:position pos:line="46" pos:column="35"/></operator> <name pos:line="46" pos:column="36">err<pos:position pos:line="46" pos:column="39"/></name></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="47" pos:column="7">*<pos:position pos:line="47" pos:column="8"/></operator><name pos:line="47" pos:column="8">code<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">=<pos:position pos:line="47" pos:column="14"/></operator> <name pos:line="47" pos:column="15">CURLE_SEND_ERROR<pos:position pos:line="47" pos:column="31"/></name></expr>;<pos:position pos:line="47" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>
  }<pos:position pos:line="49" pos:column="4"/></block></then></if>
  <return pos:line="50" pos:column="3">return <expr><name pos:line="50" pos:column="10">bytes_written<pos:position pos:line="50" pos:column="23"/></name></expr>;<pos:position pos:line="50" pos:column="24"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
