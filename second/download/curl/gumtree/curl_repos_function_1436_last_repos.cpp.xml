<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1436_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_http_error<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">Curl_easy<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">data<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">SingleRequest<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">k<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><operator pos:line="3" pos:column="29">&amp;<pos:position pos:line="3" pos:column="34"/></operator><name><name pos:line="3" pos:column="30">data<pos:position pos:line="3" pos:column="34"/></name><operator pos:line="3" pos:column="34">-&gt;<pos:position pos:line="3" pos:column="39"/></operator><name pos:line="3" pos:column="36">req<pos:position pos:line="3" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">beg<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name><name pos:line="4" pos:column="15">k<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">-&gt;<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="18">p<pos:position pos:line="4" pos:column="19"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* make sure that data-&gt;req.p points to the HTTP status line */</comment>
  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><operator pos:line="7" pos:column="6">!<pos:position pos:line="7" pos:column="7"/></operator><call><name pos:line="7" pos:column="7">strncmp<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">beg<pos:position pos:line="7" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="20">"HTTP"<pos:position pos:line="7" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="28">4<pos:position pos:line="7" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="31"/></condition><then pos:line="7" pos:column="31"> <block pos:line="7" pos:column="32">{

    <comment type="block" pos:line="9" pos:column="5">/* skip to HTTP status code */</comment>
    <expr_stmt><expr><name pos:line="10" pos:column="5">beg<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <call><name pos:line="10" pos:column="11">strchr<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">beg<pos:position pos:line="10" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="23">' '<pos:position pos:line="10" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
    <if pos:line="11" pos:column="5">if<condition pos:line="11" pos:column="7">(<expr><name pos:line="11" pos:column="8">beg<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">&amp;&amp;<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="15">*<pos:position pos:line="11" pos:column="16"/></operator><operator pos:line="11" pos:column="16">++<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">beg<pos:position pos:line="11" pos:column="21"/></name></expr>)<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22"> <block pos:line="11" pos:column="23">{

      <comment type="block" pos:line="13" pos:column="7">/* find trailing CR */</comment>
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">char<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">end_char<pos:position pos:line="14" pos:column="20"/></name> <init pos:line="14" pos:column="21">= <expr><literal type="char" pos:line="14" pos:column="23">'\r'<pos:position pos:line="14" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">char<pos:position pos:line="15" pos:column="11"/></name> <modifier pos:line="15" pos:column="12">*<pos:position pos:line="15" pos:column="13"/></modifier></type><name pos:line="15" pos:column="13">end<pos:position pos:line="15" pos:column="16"/></name> <init pos:line="15" pos:column="17">= <expr><call><name pos:line="15" pos:column="19">strchr<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">beg<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">end_char<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="41"/></decl_stmt>
      <if pos:line="16" pos:column="7">if<condition pos:line="16" pos:column="9">(<expr><operator pos:line="16" pos:column="10">!<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">end<pos:position pos:line="16" pos:column="14"/></name></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15"> <block pos:line="16" pos:column="16">{
        <comment type="block" pos:line="17" pos:column="9">/* try to find LF (workaround for non-compliant HTTP servers) */</comment>
        <expr_stmt><expr><name pos:line="18" pos:column="9">end_char<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <literal type="char" pos:line="18" pos:column="20">'\n'<pos:position pos:line="18" pos:column="24"/></literal></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="19" pos:column="9">end<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">strchr<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">beg<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="27">end_char<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="20" pos:column="8"/></block></then></if>

      <if pos:line="22" pos:column="7">if<condition pos:line="22" pos:column="9">(<expr><name pos:line="22" pos:column="10">end<pos:position pos:line="22" pos:column="13"/></name></expr>)<pos:position pos:line="22" pos:column="14"/></condition><then pos:line="22" pos:column="14"> <block pos:line="22" pos:column="15">{
        <comment type="block" pos:line="23" pos:column="9">/* temporarily replace CR or LF by NUL and print the error message */</comment>
        <expr_stmt><expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">end<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <literal type="char" pos:line="24" pos:column="16">'\0'<pos:position pos:line="24" pos:column="20"/></literal></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">failf<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">data<pos:position pos:line="25" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="21">"The requested URL returned error: %s"<pos:position pos:line="25" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="61">beg<pos:position pos:line="25" pos:column="64"/></name></expr></argument>)<pos:position pos:line="25" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="66"/></expr_stmt>

        <comment type="block" pos:line="27" pos:column="9">/* restore the previously replaced CR or LF */</comment>
        <expr_stmt><expr><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">end<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">end_char<pos:position pos:line="28" pos:column="24"/></name></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
        <return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return>
      }<pos:position pos:line="30" pos:column="8"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="34" pos:column="3">/* fall-back to printing the HTTP status code only */</comment>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">failf<pos:position pos:line="35" pos:column="8"/></name><argument_list pos:line="35" pos:column="8">(<argument><expr><name pos:line="35" pos:column="9">data<pos:position pos:line="35" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="15">"The requested URL returned error: %d"<pos:position pos:line="35" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="55">k<pos:position pos:line="35" pos:column="56"/></name><operator pos:line="35" pos:column="56">-&gt;<pos:position pos:line="35" pos:column="61"/></operator><name pos:line="35" pos:column="58">httpcode<pos:position pos:line="35" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
