<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_461_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ssize_t<pos:position pos:line="1" pos:column="8"/></name></type> <name pos:line="1" pos:column="9">Curl_qsossl_send<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type> <name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">sockindex<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">void<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type> <name pos:line="1" pos:column="75">mem<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">size_t<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">len<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>

<block pos:line="4" pos:column="1">{
  <comment type="block" pos:line="5" pos:column="3">/* SSL_Write() is said to return 'int' while write() and send() returns
     'size_t' */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">rc<pos:position pos:line="7" pos:column="9"/></name></decl>;<pos:position pos:line="7" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">rc<pos:position pos:line="9" pos:column="5"/></name> <operator pos:line="9" pos:column="6">=<pos:position pos:line="9" pos:column="7"/></operator> <call><name pos:line="9" pos:column="8">SSL_Write<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name><name pos:line="9" pos:column="18">conn<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">-&gt;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="24">ssl<pos:position pos:line="9" pos:column="27"/></name><index pos:line="9" pos:column="27">[<expr><name pos:line="9" pos:column="28">sockindex<pos:position pos:line="9" pos:column="37"/></name></expr>]<pos:position pos:line="9" pos:column="38"/></index></name><operator pos:line="9" pos:column="38">.<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="39">handle<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="47">mem<pos:position pos:line="9" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="52">(<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="53">int<pos:position pos:line="9" pos:column="56"/></name><operator pos:line="9" pos:column="56">)<pos:position pos:line="9" pos:column="57"/></operator> <name pos:line="9" pos:column="58">len<pos:position pos:line="9" pos:column="61"/></name></expr></argument>)<pos:position pos:line="9" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="63"/></expr_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">rc<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">&lt;<pos:position pos:line="11" pos:column="13"/></operator> <literal type="number" pos:line="11" pos:column="11">0<pos:position pos:line="11" pos:column="12"/></literal></expr>)<pos:position pos:line="11" pos:column="13"/></condition><then pos:line="11" pos:column="13"> <block pos:line="11" pos:column="14">{
    <switch pos:line="12" pos:column="5">switch<condition pos:line="12" pos:column="11">(<expr><name pos:line="12" pos:column="12">rc<pos:position pos:line="12" pos:column="14"/></name></expr>)<pos:position pos:line="12" pos:column="15"/></condition> <block pos:line="12" pos:column="16">{

    <case pos:line="14" pos:column="5">case <expr><name pos:line="14" pos:column="10">SSL_ERROR_BAD_STATE<pos:position pos:line="14" pos:column="29"/></name></expr>:<pos:position pos:line="14" pos:column="30"/></case>
      <comment type="block" pos:line="15" pos:column="7">/* The operation did not complete; the same SSL I/O function
         should be called again later. This is basicly an EWOULDBLOCK
         equivalent. */</comment>
      <return pos:line="18" pos:column="7">return <expr><literal type="number" pos:line="18" pos:column="14">0<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></return>

    <case pos:line="20" pos:column="5">case <expr><name pos:line="20" pos:column="10">SSL_ERROR_IO<pos:position pos:line="20" pos:column="22"/></name></expr>:<pos:position pos:line="20" pos:column="23"/></case>
      <switch pos:line="21" pos:column="7">switch <condition pos:line="21" pos:column="14">(<expr><name pos:line="21" pos:column="15">errno<pos:position pos:line="21" pos:column="20"/></name></expr>)<pos:position pos:line="21" pos:column="21"/></condition> <block pos:line="21" pos:column="22">{
      <case pos:line="22" pos:column="7">case <expr><name pos:line="22" pos:column="12">EWOULDBLOCK<pos:position pos:line="22" pos:column="23"/></name></expr>:<pos:position pos:line="22" pos:column="24"/></case>
      <case pos:line="23" pos:column="7">case <expr><name pos:line="23" pos:column="12">EINTR<pos:position pos:line="23" pos:column="17"/></name></expr>:<pos:position pos:line="23" pos:column="18"/></case>
        <return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></switch>

      <expr_stmt><expr><call><name pos:line="27" pos:column="7">failf<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name><name pos:line="27" pos:column="13">conn<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">data<pos:position pos:line="27" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="25">"SSL_Write() I/O error: %s"<pos:position pos:line="27" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="54">strerror<pos:position pos:line="27" pos:column="62"/></name><argument_list pos:line="27" pos:column="62">(<argument><expr><name pos:line="27" pos:column="63">errno<pos:position pos:line="27" pos:column="68"/></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="71"/></expr_stmt>
      <return pos:line="28" pos:column="7">return <expr><operator pos:line="28" pos:column="14">-<pos:position pos:line="28" pos:column="15"/></operator><literal type="number" pos:line="28" pos:column="15">1<pos:position pos:line="28" pos:column="16"/></literal></expr>;<pos:position pos:line="28" pos:column="17"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></switch>

    <comment type="block" pos:line="31" pos:column="5">/* An SSL error. */</comment>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">failf<pos:position pos:line="32" pos:column="10"/></name><argument_list pos:line="32" pos:column="10">(<argument><expr><name><name pos:line="32" pos:column="11">conn<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">-&gt;<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="17">data<pos:position pos:line="32" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"SSL_Write() returned error %d"<pos:position pos:line="32" pos:column="54"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="33" pos:column="11">SSL_Strerror<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">rc<pos:position pos:line="33" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="28">NULL<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><operator pos:line="34" pos:column="12">-<pos:position pos:line="34" pos:column="13"/></operator><literal type="number" pos:line="34" pos:column="13">1<pos:position pos:line="34" pos:column="14"/></literal></expr>;<pos:position pos:line="34" pos:column="15"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <return pos:line="37" pos:column="3">return <expr><operator pos:line="37" pos:column="10">(<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">ssize_t<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">)<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="20">rc<pos:position pos:line="37" pos:column="22"/></name></expr>;<pos:position pos:line="37" pos:column="23"/></return> <comment type="block" pos:line="37" pos:column="24">/* number of bytes */</comment>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
