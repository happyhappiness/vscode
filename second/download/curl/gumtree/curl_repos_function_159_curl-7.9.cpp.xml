<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_159_curl-7.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ConnectPlease<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">SessionHandle<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">data<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                              <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">connectdata<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">conn<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><call><name pos:line="4" pos:column="5">defined<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">WIN32<pos:position pos:line="4" pos:column="18"/></name></expr></argument>)<pos:position pos:line="4" pos:column="19"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">long<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">nonblock<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><literal type="number" pos:line="5" pos:column="28">0<pos:position pos:line="5" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">fd_set<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">connectfd<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">timeval<pos:position pos:line="7" pos:column="17"/></name></name></type> <name pos:line="7" pos:column="18">conntimeout<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifndef<pos:position pos:line="10" pos:column="8"/></cpp:directive> <name pos:line="10" pos:column="9">ENABLE_IPV6<pos:position pos:line="10" pos:column="20"/></name></cpp:ifndef>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">conn<pos:position pos:line="11" pos:column="7"/></name><operator pos:line="11" pos:column="7">-&gt;<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="9">firstsocket<pos:position pos:line="11" pos:column="20"/></name></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <call><name pos:line="11" pos:column="23">socket<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">AF_INET<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="39">SOCK_STREAM<pos:position pos:line="11" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="52">0<pos:position pos:line="11" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">memset<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><operator pos:line="13" pos:column="10">(<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">char<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></operator><operator pos:line="13" pos:column="17">)<pos:position pos:line="13" pos:column="18"/></operator> <operator pos:line="13" pos:column="19">&amp;<pos:position pos:line="13" pos:column="24"/></operator><name><name pos:line="13" pos:column="20">conn<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">serv_addr<pos:position pos:line="13" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="37">'\0'<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="43">sizeof<argument_list pos:line="13" pos:column="49">(<argument><expr><name><name pos:line="13" pos:column="50">conn<pos:position pos:line="13" pos:column="54"/></name><operator pos:line="13" pos:column="54">-&gt;<pos:position pos:line="13" pos:column="59"/></operator><name pos:line="13" pos:column="56">serv_addr<pos:position pos:line="13" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="68"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memcpy<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><operator pos:line="14" pos:column="10">(<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">char<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></operator><operator pos:line="14" pos:column="17">)<pos:position pos:line="14" pos:column="18"/></operator><operator pos:line="14" pos:column="18">&amp;<pos:position pos:line="14" pos:column="23"/></operator><operator pos:line="14" pos:column="19">(<pos:position pos:line="14" pos:column="20"/></operator><name><name pos:line="14" pos:column="20">conn<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">serv_addr<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">.<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="36">sin_addr<pos:position pos:line="14" pos:column="44"/></name></name><operator pos:line="14" pos:column="44">)<pos:position pos:line="14" pos:column="45"/></operator></expr></argument>,
         <argument><expr><name><name pos:line="15" pos:column="10">conn<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">hp<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">h_addr<pos:position pos:line="15" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="28">conn<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">-&gt;<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="34">hp<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">h_length<pos:position pos:line="15" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">conn<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">-&gt;<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="9">serv_addr<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">sin_family<pos:position pos:line="16" pos:column="29"/></name></name> <operator pos:line="16" pos:column="30">=<pos:position pos:line="16" pos:column="31"/></operator> <name><name pos:line="16" pos:column="32">conn<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">hp<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">-&gt;<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="42">h_addrtype<pos:position pos:line="16" pos:column="52"/></name></name></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">conn<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">-&gt;<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="9">serv_addr<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">sin_port<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">=<pos:position pos:line="17" pos:column="29"/></operator> <call><name pos:line="17" pos:column="30">htons<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name><name pos:line="17" pos:column="36">conn<pos:position pos:line="17" pos:column="40"/></name><operator pos:line="17" pos:column="40">-&gt;<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="42">port<pos:position pos:line="17" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
<cpp:else pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">else<pos:position pos:line="18" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="19" pos:column="3">/* IPv6-style */</comment>
  <decl_stmt><decl><type><name><name pos:line="20" pos:column="3">struct<pos:position pos:line="20" pos:column="9"/></name> <name pos:line="20" pos:column="10">addrinfo<pos:position pos:line="20" pos:column="18"/></name></name> <modifier pos:line="20" pos:column="19">*<pos:position pos:line="20" pos:column="20"/></modifier></type><name pos:line="20" pos:column="20">ai<pos:position pos:line="20" pos:column="22"/></name></decl>;<pos:position pos:line="20" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">if<pos:position pos:line="23" pos:column="4"/></cpp:directive> <expr><operator pos:line="23" pos:column="5">!<pos:position pos:line="23" pos:column="6"/></operator><call><name pos:line="23" pos:column="6">defined<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><name pos:line="23" pos:column="14">WIN32<pos:position pos:line="23" pos:column="19"/></name></expr></argument>)<pos:position pos:line="23" pos:column="20"/></argument_list></call><operator pos:line="23" pos:column="20">||<pos:position pos:line="23" pos:column="22"/></operator><call><name pos:line="23" pos:column="22">defined<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">__CYGWIN32__<pos:position pos:line="23" pos:column="42"/></name></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="24" pos:column="3">/* We don't generally like checking for OS-versions, we should make this
     HAVE_XXXX based, although at the moment I don't have a decent test for
     this! */</comment>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef<pos:position pos:line="28" pos:column="7"/></cpp:directive> <name pos:line="28" pos:column="8">HAVE_INET_NTOA<pos:position pos:line="28" pos:column="22"/></name></cpp:ifdef>

<cpp:ifndef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifndef<pos:position pos:line="30" pos:column="8"/></cpp:directive> <name pos:line="30" pos:column="9">INADDR_NONE<pos:position pos:line="30" pos:column="20"/></name></cpp:ifndef>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define<pos:position pos:line="31" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">INADDR_NONE<pos:position pos:line="31" pos:column="20"/></name></cpp:macro> <cpp:value pos:line="31" pos:column="21">(unsigned long) ~0<pos:position pos:line="31" pos:column="39"/></cpp:value></cpp:define>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifndef<pos:position pos:line="34" pos:column="8"/></cpp:directive> <name pos:line="34" pos:column="9">ENABLE_IPV6<pos:position pos:line="34" pos:column="20"/></name></cpp:ifndef>
  <comment type="block" format="doxygen" pos:line="35" pos:column="3">/*************************************************************
   * Select device to bind socket to
   *************************************************************/</comment>
  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name><name pos:line="38" pos:column="7">data<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">-&gt;<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="13">set<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">.<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">device<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">&amp;&amp;<pos:position pos:line="38" pos:column="34"/></operator> <operator pos:line="38" pos:column="27">(<pos:position pos:line="38" pos:column="28"/></operator><call><name pos:line="38" pos:column="28">strlen<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name><name pos:line="38" pos:column="35">data<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">-&gt;<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="41">set<pos:position pos:line="38" pos:column="44"/></name><operator pos:line="38" pos:column="44">.<pos:position pos:line="38" pos:column="45"/></operator><name pos:line="38" pos:column="45">device<pos:position pos:line="38" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></call><operator pos:line="38" pos:column="52">&lt;<pos:position pos:line="38" pos:column="56"/></operator><literal type="number" pos:line="38" pos:column="53">255<pos:position pos:line="38" pos:column="56"/></literal><operator pos:line="38" pos:column="56">)<pos:position pos:line="38" pos:column="57"/></operator></expr>)<pos:position pos:line="38" pos:column="58"/></condition><then pos:line="38" pos:column="58"> <block pos:line="38" pos:column="59">{
    <decl_stmt><decl><type><name><name pos:line="39" pos:column="5">struct<pos:position pos:line="39" pos:column="11"/></name> <name pos:line="39" pos:column="12">sockaddr_in<pos:position pos:line="39" pos:column="23"/></name></name></type> <name pos:line="39" pos:column="24">sa<pos:position pos:line="39" pos:column="26"/></name></decl>;<pos:position pos:line="39" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="40" pos:column="5">struct<pos:position pos:line="40" pos:column="11"/></name> <name pos:line="40" pos:column="12">hostent<pos:position pos:line="40" pos:column="19"/></name></name> <modifier pos:line="40" pos:column="20">*<pos:position pos:line="40" pos:column="21"/></modifier></type><name pos:line="40" pos:column="21">h<pos:position pos:line="40" pos:column="22"/></name><init pos:line="40" pos:column="22">=<expr><name pos:line="40" pos:column="23">NULL<pos:position pos:line="40" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">char<pos:position pos:line="41" pos:column="9"/></name> <modifier pos:line="41" pos:column="10">*<pos:position pos:line="41" pos:column="11"/></modifier></type><name pos:line="41" pos:column="11">hostdataptr<pos:position pos:line="41" pos:column="22"/></name><init pos:line="41" pos:column="22">=<expr><name pos:line="41" pos:column="23">NULL<pos:position pos:line="41" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">size_t<pos:position pos:line="42" pos:column="11"/></name></type> <name pos:line="42" pos:column="12">size<pos:position pos:line="42" pos:column="16"/></name></decl>;<pos:position pos:line="42" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">char<pos:position pos:line="43" pos:column="9"/></name></type> <name><name pos:line="43" pos:column="10">myhost<pos:position pos:line="43" pos:column="16"/></name><index pos:line="43" pos:column="16">[<expr><literal type="number" pos:line="43" pos:column="17">256<pos:position pos:line="43" pos:column="20"/></literal></expr>]<pos:position pos:line="43" pos:column="21"/></index></name> <init pos:line="43" pos:column="22">= <expr><literal type="string" pos:line="43" pos:column="24">""<pos:position pos:line="43" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="43" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">unsigned<pos:position pos:line="44" pos:column="13"/></name> <name pos:line="44" pos:column="14">long<pos:position pos:line="44" pos:column="18"/></name></type> <name pos:line="44" pos:column="19">in<pos:position pos:line="44" pos:column="21"/></name></decl>;<pos:position pos:line="44" pos:column="22"/></decl_stmt>

    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><call><name pos:line="46" pos:column="8">Curl_if2ip<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name><name pos:line="46" pos:column="19">data<pos:position pos:line="46" pos:column="23"/></name><operator pos:line="46" pos:column="23">-&gt;<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="25">set<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">.<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="29">device<pos:position pos:line="46" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="37">myhost<pos:position pos:line="46" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="45">sizeof<argument_list pos:line="46" pos:column="51">(<argument><expr><name pos:line="46" pos:column="52">myhost<pos:position pos:line="46" pos:column="58"/></name></expr></argument>)<pos:position pos:line="46" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="61"/></condition><then pos:line="46" pos:column="61"> <block pos:line="46" pos:column="62">{
      <expr_stmt><expr><name pos:line="47" pos:column="7">h<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <call><name pos:line="47" pos:column="11">Curl_gethost<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><name pos:line="47" pos:column="24">data<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="30">myhost<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="38">&amp;<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="39">hostdataptr<pos:position pos:line="47" pos:column="50"/></name></expr></argument>)<pos:position pos:line="47" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then>
    <else pos:line="49" pos:column="5">else <block pos:line="49" pos:column="10">{
      <if pos:line="50" pos:column="7">if<condition pos:line="50" pos:column="9">(<expr><call><name pos:line="50" pos:column="10">strlen<pos:position pos:line="50" pos:column="16"/></name><argument_list pos:line="50" pos:column="16">(<argument><expr><name><name pos:line="50" pos:column="17">data<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">-&gt;<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="23">set<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">.<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="27">device<pos:position pos:line="50" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call><operator pos:line="50" pos:column="34">&gt;<pos:position pos:line="50" pos:column="38"/></operator><literal type="number" pos:line="50" pos:column="35">1<pos:position pos:line="50" pos:column="36"/></literal></expr>)<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37"> <block pos:line="50" pos:column="38">{
        <expr_stmt><expr><name pos:line="51" pos:column="9">h<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <call><name pos:line="51" pos:column="13">Curl_gethost<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">data<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="32">data<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">-&gt;<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="38">set<pos:position pos:line="51" pos:column="41"/></name><operator pos:line="51" pos:column="41">.<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="42">device<pos:position pos:line="51" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="50">&amp;<pos:position pos:line="51" pos:column="55"/></operator><name pos:line="51" pos:column="51">hostdataptr<pos:position pos:line="51" pos:column="62"/></name></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="64"/></expr_stmt>
      }<pos:position pos:line="52" pos:column="8"/></block></then></if>
      <if pos:line="53" pos:column="7">if<condition pos:line="53" pos:column="9">(<expr><name pos:line="53" pos:column="10">h<pos:position pos:line="53" pos:column="11"/></name></expr>)<pos:position pos:line="53" pos:column="12"/></condition><then pos:line="53" pos:column="12"> <block pos:line="53" pos:column="13">{
        <comment type="block" pos:line="54" pos:column="9">/* we know data-&gt;set.device is shorter than the myhost array */</comment>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">strcpy<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><name pos:line="55" pos:column="16">myhost<pos:position pos:line="55" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="24">data<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">-&gt;<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="30">set<pos:position pos:line="55" pos:column="33"/></name><operator pos:line="55" pos:column="33">.<pos:position pos:line="55" pos:column="34"/></operator><name pos:line="55" pos:column="34">device<pos:position pos:line="55" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="56" pos:column="8"/></block></then></if>
    }<pos:position pos:line="57" pos:column="6"/></block></else></if>

    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">(<expr><operator pos:line="59" pos:column="8">!<pos:position pos:line="59" pos:column="9"/></operator> <operator pos:line="59" pos:column="10">*<pos:position pos:line="59" pos:column="11"/></operator><name pos:line="59" pos:column="11">myhost<pos:position pos:line="59" pos:column="17"/></name></expr>)<pos:position pos:line="59" pos:column="18"/></condition><then pos:line="59" pos:column="18"> <block pos:line="59" pos:column="19">{
      <comment type="block" pos:line="60" pos:column="7">/* need to fix this
         h=Curl_gethost(data,
         getmyhost(*myhost,sizeof(myhost)),
         hostent_buf,
         sizeof(hostent_buf));
      */</comment>
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">printf<pos:position pos:line="66" pos:column="13"/></name><argument_list pos:line="66" pos:column="13">(<argument><expr><literal type="string" pos:line="66" pos:column="14">"in here\n"<pos:position pos:line="66" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">infof<pos:position pos:line="69" pos:column="10"/></name><argument_list pos:line="69" pos:column="10">(<argument><expr><name pos:line="69" pos:column="11">data<pos:position pos:line="69" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="17">"We connect from %s\n"<pos:position pos:line="69" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="41">myhost<pos:position pos:line="69" pos:column="47"/></name></expr></argument>)<pos:position pos:line="69" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="49"/></expr_stmt>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">( <expr><operator pos:line="71" pos:column="10">(<pos:position pos:line="71" pos:column="11"/></operator><name pos:line="71" pos:column="11">in<pos:position pos:line="71" pos:column="13"/></name><operator pos:line="71" pos:column="13">=<pos:position pos:line="71" pos:column="14"/></operator><call><name pos:line="71" pos:column="14">inet_addr<pos:position pos:line="71" pos:column="23"/></name><argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">myhost<pos:position pos:line="71" pos:column="30"/></name></expr></argument>)<pos:position pos:line="71" pos:column="31"/></argument_list></call><operator pos:line="71" pos:column="31">)<pos:position pos:line="71" pos:column="32"/></operator> <operator pos:line="71" pos:column="33">!=<pos:position pos:line="71" pos:column="35"/></operator> <name pos:line="71" pos:column="36">INADDR_NONE<pos:position pos:line="71" pos:column="47"/></name></expr> )<pos:position pos:line="71" pos:column="49"/></condition><then pos:line="71" pos:column="49"> <block pos:line="71" pos:column="50">{

      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">( <expr><name pos:line="73" pos:column="12">h<pos:position pos:line="73" pos:column="13"/></name></expr> )<pos:position pos:line="73" pos:column="15"/></condition><then pos:line="73" pos:column="15"> <block pos:line="73" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">memset<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><operator pos:line="74" pos:column="16">(<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="17">char<pos:position pos:line="74" pos:column="21"/></name> <operator pos:line="74" pos:column="22">*<pos:position pos:line="74" pos:column="23"/></operator><operator pos:line="74" pos:column="23">)<pos:position pos:line="74" pos:column="24"/></operator><operator pos:line="74" pos:column="24">&amp;<pos:position pos:line="74" pos:column="29"/></operator><name pos:line="74" pos:column="25">sa<pos:position pos:line="74" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="29">0<pos:position pos:line="74" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="32">sizeof<argument_list pos:line="74" pos:column="38">(<argument><expr><name pos:line="74" pos:column="39">sa<pos:position pos:line="74" pos:column="41"/></name></expr></argument>)<pos:position pos:line="74" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">memcpy<pos:position pos:line="75" pos:column="15"/></name><argument_list pos:line="75" pos:column="15">(<argument><expr><operator pos:line="75" pos:column="16">(<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="17">char<pos:position pos:line="75" pos:column="21"/></name> <operator pos:line="75" pos:column="22">*<pos:position pos:line="75" pos:column="23"/></operator><operator pos:line="75" pos:column="23">)<pos:position pos:line="75" pos:column="24"/></operator><operator pos:line="75" pos:column="24">&amp;<pos:position pos:line="75" pos:column="29"/></operator><name><name pos:line="75" pos:column="25">sa<pos:position pos:line="75" pos:column="27"/></name><operator pos:line="75" pos:column="27">.<pos:position pos:line="75" pos:column="28"/></operator><name pos:line="75" pos:column="28">sin_addr<pos:position pos:line="75" pos:column="36"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="76" pos:column="16">h<pos:position pos:line="76" pos:column="17"/></name><operator pos:line="76" pos:column="17">-&gt;<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="19">h_addr<pos:position pos:line="76" pos:column="25"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="77" pos:column="16">h<pos:position pos:line="77" pos:column="17"/></name><operator pos:line="77" pos:column="17">-&gt;<pos:position pos:line="77" pos:column="22"/></operator><name pos:line="77" pos:column="19">h_length<pos:position pos:line="77" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="78" pos:column="9">sa<pos:position pos:line="78" pos:column="11"/></name><operator pos:line="78" pos:column="11">.<pos:position pos:line="78" pos:column="12"/></operator><name pos:line="78" pos:column="12">sin_family<pos:position pos:line="78" pos:column="22"/></name></name> <operator pos:line="78" pos:column="23">=<pos:position pos:line="78" pos:column="24"/></operator> <name pos:line="78" pos:column="25">AF_INET<pos:position pos:line="78" pos:column="32"/></name></expr>;<pos:position pos:line="78" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="79" pos:column="9">sa<pos:position pos:line="79" pos:column="11"/></name><operator pos:line="79" pos:column="11">.<pos:position pos:line="79" pos:column="12"/></operator><name pos:line="79" pos:column="12">sin_addr<pos:position pos:line="79" pos:column="20"/></name><operator pos:line="79" pos:column="20">.<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="21">s_addr<pos:position pos:line="79" pos:column="27"/></name></name> <operator pos:line="79" pos:column="28">=<pos:position pos:line="79" pos:column="29"/></operator> <name pos:line="79" pos:column="30">in<pos:position pos:line="79" pos:column="32"/></name></expr>;<pos:position pos:line="79" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="80" pos:column="9">sa<pos:position pos:line="80" pos:column="11"/></name><operator pos:line="80" pos:column="11">.<pos:position pos:line="80" pos:column="12"/></operator><name pos:line="80" pos:column="12">sin_port<pos:position pos:line="80" pos:column="20"/></name></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <literal type="number" pos:line="80" pos:column="23">0<pos:position pos:line="80" pos:column="24"/></literal></expr>;<pos:position pos:line="80" pos:column="25"/></expr_stmt> <comment type="block" pos:line="80" pos:column="26">/* get any port */</comment>
	
        <if pos:line="82" pos:column="9">if<condition pos:line="82" pos:column="11">( <expr><call><name pos:line="82" pos:column="13">bind<pos:position pos:line="82" pos:column="17"/></name><argument_list pos:line="82" pos:column="17">(<argument><expr><name><name pos:line="82" pos:column="18">conn<pos:position pos:line="82" pos:column="22"/></name><operator pos:line="82" pos:column="22">-&gt;<pos:position pos:line="82" pos:column="27"/></operator><name pos:line="82" pos:column="24">firstsocket<pos:position pos:line="82" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="37">(<pos:position pos:line="82" pos:column="38"/></operator>struct <name pos:line="82" pos:column="45">sockaddr<pos:position pos:line="82" pos:column="53"/></name> <operator pos:line="82" pos:column="54">*<pos:position pos:line="82" pos:column="55"/></operator><operator pos:line="82" pos:column="55">)<pos:position pos:line="82" pos:column="56"/></operator><operator pos:line="82" pos:column="56">&amp;<pos:position pos:line="82" pos:column="61"/></operator><name pos:line="82" pos:column="57">sa<pos:position pos:line="82" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="82" pos:column="61">sizeof<argument_list pos:line="82" pos:column="67">(<argument><expr><name pos:line="82" pos:column="68">sa<pos:position pos:line="82" pos:column="70"/></name></expr></argument>)<pos:position pos:line="82" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="82" pos:column="72"/></argument_list></call> <operator pos:line="82" pos:column="73">&gt;=<pos:position pos:line="82" pos:column="78"/></operator> <literal type="number" pos:line="82" pos:column="76">0<pos:position pos:line="82" pos:column="77"/></literal></expr>)<pos:position pos:line="82" pos:column="78"/></condition><then pos:line="82" pos:column="78"> <block pos:line="82" pos:column="79">{
          <comment type="block" pos:line="83" pos:column="11">/* we succeeded to bind */</comment>
          <decl_stmt><decl><type><name><name pos:line="84" pos:column="11">struct<pos:position pos:line="84" pos:column="17"/></name> <name pos:line="84" pos:column="18">sockaddr_in<pos:position pos:line="84" pos:column="29"/></name></name></type> <name pos:line="84" pos:column="30">add<pos:position pos:line="84" pos:column="33"/></name></decl>;<pos:position pos:line="84" pos:column="34"/></decl_stmt>
	
          <expr_stmt><expr><name pos:line="86" pos:column="11">size<pos:position pos:line="86" pos:column="15"/></name> <operator pos:line="86" pos:column="16">=<pos:position pos:line="86" pos:column="17"/></operator> <sizeof pos:line="86" pos:column="18">sizeof<argument_list pos:line="86" pos:column="24">(<argument><expr><name pos:line="86" pos:column="25">add<pos:position pos:line="86" pos:column="28"/></name></expr></argument>)<pos:position pos:line="86" pos:column="29"/></argument_list></sizeof></expr>;<pos:position pos:line="86" pos:column="30"/></expr_stmt>
          <if pos:line="87" pos:column="11">if<condition pos:line="87" pos:column="13">(<expr><call><name pos:line="87" pos:column="14">getsockname<pos:position pos:line="87" pos:column="25"/></name><argument_list pos:line="87" pos:column="25">(<argument><expr><name><name pos:line="87" pos:column="26">conn<pos:position pos:line="87" pos:column="30"/></name><operator pos:line="87" pos:column="30">-&gt;<pos:position pos:line="87" pos:column="35"/></operator><name pos:line="87" pos:column="32">firstsocket<pos:position pos:line="87" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="45">(<pos:position pos:line="87" pos:column="46"/></operator>struct <name pos:line="87" pos:column="53">sockaddr<pos:position pos:line="87" pos:column="61"/></name> <operator pos:line="87" pos:column="62">*<pos:position pos:line="87" pos:column="63"/></operator><operator pos:line="87" pos:column="63">)<pos:position pos:line="87" pos:column="64"/></operator> <operator pos:line="87" pos:column="65">&amp;<pos:position pos:line="87" pos:column="70"/></operator><name pos:line="87" pos:column="66">add<pos:position pos:line="87" pos:column="69"/></name></expr></argument>,
                         <argument><expr><operator pos:line="88" pos:column="26">(<pos:position pos:line="88" pos:column="27"/></operator><name pos:line="88" pos:column="27">socklen_t<pos:position pos:line="88" pos:column="36"/></name> <operator pos:line="88" pos:column="37">*<pos:position pos:line="88" pos:column="38"/></operator><operator pos:line="88" pos:column="38">)<pos:position pos:line="88" pos:column="39"/></operator><operator pos:line="88" pos:column="39">&amp;<pos:position pos:line="88" pos:column="44"/></operator><name pos:line="88" pos:column="40">size<pos:position pos:line="88" pos:column="44"/></name></expr></argument>)<pos:position pos:line="88" pos:column="45"/></argument_list></call><operator pos:line="88" pos:column="45">&lt;<pos:position pos:line="88" pos:column="49"/></operator><literal type="number" pos:line="88" pos:column="46">0<pos:position pos:line="88" pos:column="47"/></literal></expr>)<pos:position pos:line="88" pos:column="48"/></condition><then pos:line="88" pos:column="48"> <block pos:line="88" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="89" pos:column="13">failf<pos:position pos:line="89" pos:column="18"/></name><argument_list pos:line="89" pos:column="18">(<argument><expr><name pos:line="89" pos:column="19">data<pos:position pos:line="89" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="25">"getsockname() failed"<pos:position pos:line="89" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="49"/></expr_stmt>
            <return pos:line="90" pos:column="13">return <expr><name pos:line="90" pos:column="20">CURLE_HTTP_PORT_FAILED<pos:position pos:line="90" pos:column="42"/></name></expr>;<pos:position pos:line="90" pos:column="43"/></return>
          }<pos:position pos:line="91" pos:column="12"/></block></then></if>
        }<pos:position pos:line="92" pos:column="10"/></block></then>
        <else pos:line="93" pos:column="9">else <block pos:line="93" pos:column="14">{
          <switch pos:line="94" pos:column="11">switch<condition pos:line="94" pos:column="17">(<expr><name pos:line="94" pos:column="18">errno<pos:position pos:line="94" pos:column="23"/></name></expr>)<pos:position pos:line="94" pos:column="24"/></condition> <block pos:line="94" pos:column="25">{
          <case pos:line="95" pos:column="11">case <expr><name pos:line="95" pos:column="16">EBADF<pos:position pos:line="95" pos:column="21"/></name></expr>:<pos:position pos:line="95" pos:column="22"/></case>
            <expr_stmt><expr><call><name pos:line="96" pos:column="13">failf<pos:position pos:line="96" pos:column="18"/></name><argument_list pos:line="96" pos:column="18">(<argument><expr><name pos:line="96" pos:column="19">data<pos:position pos:line="96" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="25">"Invalid descriptor: %d"<pos:position pos:line="96" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="51">errno<pos:position pos:line="96" pos:column="56"/></name></expr></argument>)<pos:position pos:line="96" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="58"/></expr_stmt>
            <break pos:line="97" pos:column="13">break;<pos:position pos:line="97" pos:column="19"/></break>
          <case pos:line="98" pos:column="11">case <expr><name pos:line="98" pos:column="16">EINVAL<pos:position pos:line="98" pos:column="22"/></name></expr>:<pos:position pos:line="98" pos:column="23"/></case>
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">failf<pos:position pos:line="99" pos:column="18"/></name><argument_list pos:line="99" pos:column="18">(<argument><expr><name pos:line="99" pos:column="19">data<pos:position pos:line="99" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="25">"Invalid request: %d"<pos:position pos:line="99" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="48">errno<pos:position pos:line="99" pos:column="53"/></name></expr></argument>)<pos:position pos:line="99" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="55"/></expr_stmt>
            <break pos:line="100" pos:column="13">break;<pos:position pos:line="100" pos:column="19"/></break>
          <case pos:line="101" pos:column="11">case <expr><name pos:line="101" pos:column="16">EACCES<pos:position pos:line="101" pos:column="22"/></name></expr>:<pos:position pos:line="101" pos:column="23"/></case>
            <expr_stmt><expr><call><name pos:line="102" pos:column="13">failf<pos:position pos:line="102" pos:column="18"/></name><argument_list pos:line="102" pos:column="18">(<argument><expr><name pos:line="102" pos:column="19">data<pos:position pos:line="102" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="25">"Address is protected, user not superuser: %d"<pos:position pos:line="102" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="73">errno<pos:position pos:line="102" pos:column="78"/></name></expr></argument>)<pos:position pos:line="102" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="80"/></expr_stmt>
            <break pos:line="103" pos:column="13">break;<pos:position pos:line="103" pos:column="19"/></break>
          <case pos:line="104" pos:column="11">case <expr><name pos:line="104" pos:column="16">ENOTSOCK<pos:position pos:line="104" pos:column="24"/></name></expr>:<pos:position pos:line="104" pos:column="25"/></case>
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">failf<pos:position pos:line="105" pos:column="18"/></name><argument_list pos:line="105" pos:column="18">(<argument><expr><name pos:line="105" pos:column="19">data<pos:position pos:line="105" pos:column="23"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="106" pos:column="19">"Argument is a descriptor for a file, not a socket: %d"<pos:position pos:line="106" pos:column="74"/></literal></expr></argument>,
                  <argument><expr><name pos:line="107" pos:column="19">errno<pos:position pos:line="107" pos:column="24"/></name></expr></argument>)<pos:position pos:line="107" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="26"/></expr_stmt>
            <break pos:line="108" pos:column="13">break;<pos:position pos:line="108" pos:column="19"/></break>
          <case pos:line="109" pos:column="11">case <expr><name pos:line="109" pos:column="16">EFAULT<pos:position pos:line="109" pos:column="22"/></name></expr>:<pos:position pos:line="109" pos:column="23"/></case>
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">failf<pos:position pos:line="110" pos:column="18"/></name><argument_list pos:line="110" pos:column="18">(<argument><expr><name pos:line="110" pos:column="19">data<pos:position pos:line="110" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="25">"Inaccessable memory error: %d"<pos:position pos:line="110" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="58">errno<pos:position pos:line="110" pos:column="63"/></name></expr></argument>)<pos:position pos:line="110" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="65"/></expr_stmt>
            <break pos:line="111" pos:column="13">break;<pos:position pos:line="111" pos:column="19"/></break>
          <case pos:line="112" pos:column="11">case <expr><name pos:line="112" pos:column="16">ENAMETOOLONG<pos:position pos:line="112" pos:column="28"/></name></expr>:<pos:position pos:line="112" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="113" pos:column="13">failf<pos:position pos:line="113" pos:column="18"/></name><argument_list pos:line="113" pos:column="18">(<argument><expr><name pos:line="113" pos:column="19">data<pos:position pos:line="113" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="25">"Address too long: %d"<pos:position pos:line="113" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="49">errno<pos:position pos:line="113" pos:column="54"/></name></expr></argument>)<pos:position pos:line="113" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="56"/></expr_stmt>
            <break pos:line="114" pos:column="13">break;<pos:position pos:line="114" pos:column="19"/></break>
          <case pos:line="115" pos:column="11">case <expr><name pos:line="115" pos:column="16">ENOMEM<pos:position pos:line="115" pos:column="22"/></name></expr>:<pos:position pos:line="115" pos:column="23"/></case>
            <expr_stmt><expr><call><name pos:line="116" pos:column="13">failf<pos:position pos:line="116" pos:column="18"/></name><argument_list pos:line="116" pos:column="18">(<argument><expr><name pos:line="116" pos:column="19">data<pos:position pos:line="116" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="25">"Insufficient kernel memory was available: %d"<pos:position pos:line="116" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="73">errno<pos:position pos:line="116" pos:column="78"/></name></expr></argument>)<pos:position pos:line="116" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="80"/></expr_stmt>
            <break pos:line="117" pos:column="13">break;<pos:position pos:line="117" pos:column="19"/></break>
          <default pos:line="118" pos:column="11">default:<pos:position pos:line="118" pos:column="19"/></default>
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">failf<pos:position pos:line="119" pos:column="18"/></name><argument_list pos:line="119" pos:column="18">(<argument><expr><name pos:line="119" pos:column="19">data<pos:position pos:line="119" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="119" pos:column="24">"errno %d\n"<pos:position pos:line="119" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="38"/></expr_stmt>
          }<pos:position pos:line="120" pos:column="12"/></block></switch> <comment type="block" pos:line="120" pos:column="13">/* end of switch */</comment>
	
          <return pos:line="122" pos:column="11">return <expr><name pos:line="122" pos:column="18">CURLE_HTTP_PORT_FAILED<pos:position pos:line="122" pos:column="40"/></name></expr>;<pos:position pos:line="122" pos:column="41"/></return>
        }<pos:position pos:line="123" pos:column="10"/></block></else></if> <comment type="block" pos:line="123" pos:column="11">/* end of else */</comment>
	
      }<pos:position pos:line="125" pos:column="8"/></block></then> <comment type="block" pos:line="125" pos:column="9">/* end of if  h */</comment>
      <else pos:line="126" pos:column="7">else <block pos:line="126" pos:column="12">{
	<expr_stmt><expr><call><name pos:line="127" pos:column="9">failf<pos:position pos:line="127" pos:column="14"/></name><argument_list pos:line="127" pos:column="14">(<argument><expr><name pos:line="127" pos:column="15">data<pos:position pos:line="127" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="127" pos:column="20">"could't find my own IP address (%s)"<pos:position pos:line="127" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="127" pos:column="59">myhost<pos:position pos:line="127" pos:column="65"/></name></expr></argument>)<pos:position pos:line="127" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="67"/></expr_stmt>
	<return pos:line="128" pos:column="9">return <expr><name pos:line="128" pos:column="16">CURLE_HTTP_PORT_FAILED<pos:position pos:line="128" pos:column="38"/></name></expr>;<pos:position pos:line="128" pos:column="39"/></return>
      }<pos:position pos:line="129" pos:column="8"/></block></else></if>
    }<pos:position pos:line="130" pos:column="6"/></block></then> <comment type="block" pos:line="130" pos:column="7">/* end of inet_addr */</comment>

    <else pos:line="132" pos:column="5">else <block pos:line="132" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="133" pos:column="7">failf<pos:position pos:line="133" pos:column="12"/></name><argument_list pos:line="133" pos:column="12">(<argument><expr><name pos:line="133" pos:column="13">data<pos:position pos:line="133" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="19">"could't find my own IP address (%s)"<pos:position pos:line="133" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="58">myhost<pos:position pos:line="133" pos:column="64"/></name></expr></argument>)<pos:position pos:line="133" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="66"/></expr_stmt>
      <return pos:line="134" pos:column="7">return <expr><name pos:line="134" pos:column="14">CURLE_HTTP_PORT_FAILED<pos:position pos:line="134" pos:column="36"/></name></expr>;<pos:position pos:line="134" pos:column="37"/></return>
    }<pos:position pos:line="135" pos:column="6"/></block></else></if>

    <if pos:line="137" pos:column="5">if<condition pos:line="137" pos:column="7">(<expr><name pos:line="137" pos:column="8">hostdataptr<pos:position pos:line="137" pos:column="19"/></name></expr>)<pos:position pos:line="137" pos:column="20"/></condition><then pos:line="137" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="138" pos:column="7">free<pos:position pos:line="138" pos:column="11"/></name><argument_list pos:line="138" pos:column="11">(<argument><expr><name pos:line="138" pos:column="12">hostdataptr<pos:position pos:line="138" pos:column="23"/></name></expr></argument>)<pos:position pos:line="138" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="25"/></expr_stmt></block></then></if> <comment type="block" pos:line="138" pos:column="26">/* allocated by Curl_gethost() */</comment>

  }<pos:position pos:line="140" pos:column="4"/></block></then></if> <comment type="block" pos:line="140" pos:column="5">/* end of device selection support */</comment>
<cpp:endif pos:line="141" pos:column="1">#<cpp:directive pos:line="141" pos:column="2">endif<pos:position pos:line="141" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="141" pos:column="9">/* end of HAVE_INET_NTOA */</comment>
<cpp:endif pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">endif<pos:position pos:line="142" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="142" pos:column="8">/* end of not WIN32 */</comment>
<cpp:endif pos:line="143" pos:column="1">#<cpp:directive pos:line="143" pos:column="2">endif<pos:position pos:line="143" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="143" pos:column="8">/*ENABLE_IPV6*/</comment>

  <comment type="block" format="doxygen" pos:line="145" pos:column="3">/*************************************************************
   * Connect to server/proxy
   *************************************************************/</comment>
<cpp:ifdef pos:line="148" pos:column="1">#<cpp:directive pos:line="148" pos:column="2">ifdef<pos:position pos:line="148" pos:column="7"/></cpp:directive> <name pos:line="148" pos:column="8">ENABLE_IPV6<pos:position pos:line="148" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="149" pos:column="3">conn<pos:position pos:line="149" pos:column="7"/></name><operator pos:line="149" pos:column="7">-&gt;<pos:position pos:line="149" pos:column="12"/></operator><name pos:line="149" pos:column="9">firstsocket<pos:position pos:line="149" pos:column="20"/></name></name> <operator pos:line="149" pos:column="21">=<pos:position pos:line="149" pos:column="22"/></operator> <operator pos:line="149" pos:column="23">-<pos:position pos:line="149" pos:column="24"/></operator><literal type="number" pos:line="149" pos:column="24">1<pos:position pos:line="149" pos:column="25"/></literal></expr>;<pos:position pos:line="149" pos:column="26"/></expr_stmt>
  <for pos:line="150" pos:column="3">for <control pos:line="150" pos:column="7">(<init><expr><name pos:line="150" pos:column="8">ai<pos:position pos:line="150" pos:column="10"/></name> <operator pos:line="150" pos:column="11">=<pos:position pos:line="150" pos:column="12"/></operator> <name><name pos:line="150" pos:column="13">conn<pos:position pos:line="150" pos:column="17"/></name><operator pos:line="150" pos:column="17">-&gt;<pos:position pos:line="150" pos:column="22"/></operator><name pos:line="150" pos:column="19">hp<pos:position pos:line="150" pos:column="21"/></name></name></expr>;<pos:position pos:line="150" pos:column="22"/></init> <condition><expr><name pos:line="150" pos:column="23">ai<pos:position pos:line="150" pos:column="25"/></name></expr>;<pos:position pos:line="150" pos:column="26"/></condition> <incr><expr><name pos:line="150" pos:column="27">ai<pos:position pos:line="150" pos:column="29"/></name> <operator pos:line="150" pos:column="30">=<pos:position pos:line="150" pos:column="31"/></operator> <name><name pos:line="150" pos:column="32">ai<pos:position pos:line="150" pos:column="34"/></name><operator pos:line="150" pos:column="34">-&gt;<pos:position pos:line="150" pos:column="39"/></operator><name pos:line="150" pos:column="36">ai_next<pos:position pos:line="150" pos:column="43"/></name></name></expr></incr>)<pos:position pos:line="150" pos:column="44"/></control> <block pos:line="150" pos:column="45">{
    <expr_stmt><expr><name><name pos:line="151" pos:column="5">conn<pos:position pos:line="151" pos:column="9"/></name><operator pos:line="151" pos:column="9">-&gt;<pos:position pos:line="151" pos:column="14"/></operator><name pos:line="151" pos:column="11">firstsocket<pos:position pos:line="151" pos:column="22"/></name></name> <operator pos:line="151" pos:column="23">=<pos:position pos:line="151" pos:column="24"/></operator> <call><name pos:line="151" pos:column="25">socket<pos:position pos:line="151" pos:column="31"/></name><argument_list pos:line="151" pos:column="31">(<argument><expr><name><name pos:line="151" pos:column="32">ai<pos:position pos:line="151" pos:column="34"/></name><operator pos:line="151" pos:column="34">-&gt;<pos:position pos:line="151" pos:column="39"/></operator><name pos:line="151" pos:column="36">ai_family<pos:position pos:line="151" pos:column="45"/></name></name></expr></argument>,
                               <argument><expr><name><name pos:line="152" pos:column="32">ai<pos:position pos:line="152" pos:column="34"/></name><operator pos:line="152" pos:column="34">-&gt;<pos:position pos:line="152" pos:column="39"/></operator><name pos:line="152" pos:column="36">ai_socktype<pos:position pos:line="152" pos:column="47"/></name></name></expr></argument>,
                               <argument><expr><name><name pos:line="153" pos:column="32">ai<pos:position pos:line="153" pos:column="34"/></name><operator pos:line="153" pos:column="34">-&gt;<pos:position pos:line="153" pos:column="39"/></operator><name pos:line="153" pos:column="36">ai_protocol<pos:position pos:line="153" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="153" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="49"/></expr_stmt>
    <if pos:line="154" pos:column="5">if <condition pos:line="154" pos:column="8">(<expr><name><name pos:line="154" pos:column="9">conn<pos:position pos:line="154" pos:column="13"/></name><operator pos:line="154" pos:column="13">-&gt;<pos:position pos:line="154" pos:column="18"/></operator><name pos:line="154" pos:column="15">firstsocket<pos:position pos:line="154" pos:column="26"/></name></name> <operator pos:line="154" pos:column="27">&lt;<pos:position pos:line="154" pos:column="31"/></operator> <literal type="number" pos:line="154" pos:column="29">0<pos:position pos:line="154" pos:column="30"/></literal></expr>)<pos:position pos:line="154" pos:column="31"/></condition><then pos:line="154" pos:column="31">
      <block type="pseudo"><continue pos:line="155" pos:column="7">continue;<pos:position pos:line="155" pos:column="16"/></continue></block></then></if>

    <if pos:line="157" pos:column="5">if <condition pos:line="157" pos:column="8">(<expr><call><name pos:line="157" pos:column="9">connect<pos:position pos:line="157" pos:column="16"/></name><argument_list pos:line="157" pos:column="16">(<argument><expr><name><name pos:line="157" pos:column="17">conn<pos:position pos:line="157" pos:column="21"/></name><operator pos:line="157" pos:column="21">-&gt;<pos:position pos:line="157" pos:column="26"/></operator><name pos:line="157" pos:column="23">firstsocket<pos:position pos:line="157" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="36">ai<pos:position pos:line="157" pos:column="38"/></name><operator pos:line="157" pos:column="38">-&gt;<pos:position pos:line="157" pos:column="43"/></operator><name pos:line="157" pos:column="40">ai_addr<pos:position pos:line="157" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="49">ai<pos:position pos:line="157" pos:column="51"/></name><operator pos:line="157" pos:column="51">-&gt;<pos:position pos:line="157" pos:column="56"/></operator><name pos:line="157" pos:column="53">ai_addrlen<pos:position pos:line="157" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="157" pos:column="64"/></argument_list></call> <operator pos:line="157" pos:column="65">&lt;<pos:position pos:line="157" pos:column="69"/></operator> <literal type="number" pos:line="157" pos:column="67">0<pos:position pos:line="157" pos:column="68"/></literal></expr>)<pos:position pos:line="157" pos:column="69"/></condition><then pos:line="157" pos:column="69"> <block pos:line="157" pos:column="70">{
      <expr_stmt><expr><call><name pos:line="158" pos:column="7">sclose<pos:position pos:line="158" pos:column="13"/></name><argument_list pos:line="158" pos:column="13">(<argument><expr><name><name pos:line="158" pos:column="14">conn<pos:position pos:line="158" pos:column="18"/></name><operator pos:line="158" pos:column="18">-&gt;<pos:position pos:line="158" pos:column="23"/></operator><name pos:line="158" pos:column="20">firstsocket<pos:position pos:line="158" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="158" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="159" pos:column="7">conn<pos:position pos:line="159" pos:column="11"/></name><operator pos:line="159" pos:column="11">-&gt;<pos:position pos:line="159" pos:column="16"/></operator><name pos:line="159" pos:column="13">firstsocket<pos:position pos:line="159" pos:column="24"/></name></name> <operator pos:line="159" pos:column="25">=<pos:position pos:line="159" pos:column="26"/></operator> <operator pos:line="159" pos:column="27">-<pos:position pos:line="159" pos:column="28"/></operator><literal type="number" pos:line="159" pos:column="28">1<pos:position pos:line="159" pos:column="29"/></literal></expr>;<pos:position pos:line="159" pos:column="30"/></expr_stmt>
      <continue pos:line="160" pos:column="7">continue;<pos:position pos:line="160" pos:column="16"/></continue>
    }<pos:position pos:line="161" pos:column="6"/></block></then></if>

    <break pos:line="163" pos:column="5">break;<pos:position pos:line="163" pos:column="11"/></break>
  }<pos:position pos:line="164" pos:column="4"/></block></for>
  <expr_stmt><expr><name><name pos:line="165" pos:column="3">conn<pos:position pos:line="165" pos:column="7"/></name><operator pos:line="165" pos:column="7">-&gt;<pos:position pos:line="165" pos:column="12"/></operator><name pos:line="165" pos:column="9">ai<pos:position pos:line="165" pos:column="11"/></name></name> <operator pos:line="165" pos:column="12">=<pos:position pos:line="165" pos:column="13"/></operator> <name pos:line="165" pos:column="14">ai<pos:position pos:line="165" pos:column="16"/></name></expr>;<pos:position pos:line="165" pos:column="17"/></expr_stmt>
  <if pos:line="166" pos:column="3">if <condition pos:line="166" pos:column="6">(<expr><name><name pos:line="166" pos:column="7">conn<pos:position pos:line="166" pos:column="11"/></name><operator pos:line="166" pos:column="11">-&gt;<pos:position pos:line="166" pos:column="16"/></operator><name pos:line="166" pos:column="13">firstsocket<pos:position pos:line="166" pos:column="24"/></name></name> <operator pos:line="166" pos:column="25">&lt;<pos:position pos:line="166" pos:column="29"/></operator> <literal type="number" pos:line="166" pos:column="27">0<pos:position pos:line="166" pos:column="28"/></literal></expr>)<pos:position pos:line="166" pos:column="29"/></condition><then pos:line="166" pos:column="29"> <block pos:line="166" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="167" pos:column="5">failf<pos:position pos:line="167" pos:column="10"/></name><argument_list pos:line="167" pos:column="10">(<argument><expr><name pos:line="167" pos:column="11">data<pos:position pos:line="167" pos:column="15"/></name></expr></argument>, <argument><expr><call><name pos:line="167" pos:column="17">strerror<pos:position pos:line="167" pos:column="25"/></name><argument_list pos:line="167" pos:column="25">(<argument><expr><name pos:line="167" pos:column="26">errno<pos:position pos:line="167" pos:column="31"/></name></expr></argument>)<pos:position pos:line="167" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="167" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="34"/></expr_stmt>
    <return pos:line="168" pos:column="5">return <expr><name pos:line="168" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="168" pos:column="33"/></name></expr>;<pos:position pos:line="168" pos:column="34"/></return>
  }<pos:position pos:line="169" pos:column="4"/></block></then></if>
<cpp:else pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">else<pos:position pos:line="170" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="171" pos:column="3">/* non-zero nonblock value sets socket as nonblocking under Win32 */</comment>
<cpp:if pos:line="172" pos:column="1">#<cpp:directive pos:line="172" pos:column="2">if<pos:position pos:line="172" pos:column="4"/></cpp:directive> <expr><call><name pos:line="172" pos:column="5">defined<pos:position pos:line="172" pos:column="12"/></name><argument_list pos:line="172" pos:column="12">(<argument><expr><name pos:line="172" pos:column="13">WIN32<pos:position pos:line="172" pos:column="18"/></name></expr></argument>)<pos:position pos:line="172" pos:column="19"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="173" pos:column="3">FD_ZERO<pos:position pos:line="173" pos:column="10"/></name> <argument_list pos:line="173" pos:column="11">(<argument><expr><operator pos:line="173" pos:column="12">&amp;<pos:position pos:line="173" pos:column="17"/></operator><name pos:line="173" pos:column="13">connectfd<pos:position pos:line="173" pos:column="22"/></name></expr></argument>)<pos:position pos:line="173" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="174" pos:column="3">FD_SET<pos:position pos:line="174" pos:column="9"/></name><argument_list pos:line="174" pos:column="9">(<argument><expr><name><name pos:line="174" pos:column="10">conn<pos:position pos:line="174" pos:column="14"/></name><operator pos:line="174" pos:column="14">-&gt;<pos:position pos:line="174" pos:column="19"/></operator><name pos:line="174" pos:column="16">firstsocket<pos:position pos:line="174" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="174" pos:column="29">&amp;<pos:position pos:line="174" pos:column="34"/></operator><name pos:line="174" pos:column="30">connectfd<pos:position pos:line="174" pos:column="39"/></name></expr></argument>)<pos:position pos:line="174" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="41"/></expr_stmt>
  <if pos:line="175" pos:column="3">if <condition pos:line="175" pos:column="6">(<expr><name><name pos:line="175" pos:column="7">conn<pos:position pos:line="175" pos:column="11"/></name><operator pos:line="175" pos:column="11">-&gt;<pos:position pos:line="175" pos:column="16"/></operator><name pos:line="175" pos:column="13">data<pos:position pos:line="175" pos:column="17"/></name><operator pos:line="175" pos:column="17">-&gt;<pos:position pos:line="175" pos:column="22"/></operator><name pos:line="175" pos:column="19">set<pos:position pos:line="175" pos:column="22"/></name><operator pos:line="175" pos:column="22">.<pos:position pos:line="175" pos:column="23"/></operator><name pos:line="175" pos:column="23">connecttimeout<pos:position pos:line="175" pos:column="37"/></name></name> <operator pos:line="175" pos:column="38">&gt;<pos:position pos:line="175" pos:column="42"/></operator> <literal type="number" pos:line="175" pos:column="40">0<pos:position pos:line="175" pos:column="41"/></literal></expr>)<pos:position pos:line="175" pos:column="42"/></condition><then pos:line="175" pos:column="42"> <block pos:line="175" pos:column="43">{
    <expr_stmt><expr><name pos:line="176" pos:column="5">nonblock<pos:position pos:line="176" pos:column="13"/></name> <operator pos:line="176" pos:column="14">=<pos:position pos:line="176" pos:column="15"/></operator> <literal type="number" pos:line="176" pos:column="16">1<pos:position pos:line="176" pos:column="17"/></literal></expr>;<pos:position pos:line="176" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="177" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="178" pos:column="3">ioctlsocket<pos:position pos:line="178" pos:column="14"/></name><argument_list pos:line="178" pos:column="14">(<argument><expr><name><name pos:line="178" pos:column="15">conn<pos:position pos:line="178" pos:column="19"/></name><operator pos:line="178" pos:column="19">-&gt;<pos:position pos:line="178" pos:column="24"/></operator><name pos:line="178" pos:column="21">firstsocket<pos:position pos:line="178" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="34">FIONBIO<pos:position pos:line="178" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="178" pos:column="43">&amp;<pos:position pos:line="178" pos:column="48"/></operator><name pos:line="178" pos:column="44">nonblock<pos:position pos:line="178" pos:column="52"/></name></expr></argument>)<pos:position pos:line="178" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="179" pos:column="1">#<cpp:directive pos:line="179" pos:column="2">endif<pos:position pos:line="179" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="180" pos:column="3">if <condition pos:line="180" pos:column="6">(<expr><call><name pos:line="180" pos:column="7">connect<pos:position pos:line="180" pos:column="14"/></name><argument_list pos:line="180" pos:column="14">(<argument><expr><name><name pos:line="180" pos:column="15">conn<pos:position pos:line="180" pos:column="19"/></name><operator pos:line="180" pos:column="19">-&gt;<pos:position pos:line="180" pos:column="24"/></operator><name pos:line="180" pos:column="21">firstsocket<pos:position pos:line="180" pos:column="32"/></name></name></expr></argument>,
              <argument><expr><operator pos:line="181" pos:column="15">(<pos:position pos:line="181" pos:column="16"/></operator>struct <name pos:line="181" pos:column="23">sockaddr<pos:position pos:line="181" pos:column="31"/></name> <operator pos:line="181" pos:column="32">*<pos:position pos:line="181" pos:column="33"/></operator><operator pos:line="181" pos:column="33">)<pos:position pos:line="181" pos:column="34"/></operator> <operator pos:line="181" pos:column="35">&amp;<pos:position pos:line="181" pos:column="40"/></operator><operator pos:line="181" pos:column="36">(<pos:position pos:line="181" pos:column="37"/></operator><name><name pos:line="181" pos:column="37">conn<pos:position pos:line="181" pos:column="41"/></name><operator pos:line="181" pos:column="41">-&gt;<pos:position pos:line="181" pos:column="46"/></operator><name pos:line="181" pos:column="43">serv_addr<pos:position pos:line="181" pos:column="52"/></name></name><operator pos:line="181" pos:column="52">)<pos:position pos:line="181" pos:column="53"/></operator></expr></argument>,
              <argument><expr><sizeof pos:line="182" pos:column="15">sizeof<argument_list pos:line="182" pos:column="21">(<argument><expr><name><name pos:line="182" pos:column="22">conn<pos:position pos:line="182" pos:column="26"/></name><operator pos:line="182" pos:column="26">-&gt;<pos:position pos:line="182" pos:column="31"/></operator><name pos:line="182" pos:column="28">serv_addr<pos:position pos:line="182" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="182" pos:column="38"/></argument_list></sizeof></expr></argument>
              )<pos:position pos:line="183" pos:column="16"/></argument_list></call> <operator pos:line="183" pos:column="17">&lt;<pos:position pos:line="183" pos:column="21"/></operator> <literal type="number" pos:line="183" pos:column="19">0<pos:position pos:line="183" pos:column="20"/></literal></expr>)<pos:position pos:line="183" pos:column="21"/></condition><then pos:line="183" pos:column="21"> <block pos:line="183" pos:column="22">{
<cpp:if pos:line="184" pos:column="1">#<cpp:directive pos:line="184" pos:column="2">if<pos:position pos:line="184" pos:column="4"/></cpp:directive> <expr><call><name pos:line="184" pos:column="5">defined<pos:position pos:line="184" pos:column="12"/></name><argument_list pos:line="184" pos:column="12">(<argument><expr><name pos:line="184" pos:column="13">WIN32<pos:position pos:line="184" pos:column="18"/></name></expr></argument>)<pos:position pos:line="184" pos:column="19"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name pos:line="185" pos:column="5">conntimeout<pos:position pos:line="185" pos:column="16"/></name><operator pos:line="185" pos:column="16">.<pos:position pos:line="185" pos:column="17"/></operator><name pos:line="185" pos:column="17">tv_sec<pos:position pos:line="185" pos:column="23"/></name></name> <operator pos:line="185" pos:column="24">=<pos:position pos:line="185" pos:column="25"/></operator> <name><name pos:line="185" pos:column="26">conn<pos:position pos:line="185" pos:column="30"/></name><operator pos:line="185" pos:column="30">-&gt;<pos:position pos:line="185" pos:column="35"/></operator><name pos:line="185" pos:column="32">data<pos:position pos:line="185" pos:column="36"/></name><operator pos:line="185" pos:column="36">-&gt;<pos:position pos:line="185" pos:column="41"/></operator><name pos:line="185" pos:column="38">set<pos:position pos:line="185" pos:column="41"/></name><operator pos:line="185" pos:column="41">.<pos:position pos:line="185" pos:column="42"/></operator><name pos:line="185" pos:column="42">connecttimeout<pos:position pos:line="185" pos:column="56"/></name></name></expr>;<pos:position pos:line="185" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="186" pos:column="5">conntimeout<pos:position pos:line="186" pos:column="16"/></name><operator pos:line="186" pos:column="16">.<pos:position pos:line="186" pos:column="17"/></operator><name pos:line="186" pos:column="17">tv_usec<pos:position pos:line="186" pos:column="24"/></name></name> <operator pos:line="186" pos:column="25">=<pos:position pos:line="186" pos:column="26"/></operator> <literal type="number" pos:line="186" pos:column="27">0<pos:position pos:line="186" pos:column="28"/></literal></expr>;<pos:position pos:line="186" pos:column="29"/></expr_stmt>	
    <if pos:line="187" pos:column="5">if<condition pos:line="187" pos:column="7">(<expr><operator pos:line="187" pos:column="8">-<pos:position pos:line="187" pos:column="9"/></operator><literal type="number" pos:line="187" pos:column="9">1<pos:position pos:line="187" pos:column="10"/></literal> <operator pos:line="187" pos:column="11">!=<pos:position pos:line="187" pos:column="13"/></operator> <call><name pos:line="187" pos:column="14">select<pos:position pos:line="187" pos:column="20"/></name> <argument_list pos:line="187" pos:column="21">(<argument><expr><name><name pos:line="187" pos:column="22">conn<pos:position pos:line="187" pos:column="26"/></name><operator pos:line="187" pos:column="26">-&gt;<pos:position pos:line="187" pos:column="31"/></operator><name pos:line="187" pos:column="28">firstsocket<pos:position pos:line="187" pos:column="39"/></name></name> <operator pos:line="187" pos:column="40">+<pos:position pos:line="187" pos:column="41"/></operator> <literal type="number" pos:line="187" pos:column="42">1<pos:position pos:line="187" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="187" pos:column="45">NULL<pos:position pos:line="187" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="187" pos:column="51">&amp;<pos:position pos:line="187" pos:column="56"/></operator><name pos:line="187" pos:column="52">connectfd<pos:position pos:line="187" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="63">NULL<pos:position pos:line="187" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="187" pos:column="69">&amp;<pos:position pos:line="187" pos:column="74"/></operator><name pos:line="187" pos:column="70">conntimeout<pos:position pos:line="187" pos:column="81"/></name></expr></argument>)<pos:position pos:line="187" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="187" pos:column="83"/></condition><then pos:line="187" pos:column="83"> <block pos:line="187" pos:column="84">{
      <if pos:line="188" pos:column="7">if <condition pos:line="188" pos:column="10">(<expr><call><name pos:line="188" pos:column="11">FD_ISSET<pos:position pos:line="188" pos:column="19"/></name><argument_list pos:line="188" pos:column="19">(<argument><expr><name><name pos:line="188" pos:column="20">conn<pos:position pos:line="188" pos:column="24"/></name><operator pos:line="188" pos:column="24">-&gt;<pos:position pos:line="188" pos:column="29"/></operator><name pos:line="188" pos:column="26">firstsocket<pos:position pos:line="188" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="188" pos:column="39">&amp;<pos:position pos:line="188" pos:column="44"/></operator><name pos:line="188" pos:column="40">connectfd<pos:position pos:line="188" pos:column="49"/></name></expr></argument>)<pos:position pos:line="188" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="188" pos:column="51"/></condition><then pos:line="188" pos:column="51"> <block pos:line="188" pos:column="52">{
        <comment type="block" pos:line="189" pos:column="9">/* shut off non-blocking again */</comment>
        <expr_stmt><expr><name pos:line="190" pos:column="9">nonblock<pos:position pos:line="190" pos:column="17"/></name> <operator pos:line="190" pos:column="18">=<pos:position pos:line="190" pos:column="19"/></operator> <literal type="number" pos:line="190" pos:column="20">0<pos:position pos:line="190" pos:column="21"/></literal></expr>;<pos:position pos:line="190" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="191" pos:column="9">ioctlsocket<pos:position pos:line="191" pos:column="20"/></name><argument_list pos:line="191" pos:column="20">(<argument><expr><name><name pos:line="191" pos:column="21">conn<pos:position pos:line="191" pos:column="25"/></name><operator pos:line="191" pos:column="25">-&gt;<pos:position pos:line="191" pos:column="30"/></operator><name pos:line="191" pos:column="27">firstsocket<pos:position pos:line="191" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="40">FIONBIO<pos:position pos:line="191" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="191" pos:column="49">&amp;<pos:position pos:line="191" pos:column="54"/></operator><name pos:line="191" pos:column="50">nonblock<pos:position pos:line="191" pos:column="58"/></name></expr></argument>)<pos:position pos:line="191" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="60"/></expr_stmt>
        <return pos:line="192" pos:column="9">return <expr><name pos:line="192" pos:column="16">CURLE_OK<pos:position pos:line="192" pos:column="24"/></name></expr>;<pos:position pos:line="192" pos:column="25"/></return>
      }<pos:position pos:line="193" pos:column="8"/></block></then>
      <else pos:line="194" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="195" pos:column="9">errno<pos:position pos:line="195" pos:column="14"/></name> <operator pos:line="195" pos:column="15">=<pos:position pos:line="195" pos:column="16"/></operator> <name pos:line="195" pos:column="17">EINTR<pos:position pos:line="195" pos:column="22"/></name></expr>;<pos:position pos:line="195" pos:column="23"/></expr_stmt></block></else></if>
    }<pos:position pos:line="196" pos:column="6"/></block></then></if>
<cpp:endif pos:line="197" pos:column="1">#<cpp:directive pos:line="197" pos:column="2">endif<pos:position pos:line="197" pos:column="7"/></cpp:directive></cpp:endif>
    <switch pos:line="198" pos:column="5">switch<condition pos:line="198" pos:column="11">(<expr><name pos:line="198" pos:column="12">errno<pos:position pos:line="198" pos:column="17"/></name></expr>)<pos:position pos:line="198" pos:column="18"/></condition> <block pos:line="198" pos:column="19">{
<cpp:ifdef pos:line="199" pos:column="1">#<cpp:directive pos:line="199" pos:column="2">ifdef<pos:position pos:line="199" pos:column="7"/></cpp:directive> <name pos:line="199" pos:column="8">ECONNREFUSED<pos:position pos:line="199" pos:column="20"/></name></cpp:ifdef>
      <comment type="block" pos:line="200" pos:column="7">/* this should be made nicer */</comment>
    <case pos:line="201" pos:column="5">case <expr><name pos:line="201" pos:column="10">ECONNREFUSED<pos:position pos:line="201" pos:column="22"/></name></expr>:<pos:position pos:line="201" pos:column="23"/></case>
      <expr_stmt><expr><call><name pos:line="202" pos:column="7">failf<pos:position pos:line="202" pos:column="12"/></name><argument_list pos:line="202" pos:column="12">(<argument><expr><name pos:line="202" pos:column="13">data<pos:position pos:line="202" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="202" pos:column="19">"Connection refused"<pos:position pos:line="202" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="41"/></expr_stmt>
      <break pos:line="203" pos:column="7">break;<pos:position pos:line="203" pos:column="13"/></break>
    <case pos:line="204" pos:column="5">case <expr><name pos:line="204" pos:column="10">EFAULT<pos:position pos:line="204" pos:column="16"/></name></expr>:<pos:position pos:line="204" pos:column="17"/></case>
      <expr_stmt><expr><call><name pos:line="205" pos:column="7">failf<pos:position pos:line="205" pos:column="12"/></name><argument_list pos:line="205" pos:column="12">(<argument><expr><name pos:line="205" pos:column="13">data<pos:position pos:line="205" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="205" pos:column="19">"Invalid socket address: %d"<pos:position pos:line="205" pos:column="47"/></literal></expr></argument>,<argument><expr><name pos:line="205" pos:column="48">errno<pos:position pos:line="205" pos:column="53"/></name></expr></argument>)<pos:position pos:line="205" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="55"/></expr_stmt>
      <break pos:line="206" pos:column="7">break;<pos:position pos:line="206" pos:column="13"/></break>
    <case pos:line="207" pos:column="5">case <expr><name pos:line="207" pos:column="10">EISCONN<pos:position pos:line="207" pos:column="17"/></name></expr>:<pos:position pos:line="207" pos:column="18"/></case>
      <expr_stmt><expr><call><name pos:line="208" pos:column="7">failf<pos:position pos:line="208" pos:column="12"/></name><argument_list pos:line="208" pos:column="12">(<argument><expr><name pos:line="208" pos:column="13">data<pos:position pos:line="208" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="208" pos:column="19">"Socket already connected: %d"<pos:position pos:line="208" pos:column="49"/></literal></expr></argument>,<argument><expr><name pos:line="208" pos:column="50">errno<pos:position pos:line="208" pos:column="55"/></name></expr></argument>)<pos:position pos:line="208" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="57"/></expr_stmt>
      <break pos:line="209" pos:column="7">break;<pos:position pos:line="209" pos:column="13"/></break>
    <case pos:line="210" pos:column="5">case <expr><name pos:line="210" pos:column="10">ETIMEDOUT<pos:position pos:line="210" pos:column="19"/></name></expr>:<pos:position pos:line="210" pos:column="20"/></case>
      <expr_stmt><expr><call><name pos:line="211" pos:column="7">failf<pos:position pos:line="211" pos:column="12"/></name><argument_list pos:line="211" pos:column="12">(<argument><expr><name pos:line="211" pos:column="13">data<pos:position pos:line="211" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="211" pos:column="19">"Timeout while accepting connection, server busy: %d"<pos:position pos:line="211" pos:column="72"/></literal></expr></argument>,<argument><expr><name pos:line="211" pos:column="73">errno<pos:position pos:line="211" pos:column="78"/></name></expr></argument>)<pos:position pos:line="211" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="80"/></expr_stmt>
      <break pos:line="212" pos:column="7">break;<pos:position pos:line="212" pos:column="13"/></break>
    <case pos:line="213" pos:column="5">case <expr><name pos:line="213" pos:column="10">ENETUNREACH<pos:position pos:line="213" pos:column="21"/></name></expr>:<pos:position pos:line="213" pos:column="22"/></case>
      <expr_stmt><expr><call><name pos:line="214" pos:column="7">failf<pos:position pos:line="214" pos:column="12"/></name><argument_list pos:line="214" pos:column="12">(<argument><expr><name pos:line="214" pos:column="13">data<pos:position pos:line="214" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="214" pos:column="19">"Network is unreachable: %d"<pos:position pos:line="214" pos:column="47"/></literal></expr></argument>,<argument><expr><name pos:line="214" pos:column="48">errno<pos:position pos:line="214" pos:column="53"/></name></expr></argument>)<pos:position pos:line="214" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="55"/></expr_stmt>
      <break pos:line="215" pos:column="7">break;<pos:position pos:line="215" pos:column="13"/></break>
    <case pos:line="216" pos:column="5">case <expr><name pos:line="216" pos:column="10">EADDRINUSE<pos:position pos:line="216" pos:column="20"/></name></expr>:<pos:position pos:line="216" pos:column="21"/></case>
      <expr_stmt><expr><call><name pos:line="217" pos:column="7">failf<pos:position pos:line="217" pos:column="12"/></name><argument_list pos:line="217" pos:column="12">(<argument><expr><name pos:line="217" pos:column="13">data<pos:position pos:line="217" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="217" pos:column="19">"Local address already in use: %d"<pos:position pos:line="217" pos:column="53"/></literal></expr></argument>,<argument><expr><name pos:line="217" pos:column="54">errno<pos:position pos:line="217" pos:column="59"/></name></expr></argument>)<pos:position pos:line="217" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="61"/></expr_stmt>
      <break pos:line="218" pos:column="7">break;<pos:position pos:line="218" pos:column="13"/></break>
    <case pos:line="219" pos:column="5">case <expr><name pos:line="219" pos:column="10">EINPROGRESS<pos:position pos:line="219" pos:column="21"/></name></expr>:<pos:position pos:line="219" pos:column="22"/></case>
      <expr_stmt><expr><call><name pos:line="220" pos:column="7">failf<pos:position pos:line="220" pos:column="12"/></name><argument_list pos:line="220" pos:column="12">(<argument><expr><name pos:line="220" pos:column="13">data<pos:position pos:line="220" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="220" pos:column="19">"Socket is nonblocking and connection can not be completed immediately: %d"<pos:position pos:line="220" pos:column="94"/></literal></expr></argument>,<argument><expr><name pos:line="220" pos:column="95">errno<pos:position pos:line="220" pos:column="100"/></name></expr></argument>)<pos:position pos:line="220" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="102"/></expr_stmt>
      <break pos:line="221" pos:column="7">break;<pos:position pos:line="221" pos:column="13"/></break>
    <case pos:line="222" pos:column="5">case <expr><name pos:line="222" pos:column="10">EALREADY<pos:position pos:line="222" pos:column="18"/></name></expr>:<pos:position pos:line="222" pos:column="19"/></case>
      <expr_stmt><expr><call><name pos:line="223" pos:column="7">failf<pos:position pos:line="223" pos:column="12"/></name><argument_list pos:line="223" pos:column="12">(<argument><expr><name pos:line="223" pos:column="13">data<pos:position pos:line="223" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="223" pos:column="19">"Socket is nonblocking and a previous connection attempt not completed: %d"<pos:position pos:line="223" pos:column="94"/></literal></expr></argument>,<argument><expr><name pos:line="223" pos:column="95">errno<pos:position pos:line="223" pos:column="100"/></name></expr></argument>)<pos:position pos:line="223" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="102"/></expr_stmt>
      <break pos:line="224" pos:column="7">break;<pos:position pos:line="224" pos:column="13"/></break>
    <case pos:line="225" pos:column="5">case <expr><name pos:line="225" pos:column="10">EAGAIN<pos:position pos:line="225" pos:column="16"/></name></expr>:<pos:position pos:line="225" pos:column="17"/></case>
      <expr_stmt><expr><call><name pos:line="226" pos:column="7">failf<pos:position pos:line="226" pos:column="12"/></name><argument_list pos:line="226" pos:column="12">(<argument><expr><name pos:line="226" pos:column="13">data<pos:position pos:line="226" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="226" pos:column="19">"No more free local ports: %d"<pos:position pos:line="226" pos:column="49"/></literal></expr></argument>,<argument><expr><name pos:line="226" pos:column="50">errno<pos:position pos:line="226" pos:column="55"/></name></expr></argument>)<pos:position pos:line="226" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="57"/></expr_stmt>
      <break pos:line="227" pos:column="7">break;<pos:position pos:line="227" pos:column="13"/></break>
    <case pos:line="228" pos:column="5">case <expr><name pos:line="228" pos:column="10">EACCES<pos:position pos:line="228" pos:column="16"/></name></expr>:<pos:position pos:line="228" pos:column="17"/></case>
    <case pos:line="229" pos:column="5">case <expr><name pos:line="229" pos:column="10">EPERM<pos:position pos:line="229" pos:column="15"/></name></expr>:<pos:position pos:line="229" pos:column="16"/></case>
      <expr_stmt><expr><call><name pos:line="230" pos:column="7">failf<pos:position pos:line="230" pos:column="12"/></name><argument_list pos:line="230" pos:column="12">(<argument><expr><name pos:line="230" pos:column="13">data<pos:position pos:line="230" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="230" pos:column="19">"Attempt to connect to broadcast address without socket broadcast flag or local firewall rule violated: %d"<pos:position pos:line="230" pos:column="126"/></literal></expr></argument>,<argument><expr><name pos:line="230" pos:column="127">errno<pos:position pos:line="230" pos:column="132"/></name></expr></argument>)<pos:position pos:line="230" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="134"/></expr_stmt>
      <break pos:line="231" pos:column="7">break;<pos:position pos:line="231" pos:column="13"/></break>
<cpp:endif pos:line="232" pos:column="1">#<cpp:directive pos:line="232" pos:column="2">endif<pos:position pos:line="232" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="233" pos:column="5">case <expr><name pos:line="233" pos:column="10">EINTR<pos:position pos:line="233" pos:column="15"/></name></expr>:<pos:position pos:line="233" pos:column="16"/></case>
      <expr_stmt><expr><call><name pos:line="234" pos:column="7">failf<pos:position pos:line="234" pos:column="12"/></name><argument_list pos:line="234" pos:column="12">(<argument><expr><name pos:line="234" pos:column="13">data<pos:position pos:line="234" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="234" pos:column="19">"Connection timed out"<pos:position pos:line="234" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="234" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="43"/></expr_stmt>
      <break pos:line="235" pos:column="7">break;<pos:position pos:line="235" pos:column="13"/></break>
    <default pos:line="236" pos:column="5">default:<pos:position pos:line="236" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="237" pos:column="7">failf<pos:position pos:line="237" pos:column="12"/></name><argument_list pos:line="237" pos:column="12">(<argument><expr><name pos:line="237" pos:column="13">data<pos:position pos:line="237" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="237" pos:column="19">"Can't connect to server: %d"<pos:position pos:line="237" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="237" pos:column="50">errno<pos:position pos:line="237" pos:column="55"/></name></expr></argument>)<pos:position pos:line="237" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="57"/></expr_stmt>
      <break pos:line="238" pos:column="7">break;<pos:position pos:line="238" pos:column="13"/></break>
    }<pos:position pos:line="239" pos:column="6"/></block></switch>
    <return pos:line="240" pos:column="5">return <expr><name pos:line="240" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="240" pos:column="33"/></name></expr>;<pos:position pos:line="240" pos:column="34"/></return>
  }<pos:position pos:line="241" pos:column="4"/></block></then></if>
<cpp:endif pos:line="242" pos:column="1">#<cpp:directive pos:line="242" pos:column="2">endif<pos:position pos:line="242" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="244" pos:column="3">return <expr><name pos:line="244" pos:column="10">CURLE_OK<pos:position pos:line="244" pos:column="18"/></name></expr>;<pos:position pos:line="244" pos:column="19"/></return>
}<pos:position pos:line="245" pos:column="2"/></block></function></unit>
