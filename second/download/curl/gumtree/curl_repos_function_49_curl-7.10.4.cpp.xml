<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_49_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">sockaddr_in<pos:position pos:line="3" pos:column="21"/></name></name></type> <name pos:line="3" pos:column="22">me<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">sock<pos:position pos:line="4" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="13">msgsock<pos:position pos:line="4" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="22">flag<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">short<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">port<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name pos:line="5" pos:column="25">DEFAULT_PORT<pos:position pos:line="5" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">logfile<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><name pos:line="6" pos:column="25">DEFAULT_LOGFILE<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">part_no<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">FILE<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">pidfile<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
  
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">argc<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">&gt;<pos:position pos:line="10" pos:column="14"/></operator><literal type="number" pos:line="10" pos:column="11">1<pos:position pos:line="10" pos:column="12"/></literal></expr>)<pos:position pos:line="10" pos:column="13"/></condition><then pos:line="10" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="5">port<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <call><name pos:line="11" pos:column="12">atoi<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name><name pos:line="11" pos:column="17">argv<pos:position pos:line="11" pos:column="21"/></name><index pos:line="11" pos:column="21">[<expr><literal type="number" pos:line="11" pos:column="22">1<pos:position pos:line="11" pos:column="23"/></literal></expr>]<pos:position pos:line="11" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="13" pos:column="3">logfp<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">fopen<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">logfile<pos:position pos:line="13" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="26">"a"<pos:position pos:line="13" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><operator pos:line="14" pos:column="7">!<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">logfp<pos:position pos:line="14" pos:column="13"/></name></expr>)<pos:position pos:line="14" pos:column="14"/></condition><then pos:line="14" pos:column="14"> <block pos:line="14" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">perror<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">logfile<pos:position pos:line="15" pos:column="19"/></name></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">exit<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><literal type="number" pos:line="16" pos:column="10">1<pos:position pos:line="16" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">HAVE_SIGNAL<pos:position pos:line="19" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">signal<pos:position pos:line="20" pos:column="9"/></name><argument_list pos:line="20" pos:column="9">(<argument><expr><name pos:line="20" pos:column="10">SIGPIPE<pos:position pos:line="20" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="19">sigpipe_handler<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">siginterrupt<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name pos:line="21" pos:column="16">SIGPIPE<pos:position pos:line="21" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="25">1<pos:position pos:line="21" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="24" pos:column="3">sock<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">socket<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">AF_INET<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="26">SOCK_STREAM<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="39">0<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">sock<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">&lt;<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="14">0<pos:position pos:line="25" pos:column="15"/></literal></expr>)<pos:position pos:line="25" pos:column="16"/></condition><then pos:line="25" pos:column="16"> <block pos:line="25" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">perror<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="string" pos:line="26" pos:column="12">"opening stream socket"<pos:position pos:line="26" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">fprintf<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">logfp<pos:position pos:line="27" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="20">"Error opening socket -- aborting\n"<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">fclose<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">logfp<pos:position pos:line="28" pos:column="17"/></name></expr></argument>)<pos:position pos:line="28" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">exit<pos:position pos:line="29" pos:column="9"/></name><argument_list pos:line="29" pos:column="9">(<argument><expr><literal type="number" pos:line="29" pos:column="10">1<pos:position pos:line="29" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="32" pos:column="3">flag<pos:position pos:line="32" pos:column="7"/></name> <operator pos:line="32" pos:column="8">=<pos:position pos:line="32" pos:column="9"/></operator> <literal type="number" pos:line="32" pos:column="10">1<pos:position pos:line="32" pos:column="11"/></literal></expr>;<pos:position pos:line="32" pos:column="12"/></expr_stmt>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><call><name pos:line="33" pos:column="7">setsockopt<pos:position pos:line="33" pos:column="17"/></name>
      <argument_list pos:line="34" pos:column="7">(<argument><expr><name pos:line="34" pos:column="8">sock<pos:position pos:line="34" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="14">SOL_SOCKET<pos:position pos:line="34" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="26">SO_REUSEADDR<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="40">(<pos:position pos:line="34" pos:column="41"/></operator><specifier pos:line="34" pos:column="41">const<pos:position pos:line="34" pos:column="46"/></specifier> <name pos:line="34" pos:column="47">void<pos:position pos:line="34" pos:column="51"/></name> <operator pos:line="34" pos:column="52">*<pos:position pos:line="34" pos:column="53"/></operator><operator pos:line="34" pos:column="53">)<pos:position pos:line="34" pos:column="54"/></operator> <operator pos:line="34" pos:column="55">&amp;<pos:position pos:line="34" pos:column="60"/></operator><name pos:line="34" pos:column="56">flag<pos:position pos:line="34" pos:column="60"/></name></expr></argument>,
       <argument><expr><sizeof pos:line="35" pos:column="8">sizeof<argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">int<pos:position pos:line="35" pos:column="18"/></name></expr></argument>)<pos:position pos:line="35" pos:column="19"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="20"/></argument_list></call> <operator pos:line="35" pos:column="21">&lt;<pos:position pos:line="35" pos:column="25"/></operator> <literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25"> <block pos:line="35" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">perror<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="string" pos:line="36" pos:column="12">"setsockopt(SO_REUSEADDR)"<pos:position pos:line="36" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="39" pos:column="3">me<pos:position pos:line="39" pos:column="5"/></name><operator pos:line="39" pos:column="5">.<pos:position pos:line="39" pos:column="6"/></operator><name pos:line="39" pos:column="6">sin_family<pos:position pos:line="39" pos:column="16"/></name></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">AF_INET<pos:position pos:line="39" pos:column="26"/></name></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">me<pos:position pos:line="40" pos:column="5"/></name><operator pos:line="40" pos:column="5">.<pos:position pos:line="40" pos:column="6"/></operator><name pos:line="40" pos:column="6">sin_addr<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">.<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">s_addr<pos:position pos:line="40" pos:column="21"/></name></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="24">INADDR_ANY<pos:position pos:line="40" pos:column="34"/></name></expr>;<pos:position pos:line="40" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="41" pos:column="3">me<pos:position pos:line="41" pos:column="5"/></name><operator pos:line="41" pos:column="5">.<pos:position pos:line="41" pos:column="6"/></operator><name pos:line="41" pos:column="6">sin_port<pos:position pos:line="41" pos:column="14"/></name></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <call><name pos:line="41" pos:column="17">htons<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">port<pos:position pos:line="41" pos:column="27"/></name></expr></argument>)<pos:position pos:line="41" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="29"/></expr_stmt>
  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><call><name pos:line="42" pos:column="7">bind<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">sock<pos:position pos:line="42" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="18">(<pos:position pos:line="42" pos:column="19"/></operator>struct <name pos:line="42" pos:column="26">sockaddr<pos:position pos:line="42" pos:column="34"/></name> <operator pos:line="42" pos:column="35">*<pos:position pos:line="42" pos:column="36"/></operator><operator pos:line="42" pos:column="36">)<pos:position pos:line="42" pos:column="37"/></operator> <operator pos:line="42" pos:column="38">&amp;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="39">me<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="43">sizeof <name pos:line="42" pos:column="50">me<pos:position pos:line="42" pos:column="52"/></name></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call> <operator pos:line="42" pos:column="54">&lt;<pos:position pos:line="42" pos:column="58"/></operator> <literal type="number" pos:line="42" pos:column="56">0<pos:position pos:line="42" pos:column="57"/></literal></expr>)<pos:position pos:line="42" pos:column="58"/></condition><then pos:line="42" pos:column="58"> <block pos:line="42" pos:column="59">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">perror<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><literal type="string" pos:line="43" pos:column="12">"binding stream socket"<pos:position pos:line="43" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">fprintf<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><name pos:line="44" pos:column="13">logfp<pos:position pos:line="44" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="20">"Error binding socket -- aborting\n"<pos:position pos:line="44" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">fclose<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><name pos:line="45" pos:column="12">logfp<pos:position pos:line="45" pos:column="17"/></name></expr></argument>)<pos:position pos:line="45" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">exit<pos:position pos:line="46" pos:column="9"/></name><argument_list pos:line="46" pos:column="9">(<argument><expr><literal type="number" pos:line="46" pos:column="10">1<pos:position pos:line="46" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="49" pos:column="3">pidfile<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <call><name pos:line="49" pos:column="13">fopen<pos:position pos:line="49" pos:column="18"/></name><argument_list pos:line="49" pos:column="18">(<argument><expr><literal type="string" pos:line="49" pos:column="19">".http.pid"<pos:position pos:line="49" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="32">"w"<pos:position pos:line="49" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>
  <if pos:line="50" pos:column="3">if<condition pos:line="50" pos:column="5">(<expr><name pos:line="50" pos:column="6">pidfile<pos:position pos:line="50" pos:column="13"/></name></expr>)<pos:position pos:line="50" pos:column="14"/></condition><then pos:line="50" pos:column="14"> <block pos:line="50" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">fprintf<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">(<argument><expr><name pos:line="51" pos:column="13">pidfile<pos:position pos:line="51" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="22">"%d\n"<pos:position pos:line="51" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="30">(<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="31">int<pos:position pos:line="51" pos:column="34"/></name><operator pos:line="51" pos:column="34">)<pos:position pos:line="51" pos:column="35"/></operator><call><name pos:line="51" pos:column="35">getpid<pos:position pos:line="51" pos:column="41"/></name><argument_list pos:line="51" pos:column="41">()<pos:position pos:line="51" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">fclose<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name pos:line="52" pos:column="12">pidfile<pos:position pos:line="52" pos:column="19"/></name></expr></argument>)<pos:position pos:line="52" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="53" pos:column="4"/></block></then>
  <else pos:line="54" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="5">fprintf<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name pos:line="55" pos:column="13">stderr<pos:position pos:line="55" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="21">"Couldn't write pid file\n"<pos:position pos:line="55" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="50"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="57" pos:column="3">/* start accepting connections */</comment>
  <expr_stmt><expr><call><name pos:line="58" pos:column="3">listen<pos:position pos:line="58" pos:column="9"/></name><argument_list pos:line="58" pos:column="9">(<argument><expr><name pos:line="58" pos:column="10">sock<pos:position pos:line="58" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="16">5<pos:position pos:line="58" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="19"/></expr_stmt>

  <while pos:line="60" pos:column="3">while <condition pos:line="60" pos:column="9">(<expr><literal type="number" pos:line="60" pos:column="10">1<pos:position pos:line="60" pos:column="11"/></literal></expr>)<pos:position pos:line="60" pos:column="12"/></condition> <block pos:line="60" pos:column="13">{
    <decl_stmt><decl><type><name pos:line="61" pos:column="5">int<pos:position pos:line="61" pos:column="8"/></name></type> <name pos:line="61" pos:column="9">doc<pos:position pos:line="61" pos:column="12"/></name></decl>;<pos:position pos:line="61" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><name pos:line="63" pos:column="5">msgsock<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">=<pos:position pos:line="63" pos:column="14"/></operator> <call><name pos:line="63" pos:column="15">accept<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">sock<pos:position pos:line="63" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="28">NULL<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">NULL<pos:position pos:line="63" pos:column="38"/></name></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt>
    
    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">msgsock<pos:position pos:line="65" pos:column="16"/></name> <operator pos:line="65" pos:column="17">==<pos:position pos:line="65" pos:column="19"/></operator> <operator pos:line="65" pos:column="20">-<pos:position pos:line="65" pos:column="21"/></operator><literal type="number" pos:line="65" pos:column="21">1<pos:position pos:line="65" pos:column="22"/></literal></expr>)<pos:position pos:line="65" pos:column="23"/></condition><then pos:line="65" pos:column="23">
      <block type="pseudo"><continue pos:line="66" pos:column="7">continue;<pos:position pos:line="66" pos:column="16"/></continue></block></then></if>
    
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">logmsg<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><literal type="string" pos:line="68" pos:column="12">"New client connected"<pos:position pos:line="68" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt>

    <do pos:line="70" pos:column="5">do <block pos:line="70" pos:column="8">{

      <expr_stmt><expr><name pos:line="72" pos:column="7">doc<pos:position pos:line="72" pos:column="10"/></name> <operator pos:line="72" pos:column="11">=<pos:position pos:line="72" pos:column="12"/></operator> <call><name pos:line="72" pos:column="13">get_request<pos:position pos:line="72" pos:column="24"/></name><argument_list pos:line="72" pos:column="24">(<argument><expr><name pos:line="72" pos:column="25">msgsock<pos:position pos:line="72" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="34">&amp;<pos:position pos:line="72" pos:column="39"/></operator><name pos:line="72" pos:column="35">part_no<pos:position pos:line="72" pos:column="42"/></name></expr></argument>)<pos:position pos:line="72" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="73" pos:column="7">logmsg<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">(<argument><expr><literal type="string" pos:line="73" pos:column="14">"Received request, now send response"<pos:position pos:line="73" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="74" pos:column="7">send_doc<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><name pos:line="74" pos:column="16">msgsock<pos:position pos:line="74" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="25">doc<pos:position pos:line="74" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="30">part_no<pos:position pos:line="74" pos:column="37"/></name></expr></argument>)<pos:position pos:line="74" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="39"/></expr_stmt>

      <comment type="block" pos:line="76" pos:column="7">/* if we got a CONNECT, loop and get another request as well! */</comment>
    }<pos:position pos:line="77" pos:column="6"/></block> while<condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">doc<pos:position pos:line="77" pos:column="16"/></name> <operator pos:line="77" pos:column="17">==<pos:position pos:line="77" pos:column="19"/></operator> <name pos:line="77" pos:column="20">DOCNUMBER_CONNECT<pos:position pos:line="77" pos:column="37"/></name></expr>)<pos:position pos:line="77" pos:column="38"/></condition>;<pos:position pos:line="77" pos:column="39"/></do>

    <expr_stmt><expr><call><name pos:line="79" pos:column="5">logmsg<pos:position pos:line="79" pos:column="11"/></name><argument_list pos:line="79" pos:column="11">(<argument><expr><literal type="string" pos:line="79" pos:column="12">"Closing client connection"<pos:position pos:line="79" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">close<pos:position pos:line="80" pos:column="10"/></name><argument_list pos:line="80" pos:column="10">(<argument><expr><name pos:line="80" pos:column="11">msgsock<pos:position pos:line="80" pos:column="18"/></name></expr></argument>)<pos:position pos:line="80" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="81" pos:column="4"/></block></while>
  
  <expr_stmt><expr><call><name pos:line="83" pos:column="3">close<pos:position pos:line="83" pos:column="8"/></name><argument_list pos:line="83" pos:column="8">(<argument><expr><name pos:line="83" pos:column="9">sock<pos:position pos:line="83" pos:column="13"/></name></expr></argument>)<pos:position pos:line="83" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="84" pos:column="3">fclose<pos:position pos:line="84" pos:column="9"/></name><argument_list pos:line="84" pos:column="9">(<argument><expr><name pos:line="84" pos:column="10">logfp<pos:position pos:line="84" pos:column="15"/></name></expr></argument>)<pos:position pos:line="84" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="17"/></expr_stmt>
  
  <return pos:line="86" pos:column="3">return <expr><literal type="number" pos:line="86" pos:column="10">0<pos:position pos:line="86" pos:column="11"/></literal></expr>;<pos:position pos:line="86" pos:column="12"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
