<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_258_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wait_on_socket<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">curl_socket_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">sockfd<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">for_recv<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">long<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">timeout_ms<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">timeval<pos:position pos:line="3" pos:column="17"/></name></name></type> <name pos:line="3" pos:column="18">tv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">fd_set<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">infd<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">outfd<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">errfd<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">res<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">tv<pos:position pos:line="7" pos:column="5"/></name><operator pos:line="7" pos:column="5">.<pos:position pos:line="7" pos:column="6"/></operator><name pos:line="7" pos:column="6">tv_sec<pos:position pos:line="7" pos:column="12"/></name></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">timeout_ms<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">/<pos:position pos:line="7" pos:column="27"/></operator> <literal type="number" pos:line="7" pos:column="28">1000<pos:position pos:line="7" pos:column="32"/></literal></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">tv<pos:position pos:line="8" pos:column="5"/></name><operator pos:line="8" pos:column="5">.<pos:position pos:line="8" pos:column="6"/></operator><name pos:line="8" pos:column="6">tv_usec<pos:position pos:line="8" pos:column="13"/></name></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">timeout_ms<pos:position pos:line="8" pos:column="27"/></name> <operator pos:line="8" pos:column="28">%<pos:position pos:line="8" pos:column="29"/></operator> <literal type="number" pos:line="8" pos:column="30">1000<pos:position pos:line="8" pos:column="34"/></literal><operator pos:line="8" pos:column="34">)<pos:position pos:line="8" pos:column="35"/></operator> <operator pos:line="8" pos:column="36">*<pos:position pos:line="8" pos:column="37"/></operator> <literal type="number" pos:line="8" pos:column="38">1000<pos:position pos:line="8" pos:column="42"/></literal></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">FD_ZERO<pos:position pos:line="10" pos:column="10"/></name><argument_list pos:line="10" pos:column="10">(<argument><expr><operator pos:line="10" pos:column="11">&amp;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="12">infd<pos:position pos:line="10" pos:column="16"/></name></expr></argument>)<pos:position pos:line="10" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">FD_ZERO<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><operator pos:line="11" pos:column="11">&amp;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="12">outfd<pos:position pos:line="11" pos:column="17"/></name></expr></argument>)<pos:position pos:line="11" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">FD_ZERO<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><operator pos:line="12" pos:column="11">&amp;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="12">errfd<pos:position pos:line="12" pos:column="17"/></name></expr></argument>)<pos:position pos:line="12" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">FD_SET<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">sockfd<pos:position pos:line="14" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="18">&amp;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="19">errfd<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt> <comment type="block" pos:line="14" pos:column="27">/* always check for error */</comment>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">for_recv<pos:position pos:line="16" pos:column="14"/></name></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15"> <block pos:line="16" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">FD_SET<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">sockfd<pos:position pos:line="17" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="20">&amp;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="21">infd<pos:position pos:line="17" pos:column="25"/></name></expr></argument>)<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then>
  <else pos:line="19" pos:column="3">else <block pos:line="19" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">FD_SET<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">sockfd<pos:position pos:line="20" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="20">&amp;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="21">outfd<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="23" pos:column="3">/* select() returns the number of signalled sockets or -1 */</comment>
  <expr_stmt><expr><name pos:line="24" pos:column="3">res<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">select<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><operator pos:line="24" pos:column="16">(<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">int<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">)<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">sockfd<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">+<pos:position pos:line="24" pos:column="29"/></operator> <literal type="number" pos:line="24" pos:column="30">1<pos:position pos:line="24" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="33">&amp;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="34">infd<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="40">&amp;<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="41">outfd<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="48">&amp;<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="49">errfd<pos:position pos:line="24" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="56">&amp;<pos:position pos:line="24" pos:column="61"/></operator><name pos:line="24" pos:column="57">tv<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="61"/></expr_stmt>
  <return pos:line="25" pos:column="3">return <expr><name pos:line="25" pos:column="10">res<pos:position pos:line="25" pos:column="13"/></name></expr>;<pos:position pos:line="25" pos:column="14"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
