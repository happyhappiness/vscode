<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2268_curl-7.41.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_pin_peer_pubkey<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">pinnedpubkey<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">unsigned<pos:position pos:line="2" pos:column="45"/></name> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">pubkey<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">size_t<pos:position pos:line="2" pos:column="66"/></name></type> <name pos:line="2" pos:column="67">pubkeylen<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">FILE<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">fp<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">buf<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">NULL<pos:position pos:line="5" pos:column="28"/></name></expr></init></decl>, <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="31">pem_ptr<pos:position pos:line="5" pos:column="38"/></name> <init pos:line="5" pos:column="39">= <expr><name pos:line="5" pos:column="41">NULL<pos:position pos:line="5" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">long<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">filesize<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">size<pos:position pos:line="7" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="16">pem_len<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLcode<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">pem_read<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">CURLcode<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">result<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><name pos:line="9" pos:column="21">CURLE_SSL_PINNEDPUBKEYNOTMATCH<pos:position pos:line="9" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="52"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* if a path wasn't specified, don't pin */</comment>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">pinnedpubkey<pos:position pos:line="12" pos:column="19"/></name></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">CURLE_OK<pos:position pos:line="13" pos:column="20"/></name></expr>;<pos:position pos:line="13" pos:column="21"/></return></block></then></if>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">!<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">pubkey<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">||<pos:position pos:line="14" pos:column="16"/></operator> <operator pos:line="14" pos:column="17">!<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">pubkeylen<pos:position pos:line="14" pos:column="27"/></name></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">result<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="16" pos:column="3">fp<pos:position pos:line="16" pos:column="5"/></name> <operator pos:line="16" pos:column="6">=<pos:position pos:line="16" pos:column="7"/></operator> <call><name pos:line="16" pos:column="8">fopen<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><name pos:line="16" pos:column="14">pinnedpubkey<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="28">"rb"<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">fp<pos:position pos:line="17" pos:column="9"/></name></expr>)<pos:position pos:line="17" pos:column="10"/></condition><then pos:line="17" pos:column="10">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">result<pos:position pos:line="18" pos:column="18"/></name></expr>;<pos:position pos:line="18" pos:column="19"/></return></block></then></if>

  <do pos:line="20" pos:column="3">do <block pos:line="20" pos:column="6">{
    <comment type="block" pos:line="21" pos:column="5">/* Determine the file's size */</comment>
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><call><name pos:line="22" pos:column="8">fseek<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><name pos:line="22" pos:column="14">fp<pos:position pos:line="22" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="21">SEEK_END<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31">
      <block type="pseudo"><break pos:line="23" pos:column="7">break;<pos:position pos:line="23" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="24" pos:column="5">filesize<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <call><name pos:line="24" pos:column="16">ftell<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">fp<pos:position pos:line="24" pos:column="24"/></name></expr></argument>)<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><call><name pos:line="25" pos:column="8">fseek<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">fp<pos:position pos:line="25" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="21">SEEK_SET<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31">
      <block type="pseudo"><break pos:line="26" pos:column="7">break;<pos:position pos:line="26" pos:column="13"/></break></block></then></if>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><name><name pos:line="27" pos:column="8">filesize<pos:position pos:line="27" pos:column="16"/></name> <argument_list type="generic" pos:line="27" pos:column="17">&lt; <argument><expr><literal type="number" pos:line="27" pos:column="19">0<pos:position pos:line="27" pos:column="20"/></literal> <operator pos:line="27" pos:column="21">||<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">filesize<pos:position pos:line="27" pos:column="32"/></name></expr></argument> &gt;<pos:position pos:line="27" pos:column="37"/></argument_list></name> <name pos:line="27" pos:column="35">MAX_PINNED_PUBKEY_SIZE<pos:position pos:line="27" pos:column="57"/></name></expr>)<pos:position pos:line="27" pos:column="58"/></condition><then pos:line="27" pos:column="58">
      <block type="pseudo"><break pos:line="28" pos:column="7">break;<pos:position pos:line="28" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="30" pos:column="5">/*
     * if the size of our certificate is bigger than the file
     * size then it can't match
     */</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">size<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">curlx_sotouz<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><operator pos:line="34" pos:column="25">(<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">curl_off_t<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">)<pos:position pos:line="34" pos:column="37"/></operator> <name pos:line="34" pos:column="38">filesize<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name pos:line="35" pos:column="8">pubkeylen<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">&gt;<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="20">size<pos:position pos:line="35" pos:column="24"/></name></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25">
      <block type="pseudo"><break pos:line="36" pos:column="7">break;<pos:position pos:line="36" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="38" pos:column="5">/*
     * Allocate buffer for the pinned key
     * With 1 additional byte for null terminator in case of PEM key
     */</comment>
    <expr_stmt><expr><name pos:line="42" pos:column="5">buf<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <call><name pos:line="42" pos:column="11">malloc<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">size<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">+<pos:position pos:line="42" pos:column="24"/></operator> <literal type="number" pos:line="42" pos:column="25">1<pos:position pos:line="42" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><operator pos:line="43" pos:column="8">!<pos:position pos:line="43" pos:column="9"/></operator><name pos:line="43" pos:column="9">buf<pos:position pos:line="43" pos:column="12"/></name></expr>)<pos:position pos:line="43" pos:column="13"/></condition><then pos:line="43" pos:column="13">
      <block type="pseudo"><break pos:line="44" pos:column="7">break;<pos:position pos:line="44" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="46" pos:column="5">/* Returns number of elements read, which should be 1 */</comment>
    <if pos:line="47" pos:column="5">if<condition pos:line="47" pos:column="7">(<expr><operator pos:line="47" pos:column="8">(<pos:position pos:line="47" pos:column="9"/></operator><name pos:line="47" pos:column="9">int<pos:position pos:line="47" pos:column="12"/></name><operator pos:line="47" pos:column="12">)<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">fread<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">buf<pos:position pos:line="47" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="25">size<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="31">1<pos:position pos:line="47" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="34">fp<pos:position pos:line="47" pos:column="36"/></name></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call> <operator pos:line="47" pos:column="38">!=<pos:position pos:line="47" pos:column="40"/></operator> <literal type="number" pos:line="47" pos:column="41">1<pos:position pos:line="47" pos:column="42"/></literal></expr>)<pos:position pos:line="47" pos:column="43"/></condition><then pos:line="47" pos:column="43">
      <block type="pseudo"><break pos:line="48" pos:column="7">break;<pos:position pos:line="48" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="50" pos:column="5">/* If the sizes are the same, it can't be base64 encoded, must be der */</comment>
    <if pos:line="51" pos:column="5">if<condition pos:line="51" pos:column="7">(<expr><name pos:line="51" pos:column="8">pubkeylen<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">==<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="21">size<pos:position pos:line="51" pos:column="25"/></name></expr>)<pos:position pos:line="51" pos:column="26"/></condition><then pos:line="51" pos:column="26"> <block pos:line="51" pos:column="27">{
      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><operator pos:line="52" pos:column="10">!<pos:position pos:line="52" pos:column="11"/></operator><call><name pos:line="52" pos:column="11">memcmp<pos:position pos:line="52" pos:column="17"/></name><argument_list pos:line="52" pos:column="17">(<argument><expr><name pos:line="52" pos:column="18">pubkey<pos:position pos:line="52" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="26">buf<pos:position pos:line="52" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="31">pubkeylen<pos:position pos:line="52" pos:column="40"/></name></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="42"/></condition><then pos:line="52" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="9">result<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">CURLE_OK<pos:position pos:line="53" pos:column="26"/></name></expr>;<pos:position pos:line="53" pos:column="27"/></expr_stmt></block></then></if>
      <break pos:line="54" pos:column="7">break;<pos:position pos:line="54" pos:column="13"/></break>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="57" pos:column="5">/*
     * Otherwise we will assume it's PEM and try to decode it
     * after placing null terminator
     */</comment>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">buf<pos:position pos:line="61" pos:column="8"/></name><index pos:line="61" pos:column="8">[<expr><name pos:line="61" pos:column="9">size<pos:position pos:line="61" pos:column="13"/></name></expr>]<pos:position pos:line="61" pos:column="14"/></index></name> <operator pos:line="61" pos:column="15">=<pos:position pos:line="61" pos:column="16"/></operator> <literal type="char" pos:line="61" pos:column="17">'\0'<pos:position pos:line="61" pos:column="21"/></literal></expr>;<pos:position pos:line="61" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="62" pos:column="5">pem_read<pos:position pos:line="62" pos:column="13"/></name> <operator pos:line="62" pos:column="14">=<pos:position pos:line="62" pos:column="15"/></operator> <call><name pos:line="62" pos:column="16">pubkey_pem_to_der<pos:position pos:line="62" pos:column="33"/></name><argument_list pos:line="62" pos:column="33">(<argument><expr><operator pos:line="62" pos:column="34">(<pos:position pos:line="62" pos:column="35"/></operator><specifier pos:line="62" pos:column="35">const<pos:position pos:line="62" pos:column="40"/></specifier> <name pos:line="62" pos:column="41">char<pos:position pos:line="62" pos:column="45"/></name> <operator pos:line="62" pos:column="46">*<pos:position pos:line="62" pos:column="47"/></operator><operator pos:line="62" pos:column="47">)<pos:position pos:line="62" pos:column="48"/></operator><name pos:line="62" pos:column="48">buf<pos:position pos:line="62" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="53">&amp;<pos:position pos:line="62" pos:column="58"/></operator><name pos:line="62" pos:column="54">pem_ptr<pos:position pos:line="62" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="63">&amp;<pos:position pos:line="62" pos:column="68"/></operator><name pos:line="62" pos:column="64">pem_len<pos:position pos:line="62" pos:column="71"/></name></expr></argument>)<pos:position pos:line="62" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="73"/></expr_stmt>
    <comment type="block" pos:line="63" pos:column="5">/* if it wasn't read successfully, exit */</comment>
    <if pos:line="64" pos:column="5">if<condition pos:line="64" pos:column="7">(<expr><name pos:line="64" pos:column="8">pem_read<pos:position pos:line="64" pos:column="16"/></name></expr>)<pos:position pos:line="64" pos:column="17"/></condition><then pos:line="64" pos:column="17">
      <block type="pseudo"><break pos:line="65" pos:column="7">break;<pos:position pos:line="65" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/*
     * if the size of our certificate doesn't match the size of
     * the decoded file, they can't be the same, otherwise compare
     */</comment>
    <if pos:line="71" pos:column="5">if<condition pos:line="71" pos:column="7">(<expr><name pos:line="71" pos:column="8">pubkeylen<pos:position pos:line="71" pos:column="17"/></name> <operator pos:line="71" pos:column="18">==<pos:position pos:line="71" pos:column="20"/></operator> <name pos:line="71" pos:column="21">pem_len<pos:position pos:line="71" pos:column="28"/></name> <operator pos:line="71" pos:column="29">&amp;&amp;<pos:position pos:line="71" pos:column="39"/></operator> <operator pos:line="71" pos:column="32">!<pos:position pos:line="71" pos:column="33"/></operator><call><name pos:line="71" pos:column="33">memcmp<pos:position pos:line="71" pos:column="39"/></name><argument_list pos:line="71" pos:column="39">(<argument><expr><name pos:line="71" pos:column="40">pubkey<pos:position pos:line="71" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="48">pem_ptr<pos:position pos:line="71" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="57">pubkeylen<pos:position pos:line="71" pos:column="66"/></name></expr></argument>)<pos:position pos:line="71" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="68"/></condition><then pos:line="71" pos:column="68">
      <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="7">result<pos:position pos:line="72" pos:column="13"/></name> <operator pos:line="72" pos:column="14">=<pos:position pos:line="72" pos:column="15"/></operator> <name pos:line="72" pos:column="16">CURLE_OK<pos:position pos:line="72" pos:column="24"/></name></expr>;<pos:position pos:line="72" pos:column="25"/></expr_stmt></block></then></if>
  }<pos:position pos:line="73" pos:column="4"/></block> while<condition pos:line="73" pos:column="10">(<expr><literal type="number" pos:line="73" pos:column="11">0<pos:position pos:line="73" pos:column="12"/></literal></expr>)<pos:position pos:line="73" pos:column="13"/></condition>;<pos:position pos:line="73" pos:column="14"/></do>

  <expr_stmt><expr><call><name pos:line="75" pos:column="3">Curl_safefree<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">buf<pos:position pos:line="75" pos:column="20"/></name></expr></argument>)<pos:position pos:line="75" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="76" pos:column="3">Curl_safefree<pos:position pos:line="76" pos:column="16"/></name><argument_list pos:line="76" pos:column="16">(<argument><expr><name pos:line="76" pos:column="17">pem_ptr<pos:position pos:line="76" pos:column="24"/></name></expr></argument>)<pos:position pos:line="76" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="77" pos:column="3">fclose<pos:position pos:line="77" pos:column="9"/></name><argument_list pos:line="77" pos:column="9">(<argument><expr><name pos:line="77" pos:column="10">fp<pos:position pos:line="77" pos:column="12"/></name></expr></argument>)<pos:position pos:line="77" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="14"/></expr_stmt>

  <return pos:line="79" pos:column="3">return <expr><name pos:line="79" pos:column="10">result<pos:position pos:line="79" pos:column="16"/></name></expr>;<pos:position pos:line="79" pos:column="17"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
