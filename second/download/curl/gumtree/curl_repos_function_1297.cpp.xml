<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1297.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">checkrtspprefix<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">SessionHandle<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">data<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">s<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>
<block pos:line="4" pos:column="1">{

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="6" pos:column="29"/></name></cpp:ifdef>
  <comment type="block" pos:line="7" pos:column="3">/* convert from the network encoding using a scratch area */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">scratch<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><call><name pos:line="8" pos:column="19">strdup<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">s<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">NULL<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">==<pos:position pos:line="9" pos:column="13"/></operator> <name pos:line="9" pos:column="14">scratch<pos:position pos:line="9" pos:column="21"/></name></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22"> <block pos:line="9" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">failf<pos:position pos:line="10" pos:column="10"/></name> <argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">data<pos:position pos:line="10" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="18">"Failed to allocate memory for conversion!"<pos:position pos:line="10" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="63"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">FALSE<pos:position pos:line="11" pos:column="17"/></name></expr>;<pos:position pos:line="11" pos:column="18"/></return> <comment type="block" pos:line="11" pos:column="19">/* can't return CURLE_OUT_OF_MEMORY so return FALSE */</comment>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">CURLE_OK<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">!=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">Curl_convert_from_network<pos:position pos:line="13" pos:column="43"/></name><argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">data<pos:position pos:line="13" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="50">scratch<pos:position pos:line="13" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="59">strlen<pos:position pos:line="13" pos:column="65"/></name><argument_list pos:line="13" pos:column="65">(<argument><expr><name pos:line="13" pos:column="66">s<pos:position pos:line="13" pos:column="67"/></name></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call><operator pos:line="13" pos:column="68">+<pos:position pos:line="13" pos:column="69"/></operator><literal type="number" pos:line="13" pos:column="69">1<pos:position pos:line="13" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="72"/></condition><then pos:line="13" pos:column="72"> <block pos:line="13" pos:column="73">{
    <comment type="block" pos:line="14" pos:column="5">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">free<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">scratch<pos:position pos:line="15" pos:column="17"/></name></expr></argument>)<pos:position pos:line="15" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">FALSE<pos:position pos:line="16" pos:column="17"/></name></expr>;<pos:position pos:line="16" pos:column="18"/></return> <comment type="block" pos:line="16" pos:column="19">/* can't return CURLE_foobar so return FALSE */</comment>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="18" pos:column="3">s<pos:position pos:line="18" pos:column="4"/></name> <operator pos:line="18" pos:column="5">=<pos:position pos:line="18" pos:column="6"/></operator> <name pos:line="18" pos:column="7">scratch<pos:position pos:line="18" pos:column="14"/></name></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>
<cpp:else pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">else<pos:position pos:line="19" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="20" pos:column="3">(<pos:position pos:line="20" pos:column="4"/></operator><name pos:line="20" pos:column="4">void<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">)<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="9">data<pos:position pos:line="20" pos:column="13"/></name></expr>;<pos:position pos:line="20" pos:column="14"/></expr_stmt> <comment type="block" pos:line="20" pos:column="15">/* unused */</comment>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="21" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><call><name pos:line="22" pos:column="6">checkprefix<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><literal type="string" pos:line="22" pos:column="18">"RTSP/"<pos:position pos:line="22" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="27">s<pos:position pos:line="22" pos:column="28"/></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30">
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">TRUE<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></return></block></then>
  <else pos:line="24" pos:column="3">else
    <block type="pseudo"><return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">FALSE<pos:position pos:line="25" pos:column="17"/></name></expr>;<pos:position pos:line="25" pos:column="18"/></return></block></else></if>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
