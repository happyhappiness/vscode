<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_241_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLMcode<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">perform<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">CURLM<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type> <name pos:line="1" pos:column="34">multi<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">handles<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">maxfd<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLMcode<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">code<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">fd_set<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">fdread<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">fdwrite<pos:position pos:line="5" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="27">fdexcep<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">timeval<pos:position pos:line="6" pos:column="17"/></name></name></type> <name pos:line="6" pos:column="18">mp_start<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">mp_timedout<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">FALSE<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">mp_timedout<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">FALSE<pos:position pos:line="9" pos:column="22"/></name></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">mp_start<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">tutil_tvnow<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">()<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init pos:line="12" pos:column="8">;<pos:position pos:line="12" pos:column="9"/></init><condition pos:line="12" pos:column="9">;<pos:position pos:line="12" pos:column="10"/></condition><incr/>)<pos:position pos:line="12" pos:column="11"/></control> <block pos:line="12" pos:column="12">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">code<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">curl_multi_perform<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">multi<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="38">&amp;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="39">handles<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">tutil_tvdiff<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><call><name pos:line="14" pos:column="22">tutil_tvnow<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">()<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">mp_start<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call> <operator pos:line="14" pos:column="47">&gt;<pos:position pos:line="14" pos:column="51"/></operator> 
        <name pos:line="15" pos:column="9">MULTI_PERFORM_HANG_TIMEOUT<pos:position pos:line="15" pos:column="35"/></name></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
      <expr_stmt><expr><name pos:line="16" pos:column="7">mp_timedout<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">TRUE<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
      <break pos:line="17" pos:column="7">break;<pos:position pos:line="17" pos:column="13"/></break>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">handles<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">&lt;=<pos:position pos:line="19" pos:column="22"/></operator> <literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22">
      <block type="pseudo"><return pos:line="20" pos:column="7">return <expr><name pos:line="20" pos:column="14">CURLM_OK<pos:position pos:line="20" pos:column="22"/></name></expr>;<pos:position pos:line="20" pos:column="23"/></return></block></then></if>

    <switch pos:line="22" pos:column="5">switch <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">code<pos:position pos:line="22" pos:column="17"/></name></expr>)<pos:position pos:line="22" pos:column="18"/></condition> <block pos:line="22" pos:column="19">{
      <case pos:line="23" pos:column="7">case <expr><name pos:line="23" pos:column="12">CURLM_OK<pos:position pos:line="23" pos:column="20"/></name></expr>:<pos:position pos:line="23" pos:column="21"/></case>
        <break pos:line="24" pos:column="9">break;<pos:position pos:line="24" pos:column="15"/></break>
      <case pos:line="25" pos:column="7">case <expr><name pos:line="25" pos:column="12">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="25" pos:column="36"/></name></expr>:<pos:position pos:line="25" pos:column="37"/></case>
        <continue pos:line="26" pos:column="9">continue;<pos:position pos:line="26" pos:column="18"/></continue>
      <default pos:line="27" pos:column="7">default:<pos:position pos:line="27" pos:column="15"/></default>
        <return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">code<pos:position pos:line="28" pos:column="20"/></name></expr>;<pos:position pos:line="28" pos:column="21"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></switch>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">FD_ZERO<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><operator pos:line="31" pos:column="13">&amp;<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="14">fdread<pos:position pos:line="31" pos:column="20"/></name></expr></argument>)<pos:position pos:line="31" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">FD_ZERO<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><operator pos:line="32" pos:column="13">&amp;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="14">fdwrite<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">FD_ZERO<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><operator pos:line="33" pos:column="13">&amp;<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="14">fdexcep<pos:position pos:line="33" pos:column="21"/></name></expr></argument>)<pos:position pos:line="33" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">curl_multi_fdset<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name pos:line="34" pos:column="22">multi<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="29">&amp;<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="30">fdread<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="38">&amp;<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="39">fdwrite<pos:position pos:line="34" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="48">&amp;<pos:position pos:line="34" pos:column="53"/></operator><name pos:line="34" pos:column="49">fdexcep<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="58">&amp;<pos:position pos:line="34" pos:column="63"/></operator><name pos:line="34" pos:column="59">maxfd<pos:position pos:line="34" pos:column="64"/></name></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="66"/></expr_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">maxfd<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">&lt;<pos:position pos:line="35" pos:column="19"/></operator> <literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19">
      <block type="pseudo"><return pos:line="36" pos:column="7">return <expr><operator pos:line="36" pos:column="14">(<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">CURLMcode<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">)<pos:position pos:line="36" pos:column="25"/></operator> <operator pos:line="36" pos:column="26">~<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">CURLM_OK<pos:position pos:line="36" pos:column="35"/></name></expr>;<pos:position pos:line="36" pos:column="36"/></return></block></then></if>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><call><name pos:line="37" pos:column="9">select<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">maxfd<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">+<pos:position pos:line="37" pos:column="23"/></operator> <literal type="number" pos:line="37" pos:column="24">1<pos:position pos:line="37" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="27">&amp;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="28">fdread<pos:position pos:line="37" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="36">&amp;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="37">fdwrite<pos:position pos:line="37" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="46">&amp;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="47">fdexcep<pos:position pos:line="37" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="56">0<pos:position pos:line="37" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></call> <operator pos:line="37" pos:column="59">==<pos:position pos:line="37" pos:column="61"/></operator> <operator pos:line="37" pos:column="62">-<pos:position pos:line="37" pos:column="63"/></operator><literal type="number" pos:line="37" pos:column="63">1<pos:position pos:line="37" pos:column="64"/></literal></expr>)<pos:position pos:line="37" pos:column="65"/></condition><then pos:line="37" pos:column="65">
      <block type="pseudo"><return pos:line="38" pos:column="7">return <expr><operator pos:line="38" pos:column="14">(<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">CURLMcode<pos:position pos:line="38" pos:column="24"/></name><operator pos:line="38" pos:column="24">)<pos:position pos:line="38" pos:column="25"/></operator> <operator pos:line="38" pos:column="26">~<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">CURLM_OK<pos:position pos:line="38" pos:column="35"/></name></expr>;<pos:position pos:line="38" pos:column="36"/></return></block></then></if>
  }<pos:position pos:line="39" pos:column="4"/></block></for>

  <comment type="block" pos:line="41" pos:column="3">/* We only reach this point if (mp_timedout) */</comment>
  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">mp_timedout<pos:position pos:line="42" pos:column="18"/></name></expr>)<pos:position pos:line="42" pos:column="19"/></condition><then pos:line="42" pos:column="19"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="20">fprintf<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">stderr<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="36">"mp_timedout\n"<pos:position pos:line="42" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="53"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">fprintf<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><name pos:line="43" pos:column="11">stderr<pos:position pos:line="43" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="19">"ABORTING TEST, since it seems "<pos:position pos:line="43" pos:column="51"/></literal>
          <literal type="string" pos:line="44" pos:column="11">"that it would have run forever.\n"<pos:position pos:line="44" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="48"/></expr_stmt>
  <return pos:line="45" pos:column="3">return <expr><operator pos:line="45" pos:column="10">(<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">CURLMcode<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">)<pos:position pos:line="45" pos:column="21"/></operator> <operator pos:line="45" pos:column="22">~<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">CURLM_OK<pos:position pos:line="45" pos:column="31"/></name></expr>;<pos:position pos:line="45" pos:column="32"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
