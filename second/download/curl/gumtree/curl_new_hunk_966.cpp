"              filled  in an HTML form and presses the submit button. This will\n"
"              cause curl to pass the data to the server using the content-type\n"
, stdout);
 fputs(
"              application/x-www-form-urlencoded.  Compare to -F, --form.\n"
"\n"
"              -d, --data is the same as --data-ascii. --data-raw is almost the\n"
"              same but does not have a special interpretation of the @ charac-\n"
"              ter.  To  post  data  purely  binary, you should instead use the\n"
"              --data-binary option.  To URL-encode the value of a  form  field\n"
"              you may use --data-urlencode.\n"
"\n"
, stdout);
 fputs(
"              If  any of these options is used more than once on the same com-\n"
"              mand line, the data pieces specified  will  be  merged  together\n"
"              with  a  separating  &-symbol.  Thus,  using  '-d name=daniel -d\n"
"              skill=lousy'  would  generate  a  post  chunk  that  looks  like\n"
"              'name=daniel&skill=lousy'.\n"
"\n"
"              If  you  start  the data with the letter @, the rest should be a\n"
, stdout);
 fputs(
"              file name to read the data from, or - if you want curl  to  read\n"
"              the data from stdin. Multiple files can also be specified. Post-\n"
"              ing data from a file named 'foobar'  would  thus  be  done  with\n"
"              --data  @foobar.  When  --data  is told to read from a file like\n"
"              that, carriage returns and newlines will be stripped out. If you\n"
"              don't  want the @ character to have a special interpretation use\n"
, stdout);
 fputs(
"              --data-raw instead.\n"
"\n"
"       -D, --dump-header <file>\n"
"              Write the protocol headers to the specified file.\n"
"\n"
"              This option is handy to use when you want to store  the  headers\n"
"              that  an  HTTP site sends to you. Cookies from the headers could\n"
"              then be read in a  second  curl  invocation  by  using  the  -b,\n"
"              --cookie  option! The -c, --cookie-jar option is a better way to\n"
"              store cookies.\n"
"\n"
, stdout);
 fputs(
"              When used in FTP, the FTP server response lines  are  considered\n"
"              being \"headers\" and thus are saved there.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --data-ascii <data>\n"
"              See -d, --data.\n"
"\n"
"       --data-binary <data>\n"
"              (HTTP)  This  posts data exactly as specified with no extra pro-\n"
"              cessing whatsoever.\n"
"\n"
"              If you start the data with the letter @, the rest  should  be  a\n"
, stdout);
 fputs(
"              filename.   Data  is  posted in a similar manner as --data-ascii\n"
"              does, except that newlines and carriage  returns  are  preserved\n"
"              and conversions are never done.\n"
"\n"
"              If  this  option  is  used several times, the ones following the\n"
"              first will append data as described in -d, --data.\n"
"\n"
"       --data-raw <data>\n"
"              (HTTP) This posts data similarly to --data but without the  spe-\n"
, stdout);
 fputs(
"              cial  interpretation of the @ character. See -d, --data.  (Added\n"
"              in 7.43.0)\n"
"\n"
"       --data-urlencode <data>\n"
"              (HTTP) This posts data, similar to the other --data options with\n"
"              the exception that this performs URL-encoding. (Added in 7.18.0)\n"
"              To  be  CGI-compliant,  the <data> part should begin with a name\n"
"              followed by a separator and a content specification. The  <data>\n"
, stdout);
 fputs(
"              part can be passed to curl using one of the following syntaxes:\n"
"\n"
"              content\n"
"                     This  will make curl URL-encode the content and pass that\n"
"                     on. Just be careful so that the content  doesn't  contain\n"
"                     any  =  or  @  symbols, as that will then make the syntax\n"
"                     match one of the other cases below!\n"
"\n"
"              =content\n"
"                     This will make curl URL-encode the content and pass  that\n"
, stdout);
 fputs(
"                     on. The preceding = symbol is not included in the data.\n"
"\n"
"              name=content\n"
"                     This  will make curl URL-encode the content part and pass\n"
"                     that on. Note that the name part is expected to  be  URL-\n"
"                     encoded already.\n"
"\n"
"              @filename\n"
"                     This  will  make  curl  load  data  from  the  given file\n"
"                     (including any newlines), URL-encode that data  and  pass\n"
, stdout);
 fputs(
"                     it on in the POST.\n"
"\n"
"              name@filename\n"
"                     This  will  make  curl  load  data  from  the  given file\n"
"                     (including any newlines), URL-encode that data  and  pass\n"
"                     it  on  in  the  POST.  The  name part gets an equal sign\n"
"                     appended, resulting in name=urlencoded-file-content. Note\n"
"                     that the name is expected to be URL-encoded already.\n"
"\n"
"       --delegation LEVEL\n"
, stdout);
 fputs(
"              Set LEVEL to tell the server what it is allowed to delegate when\n"
"              it comes to user credentials. Used with GSS/kerberos.\n"
"\n"
"              none   Don't allow any delegation.\n"
"\n"
"              policy Delegates if and only if the OK-AS-DELEGATE flag  is  set\n"
"                     in  the  Kerberos  service  ticket,  which is a matter of\n"
"                     realm policy.\n"
"\n"
"              always Unconditionally allow the server to delegate.\n"
"\n"
"       --digest\n"
, stdout);
 fputs(
"              (HTTP) Enables HTTP Digest authentication. This is an  authenti-\n"
"              cation  scheme  that  prevents the password from being sent over\n"
"              the wire in clear text. Use this in combination with the  normal\n"
"              -u,  --user  option  to  set  user  name  and password. See also\n"
"              --ntlm, --negotiate and --anyauth for related options.\n"
"\n"
"              If this option is used several times,  only  the  first  one  is\n"
"              used.\n"
"\n"
, stdout);
 fputs(
"       --disable-eprt\n"
"              (FTP) Tell curl to disable the use of the EPRT and LPRT commands\n"
"              when doing active FTP transfers. Curl will normally always first\n"
"              attempt  to use EPRT, then LPRT before using PORT, but with this\n"
"              option, it will use PORT right away. EPRT and  LPRT  are  exten-\n"
"              sions  to  the  original  FTP  protocol, and may not work on all\n"
"              servers, but they enable more functionality in a better way than\n"
