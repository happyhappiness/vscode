"              supported  for  FTP). You may specify any number of commands. If\n"
"              the server returns failure for one of the commands,  the  entire\n"
, stdout);
 fputs(
"              operation  will  be aborted. You must send syntactically correct\n"
"              FTP commands as RFC959 defines to FTP servers,  or  one  of  the\n"
"              commands  listed below to SFTP servers.  This option can be used\n"
"              multiple times.\n"
"\n"
"              SFTP is a binary protocol. Unlike for  FTP,  libcurl  interprets\n"
"              SFTP  quote commands before sending them to the server.  Follow-\n"
"              ing is the list of all supported SFTP quote commands:\n"
"\n"
, stdout);
 fputs(
"              chgrp group file\n"
"                     The chgrp command sets the group ID of the file named  by\n"
"                     the  file  operand to the group ID specified by the group\n"
"                     operand. The group operand is a decimal integer group ID.\n"
"\n"
"              chmod mode file\n"
"                     The  chmod  command  modifies  the  file mode bits of the\n"
"                     specified file. The mode operand is an octal integer mode\n"
"                     number.\n"
"\n"
, stdout);
 fputs(
"              chown user file\n"
"                     The chown command sets the owner of the file named by the\n"
"                     file operand  to  the  user  ID  specified  by  the  user\n"
"                     operand. The user operand is a decimal integer user ID.\n"
"\n"
"              ln source_file target_file\n"
"                     The ln and symlink commands create a symbolic link at the\n"
"                     target_file location pointing to  the  source_file  loca-\n"
"                     tion.\n"
"\n"
, stdout);
 fputs(
"              mkdir directory_name\n"
"                     The  mkdir  command  creates  the  directory named by the\n"
"                     directory_name operand.\n"
"\n"
"              pwd    The pwd command returns the absolute pathname of the cur-\n"
"                     rent working directory.\n"
"\n"
"              rename source target\n"
"                     The rename command renames the file or directory named by\n"
"                     the source operand to the destination path named  by  the\n"
, stdout);
 fputs(
"                     target operand.\n"
"\n"
"              rm file\n"
"                     The  rm  command  removes  the file specified by the file\n"
"                     operand.\n"
"\n"
"              rmdir directory\n"
"                     The rmdir command removes the directory  entry  specified\n"
"                     by the directory operand, provided it is empty.\n"
"\n"
"              symlink source_file target_file\n"
"                     See ln.\n"
"\n"
"       --random-file <file>\n"
, stdout);
 fputs(
"              (SSL) Specify the path name to file containing what will be con-\n"
"              sidered as random data. The data is  used  to  seed  the  random\n"
"              engine for SSL connections.  See also the --egd-file option.\n"
"\n"
"       -r/--range <range>\n"
"              (HTTP/FTP/FILE)  Retrieve  a byte range (i.e a partial document)\n"
"              from a HTTP/1.1, FTP server or a local FILE. Ranges can be spec-\n"
"              ified in a number of ways.\n"
"\n"
, stdout);
 fputs(
"              0-499     specifies the first 500 bytes\n"
"\n"
"              500-999   specifies the second 500 bytes\n"
"\n"
"              -500      specifies the last 500 bytes\n"
"\n"
"              9500-     specifies the bytes from offset 9500 and forward\n"
"\n"
"              0-0,-1    specifies the first and last byte only(*)(H)\n"
"\n"
"              500-700,600-799\n"
"                        specifies 300 bytes from offset 500(H)\n"
"\n"
"              100-199,500-599\n"
, stdout);
 fputs(
"                        specifies two separate 100 bytes ranges(*)(H)\n"
"\n"
"       (*)  =  NOTE  that this will cause the server to reply with a multipart\n"
"       response!\n"
"\n"
"       Only digit characters (0-9) are valid in 'start' and  'stop'  of  range\n"
"       syntax  'start-stop'.  If  a non-digit character is given in the range,\n"
"       the server's response will be indeterminable,  depending  on  different\n"
"       server's configuration.\n"
"\n"
, stdout);
 fputs(
"       You  should  also  be aware that many HTTP/1.1 servers do not have this\n"
"       feature enabled, so that when  you  attempt  to  get  a  range,  you'll\n"
"       instead get the whole document.\n"
"\n"
"       FTP  range  downloads  only  support  the  simple  syntax  'start-stop'\n"
"       (optionally with one of the numbers omitted). It depends on the non-RFC\n"
"       command SIZE.\n"
"\n"
"       If this option is used several times, the last one will be used.\n"
"\n"
, stdout);
 fputs(
"       --raw  When  used, it disables all internal HTTP decoding of content or\n"
"              transfer encodings and instead makes them passed  on  unaltered,\n"
"              raw. (Added in 7.16.2)\n"
"\n"
"       -R/--remote-time\n"
"              When  used,  this  will  make  libcurl attempt to figure out the\n"
"              timestamp of the remote file, and if that is available make  the\n"
"              local file get that same timestamp.\n"
"\n"
"       --retry <num>\n"
, stdout);
 fputs(
"              If  a  transient  error is returned when curl tries to perform a\n"
"              transfer, it will retry this number of times before  giving  up.\n"
"              Setting  the  number to 0 makes curl do no retries (which is the\n"
