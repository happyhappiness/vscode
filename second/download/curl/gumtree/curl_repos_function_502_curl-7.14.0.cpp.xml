<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_502_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">Curl_if2ip<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><specifier pos:line="1" pos:column="18">const<pos:position pos:line="1" pos:column="23"/></specifier> <name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">interface<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">buf<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">buf_size<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">dummy<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">ip<pos:position pos:line="4" pos:column="11"/></name><init pos:line="4" pos:column="11">=<expr><name pos:line="4" pos:column="12">NULL<pos:position pos:line="4" pos:column="16"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><operator pos:line="6" pos:column="6">!<pos:position pos:line="6" pos:column="7"/></operator><name pos:line="6" pos:column="7">interface<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">NULL<pos:position pos:line="7" pos:column="16"/></name></expr>;<pos:position pos:line="7" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">dummy<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">socket<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">AF_INET<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">SOCK_STREAM<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="40">0<pos:position pos:line="9" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">SYS_ERROR<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">==<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">dummy<pos:position pos:line="10" pos:column="25"/></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26"> <block pos:line="10" pos:column="27">{
    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then>
  <else pos:line="13" pos:column="3">else <block pos:line="13" pos:column="8">{
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">struct<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">ifreq<pos:position pos:line="14" pos:column="17"/></name></name></type> <name pos:line="14" pos:column="18">req<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">size_t<pos:position pos:line="15" pos:column="11"/></name></type> <name pos:line="15" pos:column="12">len<pos:position pos:line="15" pos:column="15"/></name> <init pos:line="15" pos:column="16">= <expr><call><name pos:line="15" pos:column="18">strlen<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">interface<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="36"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">memset<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><operator pos:line="16" pos:column="12">&amp;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="13">req<pos:position pos:line="16" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="21">sizeof<argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">req<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name pos:line="17" pos:column="8">len<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">&gt;=<pos:position pos:line="17" pos:column="17"/></operator> <sizeof pos:line="17" pos:column="15">sizeof<argument_list pos:line="17" pos:column="21">(<argument><expr><name><name pos:line="17" pos:column="22">req<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">.<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">ifr_name<pos:position pos:line="17" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></sizeof></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36">
      <block type="pseudo"><return pos:line="18" pos:column="7">return <expr><name pos:line="18" pos:column="14">NULL<pos:position pos:line="18" pos:column="18"/></name></expr>;<pos:position pos:line="18" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="18" pos:column="20">/* this can't be a fine interface name */</comment>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">memcpy<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name><name pos:line="19" pos:column="12">req<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">ifr_name<pos:position pos:line="19" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="26">interface<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">len<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">+<pos:position pos:line="19" pos:column="41"/></operator><literal type="number" pos:line="19" pos:column="41">1<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">req<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">.<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="9">ifr_addr<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">sa_family<pos:position pos:line="20" pos:column="27"/></name></name> <operator pos:line="20" pos:column="28">=<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="30">AF_INET<pos:position pos:line="20" pos:column="37"/></name></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">IOCTL_3_ARGS<pos:position pos:line="21" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">SYS_ERROR<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">==<pos:position pos:line="22" pos:column="21"/></operator> <call><name pos:line="22" pos:column="22">ioctl<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">dummy<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="35">SIOCGIFADDR<pos:position pos:line="22" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="48">&amp;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="49">req<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="54"/></condition><then pos:line="22" pos:column="54"> <block pos:line="22" pos:column="55">{
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else<pos:position pos:line="23" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">SYS_ERROR<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">==<pos:position pos:line="24" pos:column="21"/></operator> <call><name pos:line="24" pos:column="22">ioctl<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">dummy<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="35">SIOCGIFADDR<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="48">&amp;<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="49">req<pos:position pos:line="24" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="54">sizeof<argument_list pos:line="24" pos:column="60">(<argument><expr><name pos:line="24" pos:column="61">req<pos:position pos:line="24" pos:column="64"/></name></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="67"/></condition><then pos:line="24" pos:column="67"> <block pos:line="24" pos:column="68">{
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">sclose<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">dummy<pos:position pos:line="26" pos:column="19"/></name></expr></argument>)<pos:position pos:line="26" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">NULL<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then>
    <else pos:line="29" pos:column="5">else <block pos:line="29" pos:column="10">{
      <decl_stmt><decl><type><name><name pos:line="30" pos:column="7">struct<pos:position pos:line="30" pos:column="13"/></name> <name pos:line="30" pos:column="14">in_addr<pos:position pos:line="30" pos:column="21"/></name></name></type> <name pos:line="30" pos:column="22">in<pos:position pos:line="30" pos:column="24"/></name></decl>;<pos:position pos:line="30" pos:column="25"/></decl_stmt>

      <decl_stmt><decl><type><name><name pos:line="32" pos:column="7">struct<pos:position pos:line="32" pos:column="13"/></name> <name pos:line="32" pos:column="14">sockaddr_in<pos:position pos:line="32" pos:column="25"/></name></name> <modifier pos:line="32" pos:column="26">*<pos:position pos:line="32" pos:column="27"/></modifier></type><name pos:line="32" pos:column="27">s<pos:position pos:line="32" pos:column="28"/></name> <init pos:line="32" pos:column="29">= <expr><operator pos:line="32" pos:column="31">(<pos:position pos:line="32" pos:column="32"/></operator>struct <name pos:line="32" pos:column="39">sockaddr_in<pos:position pos:line="32" pos:column="50"/></name> <operator pos:line="32" pos:column="51">*<pos:position pos:line="32" pos:column="52"/></operator><operator pos:line="32" pos:column="52">)<pos:position pos:line="32" pos:column="53"/></operator><operator pos:line="32" pos:column="53">&amp;<pos:position pos:line="32" pos:column="58"/></operator><name><name pos:line="32" pos:column="54">req<pos:position pos:line="32" pos:column="57"/></name><operator pos:line="32" pos:column="57">.<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="58">ifr_dstaddr<pos:position pos:line="32" pos:column="69"/></name></name></expr></init></decl>;<pos:position pos:line="32" pos:column="70"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">memcpy<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><operator pos:line="33" pos:column="14">&amp;<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="15">in<pos:position pos:line="33" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="19">&amp;<pos:position pos:line="33" pos:column="24"/></operator><operator pos:line="33" pos:column="20">(<pos:position pos:line="33" pos:column="21"/></operator><name><name pos:line="33" pos:column="21">s<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">-&gt;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="24">sin_addr<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">.<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="33">s_addr<pos:position pos:line="33" pos:column="39"/></name></name><operator pos:line="33" pos:column="39">)<pos:position pos:line="33" pos:column="40"/></operator></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="42">sizeof<argument_list pos:line="33" pos:column="48">(<argument><expr><name pos:line="33" pos:column="49">in<pos:position pos:line="33" pos:column="51"/></name></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><name pos:line="34" pos:column="7">ip<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <operator pos:line="34" pos:column="12">(<pos:position pos:line="34" pos:column="13"/></operator><name pos:line="34" pos:column="13">char<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">*<pos:position pos:line="34" pos:column="19"/></operator><operator pos:line="34" pos:column="19">)<pos:position pos:line="34" pos:column="20"/></operator> <call><name pos:line="34" pos:column="21">Curl_inet_ntop<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><name><name pos:line="34" pos:column="36">s<pos:position pos:line="34" pos:column="37"/></name><operator pos:line="34" pos:column="37">-&gt;<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="39">sin_family<pos:position pos:line="34" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="51">&amp;<pos:position pos:line="34" pos:column="56"/></operator><name pos:line="34" pos:column="52">in<pos:position pos:line="34" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="56">buf<pos:position pos:line="34" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="61">buf_size<pos:position pos:line="34" pos:column="69"/></name></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">sclose<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><name pos:line="36" pos:column="12">dummy<pos:position pos:line="36" pos:column="17"/></name></expr></argument>)<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>
  <return pos:line="38" pos:column="3">return <expr><name pos:line="38" pos:column="10">ip<pos:position pos:line="38" pos:column="12"/></name></expr>;<pos:position pos:line="38" pos:column="13"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></else></if>

<comment type="block" pos:line="41" pos:column="1">/* -- end of if2ip() -- */</comment>
<cpp:else pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">else<pos:position pos:line="42" pos:column="6"/></cpp:directive></cpp:else>
<function><type><name pos:line="43" pos:column="1">char<pos:position pos:line="43" pos:column="5"/></name> <modifier pos:line="43" pos:column="6">*<pos:position pos:line="43" pos:column="7"/></modifier></type><name pos:line="43" pos:column="7">Curl_if2ip<pos:position pos:line="43" pos:column="17"/></name><parameter_list pos:line="43" pos:column="17">(<parameter><decl><type><specifier pos:line="43" pos:column="18">const<pos:position pos:line="43" pos:column="23"/></specifier> <name pos:line="43" pos:column="24">char<pos:position pos:line="43" pos:column="28"/></name> <modifier pos:line="43" pos:column="29">*<pos:position pos:line="43" pos:column="30"/></modifier></type><name pos:line="43" pos:column="30">interf<pos:position pos:line="43" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="43" pos:column="38">char<pos:position pos:line="43" pos:column="42"/></name> <modifier pos:line="43" pos:column="43">*<pos:position pos:line="43" pos:column="44"/></modifier></type><name pos:line="43" pos:column="44">buf<pos:position pos:line="43" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="43" pos:column="49">int<pos:position pos:line="43" pos:column="52"/></name></type> <name pos:line="43" pos:column="53">buf_size<pos:position pos:line="43" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="43" pos:column="62"/></parameter_list>
<block pos:line="44" pos:column="1">{
    <expr_stmt><expr><operator pos:line="45" pos:column="5">(<pos:position pos:line="45" pos:column="6"/></operator><name pos:line="45" pos:column="6">void<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">)<pos:position pos:line="45" pos:column="11"/></operator> <name pos:line="45" pos:column="12">interf<pos:position pos:line="45" pos:column="18"/></name></expr>;<pos:position pos:line="45" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="46" pos:column="5">(<pos:position pos:line="46" pos:column="6"/></operator><name pos:line="46" pos:column="6">void<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">)<pos:position pos:line="46" pos:column="11"/></operator> <name pos:line="46" pos:column="12">buf<pos:position pos:line="46" pos:column="15"/></name></expr>;<pos:position pos:line="46" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="47" pos:column="5">(<pos:position pos:line="47" pos:column="6"/></operator><name pos:line="47" pos:column="6">void<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">)<pos:position pos:line="47" pos:column="11"/></operator> <name pos:line="47" pos:column="12">buf_size<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
    <return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">NULL<pos:position pos:line="48" pos:column="16"/></name></expr>;<pos:position pos:line="48" pos:column="17"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></block></function></unit>
