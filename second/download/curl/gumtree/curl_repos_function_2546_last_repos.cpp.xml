<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2546_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">axtls_recv<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="53">/* connection data */</comment>
                          <parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">num<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>,                  <comment type="block" pos:line="2" pos:column="53">/* socketindex */</comment>
                          <parameter><decl><type><name pos:line="3" pos:column="27">char<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">buf<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>,                <comment type="block" pos:line="3" pos:column="53">/* store read data here */</comment>
                          <parameter><decl><type><name pos:line="4" pos:column="27">size_t<pos:position pos:line="4" pos:column="33"/></name></type> <name pos:line="4" pos:column="34">buffersize<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>,        <comment type="block" pos:line="4" pos:column="53">/* max amount to read */</comment>
                          <parameter><decl><type><name pos:line="5" pos:column="27">CURLcode<pos:position pos:line="5" pos:column="35"/></name> <modifier pos:line="5" pos:column="36">*<pos:position pos:line="5" pos:column="37"/></modifier></type><name pos:line="5" pos:column="37">err<pos:position pos:line="5" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="41"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">ssl_connect_data<pos:position pos:line="7" pos:column="26"/></name></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">connssl<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><operator pos:line="7" pos:column="38">&amp;<pos:position pos:line="7" pos:column="43"/></operator><name><name pos:line="7" pos:column="39">conn<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">ssl<pos:position pos:line="7" pos:column="48"/></name><index pos:line="7" pos:column="48">[<expr><name pos:line="7" pos:column="49">num<pos:position pos:line="7" pos:column="52"/></name></expr>]<pos:position pos:line="7" pos:column="53"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">ssize_t<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">ret<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><literal type="number" pos:line="8" pos:column="17">0<pos:position pos:line="8" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">uint8_t<pos:position pos:line="9" pos:column="10"/></name> <modifier pos:line="9" pos:column="11">*<pos:position pos:line="9" pos:column="12"/></modifier></type><name pos:line="9" pos:column="12">read_buf<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">infof<pos:position pos:line="11" pos:column="8"/></name><argument_list pos:line="11" pos:column="8">(<argument><expr><name><name pos:line="11" pos:column="9">conn<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">data<pos:position pos:line="11" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="21">"  axtls_recv\n"<pos:position pos:line="11" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">err<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <name pos:line="13" pos:column="10">CURLE_OK<pos:position pos:line="13" pos:column="18"/></name></expr>;<pos:position pos:line="13" pos:column="19"/></expr_stmt>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">connssl<pos:position pos:line="14" pos:column="13"/></name></expr>)<pos:position pos:line="14" pos:column="14"/></condition><then pos:line="14" pos:column="14"> <block pos:line="14" pos:column="15">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">ret<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">ssl_read<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name><name pos:line="15" pos:column="20">BACKEND<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">-&gt;<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="29">ssl<pos:position pos:line="15" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="34">&amp;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="35">read_buf<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name pos:line="16" pos:column="8">ret<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">&gt;<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="14">SSL_OK<pos:position pos:line="16" pos:column="20"/></name></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21"> <block pos:line="16" pos:column="22">{
      <comment type="block" pos:line="17" pos:column="7">/* ssl_read returns SSL_OK if there is more data to read, so if it is
         larger, then all data has been read already.  */</comment>
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">memcpy<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><name pos:line="19" pos:column="14">buf<pos:position pos:line="19" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="19">read_buf<pos:position pos:line="19" pos:column="27"/></name></expr></argument>,
             <argument><expr><ternary><condition><expr><operator pos:line="20" pos:column="14">(<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">size_t<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">)<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">ret<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">&gt;<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="28">buffersize<pos:position pos:line="20" pos:column="38"/></name></expr> ?<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40"> <expr><name pos:line="20" pos:column="41">buffersize<pos:position pos:line="20" pos:column="51"/></name></expr> <pos:position pos:line="20" pos:column="52"/></then><else pos:line="20" pos:column="52">: <expr><operator pos:line="20" pos:column="54">(<pos:position pos:line="20" pos:column="55"/></operator><name pos:line="20" pos:column="55">size_t<pos:position pos:line="20" pos:column="61"/></name><operator pos:line="20" pos:column="61">)<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="62">ret<pos:position pos:line="20" pos:column="65"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then>
    <elseif pos:line="22" pos:column="5">else <if pos:line="22" pos:column="10">if<condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">ret<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">==<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">SSL_OK<pos:position pos:line="22" pos:column="26"/></name></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27"> <block pos:line="22" pos:column="28">{
      <comment type="block" pos:line="23" pos:column="7">/* more data to be read, signal caller to call again */</comment>
      <expr_stmt><expr><operator pos:line="24" pos:column="7">*<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">err<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <name pos:line="24" pos:column="14">CURLE_AGAIN<pos:position pos:line="24" pos:column="25"/></name></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="25" pos:column="7">ret<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <operator pos:line="25" pos:column="13">-<pos:position pos:line="25" pos:column="14"/></operator><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="27" pos:column="5">else <if pos:line="27" pos:column="10">if<condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">ret<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">==<pos:position pos:line="27" pos:column="19"/></operator> <operator pos:line="27" pos:column="20">-<pos:position pos:line="27" pos:column="21"/></operator><literal type="number" pos:line="27" pos:column="21">3<pos:position pos:line="27" pos:column="22"/></literal></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23"> <block pos:line="27" pos:column="24">{
      <comment type="block" pos:line="28" pos:column="7">/* With patched axTLS, SSL_CLOSE_NOTIFY=-3.  Hard-coding until axTLS
         team approves proposed fix. */</comment>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">Curl_axtls_close<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">conn<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">num<pos:position pos:line="30" pos:column="33"/></name></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if></elseif>
    <else pos:line="32" pos:column="5">else <block pos:line="32" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">failf<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name><name pos:line="33" pos:column="13">conn<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">data<pos:position pos:line="33" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="25">"axTLS recv error (%d)"<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="50">ret<pos:position pos:line="33" pos:column="53"/></name></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="34" pos:column="7">*<pos:position pos:line="34" pos:column="8"/></operator><name pos:line="34" pos:column="8">err<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <call><name pos:line="34" pos:column="14">map_error_to_curl<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><operator pos:line="34" pos:column="32">(<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="33">int<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">)<pos:position pos:line="34" pos:column="37"/></operator> <name pos:line="34" pos:column="38">ret<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name pos:line="35" pos:column="7">ret<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <operator pos:line="35" pos:column="13">-<pos:position pos:line="35" pos:column="14"/></operator><literal type="number" pos:line="35" pos:column="14">1<pos:position pos:line="35" pos:column="15"/></literal></expr>;<pos:position pos:line="35" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></else></if>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <return pos:line="39" pos:column="3">return <expr><name pos:line="39" pos:column="10">ret<pos:position pos:line="39" pos:column="13"/></name></expr>;<pos:position pos:line="39" pos:column="14"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
