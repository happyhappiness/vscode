<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_255_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="15"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">sockaddr_in<pos:position pos:line="5" pos:column="21"/></name></name></type> <name pos:line="5" pos:column="22">servaddr<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>  <comment type="block" pos:line="5" pos:column="33">/*  socket address structure  */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">curl_socket_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">sockfd<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">WIN32<pos:position pos:line="8" pos:column="13"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">WSADATA<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">wsaData<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">initwsa<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><call><name pos:line="10" pos:column="17">WSAStartup<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><call><name pos:line="10" pos:column="28">MAKEWORD<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><literal type="number" pos:line="10" pos:column="37">2<pos:position pos:line="10" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="40">0<pos:position pos:line="10" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="10" pos:column="44">&amp;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="45">wsaData<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="54"/></decl_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">initwsa<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">!=<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block pos:line="11" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">printf<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="string" pos:line="12" pos:column="12">"WSAStartup failed: %d\n"<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="39">initwsa<pos:position pos:line="12" pos:column="46"/></name></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><literal type="number" pos:line="13" pos:column="12">1<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="17" pos:column="3">curl<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">curl_easy_init<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">()<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">curl<pos:position pos:line="18" pos:column="10"/></name></expr>)<pos:position pos:line="18" pos:column="11"/></condition><then pos:line="18" pos:column="11"> <block pos:line="18" pos:column="12">{
    <comment type="block" pos:line="19" pos:column="5">/*
     * Note that libcurl will internally think that you connect to the host
     * and port that you specify in the URL option.
     */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">curl_easy_setopt<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">curl<pos:position pos:line="23" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="28">CURLOPT_URL<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="41">"http://99.99.99.99:9999"<pos:position pos:line="23" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* Create the socket "manually" */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">sockfd<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">socket<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">AF_INET<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">SOCK_STREAM<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="43">0<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><name pos:line="27" pos:column="8">sockfd<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">==<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="27" pos:column="33"/></name></expr>)<pos:position pos:line="27" pos:column="34"/></condition><then pos:line="27" pos:column="34"> <block pos:line="27" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">printf<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><literal type="string" pos:line="28" pos:column="14">"Error creating listening socket.\n"<pos:position pos:line="28" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="52"/></expr_stmt>
      <return pos:line="29" pos:column="7">return <expr><literal type="number" pos:line="29" pos:column="14">3<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">memset<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><operator pos:line="32" pos:column="12">&amp;<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="13">servaddr<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="23">0<pos:position pos:line="32" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="26">sizeof<argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">servaddr<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">servaddr<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">.<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">sin_family<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">AF_INET<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">servaddr<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">.<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">sin_port<pos:position pos:line="34" pos:column="22"/></name></name>   <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <call><name pos:line="34" pos:column="27">htons<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><name pos:line="34" pos:column="33">PORTNUM<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="36" pos:column="5">servaddr<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">.<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">sin_addr<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">.<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">s_addr<pos:position pos:line="36" pos:column="29"/></name></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <call><name pos:line="36" pos:column="32">inet_addr<pos:position pos:line="36" pos:column="41"/></name><argument_list pos:line="36" pos:column="41">(<argument><expr><name pos:line="36" pos:column="42">IPADDR<pos:position pos:line="36" pos:column="48"/></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="50"/></expr_stmt>
    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><name pos:line="37" pos:column="8">INADDR_NONE<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">==<pos:position pos:line="37" pos:column="22"/></operator> <name><name pos:line="37" pos:column="23">servaddr<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">.<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="32">sin_addr<pos:position pos:line="37" pos:column="40"/></name><operator pos:line="37" pos:column="40">.<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="41">s_addr<pos:position pos:line="37" pos:column="47"/></name></name></expr>)<pos:position pos:line="37" pos:column="48"/></condition><then pos:line="37" pos:column="48">
      <block type="pseudo"><return pos:line="38" pos:column="7">return <expr><literal type="number" pos:line="38" pos:column="14">2<pos:position pos:line="38" pos:column="15"/></literal></expr>;<pos:position pos:line="38" pos:column="16"/></return></block></then></if>

    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><call><name pos:line="40" pos:column="8">connect<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">sockfd<pos:position pos:line="40" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="24">(<pos:position pos:line="40" pos:column="25"/></operator>struct <name pos:line="40" pos:column="32">sockaddr<pos:position pos:line="40" pos:column="40"/></name> <operator pos:line="40" pos:column="41">*<pos:position pos:line="40" pos:column="42"/></operator><operator pos:line="40" pos:column="42">)<pos:position pos:line="40" pos:column="43"/></operator> <operator pos:line="40" pos:column="44">&amp;<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="45">servaddr<pos:position pos:line="40" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="55">sizeof<argument_list pos:line="40" pos:column="61">(<argument><expr><name pos:line="40" pos:column="62">servaddr<pos:position pos:line="40" pos:column="70"/></name></expr></argument>)<pos:position pos:line="40" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="72"/></argument_list></call> <operator pos:line="40" pos:column="73">==<pos:position pos:line="40" pos:column="75"/></operator>
       <operator pos:line="41" pos:column="8">-<pos:position pos:line="41" pos:column="9"/></operator><literal type="number" pos:line="41" pos:column="9">1<pos:position pos:line="41" pos:column="10"/></literal></expr>)<pos:position pos:line="41" pos:column="11"/></condition><then pos:line="41" pos:column="11"> <block pos:line="41" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">close<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">sockfd<pos:position pos:line="42" pos:column="19"/></name></expr></argument>)<pos:position pos:line="42" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">printf<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><literal type="string" pos:line="43" pos:column="14">"client error: connect: %s\n"<pos:position pos:line="43" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="45">strerror<pos:position pos:line="43" pos:column="53"/></name><argument_list pos:line="43" pos:column="53">(<argument><expr><name pos:line="43" pos:column="54">errno<pos:position pos:line="43" pos:column="59"/></name></expr></argument>)<pos:position pos:line="43" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="62"/></expr_stmt>
      <return pos:line="44" pos:column="7">return <expr><literal type="number" pos:line="44" pos:column="14">1<pos:position pos:line="44" pos:column="15"/></literal></expr>;<pos:position pos:line="44" pos:column="16"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="47" pos:column="5">/* no progress meter please */</comment>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">curl_easy_setopt<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><name pos:line="48" pos:column="22">curl<pos:position pos:line="48" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="28">CURLOPT_NOPROGRESS<pos:position pos:line="48" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="48">1L<pos:position pos:line="48" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="50" pos:column="5">/* send all data to this function  */</comment>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">curl_easy_setopt<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><name pos:line="51" pos:column="22">curl<pos:position pos:line="51" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="28">CURLOPT_WRITEFUNCTION<pos:position pos:line="51" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="51">write_data<pos:position pos:line="51" pos:column="61"/></name></expr></argument>)<pos:position pos:line="51" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="63"/></expr_stmt>

    <comment type="block" pos:line="53" pos:column="5">/* call this function to get a socket */</comment>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">curl_easy_setopt<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><name pos:line="54" pos:column="22">curl<pos:position pos:line="54" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="28">CURLOPT_OPENSOCKETFUNCTION<pos:position pos:line="54" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="56">opensocket<pos:position pos:line="54" pos:column="66"/></name></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">curl_easy_setopt<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name pos:line="55" pos:column="22">curl<pos:position pos:line="55" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="28">CURLOPT_OPENSOCKETDATA<pos:position pos:line="55" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="52">&amp;<pos:position pos:line="55" pos:column="57"/></operator><name pos:line="55" pos:column="53">sockfd<pos:position pos:line="55" pos:column="59"/></name></expr></argument>)<pos:position pos:line="55" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="57" pos:column="5">/* call this function to close sockets */</comment>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">curl_easy_setopt<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><name pos:line="58" pos:column="22">curl<pos:position pos:line="58" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="28">CURLOPT_CLOSESOCKETFUNCTION<pos:position pos:line="58" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="57">closecb<pos:position pos:line="58" pos:column="64"/></name></expr></argument>)<pos:position pos:line="58" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">curl_easy_setopt<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">(<argument><expr><name pos:line="59" pos:column="22">curl<pos:position pos:line="59" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="28">CURLOPT_CLOSESOCKETDATA<pos:position pos:line="59" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="53">&amp;<pos:position pos:line="59" pos:column="58"/></operator><name pos:line="59" pos:column="54">sockfd<pos:position pos:line="59" pos:column="60"/></name></expr></argument>)<pos:position pos:line="59" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="62"/></expr_stmt>

    <comment type="block" pos:line="61" pos:column="5">/* call this function to set options for the socket */</comment>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">curl_easy_setopt<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">curl<pos:position pos:line="62" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="28">CURLOPT_SOCKOPTFUNCTION<pos:position pos:line="62" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="53">sockopt_callback<pos:position pos:line="62" pos:column="69"/></name></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="71"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="64" pos:column="5">curl_easy_setopt<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><name pos:line="64" pos:column="22">curl<pos:position pos:line="64" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="28">CURLOPT_VERBOSE<pos:position pos:line="64" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="45">1<pos:position pos:line="64" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><name pos:line="66" pos:column="5">res<pos:position pos:line="66" pos:column="8"/></name> <operator pos:line="66" pos:column="9">=<pos:position pos:line="66" pos:column="10"/></operator> <call><name pos:line="66" pos:column="11">curl_easy_perform<pos:position pos:line="66" pos:column="28"/></name><argument_list pos:line="66" pos:column="28">(<argument><expr><name pos:line="66" pos:column="29">curl<pos:position pos:line="66" pos:column="33"/></name></expr></argument>)<pos:position pos:line="66" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">curl_easy_cleanup<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name pos:line="68" pos:column="23">curl<pos:position pos:line="68" pos:column="27"/></name></expr></argument>)<pos:position pos:line="68" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="29"/></expr_stmt>

    <if pos:line="70" pos:column="5">if<condition pos:line="70" pos:column="7">(<expr><name pos:line="70" pos:column="8">res<pos:position pos:line="70" pos:column="11"/></name></expr>)<pos:position pos:line="70" pos:column="12"/></condition><then pos:line="70" pos:column="12"> <block pos:line="70" pos:column="13">{
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">printf<pos:position pos:line="71" pos:column="13"/></name><argument_list pos:line="71" pos:column="13">(<argument><expr><literal type="string" pos:line="71" pos:column="14">"libcurl error: %d\n"<pos:position pos:line="71" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="37">res<pos:position pos:line="71" pos:column="40"/></name></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>
      <return pos:line="72" pos:column="7">return <expr><literal type="number" pos:line="72" pos:column="14">4<pos:position pos:line="72" pos:column="15"/></literal></expr>;<pos:position pos:line="72" pos:column="16"/></return>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>
  }<pos:position pos:line="74" pos:column="4"/></block></then></if>
  <return pos:line="75" pos:column="3">return <expr><literal type="number" pos:line="75" pos:column="10">0<pos:position pos:line="75" pos:column="11"/></literal></expr>;<pos:position pos:line="75" pos:column="12"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
