<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_726_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_do<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name><name pos:line="1" pos:column="18">struct<pos:position pos:line="1" pos:column="24"/></name> <name pos:line="1" pos:column="25">connectdata<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier><modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">connp<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">bool<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">done<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name><init pos:line="3" pos:column="18">=<expr><name pos:line="3" pos:column="19">CURLE_OK<pos:position pos:line="3" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">connectdata<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">conn<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><operator pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="31">connp<pos:position pos:line="4" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SessionHandle<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">data<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name><name pos:line="5" pos:column="32">conn<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">data<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* setup and init stuff before DO starts, in preparing for the transfer */</comment>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">do_init<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><name pos:line="8" pos:column="11">conn<pos:position pos:line="8" pos:column="15"/></name></expr></argument>)<pos:position pos:line="8" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="17"/></expr_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name><name pos:line="10" pos:column="6">conn<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">handler<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">do_it<pos:position pos:line="10" pos:column="26"/></name></name></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
    <comment type="block" pos:line="11" pos:column="5">/* generic protocol-specific function pointer set in curl_connect() */</comment>
    <expr_stmt><expr><name pos:line="12" pos:column="5">result<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name><name pos:line="12" pos:column="14">conn<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">-&gt;<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="20">handler<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">-&gt;<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="29">do_it<pos:position pos:line="12" pos:column="34"/></name></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">conn<pos:position pos:line="12" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="41">done<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* This was formerly done in transfer.c, but we better do it here */</comment>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><operator pos:line="15" pos:column="8">(<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">CURLE_SEND_ERROR<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">==<pos:position pos:line="15" pos:column="28"/></operator> <name pos:line="15" pos:column="29">result<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">)<pos:position pos:line="15" pos:column="36"/></operator> <operator pos:line="15" pos:column="37">&amp;&amp;<pos:position pos:line="15" pos:column="47"/></operator> <name><name pos:line="15" pos:column="40">conn<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">-&gt;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="46">bits<pos:position pos:line="15" pos:column="50"/></name><operator pos:line="15" pos:column="50">.<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="51">reuse<pos:position pos:line="15" pos:column="56"/></name></name></expr>)<pos:position pos:line="15" pos:column="57"/></condition><then pos:line="15" pos:column="57"> <block pos:line="15" pos:column="58">{
      <comment type="block" pos:line="16" pos:column="7">/* This was a re-use of a connection and we got a write error in the
       * DO-phase. Then we DISCONNECT this connection and have another attempt
       * to CONNECT and then DO again! The retry cannot possibly find another
       * connection to re-use, since we only keep one possible connection for
       * each.  */</comment>

      <expr_stmt><expr><call><name pos:line="22" pos:column="7">infof<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">data<pos:position pos:line="22" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="19">"Re-used connection seems dead, get a new one\n"<pos:position pos:line="22" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="69"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="24" pos:column="7">conn<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">bits<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">close<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">TRUE<pos:position pos:line="24" pos:column="30"/></name></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt> <comment type="block" pos:line="24" pos:column="32">/* enforce close of this connection */</comment>
      <expr_stmt><expr><name pos:line="25" pos:column="7">result<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">Curl_done<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><operator pos:line="25" pos:column="26">&amp;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="27">conn<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="33">result<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">FALSE<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt> <comment type="block" pos:line="25" pos:column="49">/* we are so done with this */</comment>

      <comment type="block" pos:line="27" pos:column="7">/* conn may no longer be a good pointer */</comment>

      <comment type="block" pos:line="29" pos:column="7">/*
       * According to bug report #1330310. We need to check for
       * CURLE_SEND_ERROR here as well. I figure this could happen when the
       * request failed on a FTP connection and thus Curl_done() itself tried
       * to use the connection (again). Slight Lack of feedback in the report,
       * but I don't think this extra check can do much harm.
       */</comment>
      <if pos:line="36" pos:column="7">if<condition pos:line="36" pos:column="9">(<expr><operator pos:line="36" pos:column="10">(<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">CURLE_OK<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">==<pos:position pos:line="36" pos:column="22"/></operator> <name pos:line="36" pos:column="23">result<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">)<pos:position pos:line="36" pos:column="30"/></operator> <operator pos:line="36" pos:column="31">||<pos:position pos:line="36" pos:column="33"/></operator> <operator pos:line="36" pos:column="34">(<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="35">CURLE_SEND_ERROR<pos:position pos:line="36" pos:column="51"/></name> <operator pos:line="36" pos:column="52">==<pos:position pos:line="36" pos:column="54"/></operator> <name pos:line="36" pos:column="55">result<pos:position pos:line="36" pos:column="61"/></name><operator pos:line="36" pos:column="61">)<pos:position pos:line="36" pos:column="62"/></operator></expr>)<pos:position pos:line="36" pos:column="63"/></condition><then pos:line="36" pos:column="63"> <block pos:line="36" pos:column="64">{
        <decl_stmt><decl><type><name pos:line="37" pos:column="9">bool<pos:position pos:line="37" pos:column="13"/></name></type> <name pos:line="37" pos:column="14">async<pos:position pos:line="37" pos:column="19"/></name></decl>;<pos:position pos:line="37" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="38" pos:column="9">bool<pos:position pos:line="38" pos:column="13"/></name></type> <name pos:line="38" pos:column="14">protocol_done<pos:position pos:line="38" pos:column="27"/></name> <init pos:line="38" pos:column="28">= <expr><name pos:line="38" pos:column="30">TRUE<pos:position pos:line="38" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="35"/></decl_stmt>

        <comment type="block" pos:line="40" pos:column="9">/* Now, redo the connect and get a new connection */</comment>
        <expr_stmt><expr><name pos:line="41" pos:column="9">result<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <call><name pos:line="41" pos:column="18">Curl_connect<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">data<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="37">connp<pos:position pos:line="41" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="44">&amp;<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="45">async<pos:position pos:line="41" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="52">&amp;<pos:position pos:line="41" pos:column="57"/></operator><name pos:line="41" pos:column="53">protocol_done<pos:position pos:line="41" pos:column="66"/></name></expr></argument>)<pos:position pos:line="41" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="68"/></expr_stmt>
        <if pos:line="42" pos:column="9">if<condition pos:line="42" pos:column="11">(<expr><name pos:line="42" pos:column="12">CURLE_OK<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">==<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">result<pos:position pos:line="42" pos:column="30"/></name></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
          <comment type="block" pos:line="43" pos:column="11">/* We have connected or sent away a name resolve query fine */</comment>

          <expr_stmt><expr><name pos:line="45" pos:column="11">conn<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <operator pos:line="45" pos:column="18">*<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">connp<pos:position pos:line="45" pos:column="24"/></name></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt> <comment type="block" pos:line="45" pos:column="26">/* setup conn to again point to something nice */</comment>
          <if pos:line="46" pos:column="11">if<condition pos:line="46" pos:column="13">(<expr><name pos:line="46" pos:column="14">async<pos:position pos:line="46" pos:column="19"/></name></expr>)<pos:position pos:line="46" pos:column="20"/></condition><then pos:line="46" pos:column="20"> <block pos:line="46" pos:column="21">{
            <comment type="block" pos:line="47" pos:column="13">/* Now, if async is TRUE here, we need to wait for the name
               to resolve */</comment>
            <expr_stmt><expr><name pos:line="49" pos:column="13">result<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">=<pos:position pos:line="49" pos:column="21"/></operator> <call><name pos:line="49" pos:column="22">Curl_wait_for_resolv<pos:position pos:line="49" pos:column="42"/></name><argument_list pos:line="49" pos:column="42">(<argument><expr><name pos:line="49" pos:column="43">conn<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="49">NULL<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt>
            <if pos:line="50" pos:column="13">if<condition pos:line="50" pos:column="15">(<expr><name pos:line="50" pos:column="16">result<pos:position pos:line="50" pos:column="22"/></name></expr>)<pos:position pos:line="50" pos:column="23"/></condition><then pos:line="50" pos:column="23">
              <block type="pseudo"><return pos:line="51" pos:column="15">return <expr><name pos:line="51" pos:column="22">result<pos:position pos:line="51" pos:column="28"/></name></expr>;<pos:position pos:line="51" pos:column="29"/></return></block></then></if>

            <comment type="block" pos:line="53" pos:column="13">/* Resolved, continue with the connection */</comment>
            <expr_stmt><expr><name pos:line="54" pos:column="13">result<pos:position pos:line="54" pos:column="19"/></name> <operator pos:line="54" pos:column="20">=<pos:position pos:line="54" pos:column="21"/></operator> <call><name pos:line="54" pos:column="22">Curl_async_resolved<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name pos:line="54" pos:column="42">conn<pos:position pos:line="54" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="48">&amp;<pos:position pos:line="54" pos:column="53"/></operator><name pos:line="54" pos:column="49">protocol_done<pos:position pos:line="54" pos:column="62"/></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt>
            <if pos:line="55" pos:column="13">if<condition pos:line="55" pos:column="15">(<expr><name pos:line="55" pos:column="16">result<pos:position pos:line="55" pos:column="22"/></name></expr>)<pos:position pos:line="55" pos:column="23"/></condition><then pos:line="55" pos:column="23">
              <block type="pseudo"><return pos:line="56" pos:column="15">return <expr><name pos:line="56" pos:column="22">result<pos:position pos:line="56" pos:column="28"/></name></expr>;<pos:position pos:line="56" pos:column="29"/></return></block></then></if>
          }<pos:position pos:line="57" pos:column="12"/></block></then></if>

          <comment type="block" pos:line="59" pos:column="11">/* ... finally back to actually retry the DO phase */</comment>
          <expr_stmt><expr><name pos:line="60" pos:column="11">result<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <call><name><name pos:line="60" pos:column="20">conn<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">-&gt;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="26">handler<pos:position pos:line="60" pos:column="33"/></name><operator pos:line="60" pos:column="33">-&gt;<pos:position pos:line="60" pos:column="38"/></operator><name pos:line="60" pos:column="35">do_it<pos:position pos:line="60" pos:column="40"/></name></name><argument_list pos:line="60" pos:column="40">(<argument><expr><name pos:line="60" pos:column="41">conn<pos:position pos:line="60" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="47">done<pos:position pos:line="60" pos:column="51"/></name></expr></argument>)<pos:position pos:line="60" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
      }<pos:position pos:line="62" pos:column="8"/></block></then></if>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>

    <if pos:line="65" pos:column="5">if<condition pos:line="65" pos:column="7">(<expr><operator pos:line="65" pos:column="8">(<pos:position pos:line="65" pos:column="9"/></operator><name pos:line="65" pos:column="9">result<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">==<pos:position pos:line="65" pos:column="18"/></operator> <name pos:line="65" pos:column="19">CURLE_OK<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">)<pos:position pos:line="65" pos:column="28"/></operator> <operator pos:line="65" pos:column="29">&amp;&amp;<pos:position pos:line="65" pos:column="39"/></operator> <operator pos:line="65" pos:column="32">*<pos:position pos:line="65" pos:column="33"/></operator><name pos:line="65" pos:column="33">done<pos:position pos:line="65" pos:column="37"/></name></expr>)<pos:position pos:line="65" pos:column="38"/></condition><then pos:line="65" pos:column="38">
      <comment type="block" pos:line="66" pos:column="7">/* do_complete must be called after the protocol-specific DO function */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="7">do_complete<pos:position pos:line="67" pos:column="18"/></name><argument_list pos:line="67" pos:column="18">(<argument><expr><name pos:line="67" pos:column="19">conn<pos:position pos:line="67" pos:column="23"/></name></expr></argument>)<pos:position pos:line="67" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt></block></then></if>
  }<pos:position pos:line="68" pos:column="4"/></block></then></if>
  <return pos:line="69" pos:column="3">return <expr><name pos:line="69" pos:column="10">result<pos:position pos:line="69" pos:column="16"/></name></expr>;<pos:position pos:line="69" pos:column="17"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
