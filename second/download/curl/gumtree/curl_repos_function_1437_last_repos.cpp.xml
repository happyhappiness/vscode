<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1437_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_http_readwrite_headers<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">Curl_easy<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">data<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                                       <parameter><decl><type><name><name pos:line="2" pos:column="40">struct<pos:position pos:line="2" pos:column="46"/></name> <name pos:line="2" pos:column="47">connectdata<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">conn<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="3" pos:column="40">ssize_t<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">nread<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="4" pos:column="40">bool<pos:position pos:line="4" pos:column="44"/></name> <modifier pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></modifier></type><name pos:line="4" pos:column="46">stop_reading<pos:position pos:line="4" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="59"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SingleRequest<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">k<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><operator pos:line="7" pos:column="29">&amp;<pos:position pos:line="7" pos:column="34"/></operator><name><name pos:line="7" pos:column="30">data<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">req<pos:position pos:line="7" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* header line within buffer loop */</comment>
  <do pos:line="10" pos:column="3">do <block pos:line="10" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">size_t<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">rest_length<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">size_t<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">full_length<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">writetype<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* str_start is start of line within buf */</comment>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">k<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">str_start<pos:position pos:line="16" pos:column="17"/></name></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <name><name pos:line="16" pos:column="20">k<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">-&gt;<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="23">str<pos:position pos:line="16" pos:column="26"/></name></name></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* data is in network encoding so use 0x0a instead of '\n' */</comment>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">k<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">-&gt;<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="8">end_ptr<pos:position pos:line="19" pos:column="15"/></name></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">memchr<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name><name pos:line="19" pos:column="25">k<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">str_start<pos:position pos:line="19" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="39">0x0a<pos:position pos:line="19" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="45">*<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="46">nread<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>

    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><operator pos:line="21" pos:column="8">!<pos:position pos:line="21" pos:column="9"/></operator><name><name pos:line="21" pos:column="9">k<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">end_ptr<pos:position pos:line="21" pos:column="19"/></name></name></expr>)<pos:position pos:line="21" pos:column="20"/></condition><then pos:line="21" pos:column="20"> <block pos:line="21" pos:column="21">{
      <comment type="block" pos:line="22" pos:column="7">/* Not a complete header line within buffer, append the data to
         the end of the headerbuff. */</comment>
      <expr_stmt><expr><name pos:line="24" pos:column="7">result<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <call><name pos:line="24" pos:column="16">header_append<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">data<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="36">k<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="39">*<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="40">nread<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
      <if pos:line="25" pos:column="7">if<condition pos:line="25" pos:column="9">(<expr><name pos:line="25" pos:column="10">result<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">result<pos:position pos:line="26" pos:column="22"/></name></expr>;<pos:position pos:line="26" pos:column="23"/></return></block></then></if>

      <if pos:line="28" pos:column="7">if<condition pos:line="28" pos:column="9">(<expr><operator pos:line="28" pos:column="10">!<pos:position pos:line="28" pos:column="11"/></operator><name><name pos:line="28" pos:column="11">k<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">headerline<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">&amp;&amp;<pos:position pos:line="28" pos:column="35"/></operator> <operator pos:line="28" pos:column="28">(<pos:position pos:line="28" pos:column="29"/></operator><name><name pos:line="28" pos:column="29">k<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">hbuflen<pos:position pos:line="28" pos:column="39"/></name></name><operator pos:line="28" pos:column="39">&gt;<pos:position pos:line="28" pos:column="43"/></operator><literal type="number" pos:line="28" pos:column="40">5<pos:position pos:line="28" pos:column="41"/></literal><operator pos:line="28" pos:column="41">)<pos:position pos:line="28" pos:column="42"/></operator></expr>)<pos:position pos:line="28" pos:column="43"/></condition><then pos:line="28" pos:column="43"> <block pos:line="28" pos:column="44">{
        <comment type="block" pos:line="29" pos:column="9">/* make a first check that this looks like a protocol header */</comment>
        <if pos:line="30" pos:column="9">if<condition pos:line="30" pos:column="11">(<expr><operator pos:line="30" pos:column="12">!<pos:position pos:line="30" pos:column="13"/></operator><call><name pos:line="30" pos:column="13">checkprotoprefix<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">data<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="36">conn<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="42">data<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">-&gt;<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="48">state<pos:position pos:line="30" pos:column="53"/></name><operator pos:line="30" pos:column="53">.<pos:position pos:line="30" pos:column="54"/></operator><name pos:line="30" pos:column="54">headerbuff<pos:position pos:line="30" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="66"/></condition><then pos:line="30" pos:column="66"> <block pos:line="30" pos:column="67">{
          <comment type="block" pos:line="31" pos:column="11">/* this is not the beginning of a protocol first header line */</comment>
          <expr_stmt><expr><name><name pos:line="32" pos:column="11">k<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">-&gt;<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="14">header<pos:position pos:line="32" pos:column="20"/></name></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">FALSE<pos:position pos:line="32" pos:column="28"/></name></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="33" pos:column="11">k<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">badheader<pos:position pos:line="33" pos:column="23"/></name></name> <operator pos:line="33" pos:column="24">=<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">HEADER_ALLBAD<pos:position pos:line="33" pos:column="39"/></name></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
          <break pos:line="34" pos:column="11">break;<pos:position pos:line="34" pos:column="17"/></break>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>
      }<pos:position pos:line="36" pos:column="8"/></block></then></if>

      <break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break> <comment type="block" pos:line="38" pos:column="14">/* read more and try again */</comment>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="41" pos:column="5">/* decrease the size of the remaining (supposed) header line */</comment>
    <expr_stmt><expr><name pos:line="42" pos:column="5">rest_length<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <operator pos:line="42" pos:column="19">(<pos:position pos:line="42" pos:column="20"/></operator><name><name pos:line="42" pos:column="20">k<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">-&gt;<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="23">end_ptr<pos:position pos:line="42" pos:column="30"/></name></name> <operator pos:line="42" pos:column="31">-<pos:position pos:line="42" pos:column="32"/></operator> <name><name pos:line="42" pos:column="33">k<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">str<pos:position pos:line="42" pos:column="39"/></name></name><operator pos:line="42" pos:column="39">)<pos:position pos:line="42" pos:column="40"/></operator> <operator pos:line="42" pos:column="41">+<pos:position pos:line="42" pos:column="42"/></operator> <literal type="number" pos:line="42" pos:column="43">1<pos:position pos:line="42" pos:column="44"/></literal></expr>;<pos:position pos:line="42" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="43" pos:column="5">*<pos:position pos:line="43" pos:column="6"/></operator><name pos:line="43" pos:column="6">nread<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">-=<pos:position pos:line="43" pos:column="14"/></operator> <operator pos:line="43" pos:column="15">(<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="16">ssize_t<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">)<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="24">rest_length<pos:position pos:line="43" pos:column="35"/></name></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="45" pos:column="5">k<pos:position pos:line="45" pos:column="6"/></name><operator pos:line="45" pos:column="6">-&gt;<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="8">str<pos:position pos:line="45" pos:column="11"/></name></name> <operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator> <name><name pos:line="45" pos:column="14">k<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">end_ptr<pos:position pos:line="45" pos:column="24"/></name></name> <operator pos:line="45" pos:column="25">+<pos:position pos:line="45" pos:column="26"/></operator> <literal type="number" pos:line="45" pos:column="27">1<pos:position pos:line="45" pos:column="28"/></literal></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt> <comment type="block" pos:line="45" pos:column="30">/* move past new line */</comment>

    <expr_stmt><expr><name pos:line="47" pos:column="5">full_length<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <name><name pos:line="47" pos:column="19">k<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">-&gt;<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="22">str<pos:position pos:line="47" pos:column="25"/></name></name> <operator pos:line="47" pos:column="26">-<pos:position pos:line="47" pos:column="27"/></operator> <name><name pos:line="47" pos:column="28">k<pos:position pos:line="47" pos:column="29"/></name><operator pos:line="47" pos:column="29">-&gt;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="31">str_start<pos:position pos:line="47" pos:column="40"/></name></name></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name pos:line="49" pos:column="5">result<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <call><name pos:line="49" pos:column="14">header_append<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><name pos:line="49" pos:column="28">data<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="34">k<pos:position pos:line="49" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="37">full_length<pos:position pos:line="49" pos:column="48"/></name></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>
    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><name pos:line="50" pos:column="8">result<pos:position pos:line="50" pos:column="14"/></name></expr>)<pos:position pos:line="50" pos:column="15"/></condition><then pos:line="50" pos:column="15">
      <block type="pseudo"><return pos:line="51" pos:column="7">return <expr><name pos:line="51" pos:column="14">result<pos:position pos:line="51" pos:column="20"/></name></expr>;<pos:position pos:line="51" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="53" pos:column="5">k<pos:position pos:line="53" pos:column="6"/></name><operator pos:line="53" pos:column="6">-&gt;<pos:position pos:line="53" pos:column="11"/></operator><name pos:line="53" pos:column="8">end_ptr<pos:position pos:line="53" pos:column="15"/></name></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <name><name pos:line="53" pos:column="18">k<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">hbufp<pos:position pos:line="53" pos:column="26"/></name></name></expr>;<pos:position pos:line="53" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">k<pos:position pos:line="54" pos:column="6"/></name><operator pos:line="54" pos:column="6">-&gt;<pos:position pos:line="54" pos:column="11"/></operator><name pos:line="54" pos:column="8">p<pos:position pos:line="54" pos:column="9"/></name></name> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <name><name pos:line="54" pos:column="12">data<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">-&gt;<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="18">state<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">.<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="24">headerbuff<pos:position pos:line="54" pos:column="34"/></name></name></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="56" pos:column="5">/****
     * We now have a FULL header line that p points to
     *****/</comment>

    <if pos:line="60" pos:column="5">if<condition pos:line="60" pos:column="7">(<expr><operator pos:line="60" pos:column="8">!<pos:position pos:line="60" pos:column="9"/></operator><name><name pos:line="60" pos:column="9">k<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">-&gt;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="12">headerline<pos:position pos:line="60" pos:column="22"/></name></name></expr>)<pos:position pos:line="60" pos:column="23"/></condition><then pos:line="60" pos:column="23"> <block pos:line="60" pos:column="24">{
      <comment type="block" pos:line="61" pos:column="7">/* the first read header */</comment>
      <if pos:line="62" pos:column="7">if<condition pos:line="62" pos:column="9">(<expr><operator pos:line="62" pos:column="10">(<pos:position pos:line="62" pos:column="11"/></operator><name><name pos:line="62" pos:column="11">k<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">-&gt;<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="14">hbuflen<pos:position pos:line="62" pos:column="21"/></name></name><operator pos:line="62" pos:column="21">&gt;<pos:position pos:line="62" pos:column="25"/></operator><literal type="number" pos:line="62" pos:column="22">5<pos:position pos:line="62" pos:column="23"/></literal><operator pos:line="62" pos:column="23">)<pos:position pos:line="62" pos:column="24"/></operator> <operator pos:line="62" pos:column="25">&amp;&amp;<pos:position pos:line="62" pos:column="35"/></operator>
         <operator pos:line="63" pos:column="10">!<pos:position pos:line="63" pos:column="11"/></operator><call><name pos:line="63" pos:column="11">checkprotoprefix<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">data<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">conn<pos:position pos:line="63" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="40">data<pos:position pos:line="63" pos:column="44"/></name><operator pos:line="63" pos:column="44">-&gt;<pos:position pos:line="63" pos:column="49"/></operator><name pos:line="63" pos:column="46">state<pos:position pos:line="63" pos:column="51"/></name><operator pos:line="63" pos:column="51">.<pos:position pos:line="63" pos:column="52"/></operator><name pos:line="63" pos:column="52">headerbuff<pos:position pos:line="63" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="64"/></condition><then pos:line="63" pos:column="64"> <block pos:line="63" pos:column="65">{
        <comment type="block" pos:line="64" pos:column="9">/* this is not the beginning of a protocol first header line */</comment>
        <expr_stmt><expr><name><name pos:line="65" pos:column="9">k<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">header<pos:position pos:line="65" pos:column="18"/></name></name> <operator pos:line="65" pos:column="19">=<pos:position pos:line="65" pos:column="20"/></operator> <name pos:line="65" pos:column="21">FALSE<pos:position pos:line="65" pos:column="26"/></name></expr>;<pos:position pos:line="65" pos:column="27"/></expr_stmt>
        <if pos:line="66" pos:column="9">if<condition pos:line="66" pos:column="11">(<expr><operator pos:line="66" pos:column="12">*<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="13">nread<pos:position pos:line="66" pos:column="18"/></name></expr>)<pos:position pos:line="66" pos:column="19"/></condition><then pos:line="66" pos:column="19">
          <comment type="block" pos:line="67" pos:column="11">/* since there's more, this is a partial bad header */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="68" pos:column="11">k<pos:position pos:line="68" pos:column="12"/></name><operator pos:line="68" pos:column="12">-&gt;<pos:position pos:line="68" pos:column="17"/></operator><name pos:line="68" pos:column="14">badheader<pos:position pos:line="68" pos:column="23"/></name></name> <operator pos:line="68" pos:column="24">=<pos:position pos:line="68" pos:column="25"/></operator> <name pos:line="68" pos:column="26">HEADER_PARTHEADER<pos:position pos:line="68" pos:column="43"/></name></expr>;<pos:position pos:line="68" pos:column="44"/></expr_stmt></block></then>
        <else pos:line="69" pos:column="9">else <block pos:line="69" pos:column="14">{
          <comment type="block" pos:line="70" pos:column="11">/* this was all we read so it's all a bad header */</comment>
          <expr_stmt><expr><name><name pos:line="71" pos:column="11">k<pos:position pos:line="71" pos:column="12"/></name><operator pos:line="71" pos:column="12">-&gt;<pos:position pos:line="71" pos:column="17"/></operator><name pos:line="71" pos:column="14">badheader<pos:position pos:line="71" pos:column="23"/></name></name> <operator pos:line="71" pos:column="24">=<pos:position pos:line="71" pos:column="25"/></operator> <name pos:line="71" pos:column="26">HEADER_ALLBAD<pos:position pos:line="71" pos:column="39"/></name></expr>;<pos:position pos:line="71" pos:column="40"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="72" pos:column="11">*<pos:position pos:line="72" pos:column="12"/></operator><name pos:line="72" pos:column="12">nread<pos:position pos:line="72" pos:column="17"/></name> <operator pos:line="72" pos:column="18">=<pos:position pos:line="72" pos:column="19"/></operator> <operator pos:line="72" pos:column="20">(<pos:position pos:line="72" pos:column="21"/></operator><name pos:line="72" pos:column="21">ssize_t<pos:position pos:line="72" pos:column="28"/></name><operator pos:line="72" pos:column="28">)<pos:position pos:line="72" pos:column="29"/></operator><name pos:line="72" pos:column="29">rest_length<pos:position pos:line="72" pos:column="40"/></name></expr>;<pos:position pos:line="72" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="73" pos:column="10"/></block></else></if>
        <break pos:line="74" pos:column="9">break;<pos:position pos:line="74" pos:column="15"/></break>
      }<pos:position pos:line="75" pos:column="8"/></block></then></if>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="78" pos:column="5">/* headers are in network encoding so
       use 0x0a and 0x0d instead of '\n' and '\r' */</comment>
    <if pos:line="80" pos:column="5">if<condition pos:line="80" pos:column="7">(<expr><operator pos:line="80" pos:column="8">(<pos:position pos:line="80" pos:column="9"/></operator><literal type="number" pos:line="80" pos:column="9">0x0a<pos:position pos:line="80" pos:column="13"/></literal> <operator pos:line="80" pos:column="14">==<pos:position pos:line="80" pos:column="16"/></operator> <operator pos:line="80" pos:column="17">*<pos:position pos:line="80" pos:column="18"/></operator><name><name pos:line="80" pos:column="18">k<pos:position pos:line="80" pos:column="19"/></name><operator pos:line="80" pos:column="19">-&gt;<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="21">p<pos:position pos:line="80" pos:column="22"/></name></name><operator pos:line="80" pos:column="22">)<pos:position pos:line="80" pos:column="23"/></operator> <operator pos:line="80" pos:column="24">||<pos:position pos:line="80" pos:column="26"/></operator> <operator pos:line="80" pos:column="27">(<pos:position pos:line="80" pos:column="28"/></operator><literal type="number" pos:line="80" pos:column="28">0x0d<pos:position pos:line="80" pos:column="32"/></literal> <operator pos:line="80" pos:column="33">==<pos:position pos:line="80" pos:column="35"/></operator> <operator pos:line="80" pos:column="36">*<pos:position pos:line="80" pos:column="37"/></operator><name><name pos:line="80" pos:column="37">k<pos:position pos:line="80" pos:column="38"/></name><operator pos:line="80" pos:column="38">-&gt;<pos:position pos:line="80" pos:column="43"/></operator><name pos:line="80" pos:column="40">p<pos:position pos:line="80" pos:column="41"/></name></name><operator pos:line="80" pos:column="41">)<pos:position pos:line="80" pos:column="42"/></operator></expr>)<pos:position pos:line="80" pos:column="43"/></condition><then pos:line="80" pos:column="43"> <block pos:line="80" pos:column="44">{
      <decl_stmt><decl><type><name pos:line="81" pos:column="7">size_t<pos:position pos:line="81" pos:column="13"/></name></type> <name pos:line="81" pos:column="14">headerlen<pos:position pos:line="81" pos:column="23"/></name></decl>;<pos:position pos:line="81" pos:column="24"/></decl_stmt>
      <comment type="block" pos:line="82" pos:column="7">/* Zero-length header line means end of headers! */</comment>

<cpp:ifdef pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">ifdef<pos:position pos:line="84" pos:column="7"/></cpp:directive> <name pos:line="84" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="84" pos:column="29"/></name></cpp:ifdef>
      <if pos:line="85" pos:column="7">if<condition pos:line="85" pos:column="9">(<expr><literal type="number" pos:line="85" pos:column="10">0x0d<pos:position pos:line="85" pos:column="14"/></literal> <operator pos:line="85" pos:column="15">==<pos:position pos:line="85" pos:column="17"/></operator> <operator pos:line="85" pos:column="18">*<pos:position pos:line="85" pos:column="19"/></operator><name><name pos:line="85" pos:column="19">k<pos:position pos:line="85" pos:column="20"/></name><operator pos:line="85" pos:column="20">-&gt;<pos:position pos:line="85" pos:column="25"/></operator><name pos:line="85" pos:column="22">p<pos:position pos:line="85" pos:column="23"/></name></name></expr>)<pos:position pos:line="85" pos:column="24"/></condition><then pos:line="85" pos:column="24"> <block pos:line="85" pos:column="25">{
        <expr_stmt><expr><operator pos:line="86" pos:column="9">*<pos:position pos:line="86" pos:column="10"/></operator><name><name pos:line="86" pos:column="10">k<pos:position pos:line="86" pos:column="11"/></name><operator pos:line="86" pos:column="11">-&gt;<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="13">p<pos:position pos:line="86" pos:column="14"/></name></name> <operator pos:line="86" pos:column="15">=<pos:position pos:line="86" pos:column="16"/></operator> <literal type="char" pos:line="86" pos:column="17">'\r'<pos:position pos:line="86" pos:column="21"/></literal></expr>;<pos:position pos:line="86" pos:column="22"/></expr_stmt> <comment type="block" pos:line="86" pos:column="23">/* replace with CR in host encoding */</comment>
        <expr_stmt><expr><name><name pos:line="87" pos:column="9">k<pos:position pos:line="87" pos:column="10"/></name><operator pos:line="87" pos:column="10">-&gt;<pos:position pos:line="87" pos:column="15"/></operator><name pos:line="87" pos:column="12">p<pos:position pos:line="87" pos:column="13"/></name></name><operator pos:line="87" pos:column="13">++<pos:position pos:line="87" pos:column="15"/></operator></expr>;<pos:position pos:line="87" pos:column="16"/></expr_stmt>       <comment type="block" pos:line="87" pos:column="23">/* pass the CR byte */</comment>
      }<pos:position pos:line="88" pos:column="8"/></block></then></if>
      <if pos:line="89" pos:column="7">if<condition pos:line="89" pos:column="9">(<expr><literal type="number" pos:line="89" pos:column="10">0x0a<pos:position pos:line="89" pos:column="14"/></literal> <operator pos:line="89" pos:column="15">==<pos:position pos:line="89" pos:column="17"/></operator> <operator pos:line="89" pos:column="18">*<pos:position pos:line="89" pos:column="19"/></operator><name><name pos:line="89" pos:column="19">k<pos:position pos:line="89" pos:column="20"/></name><operator pos:line="89" pos:column="20">-&gt;<pos:position pos:line="89" pos:column="25"/></operator><name pos:line="89" pos:column="22">p<pos:position pos:line="89" pos:column="23"/></name></name></expr>)<pos:position pos:line="89" pos:column="24"/></condition><then pos:line="89" pos:column="24"> <block pos:line="89" pos:column="25">{
        <expr_stmt><expr><operator pos:line="90" pos:column="9">*<pos:position pos:line="90" pos:column="10"/></operator><name><name pos:line="90" pos:column="10">k<pos:position pos:line="90" pos:column="11"/></name><operator pos:line="90" pos:column="11">-&gt;<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="13">p<pos:position pos:line="90" pos:column="14"/></name></name> <operator pos:line="90" pos:column="15">=<pos:position pos:line="90" pos:column="16"/></operator> <literal type="char" pos:line="90" pos:column="17">'\n'<pos:position pos:line="90" pos:column="21"/></literal></expr>;<pos:position pos:line="90" pos:column="22"/></expr_stmt> <comment type="block" pos:line="90" pos:column="23">/* replace with LF in host encoding */</comment>
        <expr_stmt><expr><name><name pos:line="91" pos:column="9">k<pos:position pos:line="91" pos:column="10"/></name><operator pos:line="91" pos:column="10">-&gt;<pos:position pos:line="91" pos:column="15"/></operator><name pos:line="91" pos:column="12">p<pos:position pos:line="91" pos:column="13"/></name></name><operator pos:line="91" pos:column="13">++<pos:position pos:line="91" pos:column="15"/></operator></expr>;<pos:position pos:line="91" pos:column="16"/></expr_stmt>       <comment type="block" pos:line="91" pos:column="23">/* pass the LF byte */</comment>
      }<pos:position pos:line="92" pos:column="8"/></block></then></if>
<cpp:else pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">else<pos:position pos:line="93" pos:column="6"/></cpp:directive></cpp:else>
      <if pos:line="94" pos:column="7">if<condition pos:line="94" pos:column="9">(<expr><literal type="char" pos:line="94" pos:column="10">'\r'<pos:position pos:line="94" pos:column="14"/></literal> <operator pos:line="94" pos:column="15">==<pos:position pos:line="94" pos:column="17"/></operator> <operator pos:line="94" pos:column="18">*<pos:position pos:line="94" pos:column="19"/></operator><name><name pos:line="94" pos:column="19">k<pos:position pos:line="94" pos:column="20"/></name><operator pos:line="94" pos:column="20">-&gt;<pos:position pos:line="94" pos:column="25"/></operator><name pos:line="94" pos:column="22">p<pos:position pos:line="94" pos:column="23"/></name></name></expr>)<pos:position pos:line="94" pos:column="24"/></condition><then pos:line="94" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="95" pos:column="9">k<pos:position pos:line="95" pos:column="10"/></name><operator pos:line="95" pos:column="10">-&gt;<pos:position pos:line="95" pos:column="15"/></operator><name pos:line="95" pos:column="12">p<pos:position pos:line="95" pos:column="13"/></name></name><operator pos:line="95" pos:column="13">++<pos:position pos:line="95" pos:column="15"/></operator></expr>;<pos:position pos:line="95" pos:column="16"/></expr_stmt></block></then></if> <comment type="block" pos:line="95" pos:column="17">/* pass the \r byte */</comment>
      <if pos:line="96" pos:column="7">if<condition pos:line="96" pos:column="9">(<expr><literal type="char" pos:line="96" pos:column="10">'\n'<pos:position pos:line="96" pos:column="14"/></literal> <operator pos:line="96" pos:column="15">==<pos:position pos:line="96" pos:column="17"/></operator> <operator pos:line="96" pos:column="18">*<pos:position pos:line="96" pos:column="19"/></operator><name><name pos:line="96" pos:column="19">k<pos:position pos:line="96" pos:column="20"/></name><operator pos:line="96" pos:column="20">-&gt;<pos:position pos:line="96" pos:column="25"/></operator><name pos:line="96" pos:column="22">p<pos:position pos:line="96" pos:column="23"/></name></name></expr>)<pos:position pos:line="96" pos:column="24"/></condition><then pos:line="96" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="97" pos:column="9">k<pos:position pos:line="97" pos:column="10"/></name><operator pos:line="97" pos:column="10">-&gt;<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="12">p<pos:position pos:line="97" pos:column="13"/></name></name><operator pos:line="97" pos:column="13">++<pos:position pos:line="97" pos:column="15"/></operator></expr>;<pos:position pos:line="97" pos:column="16"/></expr_stmt></block></then></if> <comment type="block" pos:line="97" pos:column="17">/* pass the \n byte */</comment>
<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif<pos:position pos:line="98" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="98" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

      <if pos:line="100" pos:column="7">if<condition pos:line="100" pos:column="9">(<expr><literal type="number" pos:line="100" pos:column="10">100<pos:position pos:line="100" pos:column="13"/></literal> <operator pos:line="100" pos:column="14">&lt;=<pos:position pos:line="100" pos:column="19"/></operator> <name><name pos:line="100" pos:column="17">k<pos:position pos:line="100" pos:column="18"/></name><operator pos:line="100" pos:column="18">-&gt;<pos:position pos:line="100" pos:column="23"/></operator><name pos:line="100" pos:column="20">httpcode<pos:position pos:line="100" pos:column="28"/></name></name> <operator pos:line="100" pos:column="29">&amp;&amp;<pos:position pos:line="100" pos:column="39"/></operator> <literal type="number" pos:line="100" pos:column="32">199<pos:position pos:line="100" pos:column="35"/></literal> <operator pos:line="100" pos:column="36">&gt;=<pos:position pos:line="100" pos:column="41"/></operator> <name><name pos:line="100" pos:column="39">k<pos:position pos:line="100" pos:column="40"/></name><operator pos:line="100" pos:column="40">-&gt;<pos:position pos:line="100" pos:column="45"/></operator><name pos:line="100" pos:column="42">httpcode<pos:position pos:line="100" pos:column="50"/></name></name></expr>)<pos:position pos:line="100" pos:column="51"/></condition><then pos:line="100" pos:column="51"> <block pos:line="100" pos:column="52">{
        <comment type="block" pos:line="101" pos:column="9">/* "A user agent MAY ignore unexpected 1xx status responses." */</comment>
        <switch pos:line="102" pos:column="9">switch<condition pos:line="102" pos:column="15">(<expr><name><name pos:line="102" pos:column="16">k<pos:position pos:line="102" pos:column="17"/></name><operator pos:line="102" pos:column="17">-&gt;<pos:position pos:line="102" pos:column="22"/></operator><name pos:line="102" pos:column="19">httpcode<pos:position pos:line="102" pos:column="27"/></name></name></expr>)<pos:position pos:line="102" pos:column="28"/></condition> <block pos:line="102" pos:column="29">{
        <case pos:line="103" pos:column="9">case <expr><literal type="number" pos:line="103" pos:column="14">100<pos:position pos:line="103" pos:column="17"/></literal></expr>:<pos:position pos:line="103" pos:column="18"/></case>
          <comment type="block" pos:line="104" pos:column="11">/*
           * We have made a HTTP PUT or POST and this is 1.1-lingo
           * that tells us that the server is OK with this and ready
           * to receive the data.
           * However, we'll get more headers now so we must get
           * back into the header-parsing state!
           */</comment>
          <expr_stmt><expr><name><name pos:line="111" pos:column="11">k<pos:position pos:line="111" pos:column="12"/></name><operator pos:line="111" pos:column="12">-&gt;<pos:position pos:line="111" pos:column="17"/></operator><name pos:line="111" pos:column="14">header<pos:position pos:line="111" pos:column="20"/></name></name> <operator pos:line="111" pos:column="21">=<pos:position pos:line="111" pos:column="22"/></operator> <name pos:line="111" pos:column="23">TRUE<pos:position pos:line="111" pos:column="27"/></name></expr>;<pos:position pos:line="111" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="112" pos:column="11">k<pos:position pos:line="112" pos:column="12"/></name><operator pos:line="112" pos:column="12">-&gt;<pos:position pos:line="112" pos:column="17"/></operator><name pos:line="112" pos:column="14">headerline<pos:position pos:line="112" pos:column="24"/></name></name> <operator pos:line="112" pos:column="25">=<pos:position pos:line="112" pos:column="26"/></operator> <literal type="number" pos:line="112" pos:column="27">0<pos:position pos:line="112" pos:column="28"/></literal></expr>;<pos:position pos:line="112" pos:column="29"/></expr_stmt> <comment type="block" pos:line="112" pos:column="30">/* restart the header line counter */</comment>

          <comment type="block" pos:line="114" pos:column="11">/* if we did wait for this do enable write now! */</comment>
          <if pos:line="115" pos:column="11">if<condition pos:line="115" pos:column="13">(<expr><name><name pos:line="115" pos:column="14">k<pos:position pos:line="115" pos:column="15"/></name><operator pos:line="115" pos:column="15">-&gt;<pos:position pos:line="115" pos:column="20"/></operator><name pos:line="115" pos:column="17">exp100<pos:position pos:line="115" pos:column="23"/></name></name> <operator pos:line="115" pos:column="24">&gt;<pos:position pos:line="115" pos:column="28"/></operator> <name pos:line="115" pos:column="26">EXP100_SEND_DATA<pos:position pos:line="115" pos:column="42"/></name></expr>)<pos:position pos:line="115" pos:column="43"/></condition><then pos:line="115" pos:column="43"> <block pos:line="115" pos:column="44">{
            <expr_stmt><expr><name><name pos:line="116" pos:column="13">k<pos:position pos:line="116" pos:column="14"/></name><operator pos:line="116" pos:column="14">-&gt;<pos:position pos:line="116" pos:column="19"/></operator><name pos:line="116" pos:column="16">exp100<pos:position pos:line="116" pos:column="22"/></name></name> <operator pos:line="116" pos:column="23">=<pos:position pos:line="116" pos:column="24"/></operator> <name pos:line="116" pos:column="25">EXP100_SEND_DATA<pos:position pos:line="116" pos:column="41"/></name></expr>;<pos:position pos:line="116" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="117" pos:column="13">k<pos:position pos:line="117" pos:column="14"/></name><operator pos:line="117" pos:column="14">-&gt;<pos:position pos:line="117" pos:column="19"/></operator><name pos:line="117" pos:column="16">keepon<pos:position pos:line="117" pos:column="22"/></name></name> <operator pos:line="117" pos:column="23">|=<pos:position pos:line="117" pos:column="25"/></operator> <name pos:line="117" pos:column="26">KEEP_SEND<pos:position pos:line="117" pos:column="35"/></name></expr>;<pos:position pos:line="117" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="118" pos:column="13">Curl_expire_done<pos:position pos:line="118" pos:column="29"/></name><argument_list pos:line="118" pos:column="29">(<argument><expr><name pos:line="118" pos:column="30">data<pos:position pos:line="118" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="36">EXPIRE_100_TIMEOUT<pos:position pos:line="118" pos:column="54"/></name></expr></argument>)<pos:position pos:line="118" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="56"/></expr_stmt>
          }<pos:position pos:line="119" pos:column="12"/></block></then></if>
          <break pos:line="120" pos:column="11">break;<pos:position pos:line="120" pos:column="17"/></break>
        <case pos:line="121" pos:column="9">case <expr><literal type="number" pos:line="121" pos:column="14">101<pos:position pos:line="121" pos:column="17"/></literal></expr>:<pos:position pos:line="121" pos:column="18"/></case>
          <comment type="block" pos:line="122" pos:column="11">/* Switching Protocols */</comment>
          <if pos:line="123" pos:column="11">if<condition pos:line="123" pos:column="13">(<expr><name><name pos:line="123" pos:column="14">k<pos:position pos:line="123" pos:column="15"/></name><operator pos:line="123" pos:column="15">-&gt;<pos:position pos:line="123" pos:column="20"/></operator><name pos:line="123" pos:column="17">upgr101<pos:position pos:line="123" pos:column="24"/></name></name> <operator pos:line="123" pos:column="25">==<pos:position pos:line="123" pos:column="27"/></operator> <name pos:line="123" pos:column="28">UPGR101_REQUESTED<pos:position pos:line="123" pos:column="45"/></name></expr>)<pos:position pos:line="123" pos:column="46"/></condition><then pos:line="123" pos:column="46"> <block pos:line="123" pos:column="47">{
            <comment type="block" pos:line="124" pos:column="13">/* Switching to HTTP/2 */</comment>
            <expr_stmt><expr><call><name pos:line="125" pos:column="13">infof<pos:position pos:line="125" pos:column="18"/></name><argument_list pos:line="125" pos:column="18">(<argument><expr><name pos:line="125" pos:column="19">data<pos:position pos:line="125" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="25">"Received 101\n"<pos:position pos:line="125" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="126" pos:column="13">k<pos:position pos:line="126" pos:column="14"/></name><operator pos:line="126" pos:column="14">-&gt;<pos:position pos:line="126" pos:column="19"/></operator><name pos:line="126" pos:column="16">upgr101<pos:position pos:line="126" pos:column="23"/></name></name> <operator pos:line="126" pos:column="24">=<pos:position pos:line="126" pos:column="25"/></operator> <name pos:line="126" pos:column="26">UPGR101_RECEIVED<pos:position pos:line="126" pos:column="42"/></name></expr>;<pos:position pos:line="126" pos:column="43"/></expr_stmt>

            <comment type="block" pos:line="128" pos:column="13">/* we'll get more headers (HTTP/2 response) */</comment>
            <expr_stmt><expr><name><name pos:line="129" pos:column="13">k<pos:position pos:line="129" pos:column="14"/></name><operator pos:line="129" pos:column="14">-&gt;<pos:position pos:line="129" pos:column="19"/></operator><name pos:line="129" pos:column="16">header<pos:position pos:line="129" pos:column="22"/></name></name> <operator pos:line="129" pos:column="23">=<pos:position pos:line="129" pos:column="24"/></operator> <name pos:line="129" pos:column="25">TRUE<pos:position pos:line="129" pos:column="29"/></name></expr>;<pos:position pos:line="129" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="130" pos:column="13">k<pos:position pos:line="130" pos:column="14"/></name><operator pos:line="130" pos:column="14">-&gt;<pos:position pos:line="130" pos:column="19"/></operator><name pos:line="130" pos:column="16">headerline<pos:position pos:line="130" pos:column="26"/></name></name> <operator pos:line="130" pos:column="27">=<pos:position pos:line="130" pos:column="28"/></operator> <literal type="number" pos:line="130" pos:column="29">0<pos:position pos:line="130" pos:column="30"/></literal></expr>;<pos:position pos:line="130" pos:column="31"/></expr_stmt> <comment type="block" pos:line="130" pos:column="32">/* restart the header line counter */</comment>

            <comment type="block" pos:line="132" pos:column="13">/* switch to http2 now. The bytes after response headers
               are also processed here, otherwise they are lost. */</comment>
            <expr_stmt><expr><name pos:line="134" pos:column="13">result<pos:position pos:line="134" pos:column="19"/></name> <operator pos:line="134" pos:column="20">=<pos:position pos:line="134" pos:column="21"/></operator> <call><name pos:line="134" pos:column="22">Curl_http2_switched<pos:position pos:line="134" pos:column="41"/></name><argument_list pos:line="134" pos:column="41">(<argument><expr><name pos:line="134" pos:column="42">conn<pos:position pos:line="134" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="48">k<pos:position pos:line="134" pos:column="49"/></name><operator pos:line="134" pos:column="49">-&gt;<pos:position pos:line="134" pos:column="54"/></operator><name pos:line="134" pos:column="51">str<pos:position pos:line="134" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="134" pos:column="56">*<pos:position pos:line="134" pos:column="57"/></operator><name pos:line="134" pos:column="57">nread<pos:position pos:line="134" pos:column="62"/></name></expr></argument>)<pos:position pos:line="134" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="64"/></expr_stmt>
            <if pos:line="135" pos:column="13">if<condition pos:line="135" pos:column="15">(<expr><name pos:line="135" pos:column="16">result<pos:position pos:line="135" pos:column="22"/></name></expr>)<pos:position pos:line="135" pos:column="23"/></condition><then pos:line="135" pos:column="23">
              <block type="pseudo"><return pos:line="136" pos:column="15">return <expr><name pos:line="136" pos:column="22">result<pos:position pos:line="136" pos:column="28"/></name></expr>;<pos:position pos:line="136" pos:column="29"/></return></block></then></if>
            <expr_stmt><expr><operator pos:line="137" pos:column="13">*<pos:position pos:line="137" pos:column="14"/></operator><name pos:line="137" pos:column="14">nread<pos:position pos:line="137" pos:column="19"/></name> <operator pos:line="137" pos:column="20">=<pos:position pos:line="137" pos:column="21"/></operator> <literal type="number" pos:line="137" pos:column="22">0<pos:position pos:line="137" pos:column="23"/></literal></expr>;<pos:position pos:line="137" pos:column="24"/></expr_stmt>
          }<pos:position pos:line="138" pos:column="12"/></block></then>
          <else pos:line="139" pos:column="11">else <block pos:line="139" pos:column="16">{
            <comment type="block" pos:line="140" pos:column="13">/* Switching to another protocol (e.g. WebSocket) */</comment>
            <expr_stmt><expr><name><name pos:line="141" pos:column="13">k<pos:position pos:line="141" pos:column="14"/></name><operator pos:line="141" pos:column="14">-&gt;<pos:position pos:line="141" pos:column="19"/></operator><name pos:line="141" pos:column="16">header<pos:position pos:line="141" pos:column="22"/></name></name> <operator pos:line="141" pos:column="23">=<pos:position pos:line="141" pos:column="24"/></operator> <name pos:line="141" pos:column="25">FALSE<pos:position pos:line="141" pos:column="30"/></name></expr>;<pos:position pos:line="141" pos:column="31"/></expr_stmt> <comment type="block" pos:line="141" pos:column="32">/* no more header to parse! */</comment>
          }<pos:position pos:line="142" pos:column="12"/></block></else></if>
          <break pos:line="143" pos:column="11">break;<pos:position pos:line="143" pos:column="17"/></break>
        <default pos:line="144" pos:column="9">default:<pos:position pos:line="144" pos:column="17"/></default>
          <comment type="block" pos:line="145" pos:column="11">/* the status code 1xx indicates a provisional response, so
             we'll get another set of headers */</comment>
          <expr_stmt><expr><name><name pos:line="147" pos:column="11">k<pos:position pos:line="147" pos:column="12"/></name><operator pos:line="147" pos:column="12">-&gt;<pos:position pos:line="147" pos:column="17"/></operator><name pos:line="147" pos:column="14">header<pos:position pos:line="147" pos:column="20"/></name></name> <operator pos:line="147" pos:column="21">=<pos:position pos:line="147" pos:column="22"/></operator> <name pos:line="147" pos:column="23">TRUE<pos:position pos:line="147" pos:column="27"/></name></expr>;<pos:position pos:line="147" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="148" pos:column="11">k<pos:position pos:line="148" pos:column="12"/></name><operator pos:line="148" pos:column="12">-&gt;<pos:position pos:line="148" pos:column="17"/></operator><name pos:line="148" pos:column="14">headerline<pos:position pos:line="148" pos:column="24"/></name></name> <operator pos:line="148" pos:column="25">=<pos:position pos:line="148" pos:column="26"/></operator> <literal type="number" pos:line="148" pos:column="27">0<pos:position pos:line="148" pos:column="28"/></literal></expr>;<pos:position pos:line="148" pos:column="29"/></expr_stmt> <comment type="block" pos:line="148" pos:column="30">/* restart the header line counter */</comment>
          <break pos:line="149" pos:column="11">break;<pos:position pos:line="149" pos:column="17"/></break>
        }<pos:position pos:line="150" pos:column="10"/></block></switch>
      }<pos:position pos:line="151" pos:column="8"/></block></then>
      <else pos:line="152" pos:column="7">else <block pos:line="152" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="153" pos:column="9">k<pos:position pos:line="153" pos:column="10"/></name><operator pos:line="153" pos:column="10">-&gt;<pos:position pos:line="153" pos:column="15"/></operator><name pos:line="153" pos:column="12">header<pos:position pos:line="153" pos:column="18"/></name></name> <operator pos:line="153" pos:column="19">=<pos:position pos:line="153" pos:column="20"/></operator> <name pos:line="153" pos:column="21">FALSE<pos:position pos:line="153" pos:column="26"/></name></expr>;<pos:position pos:line="153" pos:column="27"/></expr_stmt> <comment type="block" pos:line="153" pos:column="28">/* no more header to parse! */</comment>

        <if pos:line="155" pos:column="9">if<condition pos:line="155" pos:column="11">(<expr><operator pos:line="155" pos:column="12">(<pos:position pos:line="155" pos:column="13"/></operator><name><name pos:line="155" pos:column="13">k<pos:position pos:line="155" pos:column="14"/></name><operator pos:line="155" pos:column="14">-&gt;<pos:position pos:line="155" pos:column="19"/></operator><name pos:line="155" pos:column="16">size<pos:position pos:line="155" pos:column="20"/></name></name> <operator pos:line="155" pos:column="21">==<pos:position pos:line="155" pos:column="23"/></operator> <operator pos:line="155" pos:column="24">-<pos:position pos:line="155" pos:column="25"/></operator><literal type="number" pos:line="155" pos:column="25">1<pos:position pos:line="155" pos:column="26"/></literal><operator pos:line="155" pos:column="26">)<pos:position pos:line="155" pos:column="27"/></operator> <operator pos:line="155" pos:column="28">&amp;&amp;<pos:position pos:line="155" pos:column="38"/></operator> <operator pos:line="155" pos:column="31">!<pos:position pos:line="155" pos:column="32"/></operator><name><name pos:line="155" pos:column="32">k<pos:position pos:line="155" pos:column="33"/></name><operator pos:line="155" pos:column="33">-&gt;<pos:position pos:line="155" pos:column="38"/></operator><name pos:line="155" pos:column="35">chunk<pos:position pos:line="155" pos:column="40"/></name></name> <operator pos:line="155" pos:column="41">&amp;&amp;<pos:position pos:line="155" pos:column="51"/></operator> <operator pos:line="155" pos:column="44">!<pos:position pos:line="155" pos:column="45"/></operator><name><name pos:line="155" pos:column="45">conn<pos:position pos:line="155" pos:column="49"/></name><operator pos:line="155" pos:column="49">-&gt;<pos:position pos:line="155" pos:column="54"/></operator><name pos:line="155" pos:column="51">bits<pos:position pos:line="155" pos:column="55"/></name><operator pos:line="155" pos:column="55">.<pos:position pos:line="155" pos:column="56"/></operator><name pos:line="155" pos:column="56">close<pos:position pos:line="155" pos:column="61"/></name></name> <operator pos:line="155" pos:column="62">&amp;&amp;<pos:position pos:line="155" pos:column="72"/></operator>
           <operator pos:line="156" pos:column="12">(<pos:position pos:line="156" pos:column="13"/></operator><name><name pos:line="156" pos:column="13">conn<pos:position pos:line="156" pos:column="17"/></name><operator pos:line="156" pos:column="17">-&gt;<pos:position pos:line="156" pos:column="22"/></operator><name pos:line="156" pos:column="19">httpversion<pos:position pos:line="156" pos:column="30"/></name></name> <operator pos:line="156" pos:column="31">==<pos:position pos:line="156" pos:column="33"/></operator> <literal type="number" pos:line="156" pos:column="34">11<pos:position pos:line="156" pos:column="36"/></literal><operator pos:line="156" pos:column="36">)<pos:position pos:line="156" pos:column="37"/></operator> <operator pos:line="156" pos:column="38">&amp;&amp;<pos:position pos:line="156" pos:column="48"/></operator>
           <operator pos:line="157" pos:column="12">!<pos:position pos:line="157" pos:column="13"/></operator><operator pos:line="157" pos:column="13">(<pos:position pos:line="157" pos:column="14"/></operator><name><name pos:line="157" pos:column="14">conn<pos:position pos:line="157" pos:column="18"/></name><operator pos:line="157" pos:column="18">-&gt;<pos:position pos:line="157" pos:column="23"/></operator><name pos:line="157" pos:column="20">handler<pos:position pos:line="157" pos:column="27"/></name><operator pos:line="157" pos:column="27">-&gt;<pos:position pos:line="157" pos:column="32"/></operator><name pos:line="157" pos:column="29">protocol<pos:position pos:line="157" pos:column="37"/></name></name> <operator pos:line="157" pos:column="38">&amp;<pos:position pos:line="157" pos:column="43"/></operator> <name pos:line="157" pos:column="40">CURLPROTO_RTSP<pos:position pos:line="157" pos:column="54"/></name><operator pos:line="157" pos:column="54">)<pos:position pos:line="157" pos:column="55"/></operator> <operator pos:line="157" pos:column="56">&amp;&amp;<pos:position pos:line="157" pos:column="66"/></operator>
           <name><name pos:line="158" pos:column="12">data<pos:position pos:line="158" pos:column="16"/></name><operator pos:line="158" pos:column="16">-&gt;<pos:position pos:line="158" pos:column="21"/></operator><name pos:line="158" pos:column="18">set<pos:position pos:line="158" pos:column="21"/></name><operator pos:line="158" pos:column="21">.<pos:position pos:line="158" pos:column="22"/></operator><name pos:line="158" pos:column="22">httpreq<pos:position pos:line="158" pos:column="29"/></name></name> <operator pos:line="158" pos:column="30">!=<pos:position pos:line="158" pos:column="32"/></operator> <name pos:line="158" pos:column="33">HTTPREQ_HEAD<pos:position pos:line="158" pos:column="45"/></name></expr>)<pos:position pos:line="158" pos:column="46"/></condition><then pos:line="158" pos:column="46"> <block pos:line="158" pos:column="47">{
          <comment type="block" pos:line="159" pos:column="11">/* On HTTP 1.1, when connection is not to get closed, but no
             Content-Length nor Content-Encoding chunked have been
             received, according to RFC2616 section 4.4 point 5, we
             assume that the server will close the connection to
             signal the end of the document. */</comment>
          <expr_stmt><expr><call><name pos:line="164" pos:column="11">infof<pos:position pos:line="164" pos:column="16"/></name><argument_list pos:line="164" pos:column="16">(<argument><expr><name pos:line="164" pos:column="17">data<pos:position pos:line="164" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="164" pos:column="23">"no chunk, no close, no size. Assume close to "<pos:position pos:line="164" pos:column="70"/></literal>
                <literal type="string" pos:line="165" pos:column="17">"signal end\n"<pos:position pos:line="165" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="33"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="166" pos:column="11">streamclose<pos:position pos:line="166" pos:column="22"/></name><argument_list pos:line="166" pos:column="22">(<argument><expr><name pos:line="166" pos:column="23">conn<pos:position pos:line="166" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="29">"HTTP: No end-of-message indicator"<pos:position pos:line="166" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="66"/></expr_stmt>
        }<pos:position pos:line="167" pos:column="10"/></block></then></if>
      }<pos:position pos:line="168" pos:column="8"/></block></else></if>

      <comment type="block" pos:line="170" pos:column="7">/* At this point we have some idea about the fate of the connection.
         If we are closing the connection it may result auth failure. */</comment>
<cpp:if pos:line="172" pos:column="1">#<cpp:directive pos:line="172" pos:column="2">if<pos:position pos:line="172" pos:column="4"/></cpp:directive> <expr><call><name pos:line="172" pos:column="5">defined<pos:position pos:line="172" pos:column="12"/></name><argument_list pos:line="172" pos:column="12">(<argument><expr><name pos:line="172" pos:column="13">USE_NTLM<pos:position pos:line="172" pos:column="21"/></name></expr></argument>)<pos:position pos:line="172" pos:column="22"/></argument_list></call></expr></cpp:if>
      <if pos:line="173" pos:column="7">if<condition pos:line="173" pos:column="9">(<expr><name><name pos:line="173" pos:column="10">conn<pos:position pos:line="173" pos:column="14"/></name><operator pos:line="173" pos:column="14">-&gt;<pos:position pos:line="173" pos:column="19"/></operator><name pos:line="173" pos:column="16">bits<pos:position pos:line="173" pos:column="20"/></name><operator pos:line="173" pos:column="20">.<pos:position pos:line="173" pos:column="21"/></operator><name pos:line="173" pos:column="21">close<pos:position pos:line="173" pos:column="26"/></name></name> <operator pos:line="173" pos:column="27">&amp;&amp;<pos:position pos:line="173" pos:column="37"/></operator>
         <operator pos:line="174" pos:column="10">(<pos:position pos:line="174" pos:column="11"/></operator><operator pos:line="174" pos:column="11">(<pos:position pos:line="174" pos:column="12"/></operator><operator pos:line="174" pos:column="12">(<pos:position pos:line="174" pos:column="13"/></operator><name><name pos:line="174" pos:column="13">data<pos:position pos:line="174" pos:column="17"/></name><operator pos:line="174" pos:column="17">-&gt;<pos:position pos:line="174" pos:column="22"/></operator><name pos:line="174" pos:column="19">req<pos:position pos:line="174" pos:column="22"/></name><operator pos:line="174" pos:column="22">.<pos:position pos:line="174" pos:column="23"/></operator><name pos:line="174" pos:column="23">httpcode<pos:position pos:line="174" pos:column="31"/></name></name> <operator pos:line="174" pos:column="32">==<pos:position pos:line="174" pos:column="34"/></operator> <literal type="number" pos:line="174" pos:column="35">401<pos:position pos:line="174" pos:column="38"/></literal><operator pos:line="174" pos:column="38">)<pos:position pos:line="174" pos:column="39"/></operator> <operator pos:line="174" pos:column="40">&amp;&amp;<pos:position pos:line="174" pos:column="50"/></operator>
           <operator pos:line="175" pos:column="12">(<pos:position pos:line="175" pos:column="13"/></operator><name><name pos:line="175" pos:column="13">conn<pos:position pos:line="175" pos:column="17"/></name><operator pos:line="175" pos:column="17">-&gt;<pos:position pos:line="175" pos:column="22"/></operator><name pos:line="175" pos:column="19">ntlm<pos:position pos:line="175" pos:column="23"/></name><operator pos:line="175" pos:column="23">.<pos:position pos:line="175" pos:column="24"/></operator><name pos:line="175" pos:column="24">state<pos:position pos:line="175" pos:column="29"/></name></name> <operator pos:line="175" pos:column="30">==<pos:position pos:line="175" pos:column="32"/></operator> <name pos:line="175" pos:column="33">NTLMSTATE_TYPE2<pos:position pos:line="175" pos:column="48"/></name><operator pos:line="175" pos:column="48">)<pos:position pos:line="175" pos:column="49"/></operator><operator pos:line="175" pos:column="49">)<pos:position pos:line="175" pos:column="50"/></operator> <operator pos:line="175" pos:column="51">||<pos:position pos:line="175" pos:column="53"/></operator>
          <operator pos:line="176" pos:column="11">(<pos:position pos:line="176" pos:column="12"/></operator><operator pos:line="176" pos:column="12">(<pos:position pos:line="176" pos:column="13"/></operator><name><name pos:line="176" pos:column="13">data<pos:position pos:line="176" pos:column="17"/></name><operator pos:line="176" pos:column="17">-&gt;<pos:position pos:line="176" pos:column="22"/></operator><name pos:line="176" pos:column="19">req<pos:position pos:line="176" pos:column="22"/></name><operator pos:line="176" pos:column="22">.<pos:position pos:line="176" pos:column="23"/></operator><name pos:line="176" pos:column="23">httpcode<pos:position pos:line="176" pos:column="31"/></name></name> <operator pos:line="176" pos:column="32">==<pos:position pos:line="176" pos:column="34"/></operator> <literal type="number" pos:line="176" pos:column="35">407<pos:position pos:line="176" pos:column="38"/></literal><operator pos:line="176" pos:column="38">)<pos:position pos:line="176" pos:column="39"/></operator> <operator pos:line="176" pos:column="40">&amp;&amp;<pos:position pos:line="176" pos:column="50"/></operator>
           <operator pos:line="177" pos:column="12">(<pos:position pos:line="177" pos:column="13"/></operator><name><name pos:line="177" pos:column="13">conn<pos:position pos:line="177" pos:column="17"/></name><operator pos:line="177" pos:column="17">-&gt;<pos:position pos:line="177" pos:column="22"/></operator><name pos:line="177" pos:column="19">proxyntlm<pos:position pos:line="177" pos:column="28"/></name><operator pos:line="177" pos:column="28">.<pos:position pos:line="177" pos:column="29"/></operator><name pos:line="177" pos:column="29">state<pos:position pos:line="177" pos:column="34"/></name></name> <operator pos:line="177" pos:column="35">==<pos:position pos:line="177" pos:column="37"/></operator> <name pos:line="177" pos:column="38">NTLMSTATE_TYPE2<pos:position pos:line="177" pos:column="53"/></name><operator pos:line="177" pos:column="53">)<pos:position pos:line="177" pos:column="54"/></operator><operator pos:line="177" pos:column="54">)<pos:position pos:line="177" pos:column="55"/></operator><operator pos:line="177" pos:column="55">)<pos:position pos:line="177" pos:column="56"/></operator></expr>)<pos:position pos:line="177" pos:column="57"/></condition><then pos:line="177" pos:column="57"> <block pos:line="177" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="178" pos:column="9">infof<pos:position pos:line="178" pos:column="14"/></name><argument_list pos:line="178" pos:column="14">(<argument><expr><name pos:line="178" pos:column="15">data<pos:position pos:line="178" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="178" pos:column="21">"Connection closure while negotiating auth (HTTP 1.0?)\n"<pos:position pos:line="178" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="179" pos:column="9">data<pos:position pos:line="179" pos:column="13"/></name><operator pos:line="179" pos:column="13">-&gt;<pos:position pos:line="179" pos:column="18"/></operator><name pos:line="179" pos:column="15">state<pos:position pos:line="179" pos:column="20"/></name><operator pos:line="179" pos:column="20">.<pos:position pos:line="179" pos:column="21"/></operator><name pos:line="179" pos:column="21">authproblem<pos:position pos:line="179" pos:column="32"/></name></name> <operator pos:line="179" pos:column="33">=<pos:position pos:line="179" pos:column="34"/></operator> <name pos:line="179" pos:column="35">TRUE<pos:position pos:line="179" pos:column="39"/></name></expr>;<pos:position pos:line="179" pos:column="40"/></expr_stmt>
      }<pos:position pos:line="180" pos:column="8"/></block></then></if>
<cpp:endif pos:line="181" pos:column="1">#<cpp:directive pos:line="181" pos:column="2">endif<pos:position pos:line="181" pos:column="7"/></cpp:directive></cpp:endif>

      <comment type="block" pos:line="183" pos:column="7">/*
       * When all the headers have been parsed, see if we should give
       * up and return an error.
       */</comment>
      <if pos:line="187" pos:column="7">if<condition pos:line="187" pos:column="9">(<expr><call><name pos:line="187" pos:column="10">http_should_fail<pos:position pos:line="187" pos:column="26"/></name><argument_list pos:line="187" pos:column="26">(<argument><expr><name pos:line="187" pos:column="27">conn<pos:position pos:line="187" pos:column="31"/></name></expr></argument>)<pos:position pos:line="187" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="187" pos:column="33"/></condition><then pos:line="187" pos:column="33"> <block pos:line="187" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="188" pos:column="9">failf<pos:position pos:line="188" pos:column="14"/></name><argument_list pos:line="188" pos:column="14">(<argument><expr><name pos:line="188" pos:column="15">data<pos:position pos:line="188" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="188" pos:column="21">"The requested URL returned error: %d"<pos:position pos:line="188" pos:column="59"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="189" pos:column="15">k<pos:position pos:line="189" pos:column="16"/></name><operator pos:line="189" pos:column="16">-&gt;<pos:position pos:line="189" pos:column="21"/></operator><name pos:line="189" pos:column="18">httpcode<pos:position pos:line="189" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="189" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="28"/></expr_stmt>
        <return pos:line="190" pos:column="9">return <expr><name pos:line="190" pos:column="16">CURLE_HTTP_RETURNED_ERROR<pos:position pos:line="190" pos:column="41"/></name></expr>;<pos:position pos:line="190" pos:column="42"/></return>
      }<pos:position pos:line="191" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="193" pos:column="7">/* now, only output this if the header AND body are requested:
       */</comment>
      <expr_stmt><expr><name pos:line="195" pos:column="7">writetype<pos:position pos:line="195" pos:column="16"/></name> <operator pos:line="195" pos:column="17">=<pos:position pos:line="195" pos:column="18"/></operator> <name pos:line="195" pos:column="19">CLIENTWRITE_HEADER<pos:position pos:line="195" pos:column="37"/></name></expr>;<pos:position pos:line="195" pos:column="38"/></expr_stmt>
      <if pos:line="196" pos:column="7">if<condition pos:line="196" pos:column="9">(<expr><name><name pos:line="196" pos:column="10">data<pos:position pos:line="196" pos:column="14"/></name><operator pos:line="196" pos:column="14">-&gt;<pos:position pos:line="196" pos:column="19"/></operator><name pos:line="196" pos:column="16">set<pos:position pos:line="196" pos:column="19"/></name><operator pos:line="196" pos:column="19">.<pos:position pos:line="196" pos:column="20"/></operator><name pos:line="196" pos:column="20">include_header<pos:position pos:line="196" pos:column="34"/></name></name></expr>)<pos:position pos:line="196" pos:column="35"/></condition><then pos:line="196" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><name pos:line="197" pos:column="9">writetype<pos:position pos:line="197" pos:column="18"/></name> <operator pos:line="197" pos:column="19">|=<pos:position pos:line="197" pos:column="21"/></operator> <name pos:line="197" pos:column="22">CLIENTWRITE_BODY<pos:position pos:line="197" pos:column="38"/></name></expr>;<pos:position pos:line="197" pos:column="39"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name pos:line="199" pos:column="7">headerlen<pos:position pos:line="199" pos:column="16"/></name> <operator pos:line="199" pos:column="17">=<pos:position pos:line="199" pos:column="18"/></operator> <name><name pos:line="199" pos:column="19">k<pos:position pos:line="199" pos:column="20"/></name><operator pos:line="199" pos:column="20">-&gt;<pos:position pos:line="199" pos:column="25"/></operator><name pos:line="199" pos:column="22">p<pos:position pos:line="199" pos:column="23"/></name></name> <operator pos:line="199" pos:column="24">-<pos:position pos:line="199" pos:column="25"/></operator> <name><name pos:line="199" pos:column="26">data<pos:position pos:line="199" pos:column="30"/></name><operator pos:line="199" pos:column="30">-&gt;<pos:position pos:line="199" pos:column="35"/></operator><name pos:line="199" pos:column="32">state<pos:position pos:line="199" pos:column="37"/></name><operator pos:line="199" pos:column="37">.<pos:position pos:line="199" pos:column="38"/></operator><name pos:line="199" pos:column="38">headerbuff<pos:position pos:line="199" pos:column="48"/></name></name></expr>;<pos:position pos:line="199" pos:column="49"/></expr_stmt>

      <expr_stmt><expr><name pos:line="201" pos:column="7">result<pos:position pos:line="201" pos:column="13"/></name> <operator pos:line="201" pos:column="14">=<pos:position pos:line="201" pos:column="15"/></operator> <call><name pos:line="201" pos:column="16">Curl_client_write<pos:position pos:line="201" pos:column="33"/></name><argument_list pos:line="201" pos:column="33">(<argument><expr><name pos:line="201" pos:column="34">conn<pos:position pos:line="201" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="40">writetype<pos:position pos:line="201" pos:column="49"/></name></expr></argument>,
                                 <argument><expr><name><name pos:line="202" pos:column="34">data<pos:position pos:line="202" pos:column="38"/></name><operator pos:line="202" pos:column="38">-&gt;<pos:position pos:line="202" pos:column="43"/></operator><name pos:line="202" pos:column="40">state<pos:position pos:line="202" pos:column="45"/></name><operator pos:line="202" pos:column="45">.<pos:position pos:line="202" pos:column="46"/></operator><name pos:line="202" pos:column="46">headerbuff<pos:position pos:line="202" pos:column="56"/></name></name></expr></argument>,
                                 <argument><expr><name pos:line="203" pos:column="34">headerlen<pos:position pos:line="203" pos:column="43"/></name></expr></argument>)<pos:position pos:line="203" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="45"/></expr_stmt>
      <if pos:line="204" pos:column="7">if<condition pos:line="204" pos:column="9">(<expr><name pos:line="204" pos:column="10">result<pos:position pos:line="204" pos:column="16"/></name></expr>)<pos:position pos:line="204" pos:column="17"/></condition><then pos:line="204" pos:column="17">
        <block type="pseudo"><return pos:line="205" pos:column="9">return <expr><name pos:line="205" pos:column="16">result<pos:position pos:line="205" pos:column="22"/></name></expr>;<pos:position pos:line="205" pos:column="23"/></return></block></then></if>

      <expr_stmt><expr><name><name pos:line="207" pos:column="7">data<pos:position pos:line="207" pos:column="11"/></name><operator pos:line="207" pos:column="11">-&gt;<pos:position pos:line="207" pos:column="16"/></operator><name pos:line="207" pos:column="13">info<pos:position pos:line="207" pos:column="17"/></name><operator pos:line="207" pos:column="17">.<pos:position pos:line="207" pos:column="18"/></operator><name pos:line="207" pos:column="18">header_size<pos:position pos:line="207" pos:column="29"/></name></name> <operator pos:line="207" pos:column="30">+=<pos:position pos:line="207" pos:column="32"/></operator> <operator pos:line="207" pos:column="33">(<pos:position pos:line="207" pos:column="34"/></operator><name pos:line="207" pos:column="34">long<pos:position pos:line="207" pos:column="38"/></name><operator pos:line="207" pos:column="38">)<pos:position pos:line="207" pos:column="39"/></operator><name pos:line="207" pos:column="39">headerlen<pos:position pos:line="207" pos:column="48"/></name></expr>;<pos:position pos:line="207" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="208" pos:column="7">data<pos:position pos:line="208" pos:column="11"/></name><operator pos:line="208" pos:column="11">-&gt;<pos:position pos:line="208" pos:column="16"/></operator><name pos:line="208" pos:column="13">req<pos:position pos:line="208" pos:column="16"/></name><operator pos:line="208" pos:column="16">.<pos:position pos:line="208" pos:column="17"/></operator><name pos:line="208" pos:column="17">headerbytecount<pos:position pos:line="208" pos:column="32"/></name></name> <operator pos:line="208" pos:column="33">+=<pos:position pos:line="208" pos:column="35"/></operator> <operator pos:line="208" pos:column="36">(<pos:position pos:line="208" pos:column="37"/></operator><name pos:line="208" pos:column="37">long<pos:position pos:line="208" pos:column="41"/></name><operator pos:line="208" pos:column="41">)<pos:position pos:line="208" pos:column="42"/></operator><name pos:line="208" pos:column="42">headerlen<pos:position pos:line="208" pos:column="51"/></name></expr>;<pos:position pos:line="208" pos:column="52"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="210" pos:column="7">data<pos:position pos:line="210" pos:column="11"/></name><operator pos:line="210" pos:column="11">-&gt;<pos:position pos:line="210" pos:column="16"/></operator><name pos:line="210" pos:column="13">req<pos:position pos:line="210" pos:column="16"/></name><operator pos:line="210" pos:column="16">.<pos:position pos:line="210" pos:column="17"/></operator><name pos:line="210" pos:column="17">deductheadercount<pos:position pos:line="210" pos:column="34"/></name></name> <operator pos:line="210" pos:column="35">=<pos:position pos:line="210" pos:column="36"/></operator>
        <ternary><condition><expr><operator pos:line="211" pos:column="9">(<pos:position pos:line="211" pos:column="10"/></operator><literal type="number" pos:line="211" pos:column="10">100<pos:position pos:line="211" pos:column="13"/></literal> <operator pos:line="211" pos:column="14">&lt;=<pos:position pos:line="211" pos:column="19"/></operator> <name><name pos:line="211" pos:column="17">k<pos:position pos:line="211" pos:column="18"/></name><operator pos:line="211" pos:column="18">-&gt;<pos:position pos:line="211" pos:column="23"/></operator><name pos:line="211" pos:column="20">httpcode<pos:position pos:line="211" pos:column="28"/></name></name> <operator pos:line="211" pos:column="29">&amp;&amp;<pos:position pos:line="211" pos:column="39"/></operator> <literal type="number" pos:line="211" pos:column="32">199<pos:position pos:line="211" pos:column="35"/></literal> <operator pos:line="211" pos:column="36">&gt;=<pos:position pos:line="211" pos:column="41"/></operator> <name><name pos:line="211" pos:column="39">k<pos:position pos:line="211" pos:column="40"/></name><operator pos:line="211" pos:column="40">-&gt;<pos:position pos:line="211" pos:column="45"/></operator><name pos:line="211" pos:column="42">httpcode<pos:position pos:line="211" pos:column="50"/></name></name><operator pos:line="211" pos:column="50">)<pos:position pos:line="211" pos:column="51"/></operator></expr>?<pos:position pos:line="211" pos:column="52"/></condition><then><expr><name><name pos:line="211" pos:column="52">data<pos:position pos:line="211" pos:column="56"/></name><operator pos:line="211" pos:column="56">-&gt;<pos:position pos:line="211" pos:column="61"/></operator><name pos:line="211" pos:column="58">req<pos:position pos:line="211" pos:column="61"/></name><operator pos:line="211" pos:column="61">.<pos:position pos:line="211" pos:column="62"/></operator><name pos:line="211" pos:column="62">headerbytecount<pos:position pos:line="211" pos:column="77"/></name></name></expr></then><else pos:line="211" pos:column="77">:<expr><literal type="number" pos:line="211" pos:column="78">0<pos:position pos:line="211" pos:column="79"/></literal></expr></else></ternary></expr>;<pos:position pos:line="211" pos:column="80"/></expr_stmt>

      <comment type="block" pos:line="213" pos:column="7">/* Curl_http_auth_act() checks what authentication methods
       * that are available and decides which one (if any) to
       * use. It will set 'newurl' if an auth method was picked. */</comment>
      <expr_stmt><expr><name pos:line="216" pos:column="7">result<pos:position pos:line="216" pos:column="13"/></name> <operator pos:line="216" pos:column="14">=<pos:position pos:line="216" pos:column="15"/></operator> <call><name pos:line="216" pos:column="16">Curl_http_auth_act<pos:position pos:line="216" pos:column="34"/></name><argument_list pos:line="216" pos:column="34">(<argument><expr><name pos:line="216" pos:column="35">conn<pos:position pos:line="216" pos:column="39"/></name></expr></argument>)<pos:position pos:line="216" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="41"/></expr_stmt>

      <if pos:line="218" pos:column="7">if<condition pos:line="218" pos:column="9">(<expr><name pos:line="218" pos:column="10">result<pos:position pos:line="218" pos:column="16"/></name></expr>)<pos:position pos:line="218" pos:column="17"/></condition><then pos:line="218" pos:column="17">
        <block type="pseudo"><return pos:line="219" pos:column="9">return <expr><name pos:line="219" pos:column="16">result<pos:position pos:line="219" pos:column="22"/></name></expr>;<pos:position pos:line="219" pos:column="23"/></return></block></then></if>

      <if pos:line="221" pos:column="7">if<condition pos:line="221" pos:column="9">(<expr><name><name pos:line="221" pos:column="10">k<pos:position pos:line="221" pos:column="11"/></name><operator pos:line="221" pos:column="11">-&gt;<pos:position pos:line="221" pos:column="16"/></operator><name pos:line="221" pos:column="13">httpcode<pos:position pos:line="221" pos:column="21"/></name></name> <operator pos:line="221" pos:column="22">&gt;=<pos:position pos:line="221" pos:column="27"/></operator> <literal type="number" pos:line="221" pos:column="25">300<pos:position pos:line="221" pos:column="28"/></literal></expr>)<pos:position pos:line="221" pos:column="29"/></condition><then pos:line="221" pos:column="29"> <block pos:line="221" pos:column="30">{
        <if pos:line="222" pos:column="9">if<condition pos:line="222" pos:column="11">(<expr><operator pos:line="222" pos:column="12">(<pos:position pos:line="222" pos:column="13"/></operator><operator pos:line="222" pos:column="13">!<pos:position pos:line="222" pos:column="14"/></operator><name><name pos:line="222" pos:column="14">conn<pos:position pos:line="222" pos:column="18"/></name><operator pos:line="222" pos:column="18">-&gt;<pos:position pos:line="222" pos:column="23"/></operator><name pos:line="222" pos:column="20">bits<pos:position pos:line="222" pos:column="24"/></name><operator pos:line="222" pos:column="24">.<pos:position pos:line="222" pos:column="25"/></operator><name pos:line="222" pos:column="25">authneg<pos:position pos:line="222" pos:column="32"/></name></name><operator pos:line="222" pos:column="32">)<pos:position pos:line="222" pos:column="33"/></operator> <operator pos:line="222" pos:column="34">&amp;&amp;<pos:position pos:line="222" pos:column="44"/></operator> <operator pos:line="222" pos:column="37">!<pos:position pos:line="222" pos:column="38"/></operator><name><name pos:line="222" pos:column="38">conn<pos:position pos:line="222" pos:column="42"/></name><operator pos:line="222" pos:column="42">-&gt;<pos:position pos:line="222" pos:column="47"/></operator><name pos:line="222" pos:column="44">bits<pos:position pos:line="222" pos:column="48"/></name><operator pos:line="222" pos:column="48">.<pos:position pos:line="222" pos:column="49"/></operator><name pos:line="222" pos:column="49">close<pos:position pos:line="222" pos:column="54"/></name></name> <operator pos:line="222" pos:column="55">&amp;&amp;<pos:position pos:line="222" pos:column="65"/></operator>
           <operator pos:line="223" pos:column="12">!<pos:position pos:line="223" pos:column="13"/></operator><name><name pos:line="223" pos:column="13">conn<pos:position pos:line="223" pos:column="17"/></name><operator pos:line="223" pos:column="17">-&gt;<pos:position pos:line="223" pos:column="22"/></operator><name pos:line="223" pos:column="19">bits<pos:position pos:line="223" pos:column="23"/></name><operator pos:line="223" pos:column="23">.<pos:position pos:line="223" pos:column="24"/></operator><name pos:line="223" pos:column="24">rewindaftersend<pos:position pos:line="223" pos:column="39"/></name></name></expr>)<pos:position pos:line="223" pos:column="40"/></condition><then pos:line="223" pos:column="40"> <block pos:line="223" pos:column="41">{
          <comment type="block" pos:line="224" pos:column="11">/*
           * General treatment of errors when about to send data. Including :
           * "417 Expectation Failed", while waiting for 100-continue.
           *
           * The check for close above is done simply because of something
           * else has already deemed the connection to get closed then
           * something else should've considered the big picture and we
           * avoid this check.
           *
           * rewindaftersend indicates that something has told libcurl to
           * continue sending even if it gets discarded
           */</comment>

          <switch pos:line="237" pos:column="11">switch<condition pos:line="237" pos:column="17">(<expr><name><name pos:line="237" pos:column="18">data<pos:position pos:line="237" pos:column="22"/></name><operator pos:line="237" pos:column="22">-&gt;<pos:position pos:line="237" pos:column="27"/></operator><name pos:line="237" pos:column="24">set<pos:position pos:line="237" pos:column="27"/></name><operator pos:line="237" pos:column="27">.<pos:position pos:line="237" pos:column="28"/></operator><name pos:line="237" pos:column="28">httpreq<pos:position pos:line="237" pos:column="35"/></name></name></expr>)<pos:position pos:line="237" pos:column="36"/></condition> <block pos:line="237" pos:column="37">{
          <case pos:line="238" pos:column="11">case <expr><name pos:line="238" pos:column="16">HTTPREQ_PUT<pos:position pos:line="238" pos:column="27"/></name></expr>:<pos:position pos:line="238" pos:column="28"/></case>
          <case pos:line="239" pos:column="11">case <expr><name pos:line="239" pos:column="16">HTTPREQ_POST<pos:position pos:line="239" pos:column="28"/></name></expr>:<pos:position pos:line="239" pos:column="29"/></case>
          <case pos:line="240" pos:column="11">case <expr><name pos:line="240" pos:column="16">HTTPREQ_POST_FORM<pos:position pos:line="240" pos:column="33"/></name></expr>:<pos:position pos:line="240" pos:column="34"/></case>
          <case pos:line="241" pos:column="11">case <expr><name pos:line="241" pos:column="16">HTTPREQ_POST_MIME<pos:position pos:line="241" pos:column="33"/></name></expr>:<pos:position pos:line="241" pos:column="34"/></case>
            <comment type="block" pos:line="242" pos:column="13">/* We got an error response. If this happened before the whole
             * request body has been sent we stop sending and mark the
             * connection for closure after we've read the entire response.
             */</comment>
            <expr_stmt><expr><call><name pos:line="246" pos:column="13">Curl_expire_done<pos:position pos:line="246" pos:column="29"/></name><argument_list pos:line="246" pos:column="29">(<argument><expr><name pos:line="246" pos:column="30">data<pos:position pos:line="246" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="246" pos:column="36">EXPIRE_100_TIMEOUT<pos:position pos:line="246" pos:column="54"/></name></expr></argument>)<pos:position pos:line="246" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="56"/></expr_stmt>
            <if pos:line="247" pos:column="13">if<condition pos:line="247" pos:column="15">(<expr><operator pos:line="247" pos:column="16">!<pos:position pos:line="247" pos:column="17"/></operator><name><name pos:line="247" pos:column="17">k<pos:position pos:line="247" pos:column="18"/></name><operator pos:line="247" pos:column="18">-&gt;<pos:position pos:line="247" pos:column="23"/></operator><name pos:line="247" pos:column="20">upload_done<pos:position pos:line="247" pos:column="31"/></name></name></expr>)<pos:position pos:line="247" pos:column="32"/></condition><then pos:line="247" pos:column="32"> <block pos:line="247" pos:column="33">{
              <if pos:line="248" pos:column="15">if<condition pos:line="248" pos:column="17">(<expr><name><name pos:line="248" pos:column="18">data<pos:position pos:line="248" pos:column="22"/></name><operator pos:line="248" pos:column="22">-&gt;<pos:position pos:line="248" pos:column="27"/></operator><name pos:line="248" pos:column="24">set<pos:position pos:line="248" pos:column="27"/></name><operator pos:line="248" pos:column="27">.<pos:position pos:line="248" pos:column="28"/></operator><name pos:line="248" pos:column="28">http_keep_sending_on_error<pos:position pos:line="248" pos:column="54"/></name></name></expr>)<pos:position pos:line="248" pos:column="55"/></condition><then pos:line="248" pos:column="55"> <block pos:line="248" pos:column="56">{
                <expr_stmt><expr><call><name pos:line="249" pos:column="17">infof<pos:position pos:line="249" pos:column="22"/></name><argument_list pos:line="249" pos:column="22">(<argument><expr><name pos:line="249" pos:column="23">data<pos:position pos:line="249" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="249" pos:column="29">"HTTP error before end of send, keep sending\n"<pos:position pos:line="249" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="249" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="78"/></expr_stmt>
                <if pos:line="250" pos:column="17">if<condition pos:line="250" pos:column="19">(<expr><name><name pos:line="250" pos:column="20">k<pos:position pos:line="250" pos:column="21"/></name><operator pos:line="250" pos:column="21">-&gt;<pos:position pos:line="250" pos:column="26"/></operator><name pos:line="250" pos:column="23">exp100<pos:position pos:line="250" pos:column="29"/></name></name> <operator pos:line="250" pos:column="30">&gt;<pos:position pos:line="250" pos:column="34"/></operator> <name pos:line="250" pos:column="32">EXP100_SEND_DATA<pos:position pos:line="250" pos:column="48"/></name></expr>)<pos:position pos:line="250" pos:column="49"/></condition><then pos:line="250" pos:column="49"> <block pos:line="250" pos:column="50">{
                  <expr_stmt><expr><name><name pos:line="251" pos:column="19">k<pos:position pos:line="251" pos:column="20"/></name><operator pos:line="251" pos:column="20">-&gt;<pos:position pos:line="251" pos:column="25"/></operator><name pos:line="251" pos:column="22">exp100<pos:position pos:line="251" pos:column="28"/></name></name> <operator pos:line="251" pos:column="29">=<pos:position pos:line="251" pos:column="30"/></operator> <name pos:line="251" pos:column="31">EXP100_SEND_DATA<pos:position pos:line="251" pos:column="47"/></name></expr>;<pos:position pos:line="251" pos:column="48"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="252" pos:column="19">k<pos:position pos:line="252" pos:column="20"/></name><operator pos:line="252" pos:column="20">-&gt;<pos:position pos:line="252" pos:column="25"/></operator><name pos:line="252" pos:column="22">keepon<pos:position pos:line="252" pos:column="28"/></name></name> <operator pos:line="252" pos:column="29">|=<pos:position pos:line="252" pos:column="31"/></operator> <name pos:line="252" pos:column="32">KEEP_SEND<pos:position pos:line="252" pos:column="41"/></name></expr>;<pos:position pos:line="252" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="253" pos:column="18"/></block></then></if>
              }<pos:position pos:line="254" pos:column="16"/></block></then>
              <else pos:line="255" pos:column="15">else <block pos:line="255" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="256" pos:column="17">infof<pos:position pos:line="256" pos:column="22"/></name><argument_list pos:line="256" pos:column="22">(<argument><expr><name pos:line="256" pos:column="23">data<pos:position pos:line="256" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="256" pos:column="29">"HTTP error before end of send, stop sending\n"<pos:position pos:line="256" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="256" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="78"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="257" pos:column="17">streamclose<pos:position pos:line="257" pos:column="28"/></name><argument_list pos:line="257" pos:column="28">(<argument><expr><name pos:line="257" pos:column="29">conn<pos:position pos:line="257" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="257" pos:column="35">"Stop sending data before everything sent"<pos:position pos:line="257" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="257" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="79"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="258" pos:column="17">k<pos:position pos:line="258" pos:column="18"/></name><operator pos:line="258" pos:column="18">-&gt;<pos:position pos:line="258" pos:column="23"/></operator><name pos:line="258" pos:column="20">upload_done<pos:position pos:line="258" pos:column="31"/></name></name> <operator pos:line="258" pos:column="32">=<pos:position pos:line="258" pos:column="33"/></operator> <name pos:line="258" pos:column="34">TRUE<pos:position pos:line="258" pos:column="38"/></name></expr>;<pos:position pos:line="258" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="259" pos:column="17">k<pos:position pos:line="259" pos:column="18"/></name><operator pos:line="259" pos:column="18">-&gt;<pos:position pos:line="259" pos:column="23"/></operator><name pos:line="259" pos:column="20">keepon<pos:position pos:line="259" pos:column="26"/></name></name> <operator pos:line="259" pos:column="27">&amp;=<pos:position pos:line="259" pos:column="33"/></operator> <operator pos:line="259" pos:column="30">~<pos:position pos:line="259" pos:column="31"/></operator><name pos:line="259" pos:column="31">KEEP_SEND<pos:position pos:line="259" pos:column="40"/></name></expr>;<pos:position pos:line="259" pos:column="41"/></expr_stmt> <comment type="block" pos:line="259" pos:column="42">/* don't send */</comment>
                <if pos:line="260" pos:column="17">if<condition pos:line="260" pos:column="19">(<expr><name><name pos:line="260" pos:column="20">data<pos:position pos:line="260" pos:column="24"/></name><operator pos:line="260" pos:column="24">-&gt;<pos:position pos:line="260" pos:column="29"/></operator><name pos:line="260" pos:column="26">state<pos:position pos:line="260" pos:column="31"/></name><operator pos:line="260" pos:column="31">.<pos:position pos:line="260" pos:column="32"/></operator><name pos:line="260" pos:column="32">expect100header<pos:position pos:line="260" pos:column="47"/></name></name></expr>)<pos:position pos:line="260" pos:column="48"/></condition><then pos:line="260" pos:column="48">
                  <block type="pseudo"><expr_stmt><expr><name><name pos:line="261" pos:column="19">k<pos:position pos:line="261" pos:column="20"/></name><operator pos:line="261" pos:column="20">-&gt;<pos:position pos:line="261" pos:column="25"/></operator><name pos:line="261" pos:column="22">exp100<pos:position pos:line="261" pos:column="28"/></name></name> <operator pos:line="261" pos:column="29">=<pos:position pos:line="261" pos:column="30"/></operator> <name pos:line="261" pos:column="31">EXP100_FAILED<pos:position pos:line="261" pos:column="44"/></name></expr>;<pos:position pos:line="261" pos:column="45"/></expr_stmt></block></then></if>
              }<pos:position pos:line="262" pos:column="16"/></block></else></if>
            }<pos:position pos:line="263" pos:column="14"/></block></then></if>
            <break pos:line="264" pos:column="13">break;<pos:position pos:line="264" pos:column="19"/></break>

          <default pos:line="266" pos:column="11">default:<pos:position pos:line="266" pos:column="19"/></default> <comment type="block" pos:line="266" pos:column="20">/* default label present to avoid compiler warnings */</comment>
            <break pos:line="267" pos:column="13">break;<pos:position pos:line="267" pos:column="19"/></break>
          }<pos:position pos:line="268" pos:column="12"/></block></switch>
        }<pos:position pos:line="269" pos:column="10"/></block></then></if>

        <if pos:line="271" pos:column="9">if<condition pos:line="271" pos:column="11">(<expr><name><name pos:line="271" pos:column="12">conn<pos:position pos:line="271" pos:column="16"/></name><operator pos:line="271" pos:column="16">-&gt;<pos:position pos:line="271" pos:column="21"/></operator><name pos:line="271" pos:column="18">bits<pos:position pos:line="271" pos:column="22"/></name><operator pos:line="271" pos:column="22">.<pos:position pos:line="271" pos:column="23"/></operator><name pos:line="271" pos:column="23">rewindaftersend<pos:position pos:line="271" pos:column="38"/></name></name></expr>)<pos:position pos:line="271" pos:column="39"/></condition><then pos:line="271" pos:column="39"> <block pos:line="271" pos:column="40">{
          <comment type="block" pos:line="272" pos:column="11">/* We rewind after a complete send, so thus we continue
             sending now */</comment>
          <expr_stmt><expr><call><name pos:line="274" pos:column="11">infof<pos:position pos:line="274" pos:column="16"/></name><argument_list pos:line="274" pos:column="16">(<argument><expr><name pos:line="274" pos:column="17">data<pos:position pos:line="274" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="274" pos:column="23">"Keep sending data to get tossed away!\n"<pos:position pos:line="274" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="274" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="274" pos:column="66"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="275" pos:column="11">k<pos:position pos:line="275" pos:column="12"/></name><operator pos:line="275" pos:column="12">-&gt;<pos:position pos:line="275" pos:column="17"/></operator><name pos:line="275" pos:column="14">keepon<pos:position pos:line="275" pos:column="20"/></name></name> <operator pos:line="275" pos:column="21">|=<pos:position pos:line="275" pos:column="23"/></operator> <name pos:line="275" pos:column="24">KEEP_SEND<pos:position pos:line="275" pos:column="33"/></name></expr>;<pos:position pos:line="275" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="276" pos:column="10"/></block></then></if>
      }<pos:position pos:line="277" pos:column="8"/></block></then></if>

      <if pos:line="279" pos:column="7">if<condition pos:line="279" pos:column="9">(<expr><operator pos:line="279" pos:column="10">!<pos:position pos:line="279" pos:column="11"/></operator><name><name pos:line="279" pos:column="11">k<pos:position pos:line="279" pos:column="12"/></name><operator pos:line="279" pos:column="12">-&gt;<pos:position pos:line="279" pos:column="17"/></operator><name pos:line="279" pos:column="14">header<pos:position pos:line="279" pos:column="20"/></name></name></expr>)<pos:position pos:line="279" pos:column="21"/></condition><then pos:line="279" pos:column="21"> <block pos:line="279" pos:column="22">{
        <comment type="block" pos:line="280" pos:column="9">/*
         * really end-of-headers.
         *
         * If we requested a "no body", this is a good time to get
         * out and return home.
         */</comment>
        <if pos:line="286" pos:column="9">if<condition pos:line="286" pos:column="11">(<expr><name><name pos:line="286" pos:column="12">data<pos:position pos:line="286" pos:column="16"/></name><operator pos:line="286" pos:column="16">-&gt;<pos:position pos:line="286" pos:column="21"/></operator><name pos:line="286" pos:column="18">set<pos:position pos:line="286" pos:column="21"/></name><operator pos:line="286" pos:column="21">.<pos:position pos:line="286" pos:column="22"/></operator><name pos:line="286" pos:column="22">opt_no_body<pos:position pos:line="286" pos:column="33"/></name></name></expr>)<pos:position pos:line="286" pos:column="34"/></condition><then pos:line="286" pos:column="34">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="287" pos:column="11">*<pos:position pos:line="287" pos:column="12"/></operator><name pos:line="287" pos:column="12">stop_reading<pos:position pos:line="287" pos:column="24"/></name> <operator pos:line="287" pos:column="25">=<pos:position pos:line="287" pos:column="26"/></operator> <name pos:line="287" pos:column="27">TRUE<pos:position pos:line="287" pos:column="31"/></name></expr>;<pos:position pos:line="287" pos:column="32"/></expr_stmt></block></then>
<cpp:ifndef pos:line="288" pos:column="1">#<cpp:directive pos:line="288" pos:column="2">ifndef<pos:position pos:line="288" pos:column="8"/></cpp:directive> <name pos:line="288" pos:column="9">CURL_DISABLE_RTSP<pos:position pos:line="288" pos:column="26"/></name></cpp:ifndef>
        <elseif pos:line="289" pos:column="9">else <if pos:line="289" pos:column="14">if<condition pos:line="289" pos:column="16">(<expr><operator pos:line="289" pos:column="17">(<pos:position pos:line="289" pos:column="18"/></operator><name><name pos:line="289" pos:column="18">conn<pos:position pos:line="289" pos:column="22"/></name><operator pos:line="289" pos:column="22">-&gt;<pos:position pos:line="289" pos:column="27"/></operator><name pos:line="289" pos:column="24">handler<pos:position pos:line="289" pos:column="31"/></name><operator pos:line="289" pos:column="31">-&gt;<pos:position pos:line="289" pos:column="36"/></operator><name pos:line="289" pos:column="33">protocol<pos:position pos:line="289" pos:column="41"/></name></name> <operator pos:line="289" pos:column="42">&amp;<pos:position pos:line="289" pos:column="47"/></operator> <name pos:line="289" pos:column="44">CURLPROTO_RTSP<pos:position pos:line="289" pos:column="58"/></name><operator pos:line="289" pos:column="58">)<pos:position pos:line="289" pos:column="59"/></operator> <operator pos:line="289" pos:column="60">&amp;&amp;<pos:position pos:line="289" pos:column="70"/></operator>
                <operator pos:line="290" pos:column="17">(<pos:position pos:line="290" pos:column="18"/></operator><name><name pos:line="290" pos:column="18">data<pos:position pos:line="290" pos:column="22"/></name><operator pos:line="290" pos:column="22">-&gt;<pos:position pos:line="290" pos:column="27"/></operator><name pos:line="290" pos:column="24">set<pos:position pos:line="290" pos:column="27"/></name><operator pos:line="290" pos:column="27">.<pos:position pos:line="290" pos:column="28"/></operator><name pos:line="290" pos:column="28">rtspreq<pos:position pos:line="290" pos:column="35"/></name></name> <operator pos:line="290" pos:column="36">==<pos:position pos:line="290" pos:column="38"/></operator> <name pos:line="290" pos:column="39">RTSPREQ_DESCRIBE<pos:position pos:line="290" pos:column="55"/></name><operator pos:line="290" pos:column="55">)<pos:position pos:line="290" pos:column="56"/></operator> <operator pos:line="290" pos:column="57">&amp;&amp;<pos:position pos:line="290" pos:column="67"/></operator>
                <operator pos:line="291" pos:column="17">(<pos:position pos:line="291" pos:column="18"/></operator><name><name pos:line="291" pos:column="18">k<pos:position pos:line="291" pos:column="19"/></name><operator pos:line="291" pos:column="19">-&gt;<pos:position pos:line="291" pos:column="24"/></operator><name pos:line="291" pos:column="21">size<pos:position pos:line="291" pos:column="25"/></name></name> <operator pos:line="291" pos:column="26">&lt;=<pos:position pos:line="291" pos:column="31"/></operator> <operator pos:line="291" pos:column="29">-<pos:position pos:line="291" pos:column="30"/></operator><literal type="number" pos:line="291" pos:column="30">1<pos:position pos:line="291" pos:column="31"/></literal><operator pos:line="291" pos:column="31">)<pos:position pos:line="291" pos:column="32"/></operator></expr>)<pos:position pos:line="291" pos:column="33"/></condition><then pos:line="291" pos:column="33">
          <comment type="block" pos:line="292" pos:column="11">/* Respect section 4.4 of rfc2326: If the Content-Length header is
             absent, a length 0 must be assumed.  It will prevent libcurl from
             hanging on DESCRIBE request that got refused for whatever
             reason */</comment>
          <block type="pseudo"><expr_stmt><expr><operator pos:line="296" pos:column="11">*<pos:position pos:line="296" pos:column="12"/></operator><name pos:line="296" pos:column="12">stop_reading<pos:position pos:line="296" pos:column="24"/></name> <operator pos:line="296" pos:column="25">=<pos:position pos:line="296" pos:column="26"/></operator> <name pos:line="296" pos:column="27">TRUE<pos:position pos:line="296" pos:column="31"/></name></expr>;<pos:position pos:line="296" pos:column="32"/></expr_stmt></block></then></if></elseif>
<cpp:endif pos:line="297" pos:column="1">#<cpp:directive pos:line="297" pos:column="2">endif<pos:position pos:line="297" pos:column="7"/></cpp:directive></cpp:endif>
        <else pos:line="298" pos:column="9">else <block pos:line="298" pos:column="14">{
          <comment type="block" pos:line="299" pos:column="11">/* If we know the expected size of this document, we set the
             maximum download size to the size of the expected
             document or else, we won't know when to stop reading!

             Note that we set the download maximum even if we read a
             "Connection: close" header, to make sure that
             "Content-Length: 0" still prevents us from attempting to
             read the (missing) response-body.
          */</comment>
          <comment type="block" pos:line="308" pos:column="11">/* According to RFC2616 section 4.4, we MUST ignore
             Content-Length: headers if we are now receiving data
             using chunked Transfer-Encoding.
          */</comment>
          <if pos:line="312" pos:column="11">if<condition pos:line="312" pos:column="13">(<expr><name><name pos:line="312" pos:column="14">k<pos:position pos:line="312" pos:column="15"/></name><operator pos:line="312" pos:column="15">-&gt;<pos:position pos:line="312" pos:column="20"/></operator><name pos:line="312" pos:column="17">chunk<pos:position pos:line="312" pos:column="22"/></name></name></expr>)<pos:position pos:line="312" pos:column="23"/></condition><then pos:line="312" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="313" pos:column="13">k<pos:position pos:line="313" pos:column="14"/></name><operator pos:line="313" pos:column="14">-&gt;<pos:position pos:line="313" pos:column="19"/></operator><name pos:line="313" pos:column="16">maxdownload<pos:position pos:line="313" pos:column="27"/></name></name> <operator pos:line="313" pos:column="28">=<pos:position pos:line="313" pos:column="29"/></operator> <name><name pos:line="313" pos:column="30">k<pos:position pos:line="313" pos:column="31"/></name><operator pos:line="313" pos:column="31">-&gt;<pos:position pos:line="313" pos:column="36"/></operator><name pos:line="313" pos:column="33">size<pos:position pos:line="313" pos:column="37"/></name></name> <operator pos:line="313" pos:column="38">=<pos:position pos:line="313" pos:column="39"/></operator> <operator pos:line="313" pos:column="40">-<pos:position pos:line="313" pos:column="41"/></operator><literal type="number" pos:line="313" pos:column="41">1<pos:position pos:line="313" pos:column="42"/></literal></expr>;<pos:position pos:line="313" pos:column="43"/></expr_stmt></block></then></if>
        }<pos:position pos:line="314" pos:column="10"/></block></else></if>
        <if pos:line="315" pos:column="9">if<condition pos:line="315" pos:column="11">(<expr><operator pos:line="315" pos:column="12">-<pos:position pos:line="315" pos:column="13"/></operator><literal type="number" pos:line="315" pos:column="13">1<pos:position pos:line="315" pos:column="14"/></literal> <operator pos:line="315" pos:column="15">!=<pos:position pos:line="315" pos:column="17"/></operator> <name><name pos:line="315" pos:column="18">k<pos:position pos:line="315" pos:column="19"/></name><operator pos:line="315" pos:column="19">-&gt;<pos:position pos:line="315" pos:column="24"/></operator><name pos:line="315" pos:column="21">size<pos:position pos:line="315" pos:column="25"/></name></name></expr>)<pos:position pos:line="315" pos:column="26"/></condition><then pos:line="315" pos:column="26"> <block pos:line="315" pos:column="27">{
          <comment type="block" pos:line="316" pos:column="11">/* We do this operation even if no_body is true, since this
             data might be retrieved later with curl_easy_getinfo()
             and its CURLINFO_CONTENT_LENGTH_DOWNLOAD option. */</comment>

          <expr_stmt><expr><call><name pos:line="320" pos:column="11">Curl_pgrsSetDownloadSize<pos:position pos:line="320" pos:column="35"/></name><argument_list pos:line="320" pos:column="35">(<argument><expr><name pos:line="320" pos:column="36">data<pos:position pos:line="320" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="320" pos:column="42">k<pos:position pos:line="320" pos:column="43"/></name><operator pos:line="320" pos:column="43">-&gt;<pos:position pos:line="320" pos:column="48"/></operator><name pos:line="320" pos:column="45">size<pos:position pos:line="320" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="320" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="51"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="321" pos:column="11">k<pos:position pos:line="321" pos:column="12"/></name><operator pos:line="321" pos:column="12">-&gt;<pos:position pos:line="321" pos:column="17"/></operator><name pos:line="321" pos:column="14">maxdownload<pos:position pos:line="321" pos:column="25"/></name></name> <operator pos:line="321" pos:column="26">=<pos:position pos:line="321" pos:column="27"/></operator> <name><name pos:line="321" pos:column="28">k<pos:position pos:line="321" pos:column="29"/></name><operator pos:line="321" pos:column="29">-&gt;<pos:position pos:line="321" pos:column="34"/></operator><name pos:line="321" pos:column="31">size<pos:position pos:line="321" pos:column="35"/></name></name></expr>;<pos:position pos:line="321" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="322" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="324" pos:column="9">/* If max download size is *zero* (nothing) we already have
           nothing and can safely return ok now!  But for HTTP/2, we'd
           like to call http2_handle_stream_close to properly close a
           stream.  In order to do this, we keep reading until we
           close the stream. */</comment>
        <if pos:line="329" pos:column="9">if<condition pos:line="329" pos:column="11">(<expr><literal type="number" pos:line="329" pos:column="12">0<pos:position pos:line="329" pos:column="13"/></literal> <operator pos:line="329" pos:column="14">==<pos:position pos:line="329" pos:column="16"/></operator> <name><name pos:line="329" pos:column="17">k<pos:position pos:line="329" pos:column="18"/></name><operator pos:line="329" pos:column="18">-&gt;<pos:position pos:line="329" pos:column="23"/></operator><name pos:line="329" pos:column="20">maxdownload<pos:position pos:line="329" pos:column="31"/></name></name>
<cpp:if pos:line="330" pos:column="1">#<cpp:directive pos:line="330" pos:column="2">if<pos:position pos:line="330" pos:column="4"/></cpp:directive> <expr><call><name pos:line="330" pos:column="5">defined<pos:position pos:line="330" pos:column="12"/></name><argument_list pos:line="330" pos:column="12">(<argument><expr><name pos:line="330" pos:column="13">USE_NGHTTP2<pos:position pos:line="330" pos:column="24"/></name></expr></argument>)<pos:position pos:line="330" pos:column="25"/></argument_list></call></expr></cpp:if>
           <operator pos:line="331" pos:column="12">&amp;&amp;<pos:position pos:line="331" pos:column="22"/></operator> <operator pos:line="331" pos:column="15">!<pos:position pos:line="331" pos:column="16"/></operator><operator pos:line="331" pos:column="16">(<pos:position pos:line="331" pos:column="17"/></operator><operator pos:line="331" pos:column="17">(<pos:position pos:line="331" pos:column="18"/></operator><name><name pos:line="331" pos:column="18">conn<pos:position pos:line="331" pos:column="22"/></name><operator pos:line="331" pos:column="22">-&gt;<pos:position pos:line="331" pos:column="27"/></operator><name pos:line="331" pos:column="24">handler<pos:position pos:line="331" pos:column="31"/></name><operator pos:line="331" pos:column="31">-&gt;<pos:position pos:line="331" pos:column="36"/></operator><name pos:line="331" pos:column="33">protocol<pos:position pos:line="331" pos:column="41"/></name></name> <operator pos:line="331" pos:column="42">&amp;<pos:position pos:line="331" pos:column="47"/></operator> <name pos:line="331" pos:column="44">PROTO_FAMILY_HTTP<pos:position pos:line="331" pos:column="61"/></name><operator pos:line="331" pos:column="61">)<pos:position pos:line="331" pos:column="62"/></operator> <operator pos:line="331" pos:column="63">&amp;&amp;<pos:position pos:line="331" pos:column="73"/></operator>
                <name><name pos:line="332" pos:column="17">conn<pos:position pos:line="332" pos:column="21"/></name><operator pos:line="332" pos:column="21">-&gt;<pos:position pos:line="332" pos:column="26"/></operator><name pos:line="332" pos:column="23">httpversion<pos:position pos:line="332" pos:column="34"/></name></name> <operator pos:line="332" pos:column="35">==<pos:position pos:line="332" pos:column="37"/></operator> <literal type="number" pos:line="332" pos:column="38">20<pos:position pos:line="332" pos:column="40"/></literal><operator pos:line="332" pos:column="40">)<pos:position pos:line="332" pos:column="41"/></operator></expr>
<cpp:endif pos:line="333" pos:column="1">#<cpp:directive pos:line="333" pos:column="2">endif<pos:position pos:line="333" pos:column="7"/></cpp:directive></cpp:endif>
           )<pos:position pos:line="334" pos:column="13"/></condition><then pos:line="334" pos:column="13">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="335" pos:column="11">*<pos:position pos:line="335" pos:column="12"/></operator><name pos:line="335" pos:column="12">stop_reading<pos:position pos:line="335" pos:column="24"/></name> <operator pos:line="335" pos:column="25">=<pos:position pos:line="335" pos:column="26"/></operator> <name pos:line="335" pos:column="27">TRUE<pos:position pos:line="335" pos:column="31"/></name></expr>;<pos:position pos:line="335" pos:column="32"/></expr_stmt></block></then></if>

        <if pos:line="337" pos:column="9">if<condition pos:line="337" pos:column="11">(<expr><operator pos:line="337" pos:column="12">*<pos:position pos:line="337" pos:column="13"/></operator><name pos:line="337" pos:column="13">stop_reading<pos:position pos:line="337" pos:column="25"/></name></expr>)<pos:position pos:line="337" pos:column="26"/></condition><then pos:line="337" pos:column="26"> <block pos:line="337" pos:column="27">{
          <comment type="block" pos:line="338" pos:column="11">/* we make sure that this socket isn't read more now */</comment>
          <expr_stmt><expr><name><name pos:line="339" pos:column="11">k<pos:position pos:line="339" pos:column="12"/></name><operator pos:line="339" pos:column="12">-&gt;<pos:position pos:line="339" pos:column="17"/></operator><name pos:line="339" pos:column="14">keepon<pos:position pos:line="339" pos:column="20"/></name></name> <operator pos:line="339" pos:column="21">&amp;=<pos:position pos:line="339" pos:column="27"/></operator> <operator pos:line="339" pos:column="24">~<pos:position pos:line="339" pos:column="25"/></operator><name pos:line="339" pos:column="25">KEEP_RECV<pos:position pos:line="339" pos:column="34"/></name></expr>;<pos:position pos:line="339" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="340" pos:column="10"/></block></then></if>

        <if pos:line="342" pos:column="9">if<condition pos:line="342" pos:column="11">(<expr><name><name pos:line="342" pos:column="12">data<pos:position pos:line="342" pos:column="16"/></name><operator pos:line="342" pos:column="16">-&gt;<pos:position pos:line="342" pos:column="21"/></operator><name pos:line="342" pos:column="18">set<pos:position pos:line="342" pos:column="21"/></name><operator pos:line="342" pos:column="21">.<pos:position pos:line="342" pos:column="22"/></operator><name pos:line="342" pos:column="22">verbose<pos:position pos:line="342" pos:column="29"/></name></name></expr>)<pos:position pos:line="342" pos:column="30"/></condition><then pos:line="342" pos:column="30">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="343" pos:column="11">Curl_debug<pos:position pos:line="343" pos:column="21"/></name><argument_list pos:line="343" pos:column="21">(<argument><expr><name pos:line="343" pos:column="22">data<pos:position pos:line="343" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="343" pos:column="28">CURLINFO_HEADER_IN<pos:position pos:line="343" pos:column="46"/></name></expr></argument>,
                     <argument><expr><name><name pos:line="344" pos:column="22">k<pos:position pos:line="344" pos:column="23"/></name><operator pos:line="344" pos:column="23">-&gt;<pos:position pos:line="344" pos:column="28"/></operator><name pos:line="344" pos:column="25">str_start<pos:position pos:line="344" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="344" pos:column="36">headerlen<pos:position pos:line="344" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="344" pos:column="47">conn<pos:position pos:line="344" pos:column="51"/></name></expr></argument>)<pos:position pos:line="344" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="53"/></expr_stmt></block></then></if>
        <break pos:line="345" pos:column="9">break;<pos:position pos:line="345" pos:column="15"/></break>          <comment type="block" pos:line="345" pos:column="25">/* exit header line loop */</comment>
      }<pos:position pos:line="346" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="348" pos:column="7">/* We continue reading headers, so reset the line-based
         header parsing variables hbufp &amp;&amp; hbuflen */</comment>
      <expr_stmt><expr><name><name pos:line="350" pos:column="7">k<pos:position pos:line="350" pos:column="8"/></name><operator pos:line="350" pos:column="8">-&gt;<pos:position pos:line="350" pos:column="13"/></operator><name pos:line="350" pos:column="10">hbufp<pos:position pos:line="350" pos:column="15"/></name></name> <operator pos:line="350" pos:column="16">=<pos:position pos:line="350" pos:column="17"/></operator> <name><name pos:line="350" pos:column="18">data<pos:position pos:line="350" pos:column="22"/></name><operator pos:line="350" pos:column="22">-&gt;<pos:position pos:line="350" pos:column="27"/></operator><name pos:line="350" pos:column="24">state<pos:position pos:line="350" pos:column="29"/></name><operator pos:line="350" pos:column="29">.<pos:position pos:line="350" pos:column="30"/></operator><name pos:line="350" pos:column="30">headerbuff<pos:position pos:line="350" pos:column="40"/></name></name></expr>;<pos:position pos:line="350" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="351" pos:column="7">k<pos:position pos:line="351" pos:column="8"/></name><operator pos:line="351" pos:column="8">-&gt;<pos:position pos:line="351" pos:column="13"/></operator><name pos:line="351" pos:column="10">hbuflen<pos:position pos:line="351" pos:column="17"/></name></name> <operator pos:line="351" pos:column="18">=<pos:position pos:line="351" pos:column="19"/></operator> <literal type="number" pos:line="351" pos:column="20">0<pos:position pos:line="351" pos:column="21"/></literal></expr>;<pos:position pos:line="351" pos:column="22"/></expr_stmt>
      <continue pos:line="352" pos:column="7">continue;<pos:position pos:line="352" pos:column="16"/></continue>
    }<pos:position pos:line="353" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="355" pos:column="5">/*
     * Checks for special headers coming up.
     */</comment>

    <if pos:line="359" pos:column="5">if<condition pos:line="359" pos:column="7">(<expr><operator pos:line="359" pos:column="8">!<pos:position pos:line="359" pos:column="9"/></operator><name><name pos:line="359" pos:column="9">k<pos:position pos:line="359" pos:column="10"/></name><operator pos:line="359" pos:column="10">-&gt;<pos:position pos:line="359" pos:column="15"/></operator><name pos:line="359" pos:column="12">headerline<pos:position pos:line="359" pos:column="22"/></name></name><operator pos:line="359" pos:column="22">++<pos:position pos:line="359" pos:column="24"/></operator></expr>)<pos:position pos:line="359" pos:column="25"/></condition><then pos:line="359" pos:column="25"> <block pos:line="359" pos:column="26">{
      <comment type="block" pos:line="360" pos:column="7">/* This is the first header, it MUST be the error code line
         or else we consider this to be the body right away! */</comment>
      <decl_stmt><decl><type><name pos:line="362" pos:column="7">int<pos:position pos:line="362" pos:column="10"/></name></type> <name pos:line="362" pos:column="11">httpversion_major<pos:position pos:line="362" pos:column="28"/></name></decl>;<pos:position pos:line="362" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="363" pos:column="7">int<pos:position pos:line="363" pos:column="10"/></name></type> <name pos:line="363" pos:column="11">rtspversion_major<pos:position pos:line="363" pos:column="28"/></name></decl>;<pos:position pos:line="363" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="364" pos:column="7">int<pos:position pos:line="364" pos:column="10"/></name></type> <name pos:line="364" pos:column="11">nc<pos:position pos:line="364" pos:column="13"/></name> <init pos:line="364" pos:column="14">= <expr><literal type="number" pos:line="364" pos:column="16">0<pos:position pos:line="364" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="364" pos:column="18"/></decl_stmt>
<cpp:ifdef pos:line="365" pos:column="1">#<cpp:directive pos:line="365" pos:column="2">ifdef<pos:position pos:line="365" pos:column="7"/></cpp:directive> <name pos:line="365" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="365" pos:column="29"/></name></cpp:ifdef>
<cpp:define pos:line="366" pos:column="1">#<cpp:directive pos:line="366" pos:column="2">define<pos:position pos:line="366" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="366" pos:column="9">HEADER1<pos:position pos:line="366" pos:column="16"/></name></cpp:macro> <cpp:value pos:line="366" pos:column="17">scratch<pos:position pos:line="366" pos:column="24"/></cpp:value></cpp:define>
<cpp:define pos:line="367" pos:column="1">#<cpp:directive pos:line="367" pos:column="2">define<pos:position pos:line="367" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="367" pos:column="9">SCRATCHSIZE<pos:position pos:line="367" pos:column="20"/></name></cpp:macro> <cpp:value pos:line="367" pos:column="21">21<pos:position pos:line="367" pos:column="23"/></cpp:value></cpp:define>
      <decl_stmt><decl><type><name pos:line="368" pos:column="7">CURLcode<pos:position pos:line="368" pos:column="15"/></name></type> <name pos:line="368" pos:column="16">res<pos:position pos:line="368" pos:column="19"/></name></decl>;<pos:position pos:line="368" pos:column="20"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="369" pos:column="7">char<pos:position pos:line="369" pos:column="11"/></name></type> <name><name pos:line="369" pos:column="12">scratch<pos:position pos:line="369" pos:column="19"/></name><index pos:line="369" pos:column="19">[<expr><name pos:line="369" pos:column="20">SCRATCHSIZE<pos:position pos:line="369" pos:column="31"/></name> <operator pos:line="369" pos:column="32">+<pos:position pos:line="369" pos:column="33"/></operator> <literal type="number" pos:line="369" pos:column="34">1<pos:position pos:line="369" pos:column="35"/></literal></expr>]<pos:position pos:line="369" pos:column="36"/></index></name></decl>;<pos:position pos:line="369" pos:column="37"/></decl_stmt> <comment type="block" pos:line="369" pos:column="38">/* "HTTP/major.minor 123" */</comment>
      <comment type="block" pos:line="370" pos:column="7">/* We can't really convert this yet because we
         don't know if it's the 1st header line or the body.
         So we do a partial conversion into a scratch area,
         leaving the data at k-&gt;p as-is.
      */</comment>
      <expr_stmt><expr><call><name pos:line="375" pos:column="7">strncpy<pos:position pos:line="375" pos:column="14"/></name><argument_list pos:line="375" pos:column="14">(<argument><expr><operator pos:line="375" pos:column="15">&amp;<pos:position pos:line="375" pos:column="20"/></operator><name><name pos:line="375" pos:column="16">scratch<pos:position pos:line="375" pos:column="23"/></name><index pos:line="375" pos:column="23">[<expr><literal type="number" pos:line="375" pos:column="24">0<pos:position pos:line="375" pos:column="25"/></literal></expr>]<pos:position pos:line="375" pos:column="26"/></index></name></expr></argument>, <argument><expr><name><name pos:line="375" pos:column="28">k<pos:position pos:line="375" pos:column="29"/></name><operator pos:line="375" pos:column="29">-&gt;<pos:position pos:line="375" pos:column="34"/></operator><name pos:line="375" pos:column="31">p<pos:position pos:line="375" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="375" pos:column="34">SCRATCHSIZE<pos:position pos:line="375" pos:column="45"/></name></expr></argument>)<pos:position pos:line="375" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="375" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="376" pos:column="7">scratch<pos:position pos:line="376" pos:column="14"/></name><index pos:line="376" pos:column="14">[<expr><name pos:line="376" pos:column="15">SCRATCHSIZE<pos:position pos:line="376" pos:column="26"/></name></expr>]<pos:position pos:line="376" pos:column="27"/></index></name> <operator pos:line="376" pos:column="28">=<pos:position pos:line="376" pos:column="29"/></operator> <literal type="number" pos:line="376" pos:column="30">0<pos:position pos:line="376" pos:column="31"/></literal></expr>;<pos:position pos:line="376" pos:column="32"/></expr_stmt> <comment type="block" pos:line="376" pos:column="33">/* null terminate */</comment>
      <expr_stmt><expr><name pos:line="377" pos:column="7">res<pos:position pos:line="377" pos:column="10"/></name> <operator pos:line="377" pos:column="11">=<pos:position pos:line="377" pos:column="12"/></operator> <call><name pos:line="377" pos:column="13">Curl_convert_from_network<pos:position pos:line="377" pos:column="38"/></name><argument_list pos:line="377" pos:column="38">(<argument><expr><name pos:line="377" pos:column="39">data<pos:position pos:line="377" pos:column="43"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="378" pos:column="39">&amp;<pos:position pos:line="378" pos:column="44"/></operator><name><name pos:line="378" pos:column="40">scratch<pos:position pos:line="378" pos:column="47"/></name><index pos:line="378" pos:column="47">[<expr><literal type="number" pos:line="378" pos:column="48">0<pos:position pos:line="378" pos:column="49"/></literal></expr>]<pos:position pos:line="378" pos:column="50"/></index></name></expr></argument>,
                                      <argument><expr><name pos:line="379" pos:column="39">SCRATCHSIZE<pos:position pos:line="379" pos:column="50"/></name></expr></argument>)<pos:position pos:line="379" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="379" pos:column="52"/></expr_stmt>
      <if pos:line="380" pos:column="7">if<condition pos:line="380" pos:column="9">(<expr><name pos:line="380" pos:column="10">res<pos:position pos:line="380" pos:column="13"/></name></expr>)<pos:position pos:line="380" pos:column="14"/></condition><then pos:line="380" pos:column="14">
        <comment type="block" pos:line="381" pos:column="9">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
        <block type="pseudo"><return pos:line="382" pos:column="9">return <expr><name pos:line="382" pos:column="16">res<pos:position pos:line="382" pos:column="19"/></name></expr>;<pos:position pos:line="382" pos:column="20"/></return></block></then></if>
<cpp:else pos:line="383" pos:column="1">#<cpp:directive pos:line="383" pos:column="2">else<pos:position pos:line="383" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="384" pos:column="1">#<cpp:directive pos:line="384" pos:column="2">define<pos:position pos:line="384" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="384" pos:column="9">HEADER1<pos:position pos:line="384" pos:column="16"/></name></cpp:macro> <cpp:value pos:line="384" pos:column="17">k-&gt;p<pos:position pos:line="384" pos:column="21"/></cpp:value></cpp:define> <comment type="block" pos:line="384" pos:column="22">/* no conversion needed, just use k-&gt;p */</comment>
<cpp:endif pos:line="385" pos:column="1">#<cpp:directive pos:line="385" pos:column="2">endif<pos:position pos:line="385" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="385" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

      <if pos:line="387" pos:column="7">if<condition pos:line="387" pos:column="9">(<expr><name><name pos:line="387" pos:column="10">conn<pos:position pos:line="387" pos:column="14"/></name><operator pos:line="387" pos:column="14">-&gt;<pos:position pos:line="387" pos:column="19"/></operator><name pos:line="387" pos:column="16">handler<pos:position pos:line="387" pos:column="23"/></name><operator pos:line="387" pos:column="23">-&gt;<pos:position pos:line="387" pos:column="28"/></operator><name pos:line="387" pos:column="25">protocol<pos:position pos:line="387" pos:column="33"/></name></name> <operator pos:line="387" pos:column="34">&amp;<pos:position pos:line="387" pos:column="39"/></operator> <name pos:line="387" pos:column="36">PROTO_FAMILY_HTTP<pos:position pos:line="387" pos:column="53"/></name></expr>)<pos:position pos:line="387" pos:column="54"/></condition><then pos:line="387" pos:column="54"> <block pos:line="387" pos:column="55">{
        <comment type="block" pos:line="388" pos:column="9">/*
         * https://tools.ietf.org/html/rfc7230#section-3.1.2
         *
         * The response code is always a three-digit number in HTTP as the spec
         * says. We try to allow any number here, but we cannot make
         * guarantees on future behaviors since it isn't within the protocol.
         */</comment>
        <decl_stmt><decl><type><name pos:line="395" pos:column="9">char<pos:position pos:line="395" pos:column="13"/></name></type> <name pos:line="395" pos:column="14">separator<pos:position pos:line="395" pos:column="23"/></name></decl>;<pos:position pos:line="395" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><name pos:line="396" pos:column="9">nc<pos:position pos:line="396" pos:column="11"/></name> <operator pos:line="396" pos:column="12">=<pos:position pos:line="396" pos:column="13"/></operator> <call><name pos:line="396" pos:column="14">sscanf<pos:position pos:line="396" pos:column="20"/></name><argument_list pos:line="396" pos:column="20">(<argument><expr><name pos:line="396" pos:column="21">HEADER1<pos:position pos:line="396" pos:column="28"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="397" pos:column="21">" HTTP/%1d.%1d%c%3d"<pos:position pos:line="397" pos:column="41"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="398" pos:column="21">&amp;<pos:position pos:line="398" pos:column="26"/></operator><name pos:line="398" pos:column="22">httpversion_major<pos:position pos:line="398" pos:column="39"/></name></expr></argument>,
                    <argument><expr><operator pos:line="399" pos:column="21">&amp;<pos:position pos:line="399" pos:column="26"/></operator><name><name pos:line="399" pos:column="22">conn<pos:position pos:line="399" pos:column="26"/></name><operator pos:line="399" pos:column="26">-&gt;<pos:position pos:line="399" pos:column="31"/></operator><name pos:line="399" pos:column="28">httpversion<pos:position pos:line="399" pos:column="39"/></name></name></expr></argument>,
                    <argument><expr><operator pos:line="400" pos:column="21">&amp;<pos:position pos:line="400" pos:column="26"/></operator><name pos:line="400" pos:column="22">separator<pos:position pos:line="400" pos:column="31"/></name></expr></argument>,
                    <argument><expr><operator pos:line="401" pos:column="21">&amp;<pos:position pos:line="401" pos:column="26"/></operator><name><name pos:line="401" pos:column="22">k<pos:position pos:line="401" pos:column="23"/></name><operator pos:line="401" pos:column="23">-&gt;<pos:position pos:line="401" pos:column="28"/></operator><name pos:line="401" pos:column="25">httpcode<pos:position pos:line="401" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="401" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="401" pos:column="35"/></expr_stmt>

        <if pos:line="403" pos:column="9">if<condition pos:line="403" pos:column="11">(<expr><name pos:line="403" pos:column="12">nc<pos:position pos:line="403" pos:column="14"/></name> <operator pos:line="403" pos:column="15">==<pos:position pos:line="403" pos:column="17"/></operator> <literal type="number" pos:line="403" pos:column="18">1<pos:position pos:line="403" pos:column="19"/></literal> <operator pos:line="403" pos:column="20">&amp;&amp;<pos:position pos:line="403" pos:column="30"/></operator> <name pos:line="403" pos:column="23">httpversion_major<pos:position pos:line="403" pos:column="40"/></name> <operator pos:line="403" pos:column="41">==<pos:position pos:line="403" pos:column="43"/></operator> <literal type="number" pos:line="403" pos:column="44">2<pos:position pos:line="403" pos:column="45"/></literal> <operator pos:line="403" pos:column="46">&amp;&amp;<pos:position pos:line="403" pos:column="56"/></operator>
           <literal type="number" pos:line="404" pos:column="12">1<pos:position pos:line="404" pos:column="13"/></literal> <operator pos:line="404" pos:column="14">==<pos:position pos:line="404" pos:column="16"/></operator> <call><name pos:line="404" pos:column="17">sscanf<pos:position pos:line="404" pos:column="23"/></name><argument_list pos:line="404" pos:column="23">(<argument><expr><name pos:line="404" pos:column="24">HEADER1<pos:position pos:line="404" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="404" pos:column="33">" HTTP/2 %d"<pos:position pos:line="404" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="404" pos:column="47">&amp;<pos:position pos:line="404" pos:column="52"/></operator><name><name pos:line="404" pos:column="48">k<pos:position pos:line="404" pos:column="49"/></name><operator pos:line="404" pos:column="49">-&gt;<pos:position pos:line="404" pos:column="54"/></operator><name pos:line="404" pos:column="51">httpcode<pos:position pos:line="404" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="404" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="404" pos:column="61"/></condition><then pos:line="404" pos:column="61"> <block pos:line="404" pos:column="62">{
          <expr_stmt><expr><name><name pos:line="405" pos:column="11">conn<pos:position pos:line="405" pos:column="15"/></name><operator pos:line="405" pos:column="15">-&gt;<pos:position pos:line="405" pos:column="20"/></operator><name pos:line="405" pos:column="17">httpversion<pos:position pos:line="405" pos:column="28"/></name></name> <operator pos:line="405" pos:column="29">=<pos:position pos:line="405" pos:column="30"/></operator> <literal type="number" pos:line="405" pos:column="31">0<pos:position pos:line="405" pos:column="32"/></literal></expr>;<pos:position pos:line="405" pos:column="33"/></expr_stmt>
          <expr_stmt><expr><name pos:line="406" pos:column="11">nc<pos:position pos:line="406" pos:column="13"/></name> <operator pos:line="406" pos:column="14">=<pos:position pos:line="406" pos:column="15"/></operator> <literal type="number" pos:line="406" pos:column="16">4<pos:position pos:line="406" pos:column="17"/></literal></expr>;<pos:position pos:line="406" pos:column="18"/></expr_stmt>
          <expr_stmt><expr><name pos:line="407" pos:column="11">separator<pos:position pos:line="407" pos:column="20"/></name> <operator pos:line="407" pos:column="21">=<pos:position pos:line="407" pos:column="22"/></operator> <literal type="char" pos:line="407" pos:column="23">' '<pos:position pos:line="407" pos:column="26"/></literal></expr>;<pos:position pos:line="407" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="408" pos:column="10"/></block></then></if>

        <if pos:line="410" pos:column="9">if<condition pos:line="410" pos:column="11">(<expr><operator pos:line="410" pos:column="12">(<pos:position pos:line="410" pos:column="13"/></operator><name pos:line="410" pos:column="13">nc<pos:position pos:line="410" pos:column="15"/></name> <operator pos:line="410" pos:column="16">==<pos:position pos:line="410" pos:column="18"/></operator> <literal type="number" pos:line="410" pos:column="19">4<pos:position pos:line="410" pos:column="20"/></literal><operator pos:line="410" pos:column="20">)<pos:position pos:line="410" pos:column="21"/></operator> <operator pos:line="410" pos:column="22">&amp;&amp;<pos:position pos:line="410" pos:column="32"/></operator> <operator pos:line="410" pos:column="25">(<pos:position pos:line="410" pos:column="26"/></operator><literal type="char" pos:line="410" pos:column="26">' '<pos:position pos:line="410" pos:column="29"/></literal> <operator pos:line="410" pos:column="30">==<pos:position pos:line="410" pos:column="32"/></operator> <name pos:line="410" pos:column="33">separator<pos:position pos:line="410" pos:column="42"/></name><operator pos:line="410" pos:column="42">)<pos:position pos:line="410" pos:column="43"/></operator></expr>)<pos:position pos:line="410" pos:column="44"/></condition><then pos:line="410" pos:column="44"> <block pos:line="410" pos:column="45">{
          <expr_stmt><expr><name><name pos:line="411" pos:column="11">conn<pos:position pos:line="411" pos:column="15"/></name><operator pos:line="411" pos:column="15">-&gt;<pos:position pos:line="411" pos:column="20"/></operator><name pos:line="411" pos:column="17">httpversion<pos:position pos:line="411" pos:column="28"/></name></name> <operator pos:line="411" pos:column="29">+=<pos:position pos:line="411" pos:column="31"/></operator> <literal type="number" pos:line="411" pos:column="32">10<pos:position pos:line="411" pos:column="34"/></literal> <operator pos:line="411" pos:column="35">*<pos:position pos:line="411" pos:column="36"/></operator> <name pos:line="411" pos:column="37">httpversion_major<pos:position pos:line="411" pos:column="54"/></name></expr>;<pos:position pos:line="411" pos:column="55"/></expr_stmt>

          <if pos:line="413" pos:column="11">if<condition pos:line="413" pos:column="13">(<expr><name><name pos:line="413" pos:column="14">k<pos:position pos:line="413" pos:column="15"/></name><operator pos:line="413" pos:column="15">-&gt;<pos:position pos:line="413" pos:column="20"/></operator><name pos:line="413" pos:column="17">upgr101<pos:position pos:line="413" pos:column="24"/></name></name> <operator pos:line="413" pos:column="25">==<pos:position pos:line="413" pos:column="27"/></operator> <name pos:line="413" pos:column="28">UPGR101_RECEIVED<pos:position pos:line="413" pos:column="44"/></name></expr>)<pos:position pos:line="413" pos:column="45"/></condition><then pos:line="413" pos:column="45"> <block pos:line="413" pos:column="46">{
            <comment type="block" pos:line="414" pos:column="13">/* supposedly upgraded to http2 now */</comment>
            <if pos:line="415" pos:column="13">if<condition pos:line="415" pos:column="15">(<expr><name><name pos:line="415" pos:column="16">conn<pos:position pos:line="415" pos:column="20"/></name><operator pos:line="415" pos:column="20">-&gt;<pos:position pos:line="415" pos:column="25"/></operator><name pos:line="415" pos:column="22">httpversion<pos:position pos:line="415" pos:column="33"/></name></name> <operator pos:line="415" pos:column="34">!=<pos:position pos:line="415" pos:column="36"/></operator> <literal type="number" pos:line="415" pos:column="37">20<pos:position pos:line="415" pos:column="39"/></literal></expr>)<pos:position pos:line="415" pos:column="40"/></condition><then pos:line="415" pos:column="40">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="416" pos:column="15">infof<pos:position pos:line="416" pos:column="20"/></name><argument_list pos:line="416" pos:column="20">(<argument><expr><name pos:line="416" pos:column="21">data<pos:position pos:line="416" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="416" pos:column="27">"Lying server, not serving HTTP/2\n"<pos:position pos:line="416" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="416" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="416" pos:column="65"/></expr_stmt></block></then></if>
          }<pos:position pos:line="417" pos:column="12"/></block></then></if>
        }<pos:position pos:line="418" pos:column="10"/></block></then>
        <elseif pos:line="419" pos:column="9">else <if pos:line="419" pos:column="14">if<condition pos:line="419" pos:column="16">(<expr><operator pos:line="419" pos:column="17">!<pos:position pos:line="419" pos:column="18"/></operator><name pos:line="419" pos:column="18">nc<pos:position pos:line="419" pos:column="20"/></name></expr>)<pos:position pos:line="419" pos:column="21"/></condition><then pos:line="419" pos:column="21"> <block pos:line="419" pos:column="22">{
          <comment type="block" pos:line="420" pos:column="11">/* this is the real world, not a Nirvana
             NCSA 1.5.x returns this crap when asked for HTTP/1.1
          */</comment>
          <expr_stmt><expr><name pos:line="423" pos:column="11">nc<pos:position pos:line="423" pos:column="13"/></name> <operator pos:line="423" pos:column="14">=<pos:position pos:line="423" pos:column="15"/></operator> <call><name pos:line="423" pos:column="16">sscanf<pos:position pos:line="423" pos:column="22"/></name><argument_list pos:line="423" pos:column="22">(<argument><expr><name pos:line="423" pos:column="23">HEADER1<pos:position pos:line="423" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="423" pos:column="32">" HTTP %3d"<pos:position pos:line="423" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="423" pos:column="45">&amp;<pos:position pos:line="423" pos:column="50"/></operator><name><name pos:line="423" pos:column="46">k<pos:position pos:line="423" pos:column="47"/></name><operator pos:line="423" pos:column="47">-&gt;<pos:position pos:line="423" pos:column="52"/></operator><name pos:line="423" pos:column="49">httpcode<pos:position pos:line="423" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="423" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="423" pos:column="59"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="424" pos:column="11">conn<pos:position pos:line="424" pos:column="15"/></name><operator pos:line="424" pos:column="15">-&gt;<pos:position pos:line="424" pos:column="20"/></operator><name pos:line="424" pos:column="17">httpversion<pos:position pos:line="424" pos:column="28"/></name></name> <operator pos:line="424" pos:column="29">=<pos:position pos:line="424" pos:column="30"/></operator> <literal type="number" pos:line="424" pos:column="31">10<pos:position pos:line="424" pos:column="33"/></literal></expr>;<pos:position pos:line="424" pos:column="34"/></expr_stmt>

          <comment type="block" pos:line="426" pos:column="11">/* If user has set option HTTP200ALIASES,
             compare header line against list of aliases
          */</comment>
          <if pos:line="429" pos:column="11">if<condition pos:line="429" pos:column="13">(<expr><operator pos:line="429" pos:column="14">!<pos:position pos:line="429" pos:column="15"/></operator><name pos:line="429" pos:column="15">nc<pos:position pos:line="429" pos:column="17"/></name></expr>)<pos:position pos:line="429" pos:column="18"/></condition><then pos:line="429" pos:column="18"> <block pos:line="429" pos:column="19">{
            <if pos:line="430" pos:column="13">if<condition pos:line="430" pos:column="15">(<expr><call><name pos:line="430" pos:column="16">checkhttpprefix<pos:position pos:line="430" pos:column="31"/></name><argument_list pos:line="430" pos:column="31">(<argument><expr><name pos:line="430" pos:column="32">data<pos:position pos:line="430" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="430" pos:column="38">k<pos:position pos:line="430" pos:column="39"/></name><operator pos:line="430" pos:column="39">-&gt;<pos:position pos:line="430" pos:column="44"/></operator><name pos:line="430" pos:column="41">p<pos:position pos:line="430" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="430" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="430" pos:column="44"/></condition><then pos:line="430" pos:column="44"> <block pos:line="430" pos:column="45">{
              <expr_stmt><expr><name pos:line="431" pos:column="15">nc<pos:position pos:line="431" pos:column="17"/></name> <operator pos:line="431" pos:column="18">=<pos:position pos:line="431" pos:column="19"/></operator> <literal type="number" pos:line="431" pos:column="20">1<pos:position pos:line="431" pos:column="21"/></literal></expr>;<pos:position pos:line="431" pos:column="22"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="432" pos:column="15">k<pos:position pos:line="432" pos:column="16"/></name><operator pos:line="432" pos:column="16">-&gt;<pos:position pos:line="432" pos:column="21"/></operator><name pos:line="432" pos:column="18">httpcode<pos:position pos:line="432" pos:column="26"/></name></name> <operator pos:line="432" pos:column="27">=<pos:position pos:line="432" pos:column="28"/></operator> <literal type="number" pos:line="432" pos:column="29">200<pos:position pos:line="432" pos:column="32"/></literal></expr>;<pos:position pos:line="432" pos:column="33"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="433" pos:column="15">conn<pos:position pos:line="433" pos:column="19"/></name><operator pos:line="433" pos:column="19">-&gt;<pos:position pos:line="433" pos:column="24"/></operator><name pos:line="433" pos:column="21">httpversion<pos:position pos:line="433" pos:column="32"/></name></name> <operator pos:line="433" pos:column="33">=<pos:position pos:line="433" pos:column="34"/></operator> <literal type="number" pos:line="433" pos:column="35">10<pos:position pos:line="433" pos:column="37"/></literal></expr>;<pos:position pos:line="433" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="434" pos:column="14"/></block></then></if>
          }<pos:position pos:line="435" pos:column="12"/></block></then></if>
        }<pos:position pos:line="436" pos:column="10"/></block></then></if></elseif>
        <else pos:line="437" pos:column="9">else <block pos:line="437" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="438" pos:column="11">failf<pos:position pos:line="438" pos:column="16"/></name><argument_list pos:line="438" pos:column="16">(<argument><expr><name pos:line="438" pos:column="17">data<pos:position pos:line="438" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="438" pos:column="23">"Unsupported HTTP version in response\n"<pos:position pos:line="438" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="438" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="438" pos:column="65"/></expr_stmt>
          <return pos:line="439" pos:column="11">return <expr><name pos:line="439" pos:column="18">CURLE_UNSUPPORTED_PROTOCOL<pos:position pos:line="439" pos:column="44"/></name></expr>;<pos:position pos:line="439" pos:column="45"/></return>
        }<pos:position pos:line="440" pos:column="10"/></block></else></if>
      }<pos:position pos:line="441" pos:column="8"/></block></then>
      <elseif pos:line="442" pos:column="7">else <if pos:line="442" pos:column="12">if<condition pos:line="442" pos:column="14">(<expr><name><name pos:line="442" pos:column="15">conn<pos:position pos:line="442" pos:column="19"/></name><operator pos:line="442" pos:column="19">-&gt;<pos:position pos:line="442" pos:column="24"/></operator><name pos:line="442" pos:column="21">handler<pos:position pos:line="442" pos:column="28"/></name><operator pos:line="442" pos:column="28">-&gt;<pos:position pos:line="442" pos:column="33"/></operator><name pos:line="442" pos:column="30">protocol<pos:position pos:line="442" pos:column="38"/></name></name> <operator pos:line="442" pos:column="39">&amp;<pos:position pos:line="442" pos:column="44"/></operator> <name pos:line="442" pos:column="41">CURLPROTO_RTSP<pos:position pos:line="442" pos:column="55"/></name></expr>)<pos:position pos:line="442" pos:column="56"/></condition><then pos:line="442" pos:column="56"> <block pos:line="442" pos:column="57">{
        <expr_stmt><expr><name pos:line="443" pos:column="9">nc<pos:position pos:line="443" pos:column="11"/></name> <operator pos:line="443" pos:column="12">=<pos:position pos:line="443" pos:column="13"/></operator> <call><name pos:line="443" pos:column="14">sscanf<pos:position pos:line="443" pos:column="20"/></name><argument_list pos:line="443" pos:column="20">(<argument><expr><name pos:line="443" pos:column="21">HEADER1<pos:position pos:line="443" pos:column="28"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="444" pos:column="21">" RTSP/%d.%d %3d"<pos:position pos:line="444" pos:column="38"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="445" pos:column="21">&amp;<pos:position pos:line="445" pos:column="26"/></operator><name pos:line="445" pos:column="22">rtspversion_major<pos:position pos:line="445" pos:column="39"/></name></expr></argument>,
                    <argument><expr><operator pos:line="446" pos:column="21">&amp;<pos:position pos:line="446" pos:column="26"/></operator><name><name pos:line="446" pos:column="22">conn<pos:position pos:line="446" pos:column="26"/></name><operator pos:line="446" pos:column="26">-&gt;<pos:position pos:line="446" pos:column="31"/></operator><name pos:line="446" pos:column="28">rtspversion<pos:position pos:line="446" pos:column="39"/></name></name></expr></argument>,
                    <argument><expr><operator pos:line="447" pos:column="21">&amp;<pos:position pos:line="447" pos:column="26"/></operator><name><name pos:line="447" pos:column="22">k<pos:position pos:line="447" pos:column="23"/></name><operator pos:line="447" pos:column="23">-&gt;<pos:position pos:line="447" pos:column="28"/></operator><name pos:line="447" pos:column="25">httpcode<pos:position pos:line="447" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="447" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="447" pos:column="35"/></expr_stmt>
        <if pos:line="448" pos:column="9">if<condition pos:line="448" pos:column="11">(<expr><name pos:line="448" pos:column="12">nc<pos:position pos:line="448" pos:column="14"/></name> <operator pos:line="448" pos:column="15">==<pos:position pos:line="448" pos:column="17"/></operator> <literal type="number" pos:line="448" pos:column="18">3<pos:position pos:line="448" pos:column="19"/></literal></expr>)<pos:position pos:line="448" pos:column="20"/></condition><then pos:line="448" pos:column="20"> <block pos:line="448" pos:column="21">{
          <expr_stmt><expr><name><name pos:line="449" pos:column="11">conn<pos:position pos:line="449" pos:column="15"/></name><operator pos:line="449" pos:column="15">-&gt;<pos:position pos:line="449" pos:column="20"/></operator><name pos:line="449" pos:column="17">rtspversion<pos:position pos:line="449" pos:column="28"/></name></name> <operator pos:line="449" pos:column="29">+=<pos:position pos:line="449" pos:column="31"/></operator> <literal type="number" pos:line="449" pos:column="32">10<pos:position pos:line="449" pos:column="34"/></literal> <operator pos:line="449" pos:column="35">*<pos:position pos:line="449" pos:column="36"/></operator> <name pos:line="449" pos:column="37">rtspversion_major<pos:position pos:line="449" pos:column="54"/></name></expr>;<pos:position pos:line="449" pos:column="55"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="450" pos:column="11">conn<pos:position pos:line="450" pos:column="15"/></name><operator pos:line="450" pos:column="15">-&gt;<pos:position pos:line="450" pos:column="20"/></operator><name pos:line="450" pos:column="17">httpversion<pos:position pos:line="450" pos:column="28"/></name></name> <operator pos:line="450" pos:column="29">=<pos:position pos:line="450" pos:column="30"/></operator> <literal type="number" pos:line="450" pos:column="31">11<pos:position pos:line="450" pos:column="33"/></literal></expr>;<pos:position pos:line="450" pos:column="34"/></expr_stmt> <comment type="block" pos:line="450" pos:column="35">/* For us, RTSP acts like HTTP 1.1 */</comment>
        }<pos:position pos:line="451" pos:column="10"/></block></then>
        <else pos:line="452" pos:column="9">else <block pos:line="452" pos:column="14">{
          <comment type="block" pos:line="453" pos:column="11">/* TODO: do we care about the other cases here? */</comment>
          <expr_stmt><expr><name pos:line="454" pos:column="11">nc<pos:position pos:line="454" pos:column="13"/></name> <operator pos:line="454" pos:column="14">=<pos:position pos:line="454" pos:column="15"/></operator> <literal type="number" pos:line="454" pos:column="16">0<pos:position pos:line="454" pos:column="17"/></literal></expr>;<pos:position pos:line="454" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="455" pos:column="10"/></block></else></if>
      }<pos:position pos:line="456" pos:column="8"/></block></then></if></elseif></if>

      <if pos:line="458" pos:column="7">if<condition pos:line="458" pos:column="9">(<expr><name pos:line="458" pos:column="10">nc<pos:position pos:line="458" pos:column="12"/></name></expr>)<pos:position pos:line="458" pos:column="13"/></condition><then pos:line="458" pos:column="13"> <block pos:line="458" pos:column="14">{
        <expr_stmt><expr><name><name pos:line="459" pos:column="9">data<pos:position pos:line="459" pos:column="13"/></name><operator pos:line="459" pos:column="13">-&gt;<pos:position pos:line="459" pos:column="18"/></operator><name pos:line="459" pos:column="15">info<pos:position pos:line="459" pos:column="19"/></name><operator pos:line="459" pos:column="19">.<pos:position pos:line="459" pos:column="20"/></operator><name pos:line="459" pos:column="20">httpcode<pos:position pos:line="459" pos:column="28"/></name></name> <operator pos:line="459" pos:column="29">=<pos:position pos:line="459" pos:column="30"/></operator> <name><name pos:line="459" pos:column="31">k<pos:position pos:line="459" pos:column="32"/></name><operator pos:line="459" pos:column="32">-&gt;<pos:position pos:line="459" pos:column="37"/></operator><name pos:line="459" pos:column="34">httpcode<pos:position pos:line="459" pos:column="42"/></name></name></expr>;<pos:position pos:line="459" pos:column="43"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="461" pos:column="9">data<pos:position pos:line="461" pos:column="13"/></name><operator pos:line="461" pos:column="13">-&gt;<pos:position pos:line="461" pos:column="18"/></operator><name pos:line="461" pos:column="15">info<pos:position pos:line="461" pos:column="19"/></name><operator pos:line="461" pos:column="19">.<pos:position pos:line="461" pos:column="20"/></operator><name pos:line="461" pos:column="20">httpversion<pos:position pos:line="461" pos:column="31"/></name></name> <operator pos:line="461" pos:column="32">=<pos:position pos:line="461" pos:column="33"/></operator> <name><name pos:line="461" pos:column="34">conn<pos:position pos:line="461" pos:column="38"/></name><operator pos:line="461" pos:column="38">-&gt;<pos:position pos:line="461" pos:column="43"/></operator><name pos:line="461" pos:column="40">httpversion<pos:position pos:line="461" pos:column="51"/></name></name></expr>;<pos:position pos:line="461" pos:column="52"/></expr_stmt>
        <if pos:line="462" pos:column="9">if<condition pos:line="462" pos:column="11">(<expr><operator pos:line="462" pos:column="12">!<pos:position pos:line="462" pos:column="13"/></operator><name><name pos:line="462" pos:column="13">data<pos:position pos:line="462" pos:column="17"/></name><operator pos:line="462" pos:column="17">-&gt;<pos:position pos:line="462" pos:column="22"/></operator><name pos:line="462" pos:column="19">state<pos:position pos:line="462" pos:column="24"/></name><operator pos:line="462" pos:column="24">.<pos:position pos:line="462" pos:column="25"/></operator><name pos:line="462" pos:column="25">httpversion<pos:position pos:line="462" pos:column="36"/></name></name> <operator pos:line="462" pos:column="37">||<pos:position pos:line="462" pos:column="39"/></operator>
           <name><name pos:line="463" pos:column="12">data<pos:position pos:line="463" pos:column="16"/></name><operator pos:line="463" pos:column="16">-&gt;<pos:position pos:line="463" pos:column="21"/></operator><name pos:line="463" pos:column="18">state<pos:position pos:line="463" pos:column="23"/></name><operator pos:line="463" pos:column="23">.<pos:position pos:line="463" pos:column="24"/></operator><name pos:line="463" pos:column="24">httpversion<pos:position pos:line="463" pos:column="35"/></name></name> <operator pos:line="463" pos:column="36">&gt;<pos:position pos:line="463" pos:column="40"/></operator> <name><name pos:line="463" pos:column="38">conn<pos:position pos:line="463" pos:column="42"/></name><operator pos:line="463" pos:column="42">-&gt;<pos:position pos:line="463" pos:column="47"/></operator><name pos:line="463" pos:column="44">httpversion<pos:position pos:line="463" pos:column="55"/></name></name></expr>)<pos:position pos:line="463" pos:column="56"/></condition><then pos:line="463" pos:column="56">
          <comment type="block" pos:line="464" pos:column="11">/* store the lowest server version we encounter */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="465" pos:column="11">data<pos:position pos:line="465" pos:column="15"/></name><operator pos:line="465" pos:column="15">-&gt;<pos:position pos:line="465" pos:column="20"/></operator><name pos:line="465" pos:column="17">state<pos:position pos:line="465" pos:column="22"/></name><operator pos:line="465" pos:column="22">.<pos:position pos:line="465" pos:column="23"/></operator><name pos:line="465" pos:column="23">httpversion<pos:position pos:line="465" pos:column="34"/></name></name> <operator pos:line="465" pos:column="35">=<pos:position pos:line="465" pos:column="36"/></operator> <name><name pos:line="465" pos:column="37">conn<pos:position pos:line="465" pos:column="41"/></name><operator pos:line="465" pos:column="41">-&gt;<pos:position pos:line="465" pos:column="46"/></operator><name pos:line="465" pos:column="43">httpversion<pos:position pos:line="465" pos:column="54"/></name></name></expr>;<pos:position pos:line="465" pos:column="55"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="467" pos:column="9">/*
         * This code executes as part of processing the header.  As a
         * result, it's not totally clear how to interpret the
         * response code yet as that depends on what other headers may
         * be present.  401 and 407 may be errors, but may be OK
         * depending on how authentication is working.  Other codes
         * are definitely errors, so give up here.
         */</comment>
        <if pos:line="475" pos:column="9">if<condition pos:line="475" pos:column="11">(<expr><name><name pos:line="475" pos:column="12">data<pos:position pos:line="475" pos:column="16"/></name><operator pos:line="475" pos:column="16">-&gt;<pos:position pos:line="475" pos:column="21"/></operator><name pos:line="475" pos:column="18">set<pos:position pos:line="475" pos:column="21"/></name><operator pos:line="475" pos:column="21">.<pos:position pos:line="475" pos:column="22"/></operator><name pos:line="475" pos:column="22">http_fail_on_error<pos:position pos:line="475" pos:column="40"/></name></name> <operator pos:line="475" pos:column="41">&amp;&amp;<pos:position pos:line="475" pos:column="51"/></operator> <operator pos:line="475" pos:column="44">(<pos:position pos:line="475" pos:column="45"/></operator><name><name pos:line="475" pos:column="45">k<pos:position pos:line="475" pos:column="46"/></name><operator pos:line="475" pos:column="46">-&gt;<pos:position pos:line="475" pos:column="51"/></operator><name pos:line="475" pos:column="48">httpcode<pos:position pos:line="475" pos:column="56"/></name></name> <operator pos:line="475" pos:column="57">&gt;=<pos:position pos:line="475" pos:column="62"/></operator> <literal type="number" pos:line="475" pos:column="60">400<pos:position pos:line="475" pos:column="63"/></literal><operator pos:line="475" pos:column="63">)<pos:position pos:line="475" pos:column="64"/></operator> <operator pos:line="475" pos:column="65">&amp;&amp;<pos:position pos:line="475" pos:column="75"/></operator>
           <operator pos:line="476" pos:column="12">(<pos:position pos:line="476" pos:column="13"/></operator><operator pos:line="476" pos:column="13">(<pos:position pos:line="476" pos:column="14"/></operator><name><name pos:line="476" pos:column="14">k<pos:position pos:line="476" pos:column="15"/></name><operator pos:line="476" pos:column="15">-&gt;<pos:position pos:line="476" pos:column="20"/></operator><name pos:line="476" pos:column="17">httpcode<pos:position pos:line="476" pos:column="25"/></name></name> <operator pos:line="476" pos:column="26">!=<pos:position pos:line="476" pos:column="28"/></operator> <literal type="number" pos:line="476" pos:column="29">401<pos:position pos:line="476" pos:column="32"/></literal><operator pos:line="476" pos:column="32">)<pos:position pos:line="476" pos:column="33"/></operator> <operator pos:line="476" pos:column="34">||<pos:position pos:line="476" pos:column="36"/></operator> <operator pos:line="476" pos:column="37">!<pos:position pos:line="476" pos:column="38"/></operator><name><name pos:line="476" pos:column="38">conn<pos:position pos:line="476" pos:column="42"/></name><operator pos:line="476" pos:column="42">-&gt;<pos:position pos:line="476" pos:column="47"/></operator><name pos:line="476" pos:column="44">bits<pos:position pos:line="476" pos:column="48"/></name><operator pos:line="476" pos:column="48">.<pos:position pos:line="476" pos:column="49"/></operator><name pos:line="476" pos:column="49">user_passwd<pos:position pos:line="476" pos:column="60"/></name></name><operator pos:line="476" pos:column="60">)<pos:position pos:line="476" pos:column="61"/></operator> <operator pos:line="476" pos:column="62">&amp;&amp;<pos:position pos:line="476" pos:column="72"/></operator>
           <operator pos:line="477" pos:column="12">(<pos:position pos:line="477" pos:column="13"/></operator><operator pos:line="477" pos:column="13">(<pos:position pos:line="477" pos:column="14"/></operator><name><name pos:line="477" pos:column="14">k<pos:position pos:line="477" pos:column="15"/></name><operator pos:line="477" pos:column="15">-&gt;<pos:position pos:line="477" pos:column="20"/></operator><name pos:line="477" pos:column="17">httpcode<pos:position pos:line="477" pos:column="25"/></name></name> <operator pos:line="477" pos:column="26">!=<pos:position pos:line="477" pos:column="28"/></operator> <literal type="number" pos:line="477" pos:column="29">407<pos:position pos:line="477" pos:column="32"/></literal><operator pos:line="477" pos:column="32">)<pos:position pos:line="477" pos:column="33"/></operator> <operator pos:line="477" pos:column="34">||<pos:position pos:line="477" pos:column="36"/></operator> <operator pos:line="477" pos:column="37">!<pos:position pos:line="477" pos:column="38"/></operator><name><name pos:line="477" pos:column="38">conn<pos:position pos:line="477" pos:column="42"/></name><operator pos:line="477" pos:column="42">-&gt;<pos:position pos:line="477" pos:column="47"/></operator><name pos:line="477" pos:column="44">bits<pos:position pos:line="477" pos:column="48"/></name><operator pos:line="477" pos:column="48">.<pos:position pos:line="477" pos:column="49"/></operator><name pos:line="477" pos:column="49">proxy_user_passwd<pos:position pos:line="477" pos:column="66"/></name></name><operator pos:line="477" pos:column="66">)<pos:position pos:line="477" pos:column="67"/></operator></expr> )<pos:position pos:line="477" pos:column="69"/></condition><then pos:line="477" pos:column="69"> <block pos:line="477" pos:column="70">{

          <if pos:line="479" pos:column="11">if<condition pos:line="479" pos:column="13">(<expr><name><name pos:line="479" pos:column="14">data<pos:position pos:line="479" pos:column="18"/></name><operator pos:line="479" pos:column="18">-&gt;<pos:position pos:line="479" pos:column="23"/></operator><name pos:line="479" pos:column="20">state<pos:position pos:line="479" pos:column="25"/></name><operator pos:line="479" pos:column="25">.<pos:position pos:line="479" pos:column="26"/></operator><name pos:line="479" pos:column="26">resume_from<pos:position pos:line="479" pos:column="37"/></name></name> <operator pos:line="479" pos:column="38">&amp;&amp;<pos:position pos:line="479" pos:column="48"/></operator>
             <operator pos:line="480" pos:column="14">(<pos:position pos:line="480" pos:column="15"/></operator><name><name pos:line="480" pos:column="15">data<pos:position pos:line="480" pos:column="19"/></name><operator pos:line="480" pos:column="19">-&gt;<pos:position pos:line="480" pos:column="24"/></operator><name pos:line="480" pos:column="21">set<pos:position pos:line="480" pos:column="24"/></name><operator pos:line="480" pos:column="24">.<pos:position pos:line="480" pos:column="25"/></operator><name pos:line="480" pos:column="25">httpreq<pos:position pos:line="480" pos:column="32"/></name></name> <operator pos:line="480" pos:column="33">==<pos:position pos:line="480" pos:column="35"/></operator> <name pos:line="480" pos:column="36">HTTPREQ_GET<pos:position pos:line="480" pos:column="47"/></name><operator pos:line="480" pos:column="47">)<pos:position pos:line="480" pos:column="48"/></operator> <operator pos:line="480" pos:column="49">&amp;&amp;<pos:position pos:line="480" pos:column="59"/></operator>
             <operator pos:line="481" pos:column="14">(<pos:position pos:line="481" pos:column="15"/></operator><name><name pos:line="481" pos:column="15">k<pos:position pos:line="481" pos:column="16"/></name><operator pos:line="481" pos:column="16">-&gt;<pos:position pos:line="481" pos:column="21"/></operator><name pos:line="481" pos:column="18">httpcode<pos:position pos:line="481" pos:column="26"/></name></name> <operator pos:line="481" pos:column="27">==<pos:position pos:line="481" pos:column="29"/></operator> <literal type="number" pos:line="481" pos:column="30">416<pos:position pos:line="481" pos:column="33"/></literal><operator pos:line="481" pos:column="33">)<pos:position pos:line="481" pos:column="34"/></operator></expr>)<pos:position pos:line="481" pos:column="35"/></condition><then pos:line="481" pos:column="35"> <block pos:line="481" pos:column="36">{
            <comment type="block" pos:line="482" pos:column="13">/* "Requested Range Not Satisfiable", just proceed and
               pretend this is no error */</comment>
          }<pos:position pos:line="484" pos:column="12"/></block></then>
          <else pos:line="485" pos:column="11">else <block pos:line="485" pos:column="16">{
            <comment type="block" pos:line="486" pos:column="13">/* serious error, go home! */</comment>
            <expr_stmt><expr><call><name pos:line="487" pos:column="13">print_http_error<pos:position pos:line="487" pos:column="29"/></name><argument_list pos:line="487" pos:column="29">(<argument><expr><name pos:line="487" pos:column="30">data<pos:position pos:line="487" pos:column="34"/></name></expr></argument>)<pos:position pos:line="487" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="487" pos:column="36"/></expr_stmt>
            <return pos:line="488" pos:column="13">return <expr><name pos:line="488" pos:column="20">CURLE_HTTP_RETURNED_ERROR<pos:position pos:line="488" pos:column="45"/></name></expr>;<pos:position pos:line="488" pos:column="46"/></return>
          }<pos:position pos:line="489" pos:column="12"/></block></else></if>
        }<pos:position pos:line="490" pos:column="10"/></block></then></if>

        <if pos:line="492" pos:column="9">if<condition pos:line="492" pos:column="11">(<expr><name><name pos:line="492" pos:column="12">conn<pos:position pos:line="492" pos:column="16"/></name><operator pos:line="492" pos:column="16">-&gt;<pos:position pos:line="492" pos:column="21"/></operator><name pos:line="492" pos:column="18">httpversion<pos:position pos:line="492" pos:column="29"/></name></name> <operator pos:line="492" pos:column="30">==<pos:position pos:line="492" pos:column="32"/></operator> <literal type="number" pos:line="492" pos:column="33">10<pos:position pos:line="492" pos:column="35"/></literal></expr>)<pos:position pos:line="492" pos:column="36"/></condition><then pos:line="492" pos:column="36"> <block pos:line="492" pos:column="37">{
          <comment type="block" pos:line="493" pos:column="11">/* Default action for HTTP/1.0 must be to close, unless
             we get one of those fancy headers that tell us the
             server keeps it open for us! */</comment>
          <expr_stmt><expr><call><name pos:line="496" pos:column="11">infof<pos:position pos:line="496" pos:column="16"/></name><argument_list pos:line="496" pos:column="16">(<argument><expr><name pos:line="496" pos:column="17">data<pos:position pos:line="496" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="496" pos:column="23">"HTTP 1.0, assume close after body\n"<pos:position pos:line="496" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="496" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="496" pos:column="62"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="497" pos:column="11">connclose<pos:position pos:line="497" pos:column="20"/></name><argument_list pos:line="497" pos:column="20">(<argument><expr><name pos:line="497" pos:column="21">conn<pos:position pos:line="497" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="497" pos:column="27">"HTTP/1.0 close after body"<pos:position pos:line="497" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="497" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="497" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="498" pos:column="10"/></block></then>
        <elseif pos:line="499" pos:column="9">else <if pos:line="499" pos:column="14">if<condition pos:line="499" pos:column="16">(<expr><name><name pos:line="499" pos:column="17">conn<pos:position pos:line="499" pos:column="21"/></name><operator pos:line="499" pos:column="21">-&gt;<pos:position pos:line="499" pos:column="26"/></operator><name pos:line="499" pos:column="23">httpversion<pos:position pos:line="499" pos:column="34"/></name></name> <operator pos:line="499" pos:column="35">==<pos:position pos:line="499" pos:column="37"/></operator> <literal type="number" pos:line="499" pos:column="38">20<pos:position pos:line="499" pos:column="40"/></literal> <operator pos:line="499" pos:column="41">||<pos:position pos:line="499" pos:column="43"/></operator>
                <operator pos:line="500" pos:column="17">(<pos:position pos:line="500" pos:column="18"/></operator><name><name pos:line="500" pos:column="18">k<pos:position pos:line="500" pos:column="19"/></name><operator pos:line="500" pos:column="19">-&gt;<pos:position pos:line="500" pos:column="24"/></operator><name pos:line="500" pos:column="21">upgr101<pos:position pos:line="500" pos:column="28"/></name></name> <operator pos:line="500" pos:column="29">==<pos:position pos:line="500" pos:column="31"/></operator> <name pos:line="500" pos:column="32">UPGR101_REQUESTED<pos:position pos:line="500" pos:column="49"/></name> <operator pos:line="500" pos:column="50">&amp;&amp;<pos:position pos:line="500" pos:column="60"/></operator> <name><name pos:line="500" pos:column="53">k<pos:position pos:line="500" pos:column="54"/></name><operator pos:line="500" pos:column="54">-&gt;<pos:position pos:line="500" pos:column="59"/></operator><name pos:line="500" pos:column="56">httpcode<pos:position pos:line="500" pos:column="64"/></name></name> <operator pos:line="500" pos:column="65">==<pos:position pos:line="500" pos:column="67"/></operator> <literal type="number" pos:line="500" pos:column="68">101<pos:position pos:line="500" pos:column="71"/></literal><operator pos:line="500" pos:column="71">)<pos:position pos:line="500" pos:column="72"/></operator></expr>)<pos:position pos:line="500" pos:column="73"/></condition><then pos:line="500" pos:column="73"> <block pos:line="500" pos:column="74">{
          <expr_stmt><expr><call><name pos:line="501" pos:column="11">DEBUGF<pos:position pos:line="501" pos:column="17"/></name><argument_list pos:line="501" pos:column="17">(<argument><expr><call><name pos:line="501" pos:column="18">infof<pos:position pos:line="501" pos:column="23"/></name><argument_list pos:line="501" pos:column="23">(<argument><expr><name pos:line="501" pos:column="24">data<pos:position pos:line="501" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="501" pos:column="30">"HTTP/2 found, allow multiplexing\n"<pos:position pos:line="501" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="501" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="501" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="501" pos:column="69"/></expr_stmt>

          <comment type="block" pos:line="503" pos:column="11">/* HTTP/2 cannot blacklist multiplexing since it is a core
             functionality of the protocol */</comment>
          <expr_stmt><expr><name><name pos:line="505" pos:column="11">conn<pos:position pos:line="505" pos:column="15"/></name><operator pos:line="505" pos:column="15">-&gt;<pos:position pos:line="505" pos:column="20"/></operator><name pos:line="505" pos:column="17">bundle<pos:position pos:line="505" pos:column="23"/></name><operator pos:line="505" pos:column="23">-&gt;<pos:position pos:line="505" pos:column="28"/></operator><name pos:line="505" pos:column="25">multiuse<pos:position pos:line="505" pos:column="33"/></name></name> <operator pos:line="505" pos:column="34">=<pos:position pos:line="505" pos:column="35"/></operator> <name pos:line="505" pos:column="36">BUNDLE_MULTIPLEX<pos:position pos:line="505" pos:column="52"/></name></expr>;<pos:position pos:line="505" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="506" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="507" pos:column="9">else <if pos:line="507" pos:column="14">if<condition pos:line="507" pos:column="16">(<expr><name><name pos:line="507" pos:column="17">conn<pos:position pos:line="507" pos:column="21"/></name><operator pos:line="507" pos:column="21">-&gt;<pos:position pos:line="507" pos:column="26"/></operator><name pos:line="507" pos:column="23">httpversion<pos:position pos:line="507" pos:column="34"/></name></name> <operator pos:line="507" pos:column="35">&gt;=<pos:position pos:line="507" pos:column="40"/></operator> <literal type="number" pos:line="507" pos:column="38">11<pos:position pos:line="507" pos:column="40"/></literal> <operator pos:line="507" pos:column="41">&amp;&amp;<pos:position pos:line="507" pos:column="51"/></operator>
                <operator pos:line="508" pos:column="17">!<pos:position pos:line="508" pos:column="18"/></operator><name><name pos:line="508" pos:column="18">conn<pos:position pos:line="508" pos:column="22"/></name><operator pos:line="508" pos:column="22">-&gt;<pos:position pos:line="508" pos:column="27"/></operator><name pos:line="508" pos:column="24">bits<pos:position pos:line="508" pos:column="28"/></name><operator pos:line="508" pos:column="28">.<pos:position pos:line="508" pos:column="29"/></operator><name pos:line="508" pos:column="29">close<pos:position pos:line="508" pos:column="34"/></name></name></expr>)<pos:position pos:line="508" pos:column="35"/></condition><then pos:line="508" pos:column="35"> <block pos:line="508" pos:column="36">{
          <comment type="block" pos:line="509" pos:column="11">/* If HTTP version is &gt;= 1.1 and connection is persistent
             server supports pipelining. */</comment>
          <expr_stmt><expr><call><name pos:line="511" pos:column="11">DEBUGF<pos:position pos:line="511" pos:column="17"/></name><argument_list pos:line="511" pos:column="17">(<argument><expr><call><name pos:line="511" pos:column="18">infof<pos:position pos:line="511" pos:column="23"/></name><argument_list pos:line="511" pos:column="23">(<argument><expr><name pos:line="511" pos:column="24">data<pos:position pos:line="511" pos:column="28"/></name></expr></argument>,
                       <argument><expr><literal type="string" pos:line="512" pos:column="24">"HTTP 1.1 or later with persistent connection, "<pos:position pos:line="512" pos:column="72"/></literal>
                       <literal type="string" pos:line="513" pos:column="24">"pipelining supported\n"<pos:position pos:line="513" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="513" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="513" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="513" pos:column="51"/></expr_stmt>
          <comment type="block" pos:line="514" pos:column="11">/* Activate pipelining if needed */</comment>
          <if pos:line="515" pos:column="11">if<condition pos:line="515" pos:column="13">(<expr><name><name pos:line="515" pos:column="14">conn<pos:position pos:line="515" pos:column="18"/></name><operator pos:line="515" pos:column="18">-&gt;<pos:position pos:line="515" pos:column="23"/></operator><name pos:line="515" pos:column="20">bundle<pos:position pos:line="515" pos:column="26"/></name></name></expr>)<pos:position pos:line="515" pos:column="27"/></condition><then pos:line="515" pos:column="27"> <block pos:line="515" pos:column="28">{
            <if pos:line="516" pos:column="13">if<condition pos:line="516" pos:column="15">(<expr><operator pos:line="516" pos:column="16">!<pos:position pos:line="516" pos:column="17"/></operator><call><name pos:line="516" pos:column="17">Curl_pipeline_site_blacklisted<pos:position pos:line="516" pos:column="47"/></name><argument_list pos:line="516" pos:column="47">(<argument><expr><name pos:line="516" pos:column="48">data<pos:position pos:line="516" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="516" pos:column="54">conn<pos:position pos:line="516" pos:column="58"/></name></expr></argument>)<pos:position pos:line="516" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="516" pos:column="60"/></condition><then pos:line="516" pos:column="60">
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="517" pos:column="15">conn<pos:position pos:line="517" pos:column="19"/></name><operator pos:line="517" pos:column="19">-&gt;<pos:position pos:line="517" pos:column="24"/></operator><name pos:line="517" pos:column="21">bundle<pos:position pos:line="517" pos:column="27"/></name><operator pos:line="517" pos:column="27">-&gt;<pos:position pos:line="517" pos:column="32"/></operator><name pos:line="517" pos:column="29">multiuse<pos:position pos:line="517" pos:column="37"/></name></name> <operator pos:line="517" pos:column="38">=<pos:position pos:line="517" pos:column="39"/></operator> <name pos:line="517" pos:column="40">BUNDLE_PIPELINING<pos:position pos:line="517" pos:column="57"/></name></expr>;<pos:position pos:line="517" pos:column="58"/></expr_stmt></block></then></if>
          }<pos:position pos:line="518" pos:column="12"/></block></then></if>
        }<pos:position pos:line="519" pos:column="10"/></block></then></if></elseif></if>

        <switch pos:line="521" pos:column="9">switch<condition pos:line="521" pos:column="15">(<expr><name><name pos:line="521" pos:column="16">k<pos:position pos:line="521" pos:column="17"/></name><operator pos:line="521" pos:column="17">-&gt;<pos:position pos:line="521" pos:column="22"/></operator><name pos:line="521" pos:column="19">httpcode<pos:position pos:line="521" pos:column="27"/></name></name></expr>)<pos:position pos:line="521" pos:column="28"/></condition> <block pos:line="521" pos:column="29">{
        <case pos:line="522" pos:column="9">case <expr><literal type="number" pos:line="522" pos:column="14">204<pos:position pos:line="522" pos:column="17"/></literal></expr>:<pos:position pos:line="522" pos:column="18"/></case>
          <comment type="block" pos:line="523" pos:column="11">/* (quote from RFC2616, section 10.2.5): The server has
           * fulfilled the request but does not need to return an
           * entity-body ... The 204 response MUST NOT include a
           * message-body, and thus is always terminated by the first
           * empty line after the header fields. */</comment>
          <comment type="block" pos:line="528" pos:column="11">/* FALLTHROUGH */</comment>
        <case pos:line="529" pos:column="9">case <expr><literal type="number" pos:line="529" pos:column="14">304<pos:position pos:line="529" pos:column="17"/></literal></expr>:<pos:position pos:line="529" pos:column="18"/></case>
          <comment type="block" pos:line="530" pos:column="11">/* (quote from RFC2616, section 10.3.5): The 304 response
           * MUST NOT contain a message-body, and thus is always
           * terminated by the first empty line after the header
           * fields.  */</comment>
          <if pos:line="534" pos:column="11">if<condition pos:line="534" pos:column="13">(<expr><name><name pos:line="534" pos:column="14">data<pos:position pos:line="534" pos:column="18"/></name><operator pos:line="534" pos:column="18">-&gt;<pos:position pos:line="534" pos:column="23"/></operator><name pos:line="534" pos:column="20">set<pos:position pos:line="534" pos:column="23"/></name><operator pos:line="534" pos:column="23">.<pos:position pos:line="534" pos:column="24"/></operator><name pos:line="534" pos:column="24">timecondition<pos:position pos:line="534" pos:column="37"/></name></name></expr>)<pos:position pos:line="534" pos:column="38"/></condition><then pos:line="534" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="535" pos:column="13">data<pos:position pos:line="535" pos:column="17"/></name><operator pos:line="535" pos:column="17">-&gt;<pos:position pos:line="535" pos:column="22"/></operator><name pos:line="535" pos:column="19">info<pos:position pos:line="535" pos:column="23"/></name><operator pos:line="535" pos:column="23">.<pos:position pos:line="535" pos:column="24"/></operator><name pos:line="535" pos:column="24">timecond<pos:position pos:line="535" pos:column="32"/></name></name> <operator pos:line="535" pos:column="33">=<pos:position pos:line="535" pos:column="34"/></operator> <name pos:line="535" pos:column="35">TRUE<pos:position pos:line="535" pos:column="39"/></name></expr>;<pos:position pos:line="535" pos:column="40"/></expr_stmt></block></then></if>
          <expr_stmt><expr><name><name pos:line="536" pos:column="11">k<pos:position pos:line="536" pos:column="12"/></name><operator pos:line="536" pos:column="12">-&gt;<pos:position pos:line="536" pos:column="17"/></operator><name pos:line="536" pos:column="14">size<pos:position pos:line="536" pos:column="18"/></name></name> <operator pos:line="536" pos:column="19">=<pos:position pos:line="536" pos:column="20"/></operator> <literal type="number" pos:line="536" pos:column="21">0<pos:position pos:line="536" pos:column="22"/></literal></expr>;<pos:position pos:line="536" pos:column="23"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="537" pos:column="11">k<pos:position pos:line="537" pos:column="12"/></name><operator pos:line="537" pos:column="12">-&gt;<pos:position pos:line="537" pos:column="17"/></operator><name pos:line="537" pos:column="14">maxdownload<pos:position pos:line="537" pos:column="25"/></name></name> <operator pos:line="537" pos:column="26">=<pos:position pos:line="537" pos:column="27"/></operator> <literal type="number" pos:line="537" pos:column="28">0<pos:position pos:line="537" pos:column="29"/></literal></expr>;<pos:position pos:line="537" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="538" pos:column="11">k<pos:position pos:line="538" pos:column="12"/></name><operator pos:line="538" pos:column="12">-&gt;<pos:position pos:line="538" pos:column="17"/></operator><name pos:line="538" pos:column="14">ignorecl<pos:position pos:line="538" pos:column="22"/></name></name> <operator pos:line="538" pos:column="23">=<pos:position pos:line="538" pos:column="24"/></operator> <name pos:line="538" pos:column="25">TRUE<pos:position pos:line="538" pos:column="29"/></name></expr>;<pos:position pos:line="538" pos:column="30"/></expr_stmt> <comment type="block" pos:line="538" pos:column="31">/* ignore Content-Length headers */</comment>
          <break pos:line="539" pos:column="11">break;<pos:position pos:line="539" pos:column="17"/></break>
        <default pos:line="540" pos:column="9">default:<pos:position pos:line="540" pos:column="17"/></default>
          <comment type="block" pos:line="541" pos:column="11">/* nothing */</comment>
          <break pos:line="542" pos:column="11">break;<pos:position pos:line="542" pos:column="17"/></break>
        }<pos:position pos:line="543" pos:column="10"/></block></switch>
      }<pos:position pos:line="544" pos:column="8"/></block></then>
      <else pos:line="545" pos:column="7">else <block pos:line="545" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="546" pos:column="9">k<pos:position pos:line="546" pos:column="10"/></name><operator pos:line="546" pos:column="10">-&gt;<pos:position pos:line="546" pos:column="15"/></operator><name pos:line="546" pos:column="12">header<pos:position pos:line="546" pos:column="18"/></name></name> <operator pos:line="546" pos:column="19">=<pos:position pos:line="546" pos:column="20"/></operator> <name pos:line="546" pos:column="21">FALSE<pos:position pos:line="546" pos:column="26"/></name></expr>;<pos:position pos:line="546" pos:column="27"/></expr_stmt>   <comment type="block" pos:line="546" pos:column="30">/* this is not a header line */</comment>
        <break pos:line="547" pos:column="9">break;<pos:position pos:line="547" pos:column="15"/></break>
      }<pos:position pos:line="548" pos:column="8"/></block></else></if>
    }<pos:position pos:line="549" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="551" pos:column="5">result<pos:position pos:line="551" pos:column="11"/></name> <operator pos:line="551" pos:column="12">=<pos:position pos:line="551" pos:column="13"/></operator> <call><name pos:line="551" pos:column="14">Curl_convert_from_network<pos:position pos:line="551" pos:column="39"/></name><argument_list pos:line="551" pos:column="39">(<argument><expr><name pos:line="551" pos:column="40">data<pos:position pos:line="551" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="551" pos:column="46">k<pos:position pos:line="551" pos:column="47"/></name><operator pos:line="551" pos:column="47">-&gt;<pos:position pos:line="551" pos:column="52"/></operator><name pos:line="551" pos:column="49">p<pos:position pos:line="551" pos:column="50"/></name></name></expr></argument>, <argument><expr><call><name pos:line="551" pos:column="52">strlen<pos:position pos:line="551" pos:column="58"/></name><argument_list pos:line="551" pos:column="58">(<argument><expr><name><name pos:line="551" pos:column="59">k<pos:position pos:line="551" pos:column="60"/></name><operator pos:line="551" pos:column="60">-&gt;<pos:position pos:line="551" pos:column="65"/></operator><name pos:line="551" pos:column="62">p<pos:position pos:line="551" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="551" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="551" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="551" pos:column="66"/></expr_stmt>
    <comment type="block" pos:line="552" pos:column="5">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
    <if pos:line="553" pos:column="5">if<condition pos:line="553" pos:column="7">(<expr><name pos:line="553" pos:column="8">result<pos:position pos:line="553" pos:column="14"/></name></expr>)<pos:position pos:line="553" pos:column="15"/></condition><then pos:line="553" pos:column="15">
      <block type="pseudo"><return pos:line="554" pos:column="7">return <expr><name pos:line="554" pos:column="14">result<pos:position pos:line="554" pos:column="20"/></name></expr>;<pos:position pos:line="554" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="556" pos:column="5">/* Check for Content-Length: header lines to get size */</comment>
    <if pos:line="557" pos:column="5">if<condition pos:line="557" pos:column="7">(<expr><operator pos:line="557" pos:column="8">!<pos:position pos:line="557" pos:column="9"/></operator><name><name pos:line="557" pos:column="9">k<pos:position pos:line="557" pos:column="10"/></name><operator pos:line="557" pos:column="10">-&gt;<pos:position pos:line="557" pos:column="15"/></operator><name pos:line="557" pos:column="12">ignorecl<pos:position pos:line="557" pos:column="20"/></name></name> <operator pos:line="557" pos:column="21">&amp;&amp;<pos:position pos:line="557" pos:column="31"/></operator> <operator pos:line="557" pos:column="24">!<pos:position pos:line="557" pos:column="25"/></operator><name><name pos:line="557" pos:column="25">data<pos:position pos:line="557" pos:column="29"/></name><operator pos:line="557" pos:column="29">-&gt;<pos:position pos:line="557" pos:column="34"/></operator><name pos:line="557" pos:column="31">set<pos:position pos:line="557" pos:column="34"/></name><operator pos:line="557" pos:column="34">.<pos:position pos:line="557" pos:column="35"/></operator><name pos:line="557" pos:column="35">ignorecl<pos:position pos:line="557" pos:column="43"/></name></name> <operator pos:line="557" pos:column="44">&amp;&amp;<pos:position pos:line="557" pos:column="54"/></operator>
       <call><name pos:line="558" pos:column="8">checkprefix<pos:position pos:line="558" pos:column="19"/></name><argument_list pos:line="558" pos:column="19">(<argument><expr><literal type="string" pos:line="558" pos:column="20">"Content-Length:"<pos:position pos:line="558" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="558" pos:column="39">k<pos:position pos:line="558" pos:column="40"/></name><operator pos:line="558" pos:column="40">-&gt;<pos:position pos:line="558" pos:column="45"/></operator><name pos:line="558" pos:column="42">p<pos:position pos:line="558" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="558" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="558" pos:column="45"/></condition><then pos:line="558" pos:column="45"> <block pos:line="558" pos:column="46">{
      <decl_stmt><decl><type><name pos:line="559" pos:column="7">curl_off_t<pos:position pos:line="559" pos:column="17"/></name></type> <name pos:line="559" pos:column="18">contentlength<pos:position pos:line="559" pos:column="31"/></name></decl>;<pos:position pos:line="559" pos:column="32"/></decl_stmt>
      <if pos:line="560" pos:column="7">if<condition pos:line="560" pos:column="9">(<expr><operator pos:line="560" pos:column="10">!<pos:position pos:line="560" pos:column="11"/></operator><call><name pos:line="560" pos:column="11">curlx_strtoofft<pos:position pos:line="560" pos:column="26"/></name><argument_list pos:line="560" pos:column="26">(<argument><expr><name><name pos:line="560" pos:column="27">k<pos:position pos:line="560" pos:column="28"/></name><operator pos:line="560" pos:column="28">-&gt;<pos:position pos:line="560" pos:column="33"/></operator><name pos:line="560" pos:column="30">p<pos:position pos:line="560" pos:column="31"/></name></name> <operator pos:line="560" pos:column="32">+<pos:position pos:line="560" pos:column="33"/></operator> <literal type="number" pos:line="560" pos:column="34">15<pos:position pos:line="560" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="560" pos:column="38">NULL<pos:position pos:line="560" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="560" pos:column="44">10<pos:position pos:line="560" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="560" pos:column="48">&amp;<pos:position pos:line="560" pos:column="53"/></operator><name pos:line="560" pos:column="49">contentlength<pos:position pos:line="560" pos:column="62"/></name></expr></argument>)<pos:position pos:line="560" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="560" pos:column="64"/></condition><then pos:line="560" pos:column="64"> <block pos:line="560" pos:column="65">{
        <if pos:line="561" pos:column="9">if<condition pos:line="561" pos:column="11">(<expr><name><name pos:line="561" pos:column="12">data<pos:position pos:line="561" pos:column="16"/></name><operator pos:line="561" pos:column="16">-&gt;<pos:position pos:line="561" pos:column="21"/></operator><name pos:line="561" pos:column="18">set<pos:position pos:line="561" pos:column="21"/></name><operator pos:line="561" pos:column="21">.<pos:position pos:line="561" pos:column="22"/></operator><name pos:line="561" pos:column="22">max_filesize<pos:position pos:line="561" pos:column="34"/></name></name> <operator pos:line="561" pos:column="35">&amp;&amp;<pos:position pos:line="561" pos:column="45"/></operator>
           <name pos:line="562" pos:column="12">contentlength<pos:position pos:line="562" pos:column="25"/></name> <operator pos:line="562" pos:column="26">&gt;<pos:position pos:line="562" pos:column="30"/></operator> <name><name pos:line="562" pos:column="28">data<pos:position pos:line="562" pos:column="32"/></name><operator pos:line="562" pos:column="32">-&gt;<pos:position pos:line="562" pos:column="37"/></operator><name pos:line="562" pos:column="34">set<pos:position pos:line="562" pos:column="37"/></name><operator pos:line="562" pos:column="37">.<pos:position pos:line="562" pos:column="38"/></operator><name pos:line="562" pos:column="38">max_filesize<pos:position pos:line="562" pos:column="50"/></name></name></expr>)<pos:position pos:line="562" pos:column="51"/></condition><then pos:line="562" pos:column="51"> <block pos:line="562" pos:column="52">{
          <expr_stmt><expr><call><name pos:line="563" pos:column="11">failf<pos:position pos:line="563" pos:column="16"/></name><argument_list pos:line="563" pos:column="16">(<argument><expr><name pos:line="563" pos:column="17">data<pos:position pos:line="563" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="563" pos:column="23">"Maximum file size exceeded"<pos:position pos:line="563" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="563" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="563" pos:column="53"/></expr_stmt>
          <return pos:line="564" pos:column="11">return <expr><name pos:line="564" pos:column="18">CURLE_FILESIZE_EXCEEDED<pos:position pos:line="564" pos:column="41"/></name></expr>;<pos:position pos:line="564" pos:column="42"/></return>
        }<pos:position pos:line="565" pos:column="10"/></block></then></if>
        <if pos:line="566" pos:column="9">if<condition pos:line="566" pos:column="11">(<expr><name pos:line="566" pos:column="12">contentlength<pos:position pos:line="566" pos:column="25"/></name> <operator pos:line="566" pos:column="26">&gt;=<pos:position pos:line="566" pos:column="31"/></operator> <literal type="number" pos:line="566" pos:column="29">0<pos:position pos:line="566" pos:column="30"/></literal></expr>)<pos:position pos:line="566" pos:column="31"/></condition><then pos:line="566" pos:column="31"> <block pos:line="566" pos:column="32">{
          <expr_stmt><expr><name><name pos:line="567" pos:column="11">k<pos:position pos:line="567" pos:column="12"/></name><operator pos:line="567" pos:column="12">-&gt;<pos:position pos:line="567" pos:column="17"/></operator><name pos:line="567" pos:column="14">size<pos:position pos:line="567" pos:column="18"/></name></name> <operator pos:line="567" pos:column="19">=<pos:position pos:line="567" pos:column="20"/></operator> <name pos:line="567" pos:column="21">contentlength<pos:position pos:line="567" pos:column="34"/></name></expr>;<pos:position pos:line="567" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="568" pos:column="11">k<pos:position pos:line="568" pos:column="12"/></name><operator pos:line="568" pos:column="12">-&gt;<pos:position pos:line="568" pos:column="17"/></operator><name pos:line="568" pos:column="14">maxdownload<pos:position pos:line="568" pos:column="25"/></name></name> <operator pos:line="568" pos:column="26">=<pos:position pos:line="568" pos:column="27"/></operator> <name><name pos:line="568" pos:column="28">k<pos:position pos:line="568" pos:column="29"/></name><operator pos:line="568" pos:column="29">-&gt;<pos:position pos:line="568" pos:column="34"/></operator><name pos:line="568" pos:column="31">size<pos:position pos:line="568" pos:column="35"/></name></name></expr>;<pos:position pos:line="568" pos:column="36"/></expr_stmt>
          <comment type="block" pos:line="569" pos:column="11">/* we set the progress download size already at this point
             just to make it easier for apps/callbacks to extract this
             info as soon as possible */</comment>
          <expr_stmt><expr><call><name pos:line="572" pos:column="11">Curl_pgrsSetDownloadSize<pos:position pos:line="572" pos:column="35"/></name><argument_list pos:line="572" pos:column="35">(<argument><expr><name pos:line="572" pos:column="36">data<pos:position pos:line="572" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="572" pos:column="42">k<pos:position pos:line="572" pos:column="43"/></name><operator pos:line="572" pos:column="43">-&gt;<pos:position pos:line="572" pos:column="48"/></operator><name pos:line="572" pos:column="45">size<pos:position pos:line="572" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="572" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="572" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="573" pos:column="10"/></block></then>
        <else pos:line="574" pos:column="9">else <block pos:line="574" pos:column="14">{
          <comment type="block" pos:line="575" pos:column="11">/* Negative Content-Length is really odd, and we know it
             happens for example when older Apache servers send large
             files */</comment>
          <expr_stmt><expr><call><name pos:line="578" pos:column="11">streamclose<pos:position pos:line="578" pos:column="22"/></name><argument_list pos:line="578" pos:column="22">(<argument><expr><name pos:line="578" pos:column="23">conn<pos:position pos:line="578" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="578" pos:column="29">"negative content-length"<pos:position pos:line="578" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="578" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="578" pos:column="56"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="579" pos:column="11">infof<pos:position pos:line="579" pos:column="16"/></name><argument_list pos:line="579" pos:column="16">(<argument><expr><name pos:line="579" pos:column="17">data<pos:position pos:line="579" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="579" pos:column="23">"Negative content-length: %"<pos:position pos:line="579" pos:column="51"/></literal> <name pos:line="579" pos:column="52">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="579" pos:column="74"/></name>
                <literal type="string" pos:line="580" pos:column="17">", closing after transfer\n"<pos:position pos:line="580" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="580" pos:column="47">contentlength<pos:position pos:line="580" pos:column="60"/></name></expr></argument>)<pos:position pos:line="580" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="580" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="581" pos:column="10"/></block></else></if>
      }<pos:position pos:line="582" pos:column="8"/></block></then>
      <else pos:line="583" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="584" pos:column="9">infof<pos:position pos:line="584" pos:column="14"/></name><argument_list pos:line="584" pos:column="14">(<argument><expr><name pos:line="584" pos:column="15">data<pos:position pos:line="584" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="584" pos:column="21">"Illegal Content-Length: header\n"<pos:position pos:line="584" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="584" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="584" pos:column="57"/></expr_stmt></block></else></if>
    }<pos:position pos:line="585" pos:column="6"/></block></then>
    <comment type="block" pos:line="586" pos:column="5">/* check for Content-Type: header lines to get the MIME-type */</comment>
    <elseif pos:line="587" pos:column="5">else <if pos:line="587" pos:column="10">if<condition pos:line="587" pos:column="12">(<expr><call><name pos:line="587" pos:column="13">checkprefix<pos:position pos:line="587" pos:column="24"/></name><argument_list pos:line="587" pos:column="24">(<argument><expr><literal type="string" pos:line="587" pos:column="25">"Content-Type:"<pos:position pos:line="587" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="587" pos:column="42">k<pos:position pos:line="587" pos:column="43"/></name><operator pos:line="587" pos:column="43">-&gt;<pos:position pos:line="587" pos:column="48"/></operator><name pos:line="587" pos:column="45">p<pos:position pos:line="587" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="587" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="587" pos:column="48"/></condition><then pos:line="587" pos:column="48"> <block pos:line="587" pos:column="49">{
      <decl_stmt><decl><type><name pos:line="588" pos:column="7">char<pos:position pos:line="588" pos:column="11"/></name> <modifier pos:line="588" pos:column="12">*<pos:position pos:line="588" pos:column="13"/></modifier></type><name pos:line="588" pos:column="13">contenttype<pos:position pos:line="588" pos:column="24"/></name> <init pos:line="588" pos:column="25">= <expr><call><name pos:line="588" pos:column="27">Curl_copy_header_value<pos:position pos:line="588" pos:column="49"/></name><argument_list pos:line="588" pos:column="49">(<argument><expr><name><name pos:line="588" pos:column="50">k<pos:position pos:line="588" pos:column="51"/></name><operator pos:line="588" pos:column="51">-&gt;<pos:position pos:line="588" pos:column="56"/></operator><name pos:line="588" pos:column="53">p<pos:position pos:line="588" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="588" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="588" pos:column="56"/></decl_stmt>
      <if pos:line="589" pos:column="7">if<condition pos:line="589" pos:column="9">(<expr><operator pos:line="589" pos:column="10">!<pos:position pos:line="589" pos:column="11"/></operator><name pos:line="589" pos:column="11">contenttype<pos:position pos:line="589" pos:column="22"/></name></expr>)<pos:position pos:line="589" pos:column="23"/></condition><then pos:line="589" pos:column="23">
        <block type="pseudo"><return pos:line="590" pos:column="9">return <expr><name pos:line="590" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="590" pos:column="35"/></name></expr>;<pos:position pos:line="590" pos:column="36"/></return></block></then></if>
      <if pos:line="591" pos:column="7">if<condition pos:line="591" pos:column="9">(<expr><operator pos:line="591" pos:column="10">!<pos:position pos:line="591" pos:column="11"/></operator><operator pos:line="591" pos:column="11">*<pos:position pos:line="591" pos:column="12"/></operator><name pos:line="591" pos:column="12">contenttype<pos:position pos:line="591" pos:column="23"/></name></expr>)<pos:position pos:line="591" pos:column="24"/></condition><then pos:line="591" pos:column="24">
        <comment type="block" pos:line="592" pos:column="9">/* ignore empty data */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="593" pos:column="9">free<pos:position pos:line="593" pos:column="13"/></name><argument_list pos:line="593" pos:column="13">(<argument><expr><name pos:line="593" pos:column="14">contenttype<pos:position pos:line="593" pos:column="25"/></name></expr></argument>)<pos:position pos:line="593" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="593" pos:column="27"/></expr_stmt></block></then>
      <else pos:line="594" pos:column="7">else <block pos:line="594" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="595" pos:column="9">Curl_safefree<pos:position pos:line="595" pos:column="22"/></name><argument_list pos:line="595" pos:column="22">(<argument><expr><name><name pos:line="595" pos:column="23">data<pos:position pos:line="595" pos:column="27"/></name><operator pos:line="595" pos:column="27">-&gt;<pos:position pos:line="595" pos:column="32"/></operator><name pos:line="595" pos:column="29">info<pos:position pos:line="595" pos:column="33"/></name><operator pos:line="595" pos:column="33">.<pos:position pos:line="595" pos:column="34"/></operator><name pos:line="595" pos:column="34">contenttype<pos:position pos:line="595" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="595" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="595" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="596" pos:column="9">data<pos:position pos:line="596" pos:column="13"/></name><operator pos:line="596" pos:column="13">-&gt;<pos:position pos:line="596" pos:column="18"/></operator><name pos:line="596" pos:column="15">info<pos:position pos:line="596" pos:column="19"/></name><operator pos:line="596" pos:column="19">.<pos:position pos:line="596" pos:column="20"/></operator><name pos:line="596" pos:column="20">contenttype<pos:position pos:line="596" pos:column="31"/></name></name> <operator pos:line="596" pos:column="32">=<pos:position pos:line="596" pos:column="33"/></operator> <name pos:line="596" pos:column="34">contenttype<pos:position pos:line="596" pos:column="45"/></name></expr>;<pos:position pos:line="596" pos:column="46"/></expr_stmt>
      }<pos:position pos:line="597" pos:column="8"/></block></else></if>
    }<pos:position pos:line="598" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="599" pos:column="5">else <if pos:line="599" pos:column="10">if<condition pos:line="599" pos:column="12">(<expr><call><name pos:line="599" pos:column="13">checkprefix<pos:position pos:line="599" pos:column="24"/></name><argument_list pos:line="599" pos:column="24">(<argument><expr><literal type="string" pos:line="599" pos:column="25">"Server:"<pos:position pos:line="599" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="599" pos:column="36">k<pos:position pos:line="599" pos:column="37"/></name><operator pos:line="599" pos:column="37">-&gt;<pos:position pos:line="599" pos:column="42"/></operator><name pos:line="599" pos:column="39">p<pos:position pos:line="599" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="599" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="599" pos:column="42"/></condition><then pos:line="599" pos:column="42"> <block pos:line="599" pos:column="43">{
      <if pos:line="600" pos:column="7">if<condition pos:line="600" pos:column="9">(<expr><name><name pos:line="600" pos:column="10">conn<pos:position pos:line="600" pos:column="14"/></name><operator pos:line="600" pos:column="14">-&gt;<pos:position pos:line="600" pos:column="19"/></operator><name pos:line="600" pos:column="16">httpversion<pos:position pos:line="600" pos:column="27"/></name></name> <operator pos:line="600" pos:column="28">&lt;<pos:position pos:line="600" pos:column="32"/></operator> <literal type="number" pos:line="600" pos:column="30">20<pos:position pos:line="600" pos:column="32"/></literal></expr>)<pos:position pos:line="600" pos:column="33"/></condition><then pos:line="600" pos:column="33"> <block pos:line="600" pos:column="34">{
        <comment type="block" pos:line="601" pos:column="9">/* only do this for non-h2 servers */</comment>
        <decl_stmt><decl><type><name pos:line="602" pos:column="9">char<pos:position pos:line="602" pos:column="13"/></name> <modifier pos:line="602" pos:column="14">*<pos:position pos:line="602" pos:column="15"/></modifier></type><name pos:line="602" pos:column="15">server_name<pos:position pos:line="602" pos:column="26"/></name> <init pos:line="602" pos:column="27">= <expr><call><name pos:line="602" pos:column="29">Curl_copy_header_value<pos:position pos:line="602" pos:column="51"/></name><argument_list pos:line="602" pos:column="51">(<argument><expr><name><name pos:line="602" pos:column="52">k<pos:position pos:line="602" pos:column="53"/></name><operator pos:line="602" pos:column="53">-&gt;<pos:position pos:line="602" pos:column="58"/></operator><name pos:line="602" pos:column="55">p<pos:position pos:line="602" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="602" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="602" pos:column="58"/></decl_stmt>

        <comment type="block" pos:line="604" pos:column="9">/* Turn off pipelining if the server version is blacklisted  */</comment>
        <if pos:line="605" pos:column="9">if<condition pos:line="605" pos:column="11">(<expr><name><name pos:line="605" pos:column="12">conn<pos:position pos:line="605" pos:column="16"/></name><operator pos:line="605" pos:column="16">-&gt;<pos:position pos:line="605" pos:column="21"/></operator><name pos:line="605" pos:column="18">bundle<pos:position pos:line="605" pos:column="24"/></name></name> <operator pos:line="605" pos:column="25">&amp;&amp;<pos:position pos:line="605" pos:column="35"/></operator> <operator pos:line="605" pos:column="28">(<pos:position pos:line="605" pos:column="29"/></operator><name><name pos:line="605" pos:column="29">conn<pos:position pos:line="605" pos:column="33"/></name><operator pos:line="605" pos:column="33">-&gt;<pos:position pos:line="605" pos:column="38"/></operator><name pos:line="605" pos:column="35">bundle<pos:position pos:line="605" pos:column="41"/></name><operator pos:line="605" pos:column="41">-&gt;<pos:position pos:line="605" pos:column="46"/></operator><name pos:line="605" pos:column="43">multiuse<pos:position pos:line="605" pos:column="51"/></name></name> <operator pos:line="605" pos:column="52">==<pos:position pos:line="605" pos:column="54"/></operator> <name pos:line="605" pos:column="55">BUNDLE_PIPELINING<pos:position pos:line="605" pos:column="72"/></name><operator pos:line="605" pos:column="72">)<pos:position pos:line="605" pos:column="73"/></operator></expr>)<pos:position pos:line="605" pos:column="74"/></condition><then pos:line="605" pos:column="74"> <block pos:line="605" pos:column="75">{
          <if pos:line="606" pos:column="11">if<condition pos:line="606" pos:column="13">(<expr><call><name pos:line="606" pos:column="14">Curl_pipeline_server_blacklisted<pos:position pos:line="606" pos:column="46"/></name><argument_list pos:line="606" pos:column="46">(<argument><expr><name pos:line="606" pos:column="47">data<pos:position pos:line="606" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="606" pos:column="53">server_name<pos:position pos:line="606" pos:column="64"/></name></expr></argument>)<pos:position pos:line="606" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="606" pos:column="66"/></condition><then pos:line="606" pos:column="66">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="607" pos:column="13">conn<pos:position pos:line="607" pos:column="17"/></name><operator pos:line="607" pos:column="17">-&gt;<pos:position pos:line="607" pos:column="22"/></operator><name pos:line="607" pos:column="19">bundle<pos:position pos:line="607" pos:column="25"/></name><operator pos:line="607" pos:column="25">-&gt;<pos:position pos:line="607" pos:column="30"/></operator><name pos:line="607" pos:column="27">multiuse<pos:position pos:line="607" pos:column="35"/></name></name> <operator pos:line="607" pos:column="36">=<pos:position pos:line="607" pos:column="37"/></operator> <name pos:line="607" pos:column="38">BUNDLE_NO_MULTIUSE<pos:position pos:line="607" pos:column="56"/></name></expr>;<pos:position pos:line="607" pos:column="57"/></expr_stmt></block></then></if>
        }<pos:position pos:line="608" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="609" pos:column="9">free<pos:position pos:line="609" pos:column="13"/></name><argument_list pos:line="609" pos:column="13">(<argument><expr><name pos:line="609" pos:column="14">server_name<pos:position pos:line="609" pos:column="25"/></name></expr></argument>)<pos:position pos:line="609" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="609" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="610" pos:column="8"/></block></then></if>
    }<pos:position pos:line="611" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="612" pos:column="5">else <if pos:line="612" pos:column="10">if<condition pos:line="612" pos:column="12">(<expr><operator pos:line="612" pos:column="13">(<pos:position pos:line="612" pos:column="14"/></operator><name><name pos:line="612" pos:column="14">conn<pos:position pos:line="612" pos:column="18"/></name><operator pos:line="612" pos:column="18">-&gt;<pos:position pos:line="612" pos:column="23"/></operator><name pos:line="612" pos:column="20">httpversion<pos:position pos:line="612" pos:column="31"/></name></name> <operator pos:line="612" pos:column="32">==<pos:position pos:line="612" pos:column="34"/></operator> <literal type="number" pos:line="612" pos:column="35">10<pos:position pos:line="612" pos:column="37"/></literal><operator pos:line="612" pos:column="37">)<pos:position pos:line="612" pos:column="38"/></operator> <operator pos:line="612" pos:column="39">&amp;&amp;<pos:position pos:line="612" pos:column="49"/></operator>
            <name><name pos:line="613" pos:column="13">conn<pos:position pos:line="613" pos:column="17"/></name><operator pos:line="613" pos:column="17">-&gt;<pos:position pos:line="613" pos:column="22"/></operator><name pos:line="613" pos:column="19">bits<pos:position pos:line="613" pos:column="23"/></name><operator pos:line="613" pos:column="23">.<pos:position pos:line="613" pos:column="24"/></operator><name pos:line="613" pos:column="24">httpproxy<pos:position pos:line="613" pos:column="33"/></name></name> <operator pos:line="613" pos:column="34">&amp;&amp;<pos:position pos:line="613" pos:column="44"/></operator>
            <call><name pos:line="614" pos:column="13">Curl_compareheader<pos:position pos:line="614" pos:column="31"/></name><argument_list pos:line="614" pos:column="31">(<argument><expr><name><name pos:line="614" pos:column="32">k<pos:position pos:line="614" pos:column="33"/></name><operator pos:line="614" pos:column="33">-&gt;<pos:position pos:line="614" pos:column="38"/></operator><name pos:line="614" pos:column="35">p<pos:position pos:line="614" pos:column="36"/></name></name></expr></argument>,
                               <argument><expr><literal type="string" pos:line="615" pos:column="32">"Proxy-Connection:"<pos:position pos:line="615" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="615" pos:column="53">"keep-alive"<pos:position pos:line="615" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="615" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="615" pos:column="67"/></condition><then pos:line="615" pos:column="67"> <block pos:line="615" pos:column="68">{
      <comment type="block" pos:line="616" pos:column="7">/*
       * When a HTTP/1.0 reply comes when using a proxy, the
       * 'Proxy-Connection: keep-alive' line tells us the
       * connection will be kept alive for our pleasure.
       * Default action for 1.0 is to close.
       */</comment>
      <expr_stmt><expr><call><name pos:line="622" pos:column="7">connkeep<pos:position pos:line="622" pos:column="15"/></name><argument_list pos:line="622" pos:column="15">(<argument><expr><name pos:line="622" pos:column="16">conn<pos:position pos:line="622" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="622" pos:column="22">"Proxy-Connection keep-alive"<pos:position pos:line="622" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="622" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="622" pos:column="53"/></expr_stmt> <comment type="block" pos:line="622" pos:column="54">/* don't close */</comment>
      <expr_stmt><expr><call><name pos:line="623" pos:column="7">infof<pos:position pos:line="623" pos:column="12"/></name><argument_list pos:line="623" pos:column="12">(<argument><expr><name pos:line="623" pos:column="13">data<pos:position pos:line="623" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="623" pos:column="19">"HTTP/1.0 proxy connection set to keep alive!\n"<pos:position pos:line="623" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="623" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="623" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="624" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="625" pos:column="5">else <if pos:line="625" pos:column="10">if<condition pos:line="625" pos:column="12">(<expr><operator pos:line="625" pos:column="13">(<pos:position pos:line="625" pos:column="14"/></operator><name><name pos:line="625" pos:column="14">conn<pos:position pos:line="625" pos:column="18"/></name><operator pos:line="625" pos:column="18">-&gt;<pos:position pos:line="625" pos:column="23"/></operator><name pos:line="625" pos:column="20">httpversion<pos:position pos:line="625" pos:column="31"/></name></name> <operator pos:line="625" pos:column="32">==<pos:position pos:line="625" pos:column="34"/></operator> <literal type="number" pos:line="625" pos:column="35">11<pos:position pos:line="625" pos:column="37"/></literal><operator pos:line="625" pos:column="37">)<pos:position pos:line="625" pos:column="38"/></operator> <operator pos:line="625" pos:column="39">&amp;&amp;<pos:position pos:line="625" pos:column="49"/></operator>
            <name><name pos:line="626" pos:column="13">conn<pos:position pos:line="626" pos:column="17"/></name><operator pos:line="626" pos:column="17">-&gt;<pos:position pos:line="626" pos:column="22"/></operator><name pos:line="626" pos:column="19">bits<pos:position pos:line="626" pos:column="23"/></name><operator pos:line="626" pos:column="23">.<pos:position pos:line="626" pos:column="24"/></operator><name pos:line="626" pos:column="24">httpproxy<pos:position pos:line="626" pos:column="33"/></name></name> <operator pos:line="626" pos:column="34">&amp;&amp;<pos:position pos:line="626" pos:column="44"/></operator>
            <call><name pos:line="627" pos:column="13">Curl_compareheader<pos:position pos:line="627" pos:column="31"/></name><argument_list pos:line="627" pos:column="31">(<argument><expr><name><name pos:line="627" pos:column="32">k<pos:position pos:line="627" pos:column="33"/></name><operator pos:line="627" pos:column="33">-&gt;<pos:position pos:line="627" pos:column="38"/></operator><name pos:line="627" pos:column="35">p<pos:position pos:line="627" pos:column="36"/></name></name></expr></argument>,
                               <argument><expr><literal type="string" pos:line="628" pos:column="32">"Proxy-Connection:"<pos:position pos:line="628" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="628" pos:column="53">"close"<pos:position pos:line="628" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="628" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="628" pos:column="62"/></condition><then pos:line="628" pos:column="62"> <block pos:line="628" pos:column="63">{
      <comment type="block" pos:line="629" pos:column="7">/*
       * We get a HTTP/1.1 response from a proxy and it says it'll
       * close down after this transfer.
       */</comment>
      <expr_stmt><expr><call><name pos:line="633" pos:column="7">connclose<pos:position pos:line="633" pos:column="16"/></name><argument_list pos:line="633" pos:column="16">(<argument><expr><name pos:line="633" pos:column="17">conn<pos:position pos:line="633" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="633" pos:column="23">"Proxy-Connection: asked to close after done"<pos:position pos:line="633" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="633" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="633" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="634" pos:column="7">infof<pos:position pos:line="634" pos:column="12"/></name><argument_list pos:line="634" pos:column="12">(<argument><expr><name pos:line="634" pos:column="13">data<pos:position pos:line="634" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="634" pos:column="19">"HTTP/1.1 proxy connection set close!\n"<pos:position pos:line="634" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="634" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="634" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="635" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="636" pos:column="5">else <if pos:line="636" pos:column="10">if<condition pos:line="636" pos:column="12">(<expr><operator pos:line="636" pos:column="13">(<pos:position pos:line="636" pos:column="14"/></operator><name><name pos:line="636" pos:column="14">conn<pos:position pos:line="636" pos:column="18"/></name><operator pos:line="636" pos:column="18">-&gt;<pos:position pos:line="636" pos:column="23"/></operator><name pos:line="636" pos:column="20">httpversion<pos:position pos:line="636" pos:column="31"/></name></name> <operator pos:line="636" pos:column="32">==<pos:position pos:line="636" pos:column="34"/></operator> <literal type="number" pos:line="636" pos:column="35">10<pos:position pos:line="636" pos:column="37"/></literal><operator pos:line="636" pos:column="37">)<pos:position pos:line="636" pos:column="38"/></operator> <operator pos:line="636" pos:column="39">&amp;&amp;<pos:position pos:line="636" pos:column="49"/></operator>
            <call><name pos:line="637" pos:column="13">Curl_compareheader<pos:position pos:line="637" pos:column="31"/></name><argument_list pos:line="637" pos:column="31">(<argument><expr><name><name pos:line="637" pos:column="32">k<pos:position pos:line="637" pos:column="33"/></name><operator pos:line="637" pos:column="33">-&gt;<pos:position pos:line="637" pos:column="38"/></operator><name pos:line="637" pos:column="35">p<pos:position pos:line="637" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="637" pos:column="38">"Connection:"<pos:position pos:line="637" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="637" pos:column="53">"keep-alive"<pos:position pos:line="637" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="637" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="637" pos:column="67"/></condition><then pos:line="637" pos:column="67"> <block pos:line="637" pos:column="68">{
      <comment type="block" pos:line="638" pos:column="7">/*
       * A HTTP/1.0 reply with the 'Connection: keep-alive' line
       * tells us the connection will be kept alive for our
       * pleasure.  Default action for 1.0 is to close.
       *
       * [RFC2068, section 19.7.1] */</comment>
      <expr_stmt><expr><call><name pos:line="644" pos:column="7">connkeep<pos:position pos:line="644" pos:column="15"/></name><argument_list pos:line="644" pos:column="15">(<argument><expr><name pos:line="644" pos:column="16">conn<pos:position pos:line="644" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="644" pos:column="22">"Connection keep-alive"<pos:position pos:line="644" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="644" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="644" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="645" pos:column="7">infof<pos:position pos:line="645" pos:column="12"/></name><argument_list pos:line="645" pos:column="12">(<argument><expr><name pos:line="645" pos:column="13">data<pos:position pos:line="645" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="645" pos:column="19">"HTTP/1.0 connection set to keep alive!\n"<pos:position pos:line="645" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="645" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="645" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="646" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="647" pos:column="5">else <if pos:line="647" pos:column="10">if<condition pos:line="647" pos:column="12">(<expr><call><name pos:line="647" pos:column="13">Curl_compareheader<pos:position pos:line="647" pos:column="31"/></name><argument_list pos:line="647" pos:column="31">(<argument><expr><name><name pos:line="647" pos:column="32">k<pos:position pos:line="647" pos:column="33"/></name><operator pos:line="647" pos:column="33">-&gt;<pos:position pos:line="647" pos:column="38"/></operator><name pos:line="647" pos:column="35">p<pos:position pos:line="647" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="647" pos:column="38">"Connection:"<pos:position pos:line="647" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="647" pos:column="53">"close"<pos:position pos:line="647" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="647" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="647" pos:column="62"/></condition><then pos:line="647" pos:column="62"> <block pos:line="647" pos:column="63">{
      <comment type="block" pos:line="648" pos:column="7">/*
       * [RFC 2616, section 8.1.2.1]
       * "Connection: close" is HTTP/1.1 language and means that
       * the connection will close when this request has been
       * served.
       */</comment>
      <expr_stmt><expr><call><name pos:line="654" pos:column="7">streamclose<pos:position pos:line="654" pos:column="18"/></name><argument_list pos:line="654" pos:column="18">(<argument><expr><name pos:line="654" pos:column="19">conn<pos:position pos:line="654" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="654" pos:column="25">"Connection: close used"<pos:position pos:line="654" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="654" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="654" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="655" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="656" pos:column="5">else <if pos:line="656" pos:column="10">if<condition pos:line="656" pos:column="12">(<expr><call><name pos:line="656" pos:column="13">checkprefix<pos:position pos:line="656" pos:column="24"/></name><argument_list pos:line="656" pos:column="24">(<argument><expr><literal type="string" pos:line="656" pos:column="25">"Transfer-Encoding:"<pos:position pos:line="656" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="656" pos:column="47">k<pos:position pos:line="656" pos:column="48"/></name><operator pos:line="656" pos:column="48">-&gt;<pos:position pos:line="656" pos:column="53"/></operator><name pos:line="656" pos:column="50">p<pos:position pos:line="656" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="656" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="656" pos:column="53"/></condition><then pos:line="656" pos:column="53"> <block pos:line="656" pos:column="54">{
      <comment type="block" pos:line="657" pos:column="7">/* One or more encodings. We check for chunked and/or a compression
         algorithm. */</comment>
      <comment type="block" pos:line="659" pos:column="7">/*
       * [RFC 2616, section 3.6.1] A 'chunked' transfer encoding
       * means that the server will send a series of "chunks". Each
       * chunk starts with line with info (including size of the
       * coming block) (terminated with CRLF), then a block of data
       * with the previously mentioned size. There can be any amount
       * of chunks, and a chunk-data set to zero signals the
       * end-of-chunks. */</comment>

      <decl_stmt><decl><type><name pos:line="668" pos:column="7">char<pos:position pos:line="668" pos:column="11"/></name> <modifier pos:line="668" pos:column="12">*<pos:position pos:line="668" pos:column="13"/></modifier></type><name pos:line="668" pos:column="13">start<pos:position pos:line="668" pos:column="18"/></name></decl>;<pos:position pos:line="668" pos:column="19"/></decl_stmt>

      <comment type="block" pos:line="670" pos:column="7">/* Find the first non-space letter */</comment>
      <expr_stmt><expr><name pos:line="671" pos:column="7">start<pos:position pos:line="671" pos:column="12"/></name> <operator pos:line="671" pos:column="13">=<pos:position pos:line="671" pos:column="14"/></operator> <name><name pos:line="671" pos:column="15">k<pos:position pos:line="671" pos:column="16"/></name><operator pos:line="671" pos:column="16">-&gt;<pos:position pos:line="671" pos:column="21"/></operator><name pos:line="671" pos:column="18">p<pos:position pos:line="671" pos:column="19"/></name></name> <operator pos:line="671" pos:column="20">+<pos:position pos:line="671" pos:column="21"/></operator> <literal type="number" pos:line="671" pos:column="22">18<pos:position pos:line="671" pos:column="24"/></literal></expr>;<pos:position pos:line="671" pos:column="25"/></expr_stmt>

      <for pos:line="673" pos:column="7">for<control pos:line="673" pos:column="10">(<init pos:line="673" pos:column="11">;<pos:position pos:line="673" pos:column="12"/></init><condition pos:line="673" pos:column="12">;<pos:position pos:line="673" pos:column="13"/></condition><incr/>)<pos:position pos:line="673" pos:column="14"/></control> <block pos:line="673" pos:column="15">{
        <comment type="block" pos:line="674" pos:column="9">/* skip whitespaces and commas */</comment>
        <while pos:line="675" pos:column="9">while<condition pos:line="675" pos:column="14">(<expr><operator pos:line="675" pos:column="15">*<pos:position pos:line="675" pos:column="16"/></operator><name pos:line="675" pos:column="16">start<pos:position pos:line="675" pos:column="21"/></name> <operator pos:line="675" pos:column="22">&amp;&amp;<pos:position pos:line="675" pos:column="32"/></operator> <operator pos:line="675" pos:column="25">(<pos:position pos:line="675" pos:column="26"/></operator><call><name pos:line="675" pos:column="26">ISSPACE<pos:position pos:line="675" pos:column="33"/></name><argument_list pos:line="675" pos:column="33">(<argument><expr><operator pos:line="675" pos:column="34">*<pos:position pos:line="675" pos:column="35"/></operator><name pos:line="675" pos:column="35">start<pos:position pos:line="675" pos:column="40"/></name></expr></argument>)<pos:position pos:line="675" pos:column="41"/></argument_list></call> <operator pos:line="675" pos:column="42">||<pos:position pos:line="675" pos:column="44"/></operator> <operator pos:line="675" pos:column="45">(<pos:position pos:line="675" pos:column="46"/></operator><operator pos:line="675" pos:column="46">*<pos:position pos:line="675" pos:column="47"/></operator><name pos:line="675" pos:column="47">start<pos:position pos:line="675" pos:column="52"/></name> <operator pos:line="675" pos:column="53">==<pos:position pos:line="675" pos:column="55"/></operator> <literal type="char" pos:line="675" pos:column="56">','<pos:position pos:line="675" pos:column="59"/></literal><operator pos:line="675" pos:column="59">)<pos:position pos:line="675" pos:column="60"/></operator><operator pos:line="675" pos:column="60">)<pos:position pos:line="675" pos:column="61"/></operator></expr>)<pos:position pos:line="675" pos:column="62"/></condition>
          <block type="pseudo"><expr_stmt><expr><name pos:line="676" pos:column="11">start<pos:position pos:line="676" pos:column="16"/></name><operator pos:line="676" pos:column="16">++<pos:position pos:line="676" pos:column="18"/></operator></expr>;<pos:position pos:line="676" pos:column="19"/></expr_stmt></block></while>

        <if pos:line="678" pos:column="9">if<condition pos:line="678" pos:column="11">(<expr><call><name pos:line="678" pos:column="12">checkprefix<pos:position pos:line="678" pos:column="23"/></name><argument_list pos:line="678" pos:column="23">(<argument><expr><literal type="string" pos:line="678" pos:column="24">"chunked"<pos:position pos:line="678" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="678" pos:column="35">start<pos:position pos:line="678" pos:column="40"/></name></expr></argument>)<pos:position pos:line="678" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="678" pos:column="42"/></condition><then pos:line="678" pos:column="42"> <block pos:line="678" pos:column="43">{
          <expr_stmt><expr><name><name pos:line="679" pos:column="11">k<pos:position pos:line="679" pos:column="12"/></name><operator pos:line="679" pos:column="12">-&gt;<pos:position pos:line="679" pos:column="17"/></operator><name pos:line="679" pos:column="14">chunk<pos:position pos:line="679" pos:column="19"/></name></name> <operator pos:line="679" pos:column="20">=<pos:position pos:line="679" pos:column="21"/></operator> <name pos:line="679" pos:column="22">TRUE<pos:position pos:line="679" pos:column="26"/></name></expr>;<pos:position pos:line="679" pos:column="27"/></expr_stmt> <comment type="block" pos:line="679" pos:column="28">/* chunks coming our way */</comment>

          <comment type="block" pos:line="681" pos:column="11">/* init our chunky engine */</comment>
          <expr_stmt><expr><call><name pos:line="682" pos:column="11">Curl_httpchunk_init<pos:position pos:line="682" pos:column="30"/></name><argument_list pos:line="682" pos:column="30">(<argument><expr><name pos:line="682" pos:column="31">conn<pos:position pos:line="682" pos:column="35"/></name></expr></argument>)<pos:position pos:line="682" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="682" pos:column="37"/></expr_stmt>

          <expr_stmt><expr><name pos:line="684" pos:column="11">start<pos:position pos:line="684" pos:column="16"/></name> <operator pos:line="684" pos:column="17">+=<pos:position pos:line="684" pos:column="19"/></operator> <literal type="number" pos:line="684" pos:column="20">7<pos:position pos:line="684" pos:column="21"/></literal></expr>;<pos:position pos:line="684" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="685" pos:column="10"/></block></then></if>

        <if pos:line="687" pos:column="9">if<condition pos:line="687" pos:column="11">(<expr><name><name pos:line="687" pos:column="12">k<pos:position pos:line="687" pos:column="13"/></name><operator pos:line="687" pos:column="13">-&gt;<pos:position pos:line="687" pos:column="18"/></operator><name pos:line="687" pos:column="15">auto_decoding<pos:position pos:line="687" pos:column="28"/></name></name></expr>)<pos:position pos:line="687" pos:column="29"/></condition><then pos:line="687" pos:column="29">
          <comment type="block" pos:line="688" pos:column="11">/* TODO: we only support the first mentioned compression for now */</comment>
          <block type="pseudo"><break pos:line="689" pos:column="11">break;<pos:position pos:line="689" pos:column="17"/></break></block></then></if>

        <if pos:line="691" pos:column="9">if<condition pos:line="691" pos:column="11">(<expr><call><name pos:line="691" pos:column="12">checkprefix<pos:position pos:line="691" pos:column="23"/></name><argument_list pos:line="691" pos:column="23">(<argument><expr><literal type="string" pos:line="691" pos:column="24">"identity"<pos:position pos:line="691" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="691" pos:column="36">start<pos:position pos:line="691" pos:column="41"/></name></expr></argument>)<pos:position pos:line="691" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="691" pos:column="43"/></condition><then pos:line="691" pos:column="43"> <block pos:line="691" pos:column="44">{
          <expr_stmt><expr><name><name pos:line="692" pos:column="11">k<pos:position pos:line="692" pos:column="12"/></name><operator pos:line="692" pos:column="12">-&gt;<pos:position pos:line="692" pos:column="17"/></operator><name pos:line="692" pos:column="14">auto_decoding<pos:position pos:line="692" pos:column="27"/></name></name> <operator pos:line="692" pos:column="28">=<pos:position pos:line="692" pos:column="29"/></operator> <name pos:line="692" pos:column="30">IDENTITY<pos:position pos:line="692" pos:column="38"/></name></expr>;<pos:position pos:line="692" pos:column="39"/></expr_stmt>
          <expr_stmt><expr><name pos:line="693" pos:column="11">start<pos:position pos:line="693" pos:column="16"/></name> <operator pos:line="693" pos:column="17">+=<pos:position pos:line="693" pos:column="19"/></operator> <literal type="number" pos:line="693" pos:column="20">8<pos:position pos:line="693" pos:column="21"/></literal></expr>;<pos:position pos:line="693" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="694" pos:column="10"/></block></then>
        <elseif pos:line="695" pos:column="9">else <if pos:line="695" pos:column="14">if<condition pos:line="695" pos:column="16">(<expr><call><name pos:line="695" pos:column="17">checkprefix<pos:position pos:line="695" pos:column="28"/></name><argument_list pos:line="695" pos:column="28">(<argument><expr><literal type="string" pos:line="695" pos:column="29">"deflate"<pos:position pos:line="695" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="695" pos:column="40">start<pos:position pos:line="695" pos:column="45"/></name></expr></argument>)<pos:position pos:line="695" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="695" pos:column="47"/></condition><then pos:line="695" pos:column="47"> <block pos:line="695" pos:column="48">{
          <expr_stmt><expr><name><name pos:line="696" pos:column="11">k<pos:position pos:line="696" pos:column="12"/></name><operator pos:line="696" pos:column="12">-&gt;<pos:position pos:line="696" pos:column="17"/></operator><name pos:line="696" pos:column="14">auto_decoding<pos:position pos:line="696" pos:column="27"/></name></name> <operator pos:line="696" pos:column="28">=<pos:position pos:line="696" pos:column="29"/></operator> <name pos:line="696" pos:column="30">DEFLATE<pos:position pos:line="696" pos:column="37"/></name></expr>;<pos:position pos:line="696" pos:column="38"/></expr_stmt>
          <expr_stmt><expr><name pos:line="697" pos:column="11">start<pos:position pos:line="697" pos:column="16"/></name> <operator pos:line="697" pos:column="17">+=<pos:position pos:line="697" pos:column="19"/></operator> <literal type="number" pos:line="697" pos:column="20">7<pos:position pos:line="697" pos:column="21"/></literal></expr>;<pos:position pos:line="697" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="698" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="699" pos:column="9">else <if pos:line="699" pos:column="14">if<condition pos:line="699" pos:column="16">(<expr><call><name pos:line="699" pos:column="17">checkprefix<pos:position pos:line="699" pos:column="28"/></name><argument_list pos:line="699" pos:column="28">(<argument><expr><literal type="string" pos:line="699" pos:column="29">"gzip"<pos:position pos:line="699" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="699" pos:column="37">start<pos:position pos:line="699" pos:column="42"/></name></expr></argument>)<pos:position pos:line="699" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="699" pos:column="44"/></condition><then pos:line="699" pos:column="44"> <block pos:line="699" pos:column="45">{
          <expr_stmt><expr><name><name pos:line="700" pos:column="11">k<pos:position pos:line="700" pos:column="12"/></name><operator pos:line="700" pos:column="12">-&gt;<pos:position pos:line="700" pos:column="17"/></operator><name pos:line="700" pos:column="14">auto_decoding<pos:position pos:line="700" pos:column="27"/></name></name> <operator pos:line="700" pos:column="28">=<pos:position pos:line="700" pos:column="29"/></operator> <name pos:line="700" pos:column="30">GZIP<pos:position pos:line="700" pos:column="34"/></name></expr>;<pos:position pos:line="700" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><name pos:line="701" pos:column="11">start<pos:position pos:line="701" pos:column="16"/></name> <operator pos:line="701" pos:column="17">+=<pos:position pos:line="701" pos:column="19"/></operator> <literal type="number" pos:line="701" pos:column="20">4<pos:position pos:line="701" pos:column="21"/></literal></expr>;<pos:position pos:line="701" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="702" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="703" pos:column="9">else <if pos:line="703" pos:column="14">if<condition pos:line="703" pos:column="16">(<expr><call><name pos:line="703" pos:column="17">checkprefix<pos:position pos:line="703" pos:column="28"/></name><argument_list pos:line="703" pos:column="28">(<argument><expr><literal type="string" pos:line="703" pos:column="29">"x-gzip"<pos:position pos:line="703" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="703" pos:column="39">start<pos:position pos:line="703" pos:column="44"/></name></expr></argument>)<pos:position pos:line="703" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="703" pos:column="46"/></condition><then pos:line="703" pos:column="46"> <block pos:line="703" pos:column="47">{
          <expr_stmt><expr><name><name pos:line="704" pos:column="11">k<pos:position pos:line="704" pos:column="12"/></name><operator pos:line="704" pos:column="12">-&gt;<pos:position pos:line="704" pos:column="17"/></operator><name pos:line="704" pos:column="14">auto_decoding<pos:position pos:line="704" pos:column="27"/></name></name> <operator pos:line="704" pos:column="28">=<pos:position pos:line="704" pos:column="29"/></operator> <name pos:line="704" pos:column="30">GZIP<pos:position pos:line="704" pos:column="34"/></name></expr>;<pos:position pos:line="704" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><name pos:line="705" pos:column="11">start<pos:position pos:line="705" pos:column="16"/></name> <operator pos:line="705" pos:column="17">+=<pos:position pos:line="705" pos:column="19"/></operator> <literal type="number" pos:line="705" pos:column="20">6<pos:position pos:line="705" pos:column="21"/></literal></expr>;<pos:position pos:line="705" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="706" pos:column="10"/></block></then></if></elseif>
        <else pos:line="707" pos:column="9">else
          <comment type="block" pos:line="708" pos:column="11">/* unknown! */</comment>
          <block type="pseudo"><break pos:line="709" pos:column="11">break;<pos:position pos:line="709" pos:column="17"/></break></block></else></if>

      }<pos:position pos:line="711" pos:column="8"/></block></for>

    }<pos:position pos:line="713" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="714" pos:column="5">else <if pos:line="714" pos:column="10">if<condition pos:line="714" pos:column="12">(<expr><call><name pos:line="714" pos:column="13">checkprefix<pos:position pos:line="714" pos:column="24"/></name><argument_list pos:line="714" pos:column="24">(<argument><expr><literal type="string" pos:line="714" pos:column="25">"Content-Encoding:"<pos:position pos:line="714" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="714" pos:column="46">k<pos:position pos:line="714" pos:column="47"/></name><operator pos:line="714" pos:column="47">-&gt;<pos:position pos:line="714" pos:column="52"/></operator><name pos:line="714" pos:column="49">p<pos:position pos:line="714" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="714" pos:column="51"/></argument_list></call> <operator pos:line="714" pos:column="52">&amp;&amp;<pos:position pos:line="714" pos:column="62"/></operator>
            <name><name pos:line="715" pos:column="13">data<pos:position pos:line="715" pos:column="17"/></name><operator pos:line="715" pos:column="17">-&gt;<pos:position pos:line="715" pos:column="22"/></operator><name pos:line="715" pos:column="19">set<pos:position pos:line="715" pos:column="22"/></name><operator pos:line="715" pos:column="22">.<pos:position pos:line="715" pos:column="23"/></operator><name pos:line="715" pos:column="23">str<pos:position pos:line="715" pos:column="26"/></name><index pos:line="715" pos:column="26">[<expr><name pos:line="715" pos:column="27">STRING_ENCODING<pos:position pos:line="715" pos:column="42"/></name></expr>]<pos:position pos:line="715" pos:column="43"/></index></name></expr>)<pos:position pos:line="715" pos:column="44"/></condition><then pos:line="715" pos:column="44"> <block pos:line="715" pos:column="45">{
      <comment type="block" pos:line="716" pos:column="7">/*
       * Process Content-Encoding. Look for the values: identity,
       * gzip, deflate, compress, x-gzip and x-compress. x-gzip and
       * x-compress are the same as gzip and compress. (Sec 3.5 RFC
       * 2616). zlib cannot handle compress.  However, errors are
       * handled further down when the response body is processed
       */</comment>
      <decl_stmt><decl><type><name pos:line="723" pos:column="7">char<pos:position pos:line="723" pos:column="11"/></name> <modifier pos:line="723" pos:column="12">*<pos:position pos:line="723" pos:column="13"/></modifier></type><name pos:line="723" pos:column="13">start<pos:position pos:line="723" pos:column="18"/></name></decl>;<pos:position pos:line="723" pos:column="19"/></decl_stmt>

      <comment type="block" pos:line="725" pos:column="7">/* Find the first non-space letter */</comment>
      <expr_stmt><expr><name pos:line="726" pos:column="7">start<pos:position pos:line="726" pos:column="12"/></name> <operator pos:line="726" pos:column="13">=<pos:position pos:line="726" pos:column="14"/></operator> <name><name pos:line="726" pos:column="15">k<pos:position pos:line="726" pos:column="16"/></name><operator pos:line="726" pos:column="16">-&gt;<pos:position pos:line="726" pos:column="21"/></operator><name pos:line="726" pos:column="18">p<pos:position pos:line="726" pos:column="19"/></name></name> <operator pos:line="726" pos:column="20">+<pos:position pos:line="726" pos:column="21"/></operator> <literal type="number" pos:line="726" pos:column="22">17<pos:position pos:line="726" pos:column="24"/></literal></expr>;<pos:position pos:line="726" pos:column="25"/></expr_stmt>
      <while pos:line="727" pos:column="7">while<condition pos:line="727" pos:column="12">(<expr><operator pos:line="727" pos:column="13">*<pos:position pos:line="727" pos:column="14"/></operator><name pos:line="727" pos:column="14">start<pos:position pos:line="727" pos:column="19"/></name> <operator pos:line="727" pos:column="20">&amp;&amp;<pos:position pos:line="727" pos:column="30"/></operator> <call><name pos:line="727" pos:column="23">ISSPACE<pos:position pos:line="727" pos:column="30"/></name><argument_list pos:line="727" pos:column="30">(<argument><expr><operator pos:line="727" pos:column="31">*<pos:position pos:line="727" pos:column="32"/></operator><name pos:line="727" pos:column="32">start<pos:position pos:line="727" pos:column="37"/></name></expr></argument>)<pos:position pos:line="727" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="727" pos:column="39"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="728" pos:column="9">start<pos:position pos:line="728" pos:column="14"/></name><operator pos:line="728" pos:column="14">++<pos:position pos:line="728" pos:column="16"/></operator></expr>;<pos:position pos:line="728" pos:column="17"/></expr_stmt></block></while>

      <comment type="block" pos:line="730" pos:column="7">/* Record the content-encoding for later use */</comment>
      <if pos:line="731" pos:column="7">if<condition pos:line="731" pos:column="9">(<expr><call><name pos:line="731" pos:column="10">checkprefix<pos:position pos:line="731" pos:column="21"/></name><argument_list pos:line="731" pos:column="21">(<argument><expr><literal type="string" pos:line="731" pos:column="22">"identity"<pos:position pos:line="731" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="731" pos:column="34">start<pos:position pos:line="731" pos:column="39"/></name></expr></argument>)<pos:position pos:line="731" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="731" pos:column="41"/></condition><then pos:line="731" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="732" pos:column="9">k<pos:position pos:line="732" pos:column="10"/></name><operator pos:line="732" pos:column="10">-&gt;<pos:position pos:line="732" pos:column="15"/></operator><name pos:line="732" pos:column="12">auto_decoding<pos:position pos:line="732" pos:column="25"/></name></name> <operator pos:line="732" pos:column="26">=<pos:position pos:line="732" pos:column="27"/></operator> <name pos:line="732" pos:column="28">IDENTITY<pos:position pos:line="732" pos:column="36"/></name></expr>;<pos:position pos:line="732" pos:column="37"/></expr_stmt></block></then>
      <elseif pos:line="733" pos:column="7">else <if pos:line="733" pos:column="12">if<condition pos:line="733" pos:column="14">(<expr><call><name pos:line="733" pos:column="15">checkprefix<pos:position pos:line="733" pos:column="26"/></name><argument_list pos:line="733" pos:column="26">(<argument><expr><literal type="string" pos:line="733" pos:column="27">"deflate"<pos:position pos:line="733" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="733" pos:column="38">start<pos:position pos:line="733" pos:column="43"/></name></expr></argument>)<pos:position pos:line="733" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="733" pos:column="45"/></condition><then pos:line="733" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="734" pos:column="9">k<pos:position pos:line="734" pos:column="10"/></name><operator pos:line="734" pos:column="10">-&gt;<pos:position pos:line="734" pos:column="15"/></operator><name pos:line="734" pos:column="12">auto_decoding<pos:position pos:line="734" pos:column="25"/></name></name> <operator pos:line="734" pos:column="26">=<pos:position pos:line="734" pos:column="27"/></operator> <name pos:line="734" pos:column="28">DEFLATE<pos:position pos:line="734" pos:column="35"/></name></expr>;<pos:position pos:line="734" pos:column="36"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="735" pos:column="7">else <if pos:line="735" pos:column="12">if<condition pos:line="735" pos:column="14">(<expr><call><name pos:line="735" pos:column="15">checkprefix<pos:position pos:line="735" pos:column="26"/></name><argument_list pos:line="735" pos:column="26">(<argument><expr><literal type="string" pos:line="735" pos:column="27">"gzip"<pos:position pos:line="735" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="735" pos:column="35">start<pos:position pos:line="735" pos:column="40"/></name></expr></argument>)<pos:position pos:line="735" pos:column="41"/></argument_list></call>
              <operator pos:line="736" pos:column="15">||<pos:position pos:line="736" pos:column="17"/></operator> <call><name pos:line="736" pos:column="18">checkprefix<pos:position pos:line="736" pos:column="29"/></name><argument_list pos:line="736" pos:column="29">(<argument><expr><literal type="string" pos:line="736" pos:column="30">"x-gzip"<pos:position pos:line="736" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="736" pos:column="40">start<pos:position pos:line="736" pos:column="45"/></name></expr></argument>)<pos:position pos:line="736" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="736" pos:column="47"/></condition><then pos:line="736" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="737" pos:column="9">k<pos:position pos:line="737" pos:column="10"/></name><operator pos:line="737" pos:column="10">-&gt;<pos:position pos:line="737" pos:column="15"/></operator><name pos:line="737" pos:column="12">auto_decoding<pos:position pos:line="737" pos:column="25"/></name></name> <operator pos:line="737" pos:column="26">=<pos:position pos:line="737" pos:column="27"/></operator> <name pos:line="737" pos:column="28">GZIP<pos:position pos:line="737" pos:column="32"/></name></expr>;<pos:position pos:line="737" pos:column="33"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="738" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="739" pos:column="5">else <if pos:line="739" pos:column="10">if<condition pos:line="739" pos:column="12">(<expr><call><name pos:line="739" pos:column="13">checkprefix<pos:position pos:line="739" pos:column="24"/></name><argument_list pos:line="739" pos:column="24">(<argument><expr><literal type="string" pos:line="739" pos:column="25">"Content-Range:"<pos:position pos:line="739" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="739" pos:column="43">k<pos:position pos:line="739" pos:column="44"/></name><operator pos:line="739" pos:column="44">-&gt;<pos:position pos:line="739" pos:column="49"/></operator><name pos:line="739" pos:column="46">p<pos:position pos:line="739" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="739" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="739" pos:column="49"/></condition><then pos:line="739" pos:column="49"> <block pos:line="739" pos:column="50">{
      <comment type="block" pos:line="740" pos:column="7">/* Content-Range: bytes [num]-
         Content-Range: bytes: [num]-
         Content-Range: [num]-
         Content-Range: [asterisk]/[total]

         The second format was added since Sun's webserver
         JavaWebServer/1.1.1 obviously sends the header this way!
         The third added since some servers use that!
         The forth means the requested range was unsatisfied.
      */</comment>

      <decl_stmt><decl><type><name pos:line="751" pos:column="7">char<pos:position pos:line="751" pos:column="11"/></name> <modifier pos:line="751" pos:column="12">*<pos:position pos:line="751" pos:column="13"/></modifier></type><name pos:line="751" pos:column="13">ptr<pos:position pos:line="751" pos:column="16"/></name> <init pos:line="751" pos:column="17">= <expr><name><name pos:line="751" pos:column="19">k<pos:position pos:line="751" pos:column="20"/></name><operator pos:line="751" pos:column="20">-&gt;<pos:position pos:line="751" pos:column="25"/></operator><name pos:line="751" pos:column="22">p<pos:position pos:line="751" pos:column="23"/></name></name> <operator pos:line="751" pos:column="24">+<pos:position pos:line="751" pos:column="25"/></operator> <literal type="number" pos:line="751" pos:column="26">14<pos:position pos:line="751" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="751" pos:column="29"/></decl_stmt>

      <comment type="block" pos:line="753" pos:column="7">/* Move forward until first digit or asterisk */</comment>
      <while pos:line="754" pos:column="7">while<condition pos:line="754" pos:column="12">(<expr><operator pos:line="754" pos:column="13">*<pos:position pos:line="754" pos:column="14"/></operator><name pos:line="754" pos:column="14">ptr<pos:position pos:line="754" pos:column="17"/></name> <operator pos:line="754" pos:column="18">&amp;&amp;<pos:position pos:line="754" pos:column="28"/></operator> <operator pos:line="754" pos:column="21">!<pos:position pos:line="754" pos:column="22"/></operator><call><name pos:line="754" pos:column="22">ISDIGIT<pos:position pos:line="754" pos:column="29"/></name><argument_list pos:line="754" pos:column="29">(<argument><expr><operator pos:line="754" pos:column="30">*<pos:position pos:line="754" pos:column="31"/></operator><name pos:line="754" pos:column="31">ptr<pos:position pos:line="754" pos:column="34"/></name></expr></argument>)<pos:position pos:line="754" pos:column="35"/></argument_list></call> <operator pos:line="754" pos:column="36">&amp;&amp;<pos:position pos:line="754" pos:column="46"/></operator> <operator pos:line="754" pos:column="39">*<pos:position pos:line="754" pos:column="40"/></operator><name pos:line="754" pos:column="40">ptr<pos:position pos:line="754" pos:column="43"/></name> <operator pos:line="754" pos:column="44">!=<pos:position pos:line="754" pos:column="46"/></operator> <literal type="char" pos:line="754" pos:column="47">'*'<pos:position pos:line="754" pos:column="50"/></literal></expr>)<pos:position pos:line="754" pos:column="51"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="755" pos:column="9">ptr<pos:position pos:line="755" pos:column="12"/></name><operator pos:line="755" pos:column="12">++<pos:position pos:line="755" pos:column="14"/></operator></expr>;<pos:position pos:line="755" pos:column="15"/></expr_stmt></block></while>

      <comment type="block" pos:line="757" pos:column="7">/* if it truly stopped on a digit */</comment>
      <if pos:line="758" pos:column="7">if<condition pos:line="758" pos:column="9">(<expr><call><name pos:line="758" pos:column="10">ISDIGIT<pos:position pos:line="758" pos:column="17"/></name><argument_list pos:line="758" pos:column="17">(<argument><expr><operator pos:line="758" pos:column="18">*<pos:position pos:line="758" pos:column="19"/></operator><name pos:line="758" pos:column="19">ptr<pos:position pos:line="758" pos:column="22"/></name></expr></argument>)<pos:position pos:line="758" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="758" pos:column="24"/></condition><then pos:line="758" pos:column="24"> <block pos:line="758" pos:column="25">{
        <if pos:line="759" pos:column="9">if<condition pos:line="759" pos:column="11">(<expr><operator pos:line="759" pos:column="12">!<pos:position pos:line="759" pos:column="13"/></operator><call><name pos:line="759" pos:column="13">curlx_strtoofft<pos:position pos:line="759" pos:column="28"/></name><argument_list pos:line="759" pos:column="28">(<argument><expr><name pos:line="759" pos:column="29">ptr<pos:position pos:line="759" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="759" pos:column="34">NULL<pos:position pos:line="759" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="759" pos:column="40">10<pos:position pos:line="759" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="759" pos:column="44">&amp;<pos:position pos:line="759" pos:column="49"/></operator><name><name pos:line="759" pos:column="45">k<pos:position pos:line="759" pos:column="46"/></name><operator pos:line="759" pos:column="46">-&gt;<pos:position pos:line="759" pos:column="51"/></operator><name pos:line="759" pos:column="48">offset<pos:position pos:line="759" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="759" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="759" pos:column="56"/></condition><then pos:line="759" pos:column="56"> <block pos:line="759" pos:column="57">{
          <if pos:line="760" pos:column="11">if<condition pos:line="760" pos:column="13">(<expr><name><name pos:line="760" pos:column="14">data<pos:position pos:line="760" pos:column="18"/></name><operator pos:line="760" pos:column="18">-&gt;<pos:position pos:line="760" pos:column="23"/></operator><name pos:line="760" pos:column="20">state<pos:position pos:line="760" pos:column="25"/></name><operator pos:line="760" pos:column="25">.<pos:position pos:line="760" pos:column="26"/></operator><name pos:line="760" pos:column="26">resume_from<pos:position pos:line="760" pos:column="37"/></name></name> <operator pos:line="760" pos:column="38">==<pos:position pos:line="760" pos:column="40"/></operator> <name><name pos:line="760" pos:column="41">k<pos:position pos:line="760" pos:column="42"/></name><operator pos:line="760" pos:column="42">-&gt;<pos:position pos:line="760" pos:column="47"/></operator><name pos:line="760" pos:column="44">offset<pos:position pos:line="760" pos:column="50"/></name></name></expr>)<pos:position pos:line="760" pos:column="51"/></condition><then pos:line="760" pos:column="51">
            <comment type="block" pos:line="761" pos:column="13">/* we asked for a resume and we got it */</comment>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="762" pos:column="13">k<pos:position pos:line="762" pos:column="14"/></name><operator pos:line="762" pos:column="14">-&gt;<pos:position pos:line="762" pos:column="19"/></operator><name pos:line="762" pos:column="16">content_range<pos:position pos:line="762" pos:column="29"/></name></name> <operator pos:line="762" pos:column="30">=<pos:position pos:line="762" pos:column="31"/></operator> <name pos:line="762" pos:column="32">TRUE<pos:position pos:line="762" pos:column="36"/></name></expr>;<pos:position pos:line="762" pos:column="37"/></expr_stmt></block></then></if>
        }<pos:position pos:line="763" pos:column="10"/></block></then></if>
      }<pos:position pos:line="764" pos:column="8"/></block></then>
      <else pos:line="765" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="766" pos:column="9">data<pos:position pos:line="766" pos:column="13"/></name><operator pos:line="766" pos:column="13">-&gt;<pos:position pos:line="766" pos:column="18"/></operator><name pos:line="766" pos:column="15">state<pos:position pos:line="766" pos:column="20"/></name><operator pos:line="766" pos:column="20">.<pos:position pos:line="766" pos:column="21"/></operator><name pos:line="766" pos:column="21">resume_from<pos:position pos:line="766" pos:column="32"/></name></name> <operator pos:line="766" pos:column="33">=<pos:position pos:line="766" pos:column="34"/></operator> <literal type="number" pos:line="766" pos:column="35">0<pos:position pos:line="766" pos:column="36"/></literal></expr>;<pos:position pos:line="766" pos:column="37"/></expr_stmt></block></else></if> <comment type="block" pos:line="766" pos:column="38">/* get everything */</comment>
    }<pos:position pos:line="767" pos:column="6"/></block></then></if></elseif>
<cpp:if pos:line="768" pos:column="1">#<cpp:directive pos:line="768" pos:column="2">if<pos:position pos:line="768" pos:column="4"/></cpp:directive> <expr><operator pos:line="768" pos:column="5">!<pos:position pos:line="768" pos:column="6"/></operator><call><name pos:line="768" pos:column="6">defined<pos:position pos:line="768" pos:column="13"/></name><argument_list pos:line="768" pos:column="13">(<argument><expr><name pos:line="768" pos:column="14">CURL_DISABLE_COOKIES<pos:position pos:line="768" pos:column="34"/></name></expr></argument>)<pos:position pos:line="768" pos:column="35"/></argument_list></call></expr></cpp:if>
    <elseif pos:line="769" pos:column="5">else <if pos:line="769" pos:column="10">if<condition pos:line="769" pos:column="12">(<expr><name><name pos:line="769" pos:column="13">data<pos:position pos:line="769" pos:column="17"/></name><operator pos:line="769" pos:column="17">-&gt;<pos:position pos:line="769" pos:column="22"/></operator><name pos:line="769" pos:column="19">cookies<pos:position pos:line="769" pos:column="26"/></name></name> <operator pos:line="769" pos:column="27">&amp;&amp;<pos:position pos:line="769" pos:column="37"/></operator>
            <call><name pos:line="770" pos:column="13">checkprefix<pos:position pos:line="770" pos:column="24"/></name><argument_list pos:line="770" pos:column="24">(<argument><expr><literal type="string" pos:line="770" pos:column="25">"Set-Cookie:"<pos:position pos:line="770" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="770" pos:column="40">k<pos:position pos:line="770" pos:column="41"/></name><operator pos:line="770" pos:column="41">-&gt;<pos:position pos:line="770" pos:column="46"/></operator><name pos:line="770" pos:column="43">p<pos:position pos:line="770" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="770" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="770" pos:column="46"/></condition><then pos:line="770" pos:column="46"> <block pos:line="770" pos:column="47">{
      <expr_stmt><expr><call><name pos:line="771" pos:column="7">Curl_share_lock<pos:position pos:line="771" pos:column="22"/></name><argument_list pos:line="771" pos:column="22">(<argument><expr><name pos:line="771" pos:column="23">data<pos:position pos:line="771" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="771" pos:column="29">CURL_LOCK_DATA_COOKIE<pos:position pos:line="771" pos:column="50"/></name></expr></argument>,
                      <argument><expr><name pos:line="772" pos:column="23">CURL_LOCK_ACCESS_SINGLE<pos:position pos:line="772" pos:column="46"/></name></expr></argument>)<pos:position pos:line="772" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="772" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="773" pos:column="7">Curl_cookie_add<pos:position pos:line="773" pos:column="22"/></name><argument_list pos:line="773" pos:column="22">(<argument><expr><name pos:line="773" pos:column="23">data<pos:position pos:line="773" pos:column="27"/></name></expr></argument>,
                      <argument><expr><name><name pos:line="774" pos:column="23">data<pos:position pos:line="774" pos:column="27"/></name><operator pos:line="774" pos:column="27">-&gt;<pos:position pos:line="774" pos:column="32"/></operator><name pos:line="774" pos:column="29">cookies<pos:position pos:line="774" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="774" pos:column="38">TRUE<pos:position pos:line="774" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="774" pos:column="44">k<pos:position pos:line="774" pos:column="45"/></name><operator pos:line="774" pos:column="45">-&gt;<pos:position pos:line="774" pos:column="50"/></operator><name pos:line="774" pos:column="47">p<pos:position pos:line="774" pos:column="48"/></name></name> <operator pos:line="774" pos:column="49">+<pos:position pos:line="774" pos:column="50"/></operator> <literal type="number" pos:line="774" pos:column="51">11<pos:position pos:line="774" pos:column="53"/></literal></expr></argument>,
                      <comment type="block" pos:line="775" pos:column="23">/* If there is a custom-set Host: name, use it
                         here, or else use real peer host name. */</comment>
                      <argument><expr><ternary><condition><expr><name><name pos:line="777" pos:column="23">conn<pos:position pos:line="777" pos:column="27"/></name><operator pos:line="777" pos:column="27">-&gt;<pos:position pos:line="777" pos:column="32"/></operator><name pos:line="777" pos:column="29">allocptr<pos:position pos:line="777" pos:column="37"/></name><operator pos:line="777" pos:column="37">.<pos:position pos:line="777" pos:column="38"/></operator><name pos:line="777" pos:column="38">cookiehost<pos:position pos:line="777" pos:column="48"/></name></name></expr>?<pos:position pos:line="777" pos:column="49"/></condition><then pos:line="777" pos:column="49">
                      <expr><name><name pos:line="778" pos:column="23">conn<pos:position pos:line="778" pos:column="27"/></name><operator pos:line="778" pos:column="27">-&gt;<pos:position pos:line="778" pos:column="32"/></operator><name pos:line="778" pos:column="29">allocptr<pos:position pos:line="778" pos:column="37"/></name><operator pos:line="778" pos:column="37">.<pos:position pos:line="778" pos:column="38"/></operator><name pos:line="778" pos:column="38">cookiehost<pos:position pos:line="778" pos:column="48"/></name></name></expr></then><else pos:line="778" pos:column="48">:<expr><name><name pos:line="778" pos:column="49">conn<pos:position pos:line="778" pos:column="53"/></name><operator pos:line="778" pos:column="53">-&gt;<pos:position pos:line="778" pos:column="58"/></operator><name pos:line="778" pos:column="55">host<pos:position pos:line="778" pos:column="59"/></name><operator pos:line="778" pos:column="59">.<pos:position pos:line="778" pos:column="60"/></operator><name pos:line="778" pos:column="60">name<pos:position pos:line="778" pos:column="64"/></name></name></expr></else></ternary></expr></argument>,
                      <argument><expr><name><name pos:line="779" pos:column="23">data<pos:position pos:line="779" pos:column="27"/></name><operator pos:line="779" pos:column="27">-&gt;<pos:position pos:line="779" pos:column="32"/></operator><name pos:line="779" pos:column="29">state<pos:position pos:line="779" pos:column="34"/></name><operator pos:line="779" pos:column="34">.<pos:position pos:line="779" pos:column="35"/></operator><name pos:line="779" pos:column="35">path<pos:position pos:line="779" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="779" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="779" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="780" pos:column="7">Curl_share_unlock<pos:position pos:line="780" pos:column="24"/></name><argument_list pos:line="780" pos:column="24">(<argument><expr><name pos:line="780" pos:column="25">data<pos:position pos:line="780" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="780" pos:column="31">CURL_LOCK_DATA_COOKIE<pos:position pos:line="780" pos:column="52"/></name></expr></argument>)<pos:position pos:line="780" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="780" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="781" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="782" pos:column="1">#<cpp:directive pos:line="782" pos:column="2">endif<pos:position pos:line="782" pos:column="7"/></cpp:directive></cpp:endif>
    <elseif pos:line="783" pos:column="5">else <if pos:line="783" pos:column="10">if<condition pos:line="783" pos:column="12">(<expr><call><name pos:line="783" pos:column="13">checkprefix<pos:position pos:line="783" pos:column="24"/></name><argument_list pos:line="783" pos:column="24">(<argument><expr><literal type="string" pos:line="783" pos:column="25">"Last-Modified:"<pos:position pos:line="783" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="783" pos:column="43">k<pos:position pos:line="783" pos:column="44"/></name><operator pos:line="783" pos:column="44">-&gt;<pos:position pos:line="783" pos:column="49"/></operator><name pos:line="783" pos:column="46">p<pos:position pos:line="783" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="783" pos:column="48"/></argument_list></call> <operator pos:line="783" pos:column="49">&amp;&amp;<pos:position pos:line="783" pos:column="59"/></operator>
            <operator pos:line="784" pos:column="13">(<pos:position pos:line="784" pos:column="14"/></operator><name><name pos:line="784" pos:column="14">data<pos:position pos:line="784" pos:column="18"/></name><operator pos:line="784" pos:column="18">-&gt;<pos:position pos:line="784" pos:column="23"/></operator><name pos:line="784" pos:column="20">set<pos:position pos:line="784" pos:column="23"/></name><operator pos:line="784" pos:column="23">.<pos:position pos:line="784" pos:column="24"/></operator><name pos:line="784" pos:column="24">timecondition<pos:position pos:line="784" pos:column="37"/></name></name> <operator pos:line="784" pos:column="38">||<pos:position pos:line="784" pos:column="40"/></operator> <name><name pos:line="784" pos:column="41">data<pos:position pos:line="784" pos:column="45"/></name><operator pos:line="784" pos:column="45">-&gt;<pos:position pos:line="784" pos:column="50"/></operator><name pos:line="784" pos:column="47">set<pos:position pos:line="784" pos:column="50"/></name><operator pos:line="784" pos:column="50">.<pos:position pos:line="784" pos:column="51"/></operator><name pos:line="784" pos:column="51">get_filetime<pos:position pos:line="784" pos:column="63"/></name></name><operator pos:line="784" pos:column="63">)<pos:position pos:line="784" pos:column="64"/></operator></expr> )<pos:position pos:line="784" pos:column="66"/></condition><then pos:line="784" pos:column="66"> <block pos:line="784" pos:column="67">{
      <decl_stmt><decl><type><name pos:line="785" pos:column="7">time_t<pos:position pos:line="785" pos:column="13"/></name></type> <name pos:line="785" pos:column="14">secs<pos:position pos:line="785" pos:column="18"/></name> <init pos:line="785" pos:column="19">= <expr><call><name pos:line="785" pos:column="21">time<pos:position pos:line="785" pos:column="25"/></name><argument_list pos:line="785" pos:column="25">(<argument><expr><name pos:line="785" pos:column="26">NULL<pos:position pos:line="785" pos:column="30"/></name></expr></argument>)<pos:position pos:line="785" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="785" pos:column="32"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="786" pos:column="7">k<pos:position pos:line="786" pos:column="8"/></name><operator pos:line="786" pos:column="8">-&gt;<pos:position pos:line="786" pos:column="13"/></operator><name pos:line="786" pos:column="10">timeofdoc<pos:position pos:line="786" pos:column="19"/></name></name> <operator pos:line="786" pos:column="20">=<pos:position pos:line="786" pos:column="21"/></operator> <call><name pos:line="786" pos:column="22">curl_getdate<pos:position pos:line="786" pos:column="34"/></name><argument_list pos:line="786" pos:column="34">(<argument><expr><name><name pos:line="786" pos:column="35">k<pos:position pos:line="786" pos:column="36"/></name><operator pos:line="786" pos:column="36">-&gt;<pos:position pos:line="786" pos:column="41"/></operator><name pos:line="786" pos:column="38">p<pos:position pos:line="786" pos:column="39"/></name></name> <operator pos:line="786" pos:column="40">+<pos:position pos:line="786" pos:column="41"/></operator> <call><name pos:line="786" pos:column="42">strlen<pos:position pos:line="786" pos:column="48"/></name><argument_list pos:line="786" pos:column="48">(<argument><expr><literal type="string" pos:line="786" pos:column="49">"Last-Modified:"<pos:position pos:line="786" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="786" pos:column="66"/></argument_list></call></expr></argument>,
                                  <argument><expr><operator pos:line="787" pos:column="35">&amp;<pos:position pos:line="787" pos:column="40"/></operator><name pos:line="787" pos:column="36">secs<pos:position pos:line="787" pos:column="40"/></name></expr></argument>)<pos:position pos:line="787" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="787" pos:column="42"/></expr_stmt>
      <if pos:line="788" pos:column="7">if<condition pos:line="788" pos:column="9">(<expr><name><name pos:line="788" pos:column="10">data<pos:position pos:line="788" pos:column="14"/></name><operator pos:line="788" pos:column="14">-&gt;<pos:position pos:line="788" pos:column="19"/></operator><name pos:line="788" pos:column="16">set<pos:position pos:line="788" pos:column="19"/></name><operator pos:line="788" pos:column="19">.<pos:position pos:line="788" pos:column="20"/></operator><name pos:line="788" pos:column="20">get_filetime<pos:position pos:line="788" pos:column="32"/></name></name></expr>)<pos:position pos:line="788" pos:column="33"/></condition><then pos:line="788" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="789" pos:column="9">data<pos:position pos:line="789" pos:column="13"/></name><operator pos:line="789" pos:column="13">-&gt;<pos:position pos:line="789" pos:column="18"/></operator><name pos:line="789" pos:column="15">info<pos:position pos:line="789" pos:column="19"/></name><operator pos:line="789" pos:column="19">.<pos:position pos:line="789" pos:column="20"/></operator><name pos:line="789" pos:column="20">filetime<pos:position pos:line="789" pos:column="28"/></name></name> <operator pos:line="789" pos:column="29">=<pos:position pos:line="789" pos:column="30"/></operator> <operator pos:line="789" pos:column="31">(<pos:position pos:line="789" pos:column="32"/></operator><name pos:line="789" pos:column="32">long<pos:position pos:line="789" pos:column="36"/></name><operator pos:line="789" pos:column="36">)<pos:position pos:line="789" pos:column="37"/></operator><name><name pos:line="789" pos:column="37">k<pos:position pos:line="789" pos:column="38"/></name><operator pos:line="789" pos:column="38">-&gt;<pos:position pos:line="789" pos:column="43"/></operator><name pos:line="789" pos:column="40">timeofdoc<pos:position pos:line="789" pos:column="49"/></name></name></expr>;<pos:position pos:line="789" pos:column="50"/></expr_stmt></block></then></if>
    }<pos:position pos:line="790" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="791" pos:column="5">else <if pos:line="791" pos:column="10">if<condition pos:line="791" pos:column="12">(<expr><operator pos:line="791" pos:column="13">(<pos:position pos:line="791" pos:column="14"/></operator><call><name pos:line="791" pos:column="14">checkprefix<pos:position pos:line="791" pos:column="25"/></name><argument_list pos:line="791" pos:column="25">(<argument><expr><literal type="string" pos:line="791" pos:column="26">"WWW-Authenticate:"<pos:position pos:line="791" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="791" pos:column="47">k<pos:position pos:line="791" pos:column="48"/></name><operator pos:line="791" pos:column="48">-&gt;<pos:position pos:line="791" pos:column="53"/></operator><name pos:line="791" pos:column="50">p<pos:position pos:line="791" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="791" pos:column="52"/></argument_list></call> <operator pos:line="791" pos:column="53">&amp;&amp;<pos:position pos:line="791" pos:column="63"/></operator>
             <operator pos:line="792" pos:column="14">(<pos:position pos:line="792" pos:column="15"/></operator><literal type="number" pos:line="792" pos:column="15">401<pos:position pos:line="792" pos:column="18"/></literal> <operator pos:line="792" pos:column="19">==<pos:position pos:line="792" pos:column="21"/></operator> <name><name pos:line="792" pos:column="22">k<pos:position pos:line="792" pos:column="23"/></name><operator pos:line="792" pos:column="23">-&gt;<pos:position pos:line="792" pos:column="28"/></operator><name pos:line="792" pos:column="25">httpcode<pos:position pos:line="792" pos:column="33"/></name></name><operator pos:line="792" pos:column="33">)<pos:position pos:line="792" pos:column="34"/></operator><operator pos:line="792" pos:column="34">)<pos:position pos:line="792" pos:column="35"/></operator> <operator pos:line="792" pos:column="36">||<pos:position pos:line="792" pos:column="38"/></operator>
            <operator pos:line="793" pos:column="13">(<pos:position pos:line="793" pos:column="14"/></operator><call><name pos:line="793" pos:column="14">checkprefix<pos:position pos:line="793" pos:column="25"/></name><argument_list pos:line="793" pos:column="25">(<argument><expr><literal type="string" pos:line="793" pos:column="26">"Proxy-authenticate:"<pos:position pos:line="793" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="793" pos:column="49">k<pos:position pos:line="793" pos:column="50"/></name><operator pos:line="793" pos:column="50">-&gt;<pos:position pos:line="793" pos:column="55"/></operator><name pos:line="793" pos:column="52">p<pos:position pos:line="793" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="793" pos:column="54"/></argument_list></call> <operator pos:line="793" pos:column="55">&amp;&amp;<pos:position pos:line="793" pos:column="65"/></operator>
             <operator pos:line="794" pos:column="14">(<pos:position pos:line="794" pos:column="15"/></operator><literal type="number" pos:line="794" pos:column="15">407<pos:position pos:line="794" pos:column="18"/></literal> <operator pos:line="794" pos:column="19">==<pos:position pos:line="794" pos:column="21"/></operator> <name><name pos:line="794" pos:column="22">k<pos:position pos:line="794" pos:column="23"/></name><operator pos:line="794" pos:column="23">-&gt;<pos:position pos:line="794" pos:column="28"/></operator><name pos:line="794" pos:column="25">httpcode<pos:position pos:line="794" pos:column="33"/></name></name><operator pos:line="794" pos:column="33">)<pos:position pos:line="794" pos:column="34"/></operator><operator pos:line="794" pos:column="34">)<pos:position pos:line="794" pos:column="35"/></operator></expr>)<pos:position pos:line="794" pos:column="36"/></condition><then pos:line="794" pos:column="36"> <block pos:line="794" pos:column="37">{

      <decl_stmt><decl><type><name pos:line="796" pos:column="7">bool<pos:position pos:line="796" pos:column="11"/></name></type> <name pos:line="796" pos:column="12">proxy<pos:position pos:line="796" pos:column="17"/></name> <init pos:line="796" pos:column="18">= <expr><ternary><condition><expr><operator pos:line="796" pos:column="20">(<pos:position pos:line="796" pos:column="21"/></operator><name><name pos:line="796" pos:column="21">k<pos:position pos:line="796" pos:column="22"/></name><operator pos:line="796" pos:column="22">-&gt;<pos:position pos:line="796" pos:column="27"/></operator><name pos:line="796" pos:column="24">httpcode<pos:position pos:line="796" pos:column="32"/></name></name> <operator pos:line="796" pos:column="33">==<pos:position pos:line="796" pos:column="35"/></operator> <literal type="number" pos:line="796" pos:column="36">407<pos:position pos:line="796" pos:column="39"/></literal><operator pos:line="796" pos:column="39">)<pos:position pos:line="796" pos:column="40"/></operator></expr> ?<pos:position pos:line="796" pos:column="42"/></condition><then pos:line="796" pos:column="42"> <expr><name pos:line="796" pos:column="43">TRUE<pos:position pos:line="796" pos:column="47"/></name></expr> <pos:position pos:line="796" pos:column="48"/></then><else pos:line="796" pos:column="48">: <expr><name pos:line="796" pos:column="50">FALSE<pos:position pos:line="796" pos:column="55"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="796" pos:column="56"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="797" pos:column="7">char<pos:position pos:line="797" pos:column="11"/></name> <modifier pos:line="797" pos:column="12">*<pos:position pos:line="797" pos:column="13"/></modifier></type><name pos:line="797" pos:column="13">auth<pos:position pos:line="797" pos:column="17"/></name> <init pos:line="797" pos:column="18">= <expr><call><name pos:line="797" pos:column="20">Curl_copy_header_value<pos:position pos:line="797" pos:column="42"/></name><argument_list pos:line="797" pos:column="42">(<argument><expr><name><name pos:line="797" pos:column="43">k<pos:position pos:line="797" pos:column="44"/></name><operator pos:line="797" pos:column="44">-&gt;<pos:position pos:line="797" pos:column="49"/></operator><name pos:line="797" pos:column="46">p<pos:position pos:line="797" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="797" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="797" pos:column="49"/></decl_stmt>
      <if pos:line="798" pos:column="7">if<condition pos:line="798" pos:column="9">(<expr><operator pos:line="798" pos:column="10">!<pos:position pos:line="798" pos:column="11"/></operator><name pos:line="798" pos:column="11">auth<pos:position pos:line="798" pos:column="15"/></name></expr>)<pos:position pos:line="798" pos:column="16"/></condition><then pos:line="798" pos:column="16">
        <block type="pseudo"><return pos:line="799" pos:column="9">return <expr><name pos:line="799" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="799" pos:column="35"/></name></expr>;<pos:position pos:line="799" pos:column="36"/></return></block></then></if>

      <expr_stmt><expr><name pos:line="801" pos:column="7">result<pos:position pos:line="801" pos:column="13"/></name> <operator pos:line="801" pos:column="14">=<pos:position pos:line="801" pos:column="15"/></operator> <call><name pos:line="801" pos:column="16">Curl_http_input_auth<pos:position pos:line="801" pos:column="36"/></name><argument_list pos:line="801" pos:column="36">(<argument><expr><name pos:line="801" pos:column="37">conn<pos:position pos:line="801" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="801" pos:column="43">proxy<pos:position pos:line="801" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="801" pos:column="50">auth<pos:position pos:line="801" pos:column="54"/></name></expr></argument>)<pos:position pos:line="801" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="801" pos:column="56"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="803" pos:column="7">free<pos:position pos:line="803" pos:column="11"/></name><argument_list pos:line="803" pos:column="11">(<argument><expr><name pos:line="803" pos:column="12">auth<pos:position pos:line="803" pos:column="16"/></name></expr></argument>)<pos:position pos:line="803" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="803" pos:column="18"/></expr_stmt>

      <if pos:line="805" pos:column="7">if<condition pos:line="805" pos:column="9">(<expr><name pos:line="805" pos:column="10">result<pos:position pos:line="805" pos:column="16"/></name></expr>)<pos:position pos:line="805" pos:column="17"/></condition><then pos:line="805" pos:column="17">
        <block type="pseudo"><return pos:line="806" pos:column="9">return <expr><name pos:line="806" pos:column="16">result<pos:position pos:line="806" pos:column="22"/></name></expr>;<pos:position pos:line="806" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="807" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="808" pos:column="5">else <if pos:line="808" pos:column="10">if<condition pos:line="808" pos:column="12">(<expr><operator pos:line="808" pos:column="13">(<pos:position pos:line="808" pos:column="14"/></operator><name><name pos:line="808" pos:column="14">k<pos:position pos:line="808" pos:column="15"/></name><operator pos:line="808" pos:column="15">-&gt;<pos:position pos:line="808" pos:column="20"/></operator><name pos:line="808" pos:column="17">httpcode<pos:position pos:line="808" pos:column="25"/></name></name> <operator pos:line="808" pos:column="26">&gt;=<pos:position pos:line="808" pos:column="31"/></operator> <literal type="number" pos:line="808" pos:column="29">300<pos:position pos:line="808" pos:column="32"/></literal> <operator pos:line="808" pos:column="33">&amp;&amp;<pos:position pos:line="808" pos:column="43"/></operator> <name><name pos:line="808" pos:column="36">k<pos:position pos:line="808" pos:column="37"/></name><operator pos:line="808" pos:column="37">-&gt;<pos:position pos:line="808" pos:column="42"/></operator><name pos:line="808" pos:column="39">httpcode<pos:position pos:line="808" pos:column="47"/></name></name> <operator pos:line="808" pos:column="48">&lt;<pos:position pos:line="808" pos:column="52"/></operator> <literal type="number" pos:line="808" pos:column="50">400<pos:position pos:line="808" pos:column="53"/></literal><operator pos:line="808" pos:column="53">)<pos:position pos:line="808" pos:column="54"/></operator> <operator pos:line="808" pos:column="55">&amp;&amp;<pos:position pos:line="808" pos:column="65"/></operator>
            <call><name pos:line="809" pos:column="13">checkprefix<pos:position pos:line="809" pos:column="24"/></name><argument_list pos:line="809" pos:column="24">(<argument><expr><literal type="string" pos:line="809" pos:column="25">"Location:"<pos:position pos:line="809" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="809" pos:column="38">k<pos:position pos:line="809" pos:column="39"/></name><operator pos:line="809" pos:column="39">-&gt;<pos:position pos:line="809" pos:column="44"/></operator><name pos:line="809" pos:column="41">p<pos:position pos:line="809" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="809" pos:column="43"/></argument_list></call> <operator pos:line="809" pos:column="44">&amp;&amp;<pos:position pos:line="809" pos:column="54"/></operator>
            <operator pos:line="810" pos:column="13">!<pos:position pos:line="810" pos:column="14"/></operator><name><name pos:line="810" pos:column="14">data<pos:position pos:line="810" pos:column="18"/></name><operator pos:line="810" pos:column="18">-&gt;<pos:position pos:line="810" pos:column="23"/></operator><name pos:line="810" pos:column="20">req<pos:position pos:line="810" pos:column="23"/></name><operator pos:line="810" pos:column="23">.<pos:position pos:line="810" pos:column="24"/></operator><name pos:line="810" pos:column="24">location<pos:position pos:line="810" pos:column="32"/></name></name></expr>)<pos:position pos:line="810" pos:column="33"/></condition><then pos:line="810" pos:column="33"> <block pos:line="810" pos:column="34">{
      <comment type="block" pos:line="811" pos:column="7">/* this is the URL that the server advises us to use instead */</comment>
      <decl_stmt><decl><type><name pos:line="812" pos:column="7">char<pos:position pos:line="812" pos:column="11"/></name> <modifier pos:line="812" pos:column="12">*<pos:position pos:line="812" pos:column="13"/></modifier></type><name pos:line="812" pos:column="13">location<pos:position pos:line="812" pos:column="21"/></name> <init pos:line="812" pos:column="22">= <expr><call><name pos:line="812" pos:column="24">Curl_copy_header_value<pos:position pos:line="812" pos:column="46"/></name><argument_list pos:line="812" pos:column="46">(<argument><expr><name><name pos:line="812" pos:column="47">k<pos:position pos:line="812" pos:column="48"/></name><operator pos:line="812" pos:column="48">-&gt;<pos:position pos:line="812" pos:column="53"/></operator><name pos:line="812" pos:column="50">p<pos:position pos:line="812" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="812" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="812" pos:column="53"/></decl_stmt>
      <if pos:line="813" pos:column="7">if<condition pos:line="813" pos:column="9">(<expr><operator pos:line="813" pos:column="10">!<pos:position pos:line="813" pos:column="11"/></operator><name pos:line="813" pos:column="11">location<pos:position pos:line="813" pos:column="19"/></name></expr>)<pos:position pos:line="813" pos:column="20"/></condition><then pos:line="813" pos:column="20">
        <block type="pseudo"><return pos:line="814" pos:column="9">return <expr><name pos:line="814" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="814" pos:column="35"/></name></expr>;<pos:position pos:line="814" pos:column="36"/></return></block></then></if>
      <if pos:line="815" pos:column="7">if<condition pos:line="815" pos:column="9">(<expr><operator pos:line="815" pos:column="10">!<pos:position pos:line="815" pos:column="11"/></operator><operator pos:line="815" pos:column="11">*<pos:position pos:line="815" pos:column="12"/></operator><name pos:line="815" pos:column="12">location<pos:position pos:line="815" pos:column="20"/></name></expr>)<pos:position pos:line="815" pos:column="21"/></condition><then pos:line="815" pos:column="21">
        <comment type="block" pos:line="816" pos:column="9">/* ignore empty data */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="817" pos:column="9">free<pos:position pos:line="817" pos:column="13"/></name><argument_list pos:line="817" pos:column="13">(<argument><expr><name pos:line="817" pos:column="14">location<pos:position pos:line="817" pos:column="22"/></name></expr></argument>)<pos:position pos:line="817" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="817" pos:column="24"/></expr_stmt></block></then>
      <else pos:line="818" pos:column="7">else <block pos:line="818" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="819" pos:column="9">data<pos:position pos:line="819" pos:column="13"/></name><operator pos:line="819" pos:column="13">-&gt;<pos:position pos:line="819" pos:column="18"/></operator><name pos:line="819" pos:column="15">req<pos:position pos:line="819" pos:column="18"/></name><operator pos:line="819" pos:column="18">.<pos:position pos:line="819" pos:column="19"/></operator><name pos:line="819" pos:column="19">location<pos:position pos:line="819" pos:column="27"/></name></name> <operator pos:line="819" pos:column="28">=<pos:position pos:line="819" pos:column="29"/></operator> <name pos:line="819" pos:column="30">location<pos:position pos:line="819" pos:column="38"/></name></expr>;<pos:position pos:line="819" pos:column="39"/></expr_stmt>

        <if pos:line="821" pos:column="9">if<condition pos:line="821" pos:column="11">(<expr><name><name pos:line="821" pos:column="12">data<pos:position pos:line="821" pos:column="16"/></name><operator pos:line="821" pos:column="16">-&gt;<pos:position pos:line="821" pos:column="21"/></operator><name pos:line="821" pos:column="18">set<pos:position pos:line="821" pos:column="21"/></name><operator pos:line="821" pos:column="21">.<pos:position pos:line="821" pos:column="22"/></operator><name pos:line="821" pos:column="22">http_follow_location<pos:position pos:line="821" pos:column="42"/></name></name></expr>)<pos:position pos:line="821" pos:column="43"/></condition><then pos:line="821" pos:column="43"> <block pos:line="821" pos:column="44">{
          <expr_stmt><expr><call><name pos:line="822" pos:column="11">DEBUGASSERT<pos:position pos:line="822" pos:column="22"/></name><argument_list pos:line="822" pos:column="22">(<argument><expr><operator pos:line="822" pos:column="23">!<pos:position pos:line="822" pos:column="24"/></operator><name><name pos:line="822" pos:column="24">data<pos:position pos:line="822" pos:column="28"/></name><operator pos:line="822" pos:column="28">-&gt;<pos:position pos:line="822" pos:column="33"/></operator><name pos:line="822" pos:column="30">req<pos:position pos:line="822" pos:column="33"/></name><operator pos:line="822" pos:column="33">.<pos:position pos:line="822" pos:column="34"/></operator><name pos:line="822" pos:column="34">newurl<pos:position pos:line="822" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="822" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="822" pos:column="42"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="823" pos:column="11">data<pos:position pos:line="823" pos:column="15"/></name><operator pos:line="823" pos:column="15">-&gt;<pos:position pos:line="823" pos:column="20"/></operator><name pos:line="823" pos:column="17">req<pos:position pos:line="823" pos:column="20"/></name><operator pos:line="823" pos:column="20">.<pos:position pos:line="823" pos:column="21"/></operator><name pos:line="823" pos:column="21">newurl<pos:position pos:line="823" pos:column="27"/></name></name> <operator pos:line="823" pos:column="28">=<pos:position pos:line="823" pos:column="29"/></operator> <call><name pos:line="823" pos:column="30">strdup<pos:position pos:line="823" pos:column="36"/></name><argument_list pos:line="823" pos:column="36">(<argument><expr><name><name pos:line="823" pos:column="37">data<pos:position pos:line="823" pos:column="41"/></name><operator pos:line="823" pos:column="41">-&gt;<pos:position pos:line="823" pos:column="46"/></operator><name pos:line="823" pos:column="43">req<pos:position pos:line="823" pos:column="46"/></name><operator pos:line="823" pos:column="46">.<pos:position pos:line="823" pos:column="47"/></operator><name pos:line="823" pos:column="47">location<pos:position pos:line="823" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="823" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="823" pos:column="57"/></expr_stmt> <comment type="block" pos:line="823" pos:column="58">/* clone */</comment>
          <if pos:line="824" pos:column="11">if<condition pos:line="824" pos:column="13">(<expr><operator pos:line="824" pos:column="14">!<pos:position pos:line="824" pos:column="15"/></operator><name><name pos:line="824" pos:column="15">data<pos:position pos:line="824" pos:column="19"/></name><operator pos:line="824" pos:column="19">-&gt;<pos:position pos:line="824" pos:column="24"/></operator><name pos:line="824" pos:column="21">req<pos:position pos:line="824" pos:column="24"/></name><operator pos:line="824" pos:column="24">.<pos:position pos:line="824" pos:column="25"/></operator><name pos:line="824" pos:column="25">newurl<pos:position pos:line="824" pos:column="31"/></name></name></expr>)<pos:position pos:line="824" pos:column="32"/></condition><then pos:line="824" pos:column="32">
            <block type="pseudo"><return pos:line="825" pos:column="13">return <expr><name pos:line="825" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="825" pos:column="39"/></name></expr>;<pos:position pos:line="825" pos:column="40"/></return></block></then></if>

          <comment type="block" pos:line="827" pos:column="11">/* some cases of POST and PUT etc needs to rewind the data
             stream at this point */</comment>
          <expr_stmt><expr><name pos:line="829" pos:column="11">result<pos:position pos:line="829" pos:column="17"/></name> <operator pos:line="829" pos:column="18">=<pos:position pos:line="829" pos:column="19"/></operator> <call><name pos:line="829" pos:column="20">http_perhapsrewind<pos:position pos:line="829" pos:column="38"/></name><argument_list pos:line="829" pos:column="38">(<argument><expr><name pos:line="829" pos:column="39">conn<pos:position pos:line="829" pos:column="43"/></name></expr></argument>)<pos:position pos:line="829" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="829" pos:column="45"/></expr_stmt>
          <if pos:line="830" pos:column="11">if<condition pos:line="830" pos:column="13">(<expr><name pos:line="830" pos:column="14">result<pos:position pos:line="830" pos:column="20"/></name></expr>)<pos:position pos:line="830" pos:column="21"/></condition><then pos:line="830" pos:column="21">
            <block type="pseudo"><return pos:line="831" pos:column="13">return <expr><name pos:line="831" pos:column="20">result<pos:position pos:line="831" pos:column="26"/></name></expr>;<pos:position pos:line="831" pos:column="27"/></return></block></then></if>
        }<pos:position pos:line="832" pos:column="10"/></block></then></if>
      }<pos:position pos:line="833" pos:column="8"/></block></else></if>
    }<pos:position pos:line="834" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="835" pos:column="5">else <if pos:line="835" pos:column="10">if<condition pos:line="835" pos:column="12">(<expr><name><name pos:line="835" pos:column="13">conn<pos:position pos:line="835" pos:column="17"/></name><operator pos:line="835" pos:column="17">-&gt;<pos:position pos:line="835" pos:column="22"/></operator><name pos:line="835" pos:column="19">handler<pos:position pos:line="835" pos:column="26"/></name><operator pos:line="835" pos:column="26">-&gt;<pos:position pos:line="835" pos:column="31"/></operator><name pos:line="835" pos:column="28">protocol<pos:position pos:line="835" pos:column="36"/></name></name> <operator pos:line="835" pos:column="37">&amp;<pos:position pos:line="835" pos:column="42"/></operator> <name pos:line="835" pos:column="39">CURLPROTO_RTSP<pos:position pos:line="835" pos:column="53"/></name></expr>)<pos:position pos:line="835" pos:column="54"/></condition><then pos:line="835" pos:column="54"> <block pos:line="835" pos:column="55">{
      <expr_stmt><expr><name pos:line="836" pos:column="7">result<pos:position pos:line="836" pos:column="13"/></name> <operator pos:line="836" pos:column="14">=<pos:position pos:line="836" pos:column="15"/></operator> <call><name pos:line="836" pos:column="16">Curl_rtsp_parseheader<pos:position pos:line="836" pos:column="37"/></name><argument_list pos:line="836" pos:column="37">(<argument><expr><name pos:line="836" pos:column="38">conn<pos:position pos:line="836" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="836" pos:column="44">k<pos:position pos:line="836" pos:column="45"/></name><operator pos:line="836" pos:column="45">-&gt;<pos:position pos:line="836" pos:column="50"/></operator><name pos:line="836" pos:column="47">p<pos:position pos:line="836" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="836" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="836" pos:column="50"/></expr_stmt>
      <if pos:line="837" pos:column="7">if<condition pos:line="837" pos:column="9">(<expr><name pos:line="837" pos:column="10">result<pos:position pos:line="837" pos:column="16"/></name></expr>)<pos:position pos:line="837" pos:column="17"/></condition><then pos:line="837" pos:column="17">
        <block type="pseudo"><return pos:line="838" pos:column="9">return <expr><name pos:line="838" pos:column="16">result<pos:position pos:line="838" pos:column="22"/></name></expr>;<pos:position pos:line="838" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="839" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="841" pos:column="5">/*
     * End of header-checks. Write them to the client.
     */</comment>

    <expr_stmt><expr><name pos:line="845" pos:column="5">writetype<pos:position pos:line="845" pos:column="14"/></name> <operator pos:line="845" pos:column="15">=<pos:position pos:line="845" pos:column="16"/></operator> <name pos:line="845" pos:column="17">CLIENTWRITE_HEADER<pos:position pos:line="845" pos:column="35"/></name></expr>;<pos:position pos:line="845" pos:column="36"/></expr_stmt>
    <if pos:line="846" pos:column="5">if<condition pos:line="846" pos:column="7">(<expr><name><name pos:line="846" pos:column="8">data<pos:position pos:line="846" pos:column="12"/></name><operator pos:line="846" pos:column="12">-&gt;<pos:position pos:line="846" pos:column="17"/></operator><name pos:line="846" pos:column="14">set<pos:position pos:line="846" pos:column="17"/></name><operator pos:line="846" pos:column="17">.<pos:position pos:line="846" pos:column="18"/></operator><name pos:line="846" pos:column="18">include_header<pos:position pos:line="846" pos:column="32"/></name></name></expr>)<pos:position pos:line="846" pos:column="33"/></condition><then pos:line="846" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><name pos:line="847" pos:column="7">writetype<pos:position pos:line="847" pos:column="16"/></name> <operator pos:line="847" pos:column="17">|=<pos:position pos:line="847" pos:column="19"/></operator> <name pos:line="847" pos:column="20">CLIENTWRITE_BODY<pos:position pos:line="847" pos:column="36"/></name></expr>;<pos:position pos:line="847" pos:column="37"/></expr_stmt></block></then></if>

    <if pos:line="849" pos:column="5">if<condition pos:line="849" pos:column="7">(<expr><name><name pos:line="849" pos:column="8">data<pos:position pos:line="849" pos:column="12"/></name><operator pos:line="849" pos:column="12">-&gt;<pos:position pos:line="849" pos:column="17"/></operator><name pos:line="849" pos:column="14">set<pos:position pos:line="849" pos:column="17"/></name><operator pos:line="849" pos:column="17">.<pos:position pos:line="849" pos:column="18"/></operator><name pos:line="849" pos:column="18">verbose<pos:position pos:line="849" pos:column="25"/></name></name></expr>)<pos:position pos:line="849" pos:column="26"/></condition><then pos:line="849" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="850" pos:column="7">Curl_debug<pos:position pos:line="850" pos:column="17"/></name><argument_list pos:line="850" pos:column="17">(<argument><expr><name pos:line="850" pos:column="18">data<pos:position pos:line="850" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="850" pos:column="24">CURLINFO_HEADER_IN<pos:position pos:line="850" pos:column="42"/></name></expr></argument>,
                 <argument><expr><name><name pos:line="851" pos:column="18">k<pos:position pos:line="851" pos:column="19"/></name><operator pos:line="851" pos:column="19">-&gt;<pos:position pos:line="851" pos:column="24"/></operator><name pos:line="851" pos:column="21">p<pos:position pos:line="851" pos:column="22"/></name></name></expr></argument>, <argument><expr><operator pos:line="851" pos:column="24">(<pos:position pos:line="851" pos:column="25"/></operator><name pos:line="851" pos:column="25">size_t<pos:position pos:line="851" pos:column="31"/></name><operator pos:line="851" pos:column="31">)<pos:position pos:line="851" pos:column="32"/></operator><name><name pos:line="851" pos:column="32">k<pos:position pos:line="851" pos:column="33"/></name><operator pos:line="851" pos:column="33">-&gt;<pos:position pos:line="851" pos:column="38"/></operator><name pos:line="851" pos:column="35">hbuflen<pos:position pos:line="851" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="851" pos:column="44">conn<pos:position pos:line="851" pos:column="48"/></name></expr></argument>)<pos:position pos:line="851" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="851" pos:column="50"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="853" pos:column="5">result<pos:position pos:line="853" pos:column="11"/></name> <operator pos:line="853" pos:column="12">=<pos:position pos:line="853" pos:column="13"/></operator> <call><name pos:line="853" pos:column="14">Curl_client_write<pos:position pos:line="853" pos:column="31"/></name><argument_list pos:line="853" pos:column="31">(<argument><expr><name pos:line="853" pos:column="32">conn<pos:position pos:line="853" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="853" pos:column="38">writetype<pos:position pos:line="853" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="853" pos:column="49">k<pos:position pos:line="853" pos:column="50"/></name><operator pos:line="853" pos:column="50">-&gt;<pos:position pos:line="853" pos:column="55"/></operator><name pos:line="853" pos:column="52">p<pos:position pos:line="853" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="853" pos:column="55">k<pos:position pos:line="853" pos:column="56"/></name><operator pos:line="853" pos:column="56">-&gt;<pos:position pos:line="853" pos:column="61"/></operator><name pos:line="853" pos:column="58">hbuflen<pos:position pos:line="853" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="853" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="853" pos:column="67"/></expr_stmt>
    <if pos:line="854" pos:column="5">if<condition pos:line="854" pos:column="7">(<expr><name pos:line="854" pos:column="8">result<pos:position pos:line="854" pos:column="14"/></name></expr>)<pos:position pos:line="854" pos:column="15"/></condition><then pos:line="854" pos:column="15">
      <block type="pseudo"><return pos:line="855" pos:column="7">return <expr><name pos:line="855" pos:column="14">result<pos:position pos:line="855" pos:column="20"/></name></expr>;<pos:position pos:line="855" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="857" pos:column="5">data<pos:position pos:line="857" pos:column="9"/></name><operator pos:line="857" pos:column="9">-&gt;<pos:position pos:line="857" pos:column="14"/></operator><name pos:line="857" pos:column="11">info<pos:position pos:line="857" pos:column="15"/></name><operator pos:line="857" pos:column="15">.<pos:position pos:line="857" pos:column="16"/></operator><name pos:line="857" pos:column="16">header_size<pos:position pos:line="857" pos:column="27"/></name></name> <operator pos:line="857" pos:column="28">+=<pos:position pos:line="857" pos:column="30"/></operator> <operator pos:line="857" pos:column="31">(<pos:position pos:line="857" pos:column="32"/></operator><name pos:line="857" pos:column="32">long<pos:position pos:line="857" pos:column="36"/></name><operator pos:line="857" pos:column="36">)<pos:position pos:line="857" pos:column="37"/></operator><name><name pos:line="857" pos:column="37">k<pos:position pos:line="857" pos:column="38"/></name><operator pos:line="857" pos:column="38">-&gt;<pos:position pos:line="857" pos:column="43"/></operator><name pos:line="857" pos:column="40">hbuflen<pos:position pos:line="857" pos:column="47"/></name></name></expr>;<pos:position pos:line="857" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="858" pos:column="5">data<pos:position pos:line="858" pos:column="9"/></name><operator pos:line="858" pos:column="9">-&gt;<pos:position pos:line="858" pos:column="14"/></operator><name pos:line="858" pos:column="11">req<pos:position pos:line="858" pos:column="14"/></name><operator pos:line="858" pos:column="14">.<pos:position pos:line="858" pos:column="15"/></operator><name pos:line="858" pos:column="15">headerbytecount<pos:position pos:line="858" pos:column="30"/></name></name> <operator pos:line="858" pos:column="31">+=<pos:position pos:line="858" pos:column="33"/></operator> <operator pos:line="858" pos:column="34">(<pos:position pos:line="858" pos:column="35"/></operator><name pos:line="858" pos:column="35">long<pos:position pos:line="858" pos:column="39"/></name><operator pos:line="858" pos:column="39">)<pos:position pos:line="858" pos:column="40"/></operator><name><name pos:line="858" pos:column="40">k<pos:position pos:line="858" pos:column="41"/></name><operator pos:line="858" pos:column="41">-&gt;<pos:position pos:line="858" pos:column="46"/></operator><name pos:line="858" pos:column="43">hbuflen<pos:position pos:line="858" pos:column="50"/></name></name></expr>;<pos:position pos:line="858" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="860" pos:column="5">/* reset hbufp pointer &amp;&amp; hbuflen */</comment>
    <expr_stmt><expr><name><name pos:line="861" pos:column="5">k<pos:position pos:line="861" pos:column="6"/></name><operator pos:line="861" pos:column="6">-&gt;<pos:position pos:line="861" pos:column="11"/></operator><name pos:line="861" pos:column="8">hbufp<pos:position pos:line="861" pos:column="13"/></name></name> <operator pos:line="861" pos:column="14">=<pos:position pos:line="861" pos:column="15"/></operator> <name><name pos:line="861" pos:column="16">data<pos:position pos:line="861" pos:column="20"/></name><operator pos:line="861" pos:column="20">-&gt;<pos:position pos:line="861" pos:column="25"/></operator><name pos:line="861" pos:column="22">state<pos:position pos:line="861" pos:column="27"/></name><operator pos:line="861" pos:column="27">.<pos:position pos:line="861" pos:column="28"/></operator><name pos:line="861" pos:column="28">headerbuff<pos:position pos:line="861" pos:column="38"/></name></name></expr>;<pos:position pos:line="861" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="862" pos:column="5">k<pos:position pos:line="862" pos:column="6"/></name><operator pos:line="862" pos:column="6">-&gt;<pos:position pos:line="862" pos:column="11"/></operator><name pos:line="862" pos:column="8">hbuflen<pos:position pos:line="862" pos:column="15"/></name></name> <operator pos:line="862" pos:column="16">=<pos:position pos:line="862" pos:column="17"/></operator> <literal type="number" pos:line="862" pos:column="18">0<pos:position pos:line="862" pos:column="19"/></literal></expr>;<pos:position pos:line="862" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="863" pos:column="4"/></block>
  while<condition pos:line="864" pos:column="8">(<expr><operator pos:line="864" pos:column="9">*<pos:position pos:line="864" pos:column="10"/></operator><name><name pos:line="864" pos:column="10">k<pos:position pos:line="864" pos:column="11"/></name><operator pos:line="864" pos:column="11">-&gt;<pos:position pos:line="864" pos:column="16"/></operator><name pos:line="864" pos:column="13">str<pos:position pos:line="864" pos:column="16"/></name></name></expr>)<pos:position pos:line="864" pos:column="17"/></condition>;<pos:position pos:line="864" pos:column="18"/></do> <comment type="block" pos:line="864" pos:column="19">/* header line within buffer */</comment>

  <comment type="block" pos:line="866" pos:column="3">/* We might have reached the end of the header part here, but
     there might be a non-header part left in the end of the read
     buffer. */</comment>

  <return pos:line="870" pos:column="3">return <expr><name pos:line="870" pos:column="10">CURLE_OK<pos:position pos:line="870" pos:column="18"/></name></expr>;<pos:position pos:line="870" pos:column="19"/></return>
}<pos:position pos:line="871" pos:column="2"/></block></function></unit>
