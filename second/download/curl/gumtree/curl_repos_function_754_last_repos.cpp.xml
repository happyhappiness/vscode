<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_754_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">read_wincon<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">fd<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">void<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">buf<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">size_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">count<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">HANDLE<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">handle<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name pos:line="3" pos:column="19">NULL<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">DWORD<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">mode<pos:position pos:line="4" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="15">rcount<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">BOOL<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">success<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name pos:line="7" pos:column="6">fd<pos:position pos:line="7" pos:column="8"/></name> <operator pos:line="7" pos:column="9">==<pos:position pos:line="7" pos:column="11"/></operator> <call><name pos:line="7" pos:column="12">fileno<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name pos:line="7" pos:column="19">stdin<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">handle<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">GetStdHandle<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">STD_INPUT_HANDLE<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="9" pos:column="4"/></block></then>
  <else pos:line="10" pos:column="3">else <block pos:line="10" pos:column="8">{
    <return pos:line="11" pos:column="5">return <expr><call><name pos:line="11" pos:column="12">read<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">fd<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="21">buf<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">count<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></else></if>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><call><name pos:line="14" pos:column="6">GetConsoleMode<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">handle<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="30">mode<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="36"/></condition><then pos:line="14" pos:column="36"> <block pos:line="14" pos:column="37">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">success<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">ReadConsole<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">handle<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">buf<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="40">curlx_uztoul<pos:position pos:line="15" pos:column="52"/></name><argument_list pos:line="15" pos:column="52">(<argument><expr><name pos:line="15" pos:column="53">count<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="15" pos:column="61">&amp;<pos:position pos:line="15" pos:column="66"/></operator><name pos:line="15" pos:column="62">rcount<pos:position pos:line="15" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="70">NULL<pos:position pos:line="15" pos:column="74"/></name></expr></argument>)<pos:position pos:line="15" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="76"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then>
  <else pos:line="17" pos:column="3">else <block pos:line="17" pos:column="8">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">success<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">ReadFile<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">handle<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="32">buf<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="37">curlx_uztoul<pos:position pos:line="18" pos:column="49"/></name><argument_list pos:line="18" pos:column="49">(<argument><expr><name pos:line="18" pos:column="50">count<pos:position pos:line="18" pos:column="55"/></name></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="18" pos:column="58">&amp;<pos:position pos:line="18" pos:column="63"/></operator><name pos:line="18" pos:column="59">rcount<pos:position pos:line="18" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="67">NULL<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></else></if>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">success<pos:position pos:line="20" pos:column="13"/></name></expr>)<pos:position pos:line="20" pos:column="14"/></condition><then pos:line="20" pos:column="14"> <block pos:line="20" pos:column="15">{
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">rcount<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="24" pos:column="3">errno<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">GetLastError<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">()<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
  <return pos:line="25" pos:column="3">return <expr><operator pos:line="25" pos:column="10">-<pos:position pos:line="25" pos:column="11"/></operator><literal type="number" pos:line="25" pos:column="11">1<pos:position pos:line="25" pos:column="12"/></literal></expr>;<pos:position pos:line="25" pos:column="13"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
