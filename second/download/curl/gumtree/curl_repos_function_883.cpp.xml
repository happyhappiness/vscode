<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_883.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">bindlocal<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">curl_socket_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">sockfd<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">af<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">unsigned<pos:position pos:line="2" pos:column="65"/></name> <name pos:line="2" pos:column="66">int<pos:position pos:line="2" pos:column="69"/></name></type> <name pos:line="2" pos:column="70">scope<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SessionHandle<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name><name pos:line="4" pos:column="32">conn<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">data<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="6" pos:column="31"/></name></name></type> <name pos:line="6" pos:column="32">sa<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">sockaddr<pos:position pos:line="7" pos:column="18"/></name></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">sock<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><operator pos:line="7" pos:column="27">(<pos:position pos:line="7" pos:column="28"/></operator>struct <name pos:line="7" pos:column="35">sockaddr<pos:position pos:line="7" pos:column="43"/></name> <operator pos:line="7" pos:column="44">*<pos:position pos:line="7" pos:column="45"/></operator><operator pos:line="7" pos:column="45">)<pos:position pos:line="7" pos:column="46"/></operator><operator pos:line="7" pos:column="46">&amp;<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="47">sa<pos:position pos:line="7" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>  <comment type="block" pos:line="7" pos:column="52">/* bind to this address */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socklen_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">sizeof_sa<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><literal type="number" pos:line="8" pos:column="30">0<pos:position pos:line="8" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt> <comment type="block" pos:line="8" pos:column="33">/* size of the data sock points to */</comment>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">sockaddr_in<pos:position pos:line="9" pos:column="21"/></name></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">si4<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><operator pos:line="9" pos:column="29">(<pos:position pos:line="9" pos:column="30"/></operator>struct <name pos:line="9" pos:column="37">sockaddr_in<pos:position pos:line="9" pos:column="48"/></name> <operator pos:line="9" pos:column="49">*<pos:position pos:line="9" pos:column="50"/></operator><operator pos:line="9" pos:column="50">)<pos:position pos:line="9" pos:column="51"/></operator><operator pos:line="9" pos:column="51">&amp;<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="52">sa<pos:position pos:line="9" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="55"/></decl_stmt>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">ENABLE_IPV6<pos:position pos:line="10" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">sockaddr_in6<pos:position pos:line="11" pos:column="22"/></name></name> <modifier pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></modifier></type><name pos:line="11" pos:column="24">si6<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><operator pos:line="11" pos:column="30">(<pos:position pos:line="11" pos:column="31"/></operator>struct <name pos:line="11" pos:column="38">sockaddr_in6<pos:position pos:line="11" pos:column="50"/></name> <operator pos:line="11" pos:column="51">*<pos:position pos:line="11" pos:column="52"/></operator><operator pos:line="11" pos:column="52">)<pos:position pos:line="11" pos:column="53"/></operator><operator pos:line="11" pos:column="53">&amp;<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="54">sa<pos:position pos:line="11" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="57"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">Curl_dns_entry<pos:position pos:line="14" pos:column="24"/></name></name> <modifier pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></modifier></type><name pos:line="14" pos:column="26">h<pos:position pos:line="14" pos:column="27"/></name><init pos:line="14" pos:column="27">=<expr><name pos:line="14" pos:column="28">NULL<pos:position pos:line="14" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">unsigned<pos:position pos:line="15" pos:column="11"/></name> <name pos:line="15" pos:column="12">short<pos:position pos:line="15" pos:column="17"/></name></type> <name pos:line="15" pos:column="18">port<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><name><name pos:line="15" pos:column="25">data<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">set<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">.<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">localport<pos:position pos:line="15" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="15" pos:column="45"/></decl_stmt> <comment type="block" pos:line="15" pos:column="46">/* use this port number, 0 for
                                                "random" */</comment>
  <comment type="block" pos:line="17" pos:column="3">/* how many port numbers to try to bind to, increasing one at a time */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type> <name pos:line="18" pos:column="7">portnum<pos:position pos:line="18" pos:column="14"/></name> <init pos:line="18" pos:column="15">= <expr><name><name pos:line="18" pos:column="17">data<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">set<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">.<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">localportrange<pos:position pos:line="18" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="19" pos:column="3">const<pos:position pos:line="19" pos:column="8"/></specifier> <name pos:line="19" pos:column="9">char<pos:position pos:line="19" pos:column="13"/></name> <modifier pos:line="19" pos:column="14">*<pos:position pos:line="19" pos:column="15"/></modifier></type><name pos:line="19" pos:column="15">dev<pos:position pos:line="19" pos:column="18"/></name> <init pos:line="19" pos:column="19">= <expr><name><name pos:line="19" pos:column="21">data<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">-&gt;<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="27">set<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">.<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">str<pos:position pos:line="19" pos:column="34"/></name><index pos:line="19" pos:column="34">[<expr><name pos:line="19" pos:column="35">STRING_DEVICE<pos:position pos:line="19" pos:column="48"/></name></expr>]<pos:position pos:line="19" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="19" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">error<pos:position pos:line="20" pos:column="12"/></name></decl>;<pos:position pos:line="20" pos:column="13"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="22" pos:column="3">/*************************************************************
   * Select device to bind socket to
   *************************************************************/</comment>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><operator pos:line="25" pos:column="6">!<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">dev<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">&amp;&amp;<pos:position pos:line="25" pos:column="21"/></operator> <operator pos:line="25" pos:column="14">!<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">port<pos:position pos:line="25" pos:column="19"/></name></expr>)<pos:position pos:line="25" pos:column="20"/></condition><then pos:line="25" pos:column="20">
    <comment type="block" pos:line="26" pos:column="5">/* no local kind of binding was requested */</comment>
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">CURLE_OK<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="29" pos:column="3">memset<pos:position pos:line="29" pos:column="9"/></name><argument_list pos:line="29" pos:column="9">(<argument><expr><operator pos:line="29" pos:column="10">&amp;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="11">sa<pos:position pos:line="29" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="15">0<pos:position pos:line="29" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="18">sizeof<argument_list pos:line="29" pos:column="24">(<argument><expr pos:line="29" pos:column="25">struct <name pos:line="29" pos:column="32">Curl_sockaddr_storage<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="56"/></expr_stmt>

  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">dev<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">&amp;&amp;<pos:position pos:line="31" pos:column="20"/></operator> <operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><call><name pos:line="31" pos:column="14">strlen<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">dev<pos:position pos:line="31" pos:column="24"/></name></expr></argument>)<pos:position pos:line="31" pos:column="25"/></argument_list></call><operator pos:line="31" pos:column="25">&lt;<pos:position pos:line="31" pos:column="29"/></operator><literal type="number" pos:line="31" pos:column="26">255<pos:position pos:line="31" pos:column="29"/></literal><operator pos:line="31" pos:column="29">)<pos:position pos:line="31" pos:column="30"/></operator></expr> )<pos:position pos:line="31" pos:column="32"/></condition><then pos:line="31" pos:column="32"> <block pos:line="31" pos:column="33">{
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">char<pos:position pos:line="32" pos:column="9"/></name></type> <name><name pos:line="32" pos:column="10">myhost<pos:position pos:line="32" pos:column="16"/></name><index pos:line="32" pos:column="16">[<expr><literal type="number" pos:line="32" pos:column="17">256<pos:position pos:line="32" pos:column="20"/></literal></expr>]<pos:position pos:line="32" pos:column="21"/></index></name> <init pos:line="32" pos:column="22">= <expr><literal type="string" pos:line="32" pos:column="24">""<pos:position pos:line="32" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">int<pos:position pos:line="33" pos:column="8"/></name></type> <name pos:line="33" pos:column="9">done<pos:position pos:line="33" pos:column="13"/></name> <init pos:line="33" pos:column="14">= <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="33" pos:column="18"/></decl_stmt> <comment type="block" pos:line="33" pos:column="19">/* -1 for error, 1 for address found */</comment>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">bool<pos:position pos:line="34" pos:column="9"/></name></type> <name pos:line="34" pos:column="10">is_interface<pos:position pos:line="34" pos:column="22"/></name> <init pos:line="34" pos:column="23">= <expr><name pos:line="34" pos:column="25">FALSE<pos:position pos:line="34" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">bool<pos:position pos:line="35" pos:column="9"/></name></type> <name pos:line="35" pos:column="10">is_host<pos:position pos:line="35" pos:column="17"/></name> <init pos:line="35" pos:column="18">= <expr><name pos:line="35" pos:column="20">FALSE<pos:position pos:line="35" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="36" pos:column="5">static<pos:position pos:line="36" pos:column="11"/></specifier> <type><specifier pos:line="36" pos:column="12">const<pos:position pos:line="36" pos:column="17"/></specifier> <name pos:line="36" pos:column="18">char<pos:position pos:line="36" pos:column="22"/></name> <modifier pos:line="36" pos:column="23">*<pos:position pos:line="36" pos:column="24"/></modifier></type><name pos:line="36" pos:column="24">if_prefix<pos:position pos:line="36" pos:column="33"/></name> <init pos:line="36" pos:column="34">= <expr><literal type="string" pos:line="36" pos:column="36">"if!"<pos:position pos:line="36" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="36" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="37" pos:column="5">static<pos:position pos:line="37" pos:column="11"/></specifier> <type><specifier pos:line="37" pos:column="12">const<pos:position pos:line="37" pos:column="17"/></specifier> <name pos:line="37" pos:column="18">char<pos:position pos:line="37" pos:column="22"/></name> <modifier pos:line="37" pos:column="23">*<pos:position pos:line="37" pos:column="24"/></modifier></type><name pos:line="37" pos:column="24">host_prefix<pos:position pos:line="37" pos:column="35"/></name> <init pos:line="37" pos:column="36">= <expr><literal type="string" pos:line="37" pos:column="38">"host!"<pos:position pos:line="37" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="37" pos:column="46"/></decl_stmt>

    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><call><name pos:line="39" pos:column="8">strncmp<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">if_prefix<pos:position pos:line="39" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="27">dev<pos:position pos:line="39" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="32">strlen<pos:position pos:line="39" pos:column="38"/></name><argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">if_prefix<pos:position pos:line="39" pos:column="48"/></name></expr></argument>)<pos:position pos:line="39" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="50"/></argument_list></call> <operator pos:line="39" pos:column="51">==<pos:position pos:line="39" pos:column="53"/></operator> <literal type="number" pos:line="39" pos:column="54">0<pos:position pos:line="39" pos:column="55"/></literal></expr>)<pos:position pos:line="39" pos:column="56"/></condition><then pos:line="39" pos:column="56"> <block pos:line="39" pos:column="57">{
      <expr_stmt><expr><name pos:line="40" pos:column="7">dev<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">+=<pos:position pos:line="40" pos:column="13"/></operator> <call><name pos:line="40" pos:column="14">strlen<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">if_prefix<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="41" pos:column="7">is_interface<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">TRUE<pos:position pos:line="41" pos:column="26"/></name></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
    <elseif pos:line="43" pos:column="5">else <if pos:line="43" pos:column="10">if<condition pos:line="43" pos:column="12">(<expr><call><name pos:line="43" pos:column="13">strncmp<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">host_prefix<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="34">dev<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="39">strlen<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">host_prefix<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call> <operator pos:line="43" pos:column="60">==<pos:position pos:line="43" pos:column="62"/></operator> <literal type="number" pos:line="43" pos:column="63">0<pos:position pos:line="43" pos:column="64"/></literal></expr>)<pos:position pos:line="43" pos:column="65"/></condition><then pos:line="43" pos:column="65"> <block pos:line="43" pos:column="66">{
      <expr_stmt><expr><name pos:line="44" pos:column="7">dev<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">+=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">strlen<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name pos:line="44" pos:column="21">host_prefix<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="45" pos:column="7">is_host<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator> <name pos:line="45" pos:column="17">TRUE<pos:position pos:line="45" pos:column="21"/></name></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="48" pos:column="5">/* interface */</comment>
    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><operator pos:line="49" pos:column="8">!<pos:position pos:line="49" pos:column="9"/></operator><name pos:line="49" pos:column="9">is_host<pos:position pos:line="49" pos:column="16"/></name></expr>)<pos:position pos:line="49" pos:column="17"/></condition><then pos:line="49" pos:column="17"> <block pos:line="49" pos:column="18">{
      <switch pos:line="50" pos:column="7">switch<condition pos:line="50" pos:column="13">(<expr><call><name pos:line="50" pos:column="14">Curl_if2ip<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">af<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="29">scope<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="36">conn<pos:position pos:line="50" pos:column="40"/></name><operator pos:line="50" pos:column="40">-&gt;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="42">scope_id<pos:position pos:line="50" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="52">dev<pos:position pos:line="50" pos:column="55"/></name></expr></argument>,
                        <argument><expr><name pos:line="51" pos:column="25">myhost<pos:position pos:line="51" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="33">sizeof<argument_list pos:line="51" pos:column="39">(<argument><expr><name pos:line="51" pos:column="40">myhost<pos:position pos:line="51" pos:column="46"/></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="49"/></condition> <block pos:line="51" pos:column="50">{
        <case pos:line="52" pos:column="9">case <expr><name pos:line="52" pos:column="14">IF2IP_NOT_FOUND<pos:position pos:line="52" pos:column="29"/></name></expr>:<pos:position pos:line="52" pos:column="30"/></case>
          <if pos:line="53" pos:column="11">if<condition pos:line="53" pos:column="13">(<expr><name pos:line="53" pos:column="14">is_interface<pos:position pos:line="53" pos:column="26"/></name></expr>)<pos:position pos:line="53" pos:column="27"/></condition><then pos:line="53" pos:column="27"> <block pos:line="53" pos:column="28">{
            <comment type="block" pos:line="54" pos:column="13">/* Do not fall back to treating it as a host name */</comment>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">failf<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">data<pos:position pos:line="55" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="25">"Couldn't bind to interface '%s'"<pos:position pos:line="55" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="60">dev<pos:position pos:line="55" pos:column="63"/></name></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="65"/></expr_stmt>
            <return pos:line="56" pos:column="13">return <expr><name pos:line="56" pos:column="20">CURLE_INTERFACE_FAILED<pos:position pos:line="56" pos:column="42"/></name></expr>;<pos:position pos:line="56" pos:column="43"/></return>
          }<pos:position pos:line="57" pos:column="12"/></block></then></if>
          <break pos:line="58" pos:column="11">break;<pos:position pos:line="58" pos:column="17"/></break>
        <case pos:line="59" pos:column="9">case <expr><name pos:line="59" pos:column="14">IF2IP_AF_NOT_SUPPORTED<pos:position pos:line="59" pos:column="36"/></name></expr>:<pos:position pos:line="59" pos:column="37"/></case>
          <comment type="block" pos:line="60" pos:column="11">/* Signal the caller to try another address family if available */</comment>
          <return pos:line="61" pos:column="11">return <expr><name pos:line="61" pos:column="18">CURLE_UNSUPPORTED_PROTOCOL<pos:position pos:line="61" pos:column="44"/></name></expr>;<pos:position pos:line="61" pos:column="45"/></return>
        <case pos:line="62" pos:column="9">case <expr><name pos:line="62" pos:column="14">IF2IP_FOUND<pos:position pos:line="62" pos:column="25"/></name></expr>:<pos:position pos:line="62" pos:column="26"/></case>
          <expr_stmt><expr><name pos:line="63" pos:column="11">is_interface<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator> <name pos:line="63" pos:column="26">TRUE<pos:position pos:line="63" pos:column="30"/></name></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>
          <comment type="block" pos:line="64" pos:column="11">/*
           * We now have the numerical IP address in the 'myhost' buffer
           */</comment>
          <expr_stmt><expr><call><name pos:line="67" pos:column="11">infof<pos:position pos:line="67" pos:column="16"/></name><argument_list pos:line="67" pos:column="16">(<argument><expr><name pos:line="67" pos:column="17">data<pos:position pos:line="67" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="23">"Local Interface %s is ip %s using address family %i\n"<pos:position pos:line="67" pos:column="78"/></literal></expr></argument>,
                <argument><expr><name pos:line="68" pos:column="17">dev<pos:position pos:line="68" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="22">myhost<pos:position pos:line="68" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="30">af<pos:position pos:line="68" pos:column="32"/></name></expr></argument>)<pos:position pos:line="68" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="34"/></expr_stmt>
          <expr_stmt><expr><name pos:line="69" pos:column="11">done<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <literal type="number" pos:line="69" pos:column="18">1<pos:position pos:line="69" pos:column="19"/></literal></expr>;<pos:position pos:line="69" pos:column="20"/></expr_stmt>

<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef<pos:position pos:line="71" pos:column="7"/></cpp:directive> <name pos:line="71" pos:column="8">SO_BINDTODEVICE<pos:position pos:line="71" pos:column="23"/></name></cpp:ifdef>
          <comment type="block" pos:line="72" pos:column="11">/* I am not sure any other OSs than Linux that provide this feature,
           * and at the least I cannot test. --Ben
           *
           * This feature allows one to tightly bind the local socket to a
           * particular interface.  This will force even requests to other
           * local interfaces to go out the external interface.
           *
           *
           * Only bind to the interface when specified as interface, not just
           * as a hostname or ip address.
           */</comment>
          <if pos:line="83" pos:column="11">if<condition pos:line="83" pos:column="13">(<expr><call><name pos:line="83" pos:column="14">setsockopt<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">sockfd<pos:position pos:line="83" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="33">SOL_SOCKET<pos:position pos:line="83" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="45">SO_BINDTODEVICE<pos:position pos:line="83" pos:column="60"/></name></expr></argument>,
                        <argument><expr><name pos:line="84" pos:column="25">dev<pos:position pos:line="84" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="30">(<pos:position pos:line="84" pos:column="31"/></operator><name pos:line="84" pos:column="31">curl_socklen_t<pos:position pos:line="84" pos:column="45"/></name><operator pos:line="84" pos:column="45">)<pos:position pos:line="84" pos:column="46"/></operator><call><name pos:line="84" pos:column="46">strlen<pos:position pos:line="84" pos:column="52"/></name><argument_list pos:line="84" pos:column="52">(<argument><expr><name pos:line="84" pos:column="53">dev<pos:position pos:line="84" pos:column="56"/></name></expr></argument>)<pos:position pos:line="84" pos:column="57"/></argument_list></call><operator pos:line="84" pos:column="57">+<pos:position pos:line="84" pos:column="58"/></operator><literal type="number" pos:line="84" pos:column="58">1<pos:position pos:line="84" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="60"/></argument_list></call> <operator pos:line="84" pos:column="61">!=<pos:position pos:line="84" pos:column="63"/></operator> <literal type="number" pos:line="84" pos:column="64">0<pos:position pos:line="84" pos:column="65"/></literal></expr>)<pos:position pos:line="84" pos:column="66"/></condition><then pos:line="84" pos:column="66"> <block pos:line="84" pos:column="67">{
            <expr_stmt><expr><name pos:line="85" pos:column="13">error<pos:position pos:line="85" pos:column="18"/></name> <operator pos:line="85" pos:column="19">=<pos:position pos:line="85" pos:column="20"/></operator> <name pos:line="85" pos:column="21">SOCKERRNO<pos:position pos:line="85" pos:column="30"/></name></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">infof<pos:position pos:line="86" pos:column="18"/></name><argument_list pos:line="86" pos:column="18">(<argument><expr><name pos:line="86" pos:column="19">data<pos:position pos:line="86" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="25">"SO_BINDTODEVICE %s failed with errno %d: %s;"<pos:position pos:line="86" pos:column="71"/></literal>
                  <literal type="string" pos:line="87" pos:column="19">" will do regular bind\n"<pos:position pos:line="87" pos:column="44"/></literal></expr></argument>,
                  <argument><expr><name pos:line="88" pos:column="19">dev<pos:position pos:line="88" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="24">error<pos:position pos:line="88" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="88" pos:column="31">Curl_strerror<pos:position pos:line="88" pos:column="44"/></name><argument_list pos:line="88" pos:column="44">(<argument><expr><name pos:line="88" pos:column="45">conn<pos:position pos:line="88" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="51">error<pos:position pos:line="88" pos:column="56"/></name></expr></argument>)<pos:position pos:line="88" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="59"/></expr_stmt>
            <comment type="block" pos:line="89" pos:column="13">/* This is typically "errno 1, error: Operation not permitted" if
               you're not running as root or another suitable privileged
               user */</comment>
          }<pos:position pos:line="92" pos:column="12"/></block></then></if>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif>
          <break pos:line="94" pos:column="11">break;<pos:position pos:line="94" pos:column="17"/></break>
      }<pos:position pos:line="95" pos:column="8"/></block></switch>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>
    <if pos:line="97" pos:column="5">if<condition pos:line="97" pos:column="7">(<expr><operator pos:line="97" pos:column="8">!<pos:position pos:line="97" pos:column="9"/></operator><name pos:line="97" pos:column="9">is_interface<pos:position pos:line="97" pos:column="21"/></name></expr>)<pos:position pos:line="97" pos:column="22"/></condition><then pos:line="97" pos:column="22"> <block pos:line="97" pos:column="23">{
      <comment type="block" pos:line="98" pos:column="7">/*
       * This was not an interface, resolve the name as a host name
       * or IP number
       *
       * Temporarily force name resolution to use only the address type
       * of the connection. The resolve functions should really be changed
       * to take a type parameter instead.
       */</comment>
      <decl_stmt><decl><type><name pos:line="106" pos:column="7">long<pos:position pos:line="106" pos:column="11"/></name></type> <name pos:line="106" pos:column="12">ipver<pos:position pos:line="106" pos:column="17"/></name> <init pos:line="106" pos:column="18">= <expr><name><name pos:line="106" pos:column="20">conn<pos:position pos:line="106" pos:column="24"/></name><operator pos:line="106" pos:column="24">-&gt;<pos:position pos:line="106" pos:column="29"/></operator><name pos:line="106" pos:column="26">ip_version<pos:position pos:line="106" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="106" pos:column="37"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="107" pos:column="7">int<pos:position pos:line="107" pos:column="10"/></name></type> <name pos:line="107" pos:column="11">rc<pos:position pos:line="107" pos:column="13"/></name></decl>;<pos:position pos:line="107" pos:column="14"/></decl_stmt>

      <if pos:line="109" pos:column="7">if<condition pos:line="109" pos:column="9">(<expr><name pos:line="109" pos:column="10">af<pos:position pos:line="109" pos:column="12"/></name> <operator pos:line="109" pos:column="13">==<pos:position pos:line="109" pos:column="15"/></operator> <name pos:line="109" pos:column="16">AF_INET<pos:position pos:line="109" pos:column="23"/></name></expr>)<pos:position pos:line="109" pos:column="24"/></condition><then pos:line="109" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="110" pos:column="9">conn<pos:position pos:line="110" pos:column="13"/></name><operator pos:line="110" pos:column="13">-&gt;<pos:position pos:line="110" pos:column="18"/></operator><name pos:line="110" pos:column="15">ip_version<pos:position pos:line="110" pos:column="25"/></name></name> <operator pos:line="110" pos:column="26">=<pos:position pos:line="110" pos:column="27"/></operator> <name pos:line="110" pos:column="28">CURL_IPRESOLVE_V4<pos:position pos:line="110" pos:column="45"/></name></expr>;<pos:position pos:line="110" pos:column="46"/></expr_stmt></block></then></if></block></then></if></block></then></if></block></function>
<cpp:ifdef pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">ifdef<pos:position pos:line="111" pos:column="7"/></cpp:directive></cpp:ifdef> </unit>
