<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_823_curl-7.51.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ParameterError<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">str2offset<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">curl_off_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">val<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">str<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">endptr<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><name><name pos:line="4" pos:column="6">str<pos:position pos:line="4" pos:column="9"/></name><index pos:line="4" pos:column="9">[<expr><literal type="number" pos:line="4" pos:column="10">0<pos:position pos:line="4" pos:column="11"/></literal></expr>]<pos:position pos:line="4" pos:column="12"/></index></name> <operator pos:line="4" pos:column="13">==<pos:position pos:line="4" pos:column="15"/></operator> <literal type="char" pos:line="4" pos:column="16">'-'<pos:position pos:line="4" pos:column="19"/></literal></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20">
    <comment type="block" pos:line="5" pos:column="5">/* offsets aren't negative, this indicates weird input */</comment>
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">PARAM_NEGATIVE_NUMERIC<pos:position pos:line="6" pos:column="34"/></name></expr>;<pos:position pos:line="6" pos:column="35"/></return></block></then></if>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive><expr><operator pos:line="8" pos:column="4">(<pos:position pos:line="8" pos:column="5"/></operator><name pos:line="8" pos:column="5">CURL_SIZEOF_CURL_OFF_T<pos:position pos:line="8" pos:column="27"/></name> <operator pos:line="8" pos:column="28">&gt;<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="30">CURL_SIZEOF_LONG<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">)<pos:position pos:line="8" pos:column="47"/></operator></expr></cpp:if>
  <expr_stmt><expr><operator pos:line="9" pos:column="3">*<pos:position pos:line="9" pos:column="4"/></operator><name pos:line="9" pos:column="4">val<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <call><name pos:line="9" pos:column="10">curlx_strtoofft<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">str<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="31">&amp;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="32">endptr<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="40">0<pos:position pos:line="9" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">(<pos:position pos:line="10" pos:column="7"/></operator><operator pos:line="10" pos:column="7">*<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">val<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">==<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">CURL_OFF_T_MAX<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">||<pos:position pos:line="10" pos:column="32"/></operator> <operator pos:line="10" pos:column="33">*<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="34">val<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">==<pos:position pos:line="10" pos:column="40"/></operator> <name pos:line="10" pos:column="41">CURL_OFF_T_MIN<pos:position pos:line="10" pos:column="55"/></name><operator pos:line="10" pos:column="55">)<pos:position pos:line="10" pos:column="56"/></operator> <operator pos:line="10" pos:column="57">&amp;&amp;<pos:position pos:line="10" pos:column="67"/></operator> <operator pos:line="10" pos:column="60">(<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="61">ERRNO<pos:position pos:line="10" pos:column="66"/></name> <operator pos:line="10" pos:column="67">==<pos:position pos:line="10" pos:column="69"/></operator> <name pos:line="10" pos:column="70">ERANGE<pos:position pos:line="10" pos:column="76"/></name><operator pos:line="10" pos:column="76">)<pos:position pos:line="10" pos:column="77"/></operator></expr>)<pos:position pos:line="10" pos:column="78"/></condition><then pos:line="10" pos:column="78">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">PARAM_BAD_NUMERIC<pos:position pos:line="11" pos:column="29"/></name></expr>;<pos:position pos:line="11" pos:column="30"/></return></block></then></if>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">val<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <call><name pos:line="13" pos:column="10">strtol<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">str<pos:position pos:line="13" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="22">&amp;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="23">endptr<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="31">0<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">(<pos:position pos:line="14" pos:column="7"/></operator><operator pos:line="14" pos:column="7">*<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">val<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">==<pos:position pos:line="14" pos:column="14"/></operator> <name pos:line="14" pos:column="15">LONG_MIN<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">||<pos:position pos:line="14" pos:column="26"/></operator> <operator pos:line="14" pos:column="27">*<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">val<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">==<pos:position pos:line="14" pos:column="34"/></operator> <name pos:line="14" pos:column="35">LONG_MAX<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">)<pos:position pos:line="14" pos:column="44"/></operator> <operator pos:line="14" pos:column="45">&amp;&amp;<pos:position pos:line="14" pos:column="55"/></operator> <name pos:line="14" pos:column="48">ERRNO<pos:position pos:line="14" pos:column="53"/></name> <operator pos:line="14" pos:column="54">==<pos:position pos:line="14" pos:column="56"/></operator> <name pos:line="14" pos:column="57">ERANGE<pos:position pos:line="14" pos:column="63"/></name></expr>)<pos:position pos:line="14" pos:column="64"/></condition><then pos:line="14" pos:column="64">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">PARAM_BAD_NUMERIC<pos:position pos:line="15" pos:column="29"/></name></expr>;<pos:position pos:line="15" pos:column="30"/></return></block></then></if>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">(<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">endptr<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">!=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">str<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">)<pos:position pos:line="17" pos:column="21"/></operator> <operator pos:line="17" pos:column="22">&amp;&amp;<pos:position pos:line="17" pos:column="32"/></operator> <operator pos:line="17" pos:column="25">(<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">endptr<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">==<pos:position pos:line="17" pos:column="35"/></operator> <name pos:line="17" pos:column="36">str<pos:position pos:line="17" pos:column="39"/></name> <operator pos:line="17" pos:column="40">+<pos:position pos:line="17" pos:column="41"/></operator> <call><name pos:line="17" pos:column="42">strlen<pos:position pos:line="17" pos:column="48"/></name><argument_list pos:line="17" pos:column="48">(<argument><expr><name pos:line="17" pos:column="49">str<pos:position pos:line="17" pos:column="52"/></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call><operator pos:line="17" pos:column="53">)<pos:position pos:line="17" pos:column="54"/></operator></expr>)<pos:position pos:line="17" pos:column="55"/></condition><then pos:line="17" pos:column="55">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">PARAM_OK<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></return></block></then></if>

  <return pos:line="20" pos:column="3">return <expr><name pos:line="20" pos:column="10">PARAM_BAD_NUMERIC<pos:position pos:line="20" pos:column="27"/></name></expr>;<pos:position pos:line="20" pos:column="28"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
