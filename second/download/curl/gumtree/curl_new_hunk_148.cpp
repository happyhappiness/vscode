    out = fopen(dumphere, "w");
    if(!out)
      return 1; /* failure */
  }

  if(c) {
    char *format_ptr;

    fputs("# Netscape HTTP Cookie File\n"
          "# http://www.netscape.com/newsref/std/cookie_spec.html\n"
          "# This file was generated by libcurl! Edit at your own risk.\n\n",
          out);
    co = c->cookies;

    while(co) {
      format_ptr = get_netscape_format(co);
      if (format_ptr == NULL) {
        fprintf(out, "#\n# Fatal libcurl error\n");
        return 1;
      }
      fprintf(out, "%s\n", format_ptr);
      free(format_ptr);
      co=co->next;
    }
  }

  if(!use_stdout)
    fclose(out);

  return 0;
}

struct curl_slist *Curl_cookie_list(struct SessionHandle *data)
{
  struct curl_slist *list = NULL;
  struct curl_slist *beg;
  struct Cookie *c;
  char *line;

  if ((data->cookies == NULL) ||
      (data->cookies->numcookies == 0))
    return NULL;

  c = data->cookies->cookies;

  beg = list;
  while (c) {
    /* fill the list with _all_ the cookies we know */
    line = get_netscape_format(c);
    if (line == NULL) {
      /* get_netscape_format returns null only if we run out of memory */

      curl_slist_free_all(beg); /* free some memory */
      return NULL;
    }
    list = curl_slist_append(list, line);
    free(line);
    c = c->next;
  }

  return list;
}

#endif /* CURL_DISABLE_HTTP || CURL_DISABLE_COOKIES */
