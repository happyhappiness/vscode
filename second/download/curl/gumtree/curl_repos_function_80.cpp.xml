<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_80.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">FormInit<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name><name pos:line="1" pos:column="14">struct<pos:position pos:line="1" pos:column="20"/></name> <name pos:line="1" pos:column="21">Form<pos:position pos:line="1" pos:column="25"/></name></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">form<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">FormData<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">formdata<pos:position pos:line="1" pos:column="58"/></name></decl></parameter> )<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if<condition pos:line="3" pos:column="5">(<expr><operator pos:line="3" pos:column="6">!<pos:position pos:line="3" pos:column="7"/></operator><name pos:line="3" pos:column="7">formdata<pos:position pos:line="3" pos:column="15"/></name></expr>)<pos:position pos:line="3" pos:column="16"/></condition><then pos:line="3" pos:column="16">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><literal type="number" pos:line="4" pos:column="12">1<pos:position pos:line="4" pos:column="13"/></literal></expr>;<pos:position pos:line="4" pos:column="14"/></return></block></then></if> <comment type="block" pos:line="4" pos:column="15">/* error */</comment>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="6" pos:column="5">0<pos:position pos:line="6" pos:column="6"/></literal></expr></cpp:if>  
  struct FormData *lastnode=formdata;

  <comment type="block" pos:line="9" pos:column="3">/* find the last node in the list */</comment>
  while(lastnode-&gt;next) {
    lastnode = lastnode-&gt;next;
  }

  <comment type="block" pos:line="14" pos:column="3">/* Now, make sure that we'll send a nice terminating sequence at the end
   * of the post. We *DONT* add this string to the size of the data since this
   * is actually AFTER the data. */</comment>
  AddFormDataf(&amp;lastnode, "\r\n\r\n");
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">form<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">-&gt;<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="9">data<pos:position pos:line="19" pos:column="13"/></name></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">formdata<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">form<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">-&gt;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="9">sent<pos:position pos:line="20" pos:column="13"/></name></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>

  <return pos:line="22" pos:column="3">return <expr><literal type="number" pos:line="22" pos:column="10">0<pos:position pos:line="22" pos:column="11"/></literal></expr>;<pos:position pos:line="22" pos:column="12"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
