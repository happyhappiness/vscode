<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1760.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ftp_state_list<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">connectdata<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">conn<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">CURLE_OK<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SessionHandle<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name><name pos:line="4" pos:column="32">conn<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">data<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* If this output is to be machine-parsed, the NLST command might be better
     to use, since the LIST command output is not specified or standard in any
     way. It has turned out that the NLST list output is not the same on all
     servers either... */</comment>

  <comment type="block" pos:line="11" pos:column="3">/*
     if FTPFILE_NOCWD was specified, we are currently in
     the user's home directory, so we should add the path
     as argument for the LIST / NLST / or custom command.
     Whether the server will support this, is uncertain.

     The other ftp_filemethods will CWD into dir/dir/ first and
     then just do LIST (in that case: nothing to do here)
  */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name> <modifier pos:line="20" pos:column="8">*<pos:position pos:line="20" pos:column="9"/></modifier></type><name pos:line="20" pos:column="9">cmd<pos:position pos:line="20" pos:column="12"/></name></decl>,<modifier pos:line="20" pos:column="13">*<pos:position pos:line="20" pos:column="14"/></modifier><decl><type ref="prev"/><name pos:line="20" pos:column="14">lstArg<pos:position pos:line="20" pos:column="20"/></name></decl>,<modifier pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="20" pos:column="22">slashPos<pos:position pos:line="20" pos:column="30"/></name></decl>;<pos:position pos:line="20" pos:column="31"/></decl_stmt>

  <expr_stmt><expr><name pos:line="22" pos:column="3">lstArg<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <name pos:line="22" pos:column="12">NULL<pos:position pos:line="22" pos:column="16"/></name></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">(<pos:position pos:line="23" pos:column="7"/></operator><name><name pos:line="23" pos:column="7">data<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">set<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">.<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">ftp_filemethod<pos:position pos:line="23" pos:column="31"/></name></name> <operator pos:line="23" pos:column="32">==<pos:position pos:line="23" pos:column="34"/></operator> <name pos:line="23" pos:column="35">FTPFILE_NOCWD<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">)<pos:position pos:line="23" pos:column="49"/></operator> <operator pos:line="23" pos:column="50">&amp;&amp;<pos:position pos:line="23" pos:column="60"/></operator>
     <name><name pos:line="24" pos:column="6">data<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">state<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">path<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">&amp;&amp;<pos:position pos:line="24" pos:column="33"/></operator>
     <name><name pos:line="25" pos:column="6">data<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">state<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">.<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">path<pos:position pos:line="25" pos:column="22"/></name><index pos:line="25" pos:column="22">[<expr><literal type="number" pos:line="25" pos:column="23">0<pos:position pos:line="25" pos:column="24"/></literal></expr>]<pos:position pos:line="25" pos:column="25"/></index></name> <operator pos:line="25" pos:column="26">&amp;&amp;<pos:position pos:line="25" pos:column="36"/></operator>
     <call><name pos:line="26" pos:column="6">strchr<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name><name pos:line="26" pos:column="13">data<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">state<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">.<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">path<pos:position pos:line="26" pos:column="29"/></name></name></expr></argument>,<argument><expr><literal type="char" pos:line="26" pos:column="30">'/'<pos:position pos:line="26" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35"> <block pos:line="26" pos:column="36">{

    <expr_stmt><expr><name pos:line="28" pos:column="5">lstArg<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name pos:line="28" pos:column="14">strdup<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name><name pos:line="28" pos:column="21">data<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">state<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">.<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="33">path<pos:position pos:line="28" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><operator pos:line="29" pos:column="8">!<pos:position pos:line="29" pos:column="9"/></operator><name pos:line="29" pos:column="9">lstArg<pos:position pos:line="29" pos:column="15"/></name></expr>)<pos:position pos:line="29" pos:column="16"/></condition><then pos:line="29" pos:column="16">
      <block type="pseudo"><return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="30" pos:column="33"/></name></expr>;<pos:position pos:line="30" pos:column="34"/></return></block></then></if>

    <comment type="block" pos:line="32" pos:column="5">/* Check if path does not end with /, as then we cut off the file part */</comment>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><name><name pos:line="33" pos:column="8">lstArg<pos:position pos:line="33" pos:column="14"/></name><index pos:line="33" pos:column="14">[<expr><call><name pos:line="33" pos:column="15">strlen<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">lstArg<pos:position pos:line="33" pos:column="28"/></name></expr></argument>)<pos:position pos:line="33" pos:column="29"/></argument_list></call> <operator pos:line="33" pos:column="30">-<pos:position pos:line="33" pos:column="31"/></operator> <literal type="number" pos:line="33" pos:column="32">1<pos:position pos:line="33" pos:column="33"/></literal></expr>]<pos:position pos:line="33" pos:column="34"/></index></name> <operator pos:line="33" pos:column="35">!=<pos:position pos:line="33" pos:column="37"/></operator> <literal type="char" pos:line="33" pos:column="38">'/'<pos:position pos:line="33" pos:column="41"/></literal></expr>)<pos:position pos:line="33" pos:column="42"/></condition><then pos:line="33" pos:column="42">  <block pos:line="33" pos:column="44">{

      <comment type="block" pos:line="35" pos:column="7">/* chop off the file part if format is dir/dir/file */</comment>
      <expr_stmt><expr><name pos:line="36" pos:column="7">slashPos<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <call><name pos:line="36" pos:column="18">strrchr<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">lstArg<pos:position pos:line="36" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="36" pos:column="33">'/'<pos:position pos:line="36" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><name pos:line="37" pos:column="10">slashPos<pos:position pos:line="37" pos:column="18"/></name></expr>)<pos:position pos:line="37" pos:column="19"/></condition><then pos:line="37" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="38" pos:column="9">*<pos:position pos:line="38" pos:column="10"/></operator><operator pos:line="38" pos:column="10">(<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">slashPos<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">+<pos:position pos:line="38" pos:column="20"/></operator><literal type="number" pos:line="38" pos:column="20">1<pos:position pos:line="38" pos:column="21"/></literal><operator pos:line="38" pos:column="21">)<pos:position pos:line="38" pos:column="22"/></operator> <operator pos:line="38" pos:column="23">=<pos:position pos:line="38" pos:column="24"/></operator> <literal type="char" pos:line="38" pos:column="25">'\0'<pos:position pos:line="38" pos:column="29"/></literal></expr>;<pos:position pos:line="38" pos:column="30"/></expr_stmt></block></then></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="42" pos:column="3">cmd<pos:position pos:line="42" pos:column="6"/></name> <operator pos:line="42" pos:column="7">=<pos:position pos:line="42" pos:column="8"/></operator> <call><name pos:line="42" pos:column="9">aprintf<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">( <argument><expr><literal type="string" pos:line="42" pos:column="18">"%s%s%s"<pos:position pos:line="42" pos:column="26"/></literal></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name pos:line="43" pos:column="18">data<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">-&gt;<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="24">set<pos:position pos:line="43" pos:column="27"/></name><operator pos:line="43" pos:column="27">.<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="28">str<pos:position pos:line="43" pos:column="31"/></name><index pos:line="43" pos:column="31">[<expr><name pos:line="43" pos:column="32">STRING_CUSTOMREQUEST<pos:position pos:line="43" pos:column="52"/></name></expr>]<pos:position pos:line="43" pos:column="53"/></index></name></expr>?<pos:position pos:line="43" pos:column="54"/></condition><then pos:line="43" pos:column="54">
                 <expr><name><name pos:line="44" pos:column="18">data<pos:position pos:line="44" pos:column="22"/></name><operator pos:line="44" pos:column="22">-&gt;<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="24">set<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">.<pos:position pos:line="44" pos:column="28"/></operator><name pos:line="44" pos:column="28">str<pos:position pos:line="44" pos:column="31"/></name><index pos:line="44" pos:column="31">[<expr><name pos:line="44" pos:column="32">STRING_CUSTOMREQUEST<pos:position pos:line="44" pos:column="52"/></name></expr>]<pos:position pos:line="44" pos:column="53"/></index></name></expr></then><else pos:line="44" pos:column="53">:
                 <expr><operator pos:line="45" pos:column="18">(<pos:position pos:line="45" pos:column="19"/></operator><ternary><condition><expr><name><name pos:line="45" pos:column="19">data<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">-&gt;<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="25">set<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">.<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="29">ftp_list_only<pos:position pos:line="45" pos:column="42"/></name></name></expr>?<pos:position pos:line="45" pos:column="43"/></condition><then><expr><literal type="string" pos:line="45" pos:column="43">"NLST"<pos:position pos:line="45" pos:column="49"/></literal></expr></then><else pos:line="45" pos:column="49">:<expr><literal type="string" pos:line="45" pos:column="50">"LIST"<pos:position pos:line="45" pos:column="56"/></literal></expr></else></ternary><operator pos:line="45" pos:column="56">)<pos:position pos:line="45" pos:column="57"/></operator></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name pos:line="46" pos:column="18">lstArg<pos:position pos:line="46" pos:column="24"/></name></expr>?<pos:position pos:line="46" pos:column="25"/></condition><then pos:line="46" pos:column="25"> <expr><literal type="string" pos:line="46" pos:column="26">" "<pos:position pos:line="46" pos:column="29"/></literal></expr></then><else pos:line="46" pos:column="29">: <expr><literal type="string" pos:line="46" pos:column="31">""<pos:position pos:line="46" pos:column="33"/></literal></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name pos:line="47" pos:column="18">lstArg<pos:position pos:line="47" pos:column="24"/></name></expr>?<pos:position pos:line="47" pos:column="25"/></condition><then pos:line="47" pos:column="25"> <expr><name pos:line="47" pos:column="26">lstArg<pos:position pos:line="47" pos:column="32"/></name></expr></then><else pos:line="47" pos:column="32">: <expr><literal type="string" pos:line="47" pos:column="34">""<pos:position pos:line="47" pos:column="36"/></literal></expr></else></ternary></expr></argument> )<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>

  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><operator pos:line="49" pos:column="6">!<pos:position pos:line="49" pos:column="7"/></operator><name pos:line="49" pos:column="7">cmd<pos:position pos:line="49" pos:column="10"/></name></expr>)<pos:position pos:line="49" pos:column="11"/></condition><then pos:line="49" pos:column="11"> <block pos:line="49" pos:column="12">{
    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><name pos:line="50" pos:column="8">lstArg<pos:position pos:line="50" pos:column="14"/></name></expr>)<pos:position pos:line="50" pos:column="15"/></condition><then pos:line="50" pos:column="15">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="7">free<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><name pos:line="51" pos:column="12">lstArg<pos:position pos:line="51" pos:column="18"/></name></expr></argument>)<pos:position pos:line="51" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="20"/></expr_stmt></block></then></if>
    <return pos:line="52" pos:column="5">return <expr><name pos:line="52" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="52" pos:column="31"/></name></expr>;<pos:position pos:line="52" pos:column="32"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="55" pos:column="3">result<pos:position pos:line="55" pos:column="9"/></name> <operator pos:line="55" pos:column="10">=<pos:position pos:line="55" pos:column="11"/></operator> <call><name pos:line="55" pos:column="12">Curl_pp_sendf<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><operator pos:line="55" pos:column="26">&amp;<pos:position pos:line="55" pos:column="31"/></operator><name><name pos:line="55" pos:column="27">conn<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">-&gt;<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="33">proto<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">.<pos:position pos:line="55" pos:column="39"/></operator><name pos:line="55" pos:column="39">ftpc<pos:position pos:line="55" pos:column="43"/></name><operator pos:line="55" pos:column="43">.<pos:position pos:line="55" pos:column="44"/></operator><name pos:line="55" pos:column="44">pp<pos:position pos:line="55" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="48">"%s"<pos:position pos:line="55" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="54">cmd<pos:position pos:line="55" pos:column="57"/></name></expr></argument>)<pos:position pos:line="55" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="59"/></expr_stmt>

  <if pos:line="57" pos:column="3">if<condition pos:line="57" pos:column="5">(<expr><name pos:line="57" pos:column="6">lstArg<pos:position pos:line="57" pos:column="12"/></name></expr>)<pos:position pos:line="57" pos:column="13"/></condition><then pos:line="57" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="5">free<pos:position pos:line="58" pos:column="9"/></name><argument_list pos:line="58" pos:column="9">(<argument><expr><name pos:line="58" pos:column="10">lstArg<pos:position pos:line="58" pos:column="16"/></name></expr></argument>)<pos:position pos:line="58" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="18"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="60" pos:column="3">free<pos:position pos:line="60" pos:column="7"/></name><argument_list pos:line="60" pos:column="7">(<argument><expr><name pos:line="60" pos:column="8">cmd<pos:position pos:line="60" pos:column="11"/></name></expr></argument>)<pos:position pos:line="60" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="13"/></expr_stmt>

  <if pos:line="62" pos:column="3">if<condition pos:line="62" pos:column="5">(<expr><name pos:line="62" pos:column="6">result<pos:position pos:line="62" pos:column="12"/></name></expr>)<pos:position pos:line="62" pos:column="13"/></condition><then pos:line="62" pos:column="13">
    <block type="pseudo"><return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">result<pos:position pos:line="63" pos:column="18"/></name></expr>;<pos:position pos:line="63" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="65" pos:column="3">state<pos:position pos:line="65" pos:column="8"/></name><argument_list pos:line="65" pos:column="8">(<argument><expr><name pos:line="65" pos:column="9">conn<pos:position pos:line="65" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="15">FTP_LIST<pos:position pos:line="65" pos:column="23"/></name></expr></argument>)<pos:position pos:line="65" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="25"/></expr_stmt>

  <return pos:line="67" pos:column="3">return <expr><name pos:line="67" pos:column="10">result<pos:position pos:line="67" pos:column="16"/></name></expr>;<pos:position pos:line="67" pos:column="17"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
