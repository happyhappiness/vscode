<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_93.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">curl_open<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">CURL<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">curl<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">url<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* We don't yet support specifying the URL at this point */</comment>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">UrlData<pos:position pos:line="4" pos:column="17"/></name></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">data<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Very simple start-up: alloc the struct, init it with zeroes and return */</comment>
  <expr_stmt><expr><name pos:line="7" pos:column="3">data<pos:position pos:line="7" pos:column="7"/></name> <operator pos:line="7" pos:column="8">=<pos:position pos:line="7" pos:column="9"/></operator> <operator pos:line="7" pos:column="10">(<pos:position pos:line="7" pos:column="11"/></operator>struct <name pos:line="7" pos:column="18">UrlData<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></operator><operator pos:line="7" pos:column="27">)<pos:position pos:line="7" pos:column="28"/></operator><call><name pos:line="7" pos:column="28">malloc<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><sizeof pos:line="7" pos:column="35">sizeof<argument_list pos:line="7" pos:column="41">(<argument><expr pos:line="7" pos:column="42">struct <name pos:line="7" pos:column="49">UrlData<pos:position pos:line="7" pos:column="56"/></name></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name pos:line="8" pos:column="6">data<pos:position pos:line="8" pos:column="10"/></name></expr>)<pos:position pos:line="8" pos:column="11"/></condition><then pos:line="8" pos:column="11"> <block pos:line="8" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">memset<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">data<pos:position pos:line="9" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="21">sizeof<argument_list pos:line="9" pos:column="27">(<argument><expr pos:line="9" pos:column="28">struct <name pos:line="9" pos:column="35">UrlData<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">data<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">handle<pos:position pos:line="10" pos:column="17"/></name></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">STRUCT_OPEN<pos:position pos:line="10" pos:column="31"/></name></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">data<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">-&gt;<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="11">interf<pos:position pos:line="11" pos:column="17"/></name></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">CURLI_NORMAL<pos:position pos:line="11" pos:column="32"/></name></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt> <comment type="block" pos:line="11" pos:column="34">/* normal interface by default */</comment>

    <comment type="block" pos:line="13" pos:column="5">/* We do some initial setup here, all those fields that can't be just 0 */</comment>

    <expr_stmt><expr><name><name pos:line="15" pos:column="5">data<pos:position pos:line="15" pos:column="9"/></name><operator pos:line="15" pos:column="9">-&gt;<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="12">headerbuff<pos:position pos:line="15" pos:column="22"/></name></name><operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator><operator pos:line="15" pos:column="23">(<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">char<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">*<pos:position pos:line="15" pos:column="29"/></operator><operator pos:line="15" pos:column="29">)<pos:position pos:line="15" pos:column="30"/></operator><call><name pos:line="15" pos:column="30">malloc<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><name pos:line="15" pos:column="37">HEADERSIZE<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><operator pos:line="16" pos:column="8">!<pos:position pos:line="16" pos:column="9"/></operator><name><name pos:line="16" pos:column="9">data<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">headerbuff<pos:position pos:line="16" pos:column="25"/></name></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26"> <block pos:line="16" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">free<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">data<pos:position pos:line="17" pos:column="16"/></name></expr></argument>)<pos:position pos:line="17" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt> <comment type="block" pos:line="17" pos:column="19">/* free the memory again */</comment>
      <return pos:line="18" pos:column="7">return <expr><name pos:line="18" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="21" pos:column="5">data<pos:position pos:line="21" pos:column="9"/></name><operator pos:line="21" pos:column="9">-&gt;<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="12">headersize<pos:position pos:line="21" pos:column="22"/></name></name><operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">HEADERSIZE<pos:position pos:line="21" pos:column="33"/></name></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>

<cpp:if pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">if<pos:position pos:line="23" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="23" pos:column="5">0<pos:position pos:line="23" pos:column="6"/></literal></expr></cpp:if>
    <comment type="block" pos:line="24" pos:column="5">/* Let's set some default values: */</comment>
    curl_setopt(data, CURLOPT_FILE, stdout); <comment type="block" pos:line="25" pos:column="46">/* default output to stdout */</comment>
    curl_setopt(data, CURLOPT_INFILE, stdin);  <comment type="block" pos:line="26" pos:column="48">/* default input from stdin */</comment>
    curl_setopt(data, CURLOPT_STDERR, stderr);  <comment type="block" pos:line="27" pos:column="49">/* default stderr to stderr! */</comment>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name pos:line="30" pos:column="5">data<pos:position pos:line="30" pos:column="9"/></name><operator pos:line="30" pos:column="9">-&gt;<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="11">out<pos:position pos:line="30" pos:column="14"/></name></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <name pos:line="30" pos:column="17">stdout<pos:position pos:line="30" pos:column="23"/></name></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt> <comment type="block" pos:line="30" pos:column="25">/* default output to stdout */</comment>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">data<pos:position pos:line="31" pos:column="9"/></name><operator pos:line="31" pos:column="9">-&gt;<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="11">in<pos:position pos:line="31" pos:column="13"/></name></name>  <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">stdin<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>  <comment type="block" pos:line="31" pos:column="25">/* default input from stdin */</comment>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">data<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">-&gt;<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="11">err<pos:position pos:line="32" pos:column="14"/></name></name>  <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <name pos:line="32" pos:column="18">stderr<pos:position pos:line="32" pos:column="24"/></name></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>  <comment type="block" pos:line="32" pos:column="27">/* default stderr to stderr */</comment>

    <expr_stmt><expr><name><name pos:line="34" pos:column="5">data<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">firstsocket<pos:position pos:line="34" pos:column="22"/></name></name> <operator pos:line="34" pos:column="23">=<pos:position pos:line="34" pos:column="24"/></operator> <operator pos:line="34" pos:column="25">-<pos:position pos:line="34" pos:column="26"/></operator><literal type="number" pos:line="34" pos:column="26">1<pos:position pos:line="34" pos:column="27"/></literal></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt> <comment type="block" pos:line="34" pos:column="29">/* no file descriptor */</comment>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">data<pos:position pos:line="35" pos:column="9"/></name><operator pos:line="35" pos:column="9">-&gt;<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="11">secondarysocket<pos:position pos:line="35" pos:column="26"/></name></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <operator pos:line="35" pos:column="29">-<pos:position pos:line="35" pos:column="30"/></operator><literal type="number" pos:line="35" pos:column="30">1<pos:position pos:line="35" pos:column="31"/></literal></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt> <comment type="block" pos:line="35" pos:column="33">/* no file descriptor */</comment>

    <comment type="block" pos:line="37" pos:column="5">/* use fwrite as default function to store output */</comment>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">data<pos:position pos:line="38" pos:column="9"/></name><operator pos:line="38" pos:column="9">-&gt;<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="11">fwrite<pos:position pos:line="38" pos:column="17"/></name></name> <operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator> <operator pos:line="38" pos:column="20">(<pos:position pos:line="38" pos:column="21"/></operator><call><call><name pos:line="38" pos:column="21">size_t<pos:position pos:line="38" pos:column="27"/></name> <argument_list pos:line="38" pos:column="28">(<argument><expr><operator pos:line="38" pos:column="29">*<pos:position pos:line="38" pos:column="30"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="31"/></argument_list></call><argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">char<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">*<pos:position pos:line="38" pos:column="38"/></operator></expr></argument>, <argument><expr><name pos:line="38" pos:column="40">size_t<pos:position pos:line="38" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="48">size_t<pos:position pos:line="38" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">FILE<pos:position pos:line="38" pos:column="60"/></name> <operator pos:line="38" pos:column="61">*<pos:position pos:line="38" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call><operator pos:line="38" pos:column="63">)<pos:position pos:line="38" pos:column="64"/></operator><name pos:line="38" pos:column="64">fwrite<pos:position pos:line="38" pos:column="70"/></name></expr>;<pos:position pos:line="38" pos:column="71"/></expr_stmt>

    <comment type="block" pos:line="40" pos:column="5">/* use fread as default function to read input */</comment>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">data<pos:position pos:line="41" pos:column="9"/></name><operator pos:line="41" pos:column="9">-&gt;<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="11">fread<pos:position pos:line="41" pos:column="16"/></name></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <operator pos:line="41" pos:column="19">(<pos:position pos:line="41" pos:column="20"/></operator><call><call><name pos:line="41" pos:column="20">size_t<pos:position pos:line="41" pos:column="26"/></name> <argument_list pos:line="41" pos:column="27">(<argument><expr><operator pos:line="41" pos:column="28">*<pos:position pos:line="41" pos:column="29"/></operator></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call><argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">char<pos:position pos:line="41" pos:column="35"/></name> <operator pos:line="41" pos:column="36">*<pos:position pos:line="41" pos:column="37"/></operator></expr></argument>, <argument><expr><name pos:line="41" pos:column="39">size_t<pos:position pos:line="41" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="47">size_t<pos:position pos:line="41" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="55">FILE<pos:position pos:line="41" pos:column="59"/></name> <operator pos:line="41" pos:column="60">*<pos:position pos:line="41" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="41" pos:column="62"/></argument_list></call><operator pos:line="41" pos:column="62">)<pos:position pos:line="41" pos:column="63"/></operator><name pos:line="41" pos:column="63">fread<pos:position pos:line="41" pos:column="68"/></name></expr>;<pos:position pos:line="41" pos:column="69"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="43" pos:column="5">data<pos:position pos:line="43" pos:column="9"/></name><operator pos:line="43" pos:column="9">-&gt;<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="11">infilesize<pos:position pos:line="43" pos:column="21"/></name></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <operator pos:line="43" pos:column="24">-<pos:position pos:line="43" pos:column="25"/></operator><literal type="number" pos:line="43" pos:column="25">1<pos:position pos:line="43" pos:column="26"/></literal></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt> <comment type="block" pos:line="43" pos:column="28">/* we don't know any size */</comment>

    <expr_stmt><expr><name><name pos:line="45" pos:column="5">data<pos:position pos:line="45" pos:column="9"/></name><operator pos:line="45" pos:column="9">-&gt;<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="11">current_speed<pos:position pos:line="45" pos:column="24"/></name></name> <operator pos:line="45" pos:column="25">=<pos:position pos:line="45" pos:column="26"/></operator> <operator pos:line="45" pos:column="27">-<pos:position pos:line="45" pos:column="28"/></operator><literal type="number" pos:line="45" pos:column="28">1<pos:position pos:line="45" pos:column="29"/></literal></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt> <comment type="block" pos:line="45" pos:column="31">/* init to negative == impossible */</comment>

    <expr_stmt><expr><operator pos:line="47" pos:column="5">*<pos:position pos:line="47" pos:column="6"/></operator><name pos:line="47" pos:column="6">curl<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">=<pos:position pos:line="47" pos:column="12"/></operator> <name pos:line="47" pos:column="13">data<pos:position pos:line="47" pos:column="17"/></name></expr>;<pos:position pos:line="47" pos:column="18"/></expr_stmt>
    <return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">CURLE_OK<pos:position pos:line="48" pos:column="20"/></name></expr>;<pos:position pos:line="48" pos:column="21"/></return>
  }<pos:position pos:line="49" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="51" pos:column="3">/* this is a very serious error */</comment>
  <return pos:line="52" pos:column="3">return <expr><name pos:line="52" pos:column="10">CURLE_OUT_OF_MEMORY<pos:position pos:line="52" pos:column="29"/></name></expr>;<pos:position pos:line="52" pos:column="30"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
