<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1467_curl-7.41.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">singlesocket<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">Curl_multi<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">multi<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><name><name pos:line="2" pos:column="26">struct<pos:position pos:line="2" pos:column="32"/></name> <name pos:line="2" pos:column="33">SessionHandle<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">data<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">socks<pos:position pos:line="4" pos:column="22"/></name><index pos:line="4" pos:column="22">[<expr><name pos:line="4" pos:column="23">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="4" pos:column="45"/></name></expr>]<pos:position pos:line="4" pos:column="46"/></index></name></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">i<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_sh_entry<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">entry<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">curl_socket_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">s<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">num<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">unsigned<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">int<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">curraction<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">remove_sock_from_hash<pos:position pos:line="10" pos:column="29"/></name></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>

  <for pos:line="12" pos:column="3">for<control pos:line="12" pos:column="6">(<init><expr><name pos:line="12" pos:column="7">i<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator><literal type="number" pos:line="12" pos:column="9">0<pos:position pos:line="12" pos:column="10"/></literal></expr>;<pos:position pos:line="12" pos:column="11"/></init> <condition><expr><name pos:line="12" pos:column="12">i<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">&lt;<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="15">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="12" pos:column="37"/></name></expr>;<pos:position pos:line="12" pos:column="38"/></condition> <incr><expr><name pos:line="12" pos:column="39">i<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">++<pos:position pos:line="12" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="43"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="13" pos:column="5">socks<pos:position pos:line="13" pos:column="10"/></name><index pos:line="13" pos:column="10">[<expr><name pos:line="13" pos:column="11">i<pos:position pos:line="13" pos:column="12"/></name></expr>]<pos:position pos:line="13" pos:column="13"/></index></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">CURL_SOCKET_BAD<pos:position pos:line="13" pos:column="31"/></name></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt></block></for>

  <comment type="block" pos:line="15" pos:column="3">/* Fill in the 'current' struct with the state as it is now: what sockets to
     supervise and for what actions */</comment>
  <expr_stmt><expr><name pos:line="17" pos:column="3">curraction<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <call><name pos:line="17" pos:column="16">multi_getsock<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">data<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="36">socks<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="43">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="67"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* We have 0 .. N sockets already and we get to know about the 0 .. M
     sockets we should have from now on. Detect the differences, remove no
     longer supervised ones and add new ones */</comment>

  <comment type="block" pos:line="23" pos:column="3">/* walk over the sockets we got right now */</comment>
  <for pos:line="24" pos:column="3">for<control pos:line="24" pos:column="6">(<init><expr><name pos:line="24" pos:column="7">i<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator><literal type="number" pos:line="24" pos:column="9">0<pos:position pos:line="24" pos:column="10"/></literal></expr>;<pos:position pos:line="24" pos:column="11"/></init> <condition><expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">i<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">&lt;<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="16">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="24" pos:column="38"/></name><operator pos:line="24" pos:column="38">)<pos:position pos:line="24" pos:column="39"/></operator> <operator pos:line="24" pos:column="40">&amp;&amp;<pos:position pos:line="24" pos:column="50"/></operator>
        <operator pos:line="25" pos:column="9">(<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">curraction<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">&amp;<pos:position pos:line="25" pos:column="26"/></operator> <operator pos:line="25" pos:column="23">(<pos:position pos:line="25" pos:column="24"/></operator><call><name pos:line="25" pos:column="24">GETSOCK_READSOCK<pos:position pos:line="25" pos:column="40"/></name><argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">i<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call> <operator pos:line="25" pos:column="44">|<pos:position pos:line="25" pos:column="45"/></operator> <call><name pos:line="25" pos:column="46">GETSOCK_WRITESOCK<pos:position pos:line="25" pos:column="63"/></name><argument_list pos:line="25" pos:column="63">(<argument><expr><name pos:line="25" pos:column="64">i<pos:position pos:line="25" pos:column="65"/></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call><operator pos:line="25" pos:column="66">)<pos:position pos:line="25" pos:column="67"/></operator><operator pos:line="25" pos:column="67">)<pos:position pos:line="25" pos:column="68"/></operator></expr>;<pos:position pos:line="25" pos:column="69"/></condition>
      <incr><expr><name pos:line="26" pos:column="7">i<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">++<pos:position pos:line="26" pos:column="10"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="11"/></control> <block pos:line="26" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">int<pos:position pos:line="27" pos:column="8"/></name></type> <name pos:line="27" pos:column="9">action<pos:position pos:line="27" pos:column="15"/></name> <init pos:line="27" pos:column="16">= <expr><name pos:line="27" pos:column="18">CURL_POLL_NONE<pos:position pos:line="27" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><name pos:line="29" pos:column="5">s<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <name><name pos:line="29" pos:column="9">socks<pos:position pos:line="29" pos:column="14"/></name><index pos:line="29" pos:column="14">[<expr><name pos:line="29" pos:column="15">i<pos:position pos:line="29" pos:column="16"/></name></expr>]<pos:position pos:line="29" pos:column="17"/></index></name></expr>;<pos:position pos:line="29" pos:column="18"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* get it from the hash */</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">entry<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <call><name pos:line="32" pos:column="13">Curl_hash_pick<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name><name pos:line="32" pos:column="28">multi<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">-&gt;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="35">sockhash<pos:position pos:line="32" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="45">(<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="46">char<pos:position pos:line="32" pos:column="50"/></name> <operator pos:line="32" pos:column="51">*<pos:position pos:line="32" pos:column="52"/></operator><operator pos:line="32" pos:column="52">)<pos:position pos:line="32" pos:column="53"/></operator><operator pos:line="32" pos:column="53">&amp;<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="54">s<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="57">sizeof<argument_list pos:line="32" pos:column="63">(<argument><expr><name pos:line="32" pos:column="64">s<pos:position pos:line="32" pos:column="65"/></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt>

    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name pos:line="34" pos:column="8">curraction<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&amp;<pos:position pos:line="34" pos:column="24"/></operator> <call><name pos:line="34" pos:column="21">GETSOCK_READSOCK<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">i<pos:position pos:line="34" pos:column="39"/></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="7">action<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">|=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">CURL_POLL_IN<pos:position pos:line="35" pos:column="29"/></name></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt></block></then></if>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><name pos:line="36" pos:column="8">curraction<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&amp;<pos:position pos:line="36" pos:column="24"/></operator> <call><name pos:line="36" pos:column="21">GETSOCK_WRITESOCK<pos:position pos:line="36" pos:column="38"/></name><argument_list pos:line="36" pos:column="38">(<argument><expr><name pos:line="36" pos:column="39">i<pos:position pos:line="36" pos:column="40"/></name></expr></argument>)<pos:position pos:line="36" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="42"/></condition><then pos:line="36" pos:column="42">
      <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="7">action<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">|=<pos:position pos:line="37" pos:column="16"/></operator> <name pos:line="37" pos:column="17">CURL_POLL_OUT<pos:position pos:line="37" pos:column="30"/></name></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt></block></then></if>

    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name pos:line="39" pos:column="8">entry<pos:position pos:line="39" pos:column="13"/></name></expr>)<pos:position pos:line="39" pos:column="14"/></condition><then pos:line="39" pos:column="14"> <block pos:line="39" pos:column="15">{
      <comment type="block" pos:line="40" pos:column="7">/* yeps, already present so check if it has the same action set */</comment>
      <if pos:line="41" pos:column="7">if<condition pos:line="41" pos:column="9">(<expr><name><name pos:line="41" pos:column="10">entry<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">-&gt;<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="17">action<pos:position pos:line="41" pos:column="23"/></name></name> <operator pos:line="41" pos:column="24">==<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="27">action<pos:position pos:line="41" pos:column="33"/></name></expr>)<pos:position pos:line="41" pos:column="34"/></condition><then pos:line="41" pos:column="34">
        <comment type="block" pos:line="42" pos:column="9">/* same, continue */</comment>
        <block type="pseudo"><continue pos:line="43" pos:column="9">continue;<pos:position pos:line="43" pos:column="18"/></continue></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then>
    <else pos:line="45" pos:column="5">else <block pos:line="45" pos:column="10">{
      <comment type="block" pos:line="46" pos:column="7">/* this is a socket we didn't have before, add it! */</comment>
      <expr_stmt><expr><name pos:line="47" pos:column="7">entry<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">=<pos:position pos:line="47" pos:column="14"/></operator> <call><name pos:line="47" pos:column="15">sh_addentry<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name><name pos:line="47" pos:column="27">multi<pos:position pos:line="47" pos:column="32"/></name><operator pos:line="47" pos:column="32">-&gt;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="34">sockhash<pos:position pos:line="47" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="44">s<pos:position pos:line="47" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="47">data<pos:position pos:line="47" pos:column="51"/></name></expr></argument>)<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt>
      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><operator pos:line="48" pos:column="10">!<pos:position pos:line="48" pos:column="11"/></operator><name pos:line="48" pos:column="11">entry<pos:position pos:line="48" pos:column="16"/></name></expr>)<pos:position pos:line="48" pos:column="17"/></condition><then pos:line="48" pos:column="17">
        <comment type="block" pos:line="49" pos:column="9">/* fatal */</comment>
        <block type="pseudo"><return pos:line="50" pos:column="9">return;<pos:position pos:line="50" pos:column="16"/></return></block></then></if>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="53" pos:column="5">/* we know (entry != NULL) at this point, see the logic above */</comment>
    <if pos:line="54" pos:column="5">if<condition pos:line="54" pos:column="7">(<expr><name><name pos:line="54" pos:column="8">multi<pos:position pos:line="54" pos:column="13"/></name><operator pos:line="54" pos:column="13">-&gt;<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="15">socket_cb<pos:position pos:line="54" pos:column="24"/></name></name></expr>)<pos:position pos:line="54" pos:column="25"/></condition><then pos:line="54" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="55" pos:column="7">multi<pos:position pos:line="55" pos:column="12"/></name><operator pos:line="55" pos:column="12">-&gt;<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="14">socket_cb<pos:position pos:line="55" pos:column="23"/></name></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">data<pos:position pos:line="55" pos:column="28"/></name></expr></argument>,
                       <argument><expr><name pos:line="56" pos:column="24">s<pos:position pos:line="56" pos:column="25"/></name></expr></argument>,
                       <argument><expr><name pos:line="57" pos:column="24">action<pos:position pos:line="57" pos:column="30"/></name></expr></argument>,
                       <argument><expr><name><name pos:line="58" pos:column="24">multi<pos:position pos:line="58" pos:column="29"/></name><operator pos:line="58" pos:column="29">-&gt;<pos:position pos:line="58" pos:column="34"/></operator><name pos:line="58" pos:column="31">socket_userp<pos:position pos:line="58" pos:column="43"/></name></name></expr></argument>,
                       <argument><expr><name><name pos:line="59" pos:column="24">entry<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">-&gt;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="31">socketp<pos:position pos:line="59" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="61" pos:column="5">entry<pos:position pos:line="61" pos:column="10"/></name><operator pos:line="61" pos:column="10">-&gt;<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="12">action<pos:position pos:line="61" pos:column="18"/></name></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <name pos:line="61" pos:column="21">action<pos:position pos:line="61" pos:column="27"/></name></expr>;<pos:position pos:line="61" pos:column="28"/></expr_stmt> <comment type="block" pos:line="61" pos:column="29">/* store the current action state */</comment>
  }<pos:position pos:line="62" pos:column="4"/></block></for>

  <expr_stmt><expr><name pos:line="64" pos:column="3">num<pos:position pos:line="64" pos:column="6"/></name> <operator pos:line="64" pos:column="7">=<pos:position pos:line="64" pos:column="8"/></operator> <name pos:line="64" pos:column="9">i<pos:position pos:line="64" pos:column="10"/></name></expr>;<pos:position pos:line="64" pos:column="11"/></expr_stmt> <comment type="block" pos:line="64" pos:column="12">/* number of sockets */</comment>

  <comment type="block" pos:line="66" pos:column="3">/* when we've walked over all the sockets we should have right now, we must
     make sure to detect sockets that are removed */</comment>
  <for pos:line="68" pos:column="3">for<control pos:line="68" pos:column="6">(<init><expr><name pos:line="68" pos:column="7">i<pos:position pos:line="68" pos:column="8"/></name><operator pos:line="68" pos:column="8">=<pos:position pos:line="68" pos:column="9"/></operator><literal type="number" pos:line="68" pos:column="9">0<pos:position pos:line="68" pos:column="10"/></literal></expr>;<pos:position pos:line="68" pos:column="11"/></init> <condition><expr><name pos:line="68" pos:column="12">i<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">&lt;<pos:position pos:line="68" pos:column="17"/></operator> <name><name pos:line="68" pos:column="15">data<pos:position pos:line="68" pos:column="19"/></name><operator pos:line="68" pos:column="19">-&gt;<pos:position pos:line="68" pos:column="24"/></operator><name pos:line="68" pos:column="21">numsocks<pos:position pos:line="68" pos:column="29"/></name></name></expr>;<pos:position pos:line="68" pos:column="30"/></condition> <incr><expr><name pos:line="68" pos:column="31">i<pos:position pos:line="68" pos:column="32"/></name><operator pos:line="68" pos:column="32">++<pos:position pos:line="68" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="68" pos:column="35"/></control> <block pos:line="68" pos:column="36">{
    <decl_stmt><decl><type><name pos:line="69" pos:column="5">int<pos:position pos:line="69" pos:column="8"/></name></type> <name pos:line="69" pos:column="9">j<pos:position pos:line="69" pos:column="10"/></name></decl>;<pos:position pos:line="69" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><name pos:line="70" pos:column="5">s<pos:position pos:line="70" pos:column="6"/></name> <operator pos:line="70" pos:column="7">=<pos:position pos:line="70" pos:column="8"/></operator> <name><name pos:line="70" pos:column="9">data<pos:position pos:line="70" pos:column="13"/></name><operator pos:line="70" pos:column="13">-&gt;<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="15">sockets<pos:position pos:line="70" pos:column="22"/></name><index pos:line="70" pos:column="22">[<expr><name pos:line="70" pos:column="23">i<pos:position pos:line="70" pos:column="24"/></name></expr>]<pos:position pos:line="70" pos:column="25"/></index></name></expr>;<pos:position pos:line="70" pos:column="26"/></expr_stmt>
    <for pos:line="71" pos:column="5">for<control pos:line="71" pos:column="8">(<init><expr><name pos:line="71" pos:column="9">j<pos:position pos:line="71" pos:column="10"/></name><operator pos:line="71" pos:column="10">=<pos:position pos:line="71" pos:column="11"/></operator><literal type="number" pos:line="71" pos:column="11">0<pos:position pos:line="71" pos:column="12"/></literal></expr>;<pos:position pos:line="71" pos:column="13"/></init> <condition><expr><name pos:line="71" pos:column="14">j<pos:position pos:line="71" pos:column="15"/></name><operator pos:line="71" pos:column="15">&lt;<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="16">num<pos:position pos:line="71" pos:column="19"/></name></expr>;<pos:position pos:line="71" pos:column="20"/></condition> <incr><expr><name pos:line="71" pos:column="21">j<pos:position pos:line="71" pos:column="22"/></name><operator pos:line="71" pos:column="22">++<pos:position pos:line="71" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="71" pos:column="25"/></control> <block pos:line="71" pos:column="26">{
      <if pos:line="72" pos:column="7">if<condition pos:line="72" pos:column="9">(<expr><name pos:line="72" pos:column="10">s<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">==<pos:position pos:line="72" pos:column="14"/></operator> <name><name pos:line="72" pos:column="15">socks<pos:position pos:line="72" pos:column="20"/></name><index pos:line="72" pos:column="20">[<expr><name pos:line="72" pos:column="21">j<pos:position pos:line="72" pos:column="22"/></name></expr>]<pos:position pos:line="72" pos:column="23"/></index></name></expr>)<pos:position pos:line="72" pos:column="24"/></condition><then pos:line="72" pos:column="24"> <block pos:line="72" pos:column="25">{
        <comment type="block" pos:line="73" pos:column="9">/* this is still supervised */</comment>
        <expr_stmt><expr><name pos:line="74" pos:column="9">s<pos:position pos:line="74" pos:column="10"/></name> <operator pos:line="74" pos:column="11">=<pos:position pos:line="74" pos:column="12"/></operator> <name pos:line="74" pos:column="13">CURL_SOCKET_BAD<pos:position pos:line="74" pos:column="28"/></name></expr>;<pos:position pos:line="74" pos:column="29"/></expr_stmt>
        <break pos:line="75" pos:column="9">break;<pos:position pos:line="75" pos:column="15"/></break>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if>
    }<pos:position pos:line="77" pos:column="6"/></block></for>
    <if pos:line="78" pos:column="5">if<condition pos:line="78" pos:column="7">(<expr><name pos:line="78" pos:column="8">s<pos:position pos:line="78" pos:column="9"/></name> <operator pos:line="78" pos:column="10">!=<pos:position pos:line="78" pos:column="12"/></operator> <name pos:line="78" pos:column="13">CURL_SOCKET_BAD<pos:position pos:line="78" pos:column="28"/></name></expr>)<pos:position pos:line="78" pos:column="29"/></condition><then pos:line="78" pos:column="29"> <block pos:line="78" pos:column="30">{

      <comment type="block" pos:line="80" pos:column="7">/* this socket has been removed. Tell the app to remove it */</comment>
      <expr_stmt><expr><name pos:line="81" pos:column="7">remove_sock_from_hash<pos:position pos:line="81" pos:column="28"/></name> <operator pos:line="81" pos:column="29">=<pos:position pos:line="81" pos:column="30"/></operator> <name pos:line="81" pos:column="31">TRUE<pos:position pos:line="81" pos:column="35"/></name></expr>;<pos:position pos:line="81" pos:column="36"/></expr_stmt>

      <expr_stmt><expr><name pos:line="83" pos:column="7">entry<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">=<pos:position pos:line="83" pos:column="14"/></operator> <call><name pos:line="83" pos:column="15">Curl_hash_pick<pos:position pos:line="83" pos:column="29"/></name><argument_list pos:line="83" pos:column="29">(<argument><expr><name><name pos:line="83" pos:column="30">multi<pos:position pos:line="83" pos:column="35"/></name><operator pos:line="83" pos:column="35">-&gt;<pos:position pos:line="83" pos:column="40"/></operator><name pos:line="83" pos:column="37">sockhash<pos:position pos:line="83" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="47">(<pos:position pos:line="83" pos:column="48"/></operator><name pos:line="83" pos:column="48">char<pos:position pos:line="83" pos:column="52"/></name> <operator pos:line="83" pos:column="53">*<pos:position pos:line="83" pos:column="54"/></operator><operator pos:line="83" pos:column="54">)<pos:position pos:line="83" pos:column="55"/></operator><operator pos:line="83" pos:column="55">&amp;<pos:position pos:line="83" pos:column="60"/></operator><name pos:line="83" pos:column="56">s<pos:position pos:line="83" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="83" pos:column="59">sizeof<argument_list pos:line="83" pos:column="65">(<argument><expr><name pos:line="83" pos:column="66">s<pos:position pos:line="83" pos:column="67"/></name></expr></argument>)<pos:position pos:line="83" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="83" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="70"/></expr_stmt>
      <if pos:line="84" pos:column="7">if<condition pos:line="84" pos:column="9">(<expr><name pos:line="84" pos:column="10">entry<pos:position pos:line="84" pos:column="15"/></name></expr>)<pos:position pos:line="84" pos:column="16"/></condition><then pos:line="84" pos:column="16"> <block pos:line="84" pos:column="17">{
        <comment type="block" pos:line="85" pos:column="9">/* check if the socket to be removed serves a connection which has
           other easy-s in a pipeline. In this case the socket should not be
           removed. */</comment>
        <decl_stmt><decl><type><name><name pos:line="88" pos:column="9">struct<pos:position pos:line="88" pos:column="15"/></name> <name pos:line="88" pos:column="16">connectdata<pos:position pos:line="88" pos:column="27"/></name></name> <modifier pos:line="88" pos:column="28">*<pos:position pos:line="88" pos:column="29"/></modifier></type><name pos:line="88" pos:column="29">easy_conn<pos:position pos:line="88" pos:column="38"/></name> <init pos:line="88" pos:column="39">= <expr><name><name pos:line="88" pos:column="41">data<pos:position pos:line="88" pos:column="45"/></name><operator pos:line="88" pos:column="45">-&gt;<pos:position pos:line="88" pos:column="50"/></operator><name pos:line="88" pos:column="47">easy_conn<pos:position pos:line="88" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="88" pos:column="57"/></decl_stmt>
        <if pos:line="89" pos:column="9">if<condition pos:line="89" pos:column="11">(<expr><name pos:line="89" pos:column="12">easy_conn<pos:position pos:line="89" pos:column="21"/></name></expr>)<pos:position pos:line="89" pos:column="22"/></condition><then pos:line="89" pos:column="22"> <block pos:line="89" pos:column="23">{
          <if pos:line="90" pos:column="11">if<condition pos:line="90" pos:column="13">(<expr><name><name pos:line="90" pos:column="14">easy_conn<pos:position pos:line="90" pos:column="23"/></name><operator pos:line="90" pos:column="23">-&gt;<pos:position pos:line="90" pos:column="28"/></operator><name pos:line="90" pos:column="25">recv_pipe<pos:position pos:line="90" pos:column="34"/></name></name> <operator pos:line="90" pos:column="35">&amp;&amp;<pos:position pos:line="90" pos:column="45"/></operator> <name><name pos:line="90" pos:column="38">easy_conn<pos:position pos:line="90" pos:column="47"/></name><operator pos:line="90" pos:column="47">-&gt;<pos:position pos:line="90" pos:column="52"/></operator><name pos:line="90" pos:column="49">recv_pipe<pos:position pos:line="90" pos:column="58"/></name><operator pos:line="90" pos:column="58">-&gt;<pos:position pos:line="90" pos:column="63"/></operator><name pos:line="90" pos:column="60">size<pos:position pos:line="90" pos:column="64"/></name></name> <operator pos:line="90" pos:column="65">&gt;<pos:position pos:line="90" pos:column="69"/></operator> <literal type="number" pos:line="90" pos:column="67">1<pos:position pos:line="90" pos:column="68"/></literal></expr>)<pos:position pos:line="90" pos:column="69"/></condition><then pos:line="90" pos:column="69"> <block pos:line="90" pos:column="70">{
            <comment type="block" pos:line="91" pos:column="13">/* the handle should not be removed from the pipe yet */</comment>
            <expr_stmt><expr><name pos:line="92" pos:column="13">remove_sock_from_hash<pos:position pos:line="92" pos:column="34"/></name> <operator pos:line="92" pos:column="35">=<pos:position pos:line="92" pos:column="36"/></operator> <name pos:line="92" pos:column="37">FALSE<pos:position pos:line="92" pos:column="42"/></name></expr>;<pos:position pos:line="92" pos:column="43"/></expr_stmt>

            <comment type="block" pos:line="94" pos:column="13">/* Update the sockhash entry to instead point to the next in line
               for the recv_pipe, or the first (in case this particular easy
               isn't already) */</comment>
            <if pos:line="97" pos:column="13">if<condition pos:line="97" pos:column="15">(<expr><name><name pos:line="97" pos:column="16">entry<pos:position pos:line="97" pos:column="21"/></name><operator pos:line="97" pos:column="21">-&gt;<pos:position pos:line="97" pos:column="26"/></operator><name pos:line="97" pos:column="23">easy<pos:position pos:line="97" pos:column="27"/></name></name> <operator pos:line="97" pos:column="28">==<pos:position pos:line="97" pos:column="30"/></operator> <name pos:line="97" pos:column="31">data<pos:position pos:line="97" pos:column="35"/></name></expr>)<pos:position pos:line="97" pos:column="36"/></condition><then pos:line="97" pos:column="36"> <block pos:line="97" pos:column="37">{
              <if pos:line="98" pos:column="15">if<condition pos:line="98" pos:column="17">(<expr><call><name pos:line="98" pos:column="18">isHandleAtHead<pos:position pos:line="98" pos:column="32"/></name><argument_list pos:line="98" pos:column="32">(<argument><expr><name pos:line="98" pos:column="33">data<pos:position pos:line="98" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="39">easy_conn<pos:position pos:line="98" pos:column="48"/></name><operator pos:line="98" pos:column="48">-&gt;<pos:position pos:line="98" pos:column="53"/></operator><name pos:line="98" pos:column="50">recv_pipe<pos:position pos:line="98" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="61"/></condition><then pos:line="98" pos:column="61">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="99" pos:column="17">entry<pos:position pos:line="99" pos:column="22"/></name><operator pos:line="99" pos:column="22">-&gt;<pos:position pos:line="99" pos:column="27"/></operator><name pos:line="99" pos:column="24">easy<pos:position pos:line="99" pos:column="28"/></name></name> <operator pos:line="99" pos:column="29">=<pos:position pos:line="99" pos:column="30"/></operator> <name><name pos:line="99" pos:column="31">easy_conn<pos:position pos:line="99" pos:column="40"/></name><operator pos:line="99" pos:column="40">-&gt;<pos:position pos:line="99" pos:column="45"/></operator><name pos:line="99" pos:column="42">recv_pipe<pos:position pos:line="99" pos:column="51"/></name><operator pos:line="99" pos:column="51">-&gt;<pos:position pos:line="99" pos:column="56"/></operator><name pos:line="99" pos:column="53">head<pos:position pos:line="99" pos:column="57"/></name><operator pos:line="99" pos:column="57">-&gt;<pos:position pos:line="99" pos:column="62"/></operator><name pos:line="99" pos:column="59">next<pos:position pos:line="99" pos:column="63"/></name><operator pos:line="99" pos:column="63">-&gt;<pos:position pos:line="99" pos:column="68"/></operator><name pos:line="99" pos:column="65">ptr<pos:position pos:line="99" pos:column="68"/></name></name></expr>;<pos:position pos:line="99" pos:column="69"/></expr_stmt></block></then>
              <else pos:line="100" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="101" pos:column="17">entry<pos:position pos:line="101" pos:column="22"/></name><operator pos:line="101" pos:column="22">-&gt;<pos:position pos:line="101" pos:column="27"/></operator><name pos:line="101" pos:column="24">easy<pos:position pos:line="101" pos:column="28"/></name></name> <operator pos:line="101" pos:column="29">=<pos:position pos:line="101" pos:column="30"/></operator> <name><name pos:line="101" pos:column="31">easy_conn<pos:position pos:line="101" pos:column="40"/></name><operator pos:line="101" pos:column="40">-&gt;<pos:position pos:line="101" pos:column="45"/></operator><name pos:line="101" pos:column="42">recv_pipe<pos:position pos:line="101" pos:column="51"/></name><operator pos:line="101" pos:column="51">-&gt;<pos:position pos:line="101" pos:column="56"/></operator><name pos:line="101" pos:column="53">head<pos:position pos:line="101" pos:column="57"/></name><operator pos:line="101" pos:column="57">-&gt;<pos:position pos:line="101" pos:column="62"/></operator><name pos:line="101" pos:column="59">ptr<pos:position pos:line="101" pos:column="62"/></name></name></expr>;<pos:position pos:line="101" pos:column="63"/></expr_stmt></block></else></if>
            }<pos:position pos:line="102" pos:column="14"/></block></then></if>
          }<pos:position pos:line="103" pos:column="12"/></block></then></if>
          <if pos:line="104" pos:column="11">if<condition pos:line="104" pos:column="13">(<expr><name><name pos:line="104" pos:column="14">easy_conn<pos:position pos:line="104" pos:column="23"/></name><operator pos:line="104" pos:column="23">-&gt;<pos:position pos:line="104" pos:column="28"/></operator><name pos:line="104" pos:column="25">send_pipe<pos:position pos:line="104" pos:column="34"/></name></name>  <operator pos:line="104" pos:column="36">&amp;&amp;<pos:position pos:line="104" pos:column="46"/></operator> <name><name pos:line="104" pos:column="39">easy_conn<pos:position pos:line="104" pos:column="48"/></name><operator pos:line="104" pos:column="48">-&gt;<pos:position pos:line="104" pos:column="53"/></operator><name pos:line="104" pos:column="50">send_pipe<pos:position pos:line="104" pos:column="59"/></name><operator pos:line="104" pos:column="59">-&gt;<pos:position pos:line="104" pos:column="64"/></operator><name pos:line="104" pos:column="61">size<pos:position pos:line="104" pos:column="65"/></name></name> <operator pos:line="104" pos:column="66">&gt;<pos:position pos:line="104" pos:column="70"/></operator> <literal type="number" pos:line="104" pos:column="68">1<pos:position pos:line="104" pos:column="69"/></literal></expr>)<pos:position pos:line="104" pos:column="70"/></condition><then pos:line="104" pos:column="70"> <block pos:line="104" pos:column="71">{
            <comment type="block" pos:line="105" pos:column="13">/* the handle should not be removed from the pipe yet */</comment>
            <expr_stmt><expr><name pos:line="106" pos:column="13">remove_sock_from_hash<pos:position pos:line="106" pos:column="34"/></name> <operator pos:line="106" pos:column="35">=<pos:position pos:line="106" pos:column="36"/></operator> <name pos:line="106" pos:column="37">FALSE<pos:position pos:line="106" pos:column="42"/></name></expr>;<pos:position pos:line="106" pos:column="43"/></expr_stmt>

            <comment type="block" pos:line="108" pos:column="13">/* Update the sockhash entry to instead point to the next in line
               for the send_pipe, or the first (in case this particular easy
               isn't already) */</comment>
            <if pos:line="111" pos:column="13">if<condition pos:line="111" pos:column="15">(<expr><name><name pos:line="111" pos:column="16">entry<pos:position pos:line="111" pos:column="21"/></name><operator pos:line="111" pos:column="21">-&gt;<pos:position pos:line="111" pos:column="26"/></operator><name pos:line="111" pos:column="23">easy<pos:position pos:line="111" pos:column="27"/></name></name> <operator pos:line="111" pos:column="28">==<pos:position pos:line="111" pos:column="30"/></operator> <name pos:line="111" pos:column="31">data<pos:position pos:line="111" pos:column="35"/></name></expr>)<pos:position pos:line="111" pos:column="36"/></condition><then pos:line="111" pos:column="36"> <block pos:line="111" pos:column="37">{
              <if pos:line="112" pos:column="15">if<condition pos:line="112" pos:column="17">(<expr><call><name pos:line="112" pos:column="18">isHandleAtHead<pos:position pos:line="112" pos:column="32"/></name><argument_list pos:line="112" pos:column="32">(<argument><expr><name pos:line="112" pos:column="33">data<pos:position pos:line="112" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="39">easy_conn<pos:position pos:line="112" pos:column="48"/></name><operator pos:line="112" pos:column="48">-&gt;<pos:position pos:line="112" pos:column="53"/></operator><name pos:line="112" pos:column="50">send_pipe<pos:position pos:line="112" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="61"/></condition><then pos:line="112" pos:column="61">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="113" pos:column="17">entry<pos:position pos:line="113" pos:column="22"/></name><operator pos:line="113" pos:column="22">-&gt;<pos:position pos:line="113" pos:column="27"/></operator><name pos:line="113" pos:column="24">easy<pos:position pos:line="113" pos:column="28"/></name></name> <operator pos:line="113" pos:column="29">=<pos:position pos:line="113" pos:column="30"/></operator> <name><name pos:line="113" pos:column="31">easy_conn<pos:position pos:line="113" pos:column="40"/></name><operator pos:line="113" pos:column="40">-&gt;<pos:position pos:line="113" pos:column="45"/></operator><name pos:line="113" pos:column="42">send_pipe<pos:position pos:line="113" pos:column="51"/></name><operator pos:line="113" pos:column="51">-&gt;<pos:position pos:line="113" pos:column="56"/></operator><name pos:line="113" pos:column="53">head<pos:position pos:line="113" pos:column="57"/></name><operator pos:line="113" pos:column="57">-&gt;<pos:position pos:line="113" pos:column="62"/></operator><name pos:line="113" pos:column="59">next<pos:position pos:line="113" pos:column="63"/></name><operator pos:line="113" pos:column="63">-&gt;<pos:position pos:line="113" pos:column="68"/></operator><name pos:line="113" pos:column="65">ptr<pos:position pos:line="113" pos:column="68"/></name></name></expr>;<pos:position pos:line="113" pos:column="69"/></expr_stmt></block></then>
              <else pos:line="114" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="115" pos:column="17">entry<pos:position pos:line="115" pos:column="22"/></name><operator pos:line="115" pos:column="22">-&gt;<pos:position pos:line="115" pos:column="27"/></operator><name pos:line="115" pos:column="24">easy<pos:position pos:line="115" pos:column="28"/></name></name> <operator pos:line="115" pos:column="29">=<pos:position pos:line="115" pos:column="30"/></operator> <name><name pos:line="115" pos:column="31">easy_conn<pos:position pos:line="115" pos:column="40"/></name><operator pos:line="115" pos:column="40">-&gt;<pos:position pos:line="115" pos:column="45"/></operator><name pos:line="115" pos:column="42">send_pipe<pos:position pos:line="115" pos:column="51"/></name><operator pos:line="115" pos:column="51">-&gt;<pos:position pos:line="115" pos:column="56"/></operator><name pos:line="115" pos:column="53">head<pos:position pos:line="115" pos:column="57"/></name><operator pos:line="115" pos:column="57">-&gt;<pos:position pos:line="115" pos:column="62"/></operator><name pos:line="115" pos:column="59">ptr<pos:position pos:line="115" pos:column="62"/></name></name></expr>;<pos:position pos:line="115" pos:column="63"/></expr_stmt></block></else></if>
            }<pos:position pos:line="116" pos:column="14"/></block></then></if>
          }<pos:position pos:line="117" pos:column="12"/></block></then></if>
          <comment type="block" pos:line="118" pos:column="11">/* Don't worry about overwriting recv_pipe head with send_pipe_head,
             when action will be asked on the socket (see multi_socket()), the
             head of the correct pipe will be taken according to the
             action. */</comment>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if>
      }<pos:position pos:line="123" pos:column="8"/></block></then>
      <else pos:line="124" pos:column="7">else
        <comment type="block" pos:line="125" pos:column="9">/* just a precaution, this socket really SHOULD be in the hash already
           but in case it isn't, we don't have to tell the app to remove it
           either since it never got to know about it */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="128" pos:column="9">remove_sock_from_hash<pos:position pos:line="128" pos:column="30"/></name> <operator pos:line="128" pos:column="31">=<pos:position pos:line="128" pos:column="32"/></operator> <name pos:line="128" pos:column="33">FALSE<pos:position pos:line="128" pos:column="38"/></name></expr>;<pos:position pos:line="128" pos:column="39"/></expr_stmt></block></else></if>

      <if pos:line="130" pos:column="7">if<condition pos:line="130" pos:column="9">(<expr><name pos:line="130" pos:column="10">remove_sock_from_hash<pos:position pos:line="130" pos:column="31"/></name></expr>)<pos:position pos:line="130" pos:column="32"/></condition><then pos:line="130" pos:column="32"> <block pos:line="130" pos:column="33">{
        <comment type="block" pos:line="131" pos:column="9">/* in this case 'entry' is always non-NULL */</comment>
        <if pos:line="132" pos:column="9">if<condition pos:line="132" pos:column="11">(<expr><name><name pos:line="132" pos:column="12">multi<pos:position pos:line="132" pos:column="17"/></name><operator pos:line="132" pos:column="17">-&gt;<pos:position pos:line="132" pos:column="22"/></operator><name pos:line="132" pos:column="19">socket_cb<pos:position pos:line="132" pos:column="28"/></name></name></expr>)<pos:position pos:line="132" pos:column="29"/></condition><then pos:line="132" pos:column="29">
          <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="133" pos:column="11">multi<pos:position pos:line="133" pos:column="16"/></name><operator pos:line="133" pos:column="16">-&gt;<pos:position pos:line="133" pos:column="21"/></operator><name pos:line="133" pos:column="18">socket_cb<pos:position pos:line="133" pos:column="27"/></name></name><argument_list pos:line="133" pos:column="27">(<argument><expr><name pos:line="133" pos:column="28">data<pos:position pos:line="133" pos:column="32"/></name></expr></argument>,
                           <argument><expr><name pos:line="134" pos:column="28">s<pos:position pos:line="134" pos:column="29"/></name></expr></argument>,
                           <argument><expr><name pos:line="135" pos:column="28">CURL_POLL_REMOVE<pos:position pos:line="135" pos:column="44"/></name></expr></argument>,
                           <argument><expr><name><name pos:line="136" pos:column="28">multi<pos:position pos:line="136" pos:column="33"/></name><operator pos:line="136" pos:column="33">-&gt;<pos:position pos:line="136" pos:column="38"/></operator><name pos:line="136" pos:column="35">socket_userp<pos:position pos:line="136" pos:column="47"/></name></name></expr></argument>,
                           <argument><expr><name><name pos:line="137" pos:column="28">entry<pos:position pos:line="137" pos:column="33"/></name><operator pos:line="137" pos:column="33">-&gt;<pos:position pos:line="137" pos:column="38"/></operator><name pos:line="137" pos:column="35">socketp<pos:position pos:line="137" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="137" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="44"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">sh_delentry<pos:position pos:line="138" pos:column="20"/></name><argument_list pos:line="138" pos:column="20">(<argument><expr><name><name pos:line="138" pos:column="21">multi<pos:position pos:line="138" pos:column="26"/></name><operator pos:line="138" pos:column="26">-&gt;<pos:position pos:line="138" pos:column="31"/></operator><name pos:line="138" pos:column="28">sockhash<pos:position pos:line="138" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="38">s<pos:position pos:line="138" pos:column="39"/></name></expr></argument>)<pos:position pos:line="138" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="139" pos:column="8"/></block></then></if>

    }<pos:position pos:line="141" pos:column="6"/></block></then></if>
  }<pos:position pos:line="142" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="144" pos:column="3">memcpy<pos:position pos:line="144" pos:column="9"/></name><argument_list pos:line="144" pos:column="9">(<argument><expr><name><name pos:line="144" pos:column="10">data<pos:position pos:line="144" pos:column="14"/></name><operator pos:line="144" pos:column="14">-&gt;<pos:position pos:line="144" pos:column="19"/></operator><name pos:line="144" pos:column="16">sockets<pos:position pos:line="144" pos:column="23"/></name></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="25">socks<pos:position pos:line="144" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="32">num<pos:position pos:line="144" pos:column="35"/></name><operator pos:line="144" pos:column="35">*<pos:position pos:line="144" pos:column="36"/></operator><sizeof pos:line="144" pos:column="36">sizeof<argument_list pos:line="144" pos:column="42">(<argument><expr><name pos:line="144" pos:column="43">curl_socket_t<pos:position pos:line="144" pos:column="56"/></name></expr></argument>)<pos:position pos:line="144" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="144" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="145" pos:column="3">data<pos:position pos:line="145" pos:column="7"/></name><operator pos:line="145" pos:column="7">-&gt;<pos:position pos:line="145" pos:column="12"/></operator><name pos:line="145" pos:column="9">numsocks<pos:position pos:line="145" pos:column="17"/></name></name> <operator pos:line="145" pos:column="18">=<pos:position pos:line="145" pos:column="19"/></operator> <name pos:line="145" pos:column="20">num<pos:position pos:line="145" pos:column="23"/></name></expr>;<pos:position pos:line="145" pos:column="24"/></expr_stmt>
}<pos:position pos:line="146" pos:column="2"/></block></function></unit>
