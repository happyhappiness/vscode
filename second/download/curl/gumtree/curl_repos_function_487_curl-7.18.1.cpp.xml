<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_487_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">hostmatch<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">hostname<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">pattern<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <while pos:line="3" pos:column="3">while<condition pos:line="3" pos:column="8">(<expr><literal type="number" pos:line="3" pos:column="9">1<pos:position pos:line="3" pos:column="10"/></literal></expr>)<pos:position pos:line="3" pos:column="11"/></condition> <block pos:line="3" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">c<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><operator pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">pattern<pos:position pos:line="4" pos:column="22"/></name><operator pos:line="4" pos:column="22">++<pos:position pos:line="4" pos:column="24"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

    <if pos:line="6" pos:column="5">if<condition pos:line="6" pos:column="7">(<expr><name pos:line="6" pos:column="8">c<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">==<pos:position pos:line="6" pos:column="12"/></operator> <literal type="char" pos:line="6" pos:column="13">'\0'<pos:position pos:line="6" pos:column="17"/></literal></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
      <block type="pseudo"><return pos:line="7" pos:column="7">return <expr><operator pos:line="7" pos:column="14">(<pos:position pos:line="7" pos:column="15"/></operator><ternary><condition><expr><operator pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">hostname<pos:position pos:line="7" pos:column="24"/></name></expr> ?<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <expr><name pos:line="7" pos:column="27">HOST_NOMATCH<pos:position pos:line="7" pos:column="39"/></name></expr> <pos:position pos:line="7" pos:column="40"/></then><else pos:line="7" pos:column="40">: <expr><name pos:line="7" pos:column="42">HOST_MATCH<pos:position pos:line="7" pos:column="52"/></name></expr></else></ternary><operator pos:line="7" pos:column="52">)<pos:position pos:line="7" pos:column="53"/></operator></expr>;<pos:position pos:line="7" pos:column="54"/></return></block></then></if>

    <if pos:line="9" pos:column="5">if<condition pos:line="9" pos:column="7">(<expr><name pos:line="9" pos:column="8">c<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">==<pos:position pos:line="9" pos:column="12"/></operator> <literal type="char" pos:line="9" pos:column="13">'*'<pos:position pos:line="9" pos:column="16"/></literal></expr>)<pos:position pos:line="9" pos:column="17"/></condition><then pos:line="9" pos:column="17"> <block pos:line="9" pos:column="18">{
      <expr_stmt><expr><name pos:line="10" pos:column="7">c<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <operator pos:line="10" pos:column="11">*<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">pattern<pos:position pos:line="10" pos:column="19"/></name></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>
      <if pos:line="11" pos:column="7">if<condition pos:line="11" pos:column="9">(<expr><name pos:line="11" pos:column="10">c<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">==<pos:position pos:line="11" pos:column="14"/></operator> <literal type="char" pos:line="11" pos:column="15">'\0'<pos:position pos:line="11" pos:column="19"/></literal></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20">      <comment type="block" pos:line="11" pos:column="26">/* "*\0" matches anything remaining */</comment>
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">HOST_MATCH<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></return></block></then></if>

      <while pos:line="14" pos:column="7">while<condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">*<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">hostname<pos:position pos:line="14" pos:column="22"/></name></expr>)<pos:position pos:line="14" pos:column="23"/></condition> <block pos:line="14" pos:column="24">{
        <comment type="block" pos:line="15" pos:column="9">/* The only recursive function in libcurl! */</comment>
        <if pos:line="16" pos:column="9">if<condition pos:line="16" pos:column="11">(<expr><call><name pos:line="16" pos:column="12">hostmatch<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">hostname<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">++<pos:position pos:line="16" pos:column="32"/></operator></expr></argument>,<argument><expr><name pos:line="16" pos:column="33">pattern<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call> <operator pos:line="16" pos:column="42">==<pos:position pos:line="16" pos:column="44"/></operator> <name pos:line="16" pos:column="45">HOST_MATCH<pos:position pos:line="16" pos:column="55"/></name></expr>)<pos:position pos:line="16" pos:column="56"/></condition><then pos:line="16" pos:column="56">
          <block type="pseudo"><return pos:line="17" pos:column="11">return <expr><name pos:line="17" pos:column="18">HOST_MATCH<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></return></block></then></if>
      }<pos:position pos:line="18" pos:column="8"/></block></while>
      <break pos:line="19" pos:column="7">break;<pos:position pos:line="19" pos:column="13"/></break>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><call><name pos:line="22" pos:column="8">toupper<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">c<pos:position pos:line="22" pos:column="17"/></name></expr></argument>)<pos:position pos:line="22" pos:column="18"/></argument_list></call> <operator pos:line="22" pos:column="19">!=<pos:position pos:line="22" pos:column="21"/></operator> <call><name pos:line="22" pos:column="22">toupper<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><operator pos:line="22" pos:column="30">*<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">hostname<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">++<pos:position pos:line="22" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="43"/></condition><then pos:line="22" pos:column="43">
      <block type="pseudo"><break pos:line="23" pos:column="7">break;<pos:position pos:line="23" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="24" pos:column="4"/></block></while>
  <return pos:line="25" pos:column="3">return <expr><name pos:line="25" pos:column="10">HOST_NOMATCH<pos:position pos:line="25" pos:column="22"/></name></expr>;<pos:position pos:line="25" pos:column="23"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
