<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_283_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_client_write<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">SessionHandle<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">data<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">type<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">ptr<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="4" pos:column="28">size_t<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">len<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="39"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">wrote<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><literal type="number" pos:line="8" pos:column="6">0<pos:position pos:line="8" pos:column="7"/></literal> <operator pos:line="8" pos:column="8">==<pos:position pos:line="8" pos:column="10"/></operator> <name pos:line="8" pos:column="11">len<pos:position pos:line="8" pos:column="14"/></name></expr>)<pos:position pos:line="8" pos:column="15"/></condition><then pos:line="8" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="5">len<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">strlen<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">ptr<pos:position pos:line="9" pos:column="21"/></name></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt></block></then></if>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">type<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">&amp;<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="13">CLIENTWRITE_BODY<pos:position pos:line="11" pos:column="29"/></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block pos:line="11" pos:column="31">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">wrote<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name><name pos:line="12" pos:column="13">data<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">-&gt;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="19">set<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">.<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">fwrite<pos:position pos:line="12" pos:column="29"/></name></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">ptr<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="35">1<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="38">len<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="43">data<pos:position pos:line="12" pos:column="47"/></name><operator pos:line="12" pos:column="47">-&gt;<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="49">set<pos:position pos:line="12" pos:column="52"/></name><operator pos:line="12" pos:column="52">.<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="53">out<pos:position pos:line="12" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
    <if pos:line="13" pos:column="5">if<condition pos:line="13" pos:column="7">(<expr><name pos:line="13" pos:column="8">wrote<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">!=<pos:position pos:line="13" pos:column="16"/></operator> <name pos:line="13" pos:column="17">len<pos:position pos:line="13" pos:column="20"/></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">failf<pos:position pos:line="14" pos:column="12"/></name> <argument_list pos:line="14" pos:column="13">(<argument><expr><name pos:line="14" pos:column="14">data<pos:position pos:line="14" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="20">"Failed writing body"<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
      <return pos:line="15" pos:column="7">return <expr><name pos:line="15" pos:column="14">CURLE_WRITE_ERROR<pos:position pos:line="15" pos:column="31"/></name></expr>;<pos:position pos:line="15" pos:column="32"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><operator pos:line="18" pos:column="6">(<pos:position pos:line="18" pos:column="7"/></operator><name pos:line="18" pos:column="7">type<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">&amp;<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="14">CLIENTWRITE_HEADER<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">)<pos:position pos:line="18" pos:column="33"/></operator> <operator pos:line="18" pos:column="34">&amp;&amp;<pos:position pos:line="18" pos:column="44"/></operator>
     <operator pos:line="19" pos:column="6">(<pos:position pos:line="19" pos:column="7"/></operator><name><name pos:line="19" pos:column="7">data<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">set<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">.<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">fwrite_header<pos:position pos:line="19" pos:column="30"/></name></name> <operator pos:line="19" pos:column="31">||<pos:position pos:line="19" pos:column="33"/></operator> <name><name pos:line="19" pos:column="34">data<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">-&gt;<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="40">set<pos:position pos:line="19" pos:column="43"/></name><operator pos:line="19" pos:column="43">.<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="44">writeheader<pos:position pos:line="19" pos:column="55"/></name></name><operator pos:line="19" pos:column="55">)<pos:position pos:line="19" pos:column="56"/></operator></expr> )<pos:position pos:line="19" pos:column="58"/></condition><then pos:line="19" pos:column="58"> <block pos:line="19" pos:column="59">{
    <comment type="block" pos:line="20" pos:column="5">/*
     * Write headers to the same callback or to the especially setup
     * header callback function (added after version 7.7.1).
     */</comment>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">curl_write_callback<pos:position pos:line="24" pos:column="24"/></name></type> <name pos:line="24" pos:column="25">writeit<pos:position pos:line="24" pos:column="32"/></name><init pos:line="24" pos:column="32">=
      <expr><ternary><condition><expr><name><name pos:line="25" pos:column="7">data<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">set<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">.<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">fwrite_header<pos:position pos:line="25" pos:column="30"/></name></name></expr>?<pos:position pos:line="25" pos:column="31"/></condition><then><expr><name><name pos:line="25" pos:column="31">data<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="37">set<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">.<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="41">fwrite_header<pos:position pos:line="25" pos:column="54"/></name></name></expr></then><else pos:line="25" pos:column="54">:<expr><name><name pos:line="25" pos:column="55">data<pos:position pos:line="25" pos:column="59"/></name><operator pos:line="25" pos:column="59">-&gt;<pos:position pos:line="25" pos:column="64"/></operator><name pos:line="25" pos:column="61">set<pos:position pos:line="25" pos:column="64"/></name><operator pos:line="25" pos:column="64">.<pos:position pos:line="25" pos:column="65"/></operator><name pos:line="25" pos:column="65">fwrite<pos:position pos:line="25" pos:column="71"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="25" pos:column="72"/></decl_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">wrote<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">writeit<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">ptr<pos:position pos:line="27" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="26">1<pos:position pos:line="27" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="29">len<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="34">data<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">-&gt;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="40">set<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">.<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">writeheader<pos:position pos:line="27" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><name pos:line="28" pos:column="8">wrote<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">!=<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">len<pos:position pos:line="28" pos:column="20"/></name></expr>)<pos:position pos:line="28" pos:column="21"/></condition><then pos:line="28" pos:column="21"> <block pos:line="28" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">failf<pos:position pos:line="29" pos:column="12"/></name> <argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">data<pos:position pos:line="29" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="20">"Failed writing header"<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>
      <return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">CURLE_WRITE_ERROR<pos:position pos:line="30" pos:column="31"/></name></expr>;<pos:position pos:line="30" pos:column="32"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
  
  <return pos:line="34" pos:column="3">return <expr><name pos:line="34" pos:column="10">CURLE_OK<pos:position pos:line="34" pos:column="18"/></name></expr>;<pos:position pos:line="34" pos:column="19"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
