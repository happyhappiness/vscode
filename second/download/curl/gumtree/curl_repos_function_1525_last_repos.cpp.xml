<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1525_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">tftp_receive_packet<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">connectdata<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">conn<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="3" pos:column="31"/></name></name></type> <name pos:line="3" pos:column="32">fromaddr<pos:position pos:line="3" pos:column="40"/></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socklen_t<pos:position pos:line="4" pos:column="17"/></name></type>        <name pos:line="4" pos:column="25">fromlen<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type>              <name pos:line="5" pos:column="25">result<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><name pos:line="5" pos:column="34">CURLE_OK<pos:position pos:line="5" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name>  <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">data<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name><name pos:line="6" pos:column="29">conn<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">data<pos:position pos:line="6" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">tftp_state_data_t<pos:position pos:line="7" pos:column="20"/></name>     <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">state<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><operator pos:line="7" pos:column="34">(<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="35">tftp_state_data_t<pos:position pos:line="7" pos:column="52"/></name> <operator pos:line="7" pos:column="53">*<pos:position pos:line="7" pos:column="54"/></operator><operator pos:line="7" pos:column="54">)<pos:position pos:line="7" pos:column="55"/></operator><name><name pos:line="7" pos:column="55">conn<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">-&gt;<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="61">proto<pos:position pos:line="7" pos:column="66"/></name><operator pos:line="7" pos:column="66">.<pos:position pos:line="7" pos:column="67"/></operator><name pos:line="7" pos:column="67">tftpc<pos:position pos:line="7" pos:column="72"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="73"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">SingleRequest<pos:position pos:line="8" pos:column="23"/></name></name>  <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">k<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><operator pos:line="8" pos:column="30">&amp;<pos:position pos:line="8" pos:column="35"/></operator><name><name pos:line="8" pos:column="31">data<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">req<pos:position pos:line="8" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* Receive the packet */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">fromlen<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <sizeof pos:line="11" pos:column="13">sizeof<argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">fromaddr<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></sizeof></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">state<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">-&gt;<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="10">rbytes<pos:position pos:line="12" pos:column="16"/></name></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <operator pos:line="12" pos:column="19">(<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">int<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">)<pos:position pos:line="12" pos:column="24"/></operator><call><name pos:line="12" pos:column="24">recvfrom<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name><name pos:line="12" pos:column="33">state<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">-&gt;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="40">sockfd<pos:position pos:line="12" pos:column="46"/></name></name></expr></argument>,
                                <argument><expr><operator pos:line="13" pos:column="33">(<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">void<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">*<pos:position pos:line="13" pos:column="40"/></operator><operator pos:line="13" pos:column="40">)<pos:position pos:line="13" pos:column="41"/></operator><name><name pos:line="13" pos:column="41">state<pos:position pos:line="13" pos:column="46"/></name><operator pos:line="13" pos:column="46">-&gt;<pos:position pos:line="13" pos:column="51"/></operator><name pos:line="13" pos:column="48">rpacket<pos:position pos:line="13" pos:column="55"/></name><operator pos:line="13" pos:column="55">.<pos:position pos:line="13" pos:column="56"/></operator><name pos:line="13" pos:column="56">data<pos:position pos:line="13" pos:column="60"/></name></name></expr></argument>,
                                <argument><expr><name><name pos:line="14" pos:column="33">state<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">-&gt;<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="40">blksize<pos:position pos:line="14" pos:column="47"/></name></name> <operator pos:line="14" pos:column="48">+<pos:position pos:line="14" pos:column="49"/></operator> <literal type="number" pos:line="14" pos:column="50">4<pos:position pos:line="14" pos:column="51"/></literal></expr></argument>,
                                <argument><expr><literal type="number" pos:line="15" pos:column="33">0<pos:position pos:line="15" pos:column="34"/></literal></expr></argument>,
                                <argument><expr><operator pos:line="16" pos:column="33">(<pos:position pos:line="16" pos:column="34"/></operator>struct <name pos:line="16" pos:column="41">sockaddr<pos:position pos:line="16" pos:column="49"/></name> <operator pos:line="16" pos:column="50">*<pos:position pos:line="16" pos:column="51"/></operator><operator pos:line="16" pos:column="51">)<pos:position pos:line="16" pos:column="52"/></operator><operator pos:line="16" pos:column="52">&amp;<pos:position pos:line="16" pos:column="57"/></operator><name pos:line="16" pos:column="53">fromaddr<pos:position pos:line="16" pos:column="61"/></name></expr></argument>,
                                <argument><expr><operator pos:line="17" pos:column="33">&amp;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="34">fromlen<pos:position pos:line="17" pos:column="41"/></name></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name><name pos:line="18" pos:column="6">state<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">-&gt;<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="13">remote_addrlen<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">==<pos:position pos:line="18" pos:column="30"/></operator> <literal type="number" pos:line="18" pos:column="31">0<pos:position pos:line="18" pos:column="32"/></literal></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33"> <block pos:line="18" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">memcpy<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><operator pos:line="19" pos:column="12">&amp;<pos:position pos:line="19" pos:column="17"/></operator><name><name pos:line="19" pos:column="13">state<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">remote_addr<pos:position pos:line="19" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="33">&amp;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="34">fromaddr<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">fromlen<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">state<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">remote_addrlen<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">fromlen<pos:position pos:line="20" pos:column="36"/></name></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="23" pos:column="3">/* Sanity check packet length */</comment>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><name><name pos:line="24" pos:column="6">state<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">rbytes<pos:position pos:line="24" pos:column="19"/></name></name> <operator pos:line="24" pos:column="20">&lt;<pos:position pos:line="24" pos:column="24"/></operator> <literal type="number" pos:line="24" pos:column="22">4<pos:position pos:line="24" pos:column="23"/></literal></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24"> <block pos:line="24" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">failf<pos:position pos:line="25" pos:column="10"/></name><argument_list pos:line="25" pos:column="10">(<argument><expr><name pos:line="25" pos:column="11">data<pos:position pos:line="25" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="17">"Received too short packet"<pos:position pos:line="25" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
    <comment type="block" pos:line="26" pos:column="5">/* Not a timeout, but how best to handle it? */</comment>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">state<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">event<pos:position pos:line="27" pos:column="17"/></name></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">TFTP_EVENT_TIMEOUT<pos:position pos:line="27" pos:column="38"/></name></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then>
  <else pos:line="29" pos:column="3">else <block pos:line="29" pos:column="8">{
    <comment type="block" pos:line="30" pos:column="5">/* The event is given by the TFTP packet time */</comment>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">unsigned<pos:position pos:line="31" pos:column="13"/></name> <name pos:line="31" pos:column="14">short<pos:position pos:line="31" pos:column="19"/></name></type> <name pos:line="31" pos:column="20">event<pos:position pos:line="31" pos:column="25"/></name> <init pos:line="31" pos:column="26">= <expr><call><name pos:line="31" pos:column="28">getrpacketevent<pos:position pos:line="31" pos:column="43"/></name><argument_list pos:line="31" pos:column="43">(<argument><expr><operator pos:line="31" pos:column="44">&amp;<pos:position pos:line="31" pos:column="49"/></operator><name><name pos:line="31" pos:column="45">state<pos:position pos:line="31" pos:column="50"/></name><operator pos:line="31" pos:column="50">-&gt;<pos:position pos:line="31" pos:column="55"/></operator><name pos:line="31" pos:column="52">rpacket<pos:position pos:line="31" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">state<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">-&gt;<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="12">event<pos:position pos:line="32" pos:column="17"/></name></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <operator pos:line="32" pos:column="20">(<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="21">tftp_event_t<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">)<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="34">event<pos:position pos:line="32" pos:column="39"/></name></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>

    <switch pos:line="34" pos:column="5">switch<condition pos:line="34" pos:column="11">(<expr><name><name pos:line="34" pos:column="12">state<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">-&gt;<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="19">event<pos:position pos:line="34" pos:column="24"/></name></name></expr>)<pos:position pos:line="34" pos:column="25"/></condition> <block pos:line="34" pos:column="26">{
    <case pos:line="35" pos:column="5">case <expr><name pos:line="35" pos:column="10">TFTP_EVENT_DATA<pos:position pos:line="35" pos:column="25"/></name></expr>:<pos:position pos:line="35" pos:column="26"/></case>
      <comment type="block" pos:line="36" pos:column="7">/* Don't pass to the client empty or retransmitted packets */</comment>
      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><name><name pos:line="37" pos:column="10">state<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">-&gt;<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="17">rbytes<pos:position pos:line="37" pos:column="23"/></name></name> <operator pos:line="37" pos:column="24">&gt;<pos:position pos:line="37" pos:column="28"/></operator> <literal type="number" pos:line="37" pos:column="26">4<pos:position pos:line="37" pos:column="27"/></literal> <operator pos:line="37" pos:column="28">&amp;&amp;<pos:position pos:line="37" pos:column="38"/></operator>
         <operator pos:line="38" pos:column="10">(<pos:position pos:line="38" pos:column="11"/></operator><call><name pos:line="38" pos:column="11">NEXT_BLOCKNUM<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name><name pos:line="38" pos:column="25">state<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">-&gt;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="32">block<pos:position pos:line="38" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call> <operator pos:line="38" pos:column="39">==<pos:position pos:line="38" pos:column="41"/></operator> <call><name pos:line="38" pos:column="42">getrpacketblock<pos:position pos:line="38" pos:column="57"/></name><argument_list pos:line="38" pos:column="57">(<argument><expr><operator pos:line="38" pos:column="58">&amp;<pos:position pos:line="38" pos:column="63"/></operator><name><name pos:line="38" pos:column="59">state<pos:position pos:line="38" pos:column="64"/></name><operator pos:line="38" pos:column="64">-&gt;<pos:position pos:line="38" pos:column="69"/></operator><name pos:line="38" pos:column="66">rpacket<pos:position pos:line="38" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call><operator pos:line="38" pos:column="74">)<pos:position pos:line="38" pos:column="75"/></operator></expr>)<pos:position pos:line="38" pos:column="76"/></condition><then pos:line="38" pos:column="76"> <block pos:line="38" pos:column="77">{
        <expr_stmt><expr><name pos:line="39" pos:column="9">result<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="18">Curl_client_write<pos:position pos:line="39" pos:column="35"/></name><argument_list pos:line="39" pos:column="35">(<argument><expr><name pos:line="39" pos:column="36">conn<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="42">CLIENTWRITE_BODY<pos:position pos:line="39" pos:column="58"/></name></expr></argument>,
                                   <argument><expr><operator pos:line="40" pos:column="36">(<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="37">char<pos:position pos:line="40" pos:column="41"/></name> <operator pos:line="40" pos:column="42">*<pos:position pos:line="40" pos:column="43"/></operator><operator pos:line="40" pos:column="43">)<pos:position pos:line="40" pos:column="44"/></operator><name><name pos:line="40" pos:column="44">state<pos:position pos:line="40" pos:column="49"/></name><operator pos:line="40" pos:column="49">-&gt;<pos:position pos:line="40" pos:column="54"/></operator><name pos:line="40" pos:column="51">rpacket<pos:position pos:line="40" pos:column="58"/></name><operator pos:line="40" pos:column="58">.<pos:position pos:line="40" pos:column="59"/></operator><name pos:line="40" pos:column="59">data<pos:position pos:line="40" pos:column="63"/></name></name> <operator pos:line="40" pos:column="64">+<pos:position pos:line="40" pos:column="65"/></operator> <literal type="number" pos:line="40" pos:column="66">4<pos:position pos:line="40" pos:column="67"/></literal></expr></argument>,
                                   <argument><expr><name><name pos:line="41" pos:column="36">state<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">-&gt;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="43">rbytes<pos:position pos:line="41" pos:column="49"/></name></name><operator pos:line="41" pos:column="49">-<pos:position pos:line="41" pos:column="50"/></operator><literal type="number" pos:line="41" pos:column="50">4<pos:position pos:line="41" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt>
        <if pos:line="42" pos:column="9">if<condition pos:line="42" pos:column="11">(<expr><name pos:line="42" pos:column="12">result<pos:position pos:line="42" pos:column="18"/></name></expr>)<pos:position pos:line="42" pos:column="19"/></condition><then pos:line="42" pos:column="19"> <block pos:line="42" pos:column="20">{
          <expr_stmt><expr><call><name pos:line="43" pos:column="11">tftp_state_machine<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">state<pos:position pos:line="43" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="37">TFTP_EVENT_ERROR<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="55"/></expr_stmt>
          <return pos:line="44" pos:column="11">return <expr><name pos:line="44" pos:column="18">result<pos:position pos:line="44" pos:column="24"/></name></expr>;<pos:position pos:line="44" pos:column="25"/></return>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">k<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">-&gt;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="12">bytecount<pos:position pos:line="46" pos:column="21"/></name></name> <operator pos:line="46" pos:column="22">+=<pos:position pos:line="46" pos:column="24"/></operator> <name><name pos:line="46" pos:column="25">state<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">-&gt;<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="32">rbytes<pos:position pos:line="46" pos:column="38"/></name></name><operator pos:line="46" pos:column="38">-<pos:position pos:line="46" pos:column="39"/></operator><literal type="number" pos:line="46" pos:column="39">4<pos:position pos:line="46" pos:column="40"/></literal></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">Curl_pgrsSetDownloadCounter<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><name pos:line="47" pos:column="37">data<pos:position pos:line="47" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="43">(<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">curl_off_t<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">)<pos:position pos:line="47" pos:column="55"/></operator> <name><name pos:line="47" pos:column="56">k<pos:position pos:line="47" pos:column="57"/></name><operator pos:line="47" pos:column="57">-&gt;<pos:position pos:line="47" pos:column="62"/></operator><name pos:line="47" pos:column="59">bytecount<pos:position pos:line="47" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="70"/></expr_stmt>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>
      <break pos:line="49" pos:column="7">break;<pos:position pos:line="49" pos:column="13"/></break>
    <case pos:line="50" pos:column="5">case <expr><name pos:line="50" pos:column="10">TFTP_EVENT_ERROR<pos:position pos:line="50" pos:column="26"/></name></expr>:<pos:position pos:line="50" pos:column="27"/></case>
    <block pos:line="51" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="52" pos:column="7">unsigned<pos:position pos:line="52" pos:column="15"/></name> <name pos:line="52" pos:column="16">short<pos:position pos:line="52" pos:column="21"/></name></type> <name pos:line="52" pos:column="22">error<pos:position pos:line="52" pos:column="27"/></name> <init pos:line="52" pos:column="28">= <expr><call><name pos:line="52" pos:column="30">getrpacketblock<pos:position pos:line="52" pos:column="45"/></name><argument_list pos:line="52" pos:column="45">(<argument><expr><operator pos:line="52" pos:column="46">&amp;<pos:position pos:line="52" pos:column="51"/></operator><name><name pos:line="52" pos:column="47">state<pos:position pos:line="52" pos:column="52"/></name><operator pos:line="52" pos:column="52">-&gt;<pos:position pos:line="52" pos:column="57"/></operator><name pos:line="52" pos:column="54">rpacket<pos:position pos:line="52" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="63"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">state<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">error<pos:position pos:line="53" pos:column="19"/></name></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <operator pos:line="53" pos:column="22">(<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="23">tftp_error_t<pos:position pos:line="53" pos:column="35"/></name><operator pos:line="53" pos:column="35">)<pos:position pos:line="53" pos:column="36"/></operator><name pos:line="53" pos:column="36">error<pos:position pos:line="53" pos:column="41"/></name></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="54" pos:column="7">infof<pos:position pos:line="54" pos:column="12"/></name><argument_list pos:line="54" pos:column="12">(<argument><expr><name pos:line="54" pos:column="13">data<pos:position pos:line="54" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="19">"%s\n"<pos:position pos:line="54" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="54" pos:column="27">(<pos:position pos:line="54" pos:column="28"/></operator><specifier pos:line="54" pos:column="28">const<pos:position pos:line="54" pos:column="33"/></specifier> <name pos:line="54" pos:column="34">char<pos:position pos:line="54" pos:column="38"/></name> <operator pos:line="54" pos:column="39">*<pos:position pos:line="54" pos:column="40"/></operator><operator pos:line="54" pos:column="40">)<pos:position pos:line="54" pos:column="41"/></operator><name><name pos:line="54" pos:column="41">state<pos:position pos:line="54" pos:column="46"/></name><operator pos:line="54" pos:column="46">-&gt;<pos:position pos:line="54" pos:column="51"/></operator><name pos:line="54" pos:column="48">rpacket<pos:position pos:line="54" pos:column="55"/></name><operator pos:line="54" pos:column="55">.<pos:position pos:line="54" pos:column="56"/></operator><name pos:line="54" pos:column="56">data<pos:position pos:line="54" pos:column="60"/></name></name> <operator pos:line="54" pos:column="61">+<pos:position pos:line="54" pos:column="62"/></operator> <literal type="number" pos:line="54" pos:column="63">4<pos:position pos:line="54" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="66"/></expr_stmt>
      <break pos:line="55" pos:column="7">break;<pos:position pos:line="55" pos:column="13"/></break>
    }<pos:position pos:line="56" pos:column="6"/></block>
    <case pos:line="57" pos:column="5">case <expr><name pos:line="57" pos:column="10">TFTP_EVENT_ACK<pos:position pos:line="57" pos:column="24"/></name></expr>:<pos:position pos:line="57" pos:column="25"/></case>
      <break pos:line="58" pos:column="7">break;<pos:position pos:line="58" pos:column="13"/></break>
    <case pos:line="59" pos:column="5">case <expr><name pos:line="59" pos:column="10">TFTP_EVENT_OACK<pos:position pos:line="59" pos:column="25"/></name></expr>:<pos:position pos:line="59" pos:column="26"/></case>
      <expr_stmt><expr><name pos:line="60" pos:column="7">result<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <call><name pos:line="60" pos:column="16">tftp_parse_option_ack<pos:position pos:line="60" pos:column="37"/></name><argument_list pos:line="60" pos:column="37">(<argument><expr><name pos:line="60" pos:column="38">state<pos:position pos:line="60" pos:column="43"/></name></expr></argument>,
                                     <argument><expr><operator pos:line="61" pos:column="38">(<pos:position pos:line="61" pos:column="39"/></operator><specifier pos:line="61" pos:column="39">const<pos:position pos:line="61" pos:column="44"/></specifier> <name pos:line="61" pos:column="45">char<pos:position pos:line="61" pos:column="49"/></name> <operator pos:line="61" pos:column="50">*<pos:position pos:line="61" pos:column="51"/></operator><operator pos:line="61" pos:column="51">)<pos:position pos:line="61" pos:column="52"/></operator><name><name pos:line="61" pos:column="52">state<pos:position pos:line="61" pos:column="57"/></name><operator pos:line="61" pos:column="57">-&gt;<pos:position pos:line="61" pos:column="62"/></operator><name pos:line="61" pos:column="59">rpacket<pos:position pos:line="61" pos:column="66"/></name><operator pos:line="61" pos:column="66">.<pos:position pos:line="61" pos:column="67"/></operator><name pos:line="61" pos:column="67">data<pos:position pos:line="61" pos:column="71"/></name></name> <operator pos:line="61" pos:column="72">+<pos:position pos:line="61" pos:column="73"/></operator> <literal type="number" pos:line="61" pos:column="74">2<pos:position pos:line="61" pos:column="75"/></literal></expr></argument>,
                                     <argument><expr><name><name pos:line="62" pos:column="38">state<pos:position pos:line="62" pos:column="43"/></name><operator pos:line="62" pos:column="43">-&gt;<pos:position pos:line="62" pos:column="48"/></operator><name pos:line="62" pos:column="45">rbytes<pos:position pos:line="62" pos:column="51"/></name></name><operator pos:line="62" pos:column="51">-<pos:position pos:line="62" pos:column="52"/></operator><literal type="number" pos:line="62" pos:column="52">2<pos:position pos:line="62" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="55"/></expr_stmt>
      <if pos:line="63" pos:column="7">if<condition pos:line="63" pos:column="9">(<expr><name pos:line="63" pos:column="10">result<pos:position pos:line="63" pos:column="16"/></name></expr>)<pos:position pos:line="63" pos:column="17"/></condition><then pos:line="63" pos:column="17">
        <block type="pseudo"><return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">result<pos:position pos:line="64" pos:column="22"/></name></expr>;<pos:position pos:line="64" pos:column="23"/></return></block></then></if>
      <break pos:line="65" pos:column="7">break;<pos:position pos:line="65" pos:column="13"/></break>
    <case pos:line="66" pos:column="5">case <expr><name pos:line="66" pos:column="10">TFTP_EVENT_RRQ<pos:position pos:line="66" pos:column="24"/></name></expr>:<pos:position pos:line="66" pos:column="25"/></case>
    <case pos:line="67" pos:column="5">case <expr><name pos:line="67" pos:column="10">TFTP_EVENT_WRQ<pos:position pos:line="67" pos:column="24"/></name></expr>:<pos:position pos:line="67" pos:column="25"/></case>
    <default pos:line="68" pos:column="5">default:<pos:position pos:line="68" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="69" pos:column="7">failf<pos:position pos:line="69" pos:column="12"/></name><argument_list pos:line="69" pos:column="12">(<argument><expr><name pos:line="69" pos:column="13">data<pos:position pos:line="69" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="19">"%s"<pos:position pos:line="69" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="25">"Internal error: Unexpected packet"<pos:position pos:line="69" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="62"/></expr_stmt>
      <break pos:line="70" pos:column="7">break;<pos:position pos:line="70" pos:column="13"/></break>
    }<pos:position pos:line="71" pos:column="6"/></block></switch>

    <comment type="block" pos:line="73" pos:column="5">/* Update the progress meter */</comment>
    <if pos:line="74" pos:column="5">if<condition pos:line="74" pos:column="7">(<expr><call><name pos:line="74" pos:column="8">Curl_pgrsUpdate<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name pos:line="74" pos:column="24">conn<pos:position pos:line="74" pos:column="28"/></name></expr></argument>)<pos:position pos:line="74" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="30"/></condition><then pos:line="74" pos:column="30"> <block pos:line="74" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">tftp_state_machine<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">state<pos:position pos:line="75" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="33">TFTP_EVENT_ERROR<pos:position pos:line="75" pos:column="49"/></name></expr></argument>)<pos:position pos:line="75" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="51"/></expr_stmt>
      <return pos:line="76" pos:column="7">return <expr><name pos:line="76" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="76" pos:column="39"/></name></expr>;<pos:position pos:line="76" pos:column="40"/></return>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>
  }<pos:position pos:line="78" pos:column="4"/></block></else></if>
  <return pos:line="79" pos:column="3">return <expr><name pos:line="79" pos:column="10">result<pos:position pos:line="79" pos:column="16"/></name></expr>;<pos:position pos:line="79" pos:column="17"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
