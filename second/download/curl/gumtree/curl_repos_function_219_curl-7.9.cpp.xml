<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_219_curl-7.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">Curl_sec_vfprintf2<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name><name pos:line="2" pos:column="20">struct<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">connectdata<pos:position pos:line="2" pos:column="38"/></name></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">conn<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">FILE<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">f<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="55">const<pos:position pos:line="2" pos:column="60"/></specifier> <name pos:line="2" pos:column="61">char<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">fmt<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="72">va_list<pos:position pos:line="2" pos:column="79"/></name></type> <name pos:line="2" pos:column="80">ap<pos:position pos:line="2" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="83"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">buf<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">ret<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><name><name pos:line="6" pos:column="6">conn<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">data_prot<pos:position pos:line="6" pos:column="21"/></name></name> <operator pos:line="6" pos:column="22">==<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">prot_clear<pos:position pos:line="6" pos:column="35"/></name></expr>)<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><call><name pos:line="7" pos:column="12">vfprintf<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">f<pos:position pos:line="7" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="24">fmt<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="29">ap<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></return></block></then>
  <else pos:line="8" pos:column="3">else <block pos:line="8" pos:column="8">{
    <expr_stmt><expr><name pos:line="9" pos:column="5">buf<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">aprintf<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">fmt<pos:position pos:line="9" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="24">ap<pos:position pos:line="9" pos:column="26"/></name></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">ret<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <call><name pos:line="10" pos:column="11">buffer_write<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><operator pos:line="10" pos:column="24">&amp;<pos:position pos:line="10" pos:column="29"/></operator><name><name pos:line="10" pos:column="25">conn<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">out_buffer<pos:position pos:line="10" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="43">buf<pos:position pos:line="10" pos:column="46"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="48">strlen<pos:position pos:line="10" pos:column="54"/></name><argument_list pos:line="10" pos:column="54">(<argument><expr><name pos:line="10" pos:column="55">buf<pos:position pos:line="10" pos:column="58"/></name></expr></argument>)<pos:position pos:line="10" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">free<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><name pos:line="11" pos:column="10">buf<pos:position pos:line="11" pos:column="13"/></name></expr></argument>)<pos:position pos:line="11" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">ret<pos:position pos:line="12" pos:column="15"/></name></expr>;<pos:position pos:line="12" pos:column="16"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></else></if>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
