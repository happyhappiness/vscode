<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2246_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">dump_addrinfo<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">Curl_addrinfo<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">ai<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">printf<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><literal type="string" pos:line="3" pos:column="10">"dump_addrinfo:\n"<pos:position pos:line="3" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="30"/></expr_stmt>
  <for pos:line="4" pos:column="3">for<control pos:line="4" pos:column="6">(<init pos:line="4" pos:column="7">;<pos:position pos:line="4" pos:column="8"/></init> <condition><expr><name pos:line="4" pos:column="9">ai<pos:position pos:line="4" pos:column="11"/></name></expr>;<pos:position pos:line="4" pos:column="12"/></condition> <incr><expr><name pos:line="4" pos:column="13">ai<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <name><name pos:line="4" pos:column="18">ai<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">-&gt;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="22">ai_next<pos:position pos:line="4" pos:column="29"/></name></name></expr></incr>)<pos:position pos:line="4" pos:column="30"/></control> <block pos:line="4" pos:column="31">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type>  <name><name pos:line="5" pos:column="11">buf<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><name pos:line="5" pos:column="15">INET6_ADDRSTRLEN<pos:position pos:line="5" pos:column="31"/></name></expr>]<pos:position pos:line="5" pos:column="32"/></index></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">printf<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="string" pos:line="7" pos:column="12">"    fam %2d, CNAME %s, "<pos:position pos:line="7" pos:column="37"/></literal></expr></argument>,
           <argument><expr><name><name pos:line="8" pos:column="12">ai<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">-&gt;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="16">ai_family<pos:position pos:line="8" pos:column="25"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="8" pos:column="27">ai<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">-&gt;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="31">ai_canonname<pos:position pos:line="8" pos:column="43"/></name></name></expr> ?<pos:position pos:line="8" pos:column="45"/></condition><then pos:line="8" pos:column="45"> <expr><name><name pos:line="8" pos:column="46">ai<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">-&gt;<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="50">ai_canonname<pos:position pos:line="8" pos:column="62"/></name></name></expr> <pos:position pos:line="8" pos:column="63"/></then><else pos:line="8" pos:column="63">: <expr><literal type="string" pos:line="8" pos:column="65">"&lt;none&gt;"<pos:position pos:line="8" pos:column="79"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="8" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="75"/></expr_stmt>
    <if pos:line="9" pos:column="5">if<condition pos:line="9" pos:column="7">(<expr><call><name pos:line="9" pos:column="8">Curl_printable_address<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">ai<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="35">buf<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="40">sizeof<argument_list pos:line="9" pos:column="46">(<argument><expr><name pos:line="9" pos:column="47">buf<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="53"/></condition><then pos:line="9" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="7">printf<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><literal type="string" pos:line="10" pos:column="14">"%s\n"<pos:position pos:line="10" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="22">buf<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt></block></then>
    <else pos:line="11" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="7">printf<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><literal type="string" pos:line="12" pos:column="14">"failed; %s\n"<pos:position pos:line="12" pos:column="28"/></literal></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="30">Curl_strerror<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">(<argument><expr><name pos:line="12" pos:column="44">conn<pos:position pos:line="12" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">SOCKERRNO<pos:position pos:line="12" pos:column="59"/></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="62"/></expr_stmt></block></else></if>
  }<pos:position pos:line="13" pos:column="4"/></block></for>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
