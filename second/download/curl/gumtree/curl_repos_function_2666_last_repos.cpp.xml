<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2666_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">nss_send<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">connectdata<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conn<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,  <comment type="block" pos:line="1" pos:column="52">/* connection data */</comment>
                        <parameter><decl><type><name pos:line="2" pos:column="25">int<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">sockindex<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,             <comment type="block" pos:line="2" pos:column="52">/* socketindex */</comment>
                        <parameter><decl><type><specifier pos:line="3" pos:column="25">const<pos:position pos:line="3" pos:column="30"/></specifier> <name pos:line="3" pos:column="31">void<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">mem<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>,           <comment type="block" pos:line="3" pos:column="52">/* send this data */</comment>
                        <parameter><decl><type><name pos:line="4" pos:column="25">size_t<pos:position pos:line="4" pos:column="31"/></name></type> <name pos:line="4" pos:column="32">len<pos:position pos:line="4" pos:column="35"/></name></decl></parameter>,                <comment type="block" pos:line="4" pos:column="52">/* amount to write */</comment>
                        <parameter><decl><type><name pos:line="5" pos:column="25">CURLcode<pos:position pos:line="5" pos:column="33"/></name> <modifier pos:line="5" pos:column="34">*<pos:position pos:line="5" pos:column="35"/></modifier></type><name pos:line="5" pos:column="35">curlcode<pos:position pos:line="5" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="44"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">ssl_connect_data<pos:position pos:line="7" pos:column="26"/></name></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">connssl<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><operator pos:line="7" pos:column="38">&amp;<pos:position pos:line="7" pos:column="43"/></operator><name><name pos:line="7" pos:column="39">conn<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">ssl<pos:position pos:line="7" pos:column="48"/></name><index pos:line="7" pos:column="48">[<expr><name pos:line="7" pos:column="49">sockindex<pos:position pos:line="7" pos:column="58"/></name></expr>]<pos:position pos:line="7" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">ssize_t<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">rc<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* The SelectClientCert() hook uses this for infof() and failf() but the
     handle stored in nss_setup_connect() could have already been freed. */</comment>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">BACKEND<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">data<pos:position pos:line="12" pos:column="16"/></name></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <name><name pos:line="12" pos:column="19">conn<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">-&gt;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="25">data<pos:position pos:line="12" pos:column="29"/></name></name></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">rc<pos:position pos:line="14" pos:column="5"/></name> <operator pos:line="14" pos:column="6">=<pos:position pos:line="14" pos:column="7"/></operator> <call><name pos:line="14" pos:column="8">PR_Send<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name><name pos:line="14" pos:column="16">BACKEND<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">handle<pos:position pos:line="14" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">mem<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="38">(<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">int<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">)<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="43">len<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="48">0<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="51">PR_INTERVAL_NO_WAIT<pos:position pos:line="14" pos:column="70"/></name></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="72"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">rc<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">&lt;<pos:position pos:line="15" pos:column="13"/></operator> <literal type="number" pos:line="15" pos:column="11">0<pos:position pos:line="15" pos:column="12"/></literal></expr>)<pos:position pos:line="15" pos:column="13"/></condition><then pos:line="15" pos:column="13"> <block pos:line="15" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">PRInt32<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">err<pos:position pos:line="16" pos:column="16"/></name> <init pos:line="16" pos:column="17">= <expr><call><name pos:line="16" pos:column="19">PR_GetError<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">()<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="33"/></decl_stmt>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name pos:line="17" pos:column="8">err<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">==<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">PR_WOULD_BLOCK_ERROR<pos:position pos:line="17" pos:column="35"/></name></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="7">*<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">curlcode<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <name pos:line="18" pos:column="19">CURLE_AGAIN<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt></block></then>
    <else pos:line="19" pos:column="5">else <block pos:line="19" pos:column="10">{
      <comment type="block" pos:line="20" pos:column="7">/* print the error number and error string */</comment>
      <decl_stmt><decl><type><specifier pos:line="21" pos:column="7">const<pos:position pos:line="21" pos:column="12"/></specifier> <name pos:line="21" pos:column="13">char<pos:position pos:line="21" pos:column="17"/></name> <modifier pos:line="21" pos:column="18">*<pos:position pos:line="21" pos:column="19"/></modifier></type><name pos:line="21" pos:column="19">err_name<pos:position pos:line="21" pos:column="27"/></name> <init pos:line="21" pos:column="28">= <expr><call><name pos:line="21" pos:column="30">nss_error_to_name<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">err<pos:position pos:line="21" pos:column="51"/></name></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="53"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">infof<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name><name pos:line="22" pos:column="13">conn<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">-&gt;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="19">data<pos:position pos:line="22" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="25">"SSL write: error %d (%s)\n"<pos:position pos:line="22" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">err<pos:position pos:line="22" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="60">err_name<pos:position pos:line="22" pos:column="68"/></name></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="70"/></expr_stmt>

      <comment type="block" pos:line="24" pos:column="7">/* print a human-readable message describing the error if available */</comment>
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">nss_print_error_message<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name><name pos:line="25" pos:column="31">conn<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="37">data<pos:position pos:line="25" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="43">err<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>

      <expr_stmt><expr><operator pos:line="27" pos:column="7">*<pos:position pos:line="27" pos:column="8"/></operator><name pos:line="27" pos:column="8">curlcode<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <ternary><condition><expr><operator pos:line="27" pos:column="19">(<pos:position pos:line="27" pos:column="20"/></operator><call><name pos:line="27" pos:column="20">is_cc_error<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">err<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call><operator pos:line="27" pos:column="36">)<pos:position pos:line="27" pos:column="37"/></operator></expr>
        ?<pos:position pos:line="28" pos:column="10"/></condition><then pos:line="28" pos:column="10"> <expr><name pos:line="28" pos:column="11">CURLE_SSL_CERTPROBLEM<pos:position pos:line="28" pos:column="32"/></name></expr>
        <pos:position pos:line="29" pos:column="9"/></then><else pos:line="29" pos:column="9">: <expr><name pos:line="29" pos:column="11">CURLE_SEND_ERROR<pos:position pos:line="29" pos:column="27"/></name></expr></else></ternary></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>

    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">-<pos:position pos:line="32" pos:column="13"/></operator><literal type="number" pos:line="32" pos:column="13">1<pos:position pos:line="32" pos:column="14"/></literal></expr>;<pos:position pos:line="32" pos:column="15"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">rc<pos:position pos:line="35" pos:column="12"/></name></expr>;<pos:position pos:line="35" pos:column="13"/></return> <comment type="block" pos:line="35" pos:column="14">/* number of bytes */</comment>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
