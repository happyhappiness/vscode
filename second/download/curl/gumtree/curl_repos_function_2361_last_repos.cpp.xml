<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2361_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">Curl_ossl_seed<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">Curl_easy<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">data<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* we have the "SSL is seeded" boolean static to prevent multiple
     time-consuming seedings in vain */</comment>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">bool<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">ssl_seeded<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">FALSE<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">fname<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">256<pos:position pos:line="6" pos:column="17"/></literal></expr>]<pos:position pos:line="6" pos:column="18"/></index></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name pos:line="8" pos:column="6">ssl_seeded<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">CURLE_OK<pos:position pos:line="9" pos:column="20"/></name></expr>;<pos:position pos:line="9" pos:column="21"/></return></block></then></if>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><call><name pos:line="11" pos:column="6">rand_enough<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">()<pos:position pos:line="11" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20"> <block pos:line="11" pos:column="21">{
    <comment type="block" pos:line="12" pos:column="5">/* OpenSSL 1.1.0+ will return here */</comment>
    <expr_stmt><expr><name pos:line="13" pos:column="5">ssl_seeded<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">TRUE<pos:position pos:line="13" pos:column="22"/></name></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">CURLE_OK<pos:position pos:line="14" pos:column="20"/></name></expr>;<pos:position pos:line="14" pos:column="21"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

<cpp:ifndef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifndef<pos:position pos:line="17" pos:column="8"/></cpp:directive> <name pos:line="17" pos:column="9">RANDOM_FILE<pos:position pos:line="17" pos:column="20"/></name></cpp:ifndef>
  <comment type="block" pos:line="18" pos:column="3">/* if RANDOM_FILE isn't defined, we only perform this if an option tells
     us to! */</comment>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name><name pos:line="20" pos:column="6">data<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">set<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">.<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">str<pos:position pos:line="20" pos:column="19"/></name><index pos:line="20" pos:column="19">[<expr><name pos:line="20" pos:column="20">STRING_SSL_RANDOM_FILE<pos:position pos:line="20" pos:column="42"/></name></expr>]<pos:position pos:line="20" pos:column="43"/></index></name></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44">
<cpp:define pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">define<pos:position pos:line="21" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="21" pos:column="9">RANDOM_FILE<pos:position pos:line="21" pos:column="20"/></name></cpp:macro> <cpp:value pos:line="21" pos:column="21">""<pos:position pos:line="21" pos:column="23"/></cpp:value></cpp:define> <comment type="block" pos:line="21" pos:column="24">/* doesn't matter won't be used */</comment>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
  <block pos:line="23" pos:column="3">{
    <comment type="block" pos:line="24" pos:column="5">/* let the option override the define */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">RAND_load_file<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><operator pos:line="25" pos:column="20">(<pos:position pos:line="25" pos:column="21"/></operator><ternary><condition><expr><name><name pos:line="25" pos:column="21">data<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">-&gt;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="27">set<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">.<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">str<pos:position pos:line="25" pos:column="34"/></name><index pos:line="25" pos:column="34">[<expr><name pos:line="25" pos:column="35">STRING_SSL_RANDOM_FILE<pos:position pos:line="25" pos:column="57"/></name></expr>]<pos:position pos:line="25" pos:column="58"/></index></name></expr>?<pos:position pos:line="25" pos:column="59"/></condition><then pos:line="25" pos:column="59">
                    <expr><name><name pos:line="26" pos:column="21">data<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">-&gt;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="27">set<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">.<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="31">str<pos:position pos:line="26" pos:column="34"/></name><index pos:line="26" pos:column="34">[<expr><name pos:line="26" pos:column="35">STRING_SSL_RANDOM_FILE<pos:position pos:line="26" pos:column="57"/></name></expr>]<pos:position pos:line="26" pos:column="58"/></index></name></expr></then><else pos:line="26" pos:column="58">:
                    <expr><name pos:line="27" pos:column="21">RANDOM_FILE<pos:position pos:line="27" pos:column="32"/></name></expr></else></ternary><operator pos:line="27" pos:column="32">)<pos:position pos:line="27" pos:column="33"/></operator></expr></argument>,
                   <argument><expr><name pos:line="28" pos:column="20">RAND_LOAD_LENGTH<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><call><name pos:line="29" pos:column="8">rand_enough<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">()<pos:position pos:line="29" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="22"/></condition><then pos:line="29" pos:column="22">
      <block type="pseudo"><return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">CURLE_OK<pos:position pos:line="30" pos:column="22"/></name></expr>;<pos:position pos:line="30" pos:column="23"/></return></block></then></if>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

<cpp:if pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">if<pos:position pos:line="33" pos:column="4"/></cpp:directive> <expr><call><name pos:line="33" pos:column="5">defined<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">HAVE_RAND_EGD<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="34" pos:column="3">/* only available in OpenSSL 0.9.5 and later */</comment>
  <comment type="block" pos:line="35" pos:column="3">/* EGD_SOCKET is set at configure time or not at all */</comment>
<cpp:ifndef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifndef<pos:position pos:line="36" pos:column="8"/></cpp:directive> <name pos:line="36" pos:column="9">EGD_SOCKET<pos:position pos:line="36" pos:column="19"/></name></cpp:ifndef>
  <comment type="block" pos:line="37" pos:column="3">/* If we don't have the define set, we only do this if the egd-option
     is set */</comment>
  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name><name pos:line="39" pos:column="6">data<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">-&gt;<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="12">set<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">.<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="16">str<pos:position pos:line="39" pos:column="19"/></name><index pos:line="39" pos:column="19">[<expr><name pos:line="39" pos:column="20">STRING_SSL_EGDSOCKET<pos:position pos:line="39" pos:column="40"/></name></expr>]<pos:position pos:line="39" pos:column="41"/></index></name></expr>)<pos:position pos:line="39" pos:column="42"/></condition><then pos:line="39" pos:column="42">
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define<pos:position pos:line="40" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">EGD_SOCKET<pos:position pos:line="40" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="40" pos:column="20">""<pos:position pos:line="40" pos:column="22"/></cpp:value></cpp:define> <comment type="block" pos:line="40" pos:column="23">/* doesn't matter won't be used */</comment>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
  <block pos:line="42" pos:column="3">{
    <comment type="block" pos:line="43" pos:column="5">/* If there's an option and a define, the option overrides the
       define */</comment>
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">int<pos:position pos:line="45" pos:column="8"/></name></type> <name pos:line="45" pos:column="9">ret<pos:position pos:line="45" pos:column="12"/></name> <init pos:line="45" pos:column="13">= <expr><call><name pos:line="45" pos:column="15">RAND_egd<pos:position pos:line="45" pos:column="23"/></name><argument_list pos:line="45" pos:column="23">(<argument><expr><ternary><condition><expr><name><name pos:line="45" pos:column="24">data<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">-&gt;<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="30">set<pos:position pos:line="45" pos:column="33"/></name><operator pos:line="45" pos:column="33">.<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="34">str<pos:position pos:line="45" pos:column="37"/></name><index pos:line="45" pos:column="37">[<expr><name pos:line="45" pos:column="38">STRING_SSL_EGDSOCKET<pos:position pos:line="45" pos:column="58"/></name></expr>]<pos:position pos:line="45" pos:column="59"/></index></name></expr>?<pos:position pos:line="45" pos:column="60"/></condition><then pos:line="45" pos:column="60">
                       <expr><name><name pos:line="46" pos:column="24">data<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">-&gt;<pos:position pos:line="46" pos:column="33"/></operator><name pos:line="46" pos:column="30">set<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">.<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">str<pos:position pos:line="46" pos:column="37"/></name><index pos:line="46" pos:column="37">[<expr><name pos:line="46" pos:column="38">STRING_SSL_EGDSOCKET<pos:position pos:line="46" pos:column="58"/></name></expr>]<pos:position pos:line="46" pos:column="59"/></index></name></expr></then><else pos:line="46" pos:column="59">:<expr><name pos:line="46" pos:column="60">EGD_SOCKET<pos:position pos:line="46" pos:column="70"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="46" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="72"/></decl_stmt>
    <if pos:line="47" pos:column="5">if<condition pos:line="47" pos:column="7">(<expr><operator pos:line="47" pos:column="8">-<pos:position pos:line="47" pos:column="9"/></operator><literal type="number" pos:line="47" pos:column="9">1<pos:position pos:line="47" pos:column="10"/></literal> <operator pos:line="47" pos:column="11">!=<pos:position pos:line="47" pos:column="13"/></operator> <name pos:line="47" pos:column="14">ret<pos:position pos:line="47" pos:column="17"/></name></expr>)<pos:position pos:line="47" pos:column="18"/></condition><then pos:line="47" pos:column="18"> <block pos:line="47" pos:column="19">{
      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><call><name pos:line="48" pos:column="10">rand_enough<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">()<pos:position pos:line="48" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="24"/></condition><then pos:line="48" pos:column="24">
        <block type="pseudo"><return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">CURLE_OK<pos:position pos:line="49" pos:column="24"/></name></expr>;<pos:position pos:line="49" pos:column="25"/></return></block></then></if>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="54" pos:column="3">/* fallback to a custom seeding of the PRNG using a hash based on a current
     time */</comment>
  <do pos:line="56" pos:column="3">do <block pos:line="56" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="57" pos:column="5">unsigned<pos:position pos:line="57" pos:column="13"/></name> <name pos:line="57" pos:column="14">char<pos:position pos:line="57" pos:column="18"/></name></type> <name><name pos:line="57" pos:column="19">randb<pos:position pos:line="57" pos:column="24"/></name><index pos:line="57" pos:column="24">[<expr><literal type="number" pos:line="57" pos:column="25">64<pos:position pos:line="57" pos:column="27"/></literal></expr>]<pos:position pos:line="57" pos:column="28"/></index></name></decl>;<pos:position pos:line="57" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="58" pos:column="5">size_t<pos:position pos:line="58" pos:column="11"/></name></type> <name pos:line="58" pos:column="12">len<pos:position pos:line="58" pos:column="15"/></name> <init pos:line="58" pos:column="16">= <expr><sizeof pos:line="58" pos:column="18">sizeof<argument_list pos:line="58" pos:column="24">(<argument><expr><name pos:line="58" pos:column="25">randb<pos:position pos:line="58" pos:column="30"/></name></expr></argument>)<pos:position pos:line="58" pos:column="31"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="58" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="59" pos:column="5">size_t<pos:position pos:line="59" pos:column="11"/></name></type> <name pos:line="59" pos:column="12">i<pos:position pos:line="59" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="59" pos:column="15">i_max<pos:position pos:line="59" pos:column="20"/></name></decl>;<pos:position pos:line="59" pos:column="21"/></decl_stmt>
    <for pos:line="60" pos:column="5">for<control pos:line="60" pos:column="8">(<init><expr><name pos:line="60" pos:column="9">i<pos:position pos:line="60" pos:column="10"/></name> <operator pos:line="60" pos:column="11">=<pos:position pos:line="60" pos:column="12"/></operator> <literal type="number" pos:line="60" pos:column="13">0<pos:position pos:line="60" pos:column="14"/></literal></expr><operator pos:line="60" pos:column="14">,<pos:position pos:line="60" pos:column="15"/></operator> <expr><name pos:line="60" pos:column="16">i_max<pos:position pos:line="60" pos:column="21"/></name> <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">len<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">/<pos:position pos:line="60" pos:column="29"/></operator> <sizeof pos:line="60" pos:column="30">sizeof<argument_list pos:line="60" pos:column="36">(<argument><expr pos:line="60" pos:column="37">struct <name pos:line="60" pos:column="44">curltime<pos:position pos:line="60" pos:column="52"/></name></expr></argument>)<pos:position pos:line="60" pos:column="53"/></argument_list></sizeof></expr>;<pos:position pos:line="60" pos:column="54"/></init> <condition><expr><name pos:line="60" pos:column="55">i<pos:position pos:line="60" pos:column="56"/></name> <operator pos:line="60" pos:column="57">&lt;<pos:position pos:line="60" pos:column="61"/></operator> <name pos:line="60" pos:column="59">i_max<pos:position pos:line="60" pos:column="64"/></name></expr>;<pos:position pos:line="60" pos:column="65"/></condition> <incr><expr><operator pos:line="60" pos:column="66">++<pos:position pos:line="60" pos:column="68"/></operator><name pos:line="60" pos:column="68">i<pos:position pos:line="60" pos:column="69"/></name></expr></incr>)<pos:position pos:line="60" pos:column="70"/></control> <block pos:line="60" pos:column="71">{
      <decl_stmt><decl><type><name><name pos:line="61" pos:column="7">struct<pos:position pos:line="61" pos:column="13"/></name> <name pos:line="61" pos:column="14">curltime<pos:position pos:line="61" pos:column="22"/></name></name></type> <name pos:line="61" pos:column="23">tv<pos:position pos:line="61" pos:column="25"/></name> <init pos:line="61" pos:column="26">= <expr><call><name pos:line="61" pos:column="28">curlx_tvnow<pos:position pos:line="61" pos:column="39"/></name><argument_list pos:line="61" pos:column="39">()<pos:position pos:line="61" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="61" pos:column="42"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">Curl_wait_ms<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><literal type="number" pos:line="62" pos:column="20">1<pos:position pos:line="62" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="63" pos:column="7">tv<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">.<pos:position pos:line="63" pos:column="10"/></operator><name pos:line="63" pos:column="10">tv_sec<pos:position pos:line="63" pos:column="16"/></name></name> <operator pos:line="63" pos:column="17">*=<pos:position pos:line="63" pos:column="19"/></operator> <name pos:line="63" pos:column="20">i<pos:position pos:line="63" pos:column="21"/></name> <operator pos:line="63" pos:column="22">+<pos:position pos:line="63" pos:column="23"/></operator> <literal type="number" pos:line="63" pos:column="24">1<pos:position pos:line="63" pos:column="25"/></literal></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="64" pos:column="7">tv<pos:position pos:line="64" pos:column="9"/></name><operator pos:line="64" pos:column="9">.<pos:position pos:line="64" pos:column="10"/></operator><name pos:line="64" pos:column="10">tv_usec<pos:position pos:line="64" pos:column="17"/></name></name> <operator pos:line="64" pos:column="18">*=<pos:position pos:line="64" pos:column="20"/></operator> <operator pos:line="64" pos:column="21">(<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="22">unsigned<pos:position pos:line="64" pos:column="30"/></name> <name pos:line="64" pos:column="31">int<pos:position pos:line="64" pos:column="34"/></name><operator pos:line="64" pos:column="34">)<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="35">i<pos:position pos:line="64" pos:column="36"/></name> <operator pos:line="64" pos:column="37">+<pos:position pos:line="64" pos:column="38"/></operator> <literal type="number" pos:line="64" pos:column="39">2<pos:position pos:line="64" pos:column="40"/></literal></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="65" pos:column="7">tv<pos:position pos:line="65" pos:column="9"/></name><operator pos:line="65" pos:column="9">.<pos:position pos:line="65" pos:column="10"/></operator><name pos:line="65" pos:column="10">tv_sec<pos:position pos:line="65" pos:column="16"/></name></name> <operator pos:line="65" pos:column="17">^=<pos:position pos:line="65" pos:column="19"/></operator> <operator pos:line="65" pos:column="20">(<pos:position pos:line="65" pos:column="21"/></operator><operator pos:line="65" pos:column="21">(<pos:position pos:line="65" pos:column="22"/></operator><call><name pos:line="65" pos:column="22">curlx_tvnow<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">()<pos:position pos:line="65" pos:column="35"/></argument_list></call><operator pos:line="65" pos:column="35">.<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="36">tv_sec<pos:position pos:line="65" pos:column="42"/></name> <operator pos:line="65" pos:column="43">+<pos:position pos:line="65" pos:column="44"/></operator> <call><name pos:line="65" pos:column="45">curlx_tvnow<pos:position pos:line="65" pos:column="56"/></name><argument_list pos:line="65" pos:column="56">()<pos:position pos:line="65" pos:column="58"/></argument_list></call><operator pos:line="65" pos:column="58">.<pos:position pos:line="65" pos:column="59"/></operator><name pos:line="65" pos:column="59">tv_usec<pos:position pos:line="65" pos:column="66"/></name><operator pos:line="65" pos:column="66">)<pos:position pos:line="65" pos:column="67"/></operator> <operator pos:line="65" pos:column="68">*<pos:position pos:line="65" pos:column="69"/></operator>
                    <operator pos:line="66" pos:column="21">(<pos:position pos:line="66" pos:column="22"/></operator><name pos:line="66" pos:column="22">i<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">+<pos:position pos:line="66" pos:column="25"/></operator> <literal type="number" pos:line="66" pos:column="26">3<pos:position pos:line="66" pos:column="27"/></literal><operator pos:line="66" pos:column="27">)<pos:position pos:line="66" pos:column="28"/></operator><operator pos:line="66" pos:column="28">)<pos:position pos:line="66" pos:column="29"/></operator> <operator pos:line="66" pos:column="30">&lt;&lt;<pos:position pos:line="66" pos:column="38"/></operator> <literal type="number" pos:line="66" pos:column="33">8<pos:position pos:line="66" pos:column="34"/></literal></expr>;<pos:position pos:line="66" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="67" pos:column="7">tv<pos:position pos:line="67" pos:column="9"/></name><operator pos:line="67" pos:column="9">.<pos:position pos:line="67" pos:column="10"/></operator><name pos:line="67" pos:column="10">tv_usec<pos:position pos:line="67" pos:column="17"/></name></name> <operator pos:line="67" pos:column="18">^=<pos:position pos:line="67" pos:column="20"/></operator> <call pos:line="67" pos:column="21">(<name pos:line="67" pos:column="22">unsigned<pos:position pos:line="67" pos:column="30"/></name> <name pos:line="67" pos:column="31">int<pos:position pos:line="67" pos:column="34"/></name>) <argument_list pos:line="67" pos:column="36">(<argument><expr><operator pos:line="67" pos:column="37">(<pos:position pos:line="67" pos:column="38"/></operator><call><name pos:line="67" pos:column="38">curlx_tvnow<pos:position pos:line="67" pos:column="49"/></name><argument_list pos:line="67" pos:column="49">()<pos:position pos:line="67" pos:column="51"/></argument_list></call><operator pos:line="67" pos:column="51">.<pos:position pos:line="67" pos:column="52"/></operator><name pos:line="67" pos:column="52">tv_sec<pos:position pos:line="67" pos:column="58"/></name> <operator pos:line="67" pos:column="59">+<pos:position pos:line="67" pos:column="60"/></operator>
                                     <call><name pos:line="68" pos:column="38">curlx_tvnow<pos:position pos:line="68" pos:column="49"/></name><argument_list pos:line="68" pos:column="49">()<pos:position pos:line="68" pos:column="51"/></argument_list></call><operator pos:line="68" pos:column="51">.<pos:position pos:line="68" pos:column="52"/></operator><name pos:line="68" pos:column="52">tv_usec<pos:position pos:line="68" pos:column="59"/></name><operator pos:line="68" pos:column="59">)<pos:position pos:line="68" pos:column="60"/></operator> <operator pos:line="68" pos:column="61">*<pos:position pos:line="68" pos:column="62"/></operator>
                                    <operator pos:line="69" pos:column="37">(<pos:position pos:line="69" pos:column="38"/></operator><name pos:line="69" pos:column="38">i<pos:position pos:line="69" pos:column="39"/></name> <operator pos:line="69" pos:column="40">+<pos:position pos:line="69" pos:column="41"/></operator> <literal type="number" pos:line="69" pos:column="42">4<pos:position pos:line="69" pos:column="43"/></literal><operator pos:line="69" pos:column="43">)<pos:position pos:line="69" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="69" pos:column="45"/></argument_list></call> <operator pos:line="69" pos:column="46">&lt;&lt;<pos:position pos:line="69" pos:column="54"/></operator> <literal type="number" pos:line="69" pos:column="49">16<pos:position pos:line="69" pos:column="51"/></literal></expr>;<pos:position pos:line="69" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">memcpy<pos:position pos:line="70" pos:column="13"/></name><argument_list pos:line="70" pos:column="13">(<argument><expr><operator pos:line="70" pos:column="14">&amp;<pos:position pos:line="70" pos:column="19"/></operator><name><name pos:line="70" pos:column="15">randb<pos:position pos:line="70" pos:column="20"/></name><index pos:line="70" pos:column="20">[<expr><name pos:line="70" pos:column="21">i<pos:position pos:line="70" pos:column="22"/></name> <operator pos:line="70" pos:column="23">*<pos:position pos:line="70" pos:column="24"/></operator> <sizeof pos:line="70" pos:column="25">sizeof<argument_list pos:line="70" pos:column="31">(<argument><expr pos:line="70" pos:column="32">struct <name pos:line="70" pos:column="39">curltime<pos:position pos:line="70" pos:column="47"/></name></expr></argument>)<pos:position pos:line="70" pos:column="48"/></argument_list></sizeof></expr>]<pos:position pos:line="70" pos:column="49"/></index></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="51">&amp;<pos:position pos:line="70" pos:column="56"/></operator><name pos:line="70" pos:column="52">tv<pos:position pos:line="70" pos:column="54"/></name></expr></argument>,
             <argument><expr><sizeof pos:line="71" pos:column="14">sizeof<argument_list pos:line="71" pos:column="20">(<argument><expr pos:line="71" pos:column="21">struct <name pos:line="71" pos:column="28">curltime<pos:position pos:line="71" pos:column="36"/></name></expr></argument>)<pos:position pos:line="71" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="71" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">RAND_add<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">(<argument><expr><name pos:line="73" pos:column="14">randb<pos:position pos:line="73" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="21">(<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">int<pos:position pos:line="73" pos:column="25"/></name><operator pos:line="73" pos:column="25">)<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="26">len<pos:position pos:line="73" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="31">(<pos:position pos:line="73" pos:column="32"/></operator><name pos:line="73" pos:column="32">double<pos:position pos:line="73" pos:column="38"/></name><operator pos:line="73" pos:column="38">)<pos:position pos:line="73" pos:column="39"/></operator><name pos:line="73" pos:column="39">len<pos:position pos:line="73" pos:column="42"/></name><operator pos:line="73" pos:column="42">/<pos:position pos:line="73" pos:column="43"/></operator><literal type="number" pos:line="73" pos:column="43">2<pos:position pos:line="73" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="74" pos:column="4"/></block> while<condition pos:line="74" pos:column="10">(<expr><operator pos:line="74" pos:column="11">!<pos:position pos:line="74" pos:column="12"/></operator><call><name pos:line="74" pos:column="12">rand_enough<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">()<pos:position pos:line="74" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="26"/></condition>;<pos:position pos:line="74" pos:column="27"/></do>

  <comment type="block" pos:line="76" pos:column="3">/* generates a default path for the random seed file */</comment>
  <expr_stmt><expr><name><name pos:line="77" pos:column="3">fname<pos:position pos:line="77" pos:column="8"/></name><index pos:line="77" pos:column="8">[<expr><literal type="number" pos:line="77" pos:column="9">0<pos:position pos:line="77" pos:column="10"/></literal></expr>]<pos:position pos:line="77" pos:column="11"/></index></name> <operator pos:line="77" pos:column="12">=<pos:position pos:line="77" pos:column="13"/></operator> <literal type="number" pos:line="77" pos:column="14">0<pos:position pos:line="77" pos:column="15"/></literal></expr>;<pos:position pos:line="77" pos:column="16"/></expr_stmt> <comment type="block" pos:line="77" pos:column="17">/* blank it first */</comment>
  <expr_stmt><expr><call><name pos:line="78" pos:column="3">RAND_file_name<pos:position pos:line="78" pos:column="17"/></name><argument_list pos:line="78" pos:column="17">(<argument><expr><name pos:line="78" pos:column="18">fname<pos:position pos:line="78" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="78" pos:column="25">sizeof<argument_list pos:line="78" pos:column="31">(<argument><expr><name pos:line="78" pos:column="32">fname<pos:position pos:line="78" pos:column="37"/></name></expr></argument>)<pos:position pos:line="78" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="78" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="40"/></expr_stmt>
  <if pos:line="79" pos:column="3">if<condition pos:line="79" pos:column="5">(<expr><name><name pos:line="79" pos:column="6">fname<pos:position pos:line="79" pos:column="11"/></name><index pos:line="79" pos:column="11">[<expr><literal type="number" pos:line="79" pos:column="12">0<pos:position pos:line="79" pos:column="13"/></literal></expr>]<pos:position pos:line="79" pos:column="14"/></index></name></expr>)<pos:position pos:line="79" pos:column="15"/></condition><then pos:line="79" pos:column="15"> <block pos:line="79" pos:column="16">{
    <comment type="block" pos:line="80" pos:column="5">/* we got a file name to try */</comment>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">RAND_load_file<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><name pos:line="81" pos:column="20">fname<pos:position pos:line="81" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="27">RAND_LOAD_LENGTH<pos:position pos:line="81" pos:column="43"/></name></expr></argument>)<pos:position pos:line="81" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="45"/></expr_stmt>
    <if pos:line="82" pos:column="5">if<condition pos:line="82" pos:column="7">(<expr><call><name pos:line="82" pos:column="8">rand_enough<pos:position pos:line="82" pos:column="19"/></name><argument_list pos:line="82" pos:column="19">()<pos:position pos:line="82" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="22"/></condition><then pos:line="82" pos:column="22">
      <block type="pseudo"><return pos:line="83" pos:column="7">return <expr><name pos:line="83" pos:column="14">CURLE_OK<pos:position pos:line="83" pos:column="22"/></name></expr>;<pos:position pos:line="83" pos:column="23"/></return></block></then></if>
  }<pos:position pos:line="84" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="86" pos:column="3">infof<pos:position pos:line="86" pos:column="8"/></name><argument_list pos:line="86" pos:column="8">(<argument><expr><name pos:line="86" pos:column="9">data<pos:position pos:line="86" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="15">"libcurl is now using a weak random seed!\n"<pos:position pos:line="86" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="61"/></expr_stmt>
  <return pos:line="87" pos:column="3">return <expr><operator pos:line="87" pos:column="10">(<pos:position pos:line="87" pos:column="11"/></operator><ternary><condition><expr><call><name pos:line="87" pos:column="11">rand_enough<pos:position pos:line="87" pos:column="22"/></name><argument_list pos:line="87" pos:column="22">()<pos:position pos:line="87" pos:column="24"/></argument_list></call></expr> ?<pos:position pos:line="87" pos:column="26"/></condition><then pos:line="87" pos:column="26"> <expr><name pos:line="87" pos:column="27">CURLE_OK<pos:position pos:line="87" pos:column="35"/></name></expr> <pos:position pos:line="87" pos:column="36"/></then><else pos:line="87" pos:column="36">:
    <expr><name pos:line="88" pos:column="5">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="88" pos:column="28"/></name></expr></else></ternary> <comment type="block" pos:line="88" pos:column="29">/* confusing error code */</comment><operator pos:line="88" pos:column="55">)<pos:position pos:line="88" pos:column="56"/></operator></expr>;<pos:position pos:line="88" pos:column="57"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
