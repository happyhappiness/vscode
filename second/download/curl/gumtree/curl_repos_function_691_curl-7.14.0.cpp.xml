<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_691_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_wait_for_resolv<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">connectdata<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">conn<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">Curl_dns_entry<pos:position pos:line="2" pos:column="52"/></name></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier><modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">entry<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">rc<pos:position pos:line="4" pos:column="14"/></name><init pos:line="4" pos:column="14">=<expr><name pos:line="4" pos:column="15">CURLE_OK<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SessionHandle<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">data<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name><name pos:line="5" pos:column="32">conn<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">data<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">long<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">timeout<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name pos:line="6" pos:column="18">CURL_TIMEOUT_RESOLVE<pos:position pos:line="6" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt> <comment type="block" pos:line="6" pos:column="40">/* default name resolve timeout */</comment>

  <comment type="block" pos:line="8" pos:column="3">/* now, see if there's a connect timeout or a regular timeout to
     use instead of the default one */</comment>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name><name pos:line="10" pos:column="6">conn<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">data<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">set<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">connecttimeout<pos:position pos:line="10" pos:column="36"/></name></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="5">timeout<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name><name pos:line="11" pos:column="15">conn<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">data<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">-&gt;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="27">set<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">.<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">connecttimeout<pos:position pos:line="11" pos:column="45"/></name></name></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt></block></then>
  <elseif pos:line="12" pos:column="3">else <if pos:line="12" pos:column="8">if<condition pos:line="12" pos:column="10">(<expr><name><name pos:line="12" pos:column="11">conn<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">data<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">-&gt;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="23">set<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">.<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">timeout<pos:position pos:line="12" pos:column="34"/></name></name></expr>)<pos:position pos:line="12" pos:column="35"/></condition><then pos:line="12" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="5">timeout<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <name><name pos:line="13" pos:column="15">conn<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">data<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">set<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">.<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">timeout<pos:position pos:line="13" pos:column="38"/></name></name></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt></block></then></if></elseif></if>

  <comment type="block" pos:line="15" pos:column="3">/* We convert the number of seconds into number of milliseconds here: */</comment>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">timeout<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">&lt;<pos:position pos:line="16" pos:column="18"/></operator> <literal type="number" pos:line="16" pos:column="16">2147483<pos:position pos:line="16" pos:column="23"/></literal></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24">
    <comment type="block" pos:line="17" pos:column="5">/* maximum amount of seconds that can be multiplied with 1000 and
       still fit within 31 bits */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="5">timeout<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">*=<pos:position pos:line="19" pos:column="15"/></operator> <literal type="number" pos:line="19" pos:column="16">1000<pos:position pos:line="19" pos:column="20"/></literal></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt></block></then>
  <else pos:line="20" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="5">timeout<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <literal type="number" pos:line="21" pos:column="15">0x7fffffff<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt></block></else></if> <comment type="block" pos:line="21" pos:column="27">/* ridiculous amount of time anyway */</comment>

  <comment type="block" pos:line="23" pos:column="3">/* Wait for the name resolve query to complete. */</comment>
  <while pos:line="24" pos:column="3">while <condition pos:line="24" pos:column="9">(<expr><literal type="number" pos:line="24" pos:column="10">1<pos:position pos:line="24" pos:column="11"/></literal></expr>)<pos:position pos:line="24" pos:column="12"/></condition> <block pos:line="24" pos:column="13">{
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">int<pos:position pos:line="25" pos:column="8"/></name></type> <name pos:line="25" pos:column="9">nfds<pos:position pos:line="25" pos:column="13"/></name><init pos:line="25" pos:column="13">=<expr><literal type="number" pos:line="25" pos:column="14">0<pos:position pos:line="25" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">fd_set<pos:position pos:line="26" pos:column="11"/></name></type> <name pos:line="26" pos:column="12">read_fds<pos:position pos:line="26" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="26" pos:column="22">write_fds<pos:position pos:line="26" pos:column="31"/></name></decl>;<pos:position pos:line="26" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="27" pos:column="5">struct<pos:position pos:line="27" pos:column="11"/></name> <name pos:line="27" pos:column="12">timeval<pos:position pos:line="27" pos:column="19"/></name></name> <modifier pos:line="27" pos:column="20">*<pos:position pos:line="27" pos:column="21"/></modifier></type><name pos:line="27" pos:column="21">tvp<pos:position pos:line="27" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="27" pos:column="26">tv<pos:position pos:line="27" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="27" pos:column="30">store<pos:position pos:line="27" pos:column="35"/></name></decl>;<pos:position pos:line="27" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">int<pos:position pos:line="28" pos:column="8"/></name></type> <name pos:line="28" pos:column="9">count<pos:position pos:line="28" pos:column="14"/></name></decl>;<pos:position pos:line="28" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="29" pos:column="5">struct<pos:position pos:line="29" pos:column="11"/></name> <name pos:line="29" pos:column="12">timeval<pos:position pos:line="29" pos:column="19"/></name></name></type> <name pos:line="29" pos:column="20">now<pos:position pos:line="29" pos:column="23"/></name> <init pos:line="29" pos:column="24">= <expr><call><name pos:line="29" pos:column="26">Curl_tvnow<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">()<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">long<pos:position pos:line="30" pos:column="9"/></name></type> <name pos:line="30" pos:column="10">timediff<pos:position pos:line="30" pos:column="18"/></name></decl>;<pos:position pos:line="30" pos:column="19"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="32" pos:column="5">store<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">.<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">tv_sec<pos:position pos:line="32" pos:column="17"/></name></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <operator pos:line="32" pos:column="20">(<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="21">int<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">)<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="25">timeout<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">/<pos:position pos:line="32" pos:column="33"/></operator><literal type="number" pos:line="32" pos:column="33">1000<pos:position pos:line="32" pos:column="37"/></literal></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">store<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">.<pos:position pos:line="33" pos:column="11"/></operator><name pos:line="33" pos:column="11">tv_usec<pos:position pos:line="33" pos:column="18"/></name></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <operator pos:line="33" pos:column="21">(<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">timeout<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">%<pos:position pos:line="33" pos:column="30"/></operator><literal type="number" pos:line="33" pos:column="30">1000<pos:position pos:line="33" pos:column="34"/></literal><operator pos:line="33" pos:column="34">)<pos:position pos:line="33" pos:column="35"/></operator><operator pos:line="33" pos:column="35">*<pos:position pos:line="33" pos:column="36"/></operator><literal type="number" pos:line="33" pos:column="36">1000<pos:position pos:line="33" pos:column="40"/></literal></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">FD_ZERO<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><operator pos:line="35" pos:column="13">&amp;<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="14">read_fds<pos:position pos:line="35" pos:column="22"/></name></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">FD_ZERO<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><operator pos:line="36" pos:column="13">&amp;<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="14">write_fds<pos:position pos:line="36" pos:column="23"/></name></expr></argument>)<pos:position pos:line="36" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">nfds<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <call><name pos:line="37" pos:column="12">ares_fds<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name><name pos:line="37" pos:column="21">data<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">-&gt;<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="27">state<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">.<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">areschannel<pos:position pos:line="37" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="46">&amp;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="47">read_fds<pos:position pos:line="37" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="57">&amp;<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="58">write_fds<pos:position pos:line="37" pos:column="67"/></name></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="69"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">nfds<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">==<pos:position pos:line="38" pos:column="16"/></operator> <literal type="number" pos:line="38" pos:column="17">0<pos:position pos:line="38" pos:column="18"/></literal></expr>)<pos:position pos:line="38" pos:column="19"/></condition><then pos:line="38" pos:column="19">
      <comment type="block" pos:line="39" pos:column="7">/* no file descriptors means we're done waiting */</comment>
      <block type="pseudo"><break pos:line="40" pos:column="7">break;<pos:position pos:line="40" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="41" pos:column="5">tvp<pos:position pos:line="41" pos:column="8"/></name> <operator pos:line="41" pos:column="9">=<pos:position pos:line="41" pos:column="10"/></operator> <call><name pos:line="41" pos:column="11">ares_timeout<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><name><name pos:line="41" pos:column="24">data<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">-&gt;<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="30">state<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">.<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="36">areschannel<pos:position pos:line="41" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="49">&amp;<pos:position pos:line="41" pos:column="54"/></operator><name pos:line="41" pos:column="50">store<pos:position pos:line="41" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="57">&amp;<pos:position pos:line="41" pos:column="62"/></operator><name pos:line="41" pos:column="58">tv<pos:position pos:line="41" pos:column="60"/></name></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">count<pos:position pos:line="42" pos:column="10"/></name> <operator pos:line="42" pos:column="11">=<pos:position pos:line="42" pos:column="12"/></operator> <call><name pos:line="42" pos:column="13">select<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">nfds<pos:position pos:line="42" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="26">&amp;<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="27">read_fds<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="37">&amp;<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="38">write_fds<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">NULL<pos:position pos:line="42" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="55">tvp<pos:position pos:line="42" pos:column="58"/></name></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="60"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">count<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">&lt;<pos:position pos:line="43" pos:column="19"/></operator> <literal type="number" pos:line="43" pos:column="17">0<pos:position pos:line="43" pos:column="18"/></literal> <operator pos:line="43" pos:column="19">&amp;&amp;<pos:position pos:line="43" pos:column="29"/></operator> <name pos:line="43" pos:column="22">errno<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">!=<pos:position pos:line="43" pos:column="30"/></operator> <name pos:line="43" pos:column="31">EINVAL<pos:position pos:line="43" pos:column="37"/></name></expr>)<pos:position pos:line="43" pos:column="38"/></condition><then pos:line="43" pos:column="38">
      <block type="pseudo"><break pos:line="44" pos:column="7">break;<pos:position pos:line="44" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">ares_process<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><name><name pos:line="46" pos:column="18">data<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">-&gt;<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="24">state<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">.<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">areschannel<pos:position pos:line="46" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="43">&amp;<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="44">read_fds<pos:position pos:line="46" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="54">&amp;<pos:position pos:line="46" pos:column="59"/></operator><name pos:line="46" pos:column="55">write_fds<pos:position pos:line="46" pos:column="64"/></name></expr></argument>)<pos:position pos:line="46" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="66"/></expr_stmt>

    <expr_stmt><expr><name pos:line="48" pos:column="5">timediff<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <call><name pos:line="48" pos:column="16">Curl_tvdiff<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><call><name pos:line="48" pos:column="28">Curl_tvnow<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">()<pos:position pos:line="48" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="48" pos:column="42">now<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt> <comment type="block" pos:line="48" pos:column="48">/* spent time */</comment>
    <expr_stmt><expr><name pos:line="49" pos:column="5">timeout<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">-=<pos:position pos:line="49" pos:column="15"/></operator> <ternary><condition><expr><name pos:line="49" pos:column="16">timediff<pos:position pos:line="49" pos:column="24"/></name></expr>?<pos:position pos:line="49" pos:column="25"/></condition><then><expr><name pos:line="49" pos:column="25">timediff<pos:position pos:line="49" pos:column="33"/></name></expr></then><else pos:line="49" pos:column="33">:<expr><literal type="number" pos:line="49" pos:column="34">1<pos:position pos:line="49" pos:column="35"/></literal></expr></else></ternary></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt> <comment type="block" pos:line="49" pos:column="37">/* always deduct at least 1 */</comment>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">timeout<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">&lt;<pos:position pos:line="50" pos:column="21"/></operator> <literal type="number" pos:line="50" pos:column="19">0<pos:position pos:line="50" pos:column="20"/></literal></expr>)<pos:position pos:line="50" pos:column="21"/></condition><then pos:line="50" pos:column="21"> <block pos:line="50" pos:column="22">{
      <comment type="block" pos:line="51" pos:column="7">/* our timeout, so we cancel the ares operation */</comment>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">ares_cancel<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><name><name pos:line="52" pos:column="19">data<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">-&gt;<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="25">state<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">.<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="31">areschannel<pos:position pos:line="52" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>
      <break pos:line="53" pos:column="7">break;<pos:position pos:line="53" pos:column="13"/></break>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>
  }<pos:position pos:line="55" pos:column="4"/></block></while>

  <comment type="block" pos:line="57" pos:column="3">/* Operation complete, if the lookup was successful we now have the entry
     in the cache. */</comment>

  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><name pos:line="60" pos:column="6">entry<pos:position pos:line="60" pos:column="11"/></name></expr>)<pos:position pos:line="60" pos:column="12"/></condition><then pos:line="60" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="61" pos:column="5">*<pos:position pos:line="61" pos:column="6"/></operator><name pos:line="61" pos:column="6">entry<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <name><name pos:line="61" pos:column="14">conn<pos:position pos:line="61" pos:column="18"/></name><operator pos:line="61" pos:column="18">-&gt;<pos:position pos:line="61" pos:column="23"/></operator><name pos:line="61" pos:column="20">async<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">.<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="26">dns<pos:position pos:line="61" pos:column="29"/></name></name></expr>;<pos:position pos:line="61" pos:column="30"/></expr_stmt></block></then></if>

  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><operator pos:line="63" pos:column="6">!<pos:position pos:line="63" pos:column="7"/></operator><name><name pos:line="63" pos:column="7">conn<pos:position pos:line="63" pos:column="11"/></name><operator pos:line="63" pos:column="11">-&gt;<pos:position pos:line="63" pos:column="16"/></operator><name pos:line="63" pos:column="13">async<pos:position pos:line="63" pos:column="18"/></name><operator pos:line="63" pos:column="18">.<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="19">dns<pos:position pos:line="63" pos:column="22"/></name></name></expr>)<pos:position pos:line="63" pos:column="23"/></condition><then pos:line="63" pos:column="23"> <block pos:line="63" pos:column="24">{
    <comment type="block" pos:line="64" pos:column="5">/* a name was not resolved */</comment>
    <if pos:line="65" pos:column="5">if<condition pos:line="65" pos:column="7">(<expr><operator pos:line="65" pos:column="8">(<pos:position pos:line="65" pos:column="9"/></operator><name pos:line="65" pos:column="9">timeout<pos:position pos:line="65" pos:column="16"/></name> <operator pos:line="65" pos:column="17">&lt;<pos:position pos:line="65" pos:column="21"/></operator> <literal type="number" pos:line="65" pos:column="19">0<pos:position pos:line="65" pos:column="20"/></literal><operator pos:line="65" pos:column="20">)<pos:position pos:line="65" pos:column="21"/></operator> <operator pos:line="65" pos:column="22">||<pos:position pos:line="65" pos:column="24"/></operator> <operator pos:line="65" pos:column="25">(<pos:position pos:line="65" pos:column="26"/></operator><name><name pos:line="65" pos:column="26">conn<pos:position pos:line="65" pos:column="30"/></name><operator pos:line="65" pos:column="30">-&gt;<pos:position pos:line="65" pos:column="35"/></operator><name pos:line="65" pos:column="32">async<pos:position pos:line="65" pos:column="37"/></name><operator pos:line="65" pos:column="37">.<pos:position pos:line="65" pos:column="38"/></operator><name pos:line="65" pos:column="38">status<pos:position pos:line="65" pos:column="44"/></name></name> <operator pos:line="65" pos:column="45">==<pos:position pos:line="65" pos:column="47"/></operator> <name pos:line="65" pos:column="48">ARES_ETIMEOUT<pos:position pos:line="65" pos:column="61"/></name><operator pos:line="65" pos:column="61">)<pos:position pos:line="65" pos:column="62"/></operator></expr>)<pos:position pos:line="65" pos:column="63"/></condition><then pos:line="65" pos:column="63"> <block pos:line="65" pos:column="64">{
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">failf<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><name pos:line="66" pos:column="13">data<pos:position pos:line="66" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="19">"Resolving host timed out: %s"<pos:position pos:line="66" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="51">conn<pos:position pos:line="66" pos:column="55"/></name><operator pos:line="66" pos:column="55">-&gt;<pos:position pos:line="66" pos:column="60"/></operator><name pos:line="66" pos:column="57">host<pos:position pos:line="66" pos:column="61"/></name><operator pos:line="66" pos:column="61">.<pos:position pos:line="66" pos:column="62"/></operator><name pos:line="66" pos:column="62">dispname<pos:position pos:line="66" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="72"/></expr_stmt>
      <expr_stmt><expr><name pos:line="67" pos:column="7">rc<pos:position pos:line="67" pos:column="9"/></name> <operator pos:line="67" pos:column="10">=<pos:position pos:line="67" pos:column="11"/></operator> <name pos:line="67" pos:column="12">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="67" pos:column="36"/></name></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then>
    <elseif pos:line="69" pos:column="5">else <if pos:line="69" pos:column="10">if<condition pos:line="69" pos:column="12">(<expr><name><name pos:line="69" pos:column="13">conn<pos:position pos:line="69" pos:column="17"/></name><operator pos:line="69" pos:column="17">-&gt;<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="19">async<pos:position pos:line="69" pos:column="24"/></name><operator pos:line="69" pos:column="24">.<pos:position pos:line="69" pos:column="25"/></operator><name pos:line="69" pos:column="25">done<pos:position pos:line="69" pos:column="29"/></name></name></expr>)<pos:position pos:line="69" pos:column="30"/></condition><then pos:line="69" pos:column="30"> <block pos:line="69" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">failf<pos:position pos:line="70" pos:column="12"/></name><argument_list pos:line="70" pos:column="12">(<argument><expr><name pos:line="70" pos:column="13">data<pos:position pos:line="70" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="19">"Could not resolve host: %s (%s)"<pos:position pos:line="70" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="54">conn<pos:position pos:line="70" pos:column="58"/></name><operator pos:line="70" pos:column="58">-&gt;<pos:position pos:line="70" pos:column="63"/></operator><name pos:line="70" pos:column="60">host<pos:position pos:line="70" pos:column="64"/></name><operator pos:line="70" pos:column="64">.<pos:position pos:line="70" pos:column="65"/></operator><name pos:line="70" pos:column="65">dispname<pos:position pos:line="70" pos:column="73"/></name></name></expr></argument>,
            <argument><expr><call><name pos:line="71" pos:column="13">ares_strerror<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">(<argument><expr><name><name pos:line="71" pos:column="27">conn<pos:position pos:line="71" pos:column="31"/></name><operator pos:line="71" pos:column="31">-&gt;<pos:position pos:line="71" pos:column="36"/></operator><name pos:line="71" pos:column="33">async<pos:position pos:line="71" pos:column="38"/></name><operator pos:line="71" pos:column="38">.<pos:position pos:line="71" pos:column="39"/></operator><name pos:line="71" pos:column="39">status<pos:position pos:line="71" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="72" pos:column="7">rc<pos:position pos:line="72" pos:column="9"/></name> <operator pos:line="72" pos:column="10">=<pos:position pos:line="72" pos:column="11"/></operator> <name pos:line="72" pos:column="12">CURLE_COULDNT_RESOLVE_HOST<pos:position pos:line="72" pos:column="38"/></name></expr>;<pos:position pos:line="72" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if></elseif>
    <else pos:line="74" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="75" pos:column="7">rc<pos:position pos:line="75" pos:column="9"/></name> <operator pos:line="75" pos:column="10">=<pos:position pos:line="75" pos:column="11"/></operator> <name pos:line="75" pos:column="12">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="75" pos:column="36"/></name></expr>;<pos:position pos:line="75" pos:column="37"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="77" pos:column="5">/* close the connection, since we can't return failure here without
       cleaning up this connection properly */</comment>
    <expr_stmt><expr><name><name pos:line="79" pos:column="5">conn<pos:position pos:line="79" pos:column="9"/></name><operator pos:line="79" pos:column="9">-&gt;<pos:position pos:line="79" pos:column="14"/></operator><name pos:line="79" pos:column="11">bits<pos:position pos:line="79" pos:column="15"/></name><operator pos:line="79" pos:column="15">.<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="16">close<pos:position pos:line="79" pos:column="21"/></name></name> <operator pos:line="79" pos:column="22">=<pos:position pos:line="79" pos:column="23"/></operator> <name pos:line="79" pos:column="24">TRUE<pos:position pos:line="79" pos:column="28"/></name></expr>;<pos:position pos:line="79" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="80" pos:column="4"/></block></then></if>

  <return pos:line="82" pos:column="3">return <expr><name pos:line="82" pos:column="10">rc<pos:position pos:line="82" pos:column="12"/></name></expr>;<pos:position pos:line="82" pos:column="13"/></return>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
