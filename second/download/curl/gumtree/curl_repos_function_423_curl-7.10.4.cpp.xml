<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_423_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">getpass_r<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">prompt<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">buffer<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">buflen<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">FILE<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">infp<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">infp_fclose<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">FILE<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">outfp<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <function_decl><type><name pos:line="6" pos:column="3">RETSIGTYPE<pos:position pos:line="6" pos:column="13"/></name></type> (<modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier><name pos:line="6" pos:column="16">sigint<pos:position pos:line="6" pos:column="22"/></name>)<parameter_list pos:line="6" pos:column="23">()<pos:position pos:line="6" pos:column="25"/></parameter_list>;<pos:position pos:line="6" pos:column="26"/></function_decl>
<cpp:ifndef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifndef<pos:position pos:line="7" pos:column="8"/></cpp:directive> <name pos:line="7" pos:column="9">__EMX__<pos:position pos:line="7" pos:column="16"/></name></cpp:ifndef>
  <function_decl><type><name pos:line="8" pos:column="3">RETSIGTYPE<pos:position pos:line="8" pos:column="13"/></name></type> (<modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier><name pos:line="8" pos:column="16">sigtstp<pos:position pos:line="8" pos:column="23"/></name>)<parameter_list pos:line="8" pos:column="24">()<pos:position pos:line="8" pos:column="26"/></parameter_list>;<pos:position pos:line="8" pos:column="27"/></function_decl>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">bytes_read<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">infd<pos:position pos:line="11" pos:column="11"/></name></decl>;<pos:position pos:line="11" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">outfd<pos:position pos:line="12" pos:column="12"/></name></decl>;<pos:position pos:line="12" pos:column="13"/></decl_stmt>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">HAVE_TERMIOS_H<pos:position pos:line="13" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">termios<pos:position pos:line="14" pos:column="17"/></name></name></type> <name pos:line="14" pos:column="18">orig<pos:position pos:line="14" pos:column="22"/></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">termios<pos:position pos:line="15" pos:column="17"/></name></name></type> <name pos:line="15" pos:column="18">noecho<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="17" pos:column="1">#  <cpp:directive pos:line="17" pos:column="4">ifdef<pos:position pos:line="17" pos:column="9"/></cpp:directive> <name pos:line="17" pos:column="10">HAVE_TERMIO_H<pos:position pos:line="17" pos:column="23"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="18" pos:column="3">struct<pos:position pos:line="18" pos:column="9"/></name> <name pos:line="18" pos:column="10">termio<pos:position pos:line="18" pos:column="16"/></name></name></type> <name pos:line="18" pos:column="17">orig<pos:position pos:line="18" pos:column="21"/></name></decl>;<pos:position pos:line="18" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">termio<pos:position pos:line="19" pos:column="16"/></name></name></type> <name pos:line="19" pos:column="17">noecho<pos:position pos:line="19" pos:column="23"/></name></decl>;<pos:position pos:line="19" pos:column="24"/></decl_stmt>  
<cpp:else pos:line="20" pos:column="1">#  <cpp:directive pos:line="20" pos:column="4">else<pos:position pos:line="20" pos:column="8"/></cpp:directive></cpp:else>
<cpp:endif pos:line="21" pos:column="1">#  <cpp:directive pos:line="21" pos:column="4">endif<pos:position pos:line="21" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="24" pos:column="3">sigint<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">signal<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">SIGINT<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="27">SIG_IGN<pos:position pos:line="24" pos:column="34"/></name></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
  <comment type="block" pos:line="25" pos:column="3">/* 20000318 mgs
   * this is needed by the emx system, SIGTSTP is not a supported signal */</comment>
<cpp:ifndef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifndef<pos:position pos:line="27" pos:column="8"/></cpp:directive> <name pos:line="27" pos:column="9">__EMX__<pos:position pos:line="27" pos:column="16"/></name></cpp:ifndef>
  <expr_stmt><expr><name pos:line="28" pos:column="3">sigtstp<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name pos:line="28" pos:column="13">signal<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">SIGTSTP<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">SIG_IGN<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="31" pos:column="3">infp<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">=<pos:position pos:line="31" pos:column="8"/></operator><call><name pos:line="31" pos:column="8">fopen<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><literal type="string" pos:line="31" pos:column="14">"/dev/tty"<pos:position pos:line="31" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="26">"r"<pos:position pos:line="31" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">( <expr><name pos:line="32" pos:column="7">NULL<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">==<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">infp<pos:position pos:line="32" pos:column="19"/></name></expr> )<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="5">infp<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <name pos:line="33" pos:column="12">stdin<pos:position pos:line="33" pos:column="17"/></name></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt></block></then>
  <else pos:line="34" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="5">infp_fclose<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <literal type="number" pos:line="35" pos:column="19">1<pos:position pos:line="35" pos:column="20"/></literal></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="37" pos:column="3">outfp<pos:position pos:line="37" pos:column="8"/></name> <operator pos:line="37" pos:column="9">=<pos:position pos:line="37" pos:column="10"/></operator> <name pos:line="37" pos:column="11">stderr<pos:position pos:line="37" pos:column="17"/></name></expr>;<pos:position pos:line="37" pos:column="18"/></expr_stmt>

  <expr_stmt><expr><name pos:line="39" pos:column="3">infd<pos:position pos:line="39" pos:column="7"/></name> <operator pos:line="39" pos:column="8">=<pos:position pos:line="39" pos:column="9"/></operator> <call><name pos:line="39" pos:column="10">fileno<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">infp<pos:position pos:line="39" pos:column="21"/></name></expr></argument>)<pos:position pos:line="39" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="40" pos:column="3">outfd<pos:position pos:line="40" pos:column="8"/></name> <operator pos:line="40" pos:column="9">=<pos:position pos:line="40" pos:column="10"/></operator> <call><name pos:line="40" pos:column="11">fileno<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><name pos:line="40" pos:column="18">outfp<pos:position pos:line="40" pos:column="23"/></name></expr></argument>)<pos:position pos:line="40" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>

  <comment type="block" pos:line="42" pos:column="3">/* dissable echo */</comment>
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">HAVE_TERMIOS_H<pos:position pos:line="43" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="44" pos:column="3">tcgetattr<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><name pos:line="44" pos:column="13">outfd<pos:position pos:line="44" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="20">&amp;<pos:position pos:line="44" pos:column="25"/></operator><name pos:line="44" pos:column="21">orig<pos:position pos:line="44" pos:column="25"/></name></expr></argument>)<pos:position pos:line="44" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><name pos:line="46" pos:column="3">noecho<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <name pos:line="46" pos:column="12">orig<pos:position pos:line="46" pos:column="16"/></name></expr>;<pos:position pos:line="46" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="47" pos:column="3">noecho<pos:position pos:line="47" pos:column="9"/></name><operator pos:line="47" pos:column="9">.<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">c_lflag<pos:position pos:line="47" pos:column="17"/></name></name> <operator pos:line="47" pos:column="18">&amp;=<pos:position pos:line="47" pos:column="24"/></operator> <operator pos:line="47" pos:column="21">~<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="22">ECHO<pos:position pos:line="47" pos:column="26"/></name></expr>;<pos:position pos:line="47" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">tcsetattr<pos:position pos:line="48" pos:column="12"/></name><argument_list pos:line="48" pos:column="12">(<argument><expr><name pos:line="48" pos:column="13">outfd<pos:position pos:line="48" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="20">TCSANOW<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="29">&amp;<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="30">noecho<pos:position pos:line="48" pos:column="36"/></name></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="38"/></expr_stmt>
<cpp:else pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">else<pos:position pos:line="49" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="50" pos:column="1">#  <cpp:directive pos:line="50" pos:column="4">ifdef<pos:position pos:line="50" pos:column="9"/></cpp:directive> <name pos:line="50" pos:column="10">HAVE_TERMIO_H<pos:position pos:line="50" pos:column="23"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">ioctl<pos:position pos:line="51" pos:column="8"/></name><argument_list pos:line="51" pos:column="8">(<argument><expr><name pos:line="51" pos:column="9">outfd<pos:position pos:line="51" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="16">TCGETA<pos:position pos:line="51" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="24">&amp;<pos:position pos:line="51" pos:column="29"/></operator><name pos:line="51" pos:column="25">orig<pos:position pos:line="51" pos:column="29"/></name></expr></argument>)<pos:position pos:line="51" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="52" pos:column="3">noecho<pos:position pos:line="52" pos:column="9"/></name> <operator pos:line="52" pos:column="10">=<pos:position pos:line="52" pos:column="11"/></operator> <name pos:line="52" pos:column="12">orig<pos:position pos:line="52" pos:column="16"/></name></expr>;<pos:position pos:line="52" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">noecho<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">.<pos:position pos:line="53" pos:column="10"/></operator><name pos:line="53" pos:column="10">c_lflag<pos:position pos:line="53" pos:column="17"/></name></name> <operator pos:line="53" pos:column="18">&amp;=<pos:position pos:line="53" pos:column="24"/></operator> <operator pos:line="53" pos:column="21">~<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="22">ECHO<pos:position pos:line="53" pos:column="26"/></name></expr>;<pos:position pos:line="53" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">ioctl<pos:position pos:line="54" pos:column="8"/></name><argument_list pos:line="54" pos:column="8">(<argument><expr><name pos:line="54" pos:column="9">outfd<pos:position pos:line="54" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="16">TCSETA<pos:position pos:line="54" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="24">&amp;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="25">noecho<pos:position pos:line="54" pos:column="31"/></name></expr></argument>)<pos:position pos:line="54" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="33"/></expr_stmt>
<cpp:else pos:line="55" pos:column="1">#  <cpp:directive pos:line="55" pos:column="4">else<pos:position pos:line="55" pos:column="8"/></cpp:directive></cpp:else>
<cpp:endif pos:line="56" pos:column="1">#  <cpp:directive pos:line="56" pos:column="4">endif<pos:position pos:line="56" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="59" pos:column="3">fputs<pos:position pos:line="59" pos:column="8"/></name><argument_list pos:line="59" pos:column="8">(<argument><expr><name pos:line="59" pos:column="9">prompt<pos:position pos:line="59" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="17">outfp<pos:position pos:line="59" pos:column="22"/></name></expr></argument>)<pos:position pos:line="59" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">fflush<pos:position pos:line="60" pos:column="9"/></name><argument_list pos:line="60" pos:column="9">(<argument><expr><name pos:line="60" pos:column="10">outfp<pos:position pos:line="60" pos:column="15"/></name></expr></argument>)<pos:position pos:line="60" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="62" pos:column="3">bytes_read<pos:position pos:line="62" pos:column="13"/></name><operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator><call><name pos:line="62" pos:column="14">read<pos:position pos:line="62" pos:column="18"/></name><argument_list pos:line="62" pos:column="18">(<argument><expr><name pos:line="62" pos:column="19">infd<pos:position pos:line="62" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="25">buffer<pos:position pos:line="62" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="33">buflen<pos:position pos:line="62" pos:column="39"/></name></expr></argument>)<pos:position pos:line="62" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="63" pos:column="3">buffer<pos:position pos:line="63" pos:column="9"/></name><index pos:line="63" pos:column="9">[<expr><ternary><condition><expr><name pos:line="63" pos:column="10">bytes_read<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">&gt;<pos:position pos:line="63" pos:column="25"/></operator> <literal type="number" pos:line="63" pos:column="23">0<pos:position pos:line="63" pos:column="24"/></literal></expr> ?<pos:position pos:line="63" pos:column="26"/></condition><then pos:line="63" pos:column="26"> <expr><operator pos:line="63" pos:column="27">(<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="28">bytes_read<pos:position pos:line="63" pos:column="38"/></name> <operator pos:line="63" pos:column="39">-<pos:position pos:line="63" pos:column="40"/></operator><literal type="number" pos:line="63" pos:column="40">1<pos:position pos:line="63" pos:column="41"/></literal><operator pos:line="63" pos:column="41">)<pos:position pos:line="63" pos:column="42"/></operator></expr> <pos:position pos:line="63" pos:column="43"/></then><else pos:line="63" pos:column="43">: <expr><literal type="number" pos:line="63" pos:column="45">0<pos:position pos:line="63" pos:column="46"/></literal></expr></else></ternary></expr>]<pos:position pos:line="63" pos:column="47"/></index></name> <operator pos:line="63" pos:column="48">=<pos:position pos:line="63" pos:column="49"/></operator> <literal type="char" pos:line="63" pos:column="50">'\0'<pos:position pos:line="63" pos:column="54"/></literal></expr>;<pos:position pos:line="63" pos:column="55"/></expr_stmt>

  <comment type="block" pos:line="65" pos:column="3">/* print a new line if needed */</comment>
<cpp:ifdef pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">ifdef<pos:position pos:line="66" pos:column="7"/></cpp:directive> <name pos:line="66" pos:column="8">HAVE_TERMIOS_H<pos:position pos:line="66" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">fputs<pos:position pos:line="67" pos:column="8"/></name><argument_list pos:line="67" pos:column="8">(<argument><expr><literal type="string" pos:line="67" pos:column="9">"\n"<pos:position pos:line="67" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="15">outfp<pos:position pos:line="67" pos:column="20"/></name></expr></argument>)<pos:position pos:line="67" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="22"/></expr_stmt>
<cpp:else pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">else<pos:position pos:line="68" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="69" pos:column="1">#  <cpp:directive pos:line="69" pos:column="4">ifdef<pos:position pos:line="69" pos:column="9"/></cpp:directive> <name pos:line="69" pos:column="10">HAVE_TERMIO_H<pos:position pos:line="69" pos:column="23"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="70" pos:column="3">fputs<pos:position pos:line="70" pos:column="8"/></name><argument_list pos:line="70" pos:column="8">(<argument><expr><literal type="string" pos:line="70" pos:column="9">"\n"<pos:position pos:line="70" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="15">outfp<pos:position pos:line="70" pos:column="20"/></name></expr></argument>)<pos:position pos:line="70" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="22"/></expr_stmt>
<cpp:else pos:line="71" pos:column="1">#  <cpp:directive pos:line="71" pos:column="4">else<pos:position pos:line="71" pos:column="8"/></cpp:directive></cpp:else>
<cpp:endif pos:line="72" pos:column="1">#  <cpp:directive pos:line="72" pos:column="4">endif<pos:position pos:line="72" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="75" pos:column="3">/*
   * reset term charectaristics, use TCSAFLUSH incase the
   * user types more than buflen
   */</comment>
<cpp:ifdef pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">ifdef<pos:position pos:line="79" pos:column="7"/></cpp:directive> <name pos:line="79" pos:column="8">HAVE_TERMIOS_H<pos:position pos:line="79" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="80" pos:column="3">tcsetattr<pos:position pos:line="80" pos:column="12"/></name><argument_list pos:line="80" pos:column="12">(<argument><expr><name pos:line="80" pos:column="13">outfd<pos:position pos:line="80" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="20">TCSAFLUSH<pos:position pos:line="80" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="31">&amp;<pos:position pos:line="80" pos:column="36"/></operator><name pos:line="80" pos:column="32">orig<pos:position pos:line="80" pos:column="36"/></name></expr></argument>)<pos:position pos:line="80" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="38"/></expr_stmt>
<cpp:else pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">else<pos:position pos:line="81" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="82" pos:column="1">#  <cpp:directive pos:line="82" pos:column="4">ifdef<pos:position pos:line="82" pos:column="9"/></cpp:directive> <name pos:line="82" pos:column="10">HAVE_TERMIO_H<pos:position pos:line="82" pos:column="23"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="83" pos:column="3">ioctl<pos:position pos:line="83" pos:column="8"/></name><argument_list pos:line="83" pos:column="8">(<argument><expr><name pos:line="83" pos:column="9">outfd<pos:position pos:line="83" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="16">TCSETA<pos:position pos:line="83" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="24">&amp;<pos:position pos:line="83" pos:column="29"/></operator><name pos:line="83" pos:column="25">orig<pos:position pos:line="83" pos:column="29"/></name></expr></argument>)<pos:position pos:line="83" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="31"/></expr_stmt>
<cpp:else pos:line="84" pos:column="1">#  <cpp:directive pos:line="84" pos:column="4">else<pos:position pos:line="84" pos:column="8"/></cpp:directive></cpp:else>
<cpp:endif pos:line="85" pos:column="1">#  <cpp:directive pos:line="85" pos:column="4">endif<pos:position pos:line="85" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>
  
  <expr_stmt><expr><call><name pos:line="88" pos:column="3">signal<pos:position pos:line="88" pos:column="9"/></name><argument_list pos:line="88" pos:column="9">(<argument><expr><name pos:line="88" pos:column="10">SIGINT<pos:position pos:line="88" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="18">sigint<pos:position pos:line="88" pos:column="24"/></name></expr></argument>)<pos:position pos:line="88" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="26"/></expr_stmt>
<cpp:ifndef pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">ifndef<pos:position pos:line="89" pos:column="8"/></cpp:directive> <name pos:line="89" pos:column="9">__EMX__<pos:position pos:line="89" pos:column="16"/></name></cpp:ifndef>
  <expr_stmt><expr><call><name pos:line="90" pos:column="3">signal<pos:position pos:line="90" pos:column="9"/></name><argument_list pos:line="90" pos:column="9">(<argument><expr><name pos:line="90" pos:column="10">SIGTSTP<pos:position pos:line="90" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="19">sigtstp<pos:position pos:line="90" pos:column="26"/></name></expr></argument>)<pos:position pos:line="90" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="93" pos:column="3">if<condition pos:line="93" pos:column="5">(<expr><name pos:line="93" pos:column="6">infp_fclose<pos:position pos:line="93" pos:column="17"/></name></expr>)<pos:position pos:line="93" pos:column="18"/></condition><then pos:line="93" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="5">fclose<pos:position pos:line="94" pos:column="11"/></name><argument_list pos:line="94" pos:column="11">(<argument><expr><name pos:line="94" pos:column="12">infp<pos:position pos:line="94" pos:column="16"/></name></expr></argument>)<pos:position pos:line="94" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="18"/></expr_stmt></block></then></if>

  <return pos:line="96" pos:column="3">return <expr><name pos:line="96" pos:column="10">buffer<pos:position pos:line="96" pos:column="16"/></name></expr>;<pos:position pos:line="96" pos:column="17"/></return> <comment type="block" pos:line="96" pos:column="18">/* we always return success */</comment>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
