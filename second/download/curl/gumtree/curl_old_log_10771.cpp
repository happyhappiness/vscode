puts(
"          level must be entered and should  be  one  of  'clear',\n"
"          'safe',  'confidential'  or 'private'. Should you use a\n"
"          level that is not one of these, 'private' will  instead\n"
"          be used.\n"
"\n"
"     -K/--config <config file>\n"
"          Specify  which config file to read curl arguments from.\n"
"          The config file is a text file in  which  command  line\n"
"          arguments  can be written which then will be used as if\n"
"          they were written on the actual command  line.  If  the\n"
"          first  column  of a config line is a '#' character, the\n"
"          rest of the line will be treated as a comment.\n"
"\n"
"          Specify the filename as '-' to make curl read the  file\n"
"          from stdin.\n"
"\n"
"     -l/--list-only\n"
"          (FTP) When listing an FTP directory, this switch forces\n"
"          a name-only view.  Especially useful  if  you  want  to\n"
"          machine-parse  the  contents  of an FTP directory since\n"
"          the normal directory view doesn't use a  standard  look\n"
"          or format.\n"
"\n"
"     -L/--location\n"
"          (HTTP/HTTPS)  If  the server reports that the requested\n"
"          page has  a  different  location  (indicated  with  the\n"
"          header  line Location:) this flag will let curl attempt\n"
"          to reattempt the get on the new place. If used together\n"
"          with -i or -I, headers from all requested pages will be\n"
"          shown. If this flag is used when making  a  HTTP  POST,\n"
"          curl will automatically switch to GET after the initial\n"
"          POST has been done.\n"
"\n"
"     -m/--max-time <seconds>\n"
"          Maximum time in seconds that you allow the whole opera�\n"
"          tion to take.  This is useful for preventing your batch\n"
"          jobs from hanging for hours due  to  slow  networks  or\n"
"          links  going  down.   This  doesn't work fully in win32\n"
"          systems.\n"
"\n"
"     -M/--manual\n"
"          Manual. Display the huge help text.\n"
"\n"
"     -n/--netrc\n"
"          Makes curl scan the .netrc  file  in  the  user's  home\n"
"          directory  for  login  name and password. This is typi�\n"
"          cally used for ftp on unix. If  used  with  http,  curl\n"
"          will  enable  user  authentication.  See  netrc(4)  for\n"
"          details on the file format. Curl will not  complain  if\n"
"          that  file  hasn't the right permissions (it should not\n"
"          be world nor group readable). The environment  variable\n"
"          \"HOME\" is used to find the home directory.\n"
"\n"
"          A  quick  and  very  simple  example  of how to setup a\n"
"          .netrc  to  allow  curl   to   ftp   to   the   machine\n"
"          host.domain.com with user name\n"
"\n"
"          machine host.domain.com login myself password secret\n"
"\n"
"     -N/--no-buffer\n"
"          Disables  the buffering of the output stream. In normal\n"
"          work situations, curl will use a standard buffered out�\n"
"          put  stream that will have the effect that it will out�\n"
"          put the data in chunks, not  necessarily  exactly  when\n"
"          the  data arrives.  Using this option will disable that\n"
"          buffering.\n"
"\n"
"     -o/--output <file>\n"
"          Write output to <file> instead of stdout.  If  you  are\n"
"          using {} or [] to fetch multiple documents, you can use\n"
"          '#' followed by a number in the <file> specifier.  That\n"
"          variable  will  be replaced with the current string for\n"
"          the URL being fetched. Like in:\n"
"\n"
"            curl http://{one,two}.site.com -o \"file_#1.txt\"\n"
"\n"
"          or use several variables like:\n"
"\n"
"            curl http://{site,host}.host[1-5].com -o \"#1_#2\"\n"
"\n"
"     -O/--remote-name\n"
"          Write output to a local file named like the remote file\n"
"          we get. (Only the file part of the remote file is used,\n"
"          the path is cut off.)\n"
"\n"
"     -p/--proxytunnel\n"
"          When an HTTP proxy is used, this option will cause non-\n"
"          HTTP  protocols  to attempt to tunnel through the proxy\n"
"          instead of merely using it to do HTTP-like  operations.\n"
"          The tunnel approach is made with the HTTP proxy CONNECT\n"
"          request and requires that the proxy allows direct  con�\n"
"          nect  to  the  remote  port number curl wants to tunnel\n"
"          through to.\n"
"\n"
"     -P/--ftpport <address>\n"
"          (FTP) Reverses the initiator/listener roles  when  con�\n"
"          necting  with  ftp. This switch makes Curl use the PORT\n"
"          command instead of PASV. In practice,  PORT  tells  the\n"
"          server to connect to the client's specified address and\n"
"          port, while PASV asks the server for an ip address  and\n"
"          port to connect to. <address> should be one of:\n"
"\n"
"          interface   i.e  \"eth0\" to specify which interface's IP\n"
"                      address you want to use  (Unix only)\n"
"\n"
"          IP address  i.e \"192.168.10.1\" to specify exact IP num�\n"
"                      ber\n"
"\n"
"          host name   i.e \"my.host.domain\" to specify machine\n"
"\n"
"          -           (any  single-letter string) to make it pick\n"
"                      the machine's default\n"
"\n"
"     -q   If used as the first parameter on the command line, the\n"
"          $HOME/.curlrc  file will not be read and used as a con�\n"
"          fig file.\n"
"\n"
"     -Q/--quote <comand>\n"
"          (FTP) Send an  arbitrary  command  to  the  remote  FTP\n"
"          server,  by  using the QUOTE command of the server. Not\n"
"          all servers support this command, and the set of  QUOTE\n"
"          commands  are  server specific! Quote commands are sent\n"
"          BEFORE the transfer is taking place. To  make  commands\n"
"          take  place  after  a  successful transfer, prefix them\n"
"          with a dash '-'. You may specify any amount of commands\n"
"          to  be run before and after the transfer. If the server\n"
"          returns failure for one of  the  commands,  the  entire\n"
"          operation will be aborted.\n"
"\n"
"     -r/--range <range>\n"
"          (HTTP/FTP)  Retrieve  a byte range (i.e a partial docu�\n"
"          ment) from a HTTP/1.1 or  FTP  server.  Ranges  can  be\n"
"          specified in a number of ways.\n"
"\n"
"          0-499     specifies the first 500 bytes\n"
"\n"
"          500-999   specifies the second 500 bytes\n"
"\n"
"          -500      specifies the last 500 bytes\n"
"\n"
"          9500      specifies  the  bytes  from  offset  9500 and\n"
"                    forward\n"
"\n"
"          0-0,-1    specifies the first and last byte only(*)(H)\n"
"\n"
"          500-700,600-799\n"
"                    specifies 300 bytes from offset 500(H)\n"
"\n"
"          100-199,500-599\n"
"                    specifies two separate 100 bytes ranges(*)(H)\n"
"\n"
"     (*)  =  NOTE that this will cause the server to reply with a\n"
"     multipart response!\n"
"\n"
"     You should also be aware that many HTTP/1.1 servers  do  not\n"
"     have this feature enabled, so that when you attempt to get a\n"
"     range, you'll instead get the whole document.\n"
"\n"
"     FTP range downloads only support the simple  syntax  'start-\n"
"     stop'  (optionally  with  one  of  the  numbers omitted). It\n"
"     depends on the non-RFC command SIZE.\n"
"\n"
"     -s/--silent\n"
"          Silent mode. Don't show progress meter  or  error  mes�\n"
"          sages.  Makes Curl mute.\n"
"\n"
"     -S/--show-error\n"
"          When  used  with -s it makes curl show error message if\n"
"          it fails.\n"
"\n"
"     -t/--upload\n"
"          Deprecated. Use '-T -'  instead.   Transfer  the  stdin\n"
"          data  to  the specified file. Curl will read everything\n"
"          from stdin until EOF and store with the supplied  name.\n"
"          If  this  is  used on a http(s) server, the PUT command\n"
"          will be used.\n"
"\n"
"     -T/--upload-file <file>\n"
"          Like -t, but this transfers the specified  local  file.\n"
"          If  there  is  no  file part in the specified URL, Curl\n"
"          will append the local file name. NOTE that you must use\n"
"          a  trailing  / on the last directory to really prove to\n"
"          Curl that there is no file name or curl will think that\n"
"          your  last  directory  name  is the remote file name to\n"
"          use. That will most likely cause the  upload  operation\n"
"          to  fail.  If this is used on a http(s) server, the PUT\n"
"          command will be used.\n"
"\n"
"     -u/--user <user:password>\n"
"          Specify user and password to  use  when  fetching.  See\n"
"          README.curl  for  detailed examples of how to use this.\n"
"          If no password is  specified,  curl  will  ask  for  it\n"
"          interactively.\n"
"     -U/--proxy-user <user:password>\n"
"          Specify  user and password to use for Proxy authentica�\n"
"          tion. If no password is specified, curl will ask for it\n"
"          interactively.\n"
"\n"
"     -v/--verbose\n"
"          Makes   the  fetching  more  verbose/talkative.  Mostly\n"
"          usable for debugging. Lines  starting  with  '>'  means\n"
"          data sent by curl, '<' means data received by curl that\n"
"          is hidden in normal cases and lines starting  with  '*'\n"
"          means additional info provided by curl.\n"
"\n"
"     -V/--version\n"
"          Displays  the  full  version of curl, libcurl and other\n"
"          3rd party libraries linked with the executable.\n"
"\n"
"     -w/--write-out <format>\n"
"          Defines what to display after a completed and  success�\n"
"          ful  operation. The format is a string that may contain\n"
"          plain text mixed with  any  number  of  variables.  The\n"
"          string can be specified as \"string\", to get read from a\n"
"          particular file you specify it \"@filename\" and to  tell\n"
"          curl to read the format from stdin you write \"@-\".\n"
"\n"
"          The variables present in the output format will be sub�\n"
"          stituted by the value or text that curl thinks fit,  as\n"
"          described  below.  All  variables  are  specified  like\n"
"          %{variable_name} and to output  a  normal  %  you  just\n"
"          write  them  like %%. You can output a newline by using\n"
"          \\n, a carrige return with \\r and a tab space with \\t.\n"
"\n"
"          NOTE:  The  %-letter  is  a  special  letter   in   the\n"
"          win32-environment,  where  all occurrences of % must be\n"
"          doubled when using this option.\n"
"\n"
"          Available variables are at this point:\n"
"\n"
"          url_effective  The URL that was fetched last.  This  is\n"
"                         mostly meaningful if you've told curl to\n"
"                         follow location: headers.\n"
"\n"
"          http_code      The numerical code that was found in the\n"
);