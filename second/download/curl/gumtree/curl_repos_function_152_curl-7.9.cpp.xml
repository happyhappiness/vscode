<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_152_curl-7.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_open<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">SessionHandle<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">curl<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* We don't yet support specifying the URL at this point */</comment>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SessionHandle<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">HAVE_SIGACTION<pos:position pos:line="5" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">sigaction<pos:position pos:line="6" pos:column="19"/></name></name></type> <name pos:line="6" pos:column="20">sigact<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="9" pos:column="3">/* Very simple start-up: alloc the struct, init it with zeroes and return */</comment>
  <expr_stmt><expr><name pos:line="10" pos:column="3">data<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <operator pos:line="10" pos:column="10">(<pos:position pos:line="10" pos:column="11"/></operator>struct <name pos:line="10" pos:column="18">SessionHandle<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">*<pos:position pos:line="10" pos:column="33"/></operator><operator pos:line="10" pos:column="33">)<pos:position pos:line="10" pos:column="34"/></operator><call><name pos:line="10" pos:column="34">malloc<pos:position pos:line="10" pos:column="40"/></name><argument_list pos:line="10" pos:column="40">(<argument><expr><sizeof pos:line="10" pos:column="41">sizeof<argument_list pos:line="10" pos:column="47">(<argument><expr pos:line="10" pos:column="48">struct <name pos:line="10" pos:column="55">SessionHandle<pos:position pos:line="10" pos:column="68"/></name></expr></argument>)<pos:position pos:line="10" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="71"/></expr_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">data<pos:position pos:line="11" pos:column="10"/></name></expr>)<pos:position pos:line="11" pos:column="11"/></condition><then pos:line="11" pos:column="11"> <block pos:line="11" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">memset<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">data<pos:position pos:line="12" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="21">sizeof<argument_list pos:line="12" pos:column="27">(<argument><expr pos:line="12" pos:column="28">struct <name pos:line="12" pos:column="35">SessionHandle<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* We do some initial setup here, all those fields that can't be just 0 */</comment>

    <expr_stmt><expr><name><name pos:line="16" pos:column="5">data<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">-&gt;<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="11">state<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">.<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">headerbuff<pos:position pos:line="16" pos:column="27"/></name></name><operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator><operator pos:line="16" pos:column="28">(<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">char<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">*<pos:position pos:line="16" pos:column="34"/></operator><operator pos:line="16" pos:column="34">)<pos:position pos:line="16" pos:column="35"/></operator><call><name pos:line="16" pos:column="35">malloc<pos:position pos:line="16" pos:column="41"/></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">HEADERSIZE<pos:position pos:line="16" pos:column="52"/></name></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="54"/></expr_stmt>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><operator pos:line="17" pos:column="8">!<pos:position pos:line="17" pos:column="9"/></operator><name><name pos:line="17" pos:column="9">data<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">state<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">headerbuff<pos:position pos:line="17" pos:column="31"/></name></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32"> <block pos:line="17" pos:column="33">{
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">free<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name pos:line="18" pos:column="12">data<pos:position pos:line="18" pos:column="16"/></name></expr></argument>)<pos:position pos:line="18" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt> <comment type="block" pos:line="18" pos:column="19">/* free the memory again */</comment>
      <return pos:line="19" pos:column="7">return <expr><name pos:line="19" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="22" pos:column="5">data<pos:position pos:line="22" pos:column="9"/></name><operator pos:line="22" pos:column="9">-&gt;<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="11">state<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">.<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">headersize<pos:position pos:line="22" pos:column="27"/></name></name><operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">HEADERSIZE<pos:position pos:line="22" pos:column="38"/></name></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="24" pos:column="5">data<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">-&gt;<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="11">set<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">.<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">out<pos:position pos:line="24" pos:column="18"/></name></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">stdout<pos:position pos:line="24" pos:column="27"/></name></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt> <comment type="block" pos:line="24" pos:column="29">/* default output to stdout */</comment>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">data<pos:position pos:line="25" pos:column="9"/></name><operator pos:line="25" pos:column="9">-&gt;<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="11">set<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">.<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">in<pos:position pos:line="25" pos:column="17"/></name></name>  <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">stdin<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>  <comment type="block" pos:line="25" pos:column="29">/* default input from stdin */</comment>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">data<pos:position pos:line="26" pos:column="9"/></name><operator pos:line="26" pos:column="9">-&gt;<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="11">set<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">err<pos:position pos:line="26" pos:column="18"/></name></name>  <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <name pos:line="26" pos:column="22">stderr<pos:position pos:line="26" pos:column="28"/></name></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>  <comment type="block" pos:line="26" pos:column="31">/* default stderr to stderr */</comment>

    <comment type="block" pos:line="28" pos:column="5">/* use fwrite as default function to store output */</comment>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">data<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">-&gt;<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="11">set<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">.<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">fwrite<pos:position pos:line="29" pos:column="21"/></name></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">curl_write_callback<pos:position pos:line="29" pos:column="44"/></name><operator pos:line="29" pos:column="44">)<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="45">fwrite<pos:position pos:line="29" pos:column="51"/></name></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* use fread as default function to read input */</comment>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">data<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">-&gt;<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="11">set<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">.<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">fread<pos:position pos:line="32" pos:column="20"/></name></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <operator pos:line="32" pos:column="23">(<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">curl_read_callback<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">)<pos:position pos:line="32" pos:column="43"/></operator><name pos:line="32" pos:column="43">fread<pos:position pos:line="32" pos:column="48"/></name></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* set the default passwd function */</comment>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">data<pos:position pos:line="35" pos:column="9"/></name><operator pos:line="35" pos:column="9">-&gt;<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="11">set<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">.<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">fpasswd<pos:position pos:line="35" pos:column="22"/></name></name> <operator pos:line="35" pos:column="23">=<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="25">my_getpass<pos:position pos:line="35" pos:column="35"/></name></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="37" pos:column="5">data<pos:position pos:line="37" pos:column="9"/></name><operator pos:line="37" pos:column="9">-&gt;<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="11">set<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">.<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">infilesize<pos:position pos:line="37" pos:column="25"/></name></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <operator pos:line="37" pos:column="28">-<pos:position pos:line="37" pos:column="29"/></operator><literal type="number" pos:line="37" pos:column="29">1<pos:position pos:line="37" pos:column="30"/></literal></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt> <comment type="block" pos:line="37" pos:column="32">/* we don't know any size */</comment>

    <expr_stmt><expr><name><name pos:line="39" pos:column="5">data<pos:position pos:line="39" pos:column="9"/></name><operator pos:line="39" pos:column="9">-&gt;<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="11">state<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">.<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">current_speed<pos:position pos:line="39" pos:column="30"/></name></name> <operator pos:line="39" pos:column="31">=<pos:position pos:line="39" pos:column="32"/></operator> <operator pos:line="39" pos:column="33">-<pos:position pos:line="39" pos:column="34"/></operator><literal type="number" pos:line="39" pos:column="34">1<pos:position pos:line="39" pos:column="35"/></literal></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt> <comment type="block" pos:line="39" pos:column="37">/* init to negative == impossible */</comment>

    <expr_stmt><expr><name><name pos:line="41" pos:column="5">data<pos:position pos:line="41" pos:column="9"/></name><operator pos:line="41" pos:column="9">-&gt;<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="11">set<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">.<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">httpreq<pos:position pos:line="41" pos:column="22"/></name></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="25">HTTPREQ_GET<pos:position pos:line="41" pos:column="36"/></name></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt> <comment type="block" pos:line="41" pos:column="38">/* Default HTTP request */</comment>

    <comment type="block" pos:line="43" pos:column="5">/* make libcurl quiet by default: */</comment>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">data<pos:position pos:line="44" pos:column="9"/></name><operator pos:line="44" pos:column="9">-&gt;<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="11">set<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">.<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">hide_progress<pos:position pos:line="44" pos:column="28"/></name></name> <operator pos:line="44" pos:column="29">=<pos:position pos:line="44" pos:column="30"/></operator> <name pos:line="44" pos:column="31">TRUE<pos:position pos:line="44" pos:column="35"/></name></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>  <comment type="block" pos:line="44" pos:column="38">/* CURLOPT_NOPROGRESS changes these */</comment>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">data<pos:position pos:line="45" pos:column="9"/></name><operator pos:line="45" pos:column="9">-&gt;<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="11">progress<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">.<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">flags<pos:position pos:line="45" pos:column="25"/></name></name> <operator pos:line="45" pos:column="26">|=<pos:position pos:line="45" pos:column="28"/></operator> <name pos:line="45" pos:column="29">PGRS_HIDE<pos:position pos:line="45" pos:column="38"/></name></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="47" pos:column="5">/* Set the default size of the SSL session ID cache */</comment>
    <expr_stmt><expr><name><name pos:line="48" pos:column="5">data<pos:position pos:line="48" pos:column="9"/></name><operator pos:line="48" pos:column="9">-&gt;<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="11">set<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">.<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">ssl<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">.<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">numsessions<pos:position pos:line="48" pos:column="30"/></name></name> <operator pos:line="48" pos:column="31">=<pos:position pos:line="48" pos:column="32"/></operator> <literal type="number" pos:line="48" pos:column="33">5<pos:position pos:line="48" pos:column="34"/></literal></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="50" pos:column="5">/* create an array with connection data struct pointers */</comment>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">data<pos:position pos:line="51" pos:column="9"/></name><operator pos:line="51" pos:column="9">-&gt;<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="11">state<pos:position pos:line="51" pos:column="16"/></name><operator pos:line="51" pos:column="16">.<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="17">numconnects<pos:position pos:line="51" pos:column="28"/></name></name> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <literal type="number" pos:line="51" pos:column="31">5<pos:position pos:line="51" pos:column="32"/></literal></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt> <comment type="block" pos:line="51" pos:column="34">/* hard-coded right now */</comment>
    <expr_stmt><expr><name><name pos:line="52" pos:column="5">data<pos:position pos:line="52" pos:column="9"/></name><operator pos:line="52" pos:column="9">-&gt;<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="11">state<pos:position pos:line="52" pos:column="16"/></name><operator pos:line="52" pos:column="16">.<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="17">connects<pos:position pos:line="52" pos:column="25"/></name></name> <operator pos:line="52" pos:column="26">=<pos:position pos:line="52" pos:column="27"/></operator> <operator pos:line="52" pos:column="28">(<pos:position pos:line="52" pos:column="29"/></operator>struct <name pos:line="52" pos:column="36">connectdata<pos:position pos:line="52" pos:column="47"/></name> <operator pos:line="52" pos:column="48">*<pos:position pos:line="52" pos:column="49"/></operator><operator pos:line="52" pos:column="49">*<pos:position pos:line="52" pos:column="50"/></operator><operator pos:line="52" pos:column="50">)<pos:position pos:line="52" pos:column="51"/></operator>
      <call><name pos:line="53" pos:column="7">malloc<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><sizeof pos:line="53" pos:column="14">sizeof<argument_list pos:line="53" pos:column="20">(<argument><expr pos:line="53" pos:column="21">struct <name pos:line="53" pos:column="28">connectdata<pos:position pos:line="53" pos:column="39"/></name> <operator pos:line="53" pos:column="40">*<pos:position pos:line="53" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="53" pos:column="42"/></argument_list></sizeof> <operator pos:line="53" pos:column="43">*<pos:position pos:line="53" pos:column="44"/></operator> <name><name pos:line="53" pos:column="45">data<pos:position pos:line="53" pos:column="49"/></name><operator pos:line="53" pos:column="49">-&gt;<pos:position pos:line="53" pos:column="54"/></operator><name pos:line="53" pos:column="51">state<pos:position pos:line="53" pos:column="56"/></name><operator pos:line="53" pos:column="56">.<pos:position pos:line="53" pos:column="57"/></operator><name pos:line="53" pos:column="57">numconnects<pos:position pos:line="53" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="70"/></expr_stmt>

    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><operator pos:line="55" pos:column="8">!<pos:position pos:line="55" pos:column="9"/></operator><name><name pos:line="55" pos:column="9">data<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">-&gt;<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="15">state<pos:position pos:line="55" pos:column="20"/></name><operator pos:line="55" pos:column="20">.<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="21">connects<pos:position pos:line="55" pos:column="29"/></name></name></expr>)<pos:position pos:line="55" pos:column="30"/></condition><then pos:line="55" pos:column="30"> <block pos:line="55" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">free<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name pos:line="56" pos:column="12">data<pos:position pos:line="56" pos:column="16"/></name></expr></argument>)<pos:position pos:line="56" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="18"/></expr_stmt>
      <return pos:line="57" pos:column="7">return <expr><name pos:line="57" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="57" pos:column="33"/></name></expr>;<pos:position pos:line="57" pos:column="34"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">memset<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><name><name pos:line="60" pos:column="12">data<pos:position pos:line="60" pos:column="16"/></name><operator pos:line="60" pos:column="16">-&gt;<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="18">state<pos:position pos:line="60" pos:column="23"/></name><operator pos:line="60" pos:column="23">.<pos:position pos:line="60" pos:column="24"/></operator><name pos:line="60" pos:column="24">connects<pos:position pos:line="60" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="34">0<pos:position pos:line="60" pos:column="35"/></literal></expr></argument>,
           <argument><expr><sizeof pos:line="61" pos:column="12">sizeof<argument_list pos:line="61" pos:column="18">(<argument><expr pos:line="61" pos:column="19">struct <name pos:line="61" pos:column="26">connectdata<pos:position pos:line="61" pos:column="37"/></name> <operator pos:line="61" pos:column="38">*<pos:position pos:line="61" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="61" pos:column="40"/></argument_list></sizeof><operator pos:line="61" pos:column="40">*<pos:position pos:line="61" pos:column="41"/></operator><name><name pos:line="61" pos:column="41">data<pos:position pos:line="61" pos:column="45"/></name><operator pos:line="61" pos:column="45">-&gt;<pos:position pos:line="61" pos:column="50"/></operator><name pos:line="61" pos:column="47">state<pos:position pos:line="61" pos:column="52"/></name><operator pos:line="61" pos:column="52">.<pos:position pos:line="61" pos:column="53"/></operator><name pos:line="61" pos:column="53">numconnects<pos:position pos:line="61" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="66"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="63" pos:column="5">*<pos:position pos:line="63" pos:column="6"/></operator><name pos:line="63" pos:column="6">curl<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">=<pos:position pos:line="63" pos:column="12"/></operator> <name pos:line="63" pos:column="13">data<pos:position pos:line="63" pos:column="17"/></name></expr>;<pos:position pos:line="63" pos:column="18"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="65" pos:column="5">/*************************************************************
     * Set signal handler
     *************************************************************/</comment>
<cpp:ifdef pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">ifdef<pos:position pos:line="68" pos:column="7"/></cpp:directive> <name pos:line="68" pos:column="8">HAVE_SIGACTION<pos:position pos:line="68" pos:column="22"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">sigaction<pos:position pos:line="69" pos:column="14"/></name><argument_list pos:line="69" pos:column="14">(<argument><expr><name pos:line="69" pos:column="15">SIGALRM<pos:position pos:line="69" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="24">NULL<pos:position pos:line="69" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="30">&amp;<pos:position pos:line="69" pos:column="35"/></operator><name pos:line="69" pos:column="31">sigact<pos:position pos:line="69" pos:column="37"/></name></expr></argument>)<pos:position pos:line="69" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">sigact<pos:position pos:line="70" pos:column="11"/></name><operator pos:line="70" pos:column="11">.<pos:position pos:line="70" pos:column="12"/></operator><name pos:line="70" pos:column="12">sa_handler<pos:position pos:line="70" pos:column="22"/></name></name> <operator pos:line="70" pos:column="23">=<pos:position pos:line="70" pos:column="24"/></operator> <name pos:line="70" pos:column="25">alarmfunc<pos:position pos:line="70" pos:column="34"/></name></expr>;<pos:position pos:line="70" pos:column="35"/></expr_stmt>
<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef<pos:position pos:line="71" pos:column="7"/></cpp:directive> <name pos:line="71" pos:column="8">SA_RESTART<pos:position pos:line="71" pos:column="18"/></name></cpp:ifdef>
    <comment type="block" pos:line="72" pos:column="5">/* HPUX doesn't have SA_RESTART but defaults to that behaviour! */</comment>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">sigact<pos:position pos:line="73" pos:column="11"/></name><operator pos:line="73" pos:column="11">.<pos:position pos:line="73" pos:column="12"/></operator><name pos:line="73" pos:column="12">sa_flags<pos:position pos:line="73" pos:column="20"/></name></name> <operator pos:line="73" pos:column="21">&amp;=<pos:position pos:line="73" pos:column="27"/></operator> <operator pos:line="73" pos:column="24">~<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="25">SA_RESTART<pos:position pos:line="73" pos:column="35"/></name></expr>;<pos:position pos:line="73" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">endif<pos:position pos:line="74" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">sigaction<pos:position pos:line="75" pos:column="14"/></name><argument_list pos:line="75" pos:column="14">(<argument><expr><name pos:line="75" pos:column="15">SIGALRM<pos:position pos:line="75" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="24">&amp;<pos:position pos:line="75" pos:column="29"/></operator><name pos:line="75" pos:column="25">sigact<pos:position pos:line="75" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="33">NULL<pos:position pos:line="75" pos:column="37"/></name></expr></argument>)<pos:position pos:line="75" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="39"/></expr_stmt>
<cpp:else pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">else<pos:position pos:line="76" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="77" pos:column="5">/* no sigaction(), revert to the much lamer signal() */</comment>
<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef<pos:position pos:line="78" pos:column="7"/></cpp:directive> <name pos:line="78" pos:column="8">HAVE_SIGNAL<pos:position pos:line="78" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">signal<pos:position pos:line="79" pos:column="11"/></name><argument_list pos:line="79" pos:column="11">(<argument><expr><name pos:line="79" pos:column="12">SIGALRM<pos:position pos:line="79" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="21">alarmfunc<pos:position pos:line="79" pos:column="30"/></name></expr></argument>)<pos:position pos:line="79" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="84" pos:column="5">return <expr><name pos:line="84" pos:column="12">CURLE_OK<pos:position pos:line="84" pos:column="20"/></name></expr>;<pos:position pos:line="84" pos:column="21"/></return>
  }<pos:position pos:line="85" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="87" pos:column="3">/* this is a very serious error */</comment>
  <return pos:line="88" pos:column="3">return <expr><name pos:line="88" pos:column="10">CURLE_OUT_OF_MEMORY<pos:position pos:line="88" pos:column="29"/></name></expr>;<pos:position pos:line="88" pos:column="30"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
