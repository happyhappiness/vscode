<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_851.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">formparse<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name><name pos:line="1" pos:column="15">struct<pos:position pos:line="1" pos:column="21"/></name> <name pos:line="1" pos:column="22">OperationConfig<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">config<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>,
              <parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">input<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>,
              <parameter><decl><type><name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">curl_httppost<pos:position pos:line="3" pos:column="35"/></name></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier><modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">httppost<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
              <parameter><decl><type><name><name pos:line="4" pos:column="15">struct<pos:position pos:line="4" pos:column="21"/></name> <name pos:line="4" pos:column="22">curl_httppost<pos:position pos:line="4" pos:column="35"/></name></name> <modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier><modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">last_post<pos:position pos:line="4" pos:column="47"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="5" pos:column="15">bool<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">literal_value<pos:position pos:line="5" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="34"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <comment type="block" pos:line="7" pos:column="3">/* nextarg MUST be a string in the format 'name=contents' and we'll
     build a linked list with the info */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">name<pos:position pos:line="9" pos:column="12"/></name><index pos:line="9" pos:column="12">[<expr><literal type="number" pos:line="9" pos:column="13">256<pos:position pos:line="9" pos:column="16"/></literal></expr>]<pos:position pos:line="9" pos:column="17"/></index></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">contents<pos:position pos:line="10" pos:column="17"/></name> <init pos:line="10" pos:column="18">= <expr><name pos:line="10" pos:column="20">NULL<pos:position pos:line="10" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name><name pos:line="11" pos:column="8">type_major<pos:position pos:line="11" pos:column="18"/></name><index pos:line="11" pos:column="18">[<expr><literal type="number" pos:line="11" pos:column="19">128<pos:position pos:line="11" pos:column="22"/></literal></expr>]<pos:position pos:line="11" pos:column="23"/></index></name> <init pos:line="11" pos:column="24">= <expr><literal type="string" pos:line="11" pos:column="26">""<pos:position pos:line="11" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name><name pos:line="12" pos:column="8">type_minor<pos:position pos:line="12" pos:column="18"/></name><index pos:line="12" pos:column="18">[<expr><literal type="number" pos:line="12" pos:column="19">128<pos:position pos:line="12" pos:column="22"/></literal></expr>]<pos:position pos:line="12" pos:column="23"/></index></name> <init pos:line="12" pos:column="24">= <expr><literal type="string" pos:line="12" pos:column="26">""<pos:position pos:line="12" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">contp<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">type<pos:position pos:line="14" pos:column="19"/></name> <init pos:line="14" pos:column="20">= <expr><name pos:line="14" pos:column="22">NULL<pos:position pos:line="14" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">sep<pos:position pos:line="15" pos:column="12"/></name></decl>;<pos:position pos:line="15" pos:column="13"/></decl_stmt>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">(<pos:position pos:line="17" pos:column="7"/></operator><literal type="number" pos:line="17" pos:column="7">1<pos:position pos:line="17" pos:column="8"/></literal> <operator pos:line="17" pos:column="9">==<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">sscanf<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">input<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="26">"%255[^=]="<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">name<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call><operator pos:line="17" pos:column="44">)<pos:position pos:line="17" pos:column="45"/></operator> <operator pos:line="17" pos:column="46">&amp;&amp;<pos:position pos:line="17" pos:column="56"/></operator>
     <operator pos:line="18" pos:column="6">(<pos:position pos:line="18" pos:column="7"/></operator><operator pos:line="18" pos:column="7">(<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">contp<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">strchr<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">input<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="30">'='<pos:position pos:line="18" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call><operator pos:line="18" pos:column="34">)<pos:position pos:line="18" pos:column="35"/></operator> <operator pos:line="18" pos:column="36">!=<pos:position pos:line="18" pos:column="38"/></operator> <name pos:line="18" pos:column="39">NULL<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">)<pos:position pos:line="18" pos:column="44"/></operator></expr>)<pos:position pos:line="18" pos:column="45"/></condition><then pos:line="18" pos:column="45"> <block pos:line="18" pos:column="46">{
    <comment type="block" pos:line="19" pos:column="5">/* the input was using the correct format */</comment>

    <comment type="block" pos:line="21" pos:column="5">/* Allocate the contents */</comment>
    <expr_stmt><expr><name pos:line="22" pos:column="5">contents<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <call><name pos:line="22" pos:column="16">strdup<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">contp<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">+<pos:position pos:line="22" pos:column="29"/></operator><literal type="number" pos:line="22" pos:column="29">1<pos:position pos:line="22" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><operator pos:line="23" pos:column="8">!<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">contents<pos:position pos:line="23" pos:column="17"/></name></expr>)<pos:position pos:line="23" pos:column="18"/></condition><then pos:line="23" pos:column="18"> <block pos:line="23" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">fprintf<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name><name pos:line="24" pos:column="15">config<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">-&gt;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="23">global<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">-&gt;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="31">errors<pos:position pos:line="24" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="39">"out of memory\n"<pos:position pos:line="24" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
      <return pos:line="25" pos:column="7">return <expr><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal></expr>;<pos:position pos:line="25" pos:column="16"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="27" pos:column="5">contp<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <name pos:line="27" pos:column="13">contents<pos:position pos:line="27" pos:column="21"/></name></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>

    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><literal type="char" pos:line="29" pos:column="8">'@'<pos:position pos:line="29" pos:column="11"/></literal> <operator pos:line="29" pos:column="12">==<pos:position pos:line="29" pos:column="14"/></operator> <name><name pos:line="29" pos:column="15">contp<pos:position pos:line="29" pos:column="20"/></name><index pos:line="29" pos:column="20">[<expr><literal type="number" pos:line="29" pos:column="21">0<pos:position pos:line="29" pos:column="22"/></literal></expr>]<pos:position pos:line="29" pos:column="23"/></index></name> <operator pos:line="29" pos:column="24">&amp;&amp;<pos:position pos:line="29" pos:column="34"/></operator> <operator pos:line="29" pos:column="27">!<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">literal_value<pos:position pos:line="29" pos:column="41"/></name></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{

      <comment type="block" pos:line="31" pos:column="7">/* we use the @-letter to indicate file name(s) */</comment>

      <decl_stmt><decl><type><name><name pos:line="33" pos:column="7">struct<pos:position pos:line="33" pos:column="13"/></name> <name pos:line="33" pos:column="14">multi_files<pos:position pos:line="33" pos:column="25"/></name></name> <modifier pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></modifier></type><name pos:line="33" pos:column="27">multi_start<pos:position pos:line="33" pos:column="38"/></name> <init pos:line="33" pos:column="39">= <expr><name pos:line="33" pos:column="41">NULL<pos:position pos:line="33" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="46"/></decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="34" pos:column="7">struct<pos:position pos:line="34" pos:column="13"/></name> <name pos:line="34" pos:column="14">multi_files<pos:position pos:line="34" pos:column="25"/></name></name> <modifier pos:line="34" pos:column="26">*<pos:position pos:line="34" pos:column="27"/></modifier></type><name pos:line="34" pos:column="27">multi_current<pos:position pos:line="34" pos:column="40"/></name> <init pos:line="34" pos:column="41">= <expr><name pos:line="34" pos:column="43">NULL<pos:position pos:line="34" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="48"/></decl_stmt>

      <decl_stmt><decl><type><name pos:line="36" pos:column="7">char<pos:position pos:line="36" pos:column="11"/></name> <modifier pos:line="36" pos:column="12">*<pos:position pos:line="36" pos:column="13"/></modifier></type><name pos:line="36" pos:column="13">ptr<pos:position pos:line="36" pos:column="16"/></name> <init pos:line="36" pos:column="17">= <expr><name pos:line="36" pos:column="19">contp<pos:position pos:line="36" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="36" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="37" pos:column="7">char<pos:position pos:line="37" pos:column="11"/></name> <modifier pos:line="37" pos:column="12">*<pos:position pos:line="37" pos:column="13"/></modifier></type><name pos:line="37" pos:column="13">end<pos:position pos:line="37" pos:column="16"/></name> <init pos:line="37" pos:column="17">= <expr><name pos:line="37" pos:column="19">ptr<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">+<pos:position pos:line="37" pos:column="24"/></operator> <call><name pos:line="37" pos:column="25">strlen<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">ptr<pos:position pos:line="37" pos:column="35"/></name></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="37"/></decl_stmt>

      <do pos:line="39" pos:column="7">do <block pos:line="39" pos:column="10">{
        <comment type="block" pos:line="40" pos:column="9">/* since this was a file, it may have a content-type specifier
           at the end too, or a filename. Or both. */</comment>
        <decl_stmt><decl><type><name pos:line="42" pos:column="9">char<pos:position pos:line="42" pos:column="13"/></name> <modifier pos:line="42" pos:column="14">*<pos:position pos:line="42" pos:column="15"/></modifier></type><name pos:line="42" pos:column="15">filename<pos:position pos:line="42" pos:column="23"/></name> <init pos:line="42" pos:column="24">= <expr><name pos:line="42" pos:column="26">NULL<pos:position pos:line="42" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="31"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="43" pos:column="9">char<pos:position pos:line="43" pos:column="13"/></name> <modifier pos:line="43" pos:column="14">*<pos:position pos:line="43" pos:column="15"/></modifier></type><name pos:line="43" pos:column="15">word_end<pos:position pos:line="43" pos:column="23"/></name></decl>;<pos:position pos:line="43" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="44" pos:column="9">bool<pos:position pos:line="44" pos:column="13"/></name></type> <name pos:line="44" pos:column="14">semicolon<pos:position pos:line="44" pos:column="23"/></name></decl>;<pos:position pos:line="44" pos:column="24"/></decl_stmt>

        <expr_stmt><expr><name pos:line="46" pos:column="9">type<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <name pos:line="46" pos:column="16">NULL<pos:position pos:line="46" pos:column="20"/></name></expr>;<pos:position pos:line="46" pos:column="21"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="48" pos:column="9">++<pos:position pos:line="48" pos:column="11"/></operator><name pos:line="48" pos:column="11">ptr<pos:position pos:line="48" pos:column="14"/></name></expr>;<pos:position pos:line="48" pos:column="15"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">contp<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <call><name pos:line="49" pos:column="17">get_param_word<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><operator pos:line="49" pos:column="32">&amp;<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="33">ptr<pos:position pos:line="49" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="38">&amp;<pos:position pos:line="49" pos:column="43"/></operator><name pos:line="49" pos:column="39">word_end<pos:position pos:line="49" pos:column="47"/></name></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="50" pos:column="9">semicolon<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <ternary><condition><expr><operator pos:line="50" pos:column="21">(<pos:position pos:line="50" pos:column="22"/></operator><literal type="char" pos:line="50" pos:column="22">';'<pos:position pos:line="50" pos:column="25"/></literal> <operator pos:line="50" pos:column="26">==<pos:position pos:line="50" pos:column="28"/></operator> <operator pos:line="50" pos:column="29">*<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="30">ptr<pos:position pos:line="50" pos:column="33"/></name><operator pos:line="50" pos:column="33">)<pos:position pos:line="50" pos:column="34"/></operator></expr> ?<pos:position pos:line="50" pos:column="36"/></condition><then pos:line="50" pos:column="36"> <expr><name pos:line="50" pos:column="37">TRUE<pos:position pos:line="50" pos:column="41"/></name></expr> <pos:position pos:line="50" pos:column="42"/></then><else pos:line="50" pos:column="42">: <expr><name pos:line="50" pos:column="44">FALSE<pos:position pos:line="50" pos:column="49"/></name></expr></else></ternary></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="51" pos:column="9">*<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">word_end<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">=<pos:position pos:line="51" pos:column="20"/></operator> <literal type="char" pos:line="51" pos:column="21">'\0'<pos:position pos:line="51" pos:column="25"/></literal></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt> <comment type="block" pos:line="51" pos:column="27">/* terminate the contp */</comment>

        <comment type="block" pos:line="53" pos:column="9">/* have other content, continue parse */</comment>
        <while pos:line="54" pos:column="9">while<condition pos:line="54" pos:column="14">(<expr><name pos:line="54" pos:column="15">semicolon<pos:position pos:line="54" pos:column="24"/></name></expr>)<pos:position pos:line="54" pos:column="25"/></condition> <block pos:line="54" pos:column="26">{
          <comment type="block" pos:line="55" pos:column="11">/* have type or filename field */</comment>
          <expr_stmt><expr><operator pos:line="56" pos:column="11">++<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="13">ptr<pos:position pos:line="56" pos:column="16"/></name></expr>;<pos:position pos:line="56" pos:column="17"/></expr_stmt>
          <while pos:line="57" pos:column="11">while<condition pos:line="57" pos:column="16">(<expr><operator pos:line="57" pos:column="17">*<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="18">ptr<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">&amp;&amp;<pos:position pos:line="57" pos:column="32"/></operator> <operator pos:line="57" pos:column="25">(<pos:position pos:line="57" pos:column="26"/></operator><call><name pos:line="57" pos:column="26">ISSPACE<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><operator pos:line="57" pos:column="34">*<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="35">ptr<pos:position pos:line="57" pos:column="38"/></name></expr></argument>)<pos:position pos:line="57" pos:column="39"/></argument_list></call><operator pos:line="57" pos:column="39">)<pos:position pos:line="57" pos:column="40"/></operator></expr>)<pos:position pos:line="57" pos:column="41"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="58" pos:column="13">++<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="15">ptr<pos:position pos:line="58" pos:column="18"/></name></expr>;<pos:position pos:line="58" pos:column="19"/></expr_stmt></block></while>

          <if pos:line="60" pos:column="11">if<condition pos:line="60" pos:column="13">(<expr><call><name pos:line="60" pos:column="14">checkprefix<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><literal type="string" pos:line="60" pos:column="26">"type="<pos:position pos:line="60" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="35">ptr<pos:position pos:line="60" pos:column="38"/></name></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="40"/></condition><then pos:line="60" pos:column="40"> <block pos:line="60" pos:column="41">{
            <comment type="block" pos:line="61" pos:column="13">/* set type pointer */</comment>
            <expr_stmt><expr><name pos:line="62" pos:column="13">type<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">=<pos:position pos:line="62" pos:column="19"/></operator> <operator pos:line="62" pos:column="20">&amp;<pos:position pos:line="62" pos:column="25"/></operator><name><name pos:line="62" pos:column="21">ptr<pos:position pos:line="62" pos:column="24"/></name><index pos:line="62" pos:column="24">[<expr><literal type="number" pos:line="62" pos:column="25">5<pos:position pos:line="62" pos:column="26"/></literal></expr>]<pos:position pos:line="62" pos:column="27"/></index></name></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>

            <comment type="block" pos:line="64" pos:column="13">/* verify that this is a fine type specifier */</comment>
            <if pos:line="65" pos:column="13">if<condition pos:line="65" pos:column="15">(<expr><literal type="number" pos:line="65" pos:column="16">2<pos:position pos:line="65" pos:column="17"/></literal> <operator pos:line="65" pos:column="18">!=<pos:position pos:line="65" pos:column="20"/></operator> <call><name pos:line="65" pos:column="21">sscanf<pos:position pos:line="65" pos:column="27"/></name><argument_list pos:line="65" pos:column="27">(<argument><expr><name pos:line="65" pos:column="28">type<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="34">"%127[^/]/%127[^;,\n]"<pos:position pos:line="65" pos:column="56"/></literal></expr></argument>,
                           <argument><expr><name pos:line="66" pos:column="28">type_major<pos:position pos:line="66" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="40">type_minor<pos:position pos:line="66" pos:column="50"/></name></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="52"/></condition><then pos:line="66" pos:column="52"> <block pos:line="66" pos:column="53">{
              <expr_stmt><expr><call><name pos:line="67" pos:column="15">warnf<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">(<argument><expr><name pos:line="67" pos:column="21">config<pos:position pos:line="67" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="29">"Illegally formatted content-type field!\n"<pos:position pos:line="67" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="74"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="68" pos:column="15">Curl_safefree<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">contents<pos:position pos:line="68" pos:column="37"/></name></expr></argument>)<pos:position pos:line="68" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="39"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="69" pos:column="15">FreeMultiInfo<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><operator pos:line="69" pos:column="29">&amp;<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="30">multi_start<pos:position pos:line="69" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="43">&amp;<pos:position pos:line="69" pos:column="48"/></operator><name pos:line="69" pos:column="44">multi_current<pos:position pos:line="69" pos:column="57"/></name></expr></argument>)<pos:position pos:line="69" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="59"/></expr_stmt>
              <return pos:line="70" pos:column="15">return <expr><literal type="number" pos:line="70" pos:column="22">2<pos:position pos:line="70" pos:column="23"/></literal></expr>;<pos:position pos:line="70" pos:column="24"/></return> <comment type="block" pos:line="70" pos:column="25">/* illegal content-type syntax! */</comment>
            }<pos:position pos:line="71" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="73" pos:column="13">/* now point beyond the content-type specifier */</comment>
            <expr_stmt><expr><name pos:line="74" pos:column="13">sep<pos:position pos:line="74" pos:column="16"/></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <operator pos:line="74" pos:column="19">(<pos:position pos:line="74" pos:column="20"/></operator><name pos:line="74" pos:column="20">char<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">*<pos:position pos:line="74" pos:column="26"/></operator><operator pos:line="74" pos:column="26">)<pos:position pos:line="74" pos:column="27"/></operator><name pos:line="74" pos:column="27">type<pos:position pos:line="74" pos:column="31"/></name> <operator pos:line="74" pos:column="32">+<pos:position pos:line="74" pos:column="33"/></operator> <call><name pos:line="74" pos:column="34">strlen<pos:position pos:line="74" pos:column="40"/></name><argument_list pos:line="74" pos:column="40">(<argument><expr><name pos:line="74" pos:column="41">type_major<pos:position pos:line="74" pos:column="51"/></name></expr></argument>)<pos:position pos:line="74" pos:column="52"/></argument_list></call><operator pos:line="74" pos:column="52">+<pos:position pos:line="74" pos:column="53"/></operator><call><name pos:line="74" pos:column="53">strlen<pos:position pos:line="74" pos:column="59"/></name><argument_list pos:line="74" pos:column="59">(<argument><expr><name pos:line="74" pos:column="60">type_minor<pos:position pos:line="74" pos:column="70"/></name></expr></argument>)<pos:position pos:line="74" pos:column="71"/></argument_list></call><operator pos:line="74" pos:column="71">+<pos:position pos:line="74" pos:column="72"/></operator><literal type="number" pos:line="74" pos:column="72">1<pos:position pos:line="74" pos:column="73"/></literal></expr>;<pos:position pos:line="74" pos:column="74"/></expr_stmt>

            <comment type="block" pos:line="76" pos:column="13">/* there's a semicolon following - we check if it is a filename
               specified and if not we simply assume that it is text that
               the user wants included in the type and include that too up
               to the next sep. */</comment>
            <expr_stmt><expr><name pos:line="80" pos:column="13">ptr<pos:position pos:line="80" pos:column="16"/></name> <operator pos:line="80" pos:column="17">=<pos:position pos:line="80" pos:column="18"/></operator> <name pos:line="80" pos:column="19">sep<pos:position pos:line="80" pos:column="22"/></name></expr>;<pos:position pos:line="80" pos:column="23"/></expr_stmt>
            <if pos:line="81" pos:column="13">if<condition pos:line="81" pos:column="15">(<expr><operator pos:line="81" pos:column="16">*<pos:position pos:line="81" pos:column="17"/></operator><name pos:line="81" pos:column="17">sep<pos:position pos:line="81" pos:column="20"/></name><operator pos:line="81" pos:column="20">==<pos:position pos:line="81" pos:column="22"/></operator><literal type="char" pos:line="81" pos:column="22">';'<pos:position pos:line="81" pos:column="25"/></literal></expr>)<pos:position pos:line="81" pos:column="26"/></condition><then pos:line="81" pos:column="26"> <block pos:line="81" pos:column="27">{
              <if pos:line="82" pos:column="15">if<condition pos:line="82" pos:column="17">(<expr><operator pos:line="82" pos:column="18">!<pos:position pos:line="82" pos:column="19"/></operator><call><name pos:line="82" pos:column="19">checkprefix<pos:position pos:line="82" pos:column="30"/></name><argument_list pos:line="82" pos:column="30">(<argument><expr><literal type="string" pos:line="82" pos:column="31">";filename="<pos:position pos:line="82" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="45">sep<pos:position pos:line="82" pos:column="48"/></name></expr></argument>)<pos:position pos:line="82" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="50"/></condition><then pos:line="82" pos:column="50"> <block pos:line="82" pos:column="51">{
                <expr_stmt><expr><name pos:line="83" pos:column="17">ptr<pos:position pos:line="83" pos:column="20"/></name> <operator pos:line="83" pos:column="21">=<pos:position pos:line="83" pos:column="22"/></operator> <name pos:line="83" pos:column="23">sep<pos:position pos:line="83" pos:column="26"/></name> <operator pos:line="83" pos:column="27">+<pos:position pos:line="83" pos:column="28"/></operator> <literal type="number" pos:line="83" pos:column="29">1<pos:position pos:line="83" pos:column="30"/></literal></expr>;<pos:position pos:line="83" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="84" pos:column="17">(<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">void<pos:position pos:line="84" pos:column="22"/></name><operator pos:line="84" pos:column="22">)<pos:position pos:line="84" pos:column="23"/></operator><call><name pos:line="84" pos:column="23">get_param_word<pos:position pos:line="84" pos:column="37"/></name><argument_list pos:line="84" pos:column="37">(<argument><expr><operator pos:line="84" pos:column="38">&amp;<pos:position pos:line="84" pos:column="43"/></operator><name pos:line="84" pos:column="39">ptr<pos:position pos:line="84" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="44">&amp;<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="45">sep<pos:position pos:line="84" pos:column="48"/></name></expr></argument>)<pos:position pos:line="84" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name pos:line="85" pos:column="17">semicolon<pos:position pos:line="85" pos:column="26"/></name> <operator pos:line="85" pos:column="27">=<pos:position pos:line="85" pos:column="28"/></operator> <ternary><condition><expr><operator pos:line="85" pos:column="29">(<pos:position pos:line="85" pos:column="30"/></operator><literal type="char" pos:line="85" pos:column="30">';'<pos:position pos:line="85" pos:column="33"/></literal> <operator pos:line="85" pos:column="34">==<pos:position pos:line="85" pos:column="36"/></operator> <operator pos:line="85" pos:column="37">*<pos:position pos:line="85" pos:column="38"/></operator><name pos:line="85" pos:column="38">ptr<pos:position pos:line="85" pos:column="41"/></name><operator pos:line="85" pos:column="41">)<pos:position pos:line="85" pos:column="42"/></operator></expr> ?<pos:position pos:line="85" pos:column="44"/></condition><then pos:line="85" pos:column="44"> <expr><name pos:line="85" pos:column="45">TRUE<pos:position pos:line="85" pos:column="49"/></name></expr> <pos:position pos:line="85" pos:column="50"/></then><else pos:line="85" pos:column="50">: <expr><name pos:line="85" pos:column="52">FALSE<pos:position pos:line="85" pos:column="57"/></name></expr></else></ternary></expr>;<pos:position pos:line="85" pos:column="58"/></expr_stmt>
              }<pos:position pos:line="86" pos:column="16"/></block></then></if>
            }<pos:position pos:line="87" pos:column="14"/></block></then>
            <else pos:line="88" pos:column="13">else
              <block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="15">semicolon<pos:position pos:line="89" pos:column="24"/></name> <operator pos:line="89" pos:column="25">=<pos:position pos:line="89" pos:column="26"/></operator> <name pos:line="89" pos:column="27">FALSE<pos:position pos:line="89" pos:column="32"/></name></expr>;<pos:position pos:line="89" pos:column="33"/></expr_stmt></block></else></if>

            <if pos:line="91" pos:column="13">if<condition pos:line="91" pos:column="15">(<expr><operator pos:line="91" pos:column="16">*<pos:position pos:line="91" pos:column="17"/></operator><name pos:line="91" pos:column="17">sep<pos:position pos:line="91" pos:column="20"/></name></expr>)<pos:position pos:line="91" pos:column="21"/></condition><then pos:line="91" pos:column="21">
              <block type="pseudo"><expr_stmt><expr><operator pos:line="92" pos:column="15">*<pos:position pos:line="92" pos:column="16"/></operator><name pos:line="92" pos:column="16">sep<pos:position pos:line="92" pos:column="19"/></name> <operator pos:line="92" pos:column="20">=<pos:position pos:line="92" pos:column="21"/></operator> <literal type="char" pos:line="92" pos:column="22">'\0'<pos:position pos:line="92" pos:column="26"/></literal></expr>;<pos:position pos:line="92" pos:column="27"/></expr_stmt></block></then></if> <comment type="block" pos:line="92" pos:column="28">/* zero terminate type string */</comment>
          }<pos:position pos:line="93" pos:column="12"/></block></then>
          <elseif pos:line="94" pos:column="11">else <if pos:line="94" pos:column="16">if<condition pos:line="94" pos:column="18">(<expr><call><name pos:line="94" pos:column="19">checkprefix<pos:position pos:line="94" pos:column="30"/></name><argument_list pos:line="94" pos:column="30">(<argument><expr><literal type="string" pos:line="94" pos:column="31">"filename="<pos:position pos:line="94" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="44">ptr<pos:position pos:line="94" pos:column="47"/></name></expr></argument>)<pos:position pos:line="94" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="49"/></condition><then pos:line="94" pos:column="49"> <block pos:line="94" pos:column="50">{
            <expr_stmt><expr><name pos:line="95" pos:column="13">ptr<pos:position pos:line="95" pos:column="16"/></name> <operator pos:line="95" pos:column="17">+=<pos:position pos:line="95" pos:column="19"/></operator> <literal type="number" pos:line="95" pos:column="20">9<pos:position pos:line="95" pos:column="21"/></literal></expr>;<pos:position pos:line="95" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><name pos:line="96" pos:column="13">filename<pos:position pos:line="96" pos:column="21"/></name> <operator pos:line="96" pos:column="22">=<pos:position pos:line="96" pos:column="23"/></operator> <call><name pos:line="96" pos:column="24">get_param_word<pos:position pos:line="96" pos:column="38"/></name><argument_list pos:line="96" pos:column="38">(<argument><expr><operator pos:line="96" pos:column="39">&amp;<pos:position pos:line="96" pos:column="44"/></operator><name pos:line="96" pos:column="40">ptr<pos:position pos:line="96" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="45">&amp;<pos:position pos:line="96" pos:column="50"/></operator><name pos:line="96" pos:column="46">word_end<pos:position pos:line="96" pos:column="54"/></name></expr></argument>)<pos:position pos:line="96" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name pos:line="97" pos:column="13">semicolon<pos:position pos:line="97" pos:column="22"/></name> <operator pos:line="97" pos:column="23">=<pos:position pos:line="97" pos:column="24"/></operator> <ternary><condition><expr><operator pos:line="97" pos:column="25">(<pos:position pos:line="97" pos:column="26"/></operator><literal type="char" pos:line="97" pos:column="26">';'<pos:position pos:line="97" pos:column="29"/></literal> <operator pos:line="97" pos:column="30">==<pos:position pos:line="97" pos:column="32"/></operator> <operator pos:line="97" pos:column="33">*<pos:position pos:line="97" pos:column="34"/></operator><name pos:line="97" pos:column="34">ptr<pos:position pos:line="97" pos:column="37"/></name><operator pos:line="97" pos:column="37">)<pos:position pos:line="97" pos:column="38"/></operator></expr> ?<pos:position pos:line="97" pos:column="40"/></condition><then pos:line="97" pos:column="40"> <expr><name pos:line="97" pos:column="41">TRUE<pos:position pos:line="97" pos:column="45"/></name></expr> <pos:position pos:line="97" pos:column="46"/></then><else pos:line="97" pos:column="46">: <expr><name pos:line="97" pos:column="48">FALSE<pos:position pos:line="97" pos:column="53"/></name></expr></else></ternary></expr>;<pos:position pos:line="97" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="98" pos:column="13">*<pos:position pos:line="98" pos:column="14"/></operator><name pos:line="98" pos:column="14">word_end<pos:position pos:line="98" pos:column="22"/></name> <operator pos:line="98" pos:column="23">=<pos:position pos:line="98" pos:column="24"/></operator> <literal type="char" pos:line="98" pos:column="25">'\0'<pos:position pos:line="98" pos:column="29"/></literal></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="99" pos:column="12"/></block></then></if></elseif>
          <else pos:line="100" pos:column="11">else <block pos:line="100" pos:column="16">{
            <comment type="block" pos:line="101" pos:column="13">/* unknown prefix, skip to next block */</comment>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">char<pos:position pos:line="102" pos:column="17"/></name> <modifier pos:line="102" pos:column="18">*<pos:position pos:line="102" pos:column="19"/></modifier></type><name pos:line="102" pos:column="19">unknown<pos:position pos:line="102" pos:column="26"/></name> <init pos:line="102" pos:column="27">= <expr><name pos:line="102" pos:column="29">NULL<pos:position pos:line="102" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="102" pos:column="34"/></decl_stmt>
            <expr_stmt><expr><name pos:line="103" pos:column="13">unknown<pos:position pos:line="103" pos:column="20"/></name> <operator pos:line="103" pos:column="21">=<pos:position pos:line="103" pos:column="22"/></operator> <call><name pos:line="103" pos:column="23">get_param_word<pos:position pos:line="103" pos:column="37"/></name><argument_list pos:line="103" pos:column="37">(<argument><expr><operator pos:line="103" pos:column="38">&amp;<pos:position pos:line="103" pos:column="43"/></operator><name pos:line="103" pos:column="39">ptr<pos:position pos:line="103" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="103" pos:column="44">&amp;<pos:position pos:line="103" pos:column="49"/></operator><name pos:line="103" pos:column="45">word_end<pos:position pos:line="103" pos:column="53"/></name></expr></argument>)<pos:position pos:line="103" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><name pos:line="104" pos:column="13">semicolon<pos:position pos:line="104" pos:column="22"/></name> <operator pos:line="104" pos:column="23">=<pos:position pos:line="104" pos:column="24"/></operator> <ternary><condition><expr><operator pos:line="104" pos:column="25">(<pos:position pos:line="104" pos:column="26"/></operator><literal type="char" pos:line="104" pos:column="26">';'<pos:position pos:line="104" pos:column="29"/></literal> <operator pos:line="104" pos:column="30">==<pos:position pos:line="104" pos:column="32"/></operator> <operator pos:line="104" pos:column="33">*<pos:position pos:line="104" pos:column="34"/></operator><name pos:line="104" pos:column="34">ptr<pos:position pos:line="104" pos:column="37"/></name><operator pos:line="104" pos:column="37">)<pos:position pos:line="104" pos:column="38"/></operator></expr> ?<pos:position pos:line="104" pos:column="40"/></condition><then pos:line="104" pos:column="40"> <expr><name pos:line="104" pos:column="41">TRUE<pos:position pos:line="104" pos:column="45"/></name></expr> <pos:position pos:line="104" pos:column="46"/></then><else pos:line="104" pos:column="46">: <expr><name pos:line="104" pos:column="48">FALSE<pos:position pos:line="104" pos:column="53"/></name></expr></else></ternary></expr>;<pos:position pos:line="104" pos:column="54"/></expr_stmt>
            <if pos:line="105" pos:column="13">if<condition pos:line="105" pos:column="15">(<expr><operator pos:line="105" pos:column="16">*<pos:position pos:line="105" pos:column="17"/></operator><name pos:line="105" pos:column="17">unknown<pos:position pos:line="105" pos:column="24"/></name></expr>)<pos:position pos:line="105" pos:column="25"/></condition><then pos:line="105" pos:column="25"> <block pos:line="105" pos:column="26">{
              <expr_stmt><expr><operator pos:line="106" pos:column="15">*<pos:position pos:line="106" pos:column="16"/></operator><name pos:line="106" pos:column="16">word_end<pos:position pos:line="106" pos:column="24"/></name> <operator pos:line="106" pos:column="25">=<pos:position pos:line="106" pos:column="26"/></operator> <literal type="char" pos:line="106" pos:column="27">'\0'<pos:position pos:line="106" pos:column="31"/></literal></expr>;<pos:position pos:line="106" pos:column="32"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="107" pos:column="15">warnf<pos:position pos:line="107" pos:column="20"/></name><argument_list pos:line="107" pos:column="20">(<argument><expr><name pos:line="107" pos:column="21">config<pos:position pos:line="107" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="29">"skip unknown form field: %s\n"<pos:position pos:line="107" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="62">unknown<pos:position pos:line="107" pos:column="69"/></name></expr></argument>)<pos:position pos:line="107" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="71"/></expr_stmt>
            }<pos:position pos:line="108" pos:column="14"/></block></then></if>
          }<pos:position pos:line="109" pos:column="12"/></block></else></if>
        }<pos:position pos:line="110" pos:column="10"/></block></while>
        <comment type="block" pos:line="111" pos:column="9">/* now ptr point to comma or string end */</comment>


        <comment type="block" pos:line="114" pos:column="9">/* if type == NULL curl_formadd takes care of the problem */</comment>

        <if pos:line="116" pos:column="9">if<condition pos:line="116" pos:column="11">(<expr><operator pos:line="116" pos:column="12">*<pos:position pos:line="116" pos:column="13"/></operator><name pos:line="116" pos:column="13">contp<pos:position pos:line="116" pos:column="18"/></name> <operator pos:line="116" pos:column="19">&amp;&amp;<pos:position pos:line="116" pos:column="29"/></operator> <operator pos:line="116" pos:column="22">!<pos:position pos:line="116" pos:column="23"/></operator><call><name pos:line="116" pos:column="23">AddMultiFiles<pos:position pos:line="116" pos:column="36"/></name><argument_list pos:line="116" pos:column="36">(<argument><expr><name pos:line="116" pos:column="37">contp<pos:position pos:line="116" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="44">type<pos:position pos:line="116" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="50">filename<pos:position pos:line="116" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="116" pos:column="60">&amp;<pos:position pos:line="116" pos:column="65"/></operator><name pos:line="116" pos:column="61">multi_start<pos:position pos:line="116" pos:column="72"/></name></expr></argument>,
                          <argument><expr><operator pos:line="117" pos:column="27">&amp;<pos:position pos:line="117" pos:column="32"/></operator><name pos:line="117" pos:column="28">multi_current<pos:position pos:line="117" pos:column="41"/></name></expr></argument>)<pos:position pos:line="117" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="43"/></condition><then pos:line="117" pos:column="43"> <block pos:line="117" pos:column="44">{
          <expr_stmt><expr><call><name pos:line="118" pos:column="11">warnf<pos:position pos:line="118" pos:column="16"/></name><argument_list pos:line="118" pos:column="16">(<argument><expr><name pos:line="118" pos:column="17">config<pos:position pos:line="118" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="25">"Error building form post!\n"<pos:position pos:line="118" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="56"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="119" pos:column="11">Curl_safefree<pos:position pos:line="119" pos:column="24"/></name><argument_list pos:line="119" pos:column="24">(<argument><expr><name pos:line="119" pos:column="25">contents<pos:position pos:line="119" pos:column="33"/></name></expr></argument>)<pos:position pos:line="119" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="120" pos:column="11">FreeMultiInfo<pos:position pos:line="120" pos:column="24"/></name><argument_list pos:line="120" pos:column="24">(<argument><expr><operator pos:line="120" pos:column="25">&amp;<pos:position pos:line="120" pos:column="30"/></operator><name pos:line="120" pos:column="26">multi_start<pos:position pos:line="120" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="39">&amp;<pos:position pos:line="120" pos:column="44"/></operator><name pos:line="120" pos:column="40">multi_current<pos:position pos:line="120" pos:column="53"/></name></expr></argument>)<pos:position pos:line="120" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="55"/></expr_stmt>
          <return pos:line="121" pos:column="11">return <expr><literal type="number" pos:line="121" pos:column="18">3<pos:position pos:line="121" pos:column="19"/></literal></expr>;<pos:position pos:line="121" pos:column="20"/></return>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if></block></do></block></then></if></block></then></if></block></function>

        <comment type="block" pos:line="124" pos:column="9">/* *ptr could be '\0', so we just check with the string</comment></unit>
