<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1226_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ssh_done<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">CURLcode<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">status<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">CURLE_OK<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SSHPROTO<pos:position pos:line="4" pos:column="18"/></name></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">sftp_scp<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><name><name pos:line="4" pos:column="31">conn<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">-&gt;<pos:position pos:line="4" pos:column="40"/></operator><name pos:line="4" pos:column="37">data<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">req<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">.<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="47">protop<pos:position pos:line="4" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>

  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><operator pos:line="6" pos:column="6">!<pos:position pos:line="6" pos:column="7"/></operator><name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></expr>)<pos:position pos:line="6" pos:column="14"/></condition><then pos:line="6" pos:column="14"> <block pos:line="6" pos:column="15">{
    <comment type="block" pos:line="7" pos:column="5">/* run the state-machine

       TODO: when the multi interface is used, this _really_ should be using
       the ssh_multi_statemach function but we have no general support for
       non-blocking DONE operations!
    */</comment>
    <expr_stmt><expr><name pos:line="13" pos:column="5">result<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">ssh_block_statemach<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">conn<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">FALSE<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></then>
  <else pos:line="15" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="5">result<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <name pos:line="16" pos:column="14">status<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt></block></else></if>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">sftp_scp<pos:position pos:line="18" pos:column="14"/></name></expr>)<pos:position pos:line="18" pos:column="15"/></condition><then pos:line="18" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="5">Curl_safefree<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name><name pos:line="19" pos:column="19">sftp_scp<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">path<pos:position pos:line="19" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt></block></then></if>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><call><name pos:line="20" pos:column="6">Curl_pgrsDone<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">conn<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26">
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="21" pos:column="37"/></name></expr>;<pos:position pos:line="21" pos:column="38"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="23" pos:column="3">conn<pos:position pos:line="23" pos:column="7"/></name><operator pos:line="23" pos:column="7">-&gt;<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="9">data<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">req<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">.<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">keepon<pos:position pos:line="23" pos:column="25"/></name></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="28">0<pos:position pos:line="23" pos:column="29"/></literal></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt> <comment type="block" pos:line="23" pos:column="31">/* clear all bits */</comment>
  <return pos:line="24" pos:column="3">return <expr><name pos:line="24" pos:column="10">result<pos:position pos:line="24" pos:column="16"/></name></expr>;<pos:position pos:line="24" pos:column="17"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
