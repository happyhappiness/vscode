<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_775_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">curl_socket_t<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">fuzz_open_socket<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">void<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">ptr<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">curlsocktype<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">purpose<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>,
                                      <parameter><decl><type><name><name pos:line="3" pos:column="39">struct<pos:position pos:line="3" pos:column="45"/></name> <name pos:line="3" pos:column="46">curl_sockaddr<pos:position pos:line="3" pos:column="59"/></name></name> <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier></type><name pos:line="3" pos:column="61">address<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="69"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">FUZZ_DATA<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">fuzz<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><operator pos:line="5" pos:column="21">(<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">FUZZ_DATA<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></operator><operator pos:line="5" pos:column="33">)<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="34">ptr<pos:position pos:line="5" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name><name pos:line="6" pos:column="7">fds<pos:position pos:line="6" pos:column="10"/></name><index pos:line="6" pos:column="10">[<expr><literal type="number" pos:line="6" pos:column="11">2<pos:position pos:line="6" pos:column="12"/></literal></expr>]<pos:position pos:line="6" pos:column="13"/></index></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">curl_socket_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">server_fd<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socket_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">client_fd<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* Handle unused parameters */</comment>
  <expr_stmt><expr><operator pos:line="11" pos:column="3">(<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">void<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">)<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">purpose<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="12" pos:column="3">(<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">void<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">)<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">address<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><call><name pos:line="14" pos:column="6">socketpair<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">AF_UNIX<pos:position pos:line="14" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="26">SOCK_STREAM<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="39">0<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">fds<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="47"/></condition><then pos:line="14" pos:column="47"> <block pos:line="14" pos:column="48">{
    <comment type="block" pos:line="15" pos:column="5">/* Failed to create a pair of sockets. */</comment>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="19" pos:column="3">server_fd<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <name><name pos:line="19" pos:column="15">fds<pos:position pos:line="19" pos:column="18"/></name><index pos:line="19" pos:column="18">[<expr><literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr>]<pos:position pos:line="19" pos:column="21"/></index></name></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">client_fd<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name><name pos:line="20" pos:column="15">fds<pos:position pos:line="20" pos:column="18"/></name><index pos:line="20" pos:column="18">[<expr><literal type="number" pos:line="20" pos:column="19">1<pos:position pos:line="20" pos:column="20"/></literal></expr>]<pos:position pos:line="20" pos:column="21"/></index></name></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* Try and write the response data to the server file descriptor so the
     client can read it. */</comment>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><call><name pos:line="24" pos:column="6">write<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">server_fd<pos:position pos:line="24" pos:column="21"/></name></expr></argument>,
           <argument><expr><name><name pos:line="25" pos:column="12">fuzz<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">rsp1_data<pos:position pos:line="25" pos:column="27"/></name></name></expr></argument>,
           <argument><expr><name><name pos:line="26" pos:column="12">fuzz<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">rsp1_data_len<pos:position pos:line="26" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call> <operator pos:line="26" pos:column="33">!=<pos:position pos:line="26" pos:column="35"/></operator> <operator pos:line="26" pos:column="36">(<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="37">ssize_t<pos:position pos:line="26" pos:column="44"/></name><operator pos:line="26" pos:column="44">)<pos:position pos:line="26" pos:column="45"/></operator><name><name pos:line="26" pos:column="45">fuzz<pos:position pos:line="26" pos:column="49"/></name><operator pos:line="26" pos:column="49">-&gt;<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="51">rsp1_data_len<pos:position pos:line="26" pos:column="64"/></name></name></expr>)<pos:position pos:line="26" pos:column="65"/></condition><then pos:line="26" pos:column="65"> <block pos:line="26" pos:column="66">{
    <comment type="block" pos:line="27" pos:column="5">/* Failed to write the data. */</comment>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><call><name pos:line="31" pos:column="6">shutdown<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">server_fd<pos:position pos:line="31" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="26">SHUT_WR<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <block pos:line="31" pos:column="36">{
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="32" pos:column="27"/></name></expr>;<pos:position pos:line="32" pos:column="28"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">client_fd<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
