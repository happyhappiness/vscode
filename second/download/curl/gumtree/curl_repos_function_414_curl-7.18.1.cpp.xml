<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_414_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">BOOL<pos:position pos:line="2" pos:column="5"/></name></type> <name pos:line="2" pos:column="6">init_thread_sync_data<pos:position pos:line="2" pos:column="27"/></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name><name pos:line="2" pos:column="28">struct<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">thread_data<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type> <name pos:line="2" pos:column="49">td<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
                           <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">char<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type> <name pos:line="3" pos:column="41">hostname<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>,
                           <parameter><decl><type><name><name pos:line="4" pos:column="28">struct<pos:position pos:line="4" pos:column="34"/></name> <name pos:line="4" pos:column="35">thread_sync_data<pos:position pos:line="4" pos:column="51"/></name></name> <modifier pos:line="4" pos:column="52">*<pos:position pos:line="4" pos:column="53"/></modifier></type> <name pos:line="4" pos:column="54">tsd<pos:position pos:line="4" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="58"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">HANDLE<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">curr_proc<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><call><name pos:line="6" pos:column="22">GetCurrentProcess<pos:position pos:line="6" pos:column="39"/></name><argument_list pos:line="6" pos:column="39">()<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">memset<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><name pos:line="8" pos:column="10">tsd<pos:position pos:line="8" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="15">0<pos:position pos:line="8" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="18">sizeof<argument_list pos:line="8" pos:column="24">(<argument><expr><operator pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">tsd<pos:position pos:line="8" pos:column="29"/></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">!<pos:position pos:line="9" pos:column="7"/></operator><call><name pos:line="9" pos:column="7">DuplicateHandle<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">curr_proc<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="34">td<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">-&gt;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="38">mutex_waiting<pos:position pos:line="9" pos:column="51"/></name></name></expr></argument>,
                       <argument><expr><name pos:line="10" pos:column="24">curr_proc<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator><name><name pos:line="10" pos:column="36">tsd<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">-&gt;<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="41">mutex_waiting<pos:position pos:line="10" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="56">0<pos:position pos:line="10" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="59">FALSE<pos:position pos:line="10" pos:column="64"/></name></expr></argument>,
                       <argument><expr><name pos:line="11" pos:column="24">DUPLICATE_SAME_ACCESS<pos:position pos:line="11" pos:column="45"/></name></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="47"/></condition><then pos:line="11" pos:column="47"> <block pos:line="11" pos:column="48">{
    <comment type="block" pos:line="12" pos:column="5">/* failed to duplicate the mutex, no point in continuing */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">destroy_thread_sync_data<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">tsd<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">FALSE<pos:position pos:line="14" pos:column="17"/></name></expr>;<pos:position pos:line="14" pos:column="18"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><call><name pos:line="16" pos:column="7">DuplicateHandle<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">curr_proc<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="34">td<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">mutex_terminate<pos:position pos:line="16" pos:column="53"/></name></name></expr></argument>,
                       <argument><expr><name pos:line="17" pos:column="24">curr_proc<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="35">&amp;<pos:position pos:line="17" pos:column="40"/></operator><name><name pos:line="17" pos:column="36">tsd<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">mutex_terminate<pos:position pos:line="17" pos:column="56"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="58">0<pos:position pos:line="17" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="61">FALSE<pos:position pos:line="17" pos:column="66"/></name></expr></argument>,
                       <argument><expr><name pos:line="18" pos:column="24">DUPLICATE_SAME_ACCESS<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="47"/></condition><then pos:line="18" pos:column="47"> <block pos:line="18" pos:column="48">{
    <comment type="block" pos:line="19" pos:column="5">/* failed to duplicate the mutex, no point in continuing */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">destroy_thread_sync_data<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">tsd<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">FALSE<pos:position pos:line="21" pos:column="17"/></name></expr>;<pos:position pos:line="21" pos:column="18"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><call><name pos:line="23" pos:column="7">DuplicateHandle<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">curr_proc<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="34">td<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">event_terminate<pos:position pos:line="23" pos:column="53"/></name></name></expr></argument>,
                       <argument><expr><name pos:line="24" pos:column="24">curr_proc<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="35">&amp;<pos:position pos:line="24" pos:column="40"/></operator><name><name pos:line="24" pos:column="36">tsd<pos:position pos:line="24" pos:column="39"/></name><operator pos:line="24" pos:column="39">-&gt;<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="41">event_terminate<pos:position pos:line="24" pos:column="56"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="58">0<pos:position pos:line="24" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="61">FALSE<pos:position pos:line="24" pos:column="66"/></name></expr></argument>,
                       <argument><expr><name pos:line="25" pos:column="24">DUPLICATE_SAME_ACCESS<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="47"/></condition><then pos:line="25" pos:column="47"> <block pos:line="25" pos:column="48">{
    <comment type="block" pos:line="26" pos:column="5">/* failed to duplicate the event, no point in continuing */</comment>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">destroy_thread_sync_data<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">tsd<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">FALSE<pos:position pos:line="28" pos:column="17"/></name></expr>;<pos:position pos:line="28" pos:column="18"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="30" pos:column="3">/* Copying hostname string because original can be destroyed by parent
   * thread during gethostbyname execution.
   */</comment>
  <expr_stmt><expr><name><name pos:line="33" pos:column="3">tsd<pos:position pos:line="33" pos:column="6"/></name><operator pos:line="33" pos:column="6">-&gt;<pos:position pos:line="33" pos:column="11"/></operator><name pos:line="33" pos:column="8">hostname<pos:position pos:line="33" pos:column="16"/></name></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <call><name pos:line="33" pos:column="19">strdup<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">hostname<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><operator pos:line="34" pos:column="6">!<pos:position pos:line="34" pos:column="7"/></operator><name><name pos:line="34" pos:column="7">tsd<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">hostname<pos:position pos:line="34" pos:column="20"/></name></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21"> <block pos:line="34" pos:column="22">{
    <comment type="block" pos:line="35" pos:column="5">/* Memory allocation failed */</comment>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">destroy_thread_sync_data<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">tsd<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="35"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><name pos:line="37" pos:column="12">FALSE<pos:position pos:line="37" pos:column="17"/></name></expr>;<pos:position pos:line="37" pos:column="18"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>
  <return pos:line="39" pos:column="3">return <expr><name pos:line="39" pos:column="10">TRUE<pos:position pos:line="39" pos:column="14"/></name></expr>;<pos:position pos:line="39" pos:column="15"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
