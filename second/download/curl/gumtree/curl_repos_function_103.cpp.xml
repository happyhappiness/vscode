<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_103.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ParseNetrc<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">char<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">host<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>,
	       <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">login<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>,
	       <parameter><decl><type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">password<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">FILE<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">file<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">netrcbuffer<pos:position pos:line="6" pos:column="19"/></name><index pos:line="6" pos:column="19">[<expr><literal type="number" pos:line="6" pos:column="20">256<pos:position pos:line="6" pos:column="23"/></literal></expr>]<pos:position pos:line="6" pos:column="24"/></index></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">retcode<pos:position pos:line="7" pos:column="14"/></name><init pos:line="7" pos:column="14">=<expr><literal type="number" pos:line="7" pos:column="15">1<pos:position pos:line="7" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">home<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><call><name pos:line="9" pos:column="16">GetEnv<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><literal type="string" pos:line="9" pos:column="23">"HOME"<pos:position pos:line="9" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt> <comment type="block" pos:line="9" pos:column="32">/* portable environment reader */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">state<pos:position pos:line="10" pos:column="12"/></name><init pos:line="10" pos:column="12">=<expr><name pos:line="10" pos:column="13">NOTHING<pos:position pos:line="10" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">state_login<pos:position pos:line="12" pos:column="19"/></name><init pos:line="12" pos:column="19">=<expr><literal type="number" pos:line="12" pos:column="20">0<pos:position pos:line="12" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">state_password<pos:position pos:line="13" pos:column="22"/></name><init pos:line="13" pos:column="22">=<expr><literal type="number" pos:line="13" pos:column="23">0<pos:position pos:line="13" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>

<cpp:define pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">define<pos:position pos:line="15" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="15" pos:column="9">NETRC<pos:position pos:line="15" pos:column="14"/></name></cpp:macro> <cpp:value pos:line="15" pos:column="15">DOT_CHAR "netrc"<pos:position pos:line="15" pos:column="31"/></cpp:value></cpp:define>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">home<pos:position pos:line="17" pos:column="11"/></name></expr>)<pos:position pos:line="17" pos:column="12"/></condition><then pos:line="17" pos:column="12">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">-<pos:position pos:line="18" pos:column="13"/></operator><literal type="number" pos:line="18" pos:column="13">1<pos:position pos:line="18" pos:column="14"/></literal></expr>;<pos:position pos:line="18" pos:column="15"/></return></block></then></if>

  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><call><name pos:line="20" pos:column="6">strlen<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">home<pos:position pos:line="20" pos:column="17"/></name></expr></argument>)<pos:position pos:line="20" pos:column="18"/></argument_list></call><operator pos:line="20" pos:column="18">&gt;<pos:position pos:line="20" pos:column="22"/></operator><operator pos:line="20" pos:column="19">(<pos:position pos:line="20" pos:column="20"/></operator><sizeof pos:line="20" pos:column="20">sizeof<argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">netrcbuffer<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></sizeof><operator pos:line="20" pos:column="39">-<pos:position pos:line="20" pos:column="40"/></operator><call><name pos:line="20" pos:column="40">strlen<pos:position pos:line="20" pos:column="46"/></name><argument_list pos:line="20" pos:column="46">(<argument><expr><name pos:line="20" pos:column="47">NETRC<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call><operator pos:line="20" pos:column="53">)<pos:position pos:line="20" pos:column="54"/></operator></expr>)<pos:position pos:line="20" pos:column="55"/></condition><then pos:line="20" pos:column="55"> <block pos:line="20" pos:column="56">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">free<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><name pos:line="21" pos:column="10">home<pos:position pos:line="21" pos:column="14"/></name></expr></argument>)<pos:position pos:line="21" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">-<pos:position pos:line="22" pos:column="13"/></operator><literal type="number" pos:line="22" pos:column="13">1<pos:position pos:line="22" pos:column="14"/></literal></expr>;<pos:position pos:line="22" pos:column="15"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="25" pos:column="3">sprintf<pos:position pos:line="25" pos:column="10"/></name><argument_list pos:line="25" pos:column="10">(<argument><expr><name pos:line="25" pos:column="11">netrcbuffer<pos:position pos:line="25" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="24">"%s%s%s"<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">home<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">DIR_CHAR<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="50">NETRC<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt>

  <expr_stmt><expr><name pos:line="27" pos:column="3">file<pos:position pos:line="27" pos:column="7"/></name> <operator pos:line="27" pos:column="8">=<pos:position pos:line="27" pos:column="9"/></operator> <call><name pos:line="27" pos:column="10">fopen<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">netrcbuffer<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="29">"r"<pos:position pos:line="27" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><name pos:line="28" pos:column="6">file<pos:position pos:line="28" pos:column="10"/></name></expr>)<pos:position pos:line="28" pos:column="11"/></condition><then pos:line="28" pos:column="11"> <block pos:line="28" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">char<pos:position pos:line="29" pos:column="9"/></name> <modifier pos:line="29" pos:column="10">*<pos:position pos:line="29" pos:column="11"/></modifier></type><name pos:line="29" pos:column="11">tok<pos:position pos:line="29" pos:column="14"/></name></decl>;<pos:position pos:line="29" pos:column="15"/></decl_stmt>
    <while pos:line="30" pos:column="5">while<condition pos:line="30" pos:column="10">(<expr><call><name pos:line="30" pos:column="11">fgets<pos:position pos:line="30" pos:column="16"/></name><argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">netrcbuffer<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="30">sizeof<argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">netrcbuffer<pos:position pos:line="30" pos:column="48"/></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="30" pos:column="51">file<pos:position pos:line="30" pos:column="55"/></name></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="57"/></condition> <block pos:line="30" pos:column="58">{
      <expr_stmt><expr><name pos:line="31" pos:column="7">tok<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator><call><name pos:line="31" pos:column="11">strtok<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">netrcbuffer<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="31">" \t\n"<pos:position pos:line="31" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>
      <while pos:line="32" pos:column="7">while<condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">tok<pos:position pos:line="32" pos:column="16"/></name></expr>)<pos:position pos:line="32" pos:column="17"/></condition> <block pos:line="32" pos:column="18">{
	<switch pos:line="33" pos:column="9">switch<condition pos:line="33" pos:column="15">(<expr><name pos:line="33" pos:column="16">state<pos:position pos:line="33" pos:column="21"/></name></expr>)<pos:position pos:line="33" pos:column="22"/></condition> <block pos:line="33" pos:column="23">{
	<case pos:line="34" pos:column="9">case <expr><name pos:line="34" pos:column="14">NOTHING<pos:position pos:line="34" pos:column="21"/></name></expr>:<pos:position pos:line="34" pos:column="22"/></case>
	  <if pos:line="35" pos:column="11">if<condition pos:line="35" pos:column="13">(<expr><call><name pos:line="35" pos:column="14">strequal<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">(<argument><expr><literal type="string" pos:line="35" pos:column="23">"machine"<pos:position pos:line="35" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="34">tok<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="39"/></condition><then pos:line="35" pos:column="39"> <block pos:line="35" pos:column="40">{
	    <comment type="block" pos:line="36" pos:column="13">/* the next tok is the machine name, this is in itself the
	       delimiter that starts the stuff entered for this machine,
	       after this we need to search for 'login' and
	       'password'. */</comment>
	    <expr_stmt><expr><name pos:line="40" pos:column="13">state<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">=<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">HOSTFOUND<pos:position pos:line="40" pos:column="28"/></name></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
	  }<pos:position pos:line="41" pos:column="12"/></block></then></if>
	  <break pos:line="42" pos:column="11">break;<pos:position pos:line="42" pos:column="17"/></break>
	<case pos:line="43" pos:column="9">case <expr><name pos:line="43" pos:column="14">HOSTFOUND<pos:position pos:line="43" pos:column="23"/></name></expr>:<pos:position pos:line="43" pos:column="24"/></case>
	  <if pos:line="44" pos:column="11">if<condition pos:line="44" pos:column="13">(<expr><call><name pos:line="44" pos:column="14">strequal<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><name pos:line="44" pos:column="23">host<pos:position pos:line="44" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="29">tok<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34"> <block pos:line="44" pos:column="35">{
	    <comment type="block" pos:line="45" pos:column="13">/* and yes, this is our host! */</comment>
	    <expr_stmt><expr><name pos:line="46" pos:column="13">state<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">HOSTVALID<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">_NETRC_DEBUG<pos:position pos:line="47" pos:column="20"/></name></cpp:ifdef>
	    <expr_stmt><expr><call><name pos:line="48" pos:column="13">printf<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><literal type="string" pos:line="48" pos:column="20">"HOST: %s\n"<pos:position pos:line="48" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="34">tok<pos:position pos:line="48" pos:column="37"/></name></expr></argument>)<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>
	    <expr_stmt><expr><name pos:line="50" pos:column="13">retcode<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator><literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt> <comment type="block" pos:line="50" pos:column="24">/* we did find our host */</comment>
	  }<pos:position pos:line="51" pos:column="12"/></block></then>
	  <else pos:line="52" pos:column="11">else
	    <comment type="block" pos:line="53" pos:column="13">/* not our host */</comment>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="13">state<pos:position pos:line="54" pos:column="18"/></name><operator pos:line="54" pos:column="18">=<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="19">NOTHING<pos:position pos:line="54" pos:column="26"/></name></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt></block></else></if>
	  <break pos:line="55" pos:column="11">break;<pos:position pos:line="55" pos:column="17"/></break>
	<case pos:line="56" pos:column="9">case <expr><name pos:line="56" pos:column="14">HOSTVALID<pos:position pos:line="56" pos:column="23"/></name></expr>:<pos:position pos:line="56" pos:column="24"/></case>
	  <comment type="block" pos:line="57" pos:column="11">/* we are now parsing sub-keywords concerning "our" host */</comment>
	  <if pos:line="58" pos:column="11">if<condition pos:line="58" pos:column="13">(<expr><name pos:line="58" pos:column="14">state_login<pos:position pos:line="58" pos:column="25"/></name></expr>)<pos:position pos:line="58" pos:column="26"/></condition><then pos:line="58" pos:column="26"> <block pos:line="58" pos:column="27">{
	    <expr_stmt><expr><call><name pos:line="59" pos:column="13">strncpy<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">login<pos:position pos:line="59" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="28">tok<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="33">LOGINSIZE<pos:position pos:line="59" pos:column="42"/></name><operator pos:line="59" pos:column="42">-<pos:position pos:line="59" pos:column="43"/></operator><literal type="number" pos:line="59" pos:column="43">1<pos:position pos:line="59" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="46"/></expr_stmt>
<cpp:ifdef pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">ifdef<pos:position pos:line="60" pos:column="7"/></cpp:directive> <name pos:line="60" pos:column="8">_NETRC_DEBUG<pos:position pos:line="60" pos:column="20"/></name></cpp:ifdef>
	    <expr_stmt><expr><call><name pos:line="61" pos:column="13">printf<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><literal type="string" pos:line="61" pos:column="20">"LOGIN: %s\n"<pos:position pos:line="61" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="35">login<pos:position pos:line="61" pos:column="40"/></name></expr></argument>)<pos:position pos:line="61" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>
	    <expr_stmt><expr><name pos:line="63" pos:column="13">state_login<pos:position pos:line="63" pos:column="24"/></name><operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator><literal type="number" pos:line="63" pos:column="25">0<pos:position pos:line="63" pos:column="26"/></literal></expr>;<pos:position pos:line="63" pos:column="27"/></expr_stmt>
	  }<pos:position pos:line="64" pos:column="12"/></block></then>
	  <elseif pos:line="65" pos:column="11">else <if pos:line="65" pos:column="16">if<condition pos:line="65" pos:column="18">(<expr><name pos:line="65" pos:column="19">state_password<pos:position pos:line="65" pos:column="33"/></name></expr>)<pos:position pos:line="65" pos:column="34"/></condition><then pos:line="65" pos:column="34"> <block pos:line="65" pos:column="35">{
	    <expr_stmt><expr><call><name pos:line="66" pos:column="13">strncpy<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">(<argument><expr><name pos:line="66" pos:column="21">password<pos:position pos:line="66" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="31">tok<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="36">PASSWORDSIZE<pos:position pos:line="66" pos:column="48"/></name><operator pos:line="66" pos:column="48">-<pos:position pos:line="66" pos:column="49"/></operator><literal type="number" pos:line="66" pos:column="49">1<pos:position pos:line="66" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
<cpp:if pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">if<pos:position pos:line="67" pos:column="4"/></cpp:directive> <expr><name pos:line="67" pos:column="5">_NETRC_DEBUG<pos:position pos:line="67" pos:column="17"/></name></expr></cpp:if>
	    <expr_stmt><expr><call><name pos:line="68" pos:column="13">printf<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">(<argument><expr><literal type="string" pos:line="68" pos:column="20">"PASSWORD: %s\n"<pos:position pos:line="68" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="38">password<pos:position pos:line="68" pos:column="46"/></name></expr></argument>)<pos:position pos:line="68" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
	    <expr_stmt><expr><name pos:line="70" pos:column="13">state_password<pos:position pos:line="70" pos:column="27"/></name><operator pos:line="70" pos:column="27">=<pos:position pos:line="70" pos:column="28"/></operator><literal type="number" pos:line="70" pos:column="28">0<pos:position pos:line="70" pos:column="29"/></literal></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt>
	  }<pos:position pos:line="71" pos:column="12"/></block></then></if></elseif>
	  <elseif pos:line="72" pos:column="11">else <if pos:line="72" pos:column="16">if<condition pos:line="72" pos:column="18">(<expr><call><name pos:line="72" pos:column="19">strequal<pos:position pos:line="72" pos:column="27"/></name><argument_list pos:line="72" pos:column="27">(<argument><expr><literal type="string" pos:line="72" pos:column="28">"login"<pos:position pos:line="72" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="37">tok<pos:position pos:line="72" pos:column="40"/></name></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="42"/></condition><then pos:line="72" pos:column="42">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="13">state_login<pos:position pos:line="73" pos:column="24"/></name><operator pos:line="73" pos:column="24">=<pos:position pos:line="73" pos:column="25"/></operator><literal type="number" pos:line="73" pos:column="25">1<pos:position pos:line="73" pos:column="26"/></literal></expr>;<pos:position pos:line="73" pos:column="27"/></expr_stmt></block></then></if></elseif>
	  <elseif pos:line="74" pos:column="11">else <if pos:line="74" pos:column="16">if<condition pos:line="74" pos:column="18">(<expr><call><name pos:line="74" pos:column="19">strequal<pos:position pos:line="74" pos:column="27"/></name><argument_list pos:line="74" pos:column="27">(<argument><expr><literal type="string" pos:line="74" pos:column="28">"password"<pos:position pos:line="74" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="40">tok<pos:position pos:line="74" pos:column="43"/></name></expr></argument>)<pos:position pos:line="74" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="45"/></condition><then pos:line="74" pos:column="45">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="75" pos:column="13">state_password<pos:position pos:line="75" pos:column="27"/></name><operator pos:line="75" pos:column="27">=<pos:position pos:line="75" pos:column="28"/></operator><literal type="number" pos:line="75" pos:column="28">1<pos:position pos:line="75" pos:column="29"/></literal></expr>;<pos:position pos:line="75" pos:column="30"/></expr_stmt></block></then></if></elseif>
	  <elseif pos:line="76" pos:column="11">else <if pos:line="76" pos:column="16">if<condition pos:line="76" pos:column="18">(<expr><call><name pos:line="76" pos:column="19">strequal<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><literal type="string" pos:line="76" pos:column="28">"machine"<pos:position pos:line="76" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="39">tok<pos:position pos:line="76" pos:column="42"/></name></expr></argument>)<pos:position pos:line="76" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="44"/></condition><then pos:line="76" pos:column="44"> <block pos:line="76" pos:column="45">{
	    <comment type="block" pos:line="77" pos:column="13">/* ok, there's machine here go =&gt; */</comment>
	    <expr_stmt><expr><name pos:line="78" pos:column="13">state<pos:position pos:line="78" pos:column="18"/></name> <operator pos:line="78" pos:column="19">=<pos:position pos:line="78" pos:column="20"/></operator> <name pos:line="78" pos:column="21">HOSTFOUND<pos:position pos:line="78" pos:column="30"/></name></expr>;<pos:position pos:line="78" pos:column="31"/></expr_stmt>
	  }<pos:position pos:line="79" pos:column="12"/></block></then></if></elseif></if>
	  <break pos:line="80" pos:column="11">break;<pos:position pos:line="80" pos:column="17"/></break>
	}<pos:position pos:line="81" pos:column="10"/></block></switch> <comment type="block" pos:line="81" pos:column="11">/* switch (state) */</comment>
	<expr_stmt><expr><name pos:line="82" pos:column="9">tok<pos:position pos:line="82" pos:column="12"/></name> <operator pos:line="82" pos:column="13">=<pos:position pos:line="82" pos:column="14"/></operator> <call><name pos:line="82" pos:column="15">strtok<pos:position pos:line="82" pos:column="21"/></name><argument_list pos:line="82" pos:column="21">(<argument><expr><name pos:line="82" pos:column="22">NULL<pos:position pos:line="82" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="28">" \t\n"<pos:position pos:line="82" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="83" pos:column="8"/></block></while> <comment type="block" pos:line="83" pos:column="9">/* while (tok) */</comment>
    }<pos:position pos:line="84" pos:column="6"/></block></while> <comment type="block" pos:line="84" pos:column="7">/* while fgets() */</comment>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">fclose<pos:position pos:line="86" pos:column="11"/></name><argument_list pos:line="86" pos:column="11">(<argument><expr><name pos:line="86" pos:column="12">file<pos:position pos:line="86" pos:column="16"/></name></expr></argument>)<pos:position pos:line="86" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="87" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="89" pos:column="3">free<pos:position pos:line="89" pos:column="7"/></name><argument_list pos:line="89" pos:column="7">(<argument><expr><name pos:line="89" pos:column="8">home<pos:position pos:line="89" pos:column="12"/></name></expr></argument>)<pos:position pos:line="89" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="14"/></expr_stmt>

  <return pos:line="91" pos:column="3">return <expr><name pos:line="91" pos:column="10">retcode<pos:position pos:line="91" pos:column="17"/></name></expr>;<pos:position pos:line="91" pos:column="18"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
