<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_268_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">pthread_t<pos:position pos:line="3" pos:column="12"/></name></type> <name><name pos:line="3" pos:column="13">tid<pos:position pos:line="3" pos:column="16"/></name><index pos:line="3" pos:column="16">[<expr><name pos:line="3" pos:column="17">NUMT<pos:position pos:line="3" pos:column="21"/></name></expr>]<pos:position pos:line="3" pos:column="22"/></index></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">i<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">error<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="6" pos:column="3">(<pos:position pos:line="6" pos:column="4"/></operator><name pos:line="6" pos:column="4">void<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">)<pos:position pos:line="6" pos:column="9"/></operator><name pos:line="6" pos:column="9">argc<pos:position pos:line="6" pos:column="13"/></name></expr>;<pos:position pos:line="6" pos:column="14"/></expr_stmt> <comment type="block" pos:line="6" pos:column="15">/* we don't use any arguments in this example */</comment>
  <expr_stmt><expr><operator pos:line="7" pos:column="3">(<pos:position pos:line="7" pos:column="4"/></operator><name pos:line="7" pos:column="4">void<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">)<pos:position pos:line="7" pos:column="9"/></operator><name pos:line="7" pos:column="9">argv<pos:position pos:line="7" pos:column="13"/></name></expr>;<pos:position pos:line="7" pos:column="14"/></expr_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Must initialize libcurl before any threads are started */</comment>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">curl_global_init<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">CURL_GLOBAL_ALL<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">init_locks<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">()<pos:position pos:line="12" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="16"/></expr_stmt>

  <for pos:line="14" pos:column="3">for<control pos:line="14" pos:column="6">(<init><expr><name pos:line="14" pos:column="7">i<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <literal type="number" pos:line="14" pos:column="11">0<pos:position pos:line="14" pos:column="12"/></literal></expr>;<pos:position pos:line="14" pos:column="13"/></init> <condition><expr><name pos:line="14" pos:column="14">i<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">&lt;<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="17">NUMT<pos:position pos:line="14" pos:column="21"/></name></expr>;<pos:position pos:line="14" pos:column="22"/></condition> <incr><expr><name pos:line="14" pos:column="23">i<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">++<pos:position pos:line="14" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="27"/></control> <block pos:line="14" pos:column="28">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">error<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <call><name pos:line="15" pos:column="13">pthread_create<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><operator pos:line="15" pos:column="28">&amp;<pos:position pos:line="15" pos:column="33"/></operator><name><name pos:line="15" pos:column="29">tid<pos:position pos:line="15" pos:column="32"/></name><index pos:line="15" pos:column="32">[<expr><name pos:line="15" pos:column="33">i<pos:position pos:line="15" pos:column="34"/></name></expr>]<pos:position pos:line="15" pos:column="35"/></index></name></expr></argument>,
                           <argument><expr><name pos:line="16" pos:column="28">NULL<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <comment type="block" pos:line="16" pos:column="34">/* default attributes please */</comment>
                           <argument><expr><name pos:line="17" pos:column="28">pull_one_url<pos:position pos:line="17" pos:column="40"/></name></expr></argument>,
                           <argument><expr><operator pos:line="18" pos:column="28">(<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">void<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">*<pos:position pos:line="18" pos:column="35"/></operator><operator pos:line="18" pos:column="35">)<pos:position pos:line="18" pos:column="36"/></operator><name><name pos:line="18" pos:column="36">urls<pos:position pos:line="18" pos:column="40"/></name><index pos:line="18" pos:column="40">[<expr><name pos:line="18" pos:column="41">i<pos:position pos:line="18" pos:column="42"/></name></expr>]<pos:position pos:line="18" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><literal type="number" pos:line="19" pos:column="8">0<pos:position pos:line="19" pos:column="9"/></literal> <operator pos:line="19" pos:column="10">!=<pos:position pos:line="19" pos:column="12"/></operator> <name pos:line="19" pos:column="13">error<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="7">fprintf<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">stderr<pos:position pos:line="20" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"Couldn't run thread number %d, errno %d\n"<pos:position pos:line="20" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="68">i<pos:position pos:line="20" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="71">error<pos:position pos:line="20" pos:column="76"/></name></expr></argument>)<pos:position pos:line="20" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="78"/></expr_stmt></block></then>
    <else pos:line="21" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="7">fprintf<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">stderr<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="23">"Thread %d, gets %s\n"<pos:position pos:line="22" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">i<pos:position pos:line="22" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="50">urls<pos:position pos:line="22" pos:column="54"/></name><index pos:line="22" pos:column="54">[<expr><name pos:line="22" pos:column="55">i<pos:position pos:line="22" pos:column="56"/></name></expr>]<pos:position pos:line="22" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt></block></else></if>
  }<pos:position pos:line="23" pos:column="4"/></block></for>

  <comment type="block" pos:line="25" pos:column="3">/* now wait for all threads to terminate */</comment>
  <for pos:line="26" pos:column="3">for<control pos:line="26" pos:column="6">(<init><expr><name pos:line="26" pos:column="7">i<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <literal type="number" pos:line="26" pos:column="11">0<pos:position pos:line="26" pos:column="12"/></literal></expr>;<pos:position pos:line="26" pos:column="13"/></init> <condition><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">&lt;<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="17">NUMT<pos:position pos:line="26" pos:column="21"/></name></expr>;<pos:position pos:line="26" pos:column="22"/></condition> <incr><expr><name pos:line="26" pos:column="23">i<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">++<pos:position pos:line="26" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="27"/></control> <block pos:line="26" pos:column="28">{
    <expr_stmt><expr><name pos:line="27" pos:column="5">error<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">pthread_join<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name><name pos:line="27" pos:column="26">tid<pos:position pos:line="27" pos:column="29"/></name><index pos:line="27" pos:column="29">[<expr><name pos:line="27" pos:column="30">i<pos:position pos:line="27" pos:column="31"/></name></expr>]<pos:position pos:line="27" pos:column="32"/></index></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">NULL<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">fprintf<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">stderr<pos:position pos:line="28" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="21">"Thread %d terminated\n"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">i<pos:position pos:line="28" pos:column="48"/></name></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="29" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="31" pos:column="3">kill_locks<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">()<pos:position pos:line="31" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>

  <return pos:line="33" pos:column="3">return <expr><literal type="number" pos:line="33" pos:column="10">0<pos:position pos:line="33" pos:column="11"/></literal></expr>;<pos:position pos:line="33" pos:column="12"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
