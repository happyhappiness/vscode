<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_119_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl_handle<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">MemoryStruct<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">chunk<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">chunk<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">.<pos:position pos:line="7" pos:column="9"/></operator><name pos:line="7" pos:column="9">memory<pos:position pos:line="7" pos:column="15"/></name></name><operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">NULL<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt> <comment type="block" pos:line="7" pos:column="22">/* we expect realloc(NULL, size) to work */</comment>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">chunk<pos:position pos:line="8" pos:column="8"/></name><operator pos:line="8" pos:column="8">.<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="9">size<pos:position pos:line="8" pos:column="13"/></name></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></expr_stmt>    <comment type="block" pos:line="8" pos:column="22">/* no data at this point */</comment>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">curl_global_init<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">CURL_GLOBAL_ALL<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* init the curl session */</comment>
  <expr_stmt><expr><name pos:line="13" pos:column="3">curl_handle<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">curl_easy_init<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">()<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* specify URL to get */</comment>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">curl_easy_setopt<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">curl_handle<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="33">CURLOPT_URL<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="46">"http://cool.haxx.se/"<pos:position pos:line="16" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* send all data to this function  */</comment>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">curl_easy_setopt<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">curl_handle<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="33">CURLOPT_WRITEFUNCTION<pos:position pos:line="19" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="56">WriteMemoryCallback<pos:position pos:line="19" pos:column="75"/></name></expr></argument>)<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="77"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* we pass our 'chunk' struct to the callback function */</comment>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">curl_easy_setopt<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">curl_handle<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">CURLOPT_WRITEDATA<pos:position pos:line="22" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="52">(<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="53">void<pos:position pos:line="22" pos:column="57"/></name> <operator pos:line="22" pos:column="58">*<pos:position pos:line="22" pos:column="59"/></operator><operator pos:line="22" pos:column="59">)<pos:position pos:line="22" pos:column="60"/></operator><operator pos:line="22" pos:column="60">&amp;<pos:position pos:line="22" pos:column="65"/></operator><name pos:line="22" pos:column="61">chunk<pos:position pos:line="22" pos:column="66"/></name></expr></argument>)<pos:position pos:line="22" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="68"/></expr_stmt>

  <comment type="block" pos:line="24" pos:column="3">/* some servers don't like requests that are made without a user-agent
     field, so we provide one */</comment>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">curl_easy_setopt<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">curl_handle<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="33">CURLOPT_USERAGENT<pos:position pos:line="26" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="52">"libcurl-agent/1.0"<pos:position pos:line="26" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="73"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* get it! */</comment>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">curl_easy_perform<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">curl_handle<pos:position pos:line="29" pos:column="32"/></name></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* cleanup curl stuff */</comment>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">curl_easy_cleanup<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">curl_handle<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="34" pos:column="3">/*
   * Now, our chunk.memory points to a memory block that is chunk.size
   * bytes big and contains the remote file.
   *
   * Do something nice with it!
   *
   * You should be aware of the fact that at this point we might have an
   * allocated data block, and nothing has yet deallocated that data. So when
   * you're done with it, you should free() it as a nice application.
   */</comment>

  <if pos:line="45" pos:column="3">if<condition pos:line="45" pos:column="5">(<expr><name><name pos:line="45" pos:column="6">chunk<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">.<pos:position pos:line="45" pos:column="12"/></operator><name pos:line="45" pos:column="12">memory<pos:position pos:line="45" pos:column="18"/></name></name></expr>)<pos:position pos:line="45" pos:column="19"/></condition><then pos:line="45" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="5">free<pos:position pos:line="46" pos:column="9"/></name><argument_list pos:line="46" pos:column="9">(<argument><expr><name><name pos:line="46" pos:column="10">chunk<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">.<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="16">memory<pos:position pos:line="46" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="24"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="48" pos:column="3">/* we're done with libcurl, so clean it up */</comment>
  <expr_stmt><expr><call><name pos:line="49" pos:column="3">curl_global_cleanup<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">()<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt>

  <return pos:line="51" pos:column="3">return <expr><literal type="number" pos:line="51" pos:column="10">0<pos:position pos:line="51" pos:column="11"/></literal></expr>;<pos:position pos:line="51" pos:column="12"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
