<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_521_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_output_ntlm<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">bool<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">proxy<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">domain<pos:position pos:line="4" pos:column="21"/></name><init pos:line="4" pos:column="21">=<expr><literal type="string" pos:line="4" pos:column="22">""<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt> <comment type="block" pos:line="4" pos:column="26">/* empty */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">host<pos:position pos:line="5" pos:column="12"/></name> <index pos:line="5" pos:column="13">[<expr><name pos:line="5" pos:column="14">HOSTNAME_MAX<pos:position pos:line="5" pos:column="26"/></name><operator pos:line="5" pos:column="26">+<pos:position pos:line="5" pos:column="27"/></operator> <literal type="number" pos:line="5" pos:column="28">1<pos:position pos:line="5" pos:column="29"/></literal></expr>]<pos:position pos:line="5" pos:column="30"/></index></name> <init pos:line="5" pos:column="31">= <expr><literal type="string" pos:line="5" pos:column="33">""<pos:position pos:line="5" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt> <comment type="block" pos:line="5" pos:column="37">/* empty */</comment>
<cpp:ifndef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifndef<pos:position pos:line="6" pos:column="8"/></cpp:directive> <name pos:line="6" pos:column="9">USE_WINDOWS_SSPI<pos:position pos:line="6" pos:column="25"/></name></cpp:ifndef>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">domlen<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><call><name pos:line="7" pos:column="19">strlen<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><name pos:line="7" pos:column="26">domain<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">hostlen<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><call><name pos:line="8" pos:column="20">strlen<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">host<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">hostoff<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt> <comment type="block" pos:line="9" pos:column="19">/* host name offset */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">domoff<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>  <comment type="block" pos:line="10" pos:column="19">/* domain name offset */</comment>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">size<pos:position pos:line="12" pos:column="14"/></name></decl>;<pos:position pos:line="12" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">base64<pos:position pos:line="13" pos:column="15"/></name><init pos:line="13" pos:column="15">=<expr><name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">unsigned<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">char<pos:position pos:line="14" pos:column="16"/></name></type> <name><name pos:line="14" pos:column="17">ntlmbuf<pos:position pos:line="14" pos:column="24"/></name><index pos:line="14" pos:column="24">[<expr><literal type="number" pos:line="14" pos:column="25">1024<pos:position pos:line="14" pos:column="29"/></literal></expr>]<pos:position pos:line="14" pos:column="30"/></index></name></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt> <comment type="block" pos:line="14" pos:column="32">/* enough, unless the user+host+domain is very
                                  long */</comment>

  <comment type="block" pos:line="17" pos:column="3">/* point to the address of the pointer that holds the string to sent to the
     server, which is for a plain host or for a HTTP proxy */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name> <modifier pos:line="19" pos:column="8">*<pos:position pos:line="19" pos:column="9"/></modifier><modifier pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></modifier></type><name pos:line="19" pos:column="10">allocuserpwd<pos:position pos:line="19" pos:column="22"/></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* point to the name and password for this */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">char<pos:position pos:line="22" pos:column="7"/></name> <modifier pos:line="22" pos:column="8">*<pos:position pos:line="22" pos:column="9"/></modifier></type><name pos:line="22" pos:column="9">userp<pos:position pos:line="22" pos:column="14"/></name></decl>;<pos:position pos:line="22" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">char<pos:position pos:line="23" pos:column="7"/></name> <modifier pos:line="23" pos:column="8">*<pos:position pos:line="23" pos:column="9"/></modifier></type><name pos:line="23" pos:column="9">passwdp<pos:position pos:line="23" pos:column="16"/></name></decl>;<pos:position pos:line="23" pos:column="17"/></decl_stmt>
  <comment type="block" pos:line="24" pos:column="3">/* point to the correct struct with this */</comment>
  <decl_stmt><decl><type><name><name pos:line="25" pos:column="3">struct<pos:position pos:line="25" pos:column="9"/></name> <name pos:line="25" pos:column="10">ntlmdata<pos:position pos:line="25" pos:column="18"/></name></name> <modifier pos:line="25" pos:column="19">*<pos:position pos:line="25" pos:column="20"/></modifier></type><name pos:line="25" pos:column="20">ntlm<pos:position pos:line="25" pos:column="24"/></name></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="26" pos:column="3">struct<pos:position pos:line="26" pos:column="9"/></name> <name pos:line="26" pos:column="10">auth<pos:position pos:line="26" pos:column="14"/></name></name> <modifier pos:line="26" pos:column="15">*<pos:position pos:line="26" pos:column="16"/></modifier></type><name pos:line="26" pos:column="16">authp<pos:position pos:line="26" pos:column="21"/></name></decl>;<pos:position pos:line="26" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">DEBUGASSERT<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">conn<pos:position pos:line="28" pos:column="19"/></name></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">DEBUGASSERT<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name><name pos:line="29" pos:column="15">conn<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">-&gt;<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="21">data<pos:position pos:line="29" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>

  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">proxy<pos:position pos:line="31" pos:column="11"/></name></expr>)<pos:position pos:line="31" pos:column="12"/></condition><then pos:line="31" pos:column="12"> <block pos:line="31" pos:column="13">{
    <expr_stmt><expr><name pos:line="32" pos:column="5">allocuserpwd<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <operator pos:line="32" pos:column="20">&amp;<pos:position pos:line="32" pos:column="25"/></operator><name><name pos:line="32" pos:column="21">conn<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">-&gt;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="27">allocptr<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">.<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="36">proxyuserpwd<pos:position pos:line="32" pos:column="48"/></name></name></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">userp<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <name><name pos:line="33" pos:column="13">conn<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">proxyuser<pos:position pos:line="33" pos:column="28"/></name></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">passwdp<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name><name pos:line="34" pos:column="15">conn<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">-&gt;<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="21">proxypasswd<pos:position pos:line="34" pos:column="32"/></name></name></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">ntlm<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <operator pos:line="35" pos:column="12">&amp;<pos:position pos:line="35" pos:column="17"/></operator><name><name pos:line="35" pos:column="13">conn<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">proxyntlm<pos:position pos:line="35" pos:column="28"/></name></name></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">authp<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">=<pos:position pos:line="36" pos:column="12"/></operator> <operator pos:line="36" pos:column="13">&amp;<pos:position pos:line="36" pos:column="18"/></operator><name><name pos:line="36" pos:column="14">conn<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">-&gt;<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="20">data<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">state<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">.<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">authproxy<pos:position pos:line="36" pos:column="41"/></name></name></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></then>
  <else pos:line="38" pos:column="3">else <block pos:line="38" pos:column="8">{
    <expr_stmt><expr><name pos:line="39" pos:column="5">allocuserpwd<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator> <operator pos:line="39" pos:column="20">&amp;<pos:position pos:line="39" pos:column="25"/></operator><name><name pos:line="39" pos:column="21">conn<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">-&gt;<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="27">allocptr<pos:position pos:line="39" pos:column="35"/></name><operator pos:line="39" pos:column="35">.<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="36">userpwd<pos:position pos:line="39" pos:column="43"/></name></name></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">userp<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <name><name pos:line="40" pos:column="13">conn<pos:position pos:line="40" pos:column="17"/></name><operator pos:line="40" pos:column="17">-&gt;<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="19">user<pos:position pos:line="40" pos:column="23"/></name></name></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="41" pos:column="5">passwdp<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <name><name pos:line="41" pos:column="15">conn<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">-&gt;<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="21">passwd<pos:position pos:line="41" pos:column="27"/></name></name></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">ntlm<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <operator pos:line="42" pos:column="12">&amp;<pos:position pos:line="42" pos:column="17"/></operator><name><name pos:line="42" pos:column="13">conn<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">-&gt;<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="19">ntlm<pos:position pos:line="42" pos:column="23"/></name></name></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="43" pos:column="5">authp<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <operator pos:line="43" pos:column="13">&amp;<pos:position pos:line="43" pos:column="18"/></operator><name><name pos:line="43" pos:column="14">conn<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">-&gt;<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="20">data<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">-&gt;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="26">state<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">.<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="32">authhost<pos:position pos:line="43" pos:column="40"/></name></name></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="45" pos:column="3">authp<pos:position pos:line="45" pos:column="8"/></name><operator pos:line="45" pos:column="8">-&gt;<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="10">done<pos:position pos:line="45" pos:column="14"/></name></name> <operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator> <name pos:line="45" pos:column="17">FALSE<pos:position pos:line="45" pos:column="22"/></name></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="47" pos:column="3">/* not set means empty */</comment>
  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><operator pos:line="48" pos:column="6">!<pos:position pos:line="48" pos:column="7"/></operator><name pos:line="48" pos:column="7">userp<pos:position pos:line="48" pos:column="12"/></name></expr>)<pos:position pos:line="48" pos:column="13"/></condition><then pos:line="48" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="5">userp<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator><operator pos:line="49" pos:column="11">(<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="12">char<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">*<pos:position pos:line="49" pos:column="18"/></operator><operator pos:line="49" pos:column="18">)<pos:position pos:line="49" pos:column="19"/></operator><literal type="string" pos:line="49" pos:column="19">""<pos:position pos:line="49" pos:column="21"/></literal></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt></block></then></if>

  <if pos:line="51" pos:column="3">if<condition pos:line="51" pos:column="5">(<expr><operator pos:line="51" pos:column="6">!<pos:position pos:line="51" pos:column="7"/></operator><name pos:line="51" pos:column="7">passwdp<pos:position pos:line="51" pos:column="14"/></name></expr>)<pos:position pos:line="51" pos:column="15"/></condition><then pos:line="51" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="5">passwdp<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator><operator pos:line="52" pos:column="13">(<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="14">char<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">*<pos:position pos:line="52" pos:column="20"/></operator><operator pos:line="52" pos:column="20">)<pos:position pos:line="52" pos:column="21"/></operator><literal type="string" pos:line="52" pos:column="21">""<pos:position pos:line="52" pos:column="23"/></literal></expr>;<pos:position pos:line="52" pos:column="24"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">ifdef<pos:position pos:line="54" pos:column="7"/></cpp:directive> <name pos:line="54" pos:column="8">USE_WINDOWS_SSPI<pos:position pos:line="54" pos:column="24"/></name></cpp:ifdef>
  <comment type="block" pos:line="55" pos:column="3">/* If security interface is not yet initialized try to do this */</comment>
  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><name pos:line="56" pos:column="6">s_hSecDll<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">==<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="19">NULL<pos:position pos:line="56" pos:column="23"/></name></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24"> <block pos:line="56" pos:column="25">{
    <comment type="block" pos:line="57" pos:column="5">/* Determine Windows version. Security functions are located in
     * security.dll on WinNT 4.0 and in secur32.dll on Win9x. Win2K and XP
     * contain both these DLLs (security.dll just forwards calls to
     * secur32.dll)
     */</comment>
    <decl_stmt><decl><type><name pos:line="62" pos:column="5">OSVERSIONINFO<pos:position pos:line="62" pos:column="18"/></name></type> <name pos:line="62" pos:column="19">osver<pos:position pos:line="62" pos:column="24"/></name></decl>;<pos:position pos:line="62" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="63" pos:column="5">osver<pos:position pos:line="63" pos:column="10"/></name><operator pos:line="63" pos:column="10">.<pos:position pos:line="63" pos:column="11"/></operator><name pos:line="63" pos:column="11">dwOSVersionInfoSize<pos:position pos:line="63" pos:column="30"/></name></name> <operator pos:line="63" pos:column="31">=<pos:position pos:line="63" pos:column="32"/></operator> <sizeof pos:line="63" pos:column="33">sizeof<argument_list pos:line="63" pos:column="39">(<argument><expr><name pos:line="63" pos:column="40">osver<pos:position pos:line="63" pos:column="45"/></name></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></sizeof></expr>;<pos:position pos:line="63" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">GetVersionEx<pos:position pos:line="64" pos:column="17"/></name><argument_list pos:line="64" pos:column="17">(<argument><expr><operator pos:line="64" pos:column="18">&amp;<pos:position pos:line="64" pos:column="23"/></operator><name pos:line="64" pos:column="19">osver<pos:position pos:line="64" pos:column="24"/></name></expr></argument>)<pos:position pos:line="64" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>
    <if pos:line="65" pos:column="5">if<condition pos:line="65" pos:column="7">(<expr><name><name pos:line="65" pos:column="8">osver<pos:position pos:line="65" pos:column="13"/></name><operator pos:line="65" pos:column="13">.<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">dwPlatformId<pos:position pos:line="65" pos:column="26"/></name></name> <operator pos:line="65" pos:column="27">==<pos:position pos:line="65" pos:column="29"/></operator> <name pos:line="65" pos:column="30">VER_PLATFORM_WIN32_NT<pos:position pos:line="65" pos:column="51"/></name>
      <operator pos:line="66" pos:column="7">&amp;&amp;<pos:position pos:line="66" pos:column="17"/></operator> <name><name pos:line="66" pos:column="10">osver<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">.<pos:position pos:line="66" pos:column="16"/></operator><name pos:line="66" pos:column="16">dwMajorVersion<pos:position pos:line="66" pos:column="30"/></name></name> <operator pos:line="66" pos:column="31">==<pos:position pos:line="66" pos:column="33"/></operator> <literal type="number" pos:line="66" pos:column="34">4<pos:position pos:line="66" pos:column="35"/></literal></expr>)<pos:position pos:line="66" pos:column="36"/></condition><then pos:line="66" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="7">s_hSecDll<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">=<pos:position pos:line="67" pos:column="18"/></operator> <call><name pos:line="67" pos:column="19">LoadLibrary<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">(<argument><expr><literal type="string" pos:line="67" pos:column="31">"security.dll"<pos:position pos:line="67" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt></block></then>
    <else pos:line="68" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="7">s_hSecDll<pos:position pos:line="69" pos:column="16"/></name> <operator pos:line="69" pos:column="17">=<pos:position pos:line="69" pos:column="18"/></operator> <call><name pos:line="69" pos:column="19">LoadLibrary<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><literal type="string" pos:line="69" pos:column="31">"secur32.dll"<pos:position pos:line="69" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="46"/></expr_stmt></block></else></if>
    <if pos:line="70" pos:column="5">if<condition pos:line="70" pos:column="7">(<expr><name pos:line="70" pos:column="8">s_hSecDll<pos:position pos:line="70" pos:column="17"/></name> <operator pos:line="70" pos:column="18">!=<pos:position pos:line="70" pos:column="20"/></operator> <name pos:line="70" pos:column="21">NULL<pos:position pos:line="70" pos:column="25"/></name></expr>)<pos:position pos:line="70" pos:column="26"/></condition><then pos:line="70" pos:column="26"> <block pos:line="70" pos:column="27">{
      <decl_stmt><decl><type><name pos:line="71" pos:column="7">INIT_SECURITY_INTERFACE<pos:position pos:line="71" pos:column="30"/></name></type> <name pos:line="71" pos:column="31">pInitSecurityInterface<pos:position pos:line="71" pos:column="53"/></name></decl>;<pos:position pos:line="71" pos:column="54"/></decl_stmt>
      <expr_stmt><expr><name pos:line="72" pos:column="7">pInitSecurityInterface<pos:position pos:line="72" pos:column="29"/></name> <operator pos:line="72" pos:column="30">=<pos:position pos:line="72" pos:column="31"/></operator>
        <operator pos:line="73" pos:column="9">(<pos:position pos:line="73" pos:column="10"/></operator><name pos:line="73" pos:column="10">INIT_SECURITY_INTERFACE<pos:position pos:line="73" pos:column="33"/></name><operator pos:line="73" pos:column="33">)<pos:position pos:line="73" pos:column="34"/></operator><call><name pos:line="73" pos:column="34">GetProcAddress<pos:position pos:line="73" pos:column="48"/></name><argument_list pos:line="73" pos:column="48">(<argument><expr><name pos:line="73" pos:column="49">s_hSecDll<pos:position pos:line="73" pos:column="58"/></name></expr></argument>,
                                                <argument><expr><literal type="string" pos:line="74" pos:column="49">"InitSecurityInterfaceA"<pos:position pos:line="74" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="75"/></expr_stmt>
      <if pos:line="75" pos:column="7">if<condition pos:line="75" pos:column="9">(<expr><name pos:line="75" pos:column="10">pInitSecurityInterface<pos:position pos:line="75" pos:column="32"/></name> <operator pos:line="75" pos:column="33">!=<pos:position pos:line="75" pos:column="35"/></operator> <name pos:line="75" pos:column="36">NULL<pos:position pos:line="75" pos:column="40"/></name></expr>)<pos:position pos:line="75" pos:column="41"/></condition><then pos:line="75" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name pos:line="76" pos:column="9">s_pSecFn<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <call><name pos:line="76" pos:column="20">pInitSecurityInterface<pos:position pos:line="76" pos:column="42"/></name><argument_list pos:line="76" pos:column="42">()<pos:position pos:line="76" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="45"/></expr_stmt></block></then></if>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>
  }<pos:position pos:line="78" pos:column="4"/></block></then></if>
  <if pos:line="79" pos:column="3">if<condition pos:line="79" pos:column="5">(<expr><name pos:line="79" pos:column="6">s_pSecFn<pos:position pos:line="79" pos:column="14"/></name> <operator pos:line="79" pos:column="15">==<pos:position pos:line="79" pos:column="17"/></operator> <name pos:line="79" pos:column="18">NULL<pos:position pos:line="79" pos:column="22"/></name></expr>)<pos:position pos:line="79" pos:column="23"/></condition><then pos:line="79" pos:column="23">
    <block type="pseudo"><return pos:line="80" pos:column="5">return <expr><name pos:line="80" pos:column="12">CURLE_RECV_ERROR<pos:position pos:line="80" pos:column="28"/></name></expr>;<pos:position pos:line="80" pos:column="29"/></return></block></then></if>
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif>

  <switch pos:line="83" pos:column="3">switch<condition pos:line="83" pos:column="9">(<expr><name><name pos:line="83" pos:column="10">ntlm<pos:position pos:line="83" pos:column="14"/></name><operator pos:line="83" pos:column="14">-&gt;<pos:position pos:line="83" pos:column="19"/></operator><name pos:line="83" pos:column="16">state<pos:position pos:line="83" pos:column="21"/></name></name></expr>)<pos:position pos:line="83" pos:column="22"/></condition> <block pos:line="83" pos:column="23">{
  <case pos:line="84" pos:column="3">case <expr><name pos:line="84" pos:column="8">NTLMSTATE_TYPE1<pos:position pos:line="84" pos:column="23"/></name></expr>:<pos:position pos:line="84" pos:column="24"/></case>
  <default pos:line="85" pos:column="3">default:<pos:position pos:line="85" pos:column="11"/></default> <comment type="block" pos:line="85" pos:column="12">/* for the weird cases we (re)start here */</comment>
<cpp:ifdef pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">ifdef<pos:position pos:line="86" pos:column="7"/></cpp:directive> <name pos:line="86" pos:column="8">USE_WINDOWS_SSPI<pos:position pos:line="86" pos:column="24"/></name></cpp:ifdef>
  <block pos:line="87" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="88" pos:column="5">SecBuffer<pos:position pos:line="88" pos:column="14"/></name></type> <name pos:line="88" pos:column="15">buf<pos:position pos:line="88" pos:column="18"/></name></decl>;<pos:position pos:line="88" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="89" pos:column="5">SecBufferDesc<pos:position pos:line="89" pos:column="18"/></name></type> <name pos:line="89" pos:column="19">desc<pos:position pos:line="89" pos:column="23"/></name></decl>;<pos:position pos:line="89" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="90" pos:column="5">SECURITY_STATUS<pos:position pos:line="90" pos:column="20"/></name></type> <name pos:line="90" pos:column="21">status<pos:position pos:line="90" pos:column="27"/></name></decl>;<pos:position pos:line="90" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="91" pos:column="5">ULONG<pos:position pos:line="91" pos:column="10"/></name></type> <name pos:line="91" pos:column="11">attrs<pos:position pos:line="91" pos:column="16"/></name></decl>;<pos:position pos:line="91" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="92" pos:column="5">const<pos:position pos:line="92" pos:column="10"/></specifier> <name pos:line="92" pos:column="11">char<pos:position pos:line="92" pos:column="15"/></name> <modifier pos:line="92" pos:column="16">*<pos:position pos:line="92" pos:column="17"/></modifier></type><name pos:line="92" pos:column="17">user<pos:position pos:line="92" pos:column="21"/></name></decl>;<pos:position pos:line="92" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="93" pos:column="5">int<pos:position pos:line="93" pos:column="8"/></name></type> <name pos:line="93" pos:column="9">domlen<pos:position pos:line="93" pos:column="15"/></name></decl>;<pos:position pos:line="93" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="94" pos:column="5">TimeStamp<pos:position pos:line="94" pos:column="14"/></name></type> <name pos:line="94" pos:column="15">tsDummy<pos:position pos:line="94" pos:column="22"/></name></decl>;<pos:position pos:line="94" pos:column="23"/></decl_stmt> <comment type="block" pos:line="94" pos:column="24">/* For Windows 9x compatibility of SPPI calls */</comment>

    <expr_stmt><expr><call><name pos:line="96" pos:column="5">ntlm_sspi_cleanup<pos:position pos:line="96" pos:column="22"/></name><argument_list pos:line="96" pos:column="22">(<argument><expr><name pos:line="96" pos:column="23">ntlm<pos:position pos:line="96" pos:column="27"/></name></expr></argument>)<pos:position pos:line="96" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><name pos:line="98" pos:column="5">user<pos:position pos:line="98" pos:column="9"/></name> <operator pos:line="98" pos:column="10">=<pos:position pos:line="98" pos:column="11"/></operator> <call><name pos:line="98" pos:column="12">strchr<pos:position pos:line="98" pos:column="18"/></name><argument_list pos:line="98" pos:column="18">(<argument><expr><name pos:line="98" pos:column="19">userp<pos:position pos:line="98" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="98" pos:column="26">'\\'<pos:position pos:line="98" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="32"/></expr_stmt>
    <if pos:line="99" pos:column="5">if<condition pos:line="99" pos:column="7">(<expr><operator pos:line="99" pos:column="8">!<pos:position pos:line="99" pos:column="9"/></operator><name pos:line="99" pos:column="9">user<pos:position pos:line="99" pos:column="13"/></name></expr>)<pos:position pos:line="99" pos:column="14"/></condition><then pos:line="99" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><name pos:line="100" pos:column="7">user<pos:position pos:line="100" pos:column="11"/></name> <operator pos:line="100" pos:column="12">=<pos:position pos:line="100" pos:column="13"/></operator> <call><name pos:line="100" pos:column="14">strchr<pos:position pos:line="100" pos:column="20"/></name><argument_list pos:line="100" pos:column="20">(<argument><expr><name pos:line="100" pos:column="21">userp<pos:position pos:line="100" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="100" pos:column="28">'/'<pos:position pos:line="100" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="33"/></expr_stmt></block></then></if>

    <if pos:line="102" pos:column="5">if<condition pos:line="102" pos:column="7">(<expr><name pos:line="102" pos:column="8">user<pos:position pos:line="102" pos:column="12"/></name></expr>)<pos:position pos:line="102" pos:column="13"/></condition><then pos:line="102" pos:column="13"> <block pos:line="102" pos:column="14">{
      <expr_stmt><expr><name pos:line="103" pos:column="7">domain<pos:position pos:line="103" pos:column="13"/></name> <operator pos:line="103" pos:column="14">=<pos:position pos:line="103" pos:column="15"/></operator> <name pos:line="103" pos:column="16">userp<pos:position pos:line="103" pos:column="21"/></name></expr>;<pos:position pos:line="103" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="104" pos:column="7">domlen<pos:position pos:line="104" pos:column="13"/></name> <operator pos:line="104" pos:column="14">=<pos:position pos:line="104" pos:column="15"/></operator> <name pos:line="104" pos:column="16">user<pos:position pos:line="104" pos:column="20"/></name> <operator pos:line="104" pos:column="21">-<pos:position pos:line="104" pos:column="22"/></operator> <name pos:line="104" pos:column="23">userp<pos:position pos:line="104" pos:column="28"/></name></expr>;<pos:position pos:line="104" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="105" pos:column="7">user<pos:position pos:line="105" pos:column="11"/></name><operator pos:line="105" pos:column="11">++<pos:position pos:line="105" pos:column="13"/></operator></expr>;<pos:position pos:line="105" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="106" pos:column="6"/></block></then>
    <else pos:line="107" pos:column="5">else <block pos:line="107" pos:column="10">{
      <expr_stmt><expr><name pos:line="108" pos:column="7">user<pos:position pos:line="108" pos:column="11"/></name> <operator pos:line="108" pos:column="12">=<pos:position pos:line="108" pos:column="13"/></operator> <name pos:line="108" pos:column="14">userp<pos:position pos:line="108" pos:column="19"/></name></expr>;<pos:position pos:line="108" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="109" pos:column="7">domain<pos:position pos:line="109" pos:column="13"/></name> <operator pos:line="109" pos:column="14">=<pos:position pos:line="109" pos:column="15"/></operator> <literal type="string" pos:line="109" pos:column="16">""<pos:position pos:line="109" pos:column="18"/></literal></expr>;<pos:position pos:line="109" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name pos:line="110" pos:column="7">domlen<pos:position pos:line="110" pos:column="13"/></name> <operator pos:line="110" pos:column="14">=<pos:position pos:line="110" pos:column="15"/></operator> <literal type="number" pos:line="110" pos:column="16">0<pos:position pos:line="110" pos:column="17"/></literal></expr>;<pos:position pos:line="110" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="111" pos:column="6"/></block></else></if>

    <if pos:line="113" pos:column="5">if<condition pos:line="113" pos:column="7">(<expr><name pos:line="113" pos:column="8">user<pos:position pos:line="113" pos:column="12"/></name> <operator pos:line="113" pos:column="13">&amp;&amp;<pos:position pos:line="113" pos:column="23"/></operator> <operator pos:line="113" pos:column="16">*<pos:position pos:line="113" pos:column="17"/></operator><name pos:line="113" pos:column="17">user<pos:position pos:line="113" pos:column="21"/></name></expr>)<pos:position pos:line="113" pos:column="22"/></condition><then pos:line="113" pos:column="22"> <block pos:line="113" pos:column="23">{
      <comment type="block" pos:line="114" pos:column="7">/* note: initialize all of this before doing the mallocs so that
       * it can be cleaned up later without leaking memory.
       */</comment>
      <expr_stmt><expr><name><name pos:line="117" pos:column="7">ntlm<pos:position pos:line="117" pos:column="11"/></name><operator pos:line="117" pos:column="11">-&gt;<pos:position pos:line="117" pos:column="16"/></operator><name pos:line="117" pos:column="13">p_identity<pos:position pos:line="117" pos:column="23"/></name></name> <operator pos:line="117" pos:column="24">=<pos:position pos:line="117" pos:column="25"/></operator> <operator pos:line="117" pos:column="26">&amp;<pos:position pos:line="117" pos:column="31"/></operator><name><name pos:line="117" pos:column="27">ntlm<pos:position pos:line="117" pos:column="31"/></name><operator pos:line="117" pos:column="31">-&gt;<pos:position pos:line="117" pos:column="36"/></operator><name pos:line="117" pos:column="33">identity<pos:position pos:line="117" pos:column="41"/></name></name></expr>;<pos:position pos:line="117" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="118" pos:column="7">memset<pos:position pos:line="118" pos:column="13"/></name><argument_list pos:line="118" pos:column="13">(<argument><expr><name><name pos:line="118" pos:column="14">ntlm<pos:position pos:line="118" pos:column="18"/></name><operator pos:line="118" pos:column="18">-&gt;<pos:position pos:line="118" pos:column="23"/></operator><name pos:line="118" pos:column="20">p_identity<pos:position pos:line="118" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="118" pos:column="32">0<pos:position pos:line="118" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="118" pos:column="35">sizeof<argument_list pos:line="118" pos:column="41">(<argument><expr><operator pos:line="118" pos:column="42">*<pos:position pos:line="118" pos:column="43"/></operator><name><name pos:line="118" pos:column="43">ntlm<pos:position pos:line="118" pos:column="47"/></name><operator pos:line="118" pos:column="47">-&gt;<pos:position pos:line="118" pos:column="52"/></operator><name pos:line="118" pos:column="49">p_identity<pos:position pos:line="118" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="118" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="118" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="62"/></expr_stmt>
      <if pos:line="119" pos:column="7">if<condition pos:line="119" pos:column="9">(<expr><operator pos:line="119" pos:column="10">(<pos:position pos:line="119" pos:column="11"/></operator><name><name pos:line="119" pos:column="11">ntlm<pos:position pos:line="119" pos:column="15"/></name><operator pos:line="119" pos:column="15">-&gt;<pos:position pos:line="119" pos:column="20"/></operator><name pos:line="119" pos:column="17">identity<pos:position pos:line="119" pos:column="25"/></name><operator pos:line="119" pos:column="25">.<pos:position pos:line="119" pos:column="26"/></operator><name pos:line="119" pos:column="26">User<pos:position pos:line="119" pos:column="30"/></name></name> <operator pos:line="119" pos:column="31">=<pos:position pos:line="119" pos:column="32"/></operator> <operator pos:line="119" pos:column="33">(<pos:position pos:line="119" pos:column="34"/></operator><name pos:line="119" pos:column="34">unsigned<pos:position pos:line="119" pos:column="42"/></name> <name pos:line="119" pos:column="43">char<pos:position pos:line="119" pos:column="47"/></name> <operator pos:line="119" pos:column="48">*<pos:position pos:line="119" pos:column="49"/></operator><operator pos:line="119" pos:column="49">)<pos:position pos:line="119" pos:column="50"/></operator><call><name pos:line="119" pos:column="50">strdup<pos:position pos:line="119" pos:column="56"/></name><argument_list pos:line="119" pos:column="56">(<argument><expr><name pos:line="119" pos:column="57">user<pos:position pos:line="119" pos:column="61"/></name></expr></argument>)<pos:position pos:line="119" pos:column="62"/></argument_list></call><operator pos:line="119" pos:column="62">)<pos:position pos:line="119" pos:column="63"/></operator> <operator pos:line="119" pos:column="64">==<pos:position pos:line="119" pos:column="66"/></operator> <name pos:line="119" pos:column="67">NULL<pos:position pos:line="119" pos:column="71"/></name></expr>)<pos:position pos:line="119" pos:column="72"/></condition><then pos:line="119" pos:column="72">
        <block type="pseudo"><return pos:line="120" pos:column="9">return <expr><name pos:line="120" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="120" pos:column="35"/></name></expr>;<pos:position pos:line="120" pos:column="36"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="121" pos:column="7">ntlm<pos:position pos:line="121" pos:column="11"/></name><operator pos:line="121" pos:column="11">-&gt;<pos:position pos:line="121" pos:column="16"/></operator><name pos:line="121" pos:column="13">identity<pos:position pos:line="121" pos:column="21"/></name><operator pos:line="121" pos:column="21">.<pos:position pos:line="121" pos:column="22"/></operator><name pos:line="121" pos:column="22">UserLength<pos:position pos:line="121" pos:column="32"/></name></name> <operator pos:line="121" pos:column="33">=<pos:position pos:line="121" pos:column="34"/></operator> <call><name pos:line="121" pos:column="35">strlen<pos:position pos:line="121" pos:column="41"/></name><argument_list pos:line="121" pos:column="41">(<argument><expr><name pos:line="121" pos:column="42">user<pos:position pos:line="121" pos:column="46"/></name></expr></argument>)<pos:position pos:line="121" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="48"/></expr_stmt>
      <if pos:line="122" pos:column="7">if<condition pos:line="122" pos:column="9">(<expr><operator pos:line="122" pos:column="10">(<pos:position pos:line="122" pos:column="11"/></operator><name><name pos:line="122" pos:column="11">ntlm<pos:position pos:line="122" pos:column="15"/></name><operator pos:line="122" pos:column="15">-&gt;<pos:position pos:line="122" pos:column="20"/></operator><name pos:line="122" pos:column="17">identity<pos:position pos:line="122" pos:column="25"/></name><operator pos:line="122" pos:column="25">.<pos:position pos:line="122" pos:column="26"/></operator><name pos:line="122" pos:column="26">Password<pos:position pos:line="122" pos:column="34"/></name></name> <operator pos:line="122" pos:column="35">=<pos:position pos:line="122" pos:column="36"/></operator> <operator pos:line="122" pos:column="37">(<pos:position pos:line="122" pos:column="38"/></operator><name pos:line="122" pos:column="38">unsigned<pos:position pos:line="122" pos:column="46"/></name> <name pos:line="122" pos:column="47">char<pos:position pos:line="122" pos:column="51"/></name> <operator pos:line="122" pos:column="52">*<pos:position pos:line="122" pos:column="53"/></operator><operator pos:line="122" pos:column="53">)<pos:position pos:line="122" pos:column="54"/></operator><call><name pos:line="122" pos:column="54">strdup<pos:position pos:line="122" pos:column="60"/></name><argument_list pos:line="122" pos:column="60">(<argument><expr><name pos:line="122" pos:column="61">passwdp<pos:position pos:line="122" pos:column="68"/></name></expr></argument>)<pos:position pos:line="122" pos:column="69"/></argument_list></call><operator pos:line="122" pos:column="69">)<pos:position pos:line="122" pos:column="70"/></operator> <operator pos:line="122" pos:column="71">==<pos:position pos:line="122" pos:column="73"/></operator> <name pos:line="122" pos:column="74">NULL<pos:position pos:line="122" pos:column="78"/></name></expr>)<pos:position pos:line="122" pos:column="79"/></condition><then pos:line="122" pos:column="79">
        <block type="pseudo"><return pos:line="123" pos:column="9">return <expr><name pos:line="123" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="123" pos:column="35"/></name></expr>;<pos:position pos:line="123" pos:column="36"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="124" pos:column="7">ntlm<pos:position pos:line="124" pos:column="11"/></name><operator pos:line="124" pos:column="11">-&gt;<pos:position pos:line="124" pos:column="16"/></operator><name pos:line="124" pos:column="13">identity<pos:position pos:line="124" pos:column="21"/></name><operator pos:line="124" pos:column="21">.<pos:position pos:line="124" pos:column="22"/></operator><name pos:line="124" pos:column="22">PasswordLength<pos:position pos:line="124" pos:column="36"/></name></name> <operator pos:line="124" pos:column="37">=<pos:position pos:line="124" pos:column="38"/></operator> <call><name pos:line="124" pos:column="39">strlen<pos:position pos:line="124" pos:column="45"/></name><argument_list pos:line="124" pos:column="45">(<argument><expr><name pos:line="124" pos:column="46">passwdp<pos:position pos:line="124" pos:column="53"/></name></expr></argument>)<pos:position pos:line="124" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="55"/></expr_stmt>
      <if pos:line="125" pos:column="7">if<condition pos:line="125" pos:column="9">(<expr><operator pos:line="125" pos:column="10">(<pos:position pos:line="125" pos:column="11"/></operator><name><name pos:line="125" pos:column="11">ntlm<pos:position pos:line="125" pos:column="15"/></name><operator pos:line="125" pos:column="15">-&gt;<pos:position pos:line="125" pos:column="20"/></operator><name pos:line="125" pos:column="17">identity<pos:position pos:line="125" pos:column="25"/></name><operator pos:line="125" pos:column="25">.<pos:position pos:line="125" pos:column="26"/></operator><name pos:line="125" pos:column="26">Domain<pos:position pos:line="125" pos:column="32"/></name></name> <operator pos:line="125" pos:column="33">=<pos:position pos:line="125" pos:column="34"/></operator> <call><name pos:line="125" pos:column="35">malloc<pos:position pos:line="125" pos:column="41"/></name><argument_list pos:line="125" pos:column="41">(<argument><expr><name pos:line="125" pos:column="42">domlen<pos:position pos:line="125" pos:column="48"/></name><operator pos:line="125" pos:column="48">+<pos:position pos:line="125" pos:column="49"/></operator><literal type="number" pos:line="125" pos:column="49">1<pos:position pos:line="125" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="51"/></argument_list></call><operator pos:line="125" pos:column="51">)<pos:position pos:line="125" pos:column="52"/></operator> <operator pos:line="125" pos:column="53">==<pos:position pos:line="125" pos:column="55"/></operator> <name pos:line="125" pos:column="56">NULL<pos:position pos:line="125" pos:column="60"/></name></expr>)<pos:position pos:line="125" pos:column="61"/></condition><then pos:line="125" pos:column="61">
        <block type="pseudo"><return pos:line="126" pos:column="9">return <expr><name pos:line="126" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="126" pos:column="35"/></name></expr>;<pos:position pos:line="126" pos:column="36"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="127" pos:column="7">strncpy<pos:position pos:line="127" pos:column="14"/></name><argument_list pos:line="127" pos:column="14">(<argument><expr><operator pos:line="127" pos:column="15">(<pos:position pos:line="127" pos:column="16"/></operator><name pos:line="127" pos:column="16">char<pos:position pos:line="127" pos:column="20"/></name> <operator pos:line="127" pos:column="21">*<pos:position pos:line="127" pos:column="22"/></operator><operator pos:line="127" pos:column="22">)<pos:position pos:line="127" pos:column="23"/></operator><name><name pos:line="127" pos:column="23">ntlm<pos:position pos:line="127" pos:column="27"/></name><operator pos:line="127" pos:column="27">-&gt;<pos:position pos:line="127" pos:column="32"/></operator><name pos:line="127" pos:column="29">identity<pos:position pos:line="127" pos:column="37"/></name><operator pos:line="127" pos:column="37">.<pos:position pos:line="127" pos:column="38"/></operator><name pos:line="127" pos:column="38">Domain<pos:position pos:line="127" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="46">domain<pos:position pos:line="127" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="54">domlen<pos:position pos:line="127" pos:column="60"/></name></expr></argument>)<pos:position pos:line="127" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="128" pos:column="7">ntlm<pos:position pos:line="128" pos:column="11"/></name><operator pos:line="128" pos:column="11">-&gt;<pos:position pos:line="128" pos:column="16"/></operator><name pos:line="128" pos:column="13">identity<pos:position pos:line="128" pos:column="21"/></name><operator pos:line="128" pos:column="21">.<pos:position pos:line="128" pos:column="22"/></operator><name pos:line="128" pos:column="22">Domain<pos:position pos:line="128" pos:column="28"/></name><index pos:line="128" pos:column="28">[<expr><name pos:line="128" pos:column="29">domlen<pos:position pos:line="128" pos:column="35"/></name></expr>]<pos:position pos:line="128" pos:column="36"/></index></name> <operator pos:line="128" pos:column="37">=<pos:position pos:line="128" pos:column="38"/></operator> <literal type="char" pos:line="128" pos:column="39">'\0'<pos:position pos:line="128" pos:column="43"/></literal></expr>;<pos:position pos:line="128" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="129" pos:column="7">ntlm<pos:position pos:line="129" pos:column="11"/></name><operator pos:line="129" pos:column="11">-&gt;<pos:position pos:line="129" pos:column="16"/></operator><name pos:line="129" pos:column="13">identity<pos:position pos:line="129" pos:column="21"/></name><operator pos:line="129" pos:column="21">.<pos:position pos:line="129" pos:column="22"/></operator><name pos:line="129" pos:column="22">DomainLength<pos:position pos:line="129" pos:column="34"/></name></name> <operator pos:line="129" pos:column="35">=<pos:position pos:line="129" pos:column="36"/></operator> <name pos:line="129" pos:column="37">domlen<pos:position pos:line="129" pos:column="43"/></name></expr>;<pos:position pos:line="129" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="130" pos:column="7">ntlm<pos:position pos:line="130" pos:column="11"/></name><operator pos:line="130" pos:column="11">-&gt;<pos:position pos:line="130" pos:column="16"/></operator><name pos:line="130" pos:column="13">identity<pos:position pos:line="130" pos:column="21"/></name><operator pos:line="130" pos:column="21">.<pos:position pos:line="130" pos:column="22"/></operator><name pos:line="130" pos:column="22">Flags<pos:position pos:line="130" pos:column="27"/></name></name> <operator pos:line="130" pos:column="28">=<pos:position pos:line="130" pos:column="29"/></operator> <name pos:line="130" pos:column="30">SEC_WINNT_AUTH_IDENTITY_ANSI<pos:position pos:line="130" pos:column="58"/></name></expr>;<pos:position pos:line="130" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="131" pos:column="6"/></block></then>
    <else pos:line="132" pos:column="5">else <block pos:line="132" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="133" pos:column="7">ntlm<pos:position pos:line="133" pos:column="11"/></name><operator pos:line="133" pos:column="11">-&gt;<pos:position pos:line="133" pos:column="16"/></operator><name pos:line="133" pos:column="13">p_identity<pos:position pos:line="133" pos:column="23"/></name></name> <operator pos:line="133" pos:column="24">=<pos:position pos:line="133" pos:column="25"/></operator> <name pos:line="133" pos:column="26">NULL<pos:position pos:line="133" pos:column="30"/></name></expr>;<pos:position pos:line="133" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="134" pos:column="6"/></block></else></if>

    <if pos:line="136" pos:column="5">if<condition pos:line="136" pos:column="7">(<expr><call><name><name pos:line="136" pos:column="8">s_pSecFn<pos:position pos:line="136" pos:column="16"/></name><operator pos:line="136" pos:column="16">-&gt;<pos:position pos:line="136" pos:column="21"/></operator><name pos:line="136" pos:column="18">AcquireCredentialsHandle<pos:position pos:line="136" pos:column="42"/></name></name><argument_list pos:line="136" pos:column="42">(
          <argument><expr><name pos:line="137" pos:column="11">NULL<pos:position pos:line="137" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="137" pos:column="17">(<pos:position pos:line="137" pos:column="18"/></operator><name pos:line="137" pos:column="18">char<pos:position pos:line="137" pos:column="22"/></name> <operator pos:line="137" pos:column="23">*<pos:position pos:line="137" pos:column="24"/></operator><operator pos:line="137" pos:column="24">)<pos:position pos:line="137" pos:column="25"/></operator><literal type="string" pos:line="137" pos:column="25">"NTLM"<pos:position pos:line="137" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="33">SECPKG_CRED_OUTBOUND<pos:position pos:line="137" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="55">NULL<pos:position pos:line="137" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="61">ntlm<pos:position pos:line="137" pos:column="65"/></name><operator pos:line="137" pos:column="65">-&gt;<pos:position pos:line="137" pos:column="70"/></operator><name pos:line="137" pos:column="67">p_identity<pos:position pos:line="137" pos:column="77"/></name></name></expr></argument>,
          <argument><expr><name pos:line="138" pos:column="11">NULL<pos:position pos:line="138" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="17">NULL<pos:position pos:line="138" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="138" pos:column="23">&amp;<pos:position pos:line="138" pos:column="28"/></operator><name><name pos:line="138" pos:column="24">ntlm<pos:position pos:line="138" pos:column="28"/></name><operator pos:line="138" pos:column="28">-&gt;<pos:position pos:line="138" pos:column="33"/></operator><name pos:line="138" pos:column="30">handle<pos:position pos:line="138" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="138" pos:column="38">&amp;<pos:position pos:line="138" pos:column="43"/></operator><name pos:line="138" pos:column="39">tsDummy<pos:position pos:line="138" pos:column="46"/></name></expr></argument>
          )<pos:position pos:line="139" pos:column="12"/></argument_list></call> <operator pos:line="139" pos:column="13">!=<pos:position pos:line="139" pos:column="15"/></operator> <name pos:line="139" pos:column="16">SEC_E_OK<pos:position pos:line="139" pos:column="24"/></name></expr>)<pos:position pos:line="139" pos:column="25"/></condition><then pos:line="139" pos:column="25"> <block pos:line="139" pos:column="26">{
      <return pos:line="140" pos:column="7">return <expr><name pos:line="140" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="140" pos:column="33"/></name></expr>;<pos:position pos:line="140" pos:column="34"/></return>
    }<pos:position pos:line="141" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="143" pos:column="5">desc<pos:position pos:line="143" pos:column="9"/></name><operator pos:line="143" pos:column="9">.<pos:position pos:line="143" pos:column="10"/></operator><name pos:line="143" pos:column="10">ulVersion<pos:position pos:line="143" pos:column="19"/></name></name> <operator pos:line="143" pos:column="20">=<pos:position pos:line="143" pos:column="21"/></operator> <name pos:line="143" pos:column="22">SECBUFFER_VERSION<pos:position pos:line="143" pos:column="39"/></name></expr>;<pos:position pos:line="143" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="144" pos:column="5">desc<pos:position pos:line="144" pos:column="9"/></name><operator pos:line="144" pos:column="9">.<pos:position pos:line="144" pos:column="10"/></operator><name pos:line="144" pos:column="10">cBuffers<pos:position pos:line="144" pos:column="18"/></name></name>  <operator pos:line="144" pos:column="20">=<pos:position pos:line="144" pos:column="21"/></operator> <literal type="number" pos:line="144" pos:column="22">1<pos:position pos:line="144" pos:column="23"/></literal></expr>;<pos:position pos:line="144" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="145" pos:column="5">desc<pos:position pos:line="145" pos:column="9"/></name><operator pos:line="145" pos:column="9">.<pos:position pos:line="145" pos:column="10"/></operator><name pos:line="145" pos:column="10">pBuffers<pos:position pos:line="145" pos:column="18"/></name></name>  <operator pos:line="145" pos:column="20">=<pos:position pos:line="145" pos:column="21"/></operator> <operator pos:line="145" pos:column="22">&amp;<pos:position pos:line="145" pos:column="27"/></operator><name pos:line="145" pos:column="23">buf<pos:position pos:line="145" pos:column="26"/></name></expr>;<pos:position pos:line="145" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="146" pos:column="5">buf<pos:position pos:line="146" pos:column="8"/></name><operator pos:line="146" pos:column="8">.<pos:position pos:line="146" pos:column="9"/></operator><name pos:line="146" pos:column="9">cbBuffer<pos:position pos:line="146" pos:column="17"/></name></name>   <operator pos:line="146" pos:column="20">=<pos:position pos:line="146" pos:column="21"/></operator> <sizeof pos:line="146" pos:column="22">sizeof<argument_list pos:line="146" pos:column="28">(<argument><expr><name pos:line="146" pos:column="29">ntlmbuf<pos:position pos:line="146" pos:column="36"/></name></expr></argument>)<pos:position pos:line="146" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="146" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="147" pos:column="5">buf<pos:position pos:line="147" pos:column="8"/></name><operator pos:line="147" pos:column="8">.<pos:position pos:line="147" pos:column="9"/></operator><name pos:line="147" pos:column="9">BufferType<pos:position pos:line="147" pos:column="19"/></name></name> <operator pos:line="147" pos:column="20">=<pos:position pos:line="147" pos:column="21"/></operator> <name pos:line="147" pos:column="22">SECBUFFER_TOKEN<pos:position pos:line="147" pos:column="37"/></name></expr>;<pos:position pos:line="147" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="148" pos:column="5">buf<pos:position pos:line="148" pos:column="8"/></name><operator pos:line="148" pos:column="8">.<pos:position pos:line="148" pos:column="9"/></operator><name pos:line="148" pos:column="9">pvBuffer<pos:position pos:line="148" pos:column="17"/></name></name>   <operator pos:line="148" pos:column="20">=<pos:position pos:line="148" pos:column="21"/></operator> <name pos:line="148" pos:column="22">ntlmbuf<pos:position pos:line="148" pos:column="29"/></name></expr>;<pos:position pos:line="148" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><name pos:line="150" pos:column="5">status<pos:position pos:line="150" pos:column="11"/></name> <operator pos:line="150" pos:column="12">=<pos:position pos:line="150" pos:column="13"/></operator> <call><name><name pos:line="150" pos:column="14">s_pSecFn<pos:position pos:line="150" pos:column="22"/></name><operator pos:line="150" pos:column="22">-&gt;<pos:position pos:line="150" pos:column="27"/></operator><name pos:line="150" pos:column="24">InitializeSecurityContext<pos:position pos:line="150" pos:column="49"/></name></name><argument_list pos:line="150" pos:column="49">(<argument><expr><operator pos:line="150" pos:column="50">&amp;<pos:position pos:line="150" pos:column="55"/></operator><name><name pos:line="150" pos:column="51">ntlm<pos:position pos:line="150" pos:column="55"/></name><operator pos:line="150" pos:column="55">-&gt;<pos:position pos:line="150" pos:column="60"/></operator><name pos:line="150" pos:column="57">handle<pos:position pos:line="150" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="65">NULL<pos:position pos:line="150" pos:column="69"/></name></expr></argument>,
                                                 <argument><expr><operator pos:line="151" pos:column="50">(<pos:position pos:line="151" pos:column="51"/></operator><name pos:line="151" pos:column="51">char<pos:position pos:line="151" pos:column="55"/></name> <operator pos:line="151" pos:column="56">*<pos:position pos:line="151" pos:column="57"/></operator><operator pos:line="151" pos:column="57">)<pos:position pos:line="151" pos:column="58"/></operator> <name pos:line="151" pos:column="59">host<pos:position pos:line="151" pos:column="63"/></name></expr></argument>,
                                                 <argument><expr><name pos:line="152" pos:column="50">ISC_REQ_CONFIDENTIALITY<pos:position pos:line="152" pos:column="73"/></name> <operator pos:line="152" pos:column="74">|<pos:position pos:line="152" pos:column="75"/></operator>
                                                 <name pos:line="153" pos:column="50">ISC_REQ_REPLAY_DETECT<pos:position pos:line="153" pos:column="71"/></name> <operator pos:line="153" pos:column="72">|<pos:position pos:line="153" pos:column="73"/></operator>
                                                 <name pos:line="154" pos:column="50">ISC_REQ_CONNECTION<pos:position pos:line="154" pos:column="68"/></name></expr></argument>,
                                                 <argument><expr><literal type="number" pos:line="155" pos:column="50">0<pos:position pos:line="155" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="53">SECURITY_NETWORK_DREP<pos:position pos:line="155" pos:column="74"/></name></expr></argument>,
                                                 <argument><expr><name pos:line="156" pos:column="50">NULL<pos:position pos:line="156" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="156" pos:column="56">0<pos:position pos:line="156" pos:column="57"/></literal></expr></argument>,
                                                 <argument><expr><operator pos:line="157" pos:column="50">&amp;<pos:position pos:line="157" pos:column="55"/></operator><name><name pos:line="157" pos:column="51">ntlm<pos:position pos:line="157" pos:column="55"/></name><operator pos:line="157" pos:column="55">-&gt;<pos:position pos:line="157" pos:column="60"/></operator><name pos:line="157" pos:column="57">c_handle<pos:position pos:line="157" pos:column="65"/></name></name></expr></argument>, <argument><expr><operator pos:line="157" pos:column="67">&amp;<pos:position pos:line="157" pos:column="72"/></operator><name pos:line="157" pos:column="68">desc<pos:position pos:line="157" pos:column="72"/></name></expr></argument>,
                                                 <argument><expr><operator pos:line="158" pos:column="50">&amp;<pos:position pos:line="158" pos:column="55"/></operator><name pos:line="158" pos:column="51">attrs<pos:position pos:line="158" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="158" pos:column="58">&amp;<pos:position pos:line="158" pos:column="63"/></operator><name pos:line="158" pos:column="59">tsDummy<pos:position pos:line="158" pos:column="66"/></name></expr></argument>)<pos:position pos:line="158" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="68"/></expr_stmt>

    <if pos:line="160" pos:column="5">if<condition pos:line="160" pos:column="7">(<expr><name pos:line="160" pos:column="8">status<pos:position pos:line="160" pos:column="14"/></name> <operator pos:line="160" pos:column="15">==<pos:position pos:line="160" pos:column="17"/></operator> <name pos:line="160" pos:column="18">SEC_I_COMPLETE_AND_CONTINUE<pos:position pos:line="160" pos:column="45"/></name> <operator pos:line="160" pos:column="46">||<pos:position pos:line="160" pos:column="48"/></operator>
        <name pos:line="161" pos:column="9">status<pos:position pos:line="161" pos:column="15"/></name> <operator pos:line="161" pos:column="16">==<pos:position pos:line="161" pos:column="18"/></operator> <name pos:line="161" pos:column="19">SEC_I_CONTINUE_NEEDED<pos:position pos:line="161" pos:column="40"/></name></expr>)<pos:position pos:line="161" pos:column="41"/></condition><then pos:line="161" pos:column="41"> <block pos:line="161" pos:column="42">{
      <expr_stmt><expr><call><name><name pos:line="162" pos:column="7">s_pSecFn<pos:position pos:line="162" pos:column="15"/></name><operator pos:line="162" pos:column="15">-&gt;<pos:position pos:line="162" pos:column="20"/></operator><name pos:line="162" pos:column="17">CompleteAuthToken<pos:position pos:line="162" pos:column="34"/></name></name><argument_list pos:line="162" pos:column="34">(<argument><expr><operator pos:line="162" pos:column="35">&amp;<pos:position pos:line="162" pos:column="40"/></operator><name><name pos:line="162" pos:column="36">ntlm<pos:position pos:line="162" pos:column="40"/></name><operator pos:line="162" pos:column="40">-&gt;<pos:position pos:line="162" pos:column="45"/></operator><name pos:line="162" pos:column="42">c_handle<pos:position pos:line="162" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="162" pos:column="52">&amp;<pos:position pos:line="162" pos:column="57"/></operator><name pos:line="162" pos:column="53">desc<pos:position pos:line="162" pos:column="57"/></name></expr></argument>)<pos:position pos:line="162" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="163" pos:column="6"/></block></then>
    <elseif pos:line="164" pos:column="5">else <if pos:line="164" pos:column="10">if<condition pos:line="164" pos:column="12">(<expr><name pos:line="164" pos:column="13">status<pos:position pos:line="164" pos:column="19"/></name> <operator pos:line="164" pos:column="20">!=<pos:position pos:line="164" pos:column="22"/></operator> <name pos:line="164" pos:column="23">SEC_E_OK<pos:position pos:line="164" pos:column="31"/></name></expr>)<pos:position pos:line="164" pos:column="32"/></condition><then pos:line="164" pos:column="32"> <block pos:line="164" pos:column="33">{
      <expr_stmt><expr><call><name><name pos:line="165" pos:column="7">s_pSecFn<pos:position pos:line="165" pos:column="15"/></name><operator pos:line="165" pos:column="15">-&gt;<pos:position pos:line="165" pos:column="20"/></operator><name pos:line="165" pos:column="17">FreeCredentialsHandle<pos:position pos:line="165" pos:column="38"/></name></name><argument_list pos:line="165" pos:column="38">(<argument><expr><operator pos:line="165" pos:column="39">&amp;<pos:position pos:line="165" pos:column="44"/></operator><name><name pos:line="165" pos:column="40">ntlm<pos:position pos:line="165" pos:column="44"/></name><operator pos:line="165" pos:column="44">-&gt;<pos:position pos:line="165" pos:column="49"/></operator><name pos:line="165" pos:column="46">handle<pos:position pos:line="165" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="165" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="54"/></expr_stmt>
      <return pos:line="166" pos:column="7">return <expr><name pos:line="166" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="166" pos:column="30"/></name></expr>;<pos:position pos:line="166" pos:column="31"/></return>
    }<pos:position pos:line="167" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name><name pos:line="169" pos:column="5">ntlm<pos:position pos:line="169" pos:column="9"/></name><operator pos:line="169" pos:column="9">-&gt;<pos:position pos:line="169" pos:column="14"/></operator><name pos:line="169" pos:column="11">has_handles<pos:position pos:line="169" pos:column="22"/></name></name> <operator pos:line="169" pos:column="23">=<pos:position pos:line="169" pos:column="24"/></operator> <literal type="number" pos:line="169" pos:column="25">1<pos:position pos:line="169" pos:column="26"/></literal></expr>;<pos:position pos:line="169" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="170" pos:column="5">size<pos:position pos:line="170" pos:column="9"/></name> <operator pos:line="170" pos:column="10">=<pos:position pos:line="170" pos:column="11"/></operator> <name><name pos:line="170" pos:column="12">buf<pos:position pos:line="170" pos:column="15"/></name><operator pos:line="170" pos:column="15">.<pos:position pos:line="170" pos:column="16"/></operator><name pos:line="170" pos:column="16">cbBuffer<pos:position pos:line="170" pos:column="24"/></name></name></expr>;<pos:position pos:line="170" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="171" pos:column="4"/></block>
<cpp:else pos:line="172" pos:column="1">#<cpp:directive pos:line="172" pos:column="2">else<pos:position pos:line="172" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="173" pos:column="5">hostoff<pos:position pos:line="173" pos:column="12"/></name> <operator pos:line="173" pos:column="13">=<pos:position pos:line="173" pos:column="14"/></operator> <literal type="number" pos:line="173" pos:column="15">0<pos:position pos:line="173" pos:column="16"/></literal></expr>;<pos:position pos:line="173" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="174" pos:column="5">domoff<pos:position pos:line="174" pos:column="11"/></name> <operator pos:line="174" pos:column="12">=<pos:position pos:line="174" pos:column="13"/></operator> <name pos:line="174" pos:column="14">hostoff<pos:position pos:line="174" pos:column="21"/></name> <operator pos:line="174" pos:column="22">+<pos:position pos:line="174" pos:column="23"/></operator> <name pos:line="174" pos:column="24">hostlen<pos:position pos:line="174" pos:column="31"/></name></expr>;<pos:position pos:line="174" pos:column="32"/></expr_stmt> <comment type="block" pos:line="174" pos:column="33">/* This is 0: remember that host and domain
                                   are empty */</comment>

    <comment type="block" pos:line="177" pos:column="5">/* Create and send a type-1 message:

    Index Description          Content
    0     NTLMSSP Signature    Null-terminated ASCII "NTLMSSP"
                               (0x4e544c4d53535000)
    8     NTLM Message Type    long (0x01000000)
    12    Flags                long
    16    Supplied Domain      security buffer(*)
    24    Supplied Workstation security buffer(*)
    32    start of data block

    */</comment>
<cpp:if pos:line="189" pos:column="1">#<cpp:directive pos:line="189" pos:column="2">if<pos:position pos:line="189" pos:column="4"/></cpp:directive> <expr><name pos:line="189" pos:column="5">USE_NTLM2SESSION<pos:position pos:line="189" pos:column="21"/></name></expr></cpp:if>
<cpp:define pos:line="190" pos:column="1">#<cpp:directive pos:line="190" pos:column="2">define<pos:position pos:line="190" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="190" pos:column="9">NTLM2FLAG<pos:position pos:line="190" pos:column="18"/></name></cpp:macro> <cpp:value pos:line="190" pos:column="19">NTLMFLAG_NEGOTIATE_NTLM2_KEY<pos:position pos:line="190" pos:column="47"/></cpp:value></cpp:define>
<cpp:else pos:line="191" pos:column="1">#<cpp:directive pos:line="191" pos:column="2">else<pos:position pos:line="191" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="192" pos:column="1">#<cpp:directive pos:line="192" pos:column="2">define<pos:position pos:line="192" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="192" pos:column="9">NTLM2FLAG<pos:position pos:line="192" pos:column="18"/></name></cpp:macro> <cpp:value pos:line="192" pos:column="19">0<pos:position pos:line="192" pos:column="20"/></cpp:value></cpp:define>
<cpp:endif pos:line="193" pos:column="1">#<cpp:directive pos:line="193" pos:column="2">endif<pos:position pos:line="193" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="194" pos:column="5">snprintf<pos:position pos:line="194" pos:column="13"/></name><argument_list pos:line="194" pos:column="13">(<argument><expr><operator pos:line="194" pos:column="14">(<pos:position pos:line="194" pos:column="15"/></operator><name pos:line="194" pos:column="15">char<pos:position pos:line="194" pos:column="19"/></name> <operator pos:line="194" pos:column="20">*<pos:position pos:line="194" pos:column="21"/></operator><operator pos:line="194" pos:column="21">)<pos:position pos:line="194" pos:column="22"/></operator><name pos:line="194" pos:column="22">ntlmbuf<pos:position pos:line="194" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="194" pos:column="31">sizeof<argument_list pos:line="194" pos:column="37">(<argument><expr><name pos:line="194" pos:column="38">ntlmbuf<pos:position pos:line="194" pos:column="45"/></name></expr></argument>)<pos:position pos:line="194" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="194" pos:column="48">NTLMSSP_SIGNATURE<pos:position pos:line="194" pos:column="65"/></name> <literal type="string" pos:line="194" pos:column="66">"%c"<pos:position pos:line="194" pos:column="70"/></literal>
             <literal type="string" pos:line="195" pos:column="14">"\x01%c%c%c"<pos:position pos:line="195" pos:column="26"/></literal> <comment type="block" pos:line="195" pos:column="27">/* 32-bit type = 1 */</comment>
             <literal type="string" pos:line="196" pos:column="14">"%c%c%c%c"<pos:position pos:line="196" pos:column="24"/></literal>   <comment type="block" pos:line="196" pos:column="27">/* 32-bit NTLM flag field */</comment>
             <literal type="string" pos:line="197" pos:column="14">"%c%c"<pos:position pos:line="197" pos:column="20"/></literal>  <comment type="block" pos:line="197" pos:column="22">/* domain length */</comment>
             <literal type="string" pos:line="198" pos:column="14">"%c%c"<pos:position pos:line="198" pos:column="20"/></literal>  <comment type="block" pos:line="198" pos:column="22">/* domain allocated space */</comment>
             <literal type="string" pos:line="199" pos:column="14">"%c%c"<pos:position pos:line="199" pos:column="20"/></literal>  <comment type="block" pos:line="199" pos:column="22">/* domain name offset */</comment>
             <literal type="string" pos:line="200" pos:column="14">"%c%c"<pos:position pos:line="200" pos:column="20"/></literal>  <comment type="block" pos:line="200" pos:column="22">/* 2 zeroes */</comment>
             <literal type="string" pos:line="201" pos:column="14">"%c%c"<pos:position pos:line="201" pos:column="20"/></literal>  <comment type="block" pos:line="201" pos:column="22">/* host length */</comment>
             <literal type="string" pos:line="202" pos:column="14">"%c%c"<pos:position pos:line="202" pos:column="20"/></literal>  <comment type="block" pos:line="202" pos:column="22">/* host allocated space */</comment>
             <literal type="string" pos:line="203" pos:column="14">"%c%c"<pos:position pos:line="203" pos:column="20"/></literal>  <comment type="block" pos:line="203" pos:column="22">/* host name offset */</comment>
             <literal type="string" pos:line="204" pos:column="14">"%c%c"<pos:position pos:line="204" pos:column="20"/></literal>  <comment type="block" pos:line="204" pos:column="22">/* 2 zeroes */</comment>
             <literal type="string" pos:line="205" pos:column="14">"%s"<pos:position pos:line="205" pos:column="18"/></literal>   <comment type="block" pos:line="205" pos:column="21">/* host name */</comment>
             <literal type="string" pos:line="206" pos:column="14">"%s"<pos:position pos:line="206" pos:column="18"/></literal></expr></argument>,  <comment type="block" pos:line="206" pos:column="21">/* domain string */</comment>
             <argument><expr><literal type="number" pos:line="207" pos:column="14">0<pos:position pos:line="207" pos:column="15"/></literal></expr></argument>,     <comment type="block" pos:line="207" pos:column="21">/* trailing zero */</comment>
             <argument><expr><literal type="number" pos:line="208" pos:column="14">0<pos:position pos:line="208" pos:column="15"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="208" pos:column="16">0<pos:position pos:line="208" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="208" pos:column="18">0<pos:position pos:line="208" pos:column="19"/></literal></expr></argument>, <comment type="block" pos:line="208" pos:column="21">/* part of type-1 long */</comment>

             <argument><expr><call><name pos:line="210" pos:column="14">LONGQUARTET<pos:position pos:line="210" pos:column="25"/></name><argument_list pos:line="210" pos:column="25">(
               <argument><expr><name pos:line="211" pos:column="16">NTLMFLAG_NEGOTIATE_OEM<pos:position pos:line="211" pos:column="38"/></name><operator pos:line="211" pos:column="38">|<pos:position pos:line="211" pos:column="39"/></operator>
               <name pos:line="212" pos:column="16">NTLMFLAG_REQUEST_TARGET<pos:position pos:line="212" pos:column="39"/></name><operator pos:line="212" pos:column="39">|<pos:position pos:line="212" pos:column="40"/></operator>
               <name pos:line="213" pos:column="16">NTLMFLAG_NEGOTIATE_NTLM_KEY<pos:position pos:line="213" pos:column="43"/></name><operator pos:line="213" pos:column="43">|<pos:position pos:line="213" pos:column="44"/></operator>
               <name pos:line="214" pos:column="16">NTLM2FLAG<pos:position pos:line="214" pos:column="25"/></name><operator pos:line="214" pos:column="25">|<pos:position pos:line="214" pos:column="26"/></operator>
               <name pos:line="215" pos:column="16">NTLMFLAG_NEGOTIATE_ALWAYS_SIGN<pos:position pos:line="215" pos:column="46"/></name></expr></argument>
               )<pos:position pos:line="216" pos:column="17"/></argument_list></call></expr></argument>,
             <argument><expr><call><name pos:line="217" pos:column="14">SHORTPAIR<pos:position pos:line="217" pos:column="23"/></name><argument_list pos:line="217" pos:column="23">(<argument><expr><name pos:line="217" pos:column="24">domlen<pos:position pos:line="217" pos:column="30"/></name></expr></argument>)<pos:position pos:line="217" pos:column="31"/></argument_list></call></expr></argument>,
             <argument><expr><call><name pos:line="218" pos:column="14">SHORTPAIR<pos:position pos:line="218" pos:column="23"/></name><argument_list pos:line="218" pos:column="23">(<argument><expr><name pos:line="218" pos:column="24">domlen<pos:position pos:line="218" pos:column="30"/></name></expr></argument>)<pos:position pos:line="218" pos:column="31"/></argument_list></call></expr></argument>,
             <argument><expr><call><name pos:line="219" pos:column="14">SHORTPAIR<pos:position pos:line="219" pos:column="23"/></name><argument_list pos:line="219" pos:column="23">(<argument><expr><name pos:line="219" pos:column="24">domoff<pos:position pos:line="219" pos:column="30"/></name></expr></argument>)<pos:position pos:line="219" pos:column="31"/></argument_list></call></expr></argument>,
             <argument><expr><literal type="number" pos:line="220" pos:column="14">0<pos:position pos:line="220" pos:column="15"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="220" pos:column="16">0<pos:position pos:line="220" pos:column="17"/></literal></expr></argument>,
             <argument><expr><call><name pos:line="221" pos:column="14">SHORTPAIR<pos:position pos:line="221" pos:column="23"/></name><argument_list pos:line="221" pos:column="23">(<argument><expr><name pos:line="221" pos:column="24">hostlen<pos:position pos:line="221" pos:column="31"/></name></expr></argument>)<pos:position pos:line="221" pos:column="32"/></argument_list></call></expr></argument>,
             <argument><expr><call><name pos:line="222" pos:column="14">SHORTPAIR<pos:position pos:line="222" pos:column="23"/></name><argument_list pos:line="222" pos:column="23">(<argument><expr><name pos:line="222" pos:column="24">hostlen<pos:position pos:line="222" pos:column="31"/></name></expr></argument>)<pos:position pos:line="222" pos:column="32"/></argument_list></call></expr></argument>,
             <argument><expr><call><name pos:line="223" pos:column="14">SHORTPAIR<pos:position pos:line="223" pos:column="23"/></name><argument_list pos:line="223" pos:column="23">(<argument><expr><name pos:line="223" pos:column="24">hostoff<pos:position pos:line="223" pos:column="31"/></name></expr></argument>)<pos:position pos:line="223" pos:column="32"/></argument_list></call></expr></argument>,
             <argument><expr><literal type="number" pos:line="224" pos:column="14">0<pos:position pos:line="224" pos:column="15"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="224" pos:column="16">0<pos:position pos:line="224" pos:column="17"/></literal></expr></argument>,
             <argument><expr><name pos:line="225" pos:column="14">host<pos:position pos:line="225" pos:column="18"/></name></expr></argument> <comment type="block" pos:line="225" pos:column="19">/* this is empty */</comment>, <argument><expr><name pos:line="225" pos:column="40">domain<pos:position pos:line="225" pos:column="46"/></name></expr></argument> <comment type="block" pos:line="225" pos:column="47">/* this is empty */</comment>)<pos:position pos:line="225" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="68"/></expr_stmt>

    <comment type="block" pos:line="227" pos:column="5">/* initial packet length */</comment>
    <expr_stmt><expr><name pos:line="228" pos:column="5">size<pos:position pos:line="228" pos:column="9"/></name> <operator pos:line="228" pos:column="10">=<pos:position pos:line="228" pos:column="11"/></operator> <literal type="number" pos:line="228" pos:column="12">32<pos:position pos:line="228" pos:column="14"/></literal> <operator pos:line="228" pos:column="15">+<pos:position pos:line="228" pos:column="16"/></operator> <name pos:line="228" pos:column="17">hostlen<pos:position pos:line="228" pos:column="24"/></name> <operator pos:line="228" pos:column="25">+<pos:position pos:line="228" pos:column="26"/></operator> <name pos:line="228" pos:column="27">domlen<pos:position pos:line="228" pos:column="33"/></name></expr>;<pos:position pos:line="228" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="229" pos:column="1">#<cpp:directive pos:line="229" pos:column="2">endif<pos:position pos:line="229" pos:column="7"/></cpp:directive></cpp:endif>

    <macro><name pos:line="231" pos:column="5">DEBUG_OUT<pos:position pos:line="231" pos:column="14"/></name><argument_list pos:line="231" pos:column="14">(<argument pos:line="231" pos:column="15">{
      fprintf(stderr, <literal type="string" pos:line="232" pos:column="23">"**** TYPE1 header flags=0x%02.2x%02.2x%02.2x%02.2x 0x%08.8x "<pos:position pos:line="232" pos:column="85"/></literal>,
              LONGQUARTET(NTLMFLAG_NEGOTIATE_OEM|
                          NTLMFLAG_REQUEST_TARGET|
                          NTLMFLAG_NEGOTIATE_NTLM_KEY|
                          NTLM2FLAG|
                          NTLMFLAG_NEGOTIATE_ALWAYS_SIGN),
              NTLMFLAG_NEGOTIATE_OEM|
              NTLMFLAG_REQUEST_TARGET|
              NTLMFLAG_NEGOTIATE_NTLM_KEY|
              NTLM2FLAG|
              NTLMFLAG_NEGOTIATE_ALWAYS_SIGN);
      print_flags(stderr,
                  NTLMFLAG_NEGOTIATE_OEM|
                  NTLMFLAG_REQUEST_TARGET|
                  NTLMFLAG_NEGOTIATE_NTLM_KEY|
                  NTLM2FLAG|
                  NTLMFLAG_NEGOTIATE_ALWAYS_SIGN);
      fprintf(stderr, <literal type="string" pos:line="249" pos:column="23">"\n****\n"<pos:position pos:line="249" pos:column="33"/></literal>);
    }<pos:position pos:line="250" pos:column="6"/></argument>)<pos:position pos:line="250" pos:column="7"/></argument_list></macro><empty_stmt pos:line="250" pos:column="7">;<pos:position pos:line="250" pos:column="8"/></empty_stmt>

    <comment type="block" pos:line="252" pos:column="5">/* now size is the size of the base64 encoded package size */</comment>
    <expr_stmt><expr><name pos:line="253" pos:column="5">size<pos:position pos:line="253" pos:column="9"/></name> <operator pos:line="253" pos:column="10">=<pos:position pos:line="253" pos:column="11"/></operator> <call><name pos:line="253" pos:column="12">Curl_base64_encode<pos:position pos:line="253" pos:column="30"/></name><argument_list pos:line="253" pos:column="30">(<argument><expr><name pos:line="253" pos:column="31">NULL<pos:position pos:line="253" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="253" pos:column="37">(<pos:position pos:line="253" pos:column="38"/></operator><name pos:line="253" pos:column="38">char<pos:position pos:line="253" pos:column="42"/></name> <operator pos:line="253" pos:column="43">*<pos:position pos:line="253" pos:column="44"/></operator><operator pos:line="253" pos:column="44">)<pos:position pos:line="253" pos:column="45"/></operator><name pos:line="253" pos:column="45">ntlmbuf<pos:position pos:line="253" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="54">size<pos:position pos:line="253" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="253" pos:column="60">&amp;<pos:position pos:line="253" pos:column="65"/></operator><name pos:line="253" pos:column="61">base64<pos:position pos:line="253" pos:column="67"/></name></expr></argument>)<pos:position pos:line="253" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="69"/></expr_stmt>

    <if pos:line="255" pos:column="5">if<condition pos:line="255" pos:column="7">(<expr><name pos:line="255" pos:column="8">size<pos:position pos:line="255" pos:column="12"/></name> <operator pos:line="255" pos:column="13">&gt;<pos:position pos:line="255" pos:column="17"/></operator><literal type="number" pos:line="255" pos:column="14">0<pos:position pos:line="255" pos:column="15"/></literal></expr> )<pos:position pos:line="255" pos:column="17"/></condition><then pos:line="255" pos:column="17"> <block pos:line="255" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="256" pos:column="7">Curl_safefree<pos:position pos:line="256" pos:column="20"/></name><argument_list pos:line="256" pos:column="20">(<argument><expr><operator pos:line="256" pos:column="21">*<pos:position pos:line="256" pos:column="22"/></operator><name pos:line="256" pos:column="22">allocuserpwd<pos:position pos:line="256" pos:column="34"/></name></expr></argument>)<pos:position pos:line="256" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="257" pos:column="7">*<pos:position pos:line="257" pos:column="8"/></operator><name pos:line="257" pos:column="8">allocuserpwd<pos:position pos:line="257" pos:column="20"/></name> <operator pos:line="257" pos:column="21">=<pos:position pos:line="257" pos:column="22"/></operator> <call><name pos:line="257" pos:column="23">aprintf<pos:position pos:line="257" pos:column="30"/></name><argument_list pos:line="257" pos:column="30">(<argument><expr><literal type="string" pos:line="257" pos:column="31">"%sAuthorization: NTLM %s\r\n"<pos:position pos:line="257" pos:column="61"/></literal></expr></argument>,
                              <argument><expr><ternary><condition><expr><name pos:line="258" pos:column="31">proxy<pos:position pos:line="258" pos:column="36"/></name></expr>?<pos:position pos:line="258" pos:column="37"/></condition><then><expr><literal type="string" pos:line="258" pos:column="37">"Proxy-"<pos:position pos:line="258" pos:column="45"/></literal></expr></then><else pos:line="258" pos:column="45">:<expr><literal type="string" pos:line="258" pos:column="46">""<pos:position pos:line="258" pos:column="48"/></literal></expr></else></ternary></expr></argument>,
                              <argument><expr><name pos:line="259" pos:column="31">base64<pos:position pos:line="259" pos:column="37"/></name></expr></argument>)<pos:position pos:line="259" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="260" pos:column="7">DEBUG_OUT<pos:position pos:line="260" pos:column="16"/></name><argument_list pos:line="260" pos:column="16">(<argument><expr><call><name pos:line="260" pos:column="17">fprintf<pos:position pos:line="260" pos:column="24"/></name><argument_list pos:line="260" pos:column="24">(<argument><expr><name pos:line="260" pos:column="25">stderr<pos:position pos:line="260" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="260" pos:column="33">"**** Header %s\n "<pos:position pos:line="260" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="260" pos:column="54">*<pos:position pos:line="260" pos:column="55"/></operator><name pos:line="260" pos:column="55">allocuserpwd<pos:position pos:line="260" pos:column="67"/></name></expr></argument>)<pos:position pos:line="260" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="260" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="261" pos:column="7">free<pos:position pos:line="261" pos:column="11"/></name><argument_list pos:line="261" pos:column="11">(<argument><expr><name pos:line="261" pos:column="12">base64<pos:position pos:line="261" pos:column="18"/></name></expr></argument>)<pos:position pos:line="261" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="262" pos:column="6"/></block></then>
    <else pos:line="263" pos:column="5">else
      <block type="pseudo"><return pos:line="264" pos:column="7">return <expr><name pos:line="264" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="264" pos:column="33"/></name></expr>;<pos:position pos:line="264" pos:column="34"/></return></block></else></if> <comment type="block" pos:line="264" pos:column="35">/* FIX TODO */</comment>

    <break pos:line="266" pos:column="5">break;<pos:position pos:line="266" pos:column="11"/></break>

  <case pos:line="268" pos:column="3">case <expr><name pos:line="268" pos:column="8">NTLMSTATE_TYPE2<pos:position pos:line="268" pos:column="23"/></name></expr>:<pos:position pos:line="268" pos:column="24"/></case>
    <comment type="block" pos:line="269" pos:column="5">/* We received the type-2 message already, create a type-3 message:

    Index   Description            Content
    0       NTLMSSP Signature      Null-terminated ASCII "NTLMSSP"
                                   (0x4e544c4d53535000)
    8       NTLM Message Type      long (0x03000000)
    12      LM/LMv2 Response       security buffer(*)
    20      NTLM/NTLMv2 Response   security buffer(*)
    28      Domain Name            security buffer(*)
    36      User Name              security buffer(*)
    44      Workstation Name       security buffer(*)
    (52)    Session Key (optional) security buffer(*)
    (60)    Flags (optional)       long
    52 (64) start of data block

    */</comment>

  <block pos:line="286" pos:column="3">{
<cpp:ifdef pos:line="287" pos:column="1">#<cpp:directive pos:line="287" pos:column="2">ifdef<pos:position pos:line="287" pos:column="7"/></cpp:directive> <name pos:line="287" pos:column="8">USE_WINDOWS_SSPI<pos:position pos:line="287" pos:column="24"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="288" pos:column="5">SecBuffer<pos:position pos:line="288" pos:column="14"/></name></type> <name pos:line="288" pos:column="15">type_2<pos:position pos:line="288" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="288" pos:column="23">type_3<pos:position pos:line="288" pos:column="29"/></name></decl>;<pos:position pos:line="288" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="289" pos:column="5">SecBufferDesc<pos:position pos:line="289" pos:column="18"/></name></type> <name pos:line="289" pos:column="19">type_2_desc<pos:position pos:line="289" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="289" pos:column="32">type_3_desc<pos:position pos:line="289" pos:column="43"/></name></decl>;<pos:position pos:line="289" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="290" pos:column="5">SECURITY_STATUS<pos:position pos:line="290" pos:column="20"/></name></type> <name pos:line="290" pos:column="21">status<pos:position pos:line="290" pos:column="27"/></name></decl>;<pos:position pos:line="290" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="291" pos:column="5">ULONG<pos:position pos:line="291" pos:column="10"/></name></type> <name pos:line="291" pos:column="11">attrs<pos:position pos:line="291" pos:column="16"/></name></decl>;<pos:position pos:line="291" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="292" pos:column="5">TimeStamp<pos:position pos:line="292" pos:column="14"/></name></type> <name pos:line="292" pos:column="15">tsDummy<pos:position pos:line="292" pos:column="22"/></name></decl>;<pos:position pos:line="292" pos:column="23"/></decl_stmt> <comment type="block" pos:line="292" pos:column="24">/* For Windows 9x compatibility of SPPI calls */</comment>

    <expr_stmt><expr><name><name pos:line="294" pos:column="5">type_2_desc<pos:position pos:line="294" pos:column="16"/></name><operator pos:line="294" pos:column="16">.<pos:position pos:line="294" pos:column="17"/></operator><name pos:line="294" pos:column="17">ulVersion<pos:position pos:line="294" pos:column="26"/></name></name>  <operator pos:line="294" pos:column="28">=<pos:position pos:line="294" pos:column="29"/></operator> <name><name pos:line="294" pos:column="30">type_3_desc<pos:position pos:line="294" pos:column="41"/></name><operator pos:line="294" pos:column="41">.<pos:position pos:line="294" pos:column="42"/></operator><name pos:line="294" pos:column="42">ulVersion<pos:position pos:line="294" pos:column="51"/></name></name>  <operator pos:line="294" pos:column="53">=<pos:position pos:line="294" pos:column="54"/></operator> <name pos:line="294" pos:column="55">SECBUFFER_VERSION<pos:position pos:line="294" pos:column="72"/></name></expr>;<pos:position pos:line="294" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="295" pos:column="5">type_2_desc<pos:position pos:line="295" pos:column="16"/></name><operator pos:line="295" pos:column="16">.<pos:position pos:line="295" pos:column="17"/></operator><name pos:line="295" pos:column="17">cBuffers<pos:position pos:line="295" pos:column="25"/></name></name>   <operator pos:line="295" pos:column="28">=<pos:position pos:line="295" pos:column="29"/></operator> <name><name pos:line="295" pos:column="30">type_3_desc<pos:position pos:line="295" pos:column="41"/></name><operator pos:line="295" pos:column="41">.<pos:position pos:line="295" pos:column="42"/></operator><name pos:line="295" pos:column="42">cBuffers<pos:position pos:line="295" pos:column="50"/></name></name>   <operator pos:line="295" pos:column="53">=<pos:position pos:line="295" pos:column="54"/></operator> <literal type="number" pos:line="295" pos:column="55">1<pos:position pos:line="295" pos:column="56"/></literal></expr>;<pos:position pos:line="295" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="296" pos:column="5">type_2_desc<pos:position pos:line="296" pos:column="16"/></name><operator pos:line="296" pos:column="16">.<pos:position pos:line="296" pos:column="17"/></operator><name pos:line="296" pos:column="17">pBuffers<pos:position pos:line="296" pos:column="25"/></name></name>   <operator pos:line="296" pos:column="28">=<pos:position pos:line="296" pos:column="29"/></operator> <operator pos:line="296" pos:column="30">&amp;<pos:position pos:line="296" pos:column="35"/></operator><name pos:line="296" pos:column="31">type_2<pos:position pos:line="296" pos:column="37"/></name></expr>;<pos:position pos:line="296" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="297" pos:column="5">type_3_desc<pos:position pos:line="297" pos:column="16"/></name><operator pos:line="297" pos:column="16">.<pos:position pos:line="297" pos:column="17"/></operator><name pos:line="297" pos:column="17">pBuffers<pos:position pos:line="297" pos:column="25"/></name></name>   <operator pos:line="297" pos:column="28">=<pos:position pos:line="297" pos:column="29"/></operator> <operator pos:line="297" pos:column="30">&amp;<pos:position pos:line="297" pos:column="35"/></operator><name pos:line="297" pos:column="31">type_3<pos:position pos:line="297" pos:column="37"/></name></expr>;<pos:position pos:line="297" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="299" pos:column="5">type_2<pos:position pos:line="299" pos:column="11"/></name><operator pos:line="299" pos:column="11">.<pos:position pos:line="299" pos:column="12"/></operator><name pos:line="299" pos:column="12">BufferType<pos:position pos:line="299" pos:column="22"/></name></name> <operator pos:line="299" pos:column="23">=<pos:position pos:line="299" pos:column="24"/></operator> <name pos:line="299" pos:column="25">SECBUFFER_TOKEN<pos:position pos:line="299" pos:column="40"/></name></expr>;<pos:position pos:line="299" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="300" pos:column="5">type_2<pos:position pos:line="300" pos:column="11"/></name><operator pos:line="300" pos:column="11">.<pos:position pos:line="300" pos:column="12"/></operator><name pos:line="300" pos:column="12">pvBuffer<pos:position pos:line="300" pos:column="20"/></name></name>   <operator pos:line="300" pos:column="23">=<pos:position pos:line="300" pos:column="24"/></operator> <name><name pos:line="300" pos:column="25">ntlm<pos:position pos:line="300" pos:column="29"/></name><operator pos:line="300" pos:column="29">-&gt;<pos:position pos:line="300" pos:column="34"/></operator><name pos:line="300" pos:column="31">type_2<pos:position pos:line="300" pos:column="37"/></name></name></expr>;<pos:position pos:line="300" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="301" pos:column="5">type_2<pos:position pos:line="301" pos:column="11"/></name><operator pos:line="301" pos:column="11">.<pos:position pos:line="301" pos:column="12"/></operator><name pos:line="301" pos:column="12">cbBuffer<pos:position pos:line="301" pos:column="20"/></name></name>   <operator pos:line="301" pos:column="23">=<pos:position pos:line="301" pos:column="24"/></operator> <name><name pos:line="301" pos:column="25">ntlm<pos:position pos:line="301" pos:column="29"/></name><operator pos:line="301" pos:column="29">-&gt;<pos:position pos:line="301" pos:column="34"/></operator><name pos:line="301" pos:column="31">n_type_2<pos:position pos:line="301" pos:column="39"/></name></name></expr>;<pos:position pos:line="301" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="302" pos:column="5">type_3<pos:position pos:line="302" pos:column="11"/></name><operator pos:line="302" pos:column="11">.<pos:position pos:line="302" pos:column="12"/></operator><name pos:line="302" pos:column="12">BufferType<pos:position pos:line="302" pos:column="22"/></name></name> <operator pos:line="302" pos:column="23">=<pos:position pos:line="302" pos:column="24"/></operator> <name pos:line="302" pos:column="25">SECBUFFER_TOKEN<pos:position pos:line="302" pos:column="40"/></name></expr>;<pos:position pos:line="302" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="303" pos:column="5">type_3<pos:position pos:line="303" pos:column="11"/></name><operator pos:line="303" pos:column="11">.<pos:position pos:line="303" pos:column="12"/></operator><name pos:line="303" pos:column="12">pvBuffer<pos:position pos:line="303" pos:column="20"/></name></name>   <operator pos:line="303" pos:column="23">=<pos:position pos:line="303" pos:column="24"/></operator> <name pos:line="303" pos:column="25">ntlmbuf<pos:position pos:line="303" pos:column="32"/></name></expr>;<pos:position pos:line="303" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="304" pos:column="5">type_3<pos:position pos:line="304" pos:column="11"/></name><operator pos:line="304" pos:column="11">.<pos:position pos:line="304" pos:column="12"/></operator><name pos:line="304" pos:column="12">cbBuffer<pos:position pos:line="304" pos:column="20"/></name></name>   <operator pos:line="304" pos:column="23">=<pos:position pos:line="304" pos:column="24"/></operator> <sizeof pos:line="304" pos:column="25">sizeof<argument_list pos:line="304" pos:column="31">(<argument><expr><name pos:line="304" pos:column="32">ntlmbuf<pos:position pos:line="304" pos:column="39"/></name></expr></argument>)<pos:position pos:line="304" pos:column="40"/></argument_list></sizeof></expr>;<pos:position pos:line="304" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name pos:line="306" pos:column="5">status<pos:position pos:line="306" pos:column="11"/></name> <operator pos:line="306" pos:column="12">=<pos:position pos:line="306" pos:column="13"/></operator> <call><name><name pos:line="306" pos:column="14">s_pSecFn<pos:position pos:line="306" pos:column="22"/></name><operator pos:line="306" pos:column="22">-&gt;<pos:position pos:line="306" pos:column="27"/></operator><name pos:line="306" pos:column="24">InitializeSecurityContext<pos:position pos:line="306" pos:column="49"/></name></name><argument_list pos:line="306" pos:column="49">(<argument><expr><operator pos:line="306" pos:column="50">&amp;<pos:position pos:line="306" pos:column="55"/></operator><name><name pos:line="306" pos:column="51">ntlm<pos:position pos:line="306" pos:column="55"/></name><operator pos:line="306" pos:column="55">-&gt;<pos:position pos:line="306" pos:column="60"/></operator><name pos:line="306" pos:column="57">handle<pos:position pos:line="306" pos:column="63"/></name></name></expr></argument>, <argument><expr><operator pos:line="306" pos:column="65">&amp;<pos:position pos:line="306" pos:column="70"/></operator><name><name pos:line="306" pos:column="66">ntlm<pos:position pos:line="306" pos:column="70"/></name><operator pos:line="306" pos:column="70">-&gt;<pos:position pos:line="306" pos:column="75"/></operator><name pos:line="306" pos:column="72">c_handle<pos:position pos:line="306" pos:column="80"/></name></name></expr></argument>,
                                       <argument><expr><operator pos:line="307" pos:column="40">(<pos:position pos:line="307" pos:column="41"/></operator><name pos:line="307" pos:column="41">char<pos:position pos:line="307" pos:column="45"/></name> <operator pos:line="307" pos:column="46">*<pos:position pos:line="307" pos:column="47"/></operator><operator pos:line="307" pos:column="47">)<pos:position pos:line="307" pos:column="48"/></operator> <name pos:line="307" pos:column="49">host<pos:position pos:line="307" pos:column="53"/></name></expr></argument>,
                                       <argument><expr><name pos:line="308" pos:column="40">ISC_REQ_CONFIDENTIALITY<pos:position pos:line="308" pos:column="63"/></name> <operator pos:line="308" pos:column="64">|<pos:position pos:line="308" pos:column="65"/></operator>
                                       <name pos:line="309" pos:column="40">ISC_REQ_REPLAY_DETECT<pos:position pos:line="309" pos:column="61"/></name> <operator pos:line="309" pos:column="62">|<pos:position pos:line="309" pos:column="63"/></operator>
                                       <name pos:line="310" pos:column="40">ISC_REQ_CONNECTION<pos:position pos:line="310" pos:column="58"/></name></expr></argument>,
                                       <argument><expr><literal type="number" pos:line="311" pos:column="40">0<pos:position pos:line="311" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="311" pos:column="43">SECURITY_NETWORK_DREP<pos:position pos:line="311" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="311" pos:column="66">&amp;<pos:position pos:line="311" pos:column="71"/></operator><name pos:line="311" pos:column="67">type_2_desc<pos:position pos:line="311" pos:column="78"/></name></expr></argument>,
                                       <argument><expr><literal type="number" pos:line="312" pos:column="40">0<pos:position pos:line="312" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="312" pos:column="43">&amp;<pos:position pos:line="312" pos:column="48"/></operator><name><name pos:line="312" pos:column="44">ntlm<pos:position pos:line="312" pos:column="48"/></name><operator pos:line="312" pos:column="48">-&gt;<pos:position pos:line="312" pos:column="53"/></operator><name pos:line="312" pos:column="50">c_handle<pos:position pos:line="312" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="312" pos:column="60">&amp;<pos:position pos:line="312" pos:column="65"/></operator><name pos:line="312" pos:column="61">type_3_desc<pos:position pos:line="312" pos:column="72"/></name></expr></argument>,
                                       <argument><expr><operator pos:line="313" pos:column="40">&amp;<pos:position pos:line="313" pos:column="45"/></operator><name pos:line="313" pos:column="41">attrs<pos:position pos:line="313" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="313" pos:column="48">&amp;<pos:position pos:line="313" pos:column="53"/></operator><name pos:line="313" pos:column="49">tsDummy<pos:position pos:line="313" pos:column="56"/></name></expr></argument>)<pos:position pos:line="313" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="313" pos:column="58"/></expr_stmt>

    <if pos:line="315" pos:column="5">if<condition pos:line="315" pos:column="7">(<expr><name pos:line="315" pos:column="8">status<pos:position pos:line="315" pos:column="14"/></name> <operator pos:line="315" pos:column="15">!=<pos:position pos:line="315" pos:column="17"/></operator> <name pos:line="315" pos:column="18">SEC_E_OK<pos:position pos:line="315" pos:column="26"/></name></expr>)<pos:position pos:line="315" pos:column="27"/></condition><then pos:line="315" pos:column="27">
      <block type="pseudo"><return pos:line="316" pos:column="7">return <expr><name pos:line="316" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="316" pos:column="30"/></name></expr>;<pos:position pos:line="316" pos:column="31"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="318" pos:column="5">size<pos:position pos:line="318" pos:column="9"/></name> <operator pos:line="318" pos:column="10">=<pos:position pos:line="318" pos:column="11"/></operator> <name><name pos:line="318" pos:column="12">type_3<pos:position pos:line="318" pos:column="18"/></name><operator pos:line="318" pos:column="18">.<pos:position pos:line="318" pos:column="19"/></operator><name pos:line="318" pos:column="19">cbBuffer<pos:position pos:line="318" pos:column="27"/></name></name></expr>;<pos:position pos:line="318" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="320" pos:column="5">ntlm_sspi_cleanup<pos:position pos:line="320" pos:column="22"/></name><argument_list pos:line="320" pos:column="22">(<argument><expr><name pos:line="320" pos:column="23">ntlm<pos:position pos:line="320" pos:column="27"/></name></expr></argument>)<pos:position pos:line="320" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="29"/></expr_stmt>

<cpp:else pos:line="322" pos:column="1">#<cpp:directive pos:line="322" pos:column="2">else<pos:position pos:line="322" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="323" pos:column="5">int<pos:position pos:line="323" pos:column="8"/></name></type> <name pos:line="323" pos:column="9">lmrespoff<pos:position pos:line="323" pos:column="18"/></name></decl>;<pos:position pos:line="323" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="324" pos:column="5">unsigned<pos:position pos:line="324" pos:column="13"/></name> <name pos:line="324" pos:column="14">char<pos:position pos:line="324" pos:column="18"/></name></type> <name><name pos:line="324" pos:column="19">lmresp<pos:position pos:line="324" pos:column="25"/></name><index pos:line="324" pos:column="25">[<expr><literal type="number" pos:line="324" pos:column="26">24<pos:position pos:line="324" pos:column="28"/></literal></expr>]<pos:position pos:line="324" pos:column="29"/></index></name></decl>;<pos:position pos:line="324" pos:column="30"/></decl_stmt> <comment type="block" pos:line="324" pos:column="31">/* fixed-size */</comment>
<cpp:if pos:line="325" pos:column="1">#<cpp:directive pos:line="325" pos:column="2">if<pos:position pos:line="325" pos:column="4"/></cpp:directive> <expr><name pos:line="325" pos:column="5">USE_NTRESPONSES<pos:position pos:line="325" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="326" pos:column="5">int<pos:position pos:line="326" pos:column="8"/></name></type> <name pos:line="326" pos:column="9">ntrespoff<pos:position pos:line="326" pos:column="18"/></name></decl>;<pos:position pos:line="326" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="327" pos:column="5">unsigned<pos:position pos:line="327" pos:column="13"/></name> <name pos:line="327" pos:column="14">char<pos:position pos:line="327" pos:column="18"/></name></type> <name><name pos:line="327" pos:column="19">ntresp<pos:position pos:line="327" pos:column="25"/></name><index pos:line="327" pos:column="25">[<expr><literal type="number" pos:line="327" pos:column="26">24<pos:position pos:line="327" pos:column="28"/></literal></expr>]<pos:position pos:line="327" pos:column="29"/></index></name></decl>;<pos:position pos:line="327" pos:column="30"/></decl_stmt> <comment type="block" pos:line="327" pos:column="31">/* fixed-size */</comment>
<cpp:endif pos:line="328" pos:column="1">#<cpp:directive pos:line="328" pos:column="2">endif<pos:position pos:line="328" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="329" pos:column="5">size_t<pos:position pos:line="329" pos:column="11"/></name></type> <name pos:line="329" pos:column="12">useroff<pos:position pos:line="329" pos:column="19"/></name></decl>;<pos:position pos:line="329" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="330" pos:column="5">const<pos:position pos:line="330" pos:column="10"/></specifier> <name pos:line="330" pos:column="11">char<pos:position pos:line="330" pos:column="15"/></name> <modifier pos:line="330" pos:column="16">*<pos:position pos:line="330" pos:column="17"/></modifier></type><name pos:line="330" pos:column="17">user<pos:position pos:line="330" pos:column="21"/></name></decl>;<pos:position pos:line="330" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="331" pos:column="5">size_t<pos:position pos:line="331" pos:column="11"/></name></type> <name pos:line="331" pos:column="12">userlen<pos:position pos:line="331" pos:column="19"/></name></decl>;<pos:position pos:line="331" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="333" pos:column="5">user<pos:position pos:line="333" pos:column="9"/></name> <operator pos:line="333" pos:column="10">=<pos:position pos:line="333" pos:column="11"/></operator> <call><name pos:line="333" pos:column="12">strchr<pos:position pos:line="333" pos:column="18"/></name><argument_list pos:line="333" pos:column="18">(<argument><expr><name pos:line="333" pos:column="19">userp<pos:position pos:line="333" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="333" pos:column="26">'\\'<pos:position pos:line="333" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="333" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="32"/></expr_stmt>
    <if pos:line="334" pos:column="5">if<condition pos:line="334" pos:column="7">(<expr><operator pos:line="334" pos:column="8">!<pos:position pos:line="334" pos:column="9"/></operator><name pos:line="334" pos:column="9">user<pos:position pos:line="334" pos:column="13"/></name></expr>)<pos:position pos:line="334" pos:column="14"/></condition><then pos:line="334" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><name pos:line="335" pos:column="7">user<pos:position pos:line="335" pos:column="11"/></name> <operator pos:line="335" pos:column="12">=<pos:position pos:line="335" pos:column="13"/></operator> <call><name pos:line="335" pos:column="14">strchr<pos:position pos:line="335" pos:column="20"/></name><argument_list pos:line="335" pos:column="20">(<argument><expr><name pos:line="335" pos:column="21">userp<pos:position pos:line="335" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="335" pos:column="28">'/'<pos:position pos:line="335" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="335" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="33"/></expr_stmt></block></then></if>

    <if pos:line="337" pos:column="5">if<condition pos:line="337" pos:column="7">(<expr><name pos:line="337" pos:column="8">user<pos:position pos:line="337" pos:column="12"/></name></expr>)<pos:position pos:line="337" pos:column="13"/></condition><then pos:line="337" pos:column="13"> <block pos:line="337" pos:column="14">{
      <expr_stmt><expr><name pos:line="338" pos:column="7">domain<pos:position pos:line="338" pos:column="13"/></name> <operator pos:line="338" pos:column="14">=<pos:position pos:line="338" pos:column="15"/></operator> <name pos:line="338" pos:column="16">userp<pos:position pos:line="338" pos:column="21"/></name></expr>;<pos:position pos:line="338" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="339" pos:column="7">domlen<pos:position pos:line="339" pos:column="13"/></name> <operator pos:line="339" pos:column="14">=<pos:position pos:line="339" pos:column="15"/></operator> <operator pos:line="339" pos:column="16">(<pos:position pos:line="339" pos:column="17"/></operator><name pos:line="339" pos:column="17">user<pos:position pos:line="339" pos:column="21"/></name> <operator pos:line="339" pos:column="22">-<pos:position pos:line="339" pos:column="23"/></operator> <name pos:line="339" pos:column="24">domain<pos:position pos:line="339" pos:column="30"/></name><operator pos:line="339" pos:column="30">)<pos:position pos:line="339" pos:column="31"/></operator></expr>;<pos:position pos:line="339" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="340" pos:column="7">user<pos:position pos:line="340" pos:column="11"/></name><operator pos:line="340" pos:column="11">++<pos:position pos:line="340" pos:column="13"/></operator></expr>;<pos:position pos:line="340" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="341" pos:column="6"/></block></then>
    <else pos:line="342" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="343" pos:column="7">user<pos:position pos:line="343" pos:column="11"/></name> <operator pos:line="343" pos:column="12">=<pos:position pos:line="343" pos:column="13"/></operator> <name pos:line="343" pos:column="14">userp<pos:position pos:line="343" pos:column="19"/></name></expr>;<pos:position pos:line="343" pos:column="20"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="344" pos:column="5">userlen<pos:position pos:line="344" pos:column="12"/></name> <operator pos:line="344" pos:column="13">=<pos:position pos:line="344" pos:column="14"/></operator> <call><name pos:line="344" pos:column="15">strlen<pos:position pos:line="344" pos:column="21"/></name><argument_list pos:line="344" pos:column="21">(<argument><expr><name pos:line="344" pos:column="22">user<pos:position pos:line="344" pos:column="26"/></name></expr></argument>)<pos:position pos:line="344" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="28"/></expr_stmt>

    <if pos:line="346" pos:column="5">if<condition pos:line="346" pos:column="7">(<expr><call><name pos:line="346" pos:column="8">gethostname<pos:position pos:line="346" pos:column="19"/></name><argument_list pos:line="346" pos:column="19">(<argument><expr><name pos:line="346" pos:column="20">host<pos:position pos:line="346" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="346" pos:column="26">HOSTNAME_MAX<pos:position pos:line="346" pos:column="38"/></name></expr></argument>)<pos:position pos:line="346" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="346" pos:column="40"/></condition><then pos:line="346" pos:column="40"> <block pos:line="346" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="347" pos:column="7">infof<pos:position pos:line="347" pos:column="12"/></name><argument_list pos:line="347" pos:column="12">(<argument><expr><name><name pos:line="347" pos:column="13">conn<pos:position pos:line="347" pos:column="17"/></name><operator pos:line="347" pos:column="17">-&gt;<pos:position pos:line="347" pos:column="22"/></operator><name pos:line="347" pos:column="19">data<pos:position pos:line="347" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="347" pos:column="25">"gethostname() failed, continuing without!"<pos:position pos:line="347" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="347" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="347" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="348" pos:column="7">hostlen<pos:position pos:line="348" pos:column="14"/></name> <operator pos:line="348" pos:column="15">=<pos:position pos:line="348" pos:column="16"/></operator> <literal type="number" pos:line="348" pos:column="17">0<pos:position pos:line="348" pos:column="18"/></literal></expr>;<pos:position pos:line="348" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="349" pos:column="6"/></block></then>
    <else pos:line="350" pos:column="5">else <block pos:line="350" pos:column="10">{
      <comment type="block" pos:line="351" pos:column="7">/* If the workstation if configured with a full DNS name (i.e.
       * workstation.somewhere.net) gethostname() returns the fully qualified
       * name, which NTLM doesn't like.
       */</comment>
      <decl_stmt><decl><type><name pos:line="355" pos:column="7">char<pos:position pos:line="355" pos:column="11"/></name> <modifier pos:line="355" pos:column="12">*<pos:position pos:line="355" pos:column="13"/></modifier></type><name pos:line="355" pos:column="13">dot<pos:position pos:line="355" pos:column="16"/></name> <init pos:line="355" pos:column="17">= <expr><call><name pos:line="355" pos:column="19">strchr<pos:position pos:line="355" pos:column="25"/></name><argument_list pos:line="355" pos:column="25">(<argument><expr><name pos:line="355" pos:column="26">host<pos:position pos:line="355" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="355" pos:column="32">'.'<pos:position pos:line="355" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="355" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="355" pos:column="37"/></decl_stmt>
      <if pos:line="356" pos:column="7">if<condition pos:line="356" pos:column="9">(<expr><name pos:line="356" pos:column="10">dot<pos:position pos:line="356" pos:column="13"/></name></expr>)<pos:position pos:line="356" pos:column="14"/></condition><then pos:line="356" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="357" pos:column="9">*<pos:position pos:line="357" pos:column="10"/></operator><name pos:line="357" pos:column="10">dot<pos:position pos:line="357" pos:column="13"/></name> <operator pos:line="357" pos:column="14">=<pos:position pos:line="357" pos:column="15"/></operator> <literal type="char" pos:line="357" pos:column="16">'\0'<pos:position pos:line="357" pos:column="20"/></literal></expr>;<pos:position pos:line="357" pos:column="21"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="358" pos:column="7">hostlen<pos:position pos:line="358" pos:column="14"/></name> <operator pos:line="358" pos:column="15">=<pos:position pos:line="358" pos:column="16"/></operator> <call><name pos:line="358" pos:column="17">strlen<pos:position pos:line="358" pos:column="23"/></name><argument_list pos:line="358" pos:column="23">(<argument><expr><name pos:line="358" pos:column="24">host<pos:position pos:line="358" pos:column="28"/></name></expr></argument>)<pos:position pos:line="358" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="358" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="359" pos:column="6"/></block></else></if>

<cpp:if pos:line="361" pos:column="1">#<cpp:directive pos:line="361" pos:column="2">if<pos:position pos:line="361" pos:column="4"/></cpp:directive> <expr><name pos:line="361" pos:column="5">USE_NTLM2SESSION<pos:position pos:line="361" pos:column="21"/></name></expr></cpp:if>
    <comment type="block" pos:line="362" pos:column="5">/* We don't support NTLM2 if we don't have USE_NTRESPONSES */</comment>
    <if pos:line="363" pos:column="5">if<condition pos:line="363" pos:column="7">(<expr><name><name pos:line="363" pos:column="8">ntlm<pos:position pos:line="363" pos:column="12"/></name><operator pos:line="363" pos:column="12">-&gt;<pos:position pos:line="363" pos:column="17"/></operator><name pos:line="363" pos:column="14">flags<pos:position pos:line="363" pos:column="19"/></name></name> <operator pos:line="363" pos:column="20">&amp;<pos:position pos:line="363" pos:column="25"/></operator> <name pos:line="363" pos:column="22">NTLMFLAG_NEGOTIATE_NTLM2_KEY<pos:position pos:line="363" pos:column="50"/></name></expr>)<pos:position pos:line="363" pos:column="51"/></condition><then pos:line="363" pos:column="51"> <block pos:line="363" pos:column="52">{
      <decl_stmt><decl><type><name pos:line="364" pos:column="7">unsigned<pos:position pos:line="364" pos:column="15"/></name> <name pos:line="364" pos:column="16">char<pos:position pos:line="364" pos:column="20"/></name></type> <name><name pos:line="364" pos:column="21">ntbuffer<pos:position pos:line="364" pos:column="29"/></name><index pos:line="364" pos:column="29">[<expr><literal type="number" pos:line="364" pos:column="30">0x18<pos:position pos:line="364" pos:column="34"/></literal></expr>]<pos:position pos:line="364" pos:column="35"/></index></name></decl>;<pos:position pos:line="364" pos:column="36"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="365" pos:column="7">unsigned<pos:position pos:line="365" pos:column="15"/></name> <name pos:line="365" pos:column="16">char<pos:position pos:line="365" pos:column="20"/></name></type> <name><name pos:line="365" pos:column="21">tmp<pos:position pos:line="365" pos:column="24"/></name><index pos:line="365" pos:column="24">[<expr><literal type="number" pos:line="365" pos:column="25">0x18<pos:position pos:line="365" pos:column="29"/></literal></expr>]<pos:position pos:line="365" pos:column="30"/></index></name></decl>;<pos:position pos:line="365" pos:column="31"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="366" pos:column="7">unsigned<pos:position pos:line="366" pos:column="15"/></name> <name pos:line="366" pos:column="16">char<pos:position pos:line="366" pos:column="20"/></name></type> <name><name pos:line="366" pos:column="21">md5sum<pos:position pos:line="366" pos:column="27"/></name><index pos:line="366" pos:column="27">[<expr><name pos:line="366" pos:column="28">MD5_DIGEST_LENGTH<pos:position pos:line="366" pos:column="45"/></name></expr>]<pos:position pos:line="366" pos:column="46"/></index></name></decl>;<pos:position pos:line="366" pos:column="47"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="367" pos:column="7">MD5_CTX<pos:position pos:line="367" pos:column="14"/></name></type> <name pos:line="367" pos:column="15">MD5pw<pos:position pos:line="367" pos:column="20"/></name></decl>;<pos:position pos:line="367" pos:column="21"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="368" pos:column="7">unsigned<pos:position pos:line="368" pos:column="15"/></name> <name pos:line="368" pos:column="16">char<pos:position pos:line="368" pos:column="20"/></name></type> <name><name pos:line="368" pos:column="21">entropy<pos:position pos:line="368" pos:column="28"/></name><index pos:line="368" pos:column="28">[<expr><literal type="number" pos:line="368" pos:column="29">8<pos:position pos:line="368" pos:column="30"/></literal></expr>]<pos:position pos:line="368" pos:column="31"/></index></name></decl>;<pos:position pos:line="368" pos:column="32"/></decl_stmt>

      <comment type="block" pos:line="370" pos:column="7">/* Need to create 8 bytes random data */</comment>
      <expr_stmt><expr><call><name pos:line="371" pos:column="7">Curl_ossl_seed<pos:position pos:line="371" pos:column="21"/></name><argument_list pos:line="371" pos:column="21">(<argument><expr><name><name pos:line="371" pos:column="22">conn<pos:position pos:line="371" pos:column="26"/></name><operator pos:line="371" pos:column="26">-&gt;<pos:position pos:line="371" pos:column="31"/></operator><name pos:line="371" pos:column="28">data<pos:position pos:line="371" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="371" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="34"/></expr_stmt> <comment type="block" pos:line="371" pos:column="35">/* Initiate the seed if not already done */</comment>
      <expr_stmt><expr><call><name pos:line="372" pos:column="7">RAND_bytes<pos:position pos:line="372" pos:column="17"/></name><argument_list pos:line="372" pos:column="17">(<argument><expr><name pos:line="372" pos:column="18">entropy<pos:position pos:line="372" pos:column="25"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="372" pos:column="26">8<pos:position pos:line="372" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="372" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="372" pos:column="29"/></expr_stmt>

      <comment type="block" pos:line="374" pos:column="7">/* 8 bytes random data as challenge in lmresp */</comment>
      <expr_stmt><expr><call><name pos:line="375" pos:column="7">memcpy<pos:position pos:line="375" pos:column="13"/></name><argument_list pos:line="375" pos:column="13">(<argument><expr><name pos:line="375" pos:column="14">lmresp<pos:position pos:line="375" pos:column="20"/></name></expr></argument>,<argument><expr><name pos:line="375" pos:column="21">entropy<pos:position pos:line="375" pos:column="28"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="375" pos:column="29">8<pos:position pos:line="375" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="375" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="375" pos:column="32"/></expr_stmt>
      <comment type="block" pos:line="376" pos:column="7">/* Pad with zeros */</comment>
      <expr_stmt><expr><call><name pos:line="377" pos:column="7">memset<pos:position pos:line="377" pos:column="13"/></name><argument_list pos:line="377" pos:column="13">(<argument><expr><name pos:line="377" pos:column="14">lmresp<pos:position pos:line="377" pos:column="20"/></name><operator pos:line="377" pos:column="20">+<pos:position pos:line="377" pos:column="21"/></operator><literal type="number" pos:line="377" pos:column="21">8<pos:position pos:line="377" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="377" pos:column="23">0<pos:position pos:line="377" pos:column="24"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="377" pos:column="25">0x10<pos:position pos:line="377" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="377" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="377" pos:column="31"/></expr_stmt>

      <comment type="block" pos:line="379" pos:column="7">/* Fill tmp with challenge(nonce?) + entropy */</comment>
      <expr_stmt><expr><call><name pos:line="380" pos:column="7">memcpy<pos:position pos:line="380" pos:column="13"/></name><argument_list pos:line="380" pos:column="13">(<argument><expr><name pos:line="380" pos:column="14">tmp<pos:position pos:line="380" pos:column="17"/></name></expr></argument>,<argument><expr><operator pos:line="380" pos:column="18">&amp;<pos:position pos:line="380" pos:column="23"/></operator><name><name pos:line="380" pos:column="19">ntlm<pos:position pos:line="380" pos:column="23"/></name><operator pos:line="380" pos:column="23">-&gt;<pos:position pos:line="380" pos:column="28"/></operator><name pos:line="380" pos:column="25">nonce<pos:position pos:line="380" pos:column="30"/></name><index pos:line="380" pos:column="30">[<expr><literal type="number" pos:line="380" pos:column="31">0<pos:position pos:line="380" pos:column="32"/></literal></expr>]<pos:position pos:line="380" pos:column="33"/></index></name></expr></argument>,<argument><expr><literal type="number" pos:line="380" pos:column="34">8<pos:position pos:line="380" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="380" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="381" pos:column="7">memcpy<pos:position pos:line="381" pos:column="13"/></name><argument_list pos:line="381" pos:column="13">(<argument><expr><name pos:line="381" pos:column="14">tmp<pos:position pos:line="381" pos:column="17"/></name><operator pos:line="381" pos:column="17">+<pos:position pos:line="381" pos:column="18"/></operator><literal type="number" pos:line="381" pos:column="18">8<pos:position pos:line="381" pos:column="19"/></literal></expr></argument>,<argument><expr><name pos:line="381" pos:column="20">entropy<pos:position pos:line="381" pos:column="27"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="381" pos:column="28">8<pos:position pos:line="381" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="381" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="381" pos:column="31"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="383" pos:column="7">MD5_Init<pos:position pos:line="383" pos:column="15"/></name><argument_list pos:line="383" pos:column="15">(<argument><expr><operator pos:line="383" pos:column="16">&amp;<pos:position pos:line="383" pos:column="21"/></operator><name pos:line="383" pos:column="17">MD5pw<pos:position pos:line="383" pos:column="22"/></name></expr></argument>)<pos:position pos:line="383" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="383" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="384" pos:column="7">MD5_Update<pos:position pos:line="384" pos:column="17"/></name><argument_list pos:line="384" pos:column="17">(<argument><expr><operator pos:line="384" pos:column="18">&amp;<pos:position pos:line="384" pos:column="23"/></operator><name pos:line="384" pos:column="19">MD5pw<pos:position pos:line="384" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="384" pos:column="26">tmp<pos:position pos:line="384" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="384" pos:column="31">16<pos:position pos:line="384" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="384" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="384" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="385" pos:column="7">MD5_Final<pos:position pos:line="385" pos:column="16"/></name><argument_list pos:line="385" pos:column="16">(<argument><expr><name pos:line="385" pos:column="17">md5sum<pos:position pos:line="385" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="385" pos:column="25">&amp;<pos:position pos:line="385" pos:column="30"/></operator><name pos:line="385" pos:column="26">MD5pw<pos:position pos:line="385" pos:column="31"/></name></expr></argument>)<pos:position pos:line="385" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="385" pos:column="33"/></expr_stmt>
      <comment type="block" pos:line="386" pos:column="7">/* We shall only use the first 8 bytes of md5sum,
         but the des code in lm_resp only encrypt the first 8 bytes */</comment>
      <if pos:line="388" pos:column="7">if<condition pos:line="388" pos:column="9">(<expr><call><name pos:line="388" pos:column="10">mk_nt_hash<pos:position pos:line="388" pos:column="20"/></name><argument_list pos:line="388" pos:column="20">(<argument><expr><name><name pos:line="388" pos:column="21">conn<pos:position pos:line="388" pos:column="25"/></name><operator pos:line="388" pos:column="25">-&gt;<pos:position pos:line="388" pos:column="30"/></operator><name pos:line="388" pos:column="27">data<pos:position pos:line="388" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="388" pos:column="33">passwdp<pos:position pos:line="388" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="388" pos:column="42">ntbuffer<pos:position pos:line="388" pos:column="50"/></name></expr></argument>)<pos:position pos:line="388" pos:column="51"/></argument_list></call> <operator pos:line="388" pos:column="52">==<pos:position pos:line="388" pos:column="54"/></operator> <name pos:line="388" pos:column="55">CURLE_OUT_OF_MEMORY<pos:position pos:line="388" pos:column="74"/></name></expr>)<pos:position pos:line="388" pos:column="75"/></condition><then pos:line="388" pos:column="75">
        <block type="pseudo"><return pos:line="389" pos:column="9">return <expr><name pos:line="389" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="389" pos:column="35"/></name></expr>;<pos:position pos:line="389" pos:column="36"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="390" pos:column="7">lm_resp<pos:position pos:line="390" pos:column="14"/></name><argument_list pos:line="390" pos:column="14">(<argument><expr><name pos:line="390" pos:column="15">ntbuffer<pos:position pos:line="390" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="390" pos:column="25">md5sum<pos:position pos:line="390" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="390" pos:column="33">ntresp<pos:position pos:line="390" pos:column="39"/></name></expr></argument>)<pos:position pos:line="390" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="390" pos:column="41"/></expr_stmt>

      <comment type="block" pos:line="392" pos:column="7">/* End of NTLM2 Session code */</comment>
    }<pos:position pos:line="393" pos:column="6"/></block></then>
    <else pos:line="394" pos:column="5">else <block pos:line="394" pos:column="10">{
<cpp:endif pos:line="395" pos:column="1">#<cpp:directive pos:line="395" pos:column="2">endif<pos:position pos:line="395" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="397" pos:column="1">#<cpp:directive pos:line="397" pos:column="2">if<pos:position pos:line="397" pos:column="4"/></cpp:directive> <expr><name pos:line="397" pos:column="5">USE_NTRESPONSES<pos:position pos:line="397" pos:column="20"/></name></expr></cpp:if>
      <decl_stmt><decl><type><name pos:line="398" pos:column="7">unsigned<pos:position pos:line="398" pos:column="15"/></name> <name pos:line="398" pos:column="16">char<pos:position pos:line="398" pos:column="20"/></name></type> <name><name pos:line="398" pos:column="21">ntbuffer<pos:position pos:line="398" pos:column="29"/></name><index pos:line="398" pos:column="29">[<expr><literal type="number" pos:line="398" pos:column="30">0x18<pos:position pos:line="398" pos:column="34"/></literal></expr>]<pos:position pos:line="398" pos:column="35"/></index></name></decl>;<pos:position pos:line="398" pos:column="36"/></decl_stmt>
<cpp:endif pos:line="399" pos:column="1">#<cpp:directive pos:line="399" pos:column="2">endif<pos:position pos:line="399" pos:column="7"/></cpp:directive></cpp:endif>
      <decl_stmt><decl><type><name pos:line="400" pos:column="7">unsigned<pos:position pos:line="400" pos:column="15"/></name> <name pos:line="400" pos:column="16">char<pos:position pos:line="400" pos:column="20"/></name></type> <name><name pos:line="400" pos:column="21">lmbuffer<pos:position pos:line="400" pos:column="29"/></name><index pos:line="400" pos:column="29">[<expr><literal type="number" pos:line="400" pos:column="30">0x18<pos:position pos:line="400" pos:column="34"/></literal></expr>]<pos:position pos:line="400" pos:column="35"/></index></name></decl>;<pos:position pos:line="400" pos:column="36"/></decl_stmt>

<cpp:if pos:line="402" pos:column="1">#<cpp:directive pos:line="402" pos:column="2">if<pos:position pos:line="402" pos:column="4"/></cpp:directive> <expr><name pos:line="402" pos:column="5">USE_NTRESPONSES<pos:position pos:line="402" pos:column="20"/></name></expr></cpp:if>
      <if pos:line="403" pos:column="7">if<condition pos:line="403" pos:column="9">(<expr><call><name pos:line="403" pos:column="10">mk_nt_hash<pos:position pos:line="403" pos:column="20"/></name><argument_list pos:line="403" pos:column="20">(<argument><expr><name><name pos:line="403" pos:column="21">conn<pos:position pos:line="403" pos:column="25"/></name><operator pos:line="403" pos:column="25">-&gt;<pos:position pos:line="403" pos:column="30"/></operator><name pos:line="403" pos:column="27">data<pos:position pos:line="403" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="403" pos:column="33">passwdp<pos:position pos:line="403" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="403" pos:column="42">ntbuffer<pos:position pos:line="403" pos:column="50"/></name></expr></argument>)<pos:position pos:line="403" pos:column="51"/></argument_list></call> <operator pos:line="403" pos:column="52">==<pos:position pos:line="403" pos:column="54"/></operator> <name pos:line="403" pos:column="55">CURLE_OUT_OF_MEMORY<pos:position pos:line="403" pos:column="74"/></name></expr>)<pos:position pos:line="403" pos:column="75"/></condition><then pos:line="403" pos:column="75">
        <block type="pseudo"><return pos:line="404" pos:column="9">return <expr><name pos:line="404" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="404" pos:column="35"/></name></expr>;<pos:position pos:line="404" pos:column="36"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="405" pos:column="7">lm_resp<pos:position pos:line="405" pos:column="14"/></name><argument_list pos:line="405" pos:column="14">(<argument><expr><name pos:line="405" pos:column="15">ntbuffer<pos:position pos:line="405" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="405" pos:column="25">&amp;<pos:position pos:line="405" pos:column="30"/></operator><name><name pos:line="405" pos:column="26">ntlm<pos:position pos:line="405" pos:column="30"/></name><operator pos:line="405" pos:column="30">-&gt;<pos:position pos:line="405" pos:column="35"/></operator><name pos:line="405" pos:column="32">nonce<pos:position pos:line="405" pos:column="37"/></name><index pos:line="405" pos:column="37">[<expr><literal type="number" pos:line="405" pos:column="38">0<pos:position pos:line="405" pos:column="39"/></literal></expr>]<pos:position pos:line="405" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="405" pos:column="42">ntresp<pos:position pos:line="405" pos:column="48"/></name></expr></argument>)<pos:position pos:line="405" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="405" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="406" pos:column="1">#<cpp:directive pos:line="406" pos:column="2">endif<pos:position pos:line="406" pos:column="7"/></cpp:directive></cpp:endif>

      <expr_stmt><expr><call><name pos:line="408" pos:column="7">mk_lm_hash<pos:position pos:line="408" pos:column="17"/></name><argument_list pos:line="408" pos:column="17">(<argument><expr><name><name pos:line="408" pos:column="18">conn<pos:position pos:line="408" pos:column="22"/></name><operator pos:line="408" pos:column="22">-&gt;<pos:position pos:line="408" pos:column="27"/></operator><name pos:line="408" pos:column="24">data<pos:position pos:line="408" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="408" pos:column="30">passwdp<pos:position pos:line="408" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="408" pos:column="39">lmbuffer<pos:position pos:line="408" pos:column="47"/></name></expr></argument>)<pos:position pos:line="408" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="408" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="409" pos:column="7">lm_resp<pos:position pos:line="409" pos:column="14"/></name><argument_list pos:line="409" pos:column="14">(<argument><expr><name pos:line="409" pos:column="15">lmbuffer<pos:position pos:line="409" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="409" pos:column="25">&amp;<pos:position pos:line="409" pos:column="30"/></operator><name><name pos:line="409" pos:column="26">ntlm<pos:position pos:line="409" pos:column="30"/></name><operator pos:line="409" pos:column="30">-&gt;<pos:position pos:line="409" pos:column="35"/></operator><name pos:line="409" pos:column="32">nonce<pos:position pos:line="409" pos:column="37"/></name><index pos:line="409" pos:column="37">[<expr><literal type="number" pos:line="409" pos:column="38">0<pos:position pos:line="409" pos:column="39"/></literal></expr>]<pos:position pos:line="409" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="409" pos:column="42">lmresp<pos:position pos:line="409" pos:column="48"/></name></expr></argument>)<pos:position pos:line="409" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="409" pos:column="50"/></expr_stmt>
      <comment type="block" pos:line="410" pos:column="7">/* A safer but less compatible alternative is:
       *   lm_resp(ntbuffer, &amp;ntlm-&gt;nonce[0], lmresp);
       * See http://davenport.sourceforge.net/ntlm.html#ntlmVersion2 */</comment>
<cpp:if pos:line="413" pos:column="1">#<cpp:directive pos:line="413" pos:column="2">if<pos:position pos:line="413" pos:column="4"/></cpp:directive> <expr><name pos:line="413" pos:column="5">USE_NTLM2SESSION<pos:position pos:line="413" pos:column="21"/></name></expr></cpp:if>
    }<pos:position pos:line="414" pos:column="6"/></block></else></if>
<cpp:endif pos:line="415" pos:column="1">#<cpp:directive pos:line="415" pos:column="2">endif<pos:position pos:line="415" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="417" pos:column="5">lmrespoff<pos:position pos:line="417" pos:column="14"/></name> <operator pos:line="417" pos:column="15">=<pos:position pos:line="417" pos:column="16"/></operator> <literal type="number" pos:line="417" pos:column="17">64<pos:position pos:line="417" pos:column="19"/></literal></expr>;<pos:position pos:line="417" pos:column="20"/></expr_stmt> <comment type="block" pos:line="417" pos:column="21">/* size of the message header */</comment>
<cpp:if pos:line="418" pos:column="1">#<cpp:directive pos:line="418" pos:column="2">if<pos:position pos:line="418" pos:column="4"/></cpp:directive> <expr><name pos:line="418" pos:column="5">USE_NTRESPONSES<pos:position pos:line="418" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="419" pos:column="5">ntrespoff<pos:position pos:line="419" pos:column="14"/></name> <operator pos:line="419" pos:column="15">=<pos:position pos:line="419" pos:column="16"/></operator> <name pos:line="419" pos:column="17">lmrespoff<pos:position pos:line="419" pos:column="26"/></name> <operator pos:line="419" pos:column="27">+<pos:position pos:line="419" pos:column="28"/></operator> <literal type="number" pos:line="419" pos:column="29">0x18<pos:position pos:line="419" pos:column="33"/></literal></expr>;<pos:position pos:line="419" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="420" pos:column="5">domoff<pos:position pos:line="420" pos:column="11"/></name> <operator pos:line="420" pos:column="12">=<pos:position pos:line="420" pos:column="13"/></operator> <name pos:line="420" pos:column="14">ntrespoff<pos:position pos:line="420" pos:column="23"/></name> <operator pos:line="420" pos:column="24">+<pos:position pos:line="420" pos:column="25"/></operator> <literal type="number" pos:line="420" pos:column="26">0x18<pos:position pos:line="420" pos:column="30"/></literal></expr>;<pos:position pos:line="420" pos:column="31"/></expr_stmt>
<cpp:else pos:line="421" pos:column="1">#<cpp:directive pos:line="421" pos:column="2">else<pos:position pos:line="421" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="422" pos:column="5">domoff<pos:position pos:line="422" pos:column="11"/></name> <operator pos:line="422" pos:column="12">=<pos:position pos:line="422" pos:column="13"/></operator> <name pos:line="422" pos:column="14">lmrespoff<pos:position pos:line="422" pos:column="23"/></name> <operator pos:line="422" pos:column="24">+<pos:position pos:line="422" pos:column="25"/></operator> <literal type="number" pos:line="422" pos:column="26">0x18<pos:position pos:line="422" pos:column="30"/></literal></expr>;<pos:position pos:line="422" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="423" pos:column="1">#<cpp:directive pos:line="423" pos:column="2">endif<pos:position pos:line="423" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="424" pos:column="5">useroff<pos:position pos:line="424" pos:column="12"/></name> <operator pos:line="424" pos:column="13">=<pos:position pos:line="424" pos:column="14"/></operator> <name pos:line="424" pos:column="15">domoff<pos:position pos:line="424" pos:column="21"/></name> <operator pos:line="424" pos:column="22">+<pos:position pos:line="424" pos:column="23"/></operator> <name pos:line="424" pos:column="24">domlen<pos:position pos:line="424" pos:column="30"/></name></expr>;<pos:position pos:line="424" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="425" pos:column="5">hostoff<pos:position pos:line="425" pos:column="12"/></name> <operator pos:line="425" pos:column="13">=<pos:position pos:line="425" pos:column="14"/></operator> <name pos:line="425" pos:column="15">useroff<pos:position pos:line="425" pos:column="22"/></name> <operator pos:line="425" pos:column="23">+<pos:position pos:line="425" pos:column="24"/></operator> <name pos:line="425" pos:column="25">userlen<pos:position pos:line="425" pos:column="32"/></name></expr>;<pos:position pos:line="425" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="427" pos:column="5">/*
     * In the case the server sets the flag NTLMFLAG_NEGOTIATE_UNICODE, we
     * need to filter it off because libcurl doesn't UNICODE encode the
     * strings it packs into the NTLM authenticate packet.
     */</comment>
    <expr_stmt><expr><name><name pos:line="432" pos:column="5">ntlm<pos:position pos:line="432" pos:column="9"/></name><operator pos:line="432" pos:column="9">-&gt;<pos:position pos:line="432" pos:column="14"/></operator><name pos:line="432" pos:column="11">flags<pos:position pos:line="432" pos:column="16"/></name></name> <operator pos:line="432" pos:column="17">&amp;=<pos:position pos:line="432" pos:column="23"/></operator> <operator pos:line="432" pos:column="20">~<pos:position pos:line="432" pos:column="21"/></operator><name pos:line="432" pos:column="21">NTLMFLAG_NEGOTIATE_UNICODE<pos:position pos:line="432" pos:column="47"/></name></expr>;<pos:position pos:line="432" pos:column="48"/></expr_stmt>

    <comment type="block" pos:line="434" pos:column="5">/* Create the big type-3 message binary blob */</comment>
    <expr_stmt><expr><name pos:line="435" pos:column="5">size<pos:position pos:line="435" pos:column="9"/></name> <operator pos:line="435" pos:column="10">=<pos:position pos:line="435" pos:column="11"/></operator> <call><name pos:line="435" pos:column="12">snprintf<pos:position pos:line="435" pos:column="20"/></name><argument_list pos:line="435" pos:column="20">(<argument><expr><operator pos:line="435" pos:column="21">(<pos:position pos:line="435" pos:column="22"/></operator><name pos:line="435" pos:column="22">char<pos:position pos:line="435" pos:column="26"/></name> <operator pos:line="435" pos:column="27">*<pos:position pos:line="435" pos:column="28"/></operator><operator pos:line="435" pos:column="28">)<pos:position pos:line="435" pos:column="29"/></operator><name pos:line="435" pos:column="29">ntlmbuf<pos:position pos:line="435" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="435" pos:column="38">sizeof<argument_list pos:line="435" pos:column="44">(<argument><expr><name pos:line="435" pos:column="45">ntlmbuf<pos:position pos:line="435" pos:column="52"/></name></expr></argument>)<pos:position pos:line="435" pos:column="53"/></argument_list></sizeof></expr></argument>,
                    <argument><expr><name pos:line="436" pos:column="21">NTLMSSP_SIGNATURE<pos:position pos:line="436" pos:column="38"/></name> <literal type="string" pos:line="436" pos:column="39">"%c"<pos:position pos:line="436" pos:column="43"/></literal>
                    <literal type="string" pos:line="437" pos:column="21">"\x03%c%c%c"<pos:position pos:line="437" pos:column="33"/></literal> <comment type="block" pos:line="437" pos:column="34">/* type-3, 32 bits */</comment>

                    <literal type="string" pos:line="439" pos:column="21">"%c%c"<pos:position pos:line="439" pos:column="27"/></literal> <comment type="block" pos:line="439" pos:column="28">/* LanManager length */</comment>
                    <literal type="string" pos:line="440" pos:column="21">"%c%c"<pos:position pos:line="440" pos:column="27"/></literal> <comment type="block" pos:line="440" pos:column="28">/* LanManager allocated space */</comment>
                    <literal type="string" pos:line="441" pos:column="21">"%c%c"<pos:position pos:line="441" pos:column="27"/></literal> <comment type="block" pos:line="441" pos:column="28">/* LanManager offset */</comment>
                    <literal type="string" pos:line="442" pos:column="21">"%c%c"<pos:position pos:line="442" pos:column="27"/></literal> <comment type="block" pos:line="442" pos:column="28">/* 2 zeroes */</comment>

                    <literal type="string" pos:line="444" pos:column="21">"%c%c"<pos:position pos:line="444" pos:column="27"/></literal> <comment type="block" pos:line="444" pos:column="28">/* NT-response length */</comment>
                    <literal type="string" pos:line="445" pos:column="21">"%c%c"<pos:position pos:line="445" pos:column="27"/></literal> <comment type="block" pos:line="445" pos:column="28">/* NT-response allocated space */</comment>
                    <literal type="string" pos:line="446" pos:column="21">"%c%c"<pos:position pos:line="446" pos:column="27"/></literal> <comment type="block" pos:line="446" pos:column="28">/* NT-response offset */</comment>
                    <literal type="string" pos:line="447" pos:column="21">"%c%c"<pos:position pos:line="447" pos:column="27"/></literal> <comment type="block" pos:line="447" pos:column="28">/* 2 zeroes */</comment>

                    <literal type="string" pos:line="449" pos:column="21">"%c%c"<pos:position pos:line="449" pos:column="27"/></literal>  <comment type="block" pos:line="449" pos:column="29">/* domain length */</comment>
                    <literal type="string" pos:line="450" pos:column="21">"%c%c"<pos:position pos:line="450" pos:column="27"/></literal>  <comment type="block" pos:line="450" pos:column="29">/* domain allocated space */</comment>
                    <literal type="string" pos:line="451" pos:column="21">"%c%c"<pos:position pos:line="451" pos:column="27"/></literal>  <comment type="block" pos:line="451" pos:column="29">/* domain name offset */</comment>
                    <literal type="string" pos:line="452" pos:column="21">"%c%c"<pos:position pos:line="452" pos:column="27"/></literal>  <comment type="block" pos:line="452" pos:column="29">/* 2 zeroes */</comment>

                    <literal type="string" pos:line="454" pos:column="21">"%c%c"<pos:position pos:line="454" pos:column="27"/></literal>  <comment type="block" pos:line="454" pos:column="29">/* user length */</comment>
                    <literal type="string" pos:line="455" pos:column="21">"%c%c"<pos:position pos:line="455" pos:column="27"/></literal>  <comment type="block" pos:line="455" pos:column="29">/* user allocated space */</comment>
                    <literal type="string" pos:line="456" pos:column="21">"%c%c"<pos:position pos:line="456" pos:column="27"/></literal>  <comment type="block" pos:line="456" pos:column="29">/* user offset */</comment>
                    <literal type="string" pos:line="457" pos:column="21">"%c%c"<pos:position pos:line="457" pos:column="27"/></literal>  <comment type="block" pos:line="457" pos:column="29">/* 2 zeroes */</comment>

                    <literal type="string" pos:line="459" pos:column="21">"%c%c"<pos:position pos:line="459" pos:column="27"/></literal>  <comment type="block" pos:line="459" pos:column="29">/* host length */</comment>
                    <literal type="string" pos:line="460" pos:column="21">"%c%c"<pos:position pos:line="460" pos:column="27"/></literal>  <comment type="block" pos:line="460" pos:column="29">/* host allocated space */</comment>
                    <literal type="string" pos:line="461" pos:column="21">"%c%c"<pos:position pos:line="461" pos:column="27"/></literal>  <comment type="block" pos:line="461" pos:column="29">/* host offset */</comment>
                    <literal type="string" pos:line="462" pos:column="21">"%c%c"<pos:position pos:line="462" pos:column="27"/></literal>  <comment type="block" pos:line="462" pos:column="29">/* 2 zeroes */</comment>

                    <literal type="string" pos:line="464" pos:column="21">"%c%c"<pos:position pos:line="464" pos:column="27"/></literal>  <comment type="block" pos:line="464" pos:column="29">/* session key length (unknown purpose) */</comment>
                    <literal type="string" pos:line="465" pos:column="21">"%c%c"<pos:position pos:line="465" pos:column="27"/></literal>  <comment type="block" pos:line="465" pos:column="29">/* session key allocated space (unknown purpose) */</comment>
                    <literal type="string" pos:line="466" pos:column="21">"%c%c"<pos:position pos:line="466" pos:column="27"/></literal>  <comment type="block" pos:line="466" pos:column="29">/* session key offset (unknown purpose) */</comment>
                    <literal type="string" pos:line="467" pos:column="21">"%c%c"<pos:position pos:line="467" pos:column="27"/></literal>  <comment type="block" pos:line="467" pos:column="29">/* 2 zeroes */</comment>

                    <literal type="string" pos:line="469" pos:column="21">"%c%c%c%c"<pos:position pos:line="469" pos:column="31"/></literal></expr></argument> <comment type="block" pos:line="469" pos:column="32">/* flags */</comment>

                    <comment type="block" pos:line="471" pos:column="21">/* domain string */</comment>
                    <comment type="block" pos:line="472" pos:column="21">/* user string */</comment>
                    <comment type="block" pos:line="473" pos:column="21">/* host string */</comment>
                    <comment type="block" pos:line="474" pos:column="21">/* LanManager response */</comment>
                    <comment type="block" pos:line="475" pos:column="21">/* NT response */</comment>
                    ,
                    <argument><expr><literal type="number" pos:line="477" pos:column="21">0<pos:position pos:line="477" pos:column="22"/></literal></expr></argument>, <comment type="block" pos:line="477" pos:column="24">/* zero termination */</comment>
                    <argument><expr><literal type="number" pos:line="478" pos:column="21">0<pos:position pos:line="478" pos:column="22"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="478" pos:column="23">0<pos:position pos:line="478" pos:column="24"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="478" pos:column="25">0<pos:position pos:line="478" pos:column="26"/></literal></expr></argument>, <comment type="block" pos:line="478" pos:column="28">/* type-3 long, the 24 upper bits */</comment>

                    <argument><expr><call><name pos:line="480" pos:column="21">SHORTPAIR<pos:position pos:line="480" pos:column="30"/></name><argument_list pos:line="480" pos:column="30">(<argument><expr><literal type="number" pos:line="480" pos:column="31">0x18<pos:position pos:line="480" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="480" pos:column="36"/></argument_list></call></expr></argument>,  <comment type="block" pos:line="480" pos:column="39">/* LanManager response length, twice */</comment>
                    <argument><expr><call><name pos:line="481" pos:column="21">SHORTPAIR<pos:position pos:line="481" pos:column="30"/></name><argument_list pos:line="481" pos:column="30">(<argument><expr><literal type="number" pos:line="481" pos:column="31">0x18<pos:position pos:line="481" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="481" pos:column="36"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="482" pos:column="21">SHORTPAIR<pos:position pos:line="482" pos:column="30"/></name><argument_list pos:line="482" pos:column="30">(<argument><expr><name pos:line="482" pos:column="31">lmrespoff<pos:position pos:line="482" pos:column="40"/></name></expr></argument>)<pos:position pos:line="482" pos:column="41"/></argument_list></call></expr></argument>,
                    <argument><expr><literal type="number" pos:line="483" pos:column="21">0x0<pos:position pos:line="483" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="483" pos:column="26">0x0<pos:position pos:line="483" pos:column="29"/></literal></expr></argument>,

<cpp:if pos:line="485" pos:column="1">#<cpp:directive pos:line="485" pos:column="2">if<pos:position pos:line="485" pos:column="4"/></cpp:directive> <expr><name pos:line="485" pos:column="5">USE_NTRESPONSES<pos:position pos:line="485" pos:column="20"/></name></expr></cpp:if>
                    <argument><expr><call><name pos:line="486" pos:column="21">SHORTPAIR<pos:position pos:line="486" pos:column="30"/></name><argument_list pos:line="486" pos:column="30">(<argument><expr><literal type="number" pos:line="486" pos:column="31">0x18<pos:position pos:line="486" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="486" pos:column="36"/></argument_list></call></expr></argument>,  <comment type="block" pos:line="486" pos:column="39">/* NT-response length, twice */</comment>
                    <argument><expr><call><name pos:line="487" pos:column="21">SHORTPAIR<pos:position pos:line="487" pos:column="30"/></name><argument_list pos:line="487" pos:column="30">(<argument><expr><literal type="number" pos:line="487" pos:column="31">0x18<pos:position pos:line="487" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="487" pos:column="36"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="488" pos:column="21">SHORTPAIR<pos:position pos:line="488" pos:column="30"/></name><argument_list pos:line="488" pos:column="30">(<argument><expr><name pos:line="488" pos:column="31">ntrespoff<pos:position pos:line="488" pos:column="40"/></name></expr></argument>)<pos:position pos:line="488" pos:column="41"/></argument_list></call></expr></argument>,
                    <argument><expr><literal type="number" pos:line="489" pos:column="21">0x0<pos:position pos:line="489" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="489" pos:column="26">0x0<pos:position pos:line="489" pos:column="29"/></literal></expr></argument>,
<cpp:else pos:line="490" pos:column="1">#<cpp:directive pos:line="490" pos:column="2">else<pos:position pos:line="490" pos:column="6"/></cpp:directive></cpp:else>
                    <argument><expr><literal type="number" pos:line="491" pos:column="21">0x0<pos:position pos:line="491" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="491" pos:column="26">0x0<pos:position pos:line="491" pos:column="29"/></literal></expr></argument>,
                    <argument><expr><literal type="number" pos:line="492" pos:column="21">0x0<pos:position pos:line="492" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="492" pos:column="26">0x0<pos:position pos:line="492" pos:column="29"/></literal></expr></argument>,
                    <argument><expr><literal type="number" pos:line="493" pos:column="21">0x0<pos:position pos:line="493" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="493" pos:column="26">0x0<pos:position pos:line="493" pos:column="29"/></literal></expr></argument>,
                    <argument><expr><literal type="number" pos:line="494" pos:column="21">0x0<pos:position pos:line="494" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="494" pos:column="26">0x0<pos:position pos:line="494" pos:column="29"/></literal></expr></argument>,
<cpp:endif pos:line="495" pos:column="1">#<cpp:directive pos:line="495" pos:column="2">endif<pos:position pos:line="495" pos:column="7"/></cpp:directive></cpp:endif>
                    <argument><expr><call><name pos:line="496" pos:column="21">SHORTPAIR<pos:position pos:line="496" pos:column="30"/></name><argument_list pos:line="496" pos:column="30">(<argument><expr><name pos:line="496" pos:column="31">domlen<pos:position pos:line="496" pos:column="37"/></name></expr></argument>)<pos:position pos:line="496" pos:column="38"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="497" pos:column="21">SHORTPAIR<pos:position pos:line="497" pos:column="30"/></name><argument_list pos:line="497" pos:column="30">(<argument><expr><name pos:line="497" pos:column="31">domlen<pos:position pos:line="497" pos:column="37"/></name></expr></argument>)<pos:position pos:line="497" pos:column="38"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="498" pos:column="21">SHORTPAIR<pos:position pos:line="498" pos:column="30"/></name><argument_list pos:line="498" pos:column="30">(<argument><expr><name pos:line="498" pos:column="31">domoff<pos:position pos:line="498" pos:column="37"/></name></expr></argument>)<pos:position pos:line="498" pos:column="38"/></argument_list></call></expr></argument>,
                    <argument><expr><literal type="number" pos:line="499" pos:column="21">0x0<pos:position pos:line="499" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="499" pos:column="26">0x0<pos:position pos:line="499" pos:column="29"/></literal></expr></argument>,

                    <argument><expr><call><name pos:line="501" pos:column="21">SHORTPAIR<pos:position pos:line="501" pos:column="30"/></name><argument_list pos:line="501" pos:column="30">(<argument><expr><name pos:line="501" pos:column="31">userlen<pos:position pos:line="501" pos:column="38"/></name></expr></argument>)<pos:position pos:line="501" pos:column="39"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="502" pos:column="21">SHORTPAIR<pos:position pos:line="502" pos:column="30"/></name><argument_list pos:line="502" pos:column="30">(<argument><expr><name pos:line="502" pos:column="31">userlen<pos:position pos:line="502" pos:column="38"/></name></expr></argument>)<pos:position pos:line="502" pos:column="39"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="503" pos:column="21">SHORTPAIR<pos:position pos:line="503" pos:column="30"/></name><argument_list pos:line="503" pos:column="30">(<argument><expr><name pos:line="503" pos:column="31">useroff<pos:position pos:line="503" pos:column="38"/></name></expr></argument>)<pos:position pos:line="503" pos:column="39"/></argument_list></call></expr></argument>,
                    <argument><expr><literal type="number" pos:line="504" pos:column="21">0x0<pos:position pos:line="504" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="504" pos:column="26">0x0<pos:position pos:line="504" pos:column="29"/></literal></expr></argument>,

                    <argument><expr><call><name pos:line="506" pos:column="21">SHORTPAIR<pos:position pos:line="506" pos:column="30"/></name><argument_list pos:line="506" pos:column="30">(<argument><expr><name pos:line="506" pos:column="31">hostlen<pos:position pos:line="506" pos:column="38"/></name></expr></argument>)<pos:position pos:line="506" pos:column="39"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="507" pos:column="21">SHORTPAIR<pos:position pos:line="507" pos:column="30"/></name><argument_list pos:line="507" pos:column="30">(<argument><expr><name pos:line="507" pos:column="31">hostlen<pos:position pos:line="507" pos:column="38"/></name></expr></argument>)<pos:position pos:line="507" pos:column="39"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="508" pos:column="21">SHORTPAIR<pos:position pos:line="508" pos:column="30"/></name><argument_list pos:line="508" pos:column="30">(<argument><expr><name pos:line="508" pos:column="31">hostoff<pos:position pos:line="508" pos:column="38"/></name></expr></argument>)<pos:position pos:line="508" pos:column="39"/></argument_list></call></expr></argument>,
                    <argument><expr><literal type="number" pos:line="509" pos:column="21">0x0<pos:position pos:line="509" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="509" pos:column="26">0x0<pos:position pos:line="509" pos:column="29"/></literal></expr></argument>,

                    <argument><expr><literal type="number" pos:line="511" pos:column="21">0x0<pos:position pos:line="511" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="511" pos:column="26">0x0<pos:position pos:line="511" pos:column="29"/></literal></expr></argument>,
                    <argument><expr><literal type="number" pos:line="512" pos:column="21">0x0<pos:position pos:line="512" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="512" pos:column="26">0x0<pos:position pos:line="512" pos:column="29"/></literal></expr></argument>,
                    <argument><expr><literal type="number" pos:line="513" pos:column="21">0x0<pos:position pos:line="513" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="513" pos:column="26">0x0<pos:position pos:line="513" pos:column="29"/></literal></expr></argument>,
                    <argument><expr><literal type="number" pos:line="514" pos:column="21">0x0<pos:position pos:line="514" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="514" pos:column="26">0x0<pos:position pos:line="514" pos:column="29"/></literal></expr></argument>,

                    <argument><expr><call><name pos:line="516" pos:column="21">LONGQUARTET<pos:position pos:line="516" pos:column="32"/></name><argument_list pos:line="516" pos:column="32">(<argument><expr><name><name pos:line="516" pos:column="33">ntlm<pos:position pos:line="516" pos:column="37"/></name><operator pos:line="516" pos:column="37">-&gt;<pos:position pos:line="516" pos:column="42"/></operator><name pos:line="516" pos:column="39">flags<pos:position pos:line="516" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="516" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="516" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="516" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="517" pos:column="5">DEBUGASSERT<pos:position pos:line="517" pos:column="16"/></name><argument_list pos:line="517" pos:column="16">(<argument><expr><name pos:line="517" pos:column="17">size<pos:position pos:line="517" pos:column="21"/></name><operator pos:line="517" pos:column="21">==<pos:position pos:line="517" pos:column="23"/></operator><literal type="number" pos:line="517" pos:column="23">64<pos:position pos:line="517" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="517" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="517" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="519" pos:column="5">DEBUGASSERT<pos:position pos:line="519" pos:column="16"/></name><argument_list pos:line="519" pos:column="16">(<argument><expr><name pos:line="519" pos:column="17">size<pos:position pos:line="519" pos:column="21"/></name> <operator pos:line="519" pos:column="22">==<pos:position pos:line="519" pos:column="24"/></operator> <operator pos:line="519" pos:column="25">(<pos:position pos:line="519" pos:column="26"/></operator><name pos:line="519" pos:column="26">size_t<pos:position pos:line="519" pos:column="32"/></name><operator pos:line="519" pos:column="32">)<pos:position pos:line="519" pos:column="33"/></operator><name pos:line="519" pos:column="33">lmrespoff<pos:position pos:line="519" pos:column="42"/></name></expr></argument>)<pos:position pos:line="519" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="519" pos:column="44"/></expr_stmt>
    <comment type="block" pos:line="520" pos:column="5">/* We append the binary hashes */</comment>
    <if pos:line="521" pos:column="5">if<condition pos:line="521" pos:column="7">(<expr><name pos:line="521" pos:column="8">size<pos:position pos:line="521" pos:column="12"/></name> <operator pos:line="521" pos:column="13">&lt;<pos:position pos:line="521" pos:column="17"/></operator> <operator pos:line="521" pos:column="15">(<pos:position pos:line="521" pos:column="16"/></operator><sizeof pos:line="521" pos:column="16">sizeof<argument_list pos:line="521" pos:column="22">(<argument><expr><name pos:line="521" pos:column="23">ntlmbuf<pos:position pos:line="521" pos:column="30"/></name></expr></argument>)<pos:position pos:line="521" pos:column="31"/></argument_list></sizeof> <operator pos:line="521" pos:column="32">-<pos:position pos:line="521" pos:column="33"/></operator> <literal type="number" pos:line="521" pos:column="34">0x18<pos:position pos:line="521" pos:column="38"/></literal><operator pos:line="521" pos:column="38">)<pos:position pos:line="521" pos:column="39"/></operator></expr>)<pos:position pos:line="521" pos:column="40"/></condition><then pos:line="521" pos:column="40"> <block pos:line="521" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="522" pos:column="7">memcpy<pos:position pos:line="522" pos:column="13"/></name><argument_list pos:line="522" pos:column="13">(<argument><expr><operator pos:line="522" pos:column="14">&amp;<pos:position pos:line="522" pos:column="19"/></operator><name><name pos:line="522" pos:column="15">ntlmbuf<pos:position pos:line="522" pos:column="22"/></name><index pos:line="522" pos:column="22">[<expr><name pos:line="522" pos:column="23">size<pos:position pos:line="522" pos:column="27"/></name></expr>]<pos:position pos:line="522" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="522" pos:column="30">lmresp<pos:position pos:line="522" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="522" pos:column="38">0x18<pos:position pos:line="522" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="522" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="522" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name pos:line="523" pos:column="7">size<pos:position pos:line="523" pos:column="11"/></name> <operator pos:line="523" pos:column="12">+=<pos:position pos:line="523" pos:column="14"/></operator> <literal type="number" pos:line="523" pos:column="15">0x18<pos:position pos:line="523" pos:column="19"/></literal></expr>;<pos:position pos:line="523" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="524" pos:column="6"/></block></then></if>

    <macro><name pos:line="526" pos:column="5">DEBUG_OUT<pos:position pos:line="526" pos:column="14"/></name><argument_list pos:line="526" pos:column="14">(<argument pos:line="526" pos:column="15">{
        fprintf(stderr, <literal type="string" pos:line="527" pos:column="25">"**** TYPE3 header lmresp="<pos:position pos:line="527" pos:column="52"/></literal>);
        print_hex(stderr, (char *)&amp;ntlmbuf[lmrespoff], <literal type="number" pos:line="528" pos:column="56">0x18<pos:position pos:line="528" pos:column="60"/></literal>);
    }<pos:position pos:line="529" pos:column="6"/></argument>)<pos:position pos:line="529" pos:column="7"/></argument_list></macro><empty_stmt pos:line="529" pos:column="7">;<pos:position pos:line="529" pos:column="8"/></empty_stmt>

<cpp:if pos:line="531" pos:column="1">#<cpp:directive pos:line="531" pos:column="2">if<pos:position pos:line="531" pos:column="4"/></cpp:directive> <expr><name pos:line="531" pos:column="5">USE_NTRESPONSES<pos:position pos:line="531" pos:column="20"/></name></expr></cpp:if>
    <if pos:line="532" pos:column="5">if<condition pos:line="532" pos:column="7">(<expr><name pos:line="532" pos:column="8">size<pos:position pos:line="532" pos:column="12"/></name> <operator pos:line="532" pos:column="13">&lt;<pos:position pos:line="532" pos:column="17"/></operator> <operator pos:line="532" pos:column="15">(<pos:position pos:line="532" pos:column="16"/></operator><sizeof pos:line="532" pos:column="16">sizeof<argument_list pos:line="532" pos:column="22">(<argument><expr><name pos:line="532" pos:column="23">ntlmbuf<pos:position pos:line="532" pos:column="30"/></name></expr></argument>)<pos:position pos:line="532" pos:column="31"/></argument_list></sizeof> <operator pos:line="532" pos:column="32">-<pos:position pos:line="532" pos:column="33"/></operator> <literal type="number" pos:line="532" pos:column="34">0x18<pos:position pos:line="532" pos:column="38"/></literal><operator pos:line="532" pos:column="38">)<pos:position pos:line="532" pos:column="39"/></operator></expr>)<pos:position pos:line="532" pos:column="40"/></condition><then pos:line="532" pos:column="40"> <block pos:line="532" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="533" pos:column="7">DEBUGASSERT<pos:position pos:line="533" pos:column="18"/></name><argument_list pos:line="533" pos:column="18">(<argument><expr><name pos:line="533" pos:column="19">size<pos:position pos:line="533" pos:column="23"/></name> <operator pos:line="533" pos:column="24">==<pos:position pos:line="533" pos:column="26"/></operator> <operator pos:line="533" pos:column="27">(<pos:position pos:line="533" pos:column="28"/></operator><name pos:line="533" pos:column="28">size_t<pos:position pos:line="533" pos:column="34"/></name><operator pos:line="533" pos:column="34">)<pos:position pos:line="533" pos:column="35"/></operator><name pos:line="533" pos:column="35">ntrespoff<pos:position pos:line="533" pos:column="44"/></name></expr></argument>)<pos:position pos:line="533" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="533" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="534" pos:column="7">memcpy<pos:position pos:line="534" pos:column="13"/></name><argument_list pos:line="534" pos:column="13">(<argument><expr><operator pos:line="534" pos:column="14">&amp;<pos:position pos:line="534" pos:column="19"/></operator><name><name pos:line="534" pos:column="15">ntlmbuf<pos:position pos:line="534" pos:column="22"/></name><index pos:line="534" pos:column="22">[<expr><name pos:line="534" pos:column="23">size<pos:position pos:line="534" pos:column="27"/></name></expr>]<pos:position pos:line="534" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="534" pos:column="30">ntresp<pos:position pos:line="534" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="534" pos:column="38">0x18<pos:position pos:line="534" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="534" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="534" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name pos:line="535" pos:column="7">size<pos:position pos:line="535" pos:column="11"/></name> <operator pos:line="535" pos:column="12">+=<pos:position pos:line="535" pos:column="14"/></operator> <literal type="number" pos:line="535" pos:column="15">0x18<pos:position pos:line="535" pos:column="19"/></literal></expr>;<pos:position pos:line="535" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="536" pos:column="6"/></block></then></if>

    <macro><name pos:line="538" pos:column="5">DEBUG_OUT<pos:position pos:line="538" pos:column="14"/></name><argument_list pos:line="538" pos:column="14">(<argument pos:line="538" pos:column="15">{
        fprintf(stderr, <literal type="string" pos:line="539" pos:column="25">"\n                  ntresp="<pos:position pos:line="539" pos:column="54"/></literal>);
        print_hex(stderr, (char *)&amp;ntlmbuf[ntrespoff], <literal type="number" pos:line="540" pos:column="56">0x18<pos:position pos:line="540" pos:column="60"/></literal>);
    }<pos:position pos:line="541" pos:column="6"/></argument>)<pos:position pos:line="541" pos:column="7"/></argument_list></macro><empty_stmt pos:line="541" pos:column="7">;<pos:position pos:line="541" pos:column="8"/></empty_stmt>

<cpp:endif pos:line="543" pos:column="1">#<cpp:directive pos:line="543" pos:column="2">endif<pos:position pos:line="543" pos:column="7"/></cpp:directive></cpp:endif>

    <macro><name pos:line="545" pos:column="5">DEBUG_OUT<pos:position pos:line="545" pos:column="14"/></name><argument_list pos:line="545" pos:column="14">(<argument pos:line="545" pos:column="15">{
        fprintf(stderr, <literal type="string" pos:line="546" pos:column="25">"\n                  flags=0x%02.2x%02.2x%02.2x%02.2x 0x%08.8x "<pos:position pos:line="546" pos:column="89"/></literal>,
                LONGQUARTET(ntlm-&gt;flags), ntlm-&gt;flags);
        print_flags(stderr, ntlm-&gt;flags);
        fprintf(stderr, <literal type="string" pos:line="549" pos:column="25">"\n****\n"<pos:position pos:line="549" pos:column="35"/></literal>);
    }<pos:position pos:line="550" pos:column="6"/></argument>)<pos:position pos:line="550" pos:column="7"/></argument_list></macro><empty_stmt pos:line="550" pos:column="7">;<pos:position pos:line="550" pos:column="8"/></empty_stmt>


    <comment type="block" pos:line="553" pos:column="5">/* Make sure that the domain, user and host strings fit in the target
       buffer before we copy them there. */</comment>
    <if pos:line="555" pos:column="5">if<condition pos:line="555" pos:column="7">(<expr><name pos:line="555" pos:column="8">size<pos:position pos:line="555" pos:column="12"/></name> <operator pos:line="555" pos:column="13">+<pos:position pos:line="555" pos:column="14"/></operator> <name pos:line="555" pos:column="15">userlen<pos:position pos:line="555" pos:column="22"/></name> <operator pos:line="555" pos:column="23">+<pos:position pos:line="555" pos:column="24"/></operator> <name pos:line="555" pos:column="25">domlen<pos:position pos:line="555" pos:column="31"/></name> <operator pos:line="555" pos:column="32">+<pos:position pos:line="555" pos:column="33"/></operator> <name pos:line="555" pos:column="34">hostlen<pos:position pos:line="555" pos:column="41"/></name> <operator pos:line="555" pos:column="42">&gt;=<pos:position pos:line="555" pos:column="47"/></operator> <sizeof pos:line="555" pos:column="45">sizeof<argument_list pos:line="555" pos:column="51">(<argument><expr><name pos:line="555" pos:column="52">ntlmbuf<pos:position pos:line="555" pos:column="59"/></name></expr></argument>)<pos:position pos:line="555" pos:column="60"/></argument_list></sizeof></expr>)<pos:position pos:line="555" pos:column="61"/></condition><then pos:line="555" pos:column="61"> <block pos:line="555" pos:column="62">{
      <expr_stmt><expr><call><name pos:line="556" pos:column="7">failf<pos:position pos:line="556" pos:column="12"/></name><argument_list pos:line="556" pos:column="12">(<argument><expr><name><name pos:line="556" pos:column="13">conn<pos:position pos:line="556" pos:column="17"/></name><operator pos:line="556" pos:column="17">-&gt;<pos:position pos:line="556" pos:column="22"/></operator><name pos:line="556" pos:column="19">data<pos:position pos:line="556" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="556" pos:column="25">"user + domain + host name too big"<pos:position pos:line="556" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="556" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="556" pos:column="62"/></expr_stmt>
      <return pos:line="557" pos:column="7">return <expr><name pos:line="557" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="557" pos:column="33"/></name></expr>;<pos:position pos:line="557" pos:column="34"/></return>
    }<pos:position pos:line="558" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="560" pos:column="5">DEBUGASSERT<pos:position pos:line="560" pos:column="16"/></name><argument_list pos:line="560" pos:column="16">(<argument><expr><name pos:line="560" pos:column="17">size<pos:position pos:line="560" pos:column="21"/></name> <operator pos:line="560" pos:column="22">==<pos:position pos:line="560" pos:column="24"/></operator> <name pos:line="560" pos:column="25">domoff<pos:position pos:line="560" pos:column="31"/></name></expr></argument>)<pos:position pos:line="560" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="560" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="561" pos:column="5">memcpy<pos:position pos:line="561" pos:column="11"/></name><argument_list pos:line="561" pos:column="11">(<argument><expr><operator pos:line="561" pos:column="12">&amp;<pos:position pos:line="561" pos:column="17"/></operator><name><name pos:line="561" pos:column="13">ntlmbuf<pos:position pos:line="561" pos:column="20"/></name><index pos:line="561" pos:column="20">[<expr><name pos:line="561" pos:column="21">size<pos:position pos:line="561" pos:column="25"/></name></expr>]<pos:position pos:line="561" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="561" pos:column="28">domain<pos:position pos:line="561" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="561" pos:column="36">domlen<pos:position pos:line="561" pos:column="42"/></name></expr></argument>)<pos:position pos:line="561" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="561" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="562" pos:column="5">size<pos:position pos:line="562" pos:column="9"/></name> <operator pos:line="562" pos:column="10">+=<pos:position pos:line="562" pos:column="12"/></operator> <name pos:line="562" pos:column="13">domlen<pos:position pos:line="562" pos:column="19"/></name></expr>;<pos:position pos:line="562" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="564" pos:column="5">DEBUGASSERT<pos:position pos:line="564" pos:column="16"/></name><argument_list pos:line="564" pos:column="16">(<argument><expr><name pos:line="564" pos:column="17">size<pos:position pos:line="564" pos:column="21"/></name> <operator pos:line="564" pos:column="22">==<pos:position pos:line="564" pos:column="24"/></operator> <name pos:line="564" pos:column="25">useroff<pos:position pos:line="564" pos:column="32"/></name></expr></argument>)<pos:position pos:line="564" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="564" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="565" pos:column="5">memcpy<pos:position pos:line="565" pos:column="11"/></name><argument_list pos:line="565" pos:column="11">(<argument><expr><operator pos:line="565" pos:column="12">&amp;<pos:position pos:line="565" pos:column="17"/></operator><name><name pos:line="565" pos:column="13">ntlmbuf<pos:position pos:line="565" pos:column="20"/></name><index pos:line="565" pos:column="20">[<expr><name pos:line="565" pos:column="21">size<pos:position pos:line="565" pos:column="25"/></name></expr>]<pos:position pos:line="565" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="565" pos:column="28">user<pos:position pos:line="565" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="565" pos:column="34">userlen<pos:position pos:line="565" pos:column="41"/></name></expr></argument>)<pos:position pos:line="565" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="565" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="566" pos:column="5">size<pos:position pos:line="566" pos:column="9"/></name> <operator pos:line="566" pos:column="10">+=<pos:position pos:line="566" pos:column="12"/></operator> <name pos:line="566" pos:column="13">userlen<pos:position pos:line="566" pos:column="20"/></name></expr>;<pos:position pos:line="566" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="568" pos:column="5">DEBUGASSERT<pos:position pos:line="568" pos:column="16"/></name><argument_list pos:line="568" pos:column="16">(<argument><expr><name pos:line="568" pos:column="17">size<pos:position pos:line="568" pos:column="21"/></name> <operator pos:line="568" pos:column="22">==<pos:position pos:line="568" pos:column="24"/></operator> <name pos:line="568" pos:column="25">hostoff<pos:position pos:line="568" pos:column="32"/></name></expr></argument>)<pos:position pos:line="568" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="568" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="569" pos:column="5">memcpy<pos:position pos:line="569" pos:column="11"/></name><argument_list pos:line="569" pos:column="11">(<argument><expr><operator pos:line="569" pos:column="12">&amp;<pos:position pos:line="569" pos:column="17"/></operator><name><name pos:line="569" pos:column="13">ntlmbuf<pos:position pos:line="569" pos:column="20"/></name><index pos:line="569" pos:column="20">[<expr><name pos:line="569" pos:column="21">size<pos:position pos:line="569" pos:column="25"/></name></expr>]<pos:position pos:line="569" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="569" pos:column="28">host<pos:position pos:line="569" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="569" pos:column="34">hostlen<pos:position pos:line="569" pos:column="41"/></name></expr></argument>)<pos:position pos:line="569" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="569" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="570" pos:column="5">size<pos:position pos:line="570" pos:column="9"/></name> <operator pos:line="570" pos:column="10">+=<pos:position pos:line="570" pos:column="12"/></operator> <name pos:line="570" pos:column="13">hostlen<pos:position pos:line="570" pos:column="20"/></name></expr>;<pos:position pos:line="570" pos:column="21"/></expr_stmt>

<cpp:ifdef pos:line="572" pos:column="1">#<cpp:directive pos:line="572" pos:column="2">ifdef<pos:position pos:line="572" pos:column="7"/></cpp:directive> <name pos:line="572" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="572" pos:column="29"/></name></cpp:ifdef>
    <comment type="block" pos:line="573" pos:column="5">/* convert domain, user, and host to ASCII but leave the rest as-is */</comment>
    <if pos:line="574" pos:column="5">if<condition pos:line="574" pos:column="7">(<expr><name pos:line="574" pos:column="8">CURLE_OK<pos:position pos:line="574" pos:column="16"/></name> <operator pos:line="574" pos:column="17">!=<pos:position pos:line="574" pos:column="19"/></operator> <call><name pos:line="574" pos:column="20">Curl_convert_to_network<pos:position pos:line="574" pos:column="43"/></name><argument_list pos:line="574" pos:column="43">(<argument><expr><name><name pos:line="574" pos:column="44">conn<pos:position pos:line="574" pos:column="48"/></name><operator pos:line="574" pos:column="48">-&gt;<pos:position pos:line="574" pos:column="53"/></operator><name pos:line="574" pos:column="50">data<pos:position pos:line="574" pos:column="54"/></name></name></expr></argument>, 
                                           <argument><expr><operator pos:line="575" pos:column="44">(<pos:position pos:line="575" pos:column="45"/></operator><name pos:line="575" pos:column="45">char<pos:position pos:line="575" pos:column="49"/></name> <operator pos:line="575" pos:column="50">*<pos:position pos:line="575" pos:column="51"/></operator><operator pos:line="575" pos:column="51">)<pos:position pos:line="575" pos:column="52"/></operator><operator pos:line="575" pos:column="52">&amp;<pos:position pos:line="575" pos:column="57"/></operator><name><name pos:line="575" pos:column="53">ntlmbuf<pos:position pos:line="575" pos:column="60"/></name><index pos:line="575" pos:column="60">[<expr><name pos:line="575" pos:column="61">domoff<pos:position pos:line="575" pos:column="67"/></name></expr>]<pos:position pos:line="575" pos:column="68"/></index></name></expr></argument>,
                                           <argument><expr><name pos:line="576" pos:column="44">size<pos:position pos:line="576" pos:column="48"/></name><operator pos:line="576" pos:column="48">-<pos:position pos:line="576" pos:column="49"/></operator><name pos:line="576" pos:column="49">domoff<pos:position pos:line="576" pos:column="55"/></name></expr></argument>)<pos:position pos:line="576" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="576" pos:column="57"/></condition><then pos:line="576" pos:column="57"> <block pos:line="576" pos:column="58">{
      <return pos:line="577" pos:column="7">return <expr><name pos:line="577" pos:column="14">CURLE_CONV_FAILED<pos:position pos:line="577" pos:column="31"/></name></expr>;<pos:position pos:line="577" pos:column="32"/></return>
    }<pos:position pos:line="578" pos:column="6"/></block></then></if>
<cpp:endif pos:line="579" pos:column="1">#<cpp:directive pos:line="579" pos:column="2">endif<pos:position pos:line="579" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="579" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

<cpp:endif pos:line="581" pos:column="1">#<cpp:directive pos:line="581" pos:column="2">endif<pos:position pos:line="581" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="583" pos:column="5">/* convert the binary blob into base64 */</comment>
    <expr_stmt><expr><name pos:line="584" pos:column="5">size<pos:position pos:line="584" pos:column="9"/></name> <operator pos:line="584" pos:column="10">=<pos:position pos:line="584" pos:column="11"/></operator> <call><name pos:line="584" pos:column="12">Curl_base64_encode<pos:position pos:line="584" pos:column="30"/></name><argument_list pos:line="584" pos:column="30">(<argument><expr><name pos:line="584" pos:column="31">NULL<pos:position pos:line="584" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="584" pos:column="37">(<pos:position pos:line="584" pos:column="38"/></operator><name pos:line="584" pos:column="38">char<pos:position pos:line="584" pos:column="42"/></name> <operator pos:line="584" pos:column="43">*<pos:position pos:line="584" pos:column="44"/></operator><operator pos:line="584" pos:column="44">)<pos:position pos:line="584" pos:column="45"/></operator><name pos:line="584" pos:column="45">ntlmbuf<pos:position pos:line="584" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="584" pos:column="54">size<pos:position pos:line="584" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="584" pos:column="60">&amp;<pos:position pos:line="584" pos:column="65"/></operator><name pos:line="584" pos:column="61">base64<pos:position pos:line="584" pos:column="67"/></name></expr></argument>)<pos:position pos:line="584" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="584" pos:column="69"/></expr_stmt>

    <if pos:line="586" pos:column="5">if<condition pos:line="586" pos:column="7">(<expr><name pos:line="586" pos:column="8">size<pos:position pos:line="586" pos:column="12"/></name> <operator pos:line="586" pos:column="13">&gt;<pos:position pos:line="586" pos:column="17"/></operator><literal type="number" pos:line="586" pos:column="14">0<pos:position pos:line="586" pos:column="15"/></literal></expr> )<pos:position pos:line="586" pos:column="17"/></condition><then pos:line="586" pos:column="17"> <block pos:line="586" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="587" pos:column="7">Curl_safefree<pos:position pos:line="587" pos:column="20"/></name><argument_list pos:line="587" pos:column="20">(<argument><expr><operator pos:line="587" pos:column="21">*<pos:position pos:line="587" pos:column="22"/></operator><name pos:line="587" pos:column="22">allocuserpwd<pos:position pos:line="587" pos:column="34"/></name></expr></argument>)<pos:position pos:line="587" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="587" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="588" pos:column="7">*<pos:position pos:line="588" pos:column="8"/></operator><name pos:line="588" pos:column="8">allocuserpwd<pos:position pos:line="588" pos:column="20"/></name> <operator pos:line="588" pos:column="21">=<pos:position pos:line="588" pos:column="22"/></operator> <call><name pos:line="588" pos:column="23">aprintf<pos:position pos:line="588" pos:column="30"/></name><argument_list pos:line="588" pos:column="30">(<argument><expr><literal type="string" pos:line="588" pos:column="31">"%sAuthorization: NTLM %s\r\n"<pos:position pos:line="588" pos:column="61"/></literal></expr></argument>,
                              <argument><expr><ternary><condition><expr><name pos:line="589" pos:column="31">proxy<pos:position pos:line="589" pos:column="36"/></name></expr>?<pos:position pos:line="589" pos:column="37"/></condition><then><expr><literal type="string" pos:line="589" pos:column="37">"Proxy-"<pos:position pos:line="589" pos:column="45"/></literal></expr></then><else pos:line="589" pos:column="45">:<expr><literal type="string" pos:line="589" pos:column="46">""<pos:position pos:line="589" pos:column="48"/></literal></expr></else></ternary></expr></argument>,
                              <argument><expr><name pos:line="590" pos:column="31">base64<pos:position pos:line="590" pos:column="37"/></name></expr></argument>)<pos:position pos:line="590" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="590" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="591" pos:column="7">DEBUG_OUT<pos:position pos:line="591" pos:column="16"/></name><argument_list pos:line="591" pos:column="16">(<argument><expr><call><name pos:line="591" pos:column="17">fprintf<pos:position pos:line="591" pos:column="24"/></name><argument_list pos:line="591" pos:column="24">(<argument><expr><name pos:line="591" pos:column="25">stderr<pos:position pos:line="591" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="591" pos:column="33">"**** %s\n "<pos:position pos:line="591" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="591" pos:column="47">*<pos:position pos:line="591" pos:column="48"/></operator><name pos:line="591" pos:column="48">allocuserpwd<pos:position pos:line="591" pos:column="60"/></name></expr></argument>)<pos:position pos:line="591" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="591" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="591" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="592" pos:column="7">free<pos:position pos:line="592" pos:column="11"/></name><argument_list pos:line="592" pos:column="11">(<argument><expr><name pos:line="592" pos:column="12">base64<pos:position pos:line="592" pos:column="18"/></name></expr></argument>)<pos:position pos:line="592" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="592" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="593" pos:column="6"/></block></then>
    <else pos:line="594" pos:column="5">else
      <block type="pseudo"><return pos:line="595" pos:column="7">return <expr><name pos:line="595" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="595" pos:column="33"/></name></expr>;<pos:position pos:line="595" pos:column="34"/></return></block></else></if> <comment type="block" pos:line="595" pos:column="35">/* FIX TODO */</comment>

    <expr_stmt><expr><name><name pos:line="597" pos:column="5">ntlm<pos:position pos:line="597" pos:column="9"/></name><operator pos:line="597" pos:column="9">-&gt;<pos:position pos:line="597" pos:column="14"/></operator><name pos:line="597" pos:column="11">state<pos:position pos:line="597" pos:column="16"/></name></name> <operator pos:line="597" pos:column="17">=<pos:position pos:line="597" pos:column="18"/></operator> <name pos:line="597" pos:column="19">NTLMSTATE_TYPE3<pos:position pos:line="597" pos:column="34"/></name></expr>;<pos:position pos:line="597" pos:column="35"/></expr_stmt> <comment type="block" pos:line="597" pos:column="36">/* we sent a type-3 */</comment>
    <expr_stmt><expr><name><name pos:line="598" pos:column="5">authp<pos:position pos:line="598" pos:column="10"/></name><operator pos:line="598" pos:column="10">-&gt;<pos:position pos:line="598" pos:column="15"/></operator><name pos:line="598" pos:column="12">done<pos:position pos:line="598" pos:column="16"/></name></name> <operator pos:line="598" pos:column="17">=<pos:position pos:line="598" pos:column="18"/></operator> <name pos:line="598" pos:column="19">TRUE<pos:position pos:line="598" pos:column="23"/></name></expr>;<pos:position pos:line="598" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="599" pos:column="4"/></block>
  <break pos:line="600" pos:column="3">break;<pos:position pos:line="600" pos:column="9"/></break>

  <case pos:line="602" pos:column="3">case <expr><name pos:line="602" pos:column="8">NTLMSTATE_TYPE3<pos:position pos:line="602" pos:column="23"/></name></expr>:<pos:position pos:line="602" pos:column="24"/></case>
    <comment type="block" pos:line="603" pos:column="5">/* connection is already authenticated,
     * don't send a header in future requests */</comment>
    <if pos:line="605" pos:column="5">if<condition pos:line="605" pos:column="7">(<expr><operator pos:line="605" pos:column="8">*<pos:position pos:line="605" pos:column="9"/></operator><name pos:line="605" pos:column="9">allocuserpwd<pos:position pos:line="605" pos:column="21"/></name></expr>)<pos:position pos:line="605" pos:column="22"/></condition><then pos:line="605" pos:column="22"> <block pos:line="605" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="606" pos:column="7">free<pos:position pos:line="606" pos:column="11"/></name><argument_list pos:line="606" pos:column="11">(<argument><expr><operator pos:line="606" pos:column="12">*<pos:position pos:line="606" pos:column="13"/></operator><name pos:line="606" pos:column="13">allocuserpwd<pos:position pos:line="606" pos:column="25"/></name></expr></argument>)<pos:position pos:line="606" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="606" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="607" pos:column="7">*<pos:position pos:line="607" pos:column="8"/></operator><name pos:line="607" pos:column="8">allocuserpwd<pos:position pos:line="607" pos:column="20"/></name><operator pos:line="607" pos:column="20">=<pos:position pos:line="607" pos:column="21"/></operator><name pos:line="607" pos:column="21">NULL<pos:position pos:line="607" pos:column="25"/></name></expr>;<pos:position pos:line="607" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="608" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="609" pos:column="5">authp<pos:position pos:line="609" pos:column="10"/></name><operator pos:line="609" pos:column="10">-&gt;<pos:position pos:line="609" pos:column="15"/></operator><name pos:line="609" pos:column="12">done<pos:position pos:line="609" pos:column="16"/></name></name> <operator pos:line="609" pos:column="17">=<pos:position pos:line="609" pos:column="18"/></operator> <name pos:line="609" pos:column="19">TRUE<pos:position pos:line="609" pos:column="23"/></name></expr>;<pos:position pos:line="609" pos:column="24"/></expr_stmt>
    <break pos:line="610" pos:column="5">break;<pos:position pos:line="610" pos:column="11"/></break>
  }<pos:position pos:line="611" pos:column="4"/></block></switch>

  <return pos:line="613" pos:column="3">return <expr><name pos:line="613" pos:column="10">CURLE_OK<pos:position pos:line="613" pos:column="18"/></name></expr>;<pos:position pos:line="613" pos:column="19"/></return>
}<pos:position pos:line="614" pos:column="2"/></block></function></unit>
