<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_385_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_is_connected<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">sockindex<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="3" pos:column="28">bool<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">connected<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="44"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">conn<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLcode<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">code<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name pos:line="7" pos:column="19">CURLE_OK<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socket_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">sockfd<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><name><name pos:line="8" pos:column="26">conn<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">-&gt;<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="32">sock<pos:position pos:line="8" pos:column="36"/></name><index pos:line="8" pos:column="36">[<expr><name pos:line="8" pos:column="37">sockindex<pos:position pos:line="8" pos:column="46"/></name></expr>]<pos:position pos:line="8" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">long<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">allow<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><name pos:line="9" pos:column="16">DEFAULT_CONNECT_TIMEOUT<pos:position pos:line="9" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">DEBUGASSERT<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">sockindex<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">&gt;=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="28">FIRSTSOCKET<pos:position pos:line="11" pos:column="39"/></name> <operator pos:line="11" pos:column="40">&amp;&amp;<pos:position pos:line="11" pos:column="50"/></operator> <name pos:line="11" pos:column="43">sockindex<pos:position pos:line="11" pos:column="52"/></name> <operator pos:line="11" pos:column="53">&lt;=<pos:position pos:line="11" pos:column="58"/></operator> <name pos:line="11" pos:column="56">SECONDARYSOCKET<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="73"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">connected<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">FALSE<pos:position pos:line="13" pos:column="21"/></name></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt> <comment type="block" pos:line="13" pos:column="23">/* a very negative world view is best */</comment>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name><name pos:line="15" pos:column="6">conn<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">bits<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">.<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">tcpconnect<pos:position pos:line="15" pos:column="27"/></name></name></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28"> <block pos:line="15" pos:column="29">{
    <comment type="block" pos:line="16" pos:column="5">/* we are connected already! */</comment>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">long<pos:position pos:line="17" pos:column="9"/></name></type> <name pos:line="17" pos:column="10">allow_total<pos:position pos:line="17" pos:column="21"/></name> <init pos:line="17" pos:column="22">= <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>

    <comment type="block" pos:line="19" pos:column="5">/* subtract the most strict timeout of the ones */</comment>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name><name pos:line="20" pos:column="8">data<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">set<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">timeout<pos:position pos:line="20" pos:column="25"/></name></name></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">allow_total<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <name><name pos:line="21" pos:column="21">data<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">set<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">.<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">timeout<pos:position pos:line="21" pos:column="38"/></name></name></expr>;<pos:position pos:line="21" pos:column="39"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">Curl_expire<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">data<pos:position pos:line="23" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="23">allow_total<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="24" pos:column="5">*<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">connected<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="18">TRUE<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">CURLE_OK<pos:position pos:line="25" pos:column="20"/></name></expr>;<pos:position pos:line="25" pos:column="21"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/* figure out how long time we have left to connect */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">allow<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <call><name pos:line="29" pos:column="11">Curl_timeleft<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">conn<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="31">NULL<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="37">TRUE<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>

  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">allow<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">&lt;<pos:position pos:line="31" pos:column="16"/></operator> <literal type="number" pos:line="31" pos:column="14">0<pos:position pos:line="31" pos:column="15"/></literal></expr>)<pos:position pos:line="31" pos:column="16"/></condition><then pos:line="31" pos:column="16"> <block pos:line="31" pos:column="17">{
    <comment type="block" pos:line="32" pos:column="5">/* time-out, bail out, go home */</comment>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">failf<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><name pos:line="33" pos:column="11">data<pos:position pos:line="33" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="17">"Connection time-out"<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="34" pos:column="36"/></name></expr>;<pos:position pos:line="34" pos:column="37"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="37" pos:column="3">Curl_expire<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">data<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="21">allow<pos:position pos:line="37" pos:column="26"/></name></expr></argument>)<pos:position pos:line="37" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="39" pos:column="3">/* check for connect without timeout as we want to return immediately */</comment>
  <expr_stmt><expr><name pos:line="40" pos:column="3">rc<pos:position pos:line="40" pos:column="5"/></name> <operator pos:line="40" pos:column="6">=<pos:position pos:line="40" pos:column="7"/></operator> <call><name pos:line="40" pos:column="8">waitconnect<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">sockfd<pos:position pos:line="40" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="28">0<pos:position pos:line="40" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>

  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><name pos:line="42" pos:column="6">WAITCONN_CONNECTED<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">==<pos:position pos:line="42" pos:column="27"/></operator> <name pos:line="42" pos:column="28">rc<pos:position pos:line="42" pos:column="30"/></name></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">int<pos:position pos:line="43" pos:column="8"/></name></type> <name pos:line="43" pos:column="9">error<pos:position pos:line="43" pos:column="14"/></name></decl>;<pos:position pos:line="43" pos:column="15"/></decl_stmt>
    <if pos:line="44" pos:column="5">if<condition pos:line="44" pos:column="7">(<expr><call><name pos:line="44" pos:column="8">verifyconnect<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><name pos:line="44" pos:column="22">sockfd<pos:position pos:line="44" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="30">&amp;<pos:position pos:line="44" pos:column="35"/></operator><name pos:line="44" pos:column="31">error<pos:position pos:line="44" pos:column="36"/></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="38"/></condition><then pos:line="44" pos:column="38"> <block pos:line="44" pos:column="39">{
      <comment type="block" pos:line="45" pos:column="7">/* we are connected, awesome! */</comment>
      <expr_stmt><expr><operator pos:line="46" pos:column="7">*<pos:position pos:line="46" pos:column="8"/></operator><name pos:line="46" pos:column="8">connected<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <name pos:line="46" pos:column="20">TRUE<pos:position pos:line="46" pos:column="24"/></name></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>
      <return pos:line="47" pos:column="7">return <expr><name pos:line="47" pos:column="14">CURLE_OK<pos:position pos:line="47" pos:column="22"/></name></expr>;<pos:position pos:line="47" pos:column="23"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="49" pos:column="5">/* nope, not connected for real */</comment>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">data<pos:position pos:line="50" pos:column="9"/></name><operator pos:line="50" pos:column="9">-&gt;<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="11">state<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">.<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">os_errno<pos:position pos:line="50" pos:column="25"/></name></name> <operator pos:line="50" pos:column="26">=<pos:position pos:line="50" pos:column="27"/></operator> <name pos:line="50" pos:column="28">error<pos:position pos:line="50" pos:column="33"/></name></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">infof<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">data<pos:position pos:line="51" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="17">"Connection failed\n"<pos:position pos:line="51" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><call><name pos:line="52" pos:column="8">trynextip<pos:position pos:line="52" pos:column="17"/></name><argument_list pos:line="52" pos:column="17">(<argument><expr><name pos:line="52" pos:column="18">conn<pos:position pos:line="52" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="24">sockindex<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="35">connected<pos:position pos:line="52" pos:column="44"/></name></expr></argument>)<pos:position pos:line="52" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="46"/></condition><then pos:line="52" pos:column="46"> <block pos:line="52" pos:column="47">{
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">failf<pos:position pos:line="53" pos:column="12"/></name><argument_list pos:line="53" pos:column="12">(<argument><expr><name pos:line="53" pos:column="13">data<pos:position pos:line="53" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="19">"Failed connect to %s:%d; %s"<pos:position pos:line="53" pos:column="48"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="54" pos:column="13">conn<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">-&gt;<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="19">host<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">.<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="24">name<pos:position pos:line="54" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="30">conn<pos:position pos:line="54" pos:column="34"/></name><operator pos:line="54" pos:column="34">-&gt;<pos:position pos:line="54" pos:column="39"/></operator><name pos:line="54" pos:column="36">port<pos:position pos:line="54" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="42">Curl_strerror<pos:position pos:line="54" pos:column="55"/></name><argument_list pos:line="54" pos:column="55">(<argument><expr><name pos:line="54" pos:column="56">conn<pos:position pos:line="54" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="62">error<pos:position pos:line="54" pos:column="67"/></name></expr></argument>)<pos:position pos:line="54" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="55" pos:column="7">code<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <name pos:line="55" pos:column="14">CURLE_COULDNT_CONNECT<pos:position pos:line="55" pos:column="35"/></name></expr>;<pos:position pos:line="55" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>
  }<pos:position pos:line="57" pos:column="4"/></block></then>
  <elseif pos:line="58" pos:column="3">else <if pos:line="58" pos:column="8">if<condition pos:line="58" pos:column="10">(<expr><name pos:line="58" pos:column="11">WAITCONN_TIMEOUT<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">!=<pos:position pos:line="58" pos:column="30"/></operator> <name pos:line="58" pos:column="31">rc<pos:position pos:line="58" pos:column="33"/></name></expr>)<pos:position pos:line="58" pos:column="34"/></condition><then pos:line="58" pos:column="34"> <block pos:line="58" pos:column="35">{
    <decl_stmt><decl><type><name pos:line="59" pos:column="5">int<pos:position pos:line="59" pos:column="8"/></name></type> <name pos:line="59" pos:column="9">error<pos:position pos:line="59" pos:column="14"/></name> <init pos:line="59" pos:column="15">= <expr><literal type="number" pos:line="59" pos:column="17">0<pos:position pos:line="59" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="59" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="61" pos:column="5">/* nope, not connected  */</comment>
    <if pos:line="62" pos:column="5">if<condition pos:line="62" pos:column="7">(<expr><name pos:line="62" pos:column="8">WAITCONN_FDSET_ERROR<pos:position pos:line="62" pos:column="28"/></name> <operator pos:line="62" pos:column="29">==<pos:position pos:line="62" pos:column="31"/></operator> <name pos:line="62" pos:column="32">rc<pos:position pos:line="62" pos:column="34"/></name></expr>)<pos:position pos:line="62" pos:column="35"/></condition><then pos:line="62" pos:column="35"> <block pos:line="62" pos:column="36">{
      <expr_stmt><expr><operator pos:line="63" pos:column="7">(<pos:position pos:line="63" pos:column="8"/></operator><name pos:line="63" pos:column="8">void<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">)<pos:position pos:line="63" pos:column="13"/></operator><call><name pos:line="63" pos:column="13">verifyconnect<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name pos:line="63" pos:column="27">sockfd<pos:position pos:line="63" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="35">&amp;<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="36">error<pos:position pos:line="63" pos:column="41"/></name></expr></argument>)<pos:position pos:line="63" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="64" pos:column="7">data<pos:position pos:line="64" pos:column="11"/></name><operator pos:line="64" pos:column="11">-&gt;<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="13">state<pos:position pos:line="64" pos:column="18"/></name><operator pos:line="64" pos:column="18">.<pos:position pos:line="64" pos:column="19"/></operator><name pos:line="64" pos:column="19">os_errno<pos:position pos:line="64" pos:column="27"/></name></name> <operator pos:line="64" pos:column="28">=<pos:position pos:line="64" pos:column="29"/></operator> <name pos:line="64" pos:column="30">error<pos:position pos:line="64" pos:column="35"/></name></expr>;<pos:position pos:line="64" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">infof<pos:position pos:line="65" pos:column="12"/></name><argument_list pos:line="65" pos:column="12">(<argument><expr><name pos:line="65" pos:column="13">data<pos:position pos:line="65" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="19">"%s\n"<pos:position pos:line="65" pos:column="25"/></literal></expr></argument>,<argument><expr><call><name pos:line="65" pos:column="26">Curl_strerror<pos:position pos:line="65" pos:column="39"/></name><argument_list pos:line="65" pos:column="39">(<argument><expr><name pos:line="65" pos:column="40">conn<pos:position pos:line="65" pos:column="44"/></name></expr></argument>,<argument><expr><name pos:line="65" pos:column="45">error<pos:position pos:line="65" pos:column="50"/></name></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></then>
    <else pos:line="67" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="7">infof<pos:position pos:line="68" pos:column="12"/></name><argument_list pos:line="68" pos:column="12">(<argument><expr><name pos:line="68" pos:column="13">data<pos:position pos:line="68" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="19">"Connection failed\n"<pos:position pos:line="68" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="42"/></expr_stmt></block></else></if>

    <if pos:line="70" pos:column="5">if<condition pos:line="70" pos:column="7">(<expr><call><name pos:line="70" pos:column="8">trynextip<pos:position pos:line="70" pos:column="17"/></name><argument_list pos:line="70" pos:column="17">(<argument><expr><name pos:line="70" pos:column="18">conn<pos:position pos:line="70" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="24">sockindex<pos:position pos:line="70" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="35">connected<pos:position pos:line="70" pos:column="44"/></name></expr></argument>)<pos:position pos:line="70" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="46"/></condition><then pos:line="70" pos:column="46"> <block pos:line="70" pos:column="47">{
      <expr_stmt><expr><name pos:line="71" pos:column="7">error<pos:position pos:line="71" pos:column="12"/></name> <operator pos:line="71" pos:column="13">=<pos:position pos:line="71" pos:column="14"/></operator> <name pos:line="71" pos:column="15">SOCKERRNO<pos:position pos:line="71" pos:column="24"/></name></expr>;<pos:position pos:line="71" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="72" pos:column="7">data<pos:position pos:line="72" pos:column="11"/></name><operator pos:line="72" pos:column="11">-&gt;<pos:position pos:line="72" pos:column="16"/></operator><name pos:line="72" pos:column="13">state<pos:position pos:line="72" pos:column="18"/></name><operator pos:line="72" pos:column="18">.<pos:position pos:line="72" pos:column="19"/></operator><name pos:line="72" pos:column="19">os_errno<pos:position pos:line="72" pos:column="27"/></name></name> <operator pos:line="72" pos:column="28">=<pos:position pos:line="72" pos:column="29"/></operator> <name pos:line="72" pos:column="30">error<pos:position pos:line="72" pos:column="35"/></name></expr>;<pos:position pos:line="72" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="73" pos:column="7">failf<pos:position pos:line="73" pos:column="12"/></name><argument_list pos:line="73" pos:column="12">(<argument><expr><name pos:line="73" pos:column="13">data<pos:position pos:line="73" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="19">"Failed connect to %s:%d; %s"<pos:position pos:line="73" pos:column="48"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="74" pos:column="13">conn<pos:position pos:line="74" pos:column="17"/></name><operator pos:line="74" pos:column="17">-&gt;<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="19">host<pos:position pos:line="74" pos:column="23"/></name><operator pos:line="74" pos:column="23">.<pos:position pos:line="74" pos:column="24"/></operator><name pos:line="74" pos:column="24">name<pos:position pos:line="74" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="30">conn<pos:position pos:line="74" pos:column="34"/></name><operator pos:line="74" pos:column="34">-&gt;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="36">port<pos:position pos:line="74" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="42">Curl_strerror<pos:position pos:line="74" pos:column="55"/></name><argument_list pos:line="74" pos:column="55">(<argument><expr><name pos:line="74" pos:column="56">conn<pos:position pos:line="74" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="62">error<pos:position pos:line="74" pos:column="67"/></name></expr></argument>)<pos:position pos:line="74" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="75" pos:column="7">code<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">=<pos:position pos:line="75" pos:column="13"/></operator> <name pos:line="75" pos:column="14">CURLE_COULDNT_CONNECT<pos:position pos:line="75" pos:column="35"/></name></expr>;<pos:position pos:line="75" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>
  }<pos:position pos:line="77" pos:column="4"/></block></then></if></elseif></if>
  <comment type="block" pos:line="78" pos:column="3">/*
   * If the connection failed here, we should attempt to connect to the "next
   * address" for the given host.
   */</comment>

  <return pos:line="83" pos:column="3">return <expr><name pos:line="83" pos:column="10">code<pos:position pos:line="83" pos:column="14"/></name></expr>;<pos:position pos:line="83" pos:column="15"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
