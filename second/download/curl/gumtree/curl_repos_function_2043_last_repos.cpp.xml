<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2043_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">gopher_do<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">bool<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">done<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">CURLE_OK<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_socket_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">sockfd<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name><name pos:line="5" pos:column="26">conn<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">-&gt;<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="32">sock<pos:position pos:line="5" pos:column="36"/></name><index pos:line="5" pos:column="36">[<expr><name pos:line="5" pos:column="37">FIRSTSOCKET<pos:position pos:line="5" pos:column="48"/></name></expr>]<pos:position pos:line="5" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">curl_off_t<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">bytecount<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><operator pos:line="7" pos:column="27">&amp;<pos:position pos:line="7" pos:column="32"/></operator><name><name pos:line="7" pos:column="28">data<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">req<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">.<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">bytecount<pos:position pos:line="7" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">path<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><name><name pos:line="8" pos:column="16">data<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">state<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">.<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">path<pos:position pos:line="8" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">sel<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><name pos:line="9" pos:column="15">NULL<pos:position pos:line="9" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">sel_org<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><name pos:line="10" pos:column="19">NULL<pos:position pos:line="10" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">ssize_t<pos:position pos:line="11" pos:column="10"/></name></type> <name pos:line="11" pos:column="11">amount<pos:position pos:line="11" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="19">k<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">len<pos:position pos:line="12" pos:column="13"/></name></decl>;<pos:position pos:line="12" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="14" pos:column="3">*<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">done<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <name pos:line="14" pos:column="11">TRUE<pos:position pos:line="14" pos:column="15"/></name></expr>;<pos:position pos:line="14" pos:column="16"/></expr_stmt> <comment type="block" pos:line="14" pos:column="17">/* unconditionally */</comment>

  <comment type="block" pos:line="16" pos:column="3">/* Create selector. Degenerate cases: / and /1 =&gt; convert to "" */</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><call><name pos:line="17" pos:column="6">strlen<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">path<pos:position pos:line="17" pos:column="17"/></name></expr></argument>)<pos:position pos:line="17" pos:column="18"/></argument_list></call> <operator pos:line="17" pos:column="19">&lt;=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="number" pos:line="17" pos:column="22">2<pos:position pos:line="17" pos:column="23"/></literal></expr>)<pos:position pos:line="17" pos:column="24"/></condition><then pos:line="17" pos:column="24"> <block pos:line="17" pos:column="25">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">sel<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <operator pos:line="18" pos:column="11">(<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">char<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></operator><operator pos:line="18" pos:column="18">)<pos:position pos:line="18" pos:column="19"/></operator><literal type="string" pos:line="18" pos:column="19">""<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">len<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <operator pos:line="19" pos:column="11">(<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">int<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">)<pos:position pos:line="19" pos:column="16"/></operator><call><name pos:line="19" pos:column="16">strlen<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">sel<pos:position pos:line="19" pos:column="26"/></name></expr></argument>)<pos:position pos:line="19" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then>
  <else pos:line="21" pos:column="3">else <block pos:line="21" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">char<pos:position pos:line="22" pos:column="9"/></name> <modifier pos:line="22" pos:column="10">*<pos:position pos:line="22" pos:column="11"/></modifier></type><name pos:line="22" pos:column="11">newp<pos:position pos:line="22" pos:column="15"/></name></decl>;<pos:position pos:line="22" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">size_t<pos:position pos:line="23" pos:column="11"/></name></type> <name pos:line="23" pos:column="12">j<pos:position pos:line="23" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="23" pos:column="15">i<pos:position pos:line="23" pos:column="16"/></name></decl>;<pos:position pos:line="23" pos:column="17"/></decl_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* Otherwise, drop / and the first character (i.e., item type) ... */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">newp<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <name pos:line="26" pos:column="12">path<pos:position pos:line="26" pos:column="16"/></name></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">newp<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">+=<pos:position pos:line="27" pos:column="12"/></operator> <literal type="number" pos:line="27" pos:column="13">2<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* ... then turn ? into TAB for search servers, Veronica, etc. ... */</comment>
    <expr_stmt><expr><name pos:line="30" pos:column="5">j<pos:position pos:line="30" pos:column="6"/></name> <operator pos:line="30" pos:column="7">=<pos:position pos:line="30" pos:column="8"/></operator> <call><name pos:line="30" pos:column="9">strlen<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">newp<pos:position pos:line="30" pos:column="20"/></name></expr></argument>)<pos:position pos:line="30" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>
    <for pos:line="31" pos:column="5">for<control pos:line="31" pos:column="8">(<init><expr><name pos:line="31" pos:column="9">i<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <literal type="number" pos:line="31" pos:column="13">0<pos:position pos:line="31" pos:column="14"/></literal></expr>;<pos:position pos:line="31" pos:column="15"/></init> <condition><expr><name pos:line="31" pos:column="16">i<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">&lt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">j<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></condition> <incr><expr><name pos:line="31" pos:column="21">i<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">++<pos:position pos:line="31" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="25"/></control>
      <block type="pseudo"><if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><name><name pos:line="32" pos:column="10">newp<pos:position pos:line="32" pos:column="14"/></name><index pos:line="32" pos:column="14">[<expr><name pos:line="32" pos:column="15">i<pos:position pos:line="32" pos:column="16"/></name></expr>]<pos:position pos:line="32" pos:column="17"/></index></name> <operator pos:line="32" pos:column="18">==<pos:position pos:line="32" pos:column="20"/></operator> <literal type="char" pos:line="32" pos:column="21">'?'<pos:position pos:line="32" pos:column="24"/></literal></expr>)<pos:position pos:line="32" pos:column="25"/></condition><then pos:line="32" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="9">newp<pos:position pos:line="33" pos:column="13"/></name><index pos:line="33" pos:column="13">[<expr><name pos:line="33" pos:column="14">i<pos:position pos:line="33" pos:column="15"/></name></expr>]<pos:position pos:line="33" pos:column="16"/></index></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <literal type="char" pos:line="33" pos:column="19">'\x09'<pos:position pos:line="33" pos:column="25"/></literal></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt></block></then></if></block></for>

    <comment type="block" pos:line="35" pos:column="5">/* ... and finally unescape */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">result<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">Curl_urldecode<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">data<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">newp<pos:position pos:line="36" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="41">0<pos:position pos:line="36" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="44">&amp;<pos:position pos:line="36" pos:column="49"/></operator><name pos:line="36" pos:column="45">sel<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="50">&amp;<pos:position pos:line="36" pos:column="55"/></operator><name pos:line="36" pos:column="51">len<pos:position pos:line="36" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="56">FALSE<pos:position pos:line="36" pos:column="61"/></name></expr></argument>)<pos:position pos:line="36" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="63"/></expr_stmt>
    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><name pos:line="37" pos:column="8">result<pos:position pos:line="37" pos:column="14"/></name></expr>)<pos:position pos:line="37" pos:column="15"/></condition><then pos:line="37" pos:column="15">
      <block type="pseudo"><return pos:line="38" pos:column="7">return <expr><name pos:line="38" pos:column="14">result<pos:position pos:line="38" pos:column="20"/></name></expr>;<pos:position pos:line="38" pos:column="21"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="39" pos:column="5">sel_org<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <name pos:line="39" pos:column="15">sel<pos:position pos:line="39" pos:column="18"/></name></expr>;<pos:position pos:line="39" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="40" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="42" pos:column="3">/* We use Curl_write instead of Curl_sendf to make sure the entire buffer is
     sent, which could be sizeable with long selectors. */</comment>
  <expr_stmt><expr><name pos:line="44" pos:column="3">k<pos:position pos:line="44" pos:column="4"/></name> <operator pos:line="44" pos:column="5">=<pos:position pos:line="44" pos:column="6"/></operator> <call><name pos:line="44" pos:column="7">curlx_uztosz<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><name pos:line="44" pos:column="20">len<pos:position pos:line="44" pos:column="23"/></name></expr></argument>)<pos:position pos:line="44" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt>

  <for pos:line="46" pos:column="3">for<control pos:line="46" pos:column="6">(<init pos:line="46" pos:column="7">;<pos:position pos:line="46" pos:column="8"/></init><condition pos:line="46" pos:column="8">;<pos:position pos:line="46" pos:column="9"/></condition><incr/>)<pos:position pos:line="46" pos:column="10"/></control> <block pos:line="46" pos:column="11">{
    <expr_stmt><expr><name pos:line="47" pos:column="5">result<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">Curl_write<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">conn<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="31">sockfd<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="39">sel<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="44">k<pos:position pos:line="47" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="47">&amp;<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="48">amount<pos:position pos:line="47" pos:column="54"/></name></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><operator pos:line="48" pos:column="8">!<pos:position pos:line="48" pos:column="9"/></operator><name pos:line="48" pos:column="9">result<pos:position pos:line="48" pos:column="15"/></name></expr>)<pos:position pos:line="48" pos:column="16"/></condition><then pos:line="48" pos:column="16"> <block pos:line="48" pos:column="17">{ <comment type="block" pos:line="48" pos:column="19">/* Which may not have written it all! */</comment>
      <expr_stmt><expr><name pos:line="49" pos:column="7">result<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <call><name pos:line="49" pos:column="16">Curl_client_write<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">(<argument><expr><name pos:line="49" pos:column="34">conn<pos:position pos:line="49" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="40">CLIENTWRITE_HEADER<pos:position pos:line="49" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="60">sel<pos:position pos:line="49" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="65">amount<pos:position pos:line="49" pos:column="71"/></name></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="73"/></expr_stmt>
      <if pos:line="50" pos:column="7">if<condition pos:line="50" pos:column="9">(<expr><name pos:line="50" pos:column="10">result<pos:position pos:line="50" pos:column="16"/></name></expr>)<pos:position pos:line="50" pos:column="17"/></condition><then pos:line="50" pos:column="17">
        <block type="pseudo"><break pos:line="51" pos:column="9">break;<pos:position pos:line="51" pos:column="15"/></break></block></then></if>

      <expr_stmt><expr><name pos:line="53" pos:column="7">k<pos:position pos:line="53" pos:column="8"/></name> <operator pos:line="53" pos:column="9">-=<pos:position pos:line="53" pos:column="11"/></operator> <name pos:line="53" pos:column="12">amount<pos:position pos:line="53" pos:column="18"/></name></expr>;<pos:position pos:line="53" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name pos:line="54" pos:column="7">sel<pos:position pos:line="54" pos:column="10"/></name> <operator pos:line="54" pos:column="11">+=<pos:position pos:line="54" pos:column="13"/></operator> <name pos:line="54" pos:column="14">amount<pos:position pos:line="54" pos:column="20"/></name></expr>;<pos:position pos:line="54" pos:column="21"/></expr_stmt>
      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">(<expr><name pos:line="55" pos:column="10">k<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">&lt;<pos:position pos:line="55" pos:column="16"/></operator> <literal type="number" pos:line="55" pos:column="14">1<pos:position pos:line="55" pos:column="15"/></literal></expr>)<pos:position pos:line="55" pos:column="16"/></condition><then pos:line="55" pos:column="16">
        <block type="pseudo"><break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break></block></then></if> <comment type="block" pos:line="56" pos:column="16">/* but it did write it all */</comment>
    }<pos:position pos:line="57" pos:column="6"/></block></then>
    <else pos:line="58" pos:column="5">else
      <block type="pseudo"><break pos:line="59" pos:column="7">break;<pos:position pos:line="59" pos:column="13"/></break></block></else></if>

    <comment type="block" pos:line="61" pos:column="5">/* Don't busyloop. The entire loop thing is a work-around as it causes a
       BLOCKING behavior which is a NO-NO. This function should rather be
       split up in a do and a doing piece where the pieces that aren't
       possible to send now will be sent in the doing function repeatedly
       until the entire request is sent.

       Wait a while for the socket to be writable. Note that this doesn't
       acknowledge the timeout.
    */</comment>
    <if pos:line="70" pos:column="5">if<condition pos:line="70" pos:column="7">(<expr><call><name pos:line="70" pos:column="8">SOCKET_WRITABLE<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><name pos:line="70" pos:column="24">sockfd<pos:position pos:line="70" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="32">100<pos:position pos:line="70" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="36"/></argument_list></call> <operator pos:line="70" pos:column="37">&lt;<pos:position pos:line="70" pos:column="41"/></operator> <literal type="number" pos:line="70" pos:column="39">0<pos:position pos:line="70" pos:column="40"/></literal></expr>)<pos:position pos:line="70" pos:column="41"/></condition><then pos:line="70" pos:column="41"> <block pos:line="70" pos:column="42">{
      <expr_stmt><expr><name pos:line="71" pos:column="7">result<pos:position pos:line="71" pos:column="13"/></name> <operator pos:line="71" pos:column="14">=<pos:position pos:line="71" pos:column="15"/></operator> <name pos:line="71" pos:column="16">CURLE_SEND_ERROR<pos:position pos:line="71" pos:column="32"/></name></expr>;<pos:position pos:line="71" pos:column="33"/></expr_stmt>
      <break pos:line="72" pos:column="7">break;<pos:position pos:line="72" pos:column="13"/></break>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>
  }<pos:position pos:line="74" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="76" pos:column="3">free<pos:position pos:line="76" pos:column="7"/></name><argument_list pos:line="76" pos:column="7">(<argument><expr><name pos:line="76" pos:column="8">sel_org<pos:position pos:line="76" pos:column="15"/></name></expr></argument>)<pos:position pos:line="76" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="17"/></expr_stmt>

  <if pos:line="78" pos:column="3">if<condition pos:line="78" pos:column="5">(<expr><operator pos:line="78" pos:column="6">!<pos:position pos:line="78" pos:column="7"/></operator><name pos:line="78" pos:column="7">result<pos:position pos:line="78" pos:column="13"/></name></expr>)<pos:position pos:line="78" pos:column="14"/></condition><then pos:line="78" pos:column="14">
    <comment type="block" pos:line="79" pos:column="5">/* We can use Curl_sendf to send the terminal \r\n relatively safely and
       save allocing another string/doing another _write loop. */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="5">result<pos:position pos:line="81" pos:column="11"/></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <call><name pos:line="81" pos:column="14">Curl_sendf<pos:position pos:line="81" pos:column="24"/></name><argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">sockfd<pos:position pos:line="81" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="33">conn<pos:position pos:line="81" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="39">"\r\n"<pos:position pos:line="81" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="47"/></expr_stmt></block></then></if>
  <if pos:line="82" pos:column="3">if<condition pos:line="82" pos:column="5">(<expr><name pos:line="82" pos:column="6">result<pos:position pos:line="82" pos:column="12"/></name></expr>)<pos:position pos:line="82" pos:column="13"/></condition><then pos:line="82" pos:column="13"> <block pos:line="82" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">failf<pos:position pos:line="83" pos:column="10"/></name><argument_list pos:line="83" pos:column="10">(<argument><expr><name pos:line="83" pos:column="11">data<pos:position pos:line="83" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="17">"Failed sending Gopher request"<pos:position pos:line="83" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="50"/></expr_stmt>
    <return pos:line="84" pos:column="5">return <expr><name pos:line="84" pos:column="12">result<pos:position pos:line="84" pos:column="18"/></name></expr>;<pos:position pos:line="84" pos:column="19"/></return>
  }<pos:position pos:line="85" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="86" pos:column="3">result<pos:position pos:line="86" pos:column="9"/></name> <operator pos:line="86" pos:column="10">=<pos:position pos:line="86" pos:column="11"/></operator> <call><name pos:line="86" pos:column="12">Curl_client_write<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">conn<pos:position pos:line="86" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="36">CLIENTWRITE_HEADER<pos:position pos:line="86" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="56">(<pos:position pos:line="86" pos:column="57"/></operator><name pos:line="86" pos:column="57">char<pos:position pos:line="86" pos:column="61"/></name> <operator pos:line="86" pos:column="62">*<pos:position pos:line="86" pos:column="63"/></operator><operator pos:line="86" pos:column="63">)<pos:position pos:line="86" pos:column="64"/></operator><literal type="string" pos:line="86" pos:column="64">"\r\n"<pos:position pos:line="86" pos:column="70"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="72">2<pos:position pos:line="86" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="75"/></expr_stmt>
  <if pos:line="87" pos:column="3">if<condition pos:line="87" pos:column="5">(<expr><name pos:line="87" pos:column="6">result<pos:position pos:line="87" pos:column="12"/></name></expr>)<pos:position pos:line="87" pos:column="13"/></condition><then pos:line="87" pos:column="13">
    <block type="pseudo"><return pos:line="88" pos:column="5">return <expr><name pos:line="88" pos:column="12">result<pos:position pos:line="88" pos:column="18"/></name></expr>;<pos:position pos:line="88" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="90" pos:column="3">Curl_setup_transfer<pos:position pos:line="90" pos:column="22"/></name><argument_list pos:line="90" pos:column="22">(<argument><expr><name pos:line="90" pos:column="23">conn<pos:position pos:line="90" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="29">FIRSTSOCKET<pos:position pos:line="90" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="42">-<pos:position pos:line="90" pos:column="43"/></operator><literal type="number" pos:line="90" pos:column="43">1<pos:position pos:line="90" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="46">FALSE<pos:position pos:line="90" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="53">bytecount<pos:position pos:line="90" pos:column="62"/></name></expr></argument>,
                      <argument><expr><operator pos:line="91" pos:column="23">-<pos:position pos:line="91" pos:column="24"/></operator><literal type="number" pos:line="91" pos:column="24">1<pos:position pos:line="91" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="27">NULL<pos:position pos:line="91" pos:column="31"/></name></expr></argument>)<pos:position pos:line="91" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="33"/></expr_stmt> <comment type="block" pos:line="91" pos:column="34">/* no upload */</comment>
  <return pos:line="92" pos:column="3">return <expr><name pos:line="92" pos:column="10">CURLE_OK<pos:position pos:line="92" pos:column="18"/></name></expr>;<pos:position pos:line="92" pos:column="19"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
