  fputs(
 "              To use a Metalink file in the local file system, use FILE proto-\n"
 "              col (file://):\n"
 "\n"
 "               curl --metalink file://example.metalink\n"
 "\n"
-"              Please  note  that if FILE protocol is disabled, there is no way\n"
-"              to use a local Metalink file at the time of this  writing.  Also\n"
-"              note  that  if  --metalink  and -i, --include are used together,\n"
-"              --include will be ignored. This is because including headers  in\n"
+"              Please note that if FILE protocol is disabled, there is  no  way\n"
+"              to  use  a local Metalink file at the time of this writing. Also\n"
+"              note that if --metalink and -i,  --include  are  used  together,\n"
+"              --include  will be ignored. This is because including headers in\n"
 , stdout);
  fputs(
-"              the  response  will break Metalink parser and if the headers are\n"
+"              the response will break Metalink parser and if the  headers  are\n"
 "              included in the file described in Metalink file, hash check will\n"
 "              fail.\n"
 "\n"
-"              --metalink  requires  that  the  underlying libcurl was built to\n"
+"              --metalink requires that the underlying  libcurl  was  built  to\n"
 "              support metalink. Added in 7.27.0.\n"
 "\n"
 "       --negotiate\n"
 "              (HTTP) Enables Negotiate (SPNEGO) authentication.\n"
 "\n"
-"              This option requires a library built with GSS-API or  SSPI  sup-\n"
+"              This  option  requires a library built with GSS-API or SSPI sup-\n"
 , stdout);
  fputs(
-"              port.  Use  -V,  --version  to  see  if  your curl supports GSS-\n"
+"              port. Use -V, --version  to  see  if  your  curl  supports  GSS-\n"
 "              API/SSPI or SPNEGO.\n"
 "\n"
-"              When using this option, you must also provide a fake -u,  --user\n"
-"              option  to  activate the authentication code properly. Sending a\n"
-"              '-u :' is enough as the user name  and  password  from  the  -u,\n"
+"              When  using this option, you must also provide a fake -u, --user\n"
+"              option to activate the authentication code properly.  Sending  a\n"
+"              '-u  :'  is  enough  as  the user name and password from the -u,\n"
 "              --user option aren't actually used.\n"
 "\n"
-"              If  this  option  is  used  several times, only the first one is\n"
+"              If this option is used several times,  only  the  first  one  is\n"
 , stdout);
  fputs(
 "              used.\n"
 "\n"
 "              See also --basic and --ntlm and --anyauth and --proxy-negotiate.\n"
 "\n"
 "       --netrc-file <filemame>\n"
-"              This option is similar to -n, --netrc, except that  you  provide\n"
-"              the  path  (absolute  or  relative)  to the netrc file that Curl\n"
+"              This  option  is similar to -n, --netrc, except that you provide\n"
+"              the path (absolute or relative) to  the  netrc  file  that  Curl\n"
 "              should use.  You can only specify one netrc file per invocation.\n"
-"              If  several --netrc-file options are provided, the last one will\n"
+"              If several --netrc-file options are provided, the last one  will\n"
 "              be used.\n"
 "\n"
 , stdout);
  fputs(
 "              It will abide by --netrc-optional if specified.\n"
 "\n"
 "              This option overrides -n, --netrc. Added in 7.21.5.\n"
 "\n"
 "       --netrc-optional\n"
-"              Very similar to -n, --netrc, but this option  makes  the  .netrc\n"
+"              Very  similar  to  -n, --netrc, but this option makes the .netrc\n"
 "              usage optional and not mandatory as the -n, --netrc option does.\n"
 "\n"
 "              See also --netrc-file. This option overrides -n, --netrc.\n"
 "\n"
 "       -n, --netrc\n"
-"              Makes  curl  scan  the  .netrc  (_netrc  on Windows) file in the\n"
+"              Makes curl scan the .netrc  (_netrc  on  Windows)  file  in  the\n"
 , stdout);
  fputs(
 "              user's home directory for login name and password. This is typi-\n"
-"              cally  used for FTP on Unix. If used with HTTP, curl will enable\n"
+"              cally used for FTP on Unix. If used with HTTP, curl will  enable\n"
 "              user authentication. See netrc(5) ftp(1) for details on the file\n"
-"              format.  Curl  will  not  complain if that file doesn't have the\n"
+"              format. Curl will not complain if that  file  doesn't  have  the\n"
 "              right permissions (it should not be either world- or group-read-\n"
-"              able).  The environment variable \"HOME\" is used to find the home\n"
+"              able). The environment variable \"HOME\" is used to find the  home\n"
 "              directory.\n"
 "\n"
 , stdout);
  fputs(
-"              A quick and very simple example of how  to  setup  a  .netrc  to\n"
-"              allow  curl to FTP to the machine host.domain.com with user name\n"
+"              A  quick  and  very  simple  example of how to setup a .netrc to\n"
+"              allow curl to FTP to the machine host.domain.com with user  name\n"
 "              'myself' and password 'secret' should look similar to:\n"
 "\n"
 "              machine host.domain.com login myself password secret\n"
 "\n"
 "       -:, --next\n"
 "              Tells curl to use a separate operation for the following URL and\n"
-"              associated   options.  This  allows  you  to  send  several  URL\n"
+"              associated  options.  This  allows  you  to  send  several   URL\n"
 , stdout);
  fputs(
-"              requests, each with their own  specific  options,  for  example,\n"
+"              requests,  each  with  their  own specific options, for example,\n"
 "              such as different user names or custom requests for each.\n"
 "\n"
-"              -:,  --next  will  reset  all local options and only global ones\n"
-"              will have their values survive over to the  operation  following\n"
-"              the -:, --next instruction. Global options include -v, --verbose\n"
-"              and --fail-early.\n"
+"              -:, --next will reset all local options  and  only  global  ones\n"
+"              will  have  their values survive over to the operation following\n"
+"              the -:, --next instruction. Global options  include  -v,  --ver-\n"
+"              bose, --trace, --trace-ascii and --fail-early.\n"
 "\n"
 , stdout);
  fputs(
-"              For example, you can do both a GET and a POST in a  single  com-\n"
+"              For  example,  you can do both a GET and a POST in a single com-\n"
 "              mand line:\n"
 "\n"
 "               curl www1.example.com --next -d postthis www2.example.com\n"
 "\n"
 "              Added in 7.36.0.\n"
 "\n"
 "       --no-alpn\n"
-"              (HTTPS)  Disable  the  ALPN  TLS  extension.  ALPN is enabled by\n"
-"              default if libcurl was built with an SSL library  that  supports\n"
-"              ALPN.  ALPN is used by a libcurl that supports HTTP/2 to negoti-\n"
+"              (HTTPS) Disable the ALPN  TLS  extension.  ALPN  is  enabled  by\n"
+"              default  if  libcurl was built with an SSL library that supports\n"
+"              ALPN. ALPN is used by a libcurl that supports HTTP/2 to  negoti-\n"
 , stdout);
  fputs(
 "              ate HTTP/2 support with the server during https sessions.\n"
 "\n"
-"              See also --no-npn  and  --http2.  --no-alpn  requires  that  the\n"
+"              See  also  --no-npn  and  --http2.  --no-alpn  requires that the\n"
 "              underlying libcurl was built to support TLS. Added in 7.36.0.\n"
 "\n"
 "       -N, --no-buffer\n"
 "              Disables the buffering of the output stream. In normal work sit-\n"
-"              uations, curl will use a standard buffered  output  stream  that\n"
+"              uations,  curl  will  use a standard buffered output stream that\n"
 "              will have the effect that it will output the data in chunks, not\n"
 , stdout);
  fputs(
-"              necessarily exactly when the data arrives.   Using  this  option\n"
+"              necessarily  exactly  when  the data arrives.  Using this option\n"
 "              will disable that buffering.\n"
 "\n"
-"              Note  that  this  is the negated option name documented. You can\n"
+"              Note that this is the negated option name  documented.  You  can\n"
 "              thus use --buffer to enforce the buffering.\n"
 "\n"
 "       --no-keepalive\n"
-"              Disables the use of keepalive messages on  the  TCP  connection.\n"
+"              Disables  the  use  of keepalive messages on the TCP connection.\n"
 "              curl otherwis enables them by default.\n"
 "\n"
-"              Note  that  this  is the negated option name documented. You can\n"
+"              Note that this is the negated option name  documented.  You  can\n"
 , stdout);
  fputs(
 "              thus use --keepalive to enforce keepalive.\n"
 "\n"
 "       --no-npn\n"
 "              (HTTPS) Disable the NPN TLS extension. NPN is enabled by default\n"
-"              if  libcurl was built with an SSL library that supports NPN. NPN\n"
-"              is used by a libcurl that supports HTTP/2  to  negotiate  HTTP/2\n"
+"              if libcurl was built with an SSL library that supports NPN.  NPN\n"
+"              is  used  by  a libcurl that supports HTTP/2 to negotiate HTTP/2\n"
 "              support with the server during https sessions.\n"
 "\n"
-"              See  also  --no-alpn  and  --http2.  --no-npn  requires that the\n"
+"              See also --no-alpn  and  --http2.  --no-npn  requires  that  the\n"
 , stdout);
  fputs(
 "              underlying libcurl was built to support TLS. Added in 7.36.0.\n"
 "\n"
 "       --no-sessionid\n"
-"              (TLS) Disable curl's use of SSL session-ID caching.  By  default\n"
-"              all  transfers are done using the cache. Note that while nothing\n"
-"              should ever get hurt by attempting  to  reuse  SSL  session-IDs,\n"
+"              (TLS)  Disable curl's use of SSL session-ID caching.  By default\n"
+"              all transfers are done using the cache. Note that while  nothing\n"
+"              should  ever  get  hurt  by attempting to reuse SSL session-IDs,\n"
 "              there seem to be broken SSL implementations in the wild that may\n"
 "              require you to disable this in order for you to succeed.\n"
 "\n"
 , stdout);
  fputs(
-"              Note that this is the negated option name  documented.  You  can\n"
+"              Note  that  this  is the negated option name documented. You can\n"
 "              thus use --sessionid to enforce session-ID caching.\n"
 "\n"
 "              Added in 7.16.0.\n"
 "\n"
 "       --noproxy <no-proxy-list>\n"
-"              Comma-separated  list  of hosts which do not use a proxy, if one\n"
-"              is specified.  The only wildcard is a single * character,  which\n"
+"              Comma-separated list of hosts which do not use a proxy,  if  one\n"
+"              is  specified.  The only wildcard is a single * character, which\n"
 "              matches all hosts, and effectively disables the proxy. Each name\n"
 , stdout);
  fputs(
-"              in this list is matched as either a domain  which  contains  the\n"
-"              hostname,  or  the hostname itself. For example, local.com would\n"
-"              match  local.com,  local.com:80,  and  www.local.com,  but   not\n"
+"              in  this  list  is matched as either a domain which contains the\n"
+"              hostname, or the hostname itself. For example,  local.com  would\n"
+"              match   local.com,  local.com:80,  and  www.local.com,  but  not\n"
 "              www.notlocal.com.\n"
 "\n"
+"              Since 7.53.0, This option overrides  the  environment  variables\n"
+"              that  disable the proxy. If there's an environment variable dis-\n"
+, stdout);
+ fputs(
+"              abling a proxy, you can set noproxy list to \"\" to override it.\n"
+"\n"
 "              Added in 7.19.4.\n"
 "\n"
 "       --ntlm-wb\n"
 "              (HTTP) Enables NTLM much in the style --ntlm does, but hand over\n"
-"              the authentication to the separate binary  ntlmauth  application\n"
-, stdout);
- fputs(
+"              the  authentication  to the separate binary ntlmauth application\n"
 "              that is executed when needed.\n"
 "\n"
 "              See also --ntlm and --proxy-ntlm.\n"
 "\n"
-"       --ntlm (HTTP)  Enables  NTLM  authentication.  The  NTLM authentication\n"
-"              method was designed by Microsoft and is used by IIS web servers.\n"
-"              It  is a proprietary protocol, reverse-engineered by clever peo-\n"
-"              ple and implemented in curl based on their efforts. This kind of\n"
-"              behavior  should  not be endorsed, you should encourage everyone\n"
+"       --ntlm (HTTP) Enables  NTLM  authentication.  The  NTLM  authentication\n"
 , stdout);
  fputs(
-"              who uses NTLM to switch to a public and  documented  authentica-\n"
+"              method was designed by Microsoft and is used by IIS web servers.\n"
+"              It is a proprietary protocol, reverse-engineered by clever  peo-\n"
+"              ple and implemented in curl based on their efforts. This kind of\n"
+"              behavior should not be endorsed, you should  encourage  everyone\n"
+"              who  uses  NTLM to switch to a public and documented authentica-\n"
 "              tion method instead, such as Digest.\n"
 "\n"
-"              If  you  want to enable NTLM for your proxy authentication, then\n"
+, stdout);
+ fputs(
+"              If you want to enable NTLM for your proxy  authentication,  then\n"
 "              use --proxy-ntlm.\n"
 "\n"
-"              If this option is used several times,  only  the  first  one  is\n"
+"              If  this  option  is  used  several times, only the first one is\n"
 "              used.\n"
 "\n"
-"              See  also  --proxy-ntlm.  --ntlm  requires  that  the underlying\n"
-, stdout);
- fputs(
-"              libcurl was built to support TLS. This option overrides  --basic\n"
+"              See also  --proxy-ntlm.  --ntlm  requires  that  the  underlying\n"
+"              libcurl  was built to support TLS. This option overrides --basic\n"
 "              and --negotiated and --digest and --anyauth.\n"
 "\n"
 "       --oauth2-bearer\n"
-"              (IMAP  POP3  SMTP) Specify the Bearer Token for OAUTH 2.0 server\n"
+, stdout);
+ fputs(
+"              (IMAP POP3 SMTP) Specify the Bearer Token for OAUTH  2.0  server\n"
 "              authentication. The Bearer Token is used in conjunction with the\n"
-"              user  name  which  can  be specified as part of the --url or -u,\n"
+"              user name which can be specified as part of  the  --url  or  -u,\n"
 "              --user options.\n"
 "\n"
-, stdout);
- fputs(
-"              The Bearer Token and user name are formatted  according  to  RFC\n"
+"              The  Bearer  Token  and user name are formatted according to RFC\n"
 "              6750.\n"
 "\n"
 "              If this option is used several times, the last one will be used.\n"
 "\n"
 "       -o, --output <file>\n"
-"              Write output to <file> instead of stdout. If you are using {} or\n"
-"              [] to fetch multiple documents, you can use '#'  followed  by  a\n"
-"              number  in  the <file> specifier. That variable will be replaced\n"
 , stdout);
  fputs(
+"              Write output to <file> instead of stdout. If you are using {} or\n"
+"              []  to  fetch  multiple documents, you can use '#' followed by a\n"
+"              number in the <file> specifier. That variable will  be  replaced\n"
 "              with the current string for the URL being fetched. Like in:\n"
 "\n"
 "               curl http://{one,two}.example.com -o \"file_#1.txt\"\n"
 "\n"
 "              or use several variables like:\n"
 "\n"
 "               curl http://{site,host}.host[1-5].com -o \"#1_#2\"\n"
 "\n"
-"              You may use this option as many times as the number of URLs  you\n"
-"              have.  For  example, if you specify two URLs on the same command\n"
-"              line, you can use it like this:\n"
-"\n"
 , stdout);
  fputs(
+"              You  may use this option as many times as the number of URLs you\n"
+"              have. For example, if you specify two URLs on the  same  command\n"
+"              line, you can use it like this:\n"
+"\n"
 "                curl -o aa example.com -o bb example.net\n"
 "\n"
-"              and the order of the -o options and  the  URLs  doesn't  matter,\n"
-"              just  that  the  first -o is for the first URL and so on, so the\n"
+"              and  the  order  of  the -o options and the URLs doesn't matter,\n"
+"              just that the first -o is for the first URL and so  on,  so  the\n"
 "              above command line can also be written as\n"
 "\n"
-"                curl example.com example.net -o aa -o bb\n"
-"\n"
-"              See also the --create-dirs option to create the  local  directo-\n"
-"              ries  dynamically.  Specifying the output as '-' (a single dash)\n"
 , stdout);
  fputs(
+"                curl example.com example.net -o aa -o bb\n"
+"\n"
+"              See  also  the --create-dirs option to create the local directo-\n"
+"              ries dynamically. Specifying the output as '-' (a  single  dash)\n"
 "              will force the output to be done to stdout.\n"
 "\n"
-"              See  also  -O,  --remote-name  and  --remote-name-all  and   -J,\n"
+"              See   also  -O,  --remote-name  and  --remote-name-all  and  -J,\n"
 "              --remote-header-name.\n"
 "\n"
 "       --pass <phrase>\n"
 "              (SSH TLS) Passphrase for the private key\n"
 "\n"
+, stdout);
+ fputs(
 "              If this option is used several times, the last one will be used.\n"
 "\n"
 "       --path-as-is\n"
-"              Tell  curl  to  not handle sequences of /../ or /./ in the given\n"
-, stdout);
- fputs(
-"              URL path. Normally curl will squash or merge them  according  to\n"
+"              Tell curl to not handle sequences of /../ or /./  in  the  given\n"
+"              URL  path.  Normally curl will squash or merge them according to\n"
 "              standards but with this option set you tell it not to do that.\n"
 "\n"
 "              Added in 7.42.0.\n"
 "\n"
 "       --pinnedpubkey <hashes>\n"
-"              (TLS)  Tells  curl  to  use  the  specified  public key file (or\n"
-"              hashes) to verify the peer. This can be a path to a  file  which\n"
-"              contains a single public key in PEM or DER format, or any number\n"
+"              (TLS) Tells curl to  use  the  specified  public  key  file  (or\n"
 , stdout);
  fputs(
+"              hashes)  to  verify the peer. This can be a path to a file which\n"
+"              contains a single public key in PEM or DER format, or any number\n"
 "              of base64 encoded sha256 hashes preceded by 'sha256//' and sepa-\n"
 "              rated by ';'\n"
 "\n"
-"              When  negotiating  a  TLS  or SSL connection, the server sends a\n"
-"              certificate indicating its identity. A public key  is  extracted\n"
-"              from  this certificate and if it does not exactly match the pub-\n"
-"              lic key provided to this option, curl will abort the  connection\n"
-"              before sending or receiving any data.\n"
-"\n"
+"              When negotiating a TLS or SSL connection,  the  server  sends  a\n"
+"              certificate  indicating  its identity. A public key is extracted\n"
 , stdout);
  fputs(
+"              from this certificate and if it does not exactly match the  pub-\n"
+"              lic  key provided to this option, curl will abort the connection\n"
+"              before sending or receiving any data.\n"
+"\n"
 "              PEM/DER support:\n"
 "                7.39.0: OpenSSL, GnuTLS and GSKit\n"
 "                7.43.0: NSS and wolfSSL/CyaSSL\n"
 "                7.47.0: mbedtls\n"
 "                7.49.0: PolarSSL sha256 support:\n"
 "                7.44.0: OpenSSL, GnuTLS, NSS and wolfSSL/CyaSSL.\n"
+, stdout);
+ fputs(
 "                7.47.0: mbedtls\n"
 "                7.49.0: PolarSSL Other SSL backends not supported.\n"
 "\n"
 "              If this option is used several times, the last one will be used.\n"
 "\n"
 "       --post301\n"
-, stdout);
- fputs(
 "              (HTTP) Tells curl to respect RFC 7231/6.4.2 and not convert POST\n"
 "              requests into GET requests when following a 301 redirection. The\n"
-"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
-"              the conversion by default to maintain  consistency.  However,  a\n"
-"              server  may  require  a POST to remain a POST after such a redi-\n"
-"              rection. This option is meaningful only when using  -L,  --loca-\n"
-"              tion.\n"
-"\n"
+"              non-RFC behaviour is ubiquitous in web browsers,  so  curl  does\n"
 , stdout);
  fputs(
-"              See  also  --post302  and --post303 and -L, --location. Added in\n"
+"              the  conversion  by  default to maintain consistency. However, a\n"
+"              server may require a POST to remain a POST after  such  a  redi-\n"
+"              rection.  This  option is meaningful only when using -L, --loca-\n"
+"              tion.\n"
+"\n"
+"              See also --post302 and --post303 and -L,  --location.  Added  in\n"
 "              7.17.1.\n"
 "\n"
 "       --post302\n"
 "              (HTTP) Tells curl to respect RFC 7231/6.4.3 and not convert POST\n"
-"              requests into GET requests when following a 302 redirection. The\n"
-"              non-RFC behaviour is ubiquitous in web browsers,  so  curl  does\n"
-"              the  conversion  by  default to maintain consistency. However, a\n"
 , stdout);
  fputs(
-"              server may require a POST to remain a POST after  such  a  redi-\n"
-"              rection.  This  option is meaningful only when using -L, --loca-\n"
+"              requests into GET requests when following a 302 redirection. The\n"
+"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
+"              the conversion by default to maintain  consistency.  However,  a\n"
+"              server  may  require  a POST to remain a POST after such a redi-\n"
+"              rection. This option is meaningful only when using  -L,  --loca-\n"
 "              tion.\n"
 "\n"
-"              See also --post301 and --post303 and -L,  --location.  Added  in\n"
+"              See  also  --post301  and --post303 and -L, --location. Added in\n"
+, stdout);
+ fputs(
 "              7.19.1.\n"
 "\n"
 "       --post303\n"
 "              (HTTP) Tells curl to respect RFC 7231/6.4.4 and not convert POST\n"
 "              requests into GET requests when following a 303 redirection. The\n"
+"              non-RFC behaviour is ubiquitous in web browsers,  so  curl  does\n"
+"              the  conversion  by  default to maintain consistency. However, a\n"
+"              server may require a POST to remain a POST after  such  a  redi-\n"
 , stdout);
  fputs(
-"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
-"              the conversion by default to maintain  consistency.  However,  a\n"
-"              server  may  require  a POST to remain a POST after such a redi-\n"
-"              rection. This option is meaningful only when using  -L,  --loca-\n"
+"              rection.  This  option is meaningful only when using -L, --loca-\n"
 "              tion.\n"
 "\n"
-"              See  also  --post302  and --post301 and -L, --location. Added in\n"
+"              See also --post302 and --post301 and -L,  --location.  Added  in\n"
 "              7.26.0.\n"
 "\n"
 "       --preproxy [protocol://]host[:port]\n"
+"              Use  the  specified  SOCKS proxy before connecting to an HTTP or\n"
+"              HTTPS -x, --proxy. In such a case curl  first  connects  to  the\n"
+"              SOCKS  proxy  and  then  connects (through SOCKS) to the HTTP or\n"
 , stdout);
  fputs(
-"              Use the specified proxy before connecting to the ordinary proxy.\n"
-"              Hence pre proxy. A pre proxy must be a SOCKS speaking proxy.\n"
+"              HTTPS proxy. Hence pre proxy.\n"
 "\n"
 "              The pre proxy string should be specified with a protocol:// pre-\n"
-"              fix to  specify  alternative  proxy  protocols.  Use  socks4://,\n"
-"              socks4a://,  socks5://  or  socks5h://  to  request the specific\n"
-"              SOCKS version to be used. No protocol specified will  make  curl\n"
-, stdout);
- fputs(
+"              fix  to  specify  alternative  proxy  protocols.  Use socks4://,\n"
+"              socks4a://, socks5:// or  socks5h://  to  request  the  specific\n"
+"              SOCKS  version  to be used. No protocol specified will make curl\n"
 "              default to SOCKS4.\n"
 "\n"
-"              If  the  port number is not specified in the proxy string, it is\n"
+"              If the port number is not specified in the proxy string,  it  is\n"
+, stdout);
+ fputs(
 "              assumed to be 1080.\n"
 "\n"
 "              User and password that might be provided in the proxy string are\n"
-"              URL  decoded by curl. This allows you to pass in special charac-\n"
+"              URL decoded by curl. This allows you to pass in special  charac-\n"
 "              ters such as @ by using %40 or pass in a colon with %3a.\n"
 "\n"
 "              If this option is used several times, the last one will be used.\n"
 "\n"
 "              Added in 7.52.0.\n"
 "\n"
+"       -#, --progress-bar\n"
+"              Make  curl  display  transfer  progress as a simple progress bar\n"
 , stdout);
  fputs(
-"       -#, --progress-bar\n"
-"              Make curl display transfer progress as  a  simple  progress  bar\n"
 "              instead of the standard, more informational, meter.\n"
 "\n"
-"              This  progress  bar draws a single line of '#' characters across\n"
+"              This progress bar draws a single line of '#'  characters  across\n"
 "              the screen and shows a percentage if the transfer size is known.\n"
-"              For  transfers  without a known size, it will instead output one\n"
+"              For transfers without a known size, it will instead  output  one\n"
 "              '#' character for every 1024 bytes transferred.\n"
 "\n"
-, stdout);
- fputs(
 "       --proto-default <protocol>\n"
 "              Tells curl to use protocol for any URL missing a scheme name.\n"
 "\n"
+, stdout);
+ fputs(
 "              Example:\n"
 "\n"
 "               curl --proto-default https ftp.mozilla.org\n"
 "\n"
-"              An unknown or unsupported  protocol  causes  error  CURLE_UNSUP-\n"
+"              An  unknown  or  unsupported  protocol causes error CURLE_UNSUP-\n"
 "              PORTED_PROTOCOL (1).\n"
 "\n"
 "              This option does not change the default proxy protocol (http).\n"
 "\n"
-"              Without  this  option curl would make a guess based on the host,\n"
-, stdout);
- fputs(
+"              Without this option curl would make a guess based on  the  host,\n"
 "              see --url for details.\n"
 "\n"
 "              Added in 7.45.0.\n"
 "\n"
 "       --proto-redir <protocols>\n"
-"              Tells curl to limit what protocols it may use on redirect.  Pro-\n"
-"              tocols  denied by --proto are not overridden by this option. See\n"
+, stdout);
+ fputs(
+"              Tells  curl to limit what protocols it may use on redirect. Pro-\n"
+"              tocols denied by --proto are not overridden by this option.  See\n"
 "              --proto for how protocols are represented.\n"
 "\n"
 "              Example, allow only HTTP and HTTPS on redirect:\n"
 "\n"
 "               curl --proto-redir -all,http,https http://example.com\n"
 "\n"
+"              By default curl will allow all protocols on redirect except sev-\n"
 , stdout);
  fputs(
-"              By default curl will allow all protocols on redirect except sev-\n"
-"              eral  disabled  for  security reasons: Since 7.19.4 FILE and SCP\n"
-"              are disabled, and since 7.40.0 SMB and SMBS are  also  disabled.\n"
-"              Specifying  all  or  +all  enables  all  protocols  on redirect,\n"
+"              eral disabled for security reasons: Since 7.19.4  FILE  and  SCP\n"
+"              are  disabled,  and since 7.40.0 SMB and SMBS are also disabled.\n"
+"              Specifying all  or  +all  enables  all  protocols  on  redirect,\n"
 "              including those disabled for security.\n"
 "\n"
 "              Added in 7.20.2.\n"
 "\n"
 "       --proto <protocols>\n"
+"              Tells  curl  to limit what protocols it may use in the transfer.\n"
 , stdout);
  fputs(
-"              Tells curl to limit what protocols it may use in  the  transfer.\n"
-"              Protocols  are evaluated left to right, are comma separated, and\n"
+"              Protocols are evaluated left to right, are comma separated,  and\n"
 "              are each a protocol name or\n"
 "\n"
 "              +  Permit this protocol in addition to protocols already permit-\n"
 "                 ted (this is the default if no modifier is used).\n"
 "\n"
-"              -  Deny  this  protocol,  removing it from the list of protocols\n"
+"              -  Deny this protocol, removing it from the  list  of  protocols\n"
 "                 already permitted.\n"
 "\n"
+"              =  Permit  only this protocol (ignoring the list already permit-\n"
 , stdout);
  fputs(
-"              =  Permit only this protocol (ignoring the list already  permit-\n"
-"                 ted),  though  subject  to  later  modification by subsequent\n"
+"                 ted), though subject  to  later  modification  by  subsequent\n"
 "                 entries in the comma separated list.\n"
 "\n"
 "              For example:\n"
 "\n"
 "              --proto -ftps  uses the default protocols, but disables ftps\n"
 "\n"
 "              --proto -all,https,+http\n"
 "                             only enables http and https\n"
 "\n"
 "              --proto =http,https\n"
-, stdout);
- fputs(
 "                             also only enables http and https\n"
 "\n"
+, stdout);
+ fputs(
 "       Unknown protocols produce a warning. This allows scripts to safely rely\n"
 "       on being able to disable potentially dangerous protocols, without rely-\n"
-"       ing upon support for that protocol being built into curl  to  avoid  an\n"
+"       ing  upon  support  for that protocol being built into curl to avoid an\n"
 "       error.\n"
 "\n"
 "       This option can be used multiple times, in which case the effect is the\n"
 "       same as concatenating the protocols into one instance of the option.\n"
 "\n"
-, stdout);
- fputs(
 "       See also --proto-redir and --proto-default. Added in 7.20.2.\n"
 "\n"
 "       --proxy-anyauth\n"
-"              Tells curl to pick a suitable authentication method when  commu-\n"
-"              nicating  with  the  given HTTP proxy. This might cause an extra\n"
+, stdout);
+ fputs(
+"              Tells  curl to pick a suitable authentication method when commu-\n"
+"              nicating with the given HTTP proxy. This might  cause  an  extra\n"
 "              request/response round-trip.\n"
 "\n"
 "              See also -x, --proxy and --proxy-basic and --proxy-digest. Added\n"
 "              in 7.13.2.\n"
 "\n"
 "       --proxy-basic\n"
-"              Tells  curl  to use HTTP Basic authentication when communicating\n"
+"              Tells curl to use HTTP Basic authentication  when  communicating\n"
+"              with the given proxy. Use --basic for enabling HTTP Basic with a\n"
 , stdout);
  fputs(
-"              with the given proxy. Use --basic for enabling HTTP Basic with a\n"
-"              remote  host.  Basic  is  the default authentication method curl\n"
+"              remote host. Basic is the  default  authentication  method  curl\n"
 "              uses with proxies.\n"
 "\n"
 "              See also -x, --proxy and --proxy-anyauth and --proxy-digest.\n"
 "\n"
 "       --proxy-cacert <file>\n"
 "              Same as --cacert but used in HTTPS proxy context.\n"
 "\n"
-"              See also  --proxy-capath  and  --cacert  and  --capath  and  -x,\n"
+"              See  also  --proxy-capath  and  --cacert  and  --capath  and -x,\n"
 "              --proxy. Added in 7.52.0.\n"
 "\n"
-, stdout);
- fputs(
 "       --proxy-capath <dir>\n"
 "              Same as --capath but used in HTTPS proxy context.\n"
 "\n"
-"              See  also  --proxy-cacert and -x, --proxy and --capath. Added in\n"
+, stdout);
+ fputs(
+"              See also --proxy-cacert and -x, --proxy and --capath.  Added  in\n"
 "              7.52.0.\n"
 "\n"
 "       --proxy-cert-type <type>\n"
 "              Same as --cert-type but used in HTTPS proxy context.\n"
 "\n"
 "              Added in 7.52.0.\n"
