<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2282_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">Curl_getaddrinfo_ex<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">nodename<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
                    <parameter><decl><type><specifier pos:line="3" pos:column="21">const<pos:position pos:line="3" pos:column="26"/></specifier> <name pos:line="3" pos:column="27">char<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">servname<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>,
                    <parameter><decl><type><specifier pos:line="4" pos:column="21">const<pos:position pos:line="4" pos:column="26"/></specifier> <name><name pos:line="4" pos:column="27">struct<pos:position pos:line="4" pos:column="33"/></name> <name pos:line="4" pos:column="34">addrinfo<pos:position pos:line="4" pos:column="42"/></name></name> <modifier pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></modifier></type><name pos:line="4" pos:column="44">hints<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="5" pos:column="21">Curl_addrinfo<pos:position pos:line="5" pos:column="34"/></name> <modifier pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></modifier><modifier pos:line="5" pos:column="36">*<pos:position pos:line="5" pos:column="37"/></modifier></type><name pos:line="5" pos:column="37">result<pos:position pos:line="5" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="44"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">addrinfo<pos:position pos:line="7" pos:column="24"/></name></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">ai<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">addrinfo<pos:position pos:line="8" pos:column="18"/></name></name> <modifier pos:line="8" pos:column="19">*<pos:position pos:line="8" pos:column="20"/></modifier></type><name pos:line="8" pos:column="20">aihead<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">Curl_addrinfo<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">cafirst<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><name pos:line="9" pos:column="28">NULL<pos:position pos:line="9" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">Curl_addrinfo<pos:position pos:line="10" pos:column="16"/></name> <modifier pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></modifier></type><name pos:line="10" pos:column="18">calast<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><name pos:line="10" pos:column="27">NULL<pos:position pos:line="10" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">Curl_addrinfo<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="18">ca<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">ss_size<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">error<pos:position pos:line="13" pos:column="12"/></name></decl>;<pos:position pos:line="13" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="15" pos:column="3">*<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">result<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <name pos:line="15" pos:column="13">NULL<pos:position pos:line="15" pos:column="17"/></name></expr>;<pos:position pos:line="15" pos:column="18"/></expr_stmt> <comment type="block" pos:line="15" pos:column="19">/* assume failure */</comment>

  <expr_stmt><expr><name pos:line="17" pos:column="3">error<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <call><name pos:line="17" pos:column="11">getaddrinfo<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">nodename<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">servname<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="43">hints<pos:position pos:line="17" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="50">&amp;<pos:position pos:line="17" pos:column="55"/></operator><name pos:line="17" pos:column="51">aihead<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">error<pos:position pos:line="18" pos:column="11"/></name></expr>)<pos:position pos:line="18" pos:column="12"/></condition><then pos:line="18" pos:column="12">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">error<pos:position pos:line="19" pos:column="17"/></name></expr>;<pos:position pos:line="19" pos:column="18"/></return></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* traverse the addrinfo list */</comment>

  <for pos:line="23" pos:column="3">for<control pos:line="23" pos:column="6">(<init><expr><name pos:line="23" pos:column="7">ai<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <name pos:line="23" pos:column="12">aihead<pos:position pos:line="23" pos:column="18"/></name></expr>;<pos:position pos:line="23" pos:column="19"/></init> <condition><expr><name pos:line="23" pos:column="20">ai<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">!=<pos:position pos:line="23" pos:column="25"/></operator> <name pos:line="23" pos:column="26">NULL<pos:position pos:line="23" pos:column="30"/></name></expr>;<pos:position pos:line="23" pos:column="31"/></condition> <incr><expr><name pos:line="23" pos:column="32">ai<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">=<pos:position pos:line="23" pos:column="36"/></operator> <name><name pos:line="23" pos:column="37">ai<pos:position pos:line="23" pos:column="39"/></name><operator pos:line="23" pos:column="39">-&gt;<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="41">ai_next<pos:position pos:line="23" pos:column="48"/></name></name></expr></incr>)<pos:position pos:line="23" pos:column="49"/></control> <block pos:line="23" pos:column="50">{

    <comment type="block" pos:line="25" pos:column="5">/* ignore elements with unsupported address family, */</comment>
    <comment type="block" pos:line="26" pos:column="5">/* settle family-specific sockaddr structure size.  */</comment>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><name><name pos:line="27" pos:column="8">ai<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">ai_family<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">==<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">AF_INET<pos:position pos:line="27" pos:column="32"/></name></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="7">ss_size<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <sizeof pos:line="28" pos:column="17">sizeof<argument_list pos:line="28" pos:column="23">(<argument><expr pos:line="28" pos:column="24">struct <name pos:line="28" pos:column="31">sockaddr_in<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></sizeof></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt></block></then>
<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef<pos:position pos:line="29" pos:column="7"/></cpp:directive> <name pos:line="29" pos:column="8">ENABLE_IPV6<pos:position pos:line="29" pos:column="19"/></name></cpp:ifdef>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if<condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">ai<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">-&gt;<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="17">ai_family<pos:position pos:line="30" pos:column="26"/></name></name> <operator pos:line="30" pos:column="27">==<pos:position pos:line="30" pos:column="29"/></operator> <name pos:line="30" pos:column="30">AF_INET6<pos:position pos:line="30" pos:column="38"/></name></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39">
      <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="7">ss_size<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <sizeof pos:line="31" pos:column="17">sizeof<argument_list pos:line="31" pos:column="23">(<argument><expr pos:line="31" pos:column="24">struct <name pos:line="31" pos:column="31">sockaddr_in6<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></sizeof></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt></block></then></if></elseif>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
    <else pos:line="33" pos:column="5">else
      <block type="pseudo"><continue pos:line="34" pos:column="7">continue;<pos:position pos:line="34" pos:column="16"/></continue></block></else></if>

    <comment type="block" pos:line="36" pos:column="5">/* ignore elements without required address info */</comment>
    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><operator pos:line="37" pos:column="8">(<pos:position pos:line="37" pos:column="9"/></operator><name><name pos:line="37" pos:column="9">ai<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">-&gt;<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="13">ai_addr<pos:position pos:line="37" pos:column="20"/></name></name> <operator pos:line="37" pos:column="21">==<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">NULL<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">)<pos:position pos:line="37" pos:column="29"/></operator> <operator pos:line="37" pos:column="30">||<pos:position pos:line="37" pos:column="32"/></operator> <operator pos:line="37" pos:column="33">!<pos:position pos:line="37" pos:column="34"/></operator><operator pos:line="37" pos:column="34">(<pos:position pos:line="37" pos:column="35"/></operator><name><name pos:line="37" pos:column="35">ai<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">-&gt;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="39">ai_addrlen<pos:position pos:line="37" pos:column="49"/></name></name> <operator pos:line="37" pos:column="50">&gt;<pos:position pos:line="37" pos:column="54"/></operator> <literal type="number" pos:line="37" pos:column="52">0<pos:position pos:line="37" pos:column="53"/></literal><operator pos:line="37" pos:column="53">)<pos:position pos:line="37" pos:column="54"/></operator></expr>)<pos:position pos:line="37" pos:column="55"/></condition><then pos:line="37" pos:column="55">
      <block type="pseudo"><continue pos:line="38" pos:column="7">continue;<pos:position pos:line="38" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="40" pos:column="5">/* ignore elements with bogus address size */</comment>
    <if pos:line="41" pos:column="5">if<condition pos:line="41" pos:column="7">(<expr><operator pos:line="41" pos:column="8">(<pos:position pos:line="41" pos:column="9"/></operator><name pos:line="41" pos:column="9">size_t<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">)<pos:position pos:line="41" pos:column="16"/></operator><name><name pos:line="41" pos:column="16">ai<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">-&gt;<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="20">ai_addrlen<pos:position pos:line="41" pos:column="30"/></name></name> <operator pos:line="41" pos:column="31">&lt;<pos:position pos:line="41" pos:column="35"/></operator> <name pos:line="41" pos:column="33">ss_size<pos:position pos:line="41" pos:column="40"/></name></expr>)<pos:position pos:line="41" pos:column="41"/></condition><then pos:line="41" pos:column="41">
      <block type="pseudo"><continue pos:line="42" pos:column="7">continue;<pos:position pos:line="42" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name pos:line="44" pos:column="5">ca<pos:position pos:line="44" pos:column="7"/></name> <operator pos:line="44" pos:column="8">=<pos:position pos:line="44" pos:column="9"/></operator> <call><name pos:line="44" pos:column="10">malloc<pos:position pos:line="44" pos:column="16"/></name><argument_list pos:line="44" pos:column="16">(<argument><expr><sizeof pos:line="44" pos:column="17">sizeof<argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">Curl_addrinfo<pos:position pos:line="44" pos:column="37"/></name></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>
    <if pos:line="45" pos:column="5">if<condition pos:line="45" pos:column="7">(<expr><operator pos:line="45" pos:column="8">!<pos:position pos:line="45" pos:column="9"/></operator><name pos:line="45" pos:column="9">ca<pos:position pos:line="45" pos:column="11"/></name></expr>)<pos:position pos:line="45" pos:column="12"/></condition><then pos:line="45" pos:column="12"> <block pos:line="45" pos:column="13">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">error<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <name pos:line="46" pos:column="15">EAI_MEMORY<pos:position pos:line="46" pos:column="25"/></name></expr>;<pos:position pos:line="46" pos:column="26"/></expr_stmt>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="50" pos:column="5">/* copy each structure member individually, member ordering, */</comment>
    <comment type="block" pos:line="51" pos:column="5">/* size, or padding might be different for each platform.    */</comment>

    <expr_stmt><expr><name><name pos:line="53" pos:column="5">ca<pos:position pos:line="53" pos:column="7"/></name><operator pos:line="53" pos:column="7">-&gt;<pos:position pos:line="53" pos:column="12"/></operator><name pos:line="53" pos:column="9">ai_flags<pos:position pos:line="53" pos:column="17"/></name></name>     <operator pos:line="53" pos:column="22">=<pos:position pos:line="53" pos:column="23"/></operator> <name><name pos:line="53" pos:column="24">ai<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">-&gt;<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="28">ai_flags<pos:position pos:line="53" pos:column="36"/></name></name></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">ca<pos:position pos:line="54" pos:column="7"/></name><operator pos:line="54" pos:column="7">-&gt;<pos:position pos:line="54" pos:column="12"/></operator><name pos:line="54" pos:column="9">ai_family<pos:position pos:line="54" pos:column="18"/></name></name>    <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <name><name pos:line="54" pos:column="24">ai<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">-&gt;<pos:position pos:line="54" pos:column="31"/></operator><name pos:line="54" pos:column="28">ai_family<pos:position pos:line="54" pos:column="37"/></name></name></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="55" pos:column="5">ca<pos:position pos:line="55" pos:column="7"/></name><operator pos:line="55" pos:column="7">-&gt;<pos:position pos:line="55" pos:column="12"/></operator><name pos:line="55" pos:column="9">ai_socktype<pos:position pos:line="55" pos:column="20"/></name></name>  <operator pos:line="55" pos:column="22">=<pos:position pos:line="55" pos:column="23"/></operator> <name><name pos:line="55" pos:column="24">ai<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">-&gt;<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="28">ai_socktype<pos:position pos:line="55" pos:column="39"/></name></name></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">ca<pos:position pos:line="56" pos:column="7"/></name><operator pos:line="56" pos:column="7">-&gt;<pos:position pos:line="56" pos:column="12"/></operator><name pos:line="56" pos:column="9">ai_protocol<pos:position pos:line="56" pos:column="20"/></name></name>  <operator pos:line="56" pos:column="22">=<pos:position pos:line="56" pos:column="23"/></operator> <name><name pos:line="56" pos:column="24">ai<pos:position pos:line="56" pos:column="26"/></name><operator pos:line="56" pos:column="26">-&gt;<pos:position pos:line="56" pos:column="31"/></operator><name pos:line="56" pos:column="28">ai_protocol<pos:position pos:line="56" pos:column="39"/></name></name></expr>;<pos:position pos:line="56" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">ca<pos:position pos:line="57" pos:column="7"/></name><operator pos:line="57" pos:column="7">-&gt;<pos:position pos:line="57" pos:column="12"/></operator><name pos:line="57" pos:column="9">ai_addrlen<pos:position pos:line="57" pos:column="19"/></name></name>   <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <operator pos:line="57" pos:column="24">(<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="25">curl_socklen_t<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">)<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="40">ss_size<pos:position pos:line="57" pos:column="47"/></name></expr>;<pos:position pos:line="57" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">ca<pos:position pos:line="58" pos:column="7"/></name><operator pos:line="58" pos:column="7">-&gt;<pos:position pos:line="58" pos:column="12"/></operator><name pos:line="58" pos:column="9">ai_addr<pos:position pos:line="58" pos:column="16"/></name></name>      <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <name pos:line="58" pos:column="24">NULL<pos:position pos:line="58" pos:column="28"/></name></expr>;<pos:position pos:line="58" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="59" pos:column="5">ca<pos:position pos:line="59" pos:column="7"/></name><operator pos:line="59" pos:column="7">-&gt;<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="9">ai_canonname<pos:position pos:line="59" pos:column="21"/></name></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <name pos:line="59" pos:column="24">NULL<pos:position pos:line="59" pos:column="28"/></name></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">ca<pos:position pos:line="60" pos:column="7"/></name><operator pos:line="60" pos:column="7">-&gt;<pos:position pos:line="60" pos:column="12"/></operator><name pos:line="60" pos:column="9">ai_next<pos:position pos:line="60" pos:column="16"/></name></name>      <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">NULL<pos:position pos:line="60" pos:column="28"/></name></expr>;<pos:position pos:line="60" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="62" pos:column="5">ca<pos:position pos:line="62" pos:column="7"/></name><operator pos:line="62" pos:column="7">-&gt;<pos:position pos:line="62" pos:column="12"/></operator><name pos:line="62" pos:column="9">ai_addr<pos:position pos:line="62" pos:column="16"/></name></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <call><name pos:line="62" pos:column="19">malloc<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">ss_size<pos:position pos:line="62" pos:column="33"/></name></expr></argument>)<pos:position pos:line="62" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="35"/></expr_stmt>
    <if pos:line="63" pos:column="5">if<condition pos:line="63" pos:column="7">(<expr><operator pos:line="63" pos:column="8">!<pos:position pos:line="63" pos:column="9"/></operator><name><name pos:line="63" pos:column="9">ca<pos:position pos:line="63" pos:column="11"/></name><operator pos:line="63" pos:column="11">-&gt;<pos:position pos:line="63" pos:column="16"/></operator><name pos:line="63" pos:column="13">ai_addr<pos:position pos:line="63" pos:column="20"/></name></name></expr>)<pos:position pos:line="63" pos:column="21"/></condition><then pos:line="63" pos:column="21"> <block pos:line="63" pos:column="22">{
      <expr_stmt><expr><name pos:line="64" pos:column="7">error<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">=<pos:position pos:line="64" pos:column="14"/></operator> <name pos:line="64" pos:column="15">EAI_MEMORY<pos:position pos:line="64" pos:column="25"/></name></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">free<pos:position pos:line="65" pos:column="11"/></name><argument_list pos:line="65" pos:column="11">(<argument><expr><name pos:line="65" pos:column="12">ca<pos:position pos:line="65" pos:column="14"/></name></expr></argument>)<pos:position pos:line="65" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="16"/></expr_stmt>
      <break pos:line="66" pos:column="7">break;<pos:position pos:line="66" pos:column="13"/></break>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">memcpy<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><name><name pos:line="68" pos:column="12">ca<pos:position pos:line="68" pos:column="14"/></name><operator pos:line="68" pos:column="14">-&gt;<pos:position pos:line="68" pos:column="19"/></operator><name pos:line="68" pos:column="16">ai_addr<pos:position pos:line="68" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="25">ai<pos:position pos:line="68" pos:column="27"/></name><operator pos:line="68" pos:column="27">-&gt;<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="29">ai_addr<pos:position pos:line="68" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="38">ss_size<pos:position pos:line="68" pos:column="45"/></name></expr></argument>)<pos:position pos:line="68" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="47"/></expr_stmt>

    <if pos:line="70" pos:column="5">if<condition pos:line="70" pos:column="7">(<expr><name><name pos:line="70" pos:column="8">ai<pos:position pos:line="70" pos:column="10"/></name><operator pos:line="70" pos:column="10">-&gt;<pos:position pos:line="70" pos:column="15"/></operator><name pos:line="70" pos:column="12">ai_canonname<pos:position pos:line="70" pos:column="24"/></name></name> <operator pos:line="70" pos:column="25">!=<pos:position pos:line="70" pos:column="27"/></operator> <name pos:line="70" pos:column="28">NULL<pos:position pos:line="70" pos:column="32"/></name></expr>)<pos:position pos:line="70" pos:column="33"/></condition><then pos:line="70" pos:column="33"> <block pos:line="70" pos:column="34">{
      <expr_stmt><expr><name><name pos:line="71" pos:column="7">ca<pos:position pos:line="71" pos:column="9"/></name><operator pos:line="71" pos:column="9">-&gt;<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="11">ai_canonname<pos:position pos:line="71" pos:column="23"/></name></name> <operator pos:line="71" pos:column="24">=<pos:position pos:line="71" pos:column="25"/></operator> <call><name pos:line="71" pos:column="26">strdup<pos:position pos:line="71" pos:column="32"/></name><argument_list pos:line="71" pos:column="32">(<argument><expr><name><name pos:line="71" pos:column="33">ai<pos:position pos:line="71" pos:column="35"/></name><operator pos:line="71" pos:column="35">-&gt;<pos:position pos:line="71" pos:column="40"/></operator><name pos:line="71" pos:column="37">ai_canonname<pos:position pos:line="71" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="51"/></expr_stmt>
      <if pos:line="72" pos:column="7">if<condition pos:line="72" pos:column="9">(<expr><operator pos:line="72" pos:column="10">!<pos:position pos:line="72" pos:column="11"/></operator><name><name pos:line="72" pos:column="11">ca<pos:position pos:line="72" pos:column="13"/></name><operator pos:line="72" pos:column="13">-&gt;<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="15">ai_canonname<pos:position pos:line="72" pos:column="27"/></name></name></expr>)<pos:position pos:line="72" pos:column="28"/></condition><then pos:line="72" pos:column="28"> <block pos:line="72" pos:column="29">{
        <expr_stmt><expr><name pos:line="73" pos:column="9">error<pos:position pos:line="73" pos:column="14"/></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <name pos:line="73" pos:column="17">EAI_MEMORY<pos:position pos:line="73" pos:column="27"/></name></expr>;<pos:position pos:line="73" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">free<pos:position pos:line="74" pos:column="13"/></name><argument_list pos:line="74" pos:column="13">(<argument><expr><name><name pos:line="74" pos:column="14">ca<pos:position pos:line="74" pos:column="16"/></name><operator pos:line="74" pos:column="16">-&gt;<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="18">ai_addr<pos:position pos:line="74" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">free<pos:position pos:line="75" pos:column="13"/></name><argument_list pos:line="75" pos:column="13">(<argument><expr><name pos:line="75" pos:column="14">ca<pos:position pos:line="75" pos:column="16"/></name></expr></argument>)<pos:position pos:line="75" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="18"/></expr_stmt>
        <break pos:line="76" pos:column="9">break;<pos:position pos:line="76" pos:column="15"/></break>
      }<pos:position pos:line="77" pos:column="8"/></block></then></if>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="80" pos:column="5">/* if the return list is empty, this becomes the first element */</comment>
    <if pos:line="81" pos:column="5">if<condition pos:line="81" pos:column="7">(<expr><operator pos:line="81" pos:column="8">!<pos:position pos:line="81" pos:column="9"/></operator><name pos:line="81" pos:column="9">cafirst<pos:position pos:line="81" pos:column="16"/></name></expr>)<pos:position pos:line="81" pos:column="17"/></condition><then pos:line="81" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="7">cafirst<pos:position pos:line="82" pos:column="14"/></name> <operator pos:line="82" pos:column="15">=<pos:position pos:line="82" pos:column="16"/></operator> <name pos:line="82" pos:column="17">ca<pos:position pos:line="82" pos:column="19"/></name></expr>;<pos:position pos:line="82" pos:column="20"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="84" pos:column="5">/* add this element last in the return list */</comment>
    <if pos:line="85" pos:column="5">if<condition pos:line="85" pos:column="7">(<expr><name pos:line="85" pos:column="8">calast<pos:position pos:line="85" pos:column="14"/></name></expr>)<pos:position pos:line="85" pos:column="15"/></condition><then pos:line="85" pos:column="15">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="86" pos:column="7">calast<pos:position pos:line="86" pos:column="13"/></name><operator pos:line="86" pos:column="13">-&gt;<pos:position pos:line="86" pos:column="18"/></operator><name pos:line="86" pos:column="15">ai_next<pos:position pos:line="86" pos:column="22"/></name></name> <operator pos:line="86" pos:column="23">=<pos:position pos:line="86" pos:column="24"/></operator> <name pos:line="86" pos:column="25">ca<pos:position pos:line="86" pos:column="27"/></name></expr>;<pos:position pos:line="86" pos:column="28"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="87" pos:column="5">calast<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <name pos:line="87" pos:column="14">ca<pos:position pos:line="87" pos:column="16"/></name></expr>;<pos:position pos:line="87" pos:column="17"/></expr_stmt>

  }<pos:position pos:line="89" pos:column="4"/></block></for>

  <comment type="block" pos:line="91" pos:column="3">/* destroy the addrinfo list */</comment>
  <if pos:line="92" pos:column="3">if<condition pos:line="92" pos:column="5">(<expr><name pos:line="92" pos:column="6">aihead<pos:position pos:line="92" pos:column="12"/></name></expr>)<pos:position pos:line="92" pos:column="13"/></condition><then pos:line="92" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="5">freeaddrinfo<pos:position pos:line="93" pos:column="17"/></name><argument_list pos:line="93" pos:column="17">(<argument><expr><name pos:line="93" pos:column="18">aihead<pos:position pos:line="93" pos:column="24"/></name></expr></argument>)<pos:position pos:line="93" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="26"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="95" pos:column="3">/* if we failed, also destroy the Curl_addrinfo list */</comment>
  <if pos:line="96" pos:column="3">if<condition pos:line="96" pos:column="5">(<expr><name pos:line="96" pos:column="6">error<pos:position pos:line="96" pos:column="11"/></name></expr>)<pos:position pos:line="96" pos:column="12"/></condition><then pos:line="96" pos:column="12"> <block pos:line="96" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">Curl_freeaddrinfo<pos:position pos:line="97" pos:column="22"/></name><argument_list pos:line="97" pos:column="22">(<argument><expr><name pos:line="97" pos:column="23">cafirst<pos:position pos:line="97" pos:column="30"/></name></expr></argument>)<pos:position pos:line="97" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="98" pos:column="5">cafirst<pos:position pos:line="98" pos:column="12"/></name> <operator pos:line="98" pos:column="13">=<pos:position pos:line="98" pos:column="14"/></operator> <name pos:line="98" pos:column="15">NULL<pos:position pos:line="98" pos:column="19"/></name></expr>;<pos:position pos:line="98" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="99" pos:column="4"/></block></then>
  <elseif pos:line="100" pos:column="3">else <if pos:line="100" pos:column="8">if<condition pos:line="100" pos:column="10">(<expr><operator pos:line="100" pos:column="11">!<pos:position pos:line="100" pos:column="12"/></operator><name pos:line="100" pos:column="12">cafirst<pos:position pos:line="100" pos:column="19"/></name></expr>)<pos:position pos:line="100" pos:column="20"/></condition><then pos:line="100" pos:column="20"> <block pos:line="100" pos:column="21">{
<cpp:ifdef pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">ifdef<pos:position pos:line="101" pos:column="7"/></cpp:directive> <name pos:line="101" pos:column="8">EAI_NONAME<pos:position pos:line="101" pos:column="18"/></name></cpp:ifdef>
    <comment type="block" pos:line="102" pos:column="5">/* rfc3493 conformant */</comment>
    <expr_stmt><expr><name pos:line="103" pos:column="5">error<pos:position pos:line="103" pos:column="10"/></name> <operator pos:line="103" pos:column="11">=<pos:position pos:line="103" pos:column="12"/></operator> <name pos:line="103" pos:column="13">EAI_NONAME<pos:position pos:line="103" pos:column="23"/></name></expr>;<pos:position pos:line="103" pos:column="24"/></expr_stmt>
<cpp:else pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">else<pos:position pos:line="104" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="105" pos:column="5">/* rfc3493 obsoleted */</comment>
    <expr_stmt><expr><name pos:line="106" pos:column="5">error<pos:position pos:line="106" pos:column="10"/></name> <operator pos:line="106" pos:column="11">=<pos:position pos:line="106" pos:column="12"/></operator> <name pos:line="106" pos:column="13">EAI_NODATA<pos:position pos:line="106" pos:column="23"/></name></expr>;<pos:position pos:line="106" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">endif<pos:position pos:line="107" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">ifdef<pos:position pos:line="108" pos:column="7"/></cpp:directive> <name pos:line="108" pos:column="8">USE_WINSOCK<pos:position pos:line="108" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="109" pos:column="5">SET_SOCKERRNO<pos:position pos:line="109" pos:column="18"/></name><argument_list pos:line="109" pos:column="18">(<argument><expr><name pos:line="109" pos:column="19">error<pos:position pos:line="109" pos:column="24"/></name></expr></argument>)<pos:position pos:line="109" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">endif<pos:position pos:line="110" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="111" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><operator pos:line="113" pos:column="3">*<pos:position pos:line="113" pos:column="4"/></operator><name pos:line="113" pos:column="4">result<pos:position pos:line="113" pos:column="10"/></name> <operator pos:line="113" pos:column="11">=<pos:position pos:line="113" pos:column="12"/></operator> <name pos:line="113" pos:column="13">cafirst<pos:position pos:line="113" pos:column="20"/></name></expr>;<pos:position pos:line="113" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="115" pos:column="3">/* This is not a CURLcode */</comment>
  <return pos:line="116" pos:column="3">return <expr><name pos:line="116" pos:column="10">error<pos:position pos:line="116" pos:column="15"/></name></expr>;<pos:position pos:line="116" pos:column="16"/></return>
}<pos:position pos:line="117" pos:column="2"/></block></function></unit>
