<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1820_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">encodeOID<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">buf<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">int<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">n<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">beg<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">end<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name> <init pos:line="3" pos:column="9">= <expr><literal type="number" pos:line="3" pos:column="11">0<pos:position pos:line="3" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">x<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">int<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">y<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* Convert an ASN.1 OID into its dotted string representation.
     Store the result in th `n'-byte buffer at `buf'.
     Return the converted string length, or -1 if an error occurs. */</comment>

  <comment type="block" pos:line="11" pos:column="3">/* Process the first two numbers. */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">y<pos:position pos:line="12" pos:column="4"/></name> <operator pos:line="12" pos:column="5">=<pos:position pos:line="12" pos:column="6"/></operator> <operator pos:line="12" pos:column="7">*<pos:position pos:line="12" pos:column="8"/></operator><operator pos:line="12" pos:column="8">(<pos:position pos:line="12" pos:column="9"/></operator><specifier pos:line="12" pos:column="9">const<pos:position pos:line="12" pos:column="14"/></specifier> <name pos:line="12" pos:column="15">unsigned<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">char<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">*<pos:position pos:line="12" pos:column="30"/></operator><operator pos:line="12" pos:column="30">)<pos:position pos:line="12" pos:column="31"/></operator> <name pos:line="12" pos:column="32">beg<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">++<pos:position pos:line="12" pos:column="37"/></operator></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">x<pos:position pos:line="13" pos:column="4"/></name> <operator pos:line="13" pos:column="5">=<pos:position pos:line="13" pos:column="6"/></operator> <name pos:line="13" pos:column="7">y<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">/<pos:position pos:line="13" pos:column="10"/></operator> <literal type="number" pos:line="13" pos:column="11">40<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">y<pos:position pos:line="14" pos:column="4"/></name> <operator pos:line="14" pos:column="5">-=<pos:position pos:line="14" pos:column="7"/></operator> <name pos:line="14" pos:column="8">x<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></operator> <literal type="number" pos:line="14" pos:column="12">40<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">i<pos:position pos:line="15" pos:column="4"/></name> <operator pos:line="15" pos:column="5">+=<pos:position pos:line="15" pos:column="7"/></operator> <call><name pos:line="15" pos:column="8">encodeUint<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">buf<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">+<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">i<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">n<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">-<pos:position pos:line="15" pos:column="31"/></operator> <name pos:line="15" pos:column="32">i<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">x<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">i<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">&lt;<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="10">n<pos:position pos:line="16" pos:column="11"/></name></expr>)<pos:position pos:line="16" pos:column="12"/></condition><then pos:line="16" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="5">buf<pos:position pos:line="17" pos:column="8"/></name><index pos:line="17" pos:column="8">[<expr><name pos:line="17" pos:column="9">i<pos:position pos:line="17" pos:column="10"/></name></expr>]<pos:position pos:line="17" pos:column="11"/></index></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <literal type="char" pos:line="17" pos:column="14">'.'<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="18" pos:column="3">i<pos:position pos:line="18" pos:column="4"/></name><operator pos:line="18" pos:column="4">++<pos:position pos:line="18" pos:column="6"/></operator></expr>;<pos:position pos:line="18" pos:column="7"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">i<pos:position pos:line="19" pos:column="4"/></name> <operator pos:line="19" pos:column="5">+=<pos:position pos:line="19" pos:column="7"/></operator> <call><name pos:line="19" pos:column="8">encodeUint<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">buf<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">+<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">i<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="28">n<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">-<pos:position pos:line="19" pos:column="31"/></operator> <name pos:line="19" pos:column="32">i<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">y<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* Process the trailing numbers. */</comment>
  <while pos:line="22" pos:column="3">while<condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">beg<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">&lt;<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="15">end<pos:position pos:line="22" pos:column="18"/></name></expr>)<pos:position pos:line="22" pos:column="19"/></condition> <block pos:line="22" pos:column="20">{
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><name pos:line="23" pos:column="8">i<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">&lt;<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="12">n<pos:position pos:line="23" pos:column="13"/></name></expr>)<pos:position pos:line="23" pos:column="14"/></condition><then pos:line="23" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="7">buf<pos:position pos:line="24" pos:column="10"/></name><index pos:line="24" pos:column="10">[<expr><name pos:line="24" pos:column="11">i<pos:position pos:line="24" pos:column="12"/></name></expr>]<pos:position pos:line="24" pos:column="13"/></index></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <literal type="char" pos:line="24" pos:column="16">'.'<pos:position pos:line="24" pos:column="19"/></literal></expr>;<pos:position pos:line="24" pos:column="20"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="25" pos:column="5">i<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">++<pos:position pos:line="25" pos:column="8"/></operator></expr>;<pos:position pos:line="25" pos:column="9"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">x<pos:position pos:line="26" pos:column="6"/></name> <operator pos:line="26" pos:column="7">=<pos:position pos:line="26" pos:column="8"/></operator> <literal type="number" pos:line="26" pos:column="9">0<pos:position pos:line="26" pos:column="10"/></literal></expr>;<pos:position pos:line="26" pos:column="11"/></expr_stmt>
    <do pos:line="27" pos:column="5">do <block pos:line="27" pos:column="8">{
      <if pos:line="28" pos:column="7">if<condition pos:line="28" pos:column="9">(<expr><name pos:line="28" pos:column="10">x<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">&amp;<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="14">0xFF000000<pos:position pos:line="28" pos:column="24"/></literal></expr>)<pos:position pos:line="28" pos:column="25"/></condition><then pos:line="28" pos:column="25">
        <block type="pseudo"><return pos:line="29" pos:column="9">return <expr><operator pos:line="29" pos:column="16">-<pos:position pos:line="29" pos:column="17"/></operator><literal type="number" pos:line="29" pos:column="17">1<pos:position pos:line="29" pos:column="18"/></literal></expr>;<pos:position pos:line="29" pos:column="19"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="30" pos:column="7">y<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <operator pos:line="30" pos:column="11">*<pos:position pos:line="30" pos:column="12"/></operator><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><specifier pos:line="30" pos:column="13">const<pos:position pos:line="30" pos:column="18"/></specifier> <name pos:line="30" pos:column="19">unsigned<pos:position pos:line="30" pos:column="27"/></name> <name pos:line="30" pos:column="28">char<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">*<pos:position pos:line="30" pos:column="34"/></operator><operator pos:line="30" pos:column="34">)<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="36">beg<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">++<pos:position pos:line="30" pos:column="41"/></operator></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">x<pos:position pos:line="31" pos:column="8"/></name> <operator pos:line="31" pos:column="9">=<pos:position pos:line="31" pos:column="10"/></operator> <operator pos:line="31" pos:column="11">(<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="12">x<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">&lt;&lt;<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="17">7<pos:position pos:line="31" pos:column="18"/></literal><operator pos:line="31" pos:column="18">)<pos:position pos:line="31" pos:column="19"/></operator> <operator pos:line="31" pos:column="20">|<pos:position pos:line="31" pos:column="21"/></operator> <operator pos:line="31" pos:column="22">(<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">y<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">&amp;<pos:position pos:line="31" pos:column="30"/></operator> <literal type="number" pos:line="31" pos:column="27">0x7F<pos:position pos:line="31" pos:column="31"/></literal><operator pos:line="31" pos:column="31">)<pos:position pos:line="31" pos:column="32"/></operator></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block> while<condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">y<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">&amp;<pos:position pos:line="32" pos:column="20"/></operator> <literal type="number" pos:line="32" pos:column="17">0x80<pos:position pos:line="32" pos:column="21"/></literal></expr>)<pos:position pos:line="32" pos:column="22"/></condition>;<pos:position pos:line="32" pos:column="23"/></do>
    <expr_stmt><expr><name pos:line="33" pos:column="5">i<pos:position pos:line="33" pos:column="6"/></name> <operator pos:line="33" pos:column="7">+=<pos:position pos:line="33" pos:column="9"/></operator> <call><name pos:line="33" pos:column="10">encodeUint<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">buf<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">+<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">i<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="30">n<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">-<pos:position pos:line="33" pos:column="33"/></operator> <name pos:line="33" pos:column="34">i<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">x<pos:position pos:line="33" pos:column="38"/></name></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></while>
  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">(<expr><name pos:line="35" pos:column="6">i<pos:position pos:line="35" pos:column="7"/></name> <operator pos:line="35" pos:column="8">&lt;<pos:position pos:line="35" pos:column="12"/></operator> <name pos:line="35" pos:column="10">n<pos:position pos:line="35" pos:column="11"/></name></expr>)<pos:position pos:line="35" pos:column="12"/></condition><then pos:line="35" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="5">buf<pos:position pos:line="36" pos:column="8"/></name><index pos:line="36" pos:column="8">[<expr><name pos:line="36" pos:column="9">i<pos:position pos:line="36" pos:column="10"/></name></expr>]<pos:position pos:line="36" pos:column="11"/></index></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <literal type="char" pos:line="36" pos:column="14">'\0'<pos:position pos:line="36" pos:column="18"/></literal></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt></block></then></if>
  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">i<pos:position pos:line="37" pos:column="11"/></name></expr>;<pos:position pos:line="37" pos:column="12"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
