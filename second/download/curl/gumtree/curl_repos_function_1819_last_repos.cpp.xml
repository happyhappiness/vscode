<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1819_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">encodeUint<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">buf<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">n<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">unsigned<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">x<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name> <init pos:line="3" pos:column="9">= <expr><literal type="number" pos:line="3" pos:column="11">0<pos:position pos:line="3" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">y<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">x<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">/<pos:position pos:line="4" pos:column="23"/></operator> <literal type="number" pos:line="4" pos:column="24">10<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Decimal ASCII encode unsigned integer `x' in the `n'-byte buffer at `buf'.
     Return the total number of encoded digits, even if larger than `n'. */</comment>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">y<pos:position pos:line="9" pos:column="7"/></name></expr>)<pos:position pos:line="9" pos:column="8"/></condition><then pos:line="9" pos:column="8"> <block pos:line="9" pos:column="9">{
    <expr_stmt><expr><name pos:line="10" pos:column="5">i<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">+=<pos:position pos:line="10" pos:column="9"/></operator> <call><name pos:line="10" pos:column="10">encodeUint<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">buf<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">n<pos:position pos:line="10" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="29">y<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">x<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">-=<pos:position pos:line="11" pos:column="9"/></operator> <name pos:line="11" pos:column="10">y<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">*<pos:position pos:line="11" pos:column="13"/></operator> <literal type="number" pos:line="11" pos:column="14">10<pos:position pos:line="11" pos:column="16"/></literal></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">i<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">&lt;<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="10">n<pos:position pos:line="13" pos:column="11"/></name></expr>)<pos:position pos:line="13" pos:column="12"/></condition><then pos:line="13" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="5">buf<pos:position pos:line="14" pos:column="8"/></name><index pos:line="14" pos:column="8">[<expr><name pos:line="14" pos:column="9">i<pos:position pos:line="14" pos:column="10"/></name></expr>]<pos:position pos:line="14" pos:column="11"/></index></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call pos:line="14" pos:column="14">(<name pos:line="14" pos:column="15">char<pos:position pos:line="14" pos:column="19"/></name>) <argument_list pos:line="14" pos:column="21">(<argument><expr><literal type="char" pos:line="14" pos:column="22">'0'<pos:position pos:line="14" pos:column="25"/></literal> <operator pos:line="14" pos:column="26">+<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="28">x<pos:position pos:line="14" pos:column="29"/></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="15" pos:column="3">i<pos:position pos:line="15" pos:column="4"/></name><operator pos:line="15" pos:column="4">++<pos:position pos:line="15" pos:column="6"/></operator></expr>;<pos:position pos:line="15" pos:column="7"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">i<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">&lt;<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="10">n<pos:position pos:line="16" pos:column="11"/></name></expr>)<pos:position pos:line="16" pos:column="12"/></condition><then pos:line="16" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="5">buf<pos:position pos:line="17" pos:column="8"/></name><index pos:line="17" pos:column="8">[<expr><name pos:line="17" pos:column="9">i<pos:position pos:line="17" pos:column="10"/></name></expr>]<pos:position pos:line="17" pos:column="11"/></index></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <literal type="char" pos:line="17" pos:column="14">'\0'<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt></block></then></if>      <comment type="block" pos:line="17" pos:column="25">/* Store a terminator if possible. */</comment>
  <return pos:line="18" pos:column="3">return <expr><name pos:line="18" pos:column="10">i<pos:position pos:line="18" pos:column="11"/></name></expr>;<pos:position pos:line="18" pos:column="12"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
