<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1803_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">if2ip_result_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">Curl_if2ip<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">af<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">unsigned<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">remote_scope<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">unsigned<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">remote_scope_id<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">char<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">interf<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="3" pos:column="27">char<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">buf<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="38">int<pos:position pos:line="3" pos:column="41"/></name></type> <name pos:line="3" pos:column="42">buf_size<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="51"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">ifaddrs<pos:position pos:line="5" pos:column="17"/></name></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">iface<pos:position pos:line="5" pos:column="24"/></name></decl>, <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="27">head<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">if2ip_result_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">res<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name pos:line="6" pos:column="24">IF2IP_NOT_FOUND<pos:position pos:line="6" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef<pos:position pos:line="8" pos:column="8"/></cpp:directive> <name pos:line="8" pos:column="9">ENABLE_IPV6<pos:position pos:line="8" pos:column="20"/></name></cpp:ifndef>
  <expr_stmt><expr><operator pos:line="9" pos:column="3">(<pos:position pos:line="9" pos:column="4"/></operator><name pos:line="9" pos:column="4">void<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">)<pos:position pos:line="9" pos:column="9"/></operator> <name pos:line="9" pos:column="10">remote_scope<pos:position pos:line="9" pos:column="22"/></name></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><operator pos:line="12" pos:column="5">!<pos:position pos:line="12" pos:column="6"/></operator><call><name pos:line="12" pos:column="6">defined<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call> <operator pos:line="12" pos:column="47">||<pos:position pos:line="12" pos:column="49"/></operator> \
    <operator pos:line="13" pos:column="5">!<pos:position pos:line="13" pos:column="6"/></operator><call><name pos:line="13" pos:column="6">defined<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">ENABLE_IPV6<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">(<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">void<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">)<pos:position pos:line="14" pos:column="9"/></operator> <name pos:line="14" pos:column="10">remote_scope_id<pos:position pos:line="14" pos:column="25"/></name></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><call><name pos:line="17" pos:column="6">getifaddrs<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><operator pos:line="17" pos:column="17">&amp;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="18">head<pos:position pos:line="17" pos:column="22"/></name></expr></argument>)<pos:position pos:line="17" pos:column="23"/></argument_list></call> <operator pos:line="17" pos:column="24">&gt;=<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="27">0<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29"> <block pos:line="17" pos:column="30">{
    <for pos:line="18" pos:column="5">for<control pos:line="18" pos:column="8">(<init><expr><name pos:line="18" pos:column="9">iface<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">head<pos:position pos:line="18" pos:column="21"/></name></expr>;<pos:position pos:line="18" pos:column="22"/></init> <condition><expr><name pos:line="18" pos:column="23">iface<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">!=<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">NULL<pos:position pos:line="18" pos:column="36"/></name></expr>;<pos:position pos:line="18" pos:column="37"/></condition> <incr><expr><name pos:line="18" pos:column="38">iface<pos:position pos:line="18" pos:column="43"/></name> <operator pos:line="18" pos:column="44">=<pos:position pos:line="18" pos:column="45"/></operator> <name><name pos:line="18" pos:column="46">iface<pos:position pos:line="18" pos:column="51"/></name><operator pos:line="18" pos:column="51">-&gt;<pos:position pos:line="18" pos:column="56"/></operator><name pos:line="18" pos:column="53">ifa_next<pos:position pos:line="18" pos:column="61"/></name></name></expr></incr>)<pos:position pos:line="18" pos:column="62"/></control> <block pos:line="18" pos:column="63">{
      <if pos:line="19" pos:column="7">if<condition pos:line="19" pos:column="9">(<expr><name><name pos:line="19" pos:column="10">iface<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">ifa_addr<pos:position pos:line="19" pos:column="25"/></name></name> <operator pos:line="19" pos:column="26">!=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">NULL<pos:position pos:line="19" pos:column="33"/></name></expr>)<pos:position pos:line="19" pos:column="34"/></condition><then pos:line="19" pos:column="34"> <block pos:line="19" pos:column="35">{
        <if pos:line="20" pos:column="9">if<condition pos:line="20" pos:column="11">(<expr><name><name pos:line="20" pos:column="12">iface<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">-&gt;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="19">ifa_addr<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">-&gt;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="29">sa_family<pos:position pos:line="20" pos:column="38"/></name></name> <operator pos:line="20" pos:column="39">==<pos:position pos:line="20" pos:column="41"/></operator> <name pos:line="20" pos:column="42">af<pos:position pos:line="20" pos:column="44"/></name></expr>)<pos:position pos:line="20" pos:column="45"/></condition><then pos:line="20" pos:column="45"> <block pos:line="20" pos:column="46">{
          <if pos:line="21" pos:column="11">if<condition pos:line="21" pos:column="13">(<expr><call><name pos:line="21" pos:column="14">strcasecompare<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name><name pos:line="21" pos:column="29">iface<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">ifa_name<pos:position pos:line="21" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">interf<pos:position pos:line="21" pos:column="52"/></name></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="54"/></condition><then pos:line="21" pos:column="54"> <block pos:line="21" pos:column="55">{
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">void<pos:position pos:line="22" pos:column="17"/></name> <modifier pos:line="22" pos:column="18">*<pos:position pos:line="22" pos:column="19"/></modifier></type><name pos:line="22" pos:column="19">addr<pos:position pos:line="22" pos:column="23"/></name></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">char<pos:position pos:line="23" pos:column="17"/></name> <modifier pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></modifier></type><name pos:line="23" pos:column="19">ip<pos:position pos:line="23" pos:column="21"/></name></decl>;<pos:position pos:line="23" pos:column="22"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">char<pos:position pos:line="24" pos:column="17"/></name></type> <name><name pos:line="24" pos:column="18">scope<pos:position pos:line="24" pos:column="23"/></name><index pos:line="24" pos:column="23">[<expr><literal type="number" pos:line="24" pos:column="24">12<pos:position pos:line="24" pos:column="26"/></literal></expr>]<pos:position pos:line="24" pos:column="27"/></index></name> <init pos:line="24" pos:column="28">= <expr><literal type="string" pos:line="24" pos:column="30">""<pos:position pos:line="24" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="33"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">char<pos:position pos:line="25" pos:column="17"/></name></type> <name><name pos:line="25" pos:column="18">ipstr<pos:position pos:line="25" pos:column="23"/></name><index pos:line="25" pos:column="23">[<expr><literal type="number" pos:line="25" pos:column="24">64<pos:position pos:line="25" pos:column="26"/></literal></expr>]<pos:position pos:line="25" pos:column="27"/></index></name></decl>;<pos:position pos:line="25" pos:column="28"/></decl_stmt>
<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">ENABLE_IPV6<pos:position pos:line="26" pos:column="19"/></name></cpp:ifdef>
            <if pos:line="27" pos:column="13">if<condition pos:line="27" pos:column="15">(<expr><name pos:line="27" pos:column="16">af<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">==<pos:position pos:line="27" pos:column="21"/></operator> <name pos:line="27" pos:column="22">AF_INET6<pos:position pos:line="27" pos:column="30"/></name></expr>)<pos:position pos:line="27" pos:column="31"/></condition><then pos:line="27" pos:column="31"> <block pos:line="27" pos:column="32">{
              <decl_stmt><decl><type><name pos:line="28" pos:column="15">unsigned<pos:position pos:line="28" pos:column="23"/></name> <name pos:line="28" pos:column="24">int<pos:position pos:line="28" pos:column="27"/></name></type> <name pos:line="28" pos:column="28">scopeid<pos:position pos:line="28" pos:column="35"/></name> <init pos:line="28" pos:column="36">= <expr><literal type="number" pos:line="28" pos:column="38">0<pos:position pos:line="28" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="40"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="29" pos:column="15">unsigned<pos:position pos:line="29" pos:column="23"/></name> <name pos:line="29" pos:column="24">int<pos:position pos:line="29" pos:column="27"/></name></type> <name pos:line="29" pos:column="28">ifscope<pos:position pos:line="29" pos:column="35"/></name> <init pos:line="29" pos:column="36">= <expr><call><name pos:line="29" pos:column="38">Curl_ipv6_scope<pos:position pos:line="29" pos:column="53"/></name><argument_list pos:line="29" pos:column="53">(<argument><expr><name><name pos:line="29" pos:column="54">iface<pos:position pos:line="29" pos:column="59"/></name><operator pos:line="29" pos:column="59">-&gt;<pos:position pos:line="29" pos:column="64"/></operator><name pos:line="29" pos:column="61">ifa_addr<pos:position pos:line="29" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="71"/></decl_stmt>

              <if pos:line="31" pos:column="15">if<condition pos:line="31" pos:column="17">(<expr><name pos:line="31" pos:column="18">ifscope<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">!=<pos:position pos:line="31" pos:column="28"/></operator> <name pos:line="31" pos:column="29">remote_scope<pos:position pos:line="31" pos:column="41"/></name></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42"> <block pos:line="31" pos:column="43">{
                <comment type="block" pos:line="32" pos:column="17">/* We are interested only in interface addresses whose
                   scope matches the remote address we want to
                   connect to: global for global, link-local for
                   link-local, etc... */</comment>
                <if pos:line="36" pos:column="17">if<condition pos:line="36" pos:column="19">(<expr><name pos:line="36" pos:column="20">res<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">==<pos:position pos:line="36" pos:column="26"/></operator> <name pos:line="36" pos:column="27">IF2IP_NOT_FOUND<pos:position pos:line="36" pos:column="42"/></name></expr>)<pos:position pos:line="36" pos:column="43"/></condition><then pos:line="36" pos:column="43"> <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="44">res<pos:position pos:line="36" pos:column="47"/></name> <operator pos:line="36" pos:column="48">=<pos:position pos:line="36" pos:column="49"/></operator> <name pos:line="36" pos:column="50">IF2IP_AF_NOT_SUPPORTED<pos:position pos:line="36" pos:column="72"/></name></expr>;<pos:position pos:line="36" pos:column="73"/></expr_stmt></block></then></if>
                <continue pos:line="37" pos:column="17">continue;<pos:position pos:line="37" pos:column="26"/></continue>
              }<pos:position pos:line="38" pos:column="16"/></block></then></if>

              <expr_stmt><expr><name pos:line="40" pos:column="15">addr<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator>
                <operator pos:line="41" pos:column="17">&amp;<pos:position pos:line="41" pos:column="22"/></operator><operator pos:line="41" pos:column="18">(<pos:position pos:line="41" pos:column="19"/></operator><operator pos:line="41" pos:column="19">(<pos:position pos:line="41" pos:column="20"/></operator>struct <name pos:line="41" pos:column="27">sockaddr_in6<pos:position pos:line="41" pos:column="39"/></name> <operator pos:line="41" pos:column="40">*<pos:position pos:line="41" pos:column="41"/></operator><operator pos:line="41" pos:column="41">)<pos:position pos:line="41" pos:column="42"/></operator><operator pos:line="41" pos:column="42">(<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="43">void<pos:position pos:line="41" pos:column="47"/></name> <operator pos:line="41" pos:column="48">*<pos:position pos:line="41" pos:column="49"/></operator><operator pos:line="41" pos:column="49">)<pos:position pos:line="41" pos:column="50"/></operator><name><name pos:line="41" pos:column="50">iface<pos:position pos:line="41" pos:column="55"/></name><operator pos:line="41" pos:column="55">-&gt;<pos:position pos:line="41" pos:column="60"/></operator><name pos:line="41" pos:column="57">ifa_addr<pos:position pos:line="41" pos:column="65"/></name></name><operator pos:line="41" pos:column="65">)<pos:position pos:line="41" pos:column="66"/></operator><operator pos:line="41" pos:column="66">-&gt;<pos:position pos:line="41" pos:column="71"/></operator><name pos:line="41" pos:column="68">sin6_addr<pos:position pos:line="41" pos:column="77"/></name></expr>;<pos:position pos:line="41" pos:column="78"/></expr_stmt>
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID<pos:position pos:line="42" pos:column="39"/></name></cpp:ifdef>
              <comment type="block" pos:line="43" pos:column="15">/* Include the scope of this interface as part of the address */</comment>
              <expr_stmt><expr><name pos:line="44" pos:column="15">scopeid<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">=<pos:position pos:line="44" pos:column="24"/></operator> <operator pos:line="44" pos:column="25">(<pos:position pos:line="44" pos:column="26"/></operator><operator pos:line="44" pos:column="26">(<pos:position pos:line="44" pos:column="27"/></operator>struct <name pos:line="44" pos:column="34">sockaddr_in6<pos:position pos:line="44" pos:column="46"/></name> <operator pos:line="44" pos:column="47">*<pos:position pos:line="44" pos:column="48"/></operator><operator pos:line="44" pos:column="48">)<pos:position pos:line="44" pos:column="49"/></operator><operator pos:line="44" pos:column="49">(<pos:position pos:line="44" pos:column="50"/></operator><name pos:line="44" pos:column="50">void<pos:position pos:line="44" pos:column="54"/></name> <operator pos:line="44" pos:column="55">*<pos:position pos:line="44" pos:column="56"/></operator><operator pos:line="44" pos:column="56">)<pos:position pos:line="44" pos:column="57"/></operator><name><name pos:line="44" pos:column="57">iface<pos:position pos:line="44" pos:column="62"/></name><operator pos:line="44" pos:column="62">-&gt;<pos:position pos:line="44" pos:column="67"/></operator><name pos:line="44" pos:column="64">ifa_addr<pos:position pos:line="44" pos:column="72"/></name></name><operator pos:line="44" pos:column="72">)<pos:position pos:line="44" pos:column="73"/></operator>
                            <operator pos:line="45" pos:column="29">-&gt;<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="31">sin6_scope_id<pos:position pos:line="45" pos:column="44"/></name></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>

              <comment type="block" pos:line="47" pos:column="15">/* If given, scope id should match. */</comment>
              <if pos:line="48" pos:column="15">if<condition pos:line="48" pos:column="17">(<expr><name pos:line="48" pos:column="18">remote_scope_id<pos:position pos:line="48" pos:column="33"/></name> <operator pos:line="48" pos:column="34">&amp;&amp;<pos:position pos:line="48" pos:column="44"/></operator> <name pos:line="48" pos:column="37">scopeid<pos:position pos:line="48" pos:column="44"/></name> <operator pos:line="48" pos:column="45">!=<pos:position pos:line="48" pos:column="47"/></operator> <name pos:line="48" pos:column="48">remote_scope_id<pos:position pos:line="48" pos:column="63"/></name></expr>)<pos:position pos:line="48" pos:column="64"/></condition><then pos:line="48" pos:column="64"> <block pos:line="48" pos:column="65">{
                <if pos:line="49" pos:column="17">if<condition pos:line="49" pos:column="19">(<expr><name pos:line="49" pos:column="20">res<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">==<pos:position pos:line="49" pos:column="26"/></operator> <name pos:line="49" pos:column="27">IF2IP_NOT_FOUND<pos:position pos:line="49" pos:column="42"/></name></expr>)<pos:position pos:line="49" pos:column="43"/></condition><then pos:line="49" pos:column="43">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="19">res<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">=<pos:position pos:line="50" pos:column="24"/></operator> <name pos:line="50" pos:column="25">IF2IP_AF_NOT_SUPPORTED<pos:position pos:line="50" pos:column="47"/></name></expr>;<pos:position pos:line="50" pos:column="48"/></expr_stmt></block></then></if>

                <continue pos:line="52" pos:column="17">continue;<pos:position pos:line="52" pos:column="26"/></continue>
              }<pos:position pos:line="53" pos:column="16"/></block></then></if>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>
              <if pos:line="55" pos:column="15">if<condition pos:line="55" pos:column="17">(<expr><name pos:line="55" pos:column="18">scopeid<pos:position pos:line="55" pos:column="25"/></name></expr>)<pos:position pos:line="55" pos:column="26"/></condition><then pos:line="55" pos:column="26">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="17">snprintf<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><name pos:line="56" pos:column="26">scope<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="33">sizeof<argument_list pos:line="56" pos:column="39">(<argument><expr><name pos:line="56" pos:column="40">scope<pos:position pos:line="56" pos:column="45"/></name></expr></argument>)<pos:position pos:line="56" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="48">"%%%u"<pos:position pos:line="56" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="56">scopeid<pos:position pos:line="56" pos:column="63"/></name></expr></argument>)<pos:position pos:line="56" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="65"/></expr_stmt></block></then></if>
            }<pos:position pos:line="57" pos:column="14"/></block></then>
            <else pos:line="58" pos:column="13">else
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>
              <block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="15">addr<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">=<pos:position pos:line="60" pos:column="21"/></operator>
                  <operator pos:line="61" pos:column="19">&amp;<pos:position pos:line="61" pos:column="24"/></operator><operator pos:line="61" pos:column="20">(<pos:position pos:line="61" pos:column="21"/></operator><operator pos:line="61" pos:column="21">(<pos:position pos:line="61" pos:column="22"/></operator>struct <name pos:line="61" pos:column="29">sockaddr_in<pos:position pos:line="61" pos:column="40"/></name> <operator pos:line="61" pos:column="41">*<pos:position pos:line="61" pos:column="42"/></operator><operator pos:line="61" pos:column="42">)<pos:position pos:line="61" pos:column="43"/></operator><operator pos:line="61" pos:column="43">(<pos:position pos:line="61" pos:column="44"/></operator><name pos:line="61" pos:column="44">void<pos:position pos:line="61" pos:column="48"/></name> <operator pos:line="61" pos:column="49">*<pos:position pos:line="61" pos:column="50"/></operator><operator pos:line="61" pos:column="50">)<pos:position pos:line="61" pos:column="51"/></operator><name><name pos:line="61" pos:column="51">iface<pos:position pos:line="61" pos:column="56"/></name><operator pos:line="61" pos:column="56">-&gt;<pos:position pos:line="61" pos:column="61"/></operator><name pos:line="61" pos:column="58">ifa_addr<pos:position pos:line="61" pos:column="66"/></name></name><operator pos:line="61" pos:column="66">)<pos:position pos:line="61" pos:column="67"/></operator><operator pos:line="61" pos:column="67">-&gt;<pos:position pos:line="61" pos:column="72"/></operator><name pos:line="61" pos:column="69">sin_addr<pos:position pos:line="61" pos:column="77"/></name></expr>;<pos:position pos:line="61" pos:column="78"/></expr_stmt></block></else></if>
            <expr_stmt><expr><name pos:line="62" pos:column="13">res<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <name pos:line="62" pos:column="19">IF2IP_FOUND<pos:position pos:line="62" pos:column="30"/></name></expr>;<pos:position pos:line="62" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="63" pos:column="13">ip<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">=<pos:position pos:line="63" pos:column="17"/></operator> <operator pos:line="63" pos:column="18">(<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="19">char<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">*<pos:position pos:line="63" pos:column="25"/></operator><operator pos:line="63" pos:column="25">)<pos:position pos:line="63" pos:column="26"/></operator> <call><name pos:line="63" pos:column="27">Curl_inet_ntop<pos:position pos:line="63" pos:column="41"/></name><argument_list pos:line="63" pos:column="41">(<argument><expr><name pos:line="63" pos:column="42">af<pos:position pos:line="63" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="46">addr<pos:position pos:line="63" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="52">ipstr<pos:position pos:line="63" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="59">sizeof<argument_list pos:line="63" pos:column="65">(<argument><expr><name pos:line="63" pos:column="66">ipstr<pos:position pos:line="63" pos:column="71"/></name></expr></argument>)<pos:position pos:line="63" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="74"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="64" pos:column="13">snprintf<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><name pos:line="64" pos:column="22">buf<pos:position pos:line="64" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="27">buf_size<pos:position pos:line="64" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="37">"%s%s"<pos:position pos:line="64" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="45">ip<pos:position pos:line="64" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="49">scope<pos:position pos:line="64" pos:column="54"/></name></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="56"/></expr_stmt>
            <break pos:line="65" pos:column="13">break;<pos:position pos:line="65" pos:column="19"/></break>
          }<pos:position pos:line="66" pos:column="12"/></block></then></if>
        }<pos:position pos:line="67" pos:column="10"/></block></then>
        <elseif pos:line="68" pos:column="9">else <if pos:line="68" pos:column="14">if<condition pos:line="68" pos:column="16">(<expr><operator pos:line="68" pos:column="17">(<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="18">res<pos:position pos:line="68" pos:column="21"/></name> <operator pos:line="68" pos:column="22">==<pos:position pos:line="68" pos:column="24"/></operator> <name pos:line="68" pos:column="25">IF2IP_NOT_FOUND<pos:position pos:line="68" pos:column="40"/></name><operator pos:line="68" pos:column="40">)<pos:position pos:line="68" pos:column="41"/></operator> <operator pos:line="68" pos:column="42">&amp;&amp;<pos:position pos:line="68" pos:column="52"/></operator>
                <call><name pos:line="69" pos:column="17">strcasecompare<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><name><name pos:line="69" pos:column="32">iface<pos:position pos:line="69" pos:column="37"/></name><operator pos:line="69" pos:column="37">-&gt;<pos:position pos:line="69" pos:column="42"/></operator><name pos:line="69" pos:column="39">ifa_name<pos:position pos:line="69" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="49">interf<pos:position pos:line="69" pos:column="55"/></name></expr></argument>)<pos:position pos:line="69" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="57"/></condition><then pos:line="69" pos:column="57"> <block pos:line="69" pos:column="58">{
          <expr_stmt><expr><name pos:line="70" pos:column="11">res<pos:position pos:line="70" pos:column="14"/></name> <operator pos:line="70" pos:column="15">=<pos:position pos:line="70" pos:column="16"/></operator> <name pos:line="70" pos:column="17">IF2IP_AF_NOT_SUPPORTED<pos:position pos:line="70" pos:column="39"/></name></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="71" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="72" pos:column="8"/></block></then></if>
    }<pos:position pos:line="73" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="75" pos:column="5">freeifaddrs<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">head<pos:position pos:line="75" pos:column="21"/></name></expr></argument>)<pos:position pos:line="75" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>

  <return pos:line="78" pos:column="3">return <expr><name pos:line="78" pos:column="10">res<pos:position pos:line="78" pos:column="13"/></name></expr>;<pos:position pos:line="78" pos:column="14"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
