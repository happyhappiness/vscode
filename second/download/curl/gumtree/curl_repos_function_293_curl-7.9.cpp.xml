<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_293_curl-7.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURL<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_easy_duphandle<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">CURL<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">incurl<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">SessionHandle<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">data<pos:position pos:line="3" pos:column="29"/></name><init pos:line="3" pos:column="29">=<expr><operator pos:line="3" pos:column="30">(<pos:position pos:line="3" pos:column="31"/></operator>struct <name pos:line="3" pos:column="38">SessionHandle<pos:position pos:line="3" pos:column="51"/></name> <operator pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></operator><operator pos:line="3" pos:column="53">)<pos:position pos:line="3" pos:column="54"/></operator><name pos:line="3" pos:column="54">incurl<pos:position pos:line="3" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="61"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SessionHandle<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">outcurl<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><operator pos:line="5" pos:column="35">(<pos:position pos:line="5" pos:column="36"/></operator>struct <name pos:line="5" pos:column="43">SessionHandle<pos:position pos:line="5" pos:column="56"/></name> <operator pos:line="5" pos:column="57">*<pos:position pos:line="5" pos:column="58"/></operator><operator pos:line="5" pos:column="58">)<pos:position pos:line="5" pos:column="59"/></operator>
    <call><name pos:line="6" pos:column="5">malloc<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><sizeof pos:line="6" pos:column="12">sizeof<argument_list pos:line="6" pos:column="18">(<argument><expr pos:line="6" pos:column="19">struct <name pos:line="6" pos:column="26">SessionHandle<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name pos:line="8" pos:column="6">NULL<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">==<pos:position pos:line="8" pos:column="13"/></operator> <name pos:line="8" pos:column="14">outcurl<pos:position pos:line="8" pos:column="21"/></name></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">NULL<pos:position pos:line="9" pos:column="16"/></name></expr>;<pos:position pos:line="9" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="9" pos:column="18">/* failure */</comment>

  <comment type="block" pos:line="11" pos:column="3">/* start with clearing the entire new struct */</comment>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">memset<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><name pos:line="12" pos:column="10">outcurl<pos:position pos:line="12" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="22">sizeof<argument_list pos:line="12" pos:column="28">(<argument><expr pos:line="12" pos:column="29">struct <name pos:line="12" pos:column="36">SessionHandle<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/*
   * We setup a few buffers we need. We should probably make them
   * get setup on-demand in the code, as that would probably decrease
   * the likeliness of us forgetting to init a buffer here in the future.
   */</comment>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">outcurl<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">state<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">.<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">headerbuff<pos:position pos:line="19" pos:column="28"/></name></name><operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator><operator pos:line="19" pos:column="29">(<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">char<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">*<pos:position pos:line="19" pos:column="35"/></operator><operator pos:line="19" pos:column="35">)<pos:position pos:line="19" pos:column="36"/></operator><call><name pos:line="19" pos:column="36">malloc<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">(<argument><expr><name pos:line="19" pos:column="43">HEADERSIZE<pos:position pos:line="19" pos:column="53"/></name></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><operator pos:line="20" pos:column="6">!<pos:position pos:line="20" pos:column="7"/></operator><name><name pos:line="20" pos:column="7">outcurl<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">state<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">.<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">headerbuff<pos:position pos:line="20" pos:column="32"/></name></name></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block pos:line="20" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">free<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><name pos:line="21" pos:column="10">outcurl<pos:position pos:line="21" pos:column="17"/></name></expr></argument>)<pos:position pos:line="21" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt> <comment type="block" pos:line="21" pos:column="20">/* free the memory again */</comment>
    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">NULL<pos:position pos:line="22" pos:column="16"/></name></expr>;<pos:position pos:line="22" pos:column="17"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">outcurl<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">state<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">headersize<pos:position pos:line="24" pos:column="28"/></name></name><operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">HEADERSIZE<pos:position pos:line="24" pos:column="39"/></name></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="26" pos:column="3">/* copy all userdefined values */</comment>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">outcurl<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">set<pos:position pos:line="27" pos:column="15"/></name></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <name><name pos:line="27" pos:column="18">data<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">-&gt;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="24">set<pos:position pos:line="27" pos:column="27"/></name></name></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">outcurl<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">state<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">.<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">numconnects<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <name><name pos:line="28" pos:column="32">data<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-&gt;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="38">state<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">.<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="44">numconnects<pos:position pos:line="28" pos:column="55"/></name></name></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="29" pos:column="3">outcurl<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">state<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">.<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">connects<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <operator pos:line="29" pos:column="29">(<pos:position pos:line="29" pos:column="30"/></operator>struct <name pos:line="29" pos:column="37">connectdata<pos:position pos:line="29" pos:column="48"/></name> <operator pos:line="29" pos:column="49">*<pos:position pos:line="29" pos:column="50"/></operator><operator pos:line="29" pos:column="50">*<pos:position pos:line="29" pos:column="51"/></operator><operator pos:line="29" pos:column="51">)<pos:position pos:line="29" pos:column="52"/></operator>
      <call><name pos:line="30" pos:column="7">malloc<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><sizeof pos:line="30" pos:column="14">sizeof<argument_list pos:line="30" pos:column="20">(<argument><expr pos:line="30" pos:column="21">struct <name pos:line="30" pos:column="28">connectdata<pos:position pos:line="30" pos:column="39"/></name> <operator pos:line="30" pos:column="40">*<pos:position pos:line="30" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></sizeof> <operator pos:line="30" pos:column="43">*<pos:position pos:line="30" pos:column="44"/></operator> <name><name pos:line="30" pos:column="45">outcurl<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">-&gt;<pos:position pos:line="30" pos:column="57"/></operator><name pos:line="30" pos:column="54">state<pos:position pos:line="30" pos:column="59"/></name><operator pos:line="30" pos:column="59">.<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="60">numconnects<pos:position pos:line="30" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="73"/></expr_stmt>

  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><operator pos:line="32" pos:column="6">!<pos:position pos:line="32" pos:column="7"/></operator><name><name pos:line="32" pos:column="7">outcurl<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">state<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">.<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">connects<pos:position pos:line="32" pos:column="30"/></name></name></expr>)<pos:position pos:line="32" pos:column="31"/></condition><then pos:line="32" pos:column="31"> <block pos:line="32" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">free<pos:position pos:line="33" pos:column="9"/></name><argument_list pos:line="33" pos:column="9">(<argument><expr><name><name pos:line="33" pos:column="10">outcurl<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">state<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">.<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="25">headerbuff<pos:position pos:line="33" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">free<pos:position pos:line="34" pos:column="9"/></name><argument_list pos:line="34" pos:column="9">(<argument><expr><name pos:line="34" pos:column="10">outcurl<pos:position pos:line="34" pos:column="17"/></name></expr></argument>)<pos:position pos:line="34" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">NULL<pos:position pos:line="35" pos:column="16"/></name></expr>;<pos:position pos:line="35" pos:column="17"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">memset<pos:position pos:line="37" pos:column="9"/></name><argument_list pos:line="37" pos:column="9">(<argument><expr><name><name pos:line="37" pos:column="10">outcurl<pos:position pos:line="37" pos:column="17"/></name><operator pos:line="37" pos:column="17">-&gt;<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="19">state<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">.<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">connects<pos:position pos:line="37" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="35">0<pos:position pos:line="37" pos:column="36"/></literal></expr></argument>,
         <argument><expr><sizeof pos:line="38" pos:column="10">sizeof<argument_list pos:line="38" pos:column="16">(<argument><expr pos:line="38" pos:column="17">struct <name pos:line="38" pos:column="24">connectdata<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">*<pos:position pos:line="38" pos:column="37"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></sizeof><operator pos:line="38" pos:column="38">*<pos:position pos:line="38" pos:column="39"/></operator><name><name pos:line="38" pos:column="39">outcurl<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">-&gt;<pos:position pos:line="38" pos:column="51"/></operator><name pos:line="38" pos:column="48">state<pos:position pos:line="38" pos:column="53"/></name><operator pos:line="38" pos:column="53">.<pos:position pos:line="38" pos:column="54"/></operator><name pos:line="38" pos:column="54">numconnects<pos:position pos:line="38" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="67"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="40" pos:column="3">outcurl<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">progress<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">.<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="21">flags<pos:position pos:line="40" pos:column="26"/></name></name>    <operator pos:line="40" pos:column="30">=<pos:position pos:line="40" pos:column="31"/></operator> <name><name pos:line="40" pos:column="32">data<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">-&gt;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="38">progress<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">.<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="47">flags<pos:position pos:line="40" pos:column="52"/></name></name></expr>;<pos:position pos:line="40" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="41" pos:column="3">outcurl<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">-&gt;<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="12">progress<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">.<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="21">callback<pos:position pos:line="41" pos:column="29"/></name></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <name><name pos:line="41" pos:column="32">data<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">-&gt;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="38">progress<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">.<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="47">callback<pos:position pos:line="41" pos:column="55"/></name></name></expr>;<pos:position pos:line="41" pos:column="56"/></expr_stmt>

  <comment type="block" pos:line="43" pos:column="3">/* duplicate all values in 'change' */</comment>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><name><name pos:line="44" pos:column="6">data<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">change<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">.<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="19">url<pos:position pos:line="44" pos:column="22"/></name></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23"> <block pos:line="44" pos:column="24">{
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">outcurl<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">change<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">.<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="21">url<pos:position pos:line="45" pos:column="24"/></name></name> <operator pos:line="45" pos:column="25">=<pos:position pos:line="45" pos:column="26"/></operator> <call><name pos:line="45" pos:column="27">strdup<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><name><name pos:line="45" pos:column="34">data<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">change<pos:position pos:line="45" pos:column="46"/></name><operator pos:line="45" pos:column="46">.<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="47">url<pos:position pos:line="45" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="46" pos:column="5">outcurl<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">-&gt;<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="14">change<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">.<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="21">url_alloc<pos:position pos:line="46" pos:column="30"/></name></name> <operator pos:line="46" pos:column="31">=<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="33">TRUE<pos:position pos:line="46" pos:column="37"/></name></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>
  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><name><name pos:line="48" pos:column="6">data<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">-&gt;<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="12">change<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">.<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">proxy<pos:position pos:line="48" pos:column="24"/></name></name></expr>)<pos:position pos:line="48" pos:column="25"/></condition><then pos:line="48" pos:column="25"> <block pos:line="48" pos:column="26">{
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">outcurl<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">-&gt;<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="14">change<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">.<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="21">proxy<pos:position pos:line="49" pos:column="26"/></name></name> <operator pos:line="49" pos:column="27">=<pos:position pos:line="49" pos:column="28"/></operator> <call><name pos:line="49" pos:column="29">strdup<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name><name pos:line="49" pos:column="36">data<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">-&gt;<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="42">change<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">.<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="49">proxy<pos:position pos:line="49" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">outcurl<pos:position pos:line="50" pos:column="12"/></name><operator pos:line="50" pos:column="12">-&gt;<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="14">change<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">.<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="21">proxy_alloc<pos:position pos:line="50" pos:column="32"/></name></name> <operator pos:line="50" pos:column="33">=<pos:position pos:line="50" pos:column="34"/></operator> <name pos:line="50" pos:column="35">TRUE<pos:position pos:line="50" pos:column="39"/></name></expr>;<pos:position pos:line="50" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>
  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><name><name pos:line="52" pos:column="6">data<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">change<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">.<pos:position pos:line="52" pos:column="19"/></operator><name pos:line="52" pos:column="19">referer<pos:position pos:line="52" pos:column="26"/></name></name></expr>)<pos:position pos:line="52" pos:column="27"/></condition><then pos:line="52" pos:column="27"> <block pos:line="52" pos:column="28">{
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">outcurl<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">change<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">.<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="21">referer<pos:position pos:line="53" pos:column="28"/></name></name> <operator pos:line="53" pos:column="29">=<pos:position pos:line="53" pos:column="30"/></operator> <call><name pos:line="53" pos:column="31">strdup<pos:position pos:line="53" pos:column="37"/></name><argument_list pos:line="53" pos:column="37">(<argument><expr><name><name pos:line="53" pos:column="38">data<pos:position pos:line="53" pos:column="42"/></name><operator pos:line="53" pos:column="42">-&gt;<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="44">change<pos:position pos:line="53" pos:column="50"/></name><operator pos:line="53" pos:column="50">.<pos:position pos:line="53" pos:column="51"/></operator><name pos:line="53" pos:column="51">referer<pos:position pos:line="53" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">outcurl<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">-&gt;<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="14">change<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">.<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="21">referer_alloc<pos:position pos:line="54" pos:column="34"/></name></name> <operator pos:line="54" pos:column="35">=<pos:position pos:line="54" pos:column="36"/></operator> <name pos:line="54" pos:column="37">TRUE<pos:position pos:line="54" pos:column="41"/></name></expr>;<pos:position pos:line="54" pos:column="42"/></expr_stmt>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <return pos:line="57" pos:column="3">return <expr><name pos:line="57" pos:column="10">outcurl<pos:position pos:line="57" pos:column="17"/></name></expr>;<pos:position pos:line="57" pos:column="18"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
