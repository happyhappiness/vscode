<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_210_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_connecthost<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,  <comment type="block" pos:line="1" pos:column="54">/* context */</comment>
                          <parameter><decl><type><name><name pos:line="2" pos:column="27">struct<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">Curl_dns_entry<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">remotehost<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <comment type="block" pos:line="2" pos:column="62">/* use this one */</comment>
                          <parameter><decl><type><name pos:line="3" pos:column="27">curl_socket_t<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">sockconn<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,   <comment type="block" pos:line="3" pos:column="54">/* the connected socket */</comment>
                          <parameter><decl><type><name pos:line="4" pos:column="27">Curl_addrinfo<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier><modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier></type><name pos:line="4" pos:column="43">addr<pos:position pos:line="4" pos:column="47"/></name></decl></parameter>,      <comment type="block" pos:line="4" pos:column="54">/* the one we used */</comment>
                          <parameter><decl><type><name pos:line="5" pos:column="27">bool<pos:position pos:line="5" pos:column="31"/></name> <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier></type><name pos:line="5" pos:column="33">connected<pos:position pos:line="5" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="43"/></parameter_list>           <comment type="block" pos:line="5" pos:column="54">/* really connected? */</comment>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name><name pos:line="7" pos:column="32">conn<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">-&gt;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="38">data<pos:position pos:line="7" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socket_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">sockfd<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><name pos:line="8" pos:column="26">CURL_SOCKET_BAD<pos:position pos:line="8" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">aliasindex<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">num_addr<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">Curl_addrinfo<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="18">ai<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">Curl_addrinfo<pos:position pos:line="12" pos:column="16"/></name> <modifier pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></modifier></type><name pos:line="12" pos:column="18">curr_addr<pos:position pos:line="12" pos:column="27"/></name></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">timeval<pos:position pos:line="14" pos:column="17"/></name></name></type> <name pos:line="14" pos:column="18">after<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">timeval<pos:position pos:line="15" pos:column="17"/></name></name></type> <name pos:line="15" pos:column="18">before<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><call><name pos:line="15" pos:column="27">Curl_tvnow<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">()<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="40"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="17" pos:column="3">/*************************************************************
   * Figure out what maximum time we have left
   *************************************************************/</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">long<pos:position pos:line="20" pos:column="7"/></name></type> <name pos:line="20" pos:column="8">timeout_ms<pos:position pos:line="20" pos:column="18"/></name><init pos:line="20" pos:column="18">= <expr><name pos:line="20" pos:column="20">DEFAULT_CONNECT_TIMEOUT<pos:position pos:line="20" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">long<pos:position pos:line="21" pos:column="7"/></name></type> <name pos:line="21" pos:column="8">timeout_per_addr<pos:position pos:line="21" pos:column="24"/></name></decl>;<pos:position pos:line="21" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="23" pos:column="3">*<pos:position pos:line="23" pos:column="4"/></operator><name pos:line="23" pos:column="4">connected<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <name pos:line="23" pos:column="16">FALSE<pos:position pos:line="23" pos:column="21"/></name></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt> <comment type="block" pos:line="23" pos:column="23">/* default to not connected */</comment>

  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name><name pos:line="25" pos:column="6">data<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">set<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">.<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">timeout<pos:position pos:line="25" pos:column="23"/></name></name> <operator pos:line="25" pos:column="24">||<pos:position pos:line="25" pos:column="26"/></operator> <name><name pos:line="25" pos:column="27">data<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">-&gt;<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="33">set<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">.<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="37">connecttimeout<pos:position pos:line="25" pos:column="51"/></name></name></expr>)<pos:position pos:line="25" pos:column="52"/></condition><then pos:line="25" pos:column="52"> <block pos:line="25" pos:column="53">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">long<pos:position pos:line="26" pos:column="9"/></name></type> <name pos:line="26" pos:column="10">has_passed<pos:position pos:line="26" pos:column="20"/></name></decl>;<pos:position pos:line="26" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="28" pos:column="5">/* Evaluate in milliseconds how much time that has passed */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">has_passed<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <call><name pos:line="29" pos:column="18">Curl_tvdiff<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><call><name pos:line="29" pos:column="30">Curl_tvnow<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">()<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="44">data<pos:position pos:line="29" pos:column="48"/></name><operator pos:line="29" pos:column="48">-&gt;<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="50">progress<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">.<pos:position pos:line="29" pos:column="59"/></operator><name pos:line="29" pos:column="59">t_startsingle<pos:position pos:line="29" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="74"/></expr_stmt>

<cpp:ifndef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifndef<pos:position pos:line="31" pos:column="8"/></cpp:directive> <name pos:line="31" pos:column="9">min<pos:position pos:line="31" pos:column="12"/></name></cpp:ifndef>
<cpp:define pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">define<pos:position pos:line="32" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="32" pos:column="9">min<pos:position pos:line="32" pos:column="12"/></name><parameter_list pos:line="32" pos:column="12">(<parameter><type><name pos:line="32" pos:column="13">a<pos:position pos:line="32" pos:column="14"/></name></type></parameter>, <parameter><type><name pos:line="32" pos:column="16">b<pos:position pos:line="32" pos:column="17"/></name></type></parameter>)<pos:position pos:line="32" pos:column="18"/></parameter_list></cpp:macro>   <cpp:value pos:line="32" pos:column="21">((a) &lt; (b) ? (a) : (b))<pos:position pos:line="32" pos:column="44"/></cpp:value></cpp:define>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="35" pos:column="5">/* get the most strict timeout of the ones converted to milliseconds */</comment>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><name><name pos:line="36" pos:column="8">data<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">set<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">.<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="18">timeout<pos:position pos:line="36" pos:column="25"/></name></name> <operator pos:line="36" pos:column="26">&amp;&amp;<pos:position pos:line="36" pos:column="36"/></operator> <name><name pos:line="36" pos:column="29">data<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">-&gt;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="35">set<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">.<pos:position pos:line="36" pos:column="39"/></operator><name pos:line="36" pos:column="39">connecttimeout<pos:position pos:line="36" pos:column="53"/></name></name></expr>)<pos:position pos:line="36" pos:column="54"/></condition><then pos:line="36" pos:column="54"> <block pos:line="36" pos:column="55">{
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><name><name pos:line="37" pos:column="11">data<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">-&gt;<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="17">set<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">.<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="21">timeout<pos:position pos:line="37" pos:column="28"/></name></name> <operator pos:line="37" pos:column="29">&lt;<pos:position pos:line="37" pos:column="33"/></operator> <name><name pos:line="37" pos:column="31">data<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">-&gt;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="37">set<pos:position pos:line="37" pos:column="40"/></name><operator pos:line="37" pos:column="40">.<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="41">connecttimeout<pos:position pos:line="37" pos:column="55"/></name></name></expr>)<pos:position pos:line="37" pos:column="56"/></condition><then pos:line="37" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="9">timeout_ms<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <name><name pos:line="38" pos:column="22">data<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">-&gt;<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="28">set<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">.<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="32">timeout<pos:position pos:line="38" pos:column="39"/></name></name><operator pos:line="38" pos:column="39">*<pos:position pos:line="38" pos:column="40"/></operator><literal type="number" pos:line="38" pos:column="40">1000<pos:position pos:line="38" pos:column="44"/></literal></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt></block></then>
      <else pos:line="39" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="9">timeout_ms<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <name><name pos:line="40" pos:column="22">data<pos:position pos:line="40" pos:column="26"/></name><operator pos:line="40" pos:column="26">-&gt;<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="28">set<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">.<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="32">connecttimeout<pos:position pos:line="40" pos:column="46"/></name></name><operator pos:line="40" pos:column="46">*<pos:position pos:line="40" pos:column="47"/></operator><literal type="number" pos:line="40" pos:column="47">1000<pos:position pos:line="40" pos:column="51"/></literal></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt></block></else></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then>
    <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if<condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">data<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">-&gt;<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="19">set<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">.<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="23">timeout<pos:position pos:line="42" pos:column="30"/></name></name></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="7">timeout_ms<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <name><name pos:line="43" pos:column="20">data<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">-&gt;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="26">set<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">.<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="30">timeout<pos:position pos:line="43" pos:column="37"/></name></name><operator pos:line="43" pos:column="37">*<pos:position pos:line="43" pos:column="38"/></operator><literal type="number" pos:line="43" pos:column="38">1000<pos:position pos:line="43" pos:column="42"/></literal></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt></block></then></if></elseif>
    <else pos:line="44" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="7">timeout_ms<pos:position pos:line="45" pos:column="17"/></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <name><name pos:line="45" pos:column="20">data<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">set<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">.<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">connecttimeout<pos:position pos:line="45" pos:column="44"/></name></name><operator pos:line="45" pos:column="44">*<pos:position pos:line="45" pos:column="45"/></operator><literal type="number" pos:line="45" pos:column="45">1000<pos:position pos:line="45" pos:column="49"/></literal></expr>;<pos:position pos:line="45" pos:column="50"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="47" pos:column="5">/* subtract the passed time */</comment>
    <expr_stmt><expr><name pos:line="48" pos:column="5">timeout_ms<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">-=<pos:position pos:line="48" pos:column="18"/></operator> <name pos:line="48" pos:column="19">has_passed<pos:position pos:line="48" pos:column="29"/></name></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>

    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><name pos:line="50" pos:column="8">timeout_ms<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">&lt;<pos:position pos:line="50" pos:column="23"/></operator> <literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>)<pos:position pos:line="50" pos:column="23"/></condition><then pos:line="50" pos:column="23"> <block pos:line="50" pos:column="24">{
      <comment type="block" pos:line="51" pos:column="7">/* a precaution, no need to continue if time already is up */</comment>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">failf<pos:position pos:line="52" pos:column="12"/></name><argument_list pos:line="52" pos:column="12">(<argument><expr><name pos:line="52" pos:column="13">data<pos:position pos:line="52" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="19">"Connection time-out"<pos:position pos:line="52" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
      <return pos:line="53" pos:column="7">return <expr><name pos:line="53" pos:column="14">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="53" pos:column="39"/></name></expr>;<pos:position pos:line="53" pos:column="40"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="57" pos:column="3">/* Max time for each address */</comment>
  <expr_stmt><expr><name pos:line="58" pos:column="3">num_addr<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">=<pos:position pos:line="58" pos:column="13"/></operator> <call><name pos:line="58" pos:column="14">Curl_num_addresses<pos:position pos:line="58" pos:column="32"/></name><argument_list pos:line="58" pos:column="32">(<argument><expr><name><name pos:line="58" pos:column="33">remotehost<pos:position pos:line="58" pos:column="43"/></name><operator pos:line="58" pos:column="43">-&gt;<pos:position pos:line="58" pos:column="48"/></operator><name pos:line="58" pos:column="45">addr<pos:position pos:line="58" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="59" pos:column="3">timeout_per_addr<pos:position pos:line="59" pos:column="19"/></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <name pos:line="59" pos:column="22">timeout_ms<pos:position pos:line="59" pos:column="32"/></name> <operator pos:line="59" pos:column="33">/<pos:position pos:line="59" pos:column="34"/></operator> <name pos:line="59" pos:column="35">num_addr<pos:position pos:line="59" pos:column="43"/></name></expr>;<pos:position pos:line="59" pos:column="44"/></expr_stmt>

  <expr_stmt><expr><name pos:line="61" pos:column="3">ai<pos:position pos:line="61" pos:column="5"/></name> <operator pos:line="61" pos:column="6">=<pos:position pos:line="61" pos:column="7"/></operator> <name><name pos:line="61" pos:column="8">remotehost<pos:position pos:line="61" pos:column="18"/></name><operator pos:line="61" pos:column="18">-&gt;<pos:position pos:line="61" pos:column="23"/></operator><name pos:line="61" pos:column="20">addr<pos:position pos:line="61" pos:column="24"/></name></name></expr>;<pos:position pos:line="61" pos:column="25"/></expr_stmt>

  <comment type="block" pos:line="63" pos:column="3">/* Below is the loop that attempts to connect to all IP-addresses we
   * know for the given host. One by one until one IP succeeds.
   */</comment>

  <if pos:line="67" pos:column="3">if<condition pos:line="67" pos:column="5">(<expr><name><name pos:line="67" pos:column="6">data<pos:position pos:line="67" pos:column="10"/></name><operator pos:line="67" pos:column="10">-&gt;<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="12">state<pos:position pos:line="67" pos:column="17"/></name><operator pos:line="67" pos:column="17">.<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="18">used_interface<pos:position pos:line="67" pos:column="32"/></name></name> <operator pos:line="67" pos:column="33">==<pos:position pos:line="67" pos:column="35"/></operator> <name pos:line="67" pos:column="36">Curl_if_multi<pos:position pos:line="67" pos:column="49"/></name></expr>)<pos:position pos:line="67" pos:column="50"/></condition><then pos:line="67" pos:column="50">
    <comment type="block" pos:line="68" pos:column="5">/* don't hang when doing multi */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="5">timeout_per_addr<pos:position pos:line="69" pos:column="21"/></name> <operator pos:line="69" pos:column="22">=<pos:position pos:line="69" pos:column="23"/></operator> <literal type="number" pos:line="69" pos:column="24">0<pos:position pos:line="69" pos:column="25"/></literal></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="71" pos:column="3">/*
   * Connecting with a Curl_addrinfo chain
   */</comment>
  <for pos:line="74" pos:column="3">for <control pos:line="74" pos:column="7">(<init><expr><name pos:line="74" pos:column="8">curr_addr<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <name pos:line="74" pos:column="20">ai<pos:position pos:line="74" pos:column="22"/></name></expr><operator pos:line="74" pos:column="22">,<pos:position pos:line="74" pos:column="23"/></operator> <expr><name pos:line="74" pos:column="24">aliasindex<pos:position pos:line="74" pos:column="34"/></name><operator pos:line="74" pos:column="34">=<pos:position pos:line="74" pos:column="35"/></operator><literal type="number" pos:line="74" pos:column="35">0<pos:position pos:line="74" pos:column="36"/></literal></expr>;<pos:position pos:line="74" pos:column="37"/></init> <condition><expr><name pos:line="74" pos:column="38">curr_addr<pos:position pos:line="74" pos:column="47"/></name></expr>;<pos:position pos:line="74" pos:column="48"/></condition>
       <incr><expr><name pos:line="75" pos:column="8">curr_addr<pos:position pos:line="75" pos:column="17"/></name> <operator pos:line="75" pos:column="18">=<pos:position pos:line="75" pos:column="19"/></operator> <name><name pos:line="75" pos:column="20">curr_addr<pos:position pos:line="75" pos:column="29"/></name><operator pos:line="75" pos:column="29">-&gt;<pos:position pos:line="75" pos:column="34"/></operator><name pos:line="75" pos:column="31">ai_next<pos:position pos:line="75" pos:column="38"/></name></name></expr><operator pos:line="75" pos:column="38">,<pos:position pos:line="75" pos:column="39"/></operator> <expr><name pos:line="75" pos:column="40">aliasindex<pos:position pos:line="75" pos:column="50"/></name><operator pos:line="75" pos:column="50">++<pos:position pos:line="75" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="75" pos:column="53"/></control> <block pos:line="75" pos:column="54">{

    <comment type="block" pos:line="77" pos:column="5">/* start connecting to the IP curr_addr points to */</comment>
    <expr_stmt><expr><name pos:line="78" pos:column="5">sockfd<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">=<pos:position pos:line="78" pos:column="13"/></operator> <call><name pos:line="78" pos:column="14">singleipconnect<pos:position pos:line="78" pos:column="29"/></name><argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">conn<pos:position pos:line="78" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="36">curr_addr<pos:position pos:line="78" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="47">timeout_per_addr<pos:position pos:line="78" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="65">connected<pos:position pos:line="78" pos:column="74"/></name></expr></argument>)<pos:position pos:line="78" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="76"/></expr_stmt>

    <if pos:line="80" pos:column="5">if<condition pos:line="80" pos:column="7">(<expr><name pos:line="80" pos:column="8">sockfd<pos:position pos:line="80" pos:column="14"/></name> <operator pos:line="80" pos:column="15">!=<pos:position pos:line="80" pos:column="17"/></operator> <name pos:line="80" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="80" pos:column="33"/></name></expr>)<pos:position pos:line="80" pos:column="34"/></condition><then pos:line="80" pos:column="34">
      <block type="pseudo"><break pos:line="81" pos:column="7">break;<pos:position pos:line="81" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="83" pos:column="5">/* get a new timeout for next attempt */</comment>
    <expr_stmt><expr><name pos:line="84" pos:column="5">after<pos:position pos:line="84" pos:column="10"/></name> <operator pos:line="84" pos:column="11">=<pos:position pos:line="84" pos:column="12"/></operator> <call><name pos:line="84" pos:column="13">Curl_tvnow<pos:position pos:line="84" pos:column="23"/></name><argument_list pos:line="84" pos:column="23">()<pos:position pos:line="84" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="85" pos:column="5">timeout_ms<pos:position pos:line="85" pos:column="15"/></name> <operator pos:line="85" pos:column="16">-=<pos:position pos:line="85" pos:column="18"/></operator> <call><name pos:line="85" pos:column="19">Curl_tvdiff<pos:position pos:line="85" pos:column="30"/></name><argument_list pos:line="85" pos:column="30">(<argument><expr><name pos:line="85" pos:column="31">after<pos:position pos:line="85" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="38">before<pos:position pos:line="85" pos:column="44"/></name></expr></argument>)<pos:position pos:line="85" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="46"/></expr_stmt>
    <if pos:line="86" pos:column="5">if<condition pos:line="86" pos:column="7">(<expr><name pos:line="86" pos:column="8">timeout_ms<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">&lt;<pos:position pos:line="86" pos:column="23"/></operator> <literal type="number" pos:line="86" pos:column="21">0<pos:position pos:line="86" pos:column="22"/></literal></expr>)<pos:position pos:line="86" pos:column="23"/></condition><then pos:line="86" pos:column="23"> <block pos:line="86" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">failf<pos:position pos:line="87" pos:column="12"/></name><argument_list pos:line="87" pos:column="12">(<argument><expr><name pos:line="87" pos:column="13">data<pos:position pos:line="87" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="19">"connect() timed out!"<pos:position pos:line="87" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="43"/></expr_stmt>
      <return pos:line="88" pos:column="7">return <expr><name pos:line="88" pos:column="14">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="88" pos:column="39"/></name></expr>;<pos:position pos:line="88" pos:column="40"/></return>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="90" pos:column="5">before<pos:position pos:line="90" pos:column="11"/></name> <operator pos:line="90" pos:column="12">=<pos:position pos:line="90" pos:column="13"/></operator> <name pos:line="90" pos:column="14">after<pos:position pos:line="90" pos:column="19"/></name></expr>;<pos:position pos:line="90" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="91" pos:column="4"/></block></for>  <comment type="block" pos:line="91" pos:column="6">/* end of connect-to-each-address loop */</comment>

  <if pos:line="93" pos:column="3">if <condition pos:line="93" pos:column="6">(<expr><name pos:line="93" pos:column="7">sockfd<pos:position pos:line="93" pos:column="13"/></name> <operator pos:line="93" pos:column="14">==<pos:position pos:line="93" pos:column="16"/></operator> <name pos:line="93" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="93" pos:column="32"/></name></expr>)<pos:position pos:line="93" pos:column="33"/></condition><then pos:line="93" pos:column="33"> <block pos:line="93" pos:column="34">{
    <comment type="block" pos:line="94" pos:column="5">/* no good connect was made */</comment>
    <expr_stmt><expr><operator pos:line="95" pos:column="5">*<pos:position pos:line="95" pos:column="6"/></operator><name pos:line="95" pos:column="6">sockconn<pos:position pos:line="95" pos:column="14"/></name> <operator pos:line="95" pos:column="15">=<pos:position pos:line="95" pos:column="16"/></operator> <name pos:line="95" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="95" pos:column="32"/></name></expr>;<pos:position pos:line="95" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">failf<pos:position pos:line="96" pos:column="10"/></name><argument_list pos:line="96" pos:column="10">(<argument><expr><name pos:line="96" pos:column="11">data<pos:position pos:line="96" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="17">"couldn't connect to host"<pos:position pos:line="96" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="45"/></expr_stmt>
    <return pos:line="97" pos:column="5">return <expr><name pos:line="97" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="97" pos:column="33"/></name></expr>;<pos:position pos:line="97" pos:column="34"/></return>
  }<pos:position pos:line="98" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="100" pos:column="3">/* leave the socket in non-blocking mode */</comment>

  <comment type="block" pos:line="102" pos:column="3">/* store the address we use */</comment>
  <if pos:line="103" pos:column="3">if<condition pos:line="103" pos:column="5">(<expr><name pos:line="103" pos:column="6">addr<pos:position pos:line="103" pos:column="10"/></name></expr>)<pos:position pos:line="103" pos:column="11"/></condition><then pos:line="103" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="104" pos:column="5">*<pos:position pos:line="104" pos:column="6"/></operator><name pos:line="104" pos:column="6">addr<pos:position pos:line="104" pos:column="10"/></name> <operator pos:line="104" pos:column="11">=<pos:position pos:line="104" pos:column="12"/></operator> <name pos:line="104" pos:column="13">curr_addr<pos:position pos:line="104" pos:column="22"/></name></expr>;<pos:position pos:line="104" pos:column="23"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="106" pos:column="3">/* allow NULL-pointers to get passed in */</comment>
  <if pos:line="107" pos:column="3">if<condition pos:line="107" pos:column="5">(<expr><name pos:line="107" pos:column="6">sockconn<pos:position pos:line="107" pos:column="14"/></name></expr>)<pos:position pos:line="107" pos:column="15"/></condition><then pos:line="107" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="108" pos:column="5">*<pos:position pos:line="108" pos:column="6"/></operator><name pos:line="108" pos:column="6">sockconn<pos:position pos:line="108" pos:column="14"/></name> <operator pos:line="108" pos:column="15">=<pos:position pos:line="108" pos:column="16"/></operator> <name pos:line="108" pos:column="17">sockfd<pos:position pos:line="108" pos:column="23"/></name></expr>;<pos:position pos:line="108" pos:column="24"/></expr_stmt></block></then></if>    <comment type="block" pos:line="108" pos:column="28">/* the socket descriptor we've connected */</comment>

  <expr_stmt><expr><name><name pos:line="110" pos:column="3">data<pos:position pos:line="110" pos:column="7"/></name><operator pos:line="110" pos:column="7">-&gt;<pos:position pos:line="110" pos:column="12"/></operator><name pos:line="110" pos:column="9">info<pos:position pos:line="110" pos:column="13"/></name><operator pos:line="110" pos:column="13">.<pos:position pos:line="110" pos:column="14"/></operator><name pos:line="110" pos:column="14">numconnects<pos:position pos:line="110" pos:column="25"/></name></name><operator pos:line="110" pos:column="25">++<pos:position pos:line="110" pos:column="27"/></operator></expr>;<pos:position pos:line="110" pos:column="28"/></expr_stmt> <comment type="block" pos:line="110" pos:column="29">/* to track the number of connections made */</comment>

  <return pos:line="112" pos:column="3">return <expr><name pos:line="112" pos:column="10">CURLE_OK<pos:position pos:line="112" pos:column="18"/></name></expr>;<pos:position pos:line="112" pos:column="19"/></return>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
