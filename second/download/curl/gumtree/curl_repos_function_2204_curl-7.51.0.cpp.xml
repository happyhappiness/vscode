<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2204_curl-7.51.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name></type> <name pos:line="2" pos:column="5">cert_stuff<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name><name pos:line="2" pos:column="16">struct<pos:position pos:line="2" pos:column="22"/></name> <name pos:line="2" pos:column="23">connectdata<pos:position pos:line="2" pos:column="34"/></name></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">conn<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
               <parameter><decl><type><name pos:line="3" pos:column="16">SSL_CTX<pos:position pos:line="3" pos:column="23"/></name><modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type> <name pos:line="3" pos:column="25">ctx<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>,
               <parameter><decl><type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">cert_file<pos:position pos:line="4" pos:column="31"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="5" pos:column="16">const<pos:position pos:line="5" pos:column="21"/></specifier> <name pos:line="5" pos:column="22">char<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">cert_type<pos:position pos:line="5" pos:column="37"/></name></decl></parameter>,
               <parameter><decl><type><name pos:line="6" pos:column="16">char<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">key_file<pos:position pos:line="6" pos:column="30"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="7" pos:column="16">const<pos:position pos:line="7" pos:column="21"/></specifier> <name pos:line="7" pos:column="22">char<pos:position pos:line="7" pos:column="26"/></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">key_type<pos:position pos:line="7" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="37"/></parameter_list>
<block pos:line="8" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">Curl_easy<pos:position pos:line="9" pos:column="19"/></name></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">data<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><name><name pos:line="9" pos:column="28">conn<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">-&gt;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="34">data<pos:position pos:line="9" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">file_type<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><call><name pos:line="11" pos:column="19">do_file_type<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">cert_type<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">cert_file<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">||<pos:position pos:line="13" pos:column="18"/></operator> <operator pos:line="13" pos:column="19">(<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">file_type<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">==<pos:position pos:line="13" pos:column="32"/></operator> <name pos:line="13" pos:column="33">SSL_FILETYPE_ENGINE<pos:position pos:line="13" pos:column="52"/></name><operator pos:line="13" pos:column="52">)<pos:position pos:line="13" pos:column="53"/></operator></expr>)<pos:position pos:line="13" pos:column="54"/></condition><then pos:line="13" pos:column="54"> <block pos:line="13" pos:column="55">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">SSL<pos:position pos:line="14" pos:column="8"/></name> <modifier pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></modifier></type><name pos:line="14" pos:column="10">ssl<pos:position pos:line="14" pos:column="13"/></name></decl>;<pos:position pos:line="14" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">X509<pos:position pos:line="15" pos:column="9"/></name> <modifier pos:line="15" pos:column="10">*<pos:position pos:line="15" pos:column="11"/></modifier></type><name pos:line="15" pos:column="11">x509<pos:position pos:line="15" pos:column="15"/></name></decl>;<pos:position pos:line="15" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">cert_done<pos:position pos:line="16" pos:column="18"/></name> <init pos:line="16" pos:column="19">= <expr><literal type="number" pos:line="16" pos:column="21">0<pos:position pos:line="16" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="23"/></decl_stmt>

    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><name><name pos:line="18" pos:column="8">data<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">set<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">str<pos:position pos:line="18" pos:column="21"/></name><index pos:line="18" pos:column="21">[<expr><name pos:line="18" pos:column="22">STRING_KEY_PASSWD<pos:position pos:line="18" pos:column="39"/></name></expr>]<pos:position pos:line="18" pos:column="40"/></index></name></expr>)<pos:position pos:line="18" pos:column="41"/></condition><then pos:line="18" pos:column="41"> <block pos:line="18" pos:column="42">{
      <comment type="block" pos:line="19" pos:column="7">/* set the password in the callback userdata */</comment>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">SSL_CTX_set_default_passwd_cb_userdata<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><name pos:line="20" pos:column="46">ctx<pos:position pos:line="20" pos:column="49"/></name></expr></argument>,
                                             <argument><expr><name><name pos:line="21" pos:column="46">data<pos:position pos:line="21" pos:column="50"/></name><operator pos:line="21" pos:column="50">-&gt;<pos:position pos:line="21" pos:column="55"/></operator><name pos:line="21" pos:column="52">set<pos:position pos:line="21" pos:column="55"/></name><operator pos:line="21" pos:column="55">.<pos:position pos:line="21" pos:column="56"/></operator><name pos:line="21" pos:column="56">str<pos:position pos:line="21" pos:column="59"/></name><index pos:line="21" pos:column="59">[<expr><name pos:line="21" pos:column="60">STRING_KEY_PASSWD<pos:position pos:line="21" pos:column="77"/></name></expr>]<pos:position pos:line="21" pos:column="78"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="80"/></expr_stmt>
      <comment type="block" pos:line="22" pos:column="7">/* Set passwd callback: */</comment>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">SSL_CTX_set_default_passwd_cb<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">ctx<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">passwd_callback<pos:position pos:line="23" pos:column="57"/></name></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>


    <switch pos:line="27" pos:column="5">switch<condition pos:line="27" pos:column="11">(<expr><name pos:line="27" pos:column="12">file_type<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition> <block pos:line="27" pos:column="23">{
    <case pos:line="28" pos:column="5">case <expr><name pos:line="28" pos:column="10">SSL_FILETYPE_PEM<pos:position pos:line="28" pos:column="26"/></name></expr>:<pos:position pos:line="28" pos:column="27"/></case>
      <comment type="block" pos:line="29" pos:column="7">/* SSL_CTX_use_certificate_chain_file() only works on PEM files */</comment>
      <if pos:line="30" pos:column="7">if<condition pos:line="30" pos:column="9">(<expr><call><name pos:line="30" pos:column="10">SSL_CTX_use_certificate_chain_file<pos:position pos:line="30" pos:column="44"/></name><argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">ctx<pos:position pos:line="30" pos:column="48"/></name></expr></argument>,
                                            <argument><expr><name pos:line="31" pos:column="45">cert_file<pos:position pos:line="31" pos:column="54"/></name></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call> <operator pos:line="31" pos:column="56">!=<pos:position pos:line="31" pos:column="58"/></operator> <literal type="number" pos:line="31" pos:column="59">1<pos:position pos:line="31" pos:column="60"/></literal></expr>)<pos:position pos:line="31" pos:column="61"/></condition><then pos:line="31" pos:column="61"> <block pos:line="31" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">failf<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">data<pos:position pos:line="32" pos:column="19"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="33" pos:column="15">"could not load PEM client certificate, "<pos:position pos:line="33" pos:column="56"/></literal> <name pos:line="33" pos:column="57">OSSL_PACKAGE<pos:position pos:line="33" pos:column="69"/></name>
              <literal type="string" pos:line="34" pos:column="15">" error %s, "<pos:position pos:line="34" pos:column="28"/></literal>
              <literal type="string" pos:line="35" pos:column="15">"(no key found, wrong pass phrase, or wrong file format?)"<pos:position pos:line="35" pos:column="73"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="36" pos:column="15">ERR_error_string<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><call><name pos:line="36" pos:column="32">ERR_get_error<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">()<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">NULL<pos:position pos:line="36" pos:column="53"/></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr></argument> )<pos:position pos:line="36" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="57"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><literal type="number" pos:line="37" pos:column="16">0<pos:position pos:line="37" pos:column="17"/></literal></expr>;<pos:position pos:line="37" pos:column="18"/></return>
      }<pos:position pos:line="38" pos:column="8"/></block></then></if>
      <break pos:line="39" pos:column="7">break;<pos:position pos:line="39" pos:column="13"/></break>

    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">SSL_FILETYPE_ASN1<pos:position pos:line="41" pos:column="27"/></name></expr>:<pos:position pos:line="41" pos:column="28"/></case>
      <comment type="block" pos:line="42" pos:column="7">/* SSL_CTX_use_certificate_file() works with either PEM or ASN1, but
         we use the case above for PEM so this can only be performed with
         ASN1 files. */</comment>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><call><name pos:line="45" pos:column="10">SSL_CTX_use_certificate_file<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><name pos:line="45" pos:column="39">ctx<pos:position pos:line="45" pos:column="42"/></name></expr></argument>,
                                      <argument><expr><name pos:line="46" pos:column="39">cert_file<pos:position pos:line="46" pos:column="48"/></name></expr></argument>,
                                      <argument><expr><name pos:line="47" pos:column="39">file_type<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call> <operator pos:line="47" pos:column="50">!=<pos:position pos:line="47" pos:column="52"/></operator> <literal type="number" pos:line="47" pos:column="53">1<pos:position pos:line="47" pos:column="54"/></literal></expr>)<pos:position pos:line="47" pos:column="55"/></condition><then pos:line="47" pos:column="55"> <block pos:line="47" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">failf<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><name pos:line="48" pos:column="15">data<pos:position pos:line="48" pos:column="19"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="49" pos:column="15">"could not load ASN1 client certificate, "<pos:position pos:line="49" pos:column="57"/></literal> <name pos:line="49" pos:column="58">OSSL_PACKAGE<pos:position pos:line="49" pos:column="70"/></name>
              <literal type="string" pos:line="50" pos:column="15">" error %s, "<pos:position pos:line="50" pos:column="28"/></literal>
              <literal type="string" pos:line="51" pos:column="15">"(no key found, wrong pass phrase, or wrong file format?)"<pos:position pos:line="51" pos:column="73"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="52" pos:column="15">ERR_error_string<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><call><name pos:line="52" pos:column="32">ERR_get_error<pos:position pos:line="52" pos:column="45"/></name><argument_list pos:line="52" pos:column="45">()<pos:position pos:line="52" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="52" pos:column="49">NULL<pos:position pos:line="52" pos:column="53"/></name></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr></argument> )<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="57"/></expr_stmt>
        <return pos:line="53" pos:column="9">return <expr><literal type="number" pos:line="53" pos:column="16">0<pos:position pos:line="53" pos:column="17"/></literal></expr>;<pos:position pos:line="53" pos:column="18"/></return>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if>
      <break pos:line="55" pos:column="7">break;<pos:position pos:line="55" pos:column="13"/></break>
    <case pos:line="56" pos:column="5">case <expr><name pos:line="56" pos:column="10">SSL_FILETYPE_ENGINE<pos:position pos:line="56" pos:column="29"/></name></expr>:<pos:position pos:line="56" pos:column="30"/></case>
<cpp:if pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">if<pos:position pos:line="57" pos:column="4"/></cpp:directive> <expr><call><name pos:line="57" pos:column="5">defined<pos:position pos:line="57" pos:column="12"/></name><argument_list pos:line="57" pos:column="12">(<argument><expr><name pos:line="57" pos:column="13">HAVE_OPENSSL_ENGINE_H<pos:position pos:line="57" pos:column="34"/></name></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call> <operator pos:line="57" pos:column="36">&amp;&amp;<pos:position pos:line="57" pos:column="46"/></operator> <call><name pos:line="57" pos:column="39">defined<pos:position pos:line="57" pos:column="46"/></name><argument_list pos:line="57" pos:column="46">(<argument><expr><name pos:line="57" pos:column="47">ENGINE_CTRL_GET_CMD_FROM_NAME<pos:position pos:line="57" pos:column="76"/></name></expr></argument>)<pos:position pos:line="57" pos:column="77"/></argument_list></call></expr></cpp:if>
      <block pos:line="58" pos:column="7">{
        <if pos:line="59" pos:column="9">if<condition pos:line="59" pos:column="11">(<expr><name><name pos:line="59" pos:column="12">data<pos:position pos:line="59" pos:column="16"/></name><operator pos:line="59" pos:column="16">-&gt;<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="18">state<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">.<pos:position pos:line="59" pos:column="24"/></operator><name pos:line="59" pos:column="24">engine<pos:position pos:line="59" pos:column="30"/></name></name></expr>)<pos:position pos:line="59" pos:column="31"/></condition><then pos:line="59" pos:column="31"> <block pos:line="59" pos:column="32">{
          <decl_stmt><decl><type><specifier pos:line="60" pos:column="11">const<pos:position pos:line="60" pos:column="16"/></specifier> <name pos:line="60" pos:column="17">char<pos:position pos:line="60" pos:column="21"/></name> <modifier pos:line="60" pos:column="22">*<pos:position pos:line="60" pos:column="23"/></modifier></type><name pos:line="60" pos:column="23">cmd_name<pos:position pos:line="60" pos:column="31"/></name> <init pos:line="60" pos:column="32">= <expr><literal type="string" pos:line="60" pos:column="34">"LOAD_CERT_CTRL"<pos:position pos:line="60" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="60" pos:column="51"/></decl_stmt>
          <struct pos:line="61" pos:column="11">struct <block pos:line="61" pos:column="18">{<public type="default" pos:line="61" pos:column="19">
            <decl_stmt><decl><type><specifier pos:line="62" pos:column="13">const<pos:position pos:line="62" pos:column="18"/></specifier> <name pos:line="62" pos:column="19">char<pos:position pos:line="62" pos:column="23"/></name> <modifier pos:line="62" pos:column="24">*<pos:position pos:line="62" pos:column="25"/></modifier></type><name pos:line="62" pos:column="25">cert_id<pos:position pos:line="62" pos:column="32"/></name></decl>;<pos:position pos:line="62" pos:column="33"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">X509<pos:position pos:line="63" pos:column="17"/></name> <modifier pos:line="63" pos:column="18">*<pos:position pos:line="63" pos:column="19"/></modifier></type><name pos:line="63" pos:column="19">cert<pos:position pos:line="63" pos:column="23"/></name></decl>;<pos:position pos:line="63" pos:column="24"/></decl_stmt>
          <pos:position pos:line="64" pos:column="11"/></public>}<pos:position pos:line="64" pos:column="12"/></block> <decl><name pos:line="64" pos:column="13">params<pos:position pos:line="64" pos:column="19"/></name></decl>;<pos:position pos:line="64" pos:column="20"/></struct>

          <expr_stmt><expr><name><name pos:line="66" pos:column="11">params<pos:position pos:line="66" pos:column="17"/></name><operator pos:line="66" pos:column="17">.<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="18">cert_id<pos:position pos:line="66" pos:column="25"/></name></name> <operator pos:line="66" pos:column="26">=<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="28">cert_file<pos:position pos:line="66" pos:column="37"/></name></expr>;<pos:position pos:line="66" pos:column="38"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="67" pos:column="11">params<pos:position pos:line="67" pos:column="17"/></name><operator pos:line="67" pos:column="17">.<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="18">cert<pos:position pos:line="67" pos:column="22"/></name></name> <operator pos:line="67" pos:column="23">=<pos:position pos:line="67" pos:column="24"/></operator> <name pos:line="67" pos:column="25">NULL<pos:position pos:line="67" pos:column="29"/></name></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>

          <comment type="block" pos:line="69" pos:column="11">/* Does the engine supports LOAD_CERT_CTRL ? */</comment>
          <if pos:line="70" pos:column="11">if<condition pos:line="70" pos:column="13">(<expr><operator pos:line="70" pos:column="14">!<pos:position pos:line="70" pos:column="15"/></operator><call><name pos:line="70" pos:column="15">ENGINE_ctrl<pos:position pos:line="70" pos:column="26"/></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name><name pos:line="70" pos:column="27">data<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">-&gt;<pos:position pos:line="70" pos:column="36"/></operator><name pos:line="70" pos:column="33">state<pos:position pos:line="70" pos:column="38"/></name><operator pos:line="70" pos:column="38">.<pos:position pos:line="70" pos:column="39"/></operator><name pos:line="70" pos:column="39">engine<pos:position pos:line="70" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="47">ENGINE_CTRL_GET_CMD_FROM_NAME<pos:position pos:line="70" pos:column="76"/></name></expr></argument>,
                          <argument><expr><literal type="number" pos:line="71" pos:column="27">0<pos:position pos:line="71" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="71" pos:column="30">(<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="31">void<pos:position pos:line="71" pos:column="35"/></name> <operator pos:line="71" pos:column="36">*<pos:position pos:line="71" pos:column="37"/></operator><operator pos:line="71" pos:column="37">)<pos:position pos:line="71" pos:column="38"/></operator><name pos:line="71" pos:column="38">cmd_name<pos:position pos:line="71" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="48">NULL<pos:position pos:line="71" pos:column="52"/></name></expr></argument>)<pos:position pos:line="71" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="54"/></condition><then pos:line="71" pos:column="54"> <block pos:line="71" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">failf<pos:position pos:line="72" pos:column="18"/></name><argument_list pos:line="72" pos:column="18">(<argument><expr><name pos:line="72" pos:column="19">data<pos:position pos:line="72" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="25">"ssl engine does not support loading certificates"<pos:position pos:line="72" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="77"/></expr_stmt>
            <return pos:line="73" pos:column="13">return <expr><literal type="number" pos:line="73" pos:column="20">0<pos:position pos:line="73" pos:column="21"/></literal></expr>;<pos:position pos:line="73" pos:column="22"/></return>
          }<pos:position pos:line="74" pos:column="12"/></block></then></if>

          <comment type="block" pos:line="76" pos:column="11">/* Load the certificate from the engine */</comment>
          <if pos:line="77" pos:column="11">if<condition pos:line="77" pos:column="13">(<expr><operator pos:line="77" pos:column="14">!<pos:position pos:line="77" pos:column="15"/></operator><call><name pos:line="77" pos:column="15">ENGINE_ctrl_cmd<pos:position pos:line="77" pos:column="30"/></name><argument_list pos:line="77" pos:column="30">(<argument><expr><name><name pos:line="77" pos:column="31">data<pos:position pos:line="77" pos:column="35"/></name><operator pos:line="77" pos:column="35">-&gt;<pos:position pos:line="77" pos:column="40"/></operator><name pos:line="77" pos:column="37">state<pos:position pos:line="77" pos:column="42"/></name><operator pos:line="77" pos:column="42">.<pos:position pos:line="77" pos:column="43"/></operator><name pos:line="77" pos:column="43">engine<pos:position pos:line="77" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="51">cmd_name<pos:position pos:line="77" pos:column="59"/></name></expr></argument>,
                              <argument><expr><literal type="number" pos:line="78" pos:column="31">0<pos:position pos:line="78" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="78" pos:column="34">&amp;<pos:position pos:line="78" pos:column="39"/></operator><name pos:line="78" pos:column="35">params<pos:position pos:line="78" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="43">NULL<pos:position pos:line="78" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="78" pos:column="49">1<pos:position pos:line="78" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="52"/></condition><then pos:line="78" pos:column="52"> <block pos:line="78" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="79" pos:column="13">failf<pos:position pos:line="79" pos:column="18"/></name><argument_list pos:line="79" pos:column="18">(<argument><expr><name pos:line="79" pos:column="19">data<pos:position pos:line="79" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="25">"ssl engine cannot load client cert with id"<pos:position pos:line="79" pos:column="69"/></literal>
                  <literal type="string" pos:line="80" pos:column="19">" '%s' [%s]"<pos:position pos:line="80" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="33">cert_file<pos:position pos:line="80" pos:column="42"/></name></expr></argument>,
                  <argument><expr><call><name pos:line="81" pos:column="19">ERR_error_string<pos:position pos:line="81" pos:column="35"/></name><argument_list pos:line="81" pos:column="35">(<argument><expr><call><name pos:line="81" pos:column="36">ERR_get_error<pos:position pos:line="81" pos:column="49"/></name><argument_list pos:line="81" pos:column="49">()<pos:position pos:line="81" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="81" pos:column="53">NULL<pos:position pos:line="81" pos:column="57"/></name></expr></argument>)<pos:position pos:line="81" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="60"/></expr_stmt>
            <return pos:line="82" pos:column="13">return <expr><literal type="number" pos:line="82" pos:column="20">0<pos:position pos:line="82" pos:column="21"/></literal></expr>;<pos:position pos:line="82" pos:column="22"/></return>
          }<pos:position pos:line="83" pos:column="12"/></block></then></if>

          <if pos:line="85" pos:column="11">if<condition pos:line="85" pos:column="13">(<expr><operator pos:line="85" pos:column="14">!<pos:position pos:line="85" pos:column="15"/></operator><name><name pos:line="85" pos:column="15">params<pos:position pos:line="85" pos:column="21"/></name><operator pos:line="85" pos:column="21">.<pos:position pos:line="85" pos:column="22"/></operator><name pos:line="85" pos:column="22">cert<pos:position pos:line="85" pos:column="26"/></name></name></expr>)<pos:position pos:line="85" pos:column="27"/></condition><then pos:line="85" pos:column="27"> <block pos:line="85" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">failf<pos:position pos:line="86" pos:column="18"/></name><argument_list pos:line="86" pos:column="18">(<argument><expr><name pos:line="86" pos:column="19">data<pos:position pos:line="86" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="25">"ssl engine didn't initialized the certificate "<pos:position pos:line="86" pos:column="73"/></literal>
                  <literal type="string" pos:line="87" pos:column="19">"properly."<pos:position pos:line="87" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="32"/></expr_stmt>
            <return pos:line="88" pos:column="13">return <expr><literal type="number" pos:line="88" pos:column="20">0<pos:position pos:line="88" pos:column="21"/></literal></expr>;<pos:position pos:line="88" pos:column="22"/></return>
          }<pos:position pos:line="89" pos:column="12"/></block></then></if>

          <if pos:line="91" pos:column="11">if<condition pos:line="91" pos:column="13">(<expr><call><name pos:line="91" pos:column="14">SSL_CTX_use_certificate<pos:position pos:line="91" pos:column="37"/></name><argument_list pos:line="91" pos:column="37">(<argument><expr><name pos:line="91" pos:column="38">ctx<pos:position pos:line="91" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="43">params<pos:position pos:line="91" pos:column="49"/></name><operator pos:line="91" pos:column="49">.<pos:position pos:line="91" pos:column="50"/></operator><name pos:line="91" pos:column="50">cert<pos:position pos:line="91" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="55"/></argument_list></call> <operator pos:line="91" pos:column="56">!=<pos:position pos:line="91" pos:column="58"/></operator> <literal type="number" pos:line="91" pos:column="59">1<pos:position pos:line="91" pos:column="60"/></literal></expr>)<pos:position pos:line="91" pos:column="61"/></condition><then pos:line="91" pos:column="61"> <block pos:line="91" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">failf<pos:position pos:line="92" pos:column="18"/></name><argument_list pos:line="92" pos:column="18">(<argument><expr><name pos:line="92" pos:column="19">data<pos:position pos:line="92" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="25">"unable to set client certificate"<pos:position pos:line="92" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="93" pos:column="13">X509_free<pos:position pos:line="93" pos:column="22"/></name><argument_list pos:line="93" pos:column="22">(<argument><expr><name><name pos:line="93" pos:column="23">params<pos:position pos:line="93" pos:column="29"/></name><operator pos:line="93" pos:column="29">.<pos:position pos:line="93" pos:column="30"/></operator><name pos:line="93" pos:column="30">cert<pos:position pos:line="93" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="36"/></expr_stmt>
            <return pos:line="94" pos:column="13">return <expr><literal type="number" pos:line="94" pos:column="20">0<pos:position pos:line="94" pos:column="21"/></literal></expr>;<pos:position pos:line="94" pos:column="22"/></return>
          }<pos:position pos:line="95" pos:column="12"/></block></then></if>
          <expr_stmt><expr><call><name pos:line="96" pos:column="11">X509_free<pos:position pos:line="96" pos:column="20"/></name><argument_list pos:line="96" pos:column="20">(<argument><expr><name><name pos:line="96" pos:column="21">params<pos:position pos:line="96" pos:column="27"/></name><operator pos:line="96" pos:column="27">.<pos:position pos:line="96" pos:column="28"/></operator><name pos:line="96" pos:column="28">cert<pos:position pos:line="96" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="34"/></expr_stmt> <comment type="block" pos:line="96" pos:column="35">/* we don't need the handle any more... */</comment>
        }<pos:position pos:line="97" pos:column="10"/></block></then>
        <else pos:line="98" pos:column="9">else <block pos:line="98" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="99" pos:column="11">failf<pos:position pos:line="99" pos:column="16"/></name><argument_list pos:line="99" pos:column="16">(<argument><expr><name pos:line="99" pos:column="17">data<pos:position pos:line="99" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="23">"crypto engine not set, can't load certificate"<pos:position pos:line="99" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="72"/></expr_stmt>
          <return pos:line="100" pos:column="11">return <expr><literal type="number" pos:line="100" pos:column="18">0<pos:position pos:line="100" pos:column="19"/></literal></expr>;<pos:position pos:line="100" pos:column="20"/></return>
        }<pos:position pos:line="101" pos:column="10"/></block></else></if>
      }<pos:position pos:line="102" pos:column="8"/></block>
      <break pos:line="103" pos:column="7">break;<pos:position pos:line="103" pos:column="13"/></break>
<cpp:else pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">else<pos:position pos:line="104" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><call><name pos:line="105" pos:column="7">failf<pos:position pos:line="105" pos:column="12"/></name><argument_list pos:line="105" pos:column="12">(<argument><expr><name pos:line="105" pos:column="13">data<pos:position pos:line="105" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="19">"file type ENG for certificate not implemented"<pos:position pos:line="105" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="68"/></expr_stmt>
      <return pos:line="106" pos:column="7">return <expr><literal type="number" pos:line="106" pos:column="14">0<pos:position pos:line="106" pos:column="15"/></literal></expr>;<pos:position pos:line="106" pos:column="16"/></return>
<cpp:endif pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">endif<pos:position pos:line="107" pos:column="7"/></cpp:directive></cpp:endif>

    <case pos:line="109" pos:column="5">case <expr><name pos:line="109" pos:column="10">SSL_FILETYPE_PKCS12<pos:position pos:line="109" pos:column="29"/></name></expr>:<pos:position pos:line="109" pos:column="30"/></case>
    <block pos:line="110" pos:column="5">{
<cpp:ifdef pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">ifdef<pos:position pos:line="111" pos:column="7"/></cpp:directive> <name pos:line="111" pos:column="8">HAVE_OPENSSL_PKCS12_H<pos:position pos:line="111" pos:column="29"/></name></cpp:ifdef>
      <decl_stmt><decl><type><name pos:line="112" pos:column="7">FILE<pos:position pos:line="112" pos:column="11"/></name> <modifier pos:line="112" pos:column="12">*<pos:position pos:line="112" pos:column="13"/></modifier></type><name pos:line="112" pos:column="13">f<pos:position pos:line="112" pos:column="14"/></name></decl>;<pos:position pos:line="112" pos:column="15"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="113" pos:column="7">PKCS12<pos:position pos:line="113" pos:column="13"/></name> <modifier pos:line="113" pos:column="14">*<pos:position pos:line="113" pos:column="15"/></modifier></type><name pos:line="113" pos:column="15">p12<pos:position pos:line="113" pos:column="18"/></name></decl>;<pos:position pos:line="113" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="114" pos:column="7">EVP_PKEY<pos:position pos:line="114" pos:column="15"/></name> <modifier pos:line="114" pos:column="16">*<pos:position pos:line="114" pos:column="17"/></modifier></type><name pos:line="114" pos:column="17">pri<pos:position pos:line="114" pos:column="20"/></name></decl>;<pos:position pos:line="114" pos:column="21"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="115" pos:column="7">STACK_OF<pos:position pos:line="115" pos:column="15"/></name><argument_list pos:line="115" pos:column="15">(<argument><expr><name pos:line="115" pos:column="16">X509<pos:position pos:line="115" pos:column="20"/></name></expr></argument>)<pos:position pos:line="115" pos:column="21"/></argument_list></call> <operator pos:line="115" pos:column="22">*<pos:position pos:line="115" pos:column="23"/></operator><name pos:line="115" pos:column="23">ca<pos:position pos:line="115" pos:column="25"/></name> <operator pos:line="115" pos:column="26">=<pos:position pos:line="115" pos:column="27"/></operator> <name pos:line="115" pos:column="28">NULL<pos:position pos:line="115" pos:column="32"/></name></expr>;<pos:position pos:line="115" pos:column="33"/></expr_stmt>

      <expr_stmt><expr><name pos:line="117" pos:column="7">f<pos:position pos:line="117" pos:column="8"/></name> <operator pos:line="117" pos:column="9">=<pos:position pos:line="117" pos:column="10"/></operator> <call><name pos:line="117" pos:column="11">fopen<pos:position pos:line="117" pos:column="16"/></name><argument_list pos:line="117" pos:column="16">(<argument><expr><name pos:line="117" pos:column="17">cert_file<pos:position pos:line="117" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="28">"rb"<pos:position pos:line="117" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="34"/></expr_stmt>
      <if pos:line="118" pos:column="7">if<condition pos:line="118" pos:column="9">(<expr><operator pos:line="118" pos:column="10">!<pos:position pos:line="118" pos:column="11"/></operator><name pos:line="118" pos:column="11">f<pos:position pos:line="118" pos:column="12"/></name></expr>)<pos:position pos:line="118" pos:column="13"/></condition><then pos:line="118" pos:column="13"> <block pos:line="118" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="119" pos:column="9">failf<pos:position pos:line="119" pos:column="14"/></name><argument_list pos:line="119" pos:column="14">(<argument><expr><name pos:line="119" pos:column="15">data<pos:position pos:line="119" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="21">"could not open PKCS12 file '%s'"<pos:position pos:line="119" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="56">cert_file<pos:position pos:line="119" pos:column="65"/></name></expr></argument>)<pos:position pos:line="119" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="67"/></expr_stmt>
        <return pos:line="120" pos:column="9">return <expr><literal type="number" pos:line="120" pos:column="16">0<pos:position pos:line="120" pos:column="17"/></literal></expr>;<pos:position pos:line="120" pos:column="18"/></return>
      }<pos:position pos:line="121" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="122" pos:column="7">p12<pos:position pos:line="122" pos:column="10"/></name> <operator pos:line="122" pos:column="11">=<pos:position pos:line="122" pos:column="12"/></operator> <call><name pos:line="122" pos:column="13">d2i_PKCS12_fp<pos:position pos:line="122" pos:column="26"/></name><argument_list pos:line="122" pos:column="26">(<argument><expr><name pos:line="122" pos:column="27">f<pos:position pos:line="122" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="30">NULL<pos:position pos:line="122" pos:column="34"/></name></expr></argument>)<pos:position pos:line="122" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="123" pos:column="7">fclose<pos:position pos:line="123" pos:column="13"/></name><argument_list pos:line="123" pos:column="13">(<argument><expr><name pos:line="123" pos:column="14">f<pos:position pos:line="123" pos:column="15"/></name></expr></argument>)<pos:position pos:line="123" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="17"/></expr_stmt>

      <if pos:line="125" pos:column="7">if<condition pos:line="125" pos:column="9">(<expr><operator pos:line="125" pos:column="10">!<pos:position pos:line="125" pos:column="11"/></operator><name pos:line="125" pos:column="11">p12<pos:position pos:line="125" pos:column="14"/></name></expr>)<pos:position pos:line="125" pos:column="15"/></condition><then pos:line="125" pos:column="15"> <block pos:line="125" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">failf<pos:position pos:line="126" pos:column="14"/></name><argument_list pos:line="126" pos:column="14">(<argument><expr><name pos:line="126" pos:column="15">data<pos:position pos:line="126" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="21">"error reading PKCS12 file '%s'"<pos:position pos:line="126" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="55">cert_file<pos:position pos:line="126" pos:column="64"/></name></expr></argument>)<pos:position pos:line="126" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="66"/></expr_stmt>
        <return pos:line="127" pos:column="9">return <expr><literal type="number" pos:line="127" pos:column="16">0<pos:position pos:line="127" pos:column="17"/></literal></expr>;<pos:position pos:line="127" pos:column="18"/></return>
      }<pos:position pos:line="128" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="130" pos:column="7">PKCS12_PBE_add<pos:position pos:line="130" pos:column="21"/></name><argument_list pos:line="130" pos:column="21">()<pos:position pos:line="130" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="24"/></expr_stmt>

      <if pos:line="132" pos:column="7">if<condition pos:line="132" pos:column="9">(<expr><operator pos:line="132" pos:column="10">!<pos:position pos:line="132" pos:column="11"/></operator><call><name pos:line="132" pos:column="11">PKCS12_parse<pos:position pos:line="132" pos:column="23"/></name><argument_list pos:line="132" pos:column="23">(<argument><expr><name pos:line="132" pos:column="24">p12<pos:position pos:line="132" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="29">data<pos:position pos:line="132" pos:column="33"/></name><operator pos:line="132" pos:column="33">-&gt;<pos:position pos:line="132" pos:column="38"/></operator><name pos:line="132" pos:column="35">set<pos:position pos:line="132" pos:column="38"/></name><operator pos:line="132" pos:column="38">.<pos:position pos:line="132" pos:column="39"/></operator><name pos:line="132" pos:column="39">str<pos:position pos:line="132" pos:column="42"/></name><index pos:line="132" pos:column="42">[<expr><name pos:line="132" pos:column="43">STRING_KEY_PASSWD<pos:position pos:line="132" pos:column="60"/></name></expr>]<pos:position pos:line="132" pos:column="61"/></index></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="63">&amp;<pos:position pos:line="132" pos:column="68"/></operator><name pos:line="132" pos:column="64">pri<pos:position pos:line="132" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="69">&amp;<pos:position pos:line="132" pos:column="74"/></operator><name pos:line="132" pos:column="70">x509<pos:position pos:line="132" pos:column="74"/></name></expr></argument>,
                       <argument><expr><operator pos:line="133" pos:column="24">&amp;<pos:position pos:line="133" pos:column="29"/></operator><name pos:line="133" pos:column="25">ca<pos:position pos:line="133" pos:column="27"/></name></expr></argument>)<pos:position pos:line="133" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="29"/></condition><then pos:line="133" pos:column="29"> <block pos:line="133" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="134" pos:column="9">failf<pos:position pos:line="134" pos:column="14"/></name><argument_list pos:line="134" pos:column="14">(<argument><expr><name pos:line="134" pos:column="15">data<pos:position pos:line="134" pos:column="19"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="135" pos:column="15">"could not parse PKCS12 file, check password, "<pos:position pos:line="135" pos:column="62"/></literal> <name pos:line="135" pos:column="63">OSSL_PACKAGE<pos:position pos:line="135" pos:column="75"/></name>
              <literal type="string" pos:line="136" pos:column="15">" error %s"<pos:position pos:line="136" pos:column="26"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="137" pos:column="15">ERR_error_string<pos:position pos:line="137" pos:column="31"/></name><argument_list pos:line="137" pos:column="31">(<argument><expr><call><name pos:line="137" pos:column="32">ERR_get_error<pos:position pos:line="137" pos:column="45"/></name><argument_list pos:line="137" pos:column="45">()<pos:position pos:line="137" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="137" pos:column="49">NULL<pos:position pos:line="137" pos:column="53"/></name></expr></argument>)<pos:position pos:line="137" pos:column="54"/></argument_list></call></expr></argument> )<pos:position pos:line="137" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">PKCS12_free<pos:position pos:line="138" pos:column="20"/></name><argument_list pos:line="138" pos:column="20">(<argument><expr><name pos:line="138" pos:column="21">p12<pos:position pos:line="138" pos:column="24"/></name></expr></argument>)<pos:position pos:line="138" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="26"/></expr_stmt>
        <return pos:line="139" pos:column="9">return <expr><literal type="number" pos:line="139" pos:column="16">0<pos:position pos:line="139" pos:column="17"/></literal></expr>;<pos:position pos:line="139" pos:column="18"/></return>
      }<pos:position pos:line="140" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="142" pos:column="7">PKCS12_free<pos:position pos:line="142" pos:column="18"/></name><argument_list pos:line="142" pos:column="18">(<argument><expr><name pos:line="142" pos:column="19">p12<pos:position pos:line="142" pos:column="22"/></name></expr></argument>)<pos:position pos:line="142" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="24"/></expr_stmt>

      <if pos:line="144" pos:column="7">if<condition pos:line="144" pos:column="9">(<expr><call><name pos:line="144" pos:column="10">SSL_CTX_use_certificate<pos:position pos:line="144" pos:column="33"/></name><argument_list pos:line="144" pos:column="33">(<argument><expr><name pos:line="144" pos:column="34">ctx<pos:position pos:line="144" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="39">x509<pos:position pos:line="144" pos:column="43"/></name></expr></argument>)<pos:position pos:line="144" pos:column="44"/></argument_list></call> <operator pos:line="144" pos:column="45">!=<pos:position pos:line="144" pos:column="47"/></operator> <literal type="number" pos:line="144" pos:column="48">1<pos:position pos:line="144" pos:column="49"/></literal></expr>)<pos:position pos:line="144" pos:column="50"/></condition><then pos:line="144" pos:column="50"> <block pos:line="144" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">failf<pos:position pos:line="145" pos:column="14"/></name><argument_list pos:line="145" pos:column="14">(<argument><expr><name pos:line="145" pos:column="15">data<pos:position pos:line="145" pos:column="19"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="146" pos:column="15">"could not load PKCS12 client certificate, "<pos:position pos:line="146" pos:column="59"/></literal> <name pos:line="146" pos:column="60">OSSL_PACKAGE<pos:position pos:line="146" pos:column="72"/></name>
              <literal type="string" pos:line="147" pos:column="15">" error %s"<pos:position pos:line="147" pos:column="26"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="148" pos:column="15">ERR_error_string<pos:position pos:line="148" pos:column="31"/></name><argument_list pos:line="148" pos:column="31">(<argument><expr><call><name pos:line="148" pos:column="32">ERR_get_error<pos:position pos:line="148" pos:column="45"/></name><argument_list pos:line="148" pos:column="45">()<pos:position pos:line="148" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="148" pos:column="49">NULL<pos:position pos:line="148" pos:column="53"/></name></expr></argument>)<pos:position pos:line="148" pos:column="54"/></argument_list></call></expr></argument> )<pos:position pos:line="148" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="57"/></expr_stmt>
        <goto pos:line="149" pos:column="9">goto <name pos:line="149" pos:column="14">fail<pos:position pos:line="149" pos:column="18"/></name>;<pos:position pos:line="149" pos:column="19"/></goto>
      }<pos:position pos:line="150" pos:column="8"/></block></then></if>

      <if pos:line="152" pos:column="7">if<condition pos:line="152" pos:column="9">(<expr><call><name pos:line="152" pos:column="10">SSL_CTX_use_PrivateKey<pos:position pos:line="152" pos:column="32"/></name><argument_list pos:line="152" pos:column="32">(<argument><expr><name pos:line="152" pos:column="33">ctx<pos:position pos:line="152" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="38">pri<pos:position pos:line="152" pos:column="41"/></name></expr></argument>)<pos:position pos:line="152" pos:column="42"/></argument_list></call> <operator pos:line="152" pos:column="43">!=<pos:position pos:line="152" pos:column="45"/></operator> <literal type="number" pos:line="152" pos:column="46">1<pos:position pos:line="152" pos:column="47"/></literal></expr>)<pos:position pos:line="152" pos:column="48"/></condition><then pos:line="152" pos:column="48"> <block pos:line="152" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="153" pos:column="9">failf<pos:position pos:line="153" pos:column="14"/></name><argument_list pos:line="153" pos:column="14">(<argument><expr><name pos:line="153" pos:column="15">data<pos:position pos:line="153" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="153" pos:column="21">"unable to use private key from PKCS12 file '%s'"<pos:position pos:line="153" pos:column="70"/></literal></expr></argument>,
              <argument><expr><name pos:line="154" pos:column="15">cert_file<pos:position pos:line="154" pos:column="24"/></name></expr></argument>)<pos:position pos:line="154" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="26"/></expr_stmt>
        <goto pos:line="155" pos:column="9">goto <name pos:line="155" pos:column="14">fail<pos:position pos:line="155" pos:column="18"/></name>;<pos:position pos:line="155" pos:column="19"/></goto>
      }<pos:position pos:line="156" pos:column="8"/></block></then></if>

      <if pos:line="158" pos:column="7">if<condition pos:line="158" pos:column="9">(<expr><operator pos:line="158" pos:column="10">!<pos:position pos:line="158" pos:column="11"/></operator><call><name pos:line="158" pos:column="11">SSL_CTX_check_private_key<pos:position pos:line="158" pos:column="36"/></name> <argument_list pos:line="158" pos:column="37">(<argument><expr><name pos:line="158" pos:column="38">ctx<pos:position pos:line="158" pos:column="41"/></name></expr></argument>)<pos:position pos:line="158" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="158" pos:column="43"/></condition><then pos:line="158" pos:column="43"> <block pos:line="158" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="159" pos:column="9">failf<pos:position pos:line="159" pos:column="14"/></name><argument_list pos:line="159" pos:column="14">(<argument><expr><name pos:line="159" pos:column="15">data<pos:position pos:line="159" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="21">"private key from PKCS12 file '%s' "<pos:position pos:line="159" pos:column="57"/></literal>
              <literal type="string" pos:line="160" pos:column="15">"does not match certificate in same file"<pos:position pos:line="160" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="160" pos:column="58">cert_file<pos:position pos:line="160" pos:column="67"/></name></expr></argument>)<pos:position pos:line="160" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="69"/></expr_stmt>
        <goto pos:line="161" pos:column="9">goto <name pos:line="161" pos:column="14">fail<pos:position pos:line="161" pos:column="18"/></name>;<pos:position pos:line="161" pos:column="19"/></goto>
      }<pos:position pos:line="162" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="163" pos:column="7">/* Set Certificate Verification chain */</comment>
      <if pos:line="164" pos:column="7">if<condition pos:line="164" pos:column="9">(<expr><name pos:line="164" pos:column="10">ca<pos:position pos:line="164" pos:column="12"/></name></expr>)<pos:position pos:line="164" pos:column="13"/></condition><then pos:line="164" pos:column="13"> <block pos:line="164" pos:column="14">{
        <while pos:line="165" pos:column="9">while<condition pos:line="165" pos:column="14">(<expr><call><name pos:line="165" pos:column="15">sk_X509_num<pos:position pos:line="165" pos:column="26"/></name><argument_list pos:line="165" pos:column="26">(<argument><expr><name pos:line="165" pos:column="27">ca<pos:position pos:line="165" pos:column="29"/></name></expr></argument>)<pos:position pos:line="165" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="165" pos:column="31"/></condition> <block pos:line="165" pos:column="32">{
          <comment type="block" pos:line="166" pos:column="11">/*
           * Note that sk_X509_pop() is used below to make sure the cert is
           * removed from the stack properly before getting passed to
           * SSL_CTX_add_extra_chain_cert(). Previously we used
           * sk_X509_value() instead, but then we'd clean it in the subsequent
           * sk_X509_pop_free() call.
           */</comment>
          <decl_stmt><decl><type><name pos:line="173" pos:column="11">X509<pos:position pos:line="173" pos:column="15"/></name> <modifier pos:line="173" pos:column="16">*<pos:position pos:line="173" pos:column="17"/></modifier></type><name pos:line="173" pos:column="17">x<pos:position pos:line="173" pos:column="18"/></name> <init pos:line="173" pos:column="19">= <expr><call><name pos:line="173" pos:column="21">sk_X509_pop<pos:position pos:line="173" pos:column="32"/></name><argument_list pos:line="173" pos:column="32">(<argument><expr><name pos:line="173" pos:column="33">ca<pos:position pos:line="173" pos:column="35"/></name></expr></argument>)<pos:position pos:line="173" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="173" pos:column="37"/></decl_stmt>
          <if pos:line="174" pos:column="11">if<condition pos:line="174" pos:column="13">(<expr><operator pos:line="174" pos:column="14">!<pos:position pos:line="174" pos:column="15"/></operator><call><name pos:line="174" pos:column="15">SSL_CTX_add_extra_chain_cert<pos:position pos:line="174" pos:column="43"/></name><argument_list pos:line="174" pos:column="43">(<argument><expr><name pos:line="174" pos:column="44">ctx<pos:position pos:line="174" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="49">x<pos:position pos:line="174" pos:column="50"/></name></expr></argument>)<pos:position pos:line="174" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="174" pos:column="52"/></condition><then pos:line="174" pos:column="52"> <block pos:line="174" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="175" pos:column="13">X509_free<pos:position pos:line="175" pos:column="22"/></name><argument_list pos:line="175" pos:column="22">(<argument><expr><name pos:line="175" pos:column="23">x<pos:position pos:line="175" pos:column="24"/></name></expr></argument>)<pos:position pos:line="175" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="176" pos:column="13">failf<pos:position pos:line="176" pos:column="18"/></name><argument_list pos:line="176" pos:column="18">(<argument><expr><name pos:line="176" pos:column="19">data<pos:position pos:line="176" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="176" pos:column="25">"cannot add certificate to certificate chain"<pos:position pos:line="176" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="176" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="72"/></expr_stmt>
            <goto pos:line="177" pos:column="13">goto <name pos:line="177" pos:column="18">fail<pos:position pos:line="177" pos:column="22"/></name>;<pos:position pos:line="177" pos:column="23"/></goto>
          }<pos:position pos:line="178" pos:column="12"/></block></then></if>
          <comment type="block" pos:line="179" pos:column="11">/* SSL_CTX_add_client_CA() seems to work with either sk_* function,
           * presumably because it duplicates what we pass to it.
           */</comment>
          <if pos:line="182" pos:column="11">if<condition pos:line="182" pos:column="13">(<expr><operator pos:line="182" pos:column="14">!<pos:position pos:line="182" pos:column="15"/></operator><call><name pos:line="182" pos:column="15">SSL_CTX_add_client_CA<pos:position pos:line="182" pos:column="36"/></name><argument_list pos:line="182" pos:column="36">(<argument><expr><name pos:line="182" pos:column="37">ctx<pos:position pos:line="182" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="182" pos:column="42">x<pos:position pos:line="182" pos:column="43"/></name></expr></argument>)<pos:position pos:line="182" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="182" pos:column="45"/></condition><then pos:line="182" pos:column="45"> <block pos:line="182" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="183" pos:column="13">failf<pos:position pos:line="183" pos:column="18"/></name><argument_list pos:line="183" pos:column="18">(<argument><expr><name pos:line="183" pos:column="19">data<pos:position pos:line="183" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="183" pos:column="25">"cannot add certificate to client CA list"<pos:position pos:line="183" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="183" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="69"/></expr_stmt>
            <goto pos:line="184" pos:column="13">goto <name pos:line="184" pos:column="18">fail<pos:position pos:line="184" pos:column="22"/></name>;<pos:position pos:line="184" pos:column="23"/></goto>
          }<pos:position pos:line="185" pos:column="12"/></block></then></if>
        }<pos:position pos:line="186" pos:column="10"/></block></while>
      }<pos:position pos:line="187" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="189" pos:column="7">cert_done<pos:position pos:line="189" pos:column="16"/></name> <operator pos:line="189" pos:column="17">=<pos:position pos:line="189" pos:column="18"/></operator> <literal type="number" pos:line="189" pos:column="19">1<pos:position pos:line="189" pos:column="20"/></literal></expr>;<pos:position pos:line="189" pos:column="21"/></expr_stmt>
  <label><name pos:line="190" pos:column="3">fail<pos:position pos:line="190" pos:column="7"/></name>:<pos:position pos:line="190" pos:column="8"/></label>
      <expr_stmt><expr><call><name pos:line="191" pos:column="7">EVP_PKEY_free<pos:position pos:line="191" pos:column="20"/></name><argument_list pos:line="191" pos:column="20">(<argument><expr><name pos:line="191" pos:column="21">pri<pos:position pos:line="191" pos:column="24"/></name></expr></argument>)<pos:position pos:line="191" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="192" pos:column="7">X509_free<pos:position pos:line="192" pos:column="16"/></name><argument_list pos:line="192" pos:column="16">(<argument><expr><name pos:line="192" pos:column="17">x509<pos:position pos:line="192" pos:column="21"/></name></expr></argument>)<pos:position pos:line="192" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="193" pos:column="7">sk_X509_pop_free<pos:position pos:line="193" pos:column="23"/></name><argument_list pos:line="193" pos:column="23">(<argument><expr><name pos:line="193" pos:column="24">ca<pos:position pos:line="193" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="28">X509_free<pos:position pos:line="193" pos:column="37"/></name></expr></argument>)<pos:position pos:line="193" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="39"/></expr_stmt>

      <if pos:line="195" pos:column="7">if<condition pos:line="195" pos:column="9">(<expr><operator pos:line="195" pos:column="10">!<pos:position pos:line="195" pos:column="11"/></operator><name pos:line="195" pos:column="11">cert_done<pos:position pos:line="195" pos:column="20"/></name></expr>)<pos:position pos:line="195" pos:column="21"/></condition><then pos:line="195" pos:column="21">
        <block type="pseudo"><return pos:line="196" pos:column="9">return <expr><literal type="number" pos:line="196" pos:column="16">0<pos:position pos:line="196" pos:column="17"/></literal></expr>;<pos:position pos:line="196" pos:column="18"/></return></block></then></if> <comment type="block" pos:line="196" pos:column="19">/* failure! */</comment>
      <break pos:line="197" pos:column="7">break;<pos:position pos:line="197" pos:column="13"/></break>
<cpp:else pos:line="198" pos:column="1">#<cpp:directive pos:line="198" pos:column="2">else<pos:position pos:line="198" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><call><name pos:line="199" pos:column="7">failf<pos:position pos:line="199" pos:column="12"/></name><argument_list pos:line="199" pos:column="12">(<argument><expr><name pos:line="199" pos:column="13">data<pos:position pos:line="199" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="199" pos:column="19">"file type P12 for certificate not supported"<pos:position pos:line="199" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="199" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="66"/></expr_stmt>
      <return pos:line="200" pos:column="7">return <expr><literal type="number" pos:line="200" pos:column="14">0<pos:position pos:line="200" pos:column="15"/></literal></expr>;<pos:position pos:line="200" pos:column="16"/></return>
<cpp:endif pos:line="201" pos:column="1">#<cpp:directive pos:line="201" pos:column="2">endif<pos:position pos:line="201" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="202" pos:column="6"/></block>
    <default pos:line="203" pos:column="5">default:<pos:position pos:line="203" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="204" pos:column="7">failf<pos:position pos:line="204" pos:column="12"/></name><argument_list pos:line="204" pos:column="12">(<argument><expr><name pos:line="204" pos:column="13">data<pos:position pos:line="204" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="204" pos:column="19">"not supported file type '%s' for certificate"<pos:position pos:line="204" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="67">cert_type<pos:position pos:line="204" pos:column="76"/></name></expr></argument>)<pos:position pos:line="204" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="78"/></expr_stmt>
      <return pos:line="205" pos:column="7">return <expr><literal type="number" pos:line="205" pos:column="14">0<pos:position pos:line="205" pos:column="15"/></literal></expr>;<pos:position pos:line="205" pos:column="16"/></return>
    }<pos:position pos:line="206" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="208" pos:column="5">file_type<pos:position pos:line="208" pos:column="14"/></name> <operator pos:line="208" pos:column="15">=<pos:position pos:line="208" pos:column="16"/></operator> <call><name pos:line="208" pos:column="17">do_file_type<pos:position pos:line="208" pos:column="29"/></name><argument_list pos:line="208" pos:column="29">(<argument><expr><name pos:line="208" pos:column="30">key_type<pos:position pos:line="208" pos:column="38"/></name></expr></argument>)<pos:position pos:line="208" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="40"/></expr_stmt>

    <switch pos:line="210" pos:column="5">switch<condition pos:line="210" pos:column="11">(<expr><name pos:line="210" pos:column="12">file_type<pos:position pos:line="210" pos:column="21"/></name></expr>)<pos:position pos:line="210" pos:column="22"/></condition> <block pos:line="210" pos:column="23">{
    <case pos:line="211" pos:column="5">case <expr><name pos:line="211" pos:column="10">SSL_FILETYPE_PEM<pos:position pos:line="211" pos:column="26"/></name></expr>:<pos:position pos:line="211" pos:column="27"/></case>
      <if pos:line="212" pos:column="7">if<condition pos:line="212" pos:column="9">(<expr><name pos:line="212" pos:column="10">cert_done<pos:position pos:line="212" pos:column="19"/></name></expr>)<pos:position pos:line="212" pos:column="20"/></condition><then pos:line="212" pos:column="20">
        <block type="pseudo"><break pos:line="213" pos:column="9">break;<pos:position pos:line="213" pos:column="15"/></break></block></then></if>
      <if pos:line="214" pos:column="7">if<condition pos:line="214" pos:column="9">(<expr><operator pos:line="214" pos:column="10">!<pos:position pos:line="214" pos:column="11"/></operator><name pos:line="214" pos:column="11">key_file<pos:position pos:line="214" pos:column="19"/></name></expr>)<pos:position pos:line="214" pos:column="20"/></condition><then pos:line="214" pos:column="20">
        <comment type="block" pos:line="215" pos:column="9">/* cert &amp; key can only be in PEM case in the same file */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="216" pos:column="9">key_file<pos:position pos:line="216" pos:column="17"/></name><operator pos:line="216" pos:column="17">=<pos:position pos:line="216" pos:column="18"/></operator><name pos:line="216" pos:column="18">cert_file<pos:position pos:line="216" pos:column="27"/></name></expr>;<pos:position pos:line="216" pos:column="28"/></expr_stmt></block></then></if>
    <case pos:line="217" pos:column="5">case <expr><name pos:line="217" pos:column="10">SSL_FILETYPE_ASN1<pos:position pos:line="217" pos:column="27"/></name></expr>:<pos:position pos:line="217" pos:column="28"/></case>
      <if pos:line="218" pos:column="7">if<condition pos:line="218" pos:column="9">(<expr><call><name pos:line="218" pos:column="10">SSL_CTX_use_PrivateKey_file<pos:position pos:line="218" pos:column="37"/></name><argument_list pos:line="218" pos:column="37">(<argument><expr><name pos:line="218" pos:column="38">ctx<pos:position pos:line="218" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="43">key_file<pos:position pos:line="218" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="53">file_type<pos:position pos:line="218" pos:column="62"/></name></expr></argument>)<pos:position pos:line="218" pos:column="63"/></argument_list></call> <operator pos:line="218" pos:column="64">!=<pos:position pos:line="218" pos:column="66"/></operator> <literal type="number" pos:line="218" pos:column="67">1<pos:position pos:line="218" pos:column="68"/></literal></expr>)<pos:position pos:line="218" pos:column="69"/></condition><then pos:line="218" pos:column="69"> <block pos:line="218" pos:column="70">{
        <expr_stmt><expr><call><name pos:line="219" pos:column="9">failf<pos:position pos:line="219" pos:column="14"/></name><argument_list pos:line="219" pos:column="14">(<argument><expr><name pos:line="219" pos:column="15">data<pos:position pos:line="219" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="21">"unable to set private key file: '%s' type %s"<pos:position pos:line="219" pos:column="67"/></literal></expr></argument>,
              <argument><expr><name pos:line="220" pos:column="15">key_file<pos:position pos:line="220" pos:column="23"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="220" pos:column="25">key_type<pos:position pos:line="220" pos:column="33"/></name></expr>?<pos:position pos:line="220" pos:column="34"/></condition><then><expr><name pos:line="220" pos:column="34">key_type<pos:position pos:line="220" pos:column="42"/></name></expr></then><else pos:line="220" pos:column="42">:<expr><literal type="string" pos:line="220" pos:column="43">"PEM"<pos:position pos:line="220" pos:column="48"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="220" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="50"/></expr_stmt>
        <return pos:line="221" pos:column="9">return <expr><literal type="number" pos:line="221" pos:column="16">0<pos:position pos:line="221" pos:column="17"/></literal></expr>;<pos:position pos:line="221" pos:column="18"/></return>
      }<pos:position pos:line="222" pos:column="8"/></block></then></if>
      <break pos:line="223" pos:column="7">break;<pos:position pos:line="223" pos:column="13"/></break>
    <case pos:line="224" pos:column="5">case <expr><name pos:line="224" pos:column="10">SSL_FILETYPE_ENGINE<pos:position pos:line="224" pos:column="29"/></name></expr>:<pos:position pos:line="224" pos:column="30"/></case>
<cpp:ifdef pos:line="225" pos:column="1">#<cpp:directive pos:line="225" pos:column="2">ifdef<pos:position pos:line="225" pos:column="7"/></cpp:directive> <name pos:line="225" pos:column="8">HAVE_OPENSSL_ENGINE_H<pos:position pos:line="225" pos:column="29"/></name></cpp:ifdef>
      <block pos:line="226" pos:column="7">{                         <comment type="block" pos:line="226" pos:column="33">/* XXXX still needs some work */</comment>
        <decl_stmt><decl><type><name pos:line="227" pos:column="9">EVP_PKEY<pos:position pos:line="227" pos:column="17"/></name> <modifier pos:line="227" pos:column="18">*<pos:position pos:line="227" pos:column="19"/></modifier></type><name pos:line="227" pos:column="19">priv_key<pos:position pos:line="227" pos:column="27"/></name> <init pos:line="227" pos:column="28">= <expr><name pos:line="227" pos:column="30">NULL<pos:position pos:line="227" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="227" pos:column="35"/></decl_stmt>
        <if pos:line="228" pos:column="9">if<condition pos:line="228" pos:column="11">(<expr><name><name pos:line="228" pos:column="12">data<pos:position pos:line="228" pos:column="16"/></name><operator pos:line="228" pos:column="16">-&gt;<pos:position pos:line="228" pos:column="21"/></operator><name pos:line="228" pos:column="18">state<pos:position pos:line="228" pos:column="23"/></name><operator pos:line="228" pos:column="23">.<pos:position pos:line="228" pos:column="24"/></operator><name pos:line="228" pos:column="24">engine<pos:position pos:line="228" pos:column="30"/></name></name></expr>)<pos:position pos:line="228" pos:column="31"/></condition><then pos:line="228" pos:column="31"> <block pos:line="228" pos:column="32">{
          <decl_stmt><decl><type><name pos:line="229" pos:column="11">UI_METHOD<pos:position pos:line="229" pos:column="20"/></name> <modifier pos:line="229" pos:column="21">*<pos:position pos:line="229" pos:column="22"/></modifier></type><name pos:line="229" pos:column="22">ui_method<pos:position pos:line="229" pos:column="31"/></name> <init pos:line="229" pos:column="32">=
            <expr><call><name pos:line="230" pos:column="13">UI_create_method<pos:position pos:line="230" pos:column="29"/></name><argument_list pos:line="230" pos:column="29">(<argument><expr><operator pos:line="230" pos:column="30">(<pos:position pos:line="230" pos:column="31"/></operator><name pos:line="230" pos:column="31">char<pos:position pos:line="230" pos:column="35"/></name> <operator pos:line="230" pos:column="36">*<pos:position pos:line="230" pos:column="37"/></operator><operator pos:line="230" pos:column="37">)<pos:position pos:line="230" pos:column="38"/></operator><literal type="string" pos:line="230" pos:column="38">"cURL user interface"<pos:position pos:line="230" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="230" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="230" pos:column="61"/></decl_stmt>
          <if pos:line="231" pos:column="11">if<condition pos:line="231" pos:column="13">(<expr><operator pos:line="231" pos:column="14">!<pos:position pos:line="231" pos:column="15"/></operator><name pos:line="231" pos:column="15">ui_method<pos:position pos:line="231" pos:column="24"/></name></expr>)<pos:position pos:line="231" pos:column="25"/></condition><then pos:line="231" pos:column="25"> <block pos:line="231" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="232" pos:column="13">failf<pos:position pos:line="232" pos:column="18"/></name><argument_list pos:line="232" pos:column="18">(<argument><expr><name pos:line="232" pos:column="19">data<pos:position pos:line="232" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="232" pos:column="25">"unable do create "<pos:position pos:line="232" pos:column="44"/></literal> <name pos:line="232" pos:column="45">OSSL_PACKAGE<pos:position pos:line="232" pos:column="57"/></name>
                  <literal type="string" pos:line="233" pos:column="19">" user-interface method"<pos:position pos:line="233" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="233" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="45"/></expr_stmt>
            <return pos:line="234" pos:column="13">return <expr><literal type="number" pos:line="234" pos:column="20">0<pos:position pos:line="234" pos:column="21"/></literal></expr>;<pos:position pos:line="234" pos:column="22"/></return>
          }<pos:position pos:line="235" pos:column="12"/></block></then></if>
          <expr_stmt><expr><call><name pos:line="236" pos:column="11">UI_method_set_opener<pos:position pos:line="236" pos:column="31"/></name><argument_list pos:line="236" pos:column="31">(<argument><expr><name pos:line="236" pos:column="32">ui_method<pos:position pos:line="236" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="236" pos:column="43">UI_method_get_opener<pos:position pos:line="236" pos:column="63"/></name><argument_list pos:line="236" pos:column="63">(<argument><expr><call><name pos:line="236" pos:column="64">UI_OpenSSL<pos:position pos:line="236" pos:column="74"/></name><argument_list pos:line="236" pos:column="74">()<pos:position pos:line="236" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="236" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="236" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="79"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="237" pos:column="11">UI_method_set_closer<pos:position pos:line="237" pos:column="31"/></name><argument_list pos:line="237" pos:column="31">(<argument><expr><name pos:line="237" pos:column="32">ui_method<pos:position pos:line="237" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="237" pos:column="43">UI_method_get_closer<pos:position pos:line="237" pos:column="63"/></name><argument_list pos:line="237" pos:column="63">(<argument><expr><call><name pos:line="237" pos:column="64">UI_OpenSSL<pos:position pos:line="237" pos:column="74"/></name><argument_list pos:line="237" pos:column="74">()<pos:position pos:line="237" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="237" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="237" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="79"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="238" pos:column="11">UI_method_set_reader<pos:position pos:line="238" pos:column="31"/></name><argument_list pos:line="238" pos:column="31">(<argument><expr><name pos:line="238" pos:column="32">ui_method<pos:position pos:line="238" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="43">ssl_ui_reader<pos:position pos:line="238" pos:column="56"/></name></expr></argument>)<pos:position pos:line="238" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="58"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="239" pos:column="11">UI_method_set_writer<pos:position pos:line="239" pos:column="31"/></name><argument_list pos:line="239" pos:column="31">(<argument><expr><name pos:line="239" pos:column="32">ui_method<pos:position pos:line="239" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="239" pos:column="43">ssl_ui_writer<pos:position pos:line="239" pos:column="56"/></name></expr></argument>)<pos:position pos:line="239" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="58"/></expr_stmt>
          <comment type="block" pos:line="240" pos:column="11">/* the typecast below was added to please mingw32 */</comment>
          <expr_stmt><expr><name pos:line="241" pos:column="11">priv_key<pos:position pos:line="241" pos:column="19"/></name> <operator pos:line="241" pos:column="20">=<pos:position pos:line="241" pos:column="21"/></operator> <operator pos:line="241" pos:column="22">(<pos:position pos:line="241" pos:column="23"/></operator><name pos:line="241" pos:column="23">EVP_PKEY<pos:position pos:line="241" pos:column="31"/></name> <operator pos:line="241" pos:column="32">*<pos:position pos:line="241" pos:column="33"/></operator><operator pos:line="241" pos:column="33">)<pos:position pos:line="241" pos:column="34"/></operator>
            <call><name pos:line="242" pos:column="13">ENGINE_load_private_key<pos:position pos:line="242" pos:column="36"/></name><argument_list pos:line="242" pos:column="36">(<argument><expr><name><name pos:line="242" pos:column="37">data<pos:position pos:line="242" pos:column="41"/></name><operator pos:line="242" pos:column="41">-&gt;<pos:position pos:line="242" pos:column="46"/></operator><name pos:line="242" pos:column="43">state<pos:position pos:line="242" pos:column="48"/></name><operator pos:line="242" pos:column="48">.<pos:position pos:line="242" pos:column="49"/></operator><name pos:line="242" pos:column="49">engine<pos:position pos:line="242" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="242" pos:column="57">key_file<pos:position pos:line="242" pos:column="65"/></name></expr></argument>,
                                    <argument><expr><name pos:line="243" pos:column="37">ui_method<pos:position pos:line="243" pos:column="46"/></name></expr></argument>,
                                    <argument><expr><name><name pos:line="244" pos:column="37">data<pos:position pos:line="244" pos:column="41"/></name><operator pos:line="244" pos:column="41">-&gt;<pos:position pos:line="244" pos:column="46"/></operator><name pos:line="244" pos:column="43">set<pos:position pos:line="244" pos:column="46"/></name><operator pos:line="244" pos:column="46">.<pos:position pos:line="244" pos:column="47"/></operator><name pos:line="244" pos:column="47">str<pos:position pos:line="244" pos:column="50"/></name><index pos:line="244" pos:column="50">[<expr><name pos:line="244" pos:column="51">STRING_KEY_PASSWD<pos:position pos:line="244" pos:column="68"/></name></expr>]<pos:position pos:line="244" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="244" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="71"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="245" pos:column="11">UI_destroy_method<pos:position pos:line="245" pos:column="28"/></name><argument_list pos:line="245" pos:column="28">(<argument><expr><name pos:line="245" pos:column="29">ui_method<pos:position pos:line="245" pos:column="38"/></name></expr></argument>)<pos:position pos:line="245" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="40"/></expr_stmt>
          <if pos:line="246" pos:column="11">if<condition pos:line="246" pos:column="13">(<expr><operator pos:line="246" pos:column="14">!<pos:position pos:line="246" pos:column="15"/></operator><name pos:line="246" pos:column="15">priv_key<pos:position pos:line="246" pos:column="23"/></name></expr>)<pos:position pos:line="246" pos:column="24"/></condition><then pos:line="246" pos:column="24"> <block pos:line="246" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="247" pos:column="13">failf<pos:position pos:line="247" pos:column="18"/></name><argument_list pos:line="247" pos:column="18">(<argument><expr><name pos:line="247" pos:column="19">data<pos:position pos:line="247" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="247" pos:column="25">"failed to load private key from crypto engine"<pos:position pos:line="247" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="247" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="74"/></expr_stmt>
            <return pos:line="248" pos:column="13">return <expr><literal type="number" pos:line="248" pos:column="20">0<pos:position pos:line="248" pos:column="21"/></literal></expr>;<pos:position pos:line="248" pos:column="22"/></return>
          }<pos:position pos:line="249" pos:column="12"/></block></then></if>
          <if pos:line="250" pos:column="11">if<condition pos:line="250" pos:column="13">(<expr><call><name pos:line="250" pos:column="14">SSL_CTX_use_PrivateKey<pos:position pos:line="250" pos:column="36"/></name><argument_list pos:line="250" pos:column="36">(<argument><expr><name pos:line="250" pos:column="37">ctx<pos:position pos:line="250" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="42">priv_key<pos:position pos:line="250" pos:column="50"/></name></expr></argument>)<pos:position pos:line="250" pos:column="51"/></argument_list></call> <operator pos:line="250" pos:column="52">!=<pos:position pos:line="250" pos:column="54"/></operator> <literal type="number" pos:line="250" pos:column="55">1<pos:position pos:line="250" pos:column="56"/></literal></expr>)<pos:position pos:line="250" pos:column="57"/></condition><then pos:line="250" pos:column="57"> <block pos:line="250" pos:column="58">{
            <expr_stmt><expr><call><name pos:line="251" pos:column="13">failf<pos:position pos:line="251" pos:column="18"/></name><argument_list pos:line="251" pos:column="18">(<argument><expr><name pos:line="251" pos:column="19">data<pos:position pos:line="251" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="251" pos:column="25">"unable to set private key"<pos:position pos:line="251" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="251" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="252" pos:column="13">EVP_PKEY_free<pos:position pos:line="252" pos:column="26"/></name><argument_list pos:line="252" pos:column="26">(<argument><expr><name pos:line="252" pos:column="27">priv_key<pos:position pos:line="252" pos:column="35"/></name></expr></argument>)<pos:position pos:line="252" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="37"/></expr_stmt>
            <return pos:line="253" pos:column="13">return <expr><literal type="number" pos:line="253" pos:column="20">0<pos:position pos:line="253" pos:column="21"/></literal></expr>;<pos:position pos:line="253" pos:column="22"/></return>
          }<pos:position pos:line="254" pos:column="12"/></block></then></if>
          <expr_stmt><expr><call><name pos:line="255" pos:column="11">EVP_PKEY_free<pos:position pos:line="255" pos:column="24"/></name><argument_list pos:line="255" pos:column="24">(<argument><expr><name pos:line="255" pos:column="25">priv_key<pos:position pos:line="255" pos:column="33"/></name></expr></argument>)<pos:position pos:line="255" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="35"/></expr_stmt>  <comment type="block" pos:line="255" pos:column="37">/* we don't need the handle any more... */</comment>
        }<pos:position pos:line="256" pos:column="10"/></block></then>
        <else pos:line="257" pos:column="9">else <block pos:line="257" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="258" pos:column="11">failf<pos:position pos:line="258" pos:column="16"/></name><argument_list pos:line="258" pos:column="16">(<argument><expr><name pos:line="258" pos:column="17">data<pos:position pos:line="258" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="258" pos:column="23">"crypto engine not set, can't load private key"<pos:position pos:line="258" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="258" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="72"/></expr_stmt>
          <return pos:line="259" pos:column="11">return <expr><literal type="number" pos:line="259" pos:column="18">0<pos:position pos:line="259" pos:column="19"/></literal></expr>;<pos:position pos:line="259" pos:column="20"/></return>
        }<pos:position pos:line="260" pos:column="10"/></block></else></if>
      }<pos:position pos:line="261" pos:column="8"/></block>
      <break pos:line="262" pos:column="7">break;<pos:position pos:line="262" pos:column="13"/></break>
<cpp:else pos:line="263" pos:column="1">#<cpp:directive pos:line="263" pos:column="2">else<pos:position pos:line="263" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><call><name pos:line="264" pos:column="7">failf<pos:position pos:line="264" pos:column="12"/></name><argument_list pos:line="264" pos:column="12">(<argument><expr><name pos:line="264" pos:column="13">data<pos:position pos:line="264" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="264" pos:column="19">"file type ENG for private key not supported"<pos:position pos:line="264" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="264" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="66"/></expr_stmt>
      <return pos:line="265" pos:column="7">return <expr><literal type="number" pos:line="265" pos:column="14">0<pos:position pos:line="265" pos:column="15"/></literal></expr>;<pos:position pos:line="265" pos:column="16"/></return>
<cpp:endif pos:line="266" pos:column="1">#<cpp:directive pos:line="266" pos:column="2">endif<pos:position pos:line="266" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="267" pos:column="5">case <expr><name pos:line="267" pos:column="10">SSL_FILETYPE_PKCS12<pos:position pos:line="267" pos:column="29"/></name></expr>:<pos:position pos:line="267" pos:column="30"/></case>
      <if pos:line="268" pos:column="7">if<condition pos:line="268" pos:column="9">(<expr><operator pos:line="268" pos:column="10">!<pos:position pos:line="268" pos:column="11"/></operator><name pos:line="268" pos:column="11">cert_done<pos:position pos:line="268" pos:column="20"/></name></expr>)<pos:position pos:line="268" pos:column="21"/></condition><then pos:line="268" pos:column="21"> <block pos:line="268" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="269" pos:column="9">failf<pos:position pos:line="269" pos:column="14"/></name><argument_list pos:line="269" pos:column="14">(<argument><expr><name pos:line="269" pos:column="15">data<pos:position pos:line="269" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="269" pos:column="21">"file type P12 for private key not supported"<pos:position pos:line="269" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="269" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="68"/></expr_stmt>
        <return pos:line="270" pos:column="9">return <expr><literal type="number" pos:line="270" pos:column="16">0<pos:position pos:line="270" pos:column="17"/></literal></expr>;<pos:position pos:line="270" pos:column="18"/></return>
      }<pos:position pos:line="271" pos:column="8"/></block></then></if>
      <break pos:line="272" pos:column="7">break;<pos:position pos:line="272" pos:column="13"/></break>
    <default pos:line="273" pos:column="5">default:<pos:position pos:line="273" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="274" pos:column="7">failf<pos:position pos:line="274" pos:column="12"/></name><argument_list pos:line="274" pos:column="12">(<argument><expr><name pos:line="274" pos:column="13">data<pos:position pos:line="274" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="274" pos:column="19">"not supported file type for private key"<pos:position pos:line="274" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="274" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="274" pos:column="62"/></expr_stmt>
      <return pos:line="275" pos:column="7">return <expr><literal type="number" pos:line="275" pos:column="14">0<pos:position pos:line="275" pos:column="15"/></literal></expr>;<pos:position pos:line="275" pos:column="16"/></return>
    }<pos:position pos:line="276" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="278" pos:column="5">ssl<pos:position pos:line="278" pos:column="8"/></name><operator pos:line="278" pos:column="8">=<pos:position pos:line="278" pos:column="9"/></operator><call><name pos:line="278" pos:column="9">SSL_new<pos:position pos:line="278" pos:column="16"/></name><argument_list pos:line="278" pos:column="16">(<argument><expr><name pos:line="278" pos:column="17">ctx<pos:position pos:line="278" pos:column="20"/></name></expr></argument>)<pos:position pos:line="278" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="278" pos:column="22"/></expr_stmt>
    <if pos:line="279" pos:column="5">if<condition pos:line="279" pos:column="7">(<expr><operator pos:line="279" pos:column="8">!<pos:position pos:line="279" pos:column="9"/></operator><name pos:line="279" pos:column="9">ssl<pos:position pos:line="279" pos:column="12"/></name></expr>)<pos:position pos:line="279" pos:column="13"/></condition><then pos:line="279" pos:column="13"> <block pos:line="279" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="280" pos:column="7">failf<pos:position pos:line="280" pos:column="12"/></name><argument_list pos:line="280" pos:column="12">(<argument><expr><name pos:line="280" pos:column="13">data<pos:position pos:line="280" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="280" pos:column="19">"unable to create an SSL structure"<pos:position pos:line="280" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="280" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="56"/></expr_stmt>
      <return pos:line="281" pos:column="7">return <expr><literal type="number" pos:line="281" pos:column="14">0<pos:position pos:line="281" pos:column="15"/></literal></expr>;<pos:position pos:line="281" pos:column="16"/></return>
    }<pos:position pos:line="282" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="284" pos:column="5">x509<pos:position pos:line="284" pos:column="9"/></name><operator pos:line="284" pos:column="9">=<pos:position pos:line="284" pos:column="10"/></operator><call><name pos:line="284" pos:column="10">SSL_get_certificate<pos:position pos:line="284" pos:column="29"/></name><argument_list pos:line="284" pos:column="29">(<argument><expr><name pos:line="284" pos:column="30">ssl<pos:position pos:line="284" pos:column="33"/></name></expr></argument>)<pos:position pos:line="284" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="286" pos:column="5">/* This version was provided by Evan Jordan and is supposed to not
       leak memory as the previous version: */</comment>
    <if pos:line="288" pos:column="5">if<condition pos:line="288" pos:column="7">(<expr><name pos:line="288" pos:column="8">x509<pos:position pos:line="288" pos:column="12"/></name></expr>)<pos:position pos:line="288" pos:column="13"/></condition><then pos:line="288" pos:column="13"> <block pos:line="288" pos:column="14">{
      <decl_stmt><decl><type><name pos:line="289" pos:column="7">EVP_PKEY<pos:position pos:line="289" pos:column="15"/></name> <modifier pos:line="289" pos:column="16">*<pos:position pos:line="289" pos:column="17"/></modifier></type><name pos:line="289" pos:column="17">pktmp<pos:position pos:line="289" pos:column="22"/></name> <init pos:line="289" pos:column="23">= <expr><call><name pos:line="289" pos:column="25">X509_get_pubkey<pos:position pos:line="289" pos:column="40"/></name><argument_list pos:line="289" pos:column="40">(<argument><expr><name pos:line="289" pos:column="41">x509<pos:position pos:line="289" pos:column="45"/></name></expr></argument>)<pos:position pos:line="289" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="289" pos:column="47"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="290" pos:column="7">EVP_PKEY_copy_parameters<pos:position pos:line="290" pos:column="31"/></name><argument_list pos:line="290" pos:column="31">(<argument><expr><name pos:line="290" pos:column="32">pktmp<pos:position pos:line="290" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="290" pos:column="39">SSL_get_privatekey<pos:position pos:line="290" pos:column="57"/></name><argument_list pos:line="290" pos:column="57">(<argument><expr><name pos:line="290" pos:column="58">ssl<pos:position pos:line="290" pos:column="61"/></name></expr></argument>)<pos:position pos:line="290" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="290" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="291" pos:column="7">EVP_PKEY_free<pos:position pos:line="291" pos:column="20"/></name><argument_list pos:line="291" pos:column="20">(<argument><expr><name pos:line="291" pos:column="21">pktmp<pos:position pos:line="291" pos:column="26"/></name></expr></argument>)<pos:position pos:line="291" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="292" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="294" pos:column="5">SSL_free<pos:position pos:line="294" pos:column="13"/></name><argument_list pos:line="294" pos:column="13">(<argument><expr><name pos:line="294" pos:column="14">ssl<pos:position pos:line="294" pos:column="17"/></name></expr></argument>)<pos:position pos:line="294" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="296" pos:column="5">/* If we are using DSA, we can copy the parameters from
     * the private key */</comment>


    <comment type="block" pos:line="300" pos:column="5">/* Now we know that a key and cert have been set against
     * the SSL context */</comment>
    <if pos:line="302" pos:column="5">if<condition pos:line="302" pos:column="7">(<expr><operator pos:line="302" pos:column="8">!<pos:position pos:line="302" pos:column="9"/></operator><call><name pos:line="302" pos:column="9">SSL_CTX_check_private_key<pos:position pos:line="302" pos:column="34"/></name><argument_list pos:line="302" pos:column="34">(<argument><expr><name pos:line="302" pos:column="35">ctx<pos:position pos:line="302" pos:column="38"/></name></expr></argument>)<pos:position pos:line="302" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="302" pos:column="40"/></condition><then pos:line="302" pos:column="40"> <block pos:line="302" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="303" pos:column="7">failf<pos:position pos:line="303" pos:column="12"/></name><argument_list pos:line="303" pos:column="12">(<argument><expr><name pos:line="303" pos:column="13">data<pos:position pos:line="303" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="303" pos:column="19">"Private key does not match the certificate public key"<pos:position pos:line="303" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="303" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="303" pos:column="76"/></expr_stmt>
      <return pos:line="304" pos:column="7">return <expr><literal type="number" pos:line="304" pos:column="14">0<pos:position pos:line="304" pos:column="15"/></literal></expr>;<pos:position pos:line="304" pos:column="16"/></return>
    }<pos:position pos:line="305" pos:column="6"/></block></then></if>
  }<pos:position pos:line="306" pos:column="4"/></block></then></if>
  <return pos:line="307" pos:column="3">return <expr><literal type="number" pos:line="307" pos:column="10">1<pos:position pos:line="307" pos:column="11"/></literal></expr>;<pos:position pos:line="307" pos:column="12"/></return>
}<pos:position pos:line="308" pos:column="2"/></block></function></unit>
