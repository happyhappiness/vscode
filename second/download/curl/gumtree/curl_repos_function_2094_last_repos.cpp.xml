<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2094_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">readback_part<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">curl_mimepart<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">part<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">buffer<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">size_t<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">bufsize<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">cursize<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">sz<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">curl_slist<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">hdr<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="7" pos:column="29"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">convbuf<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name pos:line="8" pos:column="19">buffer<pos:position pos:line="8" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="11" pos:column="3">/* Readback from part. */</comment>

  <while pos:line="13" pos:column="3">while<condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">bufsize<pos:position pos:line="13" pos:column="16"/></name></expr>)<pos:position pos:line="13" pos:column="17"/></condition> <block pos:line="13" pos:column="18">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">sz<pos:position pos:line="14" pos:column="7"/></name> <operator pos:line="14" pos:column="8">=<pos:position pos:line="14" pos:column="9"/></operator> <literal type="number" pos:line="14" pos:column="10">0<pos:position pos:line="14" pos:column="11"/></literal></expr>;<pos:position pos:line="14" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">hdr<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <operator pos:line="15" pos:column="11">(<pos:position pos:line="15" pos:column="12"/></operator>struct <name pos:line="15" pos:column="19">curl_slist<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">*<pos:position pos:line="15" pos:column="31"/></operator><operator pos:line="15" pos:column="31">)<pos:position pos:line="15" pos:column="32"/></operator> <name><name pos:line="15" pos:column="33">part<pos:position pos:line="15" pos:column="37"/></name><operator pos:line="15" pos:column="37">-&gt;<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="39">state<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">.<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">ptr<pos:position pos:line="15" pos:column="48"/></name></name></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
    <switch pos:line="16" pos:column="5">switch<condition pos:line="16" pos:column="11">(<expr><name><name pos:line="16" pos:column="12">part<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">state<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">state<pos:position pos:line="16" pos:column="29"/></name></name></expr>)<pos:position pos:line="16" pos:column="30"/></condition> <block pos:line="16" pos:column="31">{
    <case pos:line="17" pos:column="5">case <expr><name pos:line="17" pos:column="10">MIMESTATE_BEGIN<pos:position pos:line="17" pos:column="25"/></name></expr>:<pos:position pos:line="17" pos:column="26"/></case>
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">mimesetstate<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><operator pos:line="18" pos:column="20">&amp;<pos:position pos:line="18" pos:column="25"/></operator><name><name pos:line="18" pos:column="21">part<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">-&gt;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="27">state<pos:position pos:line="18" pos:column="32"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="18" pos:column="34">part<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">-&gt;<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="40">flags<pos:position pos:line="18" pos:column="45"/></name></name> <operator pos:line="18" pos:column="46">&amp;<pos:position pos:line="18" pos:column="51"/></operator> <name pos:line="18" pos:column="48">MIME_BODY_ONLY<pos:position pos:line="18" pos:column="62"/></name></expr>?<pos:position pos:line="18" pos:column="63"/></condition><then pos:line="18" pos:column="63"> <expr><name pos:line="18" pos:column="64">MIMESTATE_BODY<pos:position pos:line="18" pos:column="78"/></name></expr></then><else pos:line="18" pos:column="78">:
                                 <expr><name pos:line="19" pos:column="34">MIMESTATE_CURLHEADERS<pos:position pos:line="19" pos:column="55"/></name></expr></else></ternary></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="57">part<pos:position pos:line="19" pos:column="61"/></name><operator pos:line="19" pos:column="61">-&gt;<pos:position pos:line="19" pos:column="66"/></operator><name pos:line="19" pos:column="63">curlheaders<pos:position pos:line="19" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="76"/></expr_stmt>
      <break pos:line="20" pos:column="7">break;<pos:position pos:line="20" pos:column="13"/></break>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">MIMESTATE_USERHEADERS<pos:position pos:line="21" pos:column="31"/></name></expr>:<pos:position pos:line="21" pos:column="32"/></case>
      <if pos:line="22" pos:column="7">if<condition pos:line="22" pos:column="9">(<expr><operator pos:line="22" pos:column="10">!<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">hdr<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15"> <block pos:line="22" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">mimesetstate<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><operator pos:line="23" pos:column="22">&amp;<pos:position pos:line="23" pos:column="27"/></operator><name><name pos:line="23" pos:column="23">part<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">state<pos:position pos:line="23" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="36">MIMESTATE_EOH<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">NULL<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>
        <break pos:line="24" pos:column="9">break;<pos:position pos:line="24" pos:column="15"/></break>
      }<pos:position pos:line="25" pos:column="8"/></block></then></if>
      <if pos:line="26" pos:column="7">if<condition pos:line="26" pos:column="9">(<expr><call><name pos:line="26" pos:column="10">match_header<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">hdr<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="28">"Content-Type"<pos:position pos:line="26" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="44">12<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="48"/></condition><then pos:line="26" pos:column="48"> <block pos:line="26" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">mimesetstate<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><operator pos:line="27" pos:column="22">&amp;<pos:position pos:line="27" pos:column="27"/></operator><name><name pos:line="27" pos:column="23">part<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">state<pos:position pos:line="27" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="36">MIMESTATE_USERHEADERS<pos:position pos:line="27" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="59">hdr<pos:position pos:line="27" pos:column="62"/></name><operator pos:line="27" pos:column="62">-&gt;<pos:position pos:line="27" pos:column="67"/></operator><name pos:line="27" pos:column="64">next<pos:position pos:line="27" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="70"/></expr_stmt>
        <break pos:line="28" pos:column="9">break;<pos:position pos:line="28" pos:column="15"/></break>
      }<pos:position pos:line="29" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="30" pos:column="7">/* FALLTHROUGH */</comment>
    <case pos:line="31" pos:column="5">case <expr><name pos:line="31" pos:column="10">MIMESTATE_CURLHEADERS<pos:position pos:line="31" pos:column="31"/></name></expr>:<pos:position pos:line="31" pos:column="32"/></case>
      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><operator pos:line="32" pos:column="10">!<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">hdr<pos:position pos:line="32" pos:column="14"/></name></expr>)<pos:position pos:line="32" pos:column="15"/></condition><then pos:line="32" pos:column="15">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="9">mimesetstate<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><operator pos:line="33" pos:column="22">&amp;<pos:position pos:line="33" pos:column="27"/></operator><name><name pos:line="33" pos:column="23">part<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">state<pos:position pos:line="33" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="36">MIMESTATE_USERHEADERS<pos:position pos:line="33" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="59">part<pos:position pos:line="33" pos:column="63"/></name><operator pos:line="33" pos:column="63">-&gt;<pos:position pos:line="33" pos:column="68"/></operator><name pos:line="33" pos:column="65">userheaders<pos:position pos:line="33" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="78"/></expr_stmt></block></then>
      <else pos:line="34" pos:column="7">else <block pos:line="34" pos:column="12">{
        <expr_stmt><expr><name pos:line="35" pos:column="9">sz<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name pos:line="35" pos:column="14">readback_bytes<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><operator pos:line="35" pos:column="29">&amp;<pos:position pos:line="35" pos:column="34"/></operator><name><name pos:line="35" pos:column="30">part<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">-&gt;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="36">state<pos:position pos:line="35" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">buffer<pos:position pos:line="35" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="51">bufsize<pos:position pos:line="35" pos:column="58"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="36" pos:column="29">hdr<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">-&gt;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="34">data<pos:position pos:line="36" pos:column="38"/></name></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="40">strlen<pos:position pos:line="36" pos:column="46"/></name><argument_list pos:line="36" pos:column="46">(<argument><expr><name><name pos:line="36" pos:column="47">hdr<pos:position pos:line="36" pos:column="50"/></name><operator pos:line="36" pos:column="50">-&gt;<pos:position pos:line="36" pos:column="55"/></operator><name pos:line="36" pos:column="52">data<pos:position pos:line="36" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="59">"\r\n"<pos:position pos:line="36" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="67"/></expr_stmt>
        <if pos:line="37" pos:column="9">if<condition pos:line="37" pos:column="11">(<expr><operator pos:line="37" pos:column="12">!<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">sz<pos:position pos:line="37" pos:column="15"/></name></expr>)<pos:position pos:line="37" pos:column="16"/></condition><then pos:line="37" pos:column="16">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="11">mimesetstate<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><operator pos:line="38" pos:column="24">&amp;<pos:position pos:line="38" pos:column="29"/></operator><name><name pos:line="38" pos:column="25">part<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">-&gt;<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="31">state<pos:position pos:line="38" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="38">part<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">-&gt;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="44">state<pos:position pos:line="38" pos:column="49"/></name><operator pos:line="38" pos:column="49">.<pos:position pos:line="38" pos:column="50"/></operator><name pos:line="38" pos:column="50">state<pos:position pos:line="38" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="57">hdr<pos:position pos:line="38" pos:column="60"/></name><operator pos:line="38" pos:column="60">-&gt;<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="62">next<pos:position pos:line="38" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="68"/></expr_stmt></block></then></if>
      }<pos:position pos:line="39" pos:column="8"/></block></else></if>
      <break pos:line="40" pos:column="7">break;<pos:position pos:line="40" pos:column="13"/></break>
    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">MIMESTATE_EOH<pos:position pos:line="41" pos:column="23"/></name></expr>:<pos:position pos:line="41" pos:column="24"/></case>
      <expr_stmt><expr><name pos:line="42" pos:column="7">sz<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <call><name pos:line="42" pos:column="12">readback_bytes<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><operator pos:line="42" pos:column="27">&amp;<pos:position pos:line="42" pos:column="32"/></operator><name><name pos:line="42" pos:column="28">part<pos:position pos:line="42" pos:column="32"/></name><operator pos:line="42" pos:column="32">-&gt;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="34">state<pos:position pos:line="42" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="41">buffer<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">bufsize<pos:position pos:line="42" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="58">"\r\n"<pos:position pos:line="42" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="66">2<pos:position pos:line="42" pos:column="67"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="69">""<pos:position pos:line="42" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="73"/></expr_stmt>
      <if pos:line="43" pos:column="7">if<condition pos:line="43" pos:column="9">(<expr><operator pos:line="43" pos:column="10">!<pos:position pos:line="43" pos:column="11"/></operator><name pos:line="43" pos:column="11">sz<pos:position pos:line="43" pos:column="13"/></name></expr>)<pos:position pos:line="43" pos:column="14"/></condition><then pos:line="43" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="9">mimesetstate<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><operator pos:line="44" pos:column="22">&amp;<pos:position pos:line="44" pos:column="27"/></operator><name><name pos:line="44" pos:column="23">part<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">state<pos:position pos:line="44" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="36">MIMESTATE_BODY<pos:position pos:line="44" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="52">NULL<pos:position pos:line="44" pos:column="56"/></name></expr></argument>)<pos:position pos:line="44" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="58"/></expr_stmt></block></then></if>
      <break pos:line="45" pos:column="7">break;<pos:position pos:line="45" pos:column="13"/></break>
    <case pos:line="46" pos:column="5">case <expr><name pos:line="46" pos:column="10">MIMESTATE_BODY<pos:position pos:line="46" pos:column="24"/></name></expr>:<pos:position pos:line="46" pos:column="25"/></case>
<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="47" pos:column="29"/></name></cpp:ifdef>
      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><name><name pos:line="48" pos:column="10">part<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">-&gt;<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="16">easy<pos:position pos:line="48" pos:column="20"/></name></name> <operator pos:line="48" pos:column="21">&amp;&amp;<pos:position pos:line="48" pos:column="31"/></operator> <name pos:line="48" pos:column="24">convbuf<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">&lt;<pos:position pos:line="48" pos:column="36"/></operator> <name pos:line="48" pos:column="34">buffer<pos:position pos:line="48" pos:column="40"/></name></expr>)<pos:position pos:line="48" pos:column="41"/></condition><then pos:line="48" pos:column="41"> <block pos:line="48" pos:column="42">{
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">CURLcode<pos:position pos:line="49" pos:column="17"/></name></type> <name pos:line="49" pos:column="18">result<pos:position pos:line="49" pos:column="24"/></name> <init pos:line="49" pos:column="25">= <expr><call><name pos:line="49" pos:column="27">Curl_convert_to_network<pos:position pos:line="49" pos:column="50"/></name><argument_list pos:line="49" pos:column="50">(<argument><expr><name><name pos:line="49" pos:column="51">part<pos:position pos:line="49" pos:column="55"/></name><operator pos:line="49" pos:column="55">-&gt;<pos:position pos:line="49" pos:column="60"/></operator><name pos:line="49" pos:column="57">easy<pos:position pos:line="49" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="63">convbuf<pos:position pos:line="49" pos:column="70"/></name></expr></argument>,
                                                  <argument><expr><name pos:line="50" pos:column="51">buffer<pos:position pos:line="50" pos:column="57"/></name> <operator pos:line="50" pos:column="58">-<pos:position pos:line="50" pos:column="59"/></operator> <name pos:line="50" pos:column="60">convbuf<pos:position pos:line="50" pos:column="67"/></name></expr></argument>)<pos:position pos:line="50" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="69"/></decl_stmt>
        <if pos:line="51" pos:column="9">if<condition pos:line="51" pos:column="11">(<expr><name pos:line="51" pos:column="12">result<pos:position pos:line="51" pos:column="18"/></name></expr>)<pos:position pos:line="51" pos:column="19"/></condition><then pos:line="51" pos:column="19">
          <block type="pseudo"><return pos:line="52" pos:column="11">return <expr><name pos:line="52" pos:column="18">READ_ERROR<pos:position pos:line="52" pos:column="28"/></name></expr>;<pos:position pos:line="52" pos:column="29"/></return></block></then></if>
        <expr_stmt><expr><name pos:line="53" pos:column="9">convbuf<pos:position pos:line="53" pos:column="16"/></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">buffer<pos:position pos:line="53" pos:column="25"/></name></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">cleanup_encoder_state<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><operator pos:line="56" pos:column="29">&amp;<pos:position pos:line="56" pos:column="34"/></operator><name><name pos:line="56" pos:column="30">part<pos:position pos:line="56" pos:column="34"/></name><operator pos:line="56" pos:column="34">-&gt;<pos:position pos:line="56" pos:column="39"/></operator><name pos:line="56" pos:column="36">encstate<pos:position pos:line="56" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">mimesetstate<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><operator pos:line="57" pos:column="20">&amp;<pos:position pos:line="57" pos:column="25"/></operator><name><name pos:line="57" pos:column="21">part<pos:position pos:line="57" pos:column="25"/></name><operator pos:line="57" pos:column="25">-&gt;<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="27">state<pos:position pos:line="57" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="34">MIMESTATE_CONTENT<pos:position pos:line="57" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="53">NULL<pos:position pos:line="57" pos:column="57"/></name></expr></argument>)<pos:position pos:line="57" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="59"/></expr_stmt>
      <break pos:line="58" pos:column="7">break;<pos:position pos:line="58" pos:column="13"/></break>
    <case pos:line="59" pos:column="5">case <expr><name pos:line="59" pos:column="10">MIMESTATE_CONTENT<pos:position pos:line="59" pos:column="27"/></name></expr>:<pos:position pos:line="59" pos:column="28"/></case>
      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><name><name pos:line="60" pos:column="10">part<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">-&gt;<pos:position pos:line="60" pos:column="19"/></operator><name pos:line="60" pos:column="16">encoder<pos:position pos:line="60" pos:column="23"/></name></name></expr>)<pos:position pos:line="60" pos:column="24"/></condition><then pos:line="60" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="9">sz<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">read_encoded_part_content<pos:position pos:line="61" pos:column="39"/></name><argument_list pos:line="61" pos:column="39">(<argument><expr><name pos:line="61" pos:column="40">part<pos:position pos:line="61" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="46">buffer<pos:position pos:line="61" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="54">bufsize<pos:position pos:line="61" pos:column="61"/></name></expr></argument>)<pos:position pos:line="61" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="63"/></expr_stmt></block></then>
      <else pos:line="62" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="9">sz<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">=<pos:position pos:line="63" pos:column="13"/></operator> <call><name pos:line="63" pos:column="14">read_part_content<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">(<argument><expr><name pos:line="63" pos:column="32">part<pos:position pos:line="63" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="38">buffer<pos:position pos:line="63" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="46">bufsize<pos:position pos:line="63" pos:column="53"/></name></expr></argument>)<pos:position pos:line="63" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="55"/></expr_stmt></block></else></if>
      <switch pos:line="64" pos:column="7">switch<condition pos:line="64" pos:column="13">(<expr><name pos:line="64" pos:column="14">sz<pos:position pos:line="64" pos:column="16"/></name></expr>)<pos:position pos:line="64" pos:column="17"/></condition> <block pos:line="64" pos:column="18">{
      <case pos:line="65" pos:column="7">case <expr><literal type="number" pos:line="65" pos:column="12">0<pos:position pos:line="65" pos:column="13"/></literal></expr>:<pos:position pos:line="65" pos:column="14"/></case>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">mimesetstate<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument><expr><operator pos:line="66" pos:column="22">&amp;<pos:position pos:line="66" pos:column="27"/></operator><name><name pos:line="66" pos:column="23">part<pos:position pos:line="66" pos:column="27"/></name><operator pos:line="66" pos:column="27">-&gt;<pos:position pos:line="66" pos:column="32"/></operator><name pos:line="66" pos:column="29">state<pos:position pos:line="66" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="36">MIMESTATE_END<pos:position pos:line="66" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="51">NULL<pos:position pos:line="66" pos:column="55"/></name></expr></argument>)<pos:position pos:line="66" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="57"/></expr_stmt>
        <comment type="block" pos:line="67" pos:column="9">/* Try sparing open file descriptors. */</comment>
        <if pos:line="68" pos:column="9">if<condition pos:line="68" pos:column="11">(<expr><name><name pos:line="68" pos:column="12">part<pos:position pos:line="68" pos:column="16"/></name><operator pos:line="68" pos:column="16">-&gt;<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="18">kind<pos:position pos:line="68" pos:column="22"/></name></name> <operator pos:line="68" pos:column="23">==<pos:position pos:line="68" pos:column="25"/></operator> <name pos:line="68" pos:column="26">MIMEKIND_FILE<pos:position pos:line="68" pos:column="39"/></name> <operator pos:line="68" pos:column="40">&amp;&amp;<pos:position pos:line="68" pos:column="50"/></operator> <name><name pos:line="68" pos:column="43">part<pos:position pos:line="68" pos:column="47"/></name><operator pos:line="68" pos:column="47">-&gt;<pos:position pos:line="68" pos:column="52"/></operator><name pos:line="68" pos:column="49">fp<pos:position pos:line="68" pos:column="51"/></name></name></expr>)<pos:position pos:line="68" pos:column="52"/></condition><then pos:line="68" pos:column="52"> <block pos:line="68" pos:column="53">{
          <expr_stmt><expr><call><name pos:line="69" pos:column="11">fclose<pos:position pos:line="69" pos:column="17"/></name><argument_list pos:line="69" pos:column="17">(<argument><expr><name><name pos:line="69" pos:column="18">part<pos:position pos:line="69" pos:column="22"/></name><operator pos:line="69" pos:column="22">-&gt;<pos:position pos:line="69" pos:column="27"/></operator><name pos:line="69" pos:column="24">fp<pos:position pos:line="69" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="70" pos:column="11">part<pos:position pos:line="70" pos:column="15"/></name><operator pos:line="70" pos:column="15">-&gt;<pos:position pos:line="70" pos:column="20"/></operator><name pos:line="70" pos:column="17">fp<pos:position pos:line="70" pos:column="19"/></name></name> <operator pos:line="70" pos:column="20">=<pos:position pos:line="70" pos:column="21"/></operator> <name pos:line="70" pos:column="22">NULL<pos:position pos:line="70" pos:column="26"/></name></expr>;<pos:position pos:line="70" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="71" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="72" pos:column="9">/* FALLTHROUGH */</comment>
      <case pos:line="73" pos:column="7">case <expr><name pos:line="73" pos:column="12">CURL_READFUNC_ABORT<pos:position pos:line="73" pos:column="31"/></name></expr>:<pos:position pos:line="73" pos:column="32"/></case>
      <case pos:line="74" pos:column="7">case <expr><name pos:line="74" pos:column="12">CURL_READFUNC_PAUSE<pos:position pos:line="74" pos:column="31"/></name></expr>:<pos:position pos:line="74" pos:column="32"/></case>
      <case pos:line="75" pos:column="7">case <expr><name pos:line="75" pos:column="12">READ_ERROR<pos:position pos:line="75" pos:column="22"/></name></expr>:<pos:position pos:line="75" pos:column="23"/></case>
        <return pos:line="76" pos:column="9">return <expr><ternary><condition><expr><name pos:line="76" pos:column="16">cursize<pos:position pos:line="76" pos:column="23"/></name></expr>?<pos:position pos:line="76" pos:column="24"/></condition><then pos:line="76" pos:column="24"> <expr><name pos:line="76" pos:column="25">cursize<pos:position pos:line="76" pos:column="32"/></name></expr></then><else pos:line="76" pos:column="32">: <expr><name pos:line="76" pos:column="34">sz<pos:position pos:line="76" pos:column="36"/></name></expr></else></ternary></expr>;<pos:position pos:line="76" pos:column="37"/></return>
      }<pos:position pos:line="77" pos:column="8"/></block></switch>
      <break pos:line="78" pos:column="7">break;<pos:position pos:line="78" pos:column="13"/></break>
    <case pos:line="79" pos:column="5">case <expr><name pos:line="79" pos:column="10">MIMESTATE_END<pos:position pos:line="79" pos:column="23"/></name></expr>:<pos:position pos:line="79" pos:column="24"/></case>
      <return pos:line="80" pos:column="7">return <expr><name pos:line="80" pos:column="14">cursize<pos:position pos:line="80" pos:column="21"/></name></expr>;<pos:position pos:line="80" pos:column="22"/></return>
    <default pos:line="81" pos:column="5">default:<pos:position pos:line="81" pos:column="13"/></default>
      <break pos:line="82" pos:column="7">break;<pos:position pos:line="82" pos:column="13"/></break>    <comment type="block" pos:line="82" pos:column="17">/* Other values not in part state. */</comment>
    }<pos:position pos:line="83" pos:column="6"/></block></switch>

    <comment type="block" pos:line="85" pos:column="5">/* Bump buffer and counters according to read size. */</comment>
    <expr_stmt><expr><name pos:line="86" pos:column="5">cursize<pos:position pos:line="86" pos:column="12"/></name> <operator pos:line="86" pos:column="13">+=<pos:position pos:line="86" pos:column="15"/></operator> <name pos:line="86" pos:column="16">sz<pos:position pos:line="86" pos:column="18"/></name></expr>;<pos:position pos:line="86" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="87" pos:column="5">buffer<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">+=<pos:position pos:line="87" pos:column="14"/></operator> <name pos:line="87" pos:column="15">sz<pos:position pos:line="87" pos:column="17"/></name></expr>;<pos:position pos:line="87" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="88" pos:column="5">bufsize<pos:position pos:line="88" pos:column="12"/></name> <operator pos:line="88" pos:column="13">-=<pos:position pos:line="88" pos:column="15"/></operator> <name pos:line="88" pos:column="16">sz<pos:position pos:line="88" pos:column="18"/></name></expr>;<pos:position pos:line="88" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="89" pos:column="4"/></block></while>

<cpp:ifdef pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">ifdef<pos:position pos:line="91" pos:column="7"/></cpp:directive> <name pos:line="91" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="91" pos:column="29"/></name></cpp:ifdef>
      <if pos:line="92" pos:column="7">if<condition pos:line="92" pos:column="9">(<expr><name><name pos:line="92" pos:column="10">part<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">-&gt;<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="16">easy<pos:position pos:line="92" pos:column="20"/></name></name> <operator pos:line="92" pos:column="21">&amp;&amp;<pos:position pos:line="92" pos:column="31"/></operator> <name pos:line="92" pos:column="24">convbuf<pos:position pos:line="92" pos:column="31"/></name> <operator pos:line="92" pos:column="32">&lt;<pos:position pos:line="92" pos:column="36"/></operator> <name pos:line="92" pos:column="34">buffer<pos:position pos:line="92" pos:column="40"/></name> <operator pos:line="92" pos:column="41">&amp;&amp;<pos:position pos:line="92" pos:column="51"/></operator>
         <name><name pos:line="93" pos:column="10">part<pos:position pos:line="93" pos:column="14"/></name><operator pos:line="93" pos:column="14">-&gt;<pos:position pos:line="93" pos:column="19"/></operator><name pos:line="93" pos:column="16">state<pos:position pos:line="93" pos:column="21"/></name><operator pos:line="93" pos:column="21">.<pos:position pos:line="93" pos:column="22"/></operator><name pos:line="93" pos:column="22">state<pos:position pos:line="93" pos:column="27"/></name></name> <operator pos:line="93" pos:column="28">&lt;<pos:position pos:line="93" pos:column="32"/></operator> <name pos:line="93" pos:column="30">MIMESTATE_BODY<pos:position pos:line="93" pos:column="44"/></name></expr>)<pos:position pos:line="93" pos:column="45"/></condition><then pos:line="93" pos:column="45"> <block pos:line="93" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="94" pos:column="9">CURLcode<pos:position pos:line="94" pos:column="17"/></name></type> <name pos:line="94" pos:column="18">result<pos:position pos:line="94" pos:column="24"/></name> <init pos:line="94" pos:column="25">= <expr><call><name pos:line="94" pos:column="27">Curl_convert_to_network<pos:position pos:line="94" pos:column="50"/></name><argument_list pos:line="94" pos:column="50">(<argument><expr><name><name pos:line="94" pos:column="51">part<pos:position pos:line="94" pos:column="55"/></name><operator pos:line="94" pos:column="55">-&gt;<pos:position pos:line="94" pos:column="60"/></operator><name pos:line="94" pos:column="57">easy<pos:position pos:line="94" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="63">convbuf<pos:position pos:line="94" pos:column="70"/></name></expr></argument>,
                                                  <argument><expr><name pos:line="95" pos:column="51">buffer<pos:position pos:line="95" pos:column="57"/></name> <operator pos:line="95" pos:column="58">-<pos:position pos:line="95" pos:column="59"/></operator> <name pos:line="95" pos:column="60">convbuf<pos:position pos:line="95" pos:column="67"/></name></expr></argument>)<pos:position pos:line="95" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="95" pos:column="69"/></decl_stmt>
        <if pos:line="96" pos:column="9">if<condition pos:line="96" pos:column="11">(<expr><name pos:line="96" pos:column="12">result<pos:position pos:line="96" pos:column="18"/></name></expr>)<pos:position pos:line="96" pos:column="19"/></condition><then pos:line="96" pos:column="19">
          <block type="pseudo"><return pos:line="97" pos:column="11">return <expr><name pos:line="97" pos:column="18">READ_ERROR<pos:position pos:line="97" pos:column="28"/></name></expr>;<pos:position pos:line="97" pos:column="29"/></return></block></then></if>
      }<pos:position pos:line="98" pos:column="8"/></block></then></if>
<cpp:endif pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">endif<pos:position pos:line="99" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="101" pos:column="3">return <expr><name pos:line="101" pos:column="10">cursize<pos:position pos:line="101" pos:column="17"/></name></expr>;<pos:position pos:line="101" pos:column="18"/></return>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
