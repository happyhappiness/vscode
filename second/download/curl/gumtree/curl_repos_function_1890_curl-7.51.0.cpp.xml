<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1890_curl-7.51.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curlx_strdup<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">str<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">len<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">newstr<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><operator pos:line="6" pos:column="6">!<pos:position pos:line="6" pos:column="7"/></operator><name pos:line="6" pos:column="7">str<pos:position pos:line="6" pos:column="10"/></name></expr>)<pos:position pos:line="6" pos:column="11"/></condition><then pos:line="6" pos:column="11">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">char<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></operator><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="20">NULL<pos:position pos:line="7" pos:column="24"/></name></expr>;<pos:position pos:line="7" pos:column="25"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">len<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <call><name pos:line="9" pos:column="9">strlen<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">str<pos:position pos:line="9" pos:column="19"/></name></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">len<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">&gt;=<pos:position pos:line="11" pos:column="15"/></operator> <operator pos:line="11" pos:column="13">(<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">(<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">size_t<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">)<pos:position pos:line="11" pos:column="22"/></operator><operator pos:line="11" pos:column="22">-<pos:position pos:line="11" pos:column="23"/></operator><literal type="number" pos:line="11" pos:column="23">1<pos:position pos:line="11" pos:column="24"/></literal><operator pos:line="11" pos:column="24">)<pos:position pos:line="11" pos:column="25"/></operator> <operator pos:line="11" pos:column="26">/<pos:position pos:line="11" pos:column="27"/></operator> <sizeof pos:line="11" pos:column="28">sizeof<argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">char<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></sizeof></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">char<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">*<pos:position pos:line="12" pos:column="19"/></operator><operator pos:line="12" pos:column="19">)<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">NULL<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="14" pos:column="3">newstr<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">malloc<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><operator pos:line="14" pos:column="19">(<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">len<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">+<pos:position pos:line="14" pos:column="24"/></operator><literal type="number" pos:line="14" pos:column="24">1<pos:position pos:line="14" pos:column="25"/></literal><operator pos:line="14" pos:column="25">)<pos:position pos:line="14" pos:column="26"/></operator><operator pos:line="14" pos:column="26">*<pos:position pos:line="14" pos:column="27"/></operator><sizeof pos:line="14" pos:column="27">sizeof<argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">char<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">newstr<pos:position pos:line="15" pos:column="13"/></name></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">char<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">*<pos:position pos:line="16" pos:column="19"/></operator><operator pos:line="16" pos:column="19">)<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">NULL<pos:position pos:line="16" pos:column="24"/></name></expr>;<pos:position pos:line="16" pos:column="25"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">memcpy<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><name pos:line="18" pos:column="10">newstr<pos:position pos:line="18" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="18">str<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="23">(<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">len<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">+<pos:position pos:line="18" pos:column="28"/></operator><literal type="number" pos:line="18" pos:column="28">1<pos:position pos:line="18" pos:column="29"/></literal><operator pos:line="18" pos:column="29">)<pos:position pos:line="18" pos:column="30"/></operator><operator pos:line="18" pos:column="30">*<pos:position pos:line="18" pos:column="31"/></operator><sizeof pos:line="18" pos:column="31">sizeof<argument_list pos:line="18" pos:column="37">(<argument><expr><name pos:line="18" pos:column="38">char<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>

  <return pos:line="20" pos:column="3">return <expr><name pos:line="20" pos:column="10">newstr<pos:position pos:line="20" pos:column="16"/></name></expr>;<pos:position pos:line="20" pos:column="17"/></return>

}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
