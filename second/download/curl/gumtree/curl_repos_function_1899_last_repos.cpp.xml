<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1899_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ftp_state_use_port<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">ftpport<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">fcmd<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <comment type="block" pos:line="2" pos:column="50">/* start with this */</comment>

<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">ftp_conn<pos:position pos:line="6" pos:column="18"/></name></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">ftpc<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><operator pos:line="6" pos:column="27">&amp;<pos:position pos:line="6" pos:column="32"/></operator><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">proto<pos:position pos:line="6" pos:column="39"/></name><operator pos:line="6" pos:column="39">.<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="40">ftpc<pos:position pos:line="6" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_easy<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">data<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name><name pos:line="7" pos:column="28">conn<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">data<pos:position pos:line="7" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socket_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">portsock<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name pos:line="8" pos:column="28">CURL_SOCKET_BAD<pos:position pos:line="8" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">myhost<pos:position pos:line="9" pos:column="14"/></name><index pos:line="9" pos:column="14">[<expr><literal type="number" pos:line="9" pos:column="15">256<pos:position pos:line="9" pos:column="18"/></literal></expr>]<pos:position pos:line="9" pos:column="19"/></index></name> <init pos:line="9" pos:column="20">= <expr><literal type="string" pos:line="9" pos:column="22">""<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="11" pos:column="31"/></name></name></type> <name pos:line="11" pos:column="32">ss<pos:position pos:line="11" pos:column="34"/></name></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">Curl_addrinfo<pos:position pos:line="12" pos:column="16"/></name> <modifier pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></modifier></type><name pos:line="12" pos:column="18">res<pos:position pos:line="12" pos:column="21"/></name></decl>, <modifier pos:line="12" pos:column="23">*<pos:position pos:line="12" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="12" pos:column="24">ai<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">curl_socklen_t<pos:position pos:line="13" pos:column="17"/></name></type> <name pos:line="13" pos:column="18">sslen<pos:position pos:line="13" pos:column="23"/></name></decl>;<pos:position pos:line="13" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">char<pos:position pos:line="14" pos:column="7"/></name></type> <name><name pos:line="14" pos:column="8">hbuf<pos:position pos:line="14" pos:column="12"/></name><index pos:line="14" pos:column="12">[<expr><name pos:line="14" pos:column="13">NI_MAXHOST<pos:position pos:line="14" pos:column="23"/></name></expr>]<pos:position pos:line="14" pos:column="24"/></index></name></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">sockaddr<pos:position pos:line="15" pos:column="18"/></name></name> <modifier pos:line="15" pos:column="19">*<pos:position pos:line="15" pos:column="20"/></modifier></type><name pos:line="15" pos:column="20">sa<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator>struct <name pos:line="15" pos:column="33">sockaddr<pos:position pos:line="15" pos:column="41"/></name> <operator pos:line="15" pos:column="42">*<pos:position pos:line="15" pos:column="43"/></operator><operator pos:line="15" pos:column="43">)<pos:position pos:line="15" pos:column="44"/></operator><operator pos:line="15" pos:column="44">&amp;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="45">ss<pos:position pos:line="15" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">struct<pos:position pos:line="16" pos:column="9"/></name> <name pos:line="16" pos:column="10">sockaddr_in<pos:position pos:line="16" pos:column="21"/></name></name> <modifier pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></modifier> <specifier pos:line="16" pos:column="24">const<pos:position pos:line="16" pos:column="29"/></specifier></type> <name pos:line="16" pos:column="30">sa4<pos:position pos:line="16" pos:column="33"/></name> <init pos:line="16" pos:column="34">= <expr><operator pos:line="16" pos:column="36">(<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="37">void<pos:position pos:line="16" pos:column="41"/></name> <operator pos:line="16" pos:column="42">*<pos:position pos:line="16" pos:column="43"/></operator><operator pos:line="16" pos:column="43">)<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="44">sa<pos:position pos:line="16" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="47"/></decl_stmt>
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">ENABLE_IPV6<pos:position pos:line="17" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="18" pos:column="3">struct<pos:position pos:line="18" pos:column="9"/></name> <name pos:line="18" pos:column="10">sockaddr_in6<pos:position pos:line="18" pos:column="22"/></name></name> <modifier pos:line="18" pos:column="23">*<pos:position pos:line="18" pos:column="24"/></modifier> <specifier pos:line="18" pos:column="25">const<pos:position pos:line="18" pos:column="30"/></specifier></type> <name pos:line="18" pos:column="31">sa6<pos:position pos:line="18" pos:column="34"/></name> <init pos:line="18" pos:column="35">= <expr><operator pos:line="18" pos:column="37">(<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="38">void<pos:position pos:line="18" pos:column="42"/></name> <operator pos:line="18" pos:column="43">*<pos:position pos:line="18" pos:column="44"/></operator><operator pos:line="18" pos:column="44">)<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">sa<pos:position pos:line="18" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="48"/></decl_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name></type> <name><name pos:line="20" pos:column="8">tmp<pos:position pos:line="20" pos:column="11"/></name><index pos:line="20" pos:column="11">[<expr><literal type="number" pos:line="20" pos:column="12">1024<pos:position pos:line="20" pos:column="16"/></literal></expr>]<pos:position pos:line="20" pos:column="17"/></index></name></decl>;<pos:position pos:line="20" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="21" pos:column="3">static<pos:position pos:line="21" pos:column="9"/></specifier> <type><specifier pos:line="21" pos:column="10">const<pos:position pos:line="21" pos:column="15"/></specifier> <name pos:line="21" pos:column="16">char<pos:position pos:line="21" pos:column="20"/></name></type> <name><name pos:line="21" pos:column="21">mode<pos:position pos:line="21" pos:column="25"/></name><index pos:line="21" pos:column="25">[]<pos:position pos:line="21" pos:column="27"/></index><index pos:line="21" pos:column="27">[<expr><literal type="number" pos:line="21" pos:column="28">5<pos:position pos:line="21" pos:column="29"/></literal></expr>]<pos:position pos:line="21" pos:column="30"/></index></name> <init pos:line="21" pos:column="31">= <expr><block pos:line="21" pos:column="33">{ <expr><literal type="string" pos:line="21" pos:column="35">"EPRT"<pos:position pos:line="21" pos:column="41"/></literal></expr>, <expr><literal type="string" pos:line="21" pos:column="43">"PORT"<pos:position pos:line="21" pos:column="49"/></literal></expr> }<pos:position pos:line="21" pos:column="51"/></block></expr></init></decl>;<pos:position pos:line="21" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">int<pos:position pos:line="22" pos:column="6"/></name></type> <name pos:line="22" pos:column="7">rc<pos:position pos:line="22" pos:column="9"/></name></decl>;<pos:position pos:line="22" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">int<pos:position pos:line="23" pos:column="6"/></name></type> <name pos:line="23" pos:column="7">error<pos:position pos:line="23" pos:column="12"/></name></decl>;<pos:position pos:line="23" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">char<pos:position pos:line="24" pos:column="7"/></name> <modifier pos:line="24" pos:column="8">*<pos:position pos:line="24" pos:column="9"/></modifier></type><name pos:line="24" pos:column="9">host<pos:position pos:line="24" pos:column="13"/></name> <init pos:line="24" pos:column="14">= <expr><name pos:line="24" pos:column="16">NULL<pos:position pos:line="24" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">char<pos:position pos:line="25" pos:column="7"/></name> <modifier pos:line="25" pos:column="8">*<pos:position pos:line="25" pos:column="9"/></modifier></type><name pos:line="25" pos:column="9">string_ftpport<pos:position pos:line="25" pos:column="23"/></name> <init pos:line="25" pos:column="24">= <expr><name><name pos:line="25" pos:column="26">data<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">-&gt;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="32">set<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">.<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">str<pos:position pos:line="25" pos:column="39"/></name><index pos:line="25" pos:column="39">[<expr><name pos:line="25" pos:column="40">STRING_FTPPORT<pos:position pos:line="25" pos:column="54"/></name></expr>]<pos:position pos:line="25" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="25" pos:column="56"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="26" pos:column="3">struct<pos:position pos:line="26" pos:column="9"/></name> <name pos:line="26" pos:column="10">Curl_dns_entry<pos:position pos:line="26" pos:column="24"/></name></name> <modifier pos:line="26" pos:column="25">*<pos:position pos:line="26" pos:column="26"/></modifier></type><name pos:line="26" pos:column="26">h<pos:position pos:line="26" pos:column="27"/></name> <init pos:line="26" pos:column="28">= <expr><name pos:line="26" pos:column="30">NULL<pos:position pos:line="26" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">unsigned<pos:position pos:line="27" pos:column="11"/></name> <name pos:line="27" pos:column="12">short<pos:position pos:line="27" pos:column="17"/></name></type> <name pos:line="27" pos:column="18">port_min<pos:position pos:line="27" pos:column="26"/></name> <init pos:line="27" pos:column="27">= <expr><literal type="number" pos:line="27" pos:column="29">0<pos:position pos:line="27" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="28" pos:column="3">unsigned<pos:position pos:line="28" pos:column="11"/></name> <name pos:line="28" pos:column="12">short<pos:position pos:line="28" pos:column="17"/></name></type> <name pos:line="28" pos:column="18">port_max<pos:position pos:line="28" pos:column="26"/></name> <init pos:line="28" pos:column="27">= <expr><literal type="number" pos:line="28" pos:column="29">0<pos:position pos:line="28" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">unsigned<pos:position pos:line="29" pos:column="11"/></name> <name pos:line="29" pos:column="12">short<pos:position pos:line="29" pos:column="17"/></name></type> <name pos:line="29" pos:column="18">port<pos:position pos:line="29" pos:column="22"/></name></decl>;<pos:position pos:line="29" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="30" pos:column="3">bool<pos:position pos:line="30" pos:column="7"/></name></type> <name pos:line="30" pos:column="8">possibly_non_local<pos:position pos:line="30" pos:column="26"/></name> <init pos:line="30" pos:column="27">= <expr><name pos:line="30" pos:column="29">TRUE<pos:position pos:line="30" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="34"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="32" pos:column="3">char<pos:position pos:line="32" pos:column="7"/></name> <modifier pos:line="32" pos:column="8">*<pos:position pos:line="32" pos:column="9"/></modifier></type><name pos:line="32" pos:column="9">addr<pos:position pos:line="32" pos:column="13"/></name> <init pos:line="32" pos:column="14">= <expr><name pos:line="32" pos:column="16">NULL<pos:position pos:line="32" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="34" pos:column="3">/* Step 1, figure out what is requested,
   * accepted format :
   * (ipv4|ipv6|domain|interface)?(:port(-range)?)?
   */</comment>

  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name><name pos:line="39" pos:column="6">data<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">-&gt;<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="12">set<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">.<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="16">str<pos:position pos:line="39" pos:column="19"/></name><index pos:line="39" pos:column="19">[<expr><name pos:line="39" pos:column="20">STRING_FTPPORT<pos:position pos:line="39" pos:column="34"/></name></expr>]<pos:position pos:line="39" pos:column="35"/></index></name> <operator pos:line="39" pos:column="36">&amp;&amp;<pos:position pos:line="39" pos:column="46"/></operator>
     <operator pos:line="40" pos:column="6">(<pos:position pos:line="40" pos:column="7"/></operator><call><name pos:line="40" pos:column="7">strlen<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name><name pos:line="40" pos:column="14">data<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">-&gt;<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="20">set<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">.<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">str<pos:position pos:line="40" pos:column="27"/></name><index pos:line="40" pos:column="27">[<expr><name pos:line="40" pos:column="28">STRING_FTPPORT<pos:position pos:line="40" pos:column="42"/></name></expr>]<pos:position pos:line="40" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="44"/></argument_list></call> <operator pos:line="40" pos:column="45">&gt;<pos:position pos:line="40" pos:column="49"/></operator> <literal type="number" pos:line="40" pos:column="47">1<pos:position pos:line="40" pos:column="48"/></literal><operator pos:line="40" pos:column="48">)<pos:position pos:line="40" pos:column="49"/></operator></expr>)<pos:position pos:line="40" pos:column="50"/></condition><then pos:line="40" pos:column="50"> <block pos:line="40" pos:column="51">{

<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">ENABLE_IPV6<pos:position pos:line="42" pos:column="19"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">size_t<pos:position pos:line="43" pos:column="11"/></name></type> <name pos:line="43" pos:column="12">addrlen<pos:position pos:line="43" pos:column="19"/></name> <init pos:line="43" pos:column="20">= <expr><ternary><condition><expr><name pos:line="43" pos:column="22">INET6_ADDRSTRLEN<pos:position pos:line="43" pos:column="38"/></name> <operator pos:line="43" pos:column="39">&gt;<pos:position pos:line="43" pos:column="43"/></operator> <call><name pos:line="43" pos:column="41">strlen<pos:position pos:line="43" pos:column="47"/></name><argument_list pos:line="43" pos:column="47">(<argument><expr><name pos:line="43" pos:column="48">string_ftpport<pos:position pos:line="43" pos:column="62"/></name></expr></argument>)<pos:position pos:line="43" pos:column="63"/></argument_list></call></expr> ?<pos:position pos:line="43" pos:column="65"/></condition><then pos:line="43" pos:column="65">
      <expr><name pos:line="44" pos:column="7">INET6_ADDRSTRLEN<pos:position pos:line="44" pos:column="23"/></name></expr> <pos:position pos:line="44" pos:column="24"/></then><else pos:line="44" pos:column="24">: <expr><call><name pos:line="44" pos:column="26">strlen<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">(<argument><expr><name pos:line="44" pos:column="33">string_ftpport<pos:position pos:line="44" pos:column="47"/></name></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="44" pos:column="49"/></decl_stmt>
<cpp:else pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">else<pos:position pos:line="45" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">size_t<pos:position pos:line="46" pos:column="11"/></name></type> <name pos:line="46" pos:column="12">addrlen<pos:position pos:line="46" pos:column="19"/></name> <init pos:line="46" pos:column="20">= <expr><ternary><condition><expr><name pos:line="46" pos:column="22">INET_ADDRSTRLEN<pos:position pos:line="46" pos:column="37"/></name> <operator pos:line="46" pos:column="38">&gt;<pos:position pos:line="46" pos:column="42"/></operator> <call><name pos:line="46" pos:column="40">strlen<pos:position pos:line="46" pos:column="46"/></name><argument_list pos:line="46" pos:column="46">(<argument><expr><name pos:line="46" pos:column="47">string_ftpport<pos:position pos:line="46" pos:column="61"/></name></expr></argument>)<pos:position pos:line="46" pos:column="62"/></argument_list></call></expr> ?<pos:position pos:line="46" pos:column="64"/></condition><then pos:line="46" pos:column="64">
      <expr><name pos:line="47" pos:column="7">INET_ADDRSTRLEN<pos:position pos:line="47" pos:column="22"/></name></expr> <pos:position pos:line="47" pos:column="23"/></then><else pos:line="47" pos:column="23">: <expr><call><name pos:line="47" pos:column="25">strlen<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">string_ftpport<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="47" pos:column="48"/></decl_stmt>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="49" pos:column="5">char<pos:position pos:line="49" pos:column="9"/></name> <modifier pos:line="49" pos:column="10">*<pos:position pos:line="49" pos:column="11"/></modifier></type><name pos:line="49" pos:column="11">ip_start<pos:position pos:line="49" pos:column="19"/></name> <init pos:line="49" pos:column="20">= <expr><name pos:line="49" pos:column="22">string_ftpport<pos:position pos:line="49" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="49" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">char<pos:position pos:line="50" pos:column="9"/></name> <modifier pos:line="50" pos:column="10">*<pos:position pos:line="50" pos:column="11"/></modifier></type><name pos:line="50" pos:column="11">ip_end<pos:position pos:line="50" pos:column="17"/></name> <init pos:line="50" pos:column="18">= <expr><name pos:line="50" pos:column="20">NULL<pos:position pos:line="50" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="50" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">char<pos:position pos:line="51" pos:column="9"/></name> <modifier pos:line="51" pos:column="10">*<pos:position pos:line="51" pos:column="11"/></modifier></type><name pos:line="51" pos:column="11">port_start<pos:position pos:line="51" pos:column="21"/></name> <init pos:line="51" pos:column="22">= <expr><name pos:line="51" pos:column="24">NULL<pos:position pos:line="51" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="51" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="52" pos:column="5">char<pos:position pos:line="52" pos:column="9"/></name> <modifier pos:line="52" pos:column="10">*<pos:position pos:line="52" pos:column="11"/></modifier></type><name pos:line="52" pos:column="11">port_sep<pos:position pos:line="52" pos:column="19"/></name> <init pos:line="52" pos:column="20">= <expr><name pos:line="52" pos:column="22">NULL<pos:position pos:line="52" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="52" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><name pos:line="54" pos:column="5">addr<pos:position pos:line="54" pos:column="9"/></name> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <call><name pos:line="54" pos:column="12">calloc<pos:position pos:line="54" pos:column="18"/></name><argument_list pos:line="54" pos:column="18">(<argument><expr><name pos:line="54" pos:column="19">addrlen<pos:position pos:line="54" pos:column="26"/></name> <operator pos:line="54" pos:column="27">+<pos:position pos:line="54" pos:column="28"/></operator> <literal type="number" pos:line="54" pos:column="29">1<pos:position pos:line="54" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="32">1<pos:position pos:line="54" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><operator pos:line="55" pos:column="8">!<pos:position pos:line="55" pos:column="9"/></operator><name pos:line="55" pos:column="9">addr<pos:position pos:line="55" pos:column="13"/></name></expr>)<pos:position pos:line="55" pos:column="14"/></condition><then pos:line="55" pos:column="14">
      <block type="pseudo"><return pos:line="56" pos:column="7">return <expr><name pos:line="56" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="56" pos:column="33"/></name></expr>;<pos:position pos:line="56" pos:column="34"/></return></block></then></if>

<cpp:ifdef pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">ifdef<pos:position pos:line="58" pos:column="7"/></cpp:directive> <name pos:line="58" pos:column="8">ENABLE_IPV6<pos:position pos:line="58" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">(<expr><operator pos:line="59" pos:column="8">*<pos:position pos:line="59" pos:column="9"/></operator><name pos:line="59" pos:column="9">string_ftpport<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">==<pos:position pos:line="59" pos:column="26"/></operator> <literal type="char" pos:line="59" pos:column="27">'['<pos:position pos:line="59" pos:column="30"/></literal></expr>)<pos:position pos:line="59" pos:column="31"/></condition><then pos:line="59" pos:column="31"> <block pos:line="59" pos:column="32">{
      <comment type="block" pos:line="60" pos:column="7">/* [ipv6]:port(-range) */</comment>
      <expr_stmt><expr><name pos:line="61" pos:column="7">ip_start<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <name pos:line="61" pos:column="18">string_ftpport<pos:position pos:line="61" pos:column="32"/></name> <operator pos:line="61" pos:column="33">+<pos:position pos:line="61" pos:column="34"/></operator> <literal type="number" pos:line="61" pos:column="35">1<pos:position pos:line="61" pos:column="36"/></literal></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name pos:line="62" pos:column="7">ip_end<pos:position pos:line="62" pos:column="13"/></name> <operator pos:line="62" pos:column="14">=<pos:position pos:line="62" pos:column="15"/></operator> <call><name pos:line="62" pos:column="16">strchr<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><name pos:line="62" pos:column="23">string_ftpport<pos:position pos:line="62" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="62" pos:column="39">']'<pos:position pos:line="62" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt>
      <if pos:line="63" pos:column="7">if<condition pos:line="63" pos:column="9">(<expr><name pos:line="63" pos:column="10">ip_end<pos:position pos:line="63" pos:column="16"/></name></expr>)<pos:position pos:line="63" pos:column="17"/></condition><then pos:line="63" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="9">strncpy<pos:position pos:line="64" pos:column="16"/></name><argument_list pos:line="64" pos:column="16">(<argument><expr><name pos:line="64" pos:column="17">addr<pos:position pos:line="64" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="23">ip_start<pos:position pos:line="64" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="33">ip_end<pos:position pos:line="64" pos:column="39"/></name> <operator pos:line="64" pos:column="40">-<pos:position pos:line="64" pos:column="41"/></operator> <name pos:line="64" pos:column="42">ip_start<pos:position pos:line="64" pos:column="50"/></name></expr></argument>)<pos:position pos:line="64" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="52"/></expr_stmt></block></then></if>
    }<pos:position pos:line="65" pos:column="6"/></block></then>
    <elseif pos:line="66" pos:column="5">else
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
      <if pos:line="68" pos:column="7">if<condition pos:line="68" pos:column="9">(<expr><operator pos:line="68" pos:column="10">*<pos:position pos:line="68" pos:column="11"/></operator><name pos:line="68" pos:column="11">string_ftpport<pos:position pos:line="68" pos:column="25"/></name> <operator pos:line="68" pos:column="26">==<pos:position pos:line="68" pos:column="28"/></operator> <literal type="char" pos:line="68" pos:column="29">':'<pos:position pos:line="68" pos:column="32"/></literal></expr>)<pos:position pos:line="68" pos:column="33"/></condition><then pos:line="68" pos:column="33"> <block pos:line="68" pos:column="34">{
        <comment type="block" pos:line="69" pos:column="9">/* :port */</comment>
        <expr_stmt><expr><name pos:line="70" pos:column="9">ip_end<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">=<pos:position pos:line="70" pos:column="17"/></operator> <name pos:line="70" pos:column="18">string_ftpport<pos:position pos:line="70" pos:column="32"/></name></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="71" pos:column="8"/></block></then></if></elseif>
      <else pos:line="72" pos:column="7">else <block pos:line="72" pos:column="12">{
        <expr_stmt><expr><name pos:line="73" pos:column="9">ip_end<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <call><name pos:line="73" pos:column="18">strchr<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">string_ftpport<pos:position pos:line="73" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="73" pos:column="41">':'<pos:position pos:line="73" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="46"/></expr_stmt>
        <if pos:line="74" pos:column="9">if<condition pos:line="74" pos:column="11">(<expr><name pos:line="74" pos:column="12">ip_end<pos:position pos:line="74" pos:column="18"/></name></expr>)<pos:position pos:line="74" pos:column="19"/></condition><then pos:line="74" pos:column="19"> <block pos:line="74" pos:column="20">{
          <comment type="block" pos:line="75" pos:column="11">/* either ipv6 or (ipv4|domain|interface):port(-range) */</comment>
<cpp:ifdef pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">ifdef<pos:position pos:line="76" pos:column="7"/></cpp:directive> <name pos:line="76" pos:column="8">ENABLE_IPV6<pos:position pos:line="76" pos:column="19"/></name></cpp:ifdef>
          <if pos:line="77" pos:column="11">if<condition pos:line="77" pos:column="13">(<expr><call><name pos:line="77" pos:column="14">Curl_inet_pton<pos:position pos:line="77" pos:column="28"/></name><argument_list pos:line="77" pos:column="28">(<argument><expr><name pos:line="77" pos:column="29">AF_INET6<pos:position pos:line="77" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="39">string_ftpport<pos:position pos:line="77" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="55">sa6<pos:position pos:line="77" pos:column="58"/></name></expr></argument>)<pos:position pos:line="77" pos:column="59"/></argument_list></call> <operator pos:line="77" pos:column="60">==<pos:position pos:line="77" pos:column="62"/></operator> <literal type="number" pos:line="77" pos:column="63">1<pos:position pos:line="77" pos:column="64"/></literal></expr>)<pos:position pos:line="77" pos:column="65"/></condition><then pos:line="77" pos:column="65"> <block pos:line="77" pos:column="66">{
            <comment type="block" pos:line="78" pos:column="13">/* ipv6 */</comment>
            <expr_stmt><expr><name pos:line="79" pos:column="13">port_min<pos:position pos:line="79" pos:column="21"/></name> <operator pos:line="79" pos:column="22">=<pos:position pos:line="79" pos:column="23"/></operator> <name pos:line="79" pos:column="24">port_max<pos:position pos:line="79" pos:column="32"/></name> <operator pos:line="79" pos:column="33">=<pos:position pos:line="79" pos:column="34"/></operator> <literal type="number" pos:line="79" pos:column="35">0<pos:position pos:line="79" pos:column="36"/></literal></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">strcpy<pos:position pos:line="80" pos:column="19"/></name><argument_list pos:line="80" pos:column="19">(<argument><expr><name pos:line="80" pos:column="20">addr<pos:position pos:line="80" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="26">string_ftpport<pos:position pos:line="80" pos:column="40"/></name></expr></argument>)<pos:position pos:line="80" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="81" pos:column="13">ip_end<pos:position pos:line="81" pos:column="19"/></name> <operator pos:line="81" pos:column="20">=<pos:position pos:line="81" pos:column="21"/></operator> <name pos:line="81" pos:column="22">NULL<pos:position pos:line="81" pos:column="26"/></name></expr>;<pos:position pos:line="81" pos:column="27"/></expr_stmt> <comment type="block" pos:line="81" pos:column="28">/* this got no port ! */</comment>
          }<pos:position pos:line="82" pos:column="12"/></block></then>
          <else pos:line="83" pos:column="11">else
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>
            <comment type="block" pos:line="85" pos:column="13">/* (ipv4|domain|interface):port(-range) */</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="13">strncpy<pos:position pos:line="86" pos:column="20"/></name><argument_list pos:line="86" pos:column="20">(<argument><expr><name pos:line="86" pos:column="21">addr<pos:position pos:line="86" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="27">string_ftpport<pos:position pos:line="86" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="43">ip_end<pos:position pos:line="86" pos:column="49"/></name> <operator pos:line="86" pos:column="50">-<pos:position pos:line="86" pos:column="51"/></operator> <name pos:line="86" pos:column="52">ip_start<pos:position pos:line="86" pos:column="60"/></name></expr></argument>)<pos:position pos:line="86" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="62"/></expr_stmt></block></else></if>
        }<pos:position pos:line="87" pos:column="10"/></block></then>
        <else pos:line="88" pos:column="9">else
          <comment type="block" pos:line="89" pos:column="11">/* ipv4|interface */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="11">strcpy<pos:position pos:line="90" pos:column="17"/></name><argument_list pos:line="90" pos:column="17">(<argument><expr><name pos:line="90" pos:column="18">addr<pos:position pos:line="90" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="24">string_ftpport<pos:position pos:line="90" pos:column="38"/></name></expr></argument>)<pos:position pos:line="90" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="40"/></expr_stmt></block></else></if>
      }<pos:position pos:line="91" pos:column="8"/></block></else></if>

    <comment type="block" pos:line="93" pos:column="5">/* parse the port */</comment>
    <if pos:line="94" pos:column="5">if<condition pos:line="94" pos:column="7">(<expr><name pos:line="94" pos:column="8">ip_end<pos:position pos:line="94" pos:column="14"/></name> <operator pos:line="94" pos:column="15">!=<pos:position pos:line="94" pos:column="17"/></operator> <name pos:line="94" pos:column="18">NULL<pos:position pos:line="94" pos:column="22"/></name></expr>)<pos:position pos:line="94" pos:column="23"/></condition><then pos:line="94" pos:column="23"> <block pos:line="94" pos:column="24">{
      <expr_stmt><expr><name pos:line="95" pos:column="7">port_start<pos:position pos:line="95" pos:column="17"/></name> <operator pos:line="95" pos:column="18">=<pos:position pos:line="95" pos:column="19"/></operator> <call><name pos:line="95" pos:column="20">strchr<pos:position pos:line="95" pos:column="26"/></name><argument_list pos:line="95" pos:column="26">(<argument><expr><name pos:line="95" pos:column="27">ip_end<pos:position pos:line="95" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="95" pos:column="35">':'<pos:position pos:line="95" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="40"/></expr_stmt>
      <if pos:line="96" pos:column="7">if<condition pos:line="96" pos:column="9">(<expr><name pos:line="96" pos:column="10">port_start<pos:position pos:line="96" pos:column="20"/></name></expr>)<pos:position pos:line="96" pos:column="21"/></condition><then pos:line="96" pos:column="21"> <block pos:line="96" pos:column="22">{
        <expr_stmt><expr><name pos:line="97" pos:column="9">port_min<pos:position pos:line="97" pos:column="17"/></name> <operator pos:line="97" pos:column="18">=<pos:position pos:line="97" pos:column="19"/></operator> <call><name pos:line="97" pos:column="20">curlx_ultous<pos:position pos:line="97" pos:column="32"/></name><argument_list pos:line="97" pos:column="32">(<argument><expr><call><name pos:line="97" pos:column="33">strtoul<pos:position pos:line="97" pos:column="40"/></name><argument_list pos:line="97" pos:column="40">(<argument><expr><name pos:line="97" pos:column="41">port_start<pos:position pos:line="97" pos:column="51"/></name> <operator pos:line="97" pos:column="52">+<pos:position pos:line="97" pos:column="53"/></operator> <literal type="number" pos:line="97" pos:column="54">1<pos:position pos:line="97" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="57">NULL<pos:position pos:line="97" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="63">10<pos:position pos:line="97" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="97" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name pos:line="98" pos:column="9">port_sep<pos:position pos:line="98" pos:column="17"/></name> <operator pos:line="98" pos:column="18">=<pos:position pos:line="98" pos:column="19"/></operator> <call><name pos:line="98" pos:column="20">strchr<pos:position pos:line="98" pos:column="26"/></name><argument_list pos:line="98" pos:column="26">(<argument><expr><name pos:line="98" pos:column="27">port_start<pos:position pos:line="98" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="98" pos:column="39">'-'<pos:position pos:line="98" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="44"/></expr_stmt>
        <if pos:line="99" pos:column="9">if<condition pos:line="99" pos:column="11">(<expr><name pos:line="99" pos:column="12">port_sep<pos:position pos:line="99" pos:column="20"/></name></expr>)<pos:position pos:line="99" pos:column="21"/></condition><then pos:line="99" pos:column="21"> <block pos:line="99" pos:column="22">{
          <expr_stmt><expr><name pos:line="100" pos:column="11">port_max<pos:position pos:line="100" pos:column="19"/></name> <operator pos:line="100" pos:column="20">=<pos:position pos:line="100" pos:column="21"/></operator> <call><name pos:line="100" pos:column="22">curlx_ultous<pos:position pos:line="100" pos:column="34"/></name><argument_list pos:line="100" pos:column="34">(<argument><expr><call><name pos:line="100" pos:column="35">strtoul<pos:position pos:line="100" pos:column="42"/></name><argument_list pos:line="100" pos:column="42">(<argument><expr><name pos:line="100" pos:column="43">port_sep<pos:position pos:line="100" pos:column="51"/></name> <operator pos:line="100" pos:column="52">+<pos:position pos:line="100" pos:column="53"/></operator> <literal type="number" pos:line="100" pos:column="54">1<pos:position pos:line="100" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="57">NULL<pos:position pos:line="100" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="100" pos:column="63">10<pos:position pos:line="100" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="68"/></expr_stmt>
        }<pos:position pos:line="101" pos:column="10"/></block></then>
        <else pos:line="102" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="103" pos:column="11">port_max<pos:position pos:line="103" pos:column="19"/></name> <operator pos:line="103" pos:column="20">=<pos:position pos:line="103" pos:column="21"/></operator> <name pos:line="103" pos:column="22">port_min<pos:position pos:line="103" pos:column="30"/></name></expr>;<pos:position pos:line="103" pos:column="31"/></expr_stmt></block></else></if>
      }<pos:position pos:line="104" pos:column="8"/></block></then></if>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="107" pos:column="5">/* correct errors like:
     *  :1234-1230
     *  :-4711,  in this case port_min is (unsigned)-1,
     *           therefore port_min &gt; port_max for all cases
     *           but port_max = (unsigned)-1
     */</comment>
    <if pos:line="113" pos:column="5">if<condition pos:line="113" pos:column="7">(<expr><name pos:line="113" pos:column="8">port_min<pos:position pos:line="113" pos:column="16"/></name> <operator pos:line="113" pos:column="17">&gt;<pos:position pos:line="113" pos:column="21"/></operator> <name pos:line="113" pos:column="19">port_max<pos:position pos:line="113" pos:column="27"/></name></expr>)<pos:position pos:line="113" pos:column="28"/></condition><then pos:line="113" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><name pos:line="114" pos:column="7">port_min<pos:position pos:line="114" pos:column="15"/></name> <operator pos:line="114" pos:column="16">=<pos:position pos:line="114" pos:column="17"/></operator> <name pos:line="114" pos:column="18">port_max<pos:position pos:line="114" pos:column="26"/></name> <operator pos:line="114" pos:column="27">=<pos:position pos:line="114" pos:column="28"/></operator> <literal type="number" pos:line="114" pos:column="29">0<pos:position pos:line="114" pos:column="30"/></literal></expr>;<pos:position pos:line="114" pos:column="31"/></expr_stmt></block></then></if>


    <if pos:line="117" pos:column="5">if<condition pos:line="117" pos:column="7">(<expr><operator pos:line="117" pos:column="8">*<pos:position pos:line="117" pos:column="9"/></operator><name pos:line="117" pos:column="9">addr<pos:position pos:line="117" pos:column="13"/></name> <operator pos:line="117" pos:column="14">!=<pos:position pos:line="117" pos:column="16"/></operator> <literal type="char" pos:line="117" pos:column="17">'\0'<pos:position pos:line="117" pos:column="21"/></literal></expr>)<pos:position pos:line="117" pos:column="22"/></condition><then pos:line="117" pos:column="22"> <block pos:line="117" pos:column="23">{
      <comment type="block" pos:line="118" pos:column="7">/* attempt to get the address of the given interface name */</comment>
      <switch pos:line="119" pos:column="7">switch<condition pos:line="119" pos:column="13">(<expr><call><name pos:line="119" pos:column="14">Curl_if2ip<pos:position pos:line="119" pos:column="24"/></name><argument_list pos:line="119" pos:column="24">(<argument><expr><name><name pos:line="119" pos:column="25">conn<pos:position pos:line="119" pos:column="29"/></name><operator pos:line="119" pos:column="29">-&gt;<pos:position pos:line="119" pos:column="34"/></operator><name pos:line="119" pos:column="31">ip_addr<pos:position pos:line="119" pos:column="38"/></name><operator pos:line="119" pos:column="38">-&gt;<pos:position pos:line="119" pos:column="43"/></operator><name pos:line="119" pos:column="40">ai_family<pos:position pos:line="119" pos:column="49"/></name></name></expr></argument>,
                        <argument><expr><call><name pos:line="120" pos:column="25">Curl_ipv6_scope<pos:position pos:line="120" pos:column="40"/></name><argument_list pos:line="120" pos:column="40">(<argument><expr><name><name pos:line="120" pos:column="41">conn<pos:position pos:line="120" pos:column="45"/></name><operator pos:line="120" pos:column="45">-&gt;<pos:position pos:line="120" pos:column="50"/></operator><name pos:line="120" pos:column="47">ip_addr<pos:position pos:line="120" pos:column="54"/></name><operator pos:line="120" pos:column="54">-&gt;<pos:position pos:line="120" pos:column="59"/></operator><name pos:line="120" pos:column="56">ai_addr<pos:position pos:line="120" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="64"/></argument_list></call></expr></argument>,
                        <argument><expr><name><name pos:line="121" pos:column="25">conn<pos:position pos:line="121" pos:column="29"/></name><operator pos:line="121" pos:column="29">-&gt;<pos:position pos:line="121" pos:column="34"/></operator><name pos:line="121" pos:column="31">scope_id<pos:position pos:line="121" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="41">addr<pos:position pos:line="121" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="47">hbuf<pos:position pos:line="121" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="121" pos:column="53">sizeof<argument_list pos:line="121" pos:column="59">(<argument><expr><name pos:line="121" pos:column="60">hbuf<pos:position pos:line="121" pos:column="64"/></name></expr></argument>)<pos:position pos:line="121" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="121" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="121" pos:column="67"/></condition> <block pos:line="121" pos:column="68">{
        <case pos:line="122" pos:column="9">case <expr><name pos:line="122" pos:column="14">IF2IP_NOT_FOUND<pos:position pos:line="122" pos:column="29"/></name></expr>:<pos:position pos:line="122" pos:column="30"/></case>
          <comment type="block" pos:line="123" pos:column="11">/* not an interface, use the given string as host name instead */</comment>
          <expr_stmt><expr><name pos:line="124" pos:column="11">host<pos:position pos:line="124" pos:column="15"/></name> <operator pos:line="124" pos:column="16">=<pos:position pos:line="124" pos:column="17"/></operator> <name pos:line="124" pos:column="18">addr<pos:position pos:line="124" pos:column="22"/></name></expr>;<pos:position pos:line="124" pos:column="23"/></expr_stmt>
          <break pos:line="125" pos:column="11">break;<pos:position pos:line="125" pos:column="17"/></break>
        <case pos:line="126" pos:column="9">case <expr><name pos:line="126" pos:column="14">IF2IP_AF_NOT_SUPPORTED<pos:position pos:line="126" pos:column="36"/></name></expr>:<pos:position pos:line="126" pos:column="37"/></case>
          <return pos:line="127" pos:column="11">return <expr><name pos:line="127" pos:column="18">CURLE_FTP_PORT_FAILED<pos:position pos:line="127" pos:column="39"/></name></expr>;<pos:position pos:line="127" pos:column="40"/></return>
        <case pos:line="128" pos:column="9">case <expr><name pos:line="128" pos:column="14">IF2IP_FOUND<pos:position pos:line="128" pos:column="25"/></name></expr>:<pos:position pos:line="128" pos:column="26"/></case>
          <expr_stmt><expr><name pos:line="129" pos:column="11">host<pos:position pos:line="129" pos:column="15"/></name> <operator pos:line="129" pos:column="16">=<pos:position pos:line="129" pos:column="17"/></operator> <name pos:line="129" pos:column="18">hbuf<pos:position pos:line="129" pos:column="22"/></name></expr>;<pos:position pos:line="129" pos:column="23"/></expr_stmt> <comment type="block" pos:line="129" pos:column="24">/* use the hbuf for host name */</comment>
      }<pos:position pos:line="130" pos:column="8"/></block></switch>
    }<pos:position pos:line="131" pos:column="6"/></block></then>
    <else pos:line="132" pos:column="5">else
      <comment type="block" pos:line="133" pos:column="7">/* there was only a port(-range) given, default the host */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="134" pos:column="7">host<pos:position pos:line="134" pos:column="11"/></name> <operator pos:line="134" pos:column="12">=<pos:position pos:line="134" pos:column="13"/></operator> <name pos:line="134" pos:column="14">NULL<pos:position pos:line="134" pos:column="18"/></name></expr>;<pos:position pos:line="134" pos:column="19"/></expr_stmt></block></else></if>
  }<pos:position pos:line="135" pos:column="4"/></block></then></if> <comment type="block" pos:line="135" pos:column="5">/* data-&gt;set.ftpport */</comment>

  <if pos:line="137" pos:column="3">if<condition pos:line="137" pos:column="5">(<expr><operator pos:line="137" pos:column="6">!<pos:position pos:line="137" pos:column="7"/></operator><name pos:line="137" pos:column="7">host<pos:position pos:line="137" pos:column="11"/></name></expr>)<pos:position pos:line="137" pos:column="12"/></condition><then pos:line="137" pos:column="12"> <block pos:line="137" pos:column="13">{
    <comment type="block" pos:line="138" pos:column="5">/* not an interface and not a host name, get default by extracting
       the IP from the control connection */</comment>

    <expr_stmt><expr><name pos:line="141" pos:column="5">sslen<pos:position pos:line="141" pos:column="10"/></name> <operator pos:line="141" pos:column="11">=<pos:position pos:line="141" pos:column="12"/></operator> <sizeof pos:line="141" pos:column="13">sizeof<argument_list pos:line="141" pos:column="19">(<argument><expr><name pos:line="141" pos:column="20">ss<pos:position pos:line="141" pos:column="22"/></name></expr></argument>)<pos:position pos:line="141" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="141" pos:column="24"/></expr_stmt>
    <if pos:line="142" pos:column="5">if<condition pos:line="142" pos:column="7">(<expr><call><name pos:line="142" pos:column="8">getsockname<pos:position pos:line="142" pos:column="19"/></name><argument_list pos:line="142" pos:column="19">(<argument><expr><name><name pos:line="142" pos:column="20">conn<pos:position pos:line="142" pos:column="24"/></name><operator pos:line="142" pos:column="24">-&gt;<pos:position pos:line="142" pos:column="29"/></operator><name pos:line="142" pos:column="26">sock<pos:position pos:line="142" pos:column="30"/></name><index pos:line="142" pos:column="30">[<expr><name pos:line="142" pos:column="31">FIRSTSOCKET<pos:position pos:line="142" pos:column="42"/></name></expr>]<pos:position pos:line="142" pos:column="43"/></index></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="45">sa<pos:position pos:line="142" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="142" pos:column="49">&amp;<pos:position pos:line="142" pos:column="54"/></operator><name pos:line="142" pos:column="50">sslen<pos:position pos:line="142" pos:column="55"/></name></expr></argument>)<pos:position pos:line="142" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="142" pos:column="57"/></condition><then pos:line="142" pos:column="57"> <block pos:line="142" pos:column="58">{
      <expr_stmt><expr><call><name pos:line="143" pos:column="7">failf<pos:position pos:line="143" pos:column="12"/></name><argument_list pos:line="143" pos:column="12">(<argument><expr><name pos:line="143" pos:column="13">data<pos:position pos:line="143" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="19">"getsockname() failed: %s"<pos:position pos:line="143" pos:column="45"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="144" pos:column="11">Curl_strerror<pos:position pos:line="144" pos:column="24"/></name><argument_list pos:line="144" pos:column="24">(<argument><expr><name pos:line="144" pos:column="25">conn<pos:position pos:line="144" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="31">SOCKERRNO<pos:position pos:line="144" pos:column="40"/></name></expr></argument>)<pos:position pos:line="144" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="144" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="145" pos:column="7">free<pos:position pos:line="145" pos:column="11"/></name><argument_list pos:line="145" pos:column="11">(<argument><expr><name pos:line="145" pos:column="12">addr<pos:position pos:line="145" pos:column="16"/></name></expr></argument>)<pos:position pos:line="145" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="18"/></expr_stmt>
      <return pos:line="146" pos:column="7">return <expr><name pos:line="146" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="146" pos:column="35"/></name></expr>;<pos:position pos:line="146" pos:column="36"/></return>
    }<pos:position pos:line="147" pos:column="6"/></block></then></if>
    <switch pos:line="148" pos:column="5">switch<condition pos:line="148" pos:column="11">(<expr><name><name pos:line="148" pos:column="12">sa<pos:position pos:line="148" pos:column="14"/></name><operator pos:line="148" pos:column="14">-&gt;<pos:position pos:line="148" pos:column="19"/></operator><name pos:line="148" pos:column="16">sa_family<pos:position pos:line="148" pos:column="25"/></name></name></expr>)<pos:position pos:line="148" pos:column="26"/></condition> <block pos:line="148" pos:column="27">{
<cpp:ifdef pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">ifdef<pos:position pos:line="149" pos:column="7"/></cpp:directive> <name pos:line="149" pos:column="8">ENABLE_IPV6<pos:position pos:line="149" pos:column="19"/></name></cpp:ifdef>
    <case pos:line="150" pos:column="5">case <expr><name pos:line="150" pos:column="10">AF_INET6<pos:position pos:line="150" pos:column="18"/></name></expr>:<pos:position pos:line="150" pos:column="19"/></case>
      <expr_stmt><expr><call><name pos:line="151" pos:column="7">Curl_inet_ntop<pos:position pos:line="151" pos:column="21"/></name><argument_list pos:line="151" pos:column="21">(<argument><expr><name><name pos:line="151" pos:column="22">sa<pos:position pos:line="151" pos:column="24"/></name><operator pos:line="151" pos:column="24">-&gt;<pos:position pos:line="151" pos:column="29"/></operator><name pos:line="151" pos:column="26">sa_family<pos:position pos:line="151" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="151" pos:column="37">&amp;<pos:position pos:line="151" pos:column="42"/></operator><name><name pos:line="151" pos:column="38">sa6<pos:position pos:line="151" pos:column="41"/></name><operator pos:line="151" pos:column="41">-&gt;<pos:position pos:line="151" pos:column="46"/></operator><name pos:line="151" pos:column="43">sin6_addr<pos:position pos:line="151" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="54">hbuf<pos:position pos:line="151" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="151" pos:column="60">sizeof<argument_list pos:line="151" pos:column="66">(<argument><expr><name pos:line="151" pos:column="67">hbuf<pos:position pos:line="151" pos:column="71"/></name></expr></argument>)<pos:position pos:line="151" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="151" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="74"/></expr_stmt>
      <break pos:line="152" pos:column="7">break;<pos:position pos:line="152" pos:column="13"/></break>
<cpp:endif pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">endif<pos:position pos:line="153" pos:column="7"/></cpp:directive></cpp:endif>
    <default pos:line="154" pos:column="5">default:<pos:position pos:line="154" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="155" pos:column="7">Curl_inet_ntop<pos:position pos:line="155" pos:column="21"/></name><argument_list pos:line="155" pos:column="21">(<argument><expr><name><name pos:line="155" pos:column="22">sa<pos:position pos:line="155" pos:column="24"/></name><operator pos:line="155" pos:column="24">-&gt;<pos:position pos:line="155" pos:column="29"/></operator><name pos:line="155" pos:column="26">sa_family<pos:position pos:line="155" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="37">&amp;<pos:position pos:line="155" pos:column="42"/></operator><name><name pos:line="155" pos:column="38">sa4<pos:position pos:line="155" pos:column="41"/></name><operator pos:line="155" pos:column="41">-&gt;<pos:position pos:line="155" pos:column="46"/></operator><name pos:line="155" pos:column="43">sin_addr<pos:position pos:line="155" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="53">hbuf<pos:position pos:line="155" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="155" pos:column="59">sizeof<argument_list pos:line="155" pos:column="65">(<argument><expr><name pos:line="155" pos:column="66">hbuf<pos:position pos:line="155" pos:column="70"/></name></expr></argument>)<pos:position pos:line="155" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="155" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="73"/></expr_stmt>
      <break pos:line="156" pos:column="7">break;<pos:position pos:line="156" pos:column="13"/></break>
    }<pos:position pos:line="157" pos:column="6"/></block></switch>
    <expr_stmt><expr><name pos:line="158" pos:column="5">host<pos:position pos:line="158" pos:column="9"/></name> <operator pos:line="158" pos:column="10">=<pos:position pos:line="158" pos:column="11"/></operator> <name pos:line="158" pos:column="12">hbuf<pos:position pos:line="158" pos:column="16"/></name></expr>;<pos:position pos:line="158" pos:column="17"/></expr_stmt> <comment type="block" pos:line="158" pos:column="18">/* use this host name */</comment>
    <expr_stmt><expr><name pos:line="159" pos:column="5">possibly_non_local<pos:position pos:line="159" pos:column="23"/></name> <operator pos:line="159" pos:column="24">=<pos:position pos:line="159" pos:column="25"/></operator> <name pos:line="159" pos:column="26">FALSE<pos:position pos:line="159" pos:column="31"/></name></expr>;<pos:position pos:line="159" pos:column="32"/></expr_stmt> <comment type="block" pos:line="159" pos:column="33">/* we know it is local now */</comment>
  }<pos:position pos:line="160" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="162" pos:column="3">/* resolv ip/host to ip */</comment>
  <expr_stmt><expr><name pos:line="163" pos:column="3">rc<pos:position pos:line="163" pos:column="5"/></name> <operator pos:line="163" pos:column="6">=<pos:position pos:line="163" pos:column="7"/></operator> <call><name pos:line="163" pos:column="8">Curl_resolv<pos:position pos:line="163" pos:column="19"/></name><argument_list pos:line="163" pos:column="19">(<argument><expr><name pos:line="163" pos:column="20">conn<pos:position pos:line="163" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="26">host<pos:position pos:line="163" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="163" pos:column="32">0<pos:position pos:line="163" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="163" pos:column="35">&amp;<pos:position pos:line="163" pos:column="40"/></operator><name pos:line="163" pos:column="36">h<pos:position pos:line="163" pos:column="37"/></name></expr></argument>)<pos:position pos:line="163" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="39"/></expr_stmt>
  <if pos:line="164" pos:column="3">if<condition pos:line="164" pos:column="5">(<expr><name pos:line="164" pos:column="6">rc<pos:position pos:line="164" pos:column="8"/></name> <operator pos:line="164" pos:column="9">==<pos:position pos:line="164" pos:column="11"/></operator> <name pos:line="164" pos:column="12">CURLRESOLV_PENDING<pos:position pos:line="164" pos:column="30"/></name></expr>)<pos:position pos:line="164" pos:column="31"/></condition><then pos:line="164" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="165" pos:column="5">(<pos:position pos:line="165" pos:column="6"/></operator><name pos:line="165" pos:column="6">void<pos:position pos:line="165" pos:column="10"/></name><operator pos:line="165" pos:column="10">)<pos:position pos:line="165" pos:column="11"/></operator><call><name pos:line="165" pos:column="11">Curl_resolver_wait_resolv<pos:position pos:line="165" pos:column="36"/></name><argument_list pos:line="165" pos:column="36">(<argument><expr><name pos:line="165" pos:column="37">conn<pos:position pos:line="165" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="165" pos:column="43">&amp;<pos:position pos:line="165" pos:column="48"/></operator><name pos:line="165" pos:column="44">h<pos:position pos:line="165" pos:column="45"/></name></expr></argument>)<pos:position pos:line="165" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="47"/></expr_stmt></block></then></if>
  <if pos:line="166" pos:column="3">if<condition pos:line="166" pos:column="5">(<expr><name pos:line="166" pos:column="6">h<pos:position pos:line="166" pos:column="7"/></name></expr>)<pos:position pos:line="166" pos:column="8"/></condition><then pos:line="166" pos:column="8"> <block pos:line="166" pos:column="9">{
    <expr_stmt><expr><name pos:line="167" pos:column="5">res<pos:position pos:line="167" pos:column="8"/></name> <operator pos:line="167" pos:column="9">=<pos:position pos:line="167" pos:column="10"/></operator> <name><name pos:line="167" pos:column="11">h<pos:position pos:line="167" pos:column="12"/></name><operator pos:line="167" pos:column="12">-&gt;<pos:position pos:line="167" pos:column="17"/></operator><name pos:line="167" pos:column="14">addr<pos:position pos:line="167" pos:column="18"/></name></name></expr>;<pos:position pos:line="167" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="168" pos:column="5">/* when we return from this function, we can forget about this entry
       to we can unlock it now already */</comment>
    <expr_stmt><expr><call><name pos:line="170" pos:column="5">Curl_resolv_unlock<pos:position pos:line="170" pos:column="23"/></name><argument_list pos:line="170" pos:column="23">(<argument><expr><name pos:line="170" pos:column="24">data<pos:position pos:line="170" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="30">h<pos:position pos:line="170" pos:column="31"/></name></expr></argument>)<pos:position pos:line="170" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="171" pos:column="4"/></block></then> <comment type="block" pos:line="171" pos:column="5">/* (h) */</comment>
  <else pos:line="172" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="173" pos:column="5">res<pos:position pos:line="173" pos:column="8"/></name> <operator pos:line="173" pos:column="9">=<pos:position pos:line="173" pos:column="10"/></operator> <name pos:line="173" pos:column="11">NULL<pos:position pos:line="173" pos:column="15"/></name></expr>;<pos:position pos:line="173" pos:column="16"/></expr_stmt></block></else></if> <comment type="block" pos:line="173" pos:column="17">/* failure! */</comment>

  <if pos:line="175" pos:column="3">if<condition pos:line="175" pos:column="5">(<expr><name pos:line="175" pos:column="6">res<pos:position pos:line="175" pos:column="9"/></name> <operator pos:line="175" pos:column="10">==<pos:position pos:line="175" pos:column="12"/></operator> <name pos:line="175" pos:column="13">NULL<pos:position pos:line="175" pos:column="17"/></name></expr>)<pos:position pos:line="175" pos:column="18"/></condition><then pos:line="175" pos:column="18"> <block pos:line="175" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="176" pos:column="5">failf<pos:position pos:line="176" pos:column="10"/></name><argument_list pos:line="176" pos:column="10">(<argument><expr><name pos:line="176" pos:column="11">data<pos:position pos:line="176" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="176" pos:column="17">"failed to resolve the address provided to PORT: %s"<pos:position pos:line="176" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="176" pos:column="71">host<pos:position pos:line="176" pos:column="75"/></name></expr></argument>)<pos:position pos:line="176" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="177" pos:column="5">free<pos:position pos:line="177" pos:column="9"/></name><argument_list pos:line="177" pos:column="9">(<argument><expr><name pos:line="177" pos:column="10">addr<pos:position pos:line="177" pos:column="14"/></name></expr></argument>)<pos:position pos:line="177" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="16"/></expr_stmt>
    <return pos:line="178" pos:column="5">return <expr><name pos:line="178" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="178" pos:column="33"/></name></expr>;<pos:position pos:line="178" pos:column="34"/></return>
  }<pos:position pos:line="179" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="181" pos:column="3">free<pos:position pos:line="181" pos:column="7"/></name><argument_list pos:line="181" pos:column="7">(<argument><expr><name pos:line="181" pos:column="8">addr<pos:position pos:line="181" pos:column="12"/></name></expr></argument>)<pos:position pos:line="181" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="182" pos:column="3">host<pos:position pos:line="182" pos:column="7"/></name> <operator pos:line="182" pos:column="8">=<pos:position pos:line="182" pos:column="9"/></operator> <name pos:line="182" pos:column="10">NULL<pos:position pos:line="182" pos:column="14"/></name></expr>;<pos:position pos:line="182" pos:column="15"/></expr_stmt>

  <comment type="block" pos:line="184" pos:column="3">/* step 2, create a socket for the requested address */</comment>

  <expr_stmt><expr><name pos:line="186" pos:column="3">portsock<pos:position pos:line="186" pos:column="11"/></name> <operator pos:line="186" pos:column="12">=<pos:position pos:line="186" pos:column="13"/></operator> <name pos:line="186" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="186" pos:column="29"/></name></expr>;<pos:position pos:line="186" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="187" pos:column="3">error<pos:position pos:line="187" pos:column="8"/></name> <operator pos:line="187" pos:column="9">=<pos:position pos:line="187" pos:column="10"/></operator> <literal type="number" pos:line="187" pos:column="11">0<pos:position pos:line="187" pos:column="12"/></literal></expr>;<pos:position pos:line="187" pos:column="13"/></expr_stmt>
  <for pos:line="188" pos:column="3">for<control pos:line="188" pos:column="6">(<init><expr><name pos:line="188" pos:column="7">ai<pos:position pos:line="188" pos:column="9"/></name> <operator pos:line="188" pos:column="10">=<pos:position pos:line="188" pos:column="11"/></operator> <name pos:line="188" pos:column="12">res<pos:position pos:line="188" pos:column="15"/></name></expr>;<pos:position pos:line="188" pos:column="16"/></init> <condition><expr><name pos:line="188" pos:column="17">ai<pos:position pos:line="188" pos:column="19"/></name></expr>;<pos:position pos:line="188" pos:column="20"/></condition> <incr><expr><name pos:line="188" pos:column="21">ai<pos:position pos:line="188" pos:column="23"/></name> <operator pos:line="188" pos:column="24">=<pos:position pos:line="188" pos:column="25"/></operator> <name><name pos:line="188" pos:column="26">ai<pos:position pos:line="188" pos:column="28"/></name><operator pos:line="188" pos:column="28">-&gt;<pos:position pos:line="188" pos:column="33"/></operator><name pos:line="188" pos:column="30">ai_next<pos:position pos:line="188" pos:column="37"/></name></name></expr></incr>)<pos:position pos:line="188" pos:column="38"/></control> <block pos:line="188" pos:column="39">{
    <expr_stmt><expr><name pos:line="189" pos:column="5">result<pos:position pos:line="189" pos:column="11"/></name> <operator pos:line="189" pos:column="12">=<pos:position pos:line="189" pos:column="13"/></operator> <call><name pos:line="189" pos:column="14">Curl_socket<pos:position pos:line="189" pos:column="25"/></name><argument_list pos:line="189" pos:column="25">(<argument><expr><name pos:line="189" pos:column="26">conn<pos:position pos:line="189" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="32">ai<pos:position pos:line="189" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="36">NULL<pos:position pos:line="189" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="189" pos:column="42">&amp;<pos:position pos:line="189" pos:column="47"/></operator><name pos:line="189" pos:column="43">portsock<pos:position pos:line="189" pos:column="51"/></name></expr></argument>)<pos:position pos:line="189" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="53"/></expr_stmt>
    <if pos:line="190" pos:column="5">if<condition pos:line="190" pos:column="7">(<expr><name pos:line="190" pos:column="8">result<pos:position pos:line="190" pos:column="14"/></name></expr>)<pos:position pos:line="190" pos:column="15"/></condition><then pos:line="190" pos:column="15"> <block pos:line="190" pos:column="16">{
      <expr_stmt><expr><name pos:line="191" pos:column="7">error<pos:position pos:line="191" pos:column="12"/></name> <operator pos:line="191" pos:column="13">=<pos:position pos:line="191" pos:column="14"/></operator> <name pos:line="191" pos:column="15">SOCKERRNO<pos:position pos:line="191" pos:column="24"/></name></expr>;<pos:position pos:line="191" pos:column="25"/></expr_stmt>
      <continue pos:line="192" pos:column="7">continue;<pos:position pos:line="192" pos:column="16"/></continue>
    }<pos:position pos:line="193" pos:column="6"/></block></then></if>
    <break pos:line="194" pos:column="5">break;<pos:position pos:line="194" pos:column="11"/></break>
  }<pos:position pos:line="195" pos:column="4"/></block></for>
  <if pos:line="196" pos:column="3">if<condition pos:line="196" pos:column="5">(<expr><operator pos:line="196" pos:column="6">!<pos:position pos:line="196" pos:column="7"/></operator><name pos:line="196" pos:column="7">ai<pos:position pos:line="196" pos:column="9"/></name></expr>)<pos:position pos:line="196" pos:column="10"/></condition><then pos:line="196" pos:column="10"> <block pos:line="196" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="197" pos:column="5">failf<pos:position pos:line="197" pos:column="10"/></name><argument_list pos:line="197" pos:column="10">(<argument><expr><name pos:line="197" pos:column="11">data<pos:position pos:line="197" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="197" pos:column="17">"socket failure: %s"<pos:position pos:line="197" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="197" pos:column="39">Curl_strerror<pos:position pos:line="197" pos:column="52"/></name><argument_list pos:line="197" pos:column="52">(<argument><expr><name pos:line="197" pos:column="53">conn<pos:position pos:line="197" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="59">error<pos:position pos:line="197" pos:column="64"/></name></expr></argument>)<pos:position pos:line="197" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="197" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="67"/></expr_stmt>
    <return pos:line="198" pos:column="5">return <expr><name pos:line="198" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="198" pos:column="33"/></name></expr>;<pos:position pos:line="198" pos:column="34"/></return>
  }<pos:position pos:line="199" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="201" pos:column="3">/* step 3, bind to a suitable local address */</comment>

  <expr_stmt><expr><call><name pos:line="203" pos:column="3">memcpy<pos:position pos:line="203" pos:column="9"/></name><argument_list pos:line="203" pos:column="9">(<argument><expr><name pos:line="203" pos:column="10">sa<pos:position pos:line="203" pos:column="12"/></name></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="14">ai<pos:position pos:line="203" pos:column="16"/></name><operator pos:line="203" pos:column="16">-&gt;<pos:position pos:line="203" pos:column="21"/></operator><name pos:line="203" pos:column="18">ai_addr<pos:position pos:line="203" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="27">ai<pos:position pos:line="203" pos:column="29"/></name><operator pos:line="203" pos:column="29">-&gt;<pos:position pos:line="203" pos:column="34"/></operator><name pos:line="203" pos:column="31">ai_addrlen<pos:position pos:line="203" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="203" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="204" pos:column="3">sslen<pos:position pos:line="204" pos:column="8"/></name> <operator pos:line="204" pos:column="9">=<pos:position pos:line="204" pos:column="10"/></operator> <name><name pos:line="204" pos:column="11">ai<pos:position pos:line="204" pos:column="13"/></name><operator pos:line="204" pos:column="13">-&gt;<pos:position pos:line="204" pos:column="18"/></operator><name pos:line="204" pos:column="15">ai_addrlen<pos:position pos:line="204" pos:column="25"/></name></name></expr>;<pos:position pos:line="204" pos:column="26"/></expr_stmt>

  <for pos:line="206" pos:column="3">for<control pos:line="206" pos:column="6">(<init><expr><name pos:line="206" pos:column="7">port<pos:position pos:line="206" pos:column="11"/></name> <operator pos:line="206" pos:column="12">=<pos:position pos:line="206" pos:column="13"/></operator> <name pos:line="206" pos:column="14">port_min<pos:position pos:line="206" pos:column="22"/></name></expr>;<pos:position pos:line="206" pos:column="23"/></init> <condition><expr><name pos:line="206" pos:column="24">port<pos:position pos:line="206" pos:column="28"/></name> <operator pos:line="206" pos:column="29">&lt;=<pos:position pos:line="206" pos:column="34"/></operator> <name pos:line="206" pos:column="32">port_max<pos:position pos:line="206" pos:column="40"/></name></expr>;<pos:position pos:line="206" pos:column="41"/></condition><incr/>)<pos:position pos:line="206" pos:column="42"/></control> <block pos:line="206" pos:column="43">{
    <if pos:line="207" pos:column="5">if<condition pos:line="207" pos:column="7">(<expr><name><name pos:line="207" pos:column="8">sa<pos:position pos:line="207" pos:column="10"/></name><operator pos:line="207" pos:column="10">-&gt;<pos:position pos:line="207" pos:column="15"/></operator><name pos:line="207" pos:column="12">sa_family<pos:position pos:line="207" pos:column="21"/></name></name> <operator pos:line="207" pos:column="22">==<pos:position pos:line="207" pos:column="24"/></operator> <name pos:line="207" pos:column="25">AF_INET<pos:position pos:line="207" pos:column="32"/></name></expr>)<pos:position pos:line="207" pos:column="33"/></condition><then pos:line="207" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="208" pos:column="7">sa4<pos:position pos:line="208" pos:column="10"/></name><operator pos:line="208" pos:column="10">-&gt;<pos:position pos:line="208" pos:column="15"/></operator><name pos:line="208" pos:column="12">sin_port<pos:position pos:line="208" pos:column="20"/></name></name> <operator pos:line="208" pos:column="21">=<pos:position pos:line="208" pos:column="22"/></operator> <call><name pos:line="208" pos:column="23">htons<pos:position pos:line="208" pos:column="28"/></name><argument_list pos:line="208" pos:column="28">(<argument><expr><name pos:line="208" pos:column="29">port<pos:position pos:line="208" pos:column="33"/></name></expr></argument>)<pos:position pos:line="208" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="35"/></expr_stmt></block></then>
<cpp:ifdef pos:line="209" pos:column="1">#<cpp:directive pos:line="209" pos:column="2">ifdef<pos:position pos:line="209" pos:column="7"/></cpp:directive> <name pos:line="209" pos:column="8">ENABLE_IPV6<pos:position pos:line="209" pos:column="19"/></name></cpp:ifdef>
    <else pos:line="210" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="211" pos:column="7">sa6<pos:position pos:line="211" pos:column="10"/></name><operator pos:line="211" pos:column="10">-&gt;<pos:position pos:line="211" pos:column="15"/></operator><name pos:line="211" pos:column="12">sin6_port<pos:position pos:line="211" pos:column="21"/></name></name> <operator pos:line="211" pos:column="22">=<pos:position pos:line="211" pos:column="23"/></operator> <call><name pos:line="211" pos:column="24">htons<pos:position pos:line="211" pos:column="29"/></name><argument_list pos:line="211" pos:column="29">(<argument><expr><name pos:line="211" pos:column="30">port<pos:position pos:line="211" pos:column="34"/></name></expr></argument>)<pos:position pos:line="211" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="36"/></expr_stmt></block></else></if>
<cpp:endif pos:line="212" pos:column="1">#<cpp:directive pos:line="212" pos:column="2">endif<pos:position pos:line="212" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="213" pos:column="5">/* Try binding the given address. */</comment>
    <if pos:line="214" pos:column="5">if<condition pos:line="214" pos:column="7">(<expr><call><name pos:line="214" pos:column="8">bind<pos:position pos:line="214" pos:column="12"/></name><argument_list pos:line="214" pos:column="12">(<argument><expr><name pos:line="214" pos:column="13">portsock<pos:position pos:line="214" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="23">sa<pos:position pos:line="214" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="27">sslen<pos:position pos:line="214" pos:column="32"/></name></expr></argument>)<pos:position pos:line="214" pos:column="33"/></argument_list></call></expr> )<pos:position pos:line="214" pos:column="35"/></condition><then pos:line="214" pos:column="35"> <block pos:line="214" pos:column="36">{
      <comment type="block" pos:line="215" pos:column="7">/* It failed. */</comment>
      <expr_stmt><expr><name pos:line="216" pos:column="7">error<pos:position pos:line="216" pos:column="12"/></name> <operator pos:line="216" pos:column="13">=<pos:position pos:line="216" pos:column="14"/></operator> <name pos:line="216" pos:column="15">SOCKERRNO<pos:position pos:line="216" pos:column="24"/></name></expr>;<pos:position pos:line="216" pos:column="25"/></expr_stmt>
      <if pos:line="217" pos:column="7">if<condition pos:line="217" pos:column="9">(<expr><name pos:line="217" pos:column="10">possibly_non_local<pos:position pos:line="217" pos:column="28"/></name> <operator pos:line="217" pos:column="29">&amp;&amp;<pos:position pos:line="217" pos:column="39"/></operator> <operator pos:line="217" pos:column="32">(<pos:position pos:line="217" pos:column="33"/></operator><name pos:line="217" pos:column="33">error<pos:position pos:line="217" pos:column="38"/></name> <operator pos:line="217" pos:column="39">==<pos:position pos:line="217" pos:column="41"/></operator> <name pos:line="217" pos:column="42">EADDRNOTAVAIL<pos:position pos:line="217" pos:column="55"/></name><operator pos:line="217" pos:column="55">)<pos:position pos:line="217" pos:column="56"/></operator></expr>)<pos:position pos:line="217" pos:column="57"/></condition><then pos:line="217" pos:column="57"> <block pos:line="217" pos:column="58">{
        <comment type="block" pos:line="218" pos:column="9">/* The requested bind address is not local.  Use the address used for
         * the control connection instead and restart the port loop
         */</comment>

        <expr_stmt><expr><call><name pos:line="222" pos:column="9">infof<pos:position pos:line="222" pos:column="14"/></name><argument_list pos:line="222" pos:column="14">(<argument><expr><name pos:line="222" pos:column="15">data<pos:position pos:line="222" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="222" pos:column="21">"bind(port=%hu) on non-local address failed: %s\n"<pos:position pos:line="222" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="73">port<pos:position pos:line="222" pos:column="77"/></name></expr></argument>,
              <argument><expr><call><name pos:line="223" pos:column="15">Curl_strerror<pos:position pos:line="223" pos:column="28"/></name><argument_list pos:line="223" pos:column="28">(<argument><expr><name pos:line="223" pos:column="29">conn<pos:position pos:line="223" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="223" pos:column="35">error<pos:position pos:line="223" pos:column="40"/></name></expr></argument>)<pos:position pos:line="223" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="223" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="44"/></expr_stmt>

        <expr_stmt><expr><name pos:line="225" pos:column="9">sslen<pos:position pos:line="225" pos:column="14"/></name> <operator pos:line="225" pos:column="15">=<pos:position pos:line="225" pos:column="16"/></operator> <sizeof pos:line="225" pos:column="17">sizeof<argument_list pos:line="225" pos:column="23">(<argument><expr><name pos:line="225" pos:column="24">ss<pos:position pos:line="225" pos:column="26"/></name></expr></argument>)<pos:position pos:line="225" pos:column="27"/></argument_list></sizeof></expr>;<pos:position pos:line="225" pos:column="28"/></expr_stmt>
        <if pos:line="226" pos:column="9">if<condition pos:line="226" pos:column="11">(<expr><call><name pos:line="226" pos:column="12">getsockname<pos:position pos:line="226" pos:column="23"/></name><argument_list pos:line="226" pos:column="23">(<argument><expr><name><name pos:line="226" pos:column="24">conn<pos:position pos:line="226" pos:column="28"/></name><operator pos:line="226" pos:column="28">-&gt;<pos:position pos:line="226" pos:column="33"/></operator><name pos:line="226" pos:column="30">sock<pos:position pos:line="226" pos:column="34"/></name><index pos:line="226" pos:column="34">[<expr><name pos:line="226" pos:column="35">FIRSTSOCKET<pos:position pos:line="226" pos:column="46"/></name></expr>]<pos:position pos:line="226" pos:column="47"/></index></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="49">sa<pos:position pos:line="226" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="226" pos:column="53">&amp;<pos:position pos:line="226" pos:column="58"/></operator><name pos:line="226" pos:column="54">sslen<pos:position pos:line="226" pos:column="59"/></name></expr></argument>)<pos:position pos:line="226" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="226" pos:column="61"/></condition><then pos:line="226" pos:column="61"> <block pos:line="226" pos:column="62">{
          <expr_stmt><expr><call><name pos:line="227" pos:column="11">failf<pos:position pos:line="227" pos:column="16"/></name><argument_list pos:line="227" pos:column="16">(<argument><expr><name pos:line="227" pos:column="17">data<pos:position pos:line="227" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="227" pos:column="23">"getsockname() failed: %s"<pos:position pos:line="227" pos:column="49"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="228" pos:column="17">Curl_strerror<pos:position pos:line="228" pos:column="30"/></name><argument_list pos:line="228" pos:column="30">(<argument><expr><name pos:line="228" pos:column="31">conn<pos:position pos:line="228" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="228" pos:column="37">SOCKERRNO<pos:position pos:line="228" pos:column="46"/></name></expr></argument>)<pos:position pos:line="228" pos:column="47"/></argument_list></call></expr></argument> )<pos:position pos:line="228" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="229" pos:column="11">Curl_closesocket<pos:position pos:line="229" pos:column="27"/></name><argument_list pos:line="229" pos:column="27">(<argument><expr><name pos:line="229" pos:column="28">conn<pos:position pos:line="229" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="34">portsock<pos:position pos:line="229" pos:column="42"/></name></expr></argument>)<pos:position pos:line="229" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="44"/></expr_stmt>
          <return pos:line="230" pos:column="11">return <expr><name pos:line="230" pos:column="18">CURLE_FTP_PORT_FAILED<pos:position pos:line="230" pos:column="39"/></name></expr>;<pos:position pos:line="230" pos:column="40"/></return>
        }<pos:position pos:line="231" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="232" pos:column="9">port<pos:position pos:line="232" pos:column="13"/></name> <operator pos:line="232" pos:column="14">=<pos:position pos:line="232" pos:column="15"/></operator> <name pos:line="232" pos:column="16">port_min<pos:position pos:line="232" pos:column="24"/></name></expr>;<pos:position pos:line="232" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="233" pos:column="9">possibly_non_local<pos:position pos:line="233" pos:column="27"/></name> <operator pos:line="233" pos:column="28">=<pos:position pos:line="233" pos:column="29"/></operator> <name pos:line="233" pos:column="30">FALSE<pos:position pos:line="233" pos:column="35"/></name></expr>;<pos:position pos:line="233" pos:column="36"/></expr_stmt> <comment type="block" pos:line="233" pos:column="37">/* don't try this again */</comment>
        <continue pos:line="234" pos:column="9">continue;<pos:position pos:line="234" pos:column="18"/></continue>
      }<pos:position pos:line="235" pos:column="8"/></block></then></if>
      <if pos:line="236" pos:column="7">if<condition pos:line="236" pos:column="9">(<expr><name pos:line="236" pos:column="10">error<pos:position pos:line="236" pos:column="15"/></name> <operator pos:line="236" pos:column="16">!=<pos:position pos:line="236" pos:column="18"/></operator> <name pos:line="236" pos:column="19">EADDRINUSE<pos:position pos:line="236" pos:column="29"/></name> <operator pos:line="236" pos:column="30">&amp;&amp;<pos:position pos:line="236" pos:column="40"/></operator> <name pos:line="236" pos:column="33">error<pos:position pos:line="236" pos:column="38"/></name> <operator pos:line="236" pos:column="39">!=<pos:position pos:line="236" pos:column="41"/></operator> <name pos:line="236" pos:column="42">EACCES<pos:position pos:line="236" pos:column="48"/></name></expr>)<pos:position pos:line="236" pos:column="49"/></condition><then pos:line="236" pos:column="49"> <block pos:line="236" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="237" pos:column="9">failf<pos:position pos:line="237" pos:column="14"/></name><argument_list pos:line="237" pos:column="14">(<argument><expr><name pos:line="237" pos:column="15">data<pos:position pos:line="237" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="237" pos:column="21">"bind(port=%hu) failed: %s"<pos:position pos:line="237" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="237" pos:column="50">port<pos:position pos:line="237" pos:column="54"/></name></expr></argument>,
              <argument><expr><call><name pos:line="238" pos:column="15">Curl_strerror<pos:position pos:line="238" pos:column="28"/></name><argument_list pos:line="238" pos:column="28">(<argument><expr><name pos:line="238" pos:column="29">conn<pos:position pos:line="238" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="35">error<pos:position pos:line="238" pos:column="40"/></name></expr></argument>)<pos:position pos:line="238" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="238" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="239" pos:column="9">Curl_closesocket<pos:position pos:line="239" pos:column="25"/></name><argument_list pos:line="239" pos:column="25">(<argument><expr><name pos:line="239" pos:column="26">conn<pos:position pos:line="239" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="239" pos:column="32">portsock<pos:position pos:line="239" pos:column="40"/></name></expr></argument>)<pos:position pos:line="239" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="42"/></expr_stmt>
        <return pos:line="240" pos:column="9">return <expr><name pos:line="240" pos:column="16">CURLE_FTP_PORT_FAILED<pos:position pos:line="240" pos:column="37"/></name></expr>;<pos:position pos:line="240" pos:column="38"/></return>
      }<pos:position pos:line="241" pos:column="8"/></block></then></if>
    }<pos:position pos:line="242" pos:column="6"/></block></then>
    <else pos:line="243" pos:column="5">else
      <block type="pseudo"><break pos:line="244" pos:column="7">break;<pos:position pos:line="244" pos:column="13"/></break></block></else></if>

    <expr_stmt><expr><name pos:line="246" pos:column="5">port<pos:position pos:line="246" pos:column="9"/></name><operator pos:line="246" pos:column="9">++<pos:position pos:line="246" pos:column="11"/></operator></expr>;<pos:position pos:line="246" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="247" pos:column="4"/></block></for>

  <comment type="block" pos:line="249" pos:column="3">/* maybe all ports were in use already*/</comment>
  <if pos:line="250" pos:column="3">if<condition pos:line="250" pos:column="5">(<expr><name pos:line="250" pos:column="6">port<pos:position pos:line="250" pos:column="10"/></name> <operator pos:line="250" pos:column="11">&gt;<pos:position pos:line="250" pos:column="15"/></operator> <name pos:line="250" pos:column="13">port_max<pos:position pos:line="250" pos:column="21"/></name></expr>)<pos:position pos:line="250" pos:column="22"/></condition><then pos:line="250" pos:column="22"> <block pos:line="250" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="251" pos:column="5">failf<pos:position pos:line="251" pos:column="10"/></name><argument_list pos:line="251" pos:column="10">(<argument><expr><name pos:line="251" pos:column="11">data<pos:position pos:line="251" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="251" pos:column="17">"bind() failed, we ran out of ports!"<pos:position pos:line="251" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="251" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="252" pos:column="5">Curl_closesocket<pos:position pos:line="252" pos:column="21"/></name><argument_list pos:line="252" pos:column="21">(<argument><expr><name pos:line="252" pos:column="22">conn<pos:position pos:line="252" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="28">portsock<pos:position pos:line="252" pos:column="36"/></name></expr></argument>)<pos:position pos:line="252" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="38"/></expr_stmt>
    <return pos:line="253" pos:column="5">return <expr><name pos:line="253" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="253" pos:column="33"/></name></expr>;<pos:position pos:line="253" pos:column="34"/></return>
  }<pos:position pos:line="254" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="256" pos:column="3">/* get the name again after the bind() so that we can extract the
     port number it uses now */</comment>
  <expr_stmt><expr><name pos:line="258" pos:column="3">sslen<pos:position pos:line="258" pos:column="8"/></name> <operator pos:line="258" pos:column="9">=<pos:position pos:line="258" pos:column="10"/></operator> <sizeof pos:line="258" pos:column="11">sizeof<argument_list pos:line="258" pos:column="17">(<argument><expr><name pos:line="258" pos:column="18">ss<pos:position pos:line="258" pos:column="20"/></name></expr></argument>)<pos:position pos:line="258" pos:column="21"/></argument_list></sizeof></expr>;<pos:position pos:line="258" pos:column="22"/></expr_stmt>
  <if pos:line="259" pos:column="3">if<condition pos:line="259" pos:column="5">(<expr><call><name pos:line="259" pos:column="6">getsockname<pos:position pos:line="259" pos:column="17"/></name><argument_list pos:line="259" pos:column="17">(<argument><expr><name pos:line="259" pos:column="18">portsock<pos:position pos:line="259" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="259" pos:column="28">(<pos:position pos:line="259" pos:column="29"/></operator>struct <name pos:line="259" pos:column="36">sockaddr<pos:position pos:line="259" pos:column="44"/></name> <operator pos:line="259" pos:column="45">*<pos:position pos:line="259" pos:column="46"/></operator><operator pos:line="259" pos:column="46">)<pos:position pos:line="259" pos:column="47"/></operator><name pos:line="259" pos:column="47">sa<pos:position pos:line="259" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="259" pos:column="51">&amp;<pos:position pos:line="259" pos:column="56"/></operator><name pos:line="259" pos:column="52">sslen<pos:position pos:line="259" pos:column="57"/></name></expr></argument>)<pos:position pos:line="259" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="259" pos:column="59"/></condition><then pos:line="259" pos:column="59"> <block pos:line="259" pos:column="60">{
    <expr_stmt><expr><call><name pos:line="260" pos:column="5">failf<pos:position pos:line="260" pos:column="10"/></name><argument_list pos:line="260" pos:column="10">(<argument><expr><name pos:line="260" pos:column="11">data<pos:position pos:line="260" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="260" pos:column="17">"getsockname() failed: %s"<pos:position pos:line="260" pos:column="43"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="261" pos:column="11">Curl_strerror<pos:position pos:line="261" pos:column="24"/></name><argument_list pos:line="261" pos:column="24">(<argument><expr><name pos:line="261" pos:column="25">conn<pos:position pos:line="261" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="261" pos:column="31">SOCKERRNO<pos:position pos:line="261" pos:column="40"/></name></expr></argument>)<pos:position pos:line="261" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="261" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="262" pos:column="5">Curl_closesocket<pos:position pos:line="262" pos:column="21"/></name><argument_list pos:line="262" pos:column="21">(<argument><expr><name pos:line="262" pos:column="22">conn<pos:position pos:line="262" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="262" pos:column="28">portsock<pos:position pos:line="262" pos:column="36"/></name></expr></argument>)<pos:position pos:line="262" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="38"/></expr_stmt>
    <return pos:line="263" pos:column="5">return <expr><name pos:line="263" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="263" pos:column="33"/></name></expr>;<pos:position pos:line="263" pos:column="34"/></return>
  }<pos:position pos:line="264" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="266" pos:column="3">/* step 4, listen on the socket */</comment>

  <if pos:line="268" pos:column="3">if<condition pos:line="268" pos:column="5">(<expr><call><name pos:line="268" pos:column="6">listen<pos:position pos:line="268" pos:column="12"/></name><argument_list pos:line="268" pos:column="12">(<argument><expr><name pos:line="268" pos:column="13">portsock<pos:position pos:line="268" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="268" pos:column="23">1<pos:position pos:line="268" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="268" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="268" pos:column="26"/></condition><then pos:line="268" pos:column="26"> <block pos:line="268" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="269" pos:column="5">failf<pos:position pos:line="269" pos:column="10"/></name><argument_list pos:line="269" pos:column="10">(<argument><expr><name pos:line="269" pos:column="11">data<pos:position pos:line="269" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="269" pos:column="17">"socket failure: %s"<pos:position pos:line="269" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="269" pos:column="39">Curl_strerror<pos:position pos:line="269" pos:column="52"/></name><argument_list pos:line="269" pos:column="52">(<argument><expr><name pos:line="269" pos:column="53">conn<pos:position pos:line="269" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="269" pos:column="59">SOCKERRNO<pos:position pos:line="269" pos:column="68"/></name></expr></argument>)<pos:position pos:line="269" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="269" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="270" pos:column="5">Curl_closesocket<pos:position pos:line="270" pos:column="21"/></name><argument_list pos:line="270" pos:column="21">(<argument><expr><name pos:line="270" pos:column="22">conn<pos:position pos:line="270" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="28">portsock<pos:position pos:line="270" pos:column="36"/></name></expr></argument>)<pos:position pos:line="270" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="38"/></expr_stmt>
    <return pos:line="271" pos:column="5">return <expr><name pos:line="271" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="271" pos:column="33"/></name></expr>;<pos:position pos:line="271" pos:column="34"/></return>
  }<pos:position pos:line="272" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="274" pos:column="3">/* step 5, send the proper FTP command */</comment>

  <comment type="block" pos:line="276" pos:column="3">/* get a plain printable version of the numerical address to work with
     below */</comment>
  <expr_stmt><expr><call><name pos:line="278" pos:column="3">Curl_printable_address<pos:position pos:line="278" pos:column="25"/></name><argument_list pos:line="278" pos:column="25">(<argument><expr><name pos:line="278" pos:column="26">ai<pos:position pos:line="278" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="278" pos:column="30">myhost<pos:position pos:line="278" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="278" pos:column="38">sizeof<argument_list pos:line="278" pos:column="44">(<argument><expr><name pos:line="278" pos:column="45">myhost<pos:position pos:line="278" pos:column="51"/></name></expr></argument>)<pos:position pos:line="278" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="278" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="278" pos:column="54"/></expr_stmt>

<cpp:ifdef pos:line="280" pos:column="1">#<cpp:directive pos:line="280" pos:column="2">ifdef<pos:position pos:line="280" pos:column="7"/></cpp:directive> <name pos:line="280" pos:column="8">ENABLE_IPV6<pos:position pos:line="280" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="281" pos:column="3">if<condition pos:line="281" pos:column="5">(<expr><operator pos:line="281" pos:column="6">!<pos:position pos:line="281" pos:column="7"/></operator><name><name pos:line="281" pos:column="7">conn<pos:position pos:line="281" pos:column="11"/></name><operator pos:line="281" pos:column="11">-&gt;<pos:position pos:line="281" pos:column="16"/></operator><name pos:line="281" pos:column="13">bits<pos:position pos:line="281" pos:column="17"/></name><operator pos:line="281" pos:column="17">.<pos:position pos:line="281" pos:column="18"/></operator><name pos:line="281" pos:column="18">ftp_use_eprt<pos:position pos:line="281" pos:column="30"/></name></name> <operator pos:line="281" pos:column="31">&amp;&amp;<pos:position pos:line="281" pos:column="41"/></operator> <name><name pos:line="281" pos:column="34">conn<pos:position pos:line="281" pos:column="38"/></name><operator pos:line="281" pos:column="38">-&gt;<pos:position pos:line="281" pos:column="43"/></operator><name pos:line="281" pos:column="40">bits<pos:position pos:line="281" pos:column="44"/></name><operator pos:line="281" pos:column="44">.<pos:position pos:line="281" pos:column="45"/></operator><name pos:line="281" pos:column="45">ipv6<pos:position pos:line="281" pos:column="49"/></name></name></expr>)<pos:position pos:line="281" pos:column="50"/></condition><then pos:line="281" pos:column="50">
    <comment type="block" pos:line="282" pos:column="5">/* EPRT is disabled but we are connected to a IPv6 host, so we ignore the
       request and enable EPRT again! */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="284" pos:column="5">conn<pos:position pos:line="284" pos:column="9"/></name><operator pos:line="284" pos:column="9">-&gt;<pos:position pos:line="284" pos:column="14"/></operator><name pos:line="284" pos:column="11">bits<pos:position pos:line="284" pos:column="15"/></name><operator pos:line="284" pos:column="15">.<pos:position pos:line="284" pos:column="16"/></operator><name pos:line="284" pos:column="16">ftp_use_eprt<pos:position pos:line="284" pos:column="28"/></name></name> <operator pos:line="284" pos:column="29">=<pos:position pos:line="284" pos:column="30"/></operator> <name pos:line="284" pos:column="31">TRUE<pos:position pos:line="284" pos:column="35"/></name></expr>;<pos:position pos:line="284" pos:column="36"/></expr_stmt></block></then></if>
<cpp:endif pos:line="285" pos:column="1">#<cpp:directive pos:line="285" pos:column="2">endif<pos:position pos:line="285" pos:column="7"/></cpp:directive></cpp:endif>

  <for pos:line="287" pos:column="3">for<control pos:line="287" pos:column="6">(<init pos:line="287" pos:column="7">;<pos:position pos:line="287" pos:column="8"/></init> <condition><expr><name pos:line="287" pos:column="9">fcmd<pos:position pos:line="287" pos:column="13"/></name> <operator pos:line="287" pos:column="14">!=<pos:position pos:line="287" pos:column="16"/></operator> <name pos:line="287" pos:column="17">DONE<pos:position pos:line="287" pos:column="21"/></name></expr>;<pos:position pos:line="287" pos:column="22"/></condition> <incr><expr><name pos:line="287" pos:column="23">fcmd<pos:position pos:line="287" pos:column="27"/></name><operator pos:line="287" pos:column="27">++<pos:position pos:line="287" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="287" pos:column="30"/></control> <block pos:line="287" pos:column="31">{

    <if pos:line="289" pos:column="5">if<condition pos:line="289" pos:column="7">(<expr><operator pos:line="289" pos:column="8">!<pos:position pos:line="289" pos:column="9"/></operator><name><name pos:line="289" pos:column="9">conn<pos:position pos:line="289" pos:column="13"/></name><operator pos:line="289" pos:column="13">-&gt;<pos:position pos:line="289" pos:column="18"/></operator><name pos:line="289" pos:column="15">bits<pos:position pos:line="289" pos:column="19"/></name><operator pos:line="289" pos:column="19">.<pos:position pos:line="289" pos:column="20"/></operator><name pos:line="289" pos:column="20">ftp_use_eprt<pos:position pos:line="289" pos:column="32"/></name></name> <operator pos:line="289" pos:column="33">&amp;&amp;<pos:position pos:line="289" pos:column="43"/></operator> <operator pos:line="289" pos:column="36">(<pos:position pos:line="289" pos:column="37"/></operator><name pos:line="289" pos:column="37">EPRT<pos:position pos:line="289" pos:column="41"/></name> <operator pos:line="289" pos:column="42">==<pos:position pos:line="289" pos:column="44"/></operator> <name pos:line="289" pos:column="45">fcmd<pos:position pos:line="289" pos:column="49"/></name><operator pos:line="289" pos:column="49">)<pos:position pos:line="289" pos:column="50"/></operator></expr>)<pos:position pos:line="289" pos:column="51"/></condition><then pos:line="289" pos:column="51">
      <comment type="block" pos:line="290" pos:column="7">/* if disabled, goto next */</comment>
      <block type="pseudo"><continue pos:line="291" pos:column="7">continue;<pos:position pos:line="291" pos:column="16"/></continue></block></then></if>

    <if pos:line="293" pos:column="5">if<condition pos:line="293" pos:column="7">(<expr><operator pos:line="293" pos:column="8">(<pos:position pos:line="293" pos:column="9"/></operator><name pos:line="293" pos:column="9">PORT<pos:position pos:line="293" pos:column="13"/></name> <operator pos:line="293" pos:column="14">==<pos:position pos:line="293" pos:column="16"/></operator> <name pos:line="293" pos:column="17">fcmd<pos:position pos:line="293" pos:column="21"/></name><operator pos:line="293" pos:column="21">)<pos:position pos:line="293" pos:column="22"/></operator> <operator pos:line="293" pos:column="23">&amp;&amp;<pos:position pos:line="293" pos:column="33"/></operator> <name><name pos:line="293" pos:column="26">sa<pos:position pos:line="293" pos:column="28"/></name><operator pos:line="293" pos:column="28">-&gt;<pos:position pos:line="293" pos:column="33"/></operator><name pos:line="293" pos:column="30">sa_family<pos:position pos:line="293" pos:column="39"/></name></name> <operator pos:line="293" pos:column="40">!=<pos:position pos:line="293" pos:column="42"/></operator> <name pos:line="293" pos:column="43">AF_INET<pos:position pos:line="293" pos:column="50"/></name></expr>)<pos:position pos:line="293" pos:column="51"/></condition><then pos:line="293" pos:column="51">
      <comment type="block" pos:line="294" pos:column="7">/* PORT is IPv4 only */</comment>
      <block type="pseudo"><continue pos:line="295" pos:column="7">continue;<pos:position pos:line="295" pos:column="16"/></continue></block></then></if>

    <switch pos:line="297" pos:column="5">switch<condition pos:line="297" pos:column="11">(<expr><name><name pos:line="297" pos:column="12">sa<pos:position pos:line="297" pos:column="14"/></name><operator pos:line="297" pos:column="14">-&gt;<pos:position pos:line="297" pos:column="19"/></operator><name pos:line="297" pos:column="16">sa_family<pos:position pos:line="297" pos:column="25"/></name></name></expr>)<pos:position pos:line="297" pos:column="26"/></condition> <block pos:line="297" pos:column="27">{
    <case pos:line="298" pos:column="5">case <expr><name pos:line="298" pos:column="10">AF_INET<pos:position pos:line="298" pos:column="17"/></name></expr>:<pos:position pos:line="298" pos:column="18"/></case>
      <expr_stmt><expr><name pos:line="299" pos:column="7">port<pos:position pos:line="299" pos:column="11"/></name> <operator pos:line="299" pos:column="12">=<pos:position pos:line="299" pos:column="13"/></operator> <call><name pos:line="299" pos:column="14">ntohs<pos:position pos:line="299" pos:column="19"/></name><argument_list pos:line="299" pos:column="19">(<argument><expr><name><name pos:line="299" pos:column="20">sa4<pos:position pos:line="299" pos:column="23"/></name><operator pos:line="299" pos:column="23">-&gt;<pos:position pos:line="299" pos:column="28"/></operator><name pos:line="299" pos:column="25">sin_port<pos:position pos:line="299" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="299" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="299" pos:column="35"/></expr_stmt>
      <break pos:line="300" pos:column="7">break;<pos:position pos:line="300" pos:column="13"/></break>
<cpp:ifdef pos:line="301" pos:column="1">#<cpp:directive pos:line="301" pos:column="2">ifdef<pos:position pos:line="301" pos:column="7"/></cpp:directive> <name pos:line="301" pos:column="8">ENABLE_IPV6<pos:position pos:line="301" pos:column="19"/></name></cpp:ifdef>
    <case pos:line="302" pos:column="5">case <expr><name pos:line="302" pos:column="10">AF_INET6<pos:position pos:line="302" pos:column="18"/></name></expr>:<pos:position pos:line="302" pos:column="19"/></case>
      <expr_stmt><expr><name pos:line="303" pos:column="7">port<pos:position pos:line="303" pos:column="11"/></name> <operator pos:line="303" pos:column="12">=<pos:position pos:line="303" pos:column="13"/></operator> <call><name pos:line="303" pos:column="14">ntohs<pos:position pos:line="303" pos:column="19"/></name><argument_list pos:line="303" pos:column="19">(<argument><expr><name><name pos:line="303" pos:column="20">sa6<pos:position pos:line="303" pos:column="23"/></name><operator pos:line="303" pos:column="23">-&gt;<pos:position pos:line="303" pos:column="28"/></operator><name pos:line="303" pos:column="25">sin6_port<pos:position pos:line="303" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="303" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="303" pos:column="36"/></expr_stmt>
      <break pos:line="304" pos:column="7">break;<pos:position pos:line="304" pos:column="13"/></break>
<cpp:endif pos:line="305" pos:column="1">#<cpp:directive pos:line="305" pos:column="2">endif<pos:position pos:line="305" pos:column="7"/></cpp:directive></cpp:endif>
    <default pos:line="306" pos:column="5">default:<pos:position pos:line="306" pos:column="13"/></default>
      <continue pos:line="307" pos:column="7">continue;<pos:position pos:line="307" pos:column="16"/></continue> <comment type="block" pos:line="307" pos:column="17">/* might as well skip this */</comment>
    }<pos:position pos:line="308" pos:column="6"/></block></switch>

    <if pos:line="310" pos:column="5">if<condition pos:line="310" pos:column="7">(<expr><name pos:line="310" pos:column="8">EPRT<pos:position pos:line="310" pos:column="12"/></name> <operator pos:line="310" pos:column="13">==<pos:position pos:line="310" pos:column="15"/></operator> <name pos:line="310" pos:column="16">fcmd<pos:position pos:line="310" pos:column="20"/></name></expr>)<pos:position pos:line="310" pos:column="21"/></condition><then pos:line="310" pos:column="21"> <block pos:line="310" pos:column="22">{
      <comment type="block" pos:line="311" pos:column="7">/*
       * Two fine examples from RFC2428;
       *
       * EPRT |1|132.235.1.2|6275|
       *
       * EPRT |2|1080::8:800:200C:417A|5282|
       */</comment>

      <expr_stmt><expr><name pos:line="319" pos:column="7">result<pos:position pos:line="319" pos:column="13"/></name> <operator pos:line="319" pos:column="14">=<pos:position pos:line="319" pos:column="15"/></operator> <call><name pos:line="319" pos:column="16">Curl_pp_sendf<pos:position pos:line="319" pos:column="29"/></name><argument_list pos:line="319" pos:column="29">(<argument><expr><operator pos:line="319" pos:column="30">&amp;<pos:position pos:line="319" pos:column="35"/></operator><name><name pos:line="319" pos:column="31">ftpc<pos:position pos:line="319" pos:column="35"/></name><operator pos:line="319" pos:column="35">-&gt;<pos:position pos:line="319" pos:column="40"/></operator><name pos:line="319" pos:column="37">pp<pos:position pos:line="319" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="319" pos:column="41">"%s |%d|%s|%hu|"<pos:position pos:line="319" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="319" pos:column="59">mode<pos:position pos:line="319" pos:column="63"/></name><index pos:line="319" pos:column="63">[<expr><name pos:line="319" pos:column="64">fcmd<pos:position pos:line="319" pos:column="68"/></name></expr>]<pos:position pos:line="319" pos:column="69"/></index></name></expr></argument>,
                             <argument><expr><ternary><condition><expr><name><name pos:line="320" pos:column="30">sa<pos:position pos:line="320" pos:column="32"/></name><operator pos:line="320" pos:column="32">-&gt;<pos:position pos:line="320" pos:column="37"/></operator><name pos:line="320" pos:column="34">sa_family<pos:position pos:line="320" pos:column="43"/></name></name> <operator pos:line="320" pos:column="44">==<pos:position pos:line="320" pos:column="46"/></operator> <name pos:line="320" pos:column="47">AF_INET<pos:position pos:line="320" pos:column="54"/></name></expr>?<pos:position pos:line="320" pos:column="55"/></condition><then><expr><literal type="number" pos:line="320" pos:column="55">1<pos:position pos:line="320" pos:column="56"/></literal></expr></then><else pos:line="320" pos:column="56">:<expr><literal type="number" pos:line="320" pos:column="57">2<pos:position pos:line="320" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
                             <argument><expr><name pos:line="321" pos:column="30">myhost<pos:position pos:line="321" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="38">port<pos:position pos:line="321" pos:column="42"/></name></expr></argument>)<pos:position pos:line="321" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="44"/></expr_stmt>
      <if pos:line="322" pos:column="7">if<condition pos:line="322" pos:column="9">(<expr><name pos:line="322" pos:column="10">result<pos:position pos:line="322" pos:column="16"/></name></expr>)<pos:position pos:line="322" pos:column="17"/></condition><then pos:line="322" pos:column="17"> <block pos:line="322" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="323" pos:column="9">failf<pos:position pos:line="323" pos:column="14"/></name><argument_list pos:line="323" pos:column="14">(<argument><expr><name pos:line="323" pos:column="15">data<pos:position pos:line="323" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="323" pos:column="21">"Failure sending EPRT command: %s"<pos:position pos:line="323" pos:column="55"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="324" pos:column="15">curl_easy_strerror<pos:position pos:line="324" pos:column="33"/></name><argument_list pos:line="324" pos:column="33">(<argument><expr><name pos:line="324" pos:column="34">result<pos:position pos:line="324" pos:column="40"/></name></expr></argument>)<pos:position pos:line="324" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="324" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="325" pos:column="9">Curl_closesocket<pos:position pos:line="325" pos:column="25"/></name><argument_list pos:line="325" pos:column="25">(<argument><expr><name pos:line="325" pos:column="26">conn<pos:position pos:line="325" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="325" pos:column="32">portsock<pos:position pos:line="325" pos:column="40"/></name></expr></argument>)<pos:position pos:line="325" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="42"/></expr_stmt>
        <comment type="block" pos:line="326" pos:column="9">/* don't retry using PORT */</comment>
        <expr_stmt><expr><name><name pos:line="327" pos:column="9">ftpc<pos:position pos:line="327" pos:column="13"/></name><operator pos:line="327" pos:column="13">-&gt;<pos:position pos:line="327" pos:column="18"/></operator><name pos:line="327" pos:column="15">count1<pos:position pos:line="327" pos:column="21"/></name></name> <operator pos:line="327" pos:column="22">=<pos:position pos:line="327" pos:column="23"/></operator> <name pos:line="327" pos:column="24">PORT<pos:position pos:line="327" pos:column="28"/></name></expr>;<pos:position pos:line="327" pos:column="29"/></expr_stmt>
        <comment type="block" pos:line="328" pos:column="9">/* bail out */</comment>
        <expr_stmt><expr><call><name pos:line="329" pos:column="9">state<pos:position pos:line="329" pos:column="14"/></name><argument_list pos:line="329" pos:column="14">(<argument><expr><name pos:line="329" pos:column="15">conn<pos:position pos:line="329" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="329" pos:column="21">FTP_STOP<pos:position pos:line="329" pos:column="29"/></name></expr></argument>)<pos:position pos:line="329" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="329" pos:column="31"/></expr_stmt>
        <return pos:line="330" pos:column="9">return <expr><name pos:line="330" pos:column="16">result<pos:position pos:line="330" pos:column="22"/></name></expr>;<pos:position pos:line="330" pos:column="23"/></return>
      }<pos:position pos:line="331" pos:column="8"/></block></then></if>
      <break pos:line="332" pos:column="7">break;<pos:position pos:line="332" pos:column="13"/></break>
    }<pos:position pos:line="333" pos:column="6"/></block></then></if>
    <if pos:line="334" pos:column="5">if<condition pos:line="334" pos:column="7">(<expr><name pos:line="334" pos:column="8">PORT<pos:position pos:line="334" pos:column="12"/></name> <operator pos:line="334" pos:column="13">==<pos:position pos:line="334" pos:column="15"/></operator> <name pos:line="334" pos:column="16">fcmd<pos:position pos:line="334" pos:column="20"/></name></expr>)<pos:position pos:line="334" pos:column="21"/></condition><then pos:line="334" pos:column="21"> <block pos:line="334" pos:column="22">{
      <decl_stmt><decl><type><name pos:line="335" pos:column="7">char<pos:position pos:line="335" pos:column="11"/></name> <modifier pos:line="335" pos:column="12">*<pos:position pos:line="335" pos:column="13"/></modifier></type><name pos:line="335" pos:column="13">source<pos:position pos:line="335" pos:column="19"/></name> <init pos:line="335" pos:column="20">= <expr><name pos:line="335" pos:column="22">myhost<pos:position pos:line="335" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="335" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="336" pos:column="7">char<pos:position pos:line="336" pos:column="11"/></name> <modifier pos:line="336" pos:column="12">*<pos:position pos:line="336" pos:column="13"/></modifier></type><name pos:line="336" pos:column="13">dest<pos:position pos:line="336" pos:column="17"/></name> <init pos:line="336" pos:column="18">= <expr><name pos:line="336" pos:column="20">tmp<pos:position pos:line="336" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="336" pos:column="24"/></decl_stmt>

      <comment type="block" pos:line="338" pos:column="7">/* translate x.x.x.x to x,x,x,x */</comment>
      <while pos:line="339" pos:column="7">while<condition pos:line="339" pos:column="12">(<expr><name pos:line="339" pos:column="13">source<pos:position pos:line="339" pos:column="19"/></name> <operator pos:line="339" pos:column="20">&amp;&amp;<pos:position pos:line="339" pos:column="30"/></operator> <operator pos:line="339" pos:column="23">*<pos:position pos:line="339" pos:column="24"/></operator><name pos:line="339" pos:column="24">source<pos:position pos:line="339" pos:column="30"/></name></expr>)<pos:position pos:line="339" pos:column="31"/></condition> <block pos:line="339" pos:column="32">{
        <if pos:line="340" pos:column="9">if<condition pos:line="340" pos:column="11">(<expr><operator pos:line="340" pos:column="12">*<pos:position pos:line="340" pos:column="13"/></operator><name pos:line="340" pos:column="13">source<pos:position pos:line="340" pos:column="19"/></name> <operator pos:line="340" pos:column="20">==<pos:position pos:line="340" pos:column="22"/></operator> <literal type="char" pos:line="340" pos:column="23">'.'<pos:position pos:line="340" pos:column="26"/></literal></expr>)<pos:position pos:line="340" pos:column="27"/></condition><then pos:line="340" pos:column="27">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="341" pos:column="11">*<pos:position pos:line="341" pos:column="12"/></operator><name pos:line="341" pos:column="12">dest<pos:position pos:line="341" pos:column="16"/></name> <operator pos:line="341" pos:column="17">=<pos:position pos:line="341" pos:column="18"/></operator> <literal type="char" pos:line="341" pos:column="19">','<pos:position pos:line="341" pos:column="22"/></literal></expr>;<pos:position pos:line="341" pos:column="23"/></expr_stmt></block></then>
        <else pos:line="342" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><operator pos:line="343" pos:column="11">*<pos:position pos:line="343" pos:column="12"/></operator><name pos:line="343" pos:column="12">dest<pos:position pos:line="343" pos:column="16"/></name> <operator pos:line="343" pos:column="17">=<pos:position pos:line="343" pos:column="18"/></operator> <operator pos:line="343" pos:column="19">*<pos:position pos:line="343" pos:column="20"/></operator><name pos:line="343" pos:column="20">source<pos:position pos:line="343" pos:column="26"/></name></expr>;<pos:position pos:line="343" pos:column="27"/></expr_stmt></block></else></if>
        <expr_stmt><expr><name pos:line="344" pos:column="9">dest<pos:position pos:line="344" pos:column="13"/></name><operator pos:line="344" pos:column="13">++<pos:position pos:line="344" pos:column="15"/></operator></expr>;<pos:position pos:line="344" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="345" pos:column="9">source<pos:position pos:line="345" pos:column="15"/></name><operator pos:line="345" pos:column="15">++<pos:position pos:line="345" pos:column="17"/></operator></expr>;<pos:position pos:line="345" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="346" pos:column="8"/></block></while>
      <expr_stmt><expr><operator pos:line="347" pos:column="7">*<pos:position pos:line="347" pos:column="8"/></operator><name pos:line="347" pos:column="8">dest<pos:position pos:line="347" pos:column="12"/></name> <operator pos:line="347" pos:column="13">=<pos:position pos:line="347" pos:column="14"/></operator> <literal type="number" pos:line="347" pos:column="15">0<pos:position pos:line="347" pos:column="16"/></literal></expr>;<pos:position pos:line="347" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="348" pos:column="7">snprintf<pos:position pos:line="348" pos:column="15"/></name><argument_list pos:line="348" pos:column="15">(<argument><expr><name pos:line="348" pos:column="16">dest<pos:position pos:line="348" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="348" pos:column="22">20<pos:position pos:line="348" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="348" pos:column="26">",%d,%d"<pos:position pos:line="348" pos:column="34"/></literal></expr></argument>, <argument><expr><call pos:line="348" pos:column="36">(<name pos:line="348" pos:column="37">int<pos:position pos:line="348" pos:column="40"/></name>)<argument_list pos:line="348" pos:column="41">(<argument><expr><name pos:line="348" pos:column="42">port<pos:position pos:line="348" pos:column="46"/></name><operator pos:line="348" pos:column="46">&gt;&gt;<pos:position pos:line="348" pos:column="51"/></operator><literal type="number" pos:line="348" pos:column="48">8<pos:position pos:line="348" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="348" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call pos:line="348" pos:column="52">(<name pos:line="348" pos:column="53">int<pos:position pos:line="348" pos:column="56"/></name>)<argument_list pos:line="348" pos:column="57">(<argument><expr><name pos:line="348" pos:column="58">port<pos:position pos:line="348" pos:column="62"/></name><operator pos:line="348" pos:column="62">&amp;<pos:position pos:line="348" pos:column="67"/></operator><literal type="number" pos:line="348" pos:column="63">0xff<pos:position pos:line="348" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="348" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="348" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="70"/></expr_stmt>

      <expr_stmt><expr><name pos:line="350" pos:column="7">result<pos:position pos:line="350" pos:column="13"/></name> <operator pos:line="350" pos:column="14">=<pos:position pos:line="350" pos:column="15"/></operator> <call><name pos:line="350" pos:column="16">Curl_pp_sendf<pos:position pos:line="350" pos:column="29"/></name><argument_list pos:line="350" pos:column="29">(<argument><expr><operator pos:line="350" pos:column="30">&amp;<pos:position pos:line="350" pos:column="35"/></operator><name><name pos:line="350" pos:column="31">ftpc<pos:position pos:line="350" pos:column="35"/></name><operator pos:line="350" pos:column="35">-&gt;<pos:position pos:line="350" pos:column="40"/></operator><name pos:line="350" pos:column="37">pp<pos:position pos:line="350" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="350" pos:column="41">"%s %s"<pos:position pos:line="350" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="350" pos:column="50">mode<pos:position pos:line="350" pos:column="54"/></name><index pos:line="350" pos:column="54">[<expr><name pos:line="350" pos:column="55">fcmd<pos:position pos:line="350" pos:column="59"/></name></expr>]<pos:position pos:line="350" pos:column="60"/></index></name></expr></argument>, <argument><expr><name pos:line="350" pos:column="62">tmp<pos:position pos:line="350" pos:column="65"/></name></expr></argument>)<pos:position pos:line="350" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="350" pos:column="67"/></expr_stmt>
      <if pos:line="351" pos:column="7">if<condition pos:line="351" pos:column="9">(<expr><name pos:line="351" pos:column="10">result<pos:position pos:line="351" pos:column="16"/></name></expr>)<pos:position pos:line="351" pos:column="17"/></condition><then pos:line="351" pos:column="17"> <block pos:line="351" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="352" pos:column="9">failf<pos:position pos:line="352" pos:column="14"/></name><argument_list pos:line="352" pos:column="14">(<argument><expr><name pos:line="352" pos:column="15">data<pos:position pos:line="352" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="352" pos:column="21">"Failure sending PORT command: %s"<pos:position pos:line="352" pos:column="55"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="353" pos:column="15">curl_easy_strerror<pos:position pos:line="353" pos:column="33"/></name><argument_list pos:line="353" pos:column="33">(<argument><expr><name pos:line="353" pos:column="34">result<pos:position pos:line="353" pos:column="40"/></name></expr></argument>)<pos:position pos:line="353" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="353" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="353" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="354" pos:column="9">Curl_closesocket<pos:position pos:line="354" pos:column="25"/></name><argument_list pos:line="354" pos:column="25">(<argument><expr><name pos:line="354" pos:column="26">conn<pos:position pos:line="354" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="354" pos:column="32">portsock<pos:position pos:line="354" pos:column="40"/></name></expr></argument>)<pos:position pos:line="354" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="354" pos:column="42"/></expr_stmt>
        <comment type="block" pos:line="355" pos:column="9">/* bail out */</comment>
        <expr_stmt><expr><call><name pos:line="356" pos:column="9">state<pos:position pos:line="356" pos:column="14"/></name><argument_list pos:line="356" pos:column="14">(<argument><expr><name pos:line="356" pos:column="15">conn<pos:position pos:line="356" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="356" pos:column="21">FTP_STOP<pos:position pos:line="356" pos:column="29"/></name></expr></argument>)<pos:position pos:line="356" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="356" pos:column="31"/></expr_stmt>
        <return pos:line="357" pos:column="9">return <expr><name pos:line="357" pos:column="16">result<pos:position pos:line="357" pos:column="22"/></name></expr>;<pos:position pos:line="357" pos:column="23"/></return>
      }<pos:position pos:line="358" pos:column="8"/></block></then></if>
      <break pos:line="359" pos:column="7">break;<pos:position pos:line="359" pos:column="13"/></break>
    }<pos:position pos:line="360" pos:column="6"/></block></then></if>
  }<pos:position pos:line="361" pos:column="4"/></block></for>

  <comment type="block" pos:line="363" pos:column="3">/* store which command was sent */</comment>
  <expr_stmt><expr><name><name pos:line="364" pos:column="3">ftpc<pos:position pos:line="364" pos:column="7"/></name><operator pos:line="364" pos:column="7">-&gt;<pos:position pos:line="364" pos:column="12"/></operator><name pos:line="364" pos:column="9">count1<pos:position pos:line="364" pos:column="15"/></name></name> <operator pos:line="364" pos:column="16">=<pos:position pos:line="364" pos:column="17"/></operator> <name pos:line="364" pos:column="18">fcmd<pos:position pos:line="364" pos:column="22"/></name></expr>;<pos:position pos:line="364" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="366" pos:column="3">close_secondarysocket<pos:position pos:line="366" pos:column="24"/></name><argument_list pos:line="366" pos:column="24">(<argument><expr><name pos:line="366" pos:column="25">conn<pos:position pos:line="366" pos:column="29"/></name></expr></argument>)<pos:position pos:line="366" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="366" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="368" pos:column="3">/* we set the secondary socket variable to this for now, it is only so that
     the cleanup function will close it in case we fail before the true
     secondary stuff is made */</comment>
  <expr_stmt><expr><name><name pos:line="371" pos:column="3">conn<pos:position pos:line="371" pos:column="7"/></name><operator pos:line="371" pos:column="7">-&gt;<pos:position pos:line="371" pos:column="12"/></operator><name pos:line="371" pos:column="9">sock<pos:position pos:line="371" pos:column="13"/></name><index pos:line="371" pos:column="13">[<expr><name pos:line="371" pos:column="14">SECONDARYSOCKET<pos:position pos:line="371" pos:column="29"/></name></expr>]<pos:position pos:line="371" pos:column="30"/></index></name> <operator pos:line="371" pos:column="31">=<pos:position pos:line="371" pos:column="32"/></operator> <name pos:line="371" pos:column="33">portsock<pos:position pos:line="371" pos:column="41"/></name></expr>;<pos:position pos:line="371" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="373" pos:column="3">/* this tcpconnect assignment below is a hackish work-around to make the
     multi interface with active FTP work - as it will not wait for a
     (passive) connect in Curl_is_connected().

     The *proper* fix is to make sure that the active connection from the
     server is done in a non-blocking way. Currently, it is still BLOCKING.
  */</comment>
  <expr_stmt><expr><name><name pos:line="380" pos:column="3">conn<pos:position pos:line="380" pos:column="7"/></name><operator pos:line="380" pos:column="7">-&gt;<pos:position pos:line="380" pos:column="12"/></operator><name pos:line="380" pos:column="9">bits<pos:position pos:line="380" pos:column="13"/></name><operator pos:line="380" pos:column="13">.<pos:position pos:line="380" pos:column="14"/></operator><name pos:line="380" pos:column="14">tcpconnect<pos:position pos:line="380" pos:column="24"/></name><index pos:line="380" pos:column="24">[<expr><name pos:line="380" pos:column="25">SECONDARYSOCKET<pos:position pos:line="380" pos:column="40"/></name></expr>]<pos:position pos:line="380" pos:column="41"/></index></name> <operator pos:line="380" pos:column="42">=<pos:position pos:line="380" pos:column="43"/></operator> <name pos:line="380" pos:column="44">TRUE<pos:position pos:line="380" pos:column="48"/></name></expr>;<pos:position pos:line="380" pos:column="49"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="382" pos:column="3">state<pos:position pos:line="382" pos:column="8"/></name><argument_list pos:line="382" pos:column="8">(<argument><expr><name pos:line="382" pos:column="9">conn<pos:position pos:line="382" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="382" pos:column="15">FTP_PORT<pos:position pos:line="382" pos:column="23"/></name></expr></argument>)<pos:position pos:line="382" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="382" pos:column="25"/></expr_stmt>
  <return pos:line="383" pos:column="3">return <expr><name pos:line="383" pos:column="10">result<pos:position pos:line="383" pos:column="16"/></name></expr>;<pos:position pos:line="383" pos:column="17"/></return>
}<pos:position pos:line="384" pos:column="2"/></block></function></unit>
