<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1891_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ftp_readresp<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">curl_socket_t<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">sockfd<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                             <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">pingpong<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">pp<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">ftpcode<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>, <comment type="block" pos:line="3" pos:column="44">/* return the ftp-code if done */</comment>
                             <parameter><decl><type><name pos:line="4" pos:column="30">size_t<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">size<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="43"/></parameter_list> <comment type="block" pos:line="4" pos:column="44">/* size of the response */</comment>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">connectdata<pos:position pos:line="6" pos:column="21"/></name></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">conn<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name><name pos:line="6" pos:column="30">pp<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">conn<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_easy<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">data<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name><name pos:line="7" pos:column="28">conn<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">data<pos:position pos:line="7" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">HAVE_GSSAPI<pos:position pos:line="8" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier> <specifier pos:line="9" pos:column="10">const<pos:position pos:line="9" pos:column="15"/></specifier></type> <name pos:line="9" pos:column="16">buf<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><name><name pos:line="9" pos:column="22">data<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">-&gt;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="28">state<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">.<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">buffer<pos:position pos:line="9" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="41"/></decl_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLcode<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">result<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><name pos:line="11" pos:column="21">CURLE_OK<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">code<pos:position pos:line="12" pos:column="11"/></name></decl>;<pos:position pos:line="12" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">result<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">Curl_pp_readresp<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">sockfd<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">pp<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="41">&amp;<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="42">code<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">size<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><call><name pos:line="16" pos:column="5">defined<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">HAVE_GSSAPI<pos:position pos:line="16" pos:column="24"/></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="17" pos:column="3">/* handle the security-oriented responses 6xx ***/</comment>
  <comment type="block" pos:line="18" pos:column="3">/* FIXME: some errorchecking perhaps... ***/</comment>
  <switch pos:line="19" pos:column="3">switch<condition pos:line="19" pos:column="9">(<expr><name pos:line="19" pos:column="10">code<pos:position pos:line="19" pos:column="14"/></name></expr>)<pos:position pos:line="19" pos:column="15"/></condition> <block pos:line="19" pos:column="16">{
  <case pos:line="20" pos:column="3">case <expr><literal type="number" pos:line="20" pos:column="8">631<pos:position pos:line="20" pos:column="11"/></literal></expr>:<pos:position pos:line="20" pos:column="12"/></case>
    <expr_stmt><expr><name pos:line="21" pos:column="5">code<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <call><name pos:line="21" pos:column="12">Curl_sec_read_msg<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">conn<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">buf<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">PROT_SAFE<pos:position pos:line="21" pos:column="50"/></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
    <break pos:line="22" pos:column="5">break;<pos:position pos:line="22" pos:column="11"/></break>
  <case pos:line="23" pos:column="3">case <expr><literal type="number" pos:line="23" pos:column="8">632<pos:position pos:line="23" pos:column="11"/></literal></expr>:<pos:position pos:line="23" pos:column="12"/></case>
    <expr_stmt><expr><name pos:line="24" pos:column="5">code<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">Curl_sec_read_msg<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">conn<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="36">buf<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">PROT_PRIVATE<pos:position pos:line="24" pos:column="53"/></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
    <break pos:line="25" pos:column="5">break;<pos:position pos:line="25" pos:column="11"/></break>
  <case pos:line="26" pos:column="3">case <expr><literal type="number" pos:line="26" pos:column="8">633<pos:position pos:line="26" pos:column="11"/></literal></expr>:<pos:position pos:line="26" pos:column="12"/></case>
    <expr_stmt><expr><name pos:line="27" pos:column="5">code<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <call><name pos:line="27" pos:column="12">Curl_sec_read_msg<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">conn<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="36">buf<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="41">PROT_CONFIDENTIAL<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="60"/></expr_stmt>
    <break pos:line="28" pos:column="5">break;<pos:position pos:line="28" pos:column="11"/></break>
  <default pos:line="29" pos:column="3">default:<pos:position pos:line="29" pos:column="11"/></default>
    <comment type="block" pos:line="30" pos:column="5">/* normal ftp stuff we pass through! */</comment>
    <break pos:line="31" pos:column="5">break;<pos:position pos:line="31" pos:column="11"/></break>
  }<pos:position pos:line="32" pos:column="4"/></block></switch>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="35" pos:column="3">/* store the latest code for later retrieval */</comment>
  <expr_stmt><expr><name><name pos:line="36" pos:column="3">data<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">-&gt;<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="9">info<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">.<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">httpcode<pos:position pos:line="36" pos:column="22"/></name></name> <operator pos:line="36" pos:column="23">=<pos:position pos:line="36" pos:column="24"/></operator> <name pos:line="36" pos:column="25">code<pos:position pos:line="36" pos:column="29"/></name></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>

  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><name pos:line="38" pos:column="6">ftpcode<pos:position pos:line="38" pos:column="13"/></name></expr>)<pos:position pos:line="38" pos:column="14"/></condition><then pos:line="38" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="39" pos:column="5">*<pos:position pos:line="39" pos:column="6"/></operator><name pos:line="39" pos:column="6">ftpcode<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <name pos:line="39" pos:column="16">code<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt></block></then></if>

  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><literal type="number" pos:line="41" pos:column="6">421<pos:position pos:line="41" pos:column="9"/></literal> <operator pos:line="41" pos:column="10">==<pos:position pos:line="41" pos:column="12"/></operator> <name pos:line="41" pos:column="13">code<pos:position pos:line="41" pos:column="17"/></name></expr>)<pos:position pos:line="41" pos:column="18"/></condition><then pos:line="41" pos:column="18"> <block pos:line="41" pos:column="19">{
    <comment type="block" pos:line="42" pos:column="5">/* 421 means "Service not available, closing control connection." and FTP
     * servers use it to signal that idle session timeout has been exceeded.
     * If we ignored the response, it could end up hanging in some cases.
     *
     * This response code can come at any point so having it treated
     * generically is a good idea.
     */</comment>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">infof<pos:position pos:line="49" pos:column="10"/></name><argument_list pos:line="49" pos:column="10">(<argument><expr><name pos:line="49" pos:column="11">data<pos:position pos:line="49" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="17">"We got a 421 - timeout!\n"<pos:position pos:line="49" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">state<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><name pos:line="50" pos:column="11">conn<pos:position pos:line="50" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="17">FTP_STOP<pos:position pos:line="50" pos:column="25"/></name></expr></argument>)<pos:position pos:line="50" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt>
    <return pos:line="51" pos:column="5">return <expr><name pos:line="51" pos:column="12">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="51" pos:column="36"/></name></expr>;<pos:position pos:line="51" pos:column="37"/></return>
  }<pos:position pos:line="52" pos:column="4"/></block></then></if>

  <return pos:line="54" pos:column="3">return <expr><name pos:line="54" pos:column="10">result<pos:position pos:line="54" pos:column="16"/></name></expr>;<pos:position pos:line="54" pos:column="17"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
