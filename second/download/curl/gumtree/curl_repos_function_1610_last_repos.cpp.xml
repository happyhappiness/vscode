<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1610_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLMcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">curl_multi_wait<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">Curl_multi<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">multi<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                          <parameter><decl><type><name><name pos:line="2" pos:column="27">struct<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">curl_waitfd<pos:position pos:line="2" pos:column="45"/></name></name></type> <name><name pos:line="2" pos:column="46">extra_fds<pos:position pos:line="2" pos:column="55"/></name><index pos:line="2" pos:column="55">[]<pos:position pos:line="2" pos:column="57"/></index></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="3" pos:column="27">unsigned<pos:position pos:line="3" pos:column="35"/></name> <name pos:line="3" pos:column="36">int<pos:position pos:line="3" pos:column="39"/></name></type> <name pos:line="3" pos:column="40">extra_nfds<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="4" pos:column="27">int<pos:position pos:line="4" pos:column="30"/></name></type> <name pos:line="4" pos:column="31">timeout_ms<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="5" pos:column="27">int<pos:position pos:line="5" pos:column="30"/></name> <modifier pos:line="5" pos:column="31">*<pos:position pos:line="5" pos:column="32"/></modifier></type><name pos:line="5" pos:column="32">ret<pos:position pos:line="5" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="36"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_easy<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">data<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socket_t<pos:position pos:line="8" pos:column="16"/></name></type> <name><name pos:line="8" pos:column="17">sockbunch<pos:position pos:line="8" pos:column="26"/></name><index pos:line="8" pos:column="26">[<expr><name pos:line="8" pos:column="27">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="8" pos:column="49"/></name></expr>]<pos:position pos:line="8" pos:column="50"/></index></name></decl>;<pos:position pos:line="8" pos:column="51"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">bitmap<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">int<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">i<pos:position pos:line="10" pos:column="17"/></name></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">int<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">nfds<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><literal type="number" pos:line="11" pos:column="23">0<pos:position pos:line="11" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">unsigned<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">int<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">curlfds<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">pollfd<pos:position pos:line="13" pos:column="16"/></name></name> <modifier pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></modifier></type><name pos:line="13" pos:column="18">ufds<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><name pos:line="13" pos:column="25">NULL<pos:position pos:line="13" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">bool<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">ufds_malloc<pos:position pos:line="14" pos:column="19"/></name> <init pos:line="14" pos:column="20">= <expr><name pos:line="14" pos:column="22">FALSE<pos:position pos:line="14" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">long<pos:position pos:line="15" pos:column="7"/></name></type> <name pos:line="15" pos:column="8">timeout_internal<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">retcode<pos:position pos:line="16" pos:column="14"/></name> <init pos:line="16" pos:column="15">= <expr><literal type="number" pos:line="16" pos:column="17">0<pos:position pos:line="16" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">pollfd<pos:position pos:line="17" pos:column="16"/></name></name></type> <name><name pos:line="17" pos:column="17">a_few_on_stack<pos:position pos:line="17" pos:column="31"/></name><index pos:line="17" pos:column="31">[<expr><name pos:line="17" pos:column="32">NUM_POLLS_ON_STACK<pos:position pos:line="17" pos:column="50"/></name></expr>]<pos:position pos:line="17" pos:column="51"/></index></name></decl>;<pos:position pos:line="17" pos:column="52"/></decl_stmt>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><call><name pos:line="19" pos:column="7">GOOD_MULTI_HANDLE<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">multi<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">CURLM_BAD_HANDLE<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></return></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* If the internally desired timeout is actually shorter than requested from
     the outside, then use the shorter time! But only if the internal timer
     is actually larger than -1! */</comment>
  <expr_stmt><expr><operator pos:line="25" pos:column="3">(<pos:position pos:line="25" pos:column="4"/></operator><name pos:line="25" pos:column="4">void<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">)<pos:position pos:line="25" pos:column="9"/></operator><call><name pos:line="25" pos:column="9">multi_timeout<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">multi<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="30">&amp;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="31">timeout_internal<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">(<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">timeout_internal<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">&gt;=<pos:position pos:line="26" pos:column="29"/></operator> <literal type="number" pos:line="26" pos:column="27">0<pos:position pos:line="26" pos:column="28"/></literal><operator pos:line="26" pos:column="28">)<pos:position pos:line="26" pos:column="29"/></operator> <operator pos:line="26" pos:column="30">&amp;&amp;<pos:position pos:line="26" pos:column="40"/></operator> <operator pos:line="26" pos:column="33">(<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">timeout_internal<pos:position pos:line="26" pos:column="50"/></name> <operator pos:line="26" pos:column="51">&lt;<pos:position pos:line="26" pos:column="55"/></operator> <operator pos:line="26" pos:column="53">(<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="54">long<pos:position pos:line="26" pos:column="58"/></name><operator pos:line="26" pos:column="58">)<pos:position pos:line="26" pos:column="59"/></operator><name pos:line="26" pos:column="59">timeout_ms<pos:position pos:line="26" pos:column="69"/></name><operator pos:line="26" pos:column="69">)<pos:position pos:line="26" pos:column="70"/></operator></expr>)<pos:position pos:line="26" pos:column="71"/></condition><then pos:line="26" pos:column="71">
    <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="5">timeout_ms<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <operator pos:line="27" pos:column="18">(<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">int<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">)<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">timeout_internal<pos:position pos:line="27" pos:column="39"/></name></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="29" pos:column="3">/* Count up how many fds we have from the multi handle */</comment>
  <expr_stmt><expr><name pos:line="30" pos:column="3">data<pos:position pos:line="30" pos:column="7"/></name> <operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator> <name><name pos:line="30" pos:column="10">multi<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">-&gt;<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="17">easyp<pos:position pos:line="30" pos:column="22"/></name></name></expr>;<pos:position pos:line="30" pos:column="23"/></expr_stmt>
  <while pos:line="31" pos:column="3">while<condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">data<pos:position pos:line="31" pos:column="13"/></name></expr>)<pos:position pos:line="31" pos:column="14"/></condition> <block pos:line="31" pos:column="15">{
    <expr_stmt><expr><name pos:line="32" pos:column="5">bitmap<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">multi_getsock<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">data<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="34">sockbunch<pos:position pos:line="32" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="45">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="32" pos:column="67"/></name></expr></argument>)<pos:position pos:line="32" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="69"/></expr_stmt>

    <for pos:line="34" pos:column="5">for<control pos:line="34" pos:column="8">(<init><expr><name pos:line="34" pos:column="9">i<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <literal type="number" pos:line="34" pos:column="13">0<pos:position pos:line="34" pos:column="14"/></literal></expr>;<pos:position pos:line="34" pos:column="15"/></init> <condition><expr><name pos:line="34" pos:column="16">i<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">&lt;<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="19">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="34" pos:column="41"/></name></expr>;<pos:position pos:line="34" pos:column="42"/></condition> <incr><expr><name pos:line="34" pos:column="43">i<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">++<pos:position pos:line="34" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="47"/></control> <block pos:line="34" pos:column="48">{
      <decl_stmt><decl><type><name pos:line="35" pos:column="7">curl_socket_t<pos:position pos:line="35" pos:column="20"/></name></type> <name pos:line="35" pos:column="21">s<pos:position pos:line="35" pos:column="22"/></name> <init pos:line="35" pos:column="23">= <expr><name pos:line="35" pos:column="25">CURL_SOCKET_BAD<pos:position pos:line="35" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="41"/></decl_stmt>

      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><name pos:line="37" pos:column="10">bitmap<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">&amp;<pos:position pos:line="37" pos:column="22"/></operator> <call><name pos:line="37" pos:column="19">GETSOCK_READSOCK<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">i<pos:position pos:line="37" pos:column="37"/></name></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="39"/></condition><then pos:line="37" pos:column="39"> <block pos:line="37" pos:column="40">{
        <expr_stmt><expr><operator pos:line="38" pos:column="9">++<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">nfds<pos:position pos:line="38" pos:column="15"/></name></expr>;<pos:position pos:line="38" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">s<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <name><name pos:line="39" pos:column="13">sockbunch<pos:position pos:line="39" pos:column="22"/></name><index pos:line="39" pos:column="22">[<expr><name pos:line="39" pos:column="23">i<pos:position pos:line="39" pos:column="24"/></name></expr>]<pos:position pos:line="39" pos:column="25"/></index></name></expr>;<pos:position pos:line="39" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></then></if>
      <if pos:line="41" pos:column="7">if<condition pos:line="41" pos:column="9">(<expr><name pos:line="41" pos:column="10">bitmap<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">&amp;<pos:position pos:line="41" pos:column="22"/></operator> <call><name pos:line="41" pos:column="19">GETSOCK_WRITESOCK<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">i<pos:position pos:line="41" pos:column="38"/></name></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="40"/></condition><then pos:line="41" pos:column="40"> <block pos:line="41" pos:column="41">{
        <expr_stmt><expr><operator pos:line="42" pos:column="9">++<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="11">nfds<pos:position pos:line="42" pos:column="15"/></name></expr>;<pos:position pos:line="42" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="43" pos:column="9">s<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <name><name pos:line="43" pos:column="13">sockbunch<pos:position pos:line="43" pos:column="22"/></name><index pos:line="43" pos:column="22">[<expr><name pos:line="43" pos:column="23">i<pos:position pos:line="43" pos:column="24"/></name></expr>]<pos:position pos:line="43" pos:column="25"/></index></name></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="44" pos:column="8"/></block></then></if>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><name pos:line="45" pos:column="10">s<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">==<pos:position pos:line="45" pos:column="14"/></operator> <name pos:line="45" pos:column="15">CURL_SOCKET_BAD<pos:position pos:line="45" pos:column="30"/></name></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
        <break pos:line="46" pos:column="9">break;<pos:position pos:line="46" pos:column="15"/></break>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if>
    }<pos:position pos:line="48" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="50" pos:column="5">data<pos:position pos:line="50" pos:column="9"/></name> <operator pos:line="50" pos:column="10">=<pos:position pos:line="50" pos:column="11"/></operator> <name><name pos:line="50" pos:column="12">data<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">-&gt;<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="18">next<pos:position pos:line="50" pos:column="22"/></name></name></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt> <comment type="block" pos:line="50" pos:column="24">/* check next handle */</comment>
  }<pos:position pos:line="51" pos:column="4"/></block></while>

  <expr_stmt><expr><name pos:line="53" pos:column="3">curlfds<pos:position pos:line="53" pos:column="10"/></name> <operator pos:line="53" pos:column="11">=<pos:position pos:line="53" pos:column="12"/></operator> <name pos:line="53" pos:column="13">nfds<pos:position pos:line="53" pos:column="17"/></name></expr>;<pos:position pos:line="53" pos:column="18"/></expr_stmt> <comment type="block" pos:line="53" pos:column="19">/* number of internal file descriptors */</comment>
  <expr_stmt><expr><name pos:line="54" pos:column="3">nfds<pos:position pos:line="54" pos:column="7"/></name> <operator pos:line="54" pos:column="8">+=<pos:position pos:line="54" pos:column="10"/></operator> <name pos:line="54" pos:column="11">extra_nfds<pos:position pos:line="54" pos:column="21"/></name></expr>;<pos:position pos:line="54" pos:column="22"/></expr_stmt> <comment type="block" pos:line="54" pos:column="23">/* add the externally provided ones */</comment>

  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><name pos:line="56" pos:column="6">nfds<pos:position pos:line="56" pos:column="10"/></name></expr>)<pos:position pos:line="56" pos:column="11"/></condition><then pos:line="56" pos:column="11"> <block pos:line="56" pos:column="12">{
    <if pos:line="57" pos:column="5">if<condition pos:line="57" pos:column="7">(<expr><name pos:line="57" pos:column="8">nfds<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">&gt;<pos:position pos:line="57" pos:column="17"/></operator> <name pos:line="57" pos:column="15">NUM_POLLS_ON_STACK<pos:position pos:line="57" pos:column="33"/></name></expr>)<pos:position pos:line="57" pos:column="34"/></condition><then pos:line="57" pos:column="34"> <block pos:line="57" pos:column="35">{
      <comment type="block" pos:line="58" pos:column="7">/* 'nfds' is a 32 bit value and 'struct pollfd' is typically 8 bytes
         big, so at 2^29 sockets this value might wrap. When a process gets
         the capability to actually handle over 500 million sockets this
         calculation needs a integer overflow check. */</comment>
      <expr_stmt><expr><name pos:line="62" pos:column="7">ufds<pos:position pos:line="62" pos:column="11"/></name> <operator pos:line="62" pos:column="12">=<pos:position pos:line="62" pos:column="13"/></operator> <call><name pos:line="62" pos:column="14">malloc<pos:position pos:line="62" pos:column="20"/></name><argument_list pos:line="62" pos:column="20">(<argument><expr><name pos:line="62" pos:column="21">nfds<pos:position pos:line="62" pos:column="25"/></name> <operator pos:line="62" pos:column="26">*<pos:position pos:line="62" pos:column="27"/></operator> <sizeof pos:line="62" pos:column="28">sizeof<argument_list pos:line="62" pos:column="34">(<argument><expr pos:line="62" pos:column="35">struct <name pos:line="62" pos:column="42">pollfd<pos:position pos:line="62" pos:column="48"/></name></expr></argument>)<pos:position pos:line="62" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="62" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="51"/></expr_stmt>
      <if pos:line="63" pos:column="7">if<condition pos:line="63" pos:column="9">(<expr><operator pos:line="63" pos:column="10">!<pos:position pos:line="63" pos:column="11"/></operator><name pos:line="63" pos:column="11">ufds<pos:position pos:line="63" pos:column="15"/></name></expr>)<pos:position pos:line="63" pos:column="16"/></condition><then pos:line="63" pos:column="16">
        <block type="pseudo"><return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">CURLM_OUT_OF_MEMORY<pos:position pos:line="64" pos:column="35"/></name></expr>;<pos:position pos:line="64" pos:column="36"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="65" pos:column="7">ufds_malloc<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">=<pos:position pos:line="65" pos:column="20"/></operator> <name pos:line="65" pos:column="21">TRUE<pos:position pos:line="65" pos:column="25"/></name></expr>;<pos:position pos:line="65" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></then>
    <else pos:line="67" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="7">ufds<pos:position pos:line="68" pos:column="11"/></name> <operator pos:line="68" pos:column="12">=<pos:position pos:line="68" pos:column="13"/></operator> <operator pos:line="68" pos:column="14">&amp;<pos:position pos:line="68" pos:column="19"/></operator><name><name pos:line="68" pos:column="15">a_few_on_stack<pos:position pos:line="68" pos:column="29"/></name><index pos:line="68" pos:column="29">[<expr><literal type="number" pos:line="68" pos:column="30">0<pos:position pos:line="68" pos:column="31"/></literal></expr>]<pos:position pos:line="68" pos:column="32"/></index></name></expr>;<pos:position pos:line="68" pos:column="33"/></expr_stmt></block></else></if>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="70" pos:column="3">nfds<pos:position pos:line="70" pos:column="7"/></name> <operator pos:line="70" pos:column="8">=<pos:position pos:line="70" pos:column="9"/></operator> <literal type="number" pos:line="70" pos:column="10">0<pos:position pos:line="70" pos:column="11"/></literal></expr>;<pos:position pos:line="70" pos:column="12"/></expr_stmt>

  <comment type="block" pos:line="72" pos:column="3">/* only do the second loop if we found descriptors in the first stage run
     above */</comment>

  <if pos:line="75" pos:column="3">if<condition pos:line="75" pos:column="5">(<expr><name pos:line="75" pos:column="6">curlfds<pos:position pos:line="75" pos:column="13"/></name></expr>)<pos:position pos:line="75" pos:column="14"/></condition><then pos:line="75" pos:column="14"> <block pos:line="75" pos:column="15">{
    <comment type="block" pos:line="76" pos:column="5">/* Add the curl handles to our pollfds first */</comment>
    <expr_stmt><expr><name pos:line="77" pos:column="5">data<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">=<pos:position pos:line="77" pos:column="11"/></operator> <name><name pos:line="77" pos:column="12">multi<pos:position pos:line="77" pos:column="17"/></name><operator pos:line="77" pos:column="17">-&gt;<pos:position pos:line="77" pos:column="22"/></operator><name pos:line="77" pos:column="19">easyp<pos:position pos:line="77" pos:column="24"/></name></name></expr>;<pos:position pos:line="77" pos:column="25"/></expr_stmt>
    <while pos:line="78" pos:column="5">while<condition pos:line="78" pos:column="10">(<expr><name pos:line="78" pos:column="11">data<pos:position pos:line="78" pos:column="15"/></name></expr>)<pos:position pos:line="78" pos:column="16"/></condition> <block pos:line="78" pos:column="17">{
      <expr_stmt><expr><name pos:line="79" pos:column="7">bitmap<pos:position pos:line="79" pos:column="13"/></name> <operator pos:line="79" pos:column="14">=<pos:position pos:line="79" pos:column="15"/></operator> <call><name pos:line="79" pos:column="16">multi_getsock<pos:position pos:line="79" pos:column="29"/></name><argument_list pos:line="79" pos:column="29">(<argument><expr><name pos:line="79" pos:column="30">data<pos:position pos:line="79" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="36">sockbunch<pos:position pos:line="79" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="47">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="79" pos:column="69"/></name></expr></argument>)<pos:position pos:line="79" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="71"/></expr_stmt>

      <for pos:line="81" pos:column="7">for<control pos:line="81" pos:column="10">(<init><expr><name pos:line="81" pos:column="11">i<pos:position pos:line="81" pos:column="12"/></name> <operator pos:line="81" pos:column="13">=<pos:position pos:line="81" pos:column="14"/></operator> <literal type="number" pos:line="81" pos:column="15">0<pos:position pos:line="81" pos:column="16"/></literal></expr>;<pos:position pos:line="81" pos:column="17"/></init> <condition><expr><name pos:line="81" pos:column="18">i<pos:position pos:line="81" pos:column="19"/></name><operator pos:line="81" pos:column="19">&lt;<pos:position pos:line="81" pos:column="23"/></operator> <name pos:line="81" pos:column="21">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="81" pos:column="43"/></name></expr>;<pos:position pos:line="81" pos:column="44"/></condition> <incr><expr><name pos:line="81" pos:column="45">i<pos:position pos:line="81" pos:column="46"/></name><operator pos:line="81" pos:column="46">++<pos:position pos:line="81" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="81" pos:column="49"/></control> <block pos:line="81" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="82" pos:column="9">curl_socket_t<pos:position pos:line="82" pos:column="22"/></name></type> <name pos:line="82" pos:column="23">s<pos:position pos:line="82" pos:column="24"/></name> <init pos:line="82" pos:column="25">= <expr><name pos:line="82" pos:column="27">CURL_SOCKET_BAD<pos:position pos:line="82" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="82" pos:column="43"/></decl_stmt>

        <if pos:line="84" pos:column="9">if<condition pos:line="84" pos:column="11">(<expr><name pos:line="84" pos:column="12">bitmap<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">&amp;<pos:position pos:line="84" pos:column="24"/></operator> <call><name pos:line="84" pos:column="21">GETSOCK_READSOCK<pos:position pos:line="84" pos:column="37"/></name><argument_list pos:line="84" pos:column="37">(<argument><expr><name pos:line="84" pos:column="38">i<pos:position pos:line="84" pos:column="39"/></name></expr></argument>)<pos:position pos:line="84" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="41"/></condition><then pos:line="84" pos:column="41"> <block pos:line="84" pos:column="42">{
          <expr_stmt><expr><name><name pos:line="85" pos:column="11">ufds<pos:position pos:line="85" pos:column="15"/></name><index pos:line="85" pos:column="15">[<expr><name pos:line="85" pos:column="16">nfds<pos:position pos:line="85" pos:column="20"/></name></expr>]<pos:position pos:line="85" pos:column="21"/></index></name><operator pos:line="85" pos:column="21">.<pos:position pos:line="85" pos:column="22"/></operator><name pos:line="85" pos:column="22">fd<pos:position pos:line="85" pos:column="24"/></name> <operator pos:line="85" pos:column="25">=<pos:position pos:line="85" pos:column="26"/></operator> <name><name pos:line="85" pos:column="27">sockbunch<pos:position pos:line="85" pos:column="36"/></name><index pos:line="85" pos:column="36">[<expr><name pos:line="85" pos:column="37">i<pos:position pos:line="85" pos:column="38"/></name></expr>]<pos:position pos:line="85" pos:column="39"/></index></name></expr>;<pos:position pos:line="85" pos:column="40"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="86" pos:column="11">ufds<pos:position pos:line="86" pos:column="15"/></name><index pos:line="86" pos:column="15">[<expr><name pos:line="86" pos:column="16">nfds<pos:position pos:line="86" pos:column="20"/></name></expr>]<pos:position pos:line="86" pos:column="21"/></index></name><operator pos:line="86" pos:column="21">.<pos:position pos:line="86" pos:column="22"/></operator><name pos:line="86" pos:column="22">events<pos:position pos:line="86" pos:column="28"/></name> <operator pos:line="86" pos:column="29">=<pos:position pos:line="86" pos:column="30"/></operator> <name pos:line="86" pos:column="31">POLLIN<pos:position pos:line="86" pos:column="37"/></name></expr>;<pos:position pos:line="86" pos:column="38"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="87" pos:column="11">++<pos:position pos:line="87" pos:column="13"/></operator><name pos:line="87" pos:column="13">nfds<pos:position pos:line="87" pos:column="17"/></name></expr>;<pos:position pos:line="87" pos:column="18"/></expr_stmt>
          <expr_stmt><expr><name pos:line="88" pos:column="11">s<pos:position pos:line="88" pos:column="12"/></name> <operator pos:line="88" pos:column="13">=<pos:position pos:line="88" pos:column="14"/></operator> <name><name pos:line="88" pos:column="15">sockbunch<pos:position pos:line="88" pos:column="24"/></name><index pos:line="88" pos:column="24">[<expr><name pos:line="88" pos:column="25">i<pos:position pos:line="88" pos:column="26"/></name></expr>]<pos:position pos:line="88" pos:column="27"/></index></name></expr>;<pos:position pos:line="88" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="89" pos:column="10"/></block></then></if>
        <if pos:line="90" pos:column="9">if<condition pos:line="90" pos:column="11">(<expr><name pos:line="90" pos:column="12">bitmap<pos:position pos:line="90" pos:column="18"/></name> <operator pos:line="90" pos:column="19">&amp;<pos:position pos:line="90" pos:column="24"/></operator> <call><name pos:line="90" pos:column="21">GETSOCK_WRITESOCK<pos:position pos:line="90" pos:column="38"/></name><argument_list pos:line="90" pos:column="38">(<argument><expr><name pos:line="90" pos:column="39">i<pos:position pos:line="90" pos:column="40"/></name></expr></argument>)<pos:position pos:line="90" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="42"/></condition><then pos:line="90" pos:column="42"> <block pos:line="90" pos:column="43">{
          <expr_stmt><expr><name><name pos:line="91" pos:column="11">ufds<pos:position pos:line="91" pos:column="15"/></name><index pos:line="91" pos:column="15">[<expr><name pos:line="91" pos:column="16">nfds<pos:position pos:line="91" pos:column="20"/></name></expr>]<pos:position pos:line="91" pos:column="21"/></index></name><operator pos:line="91" pos:column="21">.<pos:position pos:line="91" pos:column="22"/></operator><name pos:line="91" pos:column="22">fd<pos:position pos:line="91" pos:column="24"/></name> <operator pos:line="91" pos:column="25">=<pos:position pos:line="91" pos:column="26"/></operator> <name><name pos:line="91" pos:column="27">sockbunch<pos:position pos:line="91" pos:column="36"/></name><index pos:line="91" pos:column="36">[<expr><name pos:line="91" pos:column="37">i<pos:position pos:line="91" pos:column="38"/></name></expr>]<pos:position pos:line="91" pos:column="39"/></index></name></expr>;<pos:position pos:line="91" pos:column="40"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="92" pos:column="11">ufds<pos:position pos:line="92" pos:column="15"/></name><index pos:line="92" pos:column="15">[<expr><name pos:line="92" pos:column="16">nfds<pos:position pos:line="92" pos:column="20"/></name></expr>]<pos:position pos:line="92" pos:column="21"/></index></name><operator pos:line="92" pos:column="21">.<pos:position pos:line="92" pos:column="22"/></operator><name pos:line="92" pos:column="22">events<pos:position pos:line="92" pos:column="28"/></name> <operator pos:line="92" pos:column="29">=<pos:position pos:line="92" pos:column="30"/></operator> <name pos:line="92" pos:column="31">POLLOUT<pos:position pos:line="92" pos:column="38"/></name></expr>;<pos:position pos:line="92" pos:column="39"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="93" pos:column="11">++<pos:position pos:line="93" pos:column="13"/></operator><name pos:line="93" pos:column="13">nfds<pos:position pos:line="93" pos:column="17"/></name></expr>;<pos:position pos:line="93" pos:column="18"/></expr_stmt>
          <expr_stmt><expr><name pos:line="94" pos:column="11">s<pos:position pos:line="94" pos:column="12"/></name> <operator pos:line="94" pos:column="13">=<pos:position pos:line="94" pos:column="14"/></operator> <name><name pos:line="94" pos:column="15">sockbunch<pos:position pos:line="94" pos:column="24"/></name><index pos:line="94" pos:column="24">[<expr><name pos:line="94" pos:column="25">i<pos:position pos:line="94" pos:column="26"/></name></expr>]<pos:position pos:line="94" pos:column="27"/></index></name></expr>;<pos:position pos:line="94" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="95" pos:column="10"/></block></then></if>
        <if pos:line="96" pos:column="9">if<condition pos:line="96" pos:column="11">(<expr><name pos:line="96" pos:column="12">s<pos:position pos:line="96" pos:column="13"/></name> <operator pos:line="96" pos:column="14">==<pos:position pos:line="96" pos:column="16"/></operator> <name pos:line="96" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="96" pos:column="32"/></name></expr>)<pos:position pos:line="96" pos:column="33"/></condition><then pos:line="96" pos:column="33"> <block pos:line="96" pos:column="34">{
          <break pos:line="97" pos:column="11">break;<pos:position pos:line="97" pos:column="17"/></break>
        }<pos:position pos:line="98" pos:column="10"/></block></then></if>
      }<pos:position pos:line="99" pos:column="8"/></block></for>

      <expr_stmt><expr><name pos:line="101" pos:column="7">data<pos:position pos:line="101" pos:column="11"/></name> <operator pos:line="101" pos:column="12">=<pos:position pos:line="101" pos:column="13"/></operator> <name><name pos:line="101" pos:column="14">data<pos:position pos:line="101" pos:column="18"/></name><operator pos:line="101" pos:column="18">-&gt;<pos:position pos:line="101" pos:column="23"/></operator><name pos:line="101" pos:column="20">next<pos:position pos:line="101" pos:column="24"/></name></name></expr>;<pos:position pos:line="101" pos:column="25"/></expr_stmt> <comment type="block" pos:line="101" pos:column="26">/* check next handle */</comment>
    }<pos:position pos:line="102" pos:column="6"/></block></while>
  }<pos:position pos:line="103" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="105" pos:column="3">/* Add external file descriptions from poll-like struct curl_waitfd */</comment>
  <for pos:line="106" pos:column="3">for<control pos:line="106" pos:column="6">(<init><expr><name pos:line="106" pos:column="7">i<pos:position pos:line="106" pos:column="8"/></name> <operator pos:line="106" pos:column="9">=<pos:position pos:line="106" pos:column="10"/></operator> <literal type="number" pos:line="106" pos:column="11">0<pos:position pos:line="106" pos:column="12"/></literal></expr>;<pos:position pos:line="106" pos:column="13"/></init> <condition><expr><name pos:line="106" pos:column="14">i<pos:position pos:line="106" pos:column="15"/></name> <operator pos:line="106" pos:column="16">&lt;<pos:position pos:line="106" pos:column="20"/></operator> <name pos:line="106" pos:column="18">extra_nfds<pos:position pos:line="106" pos:column="28"/></name></expr>;<pos:position pos:line="106" pos:column="29"/></condition> <incr><expr><name pos:line="106" pos:column="30">i<pos:position pos:line="106" pos:column="31"/></name><operator pos:line="106" pos:column="31">++<pos:position pos:line="106" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="106" pos:column="34"/></control> <block pos:line="106" pos:column="35">{
    <expr_stmt><expr><name><name pos:line="107" pos:column="5">ufds<pos:position pos:line="107" pos:column="9"/></name><index pos:line="107" pos:column="9">[<expr><name pos:line="107" pos:column="10">nfds<pos:position pos:line="107" pos:column="14"/></name></expr>]<pos:position pos:line="107" pos:column="15"/></index></name><operator pos:line="107" pos:column="15">.<pos:position pos:line="107" pos:column="16"/></operator><name pos:line="107" pos:column="16">fd<pos:position pos:line="107" pos:column="18"/></name> <operator pos:line="107" pos:column="19">=<pos:position pos:line="107" pos:column="20"/></operator> <name><name pos:line="107" pos:column="21">extra_fds<pos:position pos:line="107" pos:column="30"/></name><index pos:line="107" pos:column="30">[<expr><name pos:line="107" pos:column="31">i<pos:position pos:line="107" pos:column="32"/></name></expr>]<pos:position pos:line="107" pos:column="33"/></index></name><operator pos:line="107" pos:column="33">.<pos:position pos:line="107" pos:column="34"/></operator><name pos:line="107" pos:column="34">fd<pos:position pos:line="107" pos:column="36"/></name></expr>;<pos:position pos:line="107" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="108" pos:column="5">ufds<pos:position pos:line="108" pos:column="9"/></name><index pos:line="108" pos:column="9">[<expr><name pos:line="108" pos:column="10">nfds<pos:position pos:line="108" pos:column="14"/></name></expr>]<pos:position pos:line="108" pos:column="15"/></index></name><operator pos:line="108" pos:column="15">.<pos:position pos:line="108" pos:column="16"/></operator><name pos:line="108" pos:column="16">events<pos:position pos:line="108" pos:column="22"/></name> <operator pos:line="108" pos:column="23">=<pos:position pos:line="108" pos:column="24"/></operator> <literal type="number" pos:line="108" pos:column="25">0<pos:position pos:line="108" pos:column="26"/></literal></expr>;<pos:position pos:line="108" pos:column="27"/></expr_stmt>
    <if pos:line="109" pos:column="5">if<condition pos:line="109" pos:column="7">(<expr><name><name pos:line="109" pos:column="8">extra_fds<pos:position pos:line="109" pos:column="17"/></name><index pos:line="109" pos:column="17">[<expr><name pos:line="109" pos:column="18">i<pos:position pos:line="109" pos:column="19"/></name></expr>]<pos:position pos:line="109" pos:column="20"/></index></name><operator pos:line="109" pos:column="20">.<pos:position pos:line="109" pos:column="21"/></operator><name pos:line="109" pos:column="21">events<pos:position pos:line="109" pos:column="27"/></name> <operator pos:line="109" pos:column="28">&amp;<pos:position pos:line="109" pos:column="33"/></operator> <name pos:line="109" pos:column="30">CURL_WAIT_POLLIN<pos:position pos:line="109" pos:column="46"/></name></expr>)<pos:position pos:line="109" pos:column="47"/></condition><then pos:line="109" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="110" pos:column="7">ufds<pos:position pos:line="110" pos:column="11"/></name><index pos:line="110" pos:column="11">[<expr><name pos:line="110" pos:column="12">nfds<pos:position pos:line="110" pos:column="16"/></name></expr>]<pos:position pos:line="110" pos:column="17"/></index></name><operator pos:line="110" pos:column="17">.<pos:position pos:line="110" pos:column="18"/></operator><name pos:line="110" pos:column="18">events<pos:position pos:line="110" pos:column="24"/></name> <operator pos:line="110" pos:column="25">|=<pos:position pos:line="110" pos:column="27"/></operator> <name pos:line="110" pos:column="28">POLLIN<pos:position pos:line="110" pos:column="34"/></name></expr>;<pos:position pos:line="110" pos:column="35"/></expr_stmt></block></then></if>
    <if pos:line="111" pos:column="5">if<condition pos:line="111" pos:column="7">(<expr><name><name pos:line="111" pos:column="8">extra_fds<pos:position pos:line="111" pos:column="17"/></name><index pos:line="111" pos:column="17">[<expr><name pos:line="111" pos:column="18">i<pos:position pos:line="111" pos:column="19"/></name></expr>]<pos:position pos:line="111" pos:column="20"/></index></name><operator pos:line="111" pos:column="20">.<pos:position pos:line="111" pos:column="21"/></operator><name pos:line="111" pos:column="21">events<pos:position pos:line="111" pos:column="27"/></name> <operator pos:line="111" pos:column="28">&amp;<pos:position pos:line="111" pos:column="33"/></operator> <name pos:line="111" pos:column="30">CURL_WAIT_POLLPRI<pos:position pos:line="111" pos:column="47"/></name></expr>)<pos:position pos:line="111" pos:column="48"/></condition><then pos:line="111" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="112" pos:column="7">ufds<pos:position pos:line="112" pos:column="11"/></name><index pos:line="112" pos:column="11">[<expr><name pos:line="112" pos:column="12">nfds<pos:position pos:line="112" pos:column="16"/></name></expr>]<pos:position pos:line="112" pos:column="17"/></index></name><operator pos:line="112" pos:column="17">.<pos:position pos:line="112" pos:column="18"/></operator><name pos:line="112" pos:column="18">events<pos:position pos:line="112" pos:column="24"/></name> <operator pos:line="112" pos:column="25">|=<pos:position pos:line="112" pos:column="27"/></operator> <name pos:line="112" pos:column="28">POLLPRI<pos:position pos:line="112" pos:column="35"/></name></expr>;<pos:position pos:line="112" pos:column="36"/></expr_stmt></block></then></if>
    <if pos:line="113" pos:column="5">if<condition pos:line="113" pos:column="7">(<expr><name><name pos:line="113" pos:column="8">extra_fds<pos:position pos:line="113" pos:column="17"/></name><index pos:line="113" pos:column="17">[<expr><name pos:line="113" pos:column="18">i<pos:position pos:line="113" pos:column="19"/></name></expr>]<pos:position pos:line="113" pos:column="20"/></index></name><operator pos:line="113" pos:column="20">.<pos:position pos:line="113" pos:column="21"/></operator><name pos:line="113" pos:column="21">events<pos:position pos:line="113" pos:column="27"/></name> <operator pos:line="113" pos:column="28">&amp;<pos:position pos:line="113" pos:column="33"/></operator> <name pos:line="113" pos:column="30">CURL_WAIT_POLLOUT<pos:position pos:line="113" pos:column="47"/></name></expr>)<pos:position pos:line="113" pos:column="48"/></condition><then pos:line="113" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="114" pos:column="7">ufds<pos:position pos:line="114" pos:column="11"/></name><index pos:line="114" pos:column="11">[<expr><name pos:line="114" pos:column="12">nfds<pos:position pos:line="114" pos:column="16"/></name></expr>]<pos:position pos:line="114" pos:column="17"/></index></name><operator pos:line="114" pos:column="17">.<pos:position pos:line="114" pos:column="18"/></operator><name pos:line="114" pos:column="18">events<pos:position pos:line="114" pos:column="24"/></name> <operator pos:line="114" pos:column="25">|=<pos:position pos:line="114" pos:column="27"/></operator> <name pos:line="114" pos:column="28">POLLOUT<pos:position pos:line="114" pos:column="35"/></name></expr>;<pos:position pos:line="114" pos:column="36"/></expr_stmt></block></then></if>
    <expr_stmt><expr><operator pos:line="115" pos:column="5">++<pos:position pos:line="115" pos:column="7"/></operator><name pos:line="115" pos:column="7">nfds<pos:position pos:line="115" pos:column="11"/></name></expr>;<pos:position pos:line="115" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="116" pos:column="4"/></block></for>

  <if pos:line="118" pos:column="3">if<condition pos:line="118" pos:column="5">(<expr><name pos:line="118" pos:column="6">nfds<pos:position pos:line="118" pos:column="10"/></name></expr>)<pos:position pos:line="118" pos:column="11"/></condition><then pos:line="118" pos:column="11"> <block pos:line="118" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="119" pos:column="5">int<pos:position pos:line="119" pos:column="8"/></name></type> <name pos:line="119" pos:column="9">pollrc<pos:position pos:line="119" pos:column="15"/></name></decl>;<pos:position pos:line="119" pos:column="16"/></decl_stmt>
    <comment type="block" pos:line="120" pos:column="5">/* wait... */</comment>
    <expr_stmt><expr><name pos:line="121" pos:column="5">pollrc<pos:position pos:line="121" pos:column="11"/></name> <operator pos:line="121" pos:column="12">=<pos:position pos:line="121" pos:column="13"/></operator> <call><name pos:line="121" pos:column="14">Curl_poll<pos:position pos:line="121" pos:column="23"/></name><argument_list pos:line="121" pos:column="23">(<argument><expr><name pos:line="121" pos:column="24">ufds<pos:position pos:line="121" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="30">nfds<pos:position pos:line="121" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="36">timeout_ms<pos:position pos:line="121" pos:column="46"/></name></expr></argument>)<pos:position pos:line="121" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="122" pos:column="5">DEBUGF<pos:position pos:line="122" pos:column="11"/></name><argument_list pos:line="122" pos:column="11">(<argument><expr><call><name pos:line="122" pos:column="12">infof<pos:position pos:line="122" pos:column="17"/></name><argument_list pos:line="122" pos:column="17">(<argument><expr><name pos:line="122" pos:column="18">data<pos:position pos:line="122" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="24">"Curl_poll(%d ds, %d ms) == %d\n"<pos:position pos:line="122" pos:column="57"/></literal></expr></argument>,
                 <argument><expr><name pos:line="123" pos:column="18">nfds<pos:position pos:line="123" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="24">timeout_ms<pos:position pos:line="123" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="36">pollrc<pos:position pos:line="123" pos:column="42"/></name></expr></argument>)<pos:position pos:line="123" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="123" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="45"/></expr_stmt>

    <if pos:line="125" pos:column="5">if<condition pos:line="125" pos:column="7">(<expr><name pos:line="125" pos:column="8">pollrc<pos:position pos:line="125" pos:column="14"/></name> <operator pos:line="125" pos:column="15">&gt;<pos:position pos:line="125" pos:column="19"/></operator> <literal type="number" pos:line="125" pos:column="17">0<pos:position pos:line="125" pos:column="18"/></literal></expr>)<pos:position pos:line="125" pos:column="19"/></condition><then pos:line="125" pos:column="19"> <block pos:line="125" pos:column="20">{
      <expr_stmt><expr><name pos:line="126" pos:column="7">retcode<pos:position pos:line="126" pos:column="14"/></name> <operator pos:line="126" pos:column="15">=<pos:position pos:line="126" pos:column="16"/></operator> <name pos:line="126" pos:column="17">pollrc<pos:position pos:line="126" pos:column="23"/></name></expr>;<pos:position pos:line="126" pos:column="24"/></expr_stmt>
      <comment type="block" pos:line="127" pos:column="7">/* copy revents results from the poll to the curl_multi_wait poll
         struct, the bit values of the actual underlying poll() implementation
         may not be the same as the ones in the public libcurl API! */</comment>
      <for pos:line="130" pos:column="7">for<control pos:line="130" pos:column="10">(<init><expr><name pos:line="130" pos:column="11">i<pos:position pos:line="130" pos:column="12"/></name> <operator pos:line="130" pos:column="13">=<pos:position pos:line="130" pos:column="14"/></operator> <literal type="number" pos:line="130" pos:column="15">0<pos:position pos:line="130" pos:column="16"/></literal></expr>;<pos:position pos:line="130" pos:column="17"/></init> <condition><expr><name pos:line="130" pos:column="18">i<pos:position pos:line="130" pos:column="19"/></name> <operator pos:line="130" pos:column="20">&lt;<pos:position pos:line="130" pos:column="24"/></operator> <name pos:line="130" pos:column="22">extra_nfds<pos:position pos:line="130" pos:column="32"/></name></expr>;<pos:position pos:line="130" pos:column="33"/></condition> <incr><expr><name pos:line="130" pos:column="34">i<pos:position pos:line="130" pos:column="35"/></name><operator pos:line="130" pos:column="35">++<pos:position pos:line="130" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="130" pos:column="38"/></control> <block pos:line="130" pos:column="39">{
        <decl_stmt><decl><type><name pos:line="131" pos:column="9">unsigned<pos:position pos:line="131" pos:column="17"/></name> <name pos:line="131" pos:column="18">short<pos:position pos:line="131" pos:column="23"/></name></type> <name pos:line="131" pos:column="24">mask<pos:position pos:line="131" pos:column="28"/></name> <init pos:line="131" pos:column="29">= <expr><literal type="number" pos:line="131" pos:column="31">0<pos:position pos:line="131" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="131" pos:column="33"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="132" pos:column="9">unsigned<pos:position pos:line="132" pos:column="17"/></name></type> <name pos:line="132" pos:column="18">r<pos:position pos:line="132" pos:column="19"/></name> <init pos:line="132" pos:column="20">= <expr><name><name pos:line="132" pos:column="22">ufds<pos:position pos:line="132" pos:column="26"/></name><index pos:line="132" pos:column="26">[<expr><name pos:line="132" pos:column="27">curlfds<pos:position pos:line="132" pos:column="34"/></name> <operator pos:line="132" pos:column="35">+<pos:position pos:line="132" pos:column="36"/></operator> <name pos:line="132" pos:column="37">i<pos:position pos:line="132" pos:column="38"/></name></expr>]<pos:position pos:line="132" pos:column="39"/></index></name><operator pos:line="132" pos:column="39">.<pos:position pos:line="132" pos:column="40"/></operator><name pos:line="132" pos:column="40">revents<pos:position pos:line="132" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="132" pos:column="48"/></decl_stmt>

        <if pos:line="134" pos:column="9">if<condition pos:line="134" pos:column="11">(<expr><name pos:line="134" pos:column="12">r<pos:position pos:line="134" pos:column="13"/></name> <operator pos:line="134" pos:column="14">&amp;<pos:position pos:line="134" pos:column="19"/></operator> <name pos:line="134" pos:column="16">POLLIN<pos:position pos:line="134" pos:column="22"/></name></expr>)<pos:position pos:line="134" pos:column="23"/></condition><then pos:line="134" pos:column="23">
          <block type="pseudo"><expr_stmt><expr><name pos:line="135" pos:column="11">mask<pos:position pos:line="135" pos:column="15"/></name> <operator pos:line="135" pos:column="16">|=<pos:position pos:line="135" pos:column="18"/></operator> <name pos:line="135" pos:column="19">CURL_WAIT_POLLIN<pos:position pos:line="135" pos:column="35"/></name></expr>;<pos:position pos:line="135" pos:column="36"/></expr_stmt></block></then></if>
        <if pos:line="136" pos:column="9">if<condition pos:line="136" pos:column="11">(<expr><name pos:line="136" pos:column="12">r<pos:position pos:line="136" pos:column="13"/></name> <operator pos:line="136" pos:column="14">&amp;<pos:position pos:line="136" pos:column="19"/></operator> <name pos:line="136" pos:column="16">POLLOUT<pos:position pos:line="136" pos:column="23"/></name></expr>)<pos:position pos:line="136" pos:column="24"/></condition><then pos:line="136" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><name pos:line="137" pos:column="11">mask<pos:position pos:line="137" pos:column="15"/></name> <operator pos:line="137" pos:column="16">|=<pos:position pos:line="137" pos:column="18"/></operator> <name pos:line="137" pos:column="19">CURL_WAIT_POLLOUT<pos:position pos:line="137" pos:column="36"/></name></expr>;<pos:position pos:line="137" pos:column="37"/></expr_stmt></block></then></if>
        <if pos:line="138" pos:column="9">if<condition pos:line="138" pos:column="11">(<expr><name pos:line="138" pos:column="12">r<pos:position pos:line="138" pos:column="13"/></name> <operator pos:line="138" pos:column="14">&amp;<pos:position pos:line="138" pos:column="19"/></operator> <name pos:line="138" pos:column="16">POLLPRI<pos:position pos:line="138" pos:column="23"/></name></expr>)<pos:position pos:line="138" pos:column="24"/></condition><then pos:line="138" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><name pos:line="139" pos:column="11">mask<pos:position pos:line="139" pos:column="15"/></name> <operator pos:line="139" pos:column="16">|=<pos:position pos:line="139" pos:column="18"/></operator> <name pos:line="139" pos:column="19">CURL_WAIT_POLLPRI<pos:position pos:line="139" pos:column="36"/></name></expr>;<pos:position pos:line="139" pos:column="37"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name><name pos:line="141" pos:column="9">extra_fds<pos:position pos:line="141" pos:column="18"/></name><index pos:line="141" pos:column="18">[<expr><name pos:line="141" pos:column="19">i<pos:position pos:line="141" pos:column="20"/></name></expr>]<pos:position pos:line="141" pos:column="21"/></index></name><operator pos:line="141" pos:column="21">.<pos:position pos:line="141" pos:column="22"/></operator><name pos:line="141" pos:column="22">revents<pos:position pos:line="141" pos:column="29"/></name> <operator pos:line="141" pos:column="30">=<pos:position pos:line="141" pos:column="31"/></operator> <name pos:line="141" pos:column="32">mask<pos:position pos:line="141" pos:column="36"/></name></expr>;<pos:position pos:line="141" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="142" pos:column="8"/></block></for>
    }<pos:position pos:line="143" pos:column="6"/></block></then></if>
  }<pos:position pos:line="144" pos:column="4"/></block></then></if>

  <if pos:line="146" pos:column="3">if<condition pos:line="146" pos:column="5">(<expr><name pos:line="146" pos:column="6">ufds_malloc<pos:position pos:line="146" pos:column="17"/></name></expr>)<pos:position pos:line="146" pos:column="18"/></condition><then pos:line="146" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="147" pos:column="5">free<pos:position pos:line="147" pos:column="9"/></name><argument_list pos:line="147" pos:column="9">(<argument><expr><name pos:line="147" pos:column="10">ufds<pos:position pos:line="147" pos:column="14"/></name></expr></argument>)<pos:position pos:line="147" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="16"/></expr_stmt></block></then></if>
  <if pos:line="148" pos:column="3">if<condition pos:line="148" pos:column="5">(<expr><name pos:line="148" pos:column="6">ret<pos:position pos:line="148" pos:column="9"/></name></expr>)<pos:position pos:line="148" pos:column="10"/></condition><then pos:line="148" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="149" pos:column="5">*<pos:position pos:line="149" pos:column="6"/></operator><name pos:line="149" pos:column="6">ret<pos:position pos:line="149" pos:column="9"/></name> <operator pos:line="149" pos:column="10">=<pos:position pos:line="149" pos:column="11"/></operator> <name pos:line="149" pos:column="12">retcode<pos:position pos:line="149" pos:column="19"/></name></expr>;<pos:position pos:line="149" pos:column="20"/></expr_stmt></block></then></if>
  <return pos:line="150" pos:column="3">return <expr><name pos:line="150" pos:column="10">CURLM_OK<pos:position pos:line="150" pos:column="18"/></name></expr>;<pos:position pos:line="150" pos:column="19"/></return>
}<pos:position pos:line="151" pos:column="2"/></block></function></unit>
