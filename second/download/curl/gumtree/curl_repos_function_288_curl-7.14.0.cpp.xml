<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_288_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">addrinfo_callback<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">void<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">arg<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="46">/* "struct connectdata *" */</comment>
                                  <parameter><decl><type><name pos:line="2" pos:column="35">int<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">status<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="3" pos:column="35">void<pos:position pos:line="3" pos:column="39"/></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">addr<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="46"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">connectdata<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">conn<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><operator pos:line="5" pos:column="30">(<pos:position pos:line="5" pos:column="31"/></operator>struct <name pos:line="5" pos:column="38">connectdata<pos:position pos:line="5" pos:column="49"/></name> <operator pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></operator><operator pos:line="5" pos:column="51">)<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="52">arg<pos:position pos:line="5" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="56"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_dns_entry<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">dns<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name pos:line="6" pos:column="32">NULL<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLcode<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">rc<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name pos:line="7" pos:column="17">CURLE_OK<pos:position pos:line="7" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="9" pos:column="3">conn<pos:position pos:line="9" pos:column="7"/></name><operator pos:line="9" pos:column="7">-&gt;<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="9">async<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">.<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">status<pos:position pos:line="9" pos:column="21"/></name></name> <operator pos:line="9" pos:column="22">=<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">status<pos:position pos:line="9" pos:column="30"/></name></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">CURL_ASYNC_SUCCESS<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">==<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="28">status<pos:position pos:line="11" pos:column="34"/></name></expr>)<pos:position pos:line="11" pos:column="35"/></condition><then pos:line="11" pos:column="35"> <block pos:line="11" pos:column="36">{

    <comment type="block" pos:line="13" pos:column="5">/*
     * IPv4: Curl_addrinfo_copy() copies the address and returns an allocated
     * version.
     *
     * IPv6: Curl_addrinfo_copy() returns the input pointer!
     */</comment>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">Curl_addrinfo<pos:position pos:line="19" pos:column="18"/></name> <modifier pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></modifier></type><name pos:line="19" pos:column="20">ai<pos:position pos:line="19" pos:column="22"/></name> <init pos:line="19" pos:column="23">= <expr><call><name pos:line="19" pos:column="25">Curl_addrinfo_copy<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">(<argument><expr><name pos:line="19" pos:column="44">addr<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="50">conn<pos:position pos:line="19" pos:column="54"/></name><operator pos:line="19" pos:column="54">-&gt;<pos:position pos:line="19" pos:column="59"/></operator><name pos:line="19" pos:column="56">async<pos:position pos:line="19" pos:column="61"/></name><operator pos:line="19" pos:column="61">.<pos:position pos:line="19" pos:column="62"/></operator><name pos:line="19" pos:column="62">port<pos:position pos:line="19" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="68"/></decl_stmt>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">ai<pos:position pos:line="20" pos:column="10"/></name></expr>)<pos:position pos:line="20" pos:column="11"/></condition><then pos:line="20" pos:column="11"> <block pos:line="20" pos:column="12">{
      <decl_stmt><decl><type><name><name pos:line="21" pos:column="7">struct<pos:position pos:line="21" pos:column="13"/></name> <name pos:line="21" pos:column="14">SessionHandle<pos:position pos:line="21" pos:column="27"/></name></name> <modifier pos:line="21" pos:column="28">*<pos:position pos:line="21" pos:column="29"/></modifier></type><name pos:line="21" pos:column="29">data<pos:position pos:line="21" pos:column="33"/></name> <init pos:line="21" pos:column="34">= <expr><name><name pos:line="21" pos:column="36">conn<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">data<pos:position pos:line="21" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="21" pos:column="47"/></decl_stmt>

      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><name><name pos:line="23" pos:column="10">data<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">share<pos:position pos:line="23" pos:column="21"/></name></name></expr>)<pos:position pos:line="23" pos:column="22"/></condition><then pos:line="23" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="9">Curl_share_lock<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">data<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="31">CURL_LOCK_DATA_DNS<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">CURL_LOCK_ACCESS_SINGLE<pos:position pos:line="24" pos:column="74"/></name></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="76"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name pos:line="26" pos:column="7">dns<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">Curl_cache_addr<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">data<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">ai<pos:position pos:line="26" pos:column="37"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="27" pos:column="29">conn<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">-&gt;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="35">async<pos:position pos:line="27" pos:column="40"/></name><operator pos:line="27" pos:column="40">.<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">hostname<pos:position pos:line="27" pos:column="49"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="28" pos:column="29">conn<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">-&gt;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="35">async<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">.<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="41">port<pos:position pos:line="28" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
      <if pos:line="29" pos:column="7">if<condition pos:line="29" pos:column="9">(<expr><operator pos:line="29" pos:column="10">!<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">dns<pos:position pos:line="29" pos:column="14"/></name></expr>)<pos:position pos:line="29" pos:column="15"/></condition><then pos:line="29" pos:column="15"> <block pos:line="29" pos:column="16">{
        <comment type="block" pos:line="30" pos:column="9">/* failed to store, cleanup and return error */</comment>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">Curl_freeaddrinfo<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">ai<pos:position pos:line="31" pos:column="29"/></name></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="32" pos:column="9">rc<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <name pos:line="32" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
      }<pos:position pos:line="33" pos:column="8"/></block></then></if>

      <if pos:line="35" pos:column="7">if<condition pos:line="35" pos:column="9">(<expr><name><name pos:line="35" pos:column="10">data<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">-&gt;<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="16">share<pos:position pos:line="35" pos:column="21"/></name></name></expr>)<pos:position pos:line="35" pos:column="22"/></condition><then pos:line="35" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">Curl_share_unlock<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">data<pos:position pos:line="36" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="33">CURL_LOCK_DATA_DNS<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></then>
    <else pos:line="38" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="7">rc<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <name pos:line="39" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="39" pos:column="31"/></name></expr>;<pos:position pos:line="39" pos:column="32"/></expr_stmt></block></else></if>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="42" pos:column="3">conn<pos:position pos:line="42" pos:column="7"/></name><operator pos:line="42" pos:column="7">-&gt;<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="9">async<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">.<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">dns<pos:position pos:line="42" pos:column="18"/></name></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">dns<pos:position pos:line="42" pos:column="24"/></name></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>

 <comment type="block" pos:line="44" pos:column="2">/* Set async.done TRUE last in this function since it may be used multi-
    threaded and once this is TRUE the other thread may read fields from the
    async struct */</comment>
  <expr_stmt><expr><name><name pos:line="47" pos:column="3">conn<pos:position pos:line="47" pos:column="7"/></name><operator pos:line="47" pos:column="7">-&gt;<pos:position pos:line="47" pos:column="12"/></operator><name pos:line="47" pos:column="9">async<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">.<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">done<pos:position pos:line="47" pos:column="19"/></name></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="22">TRUE<pos:position pos:line="47" pos:column="26"/></name></expr>;<pos:position pos:line="47" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="49" pos:column="3">/* ipv4: The input hostent struct will be freed by ares when we return from
     this function */</comment>
  <return pos:line="51" pos:column="3">return <expr><name pos:line="51" pos:column="10">rc<pos:position pos:line="51" pos:column="12"/></name></expr>;<pos:position pos:line="51" pos:column="13"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
