<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2344_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_auth_decode_digest_http_message<pos:position pos:line="1" pos:column="46"/></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">chlg<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
                                              <parameter><decl><type><name><name pos:line="2" pos:column="47">struct<pos:position pos:line="2" pos:column="53"/></name> <name pos:line="2" pos:column="54">digestdata<pos:position pos:line="2" pos:column="64"/></name></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">digest<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">chlglen<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">strlen<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">chlg<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* We had an input token before so if there's another one now that means we
     provided bad credentials in the previous request or it's stale. */</comment>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name><name pos:line="8" pos:column="6">digest<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">input_token<pos:position pos:line="8" pos:column="25"/></name></name></expr>)<pos:position pos:line="8" pos:column="26"/></condition><then pos:line="8" pos:column="26"> <block pos:line="8" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">bool<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">stale<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><literal type="boolean" pos:line="9" pos:column="18">false<pos:position pos:line="9" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">p<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><name pos:line="10" pos:column="21">chlg<pos:position pos:line="10" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Check for the 'stale' directive */</comment>
    <for pos:line="13" pos:column="5">for<control pos:line="13" pos:column="8">(<init pos:line="13" pos:column="9">;<pos:position pos:line="13" pos:column="10"/></init><condition pos:line="13" pos:column="10">;<pos:position pos:line="13" pos:column="11"/></condition><incr/>)<pos:position pos:line="13" pos:column="12"/></control> <block pos:line="13" pos:column="13">{
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">char<pos:position pos:line="14" pos:column="11"/></name></type> <name><name pos:line="14" pos:column="12">value<pos:position pos:line="14" pos:column="17"/></name><index pos:line="14" pos:column="17">[<expr><name pos:line="14" pos:column="18">DIGEST_MAX_VALUE_LENGTH<pos:position pos:line="14" pos:column="41"/></name></expr>]<pos:position pos:line="14" pos:column="42"/></index></name></decl>;<pos:position pos:line="14" pos:column="43"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">char<pos:position pos:line="15" pos:column="11"/></name></type> <name><name pos:line="15" pos:column="12">content<pos:position pos:line="15" pos:column="19"/></name><index pos:line="15" pos:column="19">[<expr><name pos:line="15" pos:column="20">DIGEST_MAX_CONTENT_LENGTH<pos:position pos:line="15" pos:column="45"/></name></expr>]<pos:position pos:line="15" pos:column="46"/></index></name></decl>;<pos:position pos:line="15" pos:column="47"/></decl_stmt>

      <while pos:line="17" pos:column="7">while<condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">p<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">&amp;&amp;<pos:position pos:line="17" pos:column="26"/></operator> <call><name pos:line="17" pos:column="19">ISSPACE<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><operator pos:line="17" pos:column="27">*<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="28">p<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="31"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="9">p<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">++<pos:position pos:line="18" pos:column="12"/></operator></expr>;<pos:position pos:line="18" pos:column="13"/></expr_stmt></block></while>

      <if pos:line="20" pos:column="7">if<condition pos:line="20" pos:column="9">(<expr><operator pos:line="20" pos:column="10">!<pos:position pos:line="20" pos:column="11"/></operator><call><name pos:line="20" pos:column="11">Curl_auth_digest_get_pair<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">p<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">value<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">content<pos:position pos:line="20" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="56">&amp;<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="57">p<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="60"/></condition><then pos:line="20" pos:column="60">
        <block type="pseudo"><break pos:line="21" pos:column="9">break;<pos:position pos:line="21" pos:column="15"/></break></block></then></if>

      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><call><name pos:line="23" pos:column="10">strcasecompare<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">value<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="32">"stale"<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call> <operator pos:line="23" pos:column="41">&amp;&amp;<pos:position pos:line="23" pos:column="51"/></operator>
         <call><name pos:line="24" pos:column="10">strcasecompare<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">content<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="34">"true"<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42"> <block pos:line="24" pos:column="43">{
        <expr_stmt><expr><name pos:line="25" pos:column="9">stale<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <literal type="boolean" pos:line="25" pos:column="17">true<pos:position pos:line="25" pos:column="21"/></literal></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
        <break pos:line="26" pos:column="9">break;<pos:position pos:line="26" pos:column="15"/></break>
      }<pos:position pos:line="27" pos:column="8"/></block></then></if>

      <while pos:line="29" pos:column="7">while<condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">*<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">p<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">&amp;&amp;<pos:position pos:line="29" pos:column="26"/></operator> <call><name pos:line="29" pos:column="19">ISSPACE<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><operator pos:line="29" pos:column="27">*<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">p<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="31"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="9">p<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">++<pos:position pos:line="30" pos:column="12"/></operator></expr>;<pos:position pos:line="30" pos:column="13"/></expr_stmt></block></while>

      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><literal type="char" pos:line="32" pos:column="10">','<pos:position pos:line="32" pos:column="13"/></literal> <operator pos:line="32" pos:column="14">==<pos:position pos:line="32" pos:column="16"/></operator> <operator pos:line="32" pos:column="17">*<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">p<pos:position pos:line="32" pos:column="19"/></name></expr>)<pos:position pos:line="32" pos:column="20"/></condition><then pos:line="32" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="9">p<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">++<pos:position pos:line="33" pos:column="12"/></operator></expr>;<pos:position pos:line="33" pos:column="13"/></expr_stmt></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></for>

    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><name pos:line="36" pos:column="8">stale<pos:position pos:line="36" pos:column="13"/></name></expr>)<pos:position pos:line="36" pos:column="14"/></condition><then pos:line="36" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="7">Curl_auth_digest_cleanup<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">digest<pos:position pos:line="37" pos:column="38"/></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt></block></then>
    <else pos:line="38" pos:column="5">else
      <block type="pseudo"><return pos:line="39" pos:column="7">return <expr><name pos:line="39" pos:column="14">CURLE_LOGIN_DENIED<pos:position pos:line="39" pos:column="32"/></name></expr>;<pos:position pos:line="39" pos:column="33"/></return></block></else></if>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="42" pos:column="3">/* Store the challenge for use later */</comment>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">digest<pos:position pos:line="43" pos:column="9"/></name><operator pos:line="43" pos:column="9">-&gt;<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="11">input_token<pos:position pos:line="43" pos:column="22"/></name></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <operator pos:line="43" pos:column="25">(<pos:position pos:line="43" pos:column="26"/></operator><name pos:line="43" pos:column="26">BYTE<pos:position pos:line="43" pos:column="30"/></name> <operator pos:line="43" pos:column="31">*<pos:position pos:line="43" pos:column="32"/></operator><operator pos:line="43" pos:column="32">)<pos:position pos:line="43" pos:column="33"/></operator> <call><name pos:line="43" pos:column="34">Curl_memdup<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">chlg<pos:position pos:line="43" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="52">chlglen<pos:position pos:line="43" pos:column="59"/></name> <operator pos:line="43" pos:column="60">+<pos:position pos:line="43" pos:column="61"/></operator> <literal type="number" pos:line="43" pos:column="62">1<pos:position pos:line="43" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="65"/></expr_stmt>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><operator pos:line="44" pos:column="6">!<pos:position pos:line="44" pos:column="7"/></operator><name><name pos:line="44" pos:column="7">digest<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">-&gt;<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="15">input_token<pos:position pos:line="44" pos:column="26"/></name></name></expr>)<pos:position pos:line="44" pos:column="27"/></condition><then pos:line="44" pos:column="27">
    <block type="pseudo"><return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="45" pos:column="31"/></name></expr>;<pos:position pos:line="45" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="47" pos:column="3">digest<pos:position pos:line="47" pos:column="9"/></name><operator pos:line="47" pos:column="9">-&gt;<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="11">input_token_len<pos:position pos:line="47" pos:column="26"/></name></name> <operator pos:line="47" pos:column="27">=<pos:position pos:line="47" pos:column="28"/></operator> <name pos:line="47" pos:column="29">chlglen<pos:position pos:line="47" pos:column="36"/></name></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>

  <return pos:line="49" pos:column="3">return <expr><name pos:line="49" pos:column="10">CURLE_OK<pos:position pos:line="49" pos:column="18"/></name></expr>;<pos:position pos:line="49" pos:column="19"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
