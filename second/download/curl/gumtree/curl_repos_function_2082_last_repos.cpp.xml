<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2082_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">encoder_qp_read<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">buffer<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">size_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">size<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">bool<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">ateof<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="2" pos:column="31">curl_mimepart<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">part<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">mime_encoder_state<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">st<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><operator pos:line="4" pos:column="28">&amp;<pos:position pos:line="4" pos:column="33"/></operator><name><name pos:line="4" pos:column="29">part<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">-&gt;<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="35">encstate<pos:position pos:line="4" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ptr<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">buffer<pos:position pos:line="5" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">cursize<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">len<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">consumed<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">softlinebreak<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name><name pos:line="11" pos:column="8">buf<pos:position pos:line="11" pos:column="11"/></name><index pos:line="11" pos:column="11">[<expr><literal type="number" pos:line="11" pos:column="12">4<pos:position pos:line="11" pos:column="13"/></literal></expr>]<pos:position pos:line="11" pos:column="14"/></index></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* On all platforms, input is supposed to be ASCII compatible: for this
     reason, we use hexadecimal ASCII codes in this function rather than
     character constants that can be interpreted as non-ascii on some
     platforms. Preserve ASCII encoding on output too. */</comment>
  <while pos:line="17" pos:column="3">while<condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">st<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">bufbeg<pos:position pos:line="17" pos:column="19"/></name></name> <operator pos:line="17" pos:column="20">&lt;<pos:position pos:line="17" pos:column="24"/></operator> <name><name pos:line="17" pos:column="22">st<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">-&gt;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="26">bufend<pos:position pos:line="17" pos:column="32"/></name></name></expr>)<pos:position pos:line="17" pos:column="33"/></condition> <block pos:line="17" pos:column="34">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">len<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <literal type="number" pos:line="18" pos:column="11">1<pos:position pos:line="18" pos:column="12"/></literal></expr>;<pos:position pos:line="18" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">consumed<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">i<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <name><name pos:line="20" pos:column="9">st<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">buf<pos:position pos:line="20" pos:column="16"/></name><index pos:line="20" pos:column="16">[<expr><name><name pos:line="20" pos:column="17">st<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">bufbeg<pos:position pos:line="20" pos:column="27"/></name></name></expr>]<pos:position pos:line="20" pos:column="28"/></index></name></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">buf<pos:position pos:line="21" pos:column="8"/></name><index pos:line="21" pos:column="8">[<expr><literal type="number" pos:line="21" pos:column="9">0<pos:position pos:line="21" pos:column="10"/></literal></expr>]<pos:position pos:line="21" pos:column="11"/></index></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <operator pos:line="21" pos:column="14">(<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">char<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">)<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="21">i<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">buf<pos:position pos:line="22" pos:column="8"/></name><index pos:line="22" pos:column="8">[<expr><literal type="number" pos:line="22" pos:column="9">1<pos:position pos:line="22" pos:column="10"/></literal></expr>]<pos:position pos:line="22" pos:column="11"/></index></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <name><name pos:line="22" pos:column="14">aschex<pos:position pos:line="22" pos:column="20"/></name><index pos:line="22" pos:column="20">[<expr><operator pos:line="22" pos:column="21">(<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">i<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">&gt;&gt;<pos:position pos:line="22" pos:column="29"/></operator> <literal type="number" pos:line="22" pos:column="27">4<pos:position pos:line="22" pos:column="28"/></literal><operator pos:line="22" pos:column="28">)<pos:position pos:line="22" pos:column="29"/></operator> <operator pos:line="22" pos:column="30">&amp;<pos:position pos:line="22" pos:column="35"/></operator> <literal type="number" pos:line="22" pos:column="32">0xF<pos:position pos:line="22" pos:column="35"/></literal></expr>]<pos:position pos:line="22" pos:column="36"/></index></name></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">buf<pos:position pos:line="23" pos:column="8"/></name><index pos:line="23" pos:column="8">[<expr><literal type="number" pos:line="23" pos:column="9">2<pos:position pos:line="23" pos:column="10"/></literal></expr>]<pos:position pos:line="23" pos:column="11"/></index></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <name><name pos:line="23" pos:column="14">aschex<pos:position pos:line="23" pos:column="20"/></name><index pos:line="23" pos:column="20">[<expr><name pos:line="23" pos:column="21">i<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">&amp;<pos:position pos:line="23" pos:column="28"/></operator> <literal type="number" pos:line="23" pos:column="25">0xF<pos:position pos:line="23" pos:column="28"/></literal></expr>]<pos:position pos:line="23" pos:column="29"/></index></name></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>

    <switch pos:line="25" pos:column="5">switch<condition pos:line="25" pos:column="11">(<expr><name><name pos:line="25" pos:column="12">qp_class<pos:position pos:line="25" pos:column="20"/></name><index pos:line="25" pos:column="20">[<expr><name><name pos:line="25" pos:column="21">st<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">buf<pos:position pos:line="25" pos:column="28"/></name><index pos:line="25" pos:column="28">[<expr><name><name pos:line="25" pos:column="29">st<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">-&gt;<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="33">bufbeg<pos:position pos:line="25" pos:column="39"/></name></name></expr>]<pos:position pos:line="25" pos:column="40"/></index></name> <operator pos:line="25" pos:column="41">&amp;<pos:position pos:line="25" pos:column="46"/></operator> <literal type="number" pos:line="25" pos:column="43">0xFF<pos:position pos:line="25" pos:column="47"/></literal></expr>]<pos:position pos:line="25" pos:column="48"/></index></name></expr>)<pos:position pos:line="25" pos:column="49"/></condition> <block pos:line="25" pos:column="50">{
    <case pos:line="26" pos:column="5">case <expr><name pos:line="26" pos:column="10">QP_OK<pos:position pos:line="26" pos:column="15"/></name></expr>:<pos:position pos:line="26" pos:column="16"/></case>          <comment type="block" pos:line="26" pos:column="26">/* Not a special character. */</comment>
      <break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break>
    <case pos:line="28" pos:column="5">case <expr><name pos:line="28" pos:column="10">QP_SP<pos:position pos:line="28" pos:column="15"/></name></expr>:<pos:position pos:line="28" pos:column="16"/></case>          <comment type="block" pos:line="28" pos:column="26">/* Space or tab. */</comment>
      <comment type="block" pos:line="29" pos:column="7">/* Spacing must be escaped if followed by CRLF. */</comment>
      <switch pos:line="30" pos:column="7">switch<condition pos:line="30" pos:column="13">(<expr><call><name pos:line="30" pos:column="14">qp_lookahead_eol<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">st<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">ateof<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="42">1<pos:position pos:line="30" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="45"/></condition> <block pos:line="30" pos:column="46">{
      <case pos:line="31" pos:column="7">case <expr><operator pos:line="31" pos:column="12">-<pos:position pos:line="31" pos:column="13"/></operator><literal type="number" pos:line="31" pos:column="13">1<pos:position pos:line="31" pos:column="14"/></literal></expr>:<pos:position pos:line="31" pos:column="15"/></case>          <comment type="block" pos:line="31" pos:column="25">/* More input data needed. */</comment>
        <return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">cursize<pos:position pos:line="32" pos:column="23"/></name></expr>;<pos:position pos:line="32" pos:column="24"/></return>
      <case pos:line="33" pos:column="7">case <expr><literal type="number" pos:line="33" pos:column="12">0<pos:position pos:line="33" pos:column="13"/></literal></expr>:<pos:position pos:line="33" pos:column="14"/></case>           <comment type="block" pos:line="33" pos:column="25">/* No encoding needed. */</comment>
        <break pos:line="34" pos:column="9">break;<pos:position pos:line="34" pos:column="15"/></break>
      <default pos:line="35" pos:column="7">default:<pos:position pos:line="35" pos:column="15"/></default>          <comment type="block" pos:line="35" pos:column="25">/* CRLF after space or tab. */</comment>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">buf<pos:position pos:line="36" pos:column="12"/></name><index pos:line="36" pos:column="12">[<expr><literal type="number" pos:line="36" pos:column="13">0<pos:position pos:line="36" pos:column="14"/></literal></expr>]<pos:position pos:line="36" pos:column="15"/></index></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <literal type="char" pos:line="36" pos:column="18">'\x3D'<pos:position pos:line="36" pos:column="24"/></literal></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>    <comment type="block" pos:line="36" pos:column="29">/* '=' */</comment>
        <expr_stmt><expr><name pos:line="37" pos:column="9">len<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <literal type="number" pos:line="37" pos:column="15">3<pos:position pos:line="37" pos:column="16"/></literal></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>
        <break pos:line="38" pos:column="9">break;<pos:position pos:line="38" pos:column="15"/></break>
      }<pos:position pos:line="39" pos:column="8"/></block></switch>
      <break pos:line="40" pos:column="7">break;<pos:position pos:line="40" pos:column="13"/></break>
    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">QP_CR<pos:position pos:line="41" pos:column="15"/></name></expr>:<pos:position pos:line="41" pos:column="16"/></case>         <comment type="block" pos:line="41" pos:column="25">/* Carriage return. */</comment>
      <comment type="block" pos:line="42" pos:column="7">/* If followed by a line-feed, output the CRLF pair.
         Else escape it. */</comment>
      <switch pos:line="44" pos:column="7">switch<condition pos:line="44" pos:column="13">(<expr><call><name pos:line="44" pos:column="14">qp_lookahead_eol<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">st<pos:position pos:line="44" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="35">ateof<pos:position pos:line="44" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="42">0<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="45"/></condition> <block pos:line="44" pos:column="46">{
      <case pos:line="45" pos:column="7">case <expr><operator pos:line="45" pos:column="12">-<pos:position pos:line="45" pos:column="13"/></operator><literal type="number" pos:line="45" pos:column="13">1<pos:position pos:line="45" pos:column="14"/></literal></expr>:<pos:position pos:line="45" pos:column="15"/></case>          <comment type="block" pos:line="45" pos:column="25">/* Need more data. */</comment>
        <return pos:line="46" pos:column="9">return <expr><name pos:line="46" pos:column="16">cursize<pos:position pos:line="46" pos:column="23"/></name></expr>;<pos:position pos:line="46" pos:column="24"/></return>
      <case pos:line="47" pos:column="7">case <expr><literal type="number" pos:line="47" pos:column="12">1<pos:position pos:line="47" pos:column="13"/></literal></expr>:<pos:position pos:line="47" pos:column="14"/></case>           <comment type="block" pos:line="47" pos:column="25">/* CRLF found. */</comment>
        <expr_stmt><expr><name><name pos:line="48" pos:column="9">buf<pos:position pos:line="48" pos:column="12"/></name><index pos:line="48" pos:column="12">[<expr><name pos:line="48" pos:column="13">len<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">++<pos:position pos:line="48" pos:column="18"/></operator></expr>]<pos:position pos:line="48" pos:column="19"/></index></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <literal type="char" pos:line="48" pos:column="22">'\x0A'<pos:position pos:line="48" pos:column="28"/></literal></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>    <comment type="block" pos:line="48" pos:column="33">/* Append '\n'. */</comment>
        <expr_stmt><expr><name pos:line="49" pos:column="9">consumed<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <literal type="number" pos:line="49" pos:column="20">2<pos:position pos:line="49" pos:column="21"/></literal></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
        <break pos:line="50" pos:column="9">break;<pos:position pos:line="50" pos:column="15"/></break>
      <default pos:line="51" pos:column="7">default:<pos:position pos:line="51" pos:column="15"/></default>          <comment type="block" pos:line="51" pos:column="25">/* Not followed by LF: escape. */</comment>
        <expr_stmt><expr><name><name pos:line="52" pos:column="9">buf<pos:position pos:line="52" pos:column="12"/></name><index pos:line="52" pos:column="12">[<expr><literal type="number" pos:line="52" pos:column="13">0<pos:position pos:line="52" pos:column="14"/></literal></expr>]<pos:position pos:line="52" pos:column="15"/></index></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <literal type="char" pos:line="52" pos:column="18">'\x3D'<pos:position pos:line="52" pos:column="24"/></literal></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>    <comment type="block" pos:line="52" pos:column="29">/* '=' */</comment>
        <expr_stmt><expr><name pos:line="53" pos:column="9">len<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <literal type="number" pos:line="53" pos:column="15">3<pos:position pos:line="53" pos:column="16"/></literal></expr>;<pos:position pos:line="53" pos:column="17"/></expr_stmt>
        <break pos:line="54" pos:column="9">break;<pos:position pos:line="54" pos:column="15"/></break>
      }<pos:position pos:line="55" pos:column="8"/></block></switch>
      <break pos:line="56" pos:column="7">break;<pos:position pos:line="56" pos:column="13"/></break>
    <default pos:line="57" pos:column="5">default:<pos:position pos:line="57" pos:column="13"/></default>            <comment type="block" pos:line="57" pos:column="25">/* Character must be escaped. */</comment>
      <expr_stmt><expr><name><name pos:line="58" pos:column="7">buf<pos:position pos:line="58" pos:column="10"/></name><index pos:line="58" pos:column="10">[<expr><literal type="number" pos:line="58" pos:column="11">0<pos:position pos:line="58" pos:column="12"/></literal></expr>]<pos:position pos:line="58" pos:column="13"/></index></name> <operator pos:line="58" pos:column="14">=<pos:position pos:line="58" pos:column="15"/></operator> <literal type="char" pos:line="58" pos:column="16">'\x3D'<pos:position pos:line="58" pos:column="22"/></literal></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>    <comment type="block" pos:line="58" pos:column="27">/* '=' */</comment>
      <expr_stmt><expr><name pos:line="59" pos:column="7">len<pos:position pos:line="59" pos:column="10"/></name> <operator pos:line="59" pos:column="11">=<pos:position pos:line="59" pos:column="12"/></operator> <literal type="number" pos:line="59" pos:column="13">3<pos:position pos:line="59" pos:column="14"/></literal></expr>;<pos:position pos:line="59" pos:column="15"/></expr_stmt>
      <break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break>
    }<pos:position pos:line="61" pos:column="6"/></block></switch>

    <comment type="block" pos:line="63" pos:column="5">/* Be sure the encoded character fits within maximum line length. */</comment>
    <if pos:line="64" pos:column="5">if<condition pos:line="64" pos:column="7">(<expr><name><name pos:line="64" pos:column="8">buf<pos:position pos:line="64" pos:column="11"/></name><index pos:line="64" pos:column="11">[<expr><name pos:line="64" pos:column="12">len<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">-<pos:position pos:line="64" pos:column="17"/></operator> <literal type="number" pos:line="64" pos:column="18">1<pos:position pos:line="64" pos:column="19"/></literal></expr>]<pos:position pos:line="64" pos:column="20"/></index></name> <operator pos:line="64" pos:column="21">!=<pos:position pos:line="64" pos:column="23"/></operator> <literal type="char" pos:line="64" pos:column="24">'\x0A'<pos:position pos:line="64" pos:column="30"/></literal></expr>)<pos:position pos:line="64" pos:column="31"/></condition><then pos:line="64" pos:column="31"> <block pos:line="64" pos:column="32">{    <comment type="block" pos:line="64" pos:column="37">/* '\n' */</comment>
      <expr_stmt><expr><name pos:line="65" pos:column="7">softlinebreak<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <name><name pos:line="65" pos:column="23">st<pos:position pos:line="65" pos:column="25"/></name><operator pos:line="65" pos:column="25">-&gt;<pos:position pos:line="65" pos:column="30"/></operator><name pos:line="65" pos:column="27">pos<pos:position pos:line="65" pos:column="30"/></name></name> <operator pos:line="65" pos:column="31">+<pos:position pos:line="65" pos:column="32"/></operator> <name pos:line="65" pos:column="33">len<pos:position pos:line="65" pos:column="36"/></name> <operator pos:line="65" pos:column="37">&gt;<pos:position pos:line="65" pos:column="41"/></operator> <name pos:line="65" pos:column="39">MAX_ENCODED_LINE_LENGTH<pos:position pos:line="65" pos:column="62"/></name></expr>;<pos:position pos:line="65" pos:column="63"/></expr_stmt>
      <if pos:line="66" pos:column="7">if<condition pos:line="66" pos:column="9">(<expr><operator pos:line="66" pos:column="10">!<pos:position pos:line="66" pos:column="11"/></operator><name pos:line="66" pos:column="11">softlinebreak<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">&amp;&amp;<pos:position pos:line="66" pos:column="35"/></operator> <name><name pos:line="66" pos:column="28">st<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">-&gt;<pos:position pos:line="66" pos:column="35"/></operator><name pos:line="66" pos:column="32">pos<pos:position pos:line="66" pos:column="35"/></name></name> <operator pos:line="66" pos:column="36">+<pos:position pos:line="66" pos:column="37"/></operator> <name pos:line="66" pos:column="38">len<pos:position pos:line="66" pos:column="41"/></name> <operator pos:line="66" pos:column="42">==<pos:position pos:line="66" pos:column="44"/></operator> <name pos:line="66" pos:column="45">MAX_ENCODED_LINE_LENGTH<pos:position pos:line="66" pos:column="68"/></name></expr>)<pos:position pos:line="66" pos:column="69"/></condition><then pos:line="66" pos:column="69"> <block pos:line="66" pos:column="70">{
        <comment type="block" pos:line="67" pos:column="9">/* We may use the current line only if end of data or followed by
           a CRLF. */</comment>
        <switch pos:line="69" pos:column="9">switch<condition pos:line="69" pos:column="15">(<expr><call><name pos:line="69" pos:column="16">qp_lookahead_eol<pos:position pos:line="69" pos:column="32"/></name><argument_list pos:line="69" pos:column="32">(<argument><expr><name pos:line="69" pos:column="33">st<pos:position pos:line="69" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="37">ateof<pos:position pos:line="69" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="44">consumed<pos:position pos:line="69" pos:column="52"/></name></expr></argument>)<pos:position pos:line="69" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="54"/></condition> <block pos:line="69" pos:column="55">{
        <case pos:line="70" pos:column="9">case <expr><operator pos:line="70" pos:column="14">-<pos:position pos:line="70" pos:column="15"/></operator><literal type="number" pos:line="70" pos:column="15">1<pos:position pos:line="70" pos:column="16"/></literal></expr>:<pos:position pos:line="70" pos:column="17"/></case>        <comment type="block" pos:line="70" pos:column="25">/* Need more data. */</comment>
          <return pos:line="71" pos:column="11">return <expr><name pos:line="71" pos:column="18">cursize<pos:position pos:line="71" pos:column="25"/></name></expr>;<pos:position pos:line="71" pos:column="26"/></return>
          <break pos:line="72" pos:column="11">break;<pos:position pos:line="72" pos:column="17"/></break>
        <case pos:line="73" pos:column="9">case <expr><literal type="number" pos:line="73" pos:column="14">0<pos:position pos:line="73" pos:column="15"/></literal></expr>:<pos:position pos:line="73" pos:column="16"/></case>         <comment type="block" pos:line="73" pos:column="25">/* Not followed by a CRLF. */</comment>
          <expr_stmt><expr><name pos:line="74" pos:column="11">softlinebreak<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">=<pos:position pos:line="74" pos:column="26"/></operator> <literal type="number" pos:line="74" pos:column="27">1<pos:position pos:line="74" pos:column="28"/></literal></expr>;<pos:position pos:line="74" pos:column="29"/></expr_stmt>
          <break pos:line="75" pos:column="11">break;<pos:position pos:line="75" pos:column="17"/></break>
        }<pos:position pos:line="76" pos:column="10"/></block></switch>
      }<pos:position pos:line="77" pos:column="8"/></block></then></if>
      <if pos:line="78" pos:column="7">if<condition pos:line="78" pos:column="9">(<expr><name pos:line="78" pos:column="10">softlinebreak<pos:position pos:line="78" pos:column="23"/></name></expr>)<pos:position pos:line="78" pos:column="24"/></condition><then pos:line="78" pos:column="24"> <block pos:line="78" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">strcpy<pos:position pos:line="79" pos:column="15"/></name><argument_list pos:line="79" pos:column="15">(<argument><expr><name pos:line="79" pos:column="16">buf<pos:position pos:line="79" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="21">"\x3D\x0D\x0A"<pos:position pos:line="79" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt>    <comment type="block" pos:line="79" pos:column="41">/* "=\r\n" */</comment>
        <expr_stmt><expr><name pos:line="80" pos:column="9">len<pos:position pos:line="80" pos:column="12"/></name> <operator pos:line="80" pos:column="13">=<pos:position pos:line="80" pos:column="14"/></operator> <literal type="number" pos:line="80" pos:column="15">3<pos:position pos:line="80" pos:column="16"/></literal></expr>;<pos:position pos:line="80" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="81" pos:column="9">consumed<pos:position pos:line="81" pos:column="17"/></name> <operator pos:line="81" pos:column="18">=<pos:position pos:line="81" pos:column="19"/></operator> <literal type="number" pos:line="81" pos:column="20">0<pos:position pos:line="81" pos:column="21"/></literal></expr>;<pos:position pos:line="81" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="82" pos:column="8"/></block></then></if>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="85" pos:column="5">/* If the output buffer would overflow, do not store. */</comment>
    <if pos:line="86" pos:column="5">if<condition pos:line="86" pos:column="7">(<expr><name pos:line="86" pos:column="8">len<pos:position pos:line="86" pos:column="11"/></name> <operator pos:line="86" pos:column="12">&gt;<pos:position pos:line="86" pos:column="16"/></operator> <name pos:line="86" pos:column="14">size<pos:position pos:line="86" pos:column="18"/></name></expr>)<pos:position pos:line="86" pos:column="19"/></condition><then pos:line="86" pos:column="19">
      <block type="pseudo"><break pos:line="87" pos:column="7">break;<pos:position pos:line="87" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="89" pos:column="5">/* Append to output buffer. */</comment>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">memcpy<pos:position pos:line="90" pos:column="11"/></name><argument_list pos:line="90" pos:column="11">(<argument><expr><name pos:line="90" pos:column="12">ptr<pos:position pos:line="90" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="17">buf<pos:position pos:line="90" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="22">len<pos:position pos:line="90" pos:column="25"/></name></expr></argument>)<pos:position pos:line="90" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="91" pos:column="5">cursize<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">+=<pos:position pos:line="91" pos:column="15"/></operator> <name pos:line="91" pos:column="16">len<pos:position pos:line="91" pos:column="19"/></name></expr>;<pos:position pos:line="91" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="92" pos:column="5">ptr<pos:position pos:line="92" pos:column="8"/></name> <operator pos:line="92" pos:column="9">+=<pos:position pos:line="92" pos:column="11"/></operator> <name pos:line="92" pos:column="12">len<pos:position pos:line="92" pos:column="15"/></name></expr>;<pos:position pos:line="92" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="93" pos:column="5">size<pos:position pos:line="93" pos:column="9"/></name> <operator pos:line="93" pos:column="10">-=<pos:position pos:line="93" pos:column="12"/></operator> <name pos:line="93" pos:column="13">len<pos:position pos:line="93" pos:column="16"/></name></expr>;<pos:position pos:line="93" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="94" pos:column="5">st<pos:position pos:line="94" pos:column="7"/></name><operator pos:line="94" pos:column="7">-&gt;<pos:position pos:line="94" pos:column="12"/></operator><name pos:line="94" pos:column="9">pos<pos:position pos:line="94" pos:column="12"/></name></name> <operator pos:line="94" pos:column="13">+=<pos:position pos:line="94" pos:column="15"/></operator> <name pos:line="94" pos:column="16">len<pos:position pos:line="94" pos:column="19"/></name></expr>;<pos:position pos:line="94" pos:column="20"/></expr_stmt>
    <if pos:line="95" pos:column="5">if<condition pos:line="95" pos:column="7">(<expr><name><name pos:line="95" pos:column="8">buf<pos:position pos:line="95" pos:column="11"/></name><index pos:line="95" pos:column="11">[<expr><name pos:line="95" pos:column="12">len<pos:position pos:line="95" pos:column="15"/></name> <operator pos:line="95" pos:column="16">-<pos:position pos:line="95" pos:column="17"/></operator> <literal type="number" pos:line="95" pos:column="18">1<pos:position pos:line="95" pos:column="19"/></literal></expr>]<pos:position pos:line="95" pos:column="20"/></index></name> <operator pos:line="95" pos:column="21">==<pos:position pos:line="95" pos:column="23"/></operator> <literal type="char" pos:line="95" pos:column="24">'\x0A'<pos:position pos:line="95" pos:column="30"/></literal></expr>)<pos:position pos:line="95" pos:column="31"/></condition><then pos:line="95" pos:column="31">    <comment type="block" pos:line="95" pos:column="35">/* '\n' */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="96" pos:column="7">st<pos:position pos:line="96" pos:column="9"/></name><operator pos:line="96" pos:column="9">-&gt;<pos:position pos:line="96" pos:column="14"/></operator><name pos:line="96" pos:column="11">pos<pos:position pos:line="96" pos:column="14"/></name></name> <operator pos:line="96" pos:column="15">=<pos:position pos:line="96" pos:column="16"/></operator> <literal type="number" pos:line="96" pos:column="17">0<pos:position pos:line="96" pos:column="18"/></literal></expr>;<pos:position pos:line="96" pos:column="19"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="97" pos:column="5">st<pos:position pos:line="97" pos:column="7"/></name><operator pos:line="97" pos:column="7">-&gt;<pos:position pos:line="97" pos:column="12"/></operator><name pos:line="97" pos:column="9">bufbeg<pos:position pos:line="97" pos:column="15"/></name></name> <operator pos:line="97" pos:column="16">+=<pos:position pos:line="97" pos:column="18"/></operator> <name pos:line="97" pos:column="19">consumed<pos:position pos:line="97" pos:column="27"/></name></expr>;<pos:position pos:line="97" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="98" pos:column="4"/></block></while>

  <return pos:line="100" pos:column="3">return <expr><name pos:line="100" pos:column="10">cursize<pos:position pos:line="100" pos:column="17"/></name></expr>;<pos:position pos:line="100" pos:column="18"/></return>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
