<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2144_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">Curl_pipeline_penalized<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">Curl_easy<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">data<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                             <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">connectdata<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">conn<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><name pos:line="4" pos:column="6">data<pos:position pos:line="4" pos:column="10"/></name></expr>)<pos:position pos:line="4" pos:column="11"/></condition><then pos:line="4" pos:column="11"> <block pos:line="4" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">bool<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">penalized<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name pos:line="5" pos:column="22">FALSE<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">curl_off_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">penalty_size<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">=
      <expr><call><name pos:line="7" pos:column="7">Curl_multi_content_length_penalty_size<pos:position pos:line="7" pos:column="45"/></name><argument_list pos:line="7" pos:column="45">(<argument><expr><name><name pos:line="7" pos:column="46">data<pos:position pos:line="7" pos:column="50"/></name><operator pos:line="7" pos:column="50">-&gt;<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="52">multi<pos:position pos:line="7" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">curl_off_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">chunk_penalty_size<pos:position pos:line="8" pos:column="34"/></name> <init pos:line="8" pos:column="35">=
      <expr><call><name pos:line="9" pos:column="7">Curl_multi_chunk_length_penalty_size<pos:position pos:line="9" pos:column="43"/></name><argument_list pos:line="9" pos:column="43">(<argument><expr><name><name pos:line="9" pos:column="44">data<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">-&gt;<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="50">multi<pos:position pos:line="9" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">curl_off_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">recv_size<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><operator pos:line="10" pos:column="28">-<pos:position pos:line="10" pos:column="29"/></operator><literal type="number" pos:line="10" pos:column="29">2<pos:position pos:line="10" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt> <comment type="block" pos:line="10" pos:column="32">/* Make it easy to spot in the log */</comment>

    <comment type="block" pos:line="12" pos:column="5">/* Find the head of the recv pipe, if any */</comment>
    <if pos:line="13" pos:column="5">if<condition pos:line="13" pos:column="7">(<expr><name><name pos:line="13" pos:column="8">conn<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">recv_pipe<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">.<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">head<pos:position pos:line="13" pos:column="28"/></name></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29"> <block pos:line="13" pos:column="30">{
      <decl_stmt><decl><type><name><name pos:line="14" pos:column="7">struct<pos:position pos:line="14" pos:column="13"/></name> <name pos:line="14" pos:column="14">Curl_easy<pos:position pos:line="14" pos:column="23"/></name></name> <modifier pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></modifier></type><name pos:line="14" pos:column="25">recv_handle<pos:position pos:line="14" pos:column="36"/></name> <init pos:line="14" pos:column="37">= <expr><name><name pos:line="14" pos:column="39">conn<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">-&gt;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="45">recv_pipe<pos:position pos:line="14" pos:column="54"/></name><operator pos:line="14" pos:column="54">.<pos:position pos:line="14" pos:column="55"/></operator><name pos:line="14" pos:column="55">head<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">-&gt;<pos:position pos:line="14" pos:column="64"/></operator><name pos:line="14" pos:column="61">ptr<pos:position pos:line="14" pos:column="64"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="65"/></decl_stmt>

      <expr_stmt><expr><name pos:line="16" pos:column="7">recv_size<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <name><name pos:line="16" pos:column="19">recv_handle<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">req<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">.<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="36">size<pos:position pos:line="16" pos:column="40"/></name></name></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>

      <if pos:line="18" pos:column="7">if<condition pos:line="18" pos:column="9">(<expr><name pos:line="18" pos:column="10">penalty_size<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&gt;<pos:position pos:line="18" pos:column="27"/></operator> <literal type="number" pos:line="18" pos:column="25">0<pos:position pos:line="18" pos:column="26"/></literal> <operator pos:line="18" pos:column="27">&amp;&amp;<pos:position pos:line="18" pos:column="37"/></operator> <name pos:line="18" pos:column="30">recv_size<pos:position pos:line="18" pos:column="39"/></name> <operator pos:line="18" pos:column="40">&gt;<pos:position pos:line="18" pos:column="44"/></operator> <name pos:line="18" pos:column="42">penalty_size<pos:position pos:line="18" pos:column="54"/></name></expr>)<pos:position pos:line="18" pos:column="55"/></condition><then pos:line="18" pos:column="55">
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">penalized<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">TRUE<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt></block></then></if>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><name pos:line="22" pos:column="8">chunk_penalty_size<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">&gt;<pos:position pos:line="22" pos:column="31"/></operator> <literal type="number" pos:line="22" pos:column="29">0<pos:position pos:line="22" pos:column="30"/></literal> <operator pos:line="22" pos:column="31">&amp;&amp;<pos:position pos:line="22" pos:column="41"/></operator>
       <operator pos:line="23" pos:column="8">(<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">curl_off_t<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">)<pos:position pos:line="23" pos:column="20"/></operator><name><name pos:line="23" pos:column="20">conn<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">chunk<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">datasize<pos:position pos:line="23" pos:column="40"/></name></name> <operator pos:line="23" pos:column="41">&gt;<pos:position pos:line="23" pos:column="45"/></operator> <name pos:line="23" pos:column="43">chunk_penalty_size<pos:position pos:line="23" pos:column="61"/></name></expr>)<pos:position pos:line="23" pos:column="62"/></condition><then pos:line="23" pos:column="62">
      <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="7">penalized<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">TRUE<pos:position pos:line="24" pos:column="23"/></name></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">infof<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><name pos:line="26" pos:column="11">data<pos:position pos:line="26" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="17">"Conn: %ld (%p) Receive pipe weight: (%"<pos:position pos:line="26" pos:column="57"/></literal>
          <name pos:line="27" pos:column="11">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="27" pos:column="33"/></name> <literal type="string" pos:line="27" pos:column="34">"/%zu), penalized: %s\n"<pos:position pos:line="27" pos:column="58"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="28" pos:column="11">conn<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">connection_id<pos:position pos:line="28" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="32">(<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="33">void<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">*<pos:position pos:line="28" pos:column="39"/></operator><operator pos:line="28" pos:column="39">)<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="40">conn<pos:position pos:line="28" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="46">recv_size<pos:position pos:line="28" pos:column="55"/></name></expr></argument>,
          <argument><expr><name><name pos:line="29" pos:column="11">conn<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">chunk<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">.<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">datasize<pos:position pos:line="29" pos:column="31"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="29" pos:column="33">penalized<pos:position pos:line="29" pos:column="42"/></name></expr>?<pos:position pos:line="29" pos:column="43"/></condition><then><expr><literal type="string" pos:line="29" pos:column="43">"TRUE"<pos:position pos:line="29" pos:column="49"/></literal></expr></then><else pos:line="29" pos:column="49">:<expr><literal type="string" pos:line="29" pos:column="50">"FALSE"<pos:position pos:line="29" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">penalized<pos:position pos:line="30" pos:column="21"/></name></expr>;<pos:position pos:line="30" pos:column="22"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>
  <return pos:line="32" pos:column="3">return <expr><name pos:line="32" pos:column="10">FALSE<pos:position pos:line="32" pos:column="15"/></name></expr>;<pos:position pos:line="32" pos:column="16"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
