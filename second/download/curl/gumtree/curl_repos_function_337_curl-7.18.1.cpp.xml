<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_337_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ParameterError<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">file2memory<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">bufp<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">size_t<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">size<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">FILE<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">file<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">newbuf<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">buffer<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">NULL<pos:position pos:line="4" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">alloc<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><literal type="number" pos:line="5" pos:column="18">512<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">nused<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">nread<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">file<pos:position pos:line="9" pos:column="10"/></name></expr>)<pos:position pos:line="9" pos:column="11"/></condition><then pos:line="9" pos:column="11"> <block pos:line="9" pos:column="12">{
    <do pos:line="10" pos:column="5">do <block pos:line="10" pos:column="8">{
      <if pos:line="11" pos:column="7">if<condition pos:line="11" pos:column="9">(<expr><operator pos:line="11" pos:column="10">!<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">buffer<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">||<pos:position pos:line="11" pos:column="20"/></operator> <operator pos:line="11" pos:column="21">(<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">alloc<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">==<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">nused<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">)<pos:position pos:line="11" pos:column="37"/></operator></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38"> <block pos:line="11" pos:column="39">{
        <comment type="block" pos:line="12" pos:column="9">/* size_t overflow detection for huge files */</comment>
        <if pos:line="13" pos:column="9">if<condition pos:line="13" pos:column="11">(<expr><name pos:line="13" pos:column="12">alloc<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">+<pos:position pos:line="13" pos:column="18"/></operator><literal type="number" pos:line="13" pos:column="18">1<pos:position pos:line="13" pos:column="19"/></literal> <operator pos:line="13" pos:column="20">&gt;<pos:position pos:line="13" pos:column="24"/></operator> <operator pos:line="13" pos:column="22">(<pos:position pos:line="13" pos:column="23"/></operator><operator pos:line="13" pos:column="23">(<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">size_t<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">)<pos:position pos:line="13" pos:column="31"/></operator><operator pos:line="13" pos:column="31">-<pos:position pos:line="13" pos:column="32"/></operator><literal type="number" pos:line="13" pos:column="32">1<pos:position pos:line="13" pos:column="33"/></literal><operator pos:line="13" pos:column="33">)<pos:position pos:line="13" pos:column="34"/></operator><operator pos:line="13" pos:column="34">/<pos:position pos:line="13" pos:column="35"/></operator><literal type="number" pos:line="13" pos:column="35">2<pos:position pos:line="13" pos:column="36"/></literal></expr>)<pos:position pos:line="13" pos:column="37"/></condition><then pos:line="13" pos:column="37"> <block pos:line="13" pos:column="38">{
          <if pos:line="14" pos:column="11">if<condition pos:line="14" pos:column="13">(<expr><name pos:line="14" pos:column="14">buffer<pos:position pos:line="14" pos:column="20"/></name></expr>)<pos:position pos:line="14" pos:column="21"/></condition><then pos:line="14" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="13">free<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">buffer<pos:position pos:line="15" pos:column="24"/></name></expr></argument>)<pos:position pos:line="15" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt></block></then></if>
          <return pos:line="16" pos:column="11">return <expr><name pos:line="16" pos:column="18">PARAM_NO_MEM<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="18" pos:column="9">alloc<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">*=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="18">2<pos:position pos:line="18" pos:column="19"/></literal></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
        <comment type="block" pos:line="19" pos:column="9">/* allocate an extra char, reserved space, for null termination */</comment>
        <if pos:line="20" pos:column="9">if<condition pos:line="20" pos:column="11">(<expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">newbuf<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <call><name pos:line="20" pos:column="22">realloc<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">buffer<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">alloc<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">+<pos:position pos:line="20" pos:column="44"/></operator><literal type="number" pos:line="20" pos:column="44">1<pos:position pos:line="20" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></call><operator pos:line="20" pos:column="46">)<pos:position pos:line="20" pos:column="47"/></operator> <operator pos:line="20" pos:column="48">==<pos:position pos:line="20" pos:column="50"/></operator> <name pos:line="20" pos:column="51">NULL<pos:position pos:line="20" pos:column="55"/></name></expr>)<pos:position pos:line="20" pos:column="56"/></condition><then pos:line="20" pos:column="56"> <block pos:line="20" pos:column="57">{
          <if pos:line="21" pos:column="11">if<condition pos:line="21" pos:column="13">(<expr><name pos:line="21" pos:column="14">buffer<pos:position pos:line="21" pos:column="20"/></name></expr>)<pos:position pos:line="21" pos:column="21"/></condition><then pos:line="21" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="13">free<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">buffer<pos:position pos:line="22" pos:column="24"/></name></expr></argument>)<pos:position pos:line="22" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt></block></then></if>
          <return pos:line="23" pos:column="11">return <expr><name pos:line="23" pos:column="18">PARAM_NO_MEM<pos:position pos:line="23" pos:column="30"/></name></expr>;<pos:position pos:line="23" pos:column="31"/></return>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="25" pos:column="9">buffer<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <name pos:line="25" pos:column="18">newbuf<pos:position pos:line="25" pos:column="24"/></name></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="26" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="27" pos:column="7">nread<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">fread<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">buffer<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">+<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">nused<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="35">1<pos:position pos:line="27" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="38">alloc<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">nused<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="51">file<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name pos:line="28" pos:column="7">nused<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">+=<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">nread<pos:position pos:line="28" pos:column="21"/></name></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block> while<condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">nread<pos:position pos:line="29" pos:column="18"/></name></expr>)<pos:position pos:line="29" pos:column="19"/></condition>;<pos:position pos:line="29" pos:column="20"/></do>
    <comment type="block" pos:line="30" pos:column="5">/* null terminate the buffer in case it's used as a string later */</comment>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">buffer<pos:position pos:line="31" pos:column="11"/></name><index pos:line="31" pos:column="11">[<expr><name pos:line="31" pos:column="12">nused<pos:position pos:line="31" pos:column="17"/></name></expr>]<pos:position pos:line="31" pos:column="18"/></index></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <literal type="char" pos:line="31" pos:column="21">'\0'<pos:position pos:line="31" pos:column="25"/></literal></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="32" pos:column="5">/* free trailing slack space, if possible */</comment>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><name pos:line="33" pos:column="8">alloc<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">!=<pos:position pos:line="33" pos:column="16"/></operator> <name pos:line="33" pos:column="17">nused<pos:position pos:line="33" pos:column="22"/></name></expr>)<pos:position pos:line="33" pos:column="23"/></condition><then pos:line="33" pos:column="23"> <block pos:line="33" pos:column="24">{
      <if pos:line="34" pos:column="7">if<condition pos:line="34" pos:column="9">(<expr><operator pos:line="34" pos:column="10">(<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="11">newbuf<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <call><name pos:line="34" pos:column="20">realloc<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">buffer<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">nused<pos:position pos:line="34" pos:column="41"/></name><operator pos:line="34" pos:column="41">+<pos:position pos:line="34" pos:column="42"/></operator><literal type="number" pos:line="34" pos:column="42">1<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call><operator pos:line="34" pos:column="44">)<pos:position pos:line="34" pos:column="45"/></operator> <operator pos:line="34" pos:column="46">!=<pos:position pos:line="34" pos:column="48"/></operator> <name pos:line="34" pos:column="49">NULL<pos:position pos:line="34" pos:column="53"/></name></expr>)<pos:position pos:line="34" pos:column="54"/></condition><then pos:line="34" pos:column="54">
        <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="9">buffer<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <name pos:line="35" pos:column="18">newbuf<pos:position pos:line="35" pos:column="24"/></name></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="37" pos:column="5">/* discard buffer if nothing was read */</comment>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><operator pos:line="38" pos:column="8">!<pos:position pos:line="38" pos:column="9"/></operator><name pos:line="38" pos:column="9">nused<pos:position pos:line="38" pos:column="14"/></name></expr>)<pos:position pos:line="38" pos:column="15"/></condition><then pos:line="38" pos:column="15"> <block pos:line="38" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">free<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><name pos:line="39" pos:column="12">buffer<pos:position pos:line="39" pos:column="18"/></name></expr></argument>)<pos:position pos:line="39" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="40" pos:column="7">buffer<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">NULL<pos:position pos:line="40" pos:column="20"/></name></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt> <comment type="block" pos:line="40" pos:column="22">/* no string */</comment>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>
  <expr_stmt><expr><operator pos:line="43" pos:column="3">*<pos:position pos:line="43" pos:column="4"/></operator><name pos:line="43" pos:column="4">size<pos:position pos:line="43" pos:column="8"/></name> <operator pos:line="43" pos:column="9">=<pos:position pos:line="43" pos:column="10"/></operator> <name pos:line="43" pos:column="11">nused<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="44" pos:column="3">*<pos:position pos:line="44" pos:column="4"/></operator><name pos:line="44" pos:column="4">bufp<pos:position pos:line="44" pos:column="8"/></name> <operator pos:line="44" pos:column="9">=<pos:position pos:line="44" pos:column="10"/></operator> <name pos:line="44" pos:column="11">buffer<pos:position pos:line="44" pos:column="17"/></name></expr>;<pos:position pos:line="44" pos:column="18"/></expr_stmt>
  <return pos:line="45" pos:column="3">return <expr><name pos:line="45" pos:column="10">PARAM_OK<pos:position pos:line="45" pos:column="18"/></name></expr>;<pos:position pos:line="45" pos:column="19"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
