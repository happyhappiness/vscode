<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1538_curl-7.41.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">showit<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">SessionHandle<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">data<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">curl_infotype<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">type<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                  <parameter><decl><type><name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">ptr<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">size_t<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">size<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="4" pos:column="3">static<pos:position pos:line="4" pos:column="9"/></specifier> <type><specifier pos:line="4" pos:column="10">const<pos:position pos:line="4" pos:column="15"/></specifier> <name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">s_infotype<pos:position pos:line="4" pos:column="31"/></name><index pos:line="4" pos:column="31">[<expr><name pos:line="4" pos:column="32">CURLINFO_END<pos:position pos:line="4" pos:column="44"/></name></expr>]<pos:position pos:line="4" pos:column="45"/></index><index pos:line="4" pos:column="45">[<expr><literal type="number" pos:line="4" pos:column="46">3<pos:position pos:line="4" pos:column="47"/></literal></expr>]<pos:position pos:line="4" pos:column="48"/></index></name> <init pos:line="4" pos:column="49">= <expr><block pos:line="4" pos:column="51">{
    <expr><literal type="string" pos:line="5" pos:column="5">"* "<pos:position pos:line="5" pos:column="9"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="11">"&lt; "<pos:position pos:line="5" pos:column="18"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="17">"&gt; "<pos:position pos:line="5" pos:column="24"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="23">"{ "<pos:position pos:line="5" pos:column="27"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="29">"} "<pos:position pos:line="5" pos:column="33"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="35">"{ "<pos:position pos:line="5" pos:column="39"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="41">"} "<pos:position pos:line="5" pos:column="45"/></literal></expr> }<pos:position pos:line="5" pos:column="47"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>

<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="7" pos:column="29"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">buf<pos:position pos:line="8" pos:column="11"/></name><index pos:line="8" pos:column="11">[<expr><name pos:line="8" pos:column="12">BUFSIZE<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">+<pos:position pos:line="8" pos:column="20"/></operator><literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr>]<pos:position pos:line="8" pos:column="22"/></index></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">conv_size<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>

  <switch pos:line="11" pos:column="3">switch<condition pos:line="11" pos:column="9">(<expr><name pos:line="11" pos:column="10">type<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition> <block pos:line="11" pos:column="16">{
  <case pos:line="12" pos:column="3">case <expr><name pos:line="12" pos:column="8">CURLINFO_HEADER_OUT<pos:position pos:line="12" pos:column="27"/></name></expr>:<pos:position pos:line="12" pos:column="28"/></case>
    <comment type="block" pos:line="13" pos:column="5">/* assume output headers are ASCII */</comment>
    <comment type="block" pos:line="14" pos:column="5">/* copy the data into my buffer so the original is unchanged */</comment>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name pos:line="15" pos:column="8">size<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">&gt;<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="15">BUFSIZE<pos:position pos:line="15" pos:column="22"/></name></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23"> <block pos:line="15" pos:column="24">{
      <expr_stmt><expr><name pos:line="16" pos:column="7">size<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <name pos:line="16" pos:column="14">BUFSIZE<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt> <comment type="block" pos:line="16" pos:column="23">/* truncate if necessary */</comment>
      <expr_stmt><expr><name><name pos:line="17" pos:column="7">buf<pos:position pos:line="17" pos:column="10"/></name><index pos:line="17" pos:column="10">[<expr><name pos:line="17" pos:column="11">BUFSIZE<pos:position pos:line="17" pos:column="18"/></name></expr>]<pos:position pos:line="17" pos:column="19"/></index></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <literal type="char" pos:line="17" pos:column="22">'\0'<pos:position pos:line="17" pos:column="26"/></literal></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="19" pos:column="5">conv_size<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">size<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">memcpy<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">buf<pos:position pos:line="20" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="17">ptr<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="22">size<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
    <comment type="block" pos:line="21" pos:column="5">/* Special processing is needed for this block if it
     * contains both headers and data (separated by CRLFCRLF).
     * We want to convert just the headers, leaving the data as-is.
     */</comment>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">size<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">&gt;<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="15">4<pos:position pos:line="25" pos:column="16"/></literal></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17"> <block pos:line="25" pos:column="18">{
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">size_t<pos:position pos:line="26" pos:column="13"/></name></type> <name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name></decl>;<pos:position pos:line="26" pos:column="16"/></decl_stmt>
      <for pos:line="27" pos:column="7">for<control pos:line="27" pos:column="10">(<init><expr><name pos:line="27" pos:column="11">i<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <literal type="number" pos:line="27" pos:column="15">0<pos:position pos:line="27" pos:column="16"/></literal></expr>;<pos:position pos:line="27" pos:column="17"/></init> <condition><expr><name pos:line="27" pos:column="18">i<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">&lt;<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="22">size<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-<pos:position pos:line="27" pos:column="27"/></operator><literal type="number" pos:line="27" pos:column="27">4<pos:position pos:line="27" pos:column="28"/></literal></expr>;<pos:position pos:line="27" pos:column="29"/></condition> <incr><expr><name pos:line="27" pos:column="30">i<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">++<pos:position pos:line="27" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="34"/></control> <block pos:line="27" pos:column="35">{
        <if pos:line="28" pos:column="9">if<condition pos:line="28" pos:column="11">(<expr><call><name pos:line="28" pos:column="12">memcmp<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><operator pos:line="28" pos:column="19">&amp;<pos:position pos:line="28" pos:column="24"/></operator><name><name pos:line="28" pos:column="20">buf<pos:position pos:line="28" pos:column="23"/></name><index pos:line="28" pos:column="23">[<expr><name pos:line="28" pos:column="24">i<pos:position pos:line="28" pos:column="25"/></name></expr>]<pos:position pos:line="28" pos:column="26"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="28">"\x0d\x0a\x0d\x0a"<pos:position pos:line="28" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="48">4<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call> <operator pos:line="28" pos:column="51">==<pos:position pos:line="28" pos:column="53"/></operator> <literal type="number" pos:line="28" pos:column="54">0<pos:position pos:line="28" pos:column="55"/></literal></expr>)<pos:position pos:line="28" pos:column="56"/></condition><then pos:line="28" pos:column="56"> <block pos:line="28" pos:column="57">{
          <comment type="block" pos:line="29" pos:column="11">/* convert everything through this CRLFCRLF but no further */</comment>
          <expr_stmt><expr><name pos:line="30" pos:column="11">conv_size<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <name pos:line="30" pos:column="23">i<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">+<pos:position pos:line="30" pos:column="26"/></operator> <literal type="number" pos:line="30" pos:column="27">4<pos:position pos:line="30" pos:column="28"/></literal></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
          <break pos:line="31" pos:column="11">break;<pos:position pos:line="31" pos:column="17"/></break>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>
      }<pos:position pos:line="33" pos:column="8"/></block></for>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">Curl_convert_from_network<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><name pos:line="36" pos:column="31">data<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="37">buf<pos:position pos:line="36" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="42">conv_size<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
    <comment type="block" pos:line="37" pos:column="5">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
    <comment type="block" pos:line="38" pos:column="5">/* we might as well continue even if it fails...   */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">ptr<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">=<pos:position pos:line="39" pos:column="10"/></operator> <name pos:line="39" pos:column="11">buf<pos:position pos:line="39" pos:column="14"/></name></expr>;<pos:position pos:line="39" pos:column="15"/></expr_stmt> <comment type="block" pos:line="39" pos:column="16">/* switch pointer to use my buffer instead */</comment>
    <break pos:line="40" pos:column="5">break;<pos:position pos:line="40" pos:column="11"/></break>
  <default pos:line="41" pos:column="3">default:<pos:position pos:line="41" pos:column="11"/></default>
    <comment type="block" pos:line="42" pos:column="5">/* leave everything else as-is */</comment>
    <break pos:line="43" pos:column="5">break;<pos:position pos:line="43" pos:column="11"/></break>
  }<pos:position pos:line="44" pos:column="4"/></block></switch>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="45" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><name><name pos:line="47" pos:column="6">data<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">-&gt;<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="12">set<pos:position pos:line="47" pos:column="15"/></name><operator pos:line="47" pos:column="15">.<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="16">fdebug<pos:position pos:line="47" pos:column="22"/></name></name></expr>)<pos:position pos:line="47" pos:column="23"/></condition><then pos:line="47" pos:column="23">
    <block type="pseudo"><return pos:line="48" pos:column="5">return <expr><call pos:line="48" pos:column="12">(<modifier pos:line="48" pos:column="13">*<pos:position pos:line="48" pos:column="14"/></modifier><name><name pos:line="48" pos:column="14">data<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">-&gt;<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="20">set<pos:position pos:line="48" pos:column="23"/></name><operator pos:line="48" pos:column="23">.<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="24">fdebug<pos:position pos:line="48" pos:column="30"/></name></name>)<argument_list pos:line="48" pos:column="31">(<argument><expr><name pos:line="48" pos:column="32">data<pos:position pos:line="48" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">type<pos:position pos:line="48" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="44">ptr<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="49">size<pos:position pos:line="48" pos:column="53"/></name></expr></argument>,
                               <argument><expr><name><name pos:line="49" pos:column="32">data<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">-&gt;<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="38">set<pos:position pos:line="49" pos:column="41"/></name><operator pos:line="49" pos:column="41">.<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="42">debugdata<pos:position pos:line="49" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="53"/></return></block></then></if>

  <switch pos:line="51" pos:column="3">switch<condition pos:line="51" pos:column="9">(<expr><name pos:line="51" pos:column="10">type<pos:position pos:line="51" pos:column="14"/></name></expr>)<pos:position pos:line="51" pos:column="15"/></condition> <block pos:line="51" pos:column="16">{
  <case pos:line="52" pos:column="3">case <expr><name pos:line="52" pos:column="8">CURLINFO_TEXT<pos:position pos:line="52" pos:column="21"/></name></expr>:<pos:position pos:line="52" pos:column="22"/></case>
  <case pos:line="53" pos:column="3">case <expr><name pos:line="53" pos:column="8">CURLINFO_HEADER_OUT<pos:position pos:line="53" pos:column="27"/></name></expr>:<pos:position pos:line="53" pos:column="28"/></case>
  <case pos:line="54" pos:column="3">case <expr><name pos:line="54" pos:column="8">CURLINFO_HEADER_IN<pos:position pos:line="54" pos:column="26"/></name></expr>:<pos:position pos:line="54" pos:column="27"/></case>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">fwrite<pos:position pos:line="55" pos:column="11"/></name><argument_list pos:line="55" pos:column="11">(<argument><expr><name><name pos:line="55" pos:column="12">s_infotype<pos:position pos:line="55" pos:column="22"/></name><index pos:line="55" pos:column="22">[<expr><name pos:line="55" pos:column="23">type<pos:position pos:line="55" pos:column="27"/></name></expr>]<pos:position pos:line="55" pos:column="28"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="30">2<pos:position pos:line="55" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="33">1<pos:position pos:line="55" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="36">data<pos:position pos:line="55" pos:column="40"/></name><operator pos:line="55" pos:column="40">-&gt;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="42">set<pos:position pos:line="55" pos:column="45"/></name><operator pos:line="55" pos:column="45">.<pos:position pos:line="55" pos:column="46"/></operator><name pos:line="55" pos:column="46">err<pos:position pos:line="55" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">fwrite<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name pos:line="56" pos:column="12">ptr<pos:position pos:line="56" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="17">size<pos:position pos:line="56" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="23">1<pos:position pos:line="56" pos:column="24"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="26">data<pos:position pos:line="56" pos:column="30"/></name><operator pos:line="56" pos:column="30">-&gt;<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="32">set<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">.<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="36">err<pos:position pos:line="56" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="41"/></expr_stmt>
<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="57" pos:column="29"/></name></cpp:ifdef>
    <if pos:line="58" pos:column="5">if<condition pos:line="58" pos:column="7">(<expr><name pos:line="58" pos:column="8">size<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">!=<pos:position pos:line="58" pos:column="15"/></operator> <name pos:line="58" pos:column="16">conv_size<pos:position pos:line="58" pos:column="25"/></name></expr>)<pos:position pos:line="58" pos:column="26"/></condition><then pos:line="58" pos:column="26"> <block pos:line="58" pos:column="27">{
      <comment type="block" pos:line="59" pos:column="7">/* we had untranslated data so we need an explicit newline */</comment>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">fwrite<pos:position pos:line="60" pos:column="13"/></name><argument_list pos:line="60" pos:column="13">(<argument><expr><literal type="string" pos:line="60" pos:column="14">"\n"<pos:position pos:line="60" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="20">1<pos:position pos:line="60" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="23">1<pos:position pos:line="60" pos:column="24"/></literal></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="26">data<pos:position pos:line="60" pos:column="30"/></name><operator pos:line="60" pos:column="30">-&gt;<pos:position pos:line="60" pos:column="35"/></operator><name pos:line="60" pos:column="32">set<pos:position pos:line="60" pos:column="35"/></name><operator pos:line="60" pos:column="35">.<pos:position pos:line="60" pos:column="36"/></operator><name pos:line="60" pos:column="36">err<pos:position pos:line="60" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>
    <break pos:line="63" pos:column="5">break;<pos:position pos:line="63" pos:column="11"/></break>
  <default pos:line="64" pos:column="3">default:<pos:position pos:line="64" pos:column="11"/></default> <comment type="block" pos:line="64" pos:column="12">/* nada */</comment>
    <break pos:line="65" pos:column="5">break;<pos:position pos:line="65" pos:column="11"/></break>
  }<pos:position pos:line="66" pos:column="4"/></block></switch>
  <return pos:line="67" pos:column="3">return <expr><literal type="number" pos:line="67" pos:column="10">0<pos:position pos:line="67" pos:column="11"/></literal></expr>;<pos:position pos:line="67" pos:column="12"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
