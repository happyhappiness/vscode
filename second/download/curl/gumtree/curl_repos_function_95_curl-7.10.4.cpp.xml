<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_95_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_nonblock<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">socket<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>,    <comment type="block" pos:line="1" pos:column="34">/* operate on this */</comment>
                  <parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">nonblock<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>   <comment type="block" pos:line="2" pos:column="34">/* TRUE or FALSE */</comment>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:undef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">undef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">SETBLOCK<pos:position pos:line="4" pos:column="16"/></name></cpp:undef>
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">HAVE_O_NONBLOCK<pos:position pos:line="5" pos:column="23"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">flags<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">flags<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <call><name pos:line="8" pos:column="11">fcntl<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><name pos:line="8" pos:column="17">socket<pos:position pos:line="8" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="25">F_GETFL<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="34">0<pos:position pos:line="8" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">TRUE<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">==<pos:position pos:line="9" pos:column="14"/></operator> <name pos:line="9" pos:column="15">nonblock<pos:position pos:line="9" pos:column="23"/></name></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><call><name pos:line="10" pos:column="12">fcntl<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">socket<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">F_SETFL<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">flags<pos:position pos:line="10" pos:column="40"/></name> <operator pos:line="10" pos:column="41">|<pos:position pos:line="10" pos:column="42"/></operator> <name pos:line="10" pos:column="43">O_NONBLOCK<pos:position pos:line="10" pos:column="53"/></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></return></block></then>
  <else pos:line="11" pos:column="3">else
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><call><name pos:line="12" pos:column="12">fcntl<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><name pos:line="12" pos:column="18">socket<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">F_SETFL<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="35">flags<pos:position pos:line="12" pos:column="40"/></name> <operator pos:line="12" pos:column="41">&amp;<pos:position pos:line="12" pos:column="46"/></operator> <operator pos:line="12" pos:column="43">(<pos:position pos:line="12" pos:column="44"/></operator><operator pos:line="12" pos:column="44">~<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="45">O_NONBLOCK<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">)<pos:position pos:line="12" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></return></block></else></if>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define<pos:position pos:line="13" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">SETBLOCK<pos:position pos:line="13" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="13" pos:column="18">1<pos:position pos:line="13" pos:column="19"/></cpp:value></cpp:define>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">HAVE_FIONBIO<pos:position pos:line="16" pos:column="20"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">int<pos:position pos:line="17" pos:column="6"/></name></type> <name pos:line="17" pos:column="7">flags<pos:position pos:line="17" pos:column="12"/></name></decl>;<pos:position pos:line="17" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">flags<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <name pos:line="19" pos:column="11">nonblock<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt>
  <return pos:line="20" pos:column="3">return <expr><call><name pos:line="20" pos:column="10">ioctl<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">socket<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">FIONBIO<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="33">&amp;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="34">flags<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></return>
<cpp:define pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">define<pos:position pos:line="21" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="21" pos:column="9">SETBLOCK<pos:position pos:line="21" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="21" pos:column="18">2<pos:position pos:line="21" pos:column="19"/></cpp:value></cpp:define>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">HAVE_IOCTLSOCKET<pos:position pos:line="24" pos:column="24"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">int<pos:position pos:line="25" pos:column="6"/></name></type> <name pos:line="25" pos:column="7">flags<pos:position pos:line="25" pos:column="12"/></name></decl>;<pos:position pos:line="25" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><name pos:line="26" pos:column="3">flags<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <name pos:line="26" pos:column="11">nonblock<pos:position pos:line="26" pos:column="19"/></name></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>
  <return pos:line="27" pos:column="3">return <expr><call><name pos:line="27" pos:column="10">ioctlsocket<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">socket<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">FIONBIO<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="39">&amp;<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="40">flags<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></return>
<cpp:define pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">define<pos:position pos:line="28" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="28" pos:column="9">SETBLOCK<pos:position pos:line="28" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="28" pos:column="18">3<pos:position pos:line="28" pos:column="19"/></cpp:value></cpp:define>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">HAVE_IOCTLSOCKET_CASE<pos:position pos:line="31" pos:column="29"/></name></cpp:ifdef>
  <return pos:line="32" pos:column="3">return <expr><call><name pos:line="32" pos:column="10">IoctlSocket<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">socket<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="30">FIONBIO<pos:position pos:line="32" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="39">(<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="40">long<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">)<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="45">nonblock<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></return>
<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define<pos:position pos:line="33" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">SETBLOCK<pos:position pos:line="33" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="33" pos:column="18">4<pos:position pos:line="33" pos:column="19"/></cpp:value></cpp:define>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifdef<pos:position pos:line="36" pos:column="7"/></cpp:directive> <name pos:line="36" pos:column="8">HAVE_DISABLED_NONBLOCKING<pos:position pos:line="36" pos:column="33"/></name></cpp:ifdef>
  <return pos:line="37" pos:column="3">return <expr><literal type="number" pos:line="37" pos:column="10">0<pos:position pos:line="37" pos:column="11"/></literal></expr>;<pos:position pos:line="37" pos:column="12"/></return> <comment type="block" pos:line="37" pos:column="13">/* returns success */</comment>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define<pos:position pos:line="38" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">SETBLOCK<pos:position pos:line="38" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="38" pos:column="18">5<pos:position pos:line="38" pos:column="19"/></cpp:value></cpp:define>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifndef<pos:position pos:line="41" pos:column="8"/></cpp:directive> <name pos:line="41" pos:column="9">SETBLOCK<pos:position pos:line="41" pos:column="17"/></name></cpp:ifndef>
<cpp:error pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">error<pos:position pos:line="42" pos:column="7"/></cpp:directive> <cpp:literal pos:line="42" pos:column="8">"no non-blocking method was found/used/set"<pos:position pos:line="42" pos:column="51"/></cpp:literal></cpp:error>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
