<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_618_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">callback<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">ptr<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">size_t<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">size<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">size_t<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">nmemb<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">void<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">data<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ssize_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">idx<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><operator pos:line="3" pos:column="17">(<pos:position pos:line="3" pos:column="18"/></operator><operator pos:line="3" pos:column="18">(<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="19">CURL<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></operator><operator pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></operator><operator pos:line="3" pos:column="26">)<pos:position pos:line="3" pos:column="27"/></operator> <name pos:line="3" pos:column="28">data<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">)<pos:position pos:line="3" pos:column="33"/></operator> <operator pos:line="3" pos:column="34">-<pos:position pos:line="3" pos:column="35"/></operator> <name pos:line="3" pos:column="36">easy<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">sock<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">long<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">longdata<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">code<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">failure<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><ternary><condition><expr><operator pos:line="7" pos:column="26">(<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">size<pos:position pos:line="7" pos:column="31"/></name> <operator pos:line="7" pos:column="32">&amp;&amp;<pos:position pos:line="7" pos:column="42"/></operator> <name pos:line="7" pos:column="35">nmemb<pos:position pos:line="7" pos:column="40"/></name><operator pos:line="7" pos:column="40">)<pos:position pos:line="7" pos:column="41"/></operator></expr> ?<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43"> <expr><literal type="number" pos:line="7" pos:column="44">0<pos:position pos:line="7" pos:column="45"/></literal></expr> <pos:position pos:line="7" pos:column="46"/></then><else pos:line="7" pos:column="46">: <expr><literal type="number" pos:line="7" pos:column="48">1<pos:position pos:line="7" pos:column="49"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="8" pos:column="3">(<pos:position pos:line="8" pos:column="4"/></operator><name pos:line="8" pos:column="4">void<pos:position pos:line="8" pos:column="8"/></name><operator pos:line="8" pos:column="8">)<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="9">ptr<pos:position pos:line="8" pos:column="12"/></name></expr>;<pos:position pos:line="8" pos:column="13"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="10" pos:column="3">counter<pos:position pos:line="10" pos:column="10"/></name><index pos:line="10" pos:column="10">[<expr><name pos:line="10" pos:column="11">idx<pos:position pos:line="10" pos:column="14"/></name></expr>]<pos:position pos:line="10" pos:column="15"/></index></name> <operator pos:line="10" pos:column="16">+=<pos:position pos:line="10" pos:column="18"/></operator> <call pos:line="10" pos:column="19">(<name pos:line="10" pos:column="20">int<pos:position pos:line="10" pos:column="23"/></name>)<argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">size<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">*<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="32">nmemb<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* Get socket being used for this easy handle, otherwise CURL_SOCKET_BAD */</comment>
  <expr_stmt><expr><name pos:line="13" pos:column="3">code<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <call><name pos:line="13" pos:column="10">curl_easy_getinfo<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name><name pos:line="13" pos:column="28">easy<pos:position pos:line="13" pos:column="32"/></name><index pos:line="13" pos:column="32">[<expr><name pos:line="13" pos:column="33">idx<pos:position pos:line="13" pos:column="36"/></name></expr>]<pos:position pos:line="13" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">CURLINFO_LASTSOCKET<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="60">&amp;<pos:position pos:line="13" pos:column="65"/></operator><name pos:line="13" pos:column="61">longdata<pos:position pos:line="13" pos:column="69"/></name></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="71"/></expr_stmt>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">CURLE_OK<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">!=<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">code<pos:position pos:line="14" pos:column="22"/></name></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23"> <block pos:line="14" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">fprintf<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">stderr<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="21">"%s:%d curl_easy_getinfo() failed, "<pos:position pos:line="15" pos:column="57"/></literal>
            <literal type="string" pos:line="16" pos:column="13">"with code %d (%s)\n"<pos:position pos:line="16" pos:column="34"/></literal></expr></argument>,
            <argument><expr><name pos:line="17" pos:column="13">__FILE__<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">__LINE__<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="33">(<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="34">int<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">)<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">code<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="44">curl_easy_strerror<pos:position pos:line="17" pos:column="62"/></name><argument_list pos:line="17" pos:column="62">(<argument><expr><name pos:line="17" pos:column="63">code<pos:position pos:line="17" pos:column="67"/></name></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">res<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <name pos:line="18" pos:column="11">TEST_ERR_MAJOR_BAD<pos:position pos:line="18" pos:column="29"/></name></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">failure<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>
  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><name pos:line="21" pos:column="6">longdata<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">==<pos:position pos:line="21" pos:column="17"/></operator> <operator pos:line="21" pos:column="18">-<pos:position pos:line="21" pos:column="19"/></operator><literal type="number" pos:line="21" pos:column="19">1L<pos:position pos:line="21" pos:column="21"/></literal></expr>)<pos:position pos:line="21" pos:column="22"/></condition><then pos:line="21" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="5">sock<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <name pos:line="22" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="22" pos:column="27"/></name></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt></block></then>
  <else pos:line="23" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="5">sock<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">curl_socket_t<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">)<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="27">longdata<pos:position pos:line="24" pos:column="35"/></name></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt></block></else></if>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name pos:line="26" pos:column="6">sock<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">!=<pos:position pos:line="26" pos:column="13"/></operator> <name pos:line="26" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="26" pos:column="29"/></name></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30"> <block pos:line="26" pos:column="31">{
    <comment type="block" pos:line="27" pos:column="5">/* Track relationship between this easy handle and the socket. */</comment>
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><name><name pos:line="28" pos:column="8">sockets<pos:position pos:line="28" pos:column="15"/></name><index pos:line="28" pos:column="15">[<expr><name pos:line="28" pos:column="16">idx<pos:position pos:line="28" pos:column="19"/></name></expr>]<pos:position pos:line="28" pos:column="20"/></index></name> <operator pos:line="28" pos:column="21">==<pos:position pos:line="28" pos:column="23"/></operator> <name pos:line="28" pos:column="24">CURL_SOCKET_BAD<pos:position pos:line="28" pos:column="39"/></name></expr>)<pos:position pos:line="28" pos:column="40"/></condition><then pos:line="28" pos:column="40"> <block pos:line="28" pos:column="41">{
      <comment type="block" pos:line="29" pos:column="7">/* An easy handle without previous socket, record the socket. */</comment>
      <expr_stmt><expr><name><name pos:line="30" pos:column="7">sockets<pos:position pos:line="30" pos:column="14"/></name><index pos:line="30" pos:column="14">[<expr><name pos:line="30" pos:column="15">idx<pos:position pos:line="30" pos:column="18"/></name></expr>]<pos:position pos:line="30" pos:column="19"/></index></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="22">sock<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then>
    <elseif pos:line="32" pos:column="5">else <if pos:line="32" pos:column="10">if<condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">sock<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">!=<pos:position pos:line="32" pos:column="20"/></operator> <name><name pos:line="32" pos:column="21">sockets<pos:position pos:line="32" pos:column="28"/></name><index pos:line="32" pos:column="28">[<expr><name pos:line="32" pos:column="29">idx<pos:position pos:line="32" pos:column="32"/></name></expr>]<pos:position pos:line="32" pos:column="33"/></index></name></expr>)<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34"> <block pos:line="32" pos:column="35">{
      <comment type="block" pos:line="33" pos:column="7">/* An easy handle with a socket different to previously
         tracked one, log and fail right away. Known bug #37. */</comment>
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">fprintf<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">stderr<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="23">"Handle %d started on socket %d and moved to %d\n"<pos:position pos:line="35" pos:column="73"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="36" pos:column="15">curlx_sztosi<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">idx<pos:position pos:line="36" pos:column="31"/></name></expr></argument>)<pos:position pos:line="36" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="36" pos:column="34">(<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="35">int<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">)<pos:position pos:line="36" pos:column="39"/></operator><name><name pos:line="36" pos:column="39">sockets<pos:position pos:line="36" pos:column="46"/></name><index pos:line="36" pos:column="46">[<expr><name pos:line="36" pos:column="47">idx<pos:position pos:line="36" pos:column="50"/></name></expr>]<pos:position pos:line="36" pos:column="51"/></index></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="53">(<pos:position pos:line="36" pos:column="54"/></operator><name pos:line="36" pos:column="54">int<pos:position pos:line="36" pos:column="57"/></name><operator pos:line="36" pos:column="57">)<pos:position pos:line="36" pos:column="58"/></operator><name pos:line="36" pos:column="58">sock<pos:position pos:line="36" pos:column="62"/></name></expr></argument>)<pos:position pos:line="36" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name pos:line="37" pos:column="7">res<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <name pos:line="37" pos:column="13">TEST_ERR_MAJOR_BAD<pos:position pos:line="37" pos:column="31"/></name></expr>;<pos:position pos:line="37" pos:column="32"/></expr_stmt>
      <return pos:line="38" pos:column="7">return <expr><name pos:line="38" pos:column="14">failure<pos:position pos:line="38" pos:column="21"/></name></expr>;<pos:position pos:line="38" pos:column="22"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>
  <return pos:line="41" pos:column="3">return <expr><name pos:line="41" pos:column="10">size<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">*<pos:position pos:line="41" pos:column="16"/></operator> <name pos:line="41" pos:column="17">nmemb<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
