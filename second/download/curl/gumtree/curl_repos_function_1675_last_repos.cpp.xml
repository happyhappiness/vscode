<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1675_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">showit<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">Curl_easy<pos:position pos:line="1" pos:column="35"/></name></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">data<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">curl_infotype<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">type<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                  <parameter><decl><type><name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">ptr<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">size_t<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">size<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="4" pos:column="3">static<pos:position pos:line="4" pos:column="9"/></specifier> <type><specifier pos:line="4" pos:column="10">const<pos:position pos:line="4" pos:column="15"/></specifier> <name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">s_infotype<pos:position pos:line="4" pos:column="31"/></name><index pos:line="4" pos:column="31">[<expr><name pos:line="4" pos:column="32">CURLINFO_END<pos:position pos:line="4" pos:column="44"/></name></expr>]<pos:position pos:line="4" pos:column="45"/></index><index pos:line="4" pos:column="45">[<expr><literal type="number" pos:line="4" pos:column="46">3<pos:position pos:line="4" pos:column="47"/></literal></expr>]<pos:position pos:line="4" pos:column="48"/></index></name> <init pos:line="4" pos:column="49">= <expr><block pos:line="4" pos:column="51">{
    <expr><literal type="string" pos:line="5" pos:column="5">"* "<pos:position pos:line="5" pos:column="9"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="11">"&lt; "<pos:position pos:line="5" pos:column="18"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="17">"&gt; "<pos:position pos:line="5" pos:column="24"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="23">"{ "<pos:position pos:line="5" pos:column="27"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="29">"} "<pos:position pos:line="5" pos:column="33"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="35">"{ "<pos:position pos:line="5" pos:column="39"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="41">"} "<pos:position pos:line="5" pos:column="45"/></literal></expr> }<pos:position pos:line="5" pos:column="47"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">rc<pos:position pos:line="6" pos:column="9"/></name> <init pos:line="6" pos:column="10">= <expr><literal type="number" pos:line="6" pos:column="12">0<pos:position pos:line="6" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="8" pos:column="29"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">buf<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><name pos:line="9" pos:column="15">NULL<pos:position pos:line="9" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">conv_size<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>

  <switch pos:line="12" pos:column="3">switch<condition pos:line="12" pos:column="9">(<expr><name pos:line="12" pos:column="10">type<pos:position pos:line="12" pos:column="14"/></name></expr>)<pos:position pos:line="12" pos:column="15"/></condition> <block pos:line="12" pos:column="16">{
  <case pos:line="13" pos:column="3">case <expr><name pos:line="13" pos:column="8">CURLINFO_HEADER_OUT<pos:position pos:line="13" pos:column="27"/></name></expr>:<pos:position pos:line="13" pos:column="28"/></case>
    <expr_stmt><expr><name pos:line="14" pos:column="5">buf<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">Curl_memdup<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">ptr<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="28">size<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><operator pos:line="15" pos:column="8">!<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">buf<pos:position pos:line="15" pos:column="12"/></name></expr>)<pos:position pos:line="15" pos:column="13"/></condition><then pos:line="15" pos:column="13">
      <block type="pseudo"><return pos:line="16" pos:column="7">return <expr><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal></expr>;<pos:position pos:line="16" pos:column="16"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="17" pos:column="5">conv_size<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">size<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="19" pos:column="5">/* Special processing is needed for this block if it
     * contains both headers and data (separated by CRLFCRLF).
     * We want to convert just the headers, leaving the data as-is.
     */</comment>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><name pos:line="23" pos:column="8">size<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">&gt;<pos:position pos:line="23" pos:column="17"/></operator> <literal type="number" pos:line="23" pos:column="15">4<pos:position pos:line="23" pos:column="16"/></literal></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17"> <block pos:line="23" pos:column="18">{
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">size_t<pos:position pos:line="24" pos:column="13"/></name></type> <name pos:line="24" pos:column="14">i<pos:position pos:line="24" pos:column="15"/></name></decl>;<pos:position pos:line="24" pos:column="16"/></decl_stmt>
      <for pos:line="25" pos:column="7">for<control pos:line="25" pos:column="10">(<init><expr><name pos:line="25" pos:column="11">i<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <literal type="number" pos:line="25" pos:column="15">0<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></init> <condition><expr><name pos:line="25" pos:column="18">i<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">&lt;<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="22">size<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-<pos:position pos:line="25" pos:column="27"/></operator><literal type="number" pos:line="25" pos:column="27">4<pos:position pos:line="25" pos:column="28"/></literal></expr>;<pos:position pos:line="25" pos:column="29"/></condition> <incr><expr><name pos:line="25" pos:column="30">i<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">++<pos:position pos:line="25" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="34"/></control> <block pos:line="25" pos:column="35">{
        <if pos:line="26" pos:column="9">if<condition pos:line="26" pos:column="11">(<expr><call><name pos:line="26" pos:column="12">memcmp<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><operator pos:line="26" pos:column="19">&amp;<pos:position pos:line="26" pos:column="24"/></operator><name><name pos:line="26" pos:column="20">buf<pos:position pos:line="26" pos:column="23"/></name><index pos:line="26" pos:column="23">[<expr><name pos:line="26" pos:column="24">i<pos:position pos:line="26" pos:column="25"/></name></expr>]<pos:position pos:line="26" pos:column="26"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="28">"\x0d\x0a\x0d\x0a"<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="48">4<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call> <operator pos:line="26" pos:column="51">==<pos:position pos:line="26" pos:column="53"/></operator> <literal type="number" pos:line="26" pos:column="54">0<pos:position pos:line="26" pos:column="55"/></literal></expr>)<pos:position pos:line="26" pos:column="56"/></condition><then pos:line="26" pos:column="56"> <block pos:line="26" pos:column="57">{
          <comment type="block" pos:line="27" pos:column="11">/* convert everything through this CRLFCRLF but no further */</comment>
          <expr_stmt><expr><name pos:line="28" pos:column="11">conv_size<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">i<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">+<pos:position pos:line="28" pos:column="26"/></operator> <literal type="number" pos:line="28" pos:column="27">4<pos:position pos:line="28" pos:column="28"/></literal></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
          <break pos:line="29" pos:column="11">break;<pos:position pos:line="29" pos:column="17"/></break>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
      }<pos:position pos:line="31" pos:column="8"/></block></for>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">Curl_convert_from_network<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">data<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">buf<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="42">conv_size<pos:position pos:line="34" pos:column="51"/></name></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
    <comment type="block" pos:line="35" pos:column="5">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
    <comment type="block" pos:line="36" pos:column="5">/* we might as well continue even if it fails...   */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">ptr<pos:position pos:line="37" pos:column="8"/></name> <operator pos:line="37" pos:column="9">=<pos:position pos:line="37" pos:column="10"/></operator> <name pos:line="37" pos:column="11">buf<pos:position pos:line="37" pos:column="14"/></name></expr>;<pos:position pos:line="37" pos:column="15"/></expr_stmt> <comment type="block" pos:line="37" pos:column="16">/* switch pointer to use my buffer instead */</comment>
    <break pos:line="38" pos:column="5">break;<pos:position pos:line="38" pos:column="11"/></break>
  <default pos:line="39" pos:column="3">default:<pos:position pos:line="39" pos:column="11"/></default>
    <comment type="block" pos:line="40" pos:column="5">/* leave everything else as-is */</comment>
    <break pos:line="41" pos:column="5">break;<pos:position pos:line="41" pos:column="11"/></break>
  }<pos:position pos:line="42" pos:column="4"/></block></switch>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="43" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

  <if pos:line="45" pos:column="3">if<condition pos:line="45" pos:column="5">(<expr><name><name pos:line="45" pos:column="6">data<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">-&gt;<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="12">set<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">.<pos:position pos:line="45" pos:column="16"/></operator><name pos:line="45" pos:column="16">fdebug<pos:position pos:line="45" pos:column="22"/></name></name></expr>)<pos:position pos:line="45" pos:column="23"/></condition><then pos:line="45" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="5">rc<pos:position pos:line="46" pos:column="7"/></name> <operator pos:line="46" pos:column="8">=<pos:position pos:line="46" pos:column="9"/></operator> <call pos:line="46" pos:column="10">(<modifier pos:line="46" pos:column="11">*<pos:position pos:line="46" pos:column="12"/></modifier><name><name pos:line="46" pos:column="12">data<pos:position pos:line="46" pos:column="16"/></name><operator pos:line="46" pos:column="16">-&gt;<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="18">set<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">.<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="22">fdebug<pos:position pos:line="46" pos:column="28"/></name></name>)<argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">data<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="36">type<pos:position pos:line="46" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="42">ptr<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">size<pos:position pos:line="46" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="53">data<pos:position pos:line="46" pos:column="57"/></name><operator pos:line="46" pos:column="57">-&gt;<pos:position pos:line="46" pos:column="62"/></operator><name pos:line="46" pos:column="59">set<pos:position pos:line="46" pos:column="62"/></name><operator pos:line="46" pos:column="62">.<pos:position pos:line="46" pos:column="63"/></operator><name pos:line="46" pos:column="63">debugdata<pos:position pos:line="46" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="74"/></expr_stmt></block></then>
  <else pos:line="47" pos:column="3">else <block pos:line="47" pos:column="8">{
    <switch pos:line="48" pos:column="5">switch<condition pos:line="48" pos:column="11">(<expr><name pos:line="48" pos:column="12">type<pos:position pos:line="48" pos:column="16"/></name></expr>)<pos:position pos:line="48" pos:column="17"/></condition> <block pos:line="48" pos:column="18">{
    <case pos:line="49" pos:column="5">case <expr><name pos:line="49" pos:column="10">CURLINFO_TEXT<pos:position pos:line="49" pos:column="23"/></name></expr>:<pos:position pos:line="49" pos:column="24"/></case>
    <case pos:line="50" pos:column="5">case <expr><name pos:line="50" pos:column="10">CURLINFO_HEADER_OUT<pos:position pos:line="50" pos:column="29"/></name></expr>:<pos:position pos:line="50" pos:column="30"/></case>
    <case pos:line="51" pos:column="5">case <expr><name pos:line="51" pos:column="10">CURLINFO_HEADER_IN<pos:position pos:line="51" pos:column="28"/></name></expr>:<pos:position pos:line="51" pos:column="29"/></case>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">fwrite<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">(<argument><expr><name><name pos:line="52" pos:column="14">s_infotype<pos:position pos:line="52" pos:column="24"/></name><index pos:line="52" pos:column="24">[<expr><name pos:line="52" pos:column="25">type<pos:position pos:line="52" pos:column="29"/></name></expr>]<pos:position pos:line="52" pos:column="30"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="32">2<pos:position pos:line="52" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="35">1<pos:position pos:line="52" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="38">data<pos:position pos:line="52" pos:column="42"/></name><operator pos:line="52" pos:column="42">-&gt;<pos:position pos:line="52" pos:column="47"/></operator><name pos:line="52" pos:column="44">set<pos:position pos:line="52" pos:column="47"/></name><operator pos:line="52" pos:column="47">.<pos:position pos:line="52" pos:column="48"/></operator><name pos:line="52" pos:column="48">err<pos:position pos:line="52" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">fwrite<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><name pos:line="53" pos:column="14">ptr<pos:position pos:line="53" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="19">size<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="25">1<pos:position pos:line="53" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="28">data<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">-&gt;<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="34">set<pos:position pos:line="53" pos:column="37"/></name><operator pos:line="53" pos:column="37">.<pos:position pos:line="53" pos:column="38"/></operator><name pos:line="53" pos:column="38">err<pos:position pos:line="53" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="43"/></expr_stmt>
<cpp:ifdef pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">ifdef<pos:position pos:line="54" pos:column="7"/></cpp:directive> <name pos:line="54" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="54" pos:column="29"/></name></cpp:ifdef>
      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">(<expr><name pos:line="55" pos:column="10">size<pos:position pos:line="55" pos:column="14"/></name> <operator pos:line="55" pos:column="15">!=<pos:position pos:line="55" pos:column="17"/></operator> <name pos:line="55" pos:column="18">conv_size<pos:position pos:line="55" pos:column="27"/></name></expr>)<pos:position pos:line="55" pos:column="28"/></condition><then pos:line="55" pos:column="28"> <block pos:line="55" pos:column="29">{
        <comment type="block" pos:line="56" pos:column="9">/* we had untranslated data so we need an explicit newline */</comment>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">fwrite<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><literal type="string" pos:line="57" pos:column="16">"\n"<pos:position pos:line="57" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="22">1<pos:position pos:line="57" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="25">1<pos:position pos:line="57" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="28">data<pos:position pos:line="57" pos:column="32"/></name><operator pos:line="57" pos:column="32">-&gt;<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="34">set<pos:position pos:line="57" pos:column="37"/></name><operator pos:line="57" pos:column="37">.<pos:position pos:line="57" pos:column="38"/></operator><name pos:line="57" pos:column="38">err<pos:position pos:line="57" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="43"/></expr_stmt>
      }<pos:position pos:line="58" pos:column="8"/></block></then></if>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>
      <break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break>
    <default pos:line="61" pos:column="5">default:<pos:position pos:line="61" pos:column="13"/></default> <comment type="block" pos:line="61" pos:column="14">/* nada */</comment>
      <break pos:line="62" pos:column="7">break;<pos:position pos:line="62" pos:column="13"/></break>
    }<pos:position pos:line="63" pos:column="6"/></block></switch>
  }<pos:position pos:line="64" pos:column="4"/></block></else></if>
<cpp:ifdef pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">ifdef<pos:position pos:line="65" pos:column="7"/></cpp:directive> <name pos:line="65" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="65" pos:column="29"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">free<pos:position pos:line="66" pos:column="7"/></name><argument_list pos:line="66" pos:column="7">(<argument><expr><name pos:line="66" pos:column="8">buf<pos:position pos:line="66" pos:column="11"/></name></expr></argument>)<pos:position pos:line="66" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="13"/></expr_stmt>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="68" pos:column="3">return <expr><name pos:line="68" pos:column="10">rc<pos:position pos:line="68" pos:column="12"/></name></expr>;<pos:position pos:line="68" pos:column="13"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
