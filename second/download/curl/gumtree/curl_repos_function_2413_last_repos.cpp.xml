<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2413_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">mbed_connect_step2<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name><name pos:line="2" pos:column="20">struct<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">connectdata<pos:position pos:line="2" pos:column="38"/></name></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">conn<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="3" pos:column="20">int<pos:position pos:line="3" pos:column="23"/></name></type> <name pos:line="3" pos:column="24">sockindex<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="34"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">ret<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">ssl_connect_data<pos:position pos:line="7" pos:column="26"/></name></name><modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type> <name pos:line="7" pos:column="28">connssl<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><operator pos:line="7" pos:column="38">&amp;<pos:position pos:line="7" pos:column="43"/></operator><name><name pos:line="7" pos:column="39">conn<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">ssl<pos:position pos:line="7" pos:column="48"/></name><index pos:line="7" pos:column="48">[<expr><name pos:line="7" pos:column="49">sockindex<pos:position pos:line="7" pos:column="58"/></name></expr>]<pos:position pos:line="7" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">mbedtls_x509_crt<pos:position pos:line="8" pos:column="25"/></name> <modifier pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></modifier></type><name pos:line="8" pos:column="27">peercert<pos:position pos:line="8" pos:column="35"/></name></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier> <specifier pos:line="9" pos:column="16">const<pos:position pos:line="9" pos:column="21"/></specifier></type> <name pos:line="9" pos:column="22">pinnedpubkey<pos:position pos:line="9" pos:column="34"/></name> <init pos:line="9" pos:column="35">= <expr><ternary><condition><expr><call><name pos:line="9" pos:column="37">SSL_IS_PROXY<pos:position pos:line="9" pos:column="49"/></name><argument_list pos:line="9" pos:column="49">()<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr> ?<pos:position pos:line="9" pos:column="53"/></condition><then pos:line="9" pos:column="53">
        <expr><name><name pos:line="10" pos:column="9">data<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">set<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">str<pos:position pos:line="10" pos:column="22"/></name><index pos:line="10" pos:column="22">[<expr><name pos:line="10" pos:column="23">STRING_SSL_PINNEDPUBLICKEY_PROXY<pos:position pos:line="10" pos:column="55"/></name></expr>]<pos:position pos:line="10" pos:column="56"/></index></name></expr> <pos:position pos:line="10" pos:column="57"/></then><else pos:line="10" pos:column="57">:
        <expr><name><name pos:line="11" pos:column="9">data<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">set<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">str<pos:position pos:line="11" pos:column="22"/></name><index pos:line="11" pos:column="22">[<expr><name pos:line="11" pos:column="23">STRING_SSL_PINNEDPUBLICKEY_ORIG<pos:position pos:line="11" pos:column="54"/></name></expr>]<pos:position pos:line="11" pos:column="55"/></index></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="11" pos:column="56"/></decl_stmt>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">HAS_ALPN<pos:position pos:line="13" pos:column="16"/></name></cpp:ifdef>
  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">next_protocol<pos:position pos:line="14" pos:column="28"/></name></decl>;<pos:position pos:line="14" pos:column="29"/></decl_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name></type> <name><name pos:line="17" pos:column="8">errorbuf<pos:position pos:line="17" pos:column="16"/></name><index pos:line="17" pos:column="16">[<expr><literal type="number" pos:line="17" pos:column="17">128<pos:position pos:line="17" pos:column="20"/></literal></expr>]<pos:position pos:line="17" pos:column="21"/></index></name></decl>;<pos:position pos:line="17" pos:column="22"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">errorbuf<pos:position pos:line="18" pos:column="11"/></name><index pos:line="18" pos:column="11">[<expr><literal type="number" pos:line="18" pos:column="12">0<pos:position pos:line="18" pos:column="13"/></literal></expr>]<pos:position pos:line="18" pos:column="14"/></index></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <literal type="number" pos:line="18" pos:column="17">0<pos:position pos:line="18" pos:column="18"/></literal></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="20" pos:column="3">conn<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">-&gt;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="9">recv<pos:position pos:line="20" pos:column="13"/></name><index pos:line="20" pos:column="13">[<expr><name pos:line="20" pos:column="14">sockindex<pos:position pos:line="20" pos:column="23"/></name></expr>]<pos:position pos:line="20" pos:column="24"/></index></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="27">mbed_recv<pos:position pos:line="20" pos:column="36"/></name></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">conn<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">-&gt;<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="9">send<pos:position pos:line="21" pos:column="13"/></name><index pos:line="21" pos:column="13">[<expr><name pos:line="21" pos:column="14">sockindex<pos:position pos:line="21" pos:column="23"/></name></expr>]<pos:position pos:line="21" pos:column="24"/></index></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">mbed_send<pos:position pos:line="21" pos:column="36"/></name></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="23" pos:column="3">ret<pos:position pos:line="23" pos:column="6"/></name> <operator pos:line="23" pos:column="7">=<pos:position pos:line="23" pos:column="8"/></operator> <call><name pos:line="23" pos:column="9">mbedtls_ssl_handshake<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><operator pos:line="23" pos:column="31">&amp;<pos:position pos:line="23" pos:column="36"/></operator><name><name pos:line="23" pos:column="32">BACKEND<pos:position pos:line="23" pos:column="39"/></name><operator pos:line="23" pos:column="39">-&gt;<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="41">ssl<pos:position pos:line="23" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>

  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">ret<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">==<pos:position pos:line="25" pos:column="12"/></operator> <name pos:line="25" pos:column="13">MBEDTLS_ERR_SSL_WANT_READ<pos:position pos:line="25" pos:column="38"/></name></expr>)<pos:position pos:line="25" pos:column="39"/></condition><then pos:line="25" pos:column="39"> <block pos:line="25" pos:column="40">{
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">connssl<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">connecting_state<pos:position pos:line="26" pos:column="30"/></name></name> <operator pos:line="26" pos:column="31">=<pos:position pos:line="26" pos:column="32"/></operator> <name pos:line="26" pos:column="33">ssl_connect_2_reading<pos:position pos:line="26" pos:column="54"/></name></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">CURLE_OK<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then>
  <elseif pos:line="29" pos:column="3">else <if pos:line="29" pos:column="8">if<condition pos:line="29" pos:column="10">(<expr><name pos:line="29" pos:column="11">ret<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">==<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">MBEDTLS_ERR_SSL_WANT_WRITE<pos:position pos:line="29" pos:column="44"/></name></expr>)<pos:position pos:line="29" pos:column="45"/></condition><then pos:line="29" pos:column="45"> <block pos:line="29" pos:column="46">{
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">connssl<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">connecting_state<pos:position pos:line="30" pos:column="30"/></name></name> <operator pos:line="30" pos:column="31">=<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="33">ssl_connect_2_writing<pos:position pos:line="30" pos:column="54"/></name></expr>;<pos:position pos:line="30" pos:column="55"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">CURLE_OK<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="33" pos:column="3">else <if pos:line="33" pos:column="8">if<condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">ret<pos:position pos:line="33" pos:column="14"/></name></expr>)<pos:position pos:line="33" pos:column="15"/></condition><then pos:line="33" pos:column="15"> <block pos:line="33" pos:column="16">{
<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">MBEDTLS_ERROR_C<pos:position pos:line="34" pos:column="23"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">mbedtls_strerror<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">ret<pos:position pos:line="35" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="27">errorbuf<pos:position pos:line="35" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="37">sizeof<argument_list pos:line="35" pos:column="43">(<argument><expr><name pos:line="35" pos:column="44">errorbuf<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="36" pos:column="8">/* MBEDTLS_ERROR_C */</comment>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">failf<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><name pos:line="37" pos:column="11">data<pos:position pos:line="37" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="17">"ssl_handshake returned - mbedTLS: (-0x%04X) %s"<pos:position pos:line="37" pos:column="65"/></literal></expr></argument>,
          <argument><expr><operator pos:line="38" pos:column="11">-<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">ret<pos:position pos:line="38" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="17">errorbuf<pos:position pos:line="38" pos:column="25"/></name></expr></argument>)<pos:position pos:line="38" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="27"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="39" pos:column="35"/></name></expr>;<pos:position pos:line="39" pos:column="36"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="42" pos:column="3">infof<pos:position pos:line="42" pos:column="8"/></name><argument_list pos:line="42" pos:column="8">(<argument><expr><name pos:line="42" pos:column="9">data<pos:position pos:line="42" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="15">"mbedTLS: Handshake complete, cipher is %s\n"<pos:position pos:line="42" pos:column="60"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="43" pos:column="9">mbedtls_ssl_get_ciphersuite<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><operator pos:line="43" pos:column="37">&amp;<pos:position pos:line="43" pos:column="42"/></operator><name><name pos:line="43" pos:column="38">BACKEND<pos:position pos:line="43" pos:column="45"/></name><operator pos:line="43" pos:column="45">-&gt;<pos:position pos:line="43" pos:column="50"/></operator><name pos:line="43" pos:column="47">ssl<pos:position pos:line="43" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr></argument>
    )<pos:position pos:line="44" pos:column="6"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="7"/></expr_stmt>

  <expr_stmt><expr><name pos:line="46" pos:column="3">ret<pos:position pos:line="46" pos:column="6"/></name> <operator pos:line="46" pos:column="7">=<pos:position pos:line="46" pos:column="8"/></operator> <call><name pos:line="46" pos:column="9">mbedtls_ssl_get_verify_result<pos:position pos:line="46" pos:column="38"/></name><argument_list pos:line="46" pos:column="38">(<argument><expr><operator pos:line="46" pos:column="39">&amp;<pos:position pos:line="46" pos:column="44"/></operator><name><name pos:line="46" pos:column="40">BACKEND<pos:position pos:line="46" pos:column="47"/></name><operator pos:line="46" pos:column="47">-&gt;<pos:position pos:line="46" pos:column="52"/></operator><name pos:line="46" pos:column="49">ssl<pos:position pos:line="46" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>

  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><name pos:line="48" pos:column="6">ret<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">&amp;&amp;<pos:position pos:line="48" pos:column="20"/></operator> <call><name pos:line="48" pos:column="13">SSL_CONN_CONFIG<pos:position pos:line="48" pos:column="28"/></name><argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">verifypeer<pos:position pos:line="48" pos:column="39"/></name></expr></argument>)<pos:position pos:line="48" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="41"/></condition><then pos:line="48" pos:column="41"> <block pos:line="48" pos:column="42">{
    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><name pos:line="49" pos:column="8">ret<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">&amp;<pos:position pos:line="49" pos:column="17"/></operator> <name pos:line="49" pos:column="14">MBEDTLS_X509_BADCERT_EXPIRED<pos:position pos:line="49" pos:column="42"/></name></expr>)<pos:position pos:line="49" pos:column="43"/></condition><then pos:line="49" pos:column="43">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="7">failf<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><name pos:line="50" pos:column="13">data<pos:position pos:line="50" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="19">"Cert verify failed: BADCERT_EXPIRED"<pos:position pos:line="50" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt></block></then></if>

    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name pos:line="52" pos:column="8">ret<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">&amp;<pos:position pos:line="52" pos:column="17"/></operator> <name pos:line="52" pos:column="14">MBEDTLS_X509_BADCERT_REVOKED<pos:position pos:line="52" pos:column="42"/></name></expr>)<pos:position pos:line="52" pos:column="43"/></condition><then pos:line="52" pos:column="43"> <block pos:line="52" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">failf<pos:position pos:line="53" pos:column="12"/></name><argument_list pos:line="53" pos:column="12">(<argument><expr><name pos:line="53" pos:column="13">data<pos:position pos:line="53" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="19">"Cert verify failed: BADCERT_REVOKED"<pos:position pos:line="53" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="58"/></expr_stmt>
      <return pos:line="54" pos:column="7">return <expr><name pos:line="54" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="54" pos:column="30"/></name></expr>;<pos:position pos:line="54" pos:column="31"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <if pos:line="57" pos:column="5">if<condition pos:line="57" pos:column="7">(<expr><name pos:line="57" pos:column="8">ret<pos:position pos:line="57" pos:column="11"/></name> <operator pos:line="57" pos:column="12">&amp;<pos:position pos:line="57" pos:column="17"/></operator> <name pos:line="57" pos:column="14">MBEDTLS_X509_BADCERT_CN_MISMATCH<pos:position pos:line="57" pos:column="46"/></name></expr>)<pos:position pos:line="57" pos:column="47"/></condition><then pos:line="57" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="7">failf<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">data<pos:position pos:line="58" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="19">"Cert verify failed: BADCERT_CN_MISMATCH"<pos:position pos:line="58" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="62"/></expr_stmt></block></then></if>

    <if pos:line="60" pos:column="5">if<condition pos:line="60" pos:column="7">(<expr><name pos:line="60" pos:column="8">ret<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">&amp;<pos:position pos:line="60" pos:column="17"/></operator> <name pos:line="60" pos:column="14">MBEDTLS_X509_BADCERT_NOT_TRUSTED<pos:position pos:line="60" pos:column="46"/></name></expr>)<pos:position pos:line="60" pos:column="47"/></condition><then pos:line="60" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="7">failf<pos:position pos:line="61" pos:column="12"/></name><argument_list pos:line="61" pos:column="12">(<argument><expr><name pos:line="61" pos:column="13">data<pos:position pos:line="61" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="19">"Cert verify failed: BADCERT_NOT_TRUSTED"<pos:position pos:line="61" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="62"/></expr_stmt></block></then></if>

    <return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="63" pos:column="42"/></name></expr>;<pos:position pos:line="63" pos:column="43"/></return>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="66" pos:column="3">peercert<pos:position pos:line="66" pos:column="11"/></name> <operator pos:line="66" pos:column="12">=<pos:position pos:line="66" pos:column="13"/></operator> <call><name pos:line="66" pos:column="14">mbedtls_ssl_get_peer_cert<pos:position pos:line="66" pos:column="39"/></name><argument_list pos:line="66" pos:column="39">(<argument><expr><operator pos:line="66" pos:column="40">&amp;<pos:position pos:line="66" pos:column="45"/></operator><name><name pos:line="66" pos:column="41">BACKEND<pos:position pos:line="66" pos:column="48"/></name><operator pos:line="66" pos:column="48">-&gt;<pos:position pos:line="66" pos:column="53"/></operator><name pos:line="66" pos:column="50">ssl<pos:position pos:line="66" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="55"/></expr_stmt>

  <if pos:line="68" pos:column="3">if<condition pos:line="68" pos:column="5">(<expr><name pos:line="68" pos:column="6">peercert<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">&amp;&amp;<pos:position pos:line="68" pos:column="25"/></operator> <name><name pos:line="68" pos:column="18">data<pos:position pos:line="68" pos:column="22"/></name><operator pos:line="68" pos:column="22">-&gt;<pos:position pos:line="68" pos:column="27"/></operator><name pos:line="68" pos:column="24">set<pos:position pos:line="68" pos:column="27"/></name><operator pos:line="68" pos:column="27">.<pos:position pos:line="68" pos:column="28"/></operator><name pos:line="68" pos:column="28">verbose<pos:position pos:line="68" pos:column="35"/></name></name></expr>)<pos:position pos:line="68" pos:column="36"/></condition><then pos:line="68" pos:column="36"> <block pos:line="68" pos:column="37">{
    <decl_stmt><decl><type><specifier pos:line="69" pos:column="5">const<pos:position pos:line="69" pos:column="10"/></specifier> <name pos:line="69" pos:column="11">size_t<pos:position pos:line="69" pos:column="17"/></name></type> <name pos:line="69" pos:column="18">bufsize<pos:position pos:line="69" pos:column="25"/></name> <init pos:line="69" pos:column="26">= <expr><literal type="number" pos:line="69" pos:column="28">16384<pos:position pos:line="69" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="69" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="70" pos:column="5">char<pos:position pos:line="70" pos:column="9"/></name> <modifier pos:line="70" pos:column="10">*<pos:position pos:line="70" pos:column="11"/></modifier></type><name pos:line="70" pos:column="11">buffer<pos:position pos:line="70" pos:column="17"/></name> <init pos:line="70" pos:column="18">= <expr><call><name pos:line="70" pos:column="20">malloc<pos:position pos:line="70" pos:column="26"/></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name pos:line="70" pos:column="27">bufsize<pos:position pos:line="70" pos:column="34"/></name></expr></argument>)<pos:position pos:line="70" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="70" pos:column="36"/></decl_stmt>

    <if pos:line="72" pos:column="5">if<condition pos:line="72" pos:column="7">(<expr><operator pos:line="72" pos:column="8">!<pos:position pos:line="72" pos:column="9"/></operator><name pos:line="72" pos:column="9">buffer<pos:position pos:line="72" pos:column="15"/></name></expr>)<pos:position pos:line="72" pos:column="16"/></condition><then pos:line="72" pos:column="16">
      <block type="pseudo"><return pos:line="73" pos:column="7">return <expr><name pos:line="73" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="73" pos:column="33"/></name></expr>;<pos:position pos:line="73" pos:column="34"/></return></block></then></if>

    <if pos:line="75" pos:column="5">if<condition pos:line="75" pos:column="7">(<expr><call><name pos:line="75" pos:column="8">mbedtls_x509_crt_info<pos:position pos:line="75" pos:column="29"/></name><argument_list pos:line="75" pos:column="29">(<argument><expr><name pos:line="75" pos:column="30">buffer<pos:position pos:line="75" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="38">bufsize<pos:position pos:line="75" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="47">"* "<pos:position pos:line="75" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="53">peercert<pos:position pos:line="75" pos:column="61"/></name></expr></argument>)<pos:position pos:line="75" pos:column="62"/></argument_list></call> <operator pos:line="75" pos:column="63">&gt;<pos:position pos:line="75" pos:column="67"/></operator> <literal type="number" pos:line="75" pos:column="65">0<pos:position pos:line="75" pos:column="66"/></literal></expr>)<pos:position pos:line="75" pos:column="67"/></condition><then pos:line="75" pos:column="67">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="7">infof<pos:position pos:line="76" pos:column="12"/></name><argument_list pos:line="76" pos:column="12">(<argument><expr><name pos:line="76" pos:column="13">data<pos:position pos:line="76" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="19">"Dumping cert info:\n%s\n"<pos:position pos:line="76" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="47">buffer<pos:position pos:line="76" pos:column="53"/></name></expr></argument>)<pos:position pos:line="76" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="55"/></expr_stmt></block></then>
    <else pos:line="77" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="7">infof<pos:position pos:line="78" pos:column="12"/></name><argument_list pos:line="78" pos:column="12">(<argument><expr><name pos:line="78" pos:column="13">data<pos:position pos:line="78" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="19">"Unable to dump certificate information.\n"<pos:position pos:line="78" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="64"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="80" pos:column="5">free<pos:position pos:line="80" pos:column="9"/></name><argument_list pos:line="80" pos:column="9">(<argument><expr><name pos:line="80" pos:column="10">buffer<pos:position pos:line="80" pos:column="16"/></name></expr></argument>)<pos:position pos:line="80" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="81" pos:column="4"/></block></then></if>

  <if pos:line="83" pos:column="3">if<condition pos:line="83" pos:column="5">(<expr><name pos:line="83" pos:column="6">pinnedpubkey<pos:position pos:line="83" pos:column="18"/></name></expr>)<pos:position pos:line="83" pos:column="19"/></condition><then pos:line="83" pos:column="19"> <block pos:line="83" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="84" pos:column="5">int<pos:position pos:line="84" pos:column="8"/></name></type> <name pos:line="84" pos:column="9">size<pos:position pos:line="84" pos:column="13"/></name></decl>;<pos:position pos:line="84" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="85" pos:column="5">CURLcode<pos:position pos:line="85" pos:column="13"/></name></type> <name pos:line="85" pos:column="14">result<pos:position pos:line="85" pos:column="20"/></name></decl>;<pos:position pos:line="85" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="86" pos:column="5">mbedtls_x509_crt<pos:position pos:line="86" pos:column="21"/></name> <modifier pos:line="86" pos:column="22">*<pos:position pos:line="86" pos:column="23"/></modifier></type><name pos:line="86" pos:column="23">p<pos:position pos:line="86" pos:column="24"/></name></decl>;<pos:position pos:line="86" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="87" pos:column="5">unsigned<pos:position pos:line="87" pos:column="13"/></name> <name pos:line="87" pos:column="14">char<pos:position pos:line="87" pos:column="18"/></name></type> <name><name pos:line="87" pos:column="19">pubkey<pos:position pos:line="87" pos:column="25"/></name><index pos:line="87" pos:column="25">[<expr><name pos:line="87" pos:column="26">PUB_DER_MAX_BYTES<pos:position pos:line="87" pos:column="43"/></name></expr>]<pos:position pos:line="87" pos:column="44"/></index></name></decl>;<pos:position pos:line="87" pos:column="45"/></decl_stmt>

    <if pos:line="89" pos:column="5">if<condition pos:line="89" pos:column="7">(<expr><operator pos:line="89" pos:column="8">!<pos:position pos:line="89" pos:column="9"/></operator><name pos:line="89" pos:column="9">peercert<pos:position pos:line="89" pos:column="17"/></name> <operator pos:line="89" pos:column="18">||<pos:position pos:line="89" pos:column="20"/></operator> <operator pos:line="89" pos:column="21">!<pos:position pos:line="89" pos:column="22"/></operator><name><name pos:line="89" pos:column="22">peercert<pos:position pos:line="89" pos:column="30"/></name><operator pos:line="89" pos:column="30">-&gt;<pos:position pos:line="89" pos:column="35"/></operator><name pos:line="89" pos:column="32">raw<pos:position pos:line="89" pos:column="35"/></name><operator pos:line="89" pos:column="35">.<pos:position pos:line="89" pos:column="36"/></operator><name pos:line="89" pos:column="36">p<pos:position pos:line="89" pos:column="37"/></name></name> <operator pos:line="89" pos:column="38">||<pos:position pos:line="89" pos:column="40"/></operator> <operator pos:line="89" pos:column="41">!<pos:position pos:line="89" pos:column="42"/></operator><name><name pos:line="89" pos:column="42">peercert<pos:position pos:line="89" pos:column="50"/></name><operator pos:line="89" pos:column="50">-&gt;<pos:position pos:line="89" pos:column="55"/></operator><name pos:line="89" pos:column="52">raw<pos:position pos:line="89" pos:column="55"/></name><operator pos:line="89" pos:column="55">.<pos:position pos:line="89" pos:column="56"/></operator><name pos:line="89" pos:column="56">len<pos:position pos:line="89" pos:column="59"/></name></name></expr>)<pos:position pos:line="89" pos:column="60"/></condition><then pos:line="89" pos:column="60"> <block pos:line="89" pos:column="61">{
      <expr_stmt><expr><call><name pos:line="90" pos:column="7">failf<pos:position pos:line="90" pos:column="12"/></name><argument_list pos:line="90" pos:column="12">(<argument><expr><name pos:line="90" pos:column="13">data<pos:position pos:line="90" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="19">"Failed due to missing peer certificate"<pos:position pos:line="90" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="61"/></expr_stmt>
      <return pos:line="91" pos:column="7">return <expr><name pos:line="91" pos:column="14">CURLE_SSL_PINNEDPUBKEYNOTMATCH<pos:position pos:line="91" pos:column="44"/></name></expr>;<pos:position pos:line="91" pos:column="45"/></return>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="94" pos:column="5">p<pos:position pos:line="94" pos:column="6"/></name> <operator pos:line="94" pos:column="7">=<pos:position pos:line="94" pos:column="8"/></operator> <call><name pos:line="94" pos:column="9">calloc<pos:position pos:line="94" pos:column="15"/></name><argument_list pos:line="94" pos:column="15">(<argument><expr><literal type="number" pos:line="94" pos:column="16">1<pos:position pos:line="94" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="94" pos:column="19">sizeof<argument_list pos:line="94" pos:column="25">(<argument><expr><operator pos:line="94" pos:column="26">*<pos:position pos:line="94" pos:column="27"/></operator><name pos:line="94" pos:column="27">p<pos:position pos:line="94" pos:column="28"/></name></expr></argument>)<pos:position pos:line="94" pos:column="29"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="94" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="31"/></expr_stmt>

    <if pos:line="96" pos:column="5">if<condition pos:line="96" pos:column="7">(<expr><operator pos:line="96" pos:column="8">!<pos:position pos:line="96" pos:column="9"/></operator><name pos:line="96" pos:column="9">p<pos:position pos:line="96" pos:column="10"/></name></expr>)<pos:position pos:line="96" pos:column="11"/></condition><then pos:line="96" pos:column="11">
      <block type="pseudo"><return pos:line="97" pos:column="7">return <expr><name pos:line="97" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="97" pos:column="33"/></name></expr>;<pos:position pos:line="97" pos:column="34"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="99" pos:column="5">mbedtls_x509_crt_init<pos:position pos:line="99" pos:column="26"/></name><argument_list pos:line="99" pos:column="26">(<argument><expr><name pos:line="99" pos:column="27">p<pos:position pos:line="99" pos:column="28"/></name></expr></argument>)<pos:position pos:line="99" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="101" pos:column="5">/* Make a copy of our const peercert because mbedtls_pk_write_pubkey_der
       needs a non-const key, for now.
       https://github.com/ARMmbed/mbedtls/issues/396 */</comment>
    <if pos:line="104" pos:column="5">if<condition pos:line="104" pos:column="7">(<expr><call><name pos:line="104" pos:column="8">mbedtls_x509_crt_parse_der<pos:position pos:line="104" pos:column="34"/></name><argument_list pos:line="104" pos:column="34">(<argument><expr><name pos:line="104" pos:column="35">p<pos:position pos:line="104" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="38">peercert<pos:position pos:line="104" pos:column="46"/></name><operator pos:line="104" pos:column="46">-&gt;<pos:position pos:line="104" pos:column="51"/></operator><name pos:line="104" pos:column="48">raw<pos:position pos:line="104" pos:column="51"/></name><operator pos:line="104" pos:column="51">.<pos:position pos:line="104" pos:column="52"/></operator><name pos:line="104" pos:column="52">p<pos:position pos:line="104" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="55">peercert<pos:position pos:line="104" pos:column="63"/></name><operator pos:line="104" pos:column="63">-&gt;<pos:position pos:line="104" pos:column="68"/></operator><name pos:line="104" pos:column="65">raw<pos:position pos:line="104" pos:column="68"/></name><operator pos:line="104" pos:column="68">.<pos:position pos:line="104" pos:column="69"/></operator><name pos:line="104" pos:column="69">len<pos:position pos:line="104" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="74"/></condition><then pos:line="104" pos:column="74"> <block pos:line="104" pos:column="75">{
      <expr_stmt><expr><call><name pos:line="105" pos:column="7">failf<pos:position pos:line="105" pos:column="12"/></name><argument_list pos:line="105" pos:column="12">(<argument><expr><name pos:line="105" pos:column="13">data<pos:position pos:line="105" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="19">"Failed copying peer certificate"<pos:position pos:line="105" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="106" pos:column="7">mbedtls_x509_crt_free<pos:position pos:line="106" pos:column="28"/></name><argument_list pos:line="106" pos:column="28">(<argument><expr><name pos:line="106" pos:column="29">p<pos:position pos:line="106" pos:column="30"/></name></expr></argument>)<pos:position pos:line="106" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="107" pos:column="7">free<pos:position pos:line="107" pos:column="11"/></name><argument_list pos:line="107" pos:column="11">(<argument><expr><name pos:line="107" pos:column="12">p<pos:position pos:line="107" pos:column="13"/></name></expr></argument>)<pos:position pos:line="107" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="15"/></expr_stmt>
      <return pos:line="108" pos:column="7">return <expr><name pos:line="108" pos:column="14">CURLE_SSL_PINNEDPUBKEYNOTMATCH<pos:position pos:line="108" pos:column="44"/></name></expr>;<pos:position pos:line="108" pos:column="45"/></return>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="111" pos:column="5">size<pos:position pos:line="111" pos:column="9"/></name> <operator pos:line="111" pos:column="10">=<pos:position pos:line="111" pos:column="11"/></operator> <call><name pos:line="111" pos:column="12">mbedtls_pk_write_pubkey_der<pos:position pos:line="111" pos:column="39"/></name><argument_list pos:line="111" pos:column="39">(<argument><expr><operator pos:line="111" pos:column="40">&amp;<pos:position pos:line="111" pos:column="45"/></operator><name><name pos:line="111" pos:column="41">p<pos:position pos:line="111" pos:column="42"/></name><operator pos:line="111" pos:column="42">-&gt;<pos:position pos:line="111" pos:column="47"/></operator><name pos:line="111" pos:column="44">pk<pos:position pos:line="111" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="48">pubkey<pos:position pos:line="111" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="56">PUB_DER_MAX_BYTES<pos:position pos:line="111" pos:column="73"/></name></expr></argument>)<pos:position pos:line="111" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="75"/></expr_stmt>

    <if pos:line="113" pos:column="5">if<condition pos:line="113" pos:column="7">(<expr><name pos:line="113" pos:column="8">size<pos:position pos:line="113" pos:column="12"/></name> <operator pos:line="113" pos:column="13">&lt;=<pos:position pos:line="113" pos:column="18"/></operator> <literal type="number" pos:line="113" pos:column="16">0<pos:position pos:line="113" pos:column="17"/></literal></expr>)<pos:position pos:line="113" pos:column="18"/></condition><then pos:line="113" pos:column="18"> <block pos:line="113" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="114" pos:column="7">failf<pos:position pos:line="114" pos:column="12"/></name><argument_list pos:line="114" pos:column="12">(<argument><expr><name pos:line="114" pos:column="13">data<pos:position pos:line="114" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="19">"Failed copying public key from peer certificate"<pos:position pos:line="114" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="115" pos:column="7">mbedtls_x509_crt_free<pos:position pos:line="115" pos:column="28"/></name><argument_list pos:line="115" pos:column="28">(<argument><expr><name pos:line="115" pos:column="29">p<pos:position pos:line="115" pos:column="30"/></name></expr></argument>)<pos:position pos:line="115" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="116" pos:column="7">free<pos:position pos:line="116" pos:column="11"/></name><argument_list pos:line="116" pos:column="11">(<argument><expr><name pos:line="116" pos:column="12">p<pos:position pos:line="116" pos:column="13"/></name></expr></argument>)<pos:position pos:line="116" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="15"/></expr_stmt>
      <return pos:line="117" pos:column="7">return <expr><name pos:line="117" pos:column="14">CURLE_SSL_PINNEDPUBKEYNOTMATCH<pos:position pos:line="117" pos:column="44"/></name></expr>;<pos:position pos:line="117" pos:column="45"/></return>
    }<pos:position pos:line="118" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="120" pos:column="5">/* mbedtls_pk_write_pubkey_der writes data at the end of the buffer. */</comment>
    <expr_stmt><expr><name pos:line="121" pos:column="5">result<pos:position pos:line="121" pos:column="11"/></name> <operator pos:line="121" pos:column="12">=<pos:position pos:line="121" pos:column="13"/></operator> <call><name pos:line="121" pos:column="14">Curl_pin_peer_pubkey<pos:position pos:line="121" pos:column="34"/></name><argument_list pos:line="121" pos:column="34">(<argument><expr><name pos:line="121" pos:column="35">data<pos:position pos:line="121" pos:column="39"/></name></expr></argument>,
                                  <argument><expr><name pos:line="122" pos:column="35">pinnedpubkey<pos:position pos:line="122" pos:column="47"/></name></expr></argument>,
                                  <argument><expr><operator pos:line="123" pos:column="35">&amp;<pos:position pos:line="123" pos:column="40"/></operator><name><name pos:line="123" pos:column="36">pubkey<pos:position pos:line="123" pos:column="42"/></name><index pos:line="123" pos:column="42">[<expr><name pos:line="123" pos:column="43">PUB_DER_MAX_BYTES<pos:position pos:line="123" pos:column="60"/></name> <operator pos:line="123" pos:column="61">-<pos:position pos:line="123" pos:column="62"/></operator> <name pos:line="123" pos:column="63">size<pos:position pos:line="123" pos:column="67"/></name></expr>]<pos:position pos:line="123" pos:column="68"/></index></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="70">size<pos:position pos:line="123" pos:column="74"/></name></expr></argument>)<pos:position pos:line="123" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="76"/></expr_stmt>
    <if pos:line="124" pos:column="5">if<condition pos:line="124" pos:column="7">(<expr><name pos:line="124" pos:column="8">result<pos:position pos:line="124" pos:column="14"/></name></expr>)<pos:position pos:line="124" pos:column="15"/></condition><then pos:line="124" pos:column="15"> <block pos:line="124" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="125" pos:column="7">mbedtls_x509_crt_free<pos:position pos:line="125" pos:column="28"/></name><argument_list pos:line="125" pos:column="28">(<argument><expr><name pos:line="125" pos:column="29">p<pos:position pos:line="125" pos:column="30"/></name></expr></argument>)<pos:position pos:line="125" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="126" pos:column="7">free<pos:position pos:line="126" pos:column="11"/></name><argument_list pos:line="126" pos:column="11">(<argument><expr><name pos:line="126" pos:column="12">p<pos:position pos:line="126" pos:column="13"/></name></expr></argument>)<pos:position pos:line="126" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="15"/></expr_stmt>
      <return pos:line="127" pos:column="7">return <expr><name pos:line="127" pos:column="14">result<pos:position pos:line="127" pos:column="20"/></name></expr>;<pos:position pos:line="127" pos:column="21"/></return>
    }<pos:position pos:line="128" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="130" pos:column="5">mbedtls_x509_crt_free<pos:position pos:line="130" pos:column="26"/></name><argument_list pos:line="130" pos:column="26">(<argument><expr><name pos:line="130" pos:column="27">p<pos:position pos:line="130" pos:column="28"/></name></expr></argument>)<pos:position pos:line="130" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="131" pos:column="5">free<pos:position pos:line="131" pos:column="9"/></name><argument_list pos:line="131" pos:column="9">(<argument><expr><name pos:line="131" pos:column="10">p<pos:position pos:line="131" pos:column="11"/></name></expr></argument>)<pos:position pos:line="131" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="132" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">ifdef<pos:position pos:line="134" pos:column="7"/></cpp:directive> <name pos:line="134" pos:column="8">HAS_ALPN<pos:position pos:line="134" pos:column="16"/></name></cpp:ifdef>
  <if pos:line="135" pos:column="3">if<condition pos:line="135" pos:column="5">(<expr><name><name pos:line="135" pos:column="6">conn<pos:position pos:line="135" pos:column="10"/></name><operator pos:line="135" pos:column="10">-&gt;<pos:position pos:line="135" pos:column="15"/></operator><name pos:line="135" pos:column="12">bits<pos:position pos:line="135" pos:column="16"/></name><operator pos:line="135" pos:column="16">.<pos:position pos:line="135" pos:column="17"/></operator><name pos:line="135" pos:column="17">tls_enable_alpn<pos:position pos:line="135" pos:column="32"/></name></name></expr>)<pos:position pos:line="135" pos:column="33"/></condition><then pos:line="135" pos:column="33"> <block pos:line="135" pos:column="34">{
    <expr_stmt><expr><name pos:line="136" pos:column="5">next_protocol<pos:position pos:line="136" pos:column="18"/></name> <operator pos:line="136" pos:column="19">=<pos:position pos:line="136" pos:column="20"/></operator> <call><name pos:line="136" pos:column="21">mbedtls_ssl_get_alpn_protocol<pos:position pos:line="136" pos:column="50"/></name><argument_list pos:line="136" pos:column="50">(<argument><expr><operator pos:line="136" pos:column="51">&amp;<pos:position pos:line="136" pos:column="56"/></operator><name><name pos:line="136" pos:column="52">BACKEND<pos:position pos:line="136" pos:column="59"/></name><operator pos:line="136" pos:column="59">-&gt;<pos:position pos:line="136" pos:column="64"/></operator><name pos:line="136" pos:column="61">ssl<pos:position pos:line="136" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="136" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="66"/></expr_stmt>

    <if pos:line="138" pos:column="5">if<condition pos:line="138" pos:column="7">(<expr><name pos:line="138" pos:column="8">next_protocol<pos:position pos:line="138" pos:column="21"/></name></expr>)<pos:position pos:line="138" pos:column="22"/></condition><then pos:line="138" pos:column="22"> <block pos:line="138" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="139" pos:column="7">infof<pos:position pos:line="139" pos:column="12"/></name><argument_list pos:line="139" pos:column="12">(<argument><expr><name pos:line="139" pos:column="13">data<pos:position pos:line="139" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="19">"ALPN, server accepted to use %s\n"<pos:position pos:line="139" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="56">next_protocol<pos:position pos:line="139" pos:column="69"/></name></expr></argument>)<pos:position pos:line="139" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="71"/></expr_stmt>
<cpp:ifdef pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">ifdef<pos:position pos:line="140" pos:column="7"/></cpp:directive> <name pos:line="140" pos:column="8">USE_NGHTTP2<pos:position pos:line="140" pos:column="19"/></name></cpp:ifdef>
      <if pos:line="141" pos:column="7">if<condition pos:line="141" pos:column="9">(<expr><operator pos:line="141" pos:column="10">!<pos:position pos:line="141" pos:column="11"/></operator><call><name pos:line="141" pos:column="11">strncmp<pos:position pos:line="141" pos:column="18"/></name><argument_list pos:line="141" pos:column="18">(<argument><expr><name pos:line="141" pos:column="19">next_protocol<pos:position pos:line="141" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="34">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="141" pos:column="58"/></name></expr></argument>,
                  <argument><expr><name pos:line="142" pos:column="19">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="142" pos:column="47"/></name></expr></argument>)<pos:position pos:line="142" pos:column="48"/></argument_list></call> <operator pos:line="142" pos:column="49">&amp;&amp;<pos:position pos:line="142" pos:column="59"/></operator>
         <operator pos:line="143" pos:column="10">!<pos:position pos:line="143" pos:column="11"/></operator><name><name pos:line="143" pos:column="11">next_protocol<pos:position pos:line="143" pos:column="24"/></name><index pos:line="143" pos:column="24">[<expr><name pos:line="143" pos:column="25">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="143" pos:column="53"/></name></expr>]<pos:position pos:line="143" pos:column="54"/></index></name></expr>)<pos:position pos:line="143" pos:column="55"/></condition><then pos:line="143" pos:column="55"> <block pos:line="143" pos:column="56">{
        <expr_stmt><expr><name><name pos:line="144" pos:column="9">conn<pos:position pos:line="144" pos:column="13"/></name><operator pos:line="144" pos:column="13">-&gt;<pos:position pos:line="144" pos:column="18"/></operator><name pos:line="144" pos:column="15">negnpn<pos:position pos:line="144" pos:column="21"/></name></name> <operator pos:line="144" pos:column="22">=<pos:position pos:line="144" pos:column="23"/></operator> <name pos:line="144" pos:column="24">CURL_HTTP_VERSION_2<pos:position pos:line="144" pos:column="43"/></name></expr>;<pos:position pos:line="144" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="145" pos:column="8"/></block></then>
      <elseif pos:line="146" pos:column="7">else
<cpp:endif pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">endif<pos:position pos:line="147" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="148" pos:column="9">if<condition pos:line="148" pos:column="11">(<expr><operator pos:line="148" pos:column="12">!<pos:position pos:line="148" pos:column="13"/></operator><call><name pos:line="148" pos:column="13">strncmp<pos:position pos:line="148" pos:column="20"/></name><argument_list pos:line="148" pos:column="20">(<argument><expr><name pos:line="148" pos:column="21">next_protocol<pos:position pos:line="148" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="36">ALPN_HTTP_1_1<pos:position pos:line="148" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="51">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="148" pos:column="71"/></name></expr></argument>)<pos:position pos:line="148" pos:column="72"/></argument_list></call> <operator pos:line="148" pos:column="73">&amp;&amp;<pos:position pos:line="148" pos:column="83"/></operator>
           <operator pos:line="149" pos:column="12">!<pos:position pos:line="149" pos:column="13"/></operator><name><name pos:line="149" pos:column="13">next_protocol<pos:position pos:line="149" pos:column="26"/></name><index pos:line="149" pos:column="26">[<expr><name pos:line="149" pos:column="27">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="149" pos:column="47"/></name></expr>]<pos:position pos:line="149" pos:column="48"/></index></name></expr>)<pos:position pos:line="149" pos:column="49"/></condition><then pos:line="149" pos:column="49"> <block pos:line="149" pos:column="50">{
          <expr_stmt><expr><name><name pos:line="150" pos:column="11">conn<pos:position pos:line="150" pos:column="15"/></name><operator pos:line="150" pos:column="15">-&gt;<pos:position pos:line="150" pos:column="20"/></operator><name pos:line="150" pos:column="17">negnpn<pos:position pos:line="150" pos:column="23"/></name></name> <operator pos:line="150" pos:column="24">=<pos:position pos:line="150" pos:column="25"/></operator> <name pos:line="150" pos:column="26">CURL_HTTP_VERSION_1_1<pos:position pos:line="150" pos:column="47"/></name></expr>;<pos:position pos:line="150" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="151" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="152" pos:column="6"/></block></then>
    <else pos:line="153" pos:column="5">else <block pos:line="153" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="154" pos:column="7">infof<pos:position pos:line="154" pos:column="12"/></name><argument_list pos:line="154" pos:column="12">(<argument><expr><name pos:line="154" pos:column="13">data<pos:position pos:line="154" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="19">"ALPN, server did not agree to a protocol\n"<pos:position pos:line="154" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="155" pos:column="6"/></block></else></if>
  }<pos:position pos:line="156" pos:column="4"/></block></then></if>
<cpp:endif pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">endif<pos:position pos:line="157" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name pos:line="159" pos:column="3">connssl<pos:position pos:line="159" pos:column="10"/></name><operator pos:line="159" pos:column="10">-&gt;<pos:position pos:line="159" pos:column="15"/></operator><name pos:line="159" pos:column="12">connecting_state<pos:position pos:line="159" pos:column="28"/></name></name> <operator pos:line="159" pos:column="29">=<pos:position pos:line="159" pos:column="30"/></operator> <name pos:line="159" pos:column="31">ssl_connect_3<pos:position pos:line="159" pos:column="44"/></name></expr>;<pos:position pos:line="159" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="160" pos:column="3">infof<pos:position pos:line="160" pos:column="8"/></name><argument_list pos:line="160" pos:column="8">(<argument><expr><name pos:line="160" pos:column="9">data<pos:position pos:line="160" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="160" pos:column="15">"SSL connected\n"<pos:position pos:line="160" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="160" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="34"/></expr_stmt>

  <return pos:line="162" pos:column="3">return <expr><name pos:line="162" pos:column="10">CURLE_OK<pos:position pos:line="162" pos:column="18"/></name></expr>;<pos:position pos:line="162" pos:column="19"/></return>
}<pos:position pos:line="163" pos:column="2"/></block></function></unit>
