<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_432_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_readwrite<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">connectdata<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conn<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">bool<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">done<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SessionHandle<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name><name pos:line="4" pos:column="32">conn<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">data<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SingleRequest<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">k<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><operator pos:line="5" pos:column="29">&amp;<pos:position pos:line="5" pos:column="34"/></operator><name><name pos:line="5" pos:column="30">data<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">-&gt;<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="36">req<pos:position pos:line="5" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ssize_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">nread<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt> <comment type="block" pos:line="7" pos:column="18">/* number of bytes read */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">didwhat<pos:position pos:line="8" pos:column="14"/></name><init pos:line="8" pos:column="14">=<expr><literal type="number" pos:line="8" pos:column="15">0<pos:position pos:line="8" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">curl_socket_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">fd_read<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">curl_socket_t<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">fd_write<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">curl_off_t<pos:position pos:line="12" pos:column="13"/></name></type> <name pos:line="12" pos:column="14">contentlength<pos:position pos:line="12" pos:column="27"/></name></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">select_res<pos:position pos:line="13" pos:column="17"/></name> <init pos:line="13" pos:column="18">= <expr><name><name pos:line="13" pos:column="20">conn<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">cselect_bits<pos:position pos:line="13" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="39"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="15" pos:column="3">conn<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">cselect_bits<pos:position pos:line="15" pos:column="21"/></name></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* only use the proper socket if the *_HOLD bit is not set simultaneously as
     then we are in rate limiting state in that transfer direction */</comment>

  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><operator pos:line="20" pos:column="6">(<pos:position pos:line="20" pos:column="7"/></operator><name><name pos:line="20" pos:column="7">k<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">-&gt;<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="10">keepon<pos:position pos:line="20" pos:column="16"/></name></name> <operator pos:line="20" pos:column="17">&amp;<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="19">KEEP_READBITS<pos:position pos:line="20" pos:column="32"/></name><operator pos:line="20" pos:column="32">)<pos:position pos:line="20" pos:column="33"/></operator> <operator pos:line="20" pos:column="34">==<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="37">KEEP_READ<pos:position pos:line="20" pos:column="46"/></name></expr>)<pos:position pos:line="20" pos:column="47"/></condition><then pos:line="20" pos:column="47"> <block pos:line="20" pos:column="48">{
    <expr_stmt><expr><name pos:line="21" pos:column="5">fd_read<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name><name pos:line="21" pos:column="15">conn<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">sockfd<pos:position pos:line="21" pos:column="27"/></name></name></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><call><name pos:line="22" pos:column="5">defined<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">USE_LIBSSH2<pos:position pos:line="22" pos:column="24"/></name></expr></argument>)<pos:position pos:line="22" pos:column="25"/></argument_list></call></expr></cpp:if>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><name><name pos:line="23" pos:column="8">conn<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">protocol<pos:position pos:line="23" pos:column="22"/></name></name> <operator pos:line="23" pos:column="23">&amp;<pos:position pos:line="23" pos:column="28"/></operator> <operator pos:line="23" pos:column="25">(<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">PROT_SCP<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">|<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">PROT_SFTP<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">)<pos:position pos:line="23" pos:column="45"/></operator></expr>)<pos:position pos:line="23" pos:column="46"/></condition><then pos:line="23" pos:column="46">
      <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="7">select_res<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">|=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">CURL_CSELECT_IN<pos:position pos:line="24" pos:column="36"/></name></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt></block></then></if>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="25" pos:column="8">/* USE_LIBSSH2 */</comment>
  }<pos:position pos:line="26" pos:column="4"/></block></then> <else pos:line="26" pos:column="5">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="5">fd_read<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <name pos:line="27" pos:column="15">CURL_SOCKET_BAD<pos:position pos:line="27" pos:column="30"/></name></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt></block></else></if>

  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><operator pos:line="29" pos:column="6">(<pos:position pos:line="29" pos:column="7"/></operator><name><name pos:line="29" pos:column="7">k<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">-&gt;<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="10">keepon<pos:position pos:line="29" pos:column="16"/></name></name> <operator pos:line="29" pos:column="17">&amp;<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="19">KEEP_WRITEBITS<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">)<pos:position pos:line="29" pos:column="34"/></operator> <operator pos:line="29" pos:column="35">==<pos:position pos:line="29" pos:column="37"/></operator> <name pos:line="29" pos:column="38">KEEP_WRITE<pos:position pos:line="29" pos:column="48"/></name></expr>)<pos:position pos:line="29" pos:column="49"/></condition><then pos:line="29" pos:column="49">
    <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="5">fd_write<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <name><name pos:line="30" pos:column="16">conn<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">-&gt;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="22">writesockfd<pos:position pos:line="30" pos:column="33"/></name></name></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt></block></then>
  <else pos:line="31" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="5">fd_write<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">CURL_SOCKET_BAD<pos:position pos:line="32" pos:column="31"/></name></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt></block></else></if>

   <if pos:line="34" pos:column="4">if<condition pos:line="34" pos:column="6">(<expr><operator pos:line="34" pos:column="7">!<pos:position pos:line="34" pos:column="8"/></operator><name pos:line="34" pos:column="8">select_res<pos:position pos:line="34" pos:column="18"/></name></expr>)<pos:position pos:line="34" pos:column="19"/></condition><then pos:line="34" pos:column="19"> <block pos:line="34" pos:column="20">{ <comment type="block" pos:line="34" pos:column="22">/* Call for select()/poll() only, if read/write/error
                         status is not known. */</comment>
       <expr_stmt><expr><name pos:line="36" pos:column="8">select_res<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <call><name pos:line="36" pos:column="21">Curl_socket_ready<pos:position pos:line="36" pos:column="38"/></name><argument_list pos:line="36" pos:column="38">(<argument><expr><name pos:line="36" pos:column="39">fd_read<pos:position pos:line="36" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="48">fd_write<pos:position pos:line="36" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="58">0<pos:position pos:line="36" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt>
   }<pos:position pos:line="37" pos:column="5"/></block></then></if>

  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name pos:line="39" pos:column="6">select_res<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">==<pos:position pos:line="39" pos:column="19"/></operator> <name pos:line="39" pos:column="20">CURL_CSELECT_ERR<pos:position pos:line="39" pos:column="36"/></name></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37"> <block pos:line="39" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">failf<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><name pos:line="40" pos:column="11">data<pos:position pos:line="40" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="17">"select/poll returned error"<pos:position pos:line="40" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="47"/></expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><name pos:line="41" pos:column="12">CURLE_SEND_ERROR<pos:position pos:line="41" pos:column="28"/></name></expr>;<pos:position pos:line="41" pos:column="29"/></return>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>

  <do pos:line="44" pos:column="3">do <block pos:line="44" pos:column="6">{
    <comment type="block" pos:line="45" pos:column="5">/* We go ahead and do a read if we have a readable socket or if
       the stream was rewound (in which case we have data in a
       buffer) */</comment>
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><operator pos:line="48" pos:column="8">(<pos:position pos:line="48" pos:column="9"/></operator><name><name pos:line="48" pos:column="9">k<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">-&gt;<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="12">keepon<pos:position pos:line="48" pos:column="18"/></name></name> <operator pos:line="48" pos:column="19">&amp;<pos:position pos:line="48" pos:column="24"/></operator> <name pos:line="48" pos:column="21">KEEP_READ<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">)<pos:position pos:line="48" pos:column="31"/></operator> <operator pos:line="48" pos:column="32">&amp;&amp;<pos:position pos:line="48" pos:column="42"/></operator>
       <operator pos:line="49" pos:column="8">(<pos:position pos:line="49" pos:column="9"/></operator><operator pos:line="49" pos:column="9">(<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">select_res<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">&amp;<pos:position pos:line="49" pos:column="26"/></operator> <name pos:line="49" pos:column="23">CURL_CSELECT_IN<pos:position pos:line="49" pos:column="38"/></name><operator pos:line="49" pos:column="38">)<pos:position pos:line="49" pos:column="39"/></operator> <operator pos:line="49" pos:column="40">||<pos:position pos:line="49" pos:column="42"/></operator> <name><name pos:line="49" pos:column="43">conn<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">-&gt;<pos:position pos:line="49" pos:column="52"/></operator><name pos:line="49" pos:column="49">bits<pos:position pos:line="49" pos:column="53"/></name><operator pos:line="49" pos:column="53">.<pos:position pos:line="49" pos:column="54"/></operator><name pos:line="49" pos:column="54">stream_was_rewound<pos:position pos:line="49" pos:column="72"/></name></name><operator pos:line="49" pos:column="72">)<pos:position pos:line="49" pos:column="73"/></operator></expr>)<pos:position pos:line="49" pos:column="74"/></condition><then pos:line="49" pos:column="74"> <block pos:line="49" pos:column="75">{
      <comment type="block" pos:line="50" pos:column="7">/* read */</comment>
      <decl_stmt><decl><type><name pos:line="51" pos:column="7">bool<pos:position pos:line="51" pos:column="11"/></name></type> <name pos:line="51" pos:column="12">is_empty_data<pos:position pos:line="51" pos:column="25"/></name> <init pos:line="51" pos:column="26">= <expr><name pos:line="51" pos:column="28">FALSE<pos:position pos:line="51" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="51" pos:column="34"/></decl_stmt>

      <comment type="block" pos:line="53" pos:column="7">/* This is where we loop until we have read everything there is to
         read or we get a EWOULDBLOCK */</comment>
      <do pos:line="55" pos:column="7">do <block pos:line="55" pos:column="10">{
        <decl_stmt><decl><type><name pos:line="56" pos:column="9">size_t<pos:position pos:line="56" pos:column="15"/></name></type> <name pos:line="56" pos:column="16">buffersize<pos:position pos:line="56" pos:column="26"/></name> <init pos:line="56" pos:column="27">= <expr><ternary><condition><expr><name><name pos:line="56" pos:column="29">data<pos:position pos:line="56" pos:column="33"/></name><operator pos:line="56" pos:column="33">-&gt;<pos:position pos:line="56" pos:column="38"/></operator><name pos:line="56" pos:column="35">set<pos:position pos:line="56" pos:column="38"/></name><operator pos:line="56" pos:column="38">.<pos:position pos:line="56" pos:column="39"/></operator><name pos:line="56" pos:column="39">buffer_size<pos:position pos:line="56" pos:column="50"/></name></name></expr>?<pos:position pos:line="56" pos:column="51"/></condition><then pos:line="56" pos:column="51">
          <expr><name><name pos:line="57" pos:column="11">data<pos:position pos:line="57" pos:column="15"/></name><operator pos:line="57" pos:column="15">-&gt;<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="17">set<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">.<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="21">buffer_size<pos:position pos:line="57" pos:column="32"/></name></name></expr> <pos:position pos:line="57" pos:column="33"/></then><else pos:line="57" pos:column="33">: <expr><name pos:line="57" pos:column="35">BUFSIZE<pos:position pos:line="57" pos:column="42"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="57" pos:column="43"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">size_t<pos:position pos:line="58" pos:column="15"/></name></type> <name pos:line="58" pos:column="16">bytestoread<pos:position pos:line="58" pos:column="27"/></name> <init pos:line="58" pos:column="28">= <expr><name pos:line="58" pos:column="30">buffersize<pos:position pos:line="58" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="58" pos:column="41"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="59" pos:column="9">int<pos:position pos:line="59" pos:column="12"/></name></type> <name pos:line="59" pos:column="13">readrc<pos:position pos:line="59" pos:column="19"/></name></decl>;<pos:position pos:line="59" pos:column="20"/></decl_stmt>

        <if pos:line="61" pos:column="9">if<condition pos:line="61" pos:column="11">(<expr><name><name pos:line="61" pos:column="12">k<pos:position pos:line="61" pos:column="13"/></name><operator pos:line="61" pos:column="13">-&gt;<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="15">size<pos:position pos:line="61" pos:column="19"/></name></name> <operator pos:line="61" pos:column="20">!=<pos:position pos:line="61" pos:column="22"/></operator> <operator pos:line="61" pos:column="23">-<pos:position pos:line="61" pos:column="24"/></operator><literal type="number" pos:line="61" pos:column="24">1<pos:position pos:line="61" pos:column="25"/></literal> <operator pos:line="61" pos:column="26">&amp;&amp;<pos:position pos:line="61" pos:column="36"/></operator> <operator pos:line="61" pos:column="29">!<pos:position pos:line="61" pos:column="30"/></operator><name><name pos:line="61" pos:column="30">k<pos:position pos:line="61" pos:column="31"/></name><operator pos:line="61" pos:column="31">-&gt;<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="33">header<pos:position pos:line="61" pos:column="39"/></name></name></expr>)<pos:position pos:line="61" pos:column="40"/></condition><then pos:line="61" pos:column="40"> <block pos:line="61" pos:column="41">{
          <comment type="block" pos:line="62" pos:column="11">/* make sure we don't read "too much" if we can help it since we
             might be pipelining and then someone else might want to read what
             follows! */</comment>
          <decl_stmt><decl><type><name pos:line="65" pos:column="11">curl_off_t<pos:position pos:line="65" pos:column="21"/></name></type> <name pos:line="65" pos:column="22">totalleft<pos:position pos:line="65" pos:column="31"/></name> <init pos:line="65" pos:column="32">= <expr><name><name pos:line="65" pos:column="34">k<pos:position pos:line="65" pos:column="35"/></name><operator pos:line="65" pos:column="35">-&gt;<pos:position pos:line="65" pos:column="40"/></operator><name pos:line="65" pos:column="37">size<pos:position pos:line="65" pos:column="41"/></name></name> <operator pos:line="65" pos:column="42">-<pos:position pos:line="65" pos:column="43"/></operator> <name><name pos:line="65" pos:column="44">k<pos:position pos:line="65" pos:column="45"/></name><operator pos:line="65" pos:column="45">-&gt;<pos:position pos:line="65" pos:column="50"/></operator><name pos:line="65" pos:column="47">bytecount<pos:position pos:line="65" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="65" pos:column="57"/></decl_stmt>
          <if pos:line="66" pos:column="11">if<condition pos:line="66" pos:column="13">(<expr><name pos:line="66" pos:column="14">totalleft<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">&lt;<pos:position pos:line="66" pos:column="28"/></operator> <operator pos:line="66" pos:column="26">(<pos:position pos:line="66" pos:column="27"/></operator><name pos:line="66" pos:column="27">curl_off_t<pos:position pos:line="66" pos:column="37"/></name><operator pos:line="66" pos:column="37">)<pos:position pos:line="66" pos:column="38"/></operator><name pos:line="66" pos:column="38">bytestoread<pos:position pos:line="66" pos:column="49"/></name></expr>)<pos:position pos:line="66" pos:column="50"/></condition><then pos:line="66" pos:column="50">
            <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="13">bytestoread<pos:position pos:line="67" pos:column="24"/></name> <operator pos:line="67" pos:column="25">=<pos:position pos:line="67" pos:column="26"/></operator> <operator pos:line="67" pos:column="27">(<pos:position pos:line="67" pos:column="28"/></operator><name pos:line="67" pos:column="28">size_t<pos:position pos:line="67" pos:column="34"/></name><operator pos:line="67" pos:column="34">)<pos:position pos:line="67" pos:column="35"/></operator><name pos:line="67" pos:column="35">totalleft<pos:position pos:line="67" pos:column="44"/></name></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt></block></then></if>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if>

        <if pos:line="70" pos:column="9">if<condition pos:line="70" pos:column="11">(<expr><name pos:line="70" pos:column="12">bytestoread<pos:position pos:line="70" pos:column="23"/></name></expr>)<pos:position pos:line="70" pos:column="24"/></condition><then pos:line="70" pos:column="24"> <block pos:line="70" pos:column="25">{
          <comment type="block" pos:line="71" pos:column="11">/* receive data from the network! */</comment>
          <expr_stmt><expr><name pos:line="72" pos:column="11">readrc<pos:position pos:line="72" pos:column="17"/></name> <operator pos:line="72" pos:column="18">=<pos:position pos:line="72" pos:column="19"/></operator> <call><name pos:line="72" pos:column="20">Curl_read<pos:position pos:line="72" pos:column="29"/></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name pos:line="72" pos:column="30">conn<pos:position pos:line="72" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="36">conn<pos:position pos:line="72" pos:column="40"/></name><operator pos:line="72" pos:column="40">-&gt;<pos:position pos:line="72" pos:column="45"/></operator><name pos:line="72" pos:column="42">sockfd<pos:position pos:line="72" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="50">k<pos:position pos:line="72" pos:column="51"/></name><operator pos:line="72" pos:column="51">-&gt;<pos:position pos:line="72" pos:column="56"/></operator><name pos:line="72" pos:column="53">buf<pos:position pos:line="72" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="58">bytestoread<pos:position pos:line="72" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="71">&amp;<pos:position pos:line="72" pos:column="76"/></operator><name pos:line="72" pos:column="72">nread<pos:position pos:line="72" pos:column="77"/></name></expr></argument>)<pos:position pos:line="72" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="79"/></expr_stmt>

          <comment type="block" pos:line="74" pos:column="11">/* subzero, this would've blocked */</comment>
          <if pos:line="75" pos:column="11">if<condition pos:line="75" pos:column="13">(<expr><literal type="number" pos:line="75" pos:column="14">0<pos:position pos:line="75" pos:column="15"/></literal> <operator pos:line="75" pos:column="16">&gt;<pos:position pos:line="75" pos:column="20"/></operator> <name pos:line="75" pos:column="18">readrc<pos:position pos:line="75" pos:column="24"/></name></expr>)<pos:position pos:line="75" pos:column="25"/></condition><then pos:line="75" pos:column="25">
            <block type="pseudo"><break pos:line="76" pos:column="13">break;<pos:position pos:line="76" pos:column="19"/></break></block></then></if> <comment type="block" pos:line="76" pos:column="20">/* get out of loop */</comment>

          <comment type="block" pos:line="78" pos:column="11">/* get the CURLcode from the int */</comment>
          <expr_stmt><expr><name pos:line="79" pos:column="11">result<pos:position pos:line="79" pos:column="17"/></name> <operator pos:line="79" pos:column="18">=<pos:position pos:line="79" pos:column="19"/></operator> <operator pos:line="79" pos:column="20">(<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="21">CURLcode<pos:position pos:line="79" pos:column="29"/></name><operator pos:line="79" pos:column="29">)<pos:position pos:line="79" pos:column="30"/></operator><name pos:line="79" pos:column="30">readrc<pos:position pos:line="79" pos:column="36"/></name></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt>

          <if pos:line="81" pos:column="11">if<condition pos:line="81" pos:column="13">(<expr><name pos:line="81" pos:column="14">result<pos:position pos:line="81" pos:column="20"/></name><operator pos:line="81" pos:column="20">&gt;<pos:position pos:line="81" pos:column="24"/></operator><literal type="number" pos:line="81" pos:column="21">0<pos:position pos:line="81" pos:column="22"/></literal></expr>)<pos:position pos:line="81" pos:column="23"/></condition><then pos:line="81" pos:column="23">
            <block type="pseudo"><return pos:line="82" pos:column="13">return <expr><name pos:line="82" pos:column="20">result<pos:position pos:line="82" pos:column="26"/></name></expr>;<pos:position pos:line="82" pos:column="27"/></return></block></then></if>
        }<pos:position pos:line="83" pos:column="10"/></block></then>
        <else pos:line="84" pos:column="9">else <block pos:line="84" pos:column="14">{
          <comment type="block" pos:line="85" pos:column="11">/* read nothing but since we wanted nothing we consider this an OK
             situation to proceed from */</comment>
          <expr_stmt><expr><name pos:line="87" pos:column="11">nread<pos:position pos:line="87" pos:column="16"/></name> <operator pos:line="87" pos:column="17">=<pos:position pos:line="87" pos:column="18"/></operator> <literal type="number" pos:line="87" pos:column="19">0<pos:position pos:line="87" pos:column="20"/></literal></expr>;<pos:position pos:line="87" pos:column="21"/></expr_stmt>
          <expr_stmt><expr><name pos:line="88" pos:column="11">result<pos:position pos:line="88" pos:column="17"/></name> <operator pos:line="88" pos:column="18">=<pos:position pos:line="88" pos:column="19"/></operator> <name pos:line="88" pos:column="20">CURLE_OK<pos:position pos:line="88" pos:column="28"/></name></expr>;<pos:position pos:line="88" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="89" pos:column="10"/></block></else></if>

        <if pos:line="91" pos:column="9">if<condition pos:line="91" pos:column="11">(<expr><operator pos:line="91" pos:column="12">(<pos:position pos:line="91" pos:column="13"/></operator><name><name pos:line="91" pos:column="13">k<pos:position pos:line="91" pos:column="14"/></name><operator pos:line="91" pos:column="14">-&gt;<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="16">bytecount<pos:position pos:line="91" pos:column="25"/></name></name> <operator pos:line="91" pos:column="26">==<pos:position pos:line="91" pos:column="28"/></operator> <literal type="number" pos:line="91" pos:column="29">0<pos:position pos:line="91" pos:column="30"/></literal><operator pos:line="91" pos:column="30">)<pos:position pos:line="91" pos:column="31"/></operator> <operator pos:line="91" pos:column="32">&amp;&amp;<pos:position pos:line="91" pos:column="42"/></operator> <operator pos:line="91" pos:column="35">(<pos:position pos:line="91" pos:column="36"/></operator><name><name pos:line="91" pos:column="36">k<pos:position pos:line="91" pos:column="37"/></name><operator pos:line="91" pos:column="37">-&gt;<pos:position pos:line="91" pos:column="42"/></operator><name pos:line="91" pos:column="39">writebytecount<pos:position pos:line="91" pos:column="53"/></name></name> <operator pos:line="91" pos:column="54">==<pos:position pos:line="91" pos:column="56"/></operator> <literal type="number" pos:line="91" pos:column="57">0<pos:position pos:line="91" pos:column="58"/></literal><operator pos:line="91" pos:column="58">)<pos:position pos:line="91" pos:column="59"/></operator></expr>)<pos:position pos:line="91" pos:column="60"/></condition><then pos:line="91" pos:column="60"> <block pos:line="91" pos:column="61">{
          <expr_stmt><expr><call><name pos:line="92" pos:column="11">Curl_pgrsTime<pos:position pos:line="92" pos:column="24"/></name><argument_list pos:line="92" pos:column="24">(<argument><expr><name pos:line="92" pos:column="25">data<pos:position pos:line="92" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="31">TIMER_STARTTRANSFER<pos:position pos:line="92" pos:column="50"/></name></expr></argument>)<pos:position pos:line="92" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="52"/></expr_stmt>
          <if pos:line="93" pos:column="11">if<condition pos:line="93" pos:column="13">(<expr><name><name pos:line="93" pos:column="14">k<pos:position pos:line="93" pos:column="15"/></name><operator pos:line="93" pos:column="15">-&gt;<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="17">exp100<pos:position pos:line="93" pos:column="23"/></name></name> <operator pos:line="93" pos:column="24">&gt;<pos:position pos:line="93" pos:column="28"/></operator> <name pos:line="93" pos:column="26">EXP100_SEND_DATA<pos:position pos:line="93" pos:column="42"/></name></expr>)<pos:position pos:line="93" pos:column="43"/></condition><then pos:line="93" pos:column="43">
            <comment type="block" pos:line="94" pos:column="13">/* set time stamp to compare with when waiting for the 100 */</comment>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="95" pos:column="13">k<pos:position pos:line="95" pos:column="14"/></name><operator pos:line="95" pos:column="14">-&gt;<pos:position pos:line="95" pos:column="19"/></operator><name pos:line="95" pos:column="16">start100<pos:position pos:line="95" pos:column="24"/></name></name> <operator pos:line="95" pos:column="25">=<pos:position pos:line="95" pos:column="26"/></operator> <call><name pos:line="95" pos:column="27">Curl_tvnow<pos:position pos:line="95" pos:column="37"/></name><argument_list pos:line="95" pos:column="37">()<pos:position pos:line="95" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="40"/></expr_stmt></block></then></if>
        }<pos:position pos:line="96" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="98" pos:column="9">didwhat<pos:position pos:line="98" pos:column="16"/></name> <operator pos:line="98" pos:column="17">|=<pos:position pos:line="98" pos:column="19"/></operator> <name pos:line="98" pos:column="20">KEEP_READ<pos:position pos:line="98" pos:column="29"/></name></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt>
        <comment type="block" pos:line="99" pos:column="9">/* indicates data of zero size, i.e. empty file */</comment>
        <expr_stmt><expr><name pos:line="100" pos:column="9">is_empty_data<pos:position pos:line="100" pos:column="22"/></name> <operator pos:line="100" pos:column="23">=<pos:position pos:line="100" pos:column="24"/></operator> <call pos:line="100" pos:column="25">(<name pos:line="100" pos:column="26">bool<pos:position pos:line="100" pos:column="30"/></name>)<argument_list pos:line="100" pos:column="31">(<argument><expr><operator pos:line="100" pos:column="32">(<pos:position pos:line="100" pos:column="33"/></operator><name pos:line="100" pos:column="33">nread<pos:position pos:line="100" pos:column="38"/></name> <operator pos:line="100" pos:column="39">==<pos:position pos:line="100" pos:column="41"/></operator> <literal type="number" pos:line="100" pos:column="42">0<pos:position pos:line="100" pos:column="43"/></literal><operator pos:line="100" pos:column="43">)<pos:position pos:line="100" pos:column="44"/></operator> <operator pos:line="100" pos:column="45">&amp;&amp;<pos:position pos:line="100" pos:column="55"/></operator> <operator pos:line="100" pos:column="48">(<pos:position pos:line="100" pos:column="49"/></operator><name><name pos:line="100" pos:column="49">k<pos:position pos:line="100" pos:column="50"/></name><operator pos:line="100" pos:column="50">-&gt;<pos:position pos:line="100" pos:column="55"/></operator><name pos:line="100" pos:column="52">bodywrites<pos:position pos:line="100" pos:column="62"/></name></name> <operator pos:line="100" pos:column="63">==<pos:position pos:line="100" pos:column="65"/></operator> <literal type="number" pos:line="100" pos:column="66">0<pos:position pos:line="100" pos:column="67"/></literal><operator pos:line="100" pos:column="67">)<pos:position pos:line="100" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="100" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="70"/></expr_stmt>

        <comment type="block" pos:line="102" pos:column="9">/* NULL terminate, allowing string ops to be used */</comment>
        <if pos:line="103" pos:column="9">if<condition pos:line="103" pos:column="11">(<expr><literal type="number" pos:line="103" pos:column="12">0<pos:position pos:line="103" pos:column="13"/></literal> <operator pos:line="103" pos:column="14">&lt;<pos:position pos:line="103" pos:column="18"/></operator> <name pos:line="103" pos:column="16">nread<pos:position pos:line="103" pos:column="21"/></name> <operator pos:line="103" pos:column="22">||<pos:position pos:line="103" pos:column="24"/></operator> <name pos:line="103" pos:column="25">is_empty_data<pos:position pos:line="103" pos:column="38"/></name></expr>)<pos:position pos:line="103" pos:column="39"/></condition><then pos:line="103" pos:column="39"> <block pos:line="103" pos:column="40">{
          <expr_stmt><expr><name><name pos:line="104" pos:column="11">k<pos:position pos:line="104" pos:column="12"/></name><operator pos:line="104" pos:column="12">-&gt;<pos:position pos:line="104" pos:column="17"/></operator><name pos:line="104" pos:column="14">buf<pos:position pos:line="104" pos:column="17"/></name><index pos:line="104" pos:column="17">[<expr><name pos:line="104" pos:column="18">nread<pos:position pos:line="104" pos:column="23"/></name></expr>]<pos:position pos:line="104" pos:column="24"/></index></name> <operator pos:line="104" pos:column="25">=<pos:position pos:line="104" pos:column="26"/></operator> <literal type="number" pos:line="104" pos:column="27">0<pos:position pos:line="104" pos:column="28"/></literal></expr>;<pos:position pos:line="104" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="105" pos:column="10"/></block></then>
        <elseif pos:line="106" pos:column="9">else <if pos:line="106" pos:column="14">if<condition pos:line="106" pos:column="16">(<expr><literal type="number" pos:line="106" pos:column="17">0<pos:position pos:line="106" pos:column="18"/></literal> <operator pos:line="106" pos:column="19">&gt;=<pos:position pos:line="106" pos:column="24"/></operator> <name pos:line="106" pos:column="22">nread<pos:position pos:line="106" pos:column="27"/></name></expr>)<pos:position pos:line="106" pos:column="28"/></condition><then pos:line="106" pos:column="28"> <block pos:line="106" pos:column="29">{
          <comment type="block" pos:line="107" pos:column="11">/* if we receive 0 or less here, the server closed the connection
             and we bail out from this! */</comment>
          <expr_stmt><expr><call><name pos:line="109" pos:column="11">DEBUGF<pos:position pos:line="109" pos:column="17"/></name><argument_list pos:line="109" pos:column="17">(<argument><expr><call><name pos:line="109" pos:column="18">infof<pos:position pos:line="109" pos:column="23"/></name><argument_list pos:line="109" pos:column="23">(<argument><expr><name pos:line="109" pos:column="24">data<pos:position pos:line="109" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="30">"nread &lt;= 0, server closed connection, bailing\n"<pos:position pos:line="109" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="82"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="110" pos:column="11">k<pos:position pos:line="110" pos:column="12"/></name><operator pos:line="110" pos:column="12">-&gt;<pos:position pos:line="110" pos:column="17"/></operator><name pos:line="110" pos:column="14">keepon<pos:position pos:line="110" pos:column="20"/></name></name> <operator pos:line="110" pos:column="21">&amp;=<pos:position pos:line="110" pos:column="27"/></operator> <operator pos:line="110" pos:column="24">~<pos:position pos:line="110" pos:column="25"/></operator><name pos:line="110" pos:column="25">KEEP_READ<pos:position pos:line="110" pos:column="34"/></name></expr>;<pos:position pos:line="110" pos:column="35"/></expr_stmt>
          <break pos:line="111" pos:column="11">break;<pos:position pos:line="111" pos:column="17"/></break>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if></elseif></if>

        <comment type="block" pos:line="114" pos:column="9">/* Default buffer to use when we write the buffer, it may be changed
           in the flow below before the actual storing is done. */</comment>
        <expr_stmt><expr><name><name pos:line="116" pos:column="9">k<pos:position pos:line="116" pos:column="10"/></name><operator pos:line="116" pos:column="10">-&gt;<pos:position pos:line="116" pos:column="15"/></operator><name pos:line="116" pos:column="12">str<pos:position pos:line="116" pos:column="15"/></name></name> <operator pos:line="116" pos:column="16">=<pos:position pos:line="116" pos:column="17"/></operator> <name><name pos:line="116" pos:column="18">k<pos:position pos:line="116" pos:column="19"/></name><operator pos:line="116" pos:column="19">-&gt;<pos:position pos:line="116" pos:column="24"/></operator><name pos:line="116" pos:column="21">buf<pos:position pos:line="116" pos:column="24"/></name></name></expr>;<pos:position pos:line="116" pos:column="25"/></expr_stmt>

        <comment type="block" pos:line="118" pos:column="9">/* Since this is a two-state thing, we check if we are parsing
           headers at the moment or not. */</comment>
        <if pos:line="120" pos:column="9">if<condition pos:line="120" pos:column="11">(<expr><name><name pos:line="120" pos:column="12">k<pos:position pos:line="120" pos:column="13"/></name><operator pos:line="120" pos:column="13">-&gt;<pos:position pos:line="120" pos:column="18"/></operator><name pos:line="120" pos:column="15">header<pos:position pos:line="120" pos:column="21"/></name></name></expr>)<pos:position pos:line="120" pos:column="22"/></condition><then pos:line="120" pos:column="22"> <block pos:line="120" pos:column="23">{
          <comment type="block" pos:line="121" pos:column="11">/* we are in parse-the-header-mode */</comment>
          <decl_stmt><decl><type><name pos:line="122" pos:column="11">bool<pos:position pos:line="122" pos:column="15"/></name></type> <name pos:line="122" pos:column="16">stop_reading<pos:position pos:line="122" pos:column="28"/></name> <init pos:line="122" pos:column="29">= <expr><name pos:line="122" pos:column="31">FALSE<pos:position pos:line="122" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="122" pos:column="37"/></decl_stmt>

          <comment type="block" pos:line="124" pos:column="11">/* header line within buffer loop */</comment>
          <do pos:line="125" pos:column="11">do <block pos:line="125" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">size_t<pos:position pos:line="126" pos:column="19"/></name></type> <name pos:line="126" pos:column="20">hbufp_index<pos:position pos:line="126" pos:column="31"/></name></decl>;<pos:position pos:line="126" pos:column="32"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="127" pos:column="13">size_t<pos:position pos:line="127" pos:column="19"/></name></type> <name pos:line="127" pos:column="20">rest_length<pos:position pos:line="127" pos:column="31"/></name></decl>;<pos:position pos:line="127" pos:column="32"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">size_t<pos:position pos:line="128" pos:column="19"/></name></type> <name pos:line="128" pos:column="20">full_length<pos:position pos:line="128" pos:column="31"/></name></decl>;<pos:position pos:line="128" pos:column="32"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">int<pos:position pos:line="129" pos:column="16"/></name></type> <name pos:line="129" pos:column="17">writetype<pos:position pos:line="129" pos:column="26"/></name></decl>;<pos:position pos:line="129" pos:column="27"/></decl_stmt>

            <comment type="block" pos:line="131" pos:column="13">/* str_start is start of line within buf */</comment>
            <expr_stmt><expr><name><name pos:line="132" pos:column="13">k<pos:position pos:line="132" pos:column="14"/></name><operator pos:line="132" pos:column="14">-&gt;<pos:position pos:line="132" pos:column="19"/></operator><name pos:line="132" pos:column="16">str_start<pos:position pos:line="132" pos:column="25"/></name></name> <operator pos:line="132" pos:column="26">=<pos:position pos:line="132" pos:column="27"/></operator> <name><name pos:line="132" pos:column="28">k<pos:position pos:line="132" pos:column="29"/></name><operator pos:line="132" pos:column="29">-&gt;<pos:position pos:line="132" pos:column="34"/></operator><name pos:line="132" pos:column="31">str<pos:position pos:line="132" pos:column="34"/></name></name></expr>;<pos:position pos:line="132" pos:column="35"/></expr_stmt>

            <comment type="block" pos:line="134" pos:column="13">/* data is in network encoding so use 0x0a instead of '\n' */</comment>
            <expr_stmt><expr><name><name pos:line="135" pos:column="13">k<pos:position pos:line="135" pos:column="14"/></name><operator pos:line="135" pos:column="14">-&gt;<pos:position pos:line="135" pos:column="19"/></operator><name pos:line="135" pos:column="16">end_ptr<pos:position pos:line="135" pos:column="23"/></name></name> <operator pos:line="135" pos:column="24">=<pos:position pos:line="135" pos:column="25"/></operator> <call><name pos:line="135" pos:column="26">memchr<pos:position pos:line="135" pos:column="32"/></name><argument_list pos:line="135" pos:column="32">(<argument><expr><name><name pos:line="135" pos:column="33">k<pos:position pos:line="135" pos:column="34"/></name><operator pos:line="135" pos:column="34">-&gt;<pos:position pos:line="135" pos:column="39"/></operator><name pos:line="135" pos:column="36">str_start<pos:position pos:line="135" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="135" pos:column="47">0x0a<pos:position pos:line="135" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="53">nread<pos:position pos:line="135" pos:column="58"/></name></expr></argument>)<pos:position pos:line="135" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="60"/></expr_stmt>

            <if pos:line="137" pos:column="13">if<condition pos:line="137" pos:column="15">(<expr><operator pos:line="137" pos:column="16">!<pos:position pos:line="137" pos:column="17"/></operator><name><name pos:line="137" pos:column="17">k<pos:position pos:line="137" pos:column="18"/></name><operator pos:line="137" pos:column="18">-&gt;<pos:position pos:line="137" pos:column="23"/></operator><name pos:line="137" pos:column="20">end_ptr<pos:position pos:line="137" pos:column="27"/></name></name></expr>)<pos:position pos:line="137" pos:column="28"/></condition><then pos:line="137" pos:column="28"> <block pos:line="137" pos:column="29">{
              <comment type="block" pos:line="138" pos:column="15">/* Not a complete header line within buffer, append the data to
                 the end of the headerbuff. */</comment>

              <if pos:line="141" pos:column="15">if<condition pos:line="141" pos:column="17">(<expr><name><name pos:line="141" pos:column="18">k<pos:position pos:line="141" pos:column="19"/></name><operator pos:line="141" pos:column="19">-&gt;<pos:position pos:line="141" pos:column="24"/></operator><name pos:line="141" pos:column="21">hbuflen<pos:position pos:line="141" pos:column="28"/></name></name> <operator pos:line="141" pos:column="29">+<pos:position pos:line="141" pos:column="30"/></operator> <name pos:line="141" pos:column="31">nread<pos:position pos:line="141" pos:column="36"/></name> <operator pos:line="141" pos:column="37">&gt;=<pos:position pos:line="141" pos:column="42"/></operator> <name><name pos:line="141" pos:column="40">data<pos:position pos:line="141" pos:column="44"/></name><operator pos:line="141" pos:column="44">-&gt;<pos:position pos:line="141" pos:column="49"/></operator><name pos:line="141" pos:column="46">state<pos:position pos:line="141" pos:column="51"/></name><operator pos:line="141" pos:column="51">.<pos:position pos:line="141" pos:column="52"/></operator><name pos:line="141" pos:column="52">headersize<pos:position pos:line="141" pos:column="62"/></name></name></expr>)<pos:position pos:line="141" pos:column="63"/></condition><then pos:line="141" pos:column="63"> <block pos:line="141" pos:column="64">{
                <comment type="block" pos:line="142" pos:column="17">/* We enlarge the header buffer as it is too small */</comment>
                <decl_stmt><decl><type><name pos:line="143" pos:column="17">char<pos:position pos:line="143" pos:column="21"/></name> <modifier pos:line="143" pos:column="22">*<pos:position pos:line="143" pos:column="23"/></modifier></type><name pos:line="143" pos:column="23">newbuff<pos:position pos:line="143" pos:column="30"/></name></decl>;<pos:position pos:line="143" pos:column="31"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="144" pos:column="17">size_t<pos:position pos:line="144" pos:column="23"/></name></type> <name pos:line="144" pos:column="24">newsize<pos:position pos:line="144" pos:column="31"/></name><init pos:line="144" pos:column="31">=<expr><call><name pos:line="144" pos:column="32">CURLMAX<pos:position pos:line="144" pos:column="39"/></name><argument_list pos:line="144" pos:column="39">(<argument><expr><operator pos:line="144" pos:column="40">(<pos:position pos:line="144" pos:column="41"/></operator><name><name pos:line="144" pos:column="41">k<pos:position pos:line="144" pos:column="42"/></name><operator pos:line="144" pos:column="42">-&gt;<pos:position pos:line="144" pos:column="47"/></operator><name pos:line="144" pos:column="44">hbuflen<pos:position pos:line="144" pos:column="51"/></name></name><operator pos:line="144" pos:column="51">+<pos:position pos:line="144" pos:column="52"/></operator><name pos:line="144" pos:column="52">nread<pos:position pos:line="144" pos:column="57"/></name><operator pos:line="144" pos:column="57">)<pos:position pos:line="144" pos:column="58"/></operator><operator pos:line="144" pos:column="58">*<pos:position pos:line="144" pos:column="59"/></operator><literal type="number" pos:line="144" pos:column="59">3<pos:position pos:line="144" pos:column="60"/></literal><operator pos:line="144" pos:column="60">/<pos:position pos:line="144" pos:column="61"/></operator><literal type="number" pos:line="144" pos:column="61">2<pos:position pos:line="144" pos:column="62"/></literal></expr></argument>,
                                       <argument><expr><name><name pos:line="145" pos:column="40">data<pos:position pos:line="145" pos:column="44"/></name><operator pos:line="145" pos:column="44">-&gt;<pos:position pos:line="145" pos:column="49"/></operator><name pos:line="145" pos:column="46">state<pos:position pos:line="145" pos:column="51"/></name><operator pos:line="145" pos:column="51">.<pos:position pos:line="145" pos:column="52"/></operator><name pos:line="145" pos:column="52">headersize<pos:position pos:line="145" pos:column="62"/></name></name><operator pos:line="145" pos:column="62">*<pos:position pos:line="145" pos:column="63"/></operator><literal type="number" pos:line="145" pos:column="63">2<pos:position pos:line="145" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="145" pos:column="66"/></decl_stmt>
                <expr_stmt><expr><name pos:line="146" pos:column="17">hbufp_index<pos:position pos:line="146" pos:column="28"/></name> <operator pos:line="146" pos:column="29">=<pos:position pos:line="146" pos:column="30"/></operator> <name><name pos:line="146" pos:column="31">k<pos:position pos:line="146" pos:column="32"/></name><operator pos:line="146" pos:column="32">-&gt;<pos:position pos:line="146" pos:column="37"/></operator><name pos:line="146" pos:column="34">hbufp<pos:position pos:line="146" pos:column="39"/></name></name> <operator pos:line="146" pos:column="40">-<pos:position pos:line="146" pos:column="41"/></operator> <name><name pos:line="146" pos:column="42">data<pos:position pos:line="146" pos:column="46"/></name><operator pos:line="146" pos:column="46">-&gt;<pos:position pos:line="146" pos:column="51"/></operator><name pos:line="146" pos:column="48">state<pos:position pos:line="146" pos:column="53"/></name><operator pos:line="146" pos:column="53">.<pos:position pos:line="146" pos:column="54"/></operator><name pos:line="146" pos:column="54">headerbuff<pos:position pos:line="146" pos:column="64"/></name></name></expr>;<pos:position pos:line="146" pos:column="65"/></expr_stmt>
                <expr_stmt><expr><name pos:line="147" pos:column="17">newbuff<pos:position pos:line="147" pos:column="24"/></name> <operator pos:line="147" pos:column="25">=<pos:position pos:line="147" pos:column="26"/></operator> <operator pos:line="147" pos:column="27">(<pos:position pos:line="147" pos:column="28"/></operator><name pos:line="147" pos:column="28">char<pos:position pos:line="147" pos:column="32"/></name> <operator pos:line="147" pos:column="33">*<pos:position pos:line="147" pos:column="34"/></operator><operator pos:line="147" pos:column="34">)<pos:position pos:line="147" pos:column="35"/></operator><call><name pos:line="147" pos:column="35">realloc<pos:position pos:line="147" pos:column="42"/></name><argument_list pos:line="147" pos:column="42">(<argument><expr><name><name pos:line="147" pos:column="43">data<pos:position pos:line="147" pos:column="47"/></name><operator pos:line="147" pos:column="47">-&gt;<pos:position pos:line="147" pos:column="52"/></operator><name pos:line="147" pos:column="49">state<pos:position pos:line="147" pos:column="54"/></name><operator pos:line="147" pos:column="54">.<pos:position pos:line="147" pos:column="55"/></operator><name pos:line="147" pos:column="55">headerbuff<pos:position pos:line="147" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="67">newsize<pos:position pos:line="147" pos:column="74"/></name></expr></argument>)<pos:position pos:line="147" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="76"/></expr_stmt>
                <if pos:line="148" pos:column="17">if<condition pos:line="148" pos:column="19">(<expr><operator pos:line="148" pos:column="20">!<pos:position pos:line="148" pos:column="21"/></operator><name pos:line="148" pos:column="21">newbuff<pos:position pos:line="148" pos:column="28"/></name></expr>)<pos:position pos:line="148" pos:column="29"/></condition><then pos:line="148" pos:column="29"> <block pos:line="148" pos:column="30">{
                  <expr_stmt><expr><call><name pos:line="149" pos:column="19">failf<pos:position pos:line="149" pos:column="24"/></name> <argument_list pos:line="149" pos:column="25">(<argument><expr><name pos:line="149" pos:column="26">data<pos:position pos:line="149" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="149" pos:column="32">"Failed to alloc memory for big header!"<pos:position pos:line="149" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="74"/></expr_stmt>
                  <return pos:line="150" pos:column="19">return <expr><name pos:line="150" pos:column="26">CURLE_OUT_OF_MEMORY<pos:position pos:line="150" pos:column="45"/></name></expr>;<pos:position pos:line="150" pos:column="46"/></return>
                }<pos:position pos:line="151" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="152" pos:column="17">data<pos:position pos:line="152" pos:column="21"/></name><operator pos:line="152" pos:column="21">-&gt;<pos:position pos:line="152" pos:column="26"/></operator><name pos:line="152" pos:column="23">state<pos:position pos:line="152" pos:column="28"/></name><operator pos:line="152" pos:column="28">.<pos:position pos:line="152" pos:column="29"/></operator><name pos:line="152" pos:column="29">headersize<pos:position pos:line="152" pos:column="39"/></name></name><operator pos:line="152" pos:column="39">=<pos:position pos:line="152" pos:column="40"/></operator><name pos:line="152" pos:column="40">newsize<pos:position pos:line="152" pos:column="47"/></name></expr>;<pos:position pos:line="152" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="153" pos:column="17">data<pos:position pos:line="153" pos:column="21"/></name><operator pos:line="153" pos:column="21">-&gt;<pos:position pos:line="153" pos:column="26"/></operator><name pos:line="153" pos:column="23">state<pos:position pos:line="153" pos:column="28"/></name><operator pos:line="153" pos:column="28">.<pos:position pos:line="153" pos:column="29"/></operator><name pos:line="153" pos:column="29">headerbuff<pos:position pos:line="153" pos:column="39"/></name></name> <operator pos:line="153" pos:column="40">=<pos:position pos:line="153" pos:column="41"/></operator> <name pos:line="153" pos:column="42">newbuff<pos:position pos:line="153" pos:column="49"/></name></expr>;<pos:position pos:line="153" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="154" pos:column="17">k<pos:position pos:line="154" pos:column="18"/></name><operator pos:line="154" pos:column="18">-&gt;<pos:position pos:line="154" pos:column="23"/></operator><name pos:line="154" pos:column="20">hbufp<pos:position pos:line="154" pos:column="25"/></name></name> <operator pos:line="154" pos:column="26">=<pos:position pos:line="154" pos:column="27"/></operator> <name><name pos:line="154" pos:column="28">data<pos:position pos:line="154" pos:column="32"/></name><operator pos:line="154" pos:column="32">-&gt;<pos:position pos:line="154" pos:column="37"/></operator><name pos:line="154" pos:column="34">state<pos:position pos:line="154" pos:column="39"/></name><operator pos:line="154" pos:column="39">.<pos:position pos:line="154" pos:column="40"/></operator><name pos:line="154" pos:column="40">headerbuff<pos:position pos:line="154" pos:column="50"/></name></name> <operator pos:line="154" pos:column="51">+<pos:position pos:line="154" pos:column="52"/></operator> <name pos:line="154" pos:column="53">hbufp_index<pos:position pos:line="154" pos:column="64"/></name></expr>;<pos:position pos:line="154" pos:column="65"/></expr_stmt>
              }<pos:position pos:line="155" pos:column="16"/></block></then></if>
              <expr_stmt><expr><call><name pos:line="156" pos:column="15">memcpy<pos:position pos:line="156" pos:column="21"/></name><argument_list pos:line="156" pos:column="21">(<argument><expr><name><name pos:line="156" pos:column="22">k<pos:position pos:line="156" pos:column="23"/></name><operator pos:line="156" pos:column="23">-&gt;<pos:position pos:line="156" pos:column="28"/></operator><name pos:line="156" pos:column="25">hbufp<pos:position pos:line="156" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="156" pos:column="32">k<pos:position pos:line="156" pos:column="33"/></name><operator pos:line="156" pos:column="33">-&gt;<pos:position pos:line="156" pos:column="38"/></operator><name pos:line="156" pos:column="35">str<pos:position pos:line="156" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="40">nread<pos:position pos:line="156" pos:column="45"/></name></expr></argument>)<pos:position pos:line="156" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="47"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="157" pos:column="15">k<pos:position pos:line="157" pos:column="16"/></name><operator pos:line="157" pos:column="16">-&gt;<pos:position pos:line="157" pos:column="21"/></operator><name pos:line="157" pos:column="18">hbufp<pos:position pos:line="157" pos:column="23"/></name></name> <operator pos:line="157" pos:column="24">+=<pos:position pos:line="157" pos:column="26"/></operator> <name pos:line="157" pos:column="27">nread<pos:position pos:line="157" pos:column="32"/></name></expr>;<pos:position pos:line="157" pos:column="33"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="158" pos:column="15">k<pos:position pos:line="158" pos:column="16"/></name><operator pos:line="158" pos:column="16">-&gt;<pos:position pos:line="158" pos:column="21"/></operator><name pos:line="158" pos:column="18">hbuflen<pos:position pos:line="158" pos:column="25"/></name></name> <operator pos:line="158" pos:column="26">+=<pos:position pos:line="158" pos:column="28"/></operator> <name pos:line="158" pos:column="29">nread<pos:position pos:line="158" pos:column="34"/></name></expr>;<pos:position pos:line="158" pos:column="35"/></expr_stmt>
              <if pos:line="159" pos:column="15">if<condition pos:line="159" pos:column="17">(<expr><operator pos:line="159" pos:column="18">!<pos:position pos:line="159" pos:column="19"/></operator><name><name pos:line="159" pos:column="19">k<pos:position pos:line="159" pos:column="20"/></name><operator pos:line="159" pos:column="20">-&gt;<pos:position pos:line="159" pos:column="25"/></operator><name pos:line="159" pos:column="22">headerline<pos:position pos:line="159" pos:column="32"/></name></name> <operator pos:line="159" pos:column="33">&amp;&amp;<pos:position pos:line="159" pos:column="43"/></operator> <operator pos:line="159" pos:column="36">(<pos:position pos:line="159" pos:column="37"/></operator><name><name pos:line="159" pos:column="37">k<pos:position pos:line="159" pos:column="38"/></name><operator pos:line="159" pos:column="38">-&gt;<pos:position pos:line="159" pos:column="43"/></operator><name pos:line="159" pos:column="40">hbuflen<pos:position pos:line="159" pos:column="47"/></name></name><operator pos:line="159" pos:column="47">&gt;<pos:position pos:line="159" pos:column="51"/></operator><literal type="number" pos:line="159" pos:column="48">5<pos:position pos:line="159" pos:column="49"/></literal><operator pos:line="159" pos:column="49">)<pos:position pos:line="159" pos:column="50"/></operator></expr>)<pos:position pos:line="159" pos:column="51"/></condition><then pos:line="159" pos:column="51"> <block pos:line="159" pos:column="52">{
                <comment type="block" pos:line="160" pos:column="17">/* make a first check that this looks like a HTTP header */</comment>
                <if pos:line="161" pos:column="17">if<condition pos:line="161" pos:column="19">(<expr><operator pos:line="161" pos:column="20">!<pos:position pos:line="161" pos:column="21"/></operator><call><name pos:line="161" pos:column="21">checkhttpprefix<pos:position pos:line="161" pos:column="36"/></name><argument_list pos:line="161" pos:column="36">(<argument><expr><name pos:line="161" pos:column="37">data<pos:position pos:line="161" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="43">data<pos:position pos:line="161" pos:column="47"/></name><operator pos:line="161" pos:column="47">-&gt;<pos:position pos:line="161" pos:column="52"/></operator><name pos:line="161" pos:column="49">state<pos:position pos:line="161" pos:column="54"/></name><operator pos:line="161" pos:column="54">.<pos:position pos:line="161" pos:column="55"/></operator><name pos:line="161" pos:column="55">headerbuff<pos:position pos:line="161" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="161" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="161" pos:column="67"/></condition><then pos:line="161" pos:column="67"> <block pos:line="161" pos:column="68">{
                  <comment type="block" pos:line="162" pos:column="19">/* this is not the beginning of a HTTP first header line */</comment>
                  <expr_stmt><expr><name><name pos:line="163" pos:column="19">k<pos:position pos:line="163" pos:column="20"/></name><operator pos:line="163" pos:column="20">-&gt;<pos:position pos:line="163" pos:column="25"/></operator><name pos:line="163" pos:column="22">header<pos:position pos:line="163" pos:column="28"/></name></name> <operator pos:line="163" pos:column="29">=<pos:position pos:line="163" pos:column="30"/></operator> <name pos:line="163" pos:column="31">FALSE<pos:position pos:line="163" pos:column="36"/></name></expr>;<pos:position pos:line="163" pos:column="37"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="164" pos:column="19">k<pos:position pos:line="164" pos:column="20"/></name><operator pos:line="164" pos:column="20">-&gt;<pos:position pos:line="164" pos:column="25"/></operator><name pos:line="164" pos:column="22">badheader<pos:position pos:line="164" pos:column="31"/></name></name> <operator pos:line="164" pos:column="32">=<pos:position pos:line="164" pos:column="33"/></operator> <name pos:line="164" pos:column="34">HEADER_ALLBAD<pos:position pos:line="164" pos:column="47"/></name></expr>;<pos:position pos:line="164" pos:column="48"/></expr_stmt>
                  <break pos:line="165" pos:column="19">break;<pos:position pos:line="165" pos:column="25"/></break>
                }<pos:position pos:line="166" pos:column="18"/></block></then></if>
              }<pos:position pos:line="167" pos:column="16"/></block></then></if>

              <break pos:line="169" pos:column="15">break;<pos:position pos:line="169" pos:column="21"/></break> <comment type="block" pos:line="169" pos:column="22">/* read more and try again */</comment>
            }<pos:position pos:line="170" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="172" pos:column="13">/* decrease the size of the remaining (supposed) header line */</comment>
            <expr_stmt><expr><name pos:line="173" pos:column="13">rest_length<pos:position pos:line="173" pos:column="24"/></name> <operator pos:line="173" pos:column="25">=<pos:position pos:line="173" pos:column="26"/></operator> <operator pos:line="173" pos:column="27">(<pos:position pos:line="173" pos:column="28"/></operator><name><name pos:line="173" pos:column="28">k<pos:position pos:line="173" pos:column="29"/></name><operator pos:line="173" pos:column="29">-&gt;<pos:position pos:line="173" pos:column="34"/></operator><name pos:line="173" pos:column="31">end_ptr<pos:position pos:line="173" pos:column="38"/></name></name> <operator pos:line="173" pos:column="39">-<pos:position pos:line="173" pos:column="40"/></operator> <name><name pos:line="173" pos:column="41">k<pos:position pos:line="173" pos:column="42"/></name><operator pos:line="173" pos:column="42">-&gt;<pos:position pos:line="173" pos:column="47"/></operator><name pos:line="173" pos:column="44">str<pos:position pos:line="173" pos:column="47"/></name></name><operator pos:line="173" pos:column="47">)<pos:position pos:line="173" pos:column="48"/></operator><operator pos:line="173" pos:column="48">+<pos:position pos:line="173" pos:column="49"/></operator><literal type="number" pos:line="173" pos:column="49">1<pos:position pos:line="173" pos:column="50"/></literal></expr>;<pos:position pos:line="173" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name pos:line="174" pos:column="13">nread<pos:position pos:line="174" pos:column="18"/></name> <operator pos:line="174" pos:column="19">-=<pos:position pos:line="174" pos:column="21"/></operator> <operator pos:line="174" pos:column="22">(<pos:position pos:line="174" pos:column="23"/></operator><name pos:line="174" pos:column="23">ssize_t<pos:position pos:line="174" pos:column="30"/></name><operator pos:line="174" pos:column="30">)<pos:position pos:line="174" pos:column="31"/></operator><name pos:line="174" pos:column="31">rest_length<pos:position pos:line="174" pos:column="42"/></name></expr>;<pos:position pos:line="174" pos:column="43"/></expr_stmt>

            <expr_stmt><expr><name><name pos:line="176" pos:column="13">k<pos:position pos:line="176" pos:column="14"/></name><operator pos:line="176" pos:column="14">-&gt;<pos:position pos:line="176" pos:column="19"/></operator><name pos:line="176" pos:column="16">str<pos:position pos:line="176" pos:column="19"/></name></name> <operator pos:line="176" pos:column="20">=<pos:position pos:line="176" pos:column="21"/></operator> <name><name pos:line="176" pos:column="22">k<pos:position pos:line="176" pos:column="23"/></name><operator pos:line="176" pos:column="23">-&gt;<pos:position pos:line="176" pos:column="28"/></operator><name pos:line="176" pos:column="25">end_ptr<pos:position pos:line="176" pos:column="32"/></name></name> <operator pos:line="176" pos:column="33">+<pos:position pos:line="176" pos:column="34"/></operator> <literal type="number" pos:line="176" pos:column="35">1<pos:position pos:line="176" pos:column="36"/></literal></expr>;<pos:position pos:line="176" pos:column="37"/></expr_stmt> <comment type="block" pos:line="176" pos:column="38">/* move past new line */</comment>

            <expr_stmt><expr><name pos:line="178" pos:column="13">full_length<pos:position pos:line="178" pos:column="24"/></name> <operator pos:line="178" pos:column="25">=<pos:position pos:line="178" pos:column="26"/></operator> <name><name pos:line="178" pos:column="27">k<pos:position pos:line="178" pos:column="28"/></name><operator pos:line="178" pos:column="28">-&gt;<pos:position pos:line="178" pos:column="33"/></operator><name pos:line="178" pos:column="30">str<pos:position pos:line="178" pos:column="33"/></name></name> <operator pos:line="178" pos:column="34">-<pos:position pos:line="178" pos:column="35"/></operator> <name><name pos:line="178" pos:column="36">k<pos:position pos:line="178" pos:column="37"/></name><operator pos:line="178" pos:column="37">-&gt;<pos:position pos:line="178" pos:column="42"/></operator><name pos:line="178" pos:column="39">str_start<pos:position pos:line="178" pos:column="48"/></name></name></expr>;<pos:position pos:line="178" pos:column="49"/></expr_stmt>

            <comment type="block" pos:line="180" pos:column="13">/*
             * We're about to copy a chunk of data to the end of the
             * already received header. We make sure that the full string
             * fit in the allocated header buffer, or else we enlarge
             * it.
             */</comment>
            <if pos:line="186" pos:column="13">if<condition pos:line="186" pos:column="15">(<expr><name><name pos:line="186" pos:column="16">k<pos:position pos:line="186" pos:column="17"/></name><operator pos:line="186" pos:column="17">-&gt;<pos:position pos:line="186" pos:column="22"/></operator><name pos:line="186" pos:column="19">hbuflen<pos:position pos:line="186" pos:column="26"/></name></name> <operator pos:line="186" pos:column="27">+<pos:position pos:line="186" pos:column="28"/></operator> <name pos:line="186" pos:column="29">full_length<pos:position pos:line="186" pos:column="40"/></name> <operator pos:line="186" pos:column="41">&gt;=<pos:position pos:line="186" pos:column="46"/></operator>
                <name><name pos:line="187" pos:column="17">data<pos:position pos:line="187" pos:column="21"/></name><operator pos:line="187" pos:column="21">-&gt;<pos:position pos:line="187" pos:column="26"/></operator><name pos:line="187" pos:column="23">state<pos:position pos:line="187" pos:column="28"/></name><operator pos:line="187" pos:column="28">.<pos:position pos:line="187" pos:column="29"/></operator><name pos:line="187" pos:column="29">headersize<pos:position pos:line="187" pos:column="39"/></name></name></expr>)<pos:position pos:line="187" pos:column="40"/></condition><then pos:line="187" pos:column="40"> <block pos:line="187" pos:column="41">{
              <decl_stmt><decl><type><name pos:line="188" pos:column="15">char<pos:position pos:line="188" pos:column="19"/></name> <modifier pos:line="188" pos:column="20">*<pos:position pos:line="188" pos:column="21"/></modifier></type><name pos:line="188" pos:column="21">newbuff<pos:position pos:line="188" pos:column="28"/></name></decl>;<pos:position pos:line="188" pos:column="29"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="189" pos:column="15">size_t<pos:position pos:line="189" pos:column="21"/></name></type> <name pos:line="189" pos:column="22">newsize<pos:position pos:line="189" pos:column="29"/></name><init pos:line="189" pos:column="29">=<expr><call><name pos:line="189" pos:column="30">CURLMAX<pos:position pos:line="189" pos:column="37"/></name><argument_list pos:line="189" pos:column="37">(<argument><expr><operator pos:line="189" pos:column="38">(<pos:position pos:line="189" pos:column="39"/></operator><name><name pos:line="189" pos:column="39">k<pos:position pos:line="189" pos:column="40"/></name><operator pos:line="189" pos:column="40">-&gt;<pos:position pos:line="189" pos:column="45"/></operator><name pos:line="189" pos:column="42">hbuflen<pos:position pos:line="189" pos:column="49"/></name></name><operator pos:line="189" pos:column="49">+<pos:position pos:line="189" pos:column="50"/></operator><name pos:line="189" pos:column="50">full_length<pos:position pos:line="189" pos:column="61"/></name><operator pos:line="189" pos:column="61">)<pos:position pos:line="189" pos:column="62"/></operator><operator pos:line="189" pos:column="62">*<pos:position pos:line="189" pos:column="63"/></operator><literal type="number" pos:line="189" pos:column="63">3<pos:position pos:line="189" pos:column="64"/></literal><operator pos:line="189" pos:column="64">/<pos:position pos:line="189" pos:column="65"/></operator><literal type="number" pos:line="189" pos:column="65">2<pos:position pos:line="189" pos:column="66"/></literal></expr></argument>,
                                     <argument><expr><name><name pos:line="190" pos:column="38">data<pos:position pos:line="190" pos:column="42"/></name><operator pos:line="190" pos:column="42">-&gt;<pos:position pos:line="190" pos:column="47"/></operator><name pos:line="190" pos:column="44">state<pos:position pos:line="190" pos:column="49"/></name><operator pos:line="190" pos:column="49">.<pos:position pos:line="190" pos:column="50"/></operator><name pos:line="190" pos:column="50">headersize<pos:position pos:line="190" pos:column="60"/></name></name><operator pos:line="190" pos:column="60">*<pos:position pos:line="190" pos:column="61"/></operator><literal type="number" pos:line="190" pos:column="61">2<pos:position pos:line="190" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="190" pos:column="64"/></decl_stmt>
              <expr_stmt><expr><name pos:line="191" pos:column="15">hbufp_index<pos:position pos:line="191" pos:column="26"/></name> <operator pos:line="191" pos:column="27">=<pos:position pos:line="191" pos:column="28"/></operator> <name><name pos:line="191" pos:column="29">k<pos:position pos:line="191" pos:column="30"/></name><operator pos:line="191" pos:column="30">-&gt;<pos:position pos:line="191" pos:column="35"/></operator><name pos:line="191" pos:column="32">hbufp<pos:position pos:line="191" pos:column="37"/></name></name> <operator pos:line="191" pos:column="38">-<pos:position pos:line="191" pos:column="39"/></operator> <name><name pos:line="191" pos:column="40">data<pos:position pos:line="191" pos:column="44"/></name><operator pos:line="191" pos:column="44">-&gt;<pos:position pos:line="191" pos:column="49"/></operator><name pos:line="191" pos:column="46">state<pos:position pos:line="191" pos:column="51"/></name><operator pos:line="191" pos:column="51">.<pos:position pos:line="191" pos:column="52"/></operator><name pos:line="191" pos:column="52">headerbuff<pos:position pos:line="191" pos:column="62"/></name></name></expr>;<pos:position pos:line="191" pos:column="63"/></expr_stmt>
              <expr_stmt><expr><name pos:line="192" pos:column="15">newbuff<pos:position pos:line="192" pos:column="22"/></name> <operator pos:line="192" pos:column="23">=<pos:position pos:line="192" pos:column="24"/></operator> <operator pos:line="192" pos:column="25">(<pos:position pos:line="192" pos:column="26"/></operator><name pos:line="192" pos:column="26">char<pos:position pos:line="192" pos:column="30"/></name> <operator pos:line="192" pos:column="31">*<pos:position pos:line="192" pos:column="32"/></operator><operator pos:line="192" pos:column="32">)<pos:position pos:line="192" pos:column="33"/></operator><call><name pos:line="192" pos:column="33">realloc<pos:position pos:line="192" pos:column="40"/></name><argument_list pos:line="192" pos:column="40">(<argument><expr><name><name pos:line="192" pos:column="41">data<pos:position pos:line="192" pos:column="45"/></name><operator pos:line="192" pos:column="45">-&gt;<pos:position pos:line="192" pos:column="50"/></operator><name pos:line="192" pos:column="47">state<pos:position pos:line="192" pos:column="52"/></name><operator pos:line="192" pos:column="52">.<pos:position pos:line="192" pos:column="53"/></operator><name pos:line="192" pos:column="53">headerbuff<pos:position pos:line="192" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="65">newsize<pos:position pos:line="192" pos:column="72"/></name></expr></argument>)<pos:position pos:line="192" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="74"/></expr_stmt>
              <if pos:line="193" pos:column="15">if<condition pos:line="193" pos:column="17">(<expr><operator pos:line="193" pos:column="18">!<pos:position pos:line="193" pos:column="19"/></operator><name pos:line="193" pos:column="19">newbuff<pos:position pos:line="193" pos:column="26"/></name></expr>)<pos:position pos:line="193" pos:column="27"/></condition><then pos:line="193" pos:column="27"> <block pos:line="193" pos:column="28">{
                <expr_stmt><expr><call><name pos:line="194" pos:column="17">failf<pos:position pos:line="194" pos:column="22"/></name> <argument_list pos:line="194" pos:column="23">(<argument><expr><name pos:line="194" pos:column="24">data<pos:position pos:line="194" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="194" pos:column="30">"Failed to alloc memory for big header!"<pos:position pos:line="194" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="194" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="72"/></expr_stmt>
                <return pos:line="195" pos:column="17">return <expr><name pos:line="195" pos:column="24">CURLE_OUT_OF_MEMORY<pos:position pos:line="195" pos:column="43"/></name></expr>;<pos:position pos:line="195" pos:column="44"/></return>
              }<pos:position pos:line="196" pos:column="16"/></block></then></if>
              <expr_stmt><expr><name><name pos:line="197" pos:column="15">data<pos:position pos:line="197" pos:column="19"/></name><operator pos:line="197" pos:column="19">-&gt;<pos:position pos:line="197" pos:column="24"/></operator><name pos:line="197" pos:column="21">state<pos:position pos:line="197" pos:column="26"/></name><operator pos:line="197" pos:column="26">.<pos:position pos:line="197" pos:column="27"/></operator><name pos:line="197" pos:column="27">headersize<pos:position pos:line="197" pos:column="37"/></name></name><operator pos:line="197" pos:column="37">=<pos:position pos:line="197" pos:column="38"/></operator> <name pos:line="197" pos:column="39">newsize<pos:position pos:line="197" pos:column="46"/></name></expr>;<pos:position pos:line="197" pos:column="47"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="198" pos:column="15">data<pos:position pos:line="198" pos:column="19"/></name><operator pos:line="198" pos:column="19">-&gt;<pos:position pos:line="198" pos:column="24"/></operator><name pos:line="198" pos:column="21">state<pos:position pos:line="198" pos:column="26"/></name><operator pos:line="198" pos:column="26">.<pos:position pos:line="198" pos:column="27"/></operator><name pos:line="198" pos:column="27">headerbuff<pos:position pos:line="198" pos:column="37"/></name></name> <operator pos:line="198" pos:column="38">=<pos:position pos:line="198" pos:column="39"/></operator> <name pos:line="198" pos:column="40">newbuff<pos:position pos:line="198" pos:column="47"/></name></expr>;<pos:position pos:line="198" pos:column="48"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="199" pos:column="15">k<pos:position pos:line="199" pos:column="16"/></name><operator pos:line="199" pos:column="16">-&gt;<pos:position pos:line="199" pos:column="21"/></operator><name pos:line="199" pos:column="18">hbufp<pos:position pos:line="199" pos:column="23"/></name></name> <operator pos:line="199" pos:column="24">=<pos:position pos:line="199" pos:column="25"/></operator> <name><name pos:line="199" pos:column="26">data<pos:position pos:line="199" pos:column="30"/></name><operator pos:line="199" pos:column="30">-&gt;<pos:position pos:line="199" pos:column="35"/></operator><name pos:line="199" pos:column="32">state<pos:position pos:line="199" pos:column="37"/></name><operator pos:line="199" pos:column="37">.<pos:position pos:line="199" pos:column="38"/></operator><name pos:line="199" pos:column="38">headerbuff<pos:position pos:line="199" pos:column="48"/></name></name> <operator pos:line="199" pos:column="49">+<pos:position pos:line="199" pos:column="50"/></operator> <name pos:line="199" pos:column="51">hbufp_index<pos:position pos:line="199" pos:column="62"/></name></expr>;<pos:position pos:line="199" pos:column="63"/></expr_stmt>
            }<pos:position pos:line="200" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="202" pos:column="13">/* copy to end of line */</comment>
            <expr_stmt><expr><call><name pos:line="203" pos:column="13">memcpy<pos:position pos:line="203" pos:column="19"/></name><argument_list pos:line="203" pos:column="19">(<argument><expr><name><name pos:line="203" pos:column="20">k<pos:position pos:line="203" pos:column="21"/></name><operator pos:line="203" pos:column="21">-&gt;<pos:position pos:line="203" pos:column="26"/></operator><name pos:line="203" pos:column="23">hbufp<pos:position pos:line="203" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="30">k<pos:position pos:line="203" pos:column="31"/></name><operator pos:line="203" pos:column="31">-&gt;<pos:position pos:line="203" pos:column="36"/></operator><name pos:line="203" pos:column="33">str_start<pos:position pos:line="203" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="44">full_length<pos:position pos:line="203" pos:column="55"/></name></expr></argument>)<pos:position pos:line="203" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="204" pos:column="13">k<pos:position pos:line="204" pos:column="14"/></name><operator pos:line="204" pos:column="14">-&gt;<pos:position pos:line="204" pos:column="19"/></operator><name pos:line="204" pos:column="16">hbufp<pos:position pos:line="204" pos:column="21"/></name></name> <operator pos:line="204" pos:column="22">+=<pos:position pos:line="204" pos:column="24"/></operator> <name pos:line="204" pos:column="25">full_length<pos:position pos:line="204" pos:column="36"/></name></expr>;<pos:position pos:line="204" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="205" pos:column="13">k<pos:position pos:line="205" pos:column="14"/></name><operator pos:line="205" pos:column="14">-&gt;<pos:position pos:line="205" pos:column="19"/></operator><name pos:line="205" pos:column="16">hbuflen<pos:position pos:line="205" pos:column="23"/></name></name> <operator pos:line="205" pos:column="24">+=<pos:position pos:line="205" pos:column="26"/></operator> <name pos:line="205" pos:column="27">full_length<pos:position pos:line="205" pos:column="38"/></name></expr>;<pos:position pos:line="205" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="206" pos:column="13">*<pos:position pos:line="206" pos:column="14"/></operator><name><name pos:line="206" pos:column="14">k<pos:position pos:line="206" pos:column="15"/></name><operator pos:line="206" pos:column="15">-&gt;<pos:position pos:line="206" pos:column="20"/></operator><name pos:line="206" pos:column="17">hbufp<pos:position pos:line="206" pos:column="22"/></name></name> <operator pos:line="206" pos:column="23">=<pos:position pos:line="206" pos:column="24"/></operator> <literal type="number" pos:line="206" pos:column="25">0<pos:position pos:line="206" pos:column="26"/></literal></expr>;<pos:position pos:line="206" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="207" pos:column="13">k<pos:position pos:line="207" pos:column="14"/></name><operator pos:line="207" pos:column="14">-&gt;<pos:position pos:line="207" pos:column="19"/></operator><name pos:line="207" pos:column="16">end_ptr<pos:position pos:line="207" pos:column="23"/></name></name> <operator pos:line="207" pos:column="24">=<pos:position pos:line="207" pos:column="25"/></operator> <name><name pos:line="207" pos:column="26">k<pos:position pos:line="207" pos:column="27"/></name><operator pos:line="207" pos:column="27">-&gt;<pos:position pos:line="207" pos:column="32"/></operator><name pos:line="207" pos:column="29">hbufp<pos:position pos:line="207" pos:column="34"/></name></name></expr>;<pos:position pos:line="207" pos:column="35"/></expr_stmt>

            <expr_stmt><expr><name><name pos:line="209" pos:column="13">k<pos:position pos:line="209" pos:column="14"/></name><operator pos:line="209" pos:column="14">-&gt;<pos:position pos:line="209" pos:column="19"/></operator><name pos:line="209" pos:column="16">p<pos:position pos:line="209" pos:column="17"/></name></name> <operator pos:line="209" pos:column="18">=<pos:position pos:line="209" pos:column="19"/></operator> <name><name pos:line="209" pos:column="20">data<pos:position pos:line="209" pos:column="24"/></name><operator pos:line="209" pos:column="24">-&gt;<pos:position pos:line="209" pos:column="29"/></operator><name pos:line="209" pos:column="26">state<pos:position pos:line="209" pos:column="31"/></name><operator pos:line="209" pos:column="31">.<pos:position pos:line="209" pos:column="32"/></operator><name pos:line="209" pos:column="32">headerbuff<pos:position pos:line="209" pos:column="42"/></name></name></expr>;<pos:position pos:line="209" pos:column="43"/></expr_stmt>

            <comment type="block" format="doxygen" pos:line="211" pos:column="13">/****
             * We now have a FULL header line that p points to
             *****/</comment>

            <if pos:line="215" pos:column="13">if<condition pos:line="215" pos:column="15">(<expr><operator pos:line="215" pos:column="16">!<pos:position pos:line="215" pos:column="17"/></operator><name><name pos:line="215" pos:column="17">k<pos:position pos:line="215" pos:column="18"/></name><operator pos:line="215" pos:column="18">-&gt;<pos:position pos:line="215" pos:column="23"/></operator><name pos:line="215" pos:column="20">headerline<pos:position pos:line="215" pos:column="30"/></name></name></expr>)<pos:position pos:line="215" pos:column="31"/></condition><then pos:line="215" pos:column="31"> <block pos:line="215" pos:column="32">{
              <comment type="block" pos:line="216" pos:column="15">/* the first read header */</comment>
              <if pos:line="217" pos:column="15">if<condition pos:line="217" pos:column="17">(<expr><operator pos:line="217" pos:column="18">(<pos:position pos:line="217" pos:column="19"/></operator><name><name pos:line="217" pos:column="19">k<pos:position pos:line="217" pos:column="20"/></name><operator pos:line="217" pos:column="20">-&gt;<pos:position pos:line="217" pos:column="25"/></operator><name pos:line="217" pos:column="22">hbuflen<pos:position pos:line="217" pos:column="29"/></name></name><operator pos:line="217" pos:column="29">&gt;<pos:position pos:line="217" pos:column="33"/></operator><literal type="number" pos:line="217" pos:column="30">5<pos:position pos:line="217" pos:column="31"/></literal><operator pos:line="217" pos:column="31">)<pos:position pos:line="217" pos:column="32"/></operator> <operator pos:line="217" pos:column="33">&amp;&amp;<pos:position pos:line="217" pos:column="43"/></operator>
                 <operator pos:line="218" pos:column="18">!<pos:position pos:line="218" pos:column="19"/></operator><call><name pos:line="218" pos:column="19">checkhttpprefix<pos:position pos:line="218" pos:column="34"/></name><argument_list pos:line="218" pos:column="34">(<argument><expr><name pos:line="218" pos:column="35">data<pos:position pos:line="218" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="218" pos:column="41">data<pos:position pos:line="218" pos:column="45"/></name><operator pos:line="218" pos:column="45">-&gt;<pos:position pos:line="218" pos:column="50"/></operator><name pos:line="218" pos:column="47">state<pos:position pos:line="218" pos:column="52"/></name><operator pos:line="218" pos:column="52">.<pos:position pos:line="218" pos:column="53"/></operator><name pos:line="218" pos:column="53">headerbuff<pos:position pos:line="218" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="218" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="218" pos:column="65"/></condition><then pos:line="218" pos:column="65"> <block pos:line="218" pos:column="66">{
                <comment type="block" pos:line="219" pos:column="17">/* this is not the beginning of a HTTP first header line */</comment>
                <expr_stmt><expr><name><name pos:line="220" pos:column="17">k<pos:position pos:line="220" pos:column="18"/></name><operator pos:line="220" pos:column="18">-&gt;<pos:position pos:line="220" pos:column="23"/></operator><name pos:line="220" pos:column="20">header<pos:position pos:line="220" pos:column="26"/></name></name> <operator pos:line="220" pos:column="27">=<pos:position pos:line="220" pos:column="28"/></operator> <name pos:line="220" pos:column="29">FALSE<pos:position pos:line="220" pos:column="34"/></name></expr>;<pos:position pos:line="220" pos:column="35"/></expr_stmt>
                <if pos:line="221" pos:column="17">if<condition pos:line="221" pos:column="19">(<expr><name pos:line="221" pos:column="20">nread<pos:position pos:line="221" pos:column="25"/></name></expr>)<pos:position pos:line="221" pos:column="26"/></condition><then pos:line="221" pos:column="26">
                  <comment type="block" pos:line="222" pos:column="19">/* since there's more, this is a partial bad header */</comment>
                  <block type="pseudo"><expr_stmt><expr><name><name pos:line="223" pos:column="19">k<pos:position pos:line="223" pos:column="20"/></name><operator pos:line="223" pos:column="20">-&gt;<pos:position pos:line="223" pos:column="25"/></operator><name pos:line="223" pos:column="22">badheader<pos:position pos:line="223" pos:column="31"/></name></name> <operator pos:line="223" pos:column="32">=<pos:position pos:line="223" pos:column="33"/></operator> <name pos:line="223" pos:column="34">HEADER_PARTHEADER<pos:position pos:line="223" pos:column="51"/></name></expr>;<pos:position pos:line="223" pos:column="52"/></expr_stmt></block></then>
                <else pos:line="224" pos:column="17">else <block pos:line="224" pos:column="22">{
                  <comment type="block" pos:line="225" pos:column="19">/* this was all we read so its all a bad header */</comment>
                  <expr_stmt><expr><name><name pos:line="226" pos:column="19">k<pos:position pos:line="226" pos:column="20"/></name><operator pos:line="226" pos:column="20">-&gt;<pos:position pos:line="226" pos:column="25"/></operator><name pos:line="226" pos:column="22">badheader<pos:position pos:line="226" pos:column="31"/></name></name> <operator pos:line="226" pos:column="32">=<pos:position pos:line="226" pos:column="33"/></operator> <name pos:line="226" pos:column="34">HEADER_ALLBAD<pos:position pos:line="226" pos:column="47"/></name></expr>;<pos:position pos:line="226" pos:column="48"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="227" pos:column="19">nread<pos:position pos:line="227" pos:column="24"/></name> <operator pos:line="227" pos:column="25">=<pos:position pos:line="227" pos:column="26"/></operator> <operator pos:line="227" pos:column="27">(<pos:position pos:line="227" pos:column="28"/></operator><name pos:line="227" pos:column="28">ssize_t<pos:position pos:line="227" pos:column="35"/></name><operator pos:line="227" pos:column="35">)<pos:position pos:line="227" pos:column="36"/></operator><name pos:line="227" pos:column="36">rest_length<pos:position pos:line="227" pos:column="47"/></name></expr>;<pos:position pos:line="227" pos:column="48"/></expr_stmt>
                }<pos:position pos:line="228" pos:column="18"/></block></else></if>
                <break pos:line="229" pos:column="17">break;<pos:position pos:line="229" pos:column="23"/></break>
              }<pos:position pos:line="230" pos:column="16"/></block></then></if>
            }<pos:position pos:line="231" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="233" pos:column="13">/* headers are in network encoding so
               use 0x0a and 0x0d instead of '\n' and '\r' */</comment>
            <if pos:line="235" pos:column="13">if<condition pos:line="235" pos:column="15">(<expr><operator pos:line="235" pos:column="16">(<pos:position pos:line="235" pos:column="17"/></operator><literal type="number" pos:line="235" pos:column="17">0x0a<pos:position pos:line="235" pos:column="21"/></literal> <operator pos:line="235" pos:column="22">==<pos:position pos:line="235" pos:column="24"/></operator> <operator pos:line="235" pos:column="25">*<pos:position pos:line="235" pos:column="26"/></operator><name><name pos:line="235" pos:column="26">k<pos:position pos:line="235" pos:column="27"/></name><operator pos:line="235" pos:column="27">-&gt;<pos:position pos:line="235" pos:column="32"/></operator><name pos:line="235" pos:column="29">p<pos:position pos:line="235" pos:column="30"/></name></name><operator pos:line="235" pos:column="30">)<pos:position pos:line="235" pos:column="31"/></operator> <operator pos:line="235" pos:column="32">||<pos:position pos:line="235" pos:column="34"/></operator> <operator pos:line="235" pos:column="35">(<pos:position pos:line="235" pos:column="36"/></operator><literal type="number" pos:line="235" pos:column="36">0x0d<pos:position pos:line="235" pos:column="40"/></literal> <operator pos:line="235" pos:column="41">==<pos:position pos:line="235" pos:column="43"/></operator> <operator pos:line="235" pos:column="44">*<pos:position pos:line="235" pos:column="45"/></operator><name><name pos:line="235" pos:column="45">k<pos:position pos:line="235" pos:column="46"/></name><operator pos:line="235" pos:column="46">-&gt;<pos:position pos:line="235" pos:column="51"/></operator><name pos:line="235" pos:column="48">p<pos:position pos:line="235" pos:column="49"/></name></name><operator pos:line="235" pos:column="49">)<pos:position pos:line="235" pos:column="50"/></operator></expr>)<pos:position pos:line="235" pos:column="51"/></condition><then pos:line="235" pos:column="51"> <block pos:line="235" pos:column="52">{
              <decl_stmt><decl><type><name pos:line="236" pos:column="15">size_t<pos:position pos:line="236" pos:column="21"/></name></type> <name pos:line="236" pos:column="22">headerlen<pos:position pos:line="236" pos:column="31"/></name></decl>;<pos:position pos:line="236" pos:column="32"/></decl_stmt>
              <comment type="block" pos:line="237" pos:column="15">/* Zero-length header line means end of headers! */</comment>

<cpp:ifdef pos:line="239" pos:column="1">#<cpp:directive pos:line="239" pos:column="2">ifdef<pos:position pos:line="239" pos:column="7"/></cpp:directive> <name pos:line="239" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="239" pos:column="29"/></name></cpp:ifdef>
              <if pos:line="240" pos:column="15">if<condition pos:line="240" pos:column="17">(<expr><literal type="number" pos:line="240" pos:column="18">0x0d<pos:position pos:line="240" pos:column="22"/></literal> <operator pos:line="240" pos:column="23">==<pos:position pos:line="240" pos:column="25"/></operator> <operator pos:line="240" pos:column="26">*<pos:position pos:line="240" pos:column="27"/></operator><name><name pos:line="240" pos:column="27">k<pos:position pos:line="240" pos:column="28"/></name><operator pos:line="240" pos:column="28">-&gt;<pos:position pos:line="240" pos:column="33"/></operator><name pos:line="240" pos:column="30">p<pos:position pos:line="240" pos:column="31"/></name></name></expr>)<pos:position pos:line="240" pos:column="32"/></condition><then pos:line="240" pos:column="32"> <block pos:line="240" pos:column="33">{
                <expr_stmt><expr><operator pos:line="241" pos:column="17">*<pos:position pos:line="241" pos:column="18"/></operator><name><name pos:line="241" pos:column="18">k<pos:position pos:line="241" pos:column="19"/></name><operator pos:line="241" pos:column="19">-&gt;<pos:position pos:line="241" pos:column="24"/></operator><name pos:line="241" pos:column="21">p<pos:position pos:line="241" pos:column="22"/></name></name> <operator pos:line="241" pos:column="23">=<pos:position pos:line="241" pos:column="24"/></operator> <literal type="char" pos:line="241" pos:column="25">'\r'<pos:position pos:line="241" pos:column="29"/></literal></expr>;<pos:position pos:line="241" pos:column="30"/></expr_stmt> <comment type="block" pos:line="241" pos:column="31">/* replace with CR in host encoding */</comment>
                <expr_stmt><expr><name><name pos:line="242" pos:column="17">k<pos:position pos:line="242" pos:column="18"/></name><operator pos:line="242" pos:column="18">-&gt;<pos:position pos:line="242" pos:column="23"/></operator><name pos:line="242" pos:column="20">p<pos:position pos:line="242" pos:column="21"/></name></name><operator pos:line="242" pos:column="21">++<pos:position pos:line="242" pos:column="23"/></operator></expr>;<pos:position pos:line="242" pos:column="24"/></expr_stmt>       <comment type="block" pos:line="242" pos:column="31">/* pass the CR byte */</comment>
              }<pos:position pos:line="243" pos:column="16"/></block></then></if>
              <if pos:line="244" pos:column="15">if<condition pos:line="244" pos:column="17">(<expr><literal type="number" pos:line="244" pos:column="18">0x0a<pos:position pos:line="244" pos:column="22"/></literal> <operator pos:line="244" pos:column="23">==<pos:position pos:line="244" pos:column="25"/></operator> <operator pos:line="244" pos:column="26">*<pos:position pos:line="244" pos:column="27"/></operator><name><name pos:line="244" pos:column="27">k<pos:position pos:line="244" pos:column="28"/></name><operator pos:line="244" pos:column="28">-&gt;<pos:position pos:line="244" pos:column="33"/></operator><name pos:line="244" pos:column="30">p<pos:position pos:line="244" pos:column="31"/></name></name></expr>)<pos:position pos:line="244" pos:column="32"/></condition><then pos:line="244" pos:column="32"> <block pos:line="244" pos:column="33">{
                <expr_stmt><expr><operator pos:line="245" pos:column="17">*<pos:position pos:line="245" pos:column="18"/></operator><name><name pos:line="245" pos:column="18">k<pos:position pos:line="245" pos:column="19"/></name><operator pos:line="245" pos:column="19">-&gt;<pos:position pos:line="245" pos:column="24"/></operator><name pos:line="245" pos:column="21">p<pos:position pos:line="245" pos:column="22"/></name></name> <operator pos:line="245" pos:column="23">=<pos:position pos:line="245" pos:column="24"/></operator> <literal type="char" pos:line="245" pos:column="25">'\n'<pos:position pos:line="245" pos:column="29"/></literal></expr>;<pos:position pos:line="245" pos:column="30"/></expr_stmt> <comment type="block" pos:line="245" pos:column="31">/* replace with LF in host encoding */</comment>
                <expr_stmt><expr><name><name pos:line="246" pos:column="17">k<pos:position pos:line="246" pos:column="18"/></name><operator pos:line="246" pos:column="18">-&gt;<pos:position pos:line="246" pos:column="23"/></operator><name pos:line="246" pos:column="20">p<pos:position pos:line="246" pos:column="21"/></name></name><operator pos:line="246" pos:column="21">++<pos:position pos:line="246" pos:column="23"/></operator></expr>;<pos:position pos:line="246" pos:column="24"/></expr_stmt>       <comment type="block" pos:line="246" pos:column="31">/* pass the LF byte */</comment>
              }<pos:position pos:line="247" pos:column="16"/></block></then></if>
<cpp:else pos:line="248" pos:column="1">#<cpp:directive pos:line="248" pos:column="2">else<pos:position pos:line="248" pos:column="6"/></cpp:directive></cpp:else>
              <if pos:line="249" pos:column="15">if<condition pos:line="249" pos:column="17">(<expr><literal type="char" pos:line="249" pos:column="18">'\r'<pos:position pos:line="249" pos:column="22"/></literal> <operator pos:line="249" pos:column="23">==<pos:position pos:line="249" pos:column="25"/></operator> <operator pos:line="249" pos:column="26">*<pos:position pos:line="249" pos:column="27"/></operator><name><name pos:line="249" pos:column="27">k<pos:position pos:line="249" pos:column="28"/></name><operator pos:line="249" pos:column="28">-&gt;<pos:position pos:line="249" pos:column="33"/></operator><name pos:line="249" pos:column="30">p<pos:position pos:line="249" pos:column="31"/></name></name></expr>)<pos:position pos:line="249" pos:column="32"/></condition><then pos:line="249" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="250" pos:column="17">k<pos:position pos:line="250" pos:column="18"/></name><operator pos:line="250" pos:column="18">-&gt;<pos:position pos:line="250" pos:column="23"/></operator><name pos:line="250" pos:column="20">p<pos:position pos:line="250" pos:column="21"/></name></name><operator pos:line="250" pos:column="21">++<pos:position pos:line="250" pos:column="23"/></operator></expr>;<pos:position pos:line="250" pos:column="24"/></expr_stmt></block></then></if> <comment type="block" pos:line="250" pos:column="25">/* pass the \r byte */</comment>
              <if pos:line="251" pos:column="15">if<condition pos:line="251" pos:column="17">(<expr><literal type="char" pos:line="251" pos:column="18">'\n'<pos:position pos:line="251" pos:column="22"/></literal> <operator pos:line="251" pos:column="23">==<pos:position pos:line="251" pos:column="25"/></operator> <operator pos:line="251" pos:column="26">*<pos:position pos:line="251" pos:column="27"/></operator><name><name pos:line="251" pos:column="27">k<pos:position pos:line="251" pos:column="28"/></name><operator pos:line="251" pos:column="28">-&gt;<pos:position pos:line="251" pos:column="33"/></operator><name pos:line="251" pos:column="30">p<pos:position pos:line="251" pos:column="31"/></name></name></expr>)<pos:position pos:line="251" pos:column="32"/></condition><then pos:line="251" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="252" pos:column="17">k<pos:position pos:line="252" pos:column="18"/></name><operator pos:line="252" pos:column="18">-&gt;<pos:position pos:line="252" pos:column="23"/></operator><name pos:line="252" pos:column="20">p<pos:position pos:line="252" pos:column="21"/></name></name><operator pos:line="252" pos:column="21">++<pos:position pos:line="252" pos:column="23"/></operator></expr>;<pos:position pos:line="252" pos:column="24"/></expr_stmt></block></then></if> <comment type="block" pos:line="252" pos:column="25">/* pass the \n byte */</comment>
<cpp:endif pos:line="253" pos:column="1">#<cpp:directive pos:line="253" pos:column="2">endif<pos:position pos:line="253" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="253" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

              <if pos:line="255" pos:column="15">if<condition pos:line="255" pos:column="17">(<expr><literal type="number" pos:line="255" pos:column="18">100<pos:position pos:line="255" pos:column="21"/></literal> <operator pos:line="255" pos:column="22">==<pos:position pos:line="255" pos:column="24"/></operator> <name><name pos:line="255" pos:column="25">k<pos:position pos:line="255" pos:column="26"/></name><operator pos:line="255" pos:column="26">-&gt;<pos:position pos:line="255" pos:column="31"/></operator><name pos:line="255" pos:column="28">httpcode<pos:position pos:line="255" pos:column="36"/></name></name></expr>)<pos:position pos:line="255" pos:column="37"/></condition><then pos:line="255" pos:column="37"> <block pos:line="255" pos:column="38">{
                <comment type="block" pos:line="256" pos:column="17">/*
                 * We have made a HTTP PUT or POST and this is 1.1-lingo
                 * that tells us that the server is OK with this and ready
                 * to receive the data.
                 * However, we'll get more headers now so we must get
                 * back into the header-parsing state!
                 */</comment>
                <expr_stmt><expr><name><name pos:line="263" pos:column="17">k<pos:position pos:line="263" pos:column="18"/></name><operator pos:line="263" pos:column="18">-&gt;<pos:position pos:line="263" pos:column="23"/></operator><name pos:line="263" pos:column="20">header<pos:position pos:line="263" pos:column="26"/></name></name> <operator pos:line="263" pos:column="27">=<pos:position pos:line="263" pos:column="28"/></operator> <name pos:line="263" pos:column="29">TRUE<pos:position pos:line="263" pos:column="33"/></name></expr>;<pos:position pos:line="263" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="264" pos:column="17">k<pos:position pos:line="264" pos:column="18"/></name><operator pos:line="264" pos:column="18">-&gt;<pos:position pos:line="264" pos:column="23"/></operator><name pos:line="264" pos:column="20">headerline<pos:position pos:line="264" pos:column="30"/></name></name> <operator pos:line="264" pos:column="31">=<pos:position pos:line="264" pos:column="32"/></operator> <literal type="number" pos:line="264" pos:column="33">0<pos:position pos:line="264" pos:column="34"/></literal></expr>;<pos:position pos:line="264" pos:column="35"/></expr_stmt> <comment type="block" pos:line="264" pos:column="36">/* restart the header line counter */</comment>

                <comment type="block" pos:line="266" pos:column="17">/* if we did wait for this do enable write now! */</comment>
                <if pos:line="267" pos:column="17">if<condition pos:line="267" pos:column="19">(<expr><name><name pos:line="267" pos:column="20">k<pos:position pos:line="267" pos:column="21"/></name><operator pos:line="267" pos:column="21">-&gt;<pos:position pos:line="267" pos:column="26"/></operator><name pos:line="267" pos:column="23">exp100<pos:position pos:line="267" pos:column="29"/></name></name></expr>)<pos:position pos:line="267" pos:column="30"/></condition><then pos:line="267" pos:column="30"> <block pos:line="267" pos:column="31">{
                  <expr_stmt><expr><name><name pos:line="268" pos:column="19">k<pos:position pos:line="268" pos:column="20"/></name><operator pos:line="268" pos:column="20">-&gt;<pos:position pos:line="268" pos:column="25"/></operator><name pos:line="268" pos:column="22">exp100<pos:position pos:line="268" pos:column="28"/></name></name> <operator pos:line="268" pos:column="29">=<pos:position pos:line="268" pos:column="30"/></operator> <name pos:line="268" pos:column="31">EXP100_SEND_DATA<pos:position pos:line="268" pos:column="47"/></name></expr>;<pos:position pos:line="268" pos:column="48"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="269" pos:column="19">k<pos:position pos:line="269" pos:column="20"/></name><operator pos:line="269" pos:column="20">-&gt;<pos:position pos:line="269" pos:column="25"/></operator><name pos:line="269" pos:column="22">keepon<pos:position pos:line="269" pos:column="28"/></name></name> <operator pos:line="269" pos:column="29">|=<pos:position pos:line="269" pos:column="31"/></operator> <name pos:line="269" pos:column="32">KEEP_WRITE<pos:position pos:line="269" pos:column="42"/></name></expr>;<pos:position pos:line="269" pos:column="43"/></expr_stmt>
                }<pos:position pos:line="270" pos:column="18"/></block></then></if>
              }<pos:position pos:line="271" pos:column="16"/></block></then>
              <else pos:line="272" pos:column="15">else <block pos:line="272" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="273" pos:column="17">k<pos:position pos:line="273" pos:column="18"/></name><operator pos:line="273" pos:column="18">-&gt;<pos:position pos:line="273" pos:column="23"/></operator><name pos:line="273" pos:column="20">header<pos:position pos:line="273" pos:column="26"/></name></name> <operator pos:line="273" pos:column="27">=<pos:position pos:line="273" pos:column="28"/></operator> <name pos:line="273" pos:column="29">FALSE<pos:position pos:line="273" pos:column="34"/></name></expr>;<pos:position pos:line="273" pos:column="35"/></expr_stmt> <comment type="block" pos:line="273" pos:column="36">/* no more header to parse! */</comment>

                <if pos:line="275" pos:column="17">if<condition pos:line="275" pos:column="19">(<expr><operator pos:line="275" pos:column="20">(<pos:position pos:line="275" pos:column="21"/></operator><name><name pos:line="275" pos:column="21">k<pos:position pos:line="275" pos:column="22"/></name><operator pos:line="275" pos:column="22">-&gt;<pos:position pos:line="275" pos:column="27"/></operator><name pos:line="275" pos:column="24">size<pos:position pos:line="275" pos:column="28"/></name></name> <operator pos:line="275" pos:column="29">==<pos:position pos:line="275" pos:column="31"/></operator> <operator pos:line="275" pos:column="32">-<pos:position pos:line="275" pos:column="33"/></operator><literal type="number" pos:line="275" pos:column="33">1<pos:position pos:line="275" pos:column="34"/></literal><operator pos:line="275" pos:column="34">)<pos:position pos:line="275" pos:column="35"/></operator> <operator pos:line="275" pos:column="36">&amp;&amp;<pos:position pos:line="275" pos:column="46"/></operator> <operator pos:line="275" pos:column="39">!<pos:position pos:line="275" pos:column="40"/></operator><name><name pos:line="275" pos:column="40">k<pos:position pos:line="275" pos:column="41"/></name><operator pos:line="275" pos:column="41">-&gt;<pos:position pos:line="275" pos:column="46"/></operator><name pos:line="275" pos:column="43">chunk<pos:position pos:line="275" pos:column="48"/></name></name> <operator pos:line="275" pos:column="49">&amp;&amp;<pos:position pos:line="275" pos:column="59"/></operator> <operator pos:line="275" pos:column="52">!<pos:position pos:line="275" pos:column="53"/></operator><name><name pos:line="275" pos:column="53">conn<pos:position pos:line="275" pos:column="57"/></name><operator pos:line="275" pos:column="57">-&gt;<pos:position pos:line="275" pos:column="62"/></operator><name pos:line="275" pos:column="59">bits<pos:position pos:line="275" pos:column="63"/></name><operator pos:line="275" pos:column="63">.<pos:position pos:line="275" pos:column="64"/></operator><name pos:line="275" pos:column="64">close<pos:position pos:line="275" pos:column="69"/></name></name> <operator pos:line="275" pos:column="70">&amp;&amp;<pos:position pos:line="275" pos:column="80"/></operator>
                   <operator pos:line="276" pos:column="20">(<pos:position pos:line="276" pos:column="21"/></operator><name><name pos:line="276" pos:column="21">k<pos:position pos:line="276" pos:column="22"/></name><operator pos:line="276" pos:column="22">-&gt;<pos:position pos:line="276" pos:column="27"/></operator><name pos:line="276" pos:column="24">httpversion<pos:position pos:line="276" pos:column="35"/></name></name> <operator pos:line="276" pos:column="36">&gt;=<pos:position pos:line="276" pos:column="41"/></operator> <literal type="number" pos:line="276" pos:column="39">11<pos:position pos:line="276" pos:column="41"/></literal><operator pos:line="276" pos:column="41">)<pos:position pos:line="276" pos:column="42"/></operator></expr> )<pos:position pos:line="276" pos:column="44"/></condition><then pos:line="276" pos:column="44"> <block pos:line="276" pos:column="45">{
                  <comment type="block" pos:line="277" pos:column="19">/* On HTTP 1.1, when connection is not to get closed, but no
                     Content-Length nor Content-Encoding chunked have been
                     received, according to RFC2616 section 4.4 point 5, we
                     assume that the server will close the connection to
                     signal the end of the document. */</comment>
                  <expr_stmt><expr><call><name pos:line="282" pos:column="19">infof<pos:position pos:line="282" pos:column="24"/></name><argument_list pos:line="282" pos:column="24">(<argument><expr><name pos:line="282" pos:column="25">data<pos:position pos:line="282" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="282" pos:column="31">"no chunk, no close, no size. Assume close to "<pos:position pos:line="282" pos:column="78"/></literal>
                        <literal type="string" pos:line="283" pos:column="25">"signal end\n"<pos:position pos:line="283" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="283" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="41"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="284" pos:column="19">conn<pos:position pos:line="284" pos:column="23"/></name><operator pos:line="284" pos:column="23">-&gt;<pos:position pos:line="284" pos:column="28"/></operator><name pos:line="284" pos:column="25">bits<pos:position pos:line="284" pos:column="29"/></name><operator pos:line="284" pos:column="29">.<pos:position pos:line="284" pos:column="30"/></operator><name pos:line="284" pos:column="30">close<pos:position pos:line="284" pos:column="35"/></name></name> <operator pos:line="284" pos:column="36">=<pos:position pos:line="284" pos:column="37"/></operator> <name pos:line="284" pos:column="38">TRUE<pos:position pos:line="284" pos:column="42"/></name></expr>;<pos:position pos:line="284" pos:column="43"/></expr_stmt>
                }<pos:position pos:line="285" pos:column="18"/></block></then></if>
              }<pos:position pos:line="286" pos:column="16"/></block></else></if>

              <if pos:line="288" pos:column="15">if<condition pos:line="288" pos:column="17">(<expr><literal type="number" pos:line="288" pos:column="18">417<pos:position pos:line="288" pos:column="21"/></literal> <operator pos:line="288" pos:column="22">==<pos:position pos:line="288" pos:column="24"/></operator> <name><name pos:line="288" pos:column="25">k<pos:position pos:line="288" pos:column="26"/></name><operator pos:line="288" pos:column="26">-&gt;<pos:position pos:line="288" pos:column="31"/></operator><name pos:line="288" pos:column="28">httpcode<pos:position pos:line="288" pos:column="36"/></name></name></expr>)<pos:position pos:line="288" pos:column="37"/></condition><then pos:line="288" pos:column="37"> <block pos:line="288" pos:column="38">{
                <comment type="block" pos:line="289" pos:column="17">/*
                 * we got: "417 Expectation Failed" this means:
                 * we have made a HTTP call and our Expect Header
                 * seems to cause a problem =&gt; abort the write operations
                 * (or prevent them from starting).
                 */</comment>
                <expr_stmt><expr><name><name pos:line="295" pos:column="17">k<pos:position pos:line="295" pos:column="18"/></name><operator pos:line="295" pos:column="18">-&gt;<pos:position pos:line="295" pos:column="23"/></operator><name pos:line="295" pos:column="20">exp100<pos:position pos:line="295" pos:column="26"/></name></name> <operator pos:line="295" pos:column="27">=<pos:position pos:line="295" pos:column="28"/></operator> <name pos:line="295" pos:column="29">EXP100_FAILED<pos:position pos:line="295" pos:column="42"/></name></expr>;<pos:position pos:line="295" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="296" pos:column="17">k<pos:position pos:line="296" pos:column="18"/></name><operator pos:line="296" pos:column="18">-&gt;<pos:position pos:line="296" pos:column="23"/></operator><name pos:line="296" pos:column="20">keepon<pos:position pos:line="296" pos:column="26"/></name></name> <operator pos:line="296" pos:column="27">&amp;=<pos:position pos:line="296" pos:column="33"/></operator> <operator pos:line="296" pos:column="30">~<pos:position pos:line="296" pos:column="31"/></operator><name pos:line="296" pos:column="31">KEEP_WRITE<pos:position pos:line="296" pos:column="41"/></name></expr>;<pos:position pos:line="296" pos:column="42"/></expr_stmt>
              }<pos:position pos:line="297" pos:column="16"/></block></then></if>

<cpp:ifndef pos:line="299" pos:column="1">#<cpp:directive pos:line="299" pos:column="2">ifndef<pos:position pos:line="299" pos:column="8"/></cpp:directive> <name pos:line="299" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="299" pos:column="26"/></name></cpp:ifndef>
              <comment type="block" pos:line="300" pos:column="15">/*
               * When all the headers have been parsed, see if we should give
               * up and return an error.
               */</comment>
              <if pos:line="304" pos:column="15">if<condition pos:line="304" pos:column="17">(<expr><call><name pos:line="304" pos:column="18">Curl_http_should_fail<pos:position pos:line="304" pos:column="39"/></name><argument_list pos:line="304" pos:column="39">(<argument><expr><name pos:line="304" pos:column="40">conn<pos:position pos:line="304" pos:column="44"/></name></expr></argument>)<pos:position pos:line="304" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="304" pos:column="46"/></condition><then pos:line="304" pos:column="46"> <block pos:line="304" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="305" pos:column="17">failf<pos:position pos:line="305" pos:column="22"/></name> <argument_list pos:line="305" pos:column="23">(<argument><expr><name pos:line="305" pos:column="24">data<pos:position pos:line="305" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="305" pos:column="30">"The requested URL returned error: %d"<pos:position pos:line="305" pos:column="68"/></literal></expr></argument>,
                       <argument><expr><name><name pos:line="306" pos:column="24">k<pos:position pos:line="306" pos:column="25"/></name><operator pos:line="306" pos:column="25">-&gt;<pos:position pos:line="306" pos:column="30"/></operator><name pos:line="306" pos:column="27">httpcode<pos:position pos:line="306" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="306" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="37"/></expr_stmt>
                <return pos:line="307" pos:column="17">return <expr><name pos:line="307" pos:column="24">CURLE_HTTP_RETURNED_ERROR<pos:position pos:line="307" pos:column="49"/></name></expr>;<pos:position pos:line="307" pos:column="50"/></return>
              }<pos:position pos:line="308" pos:column="16"/></block></then></if>
<cpp:endif pos:line="309" pos:column="1">#<cpp:directive pos:line="309" pos:column="2">endif<pos:position pos:line="309" pos:column="7"/></cpp:directive></cpp:endif>   <comment type="block" pos:line="309" pos:column="10">/* CURL_DISABLE_HTTP */</comment>

              <comment type="block" pos:line="311" pos:column="15">/* now, only output this if the header AND body are requested:
               */</comment>
              <expr_stmt><expr><name pos:line="313" pos:column="15">writetype<pos:position pos:line="313" pos:column="24"/></name> <operator pos:line="313" pos:column="25">=<pos:position pos:line="313" pos:column="26"/></operator> <name pos:line="313" pos:column="27">CLIENTWRITE_HEADER<pos:position pos:line="313" pos:column="45"/></name></expr>;<pos:position pos:line="313" pos:column="46"/></expr_stmt>
              <if pos:line="314" pos:column="15">if<condition pos:line="314" pos:column="17">(<expr><name><name pos:line="314" pos:column="18">data<pos:position pos:line="314" pos:column="22"/></name><operator pos:line="314" pos:column="22">-&gt;<pos:position pos:line="314" pos:column="27"/></operator><name pos:line="314" pos:column="24">set<pos:position pos:line="314" pos:column="27"/></name><operator pos:line="314" pos:column="27">.<pos:position pos:line="314" pos:column="28"/></operator><name pos:line="314" pos:column="28">include_header<pos:position pos:line="314" pos:column="42"/></name></name></expr>)<pos:position pos:line="314" pos:column="43"/></condition><then pos:line="314" pos:column="43">
                <block type="pseudo"><expr_stmt><expr><name pos:line="315" pos:column="17">writetype<pos:position pos:line="315" pos:column="26"/></name> <operator pos:line="315" pos:column="27">|=<pos:position pos:line="315" pos:column="29"/></operator> <name pos:line="315" pos:column="30">CLIENTWRITE_BODY<pos:position pos:line="315" pos:column="46"/></name></expr>;<pos:position pos:line="315" pos:column="47"/></expr_stmt></block></then></if>

              <expr_stmt><expr><name pos:line="317" pos:column="15">headerlen<pos:position pos:line="317" pos:column="24"/></name> <operator pos:line="317" pos:column="25">=<pos:position pos:line="317" pos:column="26"/></operator> <name><name pos:line="317" pos:column="27">k<pos:position pos:line="317" pos:column="28"/></name><operator pos:line="317" pos:column="28">-&gt;<pos:position pos:line="317" pos:column="33"/></operator><name pos:line="317" pos:column="30">p<pos:position pos:line="317" pos:column="31"/></name></name> <operator pos:line="317" pos:column="32">-<pos:position pos:line="317" pos:column="33"/></operator> <name><name pos:line="317" pos:column="34">data<pos:position pos:line="317" pos:column="38"/></name><operator pos:line="317" pos:column="38">-&gt;<pos:position pos:line="317" pos:column="43"/></operator><name pos:line="317" pos:column="40">state<pos:position pos:line="317" pos:column="45"/></name><operator pos:line="317" pos:column="45">.<pos:position pos:line="317" pos:column="46"/></operator><name pos:line="317" pos:column="46">headerbuff<pos:position pos:line="317" pos:column="56"/></name></name></expr>;<pos:position pos:line="317" pos:column="57"/></expr_stmt>

              <expr_stmt><expr><name pos:line="319" pos:column="15">result<pos:position pos:line="319" pos:column="21"/></name> <operator pos:line="319" pos:column="22">=<pos:position pos:line="319" pos:column="23"/></operator> <call><name pos:line="319" pos:column="24">Curl_client_write<pos:position pos:line="319" pos:column="41"/></name><argument_list pos:line="319" pos:column="41">(<argument><expr><name pos:line="319" pos:column="42">conn<pos:position pos:line="319" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="319" pos:column="48">writetype<pos:position pos:line="319" pos:column="57"/></name></expr></argument>,
                                         <argument><expr><name><name pos:line="320" pos:column="42">data<pos:position pos:line="320" pos:column="46"/></name><operator pos:line="320" pos:column="46">-&gt;<pos:position pos:line="320" pos:column="51"/></operator><name pos:line="320" pos:column="48">state<pos:position pos:line="320" pos:column="53"/></name><operator pos:line="320" pos:column="53">.<pos:position pos:line="320" pos:column="54"/></operator><name pos:line="320" pos:column="54">headerbuff<pos:position pos:line="320" pos:column="64"/></name></name></expr></argument>,
                                         <argument><expr><name pos:line="321" pos:column="42">headerlen<pos:position pos:line="321" pos:column="51"/></name></expr></argument>)<pos:position pos:line="321" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="53"/></expr_stmt>
              <if pos:line="322" pos:column="15">if<condition pos:line="322" pos:column="17">(<expr><name pos:line="322" pos:column="18">result<pos:position pos:line="322" pos:column="24"/></name></expr>)<pos:position pos:line="322" pos:column="25"/></condition><then pos:line="322" pos:column="25">
                <block type="pseudo"><return pos:line="323" pos:column="17">return <expr><name pos:line="323" pos:column="24">result<pos:position pos:line="323" pos:column="30"/></name></expr>;<pos:position pos:line="323" pos:column="31"/></return></block></then></if>

              <expr_stmt><expr><name><name pos:line="325" pos:column="15">data<pos:position pos:line="325" pos:column="19"/></name><operator pos:line="325" pos:column="19">-&gt;<pos:position pos:line="325" pos:column="24"/></operator><name pos:line="325" pos:column="21">info<pos:position pos:line="325" pos:column="25"/></name><operator pos:line="325" pos:column="25">.<pos:position pos:line="325" pos:column="26"/></operator><name pos:line="325" pos:column="26">header_size<pos:position pos:line="325" pos:column="37"/></name></name> <operator pos:line="325" pos:column="38">+=<pos:position pos:line="325" pos:column="40"/></operator> <operator pos:line="325" pos:column="41">(<pos:position pos:line="325" pos:column="42"/></operator><name pos:line="325" pos:column="42">long<pos:position pos:line="325" pos:column="46"/></name><operator pos:line="325" pos:column="46">)<pos:position pos:line="325" pos:column="47"/></operator><name pos:line="325" pos:column="47">headerlen<pos:position pos:line="325" pos:column="56"/></name></expr>;<pos:position pos:line="325" pos:column="57"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="326" pos:column="15">data<pos:position pos:line="326" pos:column="19"/></name><operator pos:line="326" pos:column="19">-&gt;<pos:position pos:line="326" pos:column="24"/></operator><name pos:line="326" pos:column="21">req<pos:position pos:line="326" pos:column="24"/></name><operator pos:line="326" pos:column="24">.<pos:position pos:line="326" pos:column="25"/></operator><name pos:line="326" pos:column="25">headerbytecount<pos:position pos:line="326" pos:column="40"/></name></name> <operator pos:line="326" pos:column="41">+=<pos:position pos:line="326" pos:column="43"/></operator> <operator pos:line="326" pos:column="44">(<pos:position pos:line="326" pos:column="45"/></operator><name pos:line="326" pos:column="45">long<pos:position pos:line="326" pos:column="49"/></name><operator pos:line="326" pos:column="49">)<pos:position pos:line="326" pos:column="50"/></operator><name pos:line="326" pos:column="50">headerlen<pos:position pos:line="326" pos:column="59"/></name></expr>;<pos:position pos:line="326" pos:column="60"/></expr_stmt>

              <expr_stmt><expr><name><name pos:line="328" pos:column="15">data<pos:position pos:line="328" pos:column="19"/></name><operator pos:line="328" pos:column="19">-&gt;<pos:position pos:line="328" pos:column="24"/></operator><name pos:line="328" pos:column="21">req<pos:position pos:line="328" pos:column="24"/></name><operator pos:line="328" pos:column="24">.<pos:position pos:line="328" pos:column="25"/></operator><name pos:line="328" pos:column="25">deductheadercount<pos:position pos:line="328" pos:column="42"/></name></name> <operator pos:line="328" pos:column="43">=<pos:position pos:line="328" pos:column="44"/></operator>
                <ternary><condition><expr><operator pos:line="329" pos:column="17">(<pos:position pos:line="329" pos:column="18"/></operator><literal type="number" pos:line="329" pos:column="18">100<pos:position pos:line="329" pos:column="21"/></literal> <operator pos:line="329" pos:column="22">==<pos:position pos:line="329" pos:column="24"/></operator> <name><name pos:line="329" pos:column="25">k<pos:position pos:line="329" pos:column="26"/></name><operator pos:line="329" pos:column="26">-&gt;<pos:position pos:line="329" pos:column="31"/></operator><name pos:line="329" pos:column="28">httpcode<pos:position pos:line="329" pos:column="36"/></name></name><operator pos:line="329" pos:column="36">)<pos:position pos:line="329" pos:column="37"/></operator></expr>?<pos:position pos:line="329" pos:column="38"/></condition><then><expr><name><name pos:line="329" pos:column="38">data<pos:position pos:line="329" pos:column="42"/></name><operator pos:line="329" pos:column="42">-&gt;<pos:position pos:line="329" pos:column="47"/></operator><name pos:line="329" pos:column="44">req<pos:position pos:line="329" pos:column="47"/></name><operator pos:line="329" pos:column="47">.<pos:position pos:line="329" pos:column="48"/></operator><name pos:line="329" pos:column="48">headerbytecount<pos:position pos:line="329" pos:column="63"/></name></name></expr></then><else pos:line="329" pos:column="63">:<expr><literal type="number" pos:line="329" pos:column="64">0<pos:position pos:line="329" pos:column="65"/></literal></expr></else></ternary></expr>;<pos:position pos:line="329" pos:column="66"/></expr_stmt>

              <if pos:line="331" pos:column="15">if<condition pos:line="331" pos:column="17">(<expr><name><name pos:line="331" pos:column="18">data<pos:position pos:line="331" pos:column="22"/></name><operator pos:line="331" pos:column="22">-&gt;<pos:position pos:line="331" pos:column="27"/></operator><name pos:line="331" pos:column="24">state<pos:position pos:line="331" pos:column="29"/></name><operator pos:line="331" pos:column="29">.<pos:position pos:line="331" pos:column="30"/></operator><name pos:line="331" pos:column="30">resume_from<pos:position pos:line="331" pos:column="41"/></name></name> <operator pos:line="331" pos:column="42">&amp;&amp;<pos:position pos:line="331" pos:column="52"/></operator>
                  <operator pos:line="332" pos:column="19">(<pos:position pos:line="332" pos:column="20"/></operator><name><name pos:line="332" pos:column="20">data<pos:position pos:line="332" pos:column="24"/></name><operator pos:line="332" pos:column="24">-&gt;<pos:position pos:line="332" pos:column="29"/></operator><name pos:line="332" pos:column="26">set<pos:position pos:line="332" pos:column="29"/></name><operator pos:line="332" pos:column="29">.<pos:position pos:line="332" pos:column="30"/></operator><name pos:line="332" pos:column="30">httpreq<pos:position pos:line="332" pos:column="37"/></name></name><operator pos:line="332" pos:column="37">==<pos:position pos:line="332" pos:column="39"/></operator><name pos:line="332" pos:column="39">HTTPREQ_GET<pos:position pos:line="332" pos:column="50"/></name><operator pos:line="332" pos:column="50">)<pos:position pos:line="332" pos:column="51"/></operator> <operator pos:line="332" pos:column="52">&amp;&amp;<pos:position pos:line="332" pos:column="62"/></operator>
                  <operator pos:line="333" pos:column="19">(<pos:position pos:line="333" pos:column="20"/></operator><name><name pos:line="333" pos:column="20">k<pos:position pos:line="333" pos:column="21"/></name><operator pos:line="333" pos:column="21">-&gt;<pos:position pos:line="333" pos:column="26"/></operator><name pos:line="333" pos:column="23">httpcode<pos:position pos:line="333" pos:column="31"/></name></name> <operator pos:line="333" pos:column="32">==<pos:position pos:line="333" pos:column="34"/></operator> <literal type="number" pos:line="333" pos:column="35">416<pos:position pos:line="333" pos:column="38"/></literal><operator pos:line="333" pos:column="38">)<pos:position pos:line="333" pos:column="39"/></operator></expr>)<pos:position pos:line="333" pos:column="40"/></condition><then pos:line="333" pos:column="40"> <block pos:line="333" pos:column="41">{
                <comment type="block" pos:line="334" pos:column="17">/* "Requested Range Not Satisfiable" */</comment>
                <expr_stmt><expr><name pos:line="335" pos:column="17">stop_reading<pos:position pos:line="335" pos:column="29"/></name> <operator pos:line="335" pos:column="30">=<pos:position pos:line="335" pos:column="31"/></operator> <name pos:line="335" pos:column="32">TRUE<pos:position pos:line="335" pos:column="36"/></name></expr>;<pos:position pos:line="335" pos:column="37"/></expr_stmt>
              }<pos:position pos:line="336" pos:column="16"/></block></then></if>

<cpp:ifndef pos:line="338" pos:column="1">#<cpp:directive pos:line="338" pos:column="2">ifndef<pos:position pos:line="338" pos:column="8"/></cpp:directive> <name pos:line="338" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="338" pos:column="26"/></name></cpp:ifndef>
              <if pos:line="339" pos:column="15">if<condition pos:line="339" pos:column="17">(<expr><operator pos:line="339" pos:column="18">!<pos:position pos:line="339" pos:column="19"/></operator><name pos:line="339" pos:column="19">stop_reading<pos:position pos:line="339" pos:column="31"/></name></expr>)<pos:position pos:line="339" pos:column="32"/></condition><then pos:line="339" pos:column="32"> <block pos:line="339" pos:column="33">{
                <comment type="block" pos:line="340" pos:column="17">/* Curl_http_auth_act() checks what authentication methods
                 * that are available and decides which one (if any) to
                 * use. It will set 'newurl' if an auth metod was picked. */</comment>
                <expr_stmt><expr><name pos:line="343" pos:column="17">result<pos:position pos:line="343" pos:column="23"/></name> <operator pos:line="343" pos:column="24">=<pos:position pos:line="343" pos:column="25"/></operator> <call><name pos:line="343" pos:column="26">Curl_http_auth_act<pos:position pos:line="343" pos:column="44"/></name><argument_list pos:line="343" pos:column="44">(<argument><expr><name pos:line="343" pos:column="45">conn<pos:position pos:line="343" pos:column="49"/></name></expr></argument>)<pos:position pos:line="343" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="343" pos:column="51"/></expr_stmt>

                <if pos:line="345" pos:column="17">if<condition pos:line="345" pos:column="19">(<expr><name pos:line="345" pos:column="20">result<pos:position pos:line="345" pos:column="26"/></name></expr>)<pos:position pos:line="345" pos:column="27"/></condition><then pos:line="345" pos:column="27">
                  <block type="pseudo"><return pos:line="346" pos:column="19">return <expr><name pos:line="346" pos:column="26">result<pos:position pos:line="346" pos:column="32"/></name></expr>;<pos:position pos:line="346" pos:column="33"/></return></block></then></if>

                <if pos:line="348" pos:column="17">if<condition pos:line="348" pos:column="19">(<expr><name><name pos:line="348" pos:column="20">conn<pos:position pos:line="348" pos:column="24"/></name><operator pos:line="348" pos:column="24">-&gt;<pos:position pos:line="348" pos:column="29"/></operator><name pos:line="348" pos:column="26">bits<pos:position pos:line="348" pos:column="30"/></name><operator pos:line="348" pos:column="30">.<pos:position pos:line="348" pos:column="31"/></operator><name pos:line="348" pos:column="31">rewindaftersend<pos:position pos:line="348" pos:column="46"/></name></name></expr>)<pos:position pos:line="348" pos:column="47"/></condition><then pos:line="348" pos:column="47"> <block pos:line="348" pos:column="48">{
                  <comment type="block" pos:line="349" pos:column="19">/* We rewind after a complete send, so thus we continue
                     sending now */</comment>
                  <expr_stmt><expr><call><name pos:line="351" pos:column="19">infof<pos:position pos:line="351" pos:column="24"/></name><argument_list pos:line="351" pos:column="24">(<argument><expr><name pos:line="351" pos:column="25">data<pos:position pos:line="351" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="351" pos:column="31">"Keep sending data to get tossed away!\n"<pos:position pos:line="351" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="351" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="351" pos:column="74"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="352" pos:column="19">k<pos:position pos:line="352" pos:column="20"/></name><operator pos:line="352" pos:column="20">-&gt;<pos:position pos:line="352" pos:column="25"/></operator><name pos:line="352" pos:column="22">keepon<pos:position pos:line="352" pos:column="28"/></name></name> <operator pos:line="352" pos:column="29">|=<pos:position pos:line="352" pos:column="31"/></operator> <name pos:line="352" pos:column="32">KEEP_WRITE<pos:position pos:line="352" pos:column="42"/></name></expr>;<pos:position pos:line="352" pos:column="43"/></expr_stmt>
                }<pos:position pos:line="353" pos:column="18"/></block></then></if>
              }<pos:position pos:line="354" pos:column="16"/></block></then></if>
<cpp:endif pos:line="355" pos:column="1">#<cpp:directive pos:line="355" pos:column="2">endif<pos:position pos:line="355" pos:column="7"/></cpp:directive></cpp:endif>   <comment type="block" pos:line="355" pos:column="10">/* CURL_DISABLE_HTTP */</comment>

              <if pos:line="357" pos:column="15">if<condition pos:line="357" pos:column="17">(<expr><operator pos:line="357" pos:column="18">!<pos:position pos:line="357" pos:column="19"/></operator><name><name pos:line="357" pos:column="19">k<pos:position pos:line="357" pos:column="20"/></name><operator pos:line="357" pos:column="20">-&gt;<pos:position pos:line="357" pos:column="25"/></operator><name pos:line="357" pos:column="22">header<pos:position pos:line="357" pos:column="28"/></name></name></expr>)<pos:position pos:line="357" pos:column="29"/></condition><then pos:line="357" pos:column="29"> <block pos:line="357" pos:column="30">{
                <comment type="block" pos:line="358" pos:column="17">/*
                 * really end-of-headers.
                 *
                 * If we requested a "no body", this is a good time to get
                 * out and return home.
                 */</comment>
                <if pos:line="364" pos:column="17">if<condition pos:line="364" pos:column="19">(<expr><name><name pos:line="364" pos:column="20">data<pos:position pos:line="364" pos:column="24"/></name><operator pos:line="364" pos:column="24">-&gt;<pos:position pos:line="364" pos:column="29"/></operator><name pos:line="364" pos:column="26">set<pos:position pos:line="364" pos:column="29"/></name><operator pos:line="364" pos:column="29">.<pos:position pos:line="364" pos:column="30"/></operator><name pos:line="364" pos:column="30">opt_no_body<pos:position pos:line="364" pos:column="41"/></name></name></expr>)<pos:position pos:line="364" pos:column="42"/></condition><then pos:line="364" pos:column="42">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="365" pos:column="19">stop_reading<pos:position pos:line="365" pos:column="31"/></name> <operator pos:line="365" pos:column="32">=<pos:position pos:line="365" pos:column="33"/></operator> <name pos:line="365" pos:column="34">TRUE<pos:position pos:line="365" pos:column="38"/></name></expr>;<pos:position pos:line="365" pos:column="39"/></expr_stmt></block></then>
                <else pos:line="366" pos:column="17">else <block pos:line="366" pos:column="22">{
                  <comment type="block" pos:line="367" pos:column="19">/* If we know the expected size of this document, we set the
                     maximum download size to the size of the expected
                     document or else, we won't know when to stop reading!

                     Note that we set the download maximum even if we read a
                     "Connection: close" header, to make sure that
                     "Content-Length: 0" still prevents us from attempting to
                     read the (missing) response-body.
                  */</comment>
                  <comment type="block" pos:line="376" pos:column="19">/* According to RFC2616 section 4.4, we MUST ignore
                     Content-Length: headers if we are now receiving data
                     using chunked Transfer-Encoding.
                  */</comment>
                  <if pos:line="380" pos:column="19">if<condition pos:line="380" pos:column="21">(<expr><name><name pos:line="380" pos:column="22">k<pos:position pos:line="380" pos:column="23"/></name><operator pos:line="380" pos:column="23">-&gt;<pos:position pos:line="380" pos:column="28"/></operator><name pos:line="380" pos:column="25">chunk<pos:position pos:line="380" pos:column="30"/></name></name></expr>)<pos:position pos:line="380" pos:column="31"/></condition><then pos:line="380" pos:column="31">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="381" pos:column="21">k<pos:position pos:line="381" pos:column="22"/></name><operator pos:line="381" pos:column="22">-&gt;<pos:position pos:line="381" pos:column="27"/></operator><name pos:line="381" pos:column="24">size<pos:position pos:line="381" pos:column="28"/></name></name><operator pos:line="381" pos:column="28">=<pos:position pos:line="381" pos:column="29"/></operator><operator pos:line="381" pos:column="29">-<pos:position pos:line="381" pos:column="30"/></operator><literal type="number" pos:line="381" pos:column="30">1<pos:position pos:line="381" pos:column="31"/></literal></expr>;<pos:position pos:line="381" pos:column="32"/></expr_stmt></block></then></if>

                }<pos:position pos:line="383" pos:column="18"/></block></else></if>
                <if pos:line="384" pos:column="17">if<condition pos:line="384" pos:column="19">(<expr><operator pos:line="384" pos:column="20">-<pos:position pos:line="384" pos:column="21"/></operator><literal type="number" pos:line="384" pos:column="21">1<pos:position pos:line="384" pos:column="22"/></literal> <operator pos:line="384" pos:column="23">!=<pos:position pos:line="384" pos:column="25"/></operator> <name><name pos:line="384" pos:column="26">k<pos:position pos:line="384" pos:column="27"/></name><operator pos:line="384" pos:column="27">-&gt;<pos:position pos:line="384" pos:column="32"/></operator><name pos:line="384" pos:column="29">size<pos:position pos:line="384" pos:column="33"/></name></name></expr>)<pos:position pos:line="384" pos:column="34"/></condition><then pos:line="384" pos:column="34"> <block pos:line="384" pos:column="35">{
                  <comment type="block" pos:line="385" pos:column="19">/* We do this operation even if no_body is true, since this
                     data might be retrieved later with curl_easy_getinfo()
                     and its CURLINFO_CONTENT_LENGTH_DOWNLOAD option. */</comment>

                  <expr_stmt><expr><call><name pos:line="389" pos:column="19">Curl_pgrsSetDownloadSize<pos:position pos:line="389" pos:column="43"/></name><argument_list pos:line="389" pos:column="43">(<argument><expr><name pos:line="389" pos:column="44">data<pos:position pos:line="389" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="389" pos:column="50">k<pos:position pos:line="389" pos:column="51"/></name><operator pos:line="389" pos:column="51">-&gt;<pos:position pos:line="389" pos:column="56"/></operator><name pos:line="389" pos:column="53">size<pos:position pos:line="389" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="389" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="59"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="390" pos:column="19">k<pos:position pos:line="390" pos:column="20"/></name><operator pos:line="390" pos:column="20">-&gt;<pos:position pos:line="390" pos:column="25"/></operator><name pos:line="390" pos:column="22">maxdownload<pos:position pos:line="390" pos:column="33"/></name></name> <operator pos:line="390" pos:column="34">=<pos:position pos:line="390" pos:column="35"/></operator> <name><name pos:line="390" pos:column="36">k<pos:position pos:line="390" pos:column="37"/></name><operator pos:line="390" pos:column="37">-&gt;<pos:position pos:line="390" pos:column="42"/></operator><name pos:line="390" pos:column="39">size<pos:position pos:line="390" pos:column="43"/></name></name></expr>;<pos:position pos:line="390" pos:column="44"/></expr_stmt>
                }<pos:position pos:line="391" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="392" pos:column="17">/* If max download size is *zero* (nothing) we already
                   have nothing and can safely return ok now! */</comment>
                <if pos:line="394" pos:column="17">if<condition pos:line="394" pos:column="19">(<expr><literal type="number" pos:line="394" pos:column="20">0<pos:position pos:line="394" pos:column="21"/></literal> <operator pos:line="394" pos:column="22">==<pos:position pos:line="394" pos:column="24"/></operator> <name><name pos:line="394" pos:column="25">k<pos:position pos:line="394" pos:column="26"/></name><operator pos:line="394" pos:column="26">-&gt;<pos:position pos:line="394" pos:column="31"/></operator><name pos:line="394" pos:column="28">maxdownload<pos:position pos:line="394" pos:column="39"/></name></name></expr>)<pos:position pos:line="394" pos:column="40"/></condition><then pos:line="394" pos:column="40">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="395" pos:column="19">stop_reading<pos:position pos:line="395" pos:column="31"/></name> <operator pos:line="395" pos:column="32">=<pos:position pos:line="395" pos:column="33"/></operator> <name pos:line="395" pos:column="34">TRUE<pos:position pos:line="395" pos:column="38"/></name></expr>;<pos:position pos:line="395" pos:column="39"/></expr_stmt></block></then></if>

                <if pos:line="397" pos:column="17">if<condition pos:line="397" pos:column="19">(<expr><name pos:line="397" pos:column="20">stop_reading<pos:position pos:line="397" pos:column="32"/></name></expr>)<pos:position pos:line="397" pos:column="33"/></condition><then pos:line="397" pos:column="33"> <block pos:line="397" pos:column="34">{
                  <comment type="block" pos:line="398" pos:column="19">/* we make sure that this socket isn't read more now */</comment>
                  <expr_stmt><expr><name><name pos:line="399" pos:column="19">k<pos:position pos:line="399" pos:column="20"/></name><operator pos:line="399" pos:column="20">-&gt;<pos:position pos:line="399" pos:column="25"/></operator><name pos:line="399" pos:column="22">keepon<pos:position pos:line="399" pos:column="28"/></name></name> <operator pos:line="399" pos:column="29">&amp;=<pos:position pos:line="399" pos:column="35"/></operator> <operator pos:line="399" pos:column="32">~<pos:position pos:line="399" pos:column="33"/></operator><name pos:line="399" pos:column="33">KEEP_READ<pos:position pos:line="399" pos:column="42"/></name></expr>;<pos:position pos:line="399" pos:column="43"/></expr_stmt>
                }<pos:position pos:line="400" pos:column="18"/></block></then></if>

                <if pos:line="402" pos:column="17">if<condition pos:line="402" pos:column="19">(<expr><name><name pos:line="402" pos:column="20">data<pos:position pos:line="402" pos:column="24"/></name><operator pos:line="402" pos:column="24">-&gt;<pos:position pos:line="402" pos:column="29"/></operator><name pos:line="402" pos:column="26">set<pos:position pos:line="402" pos:column="29"/></name><operator pos:line="402" pos:column="29">.<pos:position pos:line="402" pos:column="30"/></operator><name pos:line="402" pos:column="30">verbose<pos:position pos:line="402" pos:column="37"/></name></name></expr>)<pos:position pos:line="402" pos:column="38"/></condition><then pos:line="402" pos:column="38">
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="403" pos:column="19">Curl_debug<pos:position pos:line="403" pos:column="29"/></name><argument_list pos:line="403" pos:column="29">(<argument><expr><name pos:line="403" pos:column="30">data<pos:position pos:line="403" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="403" pos:column="36">CURLINFO_HEADER_IN<pos:position pos:line="403" pos:column="54"/></name></expr></argument>,
                             <argument><expr><name><name pos:line="404" pos:column="30">k<pos:position pos:line="404" pos:column="31"/></name><operator pos:line="404" pos:column="31">-&gt;<pos:position pos:line="404" pos:column="36"/></operator><name pos:line="404" pos:column="33">str_start<pos:position pos:line="404" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="404" pos:column="44">headerlen<pos:position pos:line="404" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="404" pos:column="55">conn<pos:position pos:line="404" pos:column="59"/></name></expr></argument>)<pos:position pos:line="404" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="404" pos:column="61"/></expr_stmt></block></then></if>
                <break pos:line="405" pos:column="17">break;<pos:position pos:line="405" pos:column="23"/></break>          <comment type="block" pos:line="405" pos:column="33">/* exit header line loop */</comment>
              }<pos:position pos:line="406" pos:column="16"/></block></then></if>

              <comment type="block" pos:line="408" pos:column="15">/* We continue reading headers, so reset the line-based
                 header parsing variables hbufp &amp;&amp; hbuflen */</comment>
              <expr_stmt><expr><name><name pos:line="410" pos:column="15">k<pos:position pos:line="410" pos:column="16"/></name><operator pos:line="410" pos:column="16">-&gt;<pos:position pos:line="410" pos:column="21"/></operator><name pos:line="410" pos:column="18">hbufp<pos:position pos:line="410" pos:column="23"/></name></name> <operator pos:line="410" pos:column="24">=<pos:position pos:line="410" pos:column="25"/></operator> <name><name pos:line="410" pos:column="26">data<pos:position pos:line="410" pos:column="30"/></name><operator pos:line="410" pos:column="30">-&gt;<pos:position pos:line="410" pos:column="35"/></operator><name pos:line="410" pos:column="32">state<pos:position pos:line="410" pos:column="37"/></name><operator pos:line="410" pos:column="37">.<pos:position pos:line="410" pos:column="38"/></operator><name pos:line="410" pos:column="38">headerbuff<pos:position pos:line="410" pos:column="48"/></name></name></expr>;<pos:position pos:line="410" pos:column="49"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="411" pos:column="15">k<pos:position pos:line="411" pos:column="16"/></name><operator pos:line="411" pos:column="16">-&gt;<pos:position pos:line="411" pos:column="21"/></operator><name pos:line="411" pos:column="18">hbuflen<pos:position pos:line="411" pos:column="25"/></name></name> <operator pos:line="411" pos:column="26">=<pos:position pos:line="411" pos:column="27"/></operator> <literal type="number" pos:line="411" pos:column="28">0<pos:position pos:line="411" pos:column="29"/></literal></expr>;<pos:position pos:line="411" pos:column="30"/></expr_stmt>
              <continue pos:line="412" pos:column="15">continue;<pos:position pos:line="412" pos:column="24"/></continue>
            }<pos:position pos:line="413" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="415" pos:column="13">/*
             * Checks for special headers coming up.
             */</comment>

            <if pos:line="419" pos:column="13">if<condition pos:line="419" pos:column="15">(<expr><operator pos:line="419" pos:column="16">!<pos:position pos:line="419" pos:column="17"/></operator><name><name pos:line="419" pos:column="17">k<pos:position pos:line="419" pos:column="18"/></name><operator pos:line="419" pos:column="18">-&gt;<pos:position pos:line="419" pos:column="23"/></operator><name pos:line="419" pos:column="20">headerline<pos:position pos:line="419" pos:column="30"/></name></name><operator pos:line="419" pos:column="30">++<pos:position pos:line="419" pos:column="32"/></operator></expr>)<pos:position pos:line="419" pos:column="33"/></condition><then pos:line="419" pos:column="33"> <block pos:line="419" pos:column="34">{
              <comment type="block" pos:line="420" pos:column="15">/* This is the first header, it MUST be the error code line
                 or else we consider this to be the body right away! */</comment>
              <decl_stmt><decl><type><name pos:line="422" pos:column="15">int<pos:position pos:line="422" pos:column="18"/></name></type> <name pos:line="422" pos:column="19">httpversion_major<pos:position pos:line="422" pos:column="36"/></name></decl>;<pos:position pos:line="422" pos:column="37"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="423" pos:column="15">int<pos:position pos:line="423" pos:column="18"/></name></type> <name pos:line="423" pos:column="19">nc<pos:position pos:line="423" pos:column="21"/></name></decl>;<pos:position pos:line="423" pos:column="22"/></decl_stmt>
<cpp:ifdef pos:line="424" pos:column="1">#<cpp:directive pos:line="424" pos:column="2">ifdef<pos:position pos:line="424" pos:column="7"/></cpp:directive> <name pos:line="424" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="424" pos:column="29"/></name></cpp:ifdef>
<cpp:define pos:line="425" pos:column="1">#<cpp:directive pos:line="425" pos:column="2">define<pos:position pos:line="425" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="425" pos:column="9">HEADER1<pos:position pos:line="425" pos:column="16"/></name></cpp:macro> <cpp:value pos:line="425" pos:column="17">scratch<pos:position pos:line="425" pos:column="24"/></cpp:value></cpp:define>
<cpp:define pos:line="426" pos:column="1">#<cpp:directive pos:line="426" pos:column="2">define<pos:position pos:line="426" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="426" pos:column="9">SCRATCHSIZE<pos:position pos:line="426" pos:column="20"/></name></cpp:macro> <cpp:value pos:line="426" pos:column="21">21<pos:position pos:line="426" pos:column="23"/></cpp:value></cpp:define>
              <decl_stmt><decl><type><name pos:line="427" pos:column="15">CURLcode<pos:position pos:line="427" pos:column="23"/></name></type> <name pos:line="427" pos:column="24">res<pos:position pos:line="427" pos:column="27"/></name></decl>;<pos:position pos:line="427" pos:column="28"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="428" pos:column="15">char<pos:position pos:line="428" pos:column="19"/></name></type> <name><name pos:line="428" pos:column="20">scratch<pos:position pos:line="428" pos:column="27"/></name><index pos:line="428" pos:column="27">[<expr><name pos:line="428" pos:column="28">SCRATCHSIZE<pos:position pos:line="428" pos:column="39"/></name><operator pos:line="428" pos:column="39">+<pos:position pos:line="428" pos:column="40"/></operator><literal type="number" pos:line="428" pos:column="40">1<pos:position pos:line="428" pos:column="41"/></literal></expr>]<pos:position pos:line="428" pos:column="42"/></index></name></decl>;<pos:position pos:line="428" pos:column="43"/></decl_stmt> <comment type="block" pos:line="428" pos:column="44">/* "HTTP/major.minor 123" */</comment>
              <comment type="block" pos:line="429" pos:column="15">/* We can't really convert this yet because we
                 don't know if it's the 1st header line or the body.
                 So we do a partial conversion into a scratch area,
                 leaving the data at k-&gt;p as-is.
              */</comment>
              <expr_stmt><expr><call><name pos:line="434" pos:column="15">strncpy<pos:position pos:line="434" pos:column="22"/></name><argument_list pos:line="434" pos:column="22">(<argument><expr><operator pos:line="434" pos:column="23">&amp;<pos:position pos:line="434" pos:column="28"/></operator><name><name pos:line="434" pos:column="24">scratch<pos:position pos:line="434" pos:column="31"/></name><index pos:line="434" pos:column="31">[<expr><literal type="number" pos:line="434" pos:column="32">0<pos:position pos:line="434" pos:column="33"/></literal></expr>]<pos:position pos:line="434" pos:column="34"/></index></name></expr></argument>, <argument><expr><name><name pos:line="434" pos:column="36">k<pos:position pos:line="434" pos:column="37"/></name><operator pos:line="434" pos:column="37">-&gt;<pos:position pos:line="434" pos:column="42"/></operator><name pos:line="434" pos:column="39">p<pos:position pos:line="434" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="434" pos:column="42">SCRATCHSIZE<pos:position pos:line="434" pos:column="53"/></name></expr></argument>)<pos:position pos:line="434" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="434" pos:column="55"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="435" pos:column="15">scratch<pos:position pos:line="435" pos:column="22"/></name><index pos:line="435" pos:column="22">[<expr><name pos:line="435" pos:column="23">SCRATCHSIZE<pos:position pos:line="435" pos:column="34"/></name></expr>]<pos:position pos:line="435" pos:column="35"/></index></name> <operator pos:line="435" pos:column="36">=<pos:position pos:line="435" pos:column="37"/></operator> <literal type="number" pos:line="435" pos:column="38">0<pos:position pos:line="435" pos:column="39"/></literal></expr>;<pos:position pos:line="435" pos:column="40"/></expr_stmt> <comment type="block" pos:line="435" pos:column="41">/* null terminate */</comment>
              <expr_stmt><expr><name pos:line="436" pos:column="15">res<pos:position pos:line="436" pos:column="18"/></name> <operator pos:line="436" pos:column="19">=<pos:position pos:line="436" pos:column="20"/></operator> <call><name pos:line="436" pos:column="21">Curl_convert_from_network<pos:position pos:line="436" pos:column="46"/></name><argument_list pos:line="436" pos:column="46">(<argument><expr><name pos:line="436" pos:column="47">data<pos:position pos:line="436" pos:column="51"/></name></expr></argument>,
                                              <argument><expr><operator pos:line="437" pos:column="47">&amp;<pos:position pos:line="437" pos:column="52"/></operator><name><name pos:line="437" pos:column="48">scratch<pos:position pos:line="437" pos:column="55"/></name><index pos:line="437" pos:column="55">[<expr><literal type="number" pos:line="437" pos:column="56">0<pos:position pos:line="437" pos:column="57"/></literal></expr>]<pos:position pos:line="437" pos:column="58"/></index></name></expr></argument>,
                                              <argument><expr><name pos:line="438" pos:column="47">SCRATCHSIZE<pos:position pos:line="438" pos:column="58"/></name></expr></argument>)<pos:position pos:line="438" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="438" pos:column="60"/></expr_stmt>
              <if pos:line="439" pos:column="15">if<condition pos:line="439" pos:column="17">(<expr><name pos:line="439" pos:column="18">CURLE_OK<pos:position pos:line="439" pos:column="26"/></name> <operator pos:line="439" pos:column="27">!=<pos:position pos:line="439" pos:column="29"/></operator> <name pos:line="439" pos:column="30">res<pos:position pos:line="439" pos:column="33"/></name></expr>)<pos:position pos:line="439" pos:column="34"/></condition><then pos:line="439" pos:column="34"> <block pos:line="439" pos:column="35">{
                <comment type="block" pos:line="440" pos:column="17">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
                <return pos:line="441" pos:column="17">return <expr><name pos:line="441" pos:column="24">res<pos:position pos:line="441" pos:column="27"/></name></expr>;<pos:position pos:line="441" pos:column="28"/></return>
              }<pos:position pos:line="442" pos:column="16"/></block></then></if>
<cpp:else pos:line="443" pos:column="1">#<cpp:directive pos:line="443" pos:column="2">else<pos:position pos:line="443" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="444" pos:column="1">#<cpp:directive pos:line="444" pos:column="2">define<pos:position pos:line="444" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="444" pos:column="9">HEADER1<pos:position pos:line="444" pos:column="16"/></name></cpp:macro> <cpp:value pos:line="444" pos:column="17">k-&gt;p<pos:position pos:line="444" pos:column="21"/></cpp:value></cpp:define> <comment type="block" pos:line="444" pos:column="22">/* no conversion needed, just use k-&gt;p */</comment>
<cpp:endif pos:line="445" pos:column="1">#<cpp:directive pos:line="445" pos:column="2">endif<pos:position pos:line="445" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="445" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

              <expr_stmt><expr><name pos:line="447" pos:column="15">nc<pos:position pos:line="447" pos:column="17"/></name> <operator pos:line="447" pos:column="18">=<pos:position pos:line="447" pos:column="19"/></operator> <call><name pos:line="447" pos:column="20">sscanf<pos:position pos:line="447" pos:column="26"/></name><argument_list pos:line="447" pos:column="26">(<argument><expr><name pos:line="447" pos:column="27">HEADER1<pos:position pos:line="447" pos:column="34"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="448" pos:column="27">" HTTP/%d.%d %3d"<pos:position pos:line="448" pos:column="44"/></literal></expr></argument>,
                          <argument><expr><operator pos:line="449" pos:column="27">&amp;<pos:position pos:line="449" pos:column="32"/></operator><name pos:line="449" pos:column="28">httpversion_major<pos:position pos:line="449" pos:column="45"/></name></expr></argument>,
                          <argument><expr><operator pos:line="450" pos:column="27">&amp;<pos:position pos:line="450" pos:column="32"/></operator><name><name pos:line="450" pos:column="28">k<pos:position pos:line="450" pos:column="29"/></name><operator pos:line="450" pos:column="29">-&gt;<pos:position pos:line="450" pos:column="34"/></operator><name pos:line="450" pos:column="31">httpversion<pos:position pos:line="450" pos:column="42"/></name></name></expr></argument>,
                          <argument><expr><operator pos:line="451" pos:column="27">&amp;<pos:position pos:line="451" pos:column="32"/></operator><name><name pos:line="451" pos:column="28">k<pos:position pos:line="451" pos:column="29"/></name><operator pos:line="451" pos:column="29">-&gt;<pos:position pos:line="451" pos:column="34"/></operator><name pos:line="451" pos:column="31">httpcode<pos:position pos:line="451" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="451" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="451" pos:column="41"/></expr_stmt>
              <if pos:line="452" pos:column="15">if<condition pos:line="452" pos:column="17">(<expr><name pos:line="452" pos:column="18">nc<pos:position pos:line="452" pos:column="20"/></name><operator pos:line="452" pos:column="20">==<pos:position pos:line="452" pos:column="22"/></operator><literal type="number" pos:line="452" pos:column="22">3<pos:position pos:line="452" pos:column="23"/></literal></expr>)<pos:position pos:line="452" pos:column="24"/></condition><then pos:line="452" pos:column="24"> <block pos:line="452" pos:column="25">{
                <expr_stmt><expr><name><name pos:line="453" pos:column="17">k<pos:position pos:line="453" pos:column="18"/></name><operator pos:line="453" pos:column="18">-&gt;<pos:position pos:line="453" pos:column="23"/></operator><name pos:line="453" pos:column="20">httpversion<pos:position pos:line="453" pos:column="31"/></name></name> <operator pos:line="453" pos:column="32">+=<pos:position pos:line="453" pos:column="34"/></operator> <literal type="number" pos:line="453" pos:column="35">10<pos:position pos:line="453" pos:column="37"/></literal> <operator pos:line="453" pos:column="38">*<pos:position pos:line="453" pos:column="39"/></operator> <name pos:line="453" pos:column="40">httpversion_major<pos:position pos:line="453" pos:column="57"/></name></expr>;<pos:position pos:line="453" pos:column="58"/></expr_stmt>
              }<pos:position pos:line="454" pos:column="16"/></block></then>
              <else pos:line="455" pos:column="15">else <block pos:line="455" pos:column="20">{
                <comment type="block" pos:line="456" pos:column="17">/* this is the real world, not a Nirvana
                   NCSA 1.5.x returns this crap when asked for HTTP/1.1
                */</comment>
                <expr_stmt><expr><name pos:line="459" pos:column="17">nc<pos:position pos:line="459" pos:column="19"/></name><operator pos:line="459" pos:column="19">=<pos:position pos:line="459" pos:column="20"/></operator><call><name pos:line="459" pos:column="20">sscanf<pos:position pos:line="459" pos:column="26"/></name><argument_list pos:line="459" pos:column="26">(<argument><expr><name pos:line="459" pos:column="27">HEADER1<pos:position pos:line="459" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="459" pos:column="36">" HTTP %3d"<pos:position pos:line="459" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="459" pos:column="49">&amp;<pos:position pos:line="459" pos:column="54"/></operator><name><name pos:line="459" pos:column="50">k<pos:position pos:line="459" pos:column="51"/></name><operator pos:line="459" pos:column="51">-&gt;<pos:position pos:line="459" pos:column="56"/></operator><name pos:line="459" pos:column="53">httpcode<pos:position pos:line="459" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="459" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="459" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="460" pos:column="17">k<pos:position pos:line="460" pos:column="18"/></name><operator pos:line="460" pos:column="18">-&gt;<pos:position pos:line="460" pos:column="23"/></operator><name pos:line="460" pos:column="20">httpversion<pos:position pos:line="460" pos:column="31"/></name></name> <operator pos:line="460" pos:column="32">=<pos:position pos:line="460" pos:column="33"/></operator> <literal type="number" pos:line="460" pos:column="34">10<pos:position pos:line="460" pos:column="36"/></literal></expr>;<pos:position pos:line="460" pos:column="37"/></expr_stmt>

               <comment type="block" pos:line="462" pos:column="16">/* If user has set option HTTP200ALIASES,
                  compare header line against list of aliases
               */</comment>
                <if pos:line="465" pos:column="17">if<condition pos:line="465" pos:column="19">(<expr><operator pos:line="465" pos:column="20">!<pos:position pos:line="465" pos:column="21"/></operator><name pos:line="465" pos:column="21">nc<pos:position pos:line="465" pos:column="23"/></name></expr>)<pos:position pos:line="465" pos:column="24"/></condition><then pos:line="465" pos:column="24"> <block pos:line="465" pos:column="25">{
                  <if pos:line="466" pos:column="19">if<condition pos:line="466" pos:column="21">(<expr><call><name pos:line="466" pos:column="22">checkhttpprefix<pos:position pos:line="466" pos:column="37"/></name><argument_list pos:line="466" pos:column="37">(<argument><expr><name pos:line="466" pos:column="38">data<pos:position pos:line="466" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="466" pos:column="44">k<pos:position pos:line="466" pos:column="45"/></name><operator pos:line="466" pos:column="45">-&gt;<pos:position pos:line="466" pos:column="50"/></operator><name pos:line="466" pos:column="47">p<pos:position pos:line="466" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="466" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="466" pos:column="50"/></condition><then pos:line="466" pos:column="50"> <block pos:line="466" pos:column="51">{
                    <expr_stmt><expr><name pos:line="467" pos:column="21">nc<pos:position pos:line="467" pos:column="23"/></name> <operator pos:line="467" pos:column="24">=<pos:position pos:line="467" pos:column="25"/></operator> <literal type="number" pos:line="467" pos:column="26">1<pos:position pos:line="467" pos:column="27"/></literal></expr>;<pos:position pos:line="467" pos:column="28"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="468" pos:column="21">k<pos:position pos:line="468" pos:column="22"/></name><operator pos:line="468" pos:column="22">-&gt;<pos:position pos:line="468" pos:column="27"/></operator><name pos:line="468" pos:column="24">httpcode<pos:position pos:line="468" pos:column="32"/></name></name> <operator pos:line="468" pos:column="33">=<pos:position pos:line="468" pos:column="34"/></operator> <literal type="number" pos:line="468" pos:column="35">200<pos:position pos:line="468" pos:column="38"/></literal></expr>;<pos:position pos:line="468" pos:column="39"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="469" pos:column="21">k<pos:position pos:line="469" pos:column="22"/></name><operator pos:line="469" pos:column="22">-&gt;<pos:position pos:line="469" pos:column="27"/></operator><name pos:line="469" pos:column="24">httpversion<pos:position pos:line="469" pos:column="35"/></name></name> <operator pos:line="469" pos:column="36">=<pos:position pos:line="469" pos:column="37"/></operator> <literal type="number" pos:line="469" pos:column="38">10<pos:position pos:line="469" pos:column="40"/></literal></expr>;<pos:position pos:line="469" pos:column="41"/></expr_stmt>
                  }<pos:position pos:line="470" pos:column="20"/></block></then></if>
                }<pos:position pos:line="471" pos:column="18"/></block></then></if>
              }<pos:position pos:line="472" pos:column="16"/></block></else></if>

              <if pos:line="474" pos:column="15">if<condition pos:line="474" pos:column="17">(<expr><name pos:line="474" pos:column="18">nc<pos:position pos:line="474" pos:column="20"/></name></expr>)<pos:position pos:line="474" pos:column="21"/></condition><then pos:line="474" pos:column="21"> <block pos:line="474" pos:column="22">{
                <expr_stmt><expr><name><name pos:line="475" pos:column="17">data<pos:position pos:line="475" pos:column="21"/></name><operator pos:line="475" pos:column="21">-&gt;<pos:position pos:line="475" pos:column="26"/></operator><name pos:line="475" pos:column="23">info<pos:position pos:line="475" pos:column="27"/></name><operator pos:line="475" pos:column="27">.<pos:position pos:line="475" pos:column="28"/></operator><name pos:line="475" pos:column="28">httpcode<pos:position pos:line="475" pos:column="36"/></name></name> <operator pos:line="475" pos:column="37">=<pos:position pos:line="475" pos:column="38"/></operator> <name><name pos:line="475" pos:column="39">k<pos:position pos:line="475" pos:column="40"/></name><operator pos:line="475" pos:column="40">-&gt;<pos:position pos:line="475" pos:column="45"/></operator><name pos:line="475" pos:column="42">httpcode<pos:position pos:line="475" pos:column="50"/></name></name></expr>;<pos:position pos:line="475" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="476" pos:column="17">data<pos:position pos:line="476" pos:column="21"/></name><operator pos:line="476" pos:column="21">-&gt;<pos:position pos:line="476" pos:column="26"/></operator><name pos:line="476" pos:column="23">info<pos:position pos:line="476" pos:column="27"/></name><operator pos:line="476" pos:column="27">.<pos:position pos:line="476" pos:column="28"/></operator><name pos:line="476" pos:column="28">httpversion<pos:position pos:line="476" pos:column="39"/></name></name> <operator pos:line="476" pos:column="40">=<pos:position pos:line="476" pos:column="41"/></operator> <name><name pos:line="476" pos:column="42">k<pos:position pos:line="476" pos:column="43"/></name><operator pos:line="476" pos:column="43">-&gt;<pos:position pos:line="476" pos:column="48"/></operator><name pos:line="476" pos:column="45">httpversion<pos:position pos:line="476" pos:column="56"/></name></name></expr>;<pos:position pos:line="476" pos:column="57"/></expr_stmt>

                <comment type="block" pos:line="478" pos:column="17">/*
                 * This code executes as part of processing the header.  As a
                 * result, it's not totally clear how to interpret the
                 * response code yet as that depends on what other headers may
                 * be present.  401 and 407 may be errors, but may be OK
                 * depending on how authentication is working.  Other codes
                 * are definitely errors, so give up here.
                 */</comment>
                <if pos:line="486" pos:column="17">if<condition pos:line="486" pos:column="19">(<expr><name><name pos:line="486" pos:column="20">data<pos:position pos:line="486" pos:column="24"/></name><operator pos:line="486" pos:column="24">-&gt;<pos:position pos:line="486" pos:column="29"/></operator><name pos:line="486" pos:column="26">set<pos:position pos:line="486" pos:column="29"/></name><operator pos:line="486" pos:column="29">.<pos:position pos:line="486" pos:column="30"/></operator><name pos:line="486" pos:column="30">http_fail_on_error<pos:position pos:line="486" pos:column="48"/></name></name> <operator pos:line="486" pos:column="49">&amp;&amp;<pos:position pos:line="486" pos:column="59"/></operator> <operator pos:line="486" pos:column="52">(<pos:position pos:line="486" pos:column="53"/></operator><name><name pos:line="486" pos:column="53">k<pos:position pos:line="486" pos:column="54"/></name><operator pos:line="486" pos:column="54">-&gt;<pos:position pos:line="486" pos:column="59"/></operator><name pos:line="486" pos:column="56">httpcode<pos:position pos:line="486" pos:column="64"/></name></name> <operator pos:line="486" pos:column="65">&gt;=<pos:position pos:line="486" pos:column="70"/></operator> <literal type="number" pos:line="486" pos:column="68">400<pos:position pos:line="486" pos:column="71"/></literal><operator pos:line="486" pos:column="71">)<pos:position pos:line="486" pos:column="72"/></operator> <operator pos:line="486" pos:column="73">&amp;&amp;<pos:position pos:line="486" pos:column="83"/></operator>
                    <operator pos:line="487" pos:column="21">(<pos:position pos:line="487" pos:column="22"/></operator><operator pos:line="487" pos:column="22">(<pos:position pos:line="487" pos:column="23"/></operator><name><name pos:line="487" pos:column="23">k<pos:position pos:line="487" pos:column="24"/></name><operator pos:line="487" pos:column="24">-&gt;<pos:position pos:line="487" pos:column="29"/></operator><name pos:line="487" pos:column="26">httpcode<pos:position pos:line="487" pos:column="34"/></name></name> <operator pos:line="487" pos:column="35">!=<pos:position pos:line="487" pos:column="37"/></operator> <literal type="number" pos:line="487" pos:column="38">401<pos:position pos:line="487" pos:column="41"/></literal><operator pos:line="487" pos:column="41">)<pos:position pos:line="487" pos:column="42"/></operator> <operator pos:line="487" pos:column="43">||<pos:position pos:line="487" pos:column="45"/></operator> <operator pos:line="487" pos:column="46">!<pos:position pos:line="487" pos:column="47"/></operator><name><name pos:line="487" pos:column="47">conn<pos:position pos:line="487" pos:column="51"/></name><operator pos:line="487" pos:column="51">-&gt;<pos:position pos:line="487" pos:column="56"/></operator><name pos:line="487" pos:column="53">bits<pos:position pos:line="487" pos:column="57"/></name><operator pos:line="487" pos:column="57">.<pos:position pos:line="487" pos:column="58"/></operator><name pos:line="487" pos:column="58">user_passwd<pos:position pos:line="487" pos:column="69"/></name></name><operator pos:line="487" pos:column="69">)<pos:position pos:line="487" pos:column="70"/></operator> <operator pos:line="487" pos:column="71">&amp;&amp;<pos:position pos:line="487" pos:column="81"/></operator>
                    <operator pos:line="488" pos:column="21">(<pos:position pos:line="488" pos:column="22"/></operator><operator pos:line="488" pos:column="22">(<pos:position pos:line="488" pos:column="23"/></operator><name><name pos:line="488" pos:column="23">k<pos:position pos:line="488" pos:column="24"/></name><operator pos:line="488" pos:column="24">-&gt;<pos:position pos:line="488" pos:column="29"/></operator><name pos:line="488" pos:column="26">httpcode<pos:position pos:line="488" pos:column="34"/></name></name> <operator pos:line="488" pos:column="35">!=<pos:position pos:line="488" pos:column="37"/></operator> <literal type="number" pos:line="488" pos:column="38">407<pos:position pos:line="488" pos:column="41"/></literal><operator pos:line="488" pos:column="41">)<pos:position pos:line="488" pos:column="42"/></operator> <operator pos:line="488" pos:column="43">||<pos:position pos:line="488" pos:column="45"/></operator> <operator pos:line="488" pos:column="46">!<pos:position pos:line="488" pos:column="47"/></operator><name><name pos:line="488" pos:column="47">conn<pos:position pos:line="488" pos:column="51"/></name><operator pos:line="488" pos:column="51">-&gt;<pos:position pos:line="488" pos:column="56"/></operator><name pos:line="488" pos:column="53">bits<pos:position pos:line="488" pos:column="57"/></name><operator pos:line="488" pos:column="57">.<pos:position pos:line="488" pos:column="58"/></operator><name pos:line="488" pos:column="58">proxy_user_passwd<pos:position pos:line="488" pos:column="75"/></name></name><operator pos:line="488" pos:column="75">)<pos:position pos:line="488" pos:column="76"/></operator></expr> )<pos:position pos:line="488" pos:column="78"/></condition><then pos:line="488" pos:column="78"> <block pos:line="488" pos:column="79">{

                  <if pos:line="490" pos:column="19">if<condition pos:line="490" pos:column="21">(<expr><name><name pos:line="490" pos:column="22">data<pos:position pos:line="490" pos:column="26"/></name><operator pos:line="490" pos:column="26">-&gt;<pos:position pos:line="490" pos:column="31"/></operator><name pos:line="490" pos:column="28">state<pos:position pos:line="490" pos:column="33"/></name><operator pos:line="490" pos:column="33">.<pos:position pos:line="490" pos:column="34"/></operator><name pos:line="490" pos:column="34">resume_from<pos:position pos:line="490" pos:column="45"/></name></name> <operator pos:line="490" pos:column="46">&amp;&amp;<pos:position pos:line="490" pos:column="56"/></operator>
                      <operator pos:line="491" pos:column="23">(<pos:position pos:line="491" pos:column="24"/></operator><name><name pos:line="491" pos:column="24">data<pos:position pos:line="491" pos:column="28"/></name><operator pos:line="491" pos:column="28">-&gt;<pos:position pos:line="491" pos:column="33"/></operator><name pos:line="491" pos:column="30">set<pos:position pos:line="491" pos:column="33"/></name><operator pos:line="491" pos:column="33">.<pos:position pos:line="491" pos:column="34"/></operator><name pos:line="491" pos:column="34">httpreq<pos:position pos:line="491" pos:column="41"/></name></name><operator pos:line="491" pos:column="41">==<pos:position pos:line="491" pos:column="43"/></operator><name pos:line="491" pos:column="43">HTTPREQ_GET<pos:position pos:line="491" pos:column="54"/></name><operator pos:line="491" pos:column="54">)<pos:position pos:line="491" pos:column="55"/></operator> <operator pos:line="491" pos:column="56">&amp;&amp;<pos:position pos:line="491" pos:column="66"/></operator>
                      <operator pos:line="492" pos:column="23">(<pos:position pos:line="492" pos:column="24"/></operator><name><name pos:line="492" pos:column="24">k<pos:position pos:line="492" pos:column="25"/></name><operator pos:line="492" pos:column="25">-&gt;<pos:position pos:line="492" pos:column="30"/></operator><name pos:line="492" pos:column="27">httpcode<pos:position pos:line="492" pos:column="35"/></name></name> <operator pos:line="492" pos:column="36">==<pos:position pos:line="492" pos:column="38"/></operator> <literal type="number" pos:line="492" pos:column="39">416<pos:position pos:line="492" pos:column="42"/></literal><operator pos:line="492" pos:column="42">)<pos:position pos:line="492" pos:column="43"/></operator></expr>)<pos:position pos:line="492" pos:column="44"/></condition><then pos:line="492" pos:column="44"> <block pos:line="492" pos:column="45">{
                    <comment type="block" pos:line="493" pos:column="21">/* "Requested Range Not Satisfiable", just proceed and
                       pretend this is no error */</comment>
                  }<pos:position pos:line="495" pos:column="20"/></block></then>
                  <else pos:line="496" pos:column="19">else <block pos:line="496" pos:column="24">{
                    <comment type="block" pos:line="497" pos:column="21">/* serious error, go home! */</comment>
                    <expr_stmt><expr><call><name pos:line="498" pos:column="21">failf<pos:position pos:line="498" pos:column="26"/></name> <argument_list pos:line="498" pos:column="27">(<argument><expr><name pos:line="498" pos:column="28">data<pos:position pos:line="498" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="498" pos:column="34">"The requested URL returned error: %d"<pos:position pos:line="498" pos:column="72"/></literal></expr></argument>,
                           <argument><expr><name><name pos:line="499" pos:column="28">k<pos:position pos:line="499" pos:column="29"/></name><operator pos:line="499" pos:column="29">-&gt;<pos:position pos:line="499" pos:column="34"/></operator><name pos:line="499" pos:column="31">httpcode<pos:position pos:line="499" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="499" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="499" pos:column="41"/></expr_stmt>
                    <return pos:line="500" pos:column="21">return <expr><name pos:line="500" pos:column="28">CURLE_HTTP_RETURNED_ERROR<pos:position pos:line="500" pos:column="53"/></name></expr>;<pos:position pos:line="500" pos:column="54"/></return>
                  }<pos:position pos:line="501" pos:column="20"/></block></else></if>
                }<pos:position pos:line="502" pos:column="18"/></block></then></if>

                <if pos:line="504" pos:column="17">if<condition pos:line="504" pos:column="19">(<expr><name><name pos:line="504" pos:column="20">k<pos:position pos:line="504" pos:column="21"/></name><operator pos:line="504" pos:column="21">-&gt;<pos:position pos:line="504" pos:column="26"/></operator><name pos:line="504" pos:column="23">httpversion<pos:position pos:line="504" pos:column="34"/></name></name> <operator pos:line="504" pos:column="35">==<pos:position pos:line="504" pos:column="37"/></operator> <literal type="number" pos:line="504" pos:column="38">10<pos:position pos:line="504" pos:column="40"/></literal></expr>)<pos:position pos:line="504" pos:column="41"/></condition><then pos:line="504" pos:column="41"> <block pos:line="504" pos:column="42">{
                  <comment type="block" pos:line="505" pos:column="19">/* Default action for HTTP/1.0 must be to close, unless
                     we get one of those fancy headers that tell us the
                     server keeps it open for us! */</comment>
                  <expr_stmt><expr><call><name pos:line="508" pos:column="19">infof<pos:position pos:line="508" pos:column="24"/></name><argument_list pos:line="508" pos:column="24">(<argument><expr><name pos:line="508" pos:column="25">data<pos:position pos:line="508" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="508" pos:column="31">"HTTP 1.0, assume close after body\n"<pos:position pos:line="508" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="508" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="508" pos:column="70"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="509" pos:column="19">conn<pos:position pos:line="509" pos:column="23"/></name><operator pos:line="509" pos:column="23">-&gt;<pos:position pos:line="509" pos:column="28"/></operator><name pos:line="509" pos:column="25">bits<pos:position pos:line="509" pos:column="29"/></name><operator pos:line="509" pos:column="29">.<pos:position pos:line="509" pos:column="30"/></operator><name pos:line="509" pos:column="30">close<pos:position pos:line="509" pos:column="35"/></name></name> <operator pos:line="509" pos:column="36">=<pos:position pos:line="509" pos:column="37"/></operator> <name pos:line="509" pos:column="38">TRUE<pos:position pos:line="509" pos:column="42"/></name></expr>;<pos:position pos:line="509" pos:column="43"/></expr_stmt>
                }<pos:position pos:line="510" pos:column="18"/></block></then>
                <elseif pos:line="511" pos:column="17">else <if pos:line="511" pos:column="22">if<condition pos:line="511" pos:column="24">(<expr><name><name pos:line="511" pos:column="25">k<pos:position pos:line="511" pos:column="26"/></name><operator pos:line="511" pos:column="26">-&gt;<pos:position pos:line="511" pos:column="31"/></operator><name pos:line="511" pos:column="28">httpversion<pos:position pos:line="511" pos:column="39"/></name></name> <operator pos:line="511" pos:column="40">&gt;=<pos:position pos:line="511" pos:column="45"/></operator> <literal type="number" pos:line="511" pos:column="43">11<pos:position pos:line="511" pos:column="45"/></literal> <operator pos:line="511" pos:column="46">&amp;&amp;<pos:position pos:line="511" pos:column="56"/></operator>
                        <operator pos:line="512" pos:column="25">!<pos:position pos:line="512" pos:column="26"/></operator><name><name pos:line="512" pos:column="26">conn<pos:position pos:line="512" pos:column="30"/></name><operator pos:line="512" pos:column="30">-&gt;<pos:position pos:line="512" pos:column="35"/></operator><name pos:line="512" pos:column="32">bits<pos:position pos:line="512" pos:column="36"/></name><operator pos:line="512" pos:column="36">.<pos:position pos:line="512" pos:column="37"/></operator><name pos:line="512" pos:column="37">close<pos:position pos:line="512" pos:column="42"/></name></name></expr>)<pos:position pos:line="512" pos:column="43"/></condition><then pos:line="512" pos:column="43"> <block pos:line="512" pos:column="44">{
                  <comment type="block" pos:line="513" pos:column="19">/* If HTTP version is &gt;= 1.1 and connection is persistent
                     server supports pipelining. */</comment>
                  <expr_stmt><expr><call><name pos:line="515" pos:column="19">DEBUGF<pos:position pos:line="515" pos:column="25"/></name><argument_list pos:line="515" pos:column="25">(<argument><expr><call><name pos:line="515" pos:column="26">infof<pos:position pos:line="515" pos:column="31"/></name><argument_list pos:line="515" pos:column="31">(<argument><expr><name pos:line="515" pos:column="32">data<pos:position pos:line="515" pos:column="36"/></name></expr></argument>,
                               <argument><expr><literal type="string" pos:line="516" pos:column="32">"HTTP 1.1 or later with persistent connection, "<pos:position pos:line="516" pos:column="80"/></literal>
                               <literal type="string" pos:line="517" pos:column="32">"pipelining supported\n"<pos:position pos:line="517" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="517" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="517" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="517" pos:column="59"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="518" pos:column="19">conn<pos:position pos:line="518" pos:column="23"/></name><operator pos:line="518" pos:column="23">-&gt;<pos:position pos:line="518" pos:column="28"/></operator><name pos:line="518" pos:column="25">server_supports_pipelining<pos:position pos:line="518" pos:column="51"/></name></name> <operator pos:line="518" pos:column="52">=<pos:position pos:line="518" pos:column="53"/></operator> <name pos:line="518" pos:column="54">TRUE<pos:position pos:line="518" pos:column="58"/></name></expr>;<pos:position pos:line="518" pos:column="59"/></expr_stmt>
                }<pos:position pos:line="519" pos:column="18"/></block></then></if></elseif></if>

                <switch pos:line="521" pos:column="17">switch<condition pos:line="521" pos:column="23">(<expr><name><name pos:line="521" pos:column="24">k<pos:position pos:line="521" pos:column="25"/></name><operator pos:line="521" pos:column="25">-&gt;<pos:position pos:line="521" pos:column="30"/></operator><name pos:line="521" pos:column="27">httpcode<pos:position pos:line="521" pos:column="35"/></name></name></expr>)<pos:position pos:line="521" pos:column="36"/></condition> <block pos:line="521" pos:column="37">{
                <case pos:line="522" pos:column="17">case <expr><literal type="number" pos:line="522" pos:column="22">204<pos:position pos:line="522" pos:column="25"/></literal></expr>:<pos:position pos:line="522" pos:column="26"/></case>
                  <comment type="block" pos:line="523" pos:column="19">/* (quote from RFC2616, section 10.2.5): The server has
                   * fulfilled the request but does not need to return an
                   * entity-body ... The 204 response MUST NOT include a
                   * message-body, and thus is always terminated by the first
                   * empty line after the header fields. */</comment>
                  <comment type="block" pos:line="528" pos:column="19">/* FALLTHROUGH */</comment>
                <case pos:line="529" pos:column="17">case <expr><literal type="number" pos:line="529" pos:column="22">416<pos:position pos:line="529" pos:column="25"/></literal></expr>:<pos:position pos:line="529" pos:column="26"/></case> <comment type="block" pos:line="529" pos:column="27">/* Requested Range Not Satisfiable, it has the
                             Content-Length: set as the "real" document but no
                             actual response is sent. */</comment>
                <case pos:line="532" pos:column="17">case <expr><literal type="number" pos:line="532" pos:column="22">304<pos:position pos:line="532" pos:column="25"/></literal></expr>:<pos:position pos:line="532" pos:column="26"/></case>
                  <comment type="block" pos:line="533" pos:column="19">/* (quote from RFC2616, section 10.3.5): The 304 response
                   * MUST NOT contain a message-body, and thus is always
                   * terminated by the first empty line after the header
                   * fields.  */</comment>
                  <expr_stmt><expr><name><name pos:line="537" pos:column="19">k<pos:position pos:line="537" pos:column="20"/></name><operator pos:line="537" pos:column="20">-&gt;<pos:position pos:line="537" pos:column="25"/></operator><name pos:line="537" pos:column="22">size<pos:position pos:line="537" pos:column="26"/></name></name><operator pos:line="537" pos:column="26">=<pos:position pos:line="537" pos:column="27"/></operator><literal type="number" pos:line="537" pos:column="27">0<pos:position pos:line="537" pos:column="28"/></literal></expr>;<pos:position pos:line="537" pos:column="29"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="538" pos:column="19">k<pos:position pos:line="538" pos:column="20"/></name><operator pos:line="538" pos:column="20">-&gt;<pos:position pos:line="538" pos:column="25"/></operator><name pos:line="538" pos:column="22">maxdownload<pos:position pos:line="538" pos:column="33"/></name></name><operator pos:line="538" pos:column="33">=<pos:position pos:line="538" pos:column="34"/></operator><literal type="number" pos:line="538" pos:column="34">0<pos:position pos:line="538" pos:column="35"/></literal></expr>;<pos:position pos:line="538" pos:column="36"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="539" pos:column="19">k<pos:position pos:line="539" pos:column="20"/></name><operator pos:line="539" pos:column="20">-&gt;<pos:position pos:line="539" pos:column="25"/></operator><name pos:line="539" pos:column="22">ignorecl<pos:position pos:line="539" pos:column="30"/></name></name> <operator pos:line="539" pos:column="31">=<pos:position pos:line="539" pos:column="32"/></operator> <name pos:line="539" pos:column="33">TRUE<pos:position pos:line="539" pos:column="37"/></name></expr>;<pos:position pos:line="539" pos:column="38"/></expr_stmt> <comment type="block" pos:line="539" pos:column="39">/* ignore Content-Length headers */</comment>
                  <break pos:line="540" pos:column="19">break;<pos:position pos:line="540" pos:column="25"/></break>
                <default pos:line="541" pos:column="17">default:<pos:position pos:line="541" pos:column="25"/></default>
                  <comment type="block" pos:line="542" pos:column="19">/* nothing */</comment>
                  <break pos:line="543" pos:column="19">break;<pos:position pos:line="543" pos:column="25"/></break>
                }<pos:position pos:line="544" pos:column="18"/></block></switch>
              }<pos:position pos:line="545" pos:column="16"/></block></then>
              <else pos:line="546" pos:column="15">else <block pos:line="546" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="547" pos:column="17">k<pos:position pos:line="547" pos:column="18"/></name><operator pos:line="547" pos:column="18">-&gt;<pos:position pos:line="547" pos:column="23"/></operator><name pos:line="547" pos:column="20">header<pos:position pos:line="547" pos:column="26"/></name></name> <operator pos:line="547" pos:column="27">=<pos:position pos:line="547" pos:column="28"/></operator> <name pos:line="547" pos:column="29">FALSE<pos:position pos:line="547" pos:column="34"/></name></expr>;<pos:position pos:line="547" pos:column="35"/></expr_stmt>   <comment type="block" pos:line="547" pos:column="38">/* this is not a header line */</comment>
                <break pos:line="548" pos:column="17">break;<pos:position pos:line="548" pos:column="23"/></break>
              }<pos:position pos:line="549" pos:column="16"/></block></else></if>
            }<pos:position pos:line="550" pos:column="14"/></block></then></if>

<cpp:ifdef pos:line="552" pos:column="1">#<cpp:directive pos:line="552" pos:column="2">ifdef<pos:position pos:line="552" pos:column="7"/></cpp:directive> <name pos:line="552" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="552" pos:column="29"/></name></cpp:ifdef>
            <comment type="block" pos:line="553" pos:column="13">/* convert from the network encoding */</comment>
            <expr_stmt><expr><name pos:line="554" pos:column="13">result<pos:position pos:line="554" pos:column="19"/></name> <operator pos:line="554" pos:column="20">=<pos:position pos:line="554" pos:column="21"/></operator> <call><name pos:line="554" pos:column="22">Curl_convert_from_network<pos:position pos:line="554" pos:column="47"/></name><argument_list pos:line="554" pos:column="47">(<argument><expr><name pos:line="554" pos:column="48">data<pos:position pos:line="554" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="554" pos:column="54">k<pos:position pos:line="554" pos:column="55"/></name><operator pos:line="554" pos:column="55">-&gt;<pos:position pos:line="554" pos:column="60"/></operator><name pos:line="554" pos:column="57">p<pos:position pos:line="554" pos:column="58"/></name></name></expr></argument>, <argument><expr><call><name pos:line="554" pos:column="60">strlen<pos:position pos:line="554" pos:column="66"/></name><argument_list pos:line="554" pos:column="66">(<argument><expr><name><name pos:line="554" pos:column="67">k<pos:position pos:line="554" pos:column="68"/></name><operator pos:line="554" pos:column="68">-&gt;<pos:position pos:line="554" pos:column="73"/></operator><name pos:line="554" pos:column="70">p<pos:position pos:line="554" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="554" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="554" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="554" pos:column="74"/></expr_stmt>
            <if pos:line="555" pos:column="13">if<condition pos:line="555" pos:column="15">(<expr><name pos:line="555" pos:column="16">CURLE_OK<pos:position pos:line="555" pos:column="24"/></name> <operator pos:line="555" pos:column="25">!=<pos:position pos:line="555" pos:column="27"/></operator> <name pos:line="555" pos:column="28">result<pos:position pos:line="555" pos:column="34"/></name></expr>)<pos:position pos:line="555" pos:column="35"/></condition><then pos:line="555" pos:column="35"> <block pos:line="555" pos:column="36">{
               <return pos:line="556" pos:column="16">return<expr><operator pos:line="556" pos:column="22">(<pos:position pos:line="556" pos:column="23"/></operator><name pos:line="556" pos:column="23">result<pos:position pos:line="556" pos:column="29"/></name><operator pos:line="556" pos:column="29">)<pos:position pos:line="556" pos:column="30"/></operator></expr>;<pos:position pos:line="556" pos:column="31"/></return>
            }<pos:position pos:line="557" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="558" pos:column="13">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
<cpp:endif pos:line="559" pos:column="1">#<cpp:directive pos:line="559" pos:column="2">endif<pos:position pos:line="559" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="559" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

            <comment type="block" pos:line="561" pos:column="13">/* Check for Content-Length: header lines to get size. Ignore
               the header completely if we get a 416 response as then we're
               resuming a document that we don't get, and this header contains
               info about the true size of the document we didn't get now. */</comment>
            <if pos:line="565" pos:column="13">if<condition pos:line="565" pos:column="15">(<expr><operator pos:line="565" pos:column="16">!<pos:position pos:line="565" pos:column="17"/></operator><name><name pos:line="565" pos:column="17">k<pos:position pos:line="565" pos:column="18"/></name><operator pos:line="565" pos:column="18">-&gt;<pos:position pos:line="565" pos:column="23"/></operator><name pos:line="565" pos:column="20">ignorecl<pos:position pos:line="565" pos:column="28"/></name></name> <operator pos:line="565" pos:column="29">&amp;&amp;<pos:position pos:line="565" pos:column="39"/></operator> <operator pos:line="565" pos:column="32">!<pos:position pos:line="565" pos:column="33"/></operator><name><name pos:line="565" pos:column="33">data<pos:position pos:line="565" pos:column="37"/></name><operator pos:line="565" pos:column="37">-&gt;<pos:position pos:line="565" pos:column="42"/></operator><name pos:line="565" pos:column="39">set<pos:position pos:line="565" pos:column="42"/></name><operator pos:line="565" pos:column="42">.<pos:position pos:line="565" pos:column="43"/></operator><name pos:line="565" pos:column="43">ignorecl<pos:position pos:line="565" pos:column="51"/></name></name> <operator pos:line="565" pos:column="52">&amp;&amp;<pos:position pos:line="565" pos:column="62"/></operator>
                <call><name pos:line="566" pos:column="17">checkprefix<pos:position pos:line="566" pos:column="28"/></name><argument_list pos:line="566" pos:column="28">(<argument><expr><literal type="string" pos:line="566" pos:column="29">"Content-Length:"<pos:position pos:line="566" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="566" pos:column="48">k<pos:position pos:line="566" pos:column="49"/></name><operator pos:line="566" pos:column="49">-&gt;<pos:position pos:line="566" pos:column="54"/></operator><name pos:line="566" pos:column="51">p<pos:position pos:line="566" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="566" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="566" pos:column="54"/></condition><then pos:line="566" pos:column="54"> <block pos:line="566" pos:column="55">{
              <expr_stmt><expr><name pos:line="567" pos:column="15">contentlength<pos:position pos:line="567" pos:column="28"/></name> <operator pos:line="567" pos:column="29">=<pos:position pos:line="567" pos:column="30"/></operator> <call><name pos:line="567" pos:column="31">curlx_strtoofft<pos:position pos:line="567" pos:column="46"/></name><argument_list pos:line="567" pos:column="46">(<argument><expr><name><name pos:line="567" pos:column="47">k<pos:position pos:line="567" pos:column="48"/></name><operator pos:line="567" pos:column="48">-&gt;<pos:position pos:line="567" pos:column="53"/></operator><name pos:line="567" pos:column="50">p<pos:position pos:line="567" pos:column="51"/></name></name><operator pos:line="567" pos:column="51">+<pos:position pos:line="567" pos:column="52"/></operator><literal type="number" pos:line="567" pos:column="52">15<pos:position pos:line="567" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="567" pos:column="56">NULL<pos:position pos:line="567" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="567" pos:column="62">10<pos:position pos:line="567" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="567" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="567" pos:column="66"/></expr_stmt>
              <if pos:line="568" pos:column="15">if<condition pos:line="568" pos:column="17">(<expr><name><name pos:line="568" pos:column="18">data<pos:position pos:line="568" pos:column="22"/></name><operator pos:line="568" pos:column="22">-&gt;<pos:position pos:line="568" pos:column="27"/></operator><name pos:line="568" pos:column="24">set<pos:position pos:line="568" pos:column="27"/></name><operator pos:line="568" pos:column="27">.<pos:position pos:line="568" pos:column="28"/></operator><name pos:line="568" pos:column="28">max_filesize<pos:position pos:line="568" pos:column="40"/></name></name> <operator pos:line="568" pos:column="41">&amp;&amp;<pos:position pos:line="568" pos:column="51"/></operator>
                  <name pos:line="569" pos:column="19">contentlength<pos:position pos:line="569" pos:column="32"/></name> <operator pos:line="569" pos:column="33">&gt;<pos:position pos:line="569" pos:column="37"/></operator> <name><name pos:line="569" pos:column="35">data<pos:position pos:line="569" pos:column="39"/></name><operator pos:line="569" pos:column="39">-&gt;<pos:position pos:line="569" pos:column="44"/></operator><name pos:line="569" pos:column="41">set<pos:position pos:line="569" pos:column="44"/></name><operator pos:line="569" pos:column="44">.<pos:position pos:line="569" pos:column="45"/></operator><name pos:line="569" pos:column="45">max_filesize<pos:position pos:line="569" pos:column="57"/></name></name></expr>)<pos:position pos:line="569" pos:column="58"/></condition><then pos:line="569" pos:column="58"> <block pos:line="569" pos:column="59">{
                <expr_stmt><expr><call><name pos:line="570" pos:column="17">failf<pos:position pos:line="570" pos:column="22"/></name><argument_list pos:line="570" pos:column="22">(<argument><expr><name pos:line="570" pos:column="23">data<pos:position pos:line="570" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="570" pos:column="29">"Maximum file size exceeded"<pos:position pos:line="570" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="570" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="570" pos:column="59"/></expr_stmt>
                <return pos:line="571" pos:column="17">return <expr><name pos:line="571" pos:column="24">CURLE_FILESIZE_EXCEEDED<pos:position pos:line="571" pos:column="47"/></name></expr>;<pos:position pos:line="571" pos:column="48"/></return>
              }<pos:position pos:line="572" pos:column="16"/></block></then></if>
              <if pos:line="573" pos:column="15">if<condition pos:line="573" pos:column="17">(<expr><name pos:line="573" pos:column="18">contentlength<pos:position pos:line="573" pos:column="31"/></name> <operator pos:line="573" pos:column="32">&gt;=<pos:position pos:line="573" pos:column="37"/></operator> <literal type="number" pos:line="573" pos:column="35">0<pos:position pos:line="573" pos:column="36"/></literal></expr>)<pos:position pos:line="573" pos:column="37"/></condition><then pos:line="573" pos:column="37"> <block pos:line="573" pos:column="38">{
                <expr_stmt><expr><name><name pos:line="574" pos:column="17">k<pos:position pos:line="574" pos:column="18"/></name><operator pos:line="574" pos:column="18">-&gt;<pos:position pos:line="574" pos:column="23"/></operator><name pos:line="574" pos:column="20">size<pos:position pos:line="574" pos:column="24"/></name></name> <operator pos:line="574" pos:column="25">=<pos:position pos:line="574" pos:column="26"/></operator> <name pos:line="574" pos:column="27">contentlength<pos:position pos:line="574" pos:column="40"/></name></expr>;<pos:position pos:line="574" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="575" pos:column="17">k<pos:position pos:line="575" pos:column="18"/></name><operator pos:line="575" pos:column="18">-&gt;<pos:position pos:line="575" pos:column="23"/></operator><name pos:line="575" pos:column="20">maxdownload<pos:position pos:line="575" pos:column="31"/></name></name> <operator pos:line="575" pos:column="32">=<pos:position pos:line="575" pos:column="33"/></operator> <name><name pos:line="575" pos:column="34">k<pos:position pos:line="575" pos:column="35"/></name><operator pos:line="575" pos:column="35">-&gt;<pos:position pos:line="575" pos:column="40"/></operator><name pos:line="575" pos:column="37">size<pos:position pos:line="575" pos:column="41"/></name></name></expr>;<pos:position pos:line="575" pos:column="42"/></expr_stmt>
                <comment type="block" pos:line="576" pos:column="17">/* we set the progress download size already at this point
                   just to make it easier for apps/callbacks to extract this
                   info as soon as possible */</comment>
                <expr_stmt><expr><call><name pos:line="579" pos:column="17">Curl_pgrsSetDownloadSize<pos:position pos:line="579" pos:column="41"/></name><argument_list pos:line="579" pos:column="41">(<argument><expr><name pos:line="579" pos:column="42">data<pos:position pos:line="579" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="579" pos:column="48">k<pos:position pos:line="579" pos:column="49"/></name><operator pos:line="579" pos:column="49">-&gt;<pos:position pos:line="579" pos:column="54"/></operator><name pos:line="579" pos:column="51">size<pos:position pos:line="579" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="579" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="579" pos:column="57"/></expr_stmt>
              }<pos:position pos:line="580" pos:column="16"/></block></then>
              <else pos:line="581" pos:column="15">else <block pos:line="581" pos:column="20">{
                <comment type="block" pos:line="582" pos:column="17">/* Negative Content-Length is really odd, and we know it
                   happens for example when older Apache servers send large
                   files */</comment>
                <expr_stmt><expr><name><name pos:line="585" pos:column="17">conn<pos:position pos:line="585" pos:column="21"/></name><operator pos:line="585" pos:column="21">-&gt;<pos:position pos:line="585" pos:column="26"/></operator><name pos:line="585" pos:column="23">bits<pos:position pos:line="585" pos:column="27"/></name><operator pos:line="585" pos:column="27">.<pos:position pos:line="585" pos:column="28"/></operator><name pos:line="585" pos:column="28">close<pos:position pos:line="585" pos:column="33"/></name></name> <operator pos:line="585" pos:column="34">=<pos:position pos:line="585" pos:column="35"/></operator> <name pos:line="585" pos:column="36">TRUE<pos:position pos:line="585" pos:column="40"/></name></expr>;<pos:position pos:line="585" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="586" pos:column="17">infof<pos:position pos:line="586" pos:column="22"/></name><argument_list pos:line="586" pos:column="22">(<argument><expr><name pos:line="586" pos:column="23">data<pos:position pos:line="586" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="586" pos:column="29">"Negative content-length: %"<pos:position pos:line="586" pos:column="57"/></literal> <name pos:line="586" pos:column="58">FORMAT_OFF_T<pos:position pos:line="586" pos:column="70"/></name>
                      <literal type="string" pos:line="587" pos:column="23">", closing after transfer\n"<pos:position pos:line="587" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="587" pos:column="53">contentlength<pos:position pos:line="587" pos:column="66"/></name></expr></argument>)<pos:position pos:line="587" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="587" pos:column="68"/></expr_stmt>
              }<pos:position pos:line="588" pos:column="16"/></block></else></if>
            }<pos:position pos:line="589" pos:column="14"/></block></then>
            <comment type="block" pos:line="590" pos:column="13">/* check for Content-Type: header lines to get the mime-type */</comment>
            <elseif pos:line="591" pos:column="13">else <if pos:line="591" pos:column="18">if<condition pos:line="591" pos:column="20">(<expr><call><name pos:line="591" pos:column="21">checkprefix<pos:position pos:line="591" pos:column="32"/></name><argument_list pos:line="591" pos:column="32">(<argument><expr><literal type="string" pos:line="591" pos:column="33">"Content-Type:"<pos:position pos:line="591" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="591" pos:column="50">k<pos:position pos:line="591" pos:column="51"/></name><operator pos:line="591" pos:column="51">-&gt;<pos:position pos:line="591" pos:column="56"/></operator><name pos:line="591" pos:column="53">p<pos:position pos:line="591" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="591" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="591" pos:column="56"/></condition><then pos:line="591" pos:column="56"> <block pos:line="591" pos:column="57">{
              <decl_stmt><decl><type><name pos:line="592" pos:column="15">char<pos:position pos:line="592" pos:column="19"/></name> <modifier pos:line="592" pos:column="20">*<pos:position pos:line="592" pos:column="21"/></modifier></type><name pos:line="592" pos:column="21">start<pos:position pos:line="592" pos:column="26"/></name></decl>;<pos:position pos:line="592" pos:column="27"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="593" pos:column="15">char<pos:position pos:line="593" pos:column="19"/></name> <modifier pos:line="593" pos:column="20">*<pos:position pos:line="593" pos:column="21"/></modifier></type><name pos:line="593" pos:column="21">end<pos:position pos:line="593" pos:column="24"/></name></decl>;<pos:position pos:line="593" pos:column="25"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="594" pos:column="15">size_t<pos:position pos:line="594" pos:column="21"/></name></type> <name pos:line="594" pos:column="22">len<pos:position pos:line="594" pos:column="25"/></name></decl>;<pos:position pos:line="594" pos:column="26"/></decl_stmt>

              <comment type="block" pos:line="596" pos:column="15">/* Find the first non-space letter */</comment>
              <for pos:line="597" pos:column="15">for<control pos:line="597" pos:column="18">(<init><expr><name pos:line="597" pos:column="19">start<pos:position pos:line="597" pos:column="24"/></name><operator pos:line="597" pos:column="24">=<pos:position pos:line="597" pos:column="25"/></operator><name><name pos:line="597" pos:column="25">k<pos:position pos:line="597" pos:column="26"/></name><operator pos:line="597" pos:column="26">-&gt;<pos:position pos:line="597" pos:column="31"/></operator><name pos:line="597" pos:column="28">p<pos:position pos:line="597" pos:column="29"/></name></name><operator pos:line="597" pos:column="29">+<pos:position pos:line="597" pos:column="30"/></operator><literal type="number" pos:line="597" pos:column="30">13<pos:position pos:line="597" pos:column="32"/></literal></expr>;<pos:position pos:line="597" pos:column="33"/></init>
                  <condition><expr><operator pos:line="598" pos:column="19">*<pos:position pos:line="598" pos:column="20"/></operator><name pos:line="598" pos:column="20">start<pos:position pos:line="598" pos:column="25"/></name> <operator pos:line="598" pos:column="26">&amp;&amp;<pos:position pos:line="598" pos:column="36"/></operator> <call><name pos:line="598" pos:column="29">ISSPACE<pos:position pos:line="598" pos:column="36"/></name><argument_list pos:line="598" pos:column="36">(<argument><expr><operator pos:line="598" pos:column="37">*<pos:position pos:line="598" pos:column="38"/></operator><name pos:line="598" pos:column="38">start<pos:position pos:line="598" pos:column="43"/></name></expr></argument>)<pos:position pos:line="598" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="598" pos:column="45"/></condition>
                  <incr><expr><name pos:line="599" pos:column="19">start<pos:position pos:line="599" pos:column="24"/></name><operator pos:line="599" pos:column="24">++<pos:position pos:line="599" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="599" pos:column="27"/></control>
                <block type="pseudo"><empty_stmt pos:line="600" pos:column="17">;<pos:position pos:line="600" pos:column="18"/></empty_stmt></block></for>  <comment type="block" pos:line="600" pos:column="20">/* empty loop */</comment>

              <comment type="block" pos:line="602" pos:column="15">/* data is now in the host encoding so
                 use '\r' and '\n' instead of 0x0d and 0x0a */</comment>
              <expr_stmt><expr><name pos:line="604" pos:column="15">end<pos:position pos:line="604" pos:column="18"/></name> <operator pos:line="604" pos:column="19">=<pos:position pos:line="604" pos:column="20"/></operator> <call><name pos:line="604" pos:column="21">strchr<pos:position pos:line="604" pos:column="27"/></name><argument_list pos:line="604" pos:column="27">(<argument><expr><name pos:line="604" pos:column="28">start<pos:position pos:line="604" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="604" pos:column="35">'\r'<pos:position pos:line="604" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="604" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="604" pos:column="41"/></expr_stmt>
              <if pos:line="605" pos:column="15">if<condition pos:line="605" pos:column="17">(<expr><operator pos:line="605" pos:column="18">!<pos:position pos:line="605" pos:column="19"/></operator><name pos:line="605" pos:column="19">end<pos:position pos:line="605" pos:column="22"/></name></expr>)<pos:position pos:line="605" pos:column="23"/></condition><then pos:line="605" pos:column="23">
                <block type="pseudo"><expr_stmt><expr><name pos:line="606" pos:column="17">end<pos:position pos:line="606" pos:column="20"/></name> <operator pos:line="606" pos:column="21">=<pos:position pos:line="606" pos:column="22"/></operator> <call><name pos:line="606" pos:column="23">strchr<pos:position pos:line="606" pos:column="29"/></name><argument_list pos:line="606" pos:column="29">(<argument><expr><name pos:line="606" pos:column="30">start<pos:position pos:line="606" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="606" pos:column="37">'\n'<pos:position pos:line="606" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="606" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="606" pos:column="43"/></expr_stmt></block></then></if>

              <if pos:line="608" pos:column="15">if<condition pos:line="608" pos:column="17">(<expr><name pos:line="608" pos:column="18">end<pos:position pos:line="608" pos:column="21"/></name></expr>)<pos:position pos:line="608" pos:column="22"/></condition><then pos:line="608" pos:column="22"> <block pos:line="608" pos:column="23">{
                <comment type="block" pos:line="609" pos:column="17">/* skip all trailing space letters */</comment>
                <for pos:line="610" pos:column="17">for<control pos:line="610" pos:column="20">(<init pos:line="610" pos:column="21">;<pos:position pos:line="610" pos:column="22"/></init> <condition><expr><call><name pos:line="610" pos:column="23">ISSPACE<pos:position pos:line="610" pos:column="30"/></name><argument_list pos:line="610" pos:column="30">(<argument><expr><operator pos:line="610" pos:column="31">*<pos:position pos:line="610" pos:column="32"/></operator><name pos:line="610" pos:column="32">end<pos:position pos:line="610" pos:column="35"/></name></expr></argument>)<pos:position pos:line="610" pos:column="36"/></argument_list></call> <operator pos:line="610" pos:column="37">&amp;&amp;<pos:position pos:line="610" pos:column="47"/></operator> <operator pos:line="610" pos:column="40">(<pos:position pos:line="610" pos:column="41"/></operator><name pos:line="610" pos:column="41">end<pos:position pos:line="610" pos:column="44"/></name> <operator pos:line="610" pos:column="45">&gt;<pos:position pos:line="610" pos:column="49"/></operator> <name pos:line="610" pos:column="47">start<pos:position pos:line="610" pos:column="52"/></name><operator pos:line="610" pos:column="52">)<pos:position pos:line="610" pos:column="53"/></operator></expr>;<pos:position pos:line="610" pos:column="54"/></condition> <incr><expr><name pos:line="610" pos:column="55">end<pos:position pos:line="610" pos:column="58"/></name><operator pos:line="610" pos:column="58">--<pos:position pos:line="610" pos:column="60"/></operator></expr></incr>)<pos:position pos:line="610" pos:column="61"/></control>
                  <block type="pseudo"><empty_stmt pos:line="611" pos:column="19">;<pos:position pos:line="611" pos:column="20"/></empty_stmt></block></for>  <comment type="block" pos:line="611" pos:column="22">/* empty loop */</comment>

                <comment type="block" pos:line="613" pos:column="17">/* get length of the type */</comment>
                <expr_stmt><expr><name pos:line="614" pos:column="17">len<pos:position pos:line="614" pos:column="20"/></name> <operator pos:line="614" pos:column="21">=<pos:position pos:line="614" pos:column="22"/></operator> <name pos:line="614" pos:column="23">end<pos:position pos:line="614" pos:column="26"/></name><operator pos:line="614" pos:column="26">-<pos:position pos:line="614" pos:column="27"/></operator><name pos:line="614" pos:column="27">start<pos:position pos:line="614" pos:column="32"/></name><operator pos:line="614" pos:column="32">+<pos:position pos:line="614" pos:column="33"/></operator><literal type="number" pos:line="614" pos:column="33">1<pos:position pos:line="614" pos:column="34"/></literal></expr>;<pos:position pos:line="614" pos:column="35"/></expr_stmt>

                <comment type="block" pos:line="616" pos:column="17">/* allocate memory of a cloned copy */</comment>
                <expr_stmt><expr><call><name pos:line="617" pos:column="17">Curl_safefree<pos:position pos:line="617" pos:column="30"/></name><argument_list pos:line="617" pos:column="30">(<argument><expr><name><name pos:line="617" pos:column="31">data<pos:position pos:line="617" pos:column="35"/></name><operator pos:line="617" pos:column="35">-&gt;<pos:position pos:line="617" pos:column="40"/></operator><name pos:line="617" pos:column="37">info<pos:position pos:line="617" pos:column="41"/></name><operator pos:line="617" pos:column="41">.<pos:position pos:line="617" pos:column="42"/></operator><name pos:line="617" pos:column="42">contenttype<pos:position pos:line="617" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="617" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="617" pos:column="55"/></expr_stmt>

                <expr_stmt><expr><name><name pos:line="619" pos:column="17">data<pos:position pos:line="619" pos:column="21"/></name><operator pos:line="619" pos:column="21">-&gt;<pos:position pos:line="619" pos:column="26"/></operator><name pos:line="619" pos:column="23">info<pos:position pos:line="619" pos:column="27"/></name><operator pos:line="619" pos:column="27">.<pos:position pos:line="619" pos:column="28"/></operator><name pos:line="619" pos:column="28">contenttype<pos:position pos:line="619" pos:column="39"/></name></name> <operator pos:line="619" pos:column="40">=<pos:position pos:line="619" pos:column="41"/></operator> <call><name pos:line="619" pos:column="42">malloc<pos:position pos:line="619" pos:column="48"/></name><argument_list pos:line="619" pos:column="48">(<argument><expr><name pos:line="619" pos:column="49">len<pos:position pos:line="619" pos:column="52"/></name> <operator pos:line="619" pos:column="53">+<pos:position pos:line="619" pos:column="54"/></operator> <literal type="number" pos:line="619" pos:column="55">1<pos:position pos:line="619" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="619" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="619" pos:column="58"/></expr_stmt>
                <if pos:line="620" pos:column="17">if<condition pos:line="620" pos:column="19">(<expr><name pos:line="620" pos:column="20">NULL<pos:position pos:line="620" pos:column="24"/></name> <operator pos:line="620" pos:column="25">==<pos:position pos:line="620" pos:column="27"/></operator> <name><name pos:line="620" pos:column="28">data<pos:position pos:line="620" pos:column="32"/></name><operator pos:line="620" pos:column="32">-&gt;<pos:position pos:line="620" pos:column="37"/></operator><name pos:line="620" pos:column="34">info<pos:position pos:line="620" pos:column="38"/></name><operator pos:line="620" pos:column="38">.<pos:position pos:line="620" pos:column="39"/></operator><name pos:line="620" pos:column="39">contenttype<pos:position pos:line="620" pos:column="50"/></name></name></expr>)<pos:position pos:line="620" pos:column="51"/></condition><then pos:line="620" pos:column="51">
                  <block type="pseudo"><return pos:line="621" pos:column="19">return <expr><name pos:line="621" pos:column="26">CURLE_OUT_OF_MEMORY<pos:position pos:line="621" pos:column="45"/></name></expr>;<pos:position pos:line="621" pos:column="46"/></return></block></then></if>

                <comment type="block" pos:line="623" pos:column="17">/* copy the content-type string */</comment>
                <expr_stmt><expr><call><name pos:line="624" pos:column="17">memcpy<pos:position pos:line="624" pos:column="23"/></name><argument_list pos:line="624" pos:column="23">(<argument><expr><name><name pos:line="624" pos:column="24">data<pos:position pos:line="624" pos:column="28"/></name><operator pos:line="624" pos:column="28">-&gt;<pos:position pos:line="624" pos:column="33"/></operator><name pos:line="624" pos:column="30">info<pos:position pos:line="624" pos:column="34"/></name><operator pos:line="624" pos:column="34">.<pos:position pos:line="624" pos:column="35"/></operator><name pos:line="624" pos:column="35">contenttype<pos:position pos:line="624" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="624" pos:column="48">start<pos:position pos:line="624" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="624" pos:column="55">len<pos:position pos:line="624" pos:column="58"/></name></expr></argument>)<pos:position pos:line="624" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="624" pos:column="60"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="625" pos:column="17">data<pos:position pos:line="625" pos:column="21"/></name><operator pos:line="625" pos:column="21">-&gt;<pos:position pos:line="625" pos:column="26"/></operator><name pos:line="625" pos:column="23">info<pos:position pos:line="625" pos:column="27"/></name><operator pos:line="625" pos:column="27">.<pos:position pos:line="625" pos:column="28"/></operator><name pos:line="625" pos:column="28">contenttype<pos:position pos:line="625" pos:column="39"/></name><index pos:line="625" pos:column="39">[<expr><name pos:line="625" pos:column="40">len<pos:position pos:line="625" pos:column="43"/></name></expr>]<pos:position pos:line="625" pos:column="44"/></index></name> <operator pos:line="625" pos:column="45">=<pos:position pos:line="625" pos:column="46"/></operator> <literal type="number" pos:line="625" pos:column="47">0<pos:position pos:line="625" pos:column="48"/></literal></expr>;<pos:position pos:line="625" pos:column="49"/></expr_stmt> <comment type="block" pos:line="625" pos:column="50">/* zero terminate */</comment>
              }<pos:position pos:line="626" pos:column="16"/></block></then></if>
            }<pos:position pos:line="627" pos:column="14"/></block></then></if></elseif>
<cpp:ifndef pos:line="628" pos:column="1">#<cpp:directive pos:line="628" pos:column="2">ifndef<pos:position pos:line="628" pos:column="8"/></cpp:directive> <name pos:line="628" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="628" pos:column="26"/></name></cpp:ifndef>
            <elseif pos:line="629" pos:column="13">else <if pos:line="629" pos:column="18">if<condition pos:line="629" pos:column="20">(<expr><operator pos:line="629" pos:column="21">(<pos:position pos:line="629" pos:column="22"/></operator><name><name pos:line="629" pos:column="22">k<pos:position pos:line="629" pos:column="23"/></name><operator pos:line="629" pos:column="23">-&gt;<pos:position pos:line="629" pos:column="28"/></operator><name pos:line="629" pos:column="25">httpversion<pos:position pos:line="629" pos:column="36"/></name></name> <operator pos:line="629" pos:column="37">==<pos:position pos:line="629" pos:column="39"/></operator> <literal type="number" pos:line="629" pos:column="40">10<pos:position pos:line="629" pos:column="42"/></literal><operator pos:line="629" pos:column="42">)<pos:position pos:line="629" pos:column="43"/></operator> <operator pos:line="629" pos:column="44">&amp;&amp;<pos:position pos:line="629" pos:column="54"/></operator>
                    <name><name pos:line="630" pos:column="21">conn<pos:position pos:line="630" pos:column="25"/></name><operator pos:line="630" pos:column="25">-&gt;<pos:position pos:line="630" pos:column="30"/></operator><name pos:line="630" pos:column="27">bits<pos:position pos:line="630" pos:column="31"/></name><operator pos:line="630" pos:column="31">.<pos:position pos:line="630" pos:column="32"/></operator><name pos:line="630" pos:column="32">httpproxy<pos:position pos:line="630" pos:column="41"/></name></name> <operator pos:line="630" pos:column="42">&amp;&amp;<pos:position pos:line="630" pos:column="52"/></operator>
                    <call><name pos:line="631" pos:column="21">Curl_compareheader<pos:position pos:line="631" pos:column="39"/></name><argument_list pos:line="631" pos:column="39">(<argument><expr><name><name pos:line="631" pos:column="40">k<pos:position pos:line="631" pos:column="41"/></name><operator pos:line="631" pos:column="41">-&gt;<pos:position pos:line="631" pos:column="46"/></operator><name pos:line="631" pos:column="43">p<pos:position pos:line="631" pos:column="44"/></name></name></expr></argument>,
                                       <argument><expr><literal type="string" pos:line="632" pos:column="40">"Proxy-Connection:"<pos:position pos:line="632" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="632" pos:column="61">"keep-alive"<pos:position pos:line="632" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="632" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="632" pos:column="75"/></condition><then pos:line="632" pos:column="75"> <block pos:line="632" pos:column="76">{
              <comment type="block" pos:line="633" pos:column="15">/*
               * When a HTTP/1.0 reply comes when using a proxy, the
               * 'Proxy-Connection: keep-alive' line tells us the
               * connection will be kept alive for our pleasure.
               * Default action for 1.0 is to close.
               */</comment>
              <expr_stmt><expr><name><name pos:line="639" pos:column="15">conn<pos:position pos:line="639" pos:column="19"/></name><operator pos:line="639" pos:column="19">-&gt;<pos:position pos:line="639" pos:column="24"/></operator><name pos:line="639" pos:column="21">bits<pos:position pos:line="639" pos:column="25"/></name><operator pos:line="639" pos:column="25">.<pos:position pos:line="639" pos:column="26"/></operator><name pos:line="639" pos:column="26">close<pos:position pos:line="639" pos:column="31"/></name></name> <operator pos:line="639" pos:column="32">=<pos:position pos:line="639" pos:column="33"/></operator> <name pos:line="639" pos:column="34">FALSE<pos:position pos:line="639" pos:column="39"/></name></expr>;<pos:position pos:line="639" pos:column="40"/></expr_stmt> <comment type="block" pos:line="639" pos:column="41">/* don't close when done */</comment>
              <expr_stmt><expr><call><name pos:line="640" pos:column="15">infof<pos:position pos:line="640" pos:column="20"/></name><argument_list pos:line="640" pos:column="20">(<argument><expr><name pos:line="640" pos:column="21">data<pos:position pos:line="640" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="640" pos:column="27">"HTTP/1.0 proxy connection set to keep alive!\n"<pos:position pos:line="640" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="640" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="640" pos:column="77"/></expr_stmt>
            }<pos:position pos:line="641" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="642" pos:column="13">else <if pos:line="642" pos:column="18">if<condition pos:line="642" pos:column="20">(<expr><operator pos:line="642" pos:column="21">(<pos:position pos:line="642" pos:column="22"/></operator><name><name pos:line="642" pos:column="22">k<pos:position pos:line="642" pos:column="23"/></name><operator pos:line="642" pos:column="23">-&gt;<pos:position pos:line="642" pos:column="28"/></operator><name pos:line="642" pos:column="25">httpversion<pos:position pos:line="642" pos:column="36"/></name></name> <operator pos:line="642" pos:column="37">==<pos:position pos:line="642" pos:column="39"/></operator> <literal type="number" pos:line="642" pos:column="40">11<pos:position pos:line="642" pos:column="42"/></literal><operator pos:line="642" pos:column="42">)<pos:position pos:line="642" pos:column="43"/></operator> <operator pos:line="642" pos:column="44">&amp;&amp;<pos:position pos:line="642" pos:column="54"/></operator>
                    <name><name pos:line="643" pos:column="21">conn<pos:position pos:line="643" pos:column="25"/></name><operator pos:line="643" pos:column="25">-&gt;<pos:position pos:line="643" pos:column="30"/></operator><name pos:line="643" pos:column="27">bits<pos:position pos:line="643" pos:column="31"/></name><operator pos:line="643" pos:column="31">.<pos:position pos:line="643" pos:column="32"/></operator><name pos:line="643" pos:column="32">httpproxy<pos:position pos:line="643" pos:column="41"/></name></name> <operator pos:line="643" pos:column="42">&amp;&amp;<pos:position pos:line="643" pos:column="52"/></operator>
                    <call><name pos:line="644" pos:column="21">Curl_compareheader<pos:position pos:line="644" pos:column="39"/></name><argument_list pos:line="644" pos:column="39">(<argument><expr><name><name pos:line="644" pos:column="40">k<pos:position pos:line="644" pos:column="41"/></name><operator pos:line="644" pos:column="41">-&gt;<pos:position pos:line="644" pos:column="46"/></operator><name pos:line="644" pos:column="43">p<pos:position pos:line="644" pos:column="44"/></name></name></expr></argument>,
                                       <argument><expr><literal type="string" pos:line="645" pos:column="40">"Proxy-Connection:"<pos:position pos:line="645" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="645" pos:column="61">"close"<pos:position pos:line="645" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="645" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="645" pos:column="70"/></condition><then pos:line="645" pos:column="70"> <block pos:line="645" pos:column="71">{
              <comment type="block" pos:line="646" pos:column="15">/*
               * We get a HTTP/1.1 response from a proxy and it says it'll
               * close down after this transfer.
               */</comment>
              <expr_stmt><expr><name><name pos:line="650" pos:column="15">conn<pos:position pos:line="650" pos:column="19"/></name><operator pos:line="650" pos:column="19">-&gt;<pos:position pos:line="650" pos:column="24"/></operator><name pos:line="650" pos:column="21">bits<pos:position pos:line="650" pos:column="25"/></name><operator pos:line="650" pos:column="25">.<pos:position pos:line="650" pos:column="26"/></operator><name pos:line="650" pos:column="26">close<pos:position pos:line="650" pos:column="31"/></name></name> <operator pos:line="650" pos:column="32">=<pos:position pos:line="650" pos:column="33"/></operator> <name pos:line="650" pos:column="34">TRUE<pos:position pos:line="650" pos:column="38"/></name></expr>;<pos:position pos:line="650" pos:column="39"/></expr_stmt> <comment type="block" pos:line="650" pos:column="40">/* close when done */</comment>
              <expr_stmt><expr><call><name pos:line="651" pos:column="15">infof<pos:position pos:line="651" pos:column="20"/></name><argument_list pos:line="651" pos:column="20">(<argument><expr><name pos:line="651" pos:column="21">data<pos:position pos:line="651" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="651" pos:column="27">"HTTP/1.1 proxy connection set close!\n"<pos:position pos:line="651" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="651" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="651" pos:column="69"/></expr_stmt>
            }<pos:position pos:line="652" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="653" pos:column="13">else <if pos:line="653" pos:column="18">if<condition pos:line="653" pos:column="20">(<expr><operator pos:line="653" pos:column="21">(<pos:position pos:line="653" pos:column="22"/></operator><name><name pos:line="653" pos:column="22">k<pos:position pos:line="653" pos:column="23"/></name><operator pos:line="653" pos:column="23">-&gt;<pos:position pos:line="653" pos:column="28"/></operator><name pos:line="653" pos:column="25">httpversion<pos:position pos:line="653" pos:column="36"/></name></name> <operator pos:line="653" pos:column="37">==<pos:position pos:line="653" pos:column="39"/></operator> <literal type="number" pos:line="653" pos:column="40">10<pos:position pos:line="653" pos:column="42"/></literal><operator pos:line="653" pos:column="42">)<pos:position pos:line="653" pos:column="43"/></operator> <operator pos:line="653" pos:column="44">&amp;&amp;<pos:position pos:line="653" pos:column="54"/></operator>
                    <call><name pos:line="654" pos:column="21">Curl_compareheader<pos:position pos:line="654" pos:column="39"/></name><argument_list pos:line="654" pos:column="39">(<argument><expr><name><name pos:line="654" pos:column="40">k<pos:position pos:line="654" pos:column="41"/></name><operator pos:line="654" pos:column="41">-&gt;<pos:position pos:line="654" pos:column="46"/></operator><name pos:line="654" pos:column="43">p<pos:position pos:line="654" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="654" pos:column="46">"Connection:"<pos:position pos:line="654" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="654" pos:column="61">"keep-alive"<pos:position pos:line="654" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="654" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="654" pos:column="75"/></condition><then pos:line="654" pos:column="75"> <block pos:line="654" pos:column="76">{
              <comment type="block" pos:line="655" pos:column="15">/*
               * A HTTP/1.0 reply with the 'Connection: keep-alive' line
               * tells us the connection will be kept alive for our
               * pleasure.  Default action for 1.0 is to close.
               *
               * [RFC2068, section 19.7.1] */</comment>
              <expr_stmt><expr><name><name pos:line="661" pos:column="15">conn<pos:position pos:line="661" pos:column="19"/></name><operator pos:line="661" pos:column="19">-&gt;<pos:position pos:line="661" pos:column="24"/></operator><name pos:line="661" pos:column="21">bits<pos:position pos:line="661" pos:column="25"/></name><operator pos:line="661" pos:column="25">.<pos:position pos:line="661" pos:column="26"/></operator><name pos:line="661" pos:column="26">close<pos:position pos:line="661" pos:column="31"/></name></name> <operator pos:line="661" pos:column="32">=<pos:position pos:line="661" pos:column="33"/></operator> <name pos:line="661" pos:column="34">FALSE<pos:position pos:line="661" pos:column="39"/></name></expr>;<pos:position pos:line="661" pos:column="40"/></expr_stmt> <comment type="block" pos:line="661" pos:column="41">/* don't close when done */</comment>
              <expr_stmt><expr><call><name pos:line="662" pos:column="15">infof<pos:position pos:line="662" pos:column="20"/></name><argument_list pos:line="662" pos:column="20">(<argument><expr><name pos:line="662" pos:column="21">data<pos:position pos:line="662" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="662" pos:column="27">"HTTP/1.0 connection set to keep alive!\n"<pos:position pos:line="662" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="662" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="662" pos:column="71"/></expr_stmt>
            }<pos:position pos:line="663" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="664" pos:column="13">else <if pos:line="664" pos:column="18">if<condition pos:line="664" pos:column="20">(<expr><call><name pos:line="664" pos:column="21">Curl_compareheader<pos:position pos:line="664" pos:column="39"/></name><argument_list pos:line="664" pos:column="39">(<argument><expr><name><name pos:line="664" pos:column="40">k<pos:position pos:line="664" pos:column="41"/></name><operator pos:line="664" pos:column="41">-&gt;<pos:position pos:line="664" pos:column="46"/></operator><name pos:line="664" pos:column="43">p<pos:position pos:line="664" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="664" pos:column="46">"Connection:"<pos:position pos:line="664" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="664" pos:column="61">"close"<pos:position pos:line="664" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="664" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="664" pos:column="70"/></condition><then pos:line="664" pos:column="70"> <block pos:line="664" pos:column="71">{
              <comment type="block" pos:line="665" pos:column="15">/*
               * [RFC 2616, section 8.1.2.1]
               * "Connection: close" is HTTP/1.1 language and means that
               * the connection will close when this request has been
               * served.
               */</comment>
              <expr_stmt><expr><name><name pos:line="671" pos:column="15">conn<pos:position pos:line="671" pos:column="19"/></name><operator pos:line="671" pos:column="19">-&gt;<pos:position pos:line="671" pos:column="24"/></operator><name pos:line="671" pos:column="21">bits<pos:position pos:line="671" pos:column="25"/></name><operator pos:line="671" pos:column="25">.<pos:position pos:line="671" pos:column="26"/></operator><name pos:line="671" pos:column="26">close<pos:position pos:line="671" pos:column="31"/></name></name> <operator pos:line="671" pos:column="32">=<pos:position pos:line="671" pos:column="33"/></operator> <name pos:line="671" pos:column="34">TRUE<pos:position pos:line="671" pos:column="38"/></name></expr>;<pos:position pos:line="671" pos:column="39"/></expr_stmt> <comment type="block" pos:line="671" pos:column="40">/* close when done */</comment>
            }<pos:position pos:line="672" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="673" pos:column="13">else <if pos:line="673" pos:column="18">if<condition pos:line="673" pos:column="20">(<expr><call><name pos:line="673" pos:column="21">Curl_compareheader<pos:position pos:line="673" pos:column="39"/></name><argument_list pos:line="673" pos:column="39">(<argument><expr><name><name pos:line="673" pos:column="40">k<pos:position pos:line="673" pos:column="41"/></name><operator pos:line="673" pos:column="41">-&gt;<pos:position pos:line="673" pos:column="46"/></operator><name pos:line="673" pos:column="43">p<pos:position pos:line="673" pos:column="44"/></name></name></expr></argument>,
                                        <argument><expr><literal type="string" pos:line="674" pos:column="41">"Transfer-Encoding:"<pos:position pos:line="674" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="674" pos:column="63">"chunked"<pos:position pos:line="674" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="674" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="674" pos:column="74"/></condition><then pos:line="674" pos:column="74"> <block pos:line="674" pos:column="75">{
              <comment type="block" pos:line="675" pos:column="15">/*
               * [RFC 2616, section 3.6.1] A 'chunked' transfer encoding
               * means that the server will send a series of "chunks". Each
               * chunk starts with line with info (including size of the
               * coming block) (terminated with CRLF), then a block of data
               * with the previously mentioned size. There can be any amount
               * of chunks, and a chunk-data set to zero signals the
               * end-of-chunks. */</comment>
              <expr_stmt><expr><name><name pos:line="683" pos:column="15">k<pos:position pos:line="683" pos:column="16"/></name><operator pos:line="683" pos:column="16">-&gt;<pos:position pos:line="683" pos:column="21"/></operator><name pos:line="683" pos:column="18">chunk<pos:position pos:line="683" pos:column="23"/></name></name> <operator pos:line="683" pos:column="24">=<pos:position pos:line="683" pos:column="25"/></operator> <name pos:line="683" pos:column="26">TRUE<pos:position pos:line="683" pos:column="30"/></name></expr>;<pos:position pos:line="683" pos:column="31"/></expr_stmt> <comment type="block" pos:line="683" pos:column="32">/* chunks coming our way */</comment>

              <comment type="block" pos:line="685" pos:column="15">/* init our chunky engine */</comment>
              <expr_stmt><expr><call><name pos:line="686" pos:column="15">Curl_httpchunk_init<pos:position pos:line="686" pos:column="34"/></name><argument_list pos:line="686" pos:column="34">(<argument><expr><name pos:line="686" pos:column="35">conn<pos:position pos:line="686" pos:column="39"/></name></expr></argument>)<pos:position pos:line="686" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="686" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="687" pos:column="14"/></block></then></if></elseif>

            <elseif pos:line="689" pos:column="13">else <if pos:line="689" pos:column="18">if<condition pos:line="689" pos:column="20">(<expr><call><name pos:line="689" pos:column="21">checkprefix<pos:position pos:line="689" pos:column="32"/></name><argument_list pos:line="689" pos:column="32">(<argument><expr><literal type="string" pos:line="689" pos:column="33">"Trailer:"<pos:position pos:line="689" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="689" pos:column="45">k<pos:position pos:line="689" pos:column="46"/></name><operator pos:line="689" pos:column="46">-&gt;<pos:position pos:line="689" pos:column="51"/></operator><name pos:line="689" pos:column="48">p<pos:position pos:line="689" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="689" pos:column="50"/></argument_list></call> <operator pos:line="689" pos:column="51">||<pos:position pos:line="689" pos:column="53"/></operator>
                     <call><name pos:line="690" pos:column="22">checkprefix<pos:position pos:line="690" pos:column="33"/></name><argument_list pos:line="690" pos:column="33">(<argument><expr><literal type="string" pos:line="690" pos:column="34">"Trailers:"<pos:position pos:line="690" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="690" pos:column="47">k<pos:position pos:line="690" pos:column="48"/></name><operator pos:line="690" pos:column="48">-&gt;<pos:position pos:line="690" pos:column="53"/></operator><name pos:line="690" pos:column="50">p<pos:position pos:line="690" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="690" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="690" pos:column="53"/></condition><then pos:line="690" pos:column="53"> <block pos:line="690" pos:column="54">{
              <comment type="block" pos:line="691" pos:column="15">/*
               * This test helps Curl_httpchunk_read() to determine to look
               * for well formed trailers after the zero chunksize record. In
               * this case a CRLF is required after the zero chunksize record
               * when no trailers are sent, or after the last trailer record.
               *
               * It seems both Trailer: and Trailers: occur in the wild.
               */</comment>
              <expr_stmt><expr><name><name pos:line="699" pos:column="15">k<pos:position pos:line="699" pos:column="16"/></name><operator pos:line="699" pos:column="16">-&gt;<pos:position pos:line="699" pos:column="21"/></operator><name pos:line="699" pos:column="18">trailerhdrpresent<pos:position pos:line="699" pos:column="35"/></name></name> <operator pos:line="699" pos:column="36">=<pos:position pos:line="699" pos:column="37"/></operator> <name pos:line="699" pos:column="38">TRUE<pos:position pos:line="699" pos:column="42"/></name></expr>;<pos:position pos:line="699" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="700" pos:column="14"/></block></then></if></elseif>

            <elseif pos:line="702" pos:column="13">else <if pos:line="702" pos:column="18">if<condition pos:line="702" pos:column="20">(<expr><call><name pos:line="702" pos:column="21">checkprefix<pos:position pos:line="702" pos:column="32"/></name><argument_list pos:line="702" pos:column="32">(<argument><expr><literal type="string" pos:line="702" pos:column="33">"Content-Encoding:"<pos:position pos:line="702" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="702" pos:column="54">k<pos:position pos:line="702" pos:column="55"/></name><operator pos:line="702" pos:column="55">-&gt;<pos:position pos:line="702" pos:column="60"/></operator><name pos:line="702" pos:column="57">p<pos:position pos:line="702" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="702" pos:column="59"/></argument_list></call> <operator pos:line="702" pos:column="60">&amp;&amp;<pos:position pos:line="702" pos:column="70"/></operator>
                     <name><name pos:line="703" pos:column="22">data<pos:position pos:line="703" pos:column="26"/></name><operator pos:line="703" pos:column="26">-&gt;<pos:position pos:line="703" pos:column="31"/></operator><name pos:line="703" pos:column="28">set<pos:position pos:line="703" pos:column="31"/></name><operator pos:line="703" pos:column="31">.<pos:position pos:line="703" pos:column="32"/></operator><name pos:line="703" pos:column="32">str<pos:position pos:line="703" pos:column="35"/></name><index pos:line="703" pos:column="35">[<expr><name pos:line="703" pos:column="36">STRING_ENCODING<pos:position pos:line="703" pos:column="51"/></name></expr>]<pos:position pos:line="703" pos:column="52"/></index></name></expr>)<pos:position pos:line="703" pos:column="53"/></condition><then pos:line="703" pos:column="53"> <block pos:line="703" pos:column="54">{
              <comment type="block" pos:line="704" pos:column="15">/*
               * Process Content-Encoding. Look for the values: identity,
               * gzip, deflate, compress, x-gzip and x-compress. x-gzip and
               * x-compress are the same as gzip and compress. (Sec 3.5 RFC
               * 2616). zlib cannot handle compress.  However, errors are
               * handled further down when the response body is processed
               */</comment>
              <decl_stmt><decl><type><name pos:line="711" pos:column="15">char<pos:position pos:line="711" pos:column="19"/></name> <modifier pos:line="711" pos:column="20">*<pos:position pos:line="711" pos:column="21"/></modifier></type><name pos:line="711" pos:column="21">start<pos:position pos:line="711" pos:column="26"/></name></decl>;<pos:position pos:line="711" pos:column="27"/></decl_stmt>

              <comment type="block" pos:line="713" pos:column="15">/* Find the first non-space letter */</comment>
              <for pos:line="714" pos:column="15">for<control pos:line="714" pos:column="18">(<init><expr><name pos:line="714" pos:column="19">start<pos:position pos:line="714" pos:column="24"/></name><operator pos:line="714" pos:column="24">=<pos:position pos:line="714" pos:column="25"/></operator><name><name pos:line="714" pos:column="25">k<pos:position pos:line="714" pos:column="26"/></name><operator pos:line="714" pos:column="26">-&gt;<pos:position pos:line="714" pos:column="31"/></operator><name pos:line="714" pos:column="28">p<pos:position pos:line="714" pos:column="29"/></name></name><operator pos:line="714" pos:column="29">+<pos:position pos:line="714" pos:column="30"/></operator><literal type="number" pos:line="714" pos:column="30">17<pos:position pos:line="714" pos:column="32"/></literal></expr>;<pos:position pos:line="714" pos:column="33"/></init>
                  <condition><expr><operator pos:line="715" pos:column="19">*<pos:position pos:line="715" pos:column="20"/></operator><name pos:line="715" pos:column="20">start<pos:position pos:line="715" pos:column="25"/></name> <operator pos:line="715" pos:column="26">&amp;&amp;<pos:position pos:line="715" pos:column="36"/></operator> <call><name pos:line="715" pos:column="29">ISSPACE<pos:position pos:line="715" pos:column="36"/></name><argument_list pos:line="715" pos:column="36">(<argument><expr><operator pos:line="715" pos:column="37">*<pos:position pos:line="715" pos:column="38"/></operator><name pos:line="715" pos:column="38">start<pos:position pos:line="715" pos:column="43"/></name></expr></argument>)<pos:position pos:line="715" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="715" pos:column="45"/></condition>
                  <incr><expr><name pos:line="716" pos:column="19">start<pos:position pos:line="716" pos:column="24"/></name><operator pos:line="716" pos:column="24">++<pos:position pos:line="716" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="716" pos:column="27"/></control>
                <block type="pseudo"><empty_stmt pos:line="717" pos:column="17">;<pos:position pos:line="717" pos:column="18"/></empty_stmt></block></for>  <comment type="block" pos:line="717" pos:column="20">/* empty loop */</comment>

              <comment type="block" pos:line="719" pos:column="15">/* Record the content-encoding for later use */</comment>
              <if pos:line="720" pos:column="15">if<condition pos:line="720" pos:column="17">(<expr><call><name pos:line="720" pos:column="18">checkprefix<pos:position pos:line="720" pos:column="29"/></name><argument_list pos:line="720" pos:column="29">(<argument><expr><literal type="string" pos:line="720" pos:column="30">"identity"<pos:position pos:line="720" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="720" pos:column="42">start<pos:position pos:line="720" pos:column="47"/></name></expr></argument>)<pos:position pos:line="720" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="720" pos:column="49"/></condition><then pos:line="720" pos:column="49">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="721" pos:column="17">k<pos:position pos:line="721" pos:column="18"/></name><operator pos:line="721" pos:column="18">-&gt;<pos:position pos:line="721" pos:column="23"/></operator><name pos:line="721" pos:column="20">content_encoding<pos:position pos:line="721" pos:column="36"/></name></name> <operator pos:line="721" pos:column="37">=<pos:position pos:line="721" pos:column="38"/></operator> <name pos:line="721" pos:column="39">IDENTITY<pos:position pos:line="721" pos:column="47"/></name></expr>;<pos:position pos:line="721" pos:column="48"/></expr_stmt></block></then>
              <elseif pos:line="722" pos:column="15">else <if pos:line="722" pos:column="20">if<condition pos:line="722" pos:column="22">(<expr><call><name pos:line="722" pos:column="23">checkprefix<pos:position pos:line="722" pos:column="34"/></name><argument_list pos:line="722" pos:column="34">(<argument><expr><literal type="string" pos:line="722" pos:column="35">"deflate"<pos:position pos:line="722" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="722" pos:column="46">start<pos:position pos:line="722" pos:column="51"/></name></expr></argument>)<pos:position pos:line="722" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="722" pos:column="53"/></condition><then pos:line="722" pos:column="53">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="723" pos:column="17">k<pos:position pos:line="723" pos:column="18"/></name><operator pos:line="723" pos:column="18">-&gt;<pos:position pos:line="723" pos:column="23"/></operator><name pos:line="723" pos:column="20">content_encoding<pos:position pos:line="723" pos:column="36"/></name></name> <operator pos:line="723" pos:column="37">=<pos:position pos:line="723" pos:column="38"/></operator> <name pos:line="723" pos:column="39">DEFLATE<pos:position pos:line="723" pos:column="46"/></name></expr>;<pos:position pos:line="723" pos:column="47"/></expr_stmt></block></then></if></elseif>
              <elseif pos:line="724" pos:column="15">else <if pos:line="724" pos:column="20">if<condition pos:line="724" pos:column="22">(<expr><call><name pos:line="724" pos:column="23">checkprefix<pos:position pos:line="724" pos:column="34"/></name><argument_list pos:line="724" pos:column="34">(<argument><expr><literal type="string" pos:line="724" pos:column="35">"gzip"<pos:position pos:line="724" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="724" pos:column="43">start<pos:position pos:line="724" pos:column="48"/></name></expr></argument>)<pos:position pos:line="724" pos:column="49"/></argument_list></call>
                       <operator pos:line="725" pos:column="24">||<pos:position pos:line="725" pos:column="26"/></operator> <call><name pos:line="725" pos:column="27">checkprefix<pos:position pos:line="725" pos:column="38"/></name><argument_list pos:line="725" pos:column="38">(<argument><expr><literal type="string" pos:line="725" pos:column="39">"x-gzip"<pos:position pos:line="725" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="725" pos:column="49">start<pos:position pos:line="725" pos:column="54"/></name></expr></argument>)<pos:position pos:line="725" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="725" pos:column="56"/></condition><then pos:line="725" pos:column="56">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="726" pos:column="17">k<pos:position pos:line="726" pos:column="18"/></name><operator pos:line="726" pos:column="18">-&gt;<pos:position pos:line="726" pos:column="23"/></operator><name pos:line="726" pos:column="20">content_encoding<pos:position pos:line="726" pos:column="36"/></name></name> <operator pos:line="726" pos:column="37">=<pos:position pos:line="726" pos:column="38"/></operator> <name pos:line="726" pos:column="39">GZIP<pos:position pos:line="726" pos:column="43"/></name></expr>;<pos:position pos:line="726" pos:column="44"/></expr_stmt></block></then></if></elseif>
              <elseif pos:line="727" pos:column="15">else <if pos:line="727" pos:column="20">if<condition pos:line="727" pos:column="22">(<expr><call><name pos:line="727" pos:column="23">checkprefix<pos:position pos:line="727" pos:column="34"/></name><argument_list pos:line="727" pos:column="34">(<argument><expr><literal type="string" pos:line="727" pos:column="35">"compress"<pos:position pos:line="727" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="727" pos:column="47">start<pos:position pos:line="727" pos:column="52"/></name></expr></argument>)<pos:position pos:line="727" pos:column="53"/></argument_list></call>
                       <operator pos:line="728" pos:column="24">||<pos:position pos:line="728" pos:column="26"/></operator> <call><name pos:line="728" pos:column="27">checkprefix<pos:position pos:line="728" pos:column="38"/></name><argument_list pos:line="728" pos:column="38">(<argument><expr><literal type="string" pos:line="728" pos:column="39">"x-compress"<pos:position pos:line="728" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="728" pos:column="53">start<pos:position pos:line="728" pos:column="58"/></name></expr></argument>)<pos:position pos:line="728" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="728" pos:column="60"/></condition><then pos:line="728" pos:column="60">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="729" pos:column="17">k<pos:position pos:line="729" pos:column="18"/></name><operator pos:line="729" pos:column="18">-&gt;<pos:position pos:line="729" pos:column="23"/></operator><name pos:line="729" pos:column="20">content_encoding<pos:position pos:line="729" pos:column="36"/></name></name> <operator pos:line="729" pos:column="37">=<pos:position pos:line="729" pos:column="38"/></operator> <name pos:line="729" pos:column="39">COMPRESS<pos:position pos:line="729" pos:column="47"/></name></expr>;<pos:position pos:line="729" pos:column="48"/></expr_stmt></block></then></if></elseif></if>
            }<pos:position pos:line="730" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="731" pos:column="13">else <if pos:line="731" pos:column="18">if<condition pos:line="731" pos:column="20">(<expr><call><name pos:line="731" pos:column="21">checkprefix<pos:position pos:line="731" pos:column="32"/></name><argument_list pos:line="731" pos:column="32">(<argument><expr><literal type="string" pos:line="731" pos:column="33">"Content-Range:"<pos:position pos:line="731" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="731" pos:column="51">k<pos:position pos:line="731" pos:column="52"/></name><operator pos:line="731" pos:column="52">-&gt;<pos:position pos:line="731" pos:column="57"/></operator><name pos:line="731" pos:column="54">p<pos:position pos:line="731" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="731" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="731" pos:column="57"/></condition><then pos:line="731" pos:column="57"> <block pos:line="731" pos:column="58">{
              <comment type="block" pos:line="732" pos:column="15">/* Content-Range: bytes [num]-
                 Content-Range: bytes: [num]-
                 Content-Range: [num]-

                 The second format was added since Sun's webserver
                 JavaWebServer/1.1.1 obviously sends the header this way!
                 The third added since some servers use that!
              */</comment>

              <decl_stmt><decl><type><name pos:line="741" pos:column="15">char<pos:position pos:line="741" pos:column="19"/></name> <modifier pos:line="741" pos:column="20">*<pos:position pos:line="741" pos:column="21"/></modifier></type><name pos:line="741" pos:column="21">ptr<pos:position pos:line="741" pos:column="24"/></name> <init pos:line="741" pos:column="25">= <expr><name><name pos:line="741" pos:column="27">k<pos:position pos:line="741" pos:column="28"/></name><operator pos:line="741" pos:column="28">-&gt;<pos:position pos:line="741" pos:column="33"/></operator><name pos:line="741" pos:column="30">p<pos:position pos:line="741" pos:column="31"/></name></name> <operator pos:line="741" pos:column="32">+<pos:position pos:line="741" pos:column="33"/></operator> <literal type="number" pos:line="741" pos:column="34">14<pos:position pos:line="741" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="741" pos:column="37"/></decl_stmt>

              <comment type="block" pos:line="743" pos:column="15">/* Move forward until first digit */</comment>
              <while pos:line="744" pos:column="15">while<condition pos:line="744" pos:column="20">(<expr><operator pos:line="744" pos:column="21">*<pos:position pos:line="744" pos:column="22"/></operator><name pos:line="744" pos:column="22">ptr<pos:position pos:line="744" pos:column="25"/></name> <operator pos:line="744" pos:column="26">&amp;&amp;<pos:position pos:line="744" pos:column="36"/></operator> <operator pos:line="744" pos:column="29">!<pos:position pos:line="744" pos:column="30"/></operator><call><name pos:line="744" pos:column="30">ISDIGIT<pos:position pos:line="744" pos:column="37"/></name><argument_list pos:line="744" pos:column="37">(<argument><expr><operator pos:line="744" pos:column="38">*<pos:position pos:line="744" pos:column="39"/></operator><name pos:line="744" pos:column="39">ptr<pos:position pos:line="744" pos:column="42"/></name></expr></argument>)<pos:position pos:line="744" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="744" pos:column="44"/></condition>
                <block type="pseudo"><expr_stmt><expr><name pos:line="745" pos:column="17">ptr<pos:position pos:line="745" pos:column="20"/></name><operator pos:line="745" pos:column="20">++<pos:position pos:line="745" pos:column="22"/></operator></expr>;<pos:position pos:line="745" pos:column="23"/></expr_stmt></block></while>

              <expr_stmt><expr><name><name pos:line="747" pos:column="15">k<pos:position pos:line="747" pos:column="16"/></name><operator pos:line="747" pos:column="16">-&gt;<pos:position pos:line="747" pos:column="21"/></operator><name pos:line="747" pos:column="18">offset<pos:position pos:line="747" pos:column="24"/></name></name> <operator pos:line="747" pos:column="25">=<pos:position pos:line="747" pos:column="26"/></operator> <call><name pos:line="747" pos:column="27">curlx_strtoofft<pos:position pos:line="747" pos:column="42"/></name><argument_list pos:line="747" pos:column="42">(<argument><expr><name pos:line="747" pos:column="43">ptr<pos:position pos:line="747" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="747" pos:column="48">NULL<pos:position pos:line="747" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="747" pos:column="54">10<pos:position pos:line="747" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="747" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="747" pos:column="58"/></expr_stmt>

              <if pos:line="749" pos:column="15">if<condition pos:line="749" pos:column="17">(<expr><name><name pos:line="749" pos:column="18">data<pos:position pos:line="749" pos:column="22"/></name><operator pos:line="749" pos:column="22">-&gt;<pos:position pos:line="749" pos:column="27"/></operator><name pos:line="749" pos:column="24">state<pos:position pos:line="749" pos:column="29"/></name><operator pos:line="749" pos:column="29">.<pos:position pos:line="749" pos:column="30"/></operator><name pos:line="749" pos:column="30">resume_from<pos:position pos:line="749" pos:column="41"/></name></name> <operator pos:line="749" pos:column="42">==<pos:position pos:line="749" pos:column="44"/></operator> <name><name pos:line="749" pos:column="45">k<pos:position pos:line="749" pos:column="46"/></name><operator pos:line="749" pos:column="46">-&gt;<pos:position pos:line="749" pos:column="51"/></operator><name pos:line="749" pos:column="48">offset<pos:position pos:line="749" pos:column="54"/></name></name></expr>)<pos:position pos:line="749" pos:column="55"/></condition><then pos:line="749" pos:column="55">
                <comment type="block" pos:line="750" pos:column="17">/* we asked for a resume and we got it */</comment>
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="751" pos:column="17">k<pos:position pos:line="751" pos:column="18"/></name><operator pos:line="751" pos:column="18">-&gt;<pos:position pos:line="751" pos:column="23"/></operator><name pos:line="751" pos:column="20">content_range<pos:position pos:line="751" pos:column="33"/></name></name> <operator pos:line="751" pos:column="34">=<pos:position pos:line="751" pos:column="35"/></operator> <name pos:line="751" pos:column="36">TRUE<pos:position pos:line="751" pos:column="40"/></name></expr>;<pos:position pos:line="751" pos:column="41"/></expr_stmt></block></then></if>
            }<pos:position pos:line="752" pos:column="14"/></block></then></if></elseif>
<cpp:if pos:line="753" pos:column="1">#<cpp:directive pos:line="753" pos:column="2">if<pos:position pos:line="753" pos:column="4"/></cpp:directive> <expr><operator pos:line="753" pos:column="5">!<pos:position pos:line="753" pos:column="6"/></operator><call><name pos:line="753" pos:column="6">defined<pos:position pos:line="753" pos:column="13"/></name><argument_list pos:line="753" pos:column="13">(<argument><expr><name pos:line="753" pos:column="14">CURL_DISABLE_COOKIES<pos:position pos:line="753" pos:column="34"/></name></expr></argument>)<pos:position pos:line="753" pos:column="35"/></argument_list></call></expr></cpp:if>
            <elseif pos:line="754" pos:column="13">else <if pos:line="754" pos:column="18">if<condition pos:line="754" pos:column="20">(<expr><name><name pos:line="754" pos:column="21">data<pos:position pos:line="754" pos:column="25"/></name><operator pos:line="754" pos:column="25">-&gt;<pos:position pos:line="754" pos:column="30"/></operator><name pos:line="754" pos:column="27">cookies<pos:position pos:line="754" pos:column="34"/></name></name> <operator pos:line="754" pos:column="35">&amp;&amp;<pos:position pos:line="754" pos:column="45"/></operator>
                    <call><name pos:line="755" pos:column="21">checkprefix<pos:position pos:line="755" pos:column="32"/></name><argument_list pos:line="755" pos:column="32">(<argument><expr><literal type="string" pos:line="755" pos:column="33">"Set-Cookie:"<pos:position pos:line="755" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="755" pos:column="48">k<pos:position pos:line="755" pos:column="49"/></name><operator pos:line="755" pos:column="49">-&gt;<pos:position pos:line="755" pos:column="54"/></operator><name pos:line="755" pos:column="51">p<pos:position pos:line="755" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="755" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="755" pos:column="54"/></condition><then pos:line="755" pos:column="54"> <block pos:line="755" pos:column="55">{
              <expr_stmt><expr><call><name pos:line="756" pos:column="15">Curl_share_lock<pos:position pos:line="756" pos:column="30"/></name><argument_list pos:line="756" pos:column="30">(<argument><expr><name pos:line="756" pos:column="31">data<pos:position pos:line="756" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="756" pos:column="37">CURL_LOCK_DATA_COOKIE<pos:position pos:line="756" pos:column="58"/></name></expr></argument>,
                              <argument><expr><name pos:line="757" pos:column="31">CURL_LOCK_ACCESS_SINGLE<pos:position pos:line="757" pos:column="54"/></name></expr></argument>)<pos:position pos:line="757" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="757" pos:column="56"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="758" pos:column="15">Curl_cookie_add<pos:position pos:line="758" pos:column="30"/></name><argument_list pos:line="758" pos:column="30">(<argument><expr><name pos:line="758" pos:column="31">data<pos:position pos:line="758" pos:column="35"/></name></expr></argument>,
                              <argument><expr><name><name pos:line="759" pos:column="31">data<pos:position pos:line="759" pos:column="35"/></name><operator pos:line="759" pos:column="35">-&gt;<pos:position pos:line="759" pos:column="40"/></operator><name pos:line="759" pos:column="37">cookies<pos:position pos:line="759" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="759" pos:column="46">TRUE<pos:position pos:line="759" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="759" pos:column="52">k<pos:position pos:line="759" pos:column="53"/></name><operator pos:line="759" pos:column="53">-&gt;<pos:position pos:line="759" pos:column="58"/></operator><name pos:line="759" pos:column="55">p<pos:position pos:line="759" pos:column="56"/></name></name><operator pos:line="759" pos:column="56">+<pos:position pos:line="759" pos:column="57"/></operator><literal type="number" pos:line="759" pos:column="57">11<pos:position pos:line="759" pos:column="59"/></literal></expr></argument>,
                              <comment type="block" pos:line="760" pos:column="31">/* If there is a custom-set Host: name, use it
                                 here, or else use real peer host name. */</comment>
                              <argument><expr><ternary><condition><expr><name><name pos:line="762" pos:column="31">conn<pos:position pos:line="762" pos:column="35"/></name><operator pos:line="762" pos:column="35">-&gt;<pos:position pos:line="762" pos:column="40"/></operator><name pos:line="762" pos:column="37">allocptr<pos:position pos:line="762" pos:column="45"/></name><operator pos:line="762" pos:column="45">.<pos:position pos:line="762" pos:column="46"/></operator><name pos:line="762" pos:column="46">cookiehost<pos:position pos:line="762" pos:column="56"/></name></name></expr>?<pos:position pos:line="762" pos:column="57"/></condition><then pos:line="762" pos:column="57">
                              <expr><name><name pos:line="763" pos:column="31">conn<pos:position pos:line="763" pos:column="35"/></name><operator pos:line="763" pos:column="35">-&gt;<pos:position pos:line="763" pos:column="40"/></operator><name pos:line="763" pos:column="37">allocptr<pos:position pos:line="763" pos:column="45"/></name><operator pos:line="763" pos:column="45">.<pos:position pos:line="763" pos:column="46"/></operator><name pos:line="763" pos:column="46">cookiehost<pos:position pos:line="763" pos:column="56"/></name></name></expr></then><else pos:line="763" pos:column="56">:<expr><name><name pos:line="763" pos:column="57">conn<pos:position pos:line="763" pos:column="61"/></name><operator pos:line="763" pos:column="61">-&gt;<pos:position pos:line="763" pos:column="66"/></operator><name pos:line="763" pos:column="63">host<pos:position pos:line="763" pos:column="67"/></name><operator pos:line="763" pos:column="67">.<pos:position pos:line="763" pos:column="68"/></operator><name pos:line="763" pos:column="68">name<pos:position pos:line="763" pos:column="72"/></name></name></expr></else></ternary></expr></argument>,
                              <argument><expr><name><name pos:line="764" pos:column="31">data<pos:position pos:line="764" pos:column="35"/></name><operator pos:line="764" pos:column="35">-&gt;<pos:position pos:line="764" pos:column="40"/></operator><name pos:line="764" pos:column="37">state<pos:position pos:line="764" pos:column="42"/></name><operator pos:line="764" pos:column="42">.<pos:position pos:line="764" pos:column="43"/></operator><name pos:line="764" pos:column="43">path<pos:position pos:line="764" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="764" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="764" pos:column="49"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="765" pos:column="15">Curl_share_unlock<pos:position pos:line="765" pos:column="32"/></name><argument_list pos:line="765" pos:column="32">(<argument><expr><name pos:line="765" pos:column="33">data<pos:position pos:line="765" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="765" pos:column="39">CURL_LOCK_DATA_COOKIE<pos:position pos:line="765" pos:column="60"/></name></expr></argument>)<pos:position pos:line="765" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="765" pos:column="62"/></expr_stmt>
            }<pos:position pos:line="766" pos:column="14"/></block></then></if></elseif>
<cpp:endif pos:line="767" pos:column="1">#<cpp:directive pos:line="767" pos:column="2">endif<pos:position pos:line="767" pos:column="7"/></cpp:directive></cpp:endif>
            <elseif pos:line="768" pos:column="13">else <if pos:line="768" pos:column="18">if<condition pos:line="768" pos:column="20">(<expr><call><name pos:line="768" pos:column="21">checkprefix<pos:position pos:line="768" pos:column="32"/></name><argument_list pos:line="768" pos:column="32">(<argument><expr><literal type="string" pos:line="768" pos:column="33">"Last-Modified:"<pos:position pos:line="768" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="768" pos:column="51">k<pos:position pos:line="768" pos:column="52"/></name><operator pos:line="768" pos:column="52">-&gt;<pos:position pos:line="768" pos:column="57"/></operator><name pos:line="768" pos:column="54">p<pos:position pos:line="768" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="768" pos:column="56"/></argument_list></call> <operator pos:line="768" pos:column="57">&amp;&amp;<pos:position pos:line="768" pos:column="67"/></operator>
                    <operator pos:line="769" pos:column="21">(<pos:position pos:line="769" pos:column="22"/></operator><name><name pos:line="769" pos:column="22">data<pos:position pos:line="769" pos:column="26"/></name><operator pos:line="769" pos:column="26">-&gt;<pos:position pos:line="769" pos:column="31"/></operator><name pos:line="769" pos:column="28">set<pos:position pos:line="769" pos:column="31"/></name><operator pos:line="769" pos:column="31">.<pos:position pos:line="769" pos:column="32"/></operator><name pos:line="769" pos:column="32">timecondition<pos:position pos:line="769" pos:column="45"/></name></name> <operator pos:line="769" pos:column="46">||<pos:position pos:line="769" pos:column="48"/></operator> <name><name pos:line="769" pos:column="49">data<pos:position pos:line="769" pos:column="53"/></name><operator pos:line="769" pos:column="53">-&gt;<pos:position pos:line="769" pos:column="58"/></operator><name pos:line="769" pos:column="55">set<pos:position pos:line="769" pos:column="58"/></name><operator pos:line="769" pos:column="58">.<pos:position pos:line="769" pos:column="59"/></operator><name pos:line="769" pos:column="59">get_filetime<pos:position pos:line="769" pos:column="71"/></name></name><operator pos:line="769" pos:column="71">)<pos:position pos:line="769" pos:column="72"/></operator></expr> )<pos:position pos:line="769" pos:column="74"/></condition><then pos:line="769" pos:column="74"> <block pos:line="769" pos:column="75">{
              <decl_stmt><decl><type><name pos:line="770" pos:column="15">time_t<pos:position pos:line="770" pos:column="21"/></name></type> <name pos:line="770" pos:column="22">secs<pos:position pos:line="770" pos:column="26"/></name><init pos:line="770" pos:column="26">=<expr><call><name pos:line="770" pos:column="27">time<pos:position pos:line="770" pos:column="31"/></name><argument_list pos:line="770" pos:column="31">(<argument><expr><name pos:line="770" pos:column="32">NULL<pos:position pos:line="770" pos:column="36"/></name></expr></argument>)<pos:position pos:line="770" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="770" pos:column="38"/></decl_stmt>
              <expr_stmt><expr><name><name pos:line="771" pos:column="15">k<pos:position pos:line="771" pos:column="16"/></name><operator pos:line="771" pos:column="16">-&gt;<pos:position pos:line="771" pos:column="21"/></operator><name pos:line="771" pos:column="18">timeofdoc<pos:position pos:line="771" pos:column="27"/></name></name> <operator pos:line="771" pos:column="28">=<pos:position pos:line="771" pos:column="29"/></operator> <call><name pos:line="771" pos:column="30">curl_getdate<pos:position pos:line="771" pos:column="42"/></name><argument_list pos:line="771" pos:column="42">(<argument><expr><name><name pos:line="771" pos:column="43">k<pos:position pos:line="771" pos:column="44"/></name><operator pos:line="771" pos:column="44">-&gt;<pos:position pos:line="771" pos:column="49"/></operator><name pos:line="771" pos:column="46">p<pos:position pos:line="771" pos:column="47"/></name></name><operator pos:line="771" pos:column="47">+<pos:position pos:line="771" pos:column="48"/></operator><call><name pos:line="771" pos:column="48">strlen<pos:position pos:line="771" pos:column="54"/></name><argument_list pos:line="771" pos:column="54">(<argument><expr><literal type="string" pos:line="771" pos:column="55">"Last-Modified:"<pos:position pos:line="771" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="771" pos:column="72"/></argument_list></call></expr></argument>,
                                          <argument><expr><operator pos:line="772" pos:column="43">&amp;<pos:position pos:line="772" pos:column="48"/></operator><name pos:line="772" pos:column="44">secs<pos:position pos:line="772" pos:column="48"/></name></expr></argument>)<pos:position pos:line="772" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="772" pos:column="50"/></expr_stmt>
              <if pos:line="773" pos:column="15">if<condition pos:line="773" pos:column="17">(<expr><name><name pos:line="773" pos:column="18">data<pos:position pos:line="773" pos:column="22"/></name><operator pos:line="773" pos:column="22">-&gt;<pos:position pos:line="773" pos:column="27"/></operator><name pos:line="773" pos:column="24">set<pos:position pos:line="773" pos:column="27"/></name><operator pos:line="773" pos:column="27">.<pos:position pos:line="773" pos:column="28"/></operator><name pos:line="773" pos:column="28">get_filetime<pos:position pos:line="773" pos:column="40"/></name></name></expr>)<pos:position pos:line="773" pos:column="41"/></condition><then pos:line="773" pos:column="41">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="774" pos:column="17">data<pos:position pos:line="774" pos:column="21"/></name><operator pos:line="774" pos:column="21">-&gt;<pos:position pos:line="774" pos:column="26"/></operator><name pos:line="774" pos:column="23">info<pos:position pos:line="774" pos:column="27"/></name><operator pos:line="774" pos:column="27">.<pos:position pos:line="774" pos:column="28"/></operator><name pos:line="774" pos:column="28">filetime<pos:position pos:line="774" pos:column="36"/></name></name> <operator pos:line="774" pos:column="37">=<pos:position pos:line="774" pos:column="38"/></operator> <operator pos:line="774" pos:column="39">(<pos:position pos:line="774" pos:column="40"/></operator><name pos:line="774" pos:column="40">long<pos:position pos:line="774" pos:column="44"/></name><operator pos:line="774" pos:column="44">)<pos:position pos:line="774" pos:column="45"/></operator><name><name pos:line="774" pos:column="45">k<pos:position pos:line="774" pos:column="46"/></name><operator pos:line="774" pos:column="46">-&gt;<pos:position pos:line="774" pos:column="51"/></operator><name pos:line="774" pos:column="48">timeofdoc<pos:position pos:line="774" pos:column="57"/></name></name></expr>;<pos:position pos:line="774" pos:column="58"/></expr_stmt></block></then></if>
            }<pos:position pos:line="775" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="776" pos:column="13">else <if pos:line="776" pos:column="18">if<condition pos:line="776" pos:column="20">(<expr><operator pos:line="776" pos:column="21">(<pos:position pos:line="776" pos:column="22"/></operator><call><name pos:line="776" pos:column="22">checkprefix<pos:position pos:line="776" pos:column="33"/></name><argument_list pos:line="776" pos:column="33">(<argument><expr><literal type="string" pos:line="776" pos:column="34">"WWW-Authenticate:"<pos:position pos:line="776" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="776" pos:column="55">k<pos:position pos:line="776" pos:column="56"/></name><operator pos:line="776" pos:column="56">-&gt;<pos:position pos:line="776" pos:column="61"/></operator><name pos:line="776" pos:column="58">p<pos:position pos:line="776" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="776" pos:column="60"/></argument_list></call> <operator pos:line="776" pos:column="61">&amp;&amp;<pos:position pos:line="776" pos:column="71"/></operator>
                     <operator pos:line="777" pos:column="22">(<pos:position pos:line="777" pos:column="23"/></operator><literal type="number" pos:line="777" pos:column="23">401<pos:position pos:line="777" pos:column="26"/></literal> <operator pos:line="777" pos:column="27">==<pos:position pos:line="777" pos:column="29"/></operator> <name><name pos:line="777" pos:column="30">k<pos:position pos:line="777" pos:column="31"/></name><operator pos:line="777" pos:column="31">-&gt;<pos:position pos:line="777" pos:column="36"/></operator><name pos:line="777" pos:column="33">httpcode<pos:position pos:line="777" pos:column="41"/></name></name><operator pos:line="777" pos:column="41">)<pos:position pos:line="777" pos:column="42"/></operator><operator pos:line="777" pos:column="42">)<pos:position pos:line="777" pos:column="43"/></operator> <operator pos:line="777" pos:column="44">||<pos:position pos:line="777" pos:column="46"/></operator>
                    <operator pos:line="778" pos:column="21">(<pos:position pos:line="778" pos:column="22"/></operator><call><name pos:line="778" pos:column="22">checkprefix<pos:position pos:line="778" pos:column="33"/></name><argument_list pos:line="778" pos:column="33">(<argument><expr><literal type="string" pos:line="778" pos:column="34">"Proxy-authenticate:"<pos:position pos:line="778" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="778" pos:column="57">k<pos:position pos:line="778" pos:column="58"/></name><operator pos:line="778" pos:column="58">-&gt;<pos:position pos:line="778" pos:column="63"/></operator><name pos:line="778" pos:column="60">p<pos:position pos:line="778" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="778" pos:column="62"/></argument_list></call> <operator pos:line="778" pos:column="63">&amp;&amp;<pos:position pos:line="778" pos:column="73"/></operator>
                     <operator pos:line="779" pos:column="22">(<pos:position pos:line="779" pos:column="23"/></operator><literal type="number" pos:line="779" pos:column="23">407<pos:position pos:line="779" pos:column="26"/></literal> <operator pos:line="779" pos:column="27">==<pos:position pos:line="779" pos:column="29"/></operator> <name><name pos:line="779" pos:column="30">k<pos:position pos:line="779" pos:column="31"/></name><operator pos:line="779" pos:column="31">-&gt;<pos:position pos:line="779" pos:column="36"/></operator><name pos:line="779" pos:column="33">httpcode<pos:position pos:line="779" pos:column="41"/></name></name><operator pos:line="779" pos:column="41">)<pos:position pos:line="779" pos:column="42"/></operator><operator pos:line="779" pos:column="42">)<pos:position pos:line="779" pos:column="43"/></operator></expr>)<pos:position pos:line="779" pos:column="44"/></condition><then pos:line="779" pos:column="44"> <block pos:line="779" pos:column="45">{
              <expr_stmt><expr><name pos:line="780" pos:column="15">result<pos:position pos:line="780" pos:column="21"/></name> <operator pos:line="780" pos:column="22">=<pos:position pos:line="780" pos:column="23"/></operator> <call><name pos:line="780" pos:column="24">Curl_http_input_auth<pos:position pos:line="780" pos:column="44"/></name><argument_list pos:line="780" pos:column="44">(<argument><expr><name pos:line="780" pos:column="45">conn<pos:position pos:line="780" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="780" pos:column="51">k<pos:position pos:line="780" pos:column="52"/></name><operator pos:line="780" pos:column="52">-&gt;<pos:position pos:line="780" pos:column="57"/></operator><name pos:line="780" pos:column="54">httpcode<pos:position pos:line="780" pos:column="62"/></name></name></expr></argument>, <argument><expr><name><name pos:line="780" pos:column="64">k<pos:position pos:line="780" pos:column="65"/></name><operator pos:line="780" pos:column="65">-&gt;<pos:position pos:line="780" pos:column="70"/></operator><name pos:line="780" pos:column="67">p<pos:position pos:line="780" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="780" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="780" pos:column="70"/></expr_stmt>
              <if pos:line="781" pos:column="15">if<condition pos:line="781" pos:column="17">(<expr><name pos:line="781" pos:column="18">result<pos:position pos:line="781" pos:column="24"/></name></expr>)<pos:position pos:line="781" pos:column="25"/></condition><then pos:line="781" pos:column="25">
                <block type="pseudo"><return pos:line="782" pos:column="17">return <expr><name pos:line="782" pos:column="24">result<pos:position pos:line="782" pos:column="30"/></name></expr>;<pos:position pos:line="782" pos:column="31"/></return></block></then></if>
            }<pos:position pos:line="783" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="784" pos:column="13">else <if pos:line="784" pos:column="18">if<condition pos:line="784" pos:column="20">(<expr><operator pos:line="784" pos:column="21">(<pos:position pos:line="784" pos:column="22"/></operator><name><name pos:line="784" pos:column="22">k<pos:position pos:line="784" pos:column="23"/></name><operator pos:line="784" pos:column="23">-&gt;<pos:position pos:line="784" pos:column="28"/></operator><name pos:line="784" pos:column="25">httpcode<pos:position pos:line="784" pos:column="33"/></name></name> <operator pos:line="784" pos:column="34">&gt;=<pos:position pos:line="784" pos:column="39"/></operator> <literal type="number" pos:line="784" pos:column="37">300<pos:position pos:line="784" pos:column="40"/></literal> <operator pos:line="784" pos:column="41">&amp;&amp;<pos:position pos:line="784" pos:column="51"/></operator> <name><name pos:line="784" pos:column="44">k<pos:position pos:line="784" pos:column="45"/></name><operator pos:line="784" pos:column="45">-&gt;<pos:position pos:line="784" pos:column="50"/></operator><name pos:line="784" pos:column="47">httpcode<pos:position pos:line="784" pos:column="55"/></name></name> <operator pos:line="784" pos:column="56">&lt;<pos:position pos:line="784" pos:column="60"/></operator> <literal type="number" pos:line="784" pos:column="58">400<pos:position pos:line="784" pos:column="61"/></literal><operator pos:line="784" pos:column="61">)<pos:position pos:line="784" pos:column="62"/></operator> <operator pos:line="784" pos:column="63">&amp;&amp;<pos:position pos:line="784" pos:column="73"/></operator>
                     <call><name pos:line="785" pos:column="22">checkprefix<pos:position pos:line="785" pos:column="33"/></name><argument_list pos:line="785" pos:column="33">(<argument><expr><literal type="string" pos:line="785" pos:column="34">"Location:"<pos:position pos:line="785" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="785" pos:column="47">k<pos:position pos:line="785" pos:column="48"/></name><operator pos:line="785" pos:column="48">-&gt;<pos:position pos:line="785" pos:column="53"/></operator><name pos:line="785" pos:column="50">p<pos:position pos:line="785" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="785" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="785" pos:column="53"/></condition><then pos:line="785" pos:column="53"> <block pos:line="785" pos:column="54">{
              <if pos:line="786" pos:column="15">if<condition pos:line="786" pos:column="17">(<expr><name><name pos:line="786" pos:column="18">data<pos:position pos:line="786" pos:column="22"/></name><operator pos:line="786" pos:column="22">-&gt;<pos:position pos:line="786" pos:column="27"/></operator><name pos:line="786" pos:column="24">set<pos:position pos:line="786" pos:column="27"/></name><operator pos:line="786" pos:column="27">.<pos:position pos:line="786" pos:column="28"/></operator><name pos:line="786" pos:column="28">http_follow_location<pos:position pos:line="786" pos:column="48"/></name></name></expr>)<pos:position pos:line="786" pos:column="49"/></condition><then pos:line="786" pos:column="49"> <block pos:line="786" pos:column="50">{
                <comment type="block" pos:line="787" pos:column="17">/* this is the URL that the server advices us to get instead */</comment>
                <decl_stmt><decl><type><name pos:line="788" pos:column="17">char<pos:position pos:line="788" pos:column="21"/></name> <modifier pos:line="788" pos:column="22">*<pos:position pos:line="788" pos:column="23"/></modifier></type><name pos:line="788" pos:column="23">ptr<pos:position pos:line="788" pos:column="26"/></name></decl>;<pos:position pos:line="788" pos:column="27"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="789" pos:column="17">char<pos:position pos:line="789" pos:column="21"/></name> <modifier pos:line="789" pos:column="22">*<pos:position pos:line="789" pos:column="23"/></modifier></type><name pos:line="789" pos:column="23">start<pos:position pos:line="789" pos:column="28"/></name><init pos:line="789" pos:column="28">=<expr><name><name pos:line="789" pos:column="29">k<pos:position pos:line="789" pos:column="30"/></name><operator pos:line="789" pos:column="30">-&gt;<pos:position pos:line="789" pos:column="35"/></operator><name pos:line="789" pos:column="32">p<pos:position pos:line="789" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="789" pos:column="34"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="790" pos:column="17">char<pos:position pos:line="790" pos:column="21"/></name></type> <name pos:line="790" pos:column="22">backup<pos:position pos:line="790" pos:column="28"/></name></decl>;<pos:position pos:line="790" pos:column="29"/></decl_stmt>

                <expr_stmt><expr><name pos:line="792" pos:column="17">start<pos:position pos:line="792" pos:column="22"/></name> <operator pos:line="792" pos:column="23">+=<pos:position pos:line="792" pos:column="25"/></operator> <literal type="number" pos:line="792" pos:column="26">9<pos:position pos:line="792" pos:column="27"/></literal></expr>;<pos:position pos:line="792" pos:column="28"/></expr_stmt> <comment type="block" pos:line="792" pos:column="29">/* pass "Location:" */</comment>

                <comment type="block" pos:line="794" pos:column="17">/* Skip spaces and tabs. We do this to support multiple
                   white spaces after the "Location:" keyword. */</comment>
                <while pos:line="796" pos:column="17">while<condition pos:line="796" pos:column="22">(<expr><operator pos:line="796" pos:column="23">*<pos:position pos:line="796" pos:column="24"/></operator><name pos:line="796" pos:column="24">start<pos:position pos:line="796" pos:column="29"/></name> <operator pos:line="796" pos:column="30">&amp;&amp;<pos:position pos:line="796" pos:column="40"/></operator> <call><name pos:line="796" pos:column="33">ISSPACE<pos:position pos:line="796" pos:column="40"/></name><argument_list pos:line="796" pos:column="40">(<argument><expr><operator pos:line="796" pos:column="41">*<pos:position pos:line="796" pos:column="42"/></operator><name pos:line="796" pos:column="42">start<pos:position pos:line="796" pos:column="47"/></name></expr></argument> )<pos:position pos:line="796" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="796" pos:column="50"/></condition>
                  <block type="pseudo"><expr_stmt><expr><name pos:line="797" pos:column="19">start<pos:position pos:line="797" pos:column="24"/></name><operator pos:line="797" pos:column="24">++<pos:position pos:line="797" pos:column="26"/></operator></expr>;<pos:position pos:line="797" pos:column="27"/></expr_stmt></block></while>

                <comment type="block" pos:line="799" pos:column="17">/* Scan through the string from the end to find the last
                   non-space. k-&gt;end_ptr points to the actual terminating zero
                   letter, move pointer one letter back and start from
                   there. This logic strips off trailing whitespace, but keeps
                   any embedded whitespace. */</comment>
                <expr_stmt><expr><name pos:line="804" pos:column="17">ptr<pos:position pos:line="804" pos:column="20"/></name> <operator pos:line="804" pos:column="21">=<pos:position pos:line="804" pos:column="22"/></operator> <name><name pos:line="804" pos:column="23">k<pos:position pos:line="804" pos:column="24"/></name><operator pos:line="804" pos:column="24">-&gt;<pos:position pos:line="804" pos:column="29"/></operator><name pos:line="804" pos:column="26">end_ptr<pos:position pos:line="804" pos:column="33"/></name></name><operator pos:line="804" pos:column="33">-<pos:position pos:line="804" pos:column="34"/></operator><literal type="number" pos:line="804" pos:column="34">1<pos:position pos:line="804" pos:column="35"/></literal></expr>;<pos:position pos:line="804" pos:column="36"/></expr_stmt>
                <while pos:line="805" pos:column="17">while<condition pos:line="805" pos:column="22">(<expr><operator pos:line="805" pos:column="23">(<pos:position pos:line="805" pos:column="24"/></operator><name pos:line="805" pos:column="24">ptr<pos:position pos:line="805" pos:column="27"/></name><operator pos:line="805" pos:column="27">&gt;=<pos:position pos:line="805" pos:column="32"/></operator><name pos:line="805" pos:column="29">start<pos:position pos:line="805" pos:column="34"/></name><operator pos:line="805" pos:column="34">)<pos:position pos:line="805" pos:column="35"/></operator> <operator pos:line="805" pos:column="36">&amp;&amp;<pos:position pos:line="805" pos:column="46"/></operator> <call><name pos:line="805" pos:column="39">ISSPACE<pos:position pos:line="805" pos:column="46"/></name><argument_list pos:line="805" pos:column="46">(<argument><expr><operator pos:line="805" pos:column="47">*<pos:position pos:line="805" pos:column="48"/></operator><name pos:line="805" pos:column="48">ptr<pos:position pos:line="805" pos:column="51"/></name></expr></argument>)<pos:position pos:line="805" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="805" pos:column="53"/></condition>
                  <block type="pseudo"><expr_stmt><expr><name pos:line="806" pos:column="19">ptr<pos:position pos:line="806" pos:column="22"/></name><operator pos:line="806" pos:column="22">--<pos:position pos:line="806" pos:column="24"/></operator></expr>;<pos:position pos:line="806" pos:column="25"/></expr_stmt></block></while>
                <expr_stmt><expr><name pos:line="807" pos:column="17">ptr<pos:position pos:line="807" pos:column="20"/></name><operator pos:line="807" pos:column="20">++<pos:position pos:line="807" pos:column="22"/></operator></expr>;<pos:position pos:line="807" pos:column="23"/></expr_stmt>

                <expr_stmt><expr><name pos:line="809" pos:column="17">backup<pos:position pos:line="809" pos:column="23"/></name> <operator pos:line="809" pos:column="24">=<pos:position pos:line="809" pos:column="25"/></operator> <operator pos:line="809" pos:column="26">*<pos:position pos:line="809" pos:column="27"/></operator><name pos:line="809" pos:column="27">ptr<pos:position pos:line="809" pos:column="30"/></name></expr>;<pos:position pos:line="809" pos:column="31"/></expr_stmt> <comment type="block" pos:line="809" pos:column="32">/* store the ending letter */</comment>
                <if pos:line="810" pos:column="17">if<condition pos:line="810" pos:column="19">(<expr><name pos:line="810" pos:column="20">ptr<pos:position pos:line="810" pos:column="23"/></name> <operator pos:line="810" pos:column="24">!=<pos:position pos:line="810" pos:column="26"/></operator> <name pos:line="810" pos:column="27">start<pos:position pos:line="810" pos:column="32"/></name></expr>)<pos:position pos:line="810" pos:column="33"/></condition><then pos:line="810" pos:column="33"> <block pos:line="810" pos:column="34">{
                  <expr_stmt><expr><operator pos:line="811" pos:column="19">*<pos:position pos:line="811" pos:column="20"/></operator><name pos:line="811" pos:column="20">ptr<pos:position pos:line="811" pos:column="23"/></name> <operator pos:line="811" pos:column="24">=<pos:position pos:line="811" pos:column="25"/></operator> <literal type="char" pos:line="811" pos:column="26">'\0'<pos:position pos:line="811" pos:column="30"/></literal></expr>;<pos:position pos:line="811" pos:column="31"/></expr_stmt>   <comment type="block" pos:line="811" pos:column="34">/* zero terminate */</comment>
                  <expr_stmt><expr><name><name pos:line="812" pos:column="19">data<pos:position pos:line="812" pos:column="23"/></name><operator pos:line="812" pos:column="23">-&gt;<pos:position pos:line="812" pos:column="28"/></operator><name pos:line="812" pos:column="25">req<pos:position pos:line="812" pos:column="28"/></name><operator pos:line="812" pos:column="28">.<pos:position pos:line="812" pos:column="29"/></operator><name pos:line="812" pos:column="29">newurl<pos:position pos:line="812" pos:column="35"/></name></name> <operator pos:line="812" pos:column="36">=<pos:position pos:line="812" pos:column="37"/></operator> <call><name pos:line="812" pos:column="38">strdup<pos:position pos:line="812" pos:column="44"/></name><argument_list pos:line="812" pos:column="44">(<argument><expr><name pos:line="812" pos:column="45">start<pos:position pos:line="812" pos:column="50"/></name></expr></argument>)<pos:position pos:line="812" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="812" pos:column="52"/></expr_stmt> <comment type="block" pos:line="812" pos:column="53">/* clone string */</comment>
                  <expr_stmt><expr><operator pos:line="813" pos:column="19">*<pos:position pos:line="813" pos:column="20"/></operator><name pos:line="813" pos:column="20">ptr<pos:position pos:line="813" pos:column="23"/></name> <operator pos:line="813" pos:column="24">=<pos:position pos:line="813" pos:column="25"/></operator> <name pos:line="813" pos:column="26">backup<pos:position pos:line="813" pos:column="32"/></name></expr>;<pos:position pos:line="813" pos:column="33"/></expr_stmt> <comment type="block" pos:line="813" pos:column="34">/* restore ending letter */</comment>
                  <if pos:line="814" pos:column="19">if<condition pos:line="814" pos:column="21">(<expr><operator pos:line="814" pos:column="22">!<pos:position pos:line="814" pos:column="23"/></operator><name><name pos:line="814" pos:column="23">data<pos:position pos:line="814" pos:column="27"/></name><operator pos:line="814" pos:column="27">-&gt;<pos:position pos:line="814" pos:column="32"/></operator><name pos:line="814" pos:column="29">req<pos:position pos:line="814" pos:column="32"/></name><operator pos:line="814" pos:column="32">.<pos:position pos:line="814" pos:column="33"/></operator><name pos:line="814" pos:column="33">newurl<pos:position pos:line="814" pos:column="39"/></name></name></expr>)<pos:position pos:line="814" pos:column="40"/></condition><then pos:line="814" pos:column="40">
                    <block type="pseudo"><return pos:line="815" pos:column="21">return <expr><name pos:line="815" pos:column="28">CURLE_OUT_OF_MEMORY<pos:position pos:line="815" pos:column="47"/></name></expr>;<pos:position pos:line="815" pos:column="48"/></return></block></then></if>
                }<pos:position pos:line="816" pos:column="18"/></block></then></if>
              }<pos:position pos:line="817" pos:column="16"/></block></then></if>
            }<pos:position pos:line="818" pos:column="14"/></block></then></if></elseif></if>
<cpp:endif pos:line="819" pos:column="1">#<cpp:directive pos:line="819" pos:column="2">endif<pos:position pos:line="819" pos:column="7"/></cpp:directive></cpp:endif>   <comment type="block" pos:line="819" pos:column="10">/* CURL_DISABLE_HTTP */</comment>

            <comment type="block" pos:line="821" pos:column="13">/*
             * End of header-checks. Write them to the client.
             */</comment>

            <expr_stmt><expr><name pos:line="825" pos:column="13">writetype<pos:position pos:line="825" pos:column="22"/></name> <operator pos:line="825" pos:column="23">=<pos:position pos:line="825" pos:column="24"/></operator> <name pos:line="825" pos:column="25">CLIENTWRITE_HEADER<pos:position pos:line="825" pos:column="43"/></name></expr>;<pos:position pos:line="825" pos:column="44"/></expr_stmt>
            <if pos:line="826" pos:column="13">if<condition pos:line="826" pos:column="15">(<expr><name><name pos:line="826" pos:column="16">data<pos:position pos:line="826" pos:column="20"/></name><operator pos:line="826" pos:column="20">-&gt;<pos:position pos:line="826" pos:column="25"/></operator><name pos:line="826" pos:column="22">set<pos:position pos:line="826" pos:column="25"/></name><operator pos:line="826" pos:column="25">.<pos:position pos:line="826" pos:column="26"/></operator><name pos:line="826" pos:column="26">include_header<pos:position pos:line="826" pos:column="40"/></name></name></expr>)<pos:position pos:line="826" pos:column="41"/></condition><then pos:line="826" pos:column="41">
              <block type="pseudo"><expr_stmt><expr><name pos:line="827" pos:column="15">writetype<pos:position pos:line="827" pos:column="24"/></name> <operator pos:line="827" pos:column="25">|=<pos:position pos:line="827" pos:column="27"/></operator> <name pos:line="827" pos:column="28">CLIENTWRITE_BODY<pos:position pos:line="827" pos:column="44"/></name></expr>;<pos:position pos:line="827" pos:column="45"/></expr_stmt></block></then></if>

            <if pos:line="829" pos:column="13">if<condition pos:line="829" pos:column="15">(<expr><name><name pos:line="829" pos:column="16">data<pos:position pos:line="829" pos:column="20"/></name><operator pos:line="829" pos:column="20">-&gt;<pos:position pos:line="829" pos:column="25"/></operator><name pos:line="829" pos:column="22">set<pos:position pos:line="829" pos:column="25"/></name><operator pos:line="829" pos:column="25">.<pos:position pos:line="829" pos:column="26"/></operator><name pos:line="829" pos:column="26">verbose<pos:position pos:line="829" pos:column="33"/></name></name></expr>)<pos:position pos:line="829" pos:column="34"/></condition><then pos:line="829" pos:column="34">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="830" pos:column="15">Curl_debug<pos:position pos:line="830" pos:column="25"/></name><argument_list pos:line="830" pos:column="25">(<argument><expr><name pos:line="830" pos:column="26">data<pos:position pos:line="830" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="830" pos:column="32">CURLINFO_HEADER_IN<pos:position pos:line="830" pos:column="50"/></name></expr></argument>,
                         <argument><expr><name><name pos:line="831" pos:column="26">k<pos:position pos:line="831" pos:column="27"/></name><operator pos:line="831" pos:column="27">-&gt;<pos:position pos:line="831" pos:column="32"/></operator><name pos:line="831" pos:column="29">p<pos:position pos:line="831" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="831" pos:column="32">(<pos:position pos:line="831" pos:column="33"/></operator><name pos:line="831" pos:column="33">size_t<pos:position pos:line="831" pos:column="39"/></name><operator pos:line="831" pos:column="39">)<pos:position pos:line="831" pos:column="40"/></operator><name><name pos:line="831" pos:column="40">k<pos:position pos:line="831" pos:column="41"/></name><operator pos:line="831" pos:column="41">-&gt;<pos:position pos:line="831" pos:column="46"/></operator><name pos:line="831" pos:column="43">hbuflen<pos:position pos:line="831" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="831" pos:column="52">conn<pos:position pos:line="831" pos:column="56"/></name></expr></argument>)<pos:position pos:line="831" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="831" pos:column="58"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name pos:line="833" pos:column="13">result<pos:position pos:line="833" pos:column="19"/></name> <operator pos:line="833" pos:column="20">=<pos:position pos:line="833" pos:column="21"/></operator> <call><name pos:line="833" pos:column="22">Curl_client_write<pos:position pos:line="833" pos:column="39"/></name><argument_list pos:line="833" pos:column="39">(<argument><expr><name pos:line="833" pos:column="40">conn<pos:position pos:line="833" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="833" pos:column="46">writetype<pos:position pos:line="833" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="833" pos:column="57">k<pos:position pos:line="833" pos:column="58"/></name><operator pos:line="833" pos:column="58">-&gt;<pos:position pos:line="833" pos:column="63"/></operator><name pos:line="833" pos:column="60">p<pos:position pos:line="833" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="833" pos:column="63">k<pos:position pos:line="833" pos:column="64"/></name><operator pos:line="833" pos:column="64">-&gt;<pos:position pos:line="833" pos:column="69"/></operator><name pos:line="833" pos:column="66">hbuflen<pos:position pos:line="833" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="833" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="833" pos:column="75"/></expr_stmt>
            <if pos:line="834" pos:column="13">if<condition pos:line="834" pos:column="15">(<expr><name pos:line="834" pos:column="16">result<pos:position pos:line="834" pos:column="22"/></name></expr>)<pos:position pos:line="834" pos:column="23"/></condition><then pos:line="834" pos:column="23">
              <block type="pseudo"><return pos:line="835" pos:column="15">return <expr><name pos:line="835" pos:column="22">result<pos:position pos:line="835" pos:column="28"/></name></expr>;<pos:position pos:line="835" pos:column="29"/></return></block></then></if>

            <expr_stmt><expr><name><name pos:line="837" pos:column="13">data<pos:position pos:line="837" pos:column="17"/></name><operator pos:line="837" pos:column="17">-&gt;<pos:position pos:line="837" pos:column="22"/></operator><name pos:line="837" pos:column="19">info<pos:position pos:line="837" pos:column="23"/></name><operator pos:line="837" pos:column="23">.<pos:position pos:line="837" pos:column="24"/></operator><name pos:line="837" pos:column="24">header_size<pos:position pos:line="837" pos:column="35"/></name></name> <operator pos:line="837" pos:column="36">+=<pos:position pos:line="837" pos:column="38"/></operator> <operator pos:line="837" pos:column="39">(<pos:position pos:line="837" pos:column="40"/></operator><name pos:line="837" pos:column="40">long<pos:position pos:line="837" pos:column="44"/></name><operator pos:line="837" pos:column="44">)<pos:position pos:line="837" pos:column="45"/></operator><name><name pos:line="837" pos:column="45">k<pos:position pos:line="837" pos:column="46"/></name><operator pos:line="837" pos:column="46">-&gt;<pos:position pos:line="837" pos:column="51"/></operator><name pos:line="837" pos:column="48">hbuflen<pos:position pos:line="837" pos:column="55"/></name></name></expr>;<pos:position pos:line="837" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="838" pos:column="13">data<pos:position pos:line="838" pos:column="17"/></name><operator pos:line="838" pos:column="17">-&gt;<pos:position pos:line="838" pos:column="22"/></operator><name pos:line="838" pos:column="19">req<pos:position pos:line="838" pos:column="22"/></name><operator pos:line="838" pos:column="22">.<pos:position pos:line="838" pos:column="23"/></operator><name pos:line="838" pos:column="23">headerbytecount<pos:position pos:line="838" pos:column="38"/></name></name> <operator pos:line="838" pos:column="39">+=<pos:position pos:line="838" pos:column="41"/></operator> <operator pos:line="838" pos:column="42">(<pos:position pos:line="838" pos:column="43"/></operator><name pos:line="838" pos:column="43">long<pos:position pos:line="838" pos:column="47"/></name><operator pos:line="838" pos:column="47">)<pos:position pos:line="838" pos:column="48"/></operator><name><name pos:line="838" pos:column="48">k<pos:position pos:line="838" pos:column="49"/></name><operator pos:line="838" pos:column="49">-&gt;<pos:position pos:line="838" pos:column="54"/></operator><name pos:line="838" pos:column="51">hbuflen<pos:position pos:line="838" pos:column="58"/></name></name></expr>;<pos:position pos:line="838" pos:column="59"/></expr_stmt>

            <comment type="block" pos:line="840" pos:column="13">/* reset hbufp pointer &amp;&amp; hbuflen */</comment>
            <expr_stmt><expr><name><name pos:line="841" pos:column="13">k<pos:position pos:line="841" pos:column="14"/></name><operator pos:line="841" pos:column="14">-&gt;<pos:position pos:line="841" pos:column="19"/></operator><name pos:line="841" pos:column="16">hbufp<pos:position pos:line="841" pos:column="21"/></name></name> <operator pos:line="841" pos:column="22">=<pos:position pos:line="841" pos:column="23"/></operator> <name><name pos:line="841" pos:column="24">data<pos:position pos:line="841" pos:column="28"/></name><operator pos:line="841" pos:column="28">-&gt;<pos:position pos:line="841" pos:column="33"/></operator><name pos:line="841" pos:column="30">state<pos:position pos:line="841" pos:column="35"/></name><operator pos:line="841" pos:column="35">.<pos:position pos:line="841" pos:column="36"/></operator><name pos:line="841" pos:column="36">headerbuff<pos:position pos:line="841" pos:column="46"/></name></name></expr>;<pos:position pos:line="841" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="842" pos:column="13">k<pos:position pos:line="842" pos:column="14"/></name><operator pos:line="842" pos:column="14">-&gt;<pos:position pos:line="842" pos:column="19"/></operator><name pos:line="842" pos:column="16">hbuflen<pos:position pos:line="842" pos:column="23"/></name></name> <operator pos:line="842" pos:column="24">=<pos:position pos:line="842" pos:column="25"/></operator> <literal type="number" pos:line="842" pos:column="26">0<pos:position pos:line="842" pos:column="27"/></literal></expr>;<pos:position pos:line="842" pos:column="28"/></expr_stmt>
          }<pos:position pos:line="843" pos:column="12"/></block>
          while<condition pos:line="844" pos:column="16">(<expr><operator pos:line="844" pos:column="17">!<pos:position pos:line="844" pos:column="18"/></operator><name pos:line="844" pos:column="18">stop_reading<pos:position pos:line="844" pos:column="30"/></name> <operator pos:line="844" pos:column="31">&amp;&amp;<pos:position pos:line="844" pos:column="41"/></operator> <operator pos:line="844" pos:column="34">*<pos:position pos:line="844" pos:column="35"/></operator><name><name pos:line="844" pos:column="35">k<pos:position pos:line="844" pos:column="36"/></name><operator pos:line="844" pos:column="36">-&gt;<pos:position pos:line="844" pos:column="41"/></operator><name pos:line="844" pos:column="38">str<pos:position pos:line="844" pos:column="41"/></name></name></expr>)<pos:position pos:line="844" pos:column="42"/></condition>;<pos:position pos:line="844" pos:column="43"/></do> <comment type="block" pos:line="844" pos:column="44">/* header line within buffer */</comment>

          <if pos:line="846" pos:column="11">if<condition pos:line="846" pos:column="13">(<expr><name pos:line="846" pos:column="14">stop_reading<pos:position pos:line="846" pos:column="26"/></name></expr>)<pos:position pos:line="846" pos:column="27"/></condition><then pos:line="846" pos:column="27">
            <comment type="block" pos:line="847" pos:column="13">/* We've stopped dealing with input, get out of the do-while loop */</comment>
            <block type="pseudo"><break pos:line="848" pos:column="13">break;<pos:position pos:line="848" pos:column="19"/></break></block></then></if>

          <comment type="block" pos:line="850" pos:column="11">/* We might have reached the end of the header part here, but
             there might be a non-header part left in the end of the read
             buffer. */</comment>

        }<pos:position pos:line="854" pos:column="10"/></block></then></if>                       <comment type="block" pos:line="854" pos:column="33">/* end if header mode */</comment>

        <comment type="block" pos:line="856" pos:column="9">/* This is not an 'else if' since it may be a rest from the header
           parsing, where the beginning of the buffer is headers and the end
           is non-headers. */</comment>
        <if pos:line="859" pos:column="9">if<condition pos:line="859" pos:column="11">(<expr><name><name pos:line="859" pos:column="12">k<pos:position pos:line="859" pos:column="13"/></name><operator pos:line="859" pos:column="13">-&gt;<pos:position pos:line="859" pos:column="18"/></operator><name pos:line="859" pos:column="15">str<pos:position pos:line="859" pos:column="18"/></name></name> <operator pos:line="859" pos:column="19">&amp;&amp;<pos:position pos:line="859" pos:column="29"/></operator> <operator pos:line="859" pos:column="22">!<pos:position pos:line="859" pos:column="23"/></operator><name><name pos:line="859" pos:column="23">k<pos:position pos:line="859" pos:column="24"/></name><operator pos:line="859" pos:column="24">-&gt;<pos:position pos:line="859" pos:column="29"/></operator><name pos:line="859" pos:column="26">header<pos:position pos:line="859" pos:column="32"/></name></name> <operator pos:line="859" pos:column="33">&amp;&amp;<pos:position pos:line="859" pos:column="43"/></operator> <operator pos:line="859" pos:column="36">(<pos:position pos:line="859" pos:column="37"/></operator><name pos:line="859" pos:column="37">nread<pos:position pos:line="859" pos:column="42"/></name> <operator pos:line="859" pos:column="43">&gt;<pos:position pos:line="859" pos:column="47"/></operator> <literal type="number" pos:line="859" pos:column="45">0<pos:position pos:line="859" pos:column="46"/></literal> <operator pos:line="859" pos:column="47">||<pos:position pos:line="859" pos:column="49"/></operator> <name pos:line="859" pos:column="50">is_empty_data<pos:position pos:line="859" pos:column="63"/></name><operator pos:line="859" pos:column="63">)<pos:position pos:line="859" pos:column="64"/></operator></expr>)<pos:position pos:line="859" pos:column="65"/></condition><then pos:line="859" pos:column="65"> <block pos:line="859" pos:column="66">{

          <if pos:line="861" pos:column="11">if<condition pos:line="861" pos:column="13">(<expr><literal type="number" pos:line="861" pos:column="14">0<pos:position pos:line="861" pos:column="15"/></literal> <operator pos:line="861" pos:column="16">==<pos:position pos:line="861" pos:column="18"/></operator> <name><name pos:line="861" pos:column="19">k<pos:position pos:line="861" pos:column="20"/></name><operator pos:line="861" pos:column="20">-&gt;<pos:position pos:line="861" pos:column="25"/></operator><name pos:line="861" pos:column="22">bodywrites<pos:position pos:line="861" pos:column="32"/></name></name> <operator pos:line="861" pos:column="33">&amp;&amp;<pos:position pos:line="861" pos:column="43"/></operator> <operator pos:line="861" pos:column="36">!<pos:position pos:line="861" pos:column="37"/></operator><name pos:line="861" pos:column="37">is_empty_data<pos:position pos:line="861" pos:column="50"/></name></expr>)<pos:position pos:line="861" pos:column="51"/></condition><then pos:line="861" pos:column="51"> <block pos:line="861" pos:column="52">{
            <comment type="block" pos:line="862" pos:column="13">/* These checks are only made the first time we are about to
               write a piece of the body */</comment>
            <if pos:line="864" pos:column="13">if<condition pos:line="864" pos:column="15">(<expr><name><name pos:line="864" pos:column="16">conn<pos:position pos:line="864" pos:column="20"/></name><operator pos:line="864" pos:column="20">-&gt;<pos:position pos:line="864" pos:column="25"/></operator><name pos:line="864" pos:column="22">protocol<pos:position pos:line="864" pos:column="30"/></name></name><operator pos:line="864" pos:column="30">&amp;<pos:position pos:line="864" pos:column="35"/></operator><name pos:line="864" pos:column="31">PROT_HTTP<pos:position pos:line="864" pos:column="40"/></name></expr>)<pos:position pos:line="864" pos:column="41"/></condition><then pos:line="864" pos:column="41"> <block pos:line="864" pos:column="42">{
              <comment type="block" pos:line="865" pos:column="15">/* HTTP-only checks */</comment>

              <if pos:line="867" pos:column="15">if<condition pos:line="867" pos:column="17">(<expr><name><name pos:line="867" pos:column="18">data<pos:position pos:line="867" pos:column="22"/></name><operator pos:line="867" pos:column="22">-&gt;<pos:position pos:line="867" pos:column="27"/></operator><name pos:line="867" pos:column="24">req<pos:position pos:line="867" pos:column="27"/></name><operator pos:line="867" pos:column="27">.<pos:position pos:line="867" pos:column="28"/></operator><name pos:line="867" pos:column="28">newurl<pos:position pos:line="867" pos:column="34"/></name></name></expr>)<pos:position pos:line="867" pos:column="35"/></condition><then pos:line="867" pos:column="35"> <block pos:line="867" pos:column="36">{
                <if pos:line="868" pos:column="17">if<condition pos:line="868" pos:column="19">(<expr><name><name pos:line="868" pos:column="20">conn<pos:position pos:line="868" pos:column="24"/></name><operator pos:line="868" pos:column="24">-&gt;<pos:position pos:line="868" pos:column="29"/></operator><name pos:line="868" pos:column="26">bits<pos:position pos:line="868" pos:column="30"/></name><operator pos:line="868" pos:column="30">.<pos:position pos:line="868" pos:column="31"/></operator><name pos:line="868" pos:column="31">close<pos:position pos:line="868" pos:column="36"/></name></name></expr>)<pos:position pos:line="868" pos:column="37"/></condition><then pos:line="868" pos:column="37"> <block pos:line="868" pos:column="38">{
                  <comment type="block" pos:line="869" pos:column="19">/* Abort after the headers if "follow Location" is set
                     and we're set to close anyway. */</comment>
                  <expr_stmt><expr><name><name pos:line="871" pos:column="19">k<pos:position pos:line="871" pos:column="20"/></name><operator pos:line="871" pos:column="20">-&gt;<pos:position pos:line="871" pos:column="25"/></operator><name pos:line="871" pos:column="22">keepon<pos:position pos:line="871" pos:column="28"/></name></name> <operator pos:line="871" pos:column="29">&amp;=<pos:position pos:line="871" pos:column="35"/></operator> <operator pos:line="871" pos:column="32">~<pos:position pos:line="871" pos:column="33"/></operator><name pos:line="871" pos:column="33">KEEP_READ<pos:position pos:line="871" pos:column="42"/></name></expr>;<pos:position pos:line="871" pos:column="43"/></expr_stmt>
                  <expr_stmt><expr><operator pos:line="872" pos:column="19">*<pos:position pos:line="872" pos:column="20"/></operator><name pos:line="872" pos:column="20">done<pos:position pos:line="872" pos:column="24"/></name> <operator pos:line="872" pos:column="25">=<pos:position pos:line="872" pos:column="26"/></operator> <name pos:line="872" pos:column="27">TRUE<pos:position pos:line="872" pos:column="31"/></name></expr>;<pos:position pos:line="872" pos:column="32"/></expr_stmt>
                  <return pos:line="873" pos:column="19">return <expr><name pos:line="873" pos:column="26">CURLE_OK<pos:position pos:line="873" pos:column="34"/></name></expr>;<pos:position pos:line="873" pos:column="35"/></return>
                }<pos:position pos:line="874" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="875" pos:column="17">/* We have a new url to load, but since we want to be able
                   to re-use this connection properly, we read the full
                   response in "ignore more" */</comment>
                <expr_stmt><expr><name><name pos:line="878" pos:column="17">k<pos:position pos:line="878" pos:column="18"/></name><operator pos:line="878" pos:column="18">-&gt;<pos:position pos:line="878" pos:column="23"/></operator><name pos:line="878" pos:column="20">ignorebody<pos:position pos:line="878" pos:column="30"/></name></name> <operator pos:line="878" pos:column="31">=<pos:position pos:line="878" pos:column="32"/></operator> <name pos:line="878" pos:column="33">TRUE<pos:position pos:line="878" pos:column="37"/></name></expr>;<pos:position pos:line="878" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="879" pos:column="17">infof<pos:position pos:line="879" pos:column="22"/></name><argument_list pos:line="879" pos:column="22">(<argument><expr><name pos:line="879" pos:column="23">data<pos:position pos:line="879" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="879" pos:column="29">"Ignoring the response-body\n"<pos:position pos:line="879" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="879" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="879" pos:column="61"/></expr_stmt>
              }<pos:position pos:line="880" pos:column="16"/></block></then></if>
              <if pos:line="881" pos:column="15">if<condition pos:line="881" pos:column="17">(<expr><name><name pos:line="881" pos:column="18">data<pos:position pos:line="881" pos:column="22"/></name><operator pos:line="881" pos:column="22">-&gt;<pos:position pos:line="881" pos:column="27"/></operator><name pos:line="881" pos:column="24">state<pos:position pos:line="881" pos:column="29"/></name><operator pos:line="881" pos:column="29">.<pos:position pos:line="881" pos:column="30"/></operator><name pos:line="881" pos:column="30">resume_from<pos:position pos:line="881" pos:column="41"/></name></name> <operator pos:line="881" pos:column="42">&amp;&amp;<pos:position pos:line="881" pos:column="52"/></operator> <operator pos:line="881" pos:column="45">!<pos:position pos:line="881" pos:column="46"/></operator><name><name pos:line="881" pos:column="46">k<pos:position pos:line="881" pos:column="47"/></name><operator pos:line="881" pos:column="47">-&gt;<pos:position pos:line="881" pos:column="52"/></operator><name pos:line="881" pos:column="49">content_range<pos:position pos:line="881" pos:column="62"/></name></name> <operator pos:line="881" pos:column="63">&amp;&amp;<pos:position pos:line="881" pos:column="73"/></operator>
                  <operator pos:line="882" pos:column="19">(<pos:position pos:line="882" pos:column="20"/></operator><name><name pos:line="882" pos:column="20">data<pos:position pos:line="882" pos:column="24"/></name><operator pos:line="882" pos:column="24">-&gt;<pos:position pos:line="882" pos:column="29"/></operator><name pos:line="882" pos:column="26">set<pos:position pos:line="882" pos:column="29"/></name><operator pos:line="882" pos:column="29">.<pos:position pos:line="882" pos:column="30"/></operator><name pos:line="882" pos:column="30">httpreq<pos:position pos:line="882" pos:column="37"/></name></name><operator pos:line="882" pos:column="37">==<pos:position pos:line="882" pos:column="39"/></operator><name pos:line="882" pos:column="39">HTTPREQ_GET<pos:position pos:line="882" pos:column="50"/></name><operator pos:line="882" pos:column="50">)<pos:position pos:line="882" pos:column="51"/></operator> <operator pos:line="882" pos:column="52">&amp;&amp;<pos:position pos:line="882" pos:column="62"/></operator>
                  <operator pos:line="883" pos:column="19">!<pos:position pos:line="883" pos:column="20"/></operator><name><name pos:line="883" pos:column="20">k<pos:position pos:line="883" pos:column="21"/></name><operator pos:line="883" pos:column="21">-&gt;<pos:position pos:line="883" pos:column="26"/></operator><name pos:line="883" pos:column="23">ignorebody<pos:position pos:line="883" pos:column="33"/></name></name></expr>)<pos:position pos:line="883" pos:column="34"/></condition><then pos:line="883" pos:column="34"> <block pos:line="883" pos:column="35">{
                <comment type="block" pos:line="884" pos:column="17">/* we wanted to resume a download, although the server doesn't
                 * seem to support this and we did this with a GET (if it
                 * wasn't a GET we did a POST or PUT resume) */</comment>
                <expr_stmt><expr><call><name pos:line="887" pos:column="17">failf<pos:position pos:line="887" pos:column="22"/></name><argument_list pos:line="887" pos:column="22">(<argument><expr><name pos:line="887" pos:column="23">data<pos:position pos:line="887" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="887" pos:column="29">"HTTP server doesn't seem to support "<pos:position pos:line="887" pos:column="67"/></literal>
                      <literal type="string" pos:line="888" pos:column="23">"byte ranges. Cannot resume."<pos:position pos:line="888" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="888" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="888" pos:column="54"/></expr_stmt>
                <return pos:line="889" pos:column="17">return <expr><name pos:line="889" pos:column="24">CURLE_RANGE_ERROR<pos:position pos:line="889" pos:column="41"/></name></expr>;<pos:position pos:line="889" pos:column="42"/></return>
              }<pos:position pos:line="890" pos:column="16"/></block></then></if>

              <if pos:line="892" pos:column="15">if<condition pos:line="892" pos:column="17">(<expr><name><name pos:line="892" pos:column="18">data<pos:position pos:line="892" pos:column="22"/></name><operator pos:line="892" pos:column="22">-&gt;<pos:position pos:line="892" pos:column="27"/></operator><name pos:line="892" pos:column="24">set<pos:position pos:line="892" pos:column="27"/></name><operator pos:line="892" pos:column="27">.<pos:position pos:line="892" pos:column="28"/></operator><name pos:line="892" pos:column="28">timecondition<pos:position pos:line="892" pos:column="41"/></name></name> <operator pos:line="892" pos:column="42">&amp;&amp;<pos:position pos:line="892" pos:column="52"/></operator> <operator pos:line="892" pos:column="45">!<pos:position pos:line="892" pos:column="46"/></operator><name><name pos:line="892" pos:column="46">data<pos:position pos:line="892" pos:column="50"/></name><operator pos:line="892" pos:column="50">-&gt;<pos:position pos:line="892" pos:column="55"/></operator><name pos:line="892" pos:column="52">state<pos:position pos:line="892" pos:column="57"/></name><operator pos:line="892" pos:column="57">.<pos:position pos:line="892" pos:column="58"/></operator><name pos:line="892" pos:column="58">range<pos:position pos:line="892" pos:column="63"/></name></name></expr>)<pos:position pos:line="892" pos:column="64"/></condition><then pos:line="892" pos:column="64"> <block pos:line="892" pos:column="65">{
                <comment type="block" pos:line="893" pos:column="17">/* A time condition has been set AND no ranges have been
                   requested. This seems to be what chapter 13.3.4 of
                   RFC 2616 defines to be the correct action for a
                   HTTP/1.1 client */</comment>
                <if pos:line="897" pos:column="17">if<condition pos:line="897" pos:column="19">(<expr><operator pos:line="897" pos:column="20">(<pos:position pos:line="897" pos:column="21"/></operator><name><name pos:line="897" pos:column="21">k<pos:position pos:line="897" pos:column="22"/></name><operator pos:line="897" pos:column="22">-&gt;<pos:position pos:line="897" pos:column="27"/></operator><name pos:line="897" pos:column="24">timeofdoc<pos:position pos:line="897" pos:column="33"/></name></name> <operator pos:line="897" pos:column="34">&gt;<pos:position pos:line="897" pos:column="38"/></operator> <literal type="number" pos:line="897" pos:column="36">0<pos:position pos:line="897" pos:column="37"/></literal><operator pos:line="897" pos:column="37">)<pos:position pos:line="897" pos:column="38"/></operator> <operator pos:line="897" pos:column="39">&amp;&amp;<pos:position pos:line="897" pos:column="49"/></operator> <operator pos:line="897" pos:column="42">(<pos:position pos:line="897" pos:column="43"/></operator><name><name pos:line="897" pos:column="43">data<pos:position pos:line="897" pos:column="47"/></name><operator pos:line="897" pos:column="47">-&gt;<pos:position pos:line="897" pos:column="52"/></operator><name pos:line="897" pos:column="49">set<pos:position pos:line="897" pos:column="52"/></name><operator pos:line="897" pos:column="52">.<pos:position pos:line="897" pos:column="53"/></operator><name pos:line="897" pos:column="53">timevalue<pos:position pos:line="897" pos:column="62"/></name></name> <operator pos:line="897" pos:column="63">&gt;<pos:position pos:line="897" pos:column="67"/></operator> <literal type="number" pos:line="897" pos:column="65">0<pos:position pos:line="897" pos:column="66"/></literal><operator pos:line="897" pos:column="66">)<pos:position pos:line="897" pos:column="67"/></operator></expr>)<pos:position pos:line="897" pos:column="68"/></condition><then pos:line="897" pos:column="68"> <block pos:line="897" pos:column="69">{
                  <switch pos:line="898" pos:column="19">switch<condition pos:line="898" pos:column="25">(<expr><name><name pos:line="898" pos:column="26">data<pos:position pos:line="898" pos:column="30"/></name><operator pos:line="898" pos:column="30">-&gt;<pos:position pos:line="898" pos:column="35"/></operator><name pos:line="898" pos:column="32">set<pos:position pos:line="898" pos:column="35"/></name><operator pos:line="898" pos:column="35">.<pos:position pos:line="898" pos:column="36"/></operator><name pos:line="898" pos:column="36">timecondition<pos:position pos:line="898" pos:column="49"/></name></name></expr>)<pos:position pos:line="898" pos:column="50"/></condition> <block pos:line="898" pos:column="51">{
                  <case pos:line="899" pos:column="19">case <expr><name pos:line="899" pos:column="24">CURL_TIMECOND_IFMODSINCE<pos:position pos:line="899" pos:column="48"/></name></expr>:<pos:position pos:line="899" pos:column="49"/></case>
                  <default pos:line="900" pos:column="19">default:<pos:position pos:line="900" pos:column="27"/></default>
                    <if pos:line="901" pos:column="21">if<condition pos:line="901" pos:column="23">(<expr><name><name pos:line="901" pos:column="24">k<pos:position pos:line="901" pos:column="25"/></name><operator pos:line="901" pos:column="25">-&gt;<pos:position pos:line="901" pos:column="30"/></operator><name pos:line="901" pos:column="27">timeofdoc<pos:position pos:line="901" pos:column="36"/></name></name> <operator pos:line="901" pos:column="37">&lt;<pos:position pos:line="901" pos:column="41"/></operator> <name><name pos:line="901" pos:column="39">data<pos:position pos:line="901" pos:column="43"/></name><operator pos:line="901" pos:column="43">-&gt;<pos:position pos:line="901" pos:column="48"/></operator><name pos:line="901" pos:column="45">set<pos:position pos:line="901" pos:column="48"/></name><operator pos:line="901" pos:column="48">.<pos:position pos:line="901" pos:column="49"/></operator><name pos:line="901" pos:column="49">timevalue<pos:position pos:line="901" pos:column="58"/></name></name></expr>)<pos:position pos:line="901" pos:column="59"/></condition><then pos:line="901" pos:column="59"> <block pos:line="901" pos:column="60">{
                      <expr_stmt><expr><call><name pos:line="902" pos:column="23">infof<pos:position pos:line="902" pos:column="28"/></name><argument_list pos:line="902" pos:column="28">(<argument><expr><name pos:line="902" pos:column="29">data<pos:position pos:line="902" pos:column="33"/></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="903" pos:column="29">"The requested document is not new enough\n"<pos:position pos:line="903" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="903" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="903" pos:column="75"/></expr_stmt>
                      <expr_stmt><expr><operator pos:line="904" pos:column="23">*<pos:position pos:line="904" pos:column="24"/></operator><name pos:line="904" pos:column="24">done<pos:position pos:line="904" pos:column="28"/></name> <operator pos:line="904" pos:column="29">=<pos:position pos:line="904" pos:column="30"/></operator> <name pos:line="904" pos:column="31">TRUE<pos:position pos:line="904" pos:column="35"/></name></expr>;<pos:position pos:line="904" pos:column="36"/></expr_stmt>
                      <return pos:line="905" pos:column="23">return <expr><name pos:line="905" pos:column="30">CURLE_OK<pos:position pos:line="905" pos:column="38"/></name></expr>;<pos:position pos:line="905" pos:column="39"/></return>
                    }<pos:position pos:line="906" pos:column="22"/></block></then></if>
                    <break pos:line="907" pos:column="21">break;<pos:position pos:line="907" pos:column="27"/></break>
                  <case pos:line="908" pos:column="19">case <expr><name pos:line="908" pos:column="24">CURL_TIMECOND_IFUNMODSINCE<pos:position pos:line="908" pos:column="50"/></name></expr>:<pos:position pos:line="908" pos:column="51"/></case>
                    <if pos:line="909" pos:column="21">if<condition pos:line="909" pos:column="23">(<expr><name><name pos:line="909" pos:column="24">k<pos:position pos:line="909" pos:column="25"/></name><operator pos:line="909" pos:column="25">-&gt;<pos:position pos:line="909" pos:column="30"/></operator><name pos:line="909" pos:column="27">timeofdoc<pos:position pos:line="909" pos:column="36"/></name></name> <operator pos:line="909" pos:column="37">&gt;<pos:position pos:line="909" pos:column="41"/></operator> <name><name pos:line="909" pos:column="39">data<pos:position pos:line="909" pos:column="43"/></name><operator pos:line="909" pos:column="43">-&gt;<pos:position pos:line="909" pos:column="48"/></operator><name pos:line="909" pos:column="45">set<pos:position pos:line="909" pos:column="48"/></name><operator pos:line="909" pos:column="48">.<pos:position pos:line="909" pos:column="49"/></operator><name pos:line="909" pos:column="49">timevalue<pos:position pos:line="909" pos:column="58"/></name></name></expr>)<pos:position pos:line="909" pos:column="59"/></condition><then pos:line="909" pos:column="59"> <block pos:line="909" pos:column="60">{
                      <expr_stmt><expr><call><name pos:line="910" pos:column="23">infof<pos:position pos:line="910" pos:column="28"/></name><argument_list pos:line="910" pos:column="28">(<argument><expr><name pos:line="910" pos:column="29">data<pos:position pos:line="910" pos:column="33"/></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="911" pos:column="29">"The requested document is not old enough\n"<pos:position pos:line="911" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="911" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="911" pos:column="75"/></expr_stmt>
                      <expr_stmt><expr><operator pos:line="912" pos:column="23">*<pos:position pos:line="912" pos:column="24"/></operator><name pos:line="912" pos:column="24">done<pos:position pos:line="912" pos:column="28"/></name> <operator pos:line="912" pos:column="29">=<pos:position pos:line="912" pos:column="30"/></operator> <name pos:line="912" pos:column="31">TRUE<pos:position pos:line="912" pos:column="35"/></name></expr>;<pos:position pos:line="912" pos:column="36"/></expr_stmt>
                      <return pos:line="913" pos:column="23">return <expr><name pos:line="913" pos:column="30">CURLE_OK<pos:position pos:line="913" pos:column="38"/></name></expr>;<pos:position pos:line="913" pos:column="39"/></return>
                    }<pos:position pos:line="914" pos:column="22"/></block></then></if>
                    <break pos:line="915" pos:column="21">break;<pos:position pos:line="915" pos:column="27"/></break>
                  }<pos:position pos:line="916" pos:column="20"/></block></switch> <comment type="block" pos:line="916" pos:column="21">/* switch */</comment>
                }<pos:position pos:line="917" pos:column="18"/></block></then></if> <comment type="block" pos:line="917" pos:column="19">/* two valid time strings */</comment>
              }<pos:position pos:line="918" pos:column="16"/></block></then></if> <comment type="block" pos:line="918" pos:column="17">/* we have a time condition */</comment>

            }<pos:position pos:line="920" pos:column="14"/></block></then></if> <comment type="block" pos:line="920" pos:column="15">/* this is HTTP */</comment>
          }<pos:position pos:line="921" pos:column="12"/></block></then></if> <comment type="block" pos:line="921" pos:column="13">/* this is the first time we write a body part */</comment>
          <expr_stmt><expr><name><name pos:line="922" pos:column="11">k<pos:position pos:line="922" pos:column="12"/></name><operator pos:line="922" pos:column="12">-&gt;<pos:position pos:line="922" pos:column="17"/></operator><name pos:line="922" pos:column="14">bodywrites<pos:position pos:line="922" pos:column="24"/></name></name><operator pos:line="922" pos:column="24">++<pos:position pos:line="922" pos:column="26"/></operator></expr>;<pos:position pos:line="922" pos:column="27"/></expr_stmt>

          <comment type="block" pos:line="924" pos:column="11">/* pass data to the debug function before it gets "dechunked" */</comment>
          <if pos:line="925" pos:column="11">if<condition pos:line="925" pos:column="13">(<expr><name><name pos:line="925" pos:column="14">data<pos:position pos:line="925" pos:column="18"/></name><operator pos:line="925" pos:column="18">-&gt;<pos:position pos:line="925" pos:column="23"/></operator><name pos:line="925" pos:column="20">set<pos:position pos:line="925" pos:column="23"/></name><operator pos:line="925" pos:column="23">.<pos:position pos:line="925" pos:column="24"/></operator><name pos:line="925" pos:column="24">verbose<pos:position pos:line="925" pos:column="31"/></name></name></expr>)<pos:position pos:line="925" pos:column="32"/></condition><then pos:line="925" pos:column="32"> <block pos:line="925" pos:column="33">{
            <if pos:line="926" pos:column="13">if<condition pos:line="926" pos:column="15">(<expr><name><name pos:line="926" pos:column="16">k<pos:position pos:line="926" pos:column="17"/></name><operator pos:line="926" pos:column="17">-&gt;<pos:position pos:line="926" pos:column="22"/></operator><name pos:line="926" pos:column="19">badheader<pos:position pos:line="926" pos:column="28"/></name></name></expr>)<pos:position pos:line="926" pos:column="29"/></condition><then pos:line="926" pos:column="29"> <block pos:line="926" pos:column="30">{
              <expr_stmt><expr><call><name pos:line="927" pos:column="15">Curl_debug<pos:position pos:line="927" pos:column="25"/></name><argument_list pos:line="927" pos:column="25">(<argument><expr><name pos:line="927" pos:column="26">data<pos:position pos:line="927" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="927" pos:column="32">CURLINFO_DATA_IN<pos:position pos:line="927" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="927" pos:column="50">data<pos:position pos:line="927" pos:column="54"/></name><operator pos:line="927" pos:column="54">-&gt;<pos:position pos:line="927" pos:column="59"/></operator><name pos:line="927" pos:column="56">state<pos:position pos:line="927" pos:column="61"/></name><operator pos:line="927" pos:column="61">.<pos:position pos:line="927" pos:column="62"/></operator><name pos:line="927" pos:column="62">headerbuff<pos:position pos:line="927" pos:column="72"/></name></name></expr></argument>,
                         <argument><expr><operator pos:line="928" pos:column="26">(<pos:position pos:line="928" pos:column="27"/></operator><name pos:line="928" pos:column="27">size_t<pos:position pos:line="928" pos:column="33"/></name><operator pos:line="928" pos:column="33">)<pos:position pos:line="928" pos:column="34"/></operator><name><name pos:line="928" pos:column="34">k<pos:position pos:line="928" pos:column="35"/></name><operator pos:line="928" pos:column="35">-&gt;<pos:position pos:line="928" pos:column="40"/></operator><name pos:line="928" pos:column="37">hbuflen<pos:position pos:line="928" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="928" pos:column="46">conn<pos:position pos:line="928" pos:column="50"/></name></expr></argument>)<pos:position pos:line="928" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="928" pos:column="52"/></expr_stmt>
              <if pos:line="929" pos:column="15">if<condition pos:line="929" pos:column="17">(<expr><name><name pos:line="929" pos:column="18">k<pos:position pos:line="929" pos:column="19"/></name><operator pos:line="929" pos:column="19">-&gt;<pos:position pos:line="929" pos:column="24"/></operator><name pos:line="929" pos:column="21">badheader<pos:position pos:line="929" pos:column="30"/></name></name> <operator pos:line="929" pos:column="31">==<pos:position pos:line="929" pos:column="33"/></operator> <name pos:line="929" pos:column="34">HEADER_PARTHEADER<pos:position pos:line="929" pos:column="51"/></name></expr>)<pos:position pos:line="929" pos:column="52"/></condition><then pos:line="929" pos:column="52">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="930" pos:column="17">Curl_debug<pos:position pos:line="930" pos:column="27"/></name><argument_list pos:line="930" pos:column="27">(<argument><expr><name pos:line="930" pos:column="28">data<pos:position pos:line="930" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="930" pos:column="34">CURLINFO_DATA_IN<pos:position pos:line="930" pos:column="50"/></name></expr></argument>,
                           <argument><expr><name><name pos:line="931" pos:column="28">k<pos:position pos:line="931" pos:column="29"/></name><operator pos:line="931" pos:column="29">-&gt;<pos:position pos:line="931" pos:column="34"/></operator><name pos:line="931" pos:column="31">str<pos:position pos:line="931" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="931" pos:column="36">(<pos:position pos:line="931" pos:column="37"/></operator><name pos:line="931" pos:column="37">size_t<pos:position pos:line="931" pos:column="43"/></name><operator pos:line="931" pos:column="43">)<pos:position pos:line="931" pos:column="44"/></operator><name pos:line="931" pos:column="44">nread<pos:position pos:line="931" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="931" pos:column="51">conn<pos:position pos:line="931" pos:column="55"/></name></expr></argument>)<pos:position pos:line="931" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="931" pos:column="57"/></expr_stmt></block></then></if>
            }<pos:position pos:line="932" pos:column="14"/></block></then>
            <else pos:line="933" pos:column="13">else
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="934" pos:column="15">Curl_debug<pos:position pos:line="934" pos:column="25"/></name><argument_list pos:line="934" pos:column="25">(<argument><expr><name pos:line="934" pos:column="26">data<pos:position pos:line="934" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="934" pos:column="32">CURLINFO_DATA_IN<pos:position pos:line="934" pos:column="48"/></name></expr></argument>,
                         <argument><expr><name><name pos:line="935" pos:column="26">k<pos:position pos:line="935" pos:column="27"/></name><operator pos:line="935" pos:column="27">-&gt;<pos:position pos:line="935" pos:column="32"/></operator><name pos:line="935" pos:column="29">str<pos:position pos:line="935" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="935" pos:column="34">(<pos:position pos:line="935" pos:column="35"/></operator><name pos:line="935" pos:column="35">size_t<pos:position pos:line="935" pos:column="41"/></name><operator pos:line="935" pos:column="41">)<pos:position pos:line="935" pos:column="42"/></operator><name pos:line="935" pos:column="42">nread<pos:position pos:line="935" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="935" pos:column="49">conn<pos:position pos:line="935" pos:column="53"/></name></expr></argument>)<pos:position pos:line="935" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="935" pos:column="55"/></expr_stmt></block></else></if>
          }<pos:position pos:line="936" pos:column="12"/></block></then></if>

<cpp:ifndef pos:line="938" pos:column="1">#<cpp:directive pos:line="938" pos:column="2">ifndef<pos:position pos:line="938" pos:column="8"/></cpp:directive> <name pos:line="938" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="938" pos:column="26"/></name></cpp:ifndef>
          <if pos:line="939" pos:column="11">if<condition pos:line="939" pos:column="13">(<expr><name><name pos:line="939" pos:column="14">k<pos:position pos:line="939" pos:column="15"/></name><operator pos:line="939" pos:column="15">-&gt;<pos:position pos:line="939" pos:column="20"/></operator><name pos:line="939" pos:column="17">chunk<pos:position pos:line="939" pos:column="22"/></name></name></expr>)<pos:position pos:line="939" pos:column="23"/></condition><then pos:line="939" pos:column="23"> <block pos:line="939" pos:column="24">{
            <comment type="block" pos:line="940" pos:column="13">/*
             * Here comes a chunked transfer flying and we need to decode this
             * properly.  While the name says read, this function both reads
             * and writes away the data. The returned 'nread' holds the number
             * of actual data it wrote to the client.
             */</comment>

            <decl_stmt><decl><type><name pos:line="947" pos:column="13">CHUNKcode<pos:position pos:line="947" pos:column="22"/></name></type> <name pos:line="947" pos:column="23">res<pos:position pos:line="947" pos:column="26"/></name> <init pos:line="947" pos:column="27">=
              <expr><call><name pos:line="948" pos:column="15">Curl_httpchunk_read<pos:position pos:line="948" pos:column="34"/></name><argument_list pos:line="948" pos:column="34">(<argument><expr><name pos:line="948" pos:column="35">conn<pos:position pos:line="948" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="948" pos:column="41">k<pos:position pos:line="948" pos:column="42"/></name><operator pos:line="948" pos:column="42">-&gt;<pos:position pos:line="948" pos:column="47"/></operator><name pos:line="948" pos:column="44">str<pos:position pos:line="948" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="948" pos:column="49">nread<pos:position pos:line="948" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="948" pos:column="56">&amp;<pos:position pos:line="948" pos:column="61"/></operator><name pos:line="948" pos:column="57">nread<pos:position pos:line="948" pos:column="62"/></name></expr></argument>)<pos:position pos:line="948" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="948" pos:column="64"/></decl_stmt>

            <if pos:line="950" pos:column="13">if<condition pos:line="950" pos:column="15">(<expr><name pos:line="950" pos:column="16">CHUNKE_OK<pos:position pos:line="950" pos:column="25"/></name> <operator pos:line="950" pos:column="26">&lt;<pos:position pos:line="950" pos:column="30"/></operator> <name pos:line="950" pos:column="28">res<pos:position pos:line="950" pos:column="31"/></name></expr>)<pos:position pos:line="950" pos:column="32"/></condition><then pos:line="950" pos:column="32"> <block pos:line="950" pos:column="33">{
              <if pos:line="951" pos:column="15">if<condition pos:line="951" pos:column="17">(<expr><name pos:line="951" pos:column="18">CHUNKE_WRITE_ERROR<pos:position pos:line="951" pos:column="36"/></name> <operator pos:line="951" pos:column="37">==<pos:position pos:line="951" pos:column="39"/></operator> <name pos:line="951" pos:column="40">res<pos:position pos:line="951" pos:column="43"/></name></expr>)<pos:position pos:line="951" pos:column="44"/></condition><then pos:line="951" pos:column="44"> <block pos:line="951" pos:column="45">{
                <expr_stmt><expr><call><name pos:line="952" pos:column="17">failf<pos:position pos:line="952" pos:column="22"/></name><argument_list pos:line="952" pos:column="22">(<argument><expr><name pos:line="952" pos:column="23">data<pos:position pos:line="952" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="952" pos:column="29">"Failed writing data"<pos:position pos:line="952" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="952" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="952" pos:column="52"/></expr_stmt>
                <return pos:line="953" pos:column="17">return <expr><name pos:line="953" pos:column="24">CURLE_WRITE_ERROR<pos:position pos:line="953" pos:column="41"/></name></expr>;<pos:position pos:line="953" pos:column="42"/></return>
              }<pos:position pos:line="954" pos:column="16"/></block></then></if>
              <expr_stmt><expr><call><name pos:line="955" pos:column="15">failf<pos:position pos:line="955" pos:column="20"/></name><argument_list pos:line="955" pos:column="20">(<argument><expr><name pos:line="955" pos:column="21">data<pos:position pos:line="955" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="955" pos:column="27">"Received problem %d in the chunky parser"<pos:position pos:line="955" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="955" pos:column="71">res<pos:position pos:line="955" pos:column="74"/></name></expr></argument>)<pos:position pos:line="955" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="955" pos:column="76"/></expr_stmt>
              <return pos:line="956" pos:column="15">return <expr><name pos:line="956" pos:column="22">CURLE_RECV_ERROR<pos:position pos:line="956" pos:column="38"/></name></expr>;<pos:position pos:line="956" pos:column="39"/></return>
            }<pos:position pos:line="957" pos:column="14"/></block></then>
            <elseif pos:line="958" pos:column="13">else <if pos:line="958" pos:column="18">if<condition pos:line="958" pos:column="20">(<expr><name pos:line="958" pos:column="21">CHUNKE_STOP<pos:position pos:line="958" pos:column="32"/></name> <operator pos:line="958" pos:column="33">==<pos:position pos:line="958" pos:column="35"/></operator> <name pos:line="958" pos:column="36">res<pos:position pos:line="958" pos:column="39"/></name></expr>)<pos:position pos:line="958" pos:column="40"/></condition><then pos:line="958" pos:column="40"> <block pos:line="958" pos:column="41">{
              <decl_stmt><decl><type><name pos:line="959" pos:column="15">size_t<pos:position pos:line="959" pos:column="21"/></name></type> <name pos:line="959" pos:column="22">dataleft<pos:position pos:line="959" pos:column="30"/></name></decl>;<pos:position pos:line="959" pos:column="31"/></decl_stmt>
              <comment type="block" pos:line="960" pos:column="15">/* we're done reading chunks! */</comment>
              <expr_stmt><expr><name><name pos:line="961" pos:column="15">k<pos:position pos:line="961" pos:column="16"/></name><operator pos:line="961" pos:column="16">-&gt;<pos:position pos:line="961" pos:column="21"/></operator><name pos:line="961" pos:column="18">keepon<pos:position pos:line="961" pos:column="24"/></name></name> <operator pos:line="961" pos:column="25">&amp;=<pos:position pos:line="961" pos:column="31"/></operator> <operator pos:line="961" pos:column="28">~<pos:position pos:line="961" pos:column="29"/></operator><name pos:line="961" pos:column="29">KEEP_READ<pos:position pos:line="961" pos:column="38"/></name></expr>;<pos:position pos:line="961" pos:column="39"/></expr_stmt> <comment type="block" pos:line="961" pos:column="40">/* read no more */</comment>

              <comment type="block" pos:line="963" pos:column="15">/* There are now possibly N number of bytes at the end of the
                 str buffer that weren't written to the client.

                 We DO care about this data if we are pipelining.
                 Push it back to be read on the next pass. */</comment>

              <expr_stmt><expr><name pos:line="969" pos:column="15">dataleft<pos:position pos:line="969" pos:column="23"/></name> <operator pos:line="969" pos:column="24">=<pos:position pos:line="969" pos:column="25"/></operator> <name><name pos:line="969" pos:column="26">conn<pos:position pos:line="969" pos:column="30"/></name><operator pos:line="969" pos:column="30">-&gt;<pos:position pos:line="969" pos:column="35"/></operator><name pos:line="969" pos:column="32">chunk<pos:position pos:line="969" pos:column="37"/></name><operator pos:line="969" pos:column="37">.<pos:position pos:line="969" pos:column="38"/></operator><name pos:line="969" pos:column="38">dataleft<pos:position pos:line="969" pos:column="46"/></name></name></expr>;<pos:position pos:line="969" pos:column="47"/></expr_stmt>
              <if pos:line="970" pos:column="15">if<condition pos:line="970" pos:column="17">(<expr><name pos:line="970" pos:column="18">dataleft<pos:position pos:line="970" pos:column="26"/></name> <operator pos:line="970" pos:column="27">!=<pos:position pos:line="970" pos:column="29"/></operator> <literal type="number" pos:line="970" pos:column="30">0<pos:position pos:line="970" pos:column="31"/></literal></expr>)<pos:position pos:line="970" pos:column="32"/></condition><then pos:line="970" pos:column="32"> <block pos:line="970" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="971" pos:column="17">infof<pos:position pos:line="971" pos:column="22"/></name><argument_list pos:line="971" pos:column="22">(<argument><expr><name><name pos:line="971" pos:column="23">conn<pos:position pos:line="971" pos:column="27"/></name><operator pos:line="971" pos:column="27">-&gt;<pos:position pos:line="971" pos:column="32"/></operator><name pos:line="971" pos:column="29">data<pos:position pos:line="971" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="971" pos:column="35">"Leftovers after chunking. "<pos:position pos:line="971" pos:column="63"/></literal>
                      <literal type="string" pos:line="972" pos:column="23">" Rewinding %d bytes\n"<pos:position pos:line="972" pos:column="46"/></literal></expr></argument>,<argument><expr><name pos:line="972" pos:column="47">dataleft<pos:position pos:line="972" pos:column="55"/></name></expr></argument>)<pos:position pos:line="972" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="972" pos:column="57"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="973" pos:column="17">read_rewind<pos:position pos:line="973" pos:column="28"/></name><argument_list pos:line="973" pos:column="28">(<argument><expr><name pos:line="973" pos:column="29">conn<pos:position pos:line="973" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="973" pos:column="35">dataleft<pos:position pos:line="973" pos:column="43"/></name></expr></argument>)<pos:position pos:line="973" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="973" pos:column="45"/></expr_stmt>
              }<pos:position pos:line="974" pos:column="16"/></block></then></if>
            }<pos:position pos:line="975" pos:column="14"/></block></then></if></elseif></if>
            <comment type="block" pos:line="976" pos:column="13">/* If it returned OK, we just keep going */</comment>
          }<pos:position pos:line="977" pos:column="12"/></block></then></if>
<cpp:endif pos:line="978" pos:column="1">#<cpp:directive pos:line="978" pos:column="2">endif<pos:position pos:line="978" pos:column="7"/></cpp:directive></cpp:endif>   <comment type="block" pos:line="978" pos:column="10">/* CURL_DISABLE_HTTP */</comment>

          <if pos:line="980" pos:column="11">if<condition pos:line="980" pos:column="13">(<expr><operator pos:line="980" pos:column="14">(<pos:position pos:line="980" pos:column="15"/></operator><operator pos:line="980" pos:column="15">-<pos:position pos:line="980" pos:column="16"/></operator><literal type="number" pos:line="980" pos:column="16">1<pos:position pos:line="980" pos:column="17"/></literal> <operator pos:line="980" pos:column="18">!=<pos:position pos:line="980" pos:column="20"/></operator> <name><name pos:line="980" pos:column="21">k<pos:position pos:line="980" pos:column="22"/></name><operator pos:line="980" pos:column="22">-&gt;<pos:position pos:line="980" pos:column="27"/></operator><name pos:line="980" pos:column="24">maxdownload<pos:position pos:line="980" pos:column="35"/></name></name><operator pos:line="980" pos:column="35">)<pos:position pos:line="980" pos:column="36"/></operator> <operator pos:line="980" pos:column="37">&amp;&amp;<pos:position pos:line="980" pos:column="47"/></operator>
             <operator pos:line="981" pos:column="14">(<pos:position pos:line="981" pos:column="15"/></operator><name><name pos:line="981" pos:column="15">k<pos:position pos:line="981" pos:column="16"/></name><operator pos:line="981" pos:column="16">-&gt;<pos:position pos:line="981" pos:column="21"/></operator><name pos:line="981" pos:column="18">bytecount<pos:position pos:line="981" pos:column="27"/></name></name> <operator pos:line="981" pos:column="28">+<pos:position pos:line="981" pos:column="29"/></operator> <name pos:line="981" pos:column="30">nread<pos:position pos:line="981" pos:column="35"/></name> <operator pos:line="981" pos:column="36">&gt;=<pos:position pos:line="981" pos:column="41"/></operator> <name><name pos:line="981" pos:column="39">k<pos:position pos:line="981" pos:column="40"/></name><operator pos:line="981" pos:column="40">-&gt;<pos:position pos:line="981" pos:column="45"/></operator><name pos:line="981" pos:column="42">maxdownload<pos:position pos:line="981" pos:column="53"/></name></name><operator pos:line="981" pos:column="53">)<pos:position pos:line="981" pos:column="54"/></operator></expr>)<pos:position pos:line="981" pos:column="55"/></condition><then pos:line="981" pos:column="55"> <block pos:line="981" pos:column="56">{
            <comment type="block" pos:line="982" pos:column="13">/* The 'excess' amount below can't be more than BUFSIZE which
               always will fit in a size_t */</comment>
            <decl_stmt><decl><type><name pos:line="984" pos:column="13">size_t<pos:position pos:line="984" pos:column="19"/></name></type> <name pos:line="984" pos:column="20">excess<pos:position pos:line="984" pos:column="26"/></name> <init pos:line="984" pos:column="27">= <expr><call pos:line="984" pos:column="29">(<name pos:line="984" pos:column="30">size_t<pos:position pos:line="984" pos:column="36"/></name>)<argument_list pos:line="984" pos:column="37">(<argument><expr><name><name pos:line="984" pos:column="38">k<pos:position pos:line="984" pos:column="39"/></name><operator pos:line="984" pos:column="39">-&gt;<pos:position pos:line="984" pos:column="44"/></operator><name pos:line="984" pos:column="41">bytecount<pos:position pos:line="984" pos:column="50"/></name></name> <operator pos:line="984" pos:column="51">+<pos:position pos:line="984" pos:column="52"/></operator> <name pos:line="984" pos:column="53">nread<pos:position pos:line="984" pos:column="58"/></name> <operator pos:line="984" pos:column="59">-<pos:position pos:line="984" pos:column="60"/></operator> <name><name pos:line="984" pos:column="61">k<pos:position pos:line="984" pos:column="62"/></name><operator pos:line="984" pos:column="62">-&gt;<pos:position pos:line="984" pos:column="67"/></operator><name pos:line="984" pos:column="64">maxdownload<pos:position pos:line="984" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="984" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="984" pos:column="77"/></decl_stmt>
            <if pos:line="985" pos:column="13">if<condition pos:line="985" pos:column="15">(<expr><name pos:line="985" pos:column="16">excess<pos:position pos:line="985" pos:column="22"/></name> <operator pos:line="985" pos:column="23">&gt;<pos:position pos:line="985" pos:column="27"/></operator> <literal type="number" pos:line="985" pos:column="25">0<pos:position pos:line="985" pos:column="26"/></literal> <operator pos:line="985" pos:column="27">&amp;&amp;<pos:position pos:line="985" pos:column="37"/></operator> <operator pos:line="985" pos:column="30">!<pos:position pos:line="985" pos:column="31"/></operator><name><name pos:line="985" pos:column="31">k<pos:position pos:line="985" pos:column="32"/></name><operator pos:line="985" pos:column="32">-&gt;<pos:position pos:line="985" pos:column="37"/></operator><name pos:line="985" pos:column="34">ignorebody<pos:position pos:line="985" pos:column="44"/></name></name></expr>)<pos:position pos:line="985" pos:column="45"/></condition><then pos:line="985" pos:column="45"> <block pos:line="985" pos:column="46">{
              <expr_stmt><expr><call><name pos:line="986" pos:column="15">infof<pos:position pos:line="986" pos:column="20"/></name><argument_list pos:line="986" pos:column="20">(<argument><expr><name pos:line="986" pos:column="21">data<pos:position pos:line="986" pos:column="25"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="987" pos:column="21">"Rewinding stream by : %d"<pos:position pos:line="987" pos:column="47"/></literal>
                    <literal type="string" pos:line="988" pos:column="21">" bytes on url %s (size = %"<pos:position pos:line="988" pos:column="49"/></literal> <name pos:line="988" pos:column="50">FORMAT_OFF_T<pos:position pos:line="988" pos:column="62"/></name>
                    <literal type="string" pos:line="989" pos:column="21">", maxdownload = %"<pos:position pos:line="989" pos:column="40"/></literal> <name pos:line="989" pos:column="41">FORMAT_OFF_T<pos:position pos:line="989" pos:column="53"/></name>
                    <literal type="string" pos:line="990" pos:column="21">", bytecount = %"<pos:position pos:line="990" pos:column="38"/></literal> <name pos:line="990" pos:column="39">FORMAT_OFF_T<pos:position pos:line="990" pos:column="51"/></name> <literal type="string" pos:line="990" pos:column="52">", nread = %d)\n"<pos:position pos:line="990" pos:column="69"/></literal></expr></argument>,
                    <argument><expr><name pos:line="991" pos:column="21">excess<pos:position pos:line="991" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="991" pos:column="29">data<pos:position pos:line="991" pos:column="33"/></name><operator pos:line="991" pos:column="33">-&gt;<pos:position pos:line="991" pos:column="38"/></operator><name pos:line="991" pos:column="35">state<pos:position pos:line="991" pos:column="40"/></name><operator pos:line="991" pos:column="40">.<pos:position pos:line="991" pos:column="41"/></operator><name pos:line="991" pos:column="41">path<pos:position pos:line="991" pos:column="45"/></name></name></expr></argument>,
                    <argument><expr><name><name pos:line="992" pos:column="21">k<pos:position pos:line="992" pos:column="22"/></name><operator pos:line="992" pos:column="22">-&gt;<pos:position pos:line="992" pos:column="27"/></operator><name pos:line="992" pos:column="24">size<pos:position pos:line="992" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="992" pos:column="30">k<pos:position pos:line="992" pos:column="31"/></name><operator pos:line="992" pos:column="31">-&gt;<pos:position pos:line="992" pos:column="36"/></operator><name pos:line="992" pos:column="33">maxdownload<pos:position pos:line="992" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="992" pos:column="46">k<pos:position pos:line="992" pos:column="47"/></name><operator pos:line="992" pos:column="47">-&gt;<pos:position pos:line="992" pos:column="52"/></operator><name pos:line="992" pos:column="49">bytecount<pos:position pos:line="992" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="992" pos:column="60">nread<pos:position pos:line="992" pos:column="65"/></name></expr></argument>)<pos:position pos:line="992" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="992" pos:column="67"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="993" pos:column="15">read_rewind<pos:position pos:line="993" pos:column="26"/></name><argument_list pos:line="993" pos:column="26">(<argument><expr><name pos:line="993" pos:column="27">conn<pos:position pos:line="993" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="993" pos:column="33">excess<pos:position pos:line="993" pos:column="39"/></name></expr></argument>)<pos:position pos:line="993" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="993" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="994" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="996" pos:column="13">nread<pos:position pos:line="996" pos:column="18"/></name> <operator pos:line="996" pos:column="19">=<pos:position pos:line="996" pos:column="20"/></operator> <call pos:line="996" pos:column="21">(<name pos:line="996" pos:column="22">ssize_t<pos:position pos:line="996" pos:column="29"/></name>) <argument_list pos:line="996" pos:column="31">(<argument><expr><name><name pos:line="996" pos:column="32">k<pos:position pos:line="996" pos:column="33"/></name><operator pos:line="996" pos:column="33">-&gt;<pos:position pos:line="996" pos:column="38"/></operator><name pos:line="996" pos:column="35">maxdownload<pos:position pos:line="996" pos:column="46"/></name></name> <operator pos:line="996" pos:column="47">-<pos:position pos:line="996" pos:column="48"/></operator> <name><name pos:line="996" pos:column="49">k<pos:position pos:line="996" pos:column="50"/></name><operator pos:line="996" pos:column="50">-&gt;<pos:position pos:line="996" pos:column="55"/></operator><name pos:line="996" pos:column="52">bytecount<pos:position pos:line="996" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="996" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="996" pos:column="63"/></expr_stmt>
            <if pos:line="997" pos:column="13">if<condition pos:line="997" pos:column="15">(<expr><name pos:line="997" pos:column="16">nread<pos:position pos:line="997" pos:column="21"/></name> <operator pos:line="997" pos:column="22">&lt;<pos:position pos:line="997" pos:column="26"/></operator> <literal type="number" pos:line="997" pos:column="24">0<pos:position pos:line="997" pos:column="25"/></literal></expr> )<pos:position pos:line="997" pos:column="27"/></condition><then pos:line="997" pos:column="27"> <comment type="block" pos:line="997" pos:column="28">/* this should be unusual */</comment>
              <block type="pseudo"><expr_stmt><expr><name pos:line="998" pos:column="15">nread<pos:position pos:line="998" pos:column="20"/></name> <operator pos:line="998" pos:column="21">=<pos:position pos:line="998" pos:column="22"/></operator> <literal type="number" pos:line="998" pos:column="23">0<pos:position pos:line="998" pos:column="24"/></literal></expr>;<pos:position pos:line="998" pos:column="25"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name><name pos:line="1000" pos:column="13">k<pos:position pos:line="1000" pos:column="14"/></name><operator pos:line="1000" pos:column="14">-&gt;<pos:position pos:line="1000" pos:column="19"/></operator><name pos:line="1000" pos:column="16">keepon<pos:position pos:line="1000" pos:column="22"/></name></name> <operator pos:line="1000" pos:column="23">&amp;=<pos:position pos:line="1000" pos:column="29"/></operator> <operator pos:line="1000" pos:column="26">~<pos:position pos:line="1000" pos:column="27"/></operator><name pos:line="1000" pos:column="27">KEEP_READ<pos:position pos:line="1000" pos:column="36"/></name></expr>;<pos:position pos:line="1000" pos:column="37"/></expr_stmt> <comment type="block" pos:line="1000" pos:column="38">/* we're done reading */</comment>
          }<pos:position pos:line="1001" pos:column="12"/></block></then></if>

          <expr_stmt><expr><name><name pos:line="1003" pos:column="11">k<pos:position pos:line="1003" pos:column="12"/></name><operator pos:line="1003" pos:column="12">-&gt;<pos:position pos:line="1003" pos:column="17"/></operator><name pos:line="1003" pos:column="14">bytecount<pos:position pos:line="1003" pos:column="23"/></name></name> <operator pos:line="1003" pos:column="24">+=<pos:position pos:line="1003" pos:column="26"/></operator> <name pos:line="1003" pos:column="27">nread<pos:position pos:line="1003" pos:column="32"/></name></expr>;<pos:position pos:line="1003" pos:column="33"/></expr_stmt>

          <expr_stmt><expr><call><name pos:line="1005" pos:column="11">Curl_pgrsSetDownloadCounter<pos:position pos:line="1005" pos:column="38"/></name><argument_list pos:line="1005" pos:column="38">(<argument><expr><name pos:line="1005" pos:column="39">data<pos:position pos:line="1005" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="1005" pos:column="45">k<pos:position pos:line="1005" pos:column="46"/></name><operator pos:line="1005" pos:column="46">-&gt;<pos:position pos:line="1005" pos:column="51"/></operator><name pos:line="1005" pos:column="48">bytecount<pos:position pos:line="1005" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="1005" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1005" pos:column="59"/></expr_stmt>

          <if pos:line="1007" pos:column="11">if<condition pos:line="1007" pos:column="13">(<expr><operator pos:line="1007" pos:column="14">!<pos:position pos:line="1007" pos:column="15"/></operator><name><name pos:line="1007" pos:column="15">k<pos:position pos:line="1007" pos:column="16"/></name><operator pos:line="1007" pos:column="16">-&gt;<pos:position pos:line="1007" pos:column="21"/></operator><name pos:line="1007" pos:column="18">chunk<pos:position pos:line="1007" pos:column="23"/></name></name> <operator pos:line="1007" pos:column="24">&amp;&amp;<pos:position pos:line="1007" pos:column="34"/></operator> <operator pos:line="1007" pos:column="27">(<pos:position pos:line="1007" pos:column="28"/></operator><name pos:line="1007" pos:column="28">nread<pos:position pos:line="1007" pos:column="33"/></name> <operator pos:line="1007" pos:column="34">||<pos:position pos:line="1007" pos:column="36"/></operator> <name><name pos:line="1007" pos:column="37">k<pos:position pos:line="1007" pos:column="38"/></name><operator pos:line="1007" pos:column="38">-&gt;<pos:position pos:line="1007" pos:column="43"/></operator><name pos:line="1007" pos:column="40">badheader<pos:position pos:line="1007" pos:column="49"/></name></name> <operator pos:line="1007" pos:column="50">||<pos:position pos:line="1007" pos:column="52"/></operator> <name pos:line="1007" pos:column="53">is_empty_data<pos:position pos:line="1007" pos:column="66"/></name><operator pos:line="1007" pos:column="66">)<pos:position pos:line="1007" pos:column="67"/></operator></expr>)<pos:position pos:line="1007" pos:column="68"/></condition><then pos:line="1007" pos:column="68"> <block pos:line="1007" pos:column="69">{
            <comment type="block" pos:line="1008" pos:column="13">/* If this is chunky transfer, it was already written */</comment>

            <if pos:line="1010" pos:column="13">if<condition pos:line="1010" pos:column="15">(<expr><name><name pos:line="1010" pos:column="16">k<pos:position pos:line="1010" pos:column="17"/></name><operator pos:line="1010" pos:column="17">-&gt;<pos:position pos:line="1010" pos:column="22"/></operator><name pos:line="1010" pos:column="19">badheader<pos:position pos:line="1010" pos:column="28"/></name></name> <operator pos:line="1010" pos:column="29">&amp;&amp;<pos:position pos:line="1010" pos:column="39"/></operator> <operator pos:line="1010" pos:column="32">!<pos:position pos:line="1010" pos:column="33"/></operator><name><name pos:line="1010" pos:column="33">k<pos:position pos:line="1010" pos:column="34"/></name><operator pos:line="1010" pos:column="34">-&gt;<pos:position pos:line="1010" pos:column="39"/></operator><name pos:line="1010" pos:column="36">ignorebody<pos:position pos:line="1010" pos:column="46"/></name></name></expr>)<pos:position pos:line="1010" pos:column="47"/></condition><then pos:line="1010" pos:column="47"> <block pos:line="1010" pos:column="48">{
              <comment type="block" pos:line="1011" pos:column="15">/* we parsed a piece of data wrongly assuming it was a header
                 and now we output it as body instead */</comment>
              <expr_stmt><expr><name pos:line="1013" pos:column="15">result<pos:position pos:line="1013" pos:column="21"/></name> <operator pos:line="1013" pos:column="22">=<pos:position pos:line="1013" pos:column="23"/></operator> <call><name pos:line="1013" pos:column="24">Curl_client_write<pos:position pos:line="1013" pos:column="41"/></name><argument_list pos:line="1013" pos:column="41">(<argument><expr><name pos:line="1013" pos:column="42">conn<pos:position pos:line="1013" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="1013" pos:column="48">CLIENTWRITE_BODY<pos:position pos:line="1013" pos:column="64"/></name></expr></argument>,
                                         <argument><expr><name><name pos:line="1014" pos:column="42">data<pos:position pos:line="1014" pos:column="46"/></name><operator pos:line="1014" pos:column="46">-&gt;<pos:position pos:line="1014" pos:column="51"/></operator><name pos:line="1014" pos:column="48">state<pos:position pos:line="1014" pos:column="53"/></name><operator pos:line="1014" pos:column="53">.<pos:position pos:line="1014" pos:column="54"/></operator><name pos:line="1014" pos:column="54">headerbuff<pos:position pos:line="1014" pos:column="64"/></name></name></expr></argument>,
                                         <argument><expr><name><name pos:line="1015" pos:column="42">k<pos:position pos:line="1015" pos:column="43"/></name><operator pos:line="1015" pos:column="43">-&gt;<pos:position pos:line="1015" pos:column="48"/></operator><name pos:line="1015" pos:column="45">hbuflen<pos:position pos:line="1015" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="1015" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1015" pos:column="54"/></expr_stmt>
              <if pos:line="1016" pos:column="15">if<condition pos:line="1016" pos:column="17">(<expr><name pos:line="1016" pos:column="18">result<pos:position pos:line="1016" pos:column="24"/></name></expr>)<pos:position pos:line="1016" pos:column="25"/></condition><then pos:line="1016" pos:column="25">
                <block type="pseudo"><return pos:line="1017" pos:column="17">return <expr><name pos:line="1017" pos:column="24">result<pos:position pos:line="1017" pos:column="30"/></name></expr>;<pos:position pos:line="1017" pos:column="31"/></return></block></then></if>
            }<pos:position pos:line="1018" pos:column="14"/></block></then></if>
            <if pos:line="1019" pos:column="13">if<condition pos:line="1019" pos:column="15">(<expr><name><name pos:line="1019" pos:column="16">k<pos:position pos:line="1019" pos:column="17"/></name><operator pos:line="1019" pos:column="17">-&gt;<pos:position pos:line="1019" pos:column="22"/></operator><name pos:line="1019" pos:column="19">badheader<pos:position pos:line="1019" pos:column="28"/></name></name> <operator pos:line="1019" pos:column="29">&lt;<pos:position pos:line="1019" pos:column="33"/></operator> <name pos:line="1019" pos:column="31">HEADER_ALLBAD<pos:position pos:line="1019" pos:column="44"/></name></expr>)<pos:position pos:line="1019" pos:column="45"/></condition><then pos:line="1019" pos:column="45"> <block pos:line="1019" pos:column="46">{
              <comment type="block" pos:line="1020" pos:column="15">/* This switch handles various content encodings. If there's an
                 error here, be sure to check over the almost identical code
                 in http_chunks.c.
                 Make sure that ALL_CONTENT_ENCODINGS contains all the
                 encodings handled here. */</comment>
<cpp:ifdef pos:line="1025" pos:column="1">#<cpp:directive pos:line="1025" pos:column="2">ifdef<pos:position pos:line="1025" pos:column="7"/></cpp:directive> <name pos:line="1025" pos:column="8">HAVE_LIBZ<pos:position pos:line="1025" pos:column="17"/></name></cpp:ifdef>
              <switch pos:line="1026" pos:column="15">switch <condition pos:line="1026" pos:column="22">(<expr><ternary><condition><expr><name><name pos:line="1026" pos:column="23">conn<pos:position pos:line="1026" pos:column="27"/></name><operator pos:line="1026" pos:column="27">-&gt;<pos:position pos:line="1026" pos:column="32"/></operator><name pos:line="1026" pos:column="29">data<pos:position pos:line="1026" pos:column="33"/></name><operator pos:line="1026" pos:column="33">-&gt;<pos:position pos:line="1026" pos:column="38"/></operator><name pos:line="1026" pos:column="35">set<pos:position pos:line="1026" pos:column="38"/></name><operator pos:line="1026" pos:column="38">.<pos:position pos:line="1026" pos:column="39"/></operator><name pos:line="1026" pos:column="39">http_ce_skip<pos:position pos:line="1026" pos:column="51"/></name></name></expr> ?<pos:position pos:line="1026" pos:column="53"/></condition><then pos:line="1026" pos:column="53">
                      <expr><name pos:line="1027" pos:column="23">IDENTITY<pos:position pos:line="1027" pos:column="31"/></name></expr> <pos:position pos:line="1027" pos:column="32"/></then><else pos:line="1027" pos:column="32">: <expr><name><name pos:line="1027" pos:column="34">k<pos:position pos:line="1027" pos:column="35"/></name><operator pos:line="1027" pos:column="35">-&gt;<pos:position pos:line="1027" pos:column="40"/></operator><name pos:line="1027" pos:column="37">content_encoding<pos:position pos:line="1027" pos:column="53"/></name></name></expr></else></ternary></expr>)<pos:position pos:line="1027" pos:column="54"/></condition> <block pos:line="1027" pos:column="55">{
              <case pos:line="1028" pos:column="15">case <expr><name pos:line="1028" pos:column="20">IDENTITY<pos:position pos:line="1028" pos:column="28"/></name></expr>:<pos:position pos:line="1028" pos:column="29"/></case>
<cpp:endif pos:line="1029" pos:column="1">#<cpp:directive pos:line="1029" pos:column="2">endif<pos:position pos:line="1029" pos:column="7"/></cpp:directive></cpp:endif>
                <comment type="block" pos:line="1030" pos:column="17">/* This is the default when the server sends no
                   Content-Encoding header. See Curl_readwrite_init; the
                   memset() call initializes k-&gt;content_encoding to zero. */</comment>
                <if pos:line="1033" pos:column="17">if<condition pos:line="1033" pos:column="19">(<expr><operator pos:line="1033" pos:column="20">!<pos:position pos:line="1033" pos:column="21"/></operator><name><name pos:line="1033" pos:column="21">k<pos:position pos:line="1033" pos:column="22"/></name><operator pos:line="1033" pos:column="22">-&gt;<pos:position pos:line="1033" pos:column="27"/></operator><name pos:line="1033" pos:column="24">ignorebody<pos:position pos:line="1033" pos:column="34"/></name></name></expr>)<pos:position pos:line="1033" pos:column="35"/></condition><then pos:line="1033" pos:column="35">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="1034" pos:column="19">result<pos:position pos:line="1034" pos:column="25"/></name> <operator pos:line="1034" pos:column="26">=<pos:position pos:line="1034" pos:column="27"/></operator> <call><name pos:line="1034" pos:column="28">Curl_client_write<pos:position pos:line="1034" pos:column="45"/></name><argument_list pos:line="1034" pos:column="45">(<argument><expr><name pos:line="1034" pos:column="46">conn<pos:position pos:line="1034" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1034" pos:column="52">CLIENTWRITE_BODY<pos:position pos:line="1034" pos:column="68"/></name></expr></argument>, <argument><expr><name><name pos:line="1034" pos:column="70">k<pos:position pos:line="1034" pos:column="71"/></name><operator pos:line="1034" pos:column="71">-&gt;<pos:position pos:line="1034" pos:column="76"/></operator><name pos:line="1034" pos:column="73">str<pos:position pos:line="1034" pos:column="76"/></name></name></expr></argument>,
                                             <argument><expr><name pos:line="1035" pos:column="46">nread<pos:position pos:line="1035" pos:column="51"/></name></expr></argument>)<pos:position pos:line="1035" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="1035" pos:column="53"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="1036" pos:column="1">#<cpp:directive pos:line="1036" pos:column="2">ifdef<pos:position pos:line="1036" pos:column="7"/></cpp:directive> <name pos:line="1036" pos:column="8">HAVE_LIBZ<pos:position pos:line="1036" pos:column="17"/></name></cpp:ifdef>
                <break pos:line="1037" pos:column="17">break;<pos:position pos:line="1037" pos:column="23"/></break>

              <case pos:line="1039" pos:column="15">case <expr><name pos:line="1039" pos:column="20">DEFLATE<pos:position pos:line="1039" pos:column="27"/></name></expr>:<pos:position pos:line="1039" pos:column="28"/></case>
                <comment type="block" pos:line="1040" pos:column="17">/* Assume CLIENTWRITE_BODY; headers are not encoded. */</comment>
                <if pos:line="1041" pos:column="17">if<condition pos:line="1041" pos:column="19">(<expr><operator pos:line="1041" pos:column="20">!<pos:position pos:line="1041" pos:column="21"/></operator><name><name pos:line="1041" pos:column="21">k<pos:position pos:line="1041" pos:column="22"/></name><operator pos:line="1041" pos:column="22">-&gt;<pos:position pos:line="1041" pos:column="27"/></operator><name pos:line="1041" pos:column="24">ignorebody<pos:position pos:line="1041" pos:column="34"/></name></name></expr>)<pos:position pos:line="1041" pos:column="35"/></condition><then pos:line="1041" pos:column="35">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="1042" pos:column="19">result<pos:position pos:line="1042" pos:column="25"/></name> <operator pos:line="1042" pos:column="26">=<pos:position pos:line="1042" pos:column="27"/></operator> <call><name pos:line="1042" pos:column="28">Curl_unencode_deflate_write<pos:position pos:line="1042" pos:column="55"/></name><argument_list pos:line="1042" pos:column="55">(<argument><expr><name pos:line="1042" pos:column="56">conn<pos:position pos:line="1042" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="1042" pos:column="62">k<pos:position pos:line="1042" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="1042" pos:column="65">nread<pos:position pos:line="1042" pos:column="70"/></name></expr></argument>)<pos:position pos:line="1042" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1042" pos:column="72"/></expr_stmt></block></then></if>
                <break pos:line="1043" pos:column="17">break;<pos:position pos:line="1043" pos:column="23"/></break>

              <case pos:line="1045" pos:column="15">case <expr><name pos:line="1045" pos:column="20">GZIP<pos:position pos:line="1045" pos:column="24"/></name></expr>:<pos:position pos:line="1045" pos:column="25"/></case>
                <comment type="block" pos:line="1046" pos:column="17">/* Assume CLIENTWRITE_BODY; headers are not encoded. */</comment>
                <if pos:line="1047" pos:column="17">if<condition pos:line="1047" pos:column="19">(<expr><operator pos:line="1047" pos:column="20">!<pos:position pos:line="1047" pos:column="21"/></operator><name><name pos:line="1047" pos:column="21">k<pos:position pos:line="1047" pos:column="22"/></name><operator pos:line="1047" pos:column="22">-&gt;<pos:position pos:line="1047" pos:column="27"/></operator><name pos:line="1047" pos:column="24">ignorebody<pos:position pos:line="1047" pos:column="34"/></name></name></expr>)<pos:position pos:line="1047" pos:column="35"/></condition><then pos:line="1047" pos:column="35">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="1048" pos:column="19">result<pos:position pos:line="1048" pos:column="25"/></name> <operator pos:line="1048" pos:column="26">=<pos:position pos:line="1048" pos:column="27"/></operator> <call><name pos:line="1048" pos:column="28">Curl_unencode_gzip_write<pos:position pos:line="1048" pos:column="52"/></name><argument_list pos:line="1048" pos:column="52">(<argument><expr><name pos:line="1048" pos:column="53">conn<pos:position pos:line="1048" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="1048" pos:column="59">k<pos:position pos:line="1048" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="1048" pos:column="62">nread<pos:position pos:line="1048" pos:column="67"/></name></expr></argument>)<pos:position pos:line="1048" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="1048" pos:column="69"/></expr_stmt></block></then></if>
                <break pos:line="1049" pos:column="17">break;<pos:position pos:line="1049" pos:column="23"/></break>

              <case pos:line="1051" pos:column="15">case <expr><name pos:line="1051" pos:column="20">COMPRESS<pos:position pos:line="1051" pos:column="28"/></name></expr>:<pos:position pos:line="1051" pos:column="29"/></case>
              <default pos:line="1052" pos:column="15">default:<pos:position pos:line="1052" pos:column="23"/></default>
                <expr_stmt><expr><call><name pos:line="1053" pos:column="17">failf<pos:position pos:line="1053" pos:column="22"/></name> <argument_list pos:line="1053" pos:column="23">(<argument><expr><name pos:line="1053" pos:column="24">data<pos:position pos:line="1053" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1053" pos:column="30">"Unrecognized content encoding type. "<pos:position pos:line="1053" pos:column="68"/></literal>
                       <literal type="string" pos:line="1054" pos:column="24">"libcurl understands `identity', `deflate' and `gzip' "<pos:position pos:line="1054" pos:column="79"/></literal>
                       <literal type="string" pos:line="1055" pos:column="24">"content encodings."<pos:position pos:line="1055" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="1055" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1055" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><name pos:line="1056" pos:column="17">result<pos:position pos:line="1056" pos:column="23"/></name> <operator pos:line="1056" pos:column="24">=<pos:position pos:line="1056" pos:column="25"/></operator> <name pos:line="1056" pos:column="26">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="1056" pos:column="52"/></name></expr>;<pos:position pos:line="1056" pos:column="53"/></expr_stmt>
                <break pos:line="1057" pos:column="17">break;<pos:position pos:line="1057" pos:column="23"/></break>
              }<pos:position pos:line="1058" pos:column="16"/></block></switch>
<cpp:endif pos:line="1059" pos:column="1">#<cpp:directive pos:line="1059" pos:column="2">endif<pos:position pos:line="1059" pos:column="7"/></cpp:directive></cpp:endif>
            }<pos:position pos:line="1060" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="1061" pos:column="13">k<pos:position pos:line="1061" pos:column="14"/></name><operator pos:line="1061" pos:column="14">-&gt;<pos:position pos:line="1061" pos:column="19"/></operator><name pos:line="1061" pos:column="16">badheader<pos:position pos:line="1061" pos:column="25"/></name></name> <operator pos:line="1061" pos:column="26">=<pos:position pos:line="1061" pos:column="27"/></operator> <name pos:line="1061" pos:column="28">HEADER_NORMAL<pos:position pos:line="1061" pos:column="41"/></name></expr>;<pos:position pos:line="1061" pos:column="42"/></expr_stmt> <comment type="block" pos:line="1061" pos:column="43">/* taken care of now */</comment>

            <if pos:line="1063" pos:column="13">if<condition pos:line="1063" pos:column="15">(<expr><name pos:line="1063" pos:column="16">result<pos:position pos:line="1063" pos:column="22"/></name></expr>)<pos:position pos:line="1063" pos:column="23"/></condition><then pos:line="1063" pos:column="23">
              <block type="pseudo"><return pos:line="1064" pos:column="15">return <expr><name pos:line="1064" pos:column="22">result<pos:position pos:line="1064" pos:column="28"/></name></expr>;<pos:position pos:line="1064" pos:column="29"/></return></block></then></if>
          }<pos:position pos:line="1065" pos:column="12"/></block></then></if>

        }<pos:position pos:line="1067" pos:column="10"/></block></then></if> <comment type="block" pos:line="1067" pos:column="11">/* if(! header and data to read ) */</comment>

        <if pos:line="1069" pos:column="9">if<condition pos:line="1069" pos:column="11">(<expr><name pos:line="1069" pos:column="12">is_empty_data<pos:position pos:line="1069" pos:column="25"/></name></expr>)<pos:position pos:line="1069" pos:column="26"/></condition><then pos:line="1069" pos:column="26"> <block pos:line="1069" pos:column="27">{
          <comment type="block" pos:line="1070" pos:column="11">/* if we received nothing, the server closed the connection and we
             are done */</comment>
          <expr_stmt><expr><name><name pos:line="1072" pos:column="11">k<pos:position pos:line="1072" pos:column="12"/></name><operator pos:line="1072" pos:column="12">-&gt;<pos:position pos:line="1072" pos:column="17"/></operator><name pos:line="1072" pos:column="14">keepon<pos:position pos:line="1072" pos:column="20"/></name></name> <operator pos:line="1072" pos:column="21">&amp;=<pos:position pos:line="1072" pos:column="27"/></operator> <operator pos:line="1072" pos:column="24">~<pos:position pos:line="1072" pos:column="25"/></operator><name pos:line="1072" pos:column="25">KEEP_READ<pos:position pos:line="1072" pos:column="34"/></name></expr>;<pos:position pos:line="1072" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="1073" pos:column="10"/></block></then></if>

      }<pos:position pos:line="1075" pos:column="8"/></block> while<condition pos:line="1075" pos:column="14">(<expr><call><name pos:line="1075" pos:column="15">data_pending<pos:position pos:line="1075" pos:column="27"/></name><argument_list pos:line="1075" pos:column="27">(<argument><expr><name pos:line="1075" pos:column="28">conn<pos:position pos:line="1075" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1075" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="1075" pos:column="34"/></condition>;<pos:position pos:line="1075" pos:column="35"/></do>

    }<pos:position pos:line="1077" pos:column="6"/></block></then></if> <comment type="block" pos:line="1077" pos:column="7">/* if( read from socket ) */</comment>

    <comment type="block" pos:line="1079" pos:column="5">/* If we still have writing to do, we check if we have a writable
       socket. */</comment>
    <if pos:line="1081" pos:column="5">if<condition pos:line="1081" pos:column="7">(<expr><operator pos:line="1081" pos:column="8">(<pos:position pos:line="1081" pos:column="9"/></operator><name><name pos:line="1081" pos:column="9">k<pos:position pos:line="1081" pos:column="10"/></name><operator pos:line="1081" pos:column="10">-&gt;<pos:position pos:line="1081" pos:column="15"/></operator><name pos:line="1081" pos:column="12">keepon<pos:position pos:line="1081" pos:column="18"/></name></name> <operator pos:line="1081" pos:column="19">&amp;<pos:position pos:line="1081" pos:column="24"/></operator> <name pos:line="1081" pos:column="21">KEEP_WRITE<pos:position pos:line="1081" pos:column="31"/></name><operator pos:line="1081" pos:column="31">)<pos:position pos:line="1081" pos:column="32"/></operator> <operator pos:line="1081" pos:column="33">&amp;&amp;<pos:position pos:line="1081" pos:column="43"/></operator> <operator pos:line="1081" pos:column="36">(<pos:position pos:line="1081" pos:column="37"/></operator><name pos:line="1081" pos:column="37">select_res<pos:position pos:line="1081" pos:column="47"/></name> <operator pos:line="1081" pos:column="48">&amp;<pos:position pos:line="1081" pos:column="53"/></operator> <name pos:line="1081" pos:column="50">CURL_CSELECT_OUT<pos:position pos:line="1081" pos:column="66"/></name><operator pos:line="1081" pos:column="66">)<pos:position pos:line="1081" pos:column="67"/></operator></expr>)<pos:position pos:line="1081" pos:column="68"/></condition><then pos:line="1081" pos:column="68"> <block pos:line="1081" pos:column="69">{
      <comment type="block" pos:line="1082" pos:column="7">/* write */</comment>

      <decl_stmt><decl><type><name pos:line="1084" pos:column="7">ssize_t<pos:position pos:line="1084" pos:column="14"/></name></type> <name pos:line="1084" pos:column="15">i<pos:position pos:line="1084" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="1084" pos:column="18">si<pos:position pos:line="1084" pos:column="20"/></name></decl>;<pos:position pos:line="1084" pos:column="21"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1085" pos:column="7">ssize_t<pos:position pos:line="1085" pos:column="14"/></name></type> <name pos:line="1085" pos:column="15">bytes_written<pos:position pos:line="1085" pos:column="28"/></name></decl>;<pos:position pos:line="1085" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1086" pos:column="7">bool<pos:position pos:line="1086" pos:column="11"/></name></type> <name pos:line="1086" pos:column="12">writedone<pos:position pos:line="1086" pos:column="21"/></name><init pos:line="1086" pos:column="21">=<expr><name pos:line="1086" pos:column="22">TRUE<pos:position pos:line="1086" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="1086" pos:column="27"/></decl_stmt>

      <if pos:line="1088" pos:column="7">if<condition pos:line="1088" pos:column="9">(<expr><operator pos:line="1088" pos:column="10">(<pos:position pos:line="1088" pos:column="11"/></operator><name><name pos:line="1088" pos:column="11">k<pos:position pos:line="1088" pos:column="12"/></name><operator pos:line="1088" pos:column="12">-&gt;<pos:position pos:line="1088" pos:column="17"/></operator><name pos:line="1088" pos:column="14">bytecount<pos:position pos:line="1088" pos:column="23"/></name></name> <operator pos:line="1088" pos:column="24">==<pos:position pos:line="1088" pos:column="26"/></operator> <literal type="number" pos:line="1088" pos:column="27">0<pos:position pos:line="1088" pos:column="28"/></literal><operator pos:line="1088" pos:column="28">)<pos:position pos:line="1088" pos:column="29"/></operator> <operator pos:line="1088" pos:column="30">&amp;&amp;<pos:position pos:line="1088" pos:column="40"/></operator> <operator pos:line="1088" pos:column="33">(<pos:position pos:line="1088" pos:column="34"/></operator><name><name pos:line="1088" pos:column="34">k<pos:position pos:line="1088" pos:column="35"/></name><operator pos:line="1088" pos:column="35">-&gt;<pos:position pos:line="1088" pos:column="40"/></operator><name pos:line="1088" pos:column="37">writebytecount<pos:position pos:line="1088" pos:column="51"/></name></name> <operator pos:line="1088" pos:column="52">==<pos:position pos:line="1088" pos:column="54"/></operator> <literal type="number" pos:line="1088" pos:column="55">0<pos:position pos:line="1088" pos:column="56"/></literal><operator pos:line="1088" pos:column="56">)<pos:position pos:line="1088" pos:column="57"/></operator></expr>)<pos:position pos:line="1088" pos:column="58"/></condition><then pos:line="1088" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="1089" pos:column="9">Curl_pgrsTime<pos:position pos:line="1089" pos:column="22"/></name><argument_list pos:line="1089" pos:column="22">(<argument><expr><name pos:line="1089" pos:column="23">data<pos:position pos:line="1089" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1089" pos:column="29">TIMER_STARTTRANSFER<pos:position pos:line="1089" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1089" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1089" pos:column="50"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name pos:line="1091" pos:column="7">didwhat<pos:position pos:line="1091" pos:column="14"/></name> <operator pos:line="1091" pos:column="15">|=<pos:position pos:line="1091" pos:column="17"/></operator> <name pos:line="1091" pos:column="18">KEEP_WRITE<pos:position pos:line="1091" pos:column="28"/></name></expr>;<pos:position pos:line="1091" pos:column="29"/></expr_stmt>

      <comment type="block" pos:line="1093" pos:column="7">/*
       * We loop here to do the READ and SEND loop until we run out of
       * data to send or until we get EWOULDBLOCK back
       */</comment>
      <do pos:line="1097" pos:column="7">do <block pos:line="1097" pos:column="10">{

        <comment type="block" pos:line="1099" pos:column="9">/* only read more data if there's no upload data already
           present in the upload buffer */</comment>
        <if pos:line="1101" pos:column="9">if<condition pos:line="1101" pos:column="11">(<expr><literal type="number" pos:line="1101" pos:column="12">0<pos:position pos:line="1101" pos:column="13"/></literal> <operator pos:line="1101" pos:column="14">==<pos:position pos:line="1101" pos:column="16"/></operator> <name><name pos:line="1101" pos:column="17">data<pos:position pos:line="1101" pos:column="21"/></name><operator pos:line="1101" pos:column="21">-&gt;<pos:position pos:line="1101" pos:column="26"/></operator><name pos:line="1101" pos:column="23">req<pos:position pos:line="1101" pos:column="26"/></name><operator pos:line="1101" pos:column="26">.<pos:position pos:line="1101" pos:column="27"/></operator><name pos:line="1101" pos:column="27">upload_present<pos:position pos:line="1101" pos:column="41"/></name></name></expr>)<pos:position pos:line="1101" pos:column="42"/></condition><then pos:line="1101" pos:column="42"> <block pos:line="1101" pos:column="43">{
          <comment type="block" pos:line="1102" pos:column="11">/* init the "upload from here" pointer */</comment>
          <expr_stmt><expr><name><name pos:line="1103" pos:column="11">data<pos:position pos:line="1103" pos:column="15"/></name><operator pos:line="1103" pos:column="15">-&gt;<pos:position pos:line="1103" pos:column="20"/></operator><name pos:line="1103" pos:column="17">req<pos:position pos:line="1103" pos:column="20"/></name><operator pos:line="1103" pos:column="20">.<pos:position pos:line="1103" pos:column="21"/></operator><name pos:line="1103" pos:column="21">upload_fromhere<pos:position pos:line="1103" pos:column="36"/></name></name> <operator pos:line="1103" pos:column="37">=<pos:position pos:line="1103" pos:column="38"/></operator> <name><name pos:line="1103" pos:column="39">k<pos:position pos:line="1103" pos:column="40"/></name><operator pos:line="1103" pos:column="40">-&gt;<pos:position pos:line="1103" pos:column="45"/></operator><name pos:line="1103" pos:column="42">uploadbuf<pos:position pos:line="1103" pos:column="51"/></name></name></expr>;<pos:position pos:line="1103" pos:column="52"/></expr_stmt>

          <if pos:line="1105" pos:column="11">if<condition pos:line="1105" pos:column="13">(<expr><operator pos:line="1105" pos:column="14">!<pos:position pos:line="1105" pos:column="15"/></operator><name><name pos:line="1105" pos:column="15">k<pos:position pos:line="1105" pos:column="16"/></name><operator pos:line="1105" pos:column="16">-&gt;<pos:position pos:line="1105" pos:column="21"/></operator><name pos:line="1105" pos:column="18">upload_done<pos:position pos:line="1105" pos:column="29"/></name></name></expr>)<pos:position pos:line="1105" pos:column="30"/></condition><then pos:line="1105" pos:column="30"> <block pos:line="1105" pos:column="31">{
            <comment type="block" pos:line="1106" pos:column="13">/* HTTP pollution, this should be written nicer to become more
               protocol agnostic. */</comment>
            <decl_stmt><decl><type><name pos:line="1108" pos:column="13">int<pos:position pos:line="1108" pos:column="16"/></name></type> <name pos:line="1108" pos:column="17">fillcount<pos:position pos:line="1108" pos:column="26"/></name></decl>;<pos:position pos:line="1108" pos:column="27"/></decl_stmt>

            <if pos:line="1110" pos:column="13">if<condition pos:line="1110" pos:column="15">(<expr><operator pos:line="1110" pos:column="16">(<pos:position pos:line="1110" pos:column="17"/></operator><name><name pos:line="1110" pos:column="17">k<pos:position pos:line="1110" pos:column="18"/></name><operator pos:line="1110" pos:column="18">-&gt;<pos:position pos:line="1110" pos:column="23"/></operator><name pos:line="1110" pos:column="20">exp100<pos:position pos:line="1110" pos:column="26"/></name></name> <operator pos:line="1110" pos:column="27">==<pos:position pos:line="1110" pos:column="29"/></operator> <name pos:line="1110" pos:column="30">EXP100_SENDING_REQUEST<pos:position pos:line="1110" pos:column="52"/></name><operator pos:line="1110" pos:column="52">)<pos:position pos:line="1110" pos:column="53"/></operator> <operator pos:line="1110" pos:column="54">&amp;&amp;<pos:position pos:line="1110" pos:column="64"/></operator>
               <operator pos:line="1111" pos:column="16">(<pos:position pos:line="1111" pos:column="17"/></operator><name><name pos:line="1111" pos:column="17">data<pos:position pos:line="1111" pos:column="21"/></name><operator pos:line="1111" pos:column="21">-&gt;<pos:position pos:line="1111" pos:column="26"/></operator><name pos:line="1111" pos:column="23">state<pos:position pos:line="1111" pos:column="28"/></name><operator pos:line="1111" pos:column="28">.<pos:position pos:line="1111" pos:column="29"/></operator><name pos:line="1111" pos:column="29">proto<pos:position pos:line="1111" pos:column="34"/></name><operator pos:line="1111" pos:column="34">.<pos:position pos:line="1111" pos:column="35"/></operator><name pos:line="1111" pos:column="35">http<pos:position pos:line="1111" pos:column="39"/></name><operator pos:line="1111" pos:column="39">-&gt;<pos:position pos:line="1111" pos:column="44"/></operator><name pos:line="1111" pos:column="41">sending<pos:position pos:line="1111" pos:column="48"/></name></name> <operator pos:line="1111" pos:column="49">==<pos:position pos:line="1111" pos:column="51"/></operator> <name pos:line="1111" pos:column="52">HTTPSEND_BODY<pos:position pos:line="1111" pos:column="65"/></name><operator pos:line="1111" pos:column="65">)<pos:position pos:line="1111" pos:column="66"/></operator></expr>)<pos:position pos:line="1111" pos:column="67"/></condition><then pos:line="1111" pos:column="67"> <block pos:line="1111" pos:column="68">{
              <comment type="block" pos:line="1112" pos:column="15">/* If this call is to send body data, we must take some action:
                 We have sent off the full HTTP 1.1 request, and we shall now
                 go into the Expect: 100 state and await such a header */</comment>
              <expr_stmt><expr><name><name pos:line="1115" pos:column="15">k<pos:position pos:line="1115" pos:column="16"/></name><operator pos:line="1115" pos:column="16">-&gt;<pos:position pos:line="1115" pos:column="21"/></operator><name pos:line="1115" pos:column="18">exp100<pos:position pos:line="1115" pos:column="24"/></name></name> <operator pos:line="1115" pos:column="25">=<pos:position pos:line="1115" pos:column="26"/></operator> <name pos:line="1115" pos:column="27">EXP100_AWAITING_CONTINUE<pos:position pos:line="1115" pos:column="51"/></name></expr>;<pos:position pos:line="1115" pos:column="52"/></expr_stmt> <comment type="block" pos:line="1115" pos:column="53">/* wait for the header */</comment>
              <expr_stmt><expr><name><name pos:line="1116" pos:column="15">k<pos:position pos:line="1116" pos:column="16"/></name><operator pos:line="1116" pos:column="16">-&gt;<pos:position pos:line="1116" pos:column="21"/></operator><name pos:line="1116" pos:column="18">keepon<pos:position pos:line="1116" pos:column="24"/></name></name> <operator pos:line="1116" pos:column="25">&amp;=<pos:position pos:line="1116" pos:column="31"/></operator> <operator pos:line="1116" pos:column="28">~<pos:position pos:line="1116" pos:column="29"/></operator><name pos:line="1116" pos:column="29">KEEP_WRITE<pos:position pos:line="1116" pos:column="39"/></name></expr>;<pos:position pos:line="1116" pos:column="40"/></expr_stmt>         <comment type="block" pos:line="1116" pos:column="49">/* disable writing */</comment>
              <expr_stmt><expr><name><name pos:line="1117" pos:column="15">k<pos:position pos:line="1117" pos:column="16"/></name><operator pos:line="1117" pos:column="16">-&gt;<pos:position pos:line="1117" pos:column="21"/></operator><name pos:line="1117" pos:column="18">start100<pos:position pos:line="1117" pos:column="26"/></name></name> <operator pos:line="1117" pos:column="27">=<pos:position pos:line="1117" pos:column="28"/></operator> <call><name pos:line="1117" pos:column="29">Curl_tvnow<pos:position pos:line="1117" pos:column="39"/></name><argument_list pos:line="1117" pos:column="39">()<pos:position pos:line="1117" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1117" pos:column="42"/></expr_stmt>       <comment type="block" pos:line="1117" pos:column="49">/* timeout count starts now */</comment>
              <expr_stmt><expr><name pos:line="1118" pos:column="15">didwhat<pos:position pos:line="1118" pos:column="22"/></name> <operator pos:line="1118" pos:column="23">&amp;=<pos:position pos:line="1118" pos:column="29"/></operator> <operator pos:line="1118" pos:column="26">~<pos:position pos:line="1118" pos:column="27"/></operator><name pos:line="1118" pos:column="27">KEEP_WRITE<pos:position pos:line="1118" pos:column="37"/></name></expr>;<pos:position pos:line="1118" pos:column="38"/></expr_stmt>  <comment type="block" pos:line="1118" pos:column="40">/* we didn't write anything actually */</comment>
              <break pos:line="1119" pos:column="15">break;<pos:position pos:line="1119" pos:column="21"/></break>
            }<pos:position pos:line="1120" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="1122" pos:column="13">result<pos:position pos:line="1122" pos:column="19"/></name> <operator pos:line="1122" pos:column="20">=<pos:position pos:line="1122" pos:column="21"/></operator> <call><name pos:line="1122" pos:column="22">Curl_fillreadbuffer<pos:position pos:line="1122" pos:column="41"/></name><argument_list pos:line="1122" pos:column="41">(<argument><expr><name pos:line="1122" pos:column="42">conn<pos:position pos:line="1122" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="1122" pos:column="48">BUFSIZE<pos:position pos:line="1122" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="1122" pos:column="57">&amp;<pos:position pos:line="1122" pos:column="62"/></operator><name pos:line="1122" pos:column="58">fillcount<pos:position pos:line="1122" pos:column="67"/></name></expr></argument>)<pos:position pos:line="1122" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="1122" pos:column="69"/></expr_stmt>
            <if pos:line="1123" pos:column="13">if<condition pos:line="1123" pos:column="15">(<expr><name pos:line="1123" pos:column="16">result<pos:position pos:line="1123" pos:column="22"/></name></expr>)<pos:position pos:line="1123" pos:column="23"/></condition><then pos:line="1123" pos:column="23">
              <block type="pseudo"><return pos:line="1124" pos:column="15">return <expr><name pos:line="1124" pos:column="22">result<pos:position pos:line="1124" pos:column="28"/></name></expr>;<pos:position pos:line="1124" pos:column="29"/></return></block></then></if>

            <expr_stmt><expr><name pos:line="1126" pos:column="13">nread<pos:position pos:line="1126" pos:column="18"/></name> <operator pos:line="1126" pos:column="19">=<pos:position pos:line="1126" pos:column="20"/></operator> <operator pos:line="1126" pos:column="21">(<pos:position pos:line="1126" pos:column="22"/></operator><name pos:line="1126" pos:column="22">ssize_t<pos:position pos:line="1126" pos:column="29"/></name><operator pos:line="1126" pos:column="29">)<pos:position pos:line="1126" pos:column="30"/></operator><name pos:line="1126" pos:column="30">fillcount<pos:position pos:line="1126" pos:column="39"/></name></expr>;<pos:position pos:line="1126" pos:column="40"/></expr_stmt>
          }<pos:position pos:line="1127" pos:column="12"/></block></then>
          <else pos:line="1128" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="1129" pos:column="13">nread<pos:position pos:line="1129" pos:column="18"/></name> <operator pos:line="1129" pos:column="19">=<pos:position pos:line="1129" pos:column="20"/></operator> <literal type="number" pos:line="1129" pos:column="21">0<pos:position pos:line="1129" pos:column="22"/></literal></expr>;<pos:position pos:line="1129" pos:column="23"/></expr_stmt></block></else></if> <comment type="block" pos:line="1129" pos:column="24">/* we're done uploading/reading */</comment>

          <if pos:line="1131" pos:column="11">if<condition pos:line="1131" pos:column="13">(<expr><operator pos:line="1131" pos:column="14">!<pos:position pos:line="1131" pos:column="15"/></operator><name pos:line="1131" pos:column="15">nread<pos:position pos:line="1131" pos:column="20"/></name> <operator pos:line="1131" pos:column="21">&amp;&amp;<pos:position pos:line="1131" pos:column="31"/></operator> <operator pos:line="1131" pos:column="24">(<pos:position pos:line="1131" pos:column="25"/></operator><name><name pos:line="1131" pos:column="25">k<pos:position pos:line="1131" pos:column="26"/></name><operator pos:line="1131" pos:column="26">-&gt;<pos:position pos:line="1131" pos:column="31"/></operator><name pos:line="1131" pos:column="28">keepon<pos:position pos:line="1131" pos:column="34"/></name></name> <operator pos:line="1131" pos:column="35">&amp;<pos:position pos:line="1131" pos:column="40"/></operator> <name pos:line="1131" pos:column="37">KEEP_READ_PAUSE<pos:position pos:line="1131" pos:column="52"/></name><operator pos:line="1131" pos:column="52">)<pos:position pos:line="1131" pos:column="53"/></operator></expr>)<pos:position pos:line="1131" pos:column="54"/></condition><then pos:line="1131" pos:column="54"> <block pos:line="1131" pos:column="55">{
            <comment type="block" pos:line="1132" pos:column="13">/* this is a paused transfer */</comment>
            <break pos:line="1133" pos:column="13">break;<pos:position pos:line="1133" pos:column="19"/></break>
          }<pos:position pos:line="1134" pos:column="12"/></block></then>
          <elseif pos:line="1135" pos:column="11">else <if pos:line="1135" pos:column="16">if<condition pos:line="1135" pos:column="18">(<expr><name pos:line="1135" pos:column="19">nread<pos:position pos:line="1135" pos:column="24"/></name><operator pos:line="1135" pos:column="24">&lt;=<pos:position pos:line="1135" pos:column="29"/></operator><literal type="number" pos:line="1135" pos:column="26">0<pos:position pos:line="1135" pos:column="27"/></literal></expr>)<pos:position pos:line="1135" pos:column="28"/></condition><then pos:line="1135" pos:column="28"> <block pos:line="1135" pos:column="29">{
            <comment type="block" pos:line="1136" pos:column="13">/* done */</comment>
            <expr_stmt><expr><name><name pos:line="1137" pos:column="13">k<pos:position pos:line="1137" pos:column="14"/></name><operator pos:line="1137" pos:column="14">-&gt;<pos:position pos:line="1137" pos:column="19"/></operator><name pos:line="1137" pos:column="16">keepon<pos:position pos:line="1137" pos:column="22"/></name></name> <operator pos:line="1137" pos:column="23">&amp;=<pos:position pos:line="1137" pos:column="29"/></operator> <operator pos:line="1137" pos:column="26">~<pos:position pos:line="1137" pos:column="27"/></operator><name pos:line="1137" pos:column="27">KEEP_WRITE<pos:position pos:line="1137" pos:column="37"/></name></expr>;<pos:position pos:line="1137" pos:column="38"/></expr_stmt> <comment type="block" pos:line="1137" pos:column="39">/* we're done writing */</comment>
            <expr_stmt><expr><name pos:line="1138" pos:column="13">writedone<pos:position pos:line="1138" pos:column="22"/></name> <operator pos:line="1138" pos:column="23">=<pos:position pos:line="1138" pos:column="24"/></operator> <name pos:line="1138" pos:column="25">TRUE<pos:position pos:line="1138" pos:column="29"/></name></expr>;<pos:position pos:line="1138" pos:column="30"/></expr_stmt>

            <if pos:line="1140" pos:column="13">if<condition pos:line="1140" pos:column="15">(<expr><name><name pos:line="1140" pos:column="16">conn<pos:position pos:line="1140" pos:column="20"/></name><operator pos:line="1140" pos:column="20">-&gt;<pos:position pos:line="1140" pos:column="25"/></operator><name pos:line="1140" pos:column="22">bits<pos:position pos:line="1140" pos:column="26"/></name><operator pos:line="1140" pos:column="26">.<pos:position pos:line="1140" pos:column="27"/></operator><name pos:line="1140" pos:column="27">rewindaftersend<pos:position pos:line="1140" pos:column="42"/></name></name></expr>)<pos:position pos:line="1140" pos:column="43"/></condition><then pos:line="1140" pos:column="43"> <block pos:line="1140" pos:column="44">{
              <expr_stmt><expr><name pos:line="1141" pos:column="15">result<pos:position pos:line="1141" pos:column="21"/></name> <operator pos:line="1141" pos:column="22">=<pos:position pos:line="1141" pos:column="23"/></operator> <call><name pos:line="1141" pos:column="24">Curl_readrewind<pos:position pos:line="1141" pos:column="39"/></name><argument_list pos:line="1141" pos:column="39">(<argument><expr><name pos:line="1141" pos:column="40">conn<pos:position pos:line="1141" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1141" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1141" pos:column="46"/></expr_stmt>
              <if pos:line="1142" pos:column="15">if<condition pos:line="1142" pos:column="17">(<expr><name pos:line="1142" pos:column="18">result<pos:position pos:line="1142" pos:column="24"/></name></expr>)<pos:position pos:line="1142" pos:column="25"/></condition><then pos:line="1142" pos:column="25">
                <block type="pseudo"><return pos:line="1143" pos:column="17">return <expr><name pos:line="1143" pos:column="24">result<pos:position pos:line="1143" pos:column="30"/></name></expr>;<pos:position pos:line="1143" pos:column="31"/></return></block></then></if>
            }<pos:position pos:line="1144" pos:column="14"/></block></then></if>
            <break pos:line="1145" pos:column="13">break;<pos:position pos:line="1145" pos:column="19"/></break>
          }<pos:position pos:line="1146" pos:column="12"/></block></then></if></elseif></if>

          <comment type="block" pos:line="1148" pos:column="11">/* store number of bytes available for upload */</comment>
          <expr_stmt><expr><name><name pos:line="1149" pos:column="11">data<pos:position pos:line="1149" pos:column="15"/></name><operator pos:line="1149" pos:column="15">-&gt;<pos:position pos:line="1149" pos:column="20"/></operator><name pos:line="1149" pos:column="17">req<pos:position pos:line="1149" pos:column="20"/></name><operator pos:line="1149" pos:column="20">.<pos:position pos:line="1149" pos:column="21"/></operator><name pos:line="1149" pos:column="21">upload_present<pos:position pos:line="1149" pos:column="35"/></name></name> <operator pos:line="1149" pos:column="36">=<pos:position pos:line="1149" pos:column="37"/></operator> <name pos:line="1149" pos:column="38">nread<pos:position pos:line="1149" pos:column="43"/></name></expr>;<pos:position pos:line="1149" pos:column="44"/></expr_stmt>

          <comment type="block" pos:line="1151" pos:column="11">/* convert LF to CRLF if so asked */</comment>
<cpp:ifdef pos:line="1152" pos:column="1">#<cpp:directive pos:line="1152" pos:column="2">ifdef<pos:position pos:line="1152" pos:column="7"/></cpp:directive> <name pos:line="1152" pos:column="8">CURL_DO_LINEEND_CONV<pos:position pos:line="1152" pos:column="28"/></name></cpp:ifdef>
          <comment type="block" pos:line="1153" pos:column="11">/* always convert if we're FTPing in ASCII mode */</comment>
          <if pos:line="1154" pos:column="11">if<condition pos:line="1154" pos:column="13">(<expr><operator pos:line="1154" pos:column="14">(<pos:position pos:line="1154" pos:column="15"/></operator><name><name pos:line="1154" pos:column="15">data<pos:position pos:line="1154" pos:column="19"/></name><operator pos:line="1154" pos:column="19">-&gt;<pos:position pos:line="1154" pos:column="24"/></operator><name pos:line="1154" pos:column="21">set<pos:position pos:line="1154" pos:column="24"/></name><operator pos:line="1154" pos:column="24">.<pos:position pos:line="1154" pos:column="25"/></operator><name pos:line="1154" pos:column="25">crlf<pos:position pos:line="1154" pos:column="29"/></name></name><operator pos:line="1154" pos:column="29">)<pos:position pos:line="1154" pos:column="30"/></operator> <operator pos:line="1154" pos:column="31">||<pos:position pos:line="1154" pos:column="33"/></operator> <operator pos:line="1154" pos:column="34">(<pos:position pos:line="1154" pos:column="35"/></operator><name><name pos:line="1154" pos:column="35">data<pos:position pos:line="1154" pos:column="39"/></name><operator pos:line="1154" pos:column="39">-&gt;<pos:position pos:line="1154" pos:column="44"/></operator><name pos:line="1154" pos:column="41">set<pos:position pos:line="1154" pos:column="44"/></name><operator pos:line="1154" pos:column="44">.<pos:position pos:line="1154" pos:column="45"/></operator><name pos:line="1154" pos:column="45">prefer_ascii<pos:position pos:line="1154" pos:column="57"/></name></name><operator pos:line="1154" pos:column="57">)<pos:position pos:line="1154" pos:column="58"/></operator></expr>)<pos:position pos:line="1154" pos:column="59"/></condition><then pos:line="1154" pos:column="59"> <block pos:line="1154" pos:column="60">{
<cpp:else pos:line="1155" pos:column="1">#<cpp:directive pos:line="1155" pos:column="2">else<pos:position pos:line="1155" pos:column="6"/></cpp:directive></cpp:else>
          <if pos:line="1156" pos:column="11">if<condition pos:line="1156" pos:column="13">(<expr><name><name pos:line="1156" pos:column="14">data<pos:position pos:line="1156" pos:column="18"/></name><operator pos:line="1156" pos:column="18">-&gt;<pos:position pos:line="1156" pos:column="23"/></operator><name pos:line="1156" pos:column="20">set<pos:position pos:line="1156" pos:column="23"/></name><operator pos:line="1156" pos:column="23">.<pos:position pos:line="1156" pos:column="24"/></operator><name pos:line="1156" pos:column="24">crlf<pos:position pos:line="1156" pos:column="28"/></name></name></expr>)<pos:position pos:line="1156" pos:column="29"/></condition><then pos:line="1156" pos:column="29"> <block pos:line="1156" pos:column="30">{
<cpp:endif pos:line="1157" pos:column="1">#<cpp:directive pos:line="1157" pos:column="2">endif<pos:position pos:line="1157" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1157" pos:column="8">/* CURL_DO_LINEEND_CONV */</comment>
              <if pos:line="1158" pos:column="15">if<condition pos:line="1158" pos:column="17">(<expr><name><name pos:line="1158" pos:column="18">data<pos:position pos:line="1158" pos:column="22"/></name><operator pos:line="1158" pos:column="22">-&gt;<pos:position pos:line="1158" pos:column="27"/></operator><name pos:line="1158" pos:column="24">state<pos:position pos:line="1158" pos:column="29"/></name><operator pos:line="1158" pos:column="29">.<pos:position pos:line="1158" pos:column="30"/></operator><name pos:line="1158" pos:column="30">scratch<pos:position pos:line="1158" pos:column="37"/></name></name> <operator pos:line="1158" pos:column="38">==<pos:position pos:line="1158" pos:column="40"/></operator> <name pos:line="1158" pos:column="41">NULL<pos:position pos:line="1158" pos:column="45"/></name></expr>)<pos:position pos:line="1158" pos:column="46"/></condition><then pos:line="1158" pos:column="46">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="1159" pos:column="17">data<pos:position pos:line="1159" pos:column="21"/></name><operator pos:line="1159" pos:column="21">-&gt;<pos:position pos:line="1159" pos:column="26"/></operator><name pos:line="1159" pos:column="23">state<pos:position pos:line="1159" pos:column="28"/></name><operator pos:line="1159" pos:column="28">.<pos:position pos:line="1159" pos:column="29"/></operator><name pos:line="1159" pos:column="29">scratch<pos:position pos:line="1159" pos:column="36"/></name></name> <operator pos:line="1159" pos:column="37">=<pos:position pos:line="1159" pos:column="38"/></operator> <call><name pos:line="1159" pos:column="39">malloc<pos:position pos:line="1159" pos:column="45"/></name><argument_list pos:line="1159" pos:column="45">(<argument><expr><literal type="number" pos:line="1159" pos:column="46">2<pos:position pos:line="1159" pos:column="47"/></literal><operator pos:line="1159" pos:column="47">*<pos:position pos:line="1159" pos:column="48"/></operator><name pos:line="1159" pos:column="48">BUFSIZE<pos:position pos:line="1159" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1159" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1159" pos:column="57"/></expr_stmt></block></then></if>
              <if pos:line="1160" pos:column="15">if<condition pos:line="1160" pos:column="17">(<expr><name><name pos:line="1160" pos:column="18">data<pos:position pos:line="1160" pos:column="22"/></name><operator pos:line="1160" pos:column="22">-&gt;<pos:position pos:line="1160" pos:column="27"/></operator><name pos:line="1160" pos:column="24">state<pos:position pos:line="1160" pos:column="29"/></name><operator pos:line="1160" pos:column="29">.<pos:position pos:line="1160" pos:column="30"/></operator><name pos:line="1160" pos:column="30">scratch<pos:position pos:line="1160" pos:column="37"/></name></name> <operator pos:line="1160" pos:column="38">==<pos:position pos:line="1160" pos:column="40"/></operator> <name pos:line="1160" pos:column="41">NULL<pos:position pos:line="1160" pos:column="45"/></name></expr>)<pos:position pos:line="1160" pos:column="46"/></condition><then pos:line="1160" pos:column="46"> <block pos:line="1160" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="1161" pos:column="17">failf<pos:position pos:line="1161" pos:column="22"/></name> <argument_list pos:line="1161" pos:column="23">(<argument><expr><name pos:line="1161" pos:column="24">data<pos:position pos:line="1161" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1161" pos:column="30">"Failed to alloc scratch buffer!"<pos:position pos:line="1161" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="1161" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="1161" pos:column="65"/></expr_stmt>
                <return pos:line="1162" pos:column="17">return <expr><name pos:line="1162" pos:column="24">CURLE_OUT_OF_MEMORY<pos:position pos:line="1162" pos:column="43"/></name></expr>;<pos:position pos:line="1162" pos:column="44"/></return>
              }<pos:position pos:line="1163" pos:column="16"/></block></then></if>
              <comment type="block" pos:line="1164" pos:column="15">/*
               * ASCII/EBCDIC Note: This is presumably a text (not binary)
               * transfer so the data should already be in ASCII.
               * That means the hex values for ASCII CR (0x0d) &amp; LF (0x0a)
               * must be used instead of the escape sequences \r &amp; \n.
               */</comment>
            <for pos:line="1170" pos:column="13">for<control pos:line="1170" pos:column="16">(<init><expr><name pos:line="1170" pos:column="17">i<pos:position pos:line="1170" pos:column="18"/></name> <operator pos:line="1170" pos:column="19">=<pos:position pos:line="1170" pos:column="20"/></operator> <literal type="number" pos:line="1170" pos:column="21">0<pos:position pos:line="1170" pos:column="22"/></literal></expr><operator pos:line="1170" pos:column="22">,<pos:position pos:line="1170" pos:column="23"/></operator> <expr><name pos:line="1170" pos:column="24">si<pos:position pos:line="1170" pos:column="26"/></name> <operator pos:line="1170" pos:column="27">=<pos:position pos:line="1170" pos:column="28"/></operator> <literal type="number" pos:line="1170" pos:column="29">0<pos:position pos:line="1170" pos:column="30"/></literal></expr>;<pos:position pos:line="1170" pos:column="31"/></init> <condition><expr><name pos:line="1170" pos:column="32">i<pos:position pos:line="1170" pos:column="33"/></name> <operator pos:line="1170" pos:column="34">&lt;<pos:position pos:line="1170" pos:column="38"/></operator> <name pos:line="1170" pos:column="36">nread<pos:position pos:line="1170" pos:column="41"/></name></expr>;<pos:position pos:line="1170" pos:column="42"/></condition> <incr><expr><name pos:line="1170" pos:column="43">i<pos:position pos:line="1170" pos:column="44"/></name><operator pos:line="1170" pos:column="44">++<pos:position pos:line="1170" pos:column="46"/></operator></expr><operator pos:line="1170" pos:column="46">,<pos:position pos:line="1170" pos:column="47"/></operator> <expr><name pos:line="1170" pos:column="48">si<pos:position pos:line="1170" pos:column="50"/></name><operator pos:line="1170" pos:column="50">++<pos:position pos:line="1170" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="1170" pos:column="53"/></control> <block pos:line="1170" pos:column="54">{
              <if pos:line="1171" pos:column="15">if<condition pos:line="1171" pos:column="17">(<expr><name><name pos:line="1171" pos:column="18">data<pos:position pos:line="1171" pos:column="22"/></name><operator pos:line="1171" pos:column="22">-&gt;<pos:position pos:line="1171" pos:column="27"/></operator><name pos:line="1171" pos:column="24">req<pos:position pos:line="1171" pos:column="27"/></name><operator pos:line="1171" pos:column="27">.<pos:position pos:line="1171" pos:column="28"/></operator><name pos:line="1171" pos:column="28">upload_fromhere<pos:position pos:line="1171" pos:column="43"/></name><index pos:line="1171" pos:column="43">[<expr><name pos:line="1171" pos:column="44">i<pos:position pos:line="1171" pos:column="45"/></name></expr>]<pos:position pos:line="1171" pos:column="46"/></index></name> <operator pos:line="1171" pos:column="47">==<pos:position pos:line="1171" pos:column="49"/></operator> <literal type="number" pos:line="1171" pos:column="50">0x0a<pos:position pos:line="1171" pos:column="54"/></literal></expr>)<pos:position pos:line="1171" pos:column="55"/></condition><then pos:line="1171" pos:column="55"> <block pos:line="1171" pos:column="56">{
                <expr_stmt><expr><name><name pos:line="1172" pos:column="17">data<pos:position pos:line="1172" pos:column="21"/></name><operator pos:line="1172" pos:column="21">-&gt;<pos:position pos:line="1172" pos:column="26"/></operator><name pos:line="1172" pos:column="23">state<pos:position pos:line="1172" pos:column="28"/></name><operator pos:line="1172" pos:column="28">.<pos:position pos:line="1172" pos:column="29"/></operator><name pos:line="1172" pos:column="29">scratch<pos:position pos:line="1172" pos:column="36"/></name><index pos:line="1172" pos:column="36">[<expr><name pos:line="1172" pos:column="37">si<pos:position pos:line="1172" pos:column="39"/></name><operator pos:line="1172" pos:column="39">++<pos:position pos:line="1172" pos:column="41"/></operator></expr>]<pos:position pos:line="1172" pos:column="42"/></index></name> <operator pos:line="1172" pos:column="43">=<pos:position pos:line="1172" pos:column="44"/></operator> <literal type="number" pos:line="1172" pos:column="45">0x0d<pos:position pos:line="1172" pos:column="49"/></literal></expr>;<pos:position pos:line="1172" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="1173" pos:column="17">data<pos:position pos:line="1173" pos:column="21"/></name><operator pos:line="1173" pos:column="21">-&gt;<pos:position pos:line="1173" pos:column="26"/></operator><name pos:line="1173" pos:column="23">state<pos:position pos:line="1173" pos:column="28"/></name><operator pos:line="1173" pos:column="28">.<pos:position pos:line="1173" pos:column="29"/></operator><name pos:line="1173" pos:column="29">scratch<pos:position pos:line="1173" pos:column="36"/></name><index pos:line="1173" pos:column="36">[<expr><name pos:line="1173" pos:column="37">si<pos:position pos:line="1173" pos:column="39"/></name></expr>]<pos:position pos:line="1173" pos:column="40"/></index></name> <operator pos:line="1173" pos:column="41">=<pos:position pos:line="1173" pos:column="42"/></operator> <literal type="number" pos:line="1173" pos:column="43">0x0a<pos:position pos:line="1173" pos:column="47"/></literal></expr>;<pos:position pos:line="1173" pos:column="48"/></expr_stmt>
                <if pos:line="1174" pos:column="17">if<condition pos:line="1174" pos:column="19">(<expr><operator pos:line="1174" pos:column="20">!<pos:position pos:line="1174" pos:column="21"/></operator><name><name pos:line="1174" pos:column="21">data<pos:position pos:line="1174" pos:column="25"/></name><operator pos:line="1174" pos:column="25">-&gt;<pos:position pos:line="1174" pos:column="30"/></operator><name pos:line="1174" pos:column="27">set<pos:position pos:line="1174" pos:column="30"/></name><operator pos:line="1174" pos:column="30">.<pos:position pos:line="1174" pos:column="31"/></operator><name pos:line="1174" pos:column="31">crlf<pos:position pos:line="1174" pos:column="35"/></name></name></expr>)<pos:position pos:line="1174" pos:column="36"/></condition><then pos:line="1174" pos:column="36"> <block pos:line="1174" pos:column="37">{
                  <comment type="block" pos:line="1175" pos:column="19">/* we're here only because FTP is in ASCII mode...
                     bump infilesize for the LF we just added */</comment>
                  <expr_stmt><expr><name><name pos:line="1177" pos:column="19">data<pos:position pos:line="1177" pos:column="23"/></name><operator pos:line="1177" pos:column="23">-&gt;<pos:position pos:line="1177" pos:column="28"/></operator><name pos:line="1177" pos:column="25">set<pos:position pos:line="1177" pos:column="28"/></name><operator pos:line="1177" pos:column="28">.<pos:position pos:line="1177" pos:column="29"/></operator><name pos:line="1177" pos:column="29">infilesize<pos:position pos:line="1177" pos:column="39"/></name></name><operator pos:line="1177" pos:column="39">++<pos:position pos:line="1177" pos:column="41"/></operator></expr>;<pos:position pos:line="1177" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="1178" pos:column="18"/></block></then></if>
              }<pos:position pos:line="1179" pos:column="16"/></block></then>
              <else pos:line="1180" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="1181" pos:column="17">data<pos:position pos:line="1181" pos:column="21"/></name><operator pos:line="1181" pos:column="21">-&gt;<pos:position pos:line="1181" pos:column="26"/></operator><name pos:line="1181" pos:column="23">state<pos:position pos:line="1181" pos:column="28"/></name><operator pos:line="1181" pos:column="28">.<pos:position pos:line="1181" pos:column="29"/></operator><name pos:line="1181" pos:column="29">scratch<pos:position pos:line="1181" pos:column="36"/></name><index pos:line="1181" pos:column="36">[<expr><name pos:line="1181" pos:column="37">si<pos:position pos:line="1181" pos:column="39"/></name></expr>]<pos:position pos:line="1181" pos:column="40"/></index></name> <operator pos:line="1181" pos:column="41">=<pos:position pos:line="1181" pos:column="42"/></operator> <name><name pos:line="1181" pos:column="43">data<pos:position pos:line="1181" pos:column="47"/></name><operator pos:line="1181" pos:column="47">-&gt;<pos:position pos:line="1181" pos:column="52"/></operator><name pos:line="1181" pos:column="49">req<pos:position pos:line="1181" pos:column="52"/></name><operator pos:line="1181" pos:column="52">.<pos:position pos:line="1181" pos:column="53"/></operator><name pos:line="1181" pos:column="53">upload_fromhere<pos:position pos:line="1181" pos:column="68"/></name><index pos:line="1181" pos:column="68">[<expr><name pos:line="1181" pos:column="69">i<pos:position pos:line="1181" pos:column="70"/></name></expr>]<pos:position pos:line="1181" pos:column="71"/></index></name></expr>;<pos:position pos:line="1181" pos:column="72"/></expr_stmt></block></else></if>
            }<pos:position pos:line="1182" pos:column="14"/></block></for>
            <if pos:line="1183" pos:column="13">if<condition pos:line="1183" pos:column="15">(<expr><name pos:line="1183" pos:column="16">si<pos:position pos:line="1183" pos:column="18"/></name> <operator pos:line="1183" pos:column="19">!=<pos:position pos:line="1183" pos:column="21"/></operator> <name pos:line="1183" pos:column="22">nread<pos:position pos:line="1183" pos:column="27"/></name></expr>)<pos:position pos:line="1183" pos:column="28"/></condition><then pos:line="1183" pos:column="28"> <block pos:line="1183" pos:column="29">{
              <comment type="block" pos:line="1184" pos:column="15">/* only perform the special operation if we really did replace
                 anything */</comment>
              <expr_stmt><expr><name pos:line="1186" pos:column="15">nread<pos:position pos:line="1186" pos:column="20"/></name> <operator pos:line="1186" pos:column="21">=<pos:position pos:line="1186" pos:column="22"/></operator> <name pos:line="1186" pos:column="23">si<pos:position pos:line="1186" pos:column="25"/></name></expr>;<pos:position pos:line="1186" pos:column="26"/></expr_stmt>

              <comment type="block" pos:line="1188" pos:column="15">/* upload from the new (replaced) buffer instead */</comment>
              <expr_stmt><expr><name><name pos:line="1189" pos:column="15">data<pos:position pos:line="1189" pos:column="19"/></name><operator pos:line="1189" pos:column="19">-&gt;<pos:position pos:line="1189" pos:column="24"/></operator><name pos:line="1189" pos:column="21">req<pos:position pos:line="1189" pos:column="24"/></name><operator pos:line="1189" pos:column="24">.<pos:position pos:line="1189" pos:column="25"/></operator><name pos:line="1189" pos:column="25">upload_fromhere<pos:position pos:line="1189" pos:column="40"/></name></name> <operator pos:line="1189" pos:column="41">=<pos:position pos:line="1189" pos:column="42"/></operator> <name><name pos:line="1189" pos:column="43">data<pos:position pos:line="1189" pos:column="47"/></name><operator pos:line="1189" pos:column="47">-&gt;<pos:position pos:line="1189" pos:column="52"/></operator><name pos:line="1189" pos:column="49">state<pos:position pos:line="1189" pos:column="54"/></name><operator pos:line="1189" pos:column="54">.<pos:position pos:line="1189" pos:column="55"/></operator><name pos:line="1189" pos:column="55">scratch<pos:position pos:line="1189" pos:column="62"/></name></name></expr>;<pos:position pos:line="1189" pos:column="63"/></expr_stmt>

              <comment type="block" pos:line="1191" pos:column="15">/* set the new amount too */</comment>
              <expr_stmt><expr><name><name pos:line="1192" pos:column="15">data<pos:position pos:line="1192" pos:column="19"/></name><operator pos:line="1192" pos:column="19">-&gt;<pos:position pos:line="1192" pos:column="24"/></operator><name pos:line="1192" pos:column="21">req<pos:position pos:line="1192" pos:column="24"/></name><operator pos:line="1192" pos:column="24">.<pos:position pos:line="1192" pos:column="25"/></operator><name pos:line="1192" pos:column="25">upload_present<pos:position pos:line="1192" pos:column="39"/></name></name> <operator pos:line="1192" pos:column="40">=<pos:position pos:line="1192" pos:column="41"/></operator> <name pos:line="1192" pos:column="42">nread<pos:position pos:line="1192" pos:column="47"/></name></expr>;<pos:position pos:line="1192" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="1193" pos:column="14"/></block></then></if>
          }<pos:position pos:line="1194" pos:column="12"/></block></then></if>
        }<pos:position pos:line="1195" pos:column="10"/></block></then>
        <else pos:line="1196" pos:column="9">else <block pos:line="1196" pos:column="14">{
          <comment type="block" pos:line="1197" pos:column="11">/* We have a partial buffer left from a previous "round". Use
             that instead of reading more data */</comment>
        }<pos:position pos:line="1199" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="1201" pos:column="9">/* write to socket (send away data) */</comment>
        <expr_stmt><expr><name pos:line="1202" pos:column="9">result<pos:position pos:line="1202" pos:column="15"/></name> <operator pos:line="1202" pos:column="16">=<pos:position pos:line="1202" pos:column="17"/></operator> <call><name pos:line="1202" pos:column="18">Curl_write<pos:position pos:line="1202" pos:column="28"/></name><argument_list pos:line="1202" pos:column="28">(<argument><expr><name pos:line="1202" pos:column="29">conn<pos:position pos:line="1202" pos:column="33"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="1203" pos:column="29">conn<pos:position pos:line="1203" pos:column="33"/></name><operator pos:line="1203" pos:column="33">-&gt;<pos:position pos:line="1203" pos:column="38"/></operator><name pos:line="1203" pos:column="35">writesockfd<pos:position pos:line="1203" pos:column="46"/></name></name></expr></argument>,     <comment type="block" pos:line="1203" pos:column="52">/* socket to send to */</comment>
                            <argument><expr><name><name pos:line="1204" pos:column="29">data<pos:position pos:line="1204" pos:column="33"/></name><operator pos:line="1204" pos:column="33">-&gt;<pos:position pos:line="1204" pos:column="38"/></operator><name pos:line="1204" pos:column="35">req<pos:position pos:line="1204" pos:column="38"/></name><operator pos:line="1204" pos:column="38">.<pos:position pos:line="1204" pos:column="39"/></operator><name pos:line="1204" pos:column="39">upload_fromhere<pos:position pos:line="1204" pos:column="54"/></name></name></expr></argument>, <comment type="block" pos:line="1204" pos:column="56">/* buffer pointer */</comment>
                            <argument><expr><name><name pos:line="1205" pos:column="29">data<pos:position pos:line="1205" pos:column="33"/></name><operator pos:line="1205" pos:column="33">-&gt;<pos:position pos:line="1205" pos:column="38"/></operator><name pos:line="1205" pos:column="35">req<pos:position pos:line="1205" pos:column="38"/></name><operator pos:line="1205" pos:column="38">.<pos:position pos:line="1205" pos:column="39"/></operator><name pos:line="1205" pos:column="39">upload_present<pos:position pos:line="1205" pos:column="53"/></name></name></expr></argument>,  <comment type="block" pos:line="1205" pos:column="56">/* buffer size */</comment>
                            <argument><expr><operator pos:line="1206" pos:column="29">&amp;<pos:position pos:line="1206" pos:column="34"/></operator><name pos:line="1206" pos:column="30">bytes_written<pos:position pos:line="1206" pos:column="43"/></name></expr></argument>)<pos:position pos:line="1206" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1206" pos:column="45"/></expr_stmt>       <comment type="block" pos:line="1206" pos:column="52">/* actually send away */</comment>
        <if pos:line="1207" pos:column="9">if<condition pos:line="1207" pos:column="11">(<expr><name pos:line="1207" pos:column="12">result<pos:position pos:line="1207" pos:column="18"/></name></expr>)<pos:position pos:line="1207" pos:column="19"/></condition><then pos:line="1207" pos:column="19">
          <block type="pseudo"><return pos:line="1208" pos:column="11">return <expr><name pos:line="1208" pos:column="18">result<pos:position pos:line="1208" pos:column="24"/></name></expr>;<pos:position pos:line="1208" pos:column="25"/></return></block></then></if>

        <if pos:line="1210" pos:column="9">if<condition pos:line="1210" pos:column="11">(<expr><name><name pos:line="1210" pos:column="12">data<pos:position pos:line="1210" pos:column="16"/></name><operator pos:line="1210" pos:column="16">-&gt;<pos:position pos:line="1210" pos:column="21"/></operator><name pos:line="1210" pos:column="18">set<pos:position pos:line="1210" pos:column="21"/></name><operator pos:line="1210" pos:column="21">.<pos:position pos:line="1210" pos:column="22"/></operator><name pos:line="1210" pos:column="22">verbose<pos:position pos:line="1210" pos:column="29"/></name></name></expr>)<pos:position pos:line="1210" pos:column="30"/></condition><then pos:line="1210" pos:column="30">
          <comment type="block" pos:line="1211" pos:column="11">/* show the data before we change the pointer upload_fromhere */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="1212" pos:column="11">Curl_debug<pos:position pos:line="1212" pos:column="21"/></name><argument_list pos:line="1212" pos:column="21">(<argument><expr><name pos:line="1212" pos:column="22">data<pos:position pos:line="1212" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1212" pos:column="28">CURLINFO_DATA_OUT<pos:position pos:line="1212" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="1212" pos:column="47">data<pos:position pos:line="1212" pos:column="51"/></name><operator pos:line="1212" pos:column="51">-&gt;<pos:position pos:line="1212" pos:column="56"/></operator><name pos:line="1212" pos:column="53">req<pos:position pos:line="1212" pos:column="56"/></name><operator pos:line="1212" pos:column="56">.<pos:position pos:line="1212" pos:column="57"/></operator><name pos:line="1212" pos:column="57">upload_fromhere<pos:position pos:line="1212" pos:column="72"/></name></name></expr></argument>,
                     <argument><expr><operator pos:line="1213" pos:column="22">(<pos:position pos:line="1213" pos:column="23"/></operator><name pos:line="1213" pos:column="23">size_t<pos:position pos:line="1213" pos:column="29"/></name><operator pos:line="1213" pos:column="29">)<pos:position pos:line="1213" pos:column="30"/></operator><name pos:line="1213" pos:column="30">bytes_written<pos:position pos:line="1213" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1213" pos:column="45">conn<pos:position pos:line="1213" pos:column="49"/></name></expr></argument>)<pos:position pos:line="1213" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1213" pos:column="51"/></expr_stmt></block></then></if>

        <if pos:line="1215" pos:column="9">if<condition pos:line="1215" pos:column="11">(<expr><name><name pos:line="1215" pos:column="12">data<pos:position pos:line="1215" pos:column="16"/></name><operator pos:line="1215" pos:column="16">-&gt;<pos:position pos:line="1215" pos:column="21"/></operator><name pos:line="1215" pos:column="18">req<pos:position pos:line="1215" pos:column="21"/></name><operator pos:line="1215" pos:column="21">.<pos:position pos:line="1215" pos:column="22"/></operator><name pos:line="1215" pos:column="22">upload_present<pos:position pos:line="1215" pos:column="36"/></name></name> <operator pos:line="1215" pos:column="37">!=<pos:position pos:line="1215" pos:column="39"/></operator> <name pos:line="1215" pos:column="40">bytes_written<pos:position pos:line="1215" pos:column="53"/></name></expr>)<pos:position pos:line="1215" pos:column="54"/></condition><then pos:line="1215" pos:column="54"> <block pos:line="1215" pos:column="55">{
          <comment type="block" pos:line="1216" pos:column="11">/* we only wrote a part of the buffer (if anything), deal with it! */</comment>

          <comment type="block" pos:line="1218" pos:column="11">/* store the amount of bytes left in the buffer to write */</comment>
          <expr_stmt><expr><name><name pos:line="1219" pos:column="11">data<pos:position pos:line="1219" pos:column="15"/></name><operator pos:line="1219" pos:column="15">-&gt;<pos:position pos:line="1219" pos:column="20"/></operator><name pos:line="1219" pos:column="17">req<pos:position pos:line="1219" pos:column="20"/></name><operator pos:line="1219" pos:column="20">.<pos:position pos:line="1219" pos:column="21"/></operator><name pos:line="1219" pos:column="21">upload_present<pos:position pos:line="1219" pos:column="35"/></name></name> <operator pos:line="1219" pos:column="36">-=<pos:position pos:line="1219" pos:column="38"/></operator> <name pos:line="1219" pos:column="39">bytes_written<pos:position pos:line="1219" pos:column="52"/></name></expr>;<pos:position pos:line="1219" pos:column="53"/></expr_stmt>

          <comment type="block" pos:line="1221" pos:column="11">/* advance the pointer where to find the buffer when the next send
             is to happen */</comment>
          <expr_stmt><expr><name><name pos:line="1223" pos:column="11">data<pos:position pos:line="1223" pos:column="15"/></name><operator pos:line="1223" pos:column="15">-&gt;<pos:position pos:line="1223" pos:column="20"/></operator><name pos:line="1223" pos:column="17">req<pos:position pos:line="1223" pos:column="20"/></name><operator pos:line="1223" pos:column="20">.<pos:position pos:line="1223" pos:column="21"/></operator><name pos:line="1223" pos:column="21">upload_fromhere<pos:position pos:line="1223" pos:column="36"/></name></name> <operator pos:line="1223" pos:column="37">+=<pos:position pos:line="1223" pos:column="39"/></operator> <name pos:line="1223" pos:column="40">bytes_written<pos:position pos:line="1223" pos:column="53"/></name></expr>;<pos:position pos:line="1223" pos:column="54"/></expr_stmt>

          <expr_stmt><expr><name pos:line="1225" pos:column="11">writedone<pos:position pos:line="1225" pos:column="20"/></name> <operator pos:line="1225" pos:column="21">=<pos:position pos:line="1225" pos:column="22"/></operator> <name pos:line="1225" pos:column="23">TRUE<pos:position pos:line="1225" pos:column="27"/></name></expr>;<pos:position pos:line="1225" pos:column="28"/></expr_stmt> <comment type="block" pos:line="1225" pos:column="29">/* we are done, stop the loop */</comment>
        }<pos:position pos:line="1226" pos:column="10"/></block></then>
        <else pos:line="1227" pos:column="9">else <block pos:line="1227" pos:column="14">{
          <comment type="block" pos:line="1228" pos:column="11">/* we've uploaded that buffer now */</comment>
          <expr_stmt><expr><name><name pos:line="1229" pos:column="11">data<pos:position pos:line="1229" pos:column="15"/></name><operator pos:line="1229" pos:column="15">-&gt;<pos:position pos:line="1229" pos:column="20"/></operator><name pos:line="1229" pos:column="17">req<pos:position pos:line="1229" pos:column="20"/></name><operator pos:line="1229" pos:column="20">.<pos:position pos:line="1229" pos:column="21"/></operator><name pos:line="1229" pos:column="21">upload_fromhere<pos:position pos:line="1229" pos:column="36"/></name></name> <operator pos:line="1229" pos:column="37">=<pos:position pos:line="1229" pos:column="38"/></operator> <name><name pos:line="1229" pos:column="39">k<pos:position pos:line="1229" pos:column="40"/></name><operator pos:line="1229" pos:column="40">-&gt;<pos:position pos:line="1229" pos:column="45"/></operator><name pos:line="1229" pos:column="42">uploadbuf<pos:position pos:line="1229" pos:column="51"/></name></name></expr>;<pos:position pos:line="1229" pos:column="52"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="1230" pos:column="11">data<pos:position pos:line="1230" pos:column="15"/></name><operator pos:line="1230" pos:column="15">-&gt;<pos:position pos:line="1230" pos:column="20"/></operator><name pos:line="1230" pos:column="17">req<pos:position pos:line="1230" pos:column="20"/></name><operator pos:line="1230" pos:column="20">.<pos:position pos:line="1230" pos:column="21"/></operator><name pos:line="1230" pos:column="21">upload_present<pos:position pos:line="1230" pos:column="35"/></name></name> <operator pos:line="1230" pos:column="36">=<pos:position pos:line="1230" pos:column="37"/></operator> <literal type="number" pos:line="1230" pos:column="38">0<pos:position pos:line="1230" pos:column="39"/></literal></expr>;<pos:position pos:line="1230" pos:column="40"/></expr_stmt> <comment type="block" pos:line="1230" pos:column="41">/* no more bytes left */</comment>

          <if pos:line="1232" pos:column="11">if<condition pos:line="1232" pos:column="13">(<expr><name><name pos:line="1232" pos:column="14">k<pos:position pos:line="1232" pos:column="15"/></name><operator pos:line="1232" pos:column="15">-&gt;<pos:position pos:line="1232" pos:column="20"/></operator><name pos:line="1232" pos:column="17">upload_done<pos:position pos:line="1232" pos:column="28"/></name></name></expr>)<pos:position pos:line="1232" pos:column="29"/></condition><then pos:line="1232" pos:column="29"> <block pos:line="1232" pos:column="30">{
            <comment type="block" pos:line="1233" pos:column="13">/* switch off writing, we're done! */</comment>
            <expr_stmt><expr><name><name pos:line="1234" pos:column="13">k<pos:position pos:line="1234" pos:column="14"/></name><operator pos:line="1234" pos:column="14">-&gt;<pos:position pos:line="1234" pos:column="19"/></operator><name pos:line="1234" pos:column="16">keepon<pos:position pos:line="1234" pos:column="22"/></name></name> <operator pos:line="1234" pos:column="23">&amp;=<pos:position pos:line="1234" pos:column="29"/></operator> <operator pos:line="1234" pos:column="26">~<pos:position pos:line="1234" pos:column="27"/></operator><name pos:line="1234" pos:column="27">KEEP_WRITE<pos:position pos:line="1234" pos:column="37"/></name></expr>;<pos:position pos:line="1234" pos:column="38"/></expr_stmt> <comment type="block" pos:line="1234" pos:column="39">/* we're done writing */</comment>
            <expr_stmt><expr><name pos:line="1235" pos:column="13">writedone<pos:position pos:line="1235" pos:column="22"/></name> <operator pos:line="1235" pos:column="23">=<pos:position pos:line="1235" pos:column="24"/></operator> <name pos:line="1235" pos:column="25">TRUE<pos:position pos:line="1235" pos:column="29"/></name></expr>;<pos:position pos:line="1235" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="1236" pos:column="12"/></block></then></if>
        }<pos:position pos:line="1237" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name><name pos:line="1239" pos:column="9">k<pos:position pos:line="1239" pos:column="10"/></name><operator pos:line="1239" pos:column="10">-&gt;<pos:position pos:line="1239" pos:column="15"/></operator><name pos:line="1239" pos:column="12">writebytecount<pos:position pos:line="1239" pos:column="26"/></name></name> <operator pos:line="1239" pos:column="27">+=<pos:position pos:line="1239" pos:column="29"/></operator> <name pos:line="1239" pos:column="30">bytes_written<pos:position pos:line="1239" pos:column="43"/></name></expr>;<pos:position pos:line="1239" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1240" pos:column="9">Curl_pgrsSetUploadCounter<pos:position pos:line="1240" pos:column="34"/></name><argument_list pos:line="1240" pos:column="34">(<argument><expr><name pos:line="1240" pos:column="35">data<pos:position pos:line="1240" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="1240" pos:column="41">k<pos:position pos:line="1240" pos:column="42"/></name><operator pos:line="1240" pos:column="42">-&gt;<pos:position pos:line="1240" pos:column="47"/></operator><name pos:line="1240" pos:column="44">writebytecount<pos:position pos:line="1240" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="1240" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1240" pos:column="60"/></expr_stmt>

      }<pos:position pos:line="1242" pos:column="8"/></block></then></if> <while pos:line="1242" pos:column="9">while<condition pos:line="1242" pos:column="14">(<expr><operator pos:line="1242" pos:column="15">!<pos:position pos:line="1242" pos:column="16"/></operator><name pos:line="1242" pos:column="16">writedone<pos:position pos:line="1242" pos:column="25"/></name></expr>)<pos:position pos:line="1242" pos:column="26"/></condition><block type="pseudo"><empty_stmt pos:line="1242" pos:column="26">;<pos:position pos:line="1242" pos:column="27"/></empty_stmt></block></while> <comment type="block" pos:line="1242" pos:column="28">/* loop until we're done writing! */</comment>

    }<pos:position pos:line="1244" pos:column="6"/></block>

  }<pos:position pos:line="1246" pos:column="4"/></do> <while pos:line="1246" pos:column="5">while<condition pos:line="1246" pos:column="10">(<expr><literal type="number" pos:line="1246" pos:column="11">0<pos:position pos:line="1246" pos:column="12"/></literal></expr>)<pos:position pos:line="1246" pos:column="13"/></condition><block type="pseudo"><empty_stmt pos:line="1246" pos:column="13">;<pos:position pos:line="1246" pos:column="14"/></empty_stmt></block></while> <comment type="block" pos:line="1246" pos:column="15">/* just to break out from! */</comment>

  <expr_stmt><expr><name><name pos:line="1248" pos:column="3">k<pos:position pos:line="1248" pos:column="4"/></name><operator pos:line="1248" pos:column="4">-&gt;<pos:position pos:line="1248" pos:column="9"/></operator><name pos:line="1248" pos:column="6">now<pos:position pos:line="1248" pos:column="9"/></name></name> <operator pos:line="1248" pos:column="10">=<pos:position pos:line="1248" pos:column="11"/></operator> <call><name pos:line="1248" pos:column="12">Curl_tvnow<pos:position pos:line="1248" pos:column="22"/></name><argument_list pos:line="1248" pos:column="22">()<pos:position pos:line="1248" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1248" pos:column="25"/></expr_stmt>
  <if pos:line="1249" pos:column="3">if<condition pos:line="1249" pos:column="5">(<expr><name pos:line="1249" pos:column="6">didwhat<pos:position pos:line="1249" pos:column="13"/></name></expr>)<pos:position pos:line="1249" pos:column="14"/></condition><then pos:line="1249" pos:column="14"> <block pos:line="1249" pos:column="15">{
    <comment type="block" pos:line="1250" pos:column="5">/* Update read/write counters */</comment>
    <if pos:line="1251" pos:column="5">if<condition pos:line="1251" pos:column="7">(<expr><name><name pos:line="1251" pos:column="8">k<pos:position pos:line="1251" pos:column="9"/></name><operator pos:line="1251" pos:column="9">-&gt;<pos:position pos:line="1251" pos:column="14"/></operator><name pos:line="1251" pos:column="11">bytecountp<pos:position pos:line="1251" pos:column="21"/></name></name></expr>)<pos:position pos:line="1251" pos:column="22"/></condition><then pos:line="1251" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="1252" pos:column="7">*<pos:position pos:line="1252" pos:column="8"/></operator><name><name pos:line="1252" pos:column="8">k<pos:position pos:line="1252" pos:column="9"/></name><operator pos:line="1252" pos:column="9">-&gt;<pos:position pos:line="1252" pos:column="14"/></operator><name pos:line="1252" pos:column="11">bytecountp<pos:position pos:line="1252" pos:column="21"/></name></name> <operator pos:line="1252" pos:column="22">=<pos:position pos:line="1252" pos:column="23"/></operator> <name><name pos:line="1252" pos:column="24">k<pos:position pos:line="1252" pos:column="25"/></name><operator pos:line="1252" pos:column="25">-&gt;<pos:position pos:line="1252" pos:column="30"/></operator><name pos:line="1252" pos:column="27">bytecount<pos:position pos:line="1252" pos:column="36"/></name></name></expr>;<pos:position pos:line="1252" pos:column="37"/></expr_stmt></block></then></if> <comment type="block" pos:line="1252" pos:column="38">/* read count */</comment>
    <if pos:line="1253" pos:column="5">if<condition pos:line="1253" pos:column="7">(<expr><name><name pos:line="1253" pos:column="8">k<pos:position pos:line="1253" pos:column="9"/></name><operator pos:line="1253" pos:column="9">-&gt;<pos:position pos:line="1253" pos:column="14"/></operator><name pos:line="1253" pos:column="11">writebytecountp<pos:position pos:line="1253" pos:column="26"/></name></name></expr>)<pos:position pos:line="1253" pos:column="27"/></condition><then pos:line="1253" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="1254" pos:column="7">*<pos:position pos:line="1254" pos:column="8"/></operator><name><name pos:line="1254" pos:column="8">k<pos:position pos:line="1254" pos:column="9"/></name><operator pos:line="1254" pos:column="9">-&gt;<pos:position pos:line="1254" pos:column="14"/></operator><name pos:line="1254" pos:column="11">writebytecountp<pos:position pos:line="1254" pos:column="26"/></name></name> <operator pos:line="1254" pos:column="27">=<pos:position pos:line="1254" pos:column="28"/></operator> <name><name pos:line="1254" pos:column="29">k<pos:position pos:line="1254" pos:column="30"/></name><operator pos:line="1254" pos:column="30">-&gt;<pos:position pos:line="1254" pos:column="35"/></operator><name pos:line="1254" pos:column="32">writebytecount<pos:position pos:line="1254" pos:column="46"/></name></name></expr>;<pos:position pos:line="1254" pos:column="47"/></expr_stmt></block></then></if> <comment type="block" pos:line="1254" pos:column="48">/* write count */</comment>
  }<pos:position pos:line="1255" pos:column="4"/></block></then>
  <else pos:line="1256" pos:column="3">else <block pos:line="1256" pos:column="8">{
    <comment type="block" pos:line="1257" pos:column="5">/* no read no write, this is a timeout? */</comment>
    <if pos:line="1258" pos:column="5">if<condition pos:line="1258" pos:column="7">(<expr><name><name pos:line="1258" pos:column="8">k<pos:position pos:line="1258" pos:column="9"/></name><operator pos:line="1258" pos:column="9">-&gt;<pos:position pos:line="1258" pos:column="14"/></operator><name pos:line="1258" pos:column="11">exp100<pos:position pos:line="1258" pos:column="17"/></name></name> <operator pos:line="1258" pos:column="18">==<pos:position pos:line="1258" pos:column="20"/></operator> <name pos:line="1258" pos:column="21">EXP100_AWAITING_CONTINUE<pos:position pos:line="1258" pos:column="45"/></name></expr>)<pos:position pos:line="1258" pos:column="46"/></condition><then pos:line="1258" pos:column="46"> <block pos:line="1258" pos:column="47">{
      <comment type="block" pos:line="1259" pos:column="7">/* This should allow some time for the header to arrive, but only a
         very short time as otherwise it'll be too much wasted time too
         often. */</comment>

      <comment type="block" pos:line="1263" pos:column="7">/* Quoting RFC2616, section "8.2.3 Use of the 100 (Continue) Status":

      Therefore, when a client sends this header field to an origin server
      (possibly via a proxy) from which it has never seen a 100 (Continue)
      status, the client SHOULD NOT wait for an indefinite period before
      sending the request body.

      */</comment>

      <decl_stmt><decl><type><name pos:line="1272" pos:column="7">long<pos:position pos:line="1272" pos:column="11"/></name></type> <name pos:line="1272" pos:column="12">ms<pos:position pos:line="1272" pos:column="14"/></name> <init pos:line="1272" pos:column="15">= <expr><call><name pos:line="1272" pos:column="17">Curl_tvdiff<pos:position pos:line="1272" pos:column="28"/></name><argument_list pos:line="1272" pos:column="28">(<argument><expr><name><name pos:line="1272" pos:column="29">k<pos:position pos:line="1272" pos:column="30"/></name><operator pos:line="1272" pos:column="30">-&gt;<pos:position pos:line="1272" pos:column="35"/></operator><name pos:line="1272" pos:column="32">now<pos:position pos:line="1272" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1272" pos:column="37">k<pos:position pos:line="1272" pos:column="38"/></name><operator pos:line="1272" pos:column="38">-&gt;<pos:position pos:line="1272" pos:column="43"/></operator><name pos:line="1272" pos:column="40">start100<pos:position pos:line="1272" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="1272" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1272" pos:column="50"/></decl_stmt>
      <if pos:line="1273" pos:column="7">if<condition pos:line="1273" pos:column="9">(<expr><name pos:line="1273" pos:column="10">ms<pos:position pos:line="1273" pos:column="12"/></name> <operator pos:line="1273" pos:column="13">&gt;<pos:position pos:line="1273" pos:column="17"/></operator> <name pos:line="1273" pos:column="15">CURL_TIMEOUT_EXPECT_100<pos:position pos:line="1273" pos:column="38"/></name></expr>)<pos:position pos:line="1273" pos:column="39"/></condition><then pos:line="1273" pos:column="39"> <block pos:line="1273" pos:column="40">{
        <comment type="block" pos:line="1274" pos:column="9">/* we've waited long enough, continue anyway */</comment>
        <expr_stmt><expr><name><name pos:line="1275" pos:column="9">k<pos:position pos:line="1275" pos:column="10"/></name><operator pos:line="1275" pos:column="10">-&gt;<pos:position pos:line="1275" pos:column="15"/></operator><name pos:line="1275" pos:column="12">exp100<pos:position pos:line="1275" pos:column="18"/></name></name> <operator pos:line="1275" pos:column="19">=<pos:position pos:line="1275" pos:column="20"/></operator> <name pos:line="1275" pos:column="21">EXP100_SEND_DATA<pos:position pos:line="1275" pos:column="37"/></name></expr>;<pos:position pos:line="1275" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="1276" pos:column="9">k<pos:position pos:line="1276" pos:column="10"/></name><operator pos:line="1276" pos:column="10">-&gt;<pos:position pos:line="1276" pos:column="15"/></operator><name pos:line="1276" pos:column="12">keepon<pos:position pos:line="1276" pos:column="18"/></name></name> <operator pos:line="1276" pos:column="19">|=<pos:position pos:line="1276" pos:column="21"/></operator> <name pos:line="1276" pos:column="22">KEEP_WRITE<pos:position pos:line="1276" pos:column="32"/></name></expr>;<pos:position pos:line="1276" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="1277" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1278" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1279" pos:column="4"/></block></else></if>

  <if pos:line="1281" pos:column="3">if<condition pos:line="1281" pos:column="5">(<expr><call><name pos:line="1281" pos:column="6">Curl_pgrsUpdate<pos:position pos:line="1281" pos:column="21"/></name><argument_list pos:line="1281" pos:column="21">(<argument><expr><name pos:line="1281" pos:column="22">conn<pos:position pos:line="1281" pos:column="26"/></name></expr></argument>)<pos:position pos:line="1281" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="1281" pos:column="28"/></condition><then pos:line="1281" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="1282" pos:column="5">result<pos:position pos:line="1282" pos:column="11"/></name> <operator pos:line="1282" pos:column="12">=<pos:position pos:line="1282" pos:column="13"/></operator> <name pos:line="1282" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="1282" pos:column="39"/></name></expr>;<pos:position pos:line="1282" pos:column="40"/></expr_stmt></block></then>
  <else pos:line="1283" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="1284" pos:column="5">result<pos:position pos:line="1284" pos:column="11"/></name> <operator pos:line="1284" pos:column="12">=<pos:position pos:line="1284" pos:column="13"/></operator> <call><name pos:line="1284" pos:column="14">Curl_speedcheck<pos:position pos:line="1284" pos:column="29"/></name><argument_list pos:line="1284" pos:column="29">(<argument><expr><name pos:line="1284" pos:column="30">data<pos:position pos:line="1284" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="1284" pos:column="36">k<pos:position pos:line="1284" pos:column="37"/></name><operator pos:line="1284" pos:column="37">-&gt;<pos:position pos:line="1284" pos:column="42"/></operator><name pos:line="1284" pos:column="39">now<pos:position pos:line="1284" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="1284" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1284" pos:column="44"/></expr_stmt></block></else></if>
  <if pos:line="1285" pos:column="3">if<condition pos:line="1285" pos:column="5">(<expr><name pos:line="1285" pos:column="6">result<pos:position pos:line="1285" pos:column="12"/></name></expr>)<pos:position pos:line="1285" pos:column="13"/></condition><then pos:line="1285" pos:column="13">
    <block type="pseudo"><return pos:line="1286" pos:column="5">return <expr><name pos:line="1286" pos:column="12">result<pos:position pos:line="1286" pos:column="18"/></name></expr>;<pos:position pos:line="1286" pos:column="19"/></return></block></then></if>

  <if pos:line="1288" pos:column="3">if<condition pos:line="1288" pos:column="5">(<expr><name><name pos:line="1288" pos:column="6">data<pos:position pos:line="1288" pos:column="10"/></name><operator pos:line="1288" pos:column="10">-&gt;<pos:position pos:line="1288" pos:column="15"/></operator><name pos:line="1288" pos:column="12">set<pos:position pos:line="1288" pos:column="15"/></name><operator pos:line="1288" pos:column="15">.<pos:position pos:line="1288" pos:column="16"/></operator><name pos:line="1288" pos:column="16">timeout<pos:position pos:line="1288" pos:column="23"/></name></name> <operator pos:line="1288" pos:column="24">&amp;&amp;<pos:position pos:line="1288" pos:column="34"/></operator>
      <operator pos:line="1289" pos:column="7">(<pos:position pos:line="1289" pos:column="8"/></operator><call><name pos:line="1289" pos:column="8">Curl_tvdiff<pos:position pos:line="1289" pos:column="19"/></name><argument_list pos:line="1289" pos:column="19">(<argument><expr><name><name pos:line="1289" pos:column="20">k<pos:position pos:line="1289" pos:column="21"/></name><operator pos:line="1289" pos:column="21">-&gt;<pos:position pos:line="1289" pos:column="26"/></operator><name pos:line="1289" pos:column="23">now<pos:position pos:line="1289" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1289" pos:column="28">k<pos:position pos:line="1289" pos:column="29"/></name><operator pos:line="1289" pos:column="29">-&gt;<pos:position pos:line="1289" pos:column="34"/></operator><name pos:line="1289" pos:column="31">start<pos:position pos:line="1289" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="1289" pos:column="37"/></argument_list></call> <operator pos:line="1289" pos:column="38">&gt;=<pos:position pos:line="1289" pos:column="43"/></operator> <name><name pos:line="1289" pos:column="41">data<pos:position pos:line="1289" pos:column="45"/></name><operator pos:line="1289" pos:column="45">-&gt;<pos:position pos:line="1289" pos:column="50"/></operator><name pos:line="1289" pos:column="47">set<pos:position pos:line="1289" pos:column="50"/></name><operator pos:line="1289" pos:column="50">.<pos:position pos:line="1289" pos:column="51"/></operator><name pos:line="1289" pos:column="51">timeout<pos:position pos:line="1289" pos:column="58"/></name></name><operator pos:line="1289" pos:column="58">)<pos:position pos:line="1289" pos:column="59"/></operator></expr>)<pos:position pos:line="1289" pos:column="60"/></condition><then pos:line="1289" pos:column="60"> <block pos:line="1289" pos:column="61">{
    <if pos:line="1290" pos:column="5">if<condition pos:line="1290" pos:column="7">(<expr><name><name pos:line="1290" pos:column="8">k<pos:position pos:line="1290" pos:column="9"/></name><operator pos:line="1290" pos:column="9">-&gt;<pos:position pos:line="1290" pos:column="14"/></operator><name pos:line="1290" pos:column="11">size<pos:position pos:line="1290" pos:column="15"/></name></name> <operator pos:line="1290" pos:column="16">!=<pos:position pos:line="1290" pos:column="18"/></operator> <operator pos:line="1290" pos:column="19">-<pos:position pos:line="1290" pos:column="20"/></operator><literal type="number" pos:line="1290" pos:column="20">1<pos:position pos:line="1290" pos:column="21"/></literal></expr>)<pos:position pos:line="1290" pos:column="22"/></condition><then pos:line="1290" pos:column="22"> <block pos:line="1290" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="1291" pos:column="7">failf<pos:position pos:line="1291" pos:column="12"/></name><argument_list pos:line="1291" pos:column="12">(<argument><expr><name pos:line="1291" pos:column="13">data<pos:position pos:line="1291" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1291" pos:column="19">"Operation timed out after %ld milliseconds with %"<pos:position pos:line="1291" pos:column="70"/></literal>
            <name pos:line="1292" pos:column="13">FORMAT_OFF_T<pos:position pos:line="1292" pos:column="25"/></name> <literal type="string" pos:line="1292" pos:column="26">" out of %"<pos:position pos:line="1292" pos:column="37"/></literal> <name pos:line="1292" pos:column="38">FORMAT_OFF_T<pos:position pos:line="1292" pos:column="50"/></name> <literal type="string" pos:line="1292" pos:column="51">" bytes received"<pos:position pos:line="1292" pos:column="68"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="1293" pos:column="13">data<pos:position pos:line="1293" pos:column="17"/></name><operator pos:line="1293" pos:column="17">-&gt;<pos:position pos:line="1293" pos:column="22"/></operator><name pos:line="1293" pos:column="19">set<pos:position pos:line="1293" pos:column="22"/></name><operator pos:line="1293" pos:column="22">.<pos:position pos:line="1293" pos:column="23"/></operator><name pos:line="1293" pos:column="23">timeout<pos:position pos:line="1293" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1293" pos:column="32">k<pos:position pos:line="1293" pos:column="33"/></name><operator pos:line="1293" pos:column="33">-&gt;<pos:position pos:line="1293" pos:column="38"/></operator><name pos:line="1293" pos:column="35">bytecount<pos:position pos:line="1293" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1293" pos:column="46">k<pos:position pos:line="1293" pos:column="47"/></name><operator pos:line="1293" pos:column="47">-&gt;<pos:position pos:line="1293" pos:column="52"/></operator><name pos:line="1293" pos:column="49">size<pos:position pos:line="1293" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="1293" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1293" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="1294" pos:column="6"/></block></then> <else pos:line="1294" pos:column="7">else <block pos:line="1294" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="1295" pos:column="7">failf<pos:position pos:line="1295" pos:column="12"/></name><argument_list pos:line="1295" pos:column="12">(<argument><expr><name pos:line="1295" pos:column="13">data<pos:position pos:line="1295" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1295" pos:column="19">"Operation timed out after %ld milliseconds with %"<pos:position pos:line="1295" pos:column="70"/></literal>
            <name pos:line="1296" pos:column="13">FORMAT_OFF_T<pos:position pos:line="1296" pos:column="25"/></name> <literal type="string" pos:line="1296" pos:column="26">" bytes received"<pos:position pos:line="1296" pos:column="43"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="1297" pos:column="13">data<pos:position pos:line="1297" pos:column="17"/></name><operator pos:line="1297" pos:column="17">-&gt;<pos:position pos:line="1297" pos:column="22"/></operator><name pos:line="1297" pos:column="19">set<pos:position pos:line="1297" pos:column="22"/></name><operator pos:line="1297" pos:column="22">.<pos:position pos:line="1297" pos:column="23"/></operator><name pos:line="1297" pos:column="23">timeout<pos:position pos:line="1297" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1297" pos:column="32">k<pos:position pos:line="1297" pos:column="33"/></name><operator pos:line="1297" pos:column="33">-&gt;<pos:position pos:line="1297" pos:column="38"/></operator><name pos:line="1297" pos:column="35">bytecount<pos:position pos:line="1297" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="1297" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1297" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="1298" pos:column="6"/></block></else></if>
    <return pos:line="1299" pos:column="5">return <expr><name pos:line="1299" pos:column="12">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="1299" pos:column="36"/></name></expr>;<pos:position pos:line="1299" pos:column="37"/></return>
  }<pos:position pos:line="1300" pos:column="4"/></block></then></if>

  <if pos:line="1302" pos:column="3">if<condition pos:line="1302" pos:column="5">(<expr><operator pos:line="1302" pos:column="6">!<pos:position pos:line="1302" pos:column="7"/></operator><name><name pos:line="1302" pos:column="7">k<pos:position pos:line="1302" pos:column="8"/></name><operator pos:line="1302" pos:column="8">-&gt;<pos:position pos:line="1302" pos:column="13"/></operator><name pos:line="1302" pos:column="10">keepon<pos:position pos:line="1302" pos:column="16"/></name></name></expr>)<pos:position pos:line="1302" pos:column="17"/></condition><then pos:line="1302" pos:column="17"> <block pos:line="1302" pos:column="18">{
    <comment type="block" pos:line="1303" pos:column="5">/*
     * The transfer has been performed. Just make some general checks before
     * returning.
     */</comment>

    <if pos:line="1308" pos:column="5">if<condition pos:line="1308" pos:column="7">(<expr><operator pos:line="1308" pos:column="8">!<pos:position pos:line="1308" pos:column="9"/></operator><operator pos:line="1308" pos:column="9">(<pos:position pos:line="1308" pos:column="10"/></operator><name><name pos:line="1308" pos:column="10">data<pos:position pos:line="1308" pos:column="14"/></name><operator pos:line="1308" pos:column="14">-&gt;<pos:position pos:line="1308" pos:column="19"/></operator><name pos:line="1308" pos:column="16">set<pos:position pos:line="1308" pos:column="19"/></name><operator pos:line="1308" pos:column="19">.<pos:position pos:line="1308" pos:column="20"/></operator><name pos:line="1308" pos:column="20">opt_no_body<pos:position pos:line="1308" pos:column="31"/></name></name><operator pos:line="1308" pos:column="31">)<pos:position pos:line="1308" pos:column="32"/></operator> <operator pos:line="1308" pos:column="33">&amp;&amp;<pos:position pos:line="1308" pos:column="43"/></operator> <operator pos:line="1308" pos:column="36">(<pos:position pos:line="1308" pos:column="37"/></operator><name><name pos:line="1308" pos:column="37">k<pos:position pos:line="1308" pos:column="38"/></name><operator pos:line="1308" pos:column="38">-&gt;<pos:position pos:line="1308" pos:column="43"/></operator><name pos:line="1308" pos:column="40">size<pos:position pos:line="1308" pos:column="44"/></name></name> <operator pos:line="1308" pos:column="45">!=<pos:position pos:line="1308" pos:column="47"/></operator> <operator pos:line="1308" pos:column="48">-<pos:position pos:line="1308" pos:column="49"/></operator><literal type="number" pos:line="1308" pos:column="49">1<pos:position pos:line="1308" pos:column="50"/></literal><operator pos:line="1308" pos:column="50">)<pos:position pos:line="1308" pos:column="51"/></operator> <operator pos:line="1308" pos:column="52">&amp;&amp;<pos:position pos:line="1308" pos:column="62"/></operator>
       <operator pos:line="1309" pos:column="8">(<pos:position pos:line="1309" pos:column="9"/></operator><name><name pos:line="1309" pos:column="9">k<pos:position pos:line="1309" pos:column="10"/></name><operator pos:line="1309" pos:column="10">-&gt;<pos:position pos:line="1309" pos:column="15"/></operator><name pos:line="1309" pos:column="12">bytecount<pos:position pos:line="1309" pos:column="21"/></name></name> <operator pos:line="1309" pos:column="22">!=<pos:position pos:line="1309" pos:column="24"/></operator> <name><name pos:line="1309" pos:column="25">k<pos:position pos:line="1309" pos:column="26"/></name><operator pos:line="1309" pos:column="26">-&gt;<pos:position pos:line="1309" pos:column="31"/></operator><name pos:line="1309" pos:column="28">size<pos:position pos:line="1309" pos:column="32"/></name></name><operator pos:line="1309" pos:column="32">)<pos:position pos:line="1309" pos:column="33"/></operator> <operator pos:line="1309" pos:column="34">&amp;&amp;<pos:position pos:line="1309" pos:column="44"/></operator>
<cpp:ifdef pos:line="1310" pos:column="1">#<cpp:directive pos:line="1310" pos:column="2">ifdef<pos:position pos:line="1310" pos:column="7"/></cpp:directive> <name pos:line="1310" pos:column="8">CURL_DO_LINEEND_CONV<pos:position pos:line="1310" pos:column="28"/></name></cpp:ifdef>
       <comment type="block" pos:line="1311" pos:column="8">/* Most FTP servers don't adjust their file SIZE response for CRLFs,
          so we'll check to see if the discrepancy can be explained
          by the number of CRLFs we've changed to LFs.
        */</comment>
       <operator pos:line="1315" pos:column="8">(<pos:position pos:line="1315" pos:column="9"/></operator><name><name pos:line="1315" pos:column="9">k<pos:position pos:line="1315" pos:column="10"/></name><operator pos:line="1315" pos:column="10">-&gt;<pos:position pos:line="1315" pos:column="15"/></operator><name pos:line="1315" pos:column="12">bytecount<pos:position pos:line="1315" pos:column="21"/></name></name> <operator pos:line="1315" pos:column="22">!=<pos:position pos:line="1315" pos:column="24"/></operator> <operator pos:line="1315" pos:column="25">(<pos:position pos:line="1315" pos:column="26"/></operator><name><name pos:line="1315" pos:column="26">k<pos:position pos:line="1315" pos:column="27"/></name><operator pos:line="1315" pos:column="27">-&gt;<pos:position pos:line="1315" pos:column="32"/></operator><name pos:line="1315" pos:column="29">size<pos:position pos:line="1315" pos:column="33"/></name></name> <operator pos:line="1315" pos:column="34">+<pos:position pos:line="1315" pos:column="35"/></operator> <name><name pos:line="1315" pos:column="36">data<pos:position pos:line="1315" pos:column="40"/></name><operator pos:line="1315" pos:column="40">-&gt;<pos:position pos:line="1315" pos:column="45"/></operator><name pos:line="1315" pos:column="42">state<pos:position pos:line="1315" pos:column="47"/></name><operator pos:line="1315" pos:column="47">.<pos:position pos:line="1315" pos:column="48"/></operator><name pos:line="1315" pos:column="48">crlf_conversions<pos:position pos:line="1315" pos:column="64"/></name></name><operator pos:line="1315" pos:column="64">)<pos:position pos:line="1315" pos:column="65"/></operator><operator pos:line="1315" pos:column="65">)<pos:position pos:line="1315" pos:column="66"/></operator> <operator pos:line="1315" pos:column="67">&amp;&amp;<pos:position pos:line="1315" pos:column="77"/></operator>
<cpp:endif pos:line="1316" pos:column="1">#<cpp:directive pos:line="1316" pos:column="2">endif<pos:position pos:line="1316" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1316" pos:column="8">/* CURL_DO_LINEEND_CONV */</comment>
       <operator pos:line="1317" pos:column="8">!<pos:position pos:line="1317" pos:column="9"/></operator><name><name pos:line="1317" pos:column="9">data<pos:position pos:line="1317" pos:column="13"/></name><operator pos:line="1317" pos:column="13">-&gt;<pos:position pos:line="1317" pos:column="18"/></operator><name pos:line="1317" pos:column="15">req<pos:position pos:line="1317" pos:column="18"/></name><operator pos:line="1317" pos:column="18">.<pos:position pos:line="1317" pos:column="19"/></operator><name pos:line="1317" pos:column="19">newurl<pos:position pos:line="1317" pos:column="25"/></name></name></expr>)<pos:position pos:line="1317" pos:column="26"/></condition><then pos:line="1317" pos:column="26"> <block pos:line="1317" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="1318" pos:column="7">failf<pos:position pos:line="1318" pos:column="12"/></name><argument_list pos:line="1318" pos:column="12">(<argument><expr><name pos:line="1318" pos:column="13">data<pos:position pos:line="1318" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1318" pos:column="19">"transfer closed with %"<pos:position pos:line="1318" pos:column="43"/></literal> <name pos:line="1318" pos:column="44">FORMAT_OFF_T<pos:position pos:line="1318" pos:column="56"/></name>
            <literal type="string" pos:line="1319" pos:column="13">" bytes remaining to read"<pos:position pos:line="1319" pos:column="39"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="1320" pos:column="13">k<pos:position pos:line="1320" pos:column="14"/></name><operator pos:line="1320" pos:column="14">-&gt;<pos:position pos:line="1320" pos:column="19"/></operator><name pos:line="1320" pos:column="16">size<pos:position pos:line="1320" pos:column="20"/></name></name> <operator pos:line="1320" pos:column="21">-<pos:position pos:line="1320" pos:column="22"/></operator> <name><name pos:line="1320" pos:column="23">k<pos:position pos:line="1320" pos:column="24"/></name><operator pos:line="1320" pos:column="24">-&gt;<pos:position pos:line="1320" pos:column="29"/></operator><name pos:line="1320" pos:column="26">bytecount<pos:position pos:line="1320" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="1320" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1320" pos:column="37"/></expr_stmt>
      <return pos:line="1321" pos:column="7">return <expr><name pos:line="1321" pos:column="14">CURLE_PARTIAL_FILE<pos:position pos:line="1321" pos:column="32"/></name></expr>;<pos:position pos:line="1321" pos:column="33"/></return>
    }<pos:position pos:line="1322" pos:column="6"/></block></then>
    <elseif pos:line="1323" pos:column="5">else <if pos:line="1323" pos:column="10">if<condition pos:line="1323" pos:column="12">(<expr><operator pos:line="1323" pos:column="13">!<pos:position pos:line="1323" pos:column="14"/></operator><operator pos:line="1323" pos:column="14">(<pos:position pos:line="1323" pos:column="15"/></operator><name><name pos:line="1323" pos:column="15">data<pos:position pos:line="1323" pos:column="19"/></name><operator pos:line="1323" pos:column="19">-&gt;<pos:position pos:line="1323" pos:column="24"/></operator><name pos:line="1323" pos:column="21">set<pos:position pos:line="1323" pos:column="24"/></name><operator pos:line="1323" pos:column="24">.<pos:position pos:line="1323" pos:column="25"/></operator><name pos:line="1323" pos:column="25">opt_no_body<pos:position pos:line="1323" pos:column="36"/></name></name><operator pos:line="1323" pos:column="36">)<pos:position pos:line="1323" pos:column="37"/></operator> <operator pos:line="1323" pos:column="38">&amp;&amp;<pos:position pos:line="1323" pos:column="48"/></operator>
            <name><name pos:line="1324" pos:column="13">k<pos:position pos:line="1324" pos:column="14"/></name><operator pos:line="1324" pos:column="14">-&gt;<pos:position pos:line="1324" pos:column="19"/></operator><name pos:line="1324" pos:column="16">chunk<pos:position pos:line="1324" pos:column="21"/></name></name> <operator pos:line="1324" pos:column="22">&amp;&amp;<pos:position pos:line="1324" pos:column="32"/></operator>
            <operator pos:line="1325" pos:column="13">(<pos:position pos:line="1325" pos:column="14"/></operator><name><name pos:line="1325" pos:column="14">conn<pos:position pos:line="1325" pos:column="18"/></name><operator pos:line="1325" pos:column="18">-&gt;<pos:position pos:line="1325" pos:column="23"/></operator><name pos:line="1325" pos:column="20">chunk<pos:position pos:line="1325" pos:column="25"/></name><operator pos:line="1325" pos:column="25">.<pos:position pos:line="1325" pos:column="26"/></operator><name pos:line="1325" pos:column="26">state<pos:position pos:line="1325" pos:column="31"/></name></name> <operator pos:line="1325" pos:column="32">!=<pos:position pos:line="1325" pos:column="34"/></operator> <name pos:line="1325" pos:column="35">CHUNK_STOP<pos:position pos:line="1325" pos:column="45"/></name><operator pos:line="1325" pos:column="45">)<pos:position pos:line="1325" pos:column="46"/></operator></expr>)<pos:position pos:line="1325" pos:column="47"/></condition><then pos:line="1325" pos:column="47"> <block pos:line="1325" pos:column="48">{
      <comment type="block" pos:line="1326" pos:column="7">/*
       * In chunked mode, return an error if the connection is closed prior to
       * the empty (terminiating) chunk is read.
       *
       * The condition above used to check for
       * conn-&gt;proto.http-&gt;chunk.datasize != 0 which is true after reading
       * *any* chunk, not just the empty chunk.
       *
       */</comment>
      <expr_stmt><expr><call><name pos:line="1335" pos:column="7">failf<pos:position pos:line="1335" pos:column="12"/></name><argument_list pos:line="1335" pos:column="12">(<argument><expr><name pos:line="1335" pos:column="13">data<pos:position pos:line="1335" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1335" pos:column="19">"transfer closed with outstanding read data remaining"<pos:position pos:line="1335" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="1335" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="1335" pos:column="75"/></expr_stmt>
      <return pos:line="1336" pos:column="7">return <expr><name pos:line="1336" pos:column="14">CURLE_PARTIAL_FILE<pos:position pos:line="1336" pos:column="32"/></name></expr>;<pos:position pos:line="1336" pos:column="33"/></return>
    }<pos:position pos:line="1337" pos:column="6"/></block></then></if></elseif></if>
    <if pos:line="1338" pos:column="5">if<condition pos:line="1338" pos:column="7">(<expr><call><name pos:line="1338" pos:column="8">Curl_pgrsUpdate<pos:position pos:line="1338" pos:column="23"/></name><argument_list pos:line="1338" pos:column="23">(<argument><expr><name pos:line="1338" pos:column="24">conn<pos:position pos:line="1338" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1338" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="1338" pos:column="30"/></condition><then pos:line="1338" pos:column="30">
      <block type="pseudo"><return pos:line="1339" pos:column="7">return <expr><name pos:line="1339" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="1339" pos:column="39"/></name></expr>;<pos:position pos:line="1339" pos:column="40"/></return></block></then></if>
  }<pos:position pos:line="1340" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="1342" pos:column="3">/* Now update the "done" boolean we return */</comment>
  <expr_stmt><expr><operator pos:line="1343" pos:column="3">*<pos:position pos:line="1343" pos:column="4"/></operator><name pos:line="1343" pos:column="4">done<pos:position pos:line="1343" pos:column="8"/></name> <operator pos:line="1343" pos:column="9">=<pos:position pos:line="1343" pos:column="10"/></operator> <call pos:line="1343" pos:column="11">(<name pos:line="1343" pos:column="12">bool<pos:position pos:line="1343" pos:column="16"/></name>)<argument_list pos:line="1343" pos:column="17">(<argument><expr><literal type="number" pos:line="1343" pos:column="18">0<pos:position pos:line="1343" pos:column="19"/></literal> <operator pos:line="1343" pos:column="20">==<pos:position pos:line="1343" pos:column="22"/></operator> <operator pos:line="1343" pos:column="23">(<pos:position pos:line="1343" pos:column="24"/></operator><name><name pos:line="1343" pos:column="24">k<pos:position pos:line="1343" pos:column="25"/></name><operator pos:line="1343" pos:column="25">-&gt;<pos:position pos:line="1343" pos:column="30"/></operator><name pos:line="1343" pos:column="27">keepon<pos:position pos:line="1343" pos:column="33"/></name></name><operator pos:line="1343" pos:column="33">&amp;<pos:position pos:line="1343" pos:column="38"/></operator><operator pos:line="1343" pos:column="34">(<pos:position pos:line="1343" pos:column="35"/></operator><name pos:line="1343" pos:column="35">KEEP_READ<pos:position pos:line="1343" pos:column="44"/></name><operator pos:line="1343" pos:column="44">|<pos:position pos:line="1343" pos:column="45"/></operator><name pos:line="1343" pos:column="45">KEEP_WRITE<pos:position pos:line="1343" pos:column="55"/></name><operator pos:line="1343" pos:column="55">|<pos:position pos:line="1343" pos:column="56"/></operator><name pos:line="1343" pos:column="56">KEEP_READ_PAUSE<pos:position pos:line="1343" pos:column="71"/></name><operator pos:line="1343" pos:column="71">|<pos:position pos:line="1343" pos:column="72"/></operator><name pos:line="1343" pos:column="72">KEEP_WRITE_PAUSE<pos:position pos:line="1343" pos:column="88"/></name><operator pos:line="1343" pos:column="88">)<pos:position pos:line="1343" pos:column="89"/></operator><operator pos:line="1343" pos:column="89">)<pos:position pos:line="1343" pos:column="90"/></operator></expr></argument>)<pos:position pos:line="1343" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="1343" pos:column="92"/></expr_stmt>

  <return pos:line="1345" pos:column="3">return <expr><name pos:line="1345" pos:column="10">CURLE_OK<pos:position pos:line="1345" pos:column="18"/></name></expr>;<pos:position pos:line="1345" pos:column="19"/></return>
}<pos:position pos:line="1346" pos:column="2"/></block></then></if>

<comment type="block" pos:line="1348" pos:column="1">/*
 * Curl_single_getsock() gets called by the multi interface code when the app
 * has requested to get the sockets for the current connection. This function
 * will then be called once for every connection that the multi interface
 * keeps track of. This function will only be called for connections that are
 * in the proper state to have this information available.
 */</comment>
<function><type><name pos:line="1355" pos:column="1">int<pos:position pos:line="1355" pos:column="4"/></name></type> <name pos:line="1355" pos:column="5">Curl_single_getsock<pos:position pos:line="1355" pos:column="24"/></name><parameter_list pos:line="1355" pos:column="24">(<parameter><decl><type><specifier pos:line="1355" pos:column="25">const<pos:position pos:line="1355" pos:column="30"/></specifier> <name><name pos:line="1355" pos:column="31">struct<pos:position pos:line="1355" pos:column="37"/></name> <name pos:line="1355" pos:column="38">connectdata<pos:position pos:line="1355" pos:column="49"/></name></name> <modifier pos:line="1355" pos:column="50">*<pos:position pos:line="1355" pos:column="51"/></modifier></type><name pos:line="1355" pos:column="51">conn<pos:position pos:line="1355" pos:column="55"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="1356" pos:column="25">curl_socket_t<pos:position pos:line="1356" pos:column="38"/></name> <modifier pos:line="1356" pos:column="39">*<pos:position pos:line="1356" pos:column="40"/></modifier></type><name pos:line="1356" pos:column="40">sock<pos:position pos:line="1356" pos:column="44"/></name></decl></parameter>, <comment type="block" pos:line="1356" pos:column="46">/* points to numsocks number
                                                of sockets */</comment>
                        <parameter><decl><type><name pos:line="1358" pos:column="25">int<pos:position pos:line="1358" pos:column="28"/></name></type> <name pos:line="1358" pos:column="29">numsocks<pos:position pos:line="1358" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1358" pos:column="38"/></parameter_list>
<block pos:line="1359" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="1360" pos:column="3">const<pos:position pos:line="1360" pos:column="8"/></specifier> <name><name pos:line="1360" pos:column="9">struct<pos:position pos:line="1360" pos:column="15"/></name> <name pos:line="1360" pos:column="16">SessionHandle<pos:position pos:line="1360" pos:column="29"/></name></name> <modifier pos:line="1360" pos:column="30">*<pos:position pos:line="1360" pos:column="31"/></modifier></type><name pos:line="1360" pos:column="31">data<pos:position pos:line="1360" pos:column="35"/></name> <init pos:line="1360" pos:column="36">= <expr><name><name pos:line="1360" pos:column="38">conn<pos:position pos:line="1360" pos:column="42"/></name><operator pos:line="1360" pos:column="42">-&gt;<pos:position pos:line="1360" pos:column="47"/></operator><name pos:line="1360" pos:column="44">data<pos:position pos:line="1360" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="1360" pos:column="49"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1361" pos:column="3">int<pos:position pos:line="1361" pos:column="6"/></name></type> <name pos:line="1361" pos:column="7">bitmap<pos:position pos:line="1361" pos:column="13"/></name> <init pos:line="1361" pos:column="14">= <expr><name pos:line="1361" pos:column="16">GETSOCK_BLANK<pos:position pos:line="1361" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="1361" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1362" pos:column="3">unsigned<pos:position pos:line="1362" pos:column="11"/></name></type> <name pos:line="1362" pos:column="12">sockindex<pos:position pos:line="1362" pos:column="21"/></name> <init pos:line="1362" pos:column="22">= <expr><literal type="number" pos:line="1362" pos:column="24">0<pos:position pos:line="1362" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="1362" pos:column="26"/></decl_stmt>

  <if pos:line="1364" pos:column="3">if<condition pos:line="1364" pos:column="5">(<expr><name pos:line="1364" pos:column="6">numsocks<pos:position pos:line="1364" pos:column="14"/></name> <operator pos:line="1364" pos:column="15">&lt;<pos:position pos:line="1364" pos:column="19"/></operator> <literal type="number" pos:line="1364" pos:column="17">2<pos:position pos:line="1364" pos:column="18"/></literal></expr>)<pos:position pos:line="1364" pos:column="19"/></condition><then pos:line="1364" pos:column="19">
    <comment type="block" pos:line="1365" pos:column="5">/* simple check but we might need two slots */</comment>
    <block type="pseudo"><return pos:line="1366" pos:column="5">return <expr><name pos:line="1366" pos:column="12">GETSOCK_BLANK<pos:position pos:line="1366" pos:column="25"/></name></expr>;<pos:position pos:line="1366" pos:column="26"/></return></block></then></if>

  <comment type="block" pos:line="1368" pos:column="3">/* don't include HOLD and PAUSE connections */</comment>
  <if pos:line="1369" pos:column="3">if<condition pos:line="1369" pos:column="5">(<expr><operator pos:line="1369" pos:column="6">(<pos:position pos:line="1369" pos:column="7"/></operator><name><name pos:line="1369" pos:column="7">data<pos:position pos:line="1369" pos:column="11"/></name><operator pos:line="1369" pos:column="11">-&gt;<pos:position pos:line="1369" pos:column="16"/></operator><name pos:line="1369" pos:column="13">req<pos:position pos:line="1369" pos:column="16"/></name><operator pos:line="1369" pos:column="16">.<pos:position pos:line="1369" pos:column="17"/></operator><name pos:line="1369" pos:column="17">keepon<pos:position pos:line="1369" pos:column="23"/></name></name> <operator pos:line="1369" pos:column="24">&amp;<pos:position pos:line="1369" pos:column="29"/></operator> <name pos:line="1369" pos:column="26">KEEP_READBITS<pos:position pos:line="1369" pos:column="39"/></name><operator pos:line="1369" pos:column="39">)<pos:position pos:line="1369" pos:column="40"/></operator> <operator pos:line="1369" pos:column="41">==<pos:position pos:line="1369" pos:column="43"/></operator> <name pos:line="1369" pos:column="44">KEEP_READ<pos:position pos:line="1369" pos:column="53"/></name></expr>)<pos:position pos:line="1369" pos:column="54"/></condition><then pos:line="1369" pos:column="54"> <block pos:line="1369" pos:column="55">{

    <expr_stmt><expr><call><name pos:line="1371" pos:column="5">DEBUGASSERT<pos:position pos:line="1371" pos:column="16"/></name><argument_list pos:line="1371" pos:column="16">(<argument><expr><name><name pos:line="1371" pos:column="17">conn<pos:position pos:line="1371" pos:column="21"/></name><operator pos:line="1371" pos:column="21">-&gt;<pos:position pos:line="1371" pos:column="26"/></operator><name pos:line="1371" pos:column="23">sockfd<pos:position pos:line="1371" pos:column="29"/></name></name> <operator pos:line="1371" pos:column="30">!=<pos:position pos:line="1371" pos:column="32"/></operator> <name pos:line="1371" pos:column="33">CURL_SOCKET_BAD<pos:position pos:line="1371" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1371" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1371" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><name pos:line="1373" pos:column="5">bitmap<pos:position pos:line="1373" pos:column="11"/></name> <operator pos:line="1373" pos:column="12">|=<pos:position pos:line="1373" pos:column="14"/></operator> <call><name pos:line="1373" pos:column="15">GETSOCK_READSOCK<pos:position pos:line="1373" pos:column="31"/></name><argument_list pos:line="1373" pos:column="31">(<argument><expr><name pos:line="1373" pos:column="32">sockindex<pos:position pos:line="1373" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1373" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1373" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1374" pos:column="5">sock<pos:position pos:line="1374" pos:column="9"/></name><index pos:line="1374" pos:column="9">[<expr><name pos:line="1374" pos:column="10">sockindex<pos:position pos:line="1374" pos:column="19"/></name></expr>]<pos:position pos:line="1374" pos:column="20"/></index></name> <operator pos:line="1374" pos:column="21">=<pos:position pos:line="1374" pos:column="22"/></operator> <name><name pos:line="1374" pos:column="23">conn<pos:position pos:line="1374" pos:column="27"/></name><operator pos:line="1374" pos:column="27">-&gt;<pos:position pos:line="1374" pos:column="32"/></operator><name pos:line="1374" pos:column="29">sockfd<pos:position pos:line="1374" pos:column="35"/></name></name></expr>;<pos:position pos:line="1374" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="1375" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="1377" pos:column="3">/* don't include HOLD and PAUSE connections */</comment>
  <if pos:line="1378" pos:column="3">if<condition pos:line="1378" pos:column="5">(<expr><operator pos:line="1378" pos:column="6">(<pos:position pos:line="1378" pos:column="7"/></operator><name><name pos:line="1378" pos:column="7">data<pos:position pos:line="1378" pos:column="11"/></name><operator pos:line="1378" pos:column="11">-&gt;<pos:position pos:line="1378" pos:column="16"/></operator><name pos:line="1378" pos:column="13">req<pos:position pos:line="1378" pos:column="16"/></name><operator pos:line="1378" pos:column="16">.<pos:position pos:line="1378" pos:column="17"/></operator><name pos:line="1378" pos:column="17">keepon<pos:position pos:line="1378" pos:column="23"/></name></name> <operator pos:line="1378" pos:column="24">&amp;<pos:position pos:line="1378" pos:column="29"/></operator> <name pos:line="1378" pos:column="26">KEEP_WRITEBITS<pos:position pos:line="1378" pos:column="40"/></name><operator pos:line="1378" pos:column="40">)<pos:position pos:line="1378" pos:column="41"/></operator> <operator pos:line="1378" pos:column="42">==<pos:position pos:line="1378" pos:column="44"/></operator> <name pos:line="1378" pos:column="45">KEEP_WRITE<pos:position pos:line="1378" pos:column="55"/></name></expr>)<pos:position pos:line="1378" pos:column="56"/></condition><then pos:line="1378" pos:column="56"> <block pos:line="1378" pos:column="57">{

    <if pos:line="1380" pos:column="5">if<condition pos:line="1380" pos:column="7">(<expr><operator pos:line="1380" pos:column="8">(<pos:position pos:line="1380" pos:column="9"/></operator><name><name pos:line="1380" pos:column="9">conn<pos:position pos:line="1380" pos:column="13"/></name><operator pos:line="1380" pos:column="13">-&gt;<pos:position pos:line="1380" pos:column="18"/></operator><name pos:line="1380" pos:column="15">sockfd<pos:position pos:line="1380" pos:column="21"/></name></name> <operator pos:line="1380" pos:column="22">!=<pos:position pos:line="1380" pos:column="24"/></operator> <name><name pos:line="1380" pos:column="25">conn<pos:position pos:line="1380" pos:column="29"/></name><operator pos:line="1380" pos:column="29">-&gt;<pos:position pos:line="1380" pos:column="34"/></operator><name pos:line="1380" pos:column="31">writesockfd<pos:position pos:line="1380" pos:column="42"/></name></name><operator pos:line="1380" pos:column="42">)<pos:position pos:line="1380" pos:column="43"/></operator> <operator pos:line="1380" pos:column="44">||<pos:position pos:line="1380" pos:column="46"/></operator>
       <operator pos:line="1381" pos:column="8">!<pos:position pos:line="1381" pos:column="9"/></operator><operator pos:line="1381" pos:column="9">(<pos:position pos:line="1381" pos:column="10"/></operator><name><name pos:line="1381" pos:column="10">data<pos:position pos:line="1381" pos:column="14"/></name><operator pos:line="1381" pos:column="14">-&gt;<pos:position pos:line="1381" pos:column="19"/></operator><name pos:line="1381" pos:column="16">req<pos:position pos:line="1381" pos:column="19"/></name><operator pos:line="1381" pos:column="19">.<pos:position pos:line="1381" pos:column="20"/></operator><name pos:line="1381" pos:column="20">keepon<pos:position pos:line="1381" pos:column="26"/></name></name> <operator pos:line="1381" pos:column="27">&amp;<pos:position pos:line="1381" pos:column="32"/></operator> <name pos:line="1381" pos:column="29">KEEP_READ<pos:position pos:line="1381" pos:column="38"/></name><operator pos:line="1381" pos:column="38">)<pos:position pos:line="1381" pos:column="39"/></operator></expr>)<pos:position pos:line="1381" pos:column="40"/></condition><then pos:line="1381" pos:column="40"> <block pos:line="1381" pos:column="41">{
      <comment type="block" pos:line="1382" pos:column="7">/* only if they are not the same socket or we didn't have a readable
         one, we increase index */</comment>
      <if pos:line="1384" pos:column="7">if<condition pos:line="1384" pos:column="9">(<expr><name><name pos:line="1384" pos:column="10">data<pos:position pos:line="1384" pos:column="14"/></name><operator pos:line="1384" pos:column="14">-&gt;<pos:position pos:line="1384" pos:column="19"/></operator><name pos:line="1384" pos:column="16">req<pos:position pos:line="1384" pos:column="19"/></name><operator pos:line="1384" pos:column="19">.<pos:position pos:line="1384" pos:column="20"/></operator><name pos:line="1384" pos:column="20">keepon<pos:position pos:line="1384" pos:column="26"/></name></name> <operator pos:line="1384" pos:column="27">&amp;<pos:position pos:line="1384" pos:column="32"/></operator> <name pos:line="1384" pos:column="29">KEEP_READ<pos:position pos:line="1384" pos:column="38"/></name></expr>)<pos:position pos:line="1384" pos:column="39"/></condition><then pos:line="1384" pos:column="39">
        <block type="pseudo"><expr_stmt><expr><name pos:line="1385" pos:column="9">sockindex<pos:position pos:line="1385" pos:column="18"/></name><operator pos:line="1385" pos:column="18">++<pos:position pos:line="1385" pos:column="20"/></operator></expr>;<pos:position pos:line="1385" pos:column="21"/></expr_stmt></block></then></if> <comment type="block" pos:line="1385" pos:column="22">/* increase index if we need two entries */</comment>

      <expr_stmt><expr><call><name pos:line="1387" pos:column="7">DEBUGASSERT<pos:position pos:line="1387" pos:column="18"/></name><argument_list pos:line="1387" pos:column="18">(<argument><expr><name><name pos:line="1387" pos:column="19">conn<pos:position pos:line="1387" pos:column="23"/></name><operator pos:line="1387" pos:column="23">-&gt;<pos:position pos:line="1387" pos:column="28"/></operator><name pos:line="1387" pos:column="25">writesockfd<pos:position pos:line="1387" pos:column="36"/></name></name> <operator pos:line="1387" pos:column="37">!=<pos:position pos:line="1387" pos:column="39"/></operator> <name pos:line="1387" pos:column="40">CURL_SOCKET_BAD<pos:position pos:line="1387" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1387" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1387" pos:column="57"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="1389" pos:column="7">sock<pos:position pos:line="1389" pos:column="11"/></name><index pos:line="1389" pos:column="11">[<expr><name pos:line="1389" pos:column="12">sockindex<pos:position pos:line="1389" pos:column="21"/></name></expr>]<pos:position pos:line="1389" pos:column="22"/></index></name> <operator pos:line="1389" pos:column="23">=<pos:position pos:line="1389" pos:column="24"/></operator> <name><name pos:line="1389" pos:column="25">conn<pos:position pos:line="1389" pos:column="29"/></name><operator pos:line="1389" pos:column="29">-&gt;<pos:position pos:line="1389" pos:column="34"/></operator><name pos:line="1389" pos:column="31">writesockfd<pos:position pos:line="1389" pos:column="42"/></name></name></expr>;<pos:position pos:line="1389" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="1390" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="1392" pos:column="5">bitmap<pos:position pos:line="1392" pos:column="11"/></name> <operator pos:line="1392" pos:column="12">|=<pos:position pos:line="1392" pos:column="14"/></operator> <call><name pos:line="1392" pos:column="15">GETSOCK_WRITESOCK<pos:position pos:line="1392" pos:column="32"/></name><argument_list pos:line="1392" pos:column="32">(<argument><expr><name pos:line="1392" pos:column="33">sockindex<pos:position pos:line="1392" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1392" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1392" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="1393" pos:column="4"/></block></then></if>

  <return pos:line="1395" pos:column="3">return <expr><name pos:line="1395" pos:column="10">bitmap<pos:position pos:line="1395" pos:column="16"/></name></expr>;<pos:position pos:line="1395" pos:column="17"/></return>
}<pos:position pos:line="1396" pos:column="2"/></block></function>


<comment type="block" pos:line="1399" pos:column="1">/*
 * Transfer()
 *
 * This function is what performs the actual transfer. It is capable of
 * doing both ways simultaneously.
 * The transfer must already have been setup by a call to Curl_setup_transfer().
 *
 * Note that headers are created in a preallocated buffer of a default size.
 * That buffer can be enlarged on demand, but it is never shrunken again.
 *
 * Parts of this function was once written by the friendly Mark Butler
 * &lt;butlerm@xmission.com&gt;.
 */</comment>

<function><specifier pos:line="1413" pos:column="1">static<pos:position pos:line="1413" pos:column="7"/></specifier> <type><name pos:line="1413" pos:column="8">CURLcode<pos:position pos:line="1413" pos:column="16"/></name></type>
<name pos:line="1414" pos:column="1">Transfer<pos:position pos:line="1414" pos:column="9"/></name><parameter_list pos:line="1414" pos:column="9">(<parameter><decl><type><name><name pos:line="1414" pos:column="10">struct<pos:position pos:line="1414" pos:column="16"/></name> <name pos:line="1414" pos:column="17">connectdata<pos:position pos:line="1414" pos:column="28"/></name></name> <modifier pos:line="1414" pos:column="29">*<pos:position pos:line="1414" pos:column="30"/></modifier></type><name pos:line="1414" pos:column="30">conn<pos:position pos:line="1414" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1414" pos:column="35"/></parameter_list>
<block pos:line="1415" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="1416" pos:column="3">CURLcode<pos:position pos:line="1416" pos:column="11"/></name></type> <name pos:line="1416" pos:column="12">result<pos:position pos:line="1416" pos:column="18"/></name></decl>;<pos:position pos:line="1416" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="1417" pos:column="3">struct<pos:position pos:line="1417" pos:column="9"/></name> <name pos:line="1417" pos:column="10">SessionHandle<pos:position pos:line="1417" pos:column="23"/></name></name> <modifier pos:line="1417" pos:column="24">*<pos:position pos:line="1417" pos:column="25"/></modifier></type><name pos:line="1417" pos:column="25">data<pos:position pos:line="1417" pos:column="29"/></name> <init pos:line="1417" pos:column="30">= <expr><name><name pos:line="1417" pos:column="32">conn<pos:position pos:line="1417" pos:column="36"/></name><operator pos:line="1417" pos:column="36">-&gt;<pos:position pos:line="1417" pos:column="41"/></operator><name pos:line="1417" pos:column="38">data<pos:position pos:line="1417" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="1417" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="1418" pos:column="3">struct<pos:position pos:line="1418" pos:column="9"/></name> <name pos:line="1418" pos:column="10">SingleRequest<pos:position pos:line="1418" pos:column="23"/></name></name> <modifier pos:line="1418" pos:column="24">*<pos:position pos:line="1418" pos:column="25"/></modifier></type><name pos:line="1418" pos:column="25">k<pos:position pos:line="1418" pos:column="26"/></name> <init pos:line="1418" pos:column="27">= <expr><operator pos:line="1418" pos:column="29">&amp;<pos:position pos:line="1418" pos:column="34"/></operator><name><name pos:line="1418" pos:column="30">data<pos:position pos:line="1418" pos:column="34"/></name><operator pos:line="1418" pos:column="34">-&gt;<pos:position pos:line="1418" pos:column="39"/></operator><name pos:line="1418" pos:column="36">req<pos:position pos:line="1418" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="1418" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1419" pos:column="3">bool<pos:position pos:line="1419" pos:column="7"/></name></type> <name pos:line="1419" pos:column="8">done<pos:position pos:line="1419" pos:column="12"/></name><init pos:line="1419" pos:column="12">=<expr><name pos:line="1419" pos:column="13">FALSE<pos:position pos:line="1419" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="1419" pos:column="19"/></decl_stmt>

  <if pos:line="1421" pos:column="3">if<condition pos:line="1421" pos:column="5">(<expr><operator pos:line="1421" pos:column="6">(<pos:position pos:line="1421" pos:column="7"/></operator><name><name pos:line="1421" pos:column="7">conn<pos:position pos:line="1421" pos:column="11"/></name><operator pos:line="1421" pos:column="11">-&gt;<pos:position pos:line="1421" pos:column="16"/></operator><name pos:line="1421" pos:column="13">sockfd<pos:position pos:line="1421" pos:column="19"/></name></name> <operator pos:line="1421" pos:column="20">==<pos:position pos:line="1421" pos:column="22"/></operator> <name pos:line="1421" pos:column="23">CURL_SOCKET_BAD<pos:position pos:line="1421" pos:column="38"/></name><operator pos:line="1421" pos:column="38">)<pos:position pos:line="1421" pos:column="39"/></operator> <operator pos:line="1421" pos:column="40">&amp;&amp;<pos:position pos:line="1421" pos:column="50"/></operator>
     <operator pos:line="1422" pos:column="6">(<pos:position pos:line="1422" pos:column="7"/></operator><name><name pos:line="1422" pos:column="7">conn<pos:position pos:line="1422" pos:column="11"/></name><operator pos:line="1422" pos:column="11">-&gt;<pos:position pos:line="1422" pos:column="16"/></operator><name pos:line="1422" pos:column="13">writesockfd<pos:position pos:line="1422" pos:column="24"/></name></name> <operator pos:line="1422" pos:column="25">==<pos:position pos:line="1422" pos:column="27"/></operator> <name pos:line="1422" pos:column="28">CURL_SOCKET_BAD<pos:position pos:line="1422" pos:column="43"/></name><operator pos:line="1422" pos:column="43">)<pos:position pos:line="1422" pos:column="44"/></operator></expr>)<pos:position pos:line="1422" pos:column="45"/></condition><then pos:line="1422" pos:column="45">
    <comment type="block" pos:line="1423" pos:column="5">/* nothing to read, nothing to write, we're already OK! */</comment>
    <block type="pseudo"><return pos:line="1424" pos:column="5">return <expr><name pos:line="1424" pos:column="12">CURLE_OK<pos:position pos:line="1424" pos:column="20"/></name></expr>;<pos:position pos:line="1424" pos:column="21"/></return></block></then></if>

  <comment type="block" pos:line="1426" pos:column="3">/* we want header and/or body, if neither then don't do this! */</comment>
  <if pos:line="1427" pos:column="3">if<condition pos:line="1427" pos:column="5">(<expr><operator pos:line="1427" pos:column="6">!<pos:position pos:line="1427" pos:column="7"/></operator><name><name pos:line="1427" pos:column="7">k<pos:position pos:line="1427" pos:column="8"/></name><operator pos:line="1427" pos:column="8">-&gt;<pos:position pos:line="1427" pos:column="13"/></operator><name pos:line="1427" pos:column="10">getheader<pos:position pos:line="1427" pos:column="19"/></name></name> <operator pos:line="1427" pos:column="20">&amp;&amp;<pos:position pos:line="1427" pos:column="30"/></operator> <name><name pos:line="1427" pos:column="23">data<pos:position pos:line="1427" pos:column="27"/></name><operator pos:line="1427" pos:column="27">-&gt;<pos:position pos:line="1427" pos:column="32"/></operator><name pos:line="1427" pos:column="29">set<pos:position pos:line="1427" pos:column="32"/></name><operator pos:line="1427" pos:column="32">.<pos:position pos:line="1427" pos:column="33"/></operator><name pos:line="1427" pos:column="33">opt_no_body<pos:position pos:line="1427" pos:column="44"/></name></name></expr>)<pos:position pos:line="1427" pos:column="45"/></condition><then pos:line="1427" pos:column="45">
    <block type="pseudo"><return pos:line="1428" pos:column="5">return <expr><name pos:line="1428" pos:column="12">CURLE_OK<pos:position pos:line="1428" pos:column="20"/></name></expr>;<pos:position pos:line="1428" pos:column="21"/></return></block></then></if>

  <while pos:line="1430" pos:column="3">while<condition pos:line="1430" pos:column="8">(<expr><operator pos:line="1430" pos:column="9">!<pos:position pos:line="1430" pos:column="10"/></operator><name pos:line="1430" pos:column="10">done<pos:position pos:line="1430" pos:column="14"/></name></expr>)<pos:position pos:line="1430" pos:column="15"/></condition> <block pos:line="1430" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="1431" pos:column="5">curl_socket_t<pos:position pos:line="1431" pos:column="18"/></name></type> <name pos:line="1431" pos:column="19">fd_read<pos:position pos:line="1431" pos:column="26"/></name></decl>;<pos:position pos:line="1431" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="1432" pos:column="5">curl_socket_t<pos:position pos:line="1432" pos:column="18"/></name></type> <name pos:line="1432" pos:column="19">fd_write<pos:position pos:line="1432" pos:column="27"/></name></decl>;<pos:position pos:line="1432" pos:column="28"/></decl_stmt>

    <comment type="block" pos:line="1434" pos:column="5">/* limit-rate logic: if speed exceeds threshold, then do not include fd in
       select set. The current speed is recalculated in each Curl_readwrite()
       call */</comment>
    <if pos:line="1437" pos:column="5">if<condition pos:line="1437" pos:column="7">(<expr><operator pos:line="1437" pos:column="8">(<pos:position pos:line="1437" pos:column="9"/></operator><name><name pos:line="1437" pos:column="9">k<pos:position pos:line="1437" pos:column="10"/></name><operator pos:line="1437" pos:column="10">-&gt;<pos:position pos:line="1437" pos:column="15"/></operator><name pos:line="1437" pos:column="12">keepon<pos:position pos:line="1437" pos:column="18"/></name></name> <operator pos:line="1437" pos:column="19">&amp;<pos:position pos:line="1437" pos:column="24"/></operator> <name pos:line="1437" pos:column="21">KEEP_WRITE<pos:position pos:line="1437" pos:column="31"/></name><operator pos:line="1437" pos:column="31">)<pos:position pos:line="1437" pos:column="32"/></operator> <operator pos:line="1437" pos:column="33">&amp;&amp;<pos:position pos:line="1437" pos:column="43"/></operator>
        <operator pos:line="1438" pos:column="9">(<pos:position pos:line="1438" pos:column="10"/></operator><operator pos:line="1438" pos:column="10">!<pos:position pos:line="1438" pos:column="11"/></operator><name><name pos:line="1438" pos:column="11">data<pos:position pos:line="1438" pos:column="15"/></name><operator pos:line="1438" pos:column="15">-&gt;<pos:position pos:line="1438" pos:column="20"/></operator><name pos:line="1438" pos:column="17">set<pos:position pos:line="1438" pos:column="20"/></name><operator pos:line="1438" pos:column="20">.<pos:position pos:line="1438" pos:column="21"/></operator><name pos:line="1438" pos:column="21">max_send_speed<pos:position pos:line="1438" pos:column="35"/></name></name> <operator pos:line="1438" pos:column="36">||<pos:position pos:line="1438" pos:column="38"/></operator>
         <operator pos:line="1439" pos:column="10">(<pos:position pos:line="1439" pos:column="11"/></operator><name><name pos:line="1439" pos:column="11">data<pos:position pos:line="1439" pos:column="15"/></name><operator pos:line="1439" pos:column="15">-&gt;<pos:position pos:line="1439" pos:column="20"/></operator><name pos:line="1439" pos:column="17">progress<pos:position pos:line="1439" pos:column="25"/></name><operator pos:line="1439" pos:column="25">.<pos:position pos:line="1439" pos:column="26"/></operator><name pos:line="1439" pos:column="26">ulspeed<pos:position pos:line="1439" pos:column="33"/></name></name> <operator pos:line="1439" pos:column="34">&lt;<pos:position pos:line="1439" pos:column="38"/></operator> <name><name pos:line="1439" pos:column="36">data<pos:position pos:line="1439" pos:column="40"/></name><operator pos:line="1439" pos:column="40">-&gt;<pos:position pos:line="1439" pos:column="45"/></operator><name pos:line="1439" pos:column="42">set<pos:position pos:line="1439" pos:column="45"/></name><operator pos:line="1439" pos:column="45">.<pos:position pos:line="1439" pos:column="46"/></operator><name pos:line="1439" pos:column="46">max_send_speed<pos:position pos:line="1439" pos:column="60"/></name></name><operator pos:line="1439" pos:column="60">)<pos:position pos:line="1439" pos:column="61"/></operator> <operator pos:line="1439" pos:column="62">)<pos:position pos:line="1439" pos:column="63"/></operator></expr>)<pos:position pos:line="1439" pos:column="64"/></condition><then pos:line="1439" pos:column="64"> <block pos:line="1439" pos:column="65">{
      <expr_stmt><expr><name pos:line="1440" pos:column="7">fd_write<pos:position pos:line="1440" pos:column="15"/></name> <operator pos:line="1440" pos:column="16">=<pos:position pos:line="1440" pos:column="17"/></operator> <name><name pos:line="1440" pos:column="18">conn<pos:position pos:line="1440" pos:column="22"/></name><operator pos:line="1440" pos:column="22">-&gt;<pos:position pos:line="1440" pos:column="27"/></operator><name pos:line="1440" pos:column="24">writesockfd<pos:position pos:line="1440" pos:column="35"/></name></name></expr>;<pos:position pos:line="1440" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1441" pos:column="7">k<pos:position pos:line="1441" pos:column="8"/></name><operator pos:line="1441" pos:column="8">-&gt;<pos:position pos:line="1441" pos:column="13"/></operator><name pos:line="1441" pos:column="10">keepon<pos:position pos:line="1441" pos:column="16"/></name></name> <operator pos:line="1441" pos:column="17">&amp;=<pos:position pos:line="1441" pos:column="23"/></operator> <operator pos:line="1441" pos:column="20">~<pos:position pos:line="1441" pos:column="21"/></operator><name pos:line="1441" pos:column="21">KEEP_WRITE_HOLD<pos:position pos:line="1441" pos:column="36"/></name></expr>;<pos:position pos:line="1441" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="1442" pos:column="6"/></block></then>
    <else pos:line="1443" pos:column="5">else <block pos:line="1443" pos:column="10">{
      <expr_stmt><expr><name pos:line="1444" pos:column="7">fd_write<pos:position pos:line="1444" pos:column="15"/></name> <operator pos:line="1444" pos:column="16">=<pos:position pos:line="1444" pos:column="17"/></operator> <name pos:line="1444" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="1444" pos:column="33"/></name></expr>;<pos:position pos:line="1444" pos:column="34"/></expr_stmt>
      <if pos:line="1445" pos:column="7">if<condition pos:line="1445" pos:column="9">(<expr><name><name pos:line="1445" pos:column="10">k<pos:position pos:line="1445" pos:column="11"/></name><operator pos:line="1445" pos:column="11">-&gt;<pos:position pos:line="1445" pos:column="16"/></operator><name pos:line="1445" pos:column="13">keepon<pos:position pos:line="1445" pos:column="19"/></name></name> <operator pos:line="1445" pos:column="20">&amp;<pos:position pos:line="1445" pos:column="25"/></operator> <name pos:line="1445" pos:column="22">KEEP_WRITE<pos:position pos:line="1445" pos:column="32"/></name></expr>)<pos:position pos:line="1445" pos:column="33"/></condition><then pos:line="1445" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="1446" pos:column="9">k<pos:position pos:line="1446" pos:column="10"/></name><operator pos:line="1446" pos:column="10">-&gt;<pos:position pos:line="1446" pos:column="15"/></operator><name pos:line="1446" pos:column="12">keepon<pos:position pos:line="1446" pos:column="18"/></name></name> <operator pos:line="1446" pos:column="19">|=<pos:position pos:line="1446" pos:column="21"/></operator> <name pos:line="1446" pos:column="22">KEEP_WRITE_HOLD<pos:position pos:line="1446" pos:column="37"/></name></expr>;<pos:position pos:line="1446" pos:column="38"/></expr_stmt></block></then></if> <comment type="block" pos:line="1446" pos:column="39">/* hold it */</comment>
    }<pos:position pos:line="1447" pos:column="6"/></block></else></if>

    <if pos:line="1449" pos:column="5">if<condition pos:line="1449" pos:column="7">(<expr><operator pos:line="1449" pos:column="8">(<pos:position pos:line="1449" pos:column="9"/></operator><name><name pos:line="1449" pos:column="9">k<pos:position pos:line="1449" pos:column="10"/></name><operator pos:line="1449" pos:column="10">-&gt;<pos:position pos:line="1449" pos:column="15"/></operator><name pos:line="1449" pos:column="12">keepon<pos:position pos:line="1449" pos:column="18"/></name></name> <operator pos:line="1449" pos:column="19">&amp;<pos:position pos:line="1449" pos:column="24"/></operator> <name pos:line="1449" pos:column="21">KEEP_READ<pos:position pos:line="1449" pos:column="30"/></name><operator pos:line="1449" pos:column="30">)<pos:position pos:line="1449" pos:column="31"/></operator> <operator pos:line="1449" pos:column="32">&amp;&amp;<pos:position pos:line="1449" pos:column="42"/></operator>
        <operator pos:line="1450" pos:column="9">(<pos:position pos:line="1450" pos:column="10"/></operator><operator pos:line="1450" pos:column="10">!<pos:position pos:line="1450" pos:column="11"/></operator><name><name pos:line="1450" pos:column="11">data<pos:position pos:line="1450" pos:column="15"/></name><operator pos:line="1450" pos:column="15">-&gt;<pos:position pos:line="1450" pos:column="20"/></operator><name pos:line="1450" pos:column="17">set<pos:position pos:line="1450" pos:column="20"/></name><operator pos:line="1450" pos:column="20">.<pos:position pos:line="1450" pos:column="21"/></operator><name pos:line="1450" pos:column="21">max_recv_speed<pos:position pos:line="1450" pos:column="35"/></name></name> <operator pos:line="1450" pos:column="36">||<pos:position pos:line="1450" pos:column="38"/></operator>
         <operator pos:line="1451" pos:column="10">(<pos:position pos:line="1451" pos:column="11"/></operator><name><name pos:line="1451" pos:column="11">data<pos:position pos:line="1451" pos:column="15"/></name><operator pos:line="1451" pos:column="15">-&gt;<pos:position pos:line="1451" pos:column="20"/></operator><name pos:line="1451" pos:column="17">progress<pos:position pos:line="1451" pos:column="25"/></name><operator pos:line="1451" pos:column="25">.<pos:position pos:line="1451" pos:column="26"/></operator><name pos:line="1451" pos:column="26">dlspeed<pos:position pos:line="1451" pos:column="33"/></name></name> <operator pos:line="1451" pos:column="34">&lt;<pos:position pos:line="1451" pos:column="38"/></operator> <name><name pos:line="1451" pos:column="36">data<pos:position pos:line="1451" pos:column="40"/></name><operator pos:line="1451" pos:column="40">-&gt;<pos:position pos:line="1451" pos:column="45"/></operator><name pos:line="1451" pos:column="42">set<pos:position pos:line="1451" pos:column="45"/></name><operator pos:line="1451" pos:column="45">.<pos:position pos:line="1451" pos:column="46"/></operator><name pos:line="1451" pos:column="46">max_recv_speed<pos:position pos:line="1451" pos:column="60"/></name></name><operator pos:line="1451" pos:column="60">)<pos:position pos:line="1451" pos:column="61"/></operator><operator pos:line="1451" pos:column="61">)<pos:position pos:line="1451" pos:column="62"/></operator></expr> )<pos:position pos:line="1451" pos:column="64"/></condition><then pos:line="1451" pos:column="64"> <block pos:line="1451" pos:column="65">{
      <expr_stmt><expr><name pos:line="1452" pos:column="7">fd_read<pos:position pos:line="1452" pos:column="14"/></name> <operator pos:line="1452" pos:column="15">=<pos:position pos:line="1452" pos:column="16"/></operator> <name><name pos:line="1452" pos:column="17">conn<pos:position pos:line="1452" pos:column="21"/></name><operator pos:line="1452" pos:column="21">-&gt;<pos:position pos:line="1452" pos:column="26"/></operator><name pos:line="1452" pos:column="23">sockfd<pos:position pos:line="1452" pos:column="29"/></name></name></expr>;<pos:position pos:line="1452" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1453" pos:column="7">k<pos:position pos:line="1453" pos:column="8"/></name><operator pos:line="1453" pos:column="8">-&gt;<pos:position pos:line="1453" pos:column="13"/></operator><name pos:line="1453" pos:column="10">keepon<pos:position pos:line="1453" pos:column="16"/></name></name> <operator pos:line="1453" pos:column="17">&amp;=<pos:position pos:line="1453" pos:column="23"/></operator> <operator pos:line="1453" pos:column="20">~<pos:position pos:line="1453" pos:column="21"/></operator><name pos:line="1453" pos:column="21">KEEP_READ_HOLD<pos:position pos:line="1453" pos:column="35"/></name></expr>;<pos:position pos:line="1453" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="1454" pos:column="6"/></block></then>
    <else pos:line="1455" pos:column="5">else <block pos:line="1455" pos:column="10">{
      <expr_stmt><expr><name pos:line="1456" pos:column="7">fd_read<pos:position pos:line="1456" pos:column="14"/></name> <operator pos:line="1456" pos:column="15">=<pos:position pos:line="1456" pos:column="16"/></operator> <name pos:line="1456" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="1456" pos:column="32"/></name></expr>;<pos:position pos:line="1456" pos:column="33"/></expr_stmt>
      <if pos:line="1457" pos:column="7">if<condition pos:line="1457" pos:column="9">(<expr><name><name pos:line="1457" pos:column="10">k<pos:position pos:line="1457" pos:column="11"/></name><operator pos:line="1457" pos:column="11">-&gt;<pos:position pos:line="1457" pos:column="16"/></operator><name pos:line="1457" pos:column="13">keepon<pos:position pos:line="1457" pos:column="19"/></name></name> <operator pos:line="1457" pos:column="20">&amp;<pos:position pos:line="1457" pos:column="25"/></operator> <name pos:line="1457" pos:column="22">KEEP_READ<pos:position pos:line="1457" pos:column="31"/></name></expr>)<pos:position pos:line="1457" pos:column="32"/></condition><then pos:line="1457" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="1458" pos:column="9">k<pos:position pos:line="1458" pos:column="10"/></name><operator pos:line="1458" pos:column="10">-&gt;<pos:position pos:line="1458" pos:column="15"/></operator><name pos:line="1458" pos:column="12">keepon<pos:position pos:line="1458" pos:column="18"/></name></name> <operator pos:line="1458" pos:column="19">|=<pos:position pos:line="1458" pos:column="21"/></operator> <name pos:line="1458" pos:column="22">KEEP_READ_HOLD<pos:position pos:line="1458" pos:column="36"/></name></expr>;<pos:position pos:line="1458" pos:column="37"/></expr_stmt></block></then></if> <comment type="block" pos:line="1458" pos:column="38">/* hold it */</comment>
    }<pos:position pos:line="1459" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="1461" pos:column="5">/* pause logic. Don't check descriptors for paused connections */</comment>
    <if pos:line="1462" pos:column="5">if<condition pos:line="1462" pos:column="7">(<expr><name><name pos:line="1462" pos:column="8">k<pos:position pos:line="1462" pos:column="9"/></name><operator pos:line="1462" pos:column="9">-&gt;<pos:position pos:line="1462" pos:column="14"/></operator><name pos:line="1462" pos:column="11">keepon<pos:position pos:line="1462" pos:column="17"/></name></name> <operator pos:line="1462" pos:column="18">&amp;<pos:position pos:line="1462" pos:column="23"/></operator> <name pos:line="1462" pos:column="20">KEEP_READ_PAUSE<pos:position pos:line="1462" pos:column="35"/></name></expr>)<pos:position pos:line="1462" pos:column="36"/></condition><then pos:line="1462" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><name pos:line="1463" pos:column="7">fd_read<pos:position pos:line="1463" pos:column="14"/></name> <operator pos:line="1463" pos:column="15">=<pos:position pos:line="1463" pos:column="16"/></operator> <name pos:line="1463" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="1463" pos:column="32"/></name></expr>;<pos:position pos:line="1463" pos:column="33"/></expr_stmt></block></then></if>
    <if pos:line="1464" pos:column="5">if<condition pos:line="1464" pos:column="7">(<expr><name><name pos:line="1464" pos:column="8">k<pos:position pos:line="1464" pos:column="9"/></name><operator pos:line="1464" pos:column="9">-&gt;<pos:position pos:line="1464" pos:column="14"/></operator><name pos:line="1464" pos:column="11">keepon<pos:position pos:line="1464" pos:column="17"/></name></name> <operator pos:line="1464" pos:column="18">&amp;<pos:position pos:line="1464" pos:column="23"/></operator> <name pos:line="1464" pos:column="20">KEEP_WRITE_PAUSE<pos:position pos:line="1464" pos:column="36"/></name></expr>)<pos:position pos:line="1464" pos:column="37"/></condition><then pos:line="1464" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><name pos:line="1465" pos:column="7">fd_write<pos:position pos:line="1465" pos:column="15"/></name> <operator pos:line="1465" pos:column="16">=<pos:position pos:line="1465" pos:column="17"/></operator> <name pos:line="1465" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="1465" pos:column="33"/></name></expr>;<pos:position pos:line="1465" pos:column="34"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="1467" pos:column="5">/* The *_HOLD and *_PAUSE logic is necessary since even though there might
       be no traffic during the select interval, we still call
       Curl_readwrite() for the timeout case and if we limit transfer speed we
       must make sure that this function doesn't transfer anything while in
       HOLD status. */</comment>

    <switch pos:line="1473" pos:column="5">switch <condition pos:line="1473" pos:column="12">(<expr><call><name pos:line="1473" pos:column="13">Curl_socket_ready<pos:position pos:line="1473" pos:column="30"/></name><argument_list pos:line="1473" pos:column="30">(<argument><expr><name pos:line="1473" pos:column="31">fd_read<pos:position pos:line="1473" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="1473" pos:column="40">fd_write<pos:position pos:line="1473" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1473" pos:column="50">1000<pos:position pos:line="1473" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="1473" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="1473" pos:column="56"/></condition> <block pos:line="1473" pos:column="57">{
    <case pos:line="1474" pos:column="5">case <expr><operator pos:line="1474" pos:column="10">-<pos:position pos:line="1474" pos:column="11"/></operator><literal type="number" pos:line="1474" pos:column="11">1<pos:position pos:line="1474" pos:column="12"/></literal></expr>:<pos:position pos:line="1474" pos:column="13"/></case> <comment type="block" pos:line="1474" pos:column="14">/* select() error, stop reading */</comment>
<cpp:ifdef pos:line="1475" pos:column="1">#<cpp:directive pos:line="1475" pos:column="2">ifdef<pos:position pos:line="1475" pos:column="7"/></cpp:directive> <name pos:line="1475" pos:column="8">EINTR<pos:position pos:line="1475" pos:column="13"/></name></cpp:ifdef>
      <comment type="block" pos:line="1476" pos:column="7">/* The EINTR is not serious, and it seems you might get this more
         ofen when using the lib in a multi-threaded environment! */</comment>
      <if pos:line="1478" pos:column="7">if<condition pos:line="1478" pos:column="9">(<expr><name pos:line="1478" pos:column="10">SOCKERRNO<pos:position pos:line="1478" pos:column="19"/></name> <operator pos:line="1478" pos:column="20">==<pos:position pos:line="1478" pos:column="22"/></operator> <name pos:line="1478" pos:column="23">EINTR<pos:position pos:line="1478" pos:column="28"/></name></expr>)<pos:position pos:line="1478" pos:column="29"/></condition><then pos:line="1478" pos:column="29">
        <block type="pseudo"><empty_stmt pos:line="1479" pos:column="9">;<pos:position pos:line="1479" pos:column="10"/></empty_stmt></block></then>
      <else pos:line="1480" pos:column="7">else
<cpp:endif pos:line="1481" pos:column="1">#<cpp:directive pos:line="1481" pos:column="2">endif<pos:position pos:line="1481" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><expr_stmt><expr><name pos:line="1482" pos:column="9">done<pos:position pos:line="1482" pos:column="13"/></name> <operator pos:line="1482" pos:column="14">=<pos:position pos:line="1482" pos:column="15"/></operator> <name pos:line="1482" pos:column="16">TRUE<pos:position pos:line="1482" pos:column="20"/></name></expr>;<pos:position pos:line="1482" pos:column="21"/></expr_stmt></block></else></if> <comment type="block" pos:line="1482" pos:column="22">/* no more read or write */</comment>
      <continue pos:line="1483" pos:column="7">continue;<pos:position pos:line="1483" pos:column="16"/></continue>
    <case pos:line="1484" pos:column="5">case <expr><literal type="number" pos:line="1484" pos:column="10">0<pos:position pos:line="1484" pos:column="11"/></literal></expr>:<pos:position pos:line="1484" pos:column="12"/></case>  <comment type="block" pos:line="1484" pos:column="14">/* timeout */</comment>
    <default pos:line="1485" pos:column="5">default:<pos:position pos:line="1485" pos:column="13"/></default> <comment type="block" pos:line="1485" pos:column="14">/* readable descriptors */</comment>

      <expr_stmt><expr><name pos:line="1487" pos:column="7">result<pos:position pos:line="1487" pos:column="13"/></name> <operator pos:line="1487" pos:column="14">=<pos:position pos:line="1487" pos:column="15"/></operator> <call><name pos:line="1487" pos:column="16">Curl_readwrite<pos:position pos:line="1487" pos:column="30"/></name><argument_list pos:line="1487" pos:column="30">(<argument><expr><name pos:line="1487" pos:column="31">conn<pos:position pos:line="1487" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="1487" pos:column="37">&amp;<pos:position pos:line="1487" pos:column="42"/></operator><name pos:line="1487" pos:column="38">done<pos:position pos:line="1487" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1487" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1487" pos:column="44"/></expr_stmt>
      <break pos:line="1488" pos:column="7">break;<pos:position pos:line="1488" pos:column="13"/></break>
    }<pos:position pos:line="1489" pos:column="6"/></block></switch>
    <if pos:line="1490" pos:column="5">if<condition pos:line="1490" pos:column="7">(<expr><name pos:line="1490" pos:column="8">result<pos:position pos:line="1490" pos:column="14"/></name></expr>)<pos:position pos:line="1490" pos:column="15"/></condition><then pos:line="1490" pos:column="15">
      <block type="pseudo"><return pos:line="1491" pos:column="7">return <expr><name pos:line="1491" pos:column="14">result<pos:position pos:line="1491" pos:column="20"/></name></expr>;<pos:position pos:line="1491" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="1493" pos:column="5">/* "done" signals to us if the transfer(s) are ready */</comment>
  }<pos:position pos:line="1494" pos:column="4"/></block></while>

  <return pos:line="1496" pos:column="3">return <expr><name pos:line="1496" pos:column="10">CURLE_OK<pos:position pos:line="1496" pos:column="18"/></name></expr>;<pos:position pos:line="1496" pos:column="19"/></return>
}<pos:position pos:line="1497" pos:column="2"/></block></function>

<comment type="block" pos:line="1499" pos:column="1">/*
 * Curl_pretransfer() is called immediately before a transfer starts.
 */</comment>
<function><type><name pos:line="1502" pos:column="1">CURLcode<pos:position pos:line="1502" pos:column="9"/></name></type> <name pos:line="1502" pos:column="10">Curl_pretransfer<pos:position pos:line="1502" pos:column="26"/></name><parameter_list pos:line="1502" pos:column="26">(<parameter><decl><type><name><name pos:line="1502" pos:column="27">struct<pos:position pos:line="1502" pos:column="33"/></name> <name pos:line="1502" pos:column="34">SessionHandle<pos:position pos:line="1502" pos:column="47"/></name></name> <modifier pos:line="1502" pos:column="48">*<pos:position pos:line="1502" pos:column="49"/></modifier></type><name pos:line="1502" pos:column="49">data<pos:position pos:line="1502" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1502" pos:column="54"/></parameter_list>
<block pos:line="1503" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="1504" pos:column="3">CURLcode<pos:position pos:line="1504" pos:column="11"/></name></type> <name pos:line="1504" pos:column="12">res<pos:position pos:line="1504" pos:column="15"/></name></decl>;<pos:position pos:line="1504" pos:column="16"/></decl_stmt>
  <if pos:line="1505" pos:column="3">if<condition pos:line="1505" pos:column="5">(<expr><operator pos:line="1505" pos:column="6">!<pos:position pos:line="1505" pos:column="7"/></operator><name><name pos:line="1505" pos:column="7">data<pos:position pos:line="1505" pos:column="11"/></name><operator pos:line="1505" pos:column="11">-&gt;<pos:position pos:line="1505" pos:column="16"/></operator><name pos:line="1505" pos:column="13">change<pos:position pos:line="1505" pos:column="19"/></name><operator pos:line="1505" pos:column="19">.<pos:position pos:line="1505" pos:column="20"/></operator><name pos:line="1505" pos:column="20">url<pos:position pos:line="1505" pos:column="23"/></name></name></expr>)<pos:position pos:line="1505" pos:column="24"/></condition><then pos:line="1505" pos:column="24"> <block pos:line="1505" pos:column="25">{
    <comment type="block" pos:line="1506" pos:column="5">/* we can't do anything wihout URL */</comment>
    <expr_stmt><expr><call><name pos:line="1507" pos:column="5">failf<pos:position pos:line="1507" pos:column="10"/></name><argument_list pos:line="1507" pos:column="10">(<argument><expr><name pos:line="1507" pos:column="11">data<pos:position pos:line="1507" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1507" pos:column="17">"No URL set!"<pos:position pos:line="1507" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="1507" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="1507" pos:column="32"/></expr_stmt>
    <return pos:line="1508" pos:column="5">return <expr><name pos:line="1508" pos:column="12">CURLE_URL_MALFORMAT<pos:position pos:line="1508" pos:column="31"/></name></expr>;<pos:position pos:line="1508" pos:column="32"/></return>
  }<pos:position pos:line="1509" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="1511" pos:column="3">/* Init the SSL session ID cache here. We do it here since we want to do it
     after the *_setopt() calls (that could change the size of the cache) but
     before any transfer takes place. */</comment>
  <expr_stmt><expr><name pos:line="1514" pos:column="3">res<pos:position pos:line="1514" pos:column="6"/></name> <operator pos:line="1514" pos:column="7">=<pos:position pos:line="1514" pos:column="8"/></operator> <call><name pos:line="1514" pos:column="9">Curl_ssl_initsessions<pos:position pos:line="1514" pos:column="30"/></name><argument_list pos:line="1514" pos:column="30">(<argument><expr><name pos:line="1514" pos:column="31">data<pos:position pos:line="1514" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="1514" pos:column="37">data<pos:position pos:line="1514" pos:column="41"/></name><operator pos:line="1514" pos:column="41">-&gt;<pos:position pos:line="1514" pos:column="46"/></operator><name pos:line="1514" pos:column="43">set<pos:position pos:line="1514" pos:column="46"/></name><operator pos:line="1514" pos:column="46">.<pos:position pos:line="1514" pos:column="47"/></operator><name pos:line="1514" pos:column="47">ssl<pos:position pos:line="1514" pos:column="50"/></name><operator pos:line="1514" pos:column="50">.<pos:position pos:line="1514" pos:column="51"/></operator><name pos:line="1514" pos:column="51">numsessions<pos:position pos:line="1514" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="1514" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1514" pos:column="64"/></expr_stmt>
  <if pos:line="1515" pos:column="3">if<condition pos:line="1515" pos:column="5">(<expr><name pos:line="1515" pos:column="6">res<pos:position pos:line="1515" pos:column="9"/></name></expr>)<pos:position pos:line="1515" pos:column="10"/></condition><then pos:line="1515" pos:column="10">
    <block type="pseudo"><return pos:line="1516" pos:column="5">return <expr><name pos:line="1516" pos:column="12">res<pos:position pos:line="1516" pos:column="15"/></name></expr>;<pos:position pos:line="1516" pos:column="16"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="1518" pos:column="3">data<pos:position pos:line="1518" pos:column="7"/></name><operator pos:line="1518" pos:column="7">-&gt;<pos:position pos:line="1518" pos:column="12"/></operator><name pos:line="1518" pos:column="9">set<pos:position pos:line="1518" pos:column="12"/></name><operator pos:line="1518" pos:column="12">.<pos:position pos:line="1518" pos:column="13"/></operator><name pos:line="1518" pos:column="13">followlocation<pos:position pos:line="1518" pos:column="27"/></name></name><operator pos:line="1518" pos:column="27">=<pos:position pos:line="1518" pos:column="28"/></operator><literal type="number" pos:line="1518" pos:column="28">0<pos:position pos:line="1518" pos:column="29"/></literal></expr>;<pos:position pos:line="1518" pos:column="30"/></expr_stmt> <comment type="block" pos:line="1518" pos:column="31">/* reset the location-follow counter */</comment>
  <expr_stmt><expr><name><name pos:line="1519" pos:column="3">data<pos:position pos:line="1519" pos:column="7"/></name><operator pos:line="1519" pos:column="7">-&gt;<pos:position pos:line="1519" pos:column="12"/></operator><name pos:line="1519" pos:column="9">state<pos:position pos:line="1519" pos:column="14"/></name><operator pos:line="1519" pos:column="14">.<pos:position pos:line="1519" pos:column="15"/></operator><name pos:line="1519" pos:column="15">this_is_a_follow<pos:position pos:line="1519" pos:column="31"/></name></name> <operator pos:line="1519" pos:column="32">=<pos:position pos:line="1519" pos:column="33"/></operator> <name pos:line="1519" pos:column="34">FALSE<pos:position pos:line="1519" pos:column="39"/></name></expr>;<pos:position pos:line="1519" pos:column="40"/></expr_stmt> <comment type="block" pos:line="1519" pos:column="41">/* reset this */</comment>
  <expr_stmt><expr><name><name pos:line="1520" pos:column="3">data<pos:position pos:line="1520" pos:column="7"/></name><operator pos:line="1520" pos:column="7">-&gt;<pos:position pos:line="1520" pos:column="12"/></operator><name pos:line="1520" pos:column="9">state<pos:position pos:line="1520" pos:column="14"/></name><operator pos:line="1520" pos:column="14">.<pos:position pos:line="1520" pos:column="15"/></operator><name pos:line="1520" pos:column="15">errorbuf<pos:position pos:line="1520" pos:column="23"/></name></name> <operator pos:line="1520" pos:column="24">=<pos:position pos:line="1520" pos:column="25"/></operator> <name pos:line="1520" pos:column="26">FALSE<pos:position pos:line="1520" pos:column="31"/></name></expr>;<pos:position pos:line="1520" pos:column="32"/></expr_stmt> <comment type="block" pos:line="1520" pos:column="33">/* no error has occurred */</comment>

  <expr_stmt><expr><name><name pos:line="1522" pos:column="3">data<pos:position pos:line="1522" pos:column="7"/></name><operator pos:line="1522" pos:column="7">-&gt;<pos:position pos:line="1522" pos:column="12"/></operator><name pos:line="1522" pos:column="9">state<pos:position pos:line="1522" pos:column="14"/></name><operator pos:line="1522" pos:column="14">.<pos:position pos:line="1522" pos:column="15"/></operator><name pos:line="1522" pos:column="15">authproblem<pos:position pos:line="1522" pos:column="26"/></name></name> <operator pos:line="1522" pos:column="27">=<pos:position pos:line="1522" pos:column="28"/></operator> <name pos:line="1522" pos:column="29">FALSE<pos:position pos:line="1522" pos:column="34"/></name></expr>;<pos:position pos:line="1522" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1523" pos:column="3">data<pos:position pos:line="1523" pos:column="7"/></name><operator pos:line="1523" pos:column="7">-&gt;<pos:position pos:line="1523" pos:column="12"/></operator><name pos:line="1523" pos:column="9">state<pos:position pos:line="1523" pos:column="14"/></name><operator pos:line="1523" pos:column="14">.<pos:position pos:line="1523" pos:column="15"/></operator><name pos:line="1523" pos:column="15">authhost<pos:position pos:line="1523" pos:column="23"/></name><operator pos:line="1523" pos:column="23">.<pos:position pos:line="1523" pos:column="24"/></operator><name pos:line="1523" pos:column="24">want<pos:position pos:line="1523" pos:column="28"/></name></name> <operator pos:line="1523" pos:column="29">=<pos:position pos:line="1523" pos:column="30"/></operator> <name><name pos:line="1523" pos:column="31">data<pos:position pos:line="1523" pos:column="35"/></name><operator pos:line="1523" pos:column="35">-&gt;<pos:position pos:line="1523" pos:column="40"/></operator><name pos:line="1523" pos:column="37">set<pos:position pos:line="1523" pos:column="40"/></name><operator pos:line="1523" pos:column="40">.<pos:position pos:line="1523" pos:column="41"/></operator><name pos:line="1523" pos:column="41">httpauth<pos:position pos:line="1523" pos:column="49"/></name></name></expr>;<pos:position pos:line="1523" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1524" pos:column="3">data<pos:position pos:line="1524" pos:column="7"/></name><operator pos:line="1524" pos:column="7">-&gt;<pos:position pos:line="1524" pos:column="12"/></operator><name pos:line="1524" pos:column="9">state<pos:position pos:line="1524" pos:column="14"/></name><operator pos:line="1524" pos:column="14">.<pos:position pos:line="1524" pos:column="15"/></operator><name pos:line="1524" pos:column="15">authproxy<pos:position pos:line="1524" pos:column="24"/></name><operator pos:line="1524" pos:column="24">.<pos:position pos:line="1524" pos:column="25"/></operator><name pos:line="1524" pos:column="25">want<pos:position pos:line="1524" pos:column="29"/></name></name> <operator pos:line="1524" pos:column="30">=<pos:position pos:line="1524" pos:column="31"/></operator> <name><name pos:line="1524" pos:column="32">data<pos:position pos:line="1524" pos:column="36"/></name><operator pos:line="1524" pos:column="36">-&gt;<pos:position pos:line="1524" pos:column="41"/></operator><name pos:line="1524" pos:column="38">set<pos:position pos:line="1524" pos:column="41"/></name><operator pos:line="1524" pos:column="41">.<pos:position pos:line="1524" pos:column="42"/></operator><name pos:line="1524" pos:column="42">proxyauth<pos:position pos:line="1524" pos:column="51"/></name></name></expr>;<pos:position pos:line="1524" pos:column="52"/></expr_stmt>

  <comment type="block" pos:line="1526" pos:column="3">/* If there is a list of cookie files to read, do it now! */</comment>
  <if pos:line="1527" pos:column="3">if<condition pos:line="1527" pos:column="5">(<expr><name><name pos:line="1527" pos:column="6">data<pos:position pos:line="1527" pos:column="10"/></name><operator pos:line="1527" pos:column="10">-&gt;<pos:position pos:line="1527" pos:column="15"/></operator><name pos:line="1527" pos:column="12">change<pos:position pos:line="1527" pos:column="18"/></name><operator pos:line="1527" pos:column="18">.<pos:position pos:line="1527" pos:column="19"/></operator><name pos:line="1527" pos:column="19">cookielist<pos:position pos:line="1527" pos:column="29"/></name></name></expr>)<pos:position pos:line="1527" pos:column="30"/></condition><then pos:line="1527" pos:column="30"> <block pos:line="1527" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="1528" pos:column="5">Curl_cookie_loadfiles<pos:position pos:line="1528" pos:column="26"/></name><argument_list pos:line="1528" pos:column="26">(<argument><expr><name pos:line="1528" pos:column="27">data<pos:position pos:line="1528" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1528" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1528" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="1529" pos:column="4"/></block></then></if>

 <comment type="block" pos:line="1531" pos:column="2">/* Allow data-&gt;set.use_port to set which port to use. This needs to be
  * disabled for example when we follow Location: headers to URLs using
  * different ports! */</comment>
  <expr_stmt><expr><name><name pos:line="1534" pos:column="3">data<pos:position pos:line="1534" pos:column="7"/></name><operator pos:line="1534" pos:column="7">-&gt;<pos:position pos:line="1534" pos:column="12"/></operator><name pos:line="1534" pos:column="9">state<pos:position pos:line="1534" pos:column="14"/></name><operator pos:line="1534" pos:column="14">.<pos:position pos:line="1534" pos:column="15"/></operator><name pos:line="1534" pos:column="15">allow_port<pos:position pos:line="1534" pos:column="25"/></name></name> <operator pos:line="1534" pos:column="26">=<pos:position pos:line="1534" pos:column="27"/></operator> <name pos:line="1534" pos:column="28">TRUE<pos:position pos:line="1534" pos:column="32"/></name></expr>;<pos:position pos:line="1534" pos:column="33"/></expr_stmt>

<cpp:if pos:line="1536" pos:column="1">#<cpp:directive pos:line="1536" pos:column="2">if<pos:position pos:line="1536" pos:column="4"/></cpp:directive> <expr><call><name pos:line="1536" pos:column="5">defined<pos:position pos:line="1536" pos:column="12"/></name><argument_list pos:line="1536" pos:column="12">(<argument><expr><name pos:line="1536" pos:column="13">HAVE_SIGNAL<pos:position pos:line="1536" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1536" pos:column="25"/></argument_list></call> <operator pos:line="1536" pos:column="26">&amp;&amp;<pos:position pos:line="1536" pos:column="36"/></operator> <call><name pos:line="1536" pos:column="29">defined<pos:position pos:line="1536" pos:column="36"/></name><argument_list pos:line="1536" pos:column="36">(<argument><expr><name pos:line="1536" pos:column="37">SIGPIPE<pos:position pos:line="1536" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1536" pos:column="45"/></argument_list></call> <operator pos:line="1536" pos:column="46">&amp;&amp;<pos:position pos:line="1536" pos:column="56"/></operator> <operator pos:line="1536" pos:column="49">!<pos:position pos:line="1536" pos:column="50"/></operator><call><name pos:line="1536" pos:column="50">defined<pos:position pos:line="1536" pos:column="57"/></name><argument_list pos:line="1536" pos:column="57">(<argument><expr><name pos:line="1536" pos:column="58">HAVE_MSG_NOSIGNAL<pos:position pos:line="1536" pos:column="75"/></name></expr></argument>)<pos:position pos:line="1536" pos:column="76"/></argument_list></call></expr></cpp:if>
  <comment type="block" format="doxygen" pos:line="1537" pos:column="3">/*************************************************************
   * Tell signal handler to ignore SIGPIPE
   *************************************************************/</comment>
  <if pos:line="1540" pos:column="3">if<condition pos:line="1540" pos:column="5">(<expr><operator pos:line="1540" pos:column="6">!<pos:position pos:line="1540" pos:column="7"/></operator><name><name pos:line="1540" pos:column="7">data<pos:position pos:line="1540" pos:column="11"/></name><operator pos:line="1540" pos:column="11">-&gt;<pos:position pos:line="1540" pos:column="16"/></operator><name pos:line="1540" pos:column="13">set<pos:position pos:line="1540" pos:column="16"/></name><operator pos:line="1540" pos:column="16">.<pos:position pos:line="1540" pos:column="17"/></operator><name pos:line="1540" pos:column="17">no_signal<pos:position pos:line="1540" pos:column="26"/></name></name></expr>)<pos:position pos:line="1540" pos:column="27"/></condition><then pos:line="1540" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="1541" pos:column="5">data<pos:position pos:line="1541" pos:column="9"/></name><operator pos:line="1541" pos:column="9">-&gt;<pos:position pos:line="1541" pos:column="14"/></operator><name pos:line="1541" pos:column="11">state<pos:position pos:line="1541" pos:column="16"/></name><operator pos:line="1541" pos:column="16">.<pos:position pos:line="1541" pos:column="17"/></operator><name pos:line="1541" pos:column="17">prev_signal<pos:position pos:line="1541" pos:column="28"/></name></name> <operator pos:line="1541" pos:column="29">=<pos:position pos:line="1541" pos:column="30"/></operator> <call><name pos:line="1541" pos:column="31">signal<pos:position pos:line="1541" pos:column="37"/></name><argument_list pos:line="1541" pos:column="37">(<argument><expr><name pos:line="1541" pos:column="38">SIGPIPE<pos:position pos:line="1541" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="1541" pos:column="47">SIG_IGN<pos:position pos:line="1541" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1541" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1541" pos:column="56"/></expr_stmt></block></then></if>
<cpp:endif pos:line="1542" pos:column="1">#<cpp:directive pos:line="1542" pos:column="2">endif<pos:position pos:line="1542" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="1544" pos:column="3">Curl_initinfo<pos:position pos:line="1544" pos:column="16"/></name><argument_list pos:line="1544" pos:column="16">(<argument><expr><name pos:line="1544" pos:column="17">data<pos:position pos:line="1544" pos:column="21"/></name></expr></argument>)<pos:position pos:line="1544" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="1544" pos:column="23"/></expr_stmt> <comment type="block" pos:line="1544" pos:column="24">/* reset session-specific information "variables" */</comment>
  <expr_stmt><expr><call><name pos:line="1545" pos:column="3">Curl_pgrsStartNow<pos:position pos:line="1545" pos:column="20"/></name><argument_list pos:line="1545" pos:column="20">(<argument><expr><name pos:line="1545" pos:column="21">data<pos:position pos:line="1545" pos:column="25"/></name></expr></argument>)<pos:position pos:line="1545" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="1545" pos:column="27"/></expr_stmt>

  <return pos:line="1547" pos:column="3">return <expr><name pos:line="1547" pos:column="10">CURLE_OK<pos:position pos:line="1547" pos:column="18"/></name></expr>;<pos:position pos:line="1547" pos:column="19"/></return>
}<pos:position pos:line="1548" pos:column="2"/></block></function>

<comment type="block" pos:line="1550" pos:column="1">/*
 * Curl_posttransfer() is called immediately after a transfer ends
 */</comment>
<function><type><name pos:line="1553" pos:column="1">CURLcode<pos:position pos:line="1553" pos:column="9"/></name></type> <name pos:line="1553" pos:column="10">Curl_posttransfer<pos:position pos:line="1553" pos:column="27"/></name><parameter_list pos:line="1553" pos:column="27">(<parameter><decl><type><name><name pos:line="1553" pos:column="28">struct<pos:position pos:line="1553" pos:column="34"/></name> <name pos:line="1553" pos:column="35">SessionHandle<pos:position pos:line="1553" pos:column="48"/></name></name> <modifier pos:line="1553" pos:column="49">*<pos:position pos:line="1553" pos:column="50"/></modifier></type><name pos:line="1553" pos:column="50">data<pos:position pos:line="1553" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1553" pos:column="55"/></parameter_list>
<block pos:line="1554" pos:column="1">{
<cpp:if pos:line="1555" pos:column="1">#<cpp:directive pos:line="1555" pos:column="2">if<pos:position pos:line="1555" pos:column="4"/></cpp:directive> <expr><call><name pos:line="1555" pos:column="5">defined<pos:position pos:line="1555" pos:column="12"/></name><argument_list pos:line="1555" pos:column="12">(<argument><expr><name pos:line="1555" pos:column="13">HAVE_SIGNAL<pos:position pos:line="1555" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1555" pos:column="25"/></argument_list></call> <operator pos:line="1555" pos:column="26">&amp;&amp;<pos:position pos:line="1555" pos:column="36"/></operator> <call><name pos:line="1555" pos:column="29">defined<pos:position pos:line="1555" pos:column="36"/></name><argument_list pos:line="1555" pos:column="36">(<argument><expr><name pos:line="1555" pos:column="37">SIGPIPE<pos:position pos:line="1555" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1555" pos:column="45"/></argument_list></call> <operator pos:line="1555" pos:column="46">&amp;&amp;<pos:position pos:line="1555" pos:column="56"/></operator> <operator pos:line="1555" pos:column="49">!<pos:position pos:line="1555" pos:column="50"/></operator><call><name pos:line="1555" pos:column="50">defined<pos:position pos:line="1555" pos:column="57"/></name><argument_list pos:line="1555" pos:column="57">(<argument><expr><name pos:line="1555" pos:column="58">HAVE_MSG_NOSIGNAL<pos:position pos:line="1555" pos:column="75"/></name></expr></argument>)<pos:position pos:line="1555" pos:column="76"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="1556" pos:column="3">/* restore the signal handler for SIGPIPE before we get back */</comment>
  <if pos:line="1557" pos:column="3">if<condition pos:line="1557" pos:column="5">(<expr><operator pos:line="1557" pos:column="6">!<pos:position pos:line="1557" pos:column="7"/></operator><name><name pos:line="1557" pos:column="7">data<pos:position pos:line="1557" pos:column="11"/></name><operator pos:line="1557" pos:column="11">-&gt;<pos:position pos:line="1557" pos:column="16"/></operator><name pos:line="1557" pos:column="13">set<pos:position pos:line="1557" pos:column="16"/></name><operator pos:line="1557" pos:column="16">.<pos:position pos:line="1557" pos:column="17"/></operator><name pos:line="1557" pos:column="17">no_signal<pos:position pos:line="1557" pos:column="26"/></name></name></expr>)<pos:position pos:line="1557" pos:column="27"/></condition><then pos:line="1557" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="1558" pos:column="5">signal<pos:position pos:line="1558" pos:column="11"/></name><argument_list pos:line="1558" pos:column="11">(<argument><expr><name pos:line="1558" pos:column="12">SIGPIPE<pos:position pos:line="1558" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="1558" pos:column="21">data<pos:position pos:line="1558" pos:column="25"/></name><operator pos:line="1558" pos:column="25">-&gt;<pos:position pos:line="1558" pos:column="30"/></operator><name pos:line="1558" pos:column="27">state<pos:position pos:line="1558" pos:column="32"/></name><operator pos:line="1558" pos:column="32">.<pos:position pos:line="1558" pos:column="33"/></operator><name pos:line="1558" pos:column="33">prev_signal<pos:position pos:line="1558" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="1558" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1558" pos:column="46"/></expr_stmt></block></then></if>
<cpp:else pos:line="1559" pos:column="1">#<cpp:directive pos:line="1559" pos:column="2">else<pos:position pos:line="1559" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="1560" pos:column="3">(<pos:position pos:line="1560" pos:column="4"/></operator><name pos:line="1560" pos:column="4">void<pos:position pos:line="1560" pos:column="8"/></name><operator pos:line="1560" pos:column="8">)<pos:position pos:line="1560" pos:column="9"/></operator><name pos:line="1560" pos:column="9">data<pos:position pos:line="1560" pos:column="13"/></name></expr>;<pos:position pos:line="1560" pos:column="14"/></expr_stmt> <comment type="block" pos:line="1560" pos:column="15">/* unused parameter */</comment>
<cpp:endif pos:line="1561" pos:column="1">#<cpp:directive pos:line="1561" pos:column="2">endif<pos:position pos:line="1561" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="1563" pos:column="3">if<condition pos:line="1563" pos:column="5">(<expr><operator pos:line="1563" pos:column="6">!<pos:position pos:line="1563" pos:column="7"/></operator><operator pos:line="1563" pos:column="7">(<pos:position pos:line="1563" pos:column="8"/></operator><name><name pos:line="1563" pos:column="8">data<pos:position pos:line="1563" pos:column="12"/></name><operator pos:line="1563" pos:column="12">-&gt;<pos:position pos:line="1563" pos:column="17"/></operator><name pos:line="1563" pos:column="14">progress<pos:position pos:line="1563" pos:column="22"/></name><operator pos:line="1563" pos:column="22">.<pos:position pos:line="1563" pos:column="23"/></operator><name pos:line="1563" pos:column="23">flags<pos:position pos:line="1563" pos:column="28"/></name></name> <operator pos:line="1563" pos:column="29">&amp;<pos:position pos:line="1563" pos:column="34"/></operator> <name pos:line="1563" pos:column="31">PGRS_HIDE<pos:position pos:line="1563" pos:column="40"/></name><operator pos:line="1563" pos:column="40">)<pos:position pos:line="1563" pos:column="41"/></operator> <operator pos:line="1563" pos:column="42">&amp;&amp;<pos:position pos:line="1563" pos:column="52"/></operator>
     <operator pos:line="1564" pos:column="6">!<pos:position pos:line="1564" pos:column="7"/></operator><name><name pos:line="1564" pos:column="7">data<pos:position pos:line="1564" pos:column="11"/></name><operator pos:line="1564" pos:column="11">-&gt;<pos:position pos:line="1564" pos:column="16"/></operator><name pos:line="1564" pos:column="13">progress<pos:position pos:line="1564" pos:column="21"/></name><operator pos:line="1564" pos:column="21">.<pos:position pos:line="1564" pos:column="22"/></operator><name pos:line="1564" pos:column="22">callback<pos:position pos:line="1564" pos:column="30"/></name></name></expr>)<pos:position pos:line="1564" pos:column="31"/></condition><then pos:line="1564" pos:column="31">
    <comment type="block" pos:line="1565" pos:column="5">/* only output if we don't use a progress callback and we're not hidden */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="1566" pos:column="5">fprintf<pos:position pos:line="1566" pos:column="12"/></name><argument_list pos:line="1566" pos:column="12">(<argument><expr><name><name pos:line="1566" pos:column="13">data<pos:position pos:line="1566" pos:column="17"/></name><operator pos:line="1566" pos:column="17">-&gt;<pos:position pos:line="1566" pos:column="22"/></operator><name pos:line="1566" pos:column="19">set<pos:position pos:line="1566" pos:column="22"/></name><operator pos:line="1566" pos:column="22">.<pos:position pos:line="1566" pos:column="23"/></operator><name pos:line="1566" pos:column="23">err<pos:position pos:line="1566" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1566" pos:column="28">"\n"<pos:position pos:line="1566" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="1566" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1566" pos:column="34"/></expr_stmt></block></then></if>

  <return pos:line="1568" pos:column="3">return <expr><name pos:line="1568" pos:column="10">CURLE_OK<pos:position pos:line="1568" pos:column="18"/></name></expr>;<pos:position pos:line="1568" pos:column="19"/></return>
}<pos:position pos:line="1569" pos:column="2"/></block></function>

<comment type="block" pos:line="1571" pos:column="1">/*
 * strlen_url() returns the length of the given URL if the spaces within the
 * URL were properly URL encoded.
 */</comment>
<function><specifier pos:line="1575" pos:column="1">static<pos:position pos:line="1575" pos:column="7"/></specifier> <type><name pos:line="1575" pos:column="8">size_t<pos:position pos:line="1575" pos:column="14"/></name></type> <name pos:line="1575" pos:column="15">strlen_url<pos:position pos:line="1575" pos:column="25"/></name><parameter_list pos:line="1575" pos:column="25">(<parameter><decl><type><specifier pos:line="1575" pos:column="26">const<pos:position pos:line="1575" pos:column="31"/></specifier> <name pos:line="1575" pos:column="32">char<pos:position pos:line="1575" pos:column="36"/></name> <modifier pos:line="1575" pos:column="37">*<pos:position pos:line="1575" pos:column="38"/></modifier></type><name pos:line="1575" pos:column="38">url<pos:position pos:line="1575" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1575" pos:column="42"/></parameter_list>
<block pos:line="1576" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="1577" pos:column="3">const<pos:position pos:line="1577" pos:column="8"/></specifier> <name pos:line="1577" pos:column="9">char<pos:position pos:line="1577" pos:column="13"/></name> <modifier pos:line="1577" pos:column="14">*<pos:position pos:line="1577" pos:column="15"/></modifier></type><name pos:line="1577" pos:column="15">ptr<pos:position pos:line="1577" pos:column="18"/></name></decl>;<pos:position pos:line="1577" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1578" pos:column="3">size_t<pos:position pos:line="1578" pos:column="9"/></name></type> <name pos:line="1578" pos:column="10">newlen<pos:position pos:line="1578" pos:column="16"/></name><init pos:line="1578" pos:column="16">=<expr><literal type="number" pos:line="1578" pos:column="17">0<pos:position pos:line="1578" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="1578" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1579" pos:column="3">bool<pos:position pos:line="1579" pos:column="7"/></name></type> <name pos:line="1579" pos:column="8">left<pos:position pos:line="1579" pos:column="12"/></name><init pos:line="1579" pos:column="12">=<expr><name pos:line="1579" pos:column="13">TRUE<pos:position pos:line="1579" pos:column="17"/></name></expr></init></decl>;<pos:position pos:line="1579" pos:column="18"/></decl_stmt> <comment type="block" pos:line="1579" pos:column="19">/* left side of the ? */</comment>

  <for pos:line="1581" pos:column="3">for<control pos:line="1581" pos:column="6">(<init><expr><name pos:line="1581" pos:column="7">ptr<pos:position pos:line="1581" pos:column="10"/></name><operator pos:line="1581" pos:column="10">=<pos:position pos:line="1581" pos:column="11"/></operator><name pos:line="1581" pos:column="11">url<pos:position pos:line="1581" pos:column="14"/></name></expr>;<pos:position pos:line="1581" pos:column="15"/></init> <condition><expr><operator pos:line="1581" pos:column="16">*<pos:position pos:line="1581" pos:column="17"/></operator><name pos:line="1581" pos:column="17">ptr<pos:position pos:line="1581" pos:column="20"/></name></expr>;<pos:position pos:line="1581" pos:column="21"/></condition> <incr><expr><name pos:line="1581" pos:column="22">ptr<pos:position pos:line="1581" pos:column="25"/></name><operator pos:line="1581" pos:column="25">++<pos:position pos:line="1581" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="1581" pos:column="28"/></control> <block pos:line="1581" pos:column="29">{
    <switch pos:line="1582" pos:column="5">switch<condition pos:line="1582" pos:column="11">(<expr><operator pos:line="1582" pos:column="12">*<pos:position pos:line="1582" pos:column="13"/></operator><name pos:line="1582" pos:column="13">ptr<pos:position pos:line="1582" pos:column="16"/></name></expr>)<pos:position pos:line="1582" pos:column="17"/></condition> <block pos:line="1582" pos:column="18">{
    <case pos:line="1583" pos:column="5">case <expr><literal type="char" pos:line="1583" pos:column="10">'?'<pos:position pos:line="1583" pos:column="13"/></literal></expr>:<pos:position pos:line="1583" pos:column="14"/></case>
      <expr_stmt><expr><name pos:line="1584" pos:column="7">left<pos:position pos:line="1584" pos:column="11"/></name><operator pos:line="1584" pos:column="11">=<pos:position pos:line="1584" pos:column="12"/></operator><name pos:line="1584" pos:column="12">FALSE<pos:position pos:line="1584" pos:column="17"/></name></expr>;<pos:position pos:line="1584" pos:column="18"/></expr_stmt>
      <comment type="block" pos:line="1585" pos:column="7">/* fall through */</comment>
    <default pos:line="1586" pos:column="5">default:<pos:position pos:line="1586" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="1587" pos:column="7">newlen<pos:position pos:line="1587" pos:column="13"/></name><operator pos:line="1587" pos:column="13">++<pos:position pos:line="1587" pos:column="15"/></operator></expr>;<pos:position pos:line="1587" pos:column="16"/></expr_stmt>
      <break pos:line="1588" pos:column="7">break;<pos:position pos:line="1588" pos:column="13"/></break>
    <case pos:line="1589" pos:column="5">case <expr><literal type="char" pos:line="1589" pos:column="10">' '<pos:position pos:line="1589" pos:column="13"/></literal></expr>:<pos:position pos:line="1589" pos:column="14"/></case>
      <if pos:line="1590" pos:column="7">if<condition pos:line="1590" pos:column="9">(<expr><name pos:line="1590" pos:column="10">left<pos:position pos:line="1590" pos:column="14"/></name></expr>)<pos:position pos:line="1590" pos:column="15"/></condition><then pos:line="1590" pos:column="15">
        <block type="pseudo"><expr_stmt><expr><name pos:line="1591" pos:column="9">newlen<pos:position pos:line="1591" pos:column="15"/></name><operator pos:line="1591" pos:column="15">+=<pos:position pos:line="1591" pos:column="17"/></operator><literal type="number" pos:line="1591" pos:column="17">3<pos:position pos:line="1591" pos:column="18"/></literal></expr>;<pos:position pos:line="1591" pos:column="19"/></expr_stmt></block></then>
      <else pos:line="1592" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="1593" pos:column="9">newlen<pos:position pos:line="1593" pos:column="15"/></name><operator pos:line="1593" pos:column="15">++<pos:position pos:line="1593" pos:column="17"/></operator></expr>;<pos:position pos:line="1593" pos:column="18"/></expr_stmt></block></else></if>
      <break pos:line="1594" pos:column="7">break;<pos:position pos:line="1594" pos:column="13"/></break>
    }<pos:position pos:line="1595" pos:column="6"/></block></switch>
  }<pos:position pos:line="1596" pos:column="4"/></block></for>
  <return pos:line="1597" pos:column="3">return <expr><name pos:line="1597" pos:column="10">newlen<pos:position pos:line="1597" pos:column="16"/></name></expr>;<pos:position pos:line="1597" pos:column="17"/></return>
}<pos:position pos:line="1598" pos:column="2"/></block></function>

<comment type="block" pos:line="1600" pos:column="1">/* strcpy_url() copies a url to a output buffer and URL-encodes the spaces in
 * the source URL accordingly.
 */</comment>
<function><specifier pos:line="1603" pos:column="1">static<pos:position pos:line="1603" pos:column="7"/></specifier> <type><name pos:line="1603" pos:column="8">void<pos:position pos:line="1603" pos:column="12"/></name></type> <name pos:line="1603" pos:column="13">strcpy_url<pos:position pos:line="1603" pos:column="23"/></name><parameter_list pos:line="1603" pos:column="23">(<parameter><decl><type><name pos:line="1603" pos:column="24">char<pos:position pos:line="1603" pos:column="28"/></name> <modifier pos:line="1603" pos:column="29">*<pos:position pos:line="1603" pos:column="30"/></modifier></type><name pos:line="1603" pos:column="30">output<pos:position pos:line="1603" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1603" pos:column="38">const<pos:position pos:line="1603" pos:column="43"/></specifier> <name pos:line="1603" pos:column="44">char<pos:position pos:line="1603" pos:column="48"/></name> <modifier pos:line="1603" pos:column="49">*<pos:position pos:line="1603" pos:column="50"/></modifier></type><name pos:line="1603" pos:column="50">url<pos:position pos:line="1603" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1603" pos:column="54"/></parameter_list>
<block pos:line="1604" pos:column="1">{
  <comment type="block" pos:line="1605" pos:column="3">/* we must add this with whitespace-replacing */</comment>
  <decl_stmt><decl><type><name pos:line="1606" pos:column="3">bool<pos:position pos:line="1606" pos:column="7"/></name></type> <name pos:line="1606" pos:column="8">left<pos:position pos:line="1606" pos:column="12"/></name><init pos:line="1606" pos:column="12">=<expr><name pos:line="1606" pos:column="13">TRUE<pos:position pos:line="1606" pos:column="17"/></name></expr></init></decl>;<pos:position pos:line="1606" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="1607" pos:column="3">const<pos:position pos:line="1607" pos:column="8"/></specifier> <name pos:line="1607" pos:column="9">char<pos:position pos:line="1607" pos:column="13"/></name> <modifier pos:line="1607" pos:column="14">*<pos:position pos:line="1607" pos:column="15"/></modifier></type><name pos:line="1607" pos:column="15">iptr<pos:position pos:line="1607" pos:column="19"/></name></decl>;<pos:position pos:line="1607" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1608" pos:column="3">char<pos:position pos:line="1608" pos:column="7"/></name> <modifier pos:line="1608" pos:column="8">*<pos:position pos:line="1608" pos:column="9"/></modifier></type><name pos:line="1608" pos:column="9">optr<pos:position pos:line="1608" pos:column="13"/></name> <init pos:line="1608" pos:column="14">= <expr><name pos:line="1608" pos:column="16">output<pos:position pos:line="1608" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="1608" pos:column="23"/></decl_stmt>
  <for pos:line="1609" pos:column="3">for<control pos:line="1609" pos:column="6">(<init><expr><name pos:line="1609" pos:column="7">iptr<pos:position pos:line="1609" pos:column="11"/></name> <operator pos:line="1609" pos:column="12">=<pos:position pos:line="1609" pos:column="13"/></operator> <name pos:line="1609" pos:column="14">url<pos:position pos:line="1609" pos:column="17"/></name></expr>;<pos:position pos:line="1609" pos:column="18"/></init>    <comment type="block" pos:line="1609" pos:column="22">/* read from here */</comment>
      <condition><expr><operator pos:line="1610" pos:column="7">*<pos:position pos:line="1610" pos:column="8"/></operator><name pos:line="1610" pos:column="8">iptr<pos:position pos:line="1610" pos:column="12"/></name></expr>;<pos:position pos:line="1610" pos:column="13"/></condition>         <comment type="block" pos:line="1610" pos:column="22">/* until zero byte */</comment>
      <incr><expr><name pos:line="1611" pos:column="7">iptr<pos:position pos:line="1611" pos:column="11"/></name><operator pos:line="1611" pos:column="11">++<pos:position pos:line="1611" pos:column="13"/></operator></expr></incr>)<pos:position pos:line="1611" pos:column="14"/></control> <block pos:line="1611" pos:column="15">{
    <switch pos:line="1612" pos:column="5">switch<condition pos:line="1612" pos:column="11">(<expr><operator pos:line="1612" pos:column="12">*<pos:position pos:line="1612" pos:column="13"/></operator><name pos:line="1612" pos:column="13">iptr<pos:position pos:line="1612" pos:column="17"/></name></expr>)<pos:position pos:line="1612" pos:column="18"/></condition> <block pos:line="1612" pos:column="19">{
    <case pos:line="1613" pos:column="5">case <expr><literal type="char" pos:line="1613" pos:column="10">'?'<pos:position pos:line="1613" pos:column="13"/></literal></expr>:<pos:position pos:line="1613" pos:column="14"/></case>
      <expr_stmt><expr><name pos:line="1614" pos:column="7">left<pos:position pos:line="1614" pos:column="11"/></name><operator pos:line="1614" pos:column="11">=<pos:position pos:line="1614" pos:column="12"/></operator><name pos:line="1614" pos:column="12">FALSE<pos:position pos:line="1614" pos:column="17"/></name></expr>;<pos:position pos:line="1614" pos:column="18"/></expr_stmt>
      <comment type="block" pos:line="1615" pos:column="7">/* fall through */</comment>
    <default pos:line="1616" pos:column="5">default:<pos:position pos:line="1616" pos:column="13"/></default>
      <expr_stmt><expr><operator pos:line="1617" pos:column="7">*<pos:position pos:line="1617" pos:column="8"/></operator><name pos:line="1617" pos:column="8">optr<pos:position pos:line="1617" pos:column="12"/></name><operator pos:line="1617" pos:column="12">++<pos:position pos:line="1617" pos:column="14"/></operator><operator pos:line="1617" pos:column="14">=<pos:position pos:line="1617" pos:column="15"/></operator><operator pos:line="1617" pos:column="15">*<pos:position pos:line="1617" pos:column="16"/></operator><name pos:line="1617" pos:column="16">iptr<pos:position pos:line="1617" pos:column="20"/></name></expr>;<pos:position pos:line="1617" pos:column="21"/></expr_stmt>
      <break pos:line="1618" pos:column="7">break;<pos:position pos:line="1618" pos:column="13"/></break>
    <case pos:line="1619" pos:column="5">case <expr><literal type="char" pos:line="1619" pos:column="10">' '<pos:position pos:line="1619" pos:column="13"/></literal></expr>:<pos:position pos:line="1619" pos:column="14"/></case>
      <if pos:line="1620" pos:column="7">if<condition pos:line="1620" pos:column="9">(<expr><name pos:line="1620" pos:column="10">left<pos:position pos:line="1620" pos:column="14"/></name></expr>)<pos:position pos:line="1620" pos:column="15"/></condition><then pos:line="1620" pos:column="15"> <block pos:line="1620" pos:column="16">{
        <expr_stmt><expr><operator pos:line="1621" pos:column="9">*<pos:position pos:line="1621" pos:column="10"/></operator><name pos:line="1621" pos:column="10">optr<pos:position pos:line="1621" pos:column="14"/></name><operator pos:line="1621" pos:column="14">++<pos:position pos:line="1621" pos:column="16"/></operator><operator pos:line="1621" pos:column="16">=<pos:position pos:line="1621" pos:column="17"/></operator><literal type="char" pos:line="1621" pos:column="17">'%'<pos:position pos:line="1621" pos:column="20"/></literal></expr>;<pos:position pos:line="1621" pos:column="21"/></expr_stmt> <comment type="block" pos:line="1621" pos:column="22">/* add a '%' */</comment>
        <expr_stmt><expr><operator pos:line="1622" pos:column="9">*<pos:position pos:line="1622" pos:column="10"/></operator><name pos:line="1622" pos:column="10">optr<pos:position pos:line="1622" pos:column="14"/></name><operator pos:line="1622" pos:column="14">++<pos:position pos:line="1622" pos:column="16"/></operator><operator pos:line="1622" pos:column="16">=<pos:position pos:line="1622" pos:column="17"/></operator><literal type="char" pos:line="1622" pos:column="17">'2'<pos:position pos:line="1622" pos:column="20"/></literal></expr>;<pos:position pos:line="1622" pos:column="21"/></expr_stmt> <comment type="block" pos:line="1622" pos:column="22">/* add a '2' */</comment>
        <expr_stmt><expr><operator pos:line="1623" pos:column="9">*<pos:position pos:line="1623" pos:column="10"/></operator><name pos:line="1623" pos:column="10">optr<pos:position pos:line="1623" pos:column="14"/></name><operator pos:line="1623" pos:column="14">++<pos:position pos:line="1623" pos:column="16"/></operator><operator pos:line="1623" pos:column="16">=<pos:position pos:line="1623" pos:column="17"/></operator><literal type="char" pos:line="1623" pos:column="17">'0'<pos:position pos:line="1623" pos:column="20"/></literal></expr>;<pos:position pos:line="1623" pos:column="21"/></expr_stmt> <comment type="block" pos:line="1623" pos:column="22">/* add a '0' */</comment>
      }<pos:position pos:line="1624" pos:column="8"/></block></then>
      <else pos:line="1625" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><operator pos:line="1626" pos:column="9">*<pos:position pos:line="1626" pos:column="10"/></operator><name pos:line="1626" pos:column="10">optr<pos:position pos:line="1626" pos:column="14"/></name><operator pos:line="1626" pos:column="14">++<pos:position pos:line="1626" pos:column="16"/></operator><operator pos:line="1626" pos:column="16">=<pos:position pos:line="1626" pos:column="17"/></operator><literal type="char" pos:line="1626" pos:column="17">'+'<pos:position pos:line="1626" pos:column="20"/></literal></expr>;<pos:position pos:line="1626" pos:column="21"/></expr_stmt></block></else></if> <comment type="block" pos:line="1626" pos:column="22">/* add a '+' here */</comment>
      <break pos:line="1627" pos:column="7">break;<pos:position pos:line="1627" pos:column="13"/></break>
    }<pos:position pos:line="1628" pos:column="6"/></block></switch>
  }<pos:position pos:line="1629" pos:column="4"/></block></for>
  <expr_stmt><expr><operator pos:line="1630" pos:column="3">*<pos:position pos:line="1630" pos:column="4"/></operator><name pos:line="1630" pos:column="4">optr<pos:position pos:line="1630" pos:column="8"/></name><operator pos:line="1630" pos:column="8">=<pos:position pos:line="1630" pos:column="9"/></operator><literal type="number" pos:line="1630" pos:column="9">0<pos:position pos:line="1630" pos:column="10"/></literal></expr>;<pos:position pos:line="1630" pos:column="11"/></expr_stmt> <comment type="block" pos:line="1630" pos:column="12">/* zero terminate output buffer */</comment>

}<pos:position pos:line="1632" pos:column="2"/></block></function>

<comment type="block" pos:line="1634" pos:column="1">/*
 * Curl_follow() handles the URL redirect magic. Pass in the 'newurl' string
 * as given by the remote server and set up the new URL to request.
 */</comment>
<function><type><name pos:line="1638" pos:column="1">CURLcode<pos:position pos:line="1638" pos:column="9"/></name></type> <name pos:line="1638" pos:column="10">Curl_follow<pos:position pos:line="1638" pos:column="21"/></name><parameter_list pos:line="1638" pos:column="21">(<parameter><decl><type><name><name pos:line="1638" pos:column="22">struct<pos:position pos:line="1638" pos:column="28"/></name> <name pos:line="1638" pos:column="29">SessionHandle<pos:position pos:line="1638" pos:column="42"/></name></name> <modifier pos:line="1638" pos:column="43">*<pos:position pos:line="1638" pos:column="44"/></modifier></type><name pos:line="1638" pos:column="44">data<pos:position pos:line="1638" pos:column="48"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="1639" pos:column="22">char<pos:position pos:line="1639" pos:column="26"/></name> <modifier pos:line="1639" pos:column="27">*<pos:position pos:line="1639" pos:column="28"/></modifier></type><name pos:line="1639" pos:column="28">newurl<pos:position pos:line="1639" pos:column="34"/></name></decl></parameter>, <comment type="block" pos:line="1639" pos:column="36">/* this 'newurl' is the Location: string,
                                      and it must be malloc()ed before passed
                                      here */</comment>
                     <parameter><decl><type><name pos:line="1642" pos:column="22">bool<pos:position pos:line="1642" pos:column="26"/></name></type> <name pos:line="1642" pos:column="27">retry<pos:position pos:line="1642" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1642" pos:column="33"/></parameter_list> <comment type="block" pos:line="1642" pos:column="34">/* set TRUE if this is a request retry as
                                    opposed to a real redirect following */</comment>
<block pos:line="1644" pos:column="1">{
  <comment type="block" pos:line="1645" pos:column="3">/* Location: redirect */</comment>
  <decl_stmt><decl><type><name pos:line="1646" pos:column="3">char<pos:position pos:line="1646" pos:column="7"/></name></type> <name><name pos:line="1646" pos:column="8">prot<pos:position pos:line="1646" pos:column="12"/></name><index pos:line="1646" pos:column="12">[<expr><literal type="number" pos:line="1646" pos:column="13">16<pos:position pos:line="1646" pos:column="15"/></literal></expr>]<pos:position pos:line="1646" pos:column="16"/></index></name></decl>;<pos:position pos:line="1646" pos:column="17"/></decl_stmt> <comment type="block" pos:line="1646" pos:column="18">/* URL protocol string storage */</comment>
  <decl_stmt><decl><type><name pos:line="1647" pos:column="3">char<pos:position pos:line="1647" pos:column="7"/></name></type> <name pos:line="1647" pos:column="8">letter<pos:position pos:line="1647" pos:column="14"/></name></decl>;<pos:position pos:line="1647" pos:column="15"/></decl_stmt>   <comment type="block" pos:line="1647" pos:column="18">/* used for a silly sscanf */</comment>
  <decl_stmt><decl><type><name pos:line="1648" pos:column="3">size_t<pos:position pos:line="1648" pos:column="9"/></name></type> <name pos:line="1648" pos:column="10">newlen<pos:position pos:line="1648" pos:column="16"/></name></decl>;<pos:position pos:line="1648" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1649" pos:column="3">char<pos:position pos:line="1649" pos:column="7"/></name> <modifier pos:line="1649" pos:column="8">*<pos:position pos:line="1649" pos:column="9"/></modifier></type><name pos:line="1649" pos:column="9">newest<pos:position pos:line="1649" pos:column="15"/></name></decl>;<pos:position pos:line="1649" pos:column="16"/></decl_stmt>

  <if pos:line="1651" pos:column="3">if<condition pos:line="1651" pos:column="5">(<expr><operator pos:line="1651" pos:column="6">!<pos:position pos:line="1651" pos:column="7"/></operator><name pos:line="1651" pos:column="7">retry<pos:position pos:line="1651" pos:column="12"/></name></expr>)<pos:position pos:line="1651" pos:column="13"/></condition><then pos:line="1651" pos:column="13"> <block pos:line="1651" pos:column="14">{
    <if pos:line="1652" pos:column="5">if<condition pos:line="1652" pos:column="7">(<expr><operator pos:line="1652" pos:column="8">(<pos:position pos:line="1652" pos:column="9"/></operator><name><name pos:line="1652" pos:column="9">data<pos:position pos:line="1652" pos:column="13"/></name><operator pos:line="1652" pos:column="13">-&gt;<pos:position pos:line="1652" pos:column="18"/></operator><name pos:line="1652" pos:column="15">set<pos:position pos:line="1652" pos:column="18"/></name><operator pos:line="1652" pos:column="18">.<pos:position pos:line="1652" pos:column="19"/></operator><name pos:line="1652" pos:column="19">maxredirs<pos:position pos:line="1652" pos:column="28"/></name></name> <operator pos:line="1652" pos:column="29">!=<pos:position pos:line="1652" pos:column="31"/></operator> <operator pos:line="1652" pos:column="32">-<pos:position pos:line="1652" pos:column="33"/></operator><literal type="number" pos:line="1652" pos:column="33">1<pos:position pos:line="1652" pos:column="34"/></literal><operator pos:line="1652" pos:column="34">)<pos:position pos:line="1652" pos:column="35"/></operator> <operator pos:line="1652" pos:column="36">&amp;&amp;<pos:position pos:line="1652" pos:column="46"/></operator>
        <operator pos:line="1653" pos:column="9">(<pos:position pos:line="1653" pos:column="10"/></operator><name><name pos:line="1653" pos:column="10">data<pos:position pos:line="1653" pos:column="14"/></name><operator pos:line="1653" pos:column="14">-&gt;<pos:position pos:line="1653" pos:column="19"/></operator><name pos:line="1653" pos:column="16">set<pos:position pos:line="1653" pos:column="19"/></name><operator pos:line="1653" pos:column="19">.<pos:position pos:line="1653" pos:column="20"/></operator><name pos:line="1653" pos:column="20">followlocation<pos:position pos:line="1653" pos:column="34"/></name></name> <operator pos:line="1653" pos:column="35">&gt;=<pos:position pos:line="1653" pos:column="40"/></operator> <name><name pos:line="1653" pos:column="38">data<pos:position pos:line="1653" pos:column="42"/></name><operator pos:line="1653" pos:column="42">-&gt;<pos:position pos:line="1653" pos:column="47"/></operator><name pos:line="1653" pos:column="44">set<pos:position pos:line="1653" pos:column="47"/></name><operator pos:line="1653" pos:column="47">.<pos:position pos:line="1653" pos:column="48"/></operator><name pos:line="1653" pos:column="48">maxredirs<pos:position pos:line="1653" pos:column="57"/></name></name><operator pos:line="1653" pos:column="57">)<pos:position pos:line="1653" pos:column="58"/></operator></expr>)<pos:position pos:line="1653" pos:column="59"/></condition><then pos:line="1653" pos:column="59"> <block pos:line="1653" pos:column="60">{
      <expr_stmt><expr><call><name pos:line="1654" pos:column="7">failf<pos:position pos:line="1654" pos:column="12"/></name><argument_list pos:line="1654" pos:column="12">(<argument><expr><name pos:line="1654" pos:column="13">data<pos:position pos:line="1654" pos:column="17"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="1654" pos:column="18">"Maximum (%d) redirects followed"<pos:position pos:line="1654" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="1654" pos:column="53">data<pos:position pos:line="1654" pos:column="57"/></name><operator pos:line="1654" pos:column="57">-&gt;<pos:position pos:line="1654" pos:column="62"/></operator><name pos:line="1654" pos:column="59">set<pos:position pos:line="1654" pos:column="62"/></name><operator pos:line="1654" pos:column="62">.<pos:position pos:line="1654" pos:column="63"/></operator><name pos:line="1654" pos:column="63">maxredirs<pos:position pos:line="1654" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="1654" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="1654" pos:column="74"/></expr_stmt>
      <return pos:line="1655" pos:column="7">return <expr><name pos:line="1655" pos:column="14">CURLE_TOO_MANY_REDIRECTS<pos:position pos:line="1655" pos:column="38"/></name></expr>;<pos:position pos:line="1655" pos:column="39"/></return>
    }<pos:position pos:line="1656" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="1658" pos:column="5">/* mark the next request as a followed location: */</comment>
    <expr_stmt><expr><name><name pos:line="1659" pos:column="5">data<pos:position pos:line="1659" pos:column="9"/></name><operator pos:line="1659" pos:column="9">-&gt;<pos:position pos:line="1659" pos:column="14"/></operator><name pos:line="1659" pos:column="11">state<pos:position pos:line="1659" pos:column="16"/></name><operator pos:line="1659" pos:column="16">.<pos:position pos:line="1659" pos:column="17"/></operator><name pos:line="1659" pos:column="17">this_is_a_follow<pos:position pos:line="1659" pos:column="33"/></name></name> <operator pos:line="1659" pos:column="34">=<pos:position pos:line="1659" pos:column="35"/></operator> <name pos:line="1659" pos:column="36">TRUE<pos:position pos:line="1659" pos:column="40"/></name></expr>;<pos:position pos:line="1659" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="1661" pos:column="5">data<pos:position pos:line="1661" pos:column="9"/></name><operator pos:line="1661" pos:column="9">-&gt;<pos:position pos:line="1661" pos:column="14"/></operator><name pos:line="1661" pos:column="11">set<pos:position pos:line="1661" pos:column="14"/></name><operator pos:line="1661" pos:column="14">.<pos:position pos:line="1661" pos:column="15"/></operator><name pos:line="1661" pos:column="15">followlocation<pos:position pos:line="1661" pos:column="29"/></name></name><operator pos:line="1661" pos:column="29">++<pos:position pos:line="1661" pos:column="31"/></operator></expr>;<pos:position pos:line="1661" pos:column="32"/></expr_stmt> <comment type="block" pos:line="1661" pos:column="33">/* count location-followers */</comment>
  }<pos:position pos:line="1662" pos:column="4"/></block></then></if>

  <if pos:line="1664" pos:column="3">if<condition pos:line="1664" pos:column="5">(<expr><name><name pos:line="1664" pos:column="6">data<pos:position pos:line="1664" pos:column="10"/></name><operator pos:line="1664" pos:column="10">-&gt;<pos:position pos:line="1664" pos:column="15"/></operator><name pos:line="1664" pos:column="12">set<pos:position pos:line="1664" pos:column="15"/></name><operator pos:line="1664" pos:column="15">.<pos:position pos:line="1664" pos:column="16"/></operator><name pos:line="1664" pos:column="16">http_auto_referer<pos:position pos:line="1664" pos:column="33"/></name></name></expr>)<pos:position pos:line="1664" pos:column="34"/></condition><then pos:line="1664" pos:column="34"> <block pos:line="1664" pos:column="35">{
    <comment type="block" pos:line="1665" pos:column="5">/* We are asked to automatically set the previous URL as the
       referer when we get the next URL. We pick the -&gt;url field,
       which may or may not be 100% correct */</comment>

    <if pos:line="1669" pos:column="5">if<condition pos:line="1669" pos:column="7">(<expr><name><name pos:line="1669" pos:column="8">data<pos:position pos:line="1669" pos:column="12"/></name><operator pos:line="1669" pos:column="12">-&gt;<pos:position pos:line="1669" pos:column="17"/></operator><name pos:line="1669" pos:column="14">change<pos:position pos:line="1669" pos:column="20"/></name><operator pos:line="1669" pos:column="20">.<pos:position pos:line="1669" pos:column="21"/></operator><name pos:line="1669" pos:column="21">referer_alloc<pos:position pos:line="1669" pos:column="34"/></name></name></expr>)<pos:position pos:line="1669" pos:column="35"/></condition><then pos:line="1669" pos:column="35">
      <comment type="block" pos:line="1670" pos:column="7">/* If we already have an allocated referer, free this first */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="1671" pos:column="7">free<pos:position pos:line="1671" pos:column="11"/></name><argument_list pos:line="1671" pos:column="11">(<argument><expr><name><name pos:line="1671" pos:column="12">data<pos:position pos:line="1671" pos:column="16"/></name><operator pos:line="1671" pos:column="16">-&gt;<pos:position pos:line="1671" pos:column="21"/></operator><name pos:line="1671" pos:column="18">change<pos:position pos:line="1671" pos:column="24"/></name><operator pos:line="1671" pos:column="24">.<pos:position pos:line="1671" pos:column="25"/></operator><name pos:line="1671" pos:column="25">referer<pos:position pos:line="1671" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="1671" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1671" pos:column="34"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="1673" pos:column="5">data<pos:position pos:line="1673" pos:column="9"/></name><operator pos:line="1673" pos:column="9">-&gt;<pos:position pos:line="1673" pos:column="14"/></operator><name pos:line="1673" pos:column="11">change<pos:position pos:line="1673" pos:column="17"/></name><operator pos:line="1673" pos:column="17">.<pos:position pos:line="1673" pos:column="18"/></operator><name pos:line="1673" pos:column="18">referer<pos:position pos:line="1673" pos:column="25"/></name></name> <operator pos:line="1673" pos:column="26">=<pos:position pos:line="1673" pos:column="27"/></operator> <call><name pos:line="1673" pos:column="28">strdup<pos:position pos:line="1673" pos:column="34"/></name><argument_list pos:line="1673" pos:column="34">(<argument><expr><name><name pos:line="1673" pos:column="35">data<pos:position pos:line="1673" pos:column="39"/></name><operator pos:line="1673" pos:column="39">-&gt;<pos:position pos:line="1673" pos:column="44"/></operator><name pos:line="1673" pos:column="41">change<pos:position pos:line="1673" pos:column="47"/></name><operator pos:line="1673" pos:column="47">.<pos:position pos:line="1673" pos:column="48"/></operator><name pos:line="1673" pos:column="48">url<pos:position pos:line="1673" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="1673" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="1673" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1674" pos:column="5">data<pos:position pos:line="1674" pos:column="9"/></name><operator pos:line="1674" pos:column="9">-&gt;<pos:position pos:line="1674" pos:column="14"/></operator><name pos:line="1674" pos:column="11">change<pos:position pos:line="1674" pos:column="17"/></name><operator pos:line="1674" pos:column="17">.<pos:position pos:line="1674" pos:column="18"/></operator><name pos:line="1674" pos:column="18">referer_alloc<pos:position pos:line="1674" pos:column="31"/></name></name> <operator pos:line="1674" pos:column="32">=<pos:position pos:line="1674" pos:column="33"/></operator> <name pos:line="1674" pos:column="34">TRUE<pos:position pos:line="1674" pos:column="38"/></name></expr>;<pos:position pos:line="1674" pos:column="39"/></expr_stmt> <comment type="block" pos:line="1674" pos:column="40">/* yes, free this later */</comment>
  }<pos:position pos:line="1675" pos:column="4"/></block></then></if>

  <if pos:line="1677" pos:column="3">if<condition pos:line="1677" pos:column="5">(<expr><literal type="number" pos:line="1677" pos:column="6">2<pos:position pos:line="1677" pos:column="7"/></literal> <operator pos:line="1677" pos:column="8">!=<pos:position pos:line="1677" pos:column="10"/></operator> <call><name pos:line="1677" pos:column="11">sscanf<pos:position pos:line="1677" pos:column="17"/></name><argument_list pos:line="1677" pos:column="17">(<argument><expr><name pos:line="1677" pos:column="18">newurl<pos:position pos:line="1677" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1677" pos:column="26">"%15[^?&amp;/:]://%c"<pos:position pos:line="1677" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="1677" pos:column="45">prot<pos:position pos:line="1677" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="1677" pos:column="51">&amp;<pos:position pos:line="1677" pos:column="56"/></operator><name pos:line="1677" pos:column="52">letter<pos:position pos:line="1677" pos:column="58"/></name></expr></argument>)<pos:position pos:line="1677" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="1677" pos:column="60"/></condition><then pos:line="1677" pos:column="60"> <block pos:line="1677" pos:column="61">{
    <comment type="block" format="doxygen" pos:line="1678" pos:column="5">/***
     *DANG* this is an RFC 2068 violation. The URL is supposed
     to be absolute and this doesn't seem to be that!
     ***
     Instead, we have to TRY to append this new path to the old URL
     to the right of the host part. Oh crap, this is doomed to cause
     problems in the future...
    */</comment>
    <decl_stmt><decl><type><name pos:line="1686" pos:column="5">char<pos:position pos:line="1686" pos:column="9"/></name> <modifier pos:line="1686" pos:column="10">*<pos:position pos:line="1686" pos:column="11"/></modifier></type><name pos:line="1686" pos:column="11">protsep<pos:position pos:line="1686" pos:column="18"/></name></decl>;<pos:position pos:line="1686" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="1687" pos:column="5">char<pos:position pos:line="1687" pos:column="9"/></name> <modifier pos:line="1687" pos:column="10">*<pos:position pos:line="1687" pos:column="11"/></modifier></type><name pos:line="1687" pos:column="11">pathsep<pos:position pos:line="1687" pos:column="18"/></name></decl>;<pos:position pos:line="1687" pos:column="19"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="1689" pos:column="5">char<pos:position pos:line="1689" pos:column="9"/></name> <modifier pos:line="1689" pos:column="10">*<pos:position pos:line="1689" pos:column="11"/></modifier></type><name pos:line="1689" pos:column="11">useurl<pos:position pos:line="1689" pos:column="17"/></name> <init pos:line="1689" pos:column="18">= <expr><name pos:line="1689" pos:column="20">newurl<pos:position pos:line="1689" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="1689" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="1690" pos:column="5">size_t<pos:position pos:line="1690" pos:column="11"/></name></type> <name pos:line="1690" pos:column="12">urllen<pos:position pos:line="1690" pos:column="18"/></name></decl>;<pos:position pos:line="1690" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="1692" pos:column="5">/* we must make our own copy of the URL to play with, as it may
       point to read-only data */</comment>
    <decl_stmt><decl><type><name pos:line="1694" pos:column="5">char<pos:position pos:line="1694" pos:column="9"/></name> <modifier pos:line="1694" pos:column="10">*<pos:position pos:line="1694" pos:column="11"/></modifier></type><name pos:line="1694" pos:column="11">url_clone<pos:position pos:line="1694" pos:column="20"/></name><init pos:line="1694" pos:column="20">=<expr><call><name pos:line="1694" pos:column="21">strdup<pos:position pos:line="1694" pos:column="27"/></name><argument_list pos:line="1694" pos:column="27">(<argument><expr><name><name pos:line="1694" pos:column="28">data<pos:position pos:line="1694" pos:column="32"/></name><operator pos:line="1694" pos:column="32">-&gt;<pos:position pos:line="1694" pos:column="37"/></operator><name pos:line="1694" pos:column="34">change<pos:position pos:line="1694" pos:column="40"/></name><operator pos:line="1694" pos:column="40">.<pos:position pos:line="1694" pos:column="41"/></operator><name pos:line="1694" pos:column="41">url<pos:position pos:line="1694" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="1694" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1694" pos:column="46"/></decl_stmt>

    <if pos:line="1696" pos:column="5">if<condition pos:line="1696" pos:column="7">(<expr><operator pos:line="1696" pos:column="8">!<pos:position pos:line="1696" pos:column="9"/></operator><name pos:line="1696" pos:column="9">url_clone<pos:position pos:line="1696" pos:column="18"/></name></expr>)<pos:position pos:line="1696" pos:column="19"/></condition><then pos:line="1696" pos:column="19">
      <block type="pseudo"><return pos:line="1697" pos:column="7">return <expr><name pos:line="1697" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="1697" pos:column="33"/></name></expr>;<pos:position pos:line="1697" pos:column="34"/></return></block></then></if> <comment type="block" pos:line="1697" pos:column="35">/* skip out of this NOW */</comment>

    <comment type="block" pos:line="1699" pos:column="5">/* protsep points to the start of the host name */</comment>
    <expr_stmt><expr><name pos:line="1700" pos:column="5">protsep<pos:position pos:line="1700" pos:column="12"/></name><operator pos:line="1700" pos:column="12">=<pos:position pos:line="1700" pos:column="13"/></operator><call><name pos:line="1700" pos:column="13">strstr<pos:position pos:line="1700" pos:column="19"/></name><argument_list pos:line="1700" pos:column="19">(<argument><expr><name pos:line="1700" pos:column="20">url_clone<pos:position pos:line="1700" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1700" pos:column="31">"//"<pos:position pos:line="1700" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="1700" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1700" pos:column="37"/></expr_stmt>
    <if pos:line="1701" pos:column="5">if<condition pos:line="1701" pos:column="7">(<expr><operator pos:line="1701" pos:column="8">!<pos:position pos:line="1701" pos:column="9"/></operator><name pos:line="1701" pos:column="9">protsep<pos:position pos:line="1701" pos:column="16"/></name></expr>)<pos:position pos:line="1701" pos:column="17"/></condition><then pos:line="1701" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><name pos:line="1702" pos:column="7">protsep<pos:position pos:line="1702" pos:column="14"/></name><operator pos:line="1702" pos:column="14">=<pos:position pos:line="1702" pos:column="15"/></operator><name pos:line="1702" pos:column="15">url_clone<pos:position pos:line="1702" pos:column="24"/></name></expr>;<pos:position pos:line="1702" pos:column="25"/></expr_stmt></block></then>
    <else pos:line="1703" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="1704" pos:column="7">protsep<pos:position pos:line="1704" pos:column="14"/></name><operator pos:line="1704" pos:column="14">+=<pos:position pos:line="1704" pos:column="16"/></operator><literal type="number" pos:line="1704" pos:column="16">2<pos:position pos:line="1704" pos:column="17"/></literal></expr>;<pos:position pos:line="1704" pos:column="18"/></expr_stmt></block></else></if> <comment type="block" pos:line="1704" pos:column="19">/* pass the slashes */</comment>

    <if pos:line="1706" pos:column="5">if<condition pos:line="1706" pos:column="7">(<expr><literal type="char" pos:line="1706" pos:column="8">'/'<pos:position pos:line="1706" pos:column="11"/></literal> <operator pos:line="1706" pos:column="12">!=<pos:position pos:line="1706" pos:column="14"/></operator> <name><name pos:line="1706" pos:column="15">newurl<pos:position pos:line="1706" pos:column="21"/></name><index pos:line="1706" pos:column="21">[<expr><literal type="number" pos:line="1706" pos:column="22">0<pos:position pos:line="1706" pos:column="23"/></literal></expr>]<pos:position pos:line="1706" pos:column="24"/></index></name></expr>)<pos:position pos:line="1706" pos:column="25"/></condition><then pos:line="1706" pos:column="25"> <block pos:line="1706" pos:column="26">{
      <decl_stmt><decl><type><name pos:line="1707" pos:column="7">int<pos:position pos:line="1707" pos:column="10"/></name></type> <name pos:line="1707" pos:column="11">level<pos:position pos:line="1707" pos:column="16"/></name><init pos:line="1707" pos:column="16">=<expr><literal type="number" pos:line="1707" pos:column="17">0<pos:position pos:line="1707" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="1707" pos:column="19"/></decl_stmt>

      <comment type="block" pos:line="1709" pos:column="7">/* First we need to find out if there's a ?-letter in the URL,
         and cut it and the right-side of that off */</comment>
      <expr_stmt><expr><name pos:line="1711" pos:column="7">pathsep<pos:position pos:line="1711" pos:column="14"/></name> <operator pos:line="1711" pos:column="15">=<pos:position pos:line="1711" pos:column="16"/></operator> <call><name pos:line="1711" pos:column="17">strchr<pos:position pos:line="1711" pos:column="23"/></name><argument_list pos:line="1711" pos:column="23">(<argument><expr><name pos:line="1711" pos:column="24">protsep<pos:position pos:line="1711" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1711" pos:column="33">'?'<pos:position pos:line="1711" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="1711" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1711" pos:column="38"/></expr_stmt>
      <if pos:line="1712" pos:column="7">if<condition pos:line="1712" pos:column="9">(<expr><name pos:line="1712" pos:column="10">pathsep<pos:position pos:line="1712" pos:column="17"/></name></expr>)<pos:position pos:line="1712" pos:column="18"/></condition><then pos:line="1712" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="1713" pos:column="9">*<pos:position pos:line="1713" pos:column="10"/></operator><name pos:line="1713" pos:column="10">pathsep<pos:position pos:line="1713" pos:column="17"/></name><operator pos:line="1713" pos:column="17">=<pos:position pos:line="1713" pos:column="18"/></operator><literal type="number" pos:line="1713" pos:column="18">0<pos:position pos:line="1713" pos:column="19"/></literal></expr>;<pos:position pos:line="1713" pos:column="20"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="1715" pos:column="7">/* we have a relative path to append to the last slash if
         there's one available */</comment>
      <expr_stmt><expr><name pos:line="1717" pos:column="7">pathsep<pos:position pos:line="1717" pos:column="14"/></name> <operator pos:line="1717" pos:column="15">=<pos:position pos:line="1717" pos:column="16"/></operator> <call><name pos:line="1717" pos:column="17">strrchr<pos:position pos:line="1717" pos:column="24"/></name><argument_list pos:line="1717" pos:column="24">(<argument><expr><name pos:line="1717" pos:column="25">protsep<pos:position pos:line="1717" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1717" pos:column="34">'/'<pos:position pos:line="1717" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="1717" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1717" pos:column="39"/></expr_stmt>
      <if pos:line="1718" pos:column="7">if<condition pos:line="1718" pos:column="9">(<expr><name pos:line="1718" pos:column="10">pathsep<pos:position pos:line="1718" pos:column="17"/></name></expr>)<pos:position pos:line="1718" pos:column="18"/></condition><then pos:line="1718" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="1719" pos:column="9">*<pos:position pos:line="1719" pos:column="10"/></operator><name pos:line="1719" pos:column="10">pathsep<pos:position pos:line="1719" pos:column="17"/></name><operator pos:line="1719" pos:column="17">=<pos:position pos:line="1719" pos:column="18"/></operator><literal type="number" pos:line="1719" pos:column="18">0<pos:position pos:line="1719" pos:column="19"/></literal></expr>;<pos:position pos:line="1719" pos:column="20"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="1721" pos:column="7">/* Check if there's any slash after the host name, and if so,
         remember that position instead */</comment>
      <expr_stmt><expr><name pos:line="1723" pos:column="7">pathsep<pos:position pos:line="1723" pos:column="14"/></name> <operator pos:line="1723" pos:column="15">=<pos:position pos:line="1723" pos:column="16"/></operator> <call><name pos:line="1723" pos:column="17">strchr<pos:position pos:line="1723" pos:column="23"/></name><argument_list pos:line="1723" pos:column="23">(<argument><expr><name pos:line="1723" pos:column="24">protsep<pos:position pos:line="1723" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1723" pos:column="33">'/'<pos:position pos:line="1723" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="1723" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1723" pos:column="38"/></expr_stmt>
      <if pos:line="1724" pos:column="7">if<condition pos:line="1724" pos:column="9">(<expr><name pos:line="1724" pos:column="10">pathsep<pos:position pos:line="1724" pos:column="17"/></name></expr>)<pos:position pos:line="1724" pos:column="18"/></condition><then pos:line="1724" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="1725" pos:column="9">protsep<pos:position pos:line="1725" pos:column="16"/></name> <operator pos:line="1725" pos:column="17">=<pos:position pos:line="1725" pos:column="18"/></operator> <name pos:line="1725" pos:column="19">pathsep<pos:position pos:line="1725" pos:column="26"/></name><operator pos:line="1725" pos:column="26">+<pos:position pos:line="1725" pos:column="27"/></operator><literal type="number" pos:line="1725" pos:column="27">1<pos:position pos:line="1725" pos:column="28"/></literal></expr>;<pos:position pos:line="1725" pos:column="29"/></expr_stmt></block></then>
      <else pos:line="1726" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="1727" pos:column="9">protsep<pos:position pos:line="1727" pos:column="16"/></name> <operator pos:line="1727" pos:column="17">=<pos:position pos:line="1727" pos:column="18"/></operator> <name pos:line="1727" pos:column="19">NULL<pos:position pos:line="1727" pos:column="23"/></name></expr>;<pos:position pos:line="1727" pos:column="24"/></expr_stmt></block></else></if>

      <comment type="block" pos:line="1729" pos:column="7">/* now deal with one "./" or any amount of "../" in the newurl
         and act accordingly */</comment>

      <if pos:line="1732" pos:column="7">if<condition pos:line="1732" pos:column="9">(<expr><operator pos:line="1732" pos:column="10">(<pos:position pos:line="1732" pos:column="11"/></operator><name><name pos:line="1732" pos:column="11">useurl<pos:position pos:line="1732" pos:column="17"/></name><index pos:line="1732" pos:column="17">[<expr><literal type="number" pos:line="1732" pos:column="18">0<pos:position pos:line="1732" pos:column="19"/></literal></expr>]<pos:position pos:line="1732" pos:column="20"/></index></name> <operator pos:line="1732" pos:column="21">==<pos:position pos:line="1732" pos:column="23"/></operator> <literal type="char" pos:line="1732" pos:column="24">'.'<pos:position pos:line="1732" pos:column="27"/></literal><operator pos:line="1732" pos:column="27">)<pos:position pos:line="1732" pos:column="28"/></operator> <operator pos:line="1732" pos:column="29">&amp;&amp;<pos:position pos:line="1732" pos:column="39"/></operator> <operator pos:line="1732" pos:column="32">(<pos:position pos:line="1732" pos:column="33"/></operator><name><name pos:line="1732" pos:column="33">useurl<pos:position pos:line="1732" pos:column="39"/></name><index pos:line="1732" pos:column="39">[<expr><literal type="number" pos:line="1732" pos:column="40">1<pos:position pos:line="1732" pos:column="41"/></literal></expr>]<pos:position pos:line="1732" pos:column="42"/></index></name> <operator pos:line="1732" pos:column="43">==<pos:position pos:line="1732" pos:column="45"/></operator> <literal type="char" pos:line="1732" pos:column="46">'/'<pos:position pos:line="1732" pos:column="49"/></literal><operator pos:line="1732" pos:column="49">)<pos:position pos:line="1732" pos:column="50"/></operator></expr>)<pos:position pos:line="1732" pos:column="51"/></condition><then pos:line="1732" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name pos:line="1733" pos:column="9">useurl<pos:position pos:line="1733" pos:column="15"/></name><operator pos:line="1733" pos:column="15">+=<pos:position pos:line="1733" pos:column="17"/></operator><literal type="number" pos:line="1733" pos:column="17">2<pos:position pos:line="1733" pos:column="18"/></literal></expr>;<pos:position pos:line="1733" pos:column="19"/></expr_stmt></block></then></if> <comment type="block" pos:line="1733" pos:column="20">/* just skip the "./" */</comment>

      <while pos:line="1735" pos:column="7">while<condition pos:line="1735" pos:column="12">(<expr><operator pos:line="1735" pos:column="13">(<pos:position pos:line="1735" pos:column="14"/></operator><name><name pos:line="1735" pos:column="14">useurl<pos:position pos:line="1735" pos:column="20"/></name><index pos:line="1735" pos:column="20">[<expr><literal type="number" pos:line="1735" pos:column="21">0<pos:position pos:line="1735" pos:column="22"/></literal></expr>]<pos:position pos:line="1735" pos:column="23"/></index></name> <operator pos:line="1735" pos:column="24">==<pos:position pos:line="1735" pos:column="26"/></operator> <literal type="char" pos:line="1735" pos:column="27">'.'<pos:position pos:line="1735" pos:column="30"/></literal><operator pos:line="1735" pos:column="30">)<pos:position pos:line="1735" pos:column="31"/></operator> <operator pos:line="1735" pos:column="32">&amp;&amp;<pos:position pos:line="1735" pos:column="42"/></operator>
            <operator pos:line="1736" pos:column="13">(<pos:position pos:line="1736" pos:column="14"/></operator><name><name pos:line="1736" pos:column="14">useurl<pos:position pos:line="1736" pos:column="20"/></name><index pos:line="1736" pos:column="20">[<expr><literal type="number" pos:line="1736" pos:column="21">1<pos:position pos:line="1736" pos:column="22"/></literal></expr>]<pos:position pos:line="1736" pos:column="23"/></index></name> <operator pos:line="1736" pos:column="24">==<pos:position pos:line="1736" pos:column="26"/></operator> <literal type="char" pos:line="1736" pos:column="27">'.'<pos:position pos:line="1736" pos:column="30"/></literal><operator pos:line="1736" pos:column="30">)<pos:position pos:line="1736" pos:column="31"/></operator> <operator pos:line="1736" pos:column="32">&amp;&amp;<pos:position pos:line="1736" pos:column="42"/></operator>
            <operator pos:line="1737" pos:column="13">(<pos:position pos:line="1737" pos:column="14"/></operator><name><name pos:line="1737" pos:column="14">useurl<pos:position pos:line="1737" pos:column="20"/></name><index pos:line="1737" pos:column="20">[<expr><literal type="number" pos:line="1737" pos:column="21">2<pos:position pos:line="1737" pos:column="22"/></literal></expr>]<pos:position pos:line="1737" pos:column="23"/></index></name> <operator pos:line="1737" pos:column="24">==<pos:position pos:line="1737" pos:column="26"/></operator> <literal type="char" pos:line="1737" pos:column="27">'/'<pos:position pos:line="1737" pos:column="30"/></literal><operator pos:line="1737" pos:column="30">)<pos:position pos:line="1737" pos:column="31"/></operator></expr>)<pos:position pos:line="1737" pos:column="32"/></condition> <block pos:line="1737" pos:column="33">{
        <expr_stmt><expr><name pos:line="1738" pos:column="9">level<pos:position pos:line="1738" pos:column="14"/></name><operator pos:line="1738" pos:column="14">++<pos:position pos:line="1738" pos:column="16"/></operator></expr>;<pos:position pos:line="1738" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1739" pos:column="9">useurl<pos:position pos:line="1739" pos:column="15"/></name><operator pos:line="1739" pos:column="15">+=<pos:position pos:line="1739" pos:column="17"/></operator><literal type="number" pos:line="1739" pos:column="17">3<pos:position pos:line="1739" pos:column="18"/></literal></expr>;<pos:position pos:line="1739" pos:column="19"/></expr_stmt> <comment type="block" pos:line="1739" pos:column="20">/* pass the "../" */</comment>
      }<pos:position pos:line="1740" pos:column="8"/></block></while>

      <if pos:line="1742" pos:column="7">if<condition pos:line="1742" pos:column="9">(<expr><name pos:line="1742" pos:column="10">protsep<pos:position pos:line="1742" pos:column="17"/></name></expr>)<pos:position pos:line="1742" pos:column="18"/></condition><then pos:line="1742" pos:column="18"> <block pos:line="1742" pos:column="19">{
        <while pos:line="1743" pos:column="9">while<condition pos:line="1743" pos:column="14">(<expr><name pos:line="1743" pos:column="15">level<pos:position pos:line="1743" pos:column="20"/></name><operator pos:line="1743" pos:column="20">--<pos:position pos:line="1743" pos:column="22"/></operator></expr>)<pos:position pos:line="1743" pos:column="23"/></condition> <block pos:line="1743" pos:column="24">{
          <comment type="block" pos:line="1744" pos:column="11">/* cut off one more level from the right of the original URL */</comment>
          <expr_stmt><expr><name pos:line="1745" pos:column="11">pathsep<pos:position pos:line="1745" pos:column="18"/></name> <operator pos:line="1745" pos:column="19">=<pos:position pos:line="1745" pos:column="20"/></operator> <call><name pos:line="1745" pos:column="21">strrchr<pos:position pos:line="1745" pos:column="28"/></name><argument_list pos:line="1745" pos:column="28">(<argument><expr><name pos:line="1745" pos:column="29">protsep<pos:position pos:line="1745" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1745" pos:column="38">'/'<pos:position pos:line="1745" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="1745" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1745" pos:column="43"/></expr_stmt>
          <if pos:line="1746" pos:column="11">if<condition pos:line="1746" pos:column="13">(<expr><name pos:line="1746" pos:column="14">pathsep<pos:position pos:line="1746" pos:column="21"/></name></expr>)<pos:position pos:line="1746" pos:column="22"/></condition><then pos:line="1746" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="1747" pos:column="13">*<pos:position pos:line="1747" pos:column="14"/></operator><name pos:line="1747" pos:column="14">pathsep<pos:position pos:line="1747" pos:column="21"/></name><operator pos:line="1747" pos:column="21">=<pos:position pos:line="1747" pos:column="22"/></operator><literal type="number" pos:line="1747" pos:column="22">0<pos:position pos:line="1747" pos:column="23"/></literal></expr>;<pos:position pos:line="1747" pos:column="24"/></expr_stmt></block></then>
          <else pos:line="1748" pos:column="11">else <block pos:line="1748" pos:column="16">{
            <expr_stmt><expr><operator pos:line="1749" pos:column="13">*<pos:position pos:line="1749" pos:column="14"/></operator><name pos:line="1749" pos:column="14">protsep<pos:position pos:line="1749" pos:column="21"/></name><operator pos:line="1749" pos:column="21">=<pos:position pos:line="1749" pos:column="22"/></operator><literal type="number" pos:line="1749" pos:column="22">0<pos:position pos:line="1749" pos:column="23"/></literal></expr>;<pos:position pos:line="1749" pos:column="24"/></expr_stmt>
            <break pos:line="1750" pos:column="13">break;<pos:position pos:line="1750" pos:column="19"/></break>
          }<pos:position pos:line="1751" pos:column="12"/></block></else></if>
        }<pos:position pos:line="1752" pos:column="10"/></block></while>
      }<pos:position pos:line="1753" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1754" pos:column="6"/></block></then>
    <else pos:line="1755" pos:column="5">else <block pos:line="1755" pos:column="10">{
      <comment type="block" pos:line="1756" pos:column="7">/* We got a new absolute path for this server, cut off from the
         first slash */</comment>
      <expr_stmt><expr><name pos:line="1758" pos:column="7">pathsep<pos:position pos:line="1758" pos:column="14"/></name> <operator pos:line="1758" pos:column="15">=<pos:position pos:line="1758" pos:column="16"/></operator> <call><name pos:line="1758" pos:column="17">strchr<pos:position pos:line="1758" pos:column="23"/></name><argument_list pos:line="1758" pos:column="23">(<argument><expr><name pos:line="1758" pos:column="24">protsep<pos:position pos:line="1758" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1758" pos:column="33">'/'<pos:position pos:line="1758" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="1758" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1758" pos:column="38"/></expr_stmt>
      <if pos:line="1759" pos:column="7">if<condition pos:line="1759" pos:column="9">(<expr><name pos:line="1759" pos:column="10">pathsep<pos:position pos:line="1759" pos:column="17"/></name></expr>)<pos:position pos:line="1759" pos:column="18"/></condition><then pos:line="1759" pos:column="18"> <block pos:line="1759" pos:column="19">{
        <comment type="block" pos:line="1760" pos:column="9">/* When people use badly formatted URLs, such as
           "http://www.url.com?dir=/home/daniel" we must not use the first
           slash, if there's a ?-letter before it! */</comment>
        <decl_stmt><decl><type><name pos:line="1763" pos:column="9">char<pos:position pos:line="1763" pos:column="13"/></name> <modifier pos:line="1763" pos:column="14">*<pos:position pos:line="1763" pos:column="15"/></modifier></type><name pos:line="1763" pos:column="15">sep<pos:position pos:line="1763" pos:column="18"/></name> <init pos:line="1763" pos:column="19">= <expr><call><name pos:line="1763" pos:column="21">strchr<pos:position pos:line="1763" pos:column="27"/></name><argument_list pos:line="1763" pos:column="27">(<argument><expr><name pos:line="1763" pos:column="28">protsep<pos:position pos:line="1763" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1763" pos:column="37">'?'<pos:position pos:line="1763" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="1763" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1763" pos:column="42"/></decl_stmt>
        <if pos:line="1764" pos:column="9">if<condition pos:line="1764" pos:column="11">(<expr><name pos:line="1764" pos:column="12">sep<pos:position pos:line="1764" pos:column="15"/></name> <operator pos:line="1764" pos:column="16">&amp;&amp;<pos:position pos:line="1764" pos:column="26"/></operator> <operator pos:line="1764" pos:column="19">(<pos:position pos:line="1764" pos:column="20"/></operator><name pos:line="1764" pos:column="20">sep<pos:position pos:line="1764" pos:column="23"/></name> <operator pos:line="1764" pos:column="24">&lt;<pos:position pos:line="1764" pos:column="28"/></operator> <name pos:line="1764" pos:column="26">pathsep<pos:position pos:line="1764" pos:column="33"/></name><operator pos:line="1764" pos:column="33">)<pos:position pos:line="1764" pos:column="34"/></operator></expr>)<pos:position pos:line="1764" pos:column="35"/></condition><then pos:line="1764" pos:column="35">
          <block type="pseudo"><expr_stmt><expr><name pos:line="1765" pos:column="11">pathsep<pos:position pos:line="1765" pos:column="18"/></name> <operator pos:line="1765" pos:column="19">=<pos:position pos:line="1765" pos:column="20"/></operator> <name pos:line="1765" pos:column="21">sep<pos:position pos:line="1765" pos:column="24"/></name></expr>;<pos:position pos:line="1765" pos:column="25"/></expr_stmt></block></then></if>
        <expr_stmt><expr><operator pos:line="1766" pos:column="9">*<pos:position pos:line="1766" pos:column="10"/></operator><name pos:line="1766" pos:column="10">pathsep<pos:position pos:line="1766" pos:column="17"/></name><operator pos:line="1766" pos:column="17">=<pos:position pos:line="1766" pos:column="18"/></operator><literal type="number" pos:line="1766" pos:column="18">0<pos:position pos:line="1766" pos:column="19"/></literal></expr>;<pos:position pos:line="1766" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="1767" pos:column="8"/></block></then>
      <else pos:line="1768" pos:column="7">else <block pos:line="1768" pos:column="12">{
        <comment type="block" pos:line="1769" pos:column="9">/* There was no slash. Now, since we might be operating on a badly
           formatted URL, such as "http://www.url.com?id=2380" which doesn't
           use a slash separator as it is supposed to, we need to check for a
           ?-letter as well! */</comment>
        <expr_stmt><expr><name pos:line="1773" pos:column="9">pathsep<pos:position pos:line="1773" pos:column="16"/></name> <operator pos:line="1773" pos:column="17">=<pos:position pos:line="1773" pos:column="18"/></operator> <call><name pos:line="1773" pos:column="19">strchr<pos:position pos:line="1773" pos:column="25"/></name><argument_list pos:line="1773" pos:column="25">(<argument><expr><name pos:line="1773" pos:column="26">protsep<pos:position pos:line="1773" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1773" pos:column="35">'?'<pos:position pos:line="1773" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="1773" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1773" pos:column="40"/></expr_stmt>
        <if pos:line="1774" pos:column="9">if<condition pos:line="1774" pos:column="11">(<expr><name pos:line="1774" pos:column="12">pathsep<pos:position pos:line="1774" pos:column="19"/></name></expr>)<pos:position pos:line="1774" pos:column="20"/></condition><then pos:line="1774" pos:column="20">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="1775" pos:column="11">*<pos:position pos:line="1775" pos:column="12"/></operator><name pos:line="1775" pos:column="12">pathsep<pos:position pos:line="1775" pos:column="19"/></name><operator pos:line="1775" pos:column="19">=<pos:position pos:line="1775" pos:column="20"/></operator><literal type="number" pos:line="1775" pos:column="20">0<pos:position pos:line="1775" pos:column="21"/></literal></expr>;<pos:position pos:line="1775" pos:column="22"/></expr_stmt></block></then></if>
      }<pos:position pos:line="1776" pos:column="8"/></block></else></if>
    }<pos:position pos:line="1777" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="1779" pos:column="5">/* If the new part contains a space, this is a mighty stupid redirect
       but we still make an effort to do "right". To the left of a '?'
       letter we replace each space with %20 while it is replaced with '+'
       on the right side of the '?' letter.
    */</comment>
    <expr_stmt><expr><name pos:line="1784" pos:column="5">newlen<pos:position pos:line="1784" pos:column="11"/></name> <operator pos:line="1784" pos:column="12">=<pos:position pos:line="1784" pos:column="13"/></operator> <call><name pos:line="1784" pos:column="14">strlen_url<pos:position pos:line="1784" pos:column="24"/></name><argument_list pos:line="1784" pos:column="24">(<argument><expr><name pos:line="1784" pos:column="25">useurl<pos:position pos:line="1784" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1784" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1784" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name pos:line="1786" pos:column="5">urllen<pos:position pos:line="1786" pos:column="11"/></name> <operator pos:line="1786" pos:column="12">=<pos:position pos:line="1786" pos:column="13"/></operator> <call><name pos:line="1786" pos:column="14">strlen<pos:position pos:line="1786" pos:column="20"/></name><argument_list pos:line="1786" pos:column="20">(<argument><expr><name pos:line="1786" pos:column="21">url_clone<pos:position pos:line="1786" pos:column="30"/></name></expr></argument>)<pos:position pos:line="1786" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="1786" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name pos:line="1788" pos:column="5">newest<pos:position pos:line="1788" pos:column="11"/></name><operator pos:line="1788" pos:column="11">=<pos:position pos:line="1788" pos:column="12"/></operator><operator pos:line="1788" pos:column="12">(<pos:position pos:line="1788" pos:column="13"/></operator><name pos:line="1788" pos:column="13">char<pos:position pos:line="1788" pos:column="17"/></name> <operator pos:line="1788" pos:column="18">*<pos:position pos:line="1788" pos:column="19"/></operator><operator pos:line="1788" pos:column="19">)<pos:position pos:line="1788" pos:column="20"/></operator><call><name pos:line="1788" pos:column="20">malloc<pos:position pos:line="1788" pos:column="26"/></name><argument_list pos:line="1788" pos:column="26">( <argument><expr><name pos:line="1788" pos:column="28">urllen<pos:position pos:line="1788" pos:column="34"/></name> <operator pos:line="1788" pos:column="35">+<pos:position pos:line="1788" pos:column="36"/></operator> <literal type="number" pos:line="1788" pos:column="37">1<pos:position pos:line="1788" pos:column="38"/></literal> <operator pos:line="1788" pos:column="39">+<pos:position pos:line="1788" pos:column="40"/></operator> <comment type="block" pos:line="1788" pos:column="41">/* possible slash */</comment>
                           <name pos:line="1789" pos:column="28">newlen<pos:position pos:line="1789" pos:column="34"/></name> <operator pos:line="1789" pos:column="35">+<pos:position pos:line="1789" pos:column="36"/></operator> <literal type="number" pos:line="1789" pos:column="37">1<pos:position pos:line="1789" pos:column="38"/></literal></expr></argument> <comment type="block" pos:line="1789" pos:column="39">/* zero byte */</comment>)<pos:position pos:line="1789" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1789" pos:column="56"/></expr_stmt>

    <if pos:line="1791" pos:column="5">if<condition pos:line="1791" pos:column="7">(<expr><operator pos:line="1791" pos:column="8">!<pos:position pos:line="1791" pos:column="9"/></operator><name pos:line="1791" pos:column="9">newest<pos:position pos:line="1791" pos:column="15"/></name></expr>)<pos:position pos:line="1791" pos:column="16"/></condition><then pos:line="1791" pos:column="16"> <block pos:line="1791" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="1792" pos:column="7">free<pos:position pos:line="1792" pos:column="11"/></name><argument_list pos:line="1792" pos:column="11">(<argument><expr><name pos:line="1792" pos:column="12">url_clone<pos:position pos:line="1792" pos:column="21"/></name></expr></argument>)<pos:position pos:line="1792" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="1792" pos:column="23"/></expr_stmt> <comment type="block" pos:line="1792" pos:column="24">/* don't leak this */</comment>
      <return pos:line="1793" pos:column="7">return <expr><name pos:line="1793" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="1793" pos:column="33"/></name></expr>;<pos:position pos:line="1793" pos:column="34"/></return> <comment type="block" pos:line="1793" pos:column="35">/* go out from this */</comment>
    }<pos:position pos:line="1794" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="1796" pos:column="5">/* copy over the root url part */</comment>
    <expr_stmt><expr><call><name pos:line="1797" pos:column="5">memcpy<pos:position pos:line="1797" pos:column="11"/></name><argument_list pos:line="1797" pos:column="11">(<argument><expr><name pos:line="1797" pos:column="12">newest<pos:position pos:line="1797" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="1797" pos:column="20">url_clone<pos:position pos:line="1797" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="1797" pos:column="31">urllen<pos:position pos:line="1797" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1797" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1797" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="1799" pos:column="5">/* check if we need to append a slash */</comment>
    <if pos:line="1800" pos:column="5">if<condition pos:line="1800" pos:column="7">(<expr><operator pos:line="1800" pos:column="8">(<pos:position pos:line="1800" pos:column="9"/></operator><literal type="char" pos:line="1800" pos:column="9">'/'<pos:position pos:line="1800" pos:column="12"/></literal> <operator pos:line="1800" pos:column="13">==<pos:position pos:line="1800" pos:column="15"/></operator> <name><name pos:line="1800" pos:column="16">useurl<pos:position pos:line="1800" pos:column="22"/></name><index pos:line="1800" pos:column="22">[<expr><literal type="number" pos:line="1800" pos:column="23">0<pos:position pos:line="1800" pos:column="24"/></literal></expr>]<pos:position pos:line="1800" pos:column="25"/></index></name><operator pos:line="1800" pos:column="25">)<pos:position pos:line="1800" pos:column="26"/></operator> <operator pos:line="1800" pos:column="27">||<pos:position pos:line="1800" pos:column="29"/></operator> <operator pos:line="1800" pos:column="30">(<pos:position pos:line="1800" pos:column="31"/></operator><name pos:line="1800" pos:column="31">protsep<pos:position pos:line="1800" pos:column="38"/></name> <operator pos:line="1800" pos:column="39">&amp;&amp;<pos:position pos:line="1800" pos:column="49"/></operator> <operator pos:line="1800" pos:column="42">!<pos:position pos:line="1800" pos:column="43"/></operator><operator pos:line="1800" pos:column="43">*<pos:position pos:line="1800" pos:column="44"/></operator><name pos:line="1800" pos:column="44">protsep<pos:position pos:line="1800" pos:column="51"/></name><operator pos:line="1800" pos:column="51">)<pos:position pos:line="1800" pos:column="52"/></operator></expr>)<pos:position pos:line="1800" pos:column="53"/></condition><then pos:line="1800" pos:column="53">
      <block type="pseudo"><empty_stmt pos:line="1801" pos:column="7">;<pos:position pos:line="1801" pos:column="8"/></empty_stmt></block></then>
    <else pos:line="1802" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="1803" pos:column="7">newest<pos:position pos:line="1803" pos:column="13"/></name><index pos:line="1803" pos:column="13">[<expr><name pos:line="1803" pos:column="14">urllen<pos:position pos:line="1803" pos:column="20"/></name><operator pos:line="1803" pos:column="20">++<pos:position pos:line="1803" pos:column="22"/></operator></expr>]<pos:position pos:line="1803" pos:column="23"/></index></name><operator pos:line="1803" pos:column="23">=<pos:position pos:line="1803" pos:column="24"/></operator><literal type="char" pos:line="1803" pos:column="24">'/'<pos:position pos:line="1803" pos:column="27"/></literal></expr>;<pos:position pos:line="1803" pos:column="28"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="1805" pos:column="5">/* then append the new piece on the right side */</comment>
    <expr_stmt><expr><call><name pos:line="1806" pos:column="5">strcpy_url<pos:position pos:line="1806" pos:column="15"/></name><argument_list pos:line="1806" pos:column="15">(<argument><expr><operator pos:line="1806" pos:column="16">&amp;<pos:position pos:line="1806" pos:column="21"/></operator><name><name pos:line="1806" pos:column="17">newest<pos:position pos:line="1806" pos:column="23"/></name><index pos:line="1806" pos:column="23">[<expr><name pos:line="1806" pos:column="24">urllen<pos:position pos:line="1806" pos:column="30"/></name></expr>]<pos:position pos:line="1806" pos:column="31"/></index></name></expr></argument>, <argument><expr><name pos:line="1806" pos:column="33">useurl<pos:position pos:line="1806" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1806" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1806" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="1808" pos:column="5">free<pos:position pos:line="1808" pos:column="9"/></name><argument_list pos:line="1808" pos:column="9">(<argument><expr><name pos:line="1808" pos:column="10">newurl<pos:position pos:line="1808" pos:column="16"/></name></expr></argument>)<pos:position pos:line="1808" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="1808" pos:column="18"/></expr_stmt> <comment type="block" pos:line="1808" pos:column="19">/* newurl is the allocated pointer */</comment>
    <expr_stmt><expr><call><name pos:line="1809" pos:column="5">free<pos:position pos:line="1809" pos:column="9"/></name><argument_list pos:line="1809" pos:column="9">(<argument><expr><name pos:line="1809" pos:column="10">url_clone<pos:position pos:line="1809" pos:column="19"/></name></expr></argument>)<pos:position pos:line="1809" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="1809" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1810" pos:column="5">newurl<pos:position pos:line="1810" pos:column="11"/></name> <operator pos:line="1810" pos:column="12">=<pos:position pos:line="1810" pos:column="13"/></operator> <name pos:line="1810" pos:column="14">newest<pos:position pos:line="1810" pos:column="20"/></name></expr>;<pos:position pos:line="1810" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="1811" pos:column="4"/></block></then>
  <else pos:line="1812" pos:column="3">else <block pos:line="1812" pos:column="8">{
    <comment type="block" pos:line="1813" pos:column="5">/* This is an absolute URL, don't allow the custom port number */</comment>
    <expr_stmt><expr><name><name pos:line="1814" pos:column="5">data<pos:position pos:line="1814" pos:column="9"/></name><operator pos:line="1814" pos:column="9">-&gt;<pos:position pos:line="1814" pos:column="14"/></operator><name pos:line="1814" pos:column="11">state<pos:position pos:line="1814" pos:column="16"/></name><operator pos:line="1814" pos:column="16">.<pos:position pos:line="1814" pos:column="17"/></operator><name pos:line="1814" pos:column="17">allow_port<pos:position pos:line="1814" pos:column="27"/></name></name> <operator pos:line="1814" pos:column="28">=<pos:position pos:line="1814" pos:column="29"/></operator> <name pos:line="1814" pos:column="30">FALSE<pos:position pos:line="1814" pos:column="35"/></name></expr>;<pos:position pos:line="1814" pos:column="36"/></expr_stmt>

    <if pos:line="1816" pos:column="5">if<condition pos:line="1816" pos:column="7">(<expr><call><name pos:line="1816" pos:column="8">strchr<pos:position pos:line="1816" pos:column="14"/></name><argument_list pos:line="1816" pos:column="14">(<argument><expr><name pos:line="1816" pos:column="15">newurl<pos:position pos:line="1816" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1816" pos:column="23">' '<pos:position pos:line="1816" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="1816" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="1816" pos:column="28"/></condition><then pos:line="1816" pos:column="28"> <block pos:line="1816" pos:column="29">{
      <comment type="block" pos:line="1817" pos:column="7">/* This new URL contains at least one space, this is a mighty stupid
         redirect but we still make an effort to do "right". */</comment>
      <expr_stmt><expr><name pos:line="1819" pos:column="7">newlen<pos:position pos:line="1819" pos:column="13"/></name> <operator pos:line="1819" pos:column="14">=<pos:position pos:line="1819" pos:column="15"/></operator> <call><name pos:line="1819" pos:column="16">strlen_url<pos:position pos:line="1819" pos:column="26"/></name><argument_list pos:line="1819" pos:column="26">(<argument><expr><name pos:line="1819" pos:column="27">newurl<pos:position pos:line="1819" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1819" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1819" pos:column="35"/></expr_stmt>

      <expr_stmt><expr><name pos:line="1821" pos:column="7">newest<pos:position pos:line="1821" pos:column="13"/></name> <operator pos:line="1821" pos:column="14">=<pos:position pos:line="1821" pos:column="15"/></operator> <call><name pos:line="1821" pos:column="16">malloc<pos:position pos:line="1821" pos:column="22"/></name><argument_list pos:line="1821" pos:column="22">(<argument><expr><name pos:line="1821" pos:column="23">newlen<pos:position pos:line="1821" pos:column="29"/></name><operator pos:line="1821" pos:column="29">+<pos:position pos:line="1821" pos:column="30"/></operator><literal type="number" pos:line="1821" pos:column="30">1<pos:position pos:line="1821" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="1821" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1821" pos:column="33"/></expr_stmt> <comment type="block" pos:line="1821" pos:column="34">/* get memory for this */</comment>
      <if pos:line="1822" pos:column="7">if<condition pos:line="1822" pos:column="9">(<expr><name pos:line="1822" pos:column="10">newest<pos:position pos:line="1822" pos:column="16"/></name></expr>)<pos:position pos:line="1822" pos:column="17"/></condition><then pos:line="1822" pos:column="17"> <block pos:line="1822" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="1823" pos:column="9">strcpy_url<pos:position pos:line="1823" pos:column="19"/></name><argument_list pos:line="1823" pos:column="19">(<argument><expr><name pos:line="1823" pos:column="20">newest<pos:position pos:line="1823" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1823" pos:column="28">newurl<pos:position pos:line="1823" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1823" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1823" pos:column="36"/></expr_stmt> <comment type="block" pos:line="1823" pos:column="37">/* create a space-free URL */</comment>

        <expr_stmt><expr><call><name pos:line="1825" pos:column="9">free<pos:position pos:line="1825" pos:column="13"/></name><argument_list pos:line="1825" pos:column="13">(<argument><expr><name pos:line="1825" pos:column="14">newurl<pos:position pos:line="1825" pos:column="20"/></name></expr></argument>)<pos:position pos:line="1825" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="1825" pos:column="22"/></expr_stmt> <comment type="block" pos:line="1825" pos:column="23">/* that was no good */</comment>
        <expr_stmt><expr><name pos:line="1826" pos:column="9">newurl<pos:position pos:line="1826" pos:column="15"/></name> <operator pos:line="1826" pos:column="16">=<pos:position pos:line="1826" pos:column="17"/></operator> <name pos:line="1826" pos:column="18">newest<pos:position pos:line="1826" pos:column="24"/></name></expr>;<pos:position pos:line="1826" pos:column="25"/></expr_stmt> <comment type="block" pos:line="1826" pos:column="26">/* use this instead now */</comment>
      }<pos:position pos:line="1827" pos:column="8"/></block></then></if>
    }<pos:position pos:line="1828" pos:column="6"/></block></then></if>

  }<pos:position pos:line="1830" pos:column="4"/></block></else></if>

  <if pos:line="1832" pos:column="3">if<condition pos:line="1832" pos:column="5">(<expr><name><name pos:line="1832" pos:column="6">data<pos:position pos:line="1832" pos:column="10"/></name><operator pos:line="1832" pos:column="10">-&gt;<pos:position pos:line="1832" pos:column="15"/></operator><name pos:line="1832" pos:column="12">change<pos:position pos:line="1832" pos:column="18"/></name><operator pos:line="1832" pos:column="18">.<pos:position pos:line="1832" pos:column="19"/></operator><name pos:line="1832" pos:column="19">url_alloc<pos:position pos:line="1832" pos:column="28"/></name></name></expr>)<pos:position pos:line="1832" pos:column="29"/></condition><then pos:line="1832" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="1833" pos:column="5">free<pos:position pos:line="1833" pos:column="9"/></name><argument_list pos:line="1833" pos:column="9">(<argument><expr><name><name pos:line="1833" pos:column="10">data<pos:position pos:line="1833" pos:column="14"/></name><operator pos:line="1833" pos:column="14">-&gt;<pos:position pos:line="1833" pos:column="19"/></operator><name pos:line="1833" pos:column="16">change<pos:position pos:line="1833" pos:column="22"/></name><operator pos:line="1833" pos:column="22">.<pos:position pos:line="1833" pos:column="23"/></operator><name pos:line="1833" pos:column="23">url<pos:position pos:line="1833" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="1833" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1833" pos:column="28"/></expr_stmt></block></then>
  <else pos:line="1834" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="1835" pos:column="5">data<pos:position pos:line="1835" pos:column="9"/></name><operator pos:line="1835" pos:column="9">-&gt;<pos:position pos:line="1835" pos:column="14"/></operator><name pos:line="1835" pos:column="11">change<pos:position pos:line="1835" pos:column="17"/></name><operator pos:line="1835" pos:column="17">.<pos:position pos:line="1835" pos:column="18"/></operator><name pos:line="1835" pos:column="18">url_alloc<pos:position pos:line="1835" pos:column="27"/></name></name> <operator pos:line="1835" pos:column="28">=<pos:position pos:line="1835" pos:column="29"/></operator> <name pos:line="1835" pos:column="30">TRUE<pos:position pos:line="1835" pos:column="34"/></name></expr>;<pos:position pos:line="1835" pos:column="35"/></expr_stmt></block></else></if> <comment type="block" pos:line="1835" pos:column="36">/* the URL is allocated */</comment>

  <expr_stmt><expr><name><name pos:line="1837" pos:column="3">data<pos:position pos:line="1837" pos:column="7"/></name><operator pos:line="1837" pos:column="7">-&gt;<pos:position pos:line="1837" pos:column="12"/></operator><name pos:line="1837" pos:column="9">change<pos:position pos:line="1837" pos:column="15"/></name><operator pos:line="1837" pos:column="15">.<pos:position pos:line="1837" pos:column="16"/></operator><name pos:line="1837" pos:column="16">url<pos:position pos:line="1837" pos:column="19"/></name></name> <operator pos:line="1837" pos:column="20">=<pos:position pos:line="1837" pos:column="21"/></operator> <name pos:line="1837" pos:column="22">newurl<pos:position pos:line="1837" pos:column="28"/></name></expr>;<pos:position pos:line="1837" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1838" pos:column="3">newurl<pos:position pos:line="1838" pos:column="9"/></name> <operator pos:line="1838" pos:column="10">=<pos:position pos:line="1838" pos:column="11"/></operator> <name pos:line="1838" pos:column="12">NULL<pos:position pos:line="1838" pos:column="16"/></name></expr>;<pos:position pos:line="1838" pos:column="17"/></expr_stmt> <comment type="block" pos:line="1838" pos:column="18">/* don't free! */</comment>

  <expr_stmt><expr><call><name pos:line="1840" pos:column="3">infof<pos:position pos:line="1840" pos:column="8"/></name><argument_list pos:line="1840" pos:column="8">(<argument><expr><name pos:line="1840" pos:column="9">data<pos:position pos:line="1840" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1840" pos:column="15">"Issue another request to this URL: '%s'\n"<pos:position pos:line="1840" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="1840" pos:column="60">data<pos:position pos:line="1840" pos:column="64"/></name><operator pos:line="1840" pos:column="64">-&gt;<pos:position pos:line="1840" pos:column="69"/></operator><name pos:line="1840" pos:column="66">change<pos:position pos:line="1840" pos:column="72"/></name><operator pos:line="1840" pos:column="72">.<pos:position pos:line="1840" pos:column="73"/></operator><name pos:line="1840" pos:column="73">url<pos:position pos:line="1840" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="1840" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="1840" pos:column="78"/></expr_stmt>

  <comment type="block" pos:line="1842" pos:column="3">/*
   * We get here when the HTTP code is 300-399 (and 401). We need to perform
   * differently based on exactly what return code there was.
   *
   * News from 7.10.6: we can also get here on a 401 or 407, in case we act on
   * a HTTP (proxy-) authentication scheme other than Basic.
   */</comment>
  <switch pos:line="1849" pos:column="3">switch<condition pos:line="1849" pos:column="9">(<expr><name><name pos:line="1849" pos:column="10">data<pos:position pos:line="1849" pos:column="14"/></name><operator pos:line="1849" pos:column="14">-&gt;<pos:position pos:line="1849" pos:column="19"/></operator><name pos:line="1849" pos:column="16">info<pos:position pos:line="1849" pos:column="20"/></name><operator pos:line="1849" pos:column="20">.<pos:position pos:line="1849" pos:column="21"/></operator><name pos:line="1849" pos:column="21">httpcode<pos:position pos:line="1849" pos:column="29"/></name></name></expr>)<pos:position pos:line="1849" pos:column="30"/></condition> <block pos:line="1849" pos:column="31">{
    <comment type="block" pos:line="1850" pos:column="5">/* 401 - Act on a WWW-Authenticate, we keep on moving and do the
       Authorization: XXXX header in the HTTP request code snippet */</comment>
    <comment type="block" pos:line="1852" pos:column="5">/* 407 - Act on a Proxy-Authenticate, we keep on moving and do the
       Proxy-Authorization: XXXX header in the HTTP request code snippet */</comment>
    <comment type="block" pos:line="1854" pos:column="5">/* 300 - Multiple Choices */</comment>
    <comment type="block" pos:line="1855" pos:column="5">/* 306 - Not used */</comment>
    <comment type="block" pos:line="1856" pos:column="5">/* 307 - Temporary Redirect */</comment>
  <default pos:line="1857" pos:column="3">default:<pos:position pos:line="1857" pos:column="11"/></default>  <comment type="block" pos:line="1857" pos:column="13">/* for all above (and the unknown ones) */</comment>
    <comment type="block" pos:line="1858" pos:column="5">/* Some codes are explicitly mentioned since I've checked RFC2616 and they
     * seem to be OK to POST to.
     */</comment>
    <break pos:line="1861" pos:column="5">break;<pos:position pos:line="1861" pos:column="11"/></break>
  <case pos:line="1862" pos:column="3">case <expr><literal type="number" pos:line="1862" pos:column="8">301<pos:position pos:line="1862" pos:column="11"/></literal></expr>:<pos:position pos:line="1862" pos:column="12"/></case> <comment type="block" pos:line="1862" pos:column="13">/* Moved Permanently */</comment>
    <comment type="block" pos:line="1863" pos:column="5">/* (quote from RFC2616, section 10.3.2):
     *
     * Note: When automatically redirecting a POST request after receiving a
     * 301 status code, some existing HTTP/1.0 user agents will erroneously
     * change it into a GET request.
     *
     * ----
     *
     * Warning: Because most of importants user agents do this obvious RFC2616
     * violation, many webservers expect this misbehavior. So these servers
     * often answers to a POST request with an error page.  To be sure that
     * libcurl gets the page that most user agents would get, libcurl has to
     * force GET.
     *
     * This behaviour can be overriden with CURLOPT_POST301.
     */</comment>
    <if pos:line="1879" pos:column="5">if<condition pos:line="1879" pos:column="7">( <expr><operator pos:line="1879" pos:column="9">(<pos:position pos:line="1879" pos:column="10"/></operator><name><name pos:line="1879" pos:column="10">data<pos:position pos:line="1879" pos:column="14"/></name><operator pos:line="1879" pos:column="14">-&gt;<pos:position pos:line="1879" pos:column="19"/></operator><name pos:line="1879" pos:column="16">set<pos:position pos:line="1879" pos:column="19"/></name><operator pos:line="1879" pos:column="19">.<pos:position pos:line="1879" pos:column="20"/></operator><name pos:line="1879" pos:column="20">httpreq<pos:position pos:line="1879" pos:column="27"/></name></name> <operator pos:line="1879" pos:column="28">==<pos:position pos:line="1879" pos:column="30"/></operator> <name pos:line="1879" pos:column="31">HTTPREQ_POST<pos:position pos:line="1879" pos:column="43"/></name>
         <operator pos:line="1880" pos:column="10">||<pos:position pos:line="1880" pos:column="12"/></operator> <name><name pos:line="1880" pos:column="13">data<pos:position pos:line="1880" pos:column="17"/></name><operator pos:line="1880" pos:column="17">-&gt;<pos:position pos:line="1880" pos:column="22"/></operator><name pos:line="1880" pos:column="19">set<pos:position pos:line="1880" pos:column="22"/></name><operator pos:line="1880" pos:column="22">.<pos:position pos:line="1880" pos:column="23"/></operator><name pos:line="1880" pos:column="23">httpreq<pos:position pos:line="1880" pos:column="30"/></name></name> <operator pos:line="1880" pos:column="31">==<pos:position pos:line="1880" pos:column="33"/></operator> <name pos:line="1880" pos:column="34">HTTPREQ_POST_FORM<pos:position pos:line="1880" pos:column="51"/></name><operator pos:line="1880" pos:column="51">)<pos:position pos:line="1880" pos:column="52"/></operator>
        <operator pos:line="1881" pos:column="9">&amp;&amp;<pos:position pos:line="1881" pos:column="19"/></operator> <operator pos:line="1881" pos:column="12">!<pos:position pos:line="1881" pos:column="13"/></operator><name><name pos:line="1881" pos:column="13">data<pos:position pos:line="1881" pos:column="17"/></name><operator pos:line="1881" pos:column="17">-&gt;<pos:position pos:line="1881" pos:column="22"/></operator><name pos:line="1881" pos:column="19">set<pos:position pos:line="1881" pos:column="22"/></name><operator pos:line="1881" pos:column="22">.<pos:position pos:line="1881" pos:column="23"/></operator><name pos:line="1881" pos:column="23">post301<pos:position pos:line="1881" pos:column="30"/></name></name></expr>)<pos:position pos:line="1881" pos:column="31"/></condition><then pos:line="1881" pos:column="31"> <block pos:line="1881" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="1882" pos:column="7">infof<pos:position pos:line="1882" pos:column="12"/></name><argument_list pos:line="1882" pos:column="12">(<argument><expr><name pos:line="1882" pos:column="13">data<pos:position pos:line="1882" pos:column="17"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="1883" pos:column="13">"Violate RFC 2616/10.3.2 and switch from POST to GET\n"<pos:position pos:line="1883" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="1883" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="1883" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1884" pos:column="7">data<pos:position pos:line="1884" pos:column="11"/></name><operator pos:line="1884" pos:column="11">-&gt;<pos:position pos:line="1884" pos:column="16"/></operator><name pos:line="1884" pos:column="13">set<pos:position pos:line="1884" pos:column="16"/></name><operator pos:line="1884" pos:column="16">.<pos:position pos:line="1884" pos:column="17"/></operator><name pos:line="1884" pos:column="17">httpreq<pos:position pos:line="1884" pos:column="24"/></name></name> <operator pos:line="1884" pos:column="25">=<pos:position pos:line="1884" pos:column="26"/></operator> <name pos:line="1884" pos:column="27">HTTPREQ_GET<pos:position pos:line="1884" pos:column="38"/></name></expr>;<pos:position pos:line="1884" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="1885" pos:column="6"/></block></then></if>
    <break pos:line="1886" pos:column="5">break;<pos:position pos:line="1886" pos:column="11"/></break>
  <case pos:line="1887" pos:column="3">case <expr><literal type="number" pos:line="1887" pos:column="8">302<pos:position pos:line="1887" pos:column="11"/></literal></expr>:<pos:position pos:line="1887" pos:column="12"/></case> <comment type="block" pos:line="1887" pos:column="13">/* Found */</comment>
    <comment type="block" pos:line="1888" pos:column="5">/* (From 10.3.3)

    Note: RFC 1945 and RFC 2068 specify that the client is not allowed
    to change the method on the redirected request.  However, most
    existing user agent implementations treat 302 as if it were a 303
    response, performing a GET on the Location field-value regardless
    of the original request method. The status codes 303 and 307 have
    been added for servers that wish to make unambiguously clear which
    kind of reaction is expected of the client.

    (From 10.3.4)

    Note: Many pre-HTTP/1.1 user agents do not understand the 303
    status. When interoperability with such clients is a concern, the
    302 status code may be used instead, since most user agents react
    to a 302 response as described here for 303.
    */</comment>
  <case pos:line="1905" pos:column="3">case <expr><literal type="number" pos:line="1905" pos:column="8">303<pos:position pos:line="1905" pos:column="11"/></literal></expr>:<pos:position pos:line="1905" pos:column="12"/></case> <comment type="block" pos:line="1905" pos:column="13">/* See Other */</comment>
    <comment type="block" pos:line="1906" pos:column="5">/* Disable both types of POSTs, since doing a second POST when
     * following isn't what anyone would want! */</comment>
    <if pos:line="1908" pos:column="5">if<condition pos:line="1908" pos:column="7">(<expr><name><name pos:line="1908" pos:column="8">data<pos:position pos:line="1908" pos:column="12"/></name><operator pos:line="1908" pos:column="12">-&gt;<pos:position pos:line="1908" pos:column="17"/></operator><name pos:line="1908" pos:column="14">set<pos:position pos:line="1908" pos:column="17"/></name><operator pos:line="1908" pos:column="17">.<pos:position pos:line="1908" pos:column="18"/></operator><name pos:line="1908" pos:column="18">httpreq<pos:position pos:line="1908" pos:column="25"/></name></name> <operator pos:line="1908" pos:column="26">!=<pos:position pos:line="1908" pos:column="28"/></operator> <name pos:line="1908" pos:column="29">HTTPREQ_GET<pos:position pos:line="1908" pos:column="40"/></name></expr>)<pos:position pos:line="1908" pos:column="41"/></condition><then pos:line="1908" pos:column="41"> <block pos:line="1908" pos:column="42">{
      <expr_stmt><expr><name><name pos:line="1909" pos:column="7">data<pos:position pos:line="1909" pos:column="11"/></name><operator pos:line="1909" pos:column="11">-&gt;<pos:position pos:line="1909" pos:column="16"/></operator><name pos:line="1909" pos:column="13">set<pos:position pos:line="1909" pos:column="16"/></name><operator pos:line="1909" pos:column="16">.<pos:position pos:line="1909" pos:column="17"/></operator><name pos:line="1909" pos:column="17">httpreq<pos:position pos:line="1909" pos:column="24"/></name></name> <operator pos:line="1909" pos:column="25">=<pos:position pos:line="1909" pos:column="26"/></operator> <name pos:line="1909" pos:column="27">HTTPREQ_GET<pos:position pos:line="1909" pos:column="38"/></name></expr>;<pos:position pos:line="1909" pos:column="39"/></expr_stmt> <comment type="block" pos:line="1909" pos:column="40">/* enforce GET request */</comment>
      <expr_stmt><expr><call><name pos:line="1910" pos:column="7">infof<pos:position pos:line="1910" pos:column="12"/></name><argument_list pos:line="1910" pos:column="12">(<argument><expr><name pos:line="1910" pos:column="13">data<pos:position pos:line="1910" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1910" pos:column="19">"Disables POST, goes with %s\n"<pos:position pos:line="1910" pos:column="50"/></literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name pos:line="1911" pos:column="13">data<pos:position pos:line="1911" pos:column="17"/></name><operator pos:line="1911" pos:column="17">-&gt;<pos:position pos:line="1911" pos:column="22"/></operator><name pos:line="1911" pos:column="19">set<pos:position pos:line="1911" pos:column="22"/></name><operator pos:line="1911" pos:column="22">.<pos:position pos:line="1911" pos:column="23"/></operator><name pos:line="1911" pos:column="23">opt_no_body<pos:position pos:line="1911" pos:column="34"/></name></name></expr>?<pos:position pos:line="1911" pos:column="35"/></condition><then><expr><literal type="string" pos:line="1911" pos:column="35">"HEAD"<pos:position pos:line="1911" pos:column="41"/></literal></expr></then><else pos:line="1911" pos:column="41">:<expr><literal type="string" pos:line="1911" pos:column="42">"GET"<pos:position pos:line="1911" pos:column="47"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="1911" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1911" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="1912" pos:column="6"/></block></then></if>
    <break pos:line="1913" pos:column="5">break;<pos:position pos:line="1913" pos:column="11"/></break>
  <case pos:line="1914" pos:column="3">case <expr><literal type="number" pos:line="1914" pos:column="8">304<pos:position pos:line="1914" pos:column="11"/></literal></expr>:<pos:position pos:line="1914" pos:column="12"/></case> <comment type="block" pos:line="1914" pos:column="13">/* Not Modified */</comment>
    <comment type="block" pos:line="1915" pos:column="5">/* 304 means we did a conditional request and it was "Not modified".
     * We shouldn't get any Location: header in this response!
     */</comment>
    <break pos:line="1918" pos:column="5">break;<pos:position pos:line="1918" pos:column="11"/></break>
  <case pos:line="1919" pos:column="3">case <expr><literal type="number" pos:line="1919" pos:column="8">305<pos:position pos:line="1919" pos:column="11"/></literal></expr>:<pos:position pos:line="1919" pos:column="12"/></case> <comment type="block" pos:line="1919" pos:column="13">/* Use Proxy */</comment>
    <comment type="block" pos:line="1920" pos:column="5">/* (quote from RFC2616, section 10.3.6):
     * "The requested resource MUST be accessed through the proxy given
     * by the Location field. The Location field gives the URI of the
     * proxy.  The recipient is expected to repeat this single request
     * via the proxy. 305 responses MUST only be generated by origin
     * servers."
     */</comment>
    <break pos:line="1927" pos:column="5">break;<pos:position pos:line="1927" pos:column="11"/></break>
  }<pos:position pos:line="1928" pos:column="4"/></block></switch>
  <expr_stmt><expr><call><name pos:line="1929" pos:column="3">Curl_pgrsTime<pos:position pos:line="1929" pos:column="16"/></name><argument_list pos:line="1929" pos:column="16">(<argument><expr><name pos:line="1929" pos:column="17">data<pos:position pos:line="1929" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="1929" pos:column="23">TIMER_REDIRECT<pos:position pos:line="1929" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1929" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1929" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1930" pos:column="3">Curl_pgrsResetTimes<pos:position pos:line="1930" pos:column="22"/></name><argument_list pos:line="1930" pos:column="22">(<argument><expr><name pos:line="1930" pos:column="23">data<pos:position pos:line="1930" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1930" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1930" pos:column="29"/></expr_stmt>

  <return pos:line="1932" pos:column="3">return <expr><name pos:line="1932" pos:column="10">CURLE_OK<pos:position pos:line="1932" pos:column="18"/></name></expr>;<pos:position pos:line="1932" pos:column="19"/></return>
}<pos:position pos:line="1933" pos:column="2"/></block></function>

<function><specifier pos:line="1935" pos:column="1">static<pos:position pos:line="1935" pos:column="7"/></specifier> <type><name pos:line="1935" pos:column="8">CURLcode<pos:position pos:line="1935" pos:column="16"/></name></type>
<name pos:line="1936" pos:column="1">connect_host<pos:position pos:line="1936" pos:column="13"/></name><parameter_list pos:line="1936" pos:column="13">(<parameter><decl><type><name><name pos:line="1936" pos:column="14">struct<pos:position pos:line="1936" pos:column="20"/></name> <name pos:line="1936" pos:column="21">SessionHandle<pos:position pos:line="1936" pos:column="34"/></name></name> <modifier pos:line="1936" pos:column="35">*<pos:position pos:line="1936" pos:column="36"/></modifier></type><name pos:line="1936" pos:column="36">data<pos:position pos:line="1936" pos:column="40"/></name></decl></parameter>,
             <parameter><decl><type><name><name pos:line="1937" pos:column="14">struct<pos:position pos:line="1937" pos:column="20"/></name> <name pos:line="1937" pos:column="21">connectdata<pos:position pos:line="1937" pos:column="32"/></name></name> <modifier pos:line="1937" pos:column="33">*<pos:position pos:line="1937" pos:column="34"/></modifier><modifier pos:line="1937" pos:column="34">*<pos:position pos:line="1937" pos:column="35"/></modifier></type><name pos:line="1937" pos:column="35">conn<pos:position pos:line="1937" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1937" pos:column="40"/></parameter_list>
<block pos:line="1938" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="1939" pos:column="3">CURLcode<pos:position pos:line="1939" pos:column="11"/></name></type> <name pos:line="1939" pos:column="12">res<pos:position pos:line="1939" pos:column="15"/></name> <init pos:line="1939" pos:column="16">= <expr><name pos:line="1939" pos:column="18">CURLE_OK<pos:position pos:line="1939" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="1939" pos:column="27"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="1941" pos:column="3">bool<pos:position pos:line="1941" pos:column="7"/></name></type> <name pos:line="1941" pos:column="8">async<pos:position pos:line="1941" pos:column="13"/></name></decl>;<pos:position pos:line="1941" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1942" pos:column="3">bool<pos:position pos:line="1942" pos:column="7"/></name></type> <name pos:line="1942" pos:column="8">protocol_done<pos:position pos:line="1942" pos:column="21"/></name><init pos:line="1942" pos:column="21">=<expr><name pos:line="1942" pos:column="22">TRUE<pos:position pos:line="1942" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="1942" pos:column="27"/></decl_stmt> <comment type="block" pos:line="1942" pos:column="28">/* will be TRUE always since this is only used
                                within the easy interface */</comment>
  <expr_stmt><expr><call><name pos:line="1944" pos:column="3">Curl_pgrsTime<pos:position pos:line="1944" pos:column="16"/></name><argument_list pos:line="1944" pos:column="16">(<argument><expr><name pos:line="1944" pos:column="17">data<pos:position pos:line="1944" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="1944" pos:column="23">TIMER_STARTSINGLE<pos:position pos:line="1944" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1944" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1944" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1945" pos:column="3">res<pos:position pos:line="1945" pos:column="6"/></name> <operator pos:line="1945" pos:column="7">=<pos:position pos:line="1945" pos:column="8"/></operator> <call><name pos:line="1945" pos:column="9">Curl_connect<pos:position pos:line="1945" pos:column="21"/></name><argument_list pos:line="1945" pos:column="21">(<argument><expr><name pos:line="1945" pos:column="22">data<pos:position pos:line="1945" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1945" pos:column="28">conn<pos:position pos:line="1945" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="1945" pos:column="34">&amp;<pos:position pos:line="1945" pos:column="39"/></operator><name pos:line="1945" pos:column="35">async<pos:position pos:line="1945" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="1945" pos:column="42">&amp;<pos:position pos:line="1945" pos:column="47"/></operator><name pos:line="1945" pos:column="43">protocol_done<pos:position pos:line="1945" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1945" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1945" pos:column="58"/></expr_stmt>

  <if pos:line="1947" pos:column="3">if<condition pos:line="1947" pos:column="5">(<expr><operator pos:line="1947" pos:column="6">(<pos:position pos:line="1947" pos:column="7"/></operator><name pos:line="1947" pos:column="7">CURLE_OK<pos:position pos:line="1947" pos:column="15"/></name> <operator pos:line="1947" pos:column="16">==<pos:position pos:line="1947" pos:column="18"/></operator> <name pos:line="1947" pos:column="19">res<pos:position pos:line="1947" pos:column="22"/></name><operator pos:line="1947" pos:column="22">)<pos:position pos:line="1947" pos:column="23"/></operator> <operator pos:line="1947" pos:column="24">&amp;&amp;<pos:position pos:line="1947" pos:column="34"/></operator> <name pos:line="1947" pos:column="27">async<pos:position pos:line="1947" pos:column="32"/></name></expr>)<pos:position pos:line="1947" pos:column="33"/></condition><then pos:line="1947" pos:column="33"> <block pos:line="1947" pos:column="34">{
    <comment type="block" pos:line="1948" pos:column="5">/* Now, if async is TRUE here, we need to wait for the name
       to resolve */</comment>
    <expr_stmt><expr><name pos:line="1950" pos:column="5">res<pos:position pos:line="1950" pos:column="8"/></name> <operator pos:line="1950" pos:column="9">=<pos:position pos:line="1950" pos:column="10"/></operator> <call><name pos:line="1950" pos:column="11">Curl_wait_for_resolv<pos:position pos:line="1950" pos:column="31"/></name><argument_list pos:line="1950" pos:column="31">(<argument><expr><operator pos:line="1950" pos:column="32">*<pos:position pos:line="1950" pos:column="33"/></operator><name pos:line="1950" pos:column="33">conn<pos:position pos:line="1950" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="1950" pos:column="39">NULL<pos:position pos:line="1950" pos:column="43"/></name></expr></argument>)<pos:position pos:line="1950" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1950" pos:column="45"/></expr_stmt>
    <if pos:line="1951" pos:column="5">if<condition pos:line="1951" pos:column="7">(<expr><name pos:line="1951" pos:column="8">CURLE_OK<pos:position pos:line="1951" pos:column="16"/></name> <operator pos:line="1951" pos:column="17">==<pos:position pos:line="1951" pos:column="19"/></operator> <name pos:line="1951" pos:column="20">res<pos:position pos:line="1951" pos:column="23"/></name></expr>)<pos:position pos:line="1951" pos:column="24"/></condition><then pos:line="1951" pos:column="24">
      <comment type="block" pos:line="1952" pos:column="7">/* Resolved, continue with the connection */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="1953" pos:column="7">res<pos:position pos:line="1953" pos:column="10"/></name> <operator pos:line="1953" pos:column="11">=<pos:position pos:line="1953" pos:column="12"/></operator> <call><name pos:line="1953" pos:column="13">Curl_async_resolved<pos:position pos:line="1953" pos:column="32"/></name><argument_list pos:line="1953" pos:column="32">(<argument><expr><operator pos:line="1953" pos:column="33">*<pos:position pos:line="1953" pos:column="34"/></operator><name pos:line="1953" pos:column="34">conn<pos:position pos:line="1953" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="1953" pos:column="40">&amp;<pos:position pos:line="1953" pos:column="45"/></operator><name pos:line="1953" pos:column="41">protocol_done<pos:position pos:line="1953" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1953" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1953" pos:column="56"/></expr_stmt></block></then>
    <else pos:line="1954" pos:column="5">else
      <comment type="block" pos:line="1955" pos:column="7">/* if we can't resolve, we kill this "connection" now */</comment>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="1956" pos:column="7">(<pos:position pos:line="1956" pos:column="8"/></operator><name pos:line="1956" pos:column="8">void<pos:position pos:line="1956" pos:column="12"/></name><operator pos:line="1956" pos:column="12">)<pos:position pos:line="1956" pos:column="13"/></operator><call><name pos:line="1956" pos:column="13">Curl_disconnect<pos:position pos:line="1956" pos:column="28"/></name><argument_list pos:line="1956" pos:column="28">(<argument><expr><operator pos:line="1956" pos:column="29">*<pos:position pos:line="1956" pos:column="30"/></operator><name pos:line="1956" pos:column="30">conn<pos:position pos:line="1956" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1956" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1956" pos:column="36"/></expr_stmt></block></else></if>
  }<pos:position pos:line="1957" pos:column="4"/></block></then></if>

  <return pos:line="1959" pos:column="3">return <expr><name pos:line="1959" pos:column="10">res<pos:position pos:line="1959" pos:column="13"/></name></expr>;<pos:position pos:line="1959" pos:column="14"/></return>
}<pos:position pos:line="1960" pos:column="2"/></block></function>

<comment type="block" pos:line="1962" pos:column="1">/* Returns TRUE and sets '*url' if a request retry is wanted */</comment>
<function><type><name pos:line="1963" pos:column="1">bool<pos:position pos:line="1963" pos:column="5"/></name></type> <name pos:line="1963" pos:column="6">Curl_retry_request<pos:position pos:line="1963" pos:column="24"/></name><parameter_list pos:line="1963" pos:column="24">(<parameter><decl><type><name><name pos:line="1963" pos:column="25">struct<pos:position pos:line="1963" pos:column="31"/></name> <name pos:line="1963" pos:column="32">connectdata<pos:position pos:line="1963" pos:column="43"/></name></name> <modifier pos:line="1963" pos:column="44">*<pos:position pos:line="1963" pos:column="45"/></modifier></type><name pos:line="1963" pos:column="45">conn<pos:position pos:line="1963" pos:column="49"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="1964" pos:column="25">char<pos:position pos:line="1964" pos:column="29"/></name> <modifier pos:line="1964" pos:column="30">*<pos:position pos:line="1964" pos:column="31"/></modifier><modifier pos:line="1964" pos:column="31">*<pos:position pos:line="1964" pos:column="32"/></modifier></type><name pos:line="1964" pos:column="32">url<pos:position pos:line="1964" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1964" pos:column="36"/></parameter_list>
<block pos:line="1965" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="1966" pos:column="3">bool<pos:position pos:line="1966" pos:column="7"/></name></type> <name pos:line="1966" pos:column="8">retry<pos:position pos:line="1966" pos:column="13"/></name> <init pos:line="1966" pos:column="14">= <expr><name pos:line="1966" pos:column="16">FALSE<pos:position pos:line="1966" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="1966" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="1967" pos:column="3">struct<pos:position pos:line="1967" pos:column="9"/></name> <name pos:line="1967" pos:column="10">SessionHandle<pos:position pos:line="1967" pos:column="23"/></name></name> <modifier pos:line="1967" pos:column="24">*<pos:position pos:line="1967" pos:column="25"/></modifier></type><name pos:line="1967" pos:column="25">data<pos:position pos:line="1967" pos:column="29"/></name> <init pos:line="1967" pos:column="30">= <expr><name><name pos:line="1967" pos:column="32">conn<pos:position pos:line="1967" pos:column="36"/></name><operator pos:line="1967" pos:column="36">-&gt;<pos:position pos:line="1967" pos:column="41"/></operator><name pos:line="1967" pos:column="38">data<pos:position pos:line="1967" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="1967" pos:column="43"/></decl_stmt>

  <comment type="block" pos:line="1969" pos:column="3">/* if we're talking upload, we can't do the checks below, unless the protocol
     is HTTP as when uploading over HTTP we will still get a response */</comment>
  <if pos:line="1971" pos:column="3">if<condition pos:line="1971" pos:column="5">(<expr><name><name pos:line="1971" pos:column="6">data<pos:position pos:line="1971" pos:column="10"/></name><operator pos:line="1971" pos:column="10">-&gt;<pos:position pos:line="1971" pos:column="15"/></operator><name pos:line="1971" pos:column="12">set<pos:position pos:line="1971" pos:column="15"/></name><operator pos:line="1971" pos:column="15">.<pos:position pos:line="1971" pos:column="16"/></operator><name pos:line="1971" pos:column="16">upload<pos:position pos:line="1971" pos:column="22"/></name></name> <operator pos:line="1971" pos:column="23">&amp;&amp;<pos:position pos:line="1971" pos:column="33"/></operator> <operator pos:line="1971" pos:column="26">!<pos:position pos:line="1971" pos:column="27"/></operator><operator pos:line="1971" pos:column="27">(<pos:position pos:line="1971" pos:column="28"/></operator><name><name pos:line="1971" pos:column="28">conn<pos:position pos:line="1971" pos:column="32"/></name><operator pos:line="1971" pos:column="32">-&gt;<pos:position pos:line="1971" pos:column="37"/></operator><name pos:line="1971" pos:column="34">protocol<pos:position pos:line="1971" pos:column="42"/></name></name><operator pos:line="1971" pos:column="42">&amp;<pos:position pos:line="1971" pos:column="47"/></operator><name pos:line="1971" pos:column="43">PROT_HTTP<pos:position pos:line="1971" pos:column="52"/></name><operator pos:line="1971" pos:column="52">)<pos:position pos:line="1971" pos:column="53"/></operator></expr>)<pos:position pos:line="1971" pos:column="54"/></condition><then pos:line="1971" pos:column="54">
    <block type="pseudo"><return pos:line="1972" pos:column="5">return <expr><name pos:line="1972" pos:column="12">retry<pos:position pos:line="1972" pos:column="17"/></name></expr>;<pos:position pos:line="1972" pos:column="18"/></return></block></then></if>

  <if pos:line="1974" pos:column="3">if<condition pos:line="1974" pos:column="5">(<expr><operator pos:line="1974" pos:column="6">(<pos:position pos:line="1974" pos:column="7"/></operator><name><name pos:line="1974" pos:column="7">data<pos:position pos:line="1974" pos:column="11"/></name><operator pos:line="1974" pos:column="11">-&gt;<pos:position pos:line="1974" pos:column="16"/></operator><name pos:line="1974" pos:column="13">req<pos:position pos:line="1974" pos:column="16"/></name><operator pos:line="1974" pos:column="16">.<pos:position pos:line="1974" pos:column="17"/></operator><name pos:line="1974" pos:column="17">bytecount<pos:position pos:line="1974" pos:column="26"/></name></name> <operator pos:line="1974" pos:column="27">+<pos:position pos:line="1974" pos:column="28"/></operator>
      <name><name pos:line="1975" pos:column="7">data<pos:position pos:line="1975" pos:column="11"/></name><operator pos:line="1975" pos:column="11">-&gt;<pos:position pos:line="1975" pos:column="16"/></operator><name pos:line="1975" pos:column="13">req<pos:position pos:line="1975" pos:column="16"/></name><operator pos:line="1975" pos:column="16">.<pos:position pos:line="1975" pos:column="17"/></operator><name pos:line="1975" pos:column="17">headerbytecount<pos:position pos:line="1975" pos:column="32"/></name></name> <operator pos:line="1975" pos:column="33">==<pos:position pos:line="1975" pos:column="35"/></operator> <literal type="number" pos:line="1975" pos:column="36">0<pos:position pos:line="1975" pos:column="37"/></literal><operator pos:line="1975" pos:column="37">)<pos:position pos:line="1975" pos:column="38"/></operator> <operator pos:line="1975" pos:column="39">&amp;&amp;<pos:position pos:line="1975" pos:column="49"/></operator>
     <name><name pos:line="1976" pos:column="6">conn<pos:position pos:line="1976" pos:column="10"/></name><operator pos:line="1976" pos:column="10">-&gt;<pos:position pos:line="1976" pos:column="15"/></operator><name pos:line="1976" pos:column="12">bits<pos:position pos:line="1976" pos:column="16"/></name><operator pos:line="1976" pos:column="16">.<pos:position pos:line="1976" pos:column="17"/></operator><name pos:line="1976" pos:column="17">reuse<pos:position pos:line="1976" pos:column="22"/></name></name> <operator pos:line="1976" pos:column="23">&amp;&amp;<pos:position pos:line="1976" pos:column="33"/></operator>
     <operator pos:line="1977" pos:column="6">!<pos:position pos:line="1977" pos:column="7"/></operator><name><name pos:line="1977" pos:column="7">data<pos:position pos:line="1977" pos:column="11"/></name><operator pos:line="1977" pos:column="11">-&gt;<pos:position pos:line="1977" pos:column="16"/></operator><name pos:line="1977" pos:column="13">set<pos:position pos:line="1977" pos:column="16"/></name><operator pos:line="1977" pos:column="16">.<pos:position pos:line="1977" pos:column="17"/></operator><name pos:line="1977" pos:column="17">opt_no_body<pos:position pos:line="1977" pos:column="28"/></name></name></expr>)<pos:position pos:line="1977" pos:column="29"/></condition><then pos:line="1977" pos:column="29"> <block pos:line="1977" pos:column="30">{
    <comment type="block" pos:line="1978" pos:column="5">/* We got no data, we attempted to re-use a connection and yet we want a
       "body". This might happen if the connection was left alive when we were
       done using it before, but that was closed when we wanted to read from
       it again. Bad luck. Retry the same request on a fresh connect! */</comment>
    <expr_stmt><expr><call><name pos:line="1982" pos:column="5">infof<pos:position pos:line="1982" pos:column="10"/></name><argument_list pos:line="1982" pos:column="10">(<argument><expr><name><name pos:line="1982" pos:column="11">conn<pos:position pos:line="1982" pos:column="15"/></name><operator pos:line="1982" pos:column="15">-&gt;<pos:position pos:line="1982" pos:column="20"/></operator><name pos:line="1982" pos:column="17">data<pos:position pos:line="1982" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1982" pos:column="23">"Connection died, retrying a fresh connect\n"<pos:position pos:line="1982" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="1982" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="1982" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="1983" pos:column="5">*<pos:position pos:line="1983" pos:column="6"/></operator><name pos:line="1983" pos:column="6">url<pos:position pos:line="1983" pos:column="9"/></name> <operator pos:line="1983" pos:column="10">=<pos:position pos:line="1983" pos:column="11"/></operator> <call><name pos:line="1983" pos:column="12">strdup<pos:position pos:line="1983" pos:column="18"/></name><argument_list pos:line="1983" pos:column="18">(<argument><expr><name><name pos:line="1983" pos:column="19">conn<pos:position pos:line="1983" pos:column="23"/></name><operator pos:line="1983" pos:column="23">-&gt;<pos:position pos:line="1983" pos:column="28"/></operator><name pos:line="1983" pos:column="25">data<pos:position pos:line="1983" pos:column="29"/></name><operator pos:line="1983" pos:column="29">-&gt;<pos:position pos:line="1983" pos:column="34"/></operator><name pos:line="1983" pos:column="31">change<pos:position pos:line="1983" pos:column="37"/></name><operator pos:line="1983" pos:column="37">.<pos:position pos:line="1983" pos:column="38"/></operator><name pos:line="1983" pos:column="38">url<pos:position pos:line="1983" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="1983" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1983" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="1985" pos:column="5">conn<pos:position pos:line="1985" pos:column="9"/></name><operator pos:line="1985" pos:column="9">-&gt;<pos:position pos:line="1985" pos:column="14"/></operator><name pos:line="1985" pos:column="11">bits<pos:position pos:line="1985" pos:column="15"/></name><operator pos:line="1985" pos:column="15">.<pos:position pos:line="1985" pos:column="16"/></operator><name pos:line="1985" pos:column="16">close<pos:position pos:line="1985" pos:column="21"/></name></name> <operator pos:line="1985" pos:column="22">=<pos:position pos:line="1985" pos:column="23"/></operator> <name pos:line="1985" pos:column="24">TRUE<pos:position pos:line="1985" pos:column="28"/></name></expr>;<pos:position pos:line="1985" pos:column="29"/></expr_stmt> <comment type="block" pos:line="1985" pos:column="30">/* close this connection */</comment>
    <expr_stmt><expr><name><name pos:line="1986" pos:column="5">conn<pos:position pos:line="1986" pos:column="9"/></name><operator pos:line="1986" pos:column="9">-&gt;<pos:position pos:line="1986" pos:column="14"/></operator><name pos:line="1986" pos:column="11">bits<pos:position pos:line="1986" pos:column="15"/></name><operator pos:line="1986" pos:column="15">.<pos:position pos:line="1986" pos:column="16"/></operator><name pos:line="1986" pos:column="16">retry<pos:position pos:line="1986" pos:column="21"/></name></name> <operator pos:line="1986" pos:column="22">=<pos:position pos:line="1986" pos:column="23"/></operator> <name pos:line="1986" pos:column="24">TRUE<pos:position pos:line="1986" pos:column="28"/></name></expr>;<pos:position pos:line="1986" pos:column="29"/></expr_stmt> <comment type="block" pos:line="1986" pos:column="30">/* mark this as a connection we're about
                                to retry. Marking it this way should
                                prevent i.e HTTP transfers to return
                                error just because nothing has been
                                transfered! */</comment>
    <expr_stmt><expr><name pos:line="1991" pos:column="5">retry<pos:position pos:line="1991" pos:column="10"/></name> <operator pos:line="1991" pos:column="11">=<pos:position pos:line="1991" pos:column="12"/></operator> <name pos:line="1991" pos:column="13">TRUE<pos:position pos:line="1991" pos:column="17"/></name></expr>;<pos:position pos:line="1991" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="1992" pos:column="4"/></block></then></if>

  <return pos:line="1994" pos:column="3">return <expr><name pos:line="1994" pos:column="10">retry<pos:position pos:line="1994" pos:column="15"/></name></expr>;<pos:position pos:line="1994" pos:column="16"/></return>
}<pos:position pos:line="1995" pos:column="2"/></block></function>

<comment type="block" pos:line="1997" pos:column="1">/*
 * Curl_perform() is the internal high-level function that gets called by the
 * external curl_easy_perform() function. It inits, performs and cleans up a
 * single file transfer.
 */</comment>
<function><type><name pos:line="2002" pos:column="1">CURLcode<pos:position pos:line="2002" pos:column="9"/></name></type> <name pos:line="2002" pos:column="10">Curl_perform<pos:position pos:line="2002" pos:column="22"/></name><parameter_list pos:line="2002" pos:column="22">(<parameter><decl><type><name><name pos:line="2002" pos:column="23">struct<pos:position pos:line="2002" pos:column="29"/></name> <name pos:line="2002" pos:column="30">SessionHandle<pos:position pos:line="2002" pos:column="43"/></name></name> <modifier pos:line="2002" pos:column="44">*<pos:position pos:line="2002" pos:column="45"/></modifier></type><name pos:line="2002" pos:column="45">data<pos:position pos:line="2002" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2002" pos:column="50"/></parameter_list>
<block pos:line="2003" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="2004" pos:column="3">CURLcode<pos:position pos:line="2004" pos:column="11"/></name></type> <name pos:line="2004" pos:column="12">res<pos:position pos:line="2004" pos:column="15"/></name></decl>;<pos:position pos:line="2004" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2005" pos:column="3">CURLcode<pos:position pos:line="2005" pos:column="11"/></name></type> <name pos:line="2005" pos:column="12">res2<pos:position pos:line="2005" pos:column="16"/></name></decl>;<pos:position pos:line="2005" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="2006" pos:column="3">struct<pos:position pos:line="2006" pos:column="9"/></name> <name pos:line="2006" pos:column="10">connectdata<pos:position pos:line="2006" pos:column="21"/></name></name> <modifier pos:line="2006" pos:column="22">*<pos:position pos:line="2006" pos:column="23"/></modifier></type><name pos:line="2006" pos:column="23">conn<pos:position pos:line="2006" pos:column="27"/></name><init pos:line="2006" pos:column="27">=<expr><name pos:line="2006" pos:column="28">NULL<pos:position pos:line="2006" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="2006" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2007" pos:column="3">char<pos:position pos:line="2007" pos:column="7"/></name> <modifier pos:line="2007" pos:column="8">*<pos:position pos:line="2007" pos:column="9"/></modifier></type><name pos:line="2007" pos:column="9">newurl<pos:position pos:line="2007" pos:column="15"/></name> <init pos:line="2007" pos:column="16">= <expr><name pos:line="2007" pos:column="18">NULL<pos:position pos:line="2007" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="2007" pos:column="23"/></decl_stmt> <comment type="block" pos:line="2007" pos:column="24">/* possibly a new URL to follow to! */</comment>
  <decl_stmt><decl><type><name pos:line="2008" pos:column="3">bool<pos:position pos:line="2008" pos:column="7"/></name></type> <name pos:line="2008" pos:column="8">retry<pos:position pos:line="2008" pos:column="13"/></name> <init pos:line="2008" pos:column="14">= <expr><name pos:line="2008" pos:column="16">FALSE<pos:position pos:line="2008" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="2008" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="2010" pos:column="3">data<pos:position pos:line="2010" pos:column="7"/></name><operator pos:line="2010" pos:column="7">-&gt;<pos:position pos:line="2010" pos:column="12"/></operator><name pos:line="2010" pos:column="9">state<pos:position pos:line="2010" pos:column="14"/></name><operator pos:line="2010" pos:column="14">.<pos:position pos:line="2010" pos:column="15"/></operator><name pos:line="2010" pos:column="15">used_interface<pos:position pos:line="2010" pos:column="29"/></name></name> <operator pos:line="2010" pos:column="30">=<pos:position pos:line="2010" pos:column="31"/></operator> <name pos:line="2010" pos:column="32">Curl_if_easy<pos:position pos:line="2010" pos:column="44"/></name></expr>;<pos:position pos:line="2010" pos:column="45"/></expr_stmt>

  <expr_stmt><expr><name pos:line="2012" pos:column="3">res<pos:position pos:line="2012" pos:column="6"/></name> <operator pos:line="2012" pos:column="7">=<pos:position pos:line="2012" pos:column="8"/></operator> <call><name pos:line="2012" pos:column="9">Curl_pretransfer<pos:position pos:line="2012" pos:column="25"/></name><argument_list pos:line="2012" pos:column="25">(<argument><expr><name pos:line="2012" pos:column="26">data<pos:position pos:line="2012" pos:column="30"/></name></expr></argument>)<pos:position pos:line="2012" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2012" pos:column="32"/></expr_stmt>
  <if pos:line="2013" pos:column="3">if<condition pos:line="2013" pos:column="5">(<expr><name pos:line="2013" pos:column="6">res<pos:position pos:line="2013" pos:column="9"/></name></expr>)<pos:position pos:line="2013" pos:column="10"/></condition><then pos:line="2013" pos:column="10">
    <block type="pseudo"><return pos:line="2014" pos:column="5">return <expr><name pos:line="2014" pos:column="12">res<pos:position pos:line="2014" pos:column="15"/></name></expr>;<pos:position pos:line="2014" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="2016" pos:column="3">/*
   * It is important that there is NO 'return' from this function at any other
   * place than falling down to the end of the function! This is because we
   * have cleanup stuff that must be done before we get back, and that is only
   * performed after this do-while loop.
   */</comment>

  <do pos:line="2023" pos:column="3">do <block pos:line="2023" pos:column="6">{
    <expr_stmt><expr><name pos:line="2024" pos:column="5">res<pos:position pos:line="2024" pos:column="8"/></name> <operator pos:line="2024" pos:column="9">=<pos:position pos:line="2024" pos:column="10"/></operator> <call><name pos:line="2024" pos:column="11">connect_host<pos:position pos:line="2024" pos:column="23"/></name><argument_list pos:line="2024" pos:column="23">(<argument><expr><name pos:line="2024" pos:column="24">data<pos:position pos:line="2024" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="2024" pos:column="30">&amp;<pos:position pos:line="2024" pos:column="35"/></operator><name pos:line="2024" pos:column="31">conn<pos:position pos:line="2024" pos:column="35"/></name></expr></argument>)<pos:position pos:line="2024" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="2024" pos:column="37"/></expr_stmt>   <comment type="block" pos:line="2024" pos:column="40">/* primary connection */</comment>

    <if pos:line="2026" pos:column="5">if<condition pos:line="2026" pos:column="7">(<expr><name pos:line="2026" pos:column="8">res<pos:position pos:line="2026" pos:column="11"/></name> <operator pos:line="2026" pos:column="12">==<pos:position pos:line="2026" pos:column="14"/></operator> <name pos:line="2026" pos:column="15">CURLE_OK<pos:position pos:line="2026" pos:column="23"/></name></expr>)<pos:position pos:line="2026" pos:column="24"/></condition><then pos:line="2026" pos:column="24"> <block pos:line="2026" pos:column="25">{
      <decl_stmt><decl><type><name pos:line="2027" pos:column="7">bool<pos:position pos:line="2027" pos:column="11"/></name></type> <name pos:line="2027" pos:column="12">do_done<pos:position pos:line="2027" pos:column="19"/></name></decl>;<pos:position pos:line="2027" pos:column="20"/></decl_stmt>
      <if pos:line="2028" pos:column="7">if<condition pos:line="2028" pos:column="9">(<expr><name><name pos:line="2028" pos:column="10">data<pos:position pos:line="2028" pos:column="14"/></name><operator pos:line="2028" pos:column="14">-&gt;<pos:position pos:line="2028" pos:column="19"/></operator><name pos:line="2028" pos:column="16">set<pos:position pos:line="2028" pos:column="19"/></name><operator pos:line="2028" pos:column="19">.<pos:position pos:line="2028" pos:column="20"/></operator><name pos:line="2028" pos:column="20">connect_only<pos:position pos:line="2028" pos:column="32"/></name></name></expr>)<pos:position pos:line="2028" pos:column="33"/></condition><then pos:line="2028" pos:column="33"> <block pos:line="2028" pos:column="34">{
        <comment type="block" pos:line="2029" pos:column="9">/* keep connection open for application to use the socket */</comment>
        <expr_stmt><expr><name><name pos:line="2030" pos:column="9">conn<pos:position pos:line="2030" pos:column="13"/></name><operator pos:line="2030" pos:column="13">-&gt;<pos:position pos:line="2030" pos:column="18"/></operator><name pos:line="2030" pos:column="15">bits<pos:position pos:line="2030" pos:column="19"/></name><operator pos:line="2030" pos:column="19">.<pos:position pos:line="2030" pos:column="20"/></operator><name pos:line="2030" pos:column="20">close<pos:position pos:line="2030" pos:column="25"/></name></name> <operator pos:line="2030" pos:column="26">=<pos:position pos:line="2030" pos:column="27"/></operator> <name pos:line="2030" pos:column="28">FALSE<pos:position pos:line="2030" pos:column="33"/></name></expr>;<pos:position pos:line="2030" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="2031" pos:column="9">res<pos:position pos:line="2031" pos:column="12"/></name> <operator pos:line="2031" pos:column="13">=<pos:position pos:line="2031" pos:column="14"/></operator> <call><name pos:line="2031" pos:column="15">Curl_done<pos:position pos:line="2031" pos:column="24"/></name><argument_list pos:line="2031" pos:column="24">(<argument><expr><operator pos:line="2031" pos:column="25">&amp;<pos:position pos:line="2031" pos:column="30"/></operator><name pos:line="2031" pos:column="26">conn<pos:position pos:line="2031" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="2031" pos:column="32">CURLE_OK<pos:position pos:line="2031" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="2031" pos:column="42">FALSE<pos:position pos:line="2031" pos:column="47"/></name></expr></argument>)<pos:position pos:line="2031" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="2031" pos:column="49"/></expr_stmt>
        <break pos:line="2032" pos:column="9">break;<pos:position pos:line="2032" pos:column="15"/></break>
      }<pos:position pos:line="2033" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="2034" pos:column="7">res<pos:position pos:line="2034" pos:column="10"/></name> <operator pos:line="2034" pos:column="11">=<pos:position pos:line="2034" pos:column="12"/></operator> <call><name pos:line="2034" pos:column="13">Curl_do<pos:position pos:line="2034" pos:column="20"/></name><argument_list pos:line="2034" pos:column="20">(<argument><expr><operator pos:line="2034" pos:column="21">&amp;<pos:position pos:line="2034" pos:column="26"/></operator><name pos:line="2034" pos:column="22">conn<pos:position pos:line="2034" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="2034" pos:column="28">&amp;<pos:position pos:line="2034" pos:column="33"/></operator><name pos:line="2034" pos:column="29">do_done<pos:position pos:line="2034" pos:column="36"/></name></expr></argument>)<pos:position pos:line="2034" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="2034" pos:column="38"/></expr_stmt>

      <if pos:line="2036" pos:column="7">if<condition pos:line="2036" pos:column="9">(<expr><name pos:line="2036" pos:column="10">res<pos:position pos:line="2036" pos:column="13"/></name> <operator pos:line="2036" pos:column="14">==<pos:position pos:line="2036" pos:column="16"/></operator> <name pos:line="2036" pos:column="17">CURLE_OK<pos:position pos:line="2036" pos:column="25"/></name></expr>)<pos:position pos:line="2036" pos:column="26"/></condition><then pos:line="2036" pos:column="26"> <block pos:line="2036" pos:column="27">{
        <expr_stmt><expr><name pos:line="2037" pos:column="9">res<pos:position pos:line="2037" pos:column="12"/></name> <operator pos:line="2037" pos:column="13">=<pos:position pos:line="2037" pos:column="14"/></operator> <call><name pos:line="2037" pos:column="15">Transfer<pos:position pos:line="2037" pos:column="23"/></name><argument_list pos:line="2037" pos:column="23">(<argument><expr><name pos:line="2037" pos:column="24">conn<pos:position pos:line="2037" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2037" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="2037" pos:column="30"/></expr_stmt> <comment type="block" pos:line="2037" pos:column="31">/* now fetch that URL please */</comment>
        <if pos:line="2038" pos:column="9">if<condition pos:line="2038" pos:column="11">(<expr><name pos:line="2038" pos:column="12">res<pos:position pos:line="2038" pos:column="15"/></name> <operator pos:line="2038" pos:column="16">==<pos:position pos:line="2038" pos:column="18"/></operator> <name pos:line="2038" pos:column="19">CURLE_OK<pos:position pos:line="2038" pos:column="27"/></name></expr>)<pos:position pos:line="2038" pos:column="28"/></condition><then pos:line="2038" pos:column="28"> <block pos:line="2038" pos:column="29">{
          <expr_stmt><expr><name pos:line="2039" pos:column="11">retry<pos:position pos:line="2039" pos:column="16"/></name> <operator pos:line="2039" pos:column="17">=<pos:position pos:line="2039" pos:column="18"/></operator> <call><name pos:line="2039" pos:column="19">Curl_retry_request<pos:position pos:line="2039" pos:column="37"/></name><argument_list pos:line="2039" pos:column="37">(<argument><expr><name pos:line="2039" pos:column="38">conn<pos:position pos:line="2039" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="2039" pos:column="44">&amp;<pos:position pos:line="2039" pos:column="49"/></operator><name pos:line="2039" pos:column="45">newurl<pos:position pos:line="2039" pos:column="51"/></name></expr></argument>)<pos:position pos:line="2039" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="2039" pos:column="53"/></expr_stmt>

          <if pos:line="2041" pos:column="11">if<condition pos:line="2041" pos:column="13">(<expr><operator pos:line="2041" pos:column="14">!<pos:position pos:line="2041" pos:column="15"/></operator><name pos:line="2041" pos:column="15">retry<pos:position pos:line="2041" pos:column="20"/></name></expr>)<pos:position pos:line="2041" pos:column="21"/></condition><then pos:line="2041" pos:column="21">
            <comment type="block" pos:line="2042" pos:column="13">/*
             * We must duplicate the new URL here as the connection data may
             * be free()ed in the Curl_done() function.
             */</comment>
            <block type="pseudo"><expr_stmt><expr><name pos:line="2046" pos:column="13">newurl<pos:position pos:line="2046" pos:column="19"/></name> <operator pos:line="2046" pos:column="20">=<pos:position pos:line="2046" pos:column="21"/></operator> <ternary><condition><expr><name><name pos:line="2046" pos:column="22">data<pos:position pos:line="2046" pos:column="26"/></name><operator pos:line="2046" pos:column="26">-&gt;<pos:position pos:line="2046" pos:column="31"/></operator><name pos:line="2046" pos:column="28">req<pos:position pos:line="2046" pos:column="31"/></name><operator pos:line="2046" pos:column="31">.<pos:position pos:line="2046" pos:column="32"/></operator><name pos:line="2046" pos:column="32">newurl<pos:position pos:line="2046" pos:column="38"/></name></name></expr>?<pos:position pos:line="2046" pos:column="39"/></condition><then><expr><call><name pos:line="2046" pos:column="39">strdup<pos:position pos:line="2046" pos:column="45"/></name><argument_list pos:line="2046" pos:column="45">(<argument><expr><name><name pos:line="2046" pos:column="46">data<pos:position pos:line="2046" pos:column="50"/></name><operator pos:line="2046" pos:column="50">-&gt;<pos:position pos:line="2046" pos:column="55"/></operator><name pos:line="2046" pos:column="52">req<pos:position pos:line="2046" pos:column="55"/></name><operator pos:line="2046" pos:column="55">.<pos:position pos:line="2046" pos:column="56"/></operator><name pos:line="2046" pos:column="56">newurl<pos:position pos:line="2046" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="2046" pos:column="63"/></argument_list></call></expr></then><else pos:line="2046" pos:column="63">:<expr><name pos:line="2046" pos:column="64">NULL<pos:position pos:line="2046" pos:column="68"/></name></expr></else></ternary></expr>;<pos:position pos:line="2046" pos:column="69"/></expr_stmt></block></then></if>
        }<pos:position pos:line="2047" pos:column="10"/></block></then>
        <else pos:line="2048" pos:column="9">else <block pos:line="2048" pos:column="14">{
          <comment type="block" pos:line="2049" pos:column="11">/* The transfer phase returned error, we mark the connection to get
           * closed to prevent being re-used. This is becasue we can't
           * possibly know if the connection is in a good shape or not now. */</comment>
          <expr_stmt><expr><name><name pos:line="2052" pos:column="11">conn<pos:position pos:line="2052" pos:column="15"/></name><operator pos:line="2052" pos:column="15">-&gt;<pos:position pos:line="2052" pos:column="20"/></operator><name pos:line="2052" pos:column="17">bits<pos:position pos:line="2052" pos:column="21"/></name><operator pos:line="2052" pos:column="21">.<pos:position pos:line="2052" pos:column="22"/></operator><name pos:line="2052" pos:column="22">close<pos:position pos:line="2052" pos:column="27"/></name></name> <operator pos:line="2052" pos:column="28">=<pos:position pos:line="2052" pos:column="29"/></operator> <name pos:line="2052" pos:column="30">TRUE<pos:position pos:line="2052" pos:column="34"/></name></expr>;<pos:position pos:line="2052" pos:column="35"/></expr_stmt>

          <if pos:line="2054" pos:column="11">if<condition pos:line="2054" pos:column="13">(<expr><name pos:line="2054" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="2054" pos:column="29"/></name> <operator pos:line="2054" pos:column="30">!=<pos:position pos:line="2054" pos:column="32"/></operator> <name><name pos:line="2054" pos:column="33">conn<pos:position pos:line="2054" pos:column="37"/></name><operator pos:line="2054" pos:column="37">-&gt;<pos:position pos:line="2054" pos:column="42"/></operator><name pos:line="2054" pos:column="39">sock<pos:position pos:line="2054" pos:column="43"/></name><index pos:line="2054" pos:column="43">[<expr><name pos:line="2054" pos:column="44">SECONDARYSOCKET<pos:position pos:line="2054" pos:column="59"/></name></expr>]<pos:position pos:line="2054" pos:column="60"/></index></name></expr>)<pos:position pos:line="2054" pos:column="61"/></condition><then pos:line="2054" pos:column="61"> <block pos:line="2054" pos:column="62">{
            <comment type="block" pos:line="2055" pos:column="13">/* if we failed anywhere, we must clean up the secondary socket if
               it was used */</comment>
            <expr_stmt><expr><call><name pos:line="2057" pos:column="13">sclose<pos:position pos:line="2057" pos:column="19"/></name><argument_list pos:line="2057" pos:column="19">(<argument><expr><name><name pos:line="2057" pos:column="20">conn<pos:position pos:line="2057" pos:column="24"/></name><operator pos:line="2057" pos:column="24">-&gt;<pos:position pos:line="2057" pos:column="29"/></operator><name pos:line="2057" pos:column="26">sock<pos:position pos:line="2057" pos:column="30"/></name><index pos:line="2057" pos:column="30">[<expr><name pos:line="2057" pos:column="31">SECONDARYSOCKET<pos:position pos:line="2057" pos:column="46"/></name></expr>]<pos:position pos:line="2057" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="2057" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="2057" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="2058" pos:column="13">conn<pos:position pos:line="2058" pos:column="17"/></name><operator pos:line="2058" pos:column="17">-&gt;<pos:position pos:line="2058" pos:column="22"/></operator><name pos:line="2058" pos:column="19">sock<pos:position pos:line="2058" pos:column="23"/></name><index pos:line="2058" pos:column="23">[<expr><name pos:line="2058" pos:column="24">SECONDARYSOCKET<pos:position pos:line="2058" pos:column="39"/></name></expr>]<pos:position pos:line="2058" pos:column="40"/></index></name> <operator pos:line="2058" pos:column="41">=<pos:position pos:line="2058" pos:column="42"/></operator> <name pos:line="2058" pos:column="43">CURL_SOCKET_BAD<pos:position pos:line="2058" pos:column="58"/></name></expr>;<pos:position pos:line="2058" pos:column="59"/></expr_stmt>
          }<pos:position pos:line="2059" pos:column="12"/></block></then></if>
        }<pos:position pos:line="2060" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="2062" pos:column="9">/* Always run Curl_done(), even if some of the previous calls
           failed, but return the previous (original) error code */</comment>
        <expr_stmt><expr><name pos:line="2064" pos:column="9">res2<pos:position pos:line="2064" pos:column="13"/></name> <operator pos:line="2064" pos:column="14">=<pos:position pos:line="2064" pos:column="15"/></operator> <call><name pos:line="2064" pos:column="16">Curl_done<pos:position pos:line="2064" pos:column="25"/></name><argument_list pos:line="2064" pos:column="25">(<argument><expr><operator pos:line="2064" pos:column="26">&amp;<pos:position pos:line="2064" pos:column="31"/></operator><name pos:line="2064" pos:column="27">conn<pos:position pos:line="2064" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="2064" pos:column="33">res<pos:position pos:line="2064" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="2064" pos:column="38">FALSE<pos:position pos:line="2064" pos:column="43"/></name></expr></argument>)<pos:position pos:line="2064" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="2064" pos:column="45"/></expr_stmt>

        <if pos:line="2066" pos:column="9">if<condition pos:line="2066" pos:column="11">(<expr><name pos:line="2066" pos:column="12">CURLE_OK<pos:position pos:line="2066" pos:column="20"/></name> <operator pos:line="2066" pos:column="21">==<pos:position pos:line="2066" pos:column="23"/></operator> <name pos:line="2066" pos:column="24">res<pos:position pos:line="2066" pos:column="27"/></name></expr>)<pos:position pos:line="2066" pos:column="28"/></condition><then pos:line="2066" pos:column="28">
          <block type="pseudo"><expr_stmt><expr><name pos:line="2067" pos:column="11">res<pos:position pos:line="2067" pos:column="14"/></name> <operator pos:line="2067" pos:column="15">=<pos:position pos:line="2067" pos:column="16"/></operator> <name pos:line="2067" pos:column="17">res2<pos:position pos:line="2067" pos:column="21"/></name></expr>;<pos:position pos:line="2067" pos:column="22"/></expr_stmt></block></then></if>
      }<pos:position pos:line="2068" pos:column="8"/></block></then>
      <elseif pos:line="2069" pos:column="7">else <if pos:line="2069" pos:column="12">if<condition pos:line="2069" pos:column="14">(<expr><name pos:line="2069" pos:column="15">conn<pos:position pos:line="2069" pos:column="19"/></name></expr>)<pos:position pos:line="2069" pos:column="20"/></condition><then pos:line="2069" pos:column="20">
        <comment type="block" pos:line="2070" pos:column="9">/* Curl_do() failed, clean up left-overs in the done-call, but note
           that at some cases the conn pointer is NULL when Curl_do() failed
           and the connection cache is very small so only call Curl_done() if
           conn is still "alive".
        */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="2075" pos:column="9">res2<pos:position pos:line="2075" pos:column="13"/></name> <operator pos:line="2075" pos:column="14">=<pos:position pos:line="2075" pos:column="15"/></operator> <call><name pos:line="2075" pos:column="16">Curl_done<pos:position pos:line="2075" pos:column="25"/></name><argument_list pos:line="2075" pos:column="25">(<argument><expr><operator pos:line="2075" pos:column="26">&amp;<pos:position pos:line="2075" pos:column="31"/></operator><name pos:line="2075" pos:column="27">conn<pos:position pos:line="2075" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="2075" pos:column="33">res<pos:position pos:line="2075" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="2075" pos:column="38">FALSE<pos:position pos:line="2075" pos:column="43"/></name></expr></argument>)<pos:position pos:line="2075" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="2075" pos:column="45"/></expr_stmt></block></then></if></elseif></if>

      <comment type="block" pos:line="2077" pos:column="7">/*
       * Important: 'conn' cannot be used here, since it may have been closed
       * in 'Curl_done' or other functions.
       */</comment>

      <if pos:line="2082" pos:column="7">if<condition pos:line="2082" pos:column="9">(<expr><operator pos:line="2082" pos:column="10">(<pos:position pos:line="2082" pos:column="11"/></operator><name pos:line="2082" pos:column="11">res<pos:position pos:line="2082" pos:column="14"/></name> <operator pos:line="2082" pos:column="15">==<pos:position pos:line="2082" pos:column="17"/></operator> <name pos:line="2082" pos:column="18">CURLE_OK<pos:position pos:line="2082" pos:column="26"/></name><operator pos:line="2082" pos:column="26">)<pos:position pos:line="2082" pos:column="27"/></operator> <operator pos:line="2082" pos:column="28">&amp;&amp;<pos:position pos:line="2082" pos:column="38"/></operator> <name pos:line="2082" pos:column="31">newurl<pos:position pos:line="2082" pos:column="37"/></name></expr>)<pos:position pos:line="2082" pos:column="38"/></condition><then pos:line="2082" pos:column="38"> <block pos:line="2082" pos:column="39">{
        <expr_stmt><expr><name pos:line="2083" pos:column="9">res<pos:position pos:line="2083" pos:column="12"/></name> <operator pos:line="2083" pos:column="13">=<pos:position pos:line="2083" pos:column="14"/></operator> <call><name pos:line="2083" pos:column="15">Curl_follow<pos:position pos:line="2083" pos:column="26"/></name><argument_list pos:line="2083" pos:column="26">(<argument><expr><name pos:line="2083" pos:column="27">data<pos:position pos:line="2083" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="2083" pos:column="33">newurl<pos:position pos:line="2083" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="2083" pos:column="41">retry<pos:position pos:line="2083" pos:column="46"/></name></expr></argument>)<pos:position pos:line="2083" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="2083" pos:column="48"/></expr_stmt>
        <if pos:line="2084" pos:column="9">if<condition pos:line="2084" pos:column="11">(<expr><name pos:line="2084" pos:column="12">CURLE_OK<pos:position pos:line="2084" pos:column="20"/></name> <operator pos:line="2084" pos:column="21">==<pos:position pos:line="2084" pos:column="23"/></operator> <name pos:line="2084" pos:column="24">res<pos:position pos:line="2084" pos:column="27"/></name></expr>)<pos:position pos:line="2084" pos:column="28"/></condition><then pos:line="2084" pos:column="28"> <block pos:line="2084" pos:column="29">{
          <expr_stmt><expr><name pos:line="2085" pos:column="11">newurl<pos:position pos:line="2085" pos:column="17"/></name> <operator pos:line="2085" pos:column="18">=<pos:position pos:line="2085" pos:column="19"/></operator> <name pos:line="2085" pos:column="20">NULL<pos:position pos:line="2085" pos:column="24"/></name></expr>;<pos:position pos:line="2085" pos:column="25"/></expr_stmt>
          <continue pos:line="2086" pos:column="11">continue;<pos:position pos:line="2086" pos:column="20"/></continue>
        }<pos:position pos:line="2087" pos:column="10"/></block></then></if>
      }<pos:position pos:line="2088" pos:column="8"/></block></then></if>
    }<pos:position pos:line="2089" pos:column="6"/></block></then></if>
    <break pos:line="2090" pos:column="5">break;<pos:position pos:line="2090" pos:column="11"/></break> <comment type="block" pos:line="2090" pos:column="12">/* it only reaches here when this shouldn't loop */</comment>

  }<pos:position pos:line="2092" pos:column="4"/></block> while<condition pos:line="2092" pos:column="10">(<expr><literal type="number" pos:line="2092" pos:column="11">1<pos:position pos:line="2092" pos:column="12"/></literal></expr>)<pos:position pos:line="2092" pos:column="13"/></condition>;<pos:position pos:line="2092" pos:column="14"/></do> <comment type="block" pos:line="2092" pos:column="15">/* loop if Location: */</comment>

  <if pos:line="2094" pos:column="3">if<condition pos:line="2094" pos:column="5">(<expr><name pos:line="2094" pos:column="6">newurl<pos:position pos:line="2094" pos:column="12"/></name></expr>)<pos:position pos:line="2094" pos:column="13"/></condition><then pos:line="2094" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="2095" pos:column="5">free<pos:position pos:line="2095" pos:column="9"/></name><argument_list pos:line="2095" pos:column="9">(<argument><expr><name pos:line="2095" pos:column="10">newurl<pos:position pos:line="2095" pos:column="16"/></name></expr></argument>)<pos:position pos:line="2095" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="2095" pos:column="18"/></expr_stmt></block></then></if>

  <if pos:line="2097" pos:column="3">if<condition pos:line="2097" pos:column="5">(<expr><name pos:line="2097" pos:column="6">res<pos:position pos:line="2097" pos:column="9"/></name> <operator pos:line="2097" pos:column="10">&amp;&amp;<pos:position pos:line="2097" pos:column="20"/></operator> <operator pos:line="2097" pos:column="13">!<pos:position pos:line="2097" pos:column="14"/></operator><name><name pos:line="2097" pos:column="14">data<pos:position pos:line="2097" pos:column="18"/></name><operator pos:line="2097" pos:column="18">-&gt;<pos:position pos:line="2097" pos:column="23"/></operator><name pos:line="2097" pos:column="20">state<pos:position pos:line="2097" pos:column="25"/></name><operator pos:line="2097" pos:column="25">.<pos:position pos:line="2097" pos:column="26"/></operator><name pos:line="2097" pos:column="26">errorbuf<pos:position pos:line="2097" pos:column="34"/></name></name></expr>)<pos:position pos:line="2097" pos:column="35"/></condition><then pos:line="2097" pos:column="35"> <block pos:line="2097" pos:column="36">{
    <comment type="block" pos:line="2098" pos:column="5">/*
     * As an extra precaution: if no error string has been set and there was
     * an error, use the strerror() string or if things are so bad that not
     * even that is good, set a bad string that mentions the error code.
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="2103" pos:column="5">const<pos:position pos:line="2103" pos:column="10"/></specifier> <name pos:line="2103" pos:column="11">char<pos:position pos:line="2103" pos:column="15"/></name> <modifier pos:line="2103" pos:column="16">*<pos:position pos:line="2103" pos:column="17"/></modifier></type><name pos:line="2103" pos:column="17">str<pos:position pos:line="2103" pos:column="20"/></name> <init pos:line="2103" pos:column="21">= <expr><call><name pos:line="2103" pos:column="23">curl_easy_strerror<pos:position pos:line="2103" pos:column="41"/></name><argument_list pos:line="2103" pos:column="41">(<argument><expr><name pos:line="2103" pos:column="42">res<pos:position pos:line="2103" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2103" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2103" pos:column="47"/></decl_stmt>
    <if pos:line="2104" pos:column="5">if<condition pos:line="2104" pos:column="7">(<expr><operator pos:line="2104" pos:column="8">!<pos:position pos:line="2104" pos:column="9"/></operator><name pos:line="2104" pos:column="9">str<pos:position pos:line="2104" pos:column="12"/></name></expr>)<pos:position pos:line="2104" pos:column="13"/></condition><then pos:line="2104" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="2105" pos:column="7">failf<pos:position pos:line="2105" pos:column="12"/></name><argument_list pos:line="2105" pos:column="12">(<argument><expr><name pos:line="2105" pos:column="13">data<pos:position pos:line="2105" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2105" pos:column="19">"unspecified error %d"<pos:position pos:line="2105" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="2105" pos:column="43">(<pos:position pos:line="2105" pos:column="44"/></operator><name pos:line="2105" pos:column="44">int<pos:position pos:line="2105" pos:column="47"/></name><operator pos:line="2105" pos:column="47">)<pos:position pos:line="2105" pos:column="48"/></operator><name pos:line="2105" pos:column="48">res<pos:position pos:line="2105" pos:column="51"/></name></expr></argument>)<pos:position pos:line="2105" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="2105" pos:column="53"/></expr_stmt></block></then>
    <else pos:line="2106" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="2107" pos:column="7">failf<pos:position pos:line="2107" pos:column="12"/></name><argument_list pos:line="2107" pos:column="12">(<argument><expr><name pos:line="2107" pos:column="13">data<pos:position pos:line="2107" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2107" pos:column="19">"%s"<pos:position pos:line="2107" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="2107" pos:column="25">str<pos:position pos:line="2107" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2107" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="2107" pos:column="30"/></expr_stmt></block></else></if>
  }<pos:position pos:line="2108" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="2110" pos:column="3">/* run post-transfer uncondionally, but don't clobber the return code if
     we already have an error code recorder */</comment>
  <expr_stmt><expr><name pos:line="2112" pos:column="3">res2<pos:position pos:line="2112" pos:column="7"/></name> <operator pos:line="2112" pos:column="8">=<pos:position pos:line="2112" pos:column="9"/></operator> <call><name pos:line="2112" pos:column="10">Curl_posttransfer<pos:position pos:line="2112" pos:column="27"/></name><argument_list pos:line="2112" pos:column="27">(<argument><expr><name pos:line="2112" pos:column="28">data<pos:position pos:line="2112" pos:column="32"/></name></expr></argument>)<pos:position pos:line="2112" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2112" pos:column="34"/></expr_stmt>
  <if pos:line="2113" pos:column="3">if<condition pos:line="2113" pos:column="5">(<expr><operator pos:line="2113" pos:column="6">!<pos:position pos:line="2113" pos:column="7"/></operator><name pos:line="2113" pos:column="7">res<pos:position pos:line="2113" pos:column="10"/></name> <operator pos:line="2113" pos:column="11">&amp;&amp;<pos:position pos:line="2113" pos:column="21"/></operator> <name pos:line="2113" pos:column="14">res2<pos:position pos:line="2113" pos:column="18"/></name></expr>)<pos:position pos:line="2113" pos:column="19"/></condition><then pos:line="2113" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name pos:line="2114" pos:column="5">res<pos:position pos:line="2114" pos:column="8"/></name> <operator pos:line="2114" pos:column="9">=<pos:position pos:line="2114" pos:column="10"/></operator> <name pos:line="2114" pos:column="11">res2<pos:position pos:line="2114" pos:column="15"/></name></expr>;<pos:position pos:line="2114" pos:column="16"/></expr_stmt></block></then></if>

  <return pos:line="2116" pos:column="3">return <expr><name pos:line="2116" pos:column="10">res<pos:position pos:line="2116" pos:column="13"/></name></expr>;<pos:position pos:line="2116" pos:column="14"/></return>
}<pos:position pos:line="2117" pos:column="2"/></block></function>

<comment type="block" pos:line="2119" pos:column="1">/*
 * Curl_setup_transfer() is called to setup some basic properties for the
 * upcoming transfer.
 */</comment>
<function><type><name pos:line="2123" pos:column="1">CURLcode<pos:position pos:line="2123" pos:column="9"/></name></type>
<name pos:line="2124" pos:column="1">Curl_setup_transfer<pos:position pos:line="2124" pos:column="20"/></name><parameter_list pos:line="2124" pos:column="20">(
  <parameter><decl><type><name><name pos:line="2125" pos:column="3">struct<pos:position pos:line="2125" pos:column="9"/></name> <name pos:line="2125" pos:column="10">connectdata<pos:position pos:line="2125" pos:column="21"/></name></name> <modifier pos:line="2125" pos:column="22">*<pos:position pos:line="2125" pos:column="23"/></modifier></type><name pos:line="2125" pos:column="23">conn<pos:position pos:line="2125" pos:column="27"/></name></decl></parameter>, <comment type="block" pos:line="2125" pos:column="29">/* connection data */</comment>
  <parameter><decl><type><name pos:line="2126" pos:column="3">int<pos:position pos:line="2126" pos:column="6"/></name></type> <name pos:line="2126" pos:column="7">sockindex<pos:position pos:line="2126" pos:column="16"/></name></decl></parameter>,            <comment type="block" pos:line="2126" pos:column="29">/* socket index to read from or -1 */</comment>
  <parameter><decl><type><name pos:line="2127" pos:column="3">curl_off_t<pos:position pos:line="2127" pos:column="13"/></name></type> <name pos:line="2127" pos:column="14">size<pos:position pos:line="2127" pos:column="18"/></name></decl></parameter>,          <comment type="block" pos:line="2127" pos:column="29">/* -1 if unknown at this point */</comment>
  <parameter><decl><type><name pos:line="2128" pos:column="3">bool<pos:position pos:line="2128" pos:column="7"/></name></type> <name pos:line="2128" pos:column="8">getheader<pos:position pos:line="2128" pos:column="17"/></name></decl></parameter>,           <comment type="block" pos:line="2128" pos:column="29">/* TRUE if header parsing is wanted */</comment>
  <parameter><decl><type><name pos:line="2129" pos:column="3">curl_off_t<pos:position pos:line="2129" pos:column="13"/></name> <modifier pos:line="2129" pos:column="14">*<pos:position pos:line="2129" pos:column="15"/></modifier></type><name pos:line="2129" pos:column="15">bytecountp<pos:position pos:line="2129" pos:column="25"/></name></decl></parameter>,   <comment type="block" pos:line="2129" pos:column="29">/* return number of bytes read or NULL */</comment>
  <parameter><decl><type><name pos:line="2130" pos:column="3">int<pos:position pos:line="2130" pos:column="6"/></name></type> <name pos:line="2130" pos:column="7">writesockindex<pos:position pos:line="2130" pos:column="21"/></name></decl></parameter>,       <comment type="block" pos:line="2130" pos:column="29">/* socket index to write to, it may very well be
                               the same we read from. -1 disables */</comment>
  <parameter><decl><type><name pos:line="2132" pos:column="3">curl_off_t<pos:position pos:line="2132" pos:column="13"/></name> <modifier pos:line="2132" pos:column="14">*<pos:position pos:line="2132" pos:column="15"/></modifier></type><name pos:line="2132" pos:column="15">writecountp<pos:position pos:line="2132" pos:column="26"/></name></decl></parameter>   <comment type="block" pos:line="2132" pos:column="29">/* return number of bytes written or NULL */</comment>
  )<pos:position pos:line="2133" pos:column="4"/></parameter_list>
<block pos:line="2134" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="2135" pos:column="3">struct<pos:position pos:line="2135" pos:column="9"/></name> <name pos:line="2135" pos:column="10">SessionHandle<pos:position pos:line="2135" pos:column="23"/></name></name> <modifier pos:line="2135" pos:column="24">*<pos:position pos:line="2135" pos:column="25"/></modifier></type><name pos:line="2135" pos:column="25">data<pos:position pos:line="2135" pos:column="29"/></name></decl>;<pos:position pos:line="2135" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="2136" pos:column="3">struct<pos:position pos:line="2136" pos:column="9"/></name> <name pos:line="2136" pos:column="10">SingleRequest<pos:position pos:line="2136" pos:column="23"/></name></name> <modifier pos:line="2136" pos:column="24">*<pos:position pos:line="2136" pos:column="25"/></modifier></type><name pos:line="2136" pos:column="25">k<pos:position pos:line="2136" pos:column="26"/></name></decl>;<pos:position pos:line="2136" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="2138" pos:column="3">DEBUGASSERT<pos:position pos:line="2138" pos:column="14"/></name><argument_list pos:line="2138" pos:column="14">(<argument><expr><name pos:line="2138" pos:column="15">conn<pos:position pos:line="2138" pos:column="19"/></name> <operator pos:line="2138" pos:column="20">!=<pos:position pos:line="2138" pos:column="22"/></operator> <name pos:line="2138" pos:column="23">NULL<pos:position pos:line="2138" pos:column="27"/></name></expr></argument>)<pos:position pos:line="2138" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="2138" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name pos:line="2140" pos:column="3">data<pos:position pos:line="2140" pos:column="7"/></name> <operator pos:line="2140" pos:column="8">=<pos:position pos:line="2140" pos:column="9"/></operator> <name><name pos:line="2140" pos:column="10">conn<pos:position pos:line="2140" pos:column="14"/></name><operator pos:line="2140" pos:column="14">-&gt;<pos:position pos:line="2140" pos:column="19"/></operator><name pos:line="2140" pos:column="16">data<pos:position pos:line="2140" pos:column="20"/></name></name></expr>;<pos:position pos:line="2140" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2141" pos:column="3">k<pos:position pos:line="2141" pos:column="4"/></name> <operator pos:line="2141" pos:column="5">=<pos:position pos:line="2141" pos:column="6"/></operator> <operator pos:line="2141" pos:column="7">&amp;<pos:position pos:line="2141" pos:column="12"/></operator><name><name pos:line="2141" pos:column="8">data<pos:position pos:line="2141" pos:column="12"/></name><operator pos:line="2141" pos:column="12">-&gt;<pos:position pos:line="2141" pos:column="17"/></operator><name pos:line="2141" pos:column="14">req<pos:position pos:line="2141" pos:column="17"/></name></name></expr>;<pos:position pos:line="2141" pos:column="18"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="2143" pos:column="3">DEBUGASSERT<pos:position pos:line="2143" pos:column="14"/></name><argument_list pos:line="2143" pos:column="14">(<argument><expr><operator pos:line="2143" pos:column="15">(<pos:position pos:line="2143" pos:column="16"/></operator><name pos:line="2143" pos:column="16">sockindex<pos:position pos:line="2143" pos:column="25"/></name> <operator pos:line="2143" pos:column="26">&lt;=<pos:position pos:line="2143" pos:column="31"/></operator> <literal type="number" pos:line="2143" pos:column="29">1<pos:position pos:line="2143" pos:column="30"/></literal><operator pos:line="2143" pos:column="30">)<pos:position pos:line="2143" pos:column="31"/></operator> <operator pos:line="2143" pos:column="32">&amp;&amp;<pos:position pos:line="2143" pos:column="42"/></operator> <operator pos:line="2143" pos:column="35">(<pos:position pos:line="2143" pos:column="36"/></operator><name pos:line="2143" pos:column="36">sockindex<pos:position pos:line="2143" pos:column="45"/></name> <operator pos:line="2143" pos:column="46">&gt;=<pos:position pos:line="2143" pos:column="51"/></operator> <operator pos:line="2143" pos:column="49">-<pos:position pos:line="2143" pos:column="50"/></operator><literal type="number" pos:line="2143" pos:column="50">1<pos:position pos:line="2143" pos:column="51"/></literal><operator pos:line="2143" pos:column="51">)<pos:position pos:line="2143" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="2143" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="2143" pos:column="54"/></expr_stmt>

  <comment type="block" pos:line="2145" pos:column="3">/* now copy all input parameters */</comment>
  <expr_stmt><expr><name><name pos:line="2146" pos:column="3">conn<pos:position pos:line="2146" pos:column="7"/></name><operator pos:line="2146" pos:column="7">-&gt;<pos:position pos:line="2146" pos:column="12"/></operator><name pos:line="2146" pos:column="9">sockfd<pos:position pos:line="2146" pos:column="15"/></name></name> <operator pos:line="2146" pos:column="16">=<pos:position pos:line="2146" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="2146" pos:column="18">sockindex<pos:position pos:line="2146" pos:column="27"/></name> <operator pos:line="2146" pos:column="28">==<pos:position pos:line="2146" pos:column="30"/></operator> <operator pos:line="2146" pos:column="31">-<pos:position pos:line="2146" pos:column="32"/></operator><literal type="number" pos:line="2146" pos:column="32">1<pos:position pos:line="2146" pos:column="33"/></literal></expr> ?<pos:position pos:line="2146" pos:column="35"/></condition><then pos:line="2146" pos:column="35">
      <expr><name pos:line="2147" pos:column="7">CURL_SOCKET_BAD<pos:position pos:line="2147" pos:column="22"/></name></expr> <pos:position pos:line="2147" pos:column="23"/></then><else pos:line="2147" pos:column="23">: <expr><name><name pos:line="2147" pos:column="25">conn<pos:position pos:line="2147" pos:column="29"/></name><operator pos:line="2147" pos:column="29">-&gt;<pos:position pos:line="2147" pos:column="34"/></operator><name pos:line="2147" pos:column="31">sock<pos:position pos:line="2147" pos:column="35"/></name><index pos:line="2147" pos:column="35">[<expr><name pos:line="2147" pos:column="36">sockindex<pos:position pos:line="2147" pos:column="45"/></name></expr>]<pos:position pos:line="2147" pos:column="46"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="2147" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2148" pos:column="3">conn<pos:position pos:line="2148" pos:column="7"/></name><operator pos:line="2148" pos:column="7">-&gt;<pos:position pos:line="2148" pos:column="12"/></operator><name pos:line="2148" pos:column="9">writesockfd<pos:position pos:line="2148" pos:column="20"/></name></name> <operator pos:line="2148" pos:column="21">=<pos:position pos:line="2148" pos:column="22"/></operator> <ternary><condition><expr><name pos:line="2148" pos:column="23">writesockindex<pos:position pos:line="2148" pos:column="37"/></name> <operator pos:line="2148" pos:column="38">==<pos:position pos:line="2148" pos:column="40"/></operator> <operator pos:line="2148" pos:column="41">-<pos:position pos:line="2148" pos:column="42"/></operator><literal type="number" pos:line="2148" pos:column="42">1<pos:position pos:line="2148" pos:column="43"/></literal></expr> ?<pos:position pos:line="2148" pos:column="45"/></condition><then pos:line="2148" pos:column="45">
      <expr><name pos:line="2149" pos:column="7">CURL_SOCKET_BAD<pos:position pos:line="2149" pos:column="22"/></name></expr></then><else pos:line="2149" pos:column="22">:<expr><name><name pos:line="2149" pos:column="23">conn<pos:position pos:line="2149" pos:column="27"/></name><operator pos:line="2149" pos:column="27">-&gt;<pos:position pos:line="2149" pos:column="32"/></operator><name pos:line="2149" pos:column="29">sock<pos:position pos:line="2149" pos:column="33"/></name><index pos:line="2149" pos:column="33">[<expr><name pos:line="2149" pos:column="34">writesockindex<pos:position pos:line="2149" pos:column="48"/></name></expr>]<pos:position pos:line="2149" pos:column="49"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="2149" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2150" pos:column="3">k<pos:position pos:line="2150" pos:column="4"/></name><operator pos:line="2150" pos:column="4">-&gt;<pos:position pos:line="2150" pos:column="9"/></operator><name pos:line="2150" pos:column="6">getheader<pos:position pos:line="2150" pos:column="15"/></name></name> <operator pos:line="2150" pos:column="16">=<pos:position pos:line="2150" pos:column="17"/></operator> <name pos:line="2150" pos:column="18">getheader<pos:position pos:line="2150" pos:column="27"/></name></expr>;<pos:position pos:line="2150" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="2152" pos:column="3">k<pos:position pos:line="2152" pos:column="4"/></name><operator pos:line="2152" pos:column="4">-&gt;<pos:position pos:line="2152" pos:column="9"/></operator><name pos:line="2152" pos:column="6">size<pos:position pos:line="2152" pos:column="10"/></name></name> <operator pos:line="2152" pos:column="11">=<pos:position pos:line="2152" pos:column="12"/></operator> <name pos:line="2152" pos:column="13">size<pos:position pos:line="2152" pos:column="17"/></name></expr>;<pos:position pos:line="2152" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2153" pos:column="3">k<pos:position pos:line="2153" pos:column="4"/></name><operator pos:line="2153" pos:column="4">-&gt;<pos:position pos:line="2153" pos:column="9"/></operator><name pos:line="2153" pos:column="6">bytecountp<pos:position pos:line="2153" pos:column="16"/></name></name> <operator pos:line="2153" pos:column="17">=<pos:position pos:line="2153" pos:column="18"/></operator> <name pos:line="2153" pos:column="19">bytecountp<pos:position pos:line="2153" pos:column="29"/></name></expr>;<pos:position pos:line="2153" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2154" pos:column="3">k<pos:position pos:line="2154" pos:column="4"/></name><operator pos:line="2154" pos:column="4">-&gt;<pos:position pos:line="2154" pos:column="9"/></operator><name pos:line="2154" pos:column="6">writebytecountp<pos:position pos:line="2154" pos:column="21"/></name></name> <operator pos:line="2154" pos:column="22">=<pos:position pos:line="2154" pos:column="23"/></operator> <name pos:line="2154" pos:column="24">writecountp<pos:position pos:line="2154" pos:column="35"/></name></expr>;<pos:position pos:line="2154" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="2156" pos:column="3">/* The code sequence below is placed in this function just because all
     necessary input is not always known in do_complete() as this function may
     be called after that */</comment>

  <if pos:line="2160" pos:column="3">if<condition pos:line="2160" pos:column="5">(<expr><operator pos:line="2160" pos:column="6">!<pos:position pos:line="2160" pos:column="7"/></operator><name><name pos:line="2160" pos:column="7">k<pos:position pos:line="2160" pos:column="8"/></name><operator pos:line="2160" pos:column="8">-&gt;<pos:position pos:line="2160" pos:column="13"/></operator><name pos:line="2160" pos:column="10">getheader<pos:position pos:line="2160" pos:column="19"/></name></name></expr>)<pos:position pos:line="2160" pos:column="20"/></condition><then pos:line="2160" pos:column="20"> <block pos:line="2160" pos:column="21">{
    <expr_stmt><expr><name><name pos:line="2161" pos:column="5">k<pos:position pos:line="2161" pos:column="6"/></name><operator pos:line="2161" pos:column="6">-&gt;<pos:position pos:line="2161" pos:column="11"/></operator><name pos:line="2161" pos:column="8">header<pos:position pos:line="2161" pos:column="14"/></name></name> <operator pos:line="2161" pos:column="15">=<pos:position pos:line="2161" pos:column="16"/></operator> <name pos:line="2161" pos:column="17">FALSE<pos:position pos:line="2161" pos:column="22"/></name></expr>;<pos:position pos:line="2161" pos:column="23"/></expr_stmt>
    <if pos:line="2162" pos:column="5">if<condition pos:line="2162" pos:column="7">(<expr><name pos:line="2162" pos:column="8">size<pos:position pos:line="2162" pos:column="12"/></name> <operator pos:line="2162" pos:column="13">&gt;<pos:position pos:line="2162" pos:column="17"/></operator> <literal type="number" pos:line="2162" pos:column="15">0<pos:position pos:line="2162" pos:column="16"/></literal></expr>)<pos:position pos:line="2162" pos:column="17"/></condition><then pos:line="2162" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="2163" pos:column="7">Curl_pgrsSetDownloadSize<pos:position pos:line="2163" pos:column="31"/></name><argument_list pos:line="2163" pos:column="31">(<argument><expr><name pos:line="2163" pos:column="32">data<pos:position pos:line="2163" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="2163" pos:column="38">size<pos:position pos:line="2163" pos:column="42"/></name></expr></argument>)<pos:position pos:line="2163" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="2163" pos:column="44"/></expr_stmt></block></then></if>
  }<pos:position pos:line="2164" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="2165" pos:column="3">/* we want header and/or body, if neither then don't do this! */</comment>
  <if pos:line="2166" pos:column="3">if<condition pos:line="2166" pos:column="5">(<expr><name><name pos:line="2166" pos:column="6">k<pos:position pos:line="2166" pos:column="7"/></name><operator pos:line="2166" pos:column="7">-&gt;<pos:position pos:line="2166" pos:column="12"/></operator><name pos:line="2166" pos:column="9">getheader<pos:position pos:line="2166" pos:column="18"/></name></name> <operator pos:line="2166" pos:column="19">||<pos:position pos:line="2166" pos:column="21"/></operator> <operator pos:line="2166" pos:column="22">!<pos:position pos:line="2166" pos:column="23"/></operator><name><name pos:line="2166" pos:column="23">data<pos:position pos:line="2166" pos:column="27"/></name><operator pos:line="2166" pos:column="27">-&gt;<pos:position pos:line="2166" pos:column="32"/></operator><name pos:line="2166" pos:column="29">set<pos:position pos:line="2166" pos:column="32"/></name><operator pos:line="2166" pos:column="32">.<pos:position pos:line="2166" pos:column="33"/></operator><name pos:line="2166" pos:column="33">opt_no_body<pos:position pos:line="2166" pos:column="44"/></name></name></expr>)<pos:position pos:line="2166" pos:column="45"/></condition><then pos:line="2166" pos:column="45"> <block pos:line="2166" pos:column="46">{

    <if pos:line="2168" pos:column="5">if<condition pos:line="2168" pos:column="7">(<expr><name><name pos:line="2168" pos:column="8">conn<pos:position pos:line="2168" pos:column="12"/></name><operator pos:line="2168" pos:column="12">-&gt;<pos:position pos:line="2168" pos:column="17"/></operator><name pos:line="2168" pos:column="14">sockfd<pos:position pos:line="2168" pos:column="20"/></name></name> <operator pos:line="2168" pos:column="21">!=<pos:position pos:line="2168" pos:column="23"/></operator> <name pos:line="2168" pos:column="24">CURL_SOCKET_BAD<pos:position pos:line="2168" pos:column="39"/></name></expr>)<pos:position pos:line="2168" pos:column="40"/></condition><then pos:line="2168" pos:column="40"> <block pos:line="2168" pos:column="41">{
      <expr_stmt><expr><name><name pos:line="2169" pos:column="7">k<pos:position pos:line="2169" pos:column="8"/></name><operator pos:line="2169" pos:column="8">-&gt;<pos:position pos:line="2169" pos:column="13"/></operator><name pos:line="2169" pos:column="10">keepon<pos:position pos:line="2169" pos:column="16"/></name></name> <operator pos:line="2169" pos:column="17">|=<pos:position pos:line="2169" pos:column="19"/></operator> <name pos:line="2169" pos:column="20">KEEP_READ<pos:position pos:line="2169" pos:column="29"/></name></expr>;<pos:position pos:line="2169" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="2170" pos:column="6"/></block></then></if>

    <if pos:line="2172" pos:column="5">if<condition pos:line="2172" pos:column="7">(<expr><name><name pos:line="2172" pos:column="8">conn<pos:position pos:line="2172" pos:column="12"/></name><operator pos:line="2172" pos:column="12">-&gt;<pos:position pos:line="2172" pos:column="17"/></operator><name pos:line="2172" pos:column="14">writesockfd<pos:position pos:line="2172" pos:column="25"/></name></name> <operator pos:line="2172" pos:column="26">!=<pos:position pos:line="2172" pos:column="28"/></operator> <name pos:line="2172" pos:column="29">CURL_SOCKET_BAD<pos:position pos:line="2172" pos:column="44"/></name></expr>)<pos:position pos:line="2172" pos:column="45"/></condition><then pos:line="2172" pos:column="45"> <block pos:line="2172" pos:column="46">{
      <comment type="block" pos:line="2173" pos:column="7">/* HTTP 1.1 magic:

         Even if we require a 100-return code before uploading data, we might
         need to write data before that since the REQUEST may not have been
         finished sent off just yet.

         Thus, we must check if the request has been sent before we set the
         state info where we wait for the 100-return code
      */</comment>
      <if pos:line="2182" pos:column="7">if<condition pos:line="2182" pos:column="9">(<expr><operator pos:line="2182" pos:column="10">(<pos:position pos:line="2182" pos:column="11"/></operator><name><name pos:line="2182" pos:column="11">data<pos:position pos:line="2182" pos:column="15"/></name><operator pos:line="2182" pos:column="15">-&gt;<pos:position pos:line="2182" pos:column="20"/></operator><name pos:line="2182" pos:column="17">state<pos:position pos:line="2182" pos:column="22"/></name><operator pos:line="2182" pos:column="22">.<pos:position pos:line="2182" pos:column="23"/></operator><name pos:line="2182" pos:column="23">expect100header<pos:position pos:line="2182" pos:column="38"/></name></name><operator pos:line="2182" pos:column="38">)<pos:position pos:line="2182" pos:column="39"/></operator> <operator pos:line="2182" pos:column="40">&amp;&amp;<pos:position pos:line="2182" pos:column="50"/></operator>
         <operator pos:line="2183" pos:column="10">(<pos:position pos:line="2183" pos:column="11"/></operator><name><name pos:line="2183" pos:column="11">data<pos:position pos:line="2183" pos:column="15"/></name><operator pos:line="2183" pos:column="15">-&gt;<pos:position pos:line="2183" pos:column="20"/></operator><name pos:line="2183" pos:column="17">state<pos:position pos:line="2183" pos:column="22"/></name><operator pos:line="2183" pos:column="22">.<pos:position pos:line="2183" pos:column="23"/></operator><name pos:line="2183" pos:column="23">proto<pos:position pos:line="2183" pos:column="28"/></name><operator pos:line="2183" pos:column="28">.<pos:position pos:line="2183" pos:column="29"/></operator><name pos:line="2183" pos:column="29">http<pos:position pos:line="2183" pos:column="33"/></name><operator pos:line="2183" pos:column="33">-&gt;<pos:position pos:line="2183" pos:column="38"/></operator><name pos:line="2183" pos:column="35">sending<pos:position pos:line="2183" pos:column="42"/></name></name> <operator pos:line="2183" pos:column="43">==<pos:position pos:line="2183" pos:column="45"/></operator> <name pos:line="2183" pos:column="46">HTTPSEND_BODY<pos:position pos:line="2183" pos:column="59"/></name><operator pos:line="2183" pos:column="59">)<pos:position pos:line="2183" pos:column="60"/></operator></expr>)<pos:position pos:line="2183" pos:column="61"/></condition><then pos:line="2183" pos:column="61"> <block pos:line="2183" pos:column="62">{
        <comment type="block" pos:line="2184" pos:column="9">/* wait with write until we either got 100-continue or a timeout */</comment>
        <expr_stmt><expr><name><name pos:line="2185" pos:column="9">k<pos:position pos:line="2185" pos:column="10"/></name><operator pos:line="2185" pos:column="10">-&gt;<pos:position pos:line="2185" pos:column="15"/></operator><name pos:line="2185" pos:column="12">exp100<pos:position pos:line="2185" pos:column="18"/></name></name> <operator pos:line="2185" pos:column="19">=<pos:position pos:line="2185" pos:column="20"/></operator> <name pos:line="2185" pos:column="21">EXP100_AWAITING_CONTINUE<pos:position pos:line="2185" pos:column="45"/></name></expr>;<pos:position pos:line="2185" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2186" pos:column="9">k<pos:position pos:line="2186" pos:column="10"/></name><operator pos:line="2186" pos:column="10">-&gt;<pos:position pos:line="2186" pos:column="15"/></operator><name pos:line="2186" pos:column="12">start100<pos:position pos:line="2186" pos:column="20"/></name></name> <operator pos:line="2186" pos:column="21">=<pos:position pos:line="2186" pos:column="22"/></operator> <name><name pos:line="2186" pos:column="23">k<pos:position pos:line="2186" pos:column="24"/></name><operator pos:line="2186" pos:column="24">-&gt;<pos:position pos:line="2186" pos:column="29"/></operator><name pos:line="2186" pos:column="26">start<pos:position pos:line="2186" pos:column="31"/></name></name></expr>;<pos:position pos:line="2186" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="2187" pos:column="8"/></block></then>
      <else pos:line="2188" pos:column="7">else <block pos:line="2188" pos:column="12">{
        <if pos:line="2189" pos:column="9">if<condition pos:line="2189" pos:column="11">(<expr><name><name pos:line="2189" pos:column="12">data<pos:position pos:line="2189" pos:column="16"/></name><operator pos:line="2189" pos:column="16">-&gt;<pos:position pos:line="2189" pos:column="21"/></operator><name pos:line="2189" pos:column="18">state<pos:position pos:line="2189" pos:column="23"/></name><operator pos:line="2189" pos:column="23">.<pos:position pos:line="2189" pos:column="24"/></operator><name pos:line="2189" pos:column="24">expect100header<pos:position pos:line="2189" pos:column="39"/></name></name></expr>)<pos:position pos:line="2189" pos:column="40"/></condition><then pos:line="2189" pos:column="40">
          <comment type="block" pos:line="2190" pos:column="11">/* when we've sent off the rest of the headers, we must await a
             100-continue but first finish sending the request */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="2192" pos:column="11">k<pos:position pos:line="2192" pos:column="12"/></name><operator pos:line="2192" pos:column="12">-&gt;<pos:position pos:line="2192" pos:column="17"/></operator><name pos:line="2192" pos:column="14">exp100<pos:position pos:line="2192" pos:column="20"/></name></name> <operator pos:line="2192" pos:column="21">=<pos:position pos:line="2192" pos:column="22"/></operator> <name pos:line="2192" pos:column="23">EXP100_SENDING_REQUEST<pos:position pos:line="2192" pos:column="45"/></name></expr>;<pos:position pos:line="2192" pos:column="46"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="2194" pos:column="9">/* enable the write bit when we're not waiting for continue */</comment>
        <expr_stmt><expr><name><name pos:line="2195" pos:column="9">k<pos:position pos:line="2195" pos:column="10"/></name><operator pos:line="2195" pos:column="10">-&gt;<pos:position pos:line="2195" pos:column="15"/></operator><name pos:line="2195" pos:column="12">keepon<pos:position pos:line="2195" pos:column="18"/></name></name> <operator pos:line="2195" pos:column="19">|=<pos:position pos:line="2195" pos:column="21"/></operator> <name pos:line="2195" pos:column="22">KEEP_WRITE<pos:position pos:line="2195" pos:column="32"/></name></expr>;<pos:position pos:line="2195" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="2196" pos:column="8"/></block></else></if>
    }<pos:position pos:line="2197" pos:column="6"/></block></then></if> <comment type="block" pos:line="2197" pos:column="7">/* if(conn-&gt;writesockfd != CURL_SOCKET_BAD) */</comment>
  }<pos:position pos:line="2198" pos:column="4"/></block></then></if> <comment type="block" pos:line="2198" pos:column="5">/* if(k-&gt;getheader || !data-&gt;set.opt_no_body) */</comment>

  <return pos:line="2200" pos:column="3">return <expr><name pos:line="2200" pos:column="10">CURLE_OK<pos:position pos:line="2200" pos:column="18"/></name></expr>;<pos:position pos:line="2200" pos:column="19"/></return>
}<pos:position pos:line="2201" pos:column="2"/></block></function></block></do></block></function></unit>
