<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1391_curl-7.55.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_add_buffer_send<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">Curl_send_buffer<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">in<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                              <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">connectdata<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">conn<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,

                               <comment type="block" pos:line="4" pos:column="32">/* add the number of sent bytes to this
                                  counter */</comment>
                              <parameter><decl><type><name pos:line="6" pos:column="31">long<pos:position pos:line="6" pos:column="35"/></name> <modifier pos:line="6" pos:column="36">*<pos:position pos:line="6" pos:column="37"/></modifier></type><name pos:line="6" pos:column="37">bytes_written<pos:position pos:line="6" pos:column="50"/></name></decl></parameter>,

                               <comment type="block" pos:line="8" pos:column="32">/* how much of the buffer contains body data */</comment>
                              <parameter><decl><type><name pos:line="9" pos:column="31">size_t<pos:position pos:line="9" pos:column="37"/></name></type> <name pos:line="9" pos:column="38">included_body_bytes<pos:position pos:line="9" pos:column="57"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="10" pos:column="31">int<pos:position pos:line="10" pos:column="34"/></name></type> <name pos:line="10" pos:column="35">socketindex<pos:position pos:line="10" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="10" pos:column="47"/></parameter_list>

<block pos:line="12" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">ssize_t<pos:position pos:line="13" pos:column="10"/></name></type> <name pos:line="13" pos:column="11">amount<pos:position pos:line="13" pos:column="17"/></name></decl>;<pos:position pos:line="13" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">CURLcode<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">result<pos:position pos:line="14" pos:column="18"/></name></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">ptr<pos:position pos:line="15" pos:column="12"/></name></decl>;<pos:position pos:line="15" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">size_t<pos:position pos:line="16" pos:column="9"/></name></type> <name pos:line="16" pos:column="10">size<pos:position pos:line="16" pos:column="14"/></name></decl>;<pos:position pos:line="16" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">HTTP<pos:position pos:line="17" pos:column="14"/></name></name> <modifier pos:line="17" pos:column="15">*<pos:position pos:line="17" pos:column="16"/></modifier></type><name pos:line="17" pos:column="16">http<pos:position pos:line="17" pos:column="20"/></name> <init pos:line="17" pos:column="21">= <expr><name><name pos:line="17" pos:column="23">conn<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">-&gt;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="29">data<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">req<pos:position pos:line="17" pos:column="38"/></name><operator pos:line="17" pos:column="38">.<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="39">protop<pos:position pos:line="17" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">size_t<pos:position pos:line="18" pos:column="9"/></name></type> <name pos:line="18" pos:column="10">sendsize<pos:position pos:line="18" pos:column="18"/></name></decl>;<pos:position pos:line="18" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">curl_socket_t<pos:position pos:line="19" pos:column="16"/></name></type> <name pos:line="19" pos:column="17">sockfd<pos:position pos:line="19" pos:column="23"/></name></decl>;<pos:position pos:line="19" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">size_t<pos:position pos:line="20" pos:column="9"/></name></type> <name pos:line="20" pos:column="10">headersize<pos:position pos:line="20" pos:column="20"/></name></decl>;<pos:position pos:line="20" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">DEBUGASSERT<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">socketindex<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">&lt;=<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="30">SECONDARYSOCKET<pos:position pos:line="22" pos:column="45"/></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">sockfd<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <name><name pos:line="24" pos:column="12">conn<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">sock<pos:position pos:line="24" pos:column="22"/></name><index pos:line="24" pos:column="22">[<expr><name pos:line="24" pos:column="23">socketindex<pos:position pos:line="24" pos:column="34"/></name></expr>]<pos:position pos:line="24" pos:column="35"/></index></name></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="26" pos:column="3">/* The looping below is required since we use non-blocking sockets, but due
     to the circumstances we will just loop and try again and again etc */</comment>

  <expr_stmt><expr><name pos:line="29" pos:column="3">ptr<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <name><name pos:line="29" pos:column="9">in<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">buffer<pos:position pos:line="29" pos:column="19"/></name></name></expr>;<pos:position pos:line="29" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="30" pos:column="3">size<pos:position pos:line="30" pos:column="7"/></name> <operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator> <name><name pos:line="30" pos:column="10">in<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">size_used<pos:position pos:line="30" pos:column="23"/></name></name></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><name pos:line="32" pos:column="3">headersize<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">size<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">-<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">included_body_bytes<pos:position pos:line="32" pos:column="42"/></name></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt> <comment type="block" pos:line="32" pos:column="44">/* the initial part that isn't body
                                              is header */</comment>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">DEBUGASSERT<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">size<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">&gt;<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="22">included_body_bytes<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name pos:line="37" pos:column="3">result<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <call><name pos:line="37" pos:column="12">Curl_convert_to_network<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name><name pos:line="37" pos:column="36">conn<pos:position pos:line="37" pos:column="40"/></name><operator pos:line="37" pos:column="40">-&gt;<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="42">data<pos:position pos:line="37" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">ptr<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">headersize<pos:position pos:line="37" pos:column="63"/></name></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="65"/></expr_stmt>
  <comment type="block" pos:line="38" pos:column="3">/* Curl_convert_to_network calls failf if unsuccessful */</comment>
  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name pos:line="39" pos:column="6">result<pos:position pos:line="39" pos:column="12"/></name></expr>)<pos:position pos:line="39" pos:column="13"/></condition><then pos:line="39" pos:column="13"> <block pos:line="39" pos:column="14">{
    <comment type="block" pos:line="40" pos:column="5">/* conversion failed, free memory and return to the caller */</comment>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">Curl_add_buffer_free<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">in<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
    <return pos:line="42" pos:column="5">return <expr><name pos:line="42" pos:column="12">result<pos:position pos:line="42" pos:column="18"/></name></expr>;<pos:position pos:line="42" pos:column="19"/></return>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <if pos:line="45" pos:column="3">if<condition pos:line="45" pos:column="5">(<expr><operator pos:line="45" pos:column="6">(<pos:position pos:line="45" pos:column="7"/></operator><name><name pos:line="45" pos:column="7">conn<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">-&gt;<pos:position pos:line="45" pos:column="16"/></operator><name pos:line="45" pos:column="13">handler<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">-&gt;<pos:position pos:line="45" pos:column="25"/></operator><name pos:line="45" pos:column="22">flags<pos:position pos:line="45" pos:column="27"/></name></name> <operator pos:line="45" pos:column="28">&amp;<pos:position pos:line="45" pos:column="33"/></operator> <name pos:line="45" pos:column="30">PROTOPT_SSL<pos:position pos:line="45" pos:column="41"/></name> <operator pos:line="45" pos:column="42">||<pos:position pos:line="45" pos:column="44"/></operator>
     <name><name pos:line="46" pos:column="6">conn<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">-&gt;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="12">http_proxy<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">.<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">proxytype<pos:position pos:line="46" pos:column="32"/></name></name> <operator pos:line="46" pos:column="33">==<pos:position pos:line="46" pos:column="35"/></operator> <name pos:line="46" pos:column="36">CURLPROXY_HTTPS<pos:position pos:line="46" pos:column="51"/></name><operator pos:line="46" pos:column="51">)<pos:position pos:line="46" pos:column="52"/></operator>
     <operator pos:line="47" pos:column="6">&amp;&amp;<pos:position pos:line="47" pos:column="16"/></operator> <name><name pos:line="47" pos:column="9">conn<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">-&gt;<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="15">httpversion<pos:position pos:line="47" pos:column="26"/></name></name> <operator pos:line="47" pos:column="27">!=<pos:position pos:line="47" pos:column="29"/></operator> <literal type="number" pos:line="47" pos:column="30">20<pos:position pos:line="47" pos:column="32"/></literal></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33"> <block pos:line="47" pos:column="34">{
    <comment type="block" pos:line="48" pos:column="5">/* We never send more than CURL_MAX_WRITE_SIZE bytes in one single chunk
       when we speak HTTPS, as if only a fraction of it is sent now, this data
       needs to fit into the normal read-callback buffer later on and that
       buffer is using this size.
    */</comment>

    <expr_stmt><expr><name pos:line="54" pos:column="5">sendsize<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <call><name pos:line="54" pos:column="16">CURLMIN<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><name pos:line="54" pos:column="24">size<pos:position pos:line="54" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="30">CURL_MAX_WRITE_SIZE<pos:position pos:line="54" pos:column="49"/></name></expr></argument>)<pos:position pos:line="54" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="56" pos:column="5">/* OpenSSL is very picky and we must send the SAME buffer pointer to the
       library when we attempt to re-send this buffer. Sending the same data
       is not enough, we must use the exact same address. For this reason, we
       must copy the data to the uploadbuffer first, since that is the buffer
       we will be using if this send is retried later.
    */</comment>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">memcpy<pos:position pos:line="62" pos:column="11"/></name><argument_list pos:line="62" pos:column="11">(<argument><expr><name><name pos:line="62" pos:column="12">conn<pos:position pos:line="62" pos:column="16"/></name><operator pos:line="62" pos:column="16">-&gt;<pos:position pos:line="62" pos:column="21"/></operator><name pos:line="62" pos:column="18">data<pos:position pos:line="62" pos:column="22"/></name><operator pos:line="62" pos:column="22">-&gt;<pos:position pos:line="62" pos:column="27"/></operator><name pos:line="62" pos:column="24">state<pos:position pos:line="62" pos:column="29"/></name><operator pos:line="62" pos:column="29">.<pos:position pos:line="62" pos:column="30"/></operator><name pos:line="62" pos:column="30">uploadbuffer<pos:position pos:line="62" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="44">ptr<pos:position pos:line="62" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="49">sendsize<pos:position pos:line="62" pos:column="57"/></name></expr></argument>)<pos:position pos:line="62" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name pos:line="63" pos:column="5">ptr<pos:position pos:line="63" pos:column="8"/></name> <operator pos:line="63" pos:column="9">=<pos:position pos:line="63" pos:column="10"/></operator> <name><name pos:line="63" pos:column="11">conn<pos:position pos:line="63" pos:column="15"/></name><operator pos:line="63" pos:column="15">-&gt;<pos:position pos:line="63" pos:column="20"/></operator><name pos:line="63" pos:column="17">data<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">-&gt;<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="23">state<pos:position pos:line="63" pos:column="28"/></name><operator pos:line="63" pos:column="28">.<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="29">uploadbuffer<pos:position pos:line="63" pos:column="41"/></name></name></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
  }<pos:position pos:line="64" pos:column="4"/></block></then>
  <else pos:line="65" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="5">sendsize<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <name pos:line="66" pos:column="16">size<pos:position pos:line="66" pos:column="20"/></name></expr>;<pos:position pos:line="66" pos:column="21"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="68" pos:column="3">result<pos:position pos:line="68" pos:column="9"/></name> <operator pos:line="68" pos:column="10">=<pos:position pos:line="68" pos:column="11"/></operator> <call><name pos:line="68" pos:column="12">Curl_write<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name pos:line="68" pos:column="23">conn<pos:position pos:line="68" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="29">sockfd<pos:position pos:line="68" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="37">ptr<pos:position pos:line="68" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="42">sendsize<pos:position pos:line="68" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="52">&amp;<pos:position pos:line="68" pos:column="57"/></operator><name pos:line="68" pos:column="53">amount<pos:position pos:line="68" pos:column="59"/></name></expr></argument>)<pos:position pos:line="68" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="61"/></expr_stmt>

  <if pos:line="70" pos:column="3">if<condition pos:line="70" pos:column="5">(<expr><operator pos:line="70" pos:column="6">!<pos:position pos:line="70" pos:column="7"/></operator><name pos:line="70" pos:column="7">result<pos:position pos:line="70" pos:column="13"/></name></expr>)<pos:position pos:line="70" pos:column="14"/></condition><then pos:line="70" pos:column="14"> <block pos:line="70" pos:column="15">{
    <comment type="block" pos:line="71" pos:column="5">/*
     * Note that we may not send the entire chunk at once, and we have a set
     * number of data bytes at the end of the big buffer (out of which we may
     * only send away a part).
     */</comment>
    <comment type="block" pos:line="76" pos:column="5">/* how much of the header that was sent */</comment>
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">size_t<pos:position pos:line="77" pos:column="11"/></name></type> <name pos:line="77" pos:column="12">headlen<pos:position pos:line="77" pos:column="19"/></name> <init pos:line="77" pos:column="20">= <expr><ternary><condition><expr><operator pos:line="77" pos:column="22">(<pos:position pos:line="77" pos:column="23"/></operator><name pos:line="77" pos:column="23">size_t<pos:position pos:line="77" pos:column="29"/></name><operator pos:line="77" pos:column="29">)<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">amount<pos:position pos:line="77" pos:column="36"/></name><operator pos:line="77" pos:column="36">&gt;<pos:position pos:line="77" pos:column="40"/></operator><name pos:line="77" pos:column="37">headersize<pos:position pos:line="77" pos:column="47"/></name></expr> ?<pos:position pos:line="77" pos:column="49"/></condition><then pos:line="77" pos:column="49"> <expr><name pos:line="77" pos:column="50">headersize<pos:position pos:line="77" pos:column="60"/></name></expr> <pos:position pos:line="77" pos:column="61"/></then><else pos:line="77" pos:column="61">: <expr><operator pos:line="77" pos:column="63">(<pos:position pos:line="77" pos:column="64"/></operator><name pos:line="77" pos:column="64">size_t<pos:position pos:line="77" pos:column="70"/></name><operator pos:line="77" pos:column="70">)<pos:position pos:line="77" pos:column="71"/></operator><name pos:line="77" pos:column="71">amount<pos:position pos:line="77" pos:column="77"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="77" pos:column="78"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="78" pos:column="5">size_t<pos:position pos:line="78" pos:column="11"/></name></type> <name pos:line="78" pos:column="12">bodylen<pos:position pos:line="78" pos:column="19"/></name> <init pos:line="78" pos:column="20">= <expr><name pos:line="78" pos:column="22">amount<pos:position pos:line="78" pos:column="28"/></name> <operator pos:line="78" pos:column="29">-<pos:position pos:line="78" pos:column="30"/></operator> <name pos:line="78" pos:column="31">headlen<pos:position pos:line="78" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="78" pos:column="39"/></decl_stmt>

    <if pos:line="80" pos:column="5">if<condition pos:line="80" pos:column="7">(<expr><name><name pos:line="80" pos:column="8">conn<pos:position pos:line="80" pos:column="12"/></name><operator pos:line="80" pos:column="12">-&gt;<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="14">data<pos:position pos:line="80" pos:column="18"/></name><operator pos:line="80" pos:column="18">-&gt;<pos:position pos:line="80" pos:column="23"/></operator><name pos:line="80" pos:column="20">set<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">.<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="24">verbose<pos:position pos:line="80" pos:column="31"/></name></name></expr>)<pos:position pos:line="80" pos:column="32"/></condition><then pos:line="80" pos:column="32"> <block pos:line="80" pos:column="33">{
      <comment type="block" pos:line="81" pos:column="7">/* this data _may_ contain binary stuff */</comment>
      <expr_stmt><expr><call><name pos:line="82" pos:column="7">Curl_debug<pos:position pos:line="82" pos:column="17"/></name><argument_list pos:line="82" pos:column="17">(<argument><expr><name><name pos:line="82" pos:column="18">conn<pos:position pos:line="82" pos:column="22"/></name><operator pos:line="82" pos:column="22">-&gt;<pos:position pos:line="82" pos:column="27"/></operator><name pos:line="82" pos:column="24">data<pos:position pos:line="82" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="30">CURLINFO_HEADER_OUT<pos:position pos:line="82" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="51">ptr<pos:position pos:line="82" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="56">headlen<pos:position pos:line="82" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="65">conn<pos:position pos:line="82" pos:column="69"/></name></expr></argument>)<pos:position pos:line="82" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="71"/></expr_stmt>
      <if pos:line="83" pos:column="7">if<condition pos:line="83" pos:column="9">(<expr><name pos:line="83" pos:column="10">bodylen<pos:position pos:line="83" pos:column="17"/></name></expr>)<pos:position pos:line="83" pos:column="18"/></condition><then pos:line="83" pos:column="18"> <block pos:line="83" pos:column="19">{
        <comment type="block" pos:line="84" pos:column="9">/* there was body data sent beyond the initial header part, pass that
           on to the debug callback too */</comment>
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">Curl_debug<pos:position pos:line="86" pos:column="19"/></name><argument_list pos:line="86" pos:column="19">(<argument><expr><name><name pos:line="86" pos:column="20">conn<pos:position pos:line="86" pos:column="24"/></name><operator pos:line="86" pos:column="24">-&gt;<pos:position pos:line="86" pos:column="29"/></operator><name pos:line="86" pos:column="26">data<pos:position pos:line="86" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="32">CURLINFO_DATA_OUT<pos:position pos:line="86" pos:column="49"/></name></expr></argument>,
                   <argument><expr><name pos:line="87" pos:column="20">ptr<pos:position pos:line="87" pos:column="23"/></name><operator pos:line="87" pos:column="23">+<pos:position pos:line="87" pos:column="24"/></operator><name pos:line="87" pos:column="24">headlen<pos:position pos:line="87" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="33">bodylen<pos:position pos:line="87" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="42">conn<pos:position pos:line="87" pos:column="46"/></name></expr></argument>)<pos:position pos:line="87" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="88" pos:column="8"/></block></then></if>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="91" pos:column="5">/* 'amount' can never be a very large value here so typecasting it so a
       signed 31 bit value should not cause problems even if ssize_t is
       64bit */</comment>
    <expr_stmt><expr><operator pos:line="94" pos:column="5">*<pos:position pos:line="94" pos:column="6"/></operator><name pos:line="94" pos:column="6">bytes_written<pos:position pos:line="94" pos:column="19"/></name> <operator pos:line="94" pos:column="20">+=<pos:position pos:line="94" pos:column="22"/></operator> <operator pos:line="94" pos:column="23">(<pos:position pos:line="94" pos:column="24"/></operator><name pos:line="94" pos:column="24">long<pos:position pos:line="94" pos:column="28"/></name><operator pos:line="94" pos:column="28">)<pos:position pos:line="94" pos:column="29"/></operator><name pos:line="94" pos:column="29">amount<pos:position pos:line="94" pos:column="35"/></name></expr>;<pos:position pos:line="94" pos:column="36"/></expr_stmt>

    <if pos:line="96" pos:column="5">if<condition pos:line="96" pos:column="7">(<expr><name pos:line="96" pos:column="8">http<pos:position pos:line="96" pos:column="12"/></name></expr>)<pos:position pos:line="96" pos:column="13"/></condition><then pos:line="96" pos:column="13"> <block pos:line="96" pos:column="14">{
      <comment type="block" pos:line="97" pos:column="7">/* if we sent a piece of the body here, up the byte counter for it
         accordingly */</comment>
      <expr_stmt><expr><name><name pos:line="99" pos:column="7">http<pos:position pos:line="99" pos:column="11"/></name><operator pos:line="99" pos:column="11">-&gt;<pos:position pos:line="99" pos:column="16"/></operator><name pos:line="99" pos:column="13">writebytecount<pos:position pos:line="99" pos:column="27"/></name></name> <operator pos:line="99" pos:column="28">+=<pos:position pos:line="99" pos:column="30"/></operator> <name pos:line="99" pos:column="31">bodylen<pos:position pos:line="99" pos:column="38"/></name></expr>;<pos:position pos:line="99" pos:column="39"/></expr_stmt>

      <if pos:line="101" pos:column="7">if<condition pos:line="101" pos:column="9">(<expr><operator pos:line="101" pos:column="10">(<pos:position pos:line="101" pos:column="11"/></operator><name pos:line="101" pos:column="11">size_t<pos:position pos:line="101" pos:column="17"/></name><operator pos:line="101" pos:column="17">)<pos:position pos:line="101" pos:column="18"/></operator><name pos:line="101" pos:column="18">amount<pos:position pos:line="101" pos:column="24"/></name> <operator pos:line="101" pos:column="25">!=<pos:position pos:line="101" pos:column="27"/></operator> <name pos:line="101" pos:column="28">size<pos:position pos:line="101" pos:column="32"/></name></expr>)<pos:position pos:line="101" pos:column="33"/></condition><then pos:line="101" pos:column="33"> <block pos:line="101" pos:column="34">{
        <comment type="block" pos:line="102" pos:column="9">/* The whole request could not be sent in one system call. We must
           queue it up and send it later when we get the chance. We must not
           loop here and wait until it might work again. */</comment>

        <expr_stmt><expr><name pos:line="106" pos:column="9">size<pos:position pos:line="106" pos:column="13"/></name> <operator pos:line="106" pos:column="14">-=<pos:position pos:line="106" pos:column="16"/></operator> <name pos:line="106" pos:column="17">amount<pos:position pos:line="106" pos:column="23"/></name></expr>;<pos:position pos:line="106" pos:column="24"/></expr_stmt>

        <expr_stmt><expr><name pos:line="108" pos:column="9">ptr<pos:position pos:line="108" pos:column="12"/></name> <operator pos:line="108" pos:column="13">=<pos:position pos:line="108" pos:column="14"/></operator> <name><name pos:line="108" pos:column="15">in<pos:position pos:line="108" pos:column="17"/></name><operator pos:line="108" pos:column="17">-&gt;<pos:position pos:line="108" pos:column="22"/></operator><name pos:line="108" pos:column="19">buffer<pos:position pos:line="108" pos:column="25"/></name></name> <operator pos:line="108" pos:column="26">+<pos:position pos:line="108" pos:column="27"/></operator> <name pos:line="108" pos:column="28">amount<pos:position pos:line="108" pos:column="34"/></name></expr>;<pos:position pos:line="108" pos:column="35"/></expr_stmt>

        <comment type="block" pos:line="110" pos:column="9">/* backup the currently set pointers */</comment>
        <expr_stmt><expr><name><name pos:line="111" pos:column="9">http<pos:position pos:line="111" pos:column="13"/></name><operator pos:line="111" pos:column="13">-&gt;<pos:position pos:line="111" pos:column="18"/></operator><name pos:line="111" pos:column="15">backup<pos:position pos:line="111" pos:column="21"/></name><operator pos:line="111" pos:column="21">.<pos:position pos:line="111" pos:column="22"/></operator><name pos:line="111" pos:column="22">fread_func<pos:position pos:line="111" pos:column="32"/></name></name> <operator pos:line="111" pos:column="33">=<pos:position pos:line="111" pos:column="34"/></operator> <name><name pos:line="111" pos:column="35">conn<pos:position pos:line="111" pos:column="39"/></name><operator pos:line="111" pos:column="39">-&gt;<pos:position pos:line="111" pos:column="44"/></operator><name pos:line="111" pos:column="41">data<pos:position pos:line="111" pos:column="45"/></name><operator pos:line="111" pos:column="45">-&gt;<pos:position pos:line="111" pos:column="50"/></operator><name pos:line="111" pos:column="47">state<pos:position pos:line="111" pos:column="52"/></name><operator pos:line="111" pos:column="52">.<pos:position pos:line="111" pos:column="53"/></operator><name pos:line="111" pos:column="53">fread_func<pos:position pos:line="111" pos:column="63"/></name></name></expr>;<pos:position pos:line="111" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="112" pos:column="9">http<pos:position pos:line="112" pos:column="13"/></name><operator pos:line="112" pos:column="13">-&gt;<pos:position pos:line="112" pos:column="18"/></operator><name pos:line="112" pos:column="15">backup<pos:position pos:line="112" pos:column="21"/></name><operator pos:line="112" pos:column="21">.<pos:position pos:line="112" pos:column="22"/></operator><name pos:line="112" pos:column="22">fread_in<pos:position pos:line="112" pos:column="30"/></name></name> <operator pos:line="112" pos:column="31">=<pos:position pos:line="112" pos:column="32"/></operator> <name><name pos:line="112" pos:column="33">conn<pos:position pos:line="112" pos:column="37"/></name><operator pos:line="112" pos:column="37">-&gt;<pos:position pos:line="112" pos:column="42"/></operator><name pos:line="112" pos:column="39">data<pos:position pos:line="112" pos:column="43"/></name><operator pos:line="112" pos:column="43">-&gt;<pos:position pos:line="112" pos:column="48"/></operator><name pos:line="112" pos:column="45">state<pos:position pos:line="112" pos:column="50"/></name><operator pos:line="112" pos:column="50">.<pos:position pos:line="112" pos:column="51"/></operator><name pos:line="112" pos:column="51">in<pos:position pos:line="112" pos:column="53"/></name></name></expr>;<pos:position pos:line="112" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="113" pos:column="9">http<pos:position pos:line="113" pos:column="13"/></name><operator pos:line="113" pos:column="13">-&gt;<pos:position pos:line="113" pos:column="18"/></operator><name pos:line="113" pos:column="15">backup<pos:position pos:line="113" pos:column="21"/></name><operator pos:line="113" pos:column="21">.<pos:position pos:line="113" pos:column="22"/></operator><name pos:line="113" pos:column="22">postdata<pos:position pos:line="113" pos:column="30"/></name></name> <operator pos:line="113" pos:column="31">=<pos:position pos:line="113" pos:column="32"/></operator> <name><name pos:line="113" pos:column="33">http<pos:position pos:line="113" pos:column="37"/></name><operator pos:line="113" pos:column="37">-&gt;<pos:position pos:line="113" pos:column="42"/></operator><name pos:line="113" pos:column="39">postdata<pos:position pos:line="113" pos:column="47"/></name></name></expr>;<pos:position pos:line="113" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="114" pos:column="9">http<pos:position pos:line="114" pos:column="13"/></name><operator pos:line="114" pos:column="13">-&gt;<pos:position pos:line="114" pos:column="18"/></operator><name pos:line="114" pos:column="15">backup<pos:position pos:line="114" pos:column="21"/></name><operator pos:line="114" pos:column="21">.<pos:position pos:line="114" pos:column="22"/></operator><name pos:line="114" pos:column="22">postsize<pos:position pos:line="114" pos:column="30"/></name></name> <operator pos:line="114" pos:column="31">=<pos:position pos:line="114" pos:column="32"/></operator> <name><name pos:line="114" pos:column="33">http<pos:position pos:line="114" pos:column="37"/></name><operator pos:line="114" pos:column="37">-&gt;<pos:position pos:line="114" pos:column="42"/></operator><name pos:line="114" pos:column="39">postsize<pos:position pos:line="114" pos:column="47"/></name></name></expr>;<pos:position pos:line="114" pos:column="48"/></expr_stmt>

        <comment type="block" pos:line="116" pos:column="9">/* set the new pointers for the request-sending */</comment>
        <expr_stmt><expr><name><name pos:line="117" pos:column="9">conn<pos:position pos:line="117" pos:column="13"/></name><operator pos:line="117" pos:column="13">-&gt;<pos:position pos:line="117" pos:column="18"/></operator><name pos:line="117" pos:column="15">data<pos:position pos:line="117" pos:column="19"/></name><operator pos:line="117" pos:column="19">-&gt;<pos:position pos:line="117" pos:column="24"/></operator><name pos:line="117" pos:column="21">state<pos:position pos:line="117" pos:column="26"/></name><operator pos:line="117" pos:column="26">.<pos:position pos:line="117" pos:column="27"/></operator><name pos:line="117" pos:column="27">fread_func<pos:position pos:line="117" pos:column="37"/></name></name> <operator pos:line="117" pos:column="38">=<pos:position pos:line="117" pos:column="39"/></operator> <operator pos:line="117" pos:column="40">(<pos:position pos:line="117" pos:column="41"/></operator><name pos:line="117" pos:column="41">curl_read_callback<pos:position pos:line="117" pos:column="59"/></name><operator pos:line="117" pos:column="59">)<pos:position pos:line="117" pos:column="60"/></operator><name pos:line="117" pos:column="60">readmoredata<pos:position pos:line="117" pos:column="72"/></name></expr>;<pos:position pos:line="117" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="118" pos:column="9">conn<pos:position pos:line="118" pos:column="13"/></name><operator pos:line="118" pos:column="13">-&gt;<pos:position pos:line="118" pos:column="18"/></operator><name pos:line="118" pos:column="15">data<pos:position pos:line="118" pos:column="19"/></name><operator pos:line="118" pos:column="19">-&gt;<pos:position pos:line="118" pos:column="24"/></operator><name pos:line="118" pos:column="21">state<pos:position pos:line="118" pos:column="26"/></name><operator pos:line="118" pos:column="26">.<pos:position pos:line="118" pos:column="27"/></operator><name pos:line="118" pos:column="27">in<pos:position pos:line="118" pos:column="29"/></name></name> <operator pos:line="118" pos:column="30">=<pos:position pos:line="118" pos:column="31"/></operator> <operator pos:line="118" pos:column="32">(<pos:position pos:line="118" pos:column="33"/></operator><name pos:line="118" pos:column="33">void<pos:position pos:line="118" pos:column="37"/></name> <operator pos:line="118" pos:column="38">*<pos:position pos:line="118" pos:column="39"/></operator><operator pos:line="118" pos:column="39">)<pos:position pos:line="118" pos:column="40"/></operator><name pos:line="118" pos:column="40">conn<pos:position pos:line="118" pos:column="44"/></name></expr>;<pos:position pos:line="118" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="119" pos:column="9">http<pos:position pos:line="119" pos:column="13"/></name><operator pos:line="119" pos:column="13">-&gt;<pos:position pos:line="119" pos:column="18"/></operator><name pos:line="119" pos:column="15">postdata<pos:position pos:line="119" pos:column="23"/></name></name> <operator pos:line="119" pos:column="24">=<pos:position pos:line="119" pos:column="25"/></operator> <name pos:line="119" pos:column="26">ptr<pos:position pos:line="119" pos:column="29"/></name></expr>;<pos:position pos:line="119" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="120" pos:column="9">http<pos:position pos:line="120" pos:column="13"/></name><operator pos:line="120" pos:column="13">-&gt;<pos:position pos:line="120" pos:column="18"/></operator><name pos:line="120" pos:column="15">postsize<pos:position pos:line="120" pos:column="23"/></name></name> <operator pos:line="120" pos:column="24">=<pos:position pos:line="120" pos:column="25"/></operator> <operator pos:line="120" pos:column="26">(<pos:position pos:line="120" pos:column="27"/></operator><name pos:line="120" pos:column="27">curl_off_t<pos:position pos:line="120" pos:column="37"/></name><operator pos:line="120" pos:column="37">)<pos:position pos:line="120" pos:column="38"/></operator><name pos:line="120" pos:column="38">size<pos:position pos:line="120" pos:column="42"/></name></expr>;<pos:position pos:line="120" pos:column="43"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="122" pos:column="9">http<pos:position pos:line="122" pos:column="13"/></name><operator pos:line="122" pos:column="13">-&gt;<pos:position pos:line="122" pos:column="18"/></operator><name pos:line="122" pos:column="15">send_buffer<pos:position pos:line="122" pos:column="26"/></name></name> <operator pos:line="122" pos:column="27">=<pos:position pos:line="122" pos:column="28"/></operator> <name pos:line="122" pos:column="29">in<pos:position pos:line="122" pos:column="31"/></name></expr>;<pos:position pos:line="122" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="123" pos:column="9">http<pos:position pos:line="123" pos:column="13"/></name><operator pos:line="123" pos:column="13">-&gt;<pos:position pos:line="123" pos:column="18"/></operator><name pos:line="123" pos:column="15">sending<pos:position pos:line="123" pos:column="22"/></name></name> <operator pos:line="123" pos:column="23">=<pos:position pos:line="123" pos:column="24"/></operator> <name pos:line="123" pos:column="25">HTTPSEND_REQUEST<pos:position pos:line="123" pos:column="41"/></name></expr>;<pos:position pos:line="123" pos:column="42"/></expr_stmt>

        <return pos:line="125" pos:column="9">return <expr><name pos:line="125" pos:column="16">CURLE_OK<pos:position pos:line="125" pos:column="24"/></name></expr>;<pos:position pos:line="125" pos:column="25"/></return>
      }<pos:position pos:line="126" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="127" pos:column="7">http<pos:position pos:line="127" pos:column="11"/></name><operator pos:line="127" pos:column="11">-&gt;<pos:position pos:line="127" pos:column="16"/></operator><name pos:line="127" pos:column="13">sending<pos:position pos:line="127" pos:column="20"/></name></name> <operator pos:line="127" pos:column="21">=<pos:position pos:line="127" pos:column="22"/></operator> <name pos:line="127" pos:column="23">HTTPSEND_BODY<pos:position pos:line="127" pos:column="36"/></name></expr>;<pos:position pos:line="127" pos:column="37"/></expr_stmt>
      <comment type="block" pos:line="128" pos:column="7">/* the full buffer was sent, clean up and return */</comment>
    }<pos:position pos:line="129" pos:column="6"/></block></then>
    <else pos:line="130" pos:column="5">else <block pos:line="130" pos:column="10">{
      <if pos:line="131" pos:column="7">if<condition pos:line="131" pos:column="9">(<expr><operator pos:line="131" pos:column="10">(<pos:position pos:line="131" pos:column="11"/></operator><name pos:line="131" pos:column="11">size_t<pos:position pos:line="131" pos:column="17"/></name><operator pos:line="131" pos:column="17">)<pos:position pos:line="131" pos:column="18"/></operator><name pos:line="131" pos:column="18">amount<pos:position pos:line="131" pos:column="24"/></name> <operator pos:line="131" pos:column="25">!=<pos:position pos:line="131" pos:column="27"/></operator> <name pos:line="131" pos:column="28">size<pos:position pos:line="131" pos:column="32"/></name></expr>)<pos:position pos:line="131" pos:column="33"/></condition><then pos:line="131" pos:column="33">
        <comment type="block" pos:line="132" pos:column="9">/* We have no continue-send mechanism now, fail. This can only happen
           when this function is used from the CONNECT sending function. We
           currently (stupidly) assume that the whole request is always sent
           away in the first single chunk.

           This needs FIXing.
        */</comment>
        <block type="pseudo"><return pos:line="139" pos:column="9">return <expr><name pos:line="139" pos:column="16">CURLE_SEND_ERROR<pos:position pos:line="139" pos:column="32"/></name></expr>;<pos:position pos:line="139" pos:column="33"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="140" pos:column="7">Curl_pipeline_leave_write<pos:position pos:line="140" pos:column="32"/></name><argument_list pos:line="140" pos:column="32">(<argument><expr><name pos:line="140" pos:column="33">conn<pos:position pos:line="140" pos:column="37"/></name></expr></argument>)<pos:position pos:line="140" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="141" pos:column="6"/></block></else></if>
  }<pos:position pos:line="142" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="143" pos:column="3">Curl_add_buffer_free<pos:position pos:line="143" pos:column="23"/></name><argument_list pos:line="143" pos:column="23">(<argument><expr><name pos:line="143" pos:column="24">in<pos:position pos:line="143" pos:column="26"/></name></expr></argument>)<pos:position pos:line="143" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="28"/></expr_stmt>

  <return pos:line="145" pos:column="3">return <expr><name pos:line="145" pos:column="10">result<pos:position pos:line="145" pos:column="16"/></name></expr>;<pos:position pos:line="145" pos:column="17"/></return>
}<pos:position pos:line="146" pos:column="2"/></block></function></unit>
