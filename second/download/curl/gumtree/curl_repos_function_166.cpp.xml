<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_166.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">telwrite<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name><name pos:line="1" pos:column="15">struct<pos:position pos:line="1" pos:column="21"/></name> <name pos:line="1" pos:column="22">UrlData<pos:position pos:line="1" pos:column="29"/></name></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">data<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="2" pos:column="15">unsigned<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">buffer<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,	<comment type="block" pos:line="2" pos:column="41">/* Data to write */</comment>
	      <parameter><decl><type><name pos:line="3" pos:column="15">int<pos:position pos:line="3" pos:column="18"/></name></type> <name pos:line="3" pos:column="19">count<pos:position pos:line="3" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="25"/></parameter_list>		<comment type="block" pos:line="3" pos:column="41">/* Number of bytes to write */</comment>
<block pos:line="4" pos:column="1">{
   <decl_stmt><decl><type><name pos:line="5" pos:column="4">unsigned<pos:position pos:line="5" pos:column="12"/></name> <name pos:line="5" pos:column="13">char<pos:position pos:line="5" pos:column="17"/></name></type> <name><name pos:line="5" pos:column="18">outbuf<pos:position pos:line="5" pos:column="24"/></name><index pos:line="5" pos:column="24">[<expr><literal type="number" pos:line="5" pos:column="25">2<pos:position pos:line="5" pos:column="26"/></literal></expr>]<pos:position pos:line="5" pos:column="27"/></index></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
   <decl_stmt><decl><type><name pos:line="6" pos:column="4">int<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">out_count<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
   <decl_stmt><decl><type><name pos:line="7" pos:column="4">int<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">bytes_written<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

   <while pos:line="9" pos:column="4">while<condition pos:line="9" pos:column="9">(<expr><name pos:line="9" pos:column="10">count<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">--<pos:position pos:line="9" pos:column="17"/></operator></expr>)<pos:position pos:line="9" pos:column="18"/></condition>
   <block pos:line="10" pos:column="4">{
      <expr_stmt><expr><name><name pos:line="11" pos:column="7">outbuf<pos:position pos:line="11" pos:column="13"/></name><index pos:line="11" pos:column="13">[<expr><literal type="number" pos:line="11" pos:column="14">0<pos:position pos:line="11" pos:column="15"/></literal></expr>]<pos:position pos:line="11" pos:column="16"/></index></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <operator pos:line="11" pos:column="19">*<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">buffer<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">++<pos:position pos:line="11" pos:column="28"/></operator></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="12" pos:column="7">out_count<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <literal type="number" pos:line="12" pos:column="19">1<pos:position pos:line="12" pos:column="20"/></literal></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
      <if pos:line="13" pos:column="7">if<condition pos:line="13" pos:column="9">(<expr><name><name pos:line="13" pos:column="10">outbuf<pos:position pos:line="13" pos:column="16"/></name><index pos:line="13" pos:column="16">[<expr><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr>]<pos:position pos:line="13" pos:column="19"/></index></name> <operator pos:line="13" pos:column="20">==<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">IAC<pos:position pos:line="13" pos:column="26"/></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
	 <block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="10">outbuf<pos:position pos:line="14" pos:column="16"/></name><index pos:line="14" pos:column="16">[<expr><name pos:line="14" pos:column="17">out_count<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">++<pos:position pos:line="14" pos:column="28"/></operator></expr>]<pos:position pos:line="14" pos:column="29"/></index></name> <operator pos:line="14" pos:column="30">=<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">IAC<pos:position pos:line="14" pos:column="35"/></name></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt></block></then></if>
      
<cpp:ifndef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifndef<pos:position pos:line="16" pos:column="8"/></cpp:directive> <name pos:line="16" pos:column="9">USE_SSLEAY<pos:position pos:line="16" pos:column="19"/></name></cpp:ifndef>
      <expr_stmt><expr><name pos:line="17" pos:column="7">bytes_written<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <call><name pos:line="17" pos:column="23">swrite<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name><name pos:line="17" pos:column="30">data<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">-&gt;<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="36">firstsocket<pos:position pos:line="17" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="49">outbuf<pos:position pos:line="17" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="57">out_count<pos:position pos:line="17" pos:column="66"/></name></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="68"/></expr_stmt>
<cpp:else pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">else<pos:position pos:line="18" pos:column="6"/></cpp:directive></cpp:else>
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><name><name pos:line="19" pos:column="11">data<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">use_ssl<pos:position pos:line="19" pos:column="24"/></name></name></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25"> <block pos:line="19" pos:column="26">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">bytes_written<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <call><name pos:line="20" pos:column="25">SSL_write<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name><name pos:line="20" pos:column="35">data<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">ssl<pos:position pos:line="20" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="46">(<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">char<pos:position pos:line="20" pos:column="51"/></name> <operator pos:line="20" pos:column="52">*<pos:position pos:line="20" pos:column="53"/></operator><operator pos:line="20" pos:column="53">)<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="54">outbuf<pos:position pos:line="20" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="62">out_count<pos:position pos:line="20" pos:column="71"/></name></expr></argument>)<pos:position pos:line="20" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="73"/></expr_stmt>
      }<pos:position pos:line="21" pos:column="8"/></block></then>
      <else pos:line="22" pos:column="7">else <block pos:line="22" pos:column="12">{
        <expr_stmt><expr><name pos:line="23" pos:column="9">bytes_written<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <call><name pos:line="23" pos:column="25">swrite<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name><name pos:line="23" pos:column="32">data<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">firstsocket<pos:position pos:line="23" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">outbuf<pos:position pos:line="23" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="59">out_count<pos:position pos:line="23" pos:column="68"/></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="70"/></expr_stmt>
      }<pos:position pos:line="24" pos:column="8"/></block></else></if>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="25" pos:column="8">/* USE_SSLEAY */</comment>
   }<pos:position pos:line="26" pos:column="5"/></block></while>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
