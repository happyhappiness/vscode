<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_407_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">add_custom_headers<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">send_buffer<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">req_buffer<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ptr<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">curl_slist<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">headers<pos:position pos:line="6" pos:column="29"/></name><init pos:line="6" pos:column="29">=<expr><name><name pos:line="6" pos:column="30">conn<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">-&gt;<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="36">data<pos:position pos:line="6" pos:column="40"/></name><operator pos:line="6" pos:column="40">-&gt;<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="42">set<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">.<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="46">headers<pos:position pos:line="6" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>

  <while pos:line="8" pos:column="3">while<condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">headers<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition> <block pos:line="8" pos:column="18">{
    <expr_stmt><expr><name pos:line="9" pos:column="5">ptr<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">strchr<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name><name pos:line="9" pos:column="18">headers<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">data<pos:position pos:line="9" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="33">':'<pos:position pos:line="9" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
    <if pos:line="10" pos:column="5">if<condition pos:line="10" pos:column="7">(<expr><name pos:line="10" pos:column="8">ptr<pos:position pos:line="10" pos:column="11"/></name></expr>)<pos:position pos:line="10" pos:column="12"/></condition><then pos:line="10" pos:column="12"> <block pos:line="10" pos:column="13">{
      <comment type="block" pos:line="11" pos:column="7">/* we require a colon for this to be a true header */</comment>

      <expr_stmt><expr><name pos:line="13" pos:column="7">ptr<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">++<pos:position pos:line="13" pos:column="12"/></operator></expr>;<pos:position pos:line="13" pos:column="13"/></expr_stmt> <comment type="block" pos:line="13" pos:column="14">/* pass the colon */</comment>
      <while pos:line="14" pos:column="7">while<condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">*<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">ptr<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">&amp;&amp;<pos:position pos:line="14" pos:column="28"/></operator> <call><name pos:line="14" pos:column="21">isspace<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><operator pos:line="14" pos:column="29">(<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">int<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">)<pos:position pos:line="14" pos:column="34"/></operator><operator pos:line="14" pos:column="34">*<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">ptr<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="40"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">ptr<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">++<pos:position pos:line="15" pos:column="14"/></operator></expr>;<pos:position pos:line="15" pos:column="15"/></expr_stmt></block></while>

      <if pos:line="17" pos:column="7">if<condition pos:line="17" pos:column="9">(<expr><operator pos:line="17" pos:column="10">*<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">ptr<pos:position pos:line="17" pos:column="14"/></name></expr>)<pos:position pos:line="17" pos:column="15"/></condition><then pos:line="17" pos:column="15"> <block pos:line="17" pos:column="16">{
        <comment type="block" pos:line="18" pos:column="9">/* only send this if the contents was non-blank */</comment>

        <if pos:line="20" pos:column="9">if<condition pos:line="20" pos:column="11">(<expr><name><name pos:line="20" pos:column="12">conn<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">allocptr<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">.<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="27">host<pos:position pos:line="20" pos:column="31"/></name></name> <operator pos:line="20" pos:column="32">&amp;&amp;<pos:position pos:line="20" pos:column="42"/></operator>
           <comment type="block" pos:line="21" pos:column="12">/* a Host: header was sent already, don't pass on any custom Host:
              header as that will produce *two* in the same request! */</comment>
           <call><name pos:line="23" pos:column="12">curl_strnequal<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><literal type="string" pos:line="23" pos:column="27">"Host:"<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="36">headers<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">-&gt;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="45">data<pos:position pos:line="23" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="51">5<pos:position pos:line="23" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="54"/></condition><then pos:line="23" pos:column="54">
          <block type="pseudo"><empty_stmt pos:line="24" pos:column="11">;<pos:position pos:line="24" pos:column="12"/></empty_stmt></block></then>
        <else pos:line="25" pos:column="9">else <block pos:line="25" pos:column="14">{

          <expr_stmt><expr><name pos:line="27" pos:column="11">result<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <call><name pos:line="27" pos:column="20">add_bufferf<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">req_buffer<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="44">"%s\r\n"<pos:position pos:line="27" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="54">headers<pos:position pos:line="27" pos:column="61"/></name><operator pos:line="27" pos:column="61">-&gt;<pos:position pos:line="27" pos:column="66"/></operator><name pos:line="27" pos:column="63">data<pos:position pos:line="27" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="69"/></expr_stmt>
          <if pos:line="28" pos:column="11">if<condition pos:line="28" pos:column="13">(<expr><name pos:line="28" pos:column="14">result<pos:position pos:line="28" pos:column="20"/></name></expr>)<pos:position pos:line="28" pos:column="21"/></condition><then pos:line="28" pos:column="21">
            <block type="pseudo"><return pos:line="29" pos:column="13">return <expr><name pos:line="29" pos:column="20">result<pos:position pos:line="29" pos:column="26"/></name></expr>;<pos:position pos:line="29" pos:column="27"/></return></block></then></if>
        }<pos:position pos:line="30" pos:column="10"/></block></else></if>
      }<pos:position pos:line="31" pos:column="8"/></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="33" pos:column="5">headers<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <name><name pos:line="33" pos:column="15">headers<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">-&gt;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="24">next<pos:position pos:line="33" pos:column="28"/></name></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></while>
  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">result<pos:position pos:line="35" pos:column="16"/></name></expr>;<pos:position pos:line="35" pos:column="17"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
