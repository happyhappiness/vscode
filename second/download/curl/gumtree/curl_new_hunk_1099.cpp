"              Example:\n"
"\n"
, stdout);
 fputs(
"              # curl -H \"X-First-Name: Joe\" http://example.com/\n"
"\n"
"              WARNING: headers set  with  this  option  will  be  set  in  all\n"
"              requests  -  even  after  redirects are followed, like when told\n"
"              with -L, --location. This can lead to the header being  sent  to\n"
"              other  hosts than the original host, so sensitive headers should\n"
"              be used with caution combined with following redirects.\n"
"\n"
, stdout);
 fputs(
"              This option can be used  multiple  times  to  add/replace/remove\n"
"              multiple headers.\n"
"\n"
"       --hostpubmd5 <md5>\n"
"              (SCP/SFTP)  Pass  a string containing 32 hexadecimal digits. The\n"
"              string should be the 128 bit MD5 checksum of the  remote  host's\n"
"              public key, curl will refuse the connection with the host unless\n"
"              the md5sums match. (Added in 7.17.1)\n"
"\n"
"       --ignore-content-length\n"
, stdout);
 fputs(
"              For HTTP, Ignore the Content-Length header. This is particularly\n"
"              useful  for servers running Apache 1.x, which will report incor-\n"
"              rect Content-Length for files larger than 2 gigabytes.\n"
"\n"
"              For FTP (since 7.46.0), skip the RETR command to figure out  the\n"
"              size before downloading a file.\n"
"\n"
"       -i, --include\n"
"              (HTTP)  Include  the  HTTP-header in the output. The HTTP-header\n"
, stdout);
 fputs(
"              includes things like server-name, date of  the  document,  HTTP-\n"
"              version and more...\n"
"\n"
"       -I, --head\n"
"              (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature\n"
"              the command HEAD which this uses to get nothing but  the  header\n"
"              of  a  document. When used on an FTP or FILE file, curl displays\n"
"              the file size and last modification time only.\n"
"\n"
"       --interface <name>\n"
, stdout);
 fputs(
"              Perform an operation using a specified interface. You can  enter\n"
"              interface  name,  IP address or host name. An example could look\n"
"              like:\n"
"\n"
"               curl --interface eth0:1 https://www.example.com/\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -j, --junk-session-cookies\n"
"              (HTTP) When curl is told to read cookies from a given file, this\n"
, stdout);
 fputs(
"              option  will  make  it  discard all \"session cookies\". This will\n"
"              basically have the same effect as if a new session  is  started.\n"
"              Typical  browsers  always  discard  session cookies when they're\n"
"              closed down.\n"
"\n"
"       -J, --remote-header-name\n"
"              (HTTP) This option tells the -O, --remote-name option to use the\n"
"              server-specified   Content-Disposition   filename   instead   of\n"
, stdout);
 fputs(
"              extracting a filename from the URL.\n"
"\n"
"              If the server specifies a file name and a file  with  that  name\n"
"              already  exists  in the current working directory it will not be\n"
"              overwritten and an error will occur. If the server doesn't spec-\n"
"              ify a file name then this option has no effect.\n"
"\n"
"              There's  no  attempt to decode %-sequences (yet) in the provided\n"
, stdout);
 fputs(
"              file name, so this option may provide you with rather unexpected\n"
"              file names.\n"
"\n"
"              WARNING:  Exercise  judicious  use of this option, especially on\n"
"              Windows. A rogue server could send you the  name  of  a  DLL  or\n"
"              other  file  that could possibly be loaded automatically by Win-\n"
"              dows or some third party software.\n"
"\n"
"       -k, --insecure\n"
"              (SSL) This option explicitly allows curl to  perform  \"insecure\"\n"
, stdout);
 fputs(
"              SSL connections and transfers. All SSL connections are attempted\n"
"              to be made secure by using the CA certificate  bundle  installed\n"
"              by  default.  This  makes  all connections considered \"insecure\"\n"
"              fail unless -k, --insecure is used.\n"
"\n"
"              See    this    online    resource    for    further     details:\n"
"              https://curl.haxx.se/docs/sslcerts.html\n"
"\n"
"       -K, --config <config file>\n"
, stdout);
 fputs(
"              Specify  which config file to read curl arguments from. The con-\n"
"              fig file is a text file in which command line arguments  can  be\n"
"              written  which  then will be used as if they were written on the\n"
"              actual command line.\n"
"\n"
"              Options and their parameters must be specified on the same  con-\n"
"              fig  file  line,  separated  by whitespace, colon, or the equals\n"
, stdout);
 fputs(
"              sign. Long option names can optionally be given  in  the  config\n"
"              file  without  the initial double dashes and if so, the colon or\n"
"              equals characters can be used as separators. If  the  option  is\n"
"              specified  with  one  or  two  dashes,  there can be no colon or\n"
"              equals character between the option and its parameter.\n"
"\n"
"              If the parameter is to contain whitespace, the parameter must be\n"
, stdout);
 fputs(
"              enclosed  within  quotes.  Within  double  quotes, the following\n"
"              escape sequences are available: \\\\, \\\", \\t, \\n,  \\r  and  \\v.  A\n"
"              backslash  preceding  any  other letter is ignored. If the first\n"
"              column of a config line is a '#' character, the rest of the line\n"
"              will be treated as a comment. Only write one option per physical\n"
"              line in the config file.\n"
"\n"
, stdout);
 fputs(
"              Specify the filename to -K, --config as '-' to  make  curl  read\n"
"              the file from stdin.\n"
"\n"
"              Note  that  to  be able to specify a URL in the config file, you\n"
"              need to specify it using the --url option,  and  not  by  simply\n"
"              writing  the  URL  on its own line. So, it could look similar to\n"
"              this:\n"
"\n"
"              url = \"https://curl.haxx.se/docs/\"\n"
"\n"
, stdout);
 fputs(
"              When curl is invoked, it always (unless -q is used) checks for a\n"
"              default  config  file  and  uses it if found. The default config\n"
"              file is checked for in the following places in this order:\n"
"\n"
"              1) curl tries to find the \"home dir\": It first  checks  for  the\n"
"              CURL_HOME and then the HOME environment variables. Failing that,\n"
"              it uses getpwuid() on Unix-like systems (which returns the  home\n"
, stdout);
 fputs(
"              dir  given the current user in your system). On Windows, it then\n"
"              checks for the APPDATA variable, or as a last resort the '%USER-\n"
"              PROFILE%\\Application Data'.\n"
"\n"
"              2)  On  windows, if there is no _curlrc file in the home dir, it\n"
"              checks for one in the same dir the curl executable is placed. On\n"
"              Unix-like  systems,  it will simply try to load .curlrc from the\n"
"              determined home dir.\n"
"\n"
, stdout);
 fputs(
"              # --- Example file ---\n"
"              # this is a comment\n"
