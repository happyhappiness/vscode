<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1006_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">getaddressinfo<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">sockaddr<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">sa<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">addr<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">long<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">port<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">short<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">us_port<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">sockaddr_in<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">si<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">ENABLE_IPV6<pos:position pos:line="6" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">sockaddr_in6<pos:position pos:line="7" pos:column="22"/></name></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">si6<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><name pos:line="7" pos:column="30">NULL<pos:position pos:line="7" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><call><name pos:line="9" pos:column="5">defined<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">HAVE_SYS_UN_H<pos:position pos:line="9" pos:column="26"/></name></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call> <operator pos:line="9" pos:column="28">&amp;&amp;<pos:position pos:line="9" pos:column="38"/></operator> <call><name pos:line="9" pos:column="31">defined<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">AF_UNIX<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">sockaddr_un<pos:position pos:line="10" pos:column="21"/></name></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="23">su<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><name pos:line="10" pos:column="28">NULL<pos:position pos:line="10" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

  <switch pos:line="13" pos:column="3">switch<condition pos:line="13" pos:column="9">(<expr><name><name pos:line="13" pos:column="10">sa<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">sa_family<pos:position pos:line="13" pos:column="23"/></name></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition> <block pos:line="13" pos:column="25">{
    <case pos:line="14" pos:column="5">case <expr><name pos:line="14" pos:column="10">AF_INET<pos:position pos:line="14" pos:column="17"/></name></expr>:<pos:position pos:line="14" pos:column="18"/></case>
      <expr_stmt><expr><name pos:line="15" pos:column="7">si<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator>struct <name pos:line="15" pos:column="20">sockaddr_in<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">*<pos:position pos:line="15" pos:column="33"/></operator><operator pos:line="15" pos:column="33">)<pos:position pos:line="15" pos:column="34"/></operator><operator pos:line="15" pos:column="34">(<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">void<pos:position pos:line="15" pos:column="39"/></name> <operator pos:line="15" pos:column="40">*<pos:position pos:line="15" pos:column="41"/></operator><operator pos:line="15" pos:column="41">)<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="43">sa<pos:position pos:line="15" pos:column="45"/></name></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>
      <if pos:line="16" pos:column="7">if<condition pos:line="16" pos:column="9">(<expr><call><name pos:line="16" pos:column="10">Curl_inet_ntop<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name><name pos:line="16" pos:column="25">sa<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">sa_family<pos:position pos:line="16" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="40">&amp;<pos:position pos:line="16" pos:column="45"/></operator><name><name pos:line="16" pos:column="41">si<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">-&gt;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="45">sin_addr<pos:position pos:line="16" pos:column="53"/></name></name></expr></argument>,
                        <argument><expr><name pos:line="17" pos:column="25">addr<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="31">MAX_IPADR_LEN<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">us_port<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <call><name pos:line="18" pos:column="19">ntohs<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">si<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">-&gt;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="29">sin_port<pos:position pos:line="18" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">port<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">us_port<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">TRUE<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return>
      }<pos:position pos:line="21" pos:column="8"/></block></then></if>
      <break pos:line="22" pos:column="7">break;<pos:position pos:line="22" pos:column="13"/></break>
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">ENABLE_IPV6<pos:position pos:line="23" pos:column="19"/></name></cpp:ifdef>
    <case pos:line="24" pos:column="5">case <expr><name pos:line="24" pos:column="10">AF_INET6<pos:position pos:line="24" pos:column="18"/></name></expr>:<pos:position pos:line="24" pos:column="19"/></case>
      <expr_stmt><expr><name pos:line="25" pos:column="7">si6<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <operator pos:line="25" pos:column="13">(<pos:position pos:line="25" pos:column="14"/></operator>struct <name pos:line="25" pos:column="21">sockaddr_in6<pos:position pos:line="25" pos:column="33"/></name> <operator pos:line="25" pos:column="34">*<pos:position pos:line="25" pos:column="35"/></operator><operator pos:line="25" pos:column="35">)<pos:position pos:line="25" pos:column="36"/></operator><operator pos:line="25" pos:column="36">(<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="37">void<pos:position pos:line="25" pos:column="41"/></name> <operator pos:line="25" pos:column="42">*<pos:position pos:line="25" pos:column="43"/></operator><operator pos:line="25" pos:column="43">)<pos:position pos:line="25" pos:column="44"/></operator> <name pos:line="25" pos:column="45">sa<pos:position pos:line="25" pos:column="47"/></name></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>
      <if pos:line="26" pos:column="7">if<condition pos:line="26" pos:column="9">(<expr><call><name pos:line="26" pos:column="10">Curl_inet_ntop<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name><name pos:line="26" pos:column="25">sa<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">sa_family<pos:position pos:line="26" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="40">&amp;<pos:position pos:line="26" pos:column="45"/></operator><name><name pos:line="26" pos:column="41">si6<pos:position pos:line="26" pos:column="44"/></name><operator pos:line="26" pos:column="44">-&gt;<pos:position pos:line="26" pos:column="49"/></operator><name pos:line="26" pos:column="46">sin6_addr<pos:position pos:line="26" pos:column="55"/></name></name></expr></argument>,
                        <argument><expr><name pos:line="27" pos:column="25">addr<pos:position pos:line="27" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="31">MAX_IPADR_LEN<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46"> <block pos:line="27" pos:column="47">{
        <expr_stmt><expr><name pos:line="28" pos:column="9">us_port<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <call><name pos:line="28" pos:column="19">ntohs<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name><name pos:line="28" pos:column="25">si6<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">-&gt;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="30">sin6_port<pos:position pos:line="28" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="29" pos:column="9">*<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">port<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">us_port<pos:position pos:line="29" pos:column="24"/></name></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">TRUE<pos:position pos:line="30" pos:column="20"/></name></expr>;<pos:position pos:line="30" pos:column="21"/></return>
      }<pos:position pos:line="31" pos:column="8"/></block></then></if>
      <break pos:line="32" pos:column="7">break;<pos:position pos:line="32" pos:column="13"/></break>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><call><name pos:line="34" pos:column="5">defined<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">HAVE_SYS_UN_H<pos:position pos:line="34" pos:column="26"/></name></expr></argument>)<pos:position pos:line="34" pos:column="27"/></argument_list></call> <operator pos:line="34" pos:column="28">&amp;&amp;<pos:position pos:line="34" pos:column="38"/></operator> <call><name pos:line="34" pos:column="31">defined<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><name pos:line="34" pos:column="39">AF_UNIX<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr></cpp:if>
    <case pos:line="35" pos:column="5">case <expr><name pos:line="35" pos:column="10">AF_UNIX<pos:position pos:line="35" pos:column="17"/></name></expr>:<pos:position pos:line="35" pos:column="18"/></case>
      <expr_stmt><expr><name pos:line="36" pos:column="7">su<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <operator pos:line="36" pos:column="12">(<pos:position pos:line="36" pos:column="13"/></operator>struct <name pos:line="36" pos:column="20">sockaddr_un<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">*<pos:position pos:line="36" pos:column="32"/></operator><operator pos:line="36" pos:column="32">)<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">sa<pos:position pos:line="36" pos:column="35"/></name></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">snprintf<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">addr<pos:position pos:line="37" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="22">MAX_IPADR_LEN<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="37">"%s"<pos:position pos:line="37" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="43">su<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">-&gt;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="47">sun_path<pos:position pos:line="37" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="38" pos:column="7">*<pos:position pos:line="38" pos:column="8"/></operator><name pos:line="38" pos:column="8">port<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <literal type="number" pos:line="38" pos:column="15">0<pos:position pos:line="38" pos:column="16"/></literal></expr>;<pos:position pos:line="38" pos:column="17"/></expr_stmt>
      <return pos:line="39" pos:column="7">return <expr><name pos:line="39" pos:column="14">TRUE<pos:position pos:line="39" pos:column="18"/></name></expr>;<pos:position pos:line="39" pos:column="19"/></return>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>
    <default pos:line="41" pos:column="5">default:<pos:position pos:line="41" pos:column="13"/></default>
      <break pos:line="42" pos:column="7">break;<pos:position pos:line="42" pos:column="13"/></break>
  }<pos:position pos:line="43" pos:column="4"/></block></switch>

  <expr_stmt><expr><name><name pos:line="45" pos:column="3">addr<pos:position pos:line="45" pos:column="7"/></name><index pos:line="45" pos:column="7">[<expr><literal type="number" pos:line="45" pos:column="8">0<pos:position pos:line="45" pos:column="9"/></literal></expr>]<pos:position pos:line="45" pos:column="10"/></index></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <literal type="char" pos:line="45" pos:column="13">'\0'<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="46" pos:column="3">*<pos:position pos:line="46" pos:column="4"/></operator><name pos:line="46" pos:column="4">port<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">=<pos:position pos:line="46" pos:column="10"/></operator> <literal type="number" pos:line="46" pos:column="11">0<pos:position pos:line="46" pos:column="12"/></literal></expr>;<pos:position pos:line="46" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="47" pos:column="3">errno<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <name pos:line="47" pos:column="11">EAFNOSUPPORT<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
  <return pos:line="48" pos:column="3">return <expr><name pos:line="48" pos:column="10">FALSE<pos:position pos:line="48" pos:column="15"/></name></expr>;<pos:position pos:line="48" pos:column="16"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
