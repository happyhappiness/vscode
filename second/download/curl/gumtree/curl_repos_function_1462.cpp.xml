<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1462.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLMcode<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">multi_runsingle<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">Curl_multi<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">multi<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                                 <parameter><decl><type><name><name pos:line="2" pos:column="34">struct<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">timeval<pos:position pos:line="2" pos:column="48"/></name></name></type> <name pos:line="2" pos:column="49">now<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
                                 <parameter><decl><type><name><name pos:line="3" pos:column="34">struct<pos:position pos:line="3" pos:column="40"/></name> <name pos:line="3" pos:column="41">SessionHandle<pos:position pos:line="3" pos:column="54"/></name></name> <modifier pos:line="3" pos:column="55">*<pos:position pos:line="3" pos:column="56"/></modifier></type><name pos:line="3" pos:column="56">data<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="61"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_message<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">msg<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name pos:line="5" pos:column="30">NULL<pos:position pos:line="5" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">connected<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">async<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">protocol_connect<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name pos:line="8" pos:column="27">FALSE<pos:position pos:line="8" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">bool<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">dophase_done<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><name pos:line="9" pos:column="23">FALSE<pos:position pos:line="9" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">done<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><name pos:line="10" pos:column="15">FALSE<pos:position pos:line="10" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLMcode<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">rc<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">CURLcode<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">result<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><name pos:line="12" pos:column="21">CURLE_OK<pos:position pos:line="12" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">SingleRequest<pos:position pos:line="13" pos:column="23"/></name></name> <modifier pos:line="13" pos:column="24">*<pos:position pos:line="13" pos:column="25"/></modifier></type><name pos:line="13" pos:column="25">k<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">long<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">timeout_ms<pos:position pos:line="14" pos:column="18"/></name></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">control<pos:position pos:line="15" pos:column="14"/></name></decl>;<pos:position pos:line="15" pos:column="15"/></decl_stmt>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><call><name pos:line="17" pos:column="7">GOOD_EASY_HANDLE<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">data<pos:position pos:line="17" pos:column="28"/></name></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">CURLM_BAD_EASY_HANDLE<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></return></block></then></if>

  <do pos:line="20" pos:column="3">do <block pos:line="20" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">bool<pos:position pos:line="21" pos:column="9"/></name></type> <name pos:line="21" pos:column="10">disconnect_conn<pos:position pos:line="21" pos:column="25"/></name> <init pos:line="21" pos:column="26">= <expr><name pos:line="21" pos:column="28">FALSE<pos:position pos:line="21" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">rc<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <name pos:line="22" pos:column="10">CURLM_OK<pos:position pos:line="22" pos:column="18"/></name></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* Handle the case when the pipe breaks, i.e., the connection
       we're using gets cleaned up and we're left with nothing. */</comment>
    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><name><name pos:line="26" pos:column="8">data<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">state<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">pipe_broke<pos:position pos:line="26" pos:column="30"/></name></name></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31"> <block pos:line="26" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">infof<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">data<pos:position pos:line="27" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="19">"Pipe broke: handle %p, url = %s\n"<pos:position pos:line="27" pos:column="54"/></literal></expr></argument>,
            <argument><expr><operator pos:line="28" pos:column="13">(<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">void<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">*<pos:position pos:line="28" pos:column="20"/></operator><operator pos:line="28" pos:column="20">)<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">data<pos:position pos:line="28" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="27">data<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">-&gt;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="33">state<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">.<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="39">path<pos:position pos:line="28" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>

      <if pos:line="30" pos:column="7">if<condition pos:line="30" pos:column="9">(<expr><name><name pos:line="30" pos:column="10">data<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">-&gt;<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="16">mstate<pos:position pos:line="30" pos:column="22"/></name></name> <operator pos:line="30" pos:column="23">&lt;<pos:position pos:line="30" pos:column="27"/></operator> <name pos:line="30" pos:column="25">CURLM_STATE_COMPLETED<pos:position pos:line="30" pos:column="46"/></name></expr>)<pos:position pos:line="30" pos:column="47"/></condition><then pos:line="30" pos:column="47"> <block pos:line="30" pos:column="48">{
        <comment type="block" pos:line="31" pos:column="9">/* Head back to the CONNECT state */</comment>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">multistate<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">data<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="26">CURLM_STATE_CONNECT<pos:position pos:line="32" pos:column="45"/></name></expr></argument>)<pos:position pos:line="32" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="33" pos:column="9">rc<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <name pos:line="33" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="33" pos:column="38"/></name></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">result<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <name pos:line="34" pos:column="18">CURLE_OK<pos:position pos:line="34" pos:column="26"/></name></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="35" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="37" pos:column="7">data<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">-&gt;<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="13">state<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">.<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="19">pipe_broke<pos:position pos:line="37" pos:column="29"/></name></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <name pos:line="37" pos:column="32">FALSE<pos:position pos:line="37" pos:column="37"/></name></expr>;<pos:position pos:line="37" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="38" pos:column="7">data<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">-&gt;<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="13">easy_conn<pos:position pos:line="38" pos:column="22"/></name></name> <operator pos:line="38" pos:column="23">=<pos:position pos:line="38" pos:column="24"/></operator> <name pos:line="38" pos:column="25">NULL<pos:position pos:line="38" pos:column="29"/></name></expr>;<pos:position pos:line="38" pos:column="30"/></expr_stmt>
      <continue pos:line="39" pos:column="7">continue;<pos:position pos:line="39" pos:column="16"/></continue>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <if pos:line="42" pos:column="5">if<condition pos:line="42" pos:column="7">(<expr><operator pos:line="42" pos:column="8">!<pos:position pos:line="42" pos:column="9"/></operator><name><name pos:line="42" pos:column="9">data<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">easy_conn<pos:position pos:line="42" pos:column="24"/></name></name> <operator pos:line="42" pos:column="25">&amp;&amp;<pos:position pos:line="42" pos:column="35"/></operator>
       <name><name pos:line="43" pos:column="8">data<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">mstate<pos:position pos:line="43" pos:column="20"/></name></name> <operator pos:line="43" pos:column="21">&gt;<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="23">CURLM_STATE_CONNECT<pos:position pos:line="43" pos:column="42"/></name> <operator pos:line="43" pos:column="43">&amp;&amp;<pos:position pos:line="43" pos:column="53"/></operator>
       <name><name pos:line="44" pos:column="8">data<pos:position pos:line="44" pos:column="12"/></name><operator pos:line="44" pos:column="12">-&gt;<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="14">mstate<pos:position pos:line="44" pos:column="20"/></name></name> <operator pos:line="44" pos:column="21">&lt;<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="23">CURLM_STATE_DONE<pos:position pos:line="44" pos:column="39"/></name></expr>)<pos:position pos:line="44" pos:column="40"/></condition><then pos:line="44" pos:column="40"> <block pos:line="44" pos:column="41">{
      <comment type="block" pos:line="45" pos:column="7">/* In all these states, the code will blindly access 'data-&gt;easy_conn'
         so this is precaution that it isn't NULL. And it silences static
         analyzers. */</comment>
      <expr_stmt><expr><call><name pos:line="48" pos:column="7">failf<pos:position pos:line="48" pos:column="12"/></name><argument_list pos:line="48" pos:column="12">(<argument><expr><name pos:line="48" pos:column="13">data<pos:position pos:line="48" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="19">"In state %d with no easy_conn, bail out!\n"<pos:position pos:line="48" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="65">data<pos:position pos:line="48" pos:column="69"/></name><operator pos:line="48" pos:column="69">-&gt;<pos:position pos:line="48" pos:column="74"/></operator><name pos:line="48" pos:column="71">mstate<pos:position pos:line="48" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="79"/></expr_stmt>
      <return pos:line="49" pos:column="7">return <expr><name pos:line="49" pos:column="14">CURLM_INTERNAL_ERROR<pos:position pos:line="49" pos:column="34"/></name></expr>;<pos:position pos:line="49" pos:column="35"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name><name pos:line="52" pos:column="8">data<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">-&gt;<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="14">easy_conn<pos:position pos:line="52" pos:column="23"/></name></name> <operator pos:line="52" pos:column="24">&amp;&amp;<pos:position pos:line="52" pos:column="34"/></operator> <name><name pos:line="52" pos:column="27">data<pos:position pos:line="52" pos:column="31"/></name><operator pos:line="52" pos:column="31">-&gt;<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="33">mstate<pos:position pos:line="52" pos:column="39"/></name></name> <operator pos:line="52" pos:column="40">&gt;<pos:position pos:line="52" pos:column="44"/></operator> <name pos:line="52" pos:column="42">CURLM_STATE_CONNECT<pos:position pos:line="52" pos:column="61"/></name> <operator pos:line="52" pos:column="62">&amp;&amp;<pos:position pos:line="52" pos:column="72"/></operator>
       <name><name pos:line="53" pos:column="8">data<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">mstate<pos:position pos:line="53" pos:column="20"/></name></name> <operator pos:line="53" pos:column="21">&lt;<pos:position pos:line="53" pos:column="25"/></operator> <name pos:line="53" pos:column="23">CURLM_STATE_COMPLETED<pos:position pos:line="53" pos:column="44"/></name></expr>)<pos:position pos:line="53" pos:column="45"/></condition><then pos:line="53" pos:column="45">
      <comment type="block" pos:line="54" pos:column="7">/* Make sure we set the connection's current owner */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="55" pos:column="7">data<pos:position pos:line="55" pos:column="11"/></name><operator pos:line="55" pos:column="11">-&gt;<pos:position pos:line="55" pos:column="16"/></operator><name pos:line="55" pos:column="13">easy_conn<pos:position pos:line="55" pos:column="22"/></name><operator pos:line="55" pos:column="22">-&gt;<pos:position pos:line="55" pos:column="27"/></operator><name pos:line="55" pos:column="24">data<pos:position pos:line="55" pos:column="28"/></name></name> <operator pos:line="55" pos:column="29">=<pos:position pos:line="55" pos:column="30"/></operator> <name pos:line="55" pos:column="31">data<pos:position pos:line="55" pos:column="35"/></name></expr>;<pos:position pos:line="55" pos:column="36"/></expr_stmt></block></then></if>

    <if pos:line="57" pos:column="5">if<condition pos:line="57" pos:column="7">(<expr><name><name pos:line="57" pos:column="8">data<pos:position pos:line="57" pos:column="12"/></name><operator pos:line="57" pos:column="12">-&gt;<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="14">easy_conn<pos:position pos:line="57" pos:column="23"/></name></name> <operator pos:line="57" pos:column="24">&amp;&amp;<pos:position pos:line="57" pos:column="34"/></operator>
       <operator pos:line="58" pos:column="8">(<pos:position pos:line="58" pos:column="9"/></operator><name><name pos:line="58" pos:column="9">data<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">mstate<pos:position pos:line="58" pos:column="21"/></name></name> <operator pos:line="58" pos:column="22">&gt;=<pos:position pos:line="58" pos:column="27"/></operator> <name pos:line="58" pos:column="25">CURLM_STATE_CONNECT<pos:position pos:line="58" pos:column="44"/></name><operator pos:line="58" pos:column="44">)<pos:position pos:line="58" pos:column="45"/></operator> <operator pos:line="58" pos:column="46">&amp;&amp;<pos:position pos:line="58" pos:column="56"/></operator>
       <operator pos:line="59" pos:column="8">(<pos:position pos:line="59" pos:column="9"/></operator><name><name pos:line="59" pos:column="9">data<pos:position pos:line="59" pos:column="13"/></name><operator pos:line="59" pos:column="13">-&gt;<pos:position pos:line="59" pos:column="18"/></operator><name pos:line="59" pos:column="15">mstate<pos:position pos:line="59" pos:column="21"/></name></name> <operator pos:line="59" pos:column="22">&lt;<pos:position pos:line="59" pos:column="26"/></operator> <name pos:line="59" pos:column="24">CURLM_STATE_COMPLETED<pos:position pos:line="59" pos:column="45"/></name><operator pos:line="59" pos:column="45">)<pos:position pos:line="59" pos:column="46"/></operator></expr>)<pos:position pos:line="59" pos:column="47"/></condition><then pos:line="59" pos:column="47"> <block pos:line="59" pos:column="48">{
      <comment type="block" pos:line="60" pos:column="7">/* we need to wait for the connect state as only then is the start time
         stored, but we must not check already completed handles */</comment>

      <expr_stmt><expr><name pos:line="63" pos:column="7">timeout_ms<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <call><name pos:line="63" pos:column="20">Curl_timeleft<pos:position pos:line="63" pos:column="33"/></name><argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">data<pos:position pos:line="63" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="40">&amp;<pos:position pos:line="63" pos:column="45"/></operator><name pos:line="63" pos:column="41">now<pos:position pos:line="63" pos:column="44"/></name></expr></argument>,
                                 <argument><expr><ternary><condition><expr><operator pos:line="64" pos:column="34">(<pos:position pos:line="64" pos:column="35"/></operator><name><name pos:line="64" pos:column="35">data<pos:position pos:line="64" pos:column="39"/></name><operator pos:line="64" pos:column="39">-&gt;<pos:position pos:line="64" pos:column="44"/></operator><name pos:line="64" pos:column="41">mstate<pos:position pos:line="64" pos:column="47"/></name></name> <operator pos:line="64" pos:column="48">&lt;=<pos:position pos:line="64" pos:column="53"/></operator> <name pos:line="64" pos:column="51">CURLM_STATE_WAITDO<pos:position pos:line="64" pos:column="69"/></name><operator pos:line="64" pos:column="69">)<pos:position pos:line="64" pos:column="70"/></operator></expr>?<pos:position pos:line="64" pos:column="71"/></condition><then pos:line="64" pos:column="71">
                                 <expr><name pos:line="65" pos:column="34">TRUE<pos:position pos:line="65" pos:column="38"/></name></expr></then><else pos:line="65" pos:column="38">:<expr><name pos:line="65" pos:column="39">FALSE<pos:position pos:line="65" pos:column="44"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="65" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="46"/></expr_stmt>

      <if pos:line="67" pos:column="7">if<condition pos:line="67" pos:column="9">(<expr><name pos:line="67" pos:column="10">timeout_ms<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">&lt;<pos:position pos:line="67" pos:column="25"/></operator> <literal type="number" pos:line="67" pos:column="23">0<pos:position pos:line="67" pos:column="24"/></literal></expr>)<pos:position pos:line="67" pos:column="25"/></condition><then pos:line="67" pos:column="25"> <block pos:line="67" pos:column="26">{
        <comment type="block" pos:line="68" pos:column="9">/* Handle timed out */</comment>
        <if pos:line="69" pos:column="9">if<condition pos:line="69" pos:column="11">(<expr><name><name pos:line="69" pos:column="12">data<pos:position pos:line="69" pos:column="16"/></name><operator pos:line="69" pos:column="16">-&gt;<pos:position pos:line="69" pos:column="21"/></operator><name pos:line="69" pos:column="18">mstate<pos:position pos:line="69" pos:column="24"/></name></name> <operator pos:line="69" pos:column="25">==<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="28">CURLM_STATE_WAITRESOLVE<pos:position pos:line="69" pos:column="51"/></name></expr>)<pos:position pos:line="69" pos:column="52"/></condition><then pos:line="69" pos:column="52">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="11">failf<pos:position pos:line="70" pos:column="16"/></name><argument_list pos:line="70" pos:column="16">(<argument><expr><name pos:line="70" pos:column="17">data<pos:position pos:line="70" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="23">"Resolving timed out after %ld milliseconds"<pos:position pos:line="70" pos:column="67"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="71" pos:column="17">Curl_tvdiff<pos:position pos:line="71" pos:column="28"/></name><argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">now<pos:position pos:line="71" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="34">data<pos:position pos:line="71" pos:column="38"/></name><operator pos:line="71" pos:column="38">-&gt;<pos:position pos:line="71" pos:column="43"/></operator><name pos:line="71" pos:column="40">progress<pos:position pos:line="71" pos:column="48"/></name><operator pos:line="71" pos:column="48">.<pos:position pos:line="71" pos:column="49"/></operator><name pos:line="71" pos:column="49">t_startsingle<pos:position pos:line="71" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="65"/></expr_stmt></block></then>
        <elseif pos:line="72" pos:column="9">else <if pos:line="72" pos:column="14">if<condition pos:line="72" pos:column="16">(<expr><name><name pos:line="72" pos:column="17">data<pos:position pos:line="72" pos:column="21"/></name><operator pos:line="72" pos:column="21">-&gt;<pos:position pos:line="72" pos:column="26"/></operator><name pos:line="72" pos:column="23">mstate<pos:position pos:line="72" pos:column="29"/></name></name> <operator pos:line="72" pos:column="30">==<pos:position pos:line="72" pos:column="32"/></operator> <name pos:line="72" pos:column="33">CURLM_STATE_WAITCONNECT<pos:position pos:line="72" pos:column="56"/></name></expr>)<pos:position pos:line="72" pos:column="57"/></condition><then pos:line="72" pos:column="57">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="11">failf<pos:position pos:line="73" pos:column="16"/></name><argument_list pos:line="73" pos:column="16">(<argument><expr><name pos:line="73" pos:column="17">data<pos:position pos:line="73" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="23">"Connection timed out after %ld milliseconds"<pos:position pos:line="73" pos:column="68"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="74" pos:column="17">Curl_tvdiff<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><name pos:line="74" pos:column="29">now<pos:position pos:line="74" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="34">data<pos:position pos:line="74" pos:column="38"/></name><operator pos:line="74" pos:column="38">-&gt;<pos:position pos:line="74" pos:column="43"/></operator><name pos:line="74" pos:column="40">progress<pos:position pos:line="74" pos:column="48"/></name><operator pos:line="74" pos:column="48">.<pos:position pos:line="74" pos:column="49"/></operator><name pos:line="74" pos:column="49">t_startsingle<pos:position pos:line="74" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="65"/></expr_stmt></block></then></if></elseif>
        <else pos:line="75" pos:column="9">else <block pos:line="75" pos:column="14">{
          <expr_stmt><expr><name pos:line="76" pos:column="11">k<pos:position pos:line="76" pos:column="12"/></name> <operator pos:line="76" pos:column="13">=<pos:position pos:line="76" pos:column="14"/></operator> <operator pos:line="76" pos:column="15">&amp;<pos:position pos:line="76" pos:column="20"/></operator><name><name pos:line="76" pos:column="16">data<pos:position pos:line="76" pos:column="20"/></name><operator pos:line="76" pos:column="20">-&gt;<pos:position pos:line="76" pos:column="25"/></operator><name pos:line="76" pos:column="22">req<pos:position pos:line="76" pos:column="25"/></name></name></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt>
          <if pos:line="77" pos:column="11">if<condition pos:line="77" pos:column="13">(<expr><name><name pos:line="77" pos:column="14">k<pos:position pos:line="77" pos:column="15"/></name><operator pos:line="77" pos:column="15">-&gt;<pos:position pos:line="77" pos:column="20"/></operator><name pos:line="77" pos:column="17">size<pos:position pos:line="77" pos:column="21"/></name></name> <operator pos:line="77" pos:column="22">!=<pos:position pos:line="77" pos:column="24"/></operator> <operator pos:line="77" pos:column="25">-<pos:position pos:line="77" pos:column="26"/></operator><literal type="number" pos:line="77" pos:column="26">1<pos:position pos:line="77" pos:column="27"/></literal></expr>)<pos:position pos:line="77" pos:column="28"/></condition><then pos:line="77" pos:column="28"> <block pos:line="77" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="78" pos:column="13">failf<pos:position pos:line="78" pos:column="18"/></name><argument_list pos:line="78" pos:column="18">(<argument><expr><name pos:line="78" pos:column="19">data<pos:position pos:line="78" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="25">"Operation timed out after %ld milliseconds with %"<pos:position pos:line="78" pos:column="76"/></literal>
                  <name pos:line="79" pos:column="19">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="79" pos:column="41"/></name> <literal type="string" pos:line="79" pos:column="42">" out of %"<pos:position pos:line="79" pos:column="53"/></literal>
                  <name pos:line="80" pos:column="19">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="80" pos:column="41"/></name> <literal type="string" pos:line="80" pos:column="42">" bytes received"<pos:position pos:line="80" pos:column="59"/></literal></expr></argument>,
                  <argument><expr><call><name pos:line="81" pos:column="19">Curl_tvdiff<pos:position pos:line="81" pos:column="30"/></name><argument_list pos:line="81" pos:column="30">(<argument><expr><name><name pos:line="81" pos:column="31">k<pos:position pos:line="81" pos:column="32"/></name><operator pos:line="81" pos:column="32">-&gt;<pos:position pos:line="81" pos:column="37"/></operator><name pos:line="81" pos:column="34">now<pos:position pos:line="81" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="39">data<pos:position pos:line="81" pos:column="43"/></name><operator pos:line="81" pos:column="43">-&gt;<pos:position pos:line="81" pos:column="48"/></operator><name pos:line="81" pos:column="45">progress<pos:position pos:line="81" pos:column="53"/></name><operator pos:line="81" pos:column="53">.<pos:position pos:line="81" pos:column="54"/></operator><name pos:line="81" pos:column="54">t_startsingle<pos:position pos:line="81" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="68"/></argument_list></call></expr></argument>,
                  <argument><expr><name><name pos:line="82" pos:column="19">k<pos:position pos:line="82" pos:column="20"/></name><operator pos:line="82" pos:column="20">-&gt;<pos:position pos:line="82" pos:column="25"/></operator><name pos:line="82" pos:column="22">bytecount<pos:position pos:line="82" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="33">k<pos:position pos:line="82" pos:column="34"/></name><operator pos:line="82" pos:column="34">-&gt;<pos:position pos:line="82" pos:column="39"/></operator><name pos:line="82" pos:column="36">size<pos:position pos:line="82" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="42"/></expr_stmt>
          }<pos:position pos:line="83" pos:column="12"/></block></then>
          <else pos:line="84" pos:column="11">else <block pos:line="84" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">failf<pos:position pos:line="85" pos:column="18"/></name><argument_list pos:line="85" pos:column="18">(<argument><expr><name pos:line="85" pos:column="19">data<pos:position pos:line="85" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="25">"Operation timed out after %ld milliseconds with %"<pos:position pos:line="85" pos:column="76"/></literal>
                  <name pos:line="86" pos:column="19">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="86" pos:column="41"/></name> <literal type="string" pos:line="86" pos:column="42">" bytes received"<pos:position pos:line="86" pos:column="59"/></literal></expr></argument>,
                  <argument><expr><call><name pos:line="87" pos:column="19">Curl_tvdiff<pos:position pos:line="87" pos:column="30"/></name><argument_list pos:line="87" pos:column="30">(<argument><expr><name pos:line="87" pos:column="31">now<pos:position pos:line="87" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="36">data<pos:position pos:line="87" pos:column="40"/></name><operator pos:line="87" pos:column="40">-&gt;<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="42">progress<pos:position pos:line="87" pos:column="50"/></name><operator pos:line="87" pos:column="50">.<pos:position pos:line="87" pos:column="51"/></operator><name pos:line="87" pos:column="51">t_startsingle<pos:position pos:line="87" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="65"/></argument_list></call></expr></argument>,
                  <argument><expr><name><name pos:line="88" pos:column="19">k<pos:position pos:line="88" pos:column="20"/></name><operator pos:line="88" pos:column="20">-&gt;<pos:position pos:line="88" pos:column="25"/></operator><name pos:line="88" pos:column="22">bytecount<pos:position pos:line="88" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="33"/></expr_stmt>
          }<pos:position pos:line="89" pos:column="12"/></block></else></if>
        }<pos:position pos:line="90" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="92" pos:column="9">/* Force connection closed if the connection has indeed been used */</comment>
        <if pos:line="93" pos:column="9">if<condition pos:line="93" pos:column="11">(<expr><name><name pos:line="93" pos:column="12">data<pos:position pos:line="93" pos:column="16"/></name><operator pos:line="93" pos:column="16">-&gt;<pos:position pos:line="93" pos:column="21"/></operator><name pos:line="93" pos:column="18">mstate<pos:position pos:line="93" pos:column="24"/></name></name> <operator pos:line="93" pos:column="25">&gt;<pos:position pos:line="93" pos:column="29"/></operator> <name pos:line="93" pos:column="27">CURLM_STATE_DO<pos:position pos:line="93" pos:column="41"/></name></expr>)<pos:position pos:line="93" pos:column="42"/></condition><then pos:line="93" pos:column="42"> <block pos:line="93" pos:column="43">{
          <expr_stmt><expr><call><name pos:line="94" pos:column="11">connclose<pos:position pos:line="94" pos:column="20"/></name><argument_list pos:line="94" pos:column="20">(<argument><expr><name><name pos:line="94" pos:column="21">data<pos:position pos:line="94" pos:column="25"/></name><operator pos:line="94" pos:column="25">-&gt;<pos:position pos:line="94" pos:column="30"/></operator><name pos:line="94" pos:column="27">easy_conn<pos:position pos:line="94" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="38">"Disconnected with pending data"<pos:position pos:line="94" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="72"/></expr_stmt>
          <expr_stmt><expr><name pos:line="95" pos:column="11">disconnect_conn<pos:position pos:line="95" pos:column="26"/></name> <operator pos:line="95" pos:column="27">=<pos:position pos:line="95" pos:column="28"/></operator> <name pos:line="95" pos:column="29">TRUE<pos:position pos:line="95" pos:column="33"/></name></expr>;<pos:position pos:line="95" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="96" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="97" pos:column="9">result<pos:position pos:line="97" pos:column="15"/></name> <operator pos:line="97" pos:column="16">=<pos:position pos:line="97" pos:column="17"/></operator> <name pos:line="97" pos:column="18">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="97" pos:column="42"/></name></expr>;<pos:position pos:line="97" pos:column="43"/></expr_stmt>
        <comment type="block" pos:line="98" pos:column="9">/* Skip the statemachine and go directly to error handling section. */</comment>
        <goto pos:line="99" pos:column="9">goto <name pos:line="99" pos:column="14">statemachine_end<pos:position pos:line="99" pos:column="30"/></name>;<pos:position pos:line="99" pos:column="31"/></goto>
      }<pos:position pos:line="100" pos:column="8"/></block></then></if>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>

    <switch pos:line="103" pos:column="5">switch<condition pos:line="103" pos:column="11">(<expr><name><name pos:line="103" pos:column="12">data<pos:position pos:line="103" pos:column="16"/></name><operator pos:line="103" pos:column="16">-&gt;<pos:position pos:line="103" pos:column="21"/></operator><name pos:line="103" pos:column="18">mstate<pos:position pos:line="103" pos:column="24"/></name></name></expr>)<pos:position pos:line="103" pos:column="25"/></condition> <block pos:line="103" pos:column="26">{
    <case pos:line="104" pos:column="5">case <expr><name pos:line="104" pos:column="10">CURLM_STATE_INIT<pos:position pos:line="104" pos:column="26"/></name></expr>:<pos:position pos:line="104" pos:column="27"/></case>
      <comment type="block" pos:line="105" pos:column="7">/* init this transfer. */</comment>
      <expr_stmt><expr><name pos:line="106" pos:column="7">result<pos:position pos:line="106" pos:column="13"/></name><operator pos:line="106" pos:column="13">=<pos:position pos:line="106" pos:column="14"/></operator><call><name pos:line="106" pos:column="14">Curl_pretransfer<pos:position pos:line="106" pos:column="30"/></name><argument_list pos:line="106" pos:column="30">(<argument><expr><name pos:line="106" pos:column="31">data<pos:position pos:line="106" pos:column="35"/></name></expr></argument>)<pos:position pos:line="106" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="37"/></expr_stmt>

      <if pos:line="108" pos:column="7">if<condition pos:line="108" pos:column="9">(<expr><operator pos:line="108" pos:column="10">!<pos:position pos:line="108" pos:column="11"/></operator><name pos:line="108" pos:column="11">result<pos:position pos:line="108" pos:column="17"/></name></expr>)<pos:position pos:line="108" pos:column="18"/></condition><then pos:line="108" pos:column="18"> <block pos:line="108" pos:column="19">{
        <comment type="block" pos:line="109" pos:column="9">/* after init, go CONNECT */</comment>
        <expr_stmt><expr><call><name pos:line="110" pos:column="9">multistate<pos:position pos:line="110" pos:column="19"/></name><argument_list pos:line="110" pos:column="19">(<argument><expr><name pos:line="110" pos:column="20">data<pos:position pos:line="110" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="26">CURLM_STATE_CONNECT<pos:position pos:line="110" pos:column="45"/></name></expr></argument>)<pos:position pos:line="110" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="111" pos:column="9">Curl_pgrsTime<pos:position pos:line="111" pos:column="22"/></name><argument_list pos:line="111" pos:column="22">(<argument><expr><name pos:line="111" pos:column="23">data<pos:position pos:line="111" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="29">TIMER_STARTOP<pos:position pos:line="111" pos:column="42"/></name></expr></argument>)<pos:position pos:line="111" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="112" pos:column="9">rc<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">=<pos:position pos:line="112" pos:column="13"/></operator> <name pos:line="112" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="112" pos:column="38"/></name></expr>;<pos:position pos:line="112" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="113" pos:column="8"/></block></then></if>
      <break pos:line="114" pos:column="7">break;<pos:position pos:line="114" pos:column="13"/></break>

    <case pos:line="116" pos:column="5">case <expr><name pos:line="116" pos:column="10">CURLM_STATE_CONNECT_PEND<pos:position pos:line="116" pos:column="34"/></name></expr>:<pos:position pos:line="116" pos:column="35"/></case>
      <comment type="block" pos:line="117" pos:column="7">/* We will stay here until there is a connection available. Then
         we try again in the CURLM_STATE_CONNECT state. */</comment>
      <break pos:line="119" pos:column="7">break;<pos:position pos:line="119" pos:column="13"/></break>

    <case pos:line="121" pos:column="5">case <expr><name pos:line="121" pos:column="10">CURLM_STATE_CONNECT<pos:position pos:line="121" pos:column="29"/></name></expr>:<pos:position pos:line="121" pos:column="30"/></case>
      <comment type="block" pos:line="122" pos:column="7">/* Connect. We want to get a connection identifier filled in. */</comment>
      <expr_stmt><expr><call><name pos:line="123" pos:column="7">Curl_pgrsTime<pos:position pos:line="123" pos:column="20"/></name><argument_list pos:line="123" pos:column="20">(<argument><expr><name pos:line="123" pos:column="21">data<pos:position pos:line="123" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="27">TIMER_STARTSINGLE<pos:position pos:line="123" pos:column="44"/></name></expr></argument>)<pos:position pos:line="123" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name pos:line="124" pos:column="7">result<pos:position pos:line="124" pos:column="13"/></name> <operator pos:line="124" pos:column="14">=<pos:position pos:line="124" pos:column="15"/></operator> <call><name pos:line="124" pos:column="16">Curl_connect<pos:position pos:line="124" pos:column="28"/></name><argument_list pos:line="124" pos:column="28">(<argument><expr><name pos:line="124" pos:column="29">data<pos:position pos:line="124" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="35">&amp;<pos:position pos:line="124" pos:column="40"/></operator><name><name pos:line="124" pos:column="36">data<pos:position pos:line="124" pos:column="40"/></name><operator pos:line="124" pos:column="40">-&gt;<pos:position pos:line="124" pos:column="45"/></operator><name pos:line="124" pos:column="42">easy_conn<pos:position pos:line="124" pos:column="51"/></name></name></expr></argument>,
                            <argument><expr><operator pos:line="125" pos:column="29">&amp;<pos:position pos:line="125" pos:column="34"/></operator><name pos:line="125" pos:column="30">async<pos:position pos:line="125" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="37">&amp;<pos:position pos:line="125" pos:column="42"/></operator><name pos:line="125" pos:column="38">protocol_connect<pos:position pos:line="125" pos:column="54"/></name></expr></argument>)<pos:position pos:line="125" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="56"/></expr_stmt>
      <if pos:line="126" pos:column="7">if<condition pos:line="126" pos:column="9">(<expr><name pos:line="126" pos:column="10">CURLE_NO_CONNECTION_AVAILABLE<pos:position pos:line="126" pos:column="39"/></name> <operator pos:line="126" pos:column="40">==<pos:position pos:line="126" pos:column="42"/></operator> <name pos:line="126" pos:column="43">result<pos:position pos:line="126" pos:column="49"/></name></expr>)<pos:position pos:line="126" pos:column="50"/></condition><then pos:line="126" pos:column="50"> <block pos:line="126" pos:column="51">{
        <comment type="block" pos:line="127" pos:column="9">/* There was no connection available. We will go to the pending
           state and wait for an available connection. */</comment>
        <expr_stmt><expr><call><name pos:line="129" pos:column="9">multistate<pos:position pos:line="129" pos:column="19"/></name><argument_list pos:line="129" pos:column="19">(<argument><expr><name pos:line="129" pos:column="20">data<pos:position pos:line="129" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="26">CURLM_STATE_CONNECT_PEND<pos:position pos:line="129" pos:column="50"/></name></expr></argument>)<pos:position pos:line="129" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="52"/></expr_stmt>

        <comment type="block" pos:line="131" pos:column="9">/* add this handle to the list of connect-pending handles */</comment>
        <if pos:line="132" pos:column="9">if<condition pos:line="132" pos:column="11">(<expr><operator pos:line="132" pos:column="12">!<pos:position pos:line="132" pos:column="13"/></operator><call><name pos:line="132" pos:column="13">Curl_llist_insert_next<pos:position pos:line="132" pos:column="35"/></name><argument_list pos:line="132" pos:column="35">(<argument><expr><name><name pos:line="132" pos:column="36">multi<pos:position pos:line="132" pos:column="41"/></name><operator pos:line="132" pos:column="41">-&gt;<pos:position pos:line="132" pos:column="46"/></operator><name pos:line="132" pos:column="43">pending<pos:position pos:line="132" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="52">multi<pos:position pos:line="132" pos:column="57"/></name><operator pos:line="132" pos:column="57">-&gt;<pos:position pos:line="132" pos:column="62"/></operator><name pos:line="132" pos:column="59">pending<pos:position pos:line="132" pos:column="66"/></name><operator pos:line="132" pos:column="66">-&gt;<pos:position pos:line="132" pos:column="71"/></operator><name pos:line="132" pos:column="68">tail<pos:position pos:line="132" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="74">data<pos:position pos:line="132" pos:column="78"/></name></expr></argument>)<pos:position pos:line="132" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="132" pos:column="80"/></condition><then pos:line="132" pos:column="80">
          <block type="pseudo"><expr_stmt><expr><name pos:line="133" pos:column="11">result<pos:position pos:line="133" pos:column="17"/></name> <operator pos:line="133" pos:column="18">=<pos:position pos:line="133" pos:column="19"/></operator> <name pos:line="133" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="133" pos:column="39"/></name></expr>;<pos:position pos:line="133" pos:column="40"/></expr_stmt></block></then>
        <else pos:line="134" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="135" pos:column="11">result<pos:position pos:line="135" pos:column="17"/></name> <operator pos:line="135" pos:column="18">=<pos:position pos:line="135" pos:column="19"/></operator> <name pos:line="135" pos:column="20">CURLE_OK<pos:position pos:line="135" pos:column="28"/></name></expr>;<pos:position pos:line="135" pos:column="29"/></expr_stmt></block></else></if>
        <break pos:line="136" pos:column="9">break;<pos:position pos:line="136" pos:column="15"/></break>
      }<pos:position pos:line="137" pos:column="8"/></block></then></if>

      <if pos:line="139" pos:column="7">if<condition pos:line="139" pos:column="9">(<expr><operator pos:line="139" pos:column="10">!<pos:position pos:line="139" pos:column="11"/></operator><name pos:line="139" pos:column="11">result<pos:position pos:line="139" pos:column="17"/></name></expr>)<pos:position pos:line="139" pos:column="18"/></condition><then pos:line="139" pos:column="18"> <block pos:line="139" pos:column="19">{
        <comment type="block" pos:line="140" pos:column="9">/* Add this handle to the send or pend pipeline */</comment>
        <expr_stmt><expr><name pos:line="141" pos:column="9">result<pos:position pos:line="141" pos:column="15"/></name> <operator pos:line="141" pos:column="16">=<pos:position pos:line="141" pos:column="17"/></operator> <call><name pos:line="141" pos:column="18">Curl_add_handle_to_pipeline<pos:position pos:line="141" pos:column="45"/></name><argument_list pos:line="141" pos:column="45">(<argument><expr><name pos:line="141" pos:column="46">data<pos:position pos:line="141" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="52">data<pos:position pos:line="141" pos:column="56"/></name><operator pos:line="141" pos:column="56">-&gt;<pos:position pos:line="141" pos:column="61"/></operator><name pos:line="141" pos:column="58">easy_conn<pos:position pos:line="141" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="141" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="69"/></expr_stmt>
        <if pos:line="142" pos:column="9">if<condition pos:line="142" pos:column="11">(<expr><name pos:line="142" pos:column="12">result<pos:position pos:line="142" pos:column="18"/></name></expr>)<pos:position pos:line="142" pos:column="19"/></condition><then pos:line="142" pos:column="19">
          <block type="pseudo"><expr_stmt><expr><name pos:line="143" pos:column="11">disconnect_conn<pos:position pos:line="143" pos:column="26"/></name> <operator pos:line="143" pos:column="27">=<pos:position pos:line="143" pos:column="28"/></operator> <name pos:line="143" pos:column="29">TRUE<pos:position pos:line="143" pos:column="33"/></name></expr>;<pos:position pos:line="143" pos:column="34"/></expr_stmt></block></then>
        <else pos:line="144" pos:column="9">else <block pos:line="144" pos:column="14">{
          <if pos:line="145" pos:column="11">if<condition pos:line="145" pos:column="13">(<expr><name pos:line="145" pos:column="14">async<pos:position pos:line="145" pos:column="19"/></name></expr>)<pos:position pos:line="145" pos:column="20"/></condition><then pos:line="145" pos:column="20">
            <comment type="block" pos:line="146" pos:column="13">/* We're now waiting for an asynchronous name lookup */</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="147" pos:column="13">multistate<pos:position pos:line="147" pos:column="23"/></name><argument_list pos:line="147" pos:column="23">(<argument><expr><name pos:line="147" pos:column="24">data<pos:position pos:line="147" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="30">CURLM_STATE_WAITRESOLVE<pos:position pos:line="147" pos:column="53"/></name></expr></argument>)<pos:position pos:line="147" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="55"/></expr_stmt></block></then>
          <else pos:line="148" pos:column="11">else <block pos:line="148" pos:column="16">{
            <comment type="block" pos:line="149" pos:column="13">/* after the connect has been sent off, go WAITCONNECT unless the
               protocol connect is already done and we can go directly to
               WAITDO or DO! */</comment>
            <expr_stmt><expr><name pos:line="152" pos:column="13">rc<pos:position pos:line="152" pos:column="15"/></name> <operator pos:line="152" pos:column="16">=<pos:position pos:line="152" pos:column="17"/></operator> <name pos:line="152" pos:column="18">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="152" pos:column="42"/></name></expr>;<pos:position pos:line="152" pos:column="43"/></expr_stmt>

            <if pos:line="154" pos:column="13">if<condition pos:line="154" pos:column="15">(<expr><name pos:line="154" pos:column="16">protocol_connect<pos:position pos:line="154" pos:column="32"/></name></expr>)<pos:position pos:line="154" pos:column="33"/></condition><then pos:line="154" pos:column="33">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="155" pos:column="15">multistate<pos:position pos:line="155" pos:column="25"/></name><argument_list pos:line="155" pos:column="25">(<argument><expr><name pos:line="155" pos:column="26">data<pos:position pos:line="155" pos:column="30"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="155" pos:column="32">multi<pos:position pos:line="155" pos:column="37"/></name><operator pos:line="155" pos:column="37">-&gt;<pos:position pos:line="155" pos:column="42"/></operator><name pos:line="155" pos:column="39">pipelining_enabled<pos:position pos:line="155" pos:column="57"/></name></name></expr>?<pos:position pos:line="155" pos:column="58"/></condition><then pos:line="155" pos:column="58">
                         <expr><name pos:line="156" pos:column="26">CURLM_STATE_WAITDO<pos:position pos:line="156" pos:column="44"/></name></expr></then><else pos:line="156" pos:column="44">:<expr><name pos:line="156" pos:column="45">CURLM_STATE_DO<pos:position pos:line="156" pos:column="59"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="156" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="61"/></expr_stmt></block></then>
            <else pos:line="157" pos:column="13">else <block pos:line="157" pos:column="18">{
<cpp:ifndef pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">ifndef<pos:position pos:line="158" pos:column="8"/></cpp:directive> <name pos:line="158" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="158" pos:column="26"/></name></cpp:ifndef>
              <if pos:line="159" pos:column="15">if<condition pos:line="159" pos:column="17">(<expr><name><name pos:line="159" pos:column="18">data<pos:position pos:line="159" pos:column="22"/></name><operator pos:line="159" pos:column="22">-&gt;<pos:position pos:line="159" pos:column="27"/></operator><name pos:line="159" pos:column="24">easy_conn<pos:position pos:line="159" pos:column="33"/></name><operator pos:line="159" pos:column="33">-&gt;<pos:position pos:line="159" pos:column="38"/></operator><name pos:line="159" pos:column="35">tunnel_state<pos:position pos:line="159" pos:column="47"/></name><index pos:line="159" pos:column="47">[<expr><name pos:line="159" pos:column="48">FIRSTSOCKET<pos:position pos:line="159" pos:column="59"/></name></expr>]<pos:position pos:line="159" pos:column="60"/></index></name> <operator pos:line="159" pos:column="61">==<pos:position pos:line="159" pos:column="63"/></operator> <name pos:line="159" pos:column="64">TUNNEL_CONNECT<pos:position pos:line="159" pos:column="78"/></name></expr>)<pos:position pos:line="159" pos:column="79"/></condition><then pos:line="159" pos:column="79">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="160" pos:column="17">multistate<pos:position pos:line="160" pos:column="27"/></name><argument_list pos:line="160" pos:column="27">(<argument><expr><name pos:line="160" pos:column="28">data<pos:position pos:line="160" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="34">CURLM_STATE_WAITPROXYCONNECT<pos:position pos:line="160" pos:column="62"/></name></expr></argument>)<pos:position pos:line="160" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="64"/></expr_stmt></block></then>
              <else pos:line="161" pos:column="15">else
<cpp:endif pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">endif<pos:position pos:line="162" pos:column="7"/></cpp:directive></cpp:endif>
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="163" pos:column="17">multistate<pos:position pos:line="163" pos:column="27"/></name><argument_list pos:line="163" pos:column="27">(<argument><expr><name pos:line="163" pos:column="28">data<pos:position pos:line="163" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="34">CURLM_STATE_WAITCONNECT<pos:position pos:line="163" pos:column="57"/></name></expr></argument>)<pos:position pos:line="163" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="59"/></expr_stmt></block></else></if>
            }<pos:position pos:line="164" pos:column="14"/></block></else></if>
          }<pos:position pos:line="165" pos:column="12"/></block></else></if>
        }<pos:position pos:line="166" pos:column="10"/></block></else></if>
      }<pos:position pos:line="167" pos:column="8"/></block></then></if>
      <break pos:line="168" pos:column="7">break;<pos:position pos:line="168" pos:column="13"/></break>

    <case pos:line="170" pos:column="5">case <expr><name pos:line="170" pos:column="10">CURLM_STATE_WAITRESOLVE<pos:position pos:line="170" pos:column="33"/></name></expr>:<pos:position pos:line="170" pos:column="34"/></case>
      <comment type="block" pos:line="171" pos:column="7">/* awaiting an asynch name resolve to complete */</comment>
    <block pos:line="172" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="173" pos:column="7">struct<pos:position pos:line="173" pos:column="13"/></name> <name pos:line="173" pos:column="14">Curl_dns_entry<pos:position pos:line="173" pos:column="28"/></name></name> <modifier pos:line="173" pos:column="29">*<pos:position pos:line="173" pos:column="30"/></modifier></type><name pos:line="173" pos:column="30">dns<pos:position pos:line="173" pos:column="33"/></name> <init pos:line="173" pos:column="34">= <expr><name pos:line="173" pos:column="36">NULL<pos:position pos:line="173" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="173" pos:column="41"/></decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="174" pos:column="7">struct<pos:position pos:line="174" pos:column="13"/></name> <name pos:line="174" pos:column="14">connectdata<pos:position pos:line="174" pos:column="25"/></name></name> <modifier pos:line="174" pos:column="26">*<pos:position pos:line="174" pos:column="27"/></modifier></type><name pos:line="174" pos:column="27">conn<pos:position pos:line="174" pos:column="31"/></name> <init pos:line="174" pos:column="32">= <expr><name><name pos:line="174" pos:column="34">data<pos:position pos:line="174" pos:column="38"/></name><operator pos:line="174" pos:column="38">-&gt;<pos:position pos:line="174" pos:column="43"/></operator><name pos:line="174" pos:column="40">easy_conn<pos:position pos:line="174" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="174" pos:column="50"/></decl_stmt>

      <comment type="block" pos:line="176" pos:column="7">/* check if we have the name resolved by now */</comment>
      <if pos:line="177" pos:column="7">if<condition pos:line="177" pos:column="9">(<expr><name><name pos:line="177" pos:column="10">data<pos:position pos:line="177" pos:column="14"/></name><operator pos:line="177" pos:column="14">-&gt;<pos:position pos:line="177" pos:column="19"/></operator><name pos:line="177" pos:column="16">share<pos:position pos:line="177" pos:column="21"/></name></name></expr>)<pos:position pos:line="177" pos:column="22"/></condition><then pos:line="177" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="178" pos:column="9">Curl_share_lock<pos:position pos:line="178" pos:column="24"/></name><argument_list pos:line="178" pos:column="24">(<argument><expr><name pos:line="178" pos:column="25">data<pos:position pos:line="178" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="31">CURL_LOCK_DATA_DNS<pos:position pos:line="178" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="51">CURL_LOCK_ACCESS_SINGLE<pos:position pos:line="178" pos:column="74"/></name></expr></argument>)<pos:position pos:line="178" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="76"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name pos:line="180" pos:column="7">dns<pos:position pos:line="180" pos:column="10"/></name> <operator pos:line="180" pos:column="11">=<pos:position pos:line="180" pos:column="12"/></operator> <call><name pos:line="180" pos:column="13">Curl_fetch_addr<pos:position pos:line="180" pos:column="28"/></name><argument_list pos:line="180" pos:column="28">(<argument><expr><name pos:line="180" pos:column="29">conn<pos:position pos:line="180" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="180" pos:column="35">conn<pos:position pos:line="180" pos:column="39"/></name><operator pos:line="180" pos:column="39">-&gt;<pos:position pos:line="180" pos:column="44"/></operator><name pos:line="180" pos:column="41">host<pos:position pos:line="180" pos:column="45"/></name><operator pos:line="180" pos:column="45">.<pos:position pos:line="180" pos:column="46"/></operator><name pos:line="180" pos:column="46">name<pos:position pos:line="180" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="180" pos:column="52">(<pos:position pos:line="180" pos:column="53"/></operator><name pos:line="180" pos:column="53">int<pos:position pos:line="180" pos:column="56"/></name><operator pos:line="180" pos:column="56">)<pos:position pos:line="180" pos:column="57"/></operator><name><name pos:line="180" pos:column="57">conn<pos:position pos:line="180" pos:column="61"/></name><operator pos:line="180" pos:column="61">-&gt;<pos:position pos:line="180" pos:column="66"/></operator><name pos:line="180" pos:column="63">port<pos:position pos:line="180" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="180" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="69"/></expr_stmt>

      <if pos:line="182" pos:column="7">if<condition pos:line="182" pos:column="9">(<expr><name pos:line="182" pos:column="10">dns<pos:position pos:line="182" pos:column="13"/></name></expr>)<pos:position pos:line="182" pos:column="14"/></condition><then pos:line="182" pos:column="14"> <block pos:line="182" pos:column="15">{
        <expr_stmt><expr><name><name pos:line="183" pos:column="9">dns<pos:position pos:line="183" pos:column="12"/></name><operator pos:line="183" pos:column="12">-&gt;<pos:position pos:line="183" pos:column="17"/></operator><name pos:line="183" pos:column="14">inuse<pos:position pos:line="183" pos:column="19"/></name></name><operator pos:line="183" pos:column="19">++<pos:position pos:line="183" pos:column="21"/></operator></expr>;<pos:position pos:line="183" pos:column="22"/></expr_stmt> <comment type="block" pos:line="183" pos:column="23">/* we use it! */</comment>
<cpp:ifdef pos:line="184" pos:column="1">#<cpp:directive pos:line="184" pos:column="2">ifdef<pos:position pos:line="184" pos:column="7"/></cpp:directive> <name pos:line="184" pos:column="8">CURLRES_ASYNCH<pos:position pos:line="184" pos:column="22"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="185" pos:column="9">conn<pos:position pos:line="185" pos:column="13"/></name><operator pos:line="185" pos:column="13">-&gt;<pos:position pos:line="185" pos:column="18"/></operator><name pos:line="185" pos:column="15">async<pos:position pos:line="185" pos:column="20"/></name><operator pos:line="185" pos:column="20">.<pos:position pos:line="185" pos:column="21"/></operator><name pos:line="185" pos:column="21">dns<pos:position pos:line="185" pos:column="24"/></name></name> <operator pos:line="185" pos:column="25">=<pos:position pos:line="185" pos:column="26"/></operator> <name pos:line="185" pos:column="27">dns<pos:position pos:line="185" pos:column="30"/></name></expr>;<pos:position pos:line="185" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="186" pos:column="9">conn<pos:position pos:line="186" pos:column="13"/></name><operator pos:line="186" pos:column="13">-&gt;<pos:position pos:line="186" pos:column="18"/></operator><name pos:line="186" pos:column="15">async<pos:position pos:line="186" pos:column="20"/></name><operator pos:line="186" pos:column="20">.<pos:position pos:line="186" pos:column="21"/></operator><name pos:line="186" pos:column="21">done<pos:position pos:line="186" pos:column="25"/></name></name> <operator pos:line="186" pos:column="26">=<pos:position pos:line="186" pos:column="27"/></operator> <name pos:line="186" pos:column="28">TRUE<pos:position pos:line="186" pos:column="32"/></name></expr>;<pos:position pos:line="186" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="187" pos:column="1">#<cpp:directive pos:line="187" pos:column="2">endif<pos:position pos:line="187" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name pos:line="188" pos:column="9">result<pos:position pos:line="188" pos:column="15"/></name> <operator pos:line="188" pos:column="16">=<pos:position pos:line="188" pos:column="17"/></operator> <name pos:line="188" pos:column="18">CURLE_OK<pos:position pos:line="188" pos:column="26"/></name></expr>;<pos:position pos:line="188" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="189" pos:column="9">infof<pos:position pos:line="189" pos:column="14"/></name><argument_list pos:line="189" pos:column="14">(<argument><expr><name pos:line="189" pos:column="15">data<pos:position pos:line="189" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="21">"Hostname was found in DNS cache\n"<pos:position pos:line="189" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="58"/></expr_stmt>
      }<pos:position pos:line="190" pos:column="8"/></block></then></if>

      <if pos:line="192" pos:column="7">if<condition pos:line="192" pos:column="9">(<expr><name><name pos:line="192" pos:column="10">data<pos:position pos:line="192" pos:column="14"/></name><operator pos:line="192" pos:column="14">-&gt;<pos:position pos:line="192" pos:column="19"/></operator><name pos:line="192" pos:column="16">share<pos:position pos:line="192" pos:column="21"/></name></name></expr>)<pos:position pos:line="192" pos:column="22"/></condition><then pos:line="192" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="193" pos:column="9">Curl_share_unlock<pos:position pos:line="193" pos:column="26"/></name><argument_list pos:line="193" pos:column="26">(<argument><expr><name pos:line="193" pos:column="27">data<pos:position pos:line="193" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="33">CURL_LOCK_DATA_DNS<pos:position pos:line="193" pos:column="51"/></name></expr></argument>)<pos:position pos:line="193" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="53"/></expr_stmt></block></then></if>

      <if pos:line="195" pos:column="7">if<condition pos:line="195" pos:column="9">(<expr><operator pos:line="195" pos:column="10">!<pos:position pos:line="195" pos:column="11"/></operator><name pos:line="195" pos:column="11">dns<pos:position pos:line="195" pos:column="14"/></name></expr>)<pos:position pos:line="195" pos:column="15"/></condition><then pos:line="195" pos:column="15">
        <block type="pseudo"><expr_stmt><expr><name pos:line="196" pos:column="9">result<pos:position pos:line="196" pos:column="15"/></name> <operator pos:line="196" pos:column="16">=<pos:position pos:line="196" pos:column="17"/></operator> <call><name pos:line="196" pos:column="18">Curl_resolver_is_resolved<pos:position pos:line="196" pos:column="43"/></name><argument_list pos:line="196" pos:column="43">(<argument><expr><name><name pos:line="196" pos:column="44">data<pos:position pos:line="196" pos:column="48"/></name><operator pos:line="196" pos:column="48">-&gt;<pos:position pos:line="196" pos:column="53"/></operator><name pos:line="196" pos:column="50">easy_conn<pos:position pos:line="196" pos:column="59"/></name></name></expr></argument>, <argument><expr><operator pos:line="196" pos:column="61">&amp;<pos:position pos:line="196" pos:column="66"/></operator><name pos:line="196" pos:column="62">dns<pos:position pos:line="196" pos:column="65"/></name></expr></argument>)<pos:position pos:line="196" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="67"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="198" pos:column="7">/* Update sockets here, because the socket(s) may have been
         closed and the application thus needs to be told, even if it
         is likely that the same socket(s) will again be used further
         down.  If the name has not yet been resolved, it is likely
         that new sockets have been opened in an attempt to contact
         another resolver. */</comment>
      <expr_stmt><expr><call><name pos:line="204" pos:column="7">singlesocket<pos:position pos:line="204" pos:column="19"/></name><argument_list pos:line="204" pos:column="19">(<argument><expr><name pos:line="204" pos:column="20">multi<pos:position pos:line="204" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="27">data<pos:position pos:line="204" pos:column="31"/></name></expr></argument>)<pos:position pos:line="204" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="33"/></expr_stmt>

      <if pos:line="206" pos:column="7">if<condition pos:line="206" pos:column="9">(<expr><name pos:line="206" pos:column="10">dns<pos:position pos:line="206" pos:column="13"/></name></expr>)<pos:position pos:line="206" pos:column="14"/></condition><then pos:line="206" pos:column="14"> <block pos:line="206" pos:column="15">{
        <comment type="block" pos:line="207" pos:column="9">/* Perform the next step in the connection phase, and then move on
           to the WAITCONNECT state */</comment>
        <expr_stmt><expr><name pos:line="209" pos:column="9">result<pos:position pos:line="209" pos:column="15"/></name> <operator pos:line="209" pos:column="16">=<pos:position pos:line="209" pos:column="17"/></operator> <call><name pos:line="209" pos:column="18">Curl_async_resolved<pos:position pos:line="209" pos:column="37"/></name><argument_list pos:line="209" pos:column="37">(<argument><expr><name><name pos:line="209" pos:column="38">data<pos:position pos:line="209" pos:column="42"/></name><operator pos:line="209" pos:column="42">-&gt;<pos:position pos:line="209" pos:column="47"/></operator><name pos:line="209" pos:column="44">easy_conn<pos:position pos:line="209" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="209" pos:column="55">&amp;<pos:position pos:line="209" pos:column="60"/></operator><name pos:line="209" pos:column="56">protocol_connect<pos:position pos:line="209" pos:column="72"/></name></expr></argument>)<pos:position pos:line="209" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="74"/></expr_stmt>

        <if pos:line="211" pos:column="9">if<condition pos:line="211" pos:column="11">(<expr><name pos:line="211" pos:column="12">result<pos:position pos:line="211" pos:column="18"/></name></expr>)<pos:position pos:line="211" pos:column="19"/></condition><then pos:line="211" pos:column="19">
          <comment type="block" pos:line="212" pos:column="11">/* if Curl_async_resolved() returns failure, the connection struct
             is already freed and gone */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="214" pos:column="11">data<pos:position pos:line="214" pos:column="15"/></name><operator pos:line="214" pos:column="15">-&gt;<pos:position pos:line="214" pos:column="20"/></operator><name pos:line="214" pos:column="17">easy_conn<pos:position pos:line="214" pos:column="26"/></name></name> <operator pos:line="214" pos:column="27">=<pos:position pos:line="214" pos:column="28"/></operator> <name pos:line="214" pos:column="29">NULL<pos:position pos:line="214" pos:column="33"/></name></expr>;<pos:position pos:line="214" pos:column="34"/></expr_stmt></block></then>           <comment type="block" pos:line="214" pos:column="45">/* no more connection */</comment>
        <else pos:line="215" pos:column="9">else <block pos:line="215" pos:column="14">{
          <comment type="block" pos:line="216" pos:column="11">/* call again please so that we get the next socket setup */</comment>
          <expr_stmt><expr><name pos:line="217" pos:column="11">rc<pos:position pos:line="217" pos:column="13"/></name> <operator pos:line="217" pos:column="14">=<pos:position pos:line="217" pos:column="15"/></operator> <name pos:line="217" pos:column="16">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="217" pos:column="40"/></name></expr>;<pos:position pos:line="217" pos:column="41"/></expr_stmt>
          <if pos:line="218" pos:column="11">if<condition pos:line="218" pos:column="13">(<expr><name pos:line="218" pos:column="14">protocol_connect<pos:position pos:line="218" pos:column="30"/></name></expr>)<pos:position pos:line="218" pos:column="31"/></condition><then pos:line="218" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="219" pos:column="13">multistate<pos:position pos:line="219" pos:column="23"/></name><argument_list pos:line="219" pos:column="23">(<argument><expr><name pos:line="219" pos:column="24">data<pos:position pos:line="219" pos:column="28"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="219" pos:column="30">multi<pos:position pos:line="219" pos:column="35"/></name><operator pos:line="219" pos:column="35">-&gt;<pos:position pos:line="219" pos:column="40"/></operator><name pos:line="219" pos:column="37">pipelining_enabled<pos:position pos:line="219" pos:column="55"/></name></name></expr>?<pos:position pos:line="219" pos:column="56"/></condition><then pos:line="219" pos:column="56">
                       <expr><name pos:line="220" pos:column="24">CURLM_STATE_WAITDO<pos:position pos:line="220" pos:column="42"/></name></expr></then><else pos:line="220" pos:column="42">:<expr><name pos:line="220" pos:column="43">CURLM_STATE_DO<pos:position pos:line="220" pos:column="57"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="220" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="59"/></expr_stmt></block></then>
          <else pos:line="221" pos:column="11">else <block pos:line="221" pos:column="16">{
<cpp:ifndef pos:line="222" pos:column="1">#<cpp:directive pos:line="222" pos:column="2">ifndef<pos:position pos:line="222" pos:column="8"/></cpp:directive> <name pos:line="222" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="222" pos:column="26"/></name></cpp:ifndef>
            <if pos:line="223" pos:column="13">if<condition pos:line="223" pos:column="15">(<expr><name><name pos:line="223" pos:column="16">data<pos:position pos:line="223" pos:column="20"/></name><operator pos:line="223" pos:column="20">-&gt;<pos:position pos:line="223" pos:column="25"/></operator><name pos:line="223" pos:column="22">easy_conn<pos:position pos:line="223" pos:column="31"/></name><operator pos:line="223" pos:column="31">-&gt;<pos:position pos:line="223" pos:column="36"/></operator><name pos:line="223" pos:column="33">tunnel_state<pos:position pos:line="223" pos:column="45"/></name><index pos:line="223" pos:column="45">[<expr><name pos:line="223" pos:column="46">FIRSTSOCKET<pos:position pos:line="223" pos:column="57"/></name></expr>]<pos:position pos:line="223" pos:column="58"/></index></name> <operator pos:line="223" pos:column="59">==<pos:position pos:line="223" pos:column="61"/></operator> <name pos:line="223" pos:column="62">TUNNEL_CONNECT<pos:position pos:line="223" pos:column="76"/></name></expr>)<pos:position pos:line="223" pos:column="77"/></condition><then pos:line="223" pos:column="77">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="224" pos:column="15">multistate<pos:position pos:line="224" pos:column="25"/></name><argument_list pos:line="224" pos:column="25">(<argument><expr><name pos:line="224" pos:column="26">data<pos:position pos:line="224" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="224" pos:column="32">CURLM_STATE_WAITPROXYCONNECT<pos:position pos:line="224" pos:column="60"/></name></expr></argument>)<pos:position pos:line="224" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="62"/></expr_stmt></block></then>
            <else pos:line="225" pos:column="13">else
<cpp:endif pos:line="226" pos:column="1">#<cpp:directive pos:line="226" pos:column="2">endif<pos:position pos:line="226" pos:column="7"/></cpp:directive></cpp:endif>
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="227" pos:column="15">multistate<pos:position pos:line="227" pos:column="25"/></name><argument_list pos:line="227" pos:column="25">(<argument><expr><name pos:line="227" pos:column="26">data<pos:position pos:line="227" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="32">CURLM_STATE_WAITCONNECT<pos:position pos:line="227" pos:column="55"/></name></expr></argument>)<pos:position pos:line="227" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="57"/></expr_stmt></block></else></if>
          }<pos:position pos:line="228" pos:column="12"/></block></else></if>
        }<pos:position pos:line="229" pos:column="10"/></block></else></if>
      }<pos:position pos:line="230" pos:column="8"/></block></then></if>

      <if pos:line="232" pos:column="7">if<condition pos:line="232" pos:column="9">(<expr><name pos:line="232" pos:column="10">result<pos:position pos:line="232" pos:column="16"/></name></expr>)<pos:position pos:line="232" pos:column="17"/></condition><then pos:line="232" pos:column="17"> <block pos:line="232" pos:column="18">{
        <comment type="block" pos:line="233" pos:column="9">/* failure detected */</comment>
        <expr_stmt><expr><name pos:line="234" pos:column="9">disconnect_conn<pos:position pos:line="234" pos:column="24"/></name> <operator pos:line="234" pos:column="25">=<pos:position pos:line="234" pos:column="26"/></operator> <name pos:line="234" pos:column="27">TRUE<pos:position pos:line="234" pos:column="31"/></name></expr>;<pos:position pos:line="234" pos:column="32"/></expr_stmt>
        <break pos:line="235" pos:column="9">break;<pos:position pos:line="235" pos:column="15"/></break>
      }<pos:position pos:line="236" pos:column="8"/></block></then></if>
    }<pos:position pos:line="237" pos:column="6"/></block>
    <break pos:line="238" pos:column="5">break;<pos:position pos:line="238" pos:column="11"/></break>

<cpp:ifndef pos:line="240" pos:column="1">#<cpp:directive pos:line="240" pos:column="2">ifndef<pos:position pos:line="240" pos:column="8"/></cpp:directive> <name pos:line="240" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="240" pos:column="26"/></name></cpp:ifndef>
    <case pos:line="241" pos:column="5">case <expr><name pos:line="241" pos:column="10">CURLM_STATE_WAITPROXYCONNECT<pos:position pos:line="241" pos:column="38"/></name></expr>:<pos:position pos:line="241" pos:column="39"/></case>
      <comment type="block" pos:line="242" pos:column="7">/* this is HTTP-specific, but sending CONNECT to a proxy is HTTP... */</comment>
      <expr_stmt><expr><name pos:line="243" pos:column="7">result<pos:position pos:line="243" pos:column="13"/></name> <operator pos:line="243" pos:column="14">=<pos:position pos:line="243" pos:column="15"/></operator> <call><name pos:line="243" pos:column="16">Curl_http_connect<pos:position pos:line="243" pos:column="33"/></name><argument_list pos:line="243" pos:column="33">(<argument><expr><name><name pos:line="243" pos:column="34">data<pos:position pos:line="243" pos:column="38"/></name><operator pos:line="243" pos:column="38">-&gt;<pos:position pos:line="243" pos:column="43"/></operator><name pos:line="243" pos:column="40">easy_conn<pos:position pos:line="243" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="243" pos:column="51">&amp;<pos:position pos:line="243" pos:column="56"/></operator><name pos:line="243" pos:column="52">protocol_connect<pos:position pos:line="243" pos:column="68"/></name></expr></argument>)<pos:position pos:line="243" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="70"/></expr_stmt>

      <if pos:line="245" pos:column="7">if<condition pos:line="245" pos:column="9">(<expr><name><name pos:line="245" pos:column="10">data<pos:position pos:line="245" pos:column="14"/></name><operator pos:line="245" pos:column="14">-&gt;<pos:position pos:line="245" pos:column="19"/></operator><name pos:line="245" pos:column="16">easy_conn<pos:position pos:line="245" pos:column="25"/></name><operator pos:line="245" pos:column="25">-&gt;<pos:position pos:line="245" pos:column="30"/></operator><name pos:line="245" pos:column="27">bits<pos:position pos:line="245" pos:column="31"/></name><operator pos:line="245" pos:column="31">.<pos:position pos:line="245" pos:column="32"/></operator><name pos:line="245" pos:column="32">proxy_connect_closed<pos:position pos:line="245" pos:column="52"/></name></name></expr>)<pos:position pos:line="245" pos:column="53"/></condition><then pos:line="245" pos:column="53"> <block pos:line="245" pos:column="54">{
        <comment type="block" pos:line="246" pos:column="9">/* connect back to proxy again */</comment>
        <expr_stmt><expr><name pos:line="247" pos:column="9">result<pos:position pos:line="247" pos:column="15"/></name> <operator pos:line="247" pos:column="16">=<pos:position pos:line="247" pos:column="17"/></operator> <name pos:line="247" pos:column="18">CURLE_OK<pos:position pos:line="247" pos:column="26"/></name></expr>;<pos:position pos:line="247" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="248" pos:column="9">rc<pos:position pos:line="248" pos:column="11"/></name> <operator pos:line="248" pos:column="12">=<pos:position pos:line="248" pos:column="13"/></operator> <name pos:line="248" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="248" pos:column="38"/></name></expr>;<pos:position pos:line="248" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="249" pos:column="9">multistate<pos:position pos:line="249" pos:column="19"/></name><argument_list pos:line="249" pos:column="19">(<argument><expr><name pos:line="249" pos:column="20">data<pos:position pos:line="249" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="249" pos:column="26">CURLM_STATE_CONNECT<pos:position pos:line="249" pos:column="45"/></name></expr></argument>)<pos:position pos:line="249" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="47"/></expr_stmt>
      }<pos:position pos:line="250" pos:column="8"/></block></then>
      <elseif pos:line="251" pos:column="7">else <if pos:line="251" pos:column="12">if<condition pos:line="251" pos:column="14">(<expr><operator pos:line="251" pos:column="15">!<pos:position pos:line="251" pos:column="16"/></operator><name pos:line="251" pos:column="16">result<pos:position pos:line="251" pos:column="22"/></name></expr>)<pos:position pos:line="251" pos:column="23"/></condition><then pos:line="251" pos:column="23"> <block pos:line="251" pos:column="24">{
        <if pos:line="252" pos:column="9">if<condition pos:line="252" pos:column="11">(<expr><name><name pos:line="252" pos:column="12">data<pos:position pos:line="252" pos:column="16"/></name><operator pos:line="252" pos:column="16">-&gt;<pos:position pos:line="252" pos:column="21"/></operator><name pos:line="252" pos:column="18">easy_conn<pos:position pos:line="252" pos:column="27"/></name><operator pos:line="252" pos:column="27">-&gt;<pos:position pos:line="252" pos:column="32"/></operator><name pos:line="252" pos:column="29">tunnel_state<pos:position pos:line="252" pos:column="41"/></name><index pos:line="252" pos:column="41">[<expr><name pos:line="252" pos:column="42">FIRSTSOCKET<pos:position pos:line="252" pos:column="53"/></name></expr>]<pos:position pos:line="252" pos:column="54"/></index></name> <operator pos:line="252" pos:column="55">==<pos:position pos:line="252" pos:column="57"/></operator> <name pos:line="252" pos:column="58">TUNNEL_COMPLETE<pos:position pos:line="252" pos:column="73"/></name></expr>)<pos:position pos:line="252" pos:column="74"/></condition><then pos:line="252" pos:column="74">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="253" pos:column="11">multistate<pos:position pos:line="253" pos:column="21"/></name><argument_list pos:line="253" pos:column="21">(<argument><expr><name pos:line="253" pos:column="22">data<pos:position pos:line="253" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="28">CURLM_STATE_WAITCONNECT<pos:position pos:line="253" pos:column="51"/></name></expr></argument>)<pos:position pos:line="253" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="53"/></expr_stmt></block></then></if>
      }<pos:position pos:line="254" pos:column="8"/></block></then></if></elseif></if>
      <break pos:line="255" pos:column="7">break;<pos:position pos:line="255" pos:column="13"/></break>
<cpp:endif pos:line="256" pos:column="1">#<cpp:directive pos:line="256" pos:column="2">endif<pos:position pos:line="256" pos:column="7"/></cpp:directive></cpp:endif>

    <case pos:line="258" pos:column="5">case <expr><name pos:line="258" pos:column="10">CURLM_STATE_WAITCONNECT<pos:position pos:line="258" pos:column="33"/></name></expr>:<pos:position pos:line="258" pos:column="34"/></case>
      <comment type="block" pos:line="259" pos:column="7">/* awaiting a completion of an asynch connect */</comment>
      <expr_stmt><expr><name pos:line="260" pos:column="7">result<pos:position pos:line="260" pos:column="13"/></name> <operator pos:line="260" pos:column="14">=<pos:position pos:line="260" pos:column="15"/></operator> <call><name pos:line="260" pos:column="16">Curl_is_connected<pos:position pos:line="260" pos:column="33"/></name><argument_list pos:line="260" pos:column="33">(<argument><expr><name><name pos:line="260" pos:column="34">data<pos:position pos:line="260" pos:column="38"/></name><operator pos:line="260" pos:column="38">-&gt;<pos:position pos:line="260" pos:column="43"/></operator><name pos:line="260" pos:column="40">easy_conn<pos:position pos:line="260" pos:column="49"/></name></name></expr></argument>,
                                 <argument><expr><name pos:line="261" pos:column="34">FIRSTSOCKET<pos:position pos:line="261" pos:column="45"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="262" pos:column="34">&amp;<pos:position pos:line="262" pos:column="39"/></operator><name pos:line="262" pos:column="35">connected<pos:position pos:line="262" pos:column="44"/></name></expr></argument>)<pos:position pos:line="262" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="46"/></expr_stmt>
      <if pos:line="263" pos:column="7">if<condition pos:line="263" pos:column="9">(<expr><name pos:line="263" pos:column="10">connected<pos:position pos:line="263" pos:column="19"/></name></expr>)<pos:position pos:line="263" pos:column="20"/></condition><then pos:line="263" pos:column="20"> <block pos:line="263" pos:column="21">{

        <if pos:line="265" pos:column="9">if<condition pos:line="265" pos:column="11">(<expr><operator pos:line="265" pos:column="12">!<pos:position pos:line="265" pos:column="13"/></operator><name pos:line="265" pos:column="13">result<pos:position pos:line="265" pos:column="19"/></name></expr>)<pos:position pos:line="265" pos:column="20"/></condition><then pos:line="265" pos:column="20">
          <comment type="block" pos:line="266" pos:column="11">/* if everything is still fine we do the protocol-specific connect
             setup */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="268" pos:column="11">result<pos:position pos:line="268" pos:column="17"/></name> <operator pos:line="268" pos:column="18">=<pos:position pos:line="268" pos:column="19"/></operator> <call><name pos:line="268" pos:column="20">Curl_protocol_connect<pos:position pos:line="268" pos:column="41"/></name><argument_list pos:line="268" pos:column="41">(<argument><expr><name><name pos:line="268" pos:column="42">data<pos:position pos:line="268" pos:column="46"/></name><operator pos:line="268" pos:column="46">-&gt;<pos:position pos:line="268" pos:column="51"/></operator><name pos:line="268" pos:column="48">easy_conn<pos:position pos:line="268" pos:column="57"/></name></name></expr></argument>,
                                         <argument><expr><operator pos:line="269" pos:column="42">&amp;<pos:position pos:line="269" pos:column="47"/></operator><name pos:line="269" pos:column="43">protocol_connect<pos:position pos:line="269" pos:column="59"/></name></expr></argument>)<pos:position pos:line="269" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="61"/></expr_stmt></block></then></if>
      }<pos:position pos:line="270" pos:column="8"/></block></then></if>

      <if pos:line="272" pos:column="7">if<condition pos:line="272" pos:column="9">(<expr><name><name pos:line="272" pos:column="10">data<pos:position pos:line="272" pos:column="14"/></name><operator pos:line="272" pos:column="14">-&gt;<pos:position pos:line="272" pos:column="19"/></operator><name pos:line="272" pos:column="16">easy_conn<pos:position pos:line="272" pos:column="25"/></name><operator pos:line="272" pos:column="25">-&gt;<pos:position pos:line="272" pos:column="30"/></operator><name pos:line="272" pos:column="27">bits<pos:position pos:line="272" pos:column="31"/></name><operator pos:line="272" pos:column="31">.<pos:position pos:line="272" pos:column="32"/></operator><name pos:line="272" pos:column="32">proxy_connect_closed<pos:position pos:line="272" pos:column="52"/></name></name></expr>)<pos:position pos:line="272" pos:column="53"/></condition><then pos:line="272" pos:column="53"> <block pos:line="272" pos:column="54">{
        <comment type="block" pos:line="273" pos:column="9">/* connect back to proxy again since it was closed in a proxy CONNECT
           setup */</comment>
        <expr_stmt><expr><name pos:line="275" pos:column="9">result<pos:position pos:line="275" pos:column="15"/></name> <operator pos:line="275" pos:column="16">=<pos:position pos:line="275" pos:column="17"/></operator> <name pos:line="275" pos:column="18">CURLE_OK<pos:position pos:line="275" pos:column="26"/></name></expr>;<pos:position pos:line="275" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="276" pos:column="9">rc<pos:position pos:line="276" pos:column="11"/></name> <operator pos:line="276" pos:column="12">=<pos:position pos:line="276" pos:column="13"/></operator> <name pos:line="276" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="276" pos:column="38"/></name></expr>;<pos:position pos:line="276" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="277" pos:column="9">multistate<pos:position pos:line="277" pos:column="19"/></name><argument_list pos:line="277" pos:column="19">(<argument><expr><name pos:line="277" pos:column="20">data<pos:position pos:line="277" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="26">CURLM_STATE_CONNECT<pos:position pos:line="277" pos:column="45"/></name></expr></argument>)<pos:position pos:line="277" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="47"/></expr_stmt>
        <break pos:line="278" pos:column="9">break;<pos:position pos:line="278" pos:column="15"/></break>
      }<pos:position pos:line="279" pos:column="8"/></block></then>
      <elseif pos:line="280" pos:column="7">else <if pos:line="280" pos:column="12">if<condition pos:line="280" pos:column="14">(<expr><name pos:line="280" pos:column="15">result<pos:position pos:line="280" pos:column="21"/></name></expr>)<pos:position pos:line="280" pos:column="22"/></condition><then pos:line="280" pos:column="22"> <block pos:line="280" pos:column="23">{
        <comment type="block" pos:line="281" pos:column="9">/* failure detected */</comment>
        <comment type="block" pos:line="282" pos:column="9">/* Just break, the cleaning up is handled all in one place */</comment>
        <expr_stmt><expr><name pos:line="283" pos:column="9">disconnect_conn<pos:position pos:line="283" pos:column="24"/></name> <operator pos:line="283" pos:column="25">=<pos:position pos:line="283" pos:column="26"/></operator> <name pos:line="283" pos:column="27">TRUE<pos:position pos:line="283" pos:column="31"/></name></expr>;<pos:position pos:line="283" pos:column="32"/></expr_stmt>
        <break pos:line="284" pos:column="9">break;<pos:position pos:line="284" pos:column="15"/></break>
      }<pos:position pos:line="285" pos:column="8"/></block></then></if></elseif></if>

      <if pos:line="287" pos:column="7">if<condition pos:line="287" pos:column="9">(<expr><name pos:line="287" pos:column="10">connected<pos:position pos:line="287" pos:column="19"/></name></expr>)<pos:position pos:line="287" pos:column="20"/></condition><then pos:line="287" pos:column="20"> <block pos:line="287" pos:column="21">{
        <if pos:line="288" pos:column="9">if<condition pos:line="288" pos:column="11">(<expr><operator pos:line="288" pos:column="12">!<pos:position pos:line="288" pos:column="13"/></operator><name pos:line="288" pos:column="13">protocol_connect<pos:position pos:line="288" pos:column="29"/></name></expr>)<pos:position pos:line="288" pos:column="30"/></condition><then pos:line="288" pos:column="30"> <block pos:line="288" pos:column="31">{
          <comment type="block" pos:line="289" pos:column="11">/* We have a TCP connection, but 'protocol_connect' may be false
             and then we continue to 'STATE_PROTOCONNECT'. If protocol
             connect is TRUE, we move on to STATE_DO.
             BUT if we are using a proxy we must change to WAITPROXYCONNECT
          */</comment>
<cpp:ifndef pos:line="294" pos:column="1">#<cpp:directive pos:line="294" pos:column="2">ifndef<pos:position pos:line="294" pos:column="8"/></cpp:directive> <name pos:line="294" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="294" pos:column="26"/></name></cpp:ifndef>
          <if pos:line="295" pos:column="11">if<condition pos:line="295" pos:column="13">(<expr><name><name pos:line="295" pos:column="14">data<pos:position pos:line="295" pos:column="18"/></name><operator pos:line="295" pos:column="18">-&gt;<pos:position pos:line="295" pos:column="23"/></operator><name pos:line="295" pos:column="20">easy_conn<pos:position pos:line="295" pos:column="29"/></name><operator pos:line="295" pos:column="29">-&gt;<pos:position pos:line="295" pos:column="34"/></operator><name pos:line="295" pos:column="31">tunnel_state<pos:position pos:line="295" pos:column="43"/></name><index pos:line="295" pos:column="43">[<expr><name pos:line="295" pos:column="44">FIRSTSOCKET<pos:position pos:line="295" pos:column="55"/></name></expr>]<pos:position pos:line="295" pos:column="56"/></index></name> <operator pos:line="295" pos:column="57">==<pos:position pos:line="295" pos:column="59"/></operator> <name pos:line="295" pos:column="60">TUNNEL_CONNECT<pos:position pos:line="295" pos:column="74"/></name></expr>)<pos:position pos:line="295" pos:column="75"/></condition><then pos:line="295" pos:column="75">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="296" pos:column="13">multistate<pos:position pos:line="296" pos:column="23"/></name><argument_list pos:line="296" pos:column="23">(<argument><expr><name pos:line="296" pos:column="24">data<pos:position pos:line="296" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="296" pos:column="30">CURLM_STATE_WAITPROXYCONNECT<pos:position pos:line="296" pos:column="58"/></name></expr></argument>)<pos:position pos:line="296" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="60"/></expr_stmt></block></then>
          <else pos:line="297" pos:column="11">else
<cpp:endif pos:line="298" pos:column="1">#<cpp:directive pos:line="298" pos:column="2">endif<pos:position pos:line="298" pos:column="7"/></cpp:directive></cpp:endif>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="299" pos:column="13">multistate<pos:position pos:line="299" pos:column="23"/></name><argument_list pos:line="299" pos:column="23">(<argument><expr><name pos:line="299" pos:column="24">data<pos:position pos:line="299" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="299" pos:column="30">CURLM_STATE_PROTOCONNECT<pos:position pos:line="299" pos:column="54"/></name></expr></argument>)<pos:position pos:line="299" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="299" pos:column="56"/></expr_stmt></block></else></if>

        }<pos:position pos:line="301" pos:column="10"/></block></then>
        <else pos:line="302" pos:column="9">else
          <comment type="block" pos:line="303" pos:column="11">/* after the connect has completed, go WAITDO or DO */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="304" pos:column="11">multistate<pos:position pos:line="304" pos:column="21"/></name><argument_list pos:line="304" pos:column="21">(<argument><expr><name pos:line="304" pos:column="22">data<pos:position pos:line="304" pos:column="26"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="304" pos:column="28">multi<pos:position pos:line="304" pos:column="33"/></name><operator pos:line="304" pos:column="33">-&gt;<pos:position pos:line="304" pos:column="38"/></operator><name pos:line="304" pos:column="35">pipelining_enabled<pos:position pos:line="304" pos:column="53"/></name></name></expr>?<pos:position pos:line="304" pos:column="54"/></condition><then pos:line="304" pos:column="54">
                     <expr><name pos:line="305" pos:column="22">CURLM_STATE_WAITDO<pos:position pos:line="305" pos:column="40"/></name></expr></then><else pos:line="305" pos:column="40">:<expr><name pos:line="305" pos:column="41">CURLM_STATE_DO<pos:position pos:line="305" pos:column="55"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="305" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="305" pos:column="57"/></expr_stmt></block></else></if>

        <expr_stmt><expr><name pos:line="307" pos:column="9">rc<pos:position pos:line="307" pos:column="11"/></name> <operator pos:line="307" pos:column="12">=<pos:position pos:line="307" pos:column="13"/></operator> <name pos:line="307" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="307" pos:column="38"/></name></expr>;<pos:position pos:line="307" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="308" pos:column="8"/></block></then></if>
      <break pos:line="309" pos:column="7">break;<pos:position pos:line="309" pos:column="13"/></break>

    <case pos:line="311" pos:column="5">case <expr><name pos:line="311" pos:column="10">CURLM_STATE_PROTOCONNECT<pos:position pos:line="311" pos:column="34"/></name></expr>:<pos:position pos:line="311" pos:column="35"/></case>
      <comment type="block" pos:line="312" pos:column="7">/* protocol-specific connect phase */</comment>
      <expr_stmt><expr><name pos:line="313" pos:column="7">result<pos:position pos:line="313" pos:column="13"/></name> <operator pos:line="313" pos:column="14">=<pos:position pos:line="313" pos:column="15"/></operator> <call><name pos:line="313" pos:column="16">Curl_protocol_connecting<pos:position pos:line="313" pos:column="40"/></name><argument_list pos:line="313" pos:column="40">(<argument><expr><name><name pos:line="313" pos:column="41">data<pos:position pos:line="313" pos:column="45"/></name><operator pos:line="313" pos:column="45">-&gt;<pos:position pos:line="313" pos:column="50"/></operator><name pos:line="313" pos:column="47">easy_conn<pos:position pos:line="313" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="313" pos:column="58">&amp;<pos:position pos:line="313" pos:column="63"/></operator><name pos:line="313" pos:column="59">protocol_connect<pos:position pos:line="313" pos:column="75"/></name></expr></argument>)<pos:position pos:line="313" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="313" pos:column="77"/></expr_stmt>
      <if pos:line="314" pos:column="7">if<condition pos:line="314" pos:column="9">(<expr><operator pos:line="314" pos:column="10">!<pos:position pos:line="314" pos:column="11"/></operator><name pos:line="314" pos:column="11">result<pos:position pos:line="314" pos:column="17"/></name> <operator pos:line="314" pos:column="18">&amp;&amp;<pos:position pos:line="314" pos:column="28"/></operator> <name pos:line="314" pos:column="21">protocol_connect<pos:position pos:line="314" pos:column="37"/></name></expr>)<pos:position pos:line="314" pos:column="38"/></condition><then pos:line="314" pos:column="38"> <block pos:line="314" pos:column="39">{
        <comment type="block" pos:line="315" pos:column="9">/* after the connect has completed, go WAITDO or DO */</comment>
        <expr_stmt><expr><call><name pos:line="316" pos:column="9">multistate<pos:position pos:line="316" pos:column="19"/></name><argument_list pos:line="316" pos:column="19">(<argument><expr><name pos:line="316" pos:column="20">data<pos:position pos:line="316" pos:column="24"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="316" pos:column="26">multi<pos:position pos:line="316" pos:column="31"/></name><operator pos:line="316" pos:column="31">-&gt;<pos:position pos:line="316" pos:column="36"/></operator><name pos:line="316" pos:column="33">pipelining_enabled<pos:position pos:line="316" pos:column="51"/></name></name></expr>?<pos:position pos:line="316" pos:column="52"/></condition><then pos:line="316" pos:column="52">
                   <expr><name pos:line="317" pos:column="20">CURLM_STATE_WAITDO<pos:position pos:line="317" pos:column="38"/></name></expr></then><else pos:line="317" pos:column="38">:<expr><name pos:line="317" pos:column="39">CURLM_STATE_DO<pos:position pos:line="317" pos:column="53"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="317" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="317" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="318" pos:column="9">rc<pos:position pos:line="318" pos:column="11"/></name> <operator pos:line="318" pos:column="12">=<pos:position pos:line="318" pos:column="13"/></operator> <name pos:line="318" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="318" pos:column="38"/></name></expr>;<pos:position pos:line="318" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="319" pos:column="8"/></block></then>
      <elseif pos:line="320" pos:column="7">else <if pos:line="320" pos:column="12">if<condition pos:line="320" pos:column="14">(<expr><name pos:line="320" pos:column="15">result<pos:position pos:line="320" pos:column="21"/></name></expr>)<pos:position pos:line="320" pos:column="22"/></condition><then pos:line="320" pos:column="22"> <block pos:line="320" pos:column="23">{
        <comment type="block" pos:line="321" pos:column="9">/* failure detected */</comment>
        <expr_stmt><expr><call><name pos:line="322" pos:column="9">Curl_posttransfer<pos:position pos:line="322" pos:column="26"/></name><argument_list pos:line="322" pos:column="26">(<argument><expr><name pos:line="322" pos:column="27">data<pos:position pos:line="322" pos:column="31"/></name></expr></argument>)<pos:position pos:line="322" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="322" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="323" pos:column="9">Curl_done<pos:position pos:line="323" pos:column="18"/></name><argument_list pos:line="323" pos:column="18">(<argument><expr><operator pos:line="323" pos:column="19">&amp;<pos:position pos:line="323" pos:column="24"/></operator><name><name pos:line="323" pos:column="20">data<pos:position pos:line="323" pos:column="24"/></name><operator pos:line="323" pos:column="24">-&gt;<pos:position pos:line="323" pos:column="29"/></operator><name pos:line="323" pos:column="26">easy_conn<pos:position pos:line="323" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="323" pos:column="37">result<pos:position pos:line="323" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="323" pos:column="45">TRUE<pos:position pos:line="323" pos:column="49"/></name></expr></argument>)<pos:position pos:line="323" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="323" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name pos:line="324" pos:column="9">disconnect_conn<pos:position pos:line="324" pos:column="24"/></name> <operator pos:line="324" pos:column="25">=<pos:position pos:line="324" pos:column="26"/></operator> <name pos:line="324" pos:column="27">TRUE<pos:position pos:line="324" pos:column="31"/></name></expr>;<pos:position pos:line="324" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="325" pos:column="8"/></block></then></if></elseif></if>
      <break pos:line="326" pos:column="7">break;<pos:position pos:line="326" pos:column="13"/></break>

    <case pos:line="328" pos:column="5">case <expr><name pos:line="328" pos:column="10">CURLM_STATE_WAITDO<pos:position pos:line="328" pos:column="28"/></name></expr>:<pos:position pos:line="328" pos:column="29"/></case>
      <comment type="block" pos:line="329" pos:column="7">/* Wait for our turn to DO when we're pipelining requests */</comment>
<cpp:ifdef pos:line="330" pos:column="1">#<cpp:directive pos:line="330" pos:column="2">ifdef<pos:position pos:line="330" pos:column="7"/></cpp:directive> <name pos:line="330" pos:column="8">DEBUGBUILD<pos:position pos:line="330" pos:column="18"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="331" pos:column="7">infof<pos:position pos:line="331" pos:column="12"/></name><argument_list pos:line="331" pos:column="12">(<argument><expr><name pos:line="331" pos:column="13">data<pos:position pos:line="331" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="331" pos:column="19">"WAITDO: Conn %ld send pipe %zu inuse %s athead %s\n"<pos:position pos:line="331" pos:column="72"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="332" pos:column="13">data<pos:position pos:line="332" pos:column="17"/></name><operator pos:line="332" pos:column="17">-&gt;<pos:position pos:line="332" pos:column="22"/></operator><name pos:line="332" pos:column="19">easy_conn<pos:position pos:line="332" pos:column="28"/></name><operator pos:line="332" pos:column="28">-&gt;<pos:position pos:line="332" pos:column="33"/></operator><name pos:line="332" pos:column="30">connection_id<pos:position pos:line="332" pos:column="43"/></name></name></expr></argument>,
            <argument><expr><name><name pos:line="333" pos:column="13">data<pos:position pos:line="333" pos:column="17"/></name><operator pos:line="333" pos:column="17">-&gt;<pos:position pos:line="333" pos:column="22"/></operator><name pos:line="333" pos:column="19">easy_conn<pos:position pos:line="333" pos:column="28"/></name><operator pos:line="333" pos:column="28">-&gt;<pos:position pos:line="333" pos:column="33"/></operator><name pos:line="333" pos:column="30">send_pipe<pos:position pos:line="333" pos:column="39"/></name><operator pos:line="333" pos:column="39">-&gt;<pos:position pos:line="333" pos:column="44"/></operator><name pos:line="333" pos:column="41">size<pos:position pos:line="333" pos:column="45"/></name></name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name pos:line="334" pos:column="13">data<pos:position pos:line="334" pos:column="17"/></name><operator pos:line="334" pos:column="17">-&gt;<pos:position pos:line="334" pos:column="22"/></operator><name pos:line="334" pos:column="19">easy_conn<pos:position pos:line="334" pos:column="28"/></name><operator pos:line="334" pos:column="28">-&gt;<pos:position pos:line="334" pos:column="33"/></operator><name pos:line="334" pos:column="30">writechannel_inuse<pos:position pos:line="334" pos:column="48"/></name></name></expr>?<pos:position pos:line="334" pos:column="49"/></condition><then><expr><literal type="string" pos:line="334" pos:column="49">"TRUE"<pos:position pos:line="334" pos:column="55"/></literal></expr></then><else pos:line="334" pos:column="55">:<expr><literal type="string" pos:line="334" pos:column="56">"FALSE"<pos:position pos:line="334" pos:column="63"/></literal></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><call><name pos:line="335" pos:column="13">isHandleAtHead<pos:position pos:line="335" pos:column="27"/></name><argument_list pos:line="335" pos:column="27">(<argument><expr><name pos:line="335" pos:column="28">data<pos:position pos:line="335" pos:column="32"/></name></expr></argument>,
                           <argument><expr><name><name pos:line="336" pos:column="28">data<pos:position pos:line="336" pos:column="32"/></name><operator pos:line="336" pos:column="32">-&gt;<pos:position pos:line="336" pos:column="37"/></operator><name pos:line="336" pos:column="34">easy_conn<pos:position pos:line="336" pos:column="43"/></name><operator pos:line="336" pos:column="43">-&gt;<pos:position pos:line="336" pos:column="48"/></operator><name pos:line="336" pos:column="45">send_pipe<pos:position pos:line="336" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="336" pos:column="55"/></argument_list></call></expr>?<pos:position pos:line="336" pos:column="56"/></condition><then><expr><literal type="string" pos:line="336" pos:column="56">"TRUE"<pos:position pos:line="336" pos:column="62"/></literal></expr></then><else pos:line="336" pos:column="62">:<expr><literal type="string" pos:line="336" pos:column="63">"FALSE"<pos:position pos:line="336" pos:column="70"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="336" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="72"/></expr_stmt>
<cpp:endif pos:line="337" pos:column="1">#<cpp:directive pos:line="337" pos:column="2">endif<pos:position pos:line="337" pos:column="7"/></cpp:directive></cpp:endif>
      <if pos:line="338" pos:column="7">if<condition pos:line="338" pos:column="9">(<expr><operator pos:line="338" pos:column="10">!<pos:position pos:line="338" pos:column="11"/></operator><name><name pos:line="338" pos:column="11">data<pos:position pos:line="338" pos:column="15"/></name><operator pos:line="338" pos:column="15">-&gt;<pos:position pos:line="338" pos:column="20"/></operator><name pos:line="338" pos:column="17">easy_conn<pos:position pos:line="338" pos:column="26"/></name><operator pos:line="338" pos:column="26">-&gt;<pos:position pos:line="338" pos:column="31"/></operator><name pos:line="338" pos:column="28">writechannel_inuse<pos:position pos:line="338" pos:column="46"/></name></name> <operator pos:line="338" pos:column="47">&amp;&amp;<pos:position pos:line="338" pos:column="57"/></operator>
         <call><name pos:line="339" pos:column="10">isHandleAtHead<pos:position pos:line="339" pos:column="24"/></name><argument_list pos:line="339" pos:column="24">(<argument><expr><name pos:line="339" pos:column="25">data<pos:position pos:line="339" pos:column="29"/></name></expr></argument>,
                        <argument><expr><name><name pos:line="340" pos:column="25">data<pos:position pos:line="340" pos:column="29"/></name><operator pos:line="340" pos:column="29">-&gt;<pos:position pos:line="340" pos:column="34"/></operator><name pos:line="340" pos:column="31">easy_conn<pos:position pos:line="340" pos:column="40"/></name><operator pos:line="340" pos:column="40">-&gt;<pos:position pos:line="340" pos:column="45"/></operator><name pos:line="340" pos:column="42">send_pipe<pos:position pos:line="340" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="340" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="340" pos:column="53"/></condition><then pos:line="340" pos:column="53"> <block pos:line="340" pos:column="54">{
        <comment type="block" pos:line="341" pos:column="9">/* Grab the channel */</comment>
        <expr_stmt><expr><name><name pos:line="342" pos:column="9">data<pos:position pos:line="342" pos:column="13"/></name><operator pos:line="342" pos:column="13">-&gt;<pos:position pos:line="342" pos:column="18"/></operator><name pos:line="342" pos:column="15">easy_conn<pos:position pos:line="342" pos:column="24"/></name><operator pos:line="342" pos:column="24">-&gt;<pos:position pos:line="342" pos:column="29"/></operator><name pos:line="342" pos:column="26">writechannel_inuse<pos:position pos:line="342" pos:column="44"/></name></name> <operator pos:line="342" pos:column="45">=<pos:position pos:line="342" pos:column="46"/></operator> <name pos:line="342" pos:column="47">TRUE<pos:position pos:line="342" pos:column="51"/></name></expr>;<pos:position pos:line="342" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="343" pos:column="9">multistate<pos:position pos:line="343" pos:column="19"/></name><argument_list pos:line="343" pos:column="19">(<argument><expr><name pos:line="343" pos:column="20">data<pos:position pos:line="343" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="343" pos:column="26">CURLM_STATE_DO<pos:position pos:line="343" pos:column="40"/></name></expr></argument>)<pos:position pos:line="343" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="343" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="344" pos:column="9">rc<pos:position pos:line="344" pos:column="11"/></name> <operator pos:line="344" pos:column="12">=<pos:position pos:line="344" pos:column="13"/></operator> <name pos:line="344" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="344" pos:column="38"/></name></expr>;<pos:position pos:line="344" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="345" pos:column="8"/></block></then></if>
      <break pos:line="346" pos:column="7">break;<pos:position pos:line="346" pos:column="13"/></break>

    <case pos:line="348" pos:column="5">case <expr><name pos:line="348" pos:column="10">CURLM_STATE_DO<pos:position pos:line="348" pos:column="24"/></name></expr>:<pos:position pos:line="348" pos:column="25"/></case>
      <if pos:line="349" pos:column="7">if<condition pos:line="349" pos:column="9">(<expr><name><name pos:line="349" pos:column="10">data<pos:position pos:line="349" pos:column="14"/></name><operator pos:line="349" pos:column="14">-&gt;<pos:position pos:line="349" pos:column="19"/></operator><name pos:line="349" pos:column="16">set<pos:position pos:line="349" pos:column="19"/></name><operator pos:line="349" pos:column="19">.<pos:position pos:line="349" pos:column="20"/></operator><name pos:line="349" pos:column="20">connect_only<pos:position pos:line="349" pos:column="32"/></name></name></expr>)<pos:position pos:line="349" pos:column="33"/></condition><then pos:line="349" pos:column="33"> <block pos:line="349" pos:column="34">{
        <comment type="block" pos:line="350" pos:column="9">/* keep connection open for application to use the socket */</comment>
        <expr_stmt><expr><call><name pos:line="351" pos:column="9">connkeep<pos:position pos:line="351" pos:column="17"/></name><argument_list pos:line="351" pos:column="17">(<argument><expr><name><name pos:line="351" pos:column="18">data<pos:position pos:line="351" pos:column="22"/></name><operator pos:line="351" pos:column="22">-&gt;<pos:position pos:line="351" pos:column="27"/></operator><name pos:line="351" pos:column="24">easy_conn<pos:position pos:line="351" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="351" pos:column="35">"CONNECT_ONLY"<pos:position pos:line="351" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="351" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="351" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="352" pos:column="9">multistate<pos:position pos:line="352" pos:column="19"/></name><argument_list pos:line="352" pos:column="19">(<argument><expr><name pos:line="352" pos:column="20">data<pos:position pos:line="352" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="352" pos:column="26">CURLM_STATE_DONE<pos:position pos:line="352" pos:column="42"/></name></expr></argument>)<pos:position pos:line="352" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="352" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="353" pos:column="9">result<pos:position pos:line="353" pos:column="15"/></name> <operator pos:line="353" pos:column="16">=<pos:position pos:line="353" pos:column="17"/></operator> <name pos:line="353" pos:column="18">CURLE_OK<pos:position pos:line="353" pos:column="26"/></name></expr>;<pos:position pos:line="353" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="354" pos:column="9">rc<pos:position pos:line="354" pos:column="11"/></name> <operator pos:line="354" pos:column="12">=<pos:position pos:line="354" pos:column="13"/></operator> <name pos:line="354" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="354" pos:column="38"/></name></expr>;<pos:position pos:line="354" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="355" pos:column="8"/></block></then>
      <else pos:line="356" pos:column="7">else <block pos:line="356" pos:column="12">{
        <comment type="block" pos:line="357" pos:column="9">/* Perform the protocol's DO action */</comment>
        <expr_stmt><expr><name pos:line="358" pos:column="9">result<pos:position pos:line="358" pos:column="15"/></name> <operator pos:line="358" pos:column="16">=<pos:position pos:line="358" pos:column="17"/></operator> <call><name pos:line="358" pos:column="18">Curl_do<pos:position pos:line="358" pos:column="25"/></name><argument_list pos:line="358" pos:column="25">(<argument><expr><operator pos:line="358" pos:column="26">&amp;<pos:position pos:line="358" pos:column="31"/></operator><name><name pos:line="358" pos:column="27">data<pos:position pos:line="358" pos:column="31"/></name><operator pos:line="358" pos:column="31">-&gt;<pos:position pos:line="358" pos:column="36"/></operator><name pos:line="358" pos:column="33">easy_conn<pos:position pos:line="358" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="358" pos:column="44">&amp;<pos:position pos:line="358" pos:column="49"/></operator><name pos:line="358" pos:column="45">dophase_done<pos:position pos:line="358" pos:column="57"/></name></expr></argument>)<pos:position pos:line="358" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="358" pos:column="59"/></expr_stmt>

        <comment type="block" pos:line="360" pos:column="9">/* When Curl_do() returns failure, data-&gt;easy_conn might be NULL! */</comment>

        <if pos:line="362" pos:column="9">if<condition pos:line="362" pos:column="11">(<expr><operator pos:line="362" pos:column="12">!<pos:position pos:line="362" pos:column="13"/></operator><name pos:line="362" pos:column="13">result<pos:position pos:line="362" pos:column="19"/></name></expr>)<pos:position pos:line="362" pos:column="20"/></condition><then pos:line="362" pos:column="20"> <block pos:line="362" pos:column="21">{
          <if pos:line="363" pos:column="11">if<condition pos:line="363" pos:column="13">(<expr><operator pos:line="363" pos:column="14">!<pos:position pos:line="363" pos:column="15"/></operator><name pos:line="363" pos:column="15">dophase_done<pos:position pos:line="363" pos:column="27"/></name></expr>)<pos:position pos:line="363" pos:column="28"/></condition><then pos:line="363" pos:column="28"> <block pos:line="363" pos:column="29">{
            <comment type="block" pos:line="364" pos:column="13">/* some steps needed for wildcard matching */</comment>
            <if pos:line="365" pos:column="13">if<condition pos:line="365" pos:column="15">(<expr><name><name pos:line="365" pos:column="16">data<pos:position pos:line="365" pos:column="20"/></name><operator pos:line="365" pos:column="20">-&gt;<pos:position pos:line="365" pos:column="25"/></operator><name pos:line="365" pos:column="22">set<pos:position pos:line="365" pos:column="25"/></name><operator pos:line="365" pos:column="25">.<pos:position pos:line="365" pos:column="26"/></operator><name pos:line="365" pos:column="26">wildcardmatch<pos:position pos:line="365" pos:column="39"/></name></name></expr>)<pos:position pos:line="365" pos:column="40"/></condition><then pos:line="365" pos:column="40"> <block pos:line="365" pos:column="41">{
              <decl_stmt><decl><type><name><name pos:line="366" pos:column="15">struct<pos:position pos:line="366" pos:column="21"/></name> <name pos:line="366" pos:column="22">WildcardData<pos:position pos:line="366" pos:column="34"/></name></name> <modifier pos:line="366" pos:column="35">*<pos:position pos:line="366" pos:column="36"/></modifier></type><name pos:line="366" pos:column="36">wc<pos:position pos:line="366" pos:column="38"/></name> <init pos:line="366" pos:column="39">= <expr><operator pos:line="366" pos:column="41">&amp;<pos:position pos:line="366" pos:column="46"/></operator><name><name pos:line="366" pos:column="42">data<pos:position pos:line="366" pos:column="46"/></name><operator pos:line="366" pos:column="46">-&gt;<pos:position pos:line="366" pos:column="51"/></operator><name pos:line="366" pos:column="48">wildcard<pos:position pos:line="366" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="366" pos:column="57"/></decl_stmt>
              <if pos:line="367" pos:column="15">if<condition pos:line="367" pos:column="17">(<expr><name><name pos:line="367" pos:column="18">wc<pos:position pos:line="367" pos:column="20"/></name><operator pos:line="367" pos:column="20">-&gt;<pos:position pos:line="367" pos:column="25"/></operator><name pos:line="367" pos:column="22">state<pos:position pos:line="367" pos:column="27"/></name></name> <operator pos:line="367" pos:column="28">==<pos:position pos:line="367" pos:column="30"/></operator> <name pos:line="367" pos:column="31">CURLWC_DONE<pos:position pos:line="367" pos:column="42"/></name> <operator pos:line="367" pos:column="43">||<pos:position pos:line="367" pos:column="45"/></operator> <name><name pos:line="367" pos:column="46">wc<pos:position pos:line="367" pos:column="48"/></name><operator pos:line="367" pos:column="48">-&gt;<pos:position pos:line="367" pos:column="53"/></operator><name pos:line="367" pos:column="50">state<pos:position pos:line="367" pos:column="55"/></name></name> <operator pos:line="367" pos:column="56">==<pos:position pos:line="367" pos:column="58"/></operator> <name pos:line="367" pos:column="59">CURLWC_SKIP<pos:position pos:line="367" pos:column="70"/></name></expr>)<pos:position pos:line="367" pos:column="71"/></condition><then pos:line="367" pos:column="71"> <block pos:line="367" pos:column="72">{
                <comment type="block" pos:line="368" pos:column="17">/* skip some states if it is important */</comment>
                <expr_stmt><expr><call><name pos:line="369" pos:column="17">Curl_done<pos:position pos:line="369" pos:column="26"/></name><argument_list pos:line="369" pos:column="26">(<argument><expr><operator pos:line="369" pos:column="27">&amp;<pos:position pos:line="369" pos:column="32"/></operator><name><name pos:line="369" pos:column="28">data<pos:position pos:line="369" pos:column="32"/></name><operator pos:line="369" pos:column="32">-&gt;<pos:position pos:line="369" pos:column="37"/></operator><name pos:line="369" pos:column="34">easy_conn<pos:position pos:line="369" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="369" pos:column="45">CURLE_OK<pos:position pos:line="369" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="369" pos:column="55">FALSE<pos:position pos:line="369" pos:column="60"/></name></expr></argument>)<pos:position pos:line="369" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="369" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="370" pos:column="17">multistate<pos:position pos:line="370" pos:column="27"/></name><argument_list pos:line="370" pos:column="27">(<argument><expr><name pos:line="370" pos:column="28">data<pos:position pos:line="370" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="370" pos:column="34">CURLM_STATE_DONE<pos:position pos:line="370" pos:column="50"/></name></expr></argument>)<pos:position pos:line="370" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name pos:line="371" pos:column="17">rc<pos:position pos:line="371" pos:column="19"/></name> <operator pos:line="371" pos:column="20">=<pos:position pos:line="371" pos:column="21"/></operator> <name pos:line="371" pos:column="22">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="371" pos:column="46"/></name></expr>;<pos:position pos:line="371" pos:column="47"/></expr_stmt>
                <break pos:line="372" pos:column="17">break;<pos:position pos:line="372" pos:column="23"/></break>
              }<pos:position pos:line="373" pos:column="16"/></block></then></if>
            }<pos:position pos:line="374" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="375" pos:column="13">/* DO was not completed in one function call, we must continue
               DOING... */</comment>
            <expr_stmt><expr><call><name pos:line="377" pos:column="13">multistate<pos:position pos:line="377" pos:column="23"/></name><argument_list pos:line="377" pos:column="23">(<argument><expr><name pos:line="377" pos:column="24">data<pos:position pos:line="377" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="377" pos:column="30">CURLM_STATE_DOING<pos:position pos:line="377" pos:column="47"/></name></expr></argument>)<pos:position pos:line="377" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="377" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="378" pos:column="13">rc<pos:position pos:line="378" pos:column="15"/></name> <operator pos:line="378" pos:column="16">=<pos:position pos:line="378" pos:column="17"/></operator> <name pos:line="378" pos:column="18">CURLM_OK<pos:position pos:line="378" pos:column="26"/></name></expr>;<pos:position pos:line="378" pos:column="27"/></expr_stmt>
          }<pos:position pos:line="379" pos:column="12"/></block></then>

          <comment type="block" pos:line="381" pos:column="11">/* after DO, go DO_DONE... or DO_MORE */</comment>
          <elseif pos:line="382" pos:column="11">else <if pos:line="382" pos:column="16">if<condition pos:line="382" pos:column="18">(<expr><name><name pos:line="382" pos:column="19">data<pos:position pos:line="382" pos:column="23"/></name><operator pos:line="382" pos:column="23">-&gt;<pos:position pos:line="382" pos:column="28"/></operator><name pos:line="382" pos:column="25">easy_conn<pos:position pos:line="382" pos:column="34"/></name><operator pos:line="382" pos:column="34">-&gt;<pos:position pos:line="382" pos:column="39"/></operator><name pos:line="382" pos:column="36">bits<pos:position pos:line="382" pos:column="40"/></name><operator pos:line="382" pos:column="40">.<pos:position pos:line="382" pos:column="41"/></operator><name pos:line="382" pos:column="41">do_more<pos:position pos:line="382" pos:column="48"/></name></name></expr>)<pos:position pos:line="382" pos:column="49"/></condition><then pos:line="382" pos:column="49"> <block pos:line="382" pos:column="50">{
            <comment type="block" pos:line="383" pos:column="13">/* we're supposed to do more, but we need to sit down, relax
               and wait a little while first */</comment>
            <expr_stmt><expr><call><name pos:line="385" pos:column="13">multistate<pos:position pos:line="385" pos:column="23"/></name><argument_list pos:line="385" pos:column="23">(<argument><expr><name pos:line="385" pos:column="24">data<pos:position pos:line="385" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="385" pos:column="30">CURLM_STATE_DO_MORE<pos:position pos:line="385" pos:column="49"/></name></expr></argument>)<pos:position pos:line="385" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="385" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name pos:line="386" pos:column="13">rc<pos:position pos:line="386" pos:column="15"/></name> <operator pos:line="386" pos:column="16">=<pos:position pos:line="386" pos:column="17"/></operator> <name pos:line="386" pos:column="18">CURLM_OK<pos:position pos:line="386" pos:column="26"/></name></expr>;<pos:position pos:line="386" pos:column="27"/></expr_stmt>
          }<pos:position pos:line="387" pos:column="12"/></block></then></if></elseif>
          <else pos:line="388" pos:column="11">else <block pos:line="388" pos:column="16">{
            <comment type="block" pos:line="389" pos:column="13">/* we're done with the DO, now DO_DONE */</comment>
            <expr_stmt><expr><call><name pos:line="390" pos:column="13">multistate<pos:position pos:line="390" pos:column="23"/></name><argument_list pos:line="390" pos:column="23">(<argument><expr><name pos:line="390" pos:column="24">data<pos:position pos:line="390" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="390" pos:column="30">CURLM_STATE_DO_DONE<pos:position pos:line="390" pos:column="49"/></name></expr></argument>)<pos:position pos:line="390" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="390" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name pos:line="391" pos:column="13">rc<pos:position pos:line="391" pos:column="15"/></name> <operator pos:line="391" pos:column="16">=<pos:position pos:line="391" pos:column="17"/></operator> <name pos:line="391" pos:column="18">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="391" pos:column="42"/></name></expr>;<pos:position pos:line="391" pos:column="43"/></expr_stmt>
          }<pos:position pos:line="392" pos:column="12"/></block></else></if>
        }<pos:position pos:line="393" pos:column="10"/></block></then>
        <elseif pos:line="394" pos:column="9">else <if pos:line="394" pos:column="14">if<condition pos:line="394" pos:column="16">(<expr><operator pos:line="394" pos:column="17">(<pos:position pos:line="394" pos:column="18"/></operator><name pos:line="394" pos:column="18">CURLE_SEND_ERROR<pos:position pos:line="394" pos:column="34"/></name> <operator pos:line="394" pos:column="35">==<pos:position pos:line="394" pos:column="37"/></operator> <name pos:line="394" pos:column="38">result<pos:position pos:line="394" pos:column="44"/></name><operator pos:line="394" pos:column="44">)<pos:position pos:line="394" pos:column="45"/></operator> <operator pos:line="394" pos:column="46">&amp;&amp;<pos:position pos:line="394" pos:column="56"/></operator>
                <name><name pos:line="395" pos:column="17">data<pos:position pos:line="395" pos:column="21"/></name><operator pos:line="395" pos:column="21">-&gt;<pos:position pos:line="395" pos:column="26"/></operator><name pos:line="395" pos:column="23">easy_conn<pos:position pos:line="395" pos:column="32"/></name><operator pos:line="395" pos:column="32">-&gt;<pos:position pos:line="395" pos:column="37"/></operator><name pos:line="395" pos:column="34">bits<pos:position pos:line="395" pos:column="38"/></name><operator pos:line="395" pos:column="38">.<pos:position pos:line="395" pos:column="39"/></operator><name pos:line="395" pos:column="39">reuse<pos:position pos:line="395" pos:column="44"/></name></name></expr>)<pos:position pos:line="395" pos:column="45"/></condition><then pos:line="395" pos:column="45"> <block pos:line="395" pos:column="46">{
          <comment type="block" pos:line="396" pos:column="11">/*
           * In this situation, a connection that we were trying to use
           * may have unexpectedly died.  If possible, send the connection
           * back to the CONNECT phase so we can try again.
           */</comment>
          <decl_stmt><decl><type><name pos:line="401" pos:column="11">char<pos:position pos:line="401" pos:column="15"/></name> <modifier pos:line="401" pos:column="16">*<pos:position pos:line="401" pos:column="17"/></modifier></type><name pos:line="401" pos:column="17">newurl<pos:position pos:line="401" pos:column="23"/></name> <init pos:line="401" pos:column="24">= <expr><name pos:line="401" pos:column="26">NULL<pos:position pos:line="401" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="401" pos:column="31"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="402" pos:column="11">followtype<pos:position pos:line="402" pos:column="21"/></name></type> <name pos:line="402" pos:column="22">follow<pos:position pos:line="402" pos:column="28"/></name><init pos:line="402" pos:column="28">=<expr><name pos:line="402" pos:column="29">FOLLOW_NONE<pos:position pos:line="402" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="402" pos:column="41"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="403" pos:column="11">CURLcode<pos:position pos:line="403" pos:column="19"/></name></type> <name pos:line="403" pos:column="20">drc<pos:position pos:line="403" pos:column="23"/></name></decl>;<pos:position pos:line="403" pos:column="24"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="404" pos:column="11">bool<pos:position pos:line="404" pos:column="15"/></name></type> <name pos:line="404" pos:column="16">retry<pos:position pos:line="404" pos:column="21"/></name> <init pos:line="404" pos:column="22">= <expr><name pos:line="404" pos:column="24">FALSE<pos:position pos:line="404" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="404" pos:column="30"/></decl_stmt>

          <expr_stmt><expr><name pos:line="406" pos:column="11">drc<pos:position pos:line="406" pos:column="14"/></name> <operator pos:line="406" pos:column="15">=<pos:position pos:line="406" pos:column="16"/></operator> <call><name pos:line="406" pos:column="17">Curl_retry_request<pos:position pos:line="406" pos:column="35"/></name><argument_list pos:line="406" pos:column="35">(<argument><expr><name><name pos:line="406" pos:column="36">data<pos:position pos:line="406" pos:column="40"/></name><operator pos:line="406" pos:column="40">-&gt;<pos:position pos:line="406" pos:column="45"/></operator><name pos:line="406" pos:column="42">easy_conn<pos:position pos:line="406" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="406" pos:column="53">&amp;<pos:position pos:line="406" pos:column="58"/></operator><name pos:line="406" pos:column="54">newurl<pos:position pos:line="406" pos:column="60"/></name></expr></argument>)<pos:position pos:line="406" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="406" pos:column="62"/></expr_stmt>
          <if pos:line="407" pos:column="11">if<condition pos:line="407" pos:column="13">(<expr><name pos:line="407" pos:column="14">drc<pos:position pos:line="407" pos:column="17"/></name></expr>)<pos:position pos:line="407" pos:column="18"/></condition><then pos:line="407" pos:column="18"> <block pos:line="407" pos:column="19">{
            <comment type="block" pos:line="408" pos:column="13">/* a failure here pretty much implies an out of memory */</comment>
            <expr_stmt><expr><name pos:line="409" pos:column="13">result<pos:position pos:line="409" pos:column="19"/></name> <operator pos:line="409" pos:column="20">=<pos:position pos:line="409" pos:column="21"/></operator> <name pos:line="409" pos:column="22">drc<pos:position pos:line="409" pos:column="25"/></name></expr>;<pos:position pos:line="409" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="410" pos:column="13">disconnect_conn<pos:position pos:line="410" pos:column="28"/></name> <operator pos:line="410" pos:column="29">=<pos:position pos:line="410" pos:column="30"/></operator> <name pos:line="410" pos:column="31">TRUE<pos:position pos:line="410" pos:column="35"/></name></expr>;<pos:position pos:line="410" pos:column="36"/></expr_stmt>
          }<pos:position pos:line="411" pos:column="12"/></block></then>
          <else pos:line="412" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="413" pos:column="13">retry<pos:position pos:line="413" pos:column="18"/></name> <operator pos:line="413" pos:column="19">=<pos:position pos:line="413" pos:column="20"/></operator> <ternary><condition><expr><operator pos:line="413" pos:column="21">(<pos:position pos:line="413" pos:column="22"/></operator><name pos:line="413" pos:column="22">newurl<pos:position pos:line="413" pos:column="28"/></name><operator pos:line="413" pos:column="28">)<pos:position pos:line="413" pos:column="29"/></operator></expr>?<pos:position pos:line="413" pos:column="30"/></condition><then><expr><name pos:line="413" pos:column="30">TRUE<pos:position pos:line="413" pos:column="34"/></name></expr></then><else pos:line="413" pos:column="34">:<expr><name pos:line="413" pos:column="35">FALSE<pos:position pos:line="413" pos:column="40"/></name></expr></else></ternary></expr>;<pos:position pos:line="413" pos:column="41"/></expr_stmt></block></else></if>

          <expr_stmt><expr><call><name pos:line="415" pos:column="11">Curl_posttransfer<pos:position pos:line="415" pos:column="28"/></name><argument_list pos:line="415" pos:column="28">(<argument><expr><name pos:line="415" pos:column="29">data<pos:position pos:line="415" pos:column="33"/></name></expr></argument>)<pos:position pos:line="415" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="415" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><name pos:line="416" pos:column="11">drc<pos:position pos:line="416" pos:column="14"/></name> <operator pos:line="416" pos:column="15">=<pos:position pos:line="416" pos:column="16"/></operator> <call><name pos:line="416" pos:column="17">Curl_done<pos:position pos:line="416" pos:column="26"/></name><argument_list pos:line="416" pos:column="26">(<argument><expr><operator pos:line="416" pos:column="27">&amp;<pos:position pos:line="416" pos:column="32"/></operator><name><name pos:line="416" pos:column="28">data<pos:position pos:line="416" pos:column="32"/></name><operator pos:line="416" pos:column="32">-&gt;<pos:position pos:line="416" pos:column="37"/></operator><name pos:line="416" pos:column="34">easy_conn<pos:position pos:line="416" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="416" pos:column="45">result<pos:position pos:line="416" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="416" pos:column="53">FALSE<pos:position pos:line="416" pos:column="58"/></name></expr></argument>)<pos:position pos:line="416" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="416" pos:column="60"/></expr_stmt>

          <comment type="block" pos:line="418" pos:column="11">/* When set to retry the connection, we must to go back to
           * the CONNECT state */</comment>
          <if pos:line="420" pos:column="11">if<condition pos:line="420" pos:column="13">(<expr><name pos:line="420" pos:column="14">retry<pos:position pos:line="420" pos:column="19"/></name></expr>)<pos:position pos:line="420" pos:column="20"/></condition><then pos:line="420" pos:column="20"> <block pos:line="420" pos:column="21">{
            <if pos:line="421" pos:column="13">if<condition pos:line="421" pos:column="15">(<expr><operator pos:line="421" pos:column="16">!<pos:position pos:line="421" pos:column="17"/></operator><name pos:line="421" pos:column="17">drc<pos:position pos:line="421" pos:column="20"/></name> <operator pos:line="421" pos:column="21">||<pos:position pos:line="421" pos:column="23"/></operator> <operator pos:line="421" pos:column="24">(<pos:position pos:line="421" pos:column="25"/></operator><name pos:line="421" pos:column="25">drc<pos:position pos:line="421" pos:column="28"/></name> <operator pos:line="421" pos:column="29">==<pos:position pos:line="421" pos:column="31"/></operator> <name pos:line="421" pos:column="32">CURLE_SEND_ERROR<pos:position pos:line="421" pos:column="48"/></name><operator pos:line="421" pos:column="48">)<pos:position pos:line="421" pos:column="49"/></operator></expr>)<pos:position pos:line="421" pos:column="50"/></condition><then pos:line="421" pos:column="50"> <block pos:line="421" pos:column="51">{
              <expr_stmt><expr><name pos:line="422" pos:column="15">follow<pos:position pos:line="422" pos:column="21"/></name> <operator pos:line="422" pos:column="22">=<pos:position pos:line="422" pos:column="23"/></operator> <name pos:line="422" pos:column="24">FOLLOW_RETRY<pos:position pos:line="422" pos:column="36"/></name></expr>;<pos:position pos:line="422" pos:column="37"/></expr_stmt>
              <expr_stmt><expr><name pos:line="423" pos:column="15">drc<pos:position pos:line="423" pos:column="18"/></name> <operator pos:line="423" pos:column="19">=<pos:position pos:line="423" pos:column="20"/></operator> <call><name pos:line="423" pos:column="21">Curl_follow<pos:position pos:line="423" pos:column="32"/></name><argument_list pos:line="423" pos:column="32">(<argument><expr><name pos:line="423" pos:column="33">data<pos:position pos:line="423" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="423" pos:column="39">newurl<pos:position pos:line="423" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="423" pos:column="47">follow<pos:position pos:line="423" pos:column="53"/></name></expr></argument>)<pos:position pos:line="423" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="423" pos:column="55"/></expr_stmt>
              <if pos:line="424" pos:column="15">if<condition pos:line="424" pos:column="17">(<expr><operator pos:line="424" pos:column="18">!<pos:position pos:line="424" pos:column="19"/></operator><name pos:line="424" pos:column="19">drc<pos:position pos:line="424" pos:column="22"/></name></expr>)<pos:position pos:line="424" pos:column="23"/></condition><then pos:line="424" pos:column="23"> <block pos:line="424" pos:column="24">{
                <expr_stmt><expr><call><name pos:line="425" pos:column="17">multistate<pos:position pos:line="425" pos:column="27"/></name><argument_list pos:line="425" pos:column="27">(<argument><expr><name pos:line="425" pos:column="28">data<pos:position pos:line="425" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="425" pos:column="34">CURLM_STATE_CONNECT<pos:position pos:line="425" pos:column="53"/></name></expr></argument>)<pos:position pos:line="425" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="425" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><name pos:line="426" pos:column="17">rc<pos:position pos:line="426" pos:column="19"/></name> <operator pos:line="426" pos:column="20">=<pos:position pos:line="426" pos:column="21"/></operator> <name pos:line="426" pos:column="22">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="426" pos:column="46"/></name></expr>;<pos:position pos:line="426" pos:column="47"/></expr_stmt>
                <expr_stmt><expr><name pos:line="427" pos:column="17">result<pos:position pos:line="427" pos:column="23"/></name> <operator pos:line="427" pos:column="24">=<pos:position pos:line="427" pos:column="25"/></operator> <name pos:line="427" pos:column="26">CURLE_OK<pos:position pos:line="427" pos:column="34"/></name></expr>;<pos:position pos:line="427" pos:column="35"/></expr_stmt>
              }<pos:position pos:line="428" pos:column="16"/></block></then>
              <else pos:line="429" pos:column="15">else <block pos:line="429" pos:column="20">{
                <comment type="block" pos:line="430" pos:column="17">/* Follow failed */</comment>
                <expr_stmt><expr><name pos:line="431" pos:column="17">result<pos:position pos:line="431" pos:column="23"/></name> <operator pos:line="431" pos:column="24">=<pos:position pos:line="431" pos:column="25"/></operator> <name pos:line="431" pos:column="26">drc<pos:position pos:line="431" pos:column="29"/></name></expr>;<pos:position pos:line="431" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="432" pos:column="17">free<pos:position pos:line="432" pos:column="21"/></name><argument_list pos:line="432" pos:column="21">(<argument><expr><name pos:line="432" pos:column="22">newurl<pos:position pos:line="432" pos:column="28"/></name></expr></argument>)<pos:position pos:line="432" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="432" pos:column="30"/></expr_stmt>
              }<pos:position pos:line="433" pos:column="16"/></block></else></if>
            }<pos:position pos:line="434" pos:column="14"/></block></then>
            <else pos:line="435" pos:column="13">else <block pos:line="435" pos:column="18">{
              <comment type="block" pos:line="436" pos:column="15">/* done didn't return OK or SEND_ERROR */</comment>
              <expr_stmt><expr><name pos:line="437" pos:column="15">result<pos:position pos:line="437" pos:column="21"/></name> <operator pos:line="437" pos:column="22">=<pos:position pos:line="437" pos:column="23"/></operator> <name pos:line="437" pos:column="24">drc<pos:position pos:line="437" pos:column="27"/></name></expr>;<pos:position pos:line="437" pos:column="28"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="438" pos:column="15">free<pos:position pos:line="438" pos:column="19"/></name><argument_list pos:line="438" pos:column="19">(<argument><expr><name pos:line="438" pos:column="20">newurl<pos:position pos:line="438" pos:column="26"/></name></expr></argument>)<pos:position pos:line="438" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="438" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="439" pos:column="14"/></block></else></if>
          }<pos:position pos:line="440" pos:column="12"/></block></then>
          <else pos:line="441" pos:column="11">else <block pos:line="441" pos:column="16">{
            <comment type="block" pos:line="442" pos:column="13">/* Have error handler disconnect conn if we can't retry */</comment>
            <expr_stmt><expr><name pos:line="443" pos:column="13">disconnect_conn<pos:position pos:line="443" pos:column="28"/></name> <operator pos:line="443" pos:column="29">=<pos:position pos:line="443" pos:column="30"/></operator> <name pos:line="443" pos:column="31">TRUE<pos:position pos:line="443" pos:column="35"/></name></expr>;<pos:position pos:line="443" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="444" pos:column="13">free<pos:position pos:line="444" pos:column="17"/></name><argument_list pos:line="444" pos:column="17">(<argument><expr><name pos:line="444" pos:column="18">newurl<pos:position pos:line="444" pos:column="24"/></name></expr></argument>)<pos:position pos:line="444" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="444" pos:column="26"/></expr_stmt>
          }<pos:position pos:line="445" pos:column="12"/></block></else></if>
        }<pos:position pos:line="446" pos:column="10"/></block></then></if></elseif>
        <else pos:line="447" pos:column="9">else <block pos:line="447" pos:column="14">{
          <comment type="block" pos:line="448" pos:column="11">/* failure detected */</comment>
          <expr_stmt><expr><call><name pos:line="449" pos:column="11">Curl_posttransfer<pos:position pos:line="449" pos:column="28"/></name><argument_list pos:line="449" pos:column="28">(<argument><expr><name pos:line="449" pos:column="29">data<pos:position pos:line="449" pos:column="33"/></name></expr></argument>)<pos:position pos:line="449" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="449" pos:column="35"/></expr_stmt>
          <if pos:line="450" pos:column="11">if<condition pos:line="450" pos:column="13">(<expr><name><name pos:line="450" pos:column="14">data<pos:position pos:line="450" pos:column="18"/></name><operator pos:line="450" pos:column="18">-&gt;<pos:position pos:line="450" pos:column="23"/></operator><name pos:line="450" pos:column="20">easy_conn<pos:position pos:line="450" pos:column="29"/></name></name></expr>)<pos:position pos:line="450" pos:column="30"/></condition><then pos:line="450" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="451" pos:column="13">Curl_done<pos:position pos:line="451" pos:column="22"/></name><argument_list pos:line="451" pos:column="22">(<argument><expr><operator pos:line="451" pos:column="23">&amp;<pos:position pos:line="451" pos:column="28"/></operator><name><name pos:line="451" pos:column="24">data<pos:position pos:line="451" pos:column="28"/></name><operator pos:line="451" pos:column="28">-&gt;<pos:position pos:line="451" pos:column="33"/></operator><name pos:line="451" pos:column="30">easy_conn<pos:position pos:line="451" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="451" pos:column="41">result<pos:position pos:line="451" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="451" pos:column="49">FALSE<pos:position pos:line="451" pos:column="54"/></name></expr></argument>)<pos:position pos:line="451" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="451" pos:column="56"/></expr_stmt></block></then></if>
          <expr_stmt><expr><name pos:line="452" pos:column="11">disconnect_conn<pos:position pos:line="452" pos:column="26"/></name> <operator pos:line="452" pos:column="27">=<pos:position pos:line="452" pos:column="28"/></operator> <name pos:line="452" pos:column="29">TRUE<pos:position pos:line="452" pos:column="33"/></name></expr>;<pos:position pos:line="452" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="453" pos:column="10"/></block></else></if>
      }<pos:position pos:line="454" pos:column="8"/></block></else></if>
      <break pos:line="455" pos:column="7">break;<pos:position pos:line="455" pos:column="13"/></break>

    <case pos:line="457" pos:column="5">case <expr><name pos:line="457" pos:column="10">CURLM_STATE_DOING<pos:position pos:line="457" pos:column="27"/></name></expr>:<pos:position pos:line="457" pos:column="28"/></case>
      <comment type="block" pos:line="458" pos:column="7">/* we continue DOING until the DO phase is complete */</comment>
      <expr_stmt><expr><name pos:line="459" pos:column="7">result<pos:position pos:line="459" pos:column="13"/></name> <operator pos:line="459" pos:column="14">=<pos:position pos:line="459" pos:column="15"/></operator> <call><name pos:line="459" pos:column="16">Curl_protocol_doing<pos:position pos:line="459" pos:column="35"/></name><argument_list pos:line="459" pos:column="35">(<argument><expr><name><name pos:line="459" pos:column="36">data<pos:position pos:line="459" pos:column="40"/></name><operator pos:line="459" pos:column="40">-&gt;<pos:position pos:line="459" pos:column="45"/></operator><name pos:line="459" pos:column="42">easy_conn<pos:position pos:line="459" pos:column="51"/></name></name></expr></argument>,
                                   <argument><expr><operator pos:line="460" pos:column="36">&amp;<pos:position pos:line="460" pos:column="41"/></operator><name pos:line="460" pos:column="37">dophase_done<pos:position pos:line="460" pos:column="49"/></name></expr></argument>)<pos:position pos:line="460" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="460" pos:column="51"/></expr_stmt>
      <if pos:line="461" pos:column="7">if<condition pos:line="461" pos:column="9">(<expr><operator pos:line="461" pos:column="10">!<pos:position pos:line="461" pos:column="11"/></operator><name pos:line="461" pos:column="11">result<pos:position pos:line="461" pos:column="17"/></name></expr>)<pos:position pos:line="461" pos:column="18"/></condition><then pos:line="461" pos:column="18"> <block pos:line="461" pos:column="19">{
        <if pos:line="462" pos:column="9">if<condition pos:line="462" pos:column="11">(<expr><name pos:line="462" pos:column="12">dophase_done<pos:position pos:line="462" pos:column="24"/></name></expr>)<pos:position pos:line="462" pos:column="25"/></condition><then pos:line="462" pos:column="25"> <block pos:line="462" pos:column="26">{
          <comment type="block" pos:line="463" pos:column="11">/* after DO, go DO_DONE or DO_MORE */</comment>
          <expr_stmt><expr><call><name pos:line="464" pos:column="11">multistate<pos:position pos:line="464" pos:column="21"/></name><argument_list pos:line="464" pos:column="21">(<argument><expr><name pos:line="464" pos:column="22">data<pos:position pos:line="464" pos:column="26"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="464" pos:column="28">data<pos:position pos:line="464" pos:column="32"/></name><operator pos:line="464" pos:column="32">-&gt;<pos:position pos:line="464" pos:column="37"/></operator><name pos:line="464" pos:column="34">easy_conn<pos:position pos:line="464" pos:column="43"/></name><operator pos:line="464" pos:column="43">-&gt;<pos:position pos:line="464" pos:column="48"/></operator><name pos:line="464" pos:column="45">bits<pos:position pos:line="464" pos:column="49"/></name><operator pos:line="464" pos:column="49">.<pos:position pos:line="464" pos:column="50"/></operator><name pos:line="464" pos:column="50">do_more<pos:position pos:line="464" pos:column="57"/></name></name></expr>?<pos:position pos:line="464" pos:column="58"/></condition><then pos:line="464" pos:column="58">
                     <expr><name pos:line="465" pos:column="22">CURLM_STATE_DO_MORE<pos:position pos:line="465" pos:column="41"/></name></expr></then><else pos:line="465" pos:column="41">:
                     <expr><name pos:line="466" pos:column="22">CURLM_STATE_DO_DONE<pos:position pos:line="466" pos:column="41"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="466" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="466" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><name pos:line="467" pos:column="11">rc<pos:position pos:line="467" pos:column="13"/></name> <operator pos:line="467" pos:column="14">=<pos:position pos:line="467" pos:column="15"/></operator> <name pos:line="467" pos:column="16">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="467" pos:column="40"/></name></expr>;<pos:position pos:line="467" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="468" pos:column="10"/></block></then></if> <comment type="block" pos:line="468" pos:column="11">/* dophase_done */</comment>
      }<pos:position pos:line="469" pos:column="8"/></block></then>
      <else pos:line="470" pos:column="7">else <block pos:line="470" pos:column="12">{
        <comment type="block" pos:line="471" pos:column="9">/* failure detected */</comment>
        <expr_stmt><expr><call><name pos:line="472" pos:column="9">Curl_posttransfer<pos:position pos:line="472" pos:column="26"/></name><argument_list pos:line="472" pos:column="26">(<argument><expr><name pos:line="472" pos:column="27">data<pos:position pos:line="472" pos:column="31"/></name></expr></argument>)<pos:position pos:line="472" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="472" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="473" pos:column="9">Curl_done<pos:position pos:line="473" pos:column="18"/></name><argument_list pos:line="473" pos:column="18">(<argument><expr><operator pos:line="473" pos:column="19">&amp;<pos:position pos:line="473" pos:column="24"/></operator><name><name pos:line="473" pos:column="20">data<pos:position pos:line="473" pos:column="24"/></name><operator pos:line="473" pos:column="24">-&gt;<pos:position pos:line="473" pos:column="29"/></operator><name pos:line="473" pos:column="26">easy_conn<pos:position pos:line="473" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="473" pos:column="37">result<pos:position pos:line="473" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="473" pos:column="45">FALSE<pos:position pos:line="473" pos:column="50"/></name></expr></argument>)<pos:position pos:line="473" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="473" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="474" pos:column="9">disconnect_conn<pos:position pos:line="474" pos:column="24"/></name> <operator pos:line="474" pos:column="25">=<pos:position pos:line="474" pos:column="26"/></operator> <name pos:line="474" pos:column="27">TRUE<pos:position pos:line="474" pos:column="31"/></name></expr>;<pos:position pos:line="474" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="475" pos:column="8"/></block></else></if>
      <break pos:line="476" pos:column="7">break;<pos:position pos:line="476" pos:column="13"/></break>

    <case pos:line="478" pos:column="5">case <expr><name pos:line="478" pos:column="10">CURLM_STATE_DO_MORE<pos:position pos:line="478" pos:column="29"/></name></expr>:<pos:position pos:line="478" pos:column="30"/></case>
      <comment type="block" pos:line="479" pos:column="7">/*
       * When we are connected, DO MORE and then go DO_DONE
       */</comment>
      <expr_stmt><expr><name pos:line="482" pos:column="7">result<pos:position pos:line="482" pos:column="13"/></name> <operator pos:line="482" pos:column="14">=<pos:position pos:line="482" pos:column="15"/></operator> <call><name pos:line="482" pos:column="16">Curl_do_more<pos:position pos:line="482" pos:column="28"/></name><argument_list pos:line="482" pos:column="28">(<argument><expr><name><name pos:line="482" pos:column="29">data<pos:position pos:line="482" pos:column="33"/></name><operator pos:line="482" pos:column="33">-&gt;<pos:position pos:line="482" pos:column="38"/></operator><name pos:line="482" pos:column="35">easy_conn<pos:position pos:line="482" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="482" pos:column="46">&amp;<pos:position pos:line="482" pos:column="51"/></operator><name pos:line="482" pos:column="47">control<pos:position pos:line="482" pos:column="54"/></name></expr></argument>)<pos:position pos:line="482" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="482" pos:column="56"/></expr_stmt>

      <comment type="block" pos:line="484" pos:column="7">/* No need to remove this handle from the send pipeline here since that
         is done in Curl_done() */</comment>
      <if pos:line="486" pos:column="7">if<condition pos:line="486" pos:column="9">(<expr><operator pos:line="486" pos:column="10">!<pos:position pos:line="486" pos:column="11"/></operator><name pos:line="486" pos:column="11">result<pos:position pos:line="486" pos:column="17"/></name></expr>)<pos:position pos:line="486" pos:column="18"/></condition><then pos:line="486" pos:column="18"> <block pos:line="486" pos:column="19">{
        <if pos:line="487" pos:column="9">if<condition pos:line="487" pos:column="11">(<expr><name pos:line="487" pos:column="12">control<pos:position pos:line="487" pos:column="19"/></name></expr>)<pos:position pos:line="487" pos:column="20"/></condition><then pos:line="487" pos:column="20"> <block pos:line="487" pos:column="21">{
          <comment type="block" pos:line="488" pos:column="11">/* if positive, advance to DO_DONE
             if negative, go back to DOING */</comment>
          <expr_stmt><expr><call><name pos:line="490" pos:column="11">multistate<pos:position pos:line="490" pos:column="21"/></name><argument_list pos:line="490" pos:column="21">(<argument><expr><name pos:line="490" pos:column="22">data<pos:position pos:line="490" pos:column="26"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="490" pos:column="28">control<pos:position pos:line="490" pos:column="35"/></name><operator pos:line="490" pos:column="35">==<pos:position pos:line="490" pos:column="37"/></operator><literal type="number" pos:line="490" pos:column="37">1<pos:position pos:line="490" pos:column="38"/></literal></expr>?<pos:position pos:line="490" pos:column="39"/></condition><then pos:line="490" pos:column="39">
                     <expr><name pos:line="491" pos:column="22">CURLM_STATE_DO_DONE<pos:position pos:line="491" pos:column="41"/></name></expr></then><else pos:line="491" pos:column="41">:
                     <expr><name pos:line="492" pos:column="22">CURLM_STATE_DOING<pos:position pos:line="492" pos:column="39"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="492" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="492" pos:column="41"/></expr_stmt>
          <expr_stmt><expr><name pos:line="493" pos:column="11">rc<pos:position pos:line="493" pos:column="13"/></name> <operator pos:line="493" pos:column="14">=<pos:position pos:line="493" pos:column="15"/></operator> <name pos:line="493" pos:column="16">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="493" pos:column="40"/></name></expr>;<pos:position pos:line="493" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="494" pos:column="10"/></block></then>
        <else pos:line="495" pos:column="9">else
          <comment type="block" pos:line="496" pos:column="11">/* stay in DO_MORE */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="497" pos:column="11">rc<pos:position pos:line="497" pos:column="13"/></name> <operator pos:line="497" pos:column="14">=<pos:position pos:line="497" pos:column="15"/></operator> <name pos:line="497" pos:column="16">CURLM_OK<pos:position pos:line="497" pos:column="24"/></name></expr>;<pos:position pos:line="497" pos:column="25"/></expr_stmt></block></else></if>
      }<pos:position pos:line="498" pos:column="8"/></block></then>
      <else pos:line="499" pos:column="7">else <block pos:line="499" pos:column="12">{
        <comment type="block" pos:line="500" pos:column="9">/* failure detected */</comment>
        <expr_stmt><expr><call><name pos:line="501" pos:column="9">Curl_posttransfer<pos:position pos:line="501" pos:column="26"/></name><argument_list pos:line="501" pos:column="26">(<argument><expr><name pos:line="501" pos:column="27">data<pos:position pos:line="501" pos:column="31"/></name></expr></argument>)<pos:position pos:line="501" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="501" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="502" pos:column="9">Curl_done<pos:position pos:line="502" pos:column="18"/></name><argument_list pos:line="502" pos:column="18">(<argument><expr><operator pos:line="502" pos:column="19">&amp;<pos:position pos:line="502" pos:column="24"/></operator><name><name pos:line="502" pos:column="20">data<pos:position pos:line="502" pos:column="24"/></name><operator pos:line="502" pos:column="24">-&gt;<pos:position pos:line="502" pos:column="29"/></operator><name pos:line="502" pos:column="26">easy_conn<pos:position pos:line="502" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="502" pos:column="37">result<pos:position pos:line="502" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="502" pos:column="45">FALSE<pos:position pos:line="502" pos:column="50"/></name></expr></argument>)<pos:position pos:line="502" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="502" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="503" pos:column="9">disconnect_conn<pos:position pos:line="503" pos:column="24"/></name> <operator pos:line="503" pos:column="25">=<pos:position pos:line="503" pos:column="26"/></operator> <name pos:line="503" pos:column="27">TRUE<pos:position pos:line="503" pos:column="31"/></name></expr>;<pos:position pos:line="503" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="504" pos:column="8"/></block></else></if>
      <break pos:line="505" pos:column="7">break;<pos:position pos:line="505" pos:column="13"/></break>

    <case pos:line="507" pos:column="5">case <expr><name pos:line="507" pos:column="10">CURLM_STATE_DO_DONE<pos:position pos:line="507" pos:column="29"/></name></expr>:<pos:position pos:line="507" pos:column="30"/></case>
      <comment type="block" pos:line="508" pos:column="7">/* Move ourselves from the send to recv pipeline */</comment>
      <expr_stmt><expr><call><name pos:line="509" pos:column="7">Curl_move_handle_from_send_to_recv_pipe<pos:position pos:line="509" pos:column="46"/></name><argument_list pos:line="509" pos:column="46">(<argument><expr><name pos:line="509" pos:column="47">data<pos:position pos:line="509" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="509" pos:column="53">data<pos:position pos:line="509" pos:column="57"/></name><operator pos:line="509" pos:column="57">-&gt;<pos:position pos:line="509" pos:column="62"/></operator><name pos:line="509" pos:column="59">easy_conn<pos:position pos:line="509" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="509" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="509" pos:column="70"/></expr_stmt>
      <comment type="block" pos:line="510" pos:column="7">/* Check if we can move pending requests to send pipe */</comment>
      <expr_stmt><expr><call><name pos:line="511" pos:column="7">Curl_multi_process_pending_handles<pos:position pos:line="511" pos:column="41"/></name><argument_list pos:line="511" pos:column="41">(<argument><expr><name pos:line="511" pos:column="42">multi<pos:position pos:line="511" pos:column="47"/></name></expr></argument>)<pos:position pos:line="511" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="511" pos:column="49"/></expr_stmt>

      <comment type="block" pos:line="513" pos:column="7">/* Only perform the transfer if there's a good socket to work with.
         Having both BAD is a signal to skip immediately to DONE */</comment>
      <if pos:line="515" pos:column="7">if<condition pos:line="515" pos:column="9">(<expr><operator pos:line="515" pos:column="10">(<pos:position pos:line="515" pos:column="11"/></operator><name><name pos:line="515" pos:column="11">data<pos:position pos:line="515" pos:column="15"/></name><operator pos:line="515" pos:column="15">-&gt;<pos:position pos:line="515" pos:column="20"/></operator><name pos:line="515" pos:column="17">easy_conn<pos:position pos:line="515" pos:column="26"/></name><operator pos:line="515" pos:column="26">-&gt;<pos:position pos:line="515" pos:column="31"/></operator><name pos:line="515" pos:column="28">sockfd<pos:position pos:line="515" pos:column="34"/></name></name> <operator pos:line="515" pos:column="35">!=<pos:position pos:line="515" pos:column="37"/></operator> <name pos:line="515" pos:column="38">CURL_SOCKET_BAD<pos:position pos:line="515" pos:column="53"/></name><operator pos:line="515" pos:column="53">)<pos:position pos:line="515" pos:column="54"/></operator> <operator pos:line="515" pos:column="55">||<pos:position pos:line="515" pos:column="57"/></operator>
         <operator pos:line="516" pos:column="10">(<pos:position pos:line="516" pos:column="11"/></operator><name><name pos:line="516" pos:column="11">data<pos:position pos:line="516" pos:column="15"/></name><operator pos:line="516" pos:column="15">-&gt;<pos:position pos:line="516" pos:column="20"/></operator><name pos:line="516" pos:column="17">easy_conn<pos:position pos:line="516" pos:column="26"/></name><operator pos:line="516" pos:column="26">-&gt;<pos:position pos:line="516" pos:column="31"/></operator><name pos:line="516" pos:column="28">writesockfd<pos:position pos:line="516" pos:column="39"/></name></name> <operator pos:line="516" pos:column="40">!=<pos:position pos:line="516" pos:column="42"/></operator> <name pos:line="516" pos:column="43">CURL_SOCKET_BAD<pos:position pos:line="516" pos:column="58"/></name><operator pos:line="516" pos:column="58">)<pos:position pos:line="516" pos:column="59"/></operator></expr>)<pos:position pos:line="516" pos:column="60"/></condition><then pos:line="516" pos:column="60">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="517" pos:column="9">multistate<pos:position pos:line="517" pos:column="19"/></name><argument_list pos:line="517" pos:column="19">(<argument><expr><name pos:line="517" pos:column="20">data<pos:position pos:line="517" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="517" pos:column="26">CURLM_STATE_WAITPERFORM<pos:position pos:line="517" pos:column="49"/></name></expr></argument>)<pos:position pos:line="517" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="517" pos:column="51"/></expr_stmt></block></then>
      <else pos:line="518" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="519" pos:column="9">multistate<pos:position pos:line="519" pos:column="19"/></name><argument_list pos:line="519" pos:column="19">(<argument><expr><name pos:line="519" pos:column="20">data<pos:position pos:line="519" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="519" pos:column="26">CURLM_STATE_DONE<pos:position pos:line="519" pos:column="42"/></name></expr></argument>)<pos:position pos:line="519" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="519" pos:column="44"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="520" pos:column="7">rc<pos:position pos:line="520" pos:column="9"/></name> <operator pos:line="520" pos:column="10">=<pos:position pos:line="520" pos:column="11"/></operator> <name pos:line="520" pos:column="12">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="520" pos:column="36"/></name></expr>;<pos:position pos:line="520" pos:column="37"/></expr_stmt>
      <break pos:line="521" pos:column="7">break;<pos:position pos:line="521" pos:column="13"/></break>

    <case pos:line="523" pos:column="5">case <expr><name pos:line="523" pos:column="10">CURLM_STATE_WAITPERFORM<pos:position pos:line="523" pos:column="33"/></name></expr>:<pos:position pos:line="523" pos:column="34"/></case>
      <comment type="block" pos:line="524" pos:column="7">/* Wait for our turn to PERFORM */</comment>
      <if pos:line="525" pos:column="7">if<condition pos:line="525" pos:column="9">(<expr><operator pos:line="525" pos:column="10">!<pos:position pos:line="525" pos:column="11"/></operator><name><name pos:line="525" pos:column="11">data<pos:position pos:line="525" pos:column="15"/></name><operator pos:line="525" pos:column="15">-&gt;<pos:position pos:line="525" pos:column="20"/></operator><name pos:line="525" pos:column="17">easy_conn<pos:position pos:line="525" pos:column="26"/></name><operator pos:line="525" pos:column="26">-&gt;<pos:position pos:line="525" pos:column="31"/></operator><name pos:line="525" pos:column="28">readchannel_inuse<pos:position pos:line="525" pos:column="45"/></name></name> <operator pos:line="525" pos:column="46">&amp;&amp;<pos:position pos:line="525" pos:column="56"/></operator>
         <call><name pos:line="526" pos:column="10">isHandleAtHead<pos:position pos:line="526" pos:column="24"/></name><argument_list pos:line="526" pos:column="24">(<argument><expr><name pos:line="526" pos:column="25">data<pos:position pos:line="526" pos:column="29"/></name></expr></argument>,
                        <argument><expr><name><name pos:line="527" pos:column="25">data<pos:position pos:line="527" pos:column="29"/></name><operator pos:line="527" pos:column="29">-&gt;<pos:position pos:line="527" pos:column="34"/></operator><name pos:line="527" pos:column="31">easy_conn<pos:position pos:line="527" pos:column="40"/></name><operator pos:line="527" pos:column="40">-&gt;<pos:position pos:line="527" pos:column="45"/></operator><name pos:line="527" pos:column="42">recv_pipe<pos:position pos:line="527" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="527" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="527" pos:column="53"/></condition><then pos:line="527" pos:column="53"> <block pos:line="527" pos:column="54">{
        <comment type="block" pos:line="528" pos:column="9">/* Grab the channel */</comment>
        <expr_stmt><expr><name><name pos:line="529" pos:column="9">data<pos:position pos:line="529" pos:column="13"/></name><operator pos:line="529" pos:column="13">-&gt;<pos:position pos:line="529" pos:column="18"/></operator><name pos:line="529" pos:column="15">easy_conn<pos:position pos:line="529" pos:column="24"/></name><operator pos:line="529" pos:column="24">-&gt;<pos:position pos:line="529" pos:column="29"/></operator><name pos:line="529" pos:column="26">readchannel_inuse<pos:position pos:line="529" pos:column="43"/></name></name> <operator pos:line="529" pos:column="44">=<pos:position pos:line="529" pos:column="45"/></operator> <name pos:line="529" pos:column="46">TRUE<pos:position pos:line="529" pos:column="50"/></name></expr>;<pos:position pos:line="529" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="530" pos:column="9">multistate<pos:position pos:line="530" pos:column="19"/></name><argument_list pos:line="530" pos:column="19">(<argument><expr><name pos:line="530" pos:column="20">data<pos:position pos:line="530" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="530" pos:column="26">CURLM_STATE_PERFORM<pos:position pos:line="530" pos:column="45"/></name></expr></argument>)<pos:position pos:line="530" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="530" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="531" pos:column="9">rc<pos:position pos:line="531" pos:column="11"/></name> <operator pos:line="531" pos:column="12">=<pos:position pos:line="531" pos:column="13"/></operator> <name pos:line="531" pos:column="14">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="531" pos:column="38"/></name></expr>;<pos:position pos:line="531" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="532" pos:column="8"/></block></then>
<cpp:ifdef pos:line="533" pos:column="1">#<cpp:directive pos:line="533" pos:column="2">ifdef<pos:position pos:line="533" pos:column="7"/></cpp:directive> <name pos:line="533" pos:column="8">DEBUGBUILD<pos:position pos:line="533" pos:column="18"/></name></cpp:ifdef>
      <else pos:line="534" pos:column="7">else <block pos:line="534" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="535" pos:column="9">infof<pos:position pos:line="535" pos:column="14"/></name><argument_list pos:line="535" pos:column="14">(<argument><expr><name pos:line="535" pos:column="15">data<pos:position pos:line="535" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="535" pos:column="21">"WAITPERFORM: Conn %ld recv pipe %zu inuse %s athead %s\n"<pos:position pos:line="535" pos:column="79"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="536" pos:column="15">data<pos:position pos:line="536" pos:column="19"/></name><operator pos:line="536" pos:column="19">-&gt;<pos:position pos:line="536" pos:column="24"/></operator><name pos:line="536" pos:column="21">easy_conn<pos:position pos:line="536" pos:column="30"/></name><operator pos:line="536" pos:column="30">-&gt;<pos:position pos:line="536" pos:column="35"/></operator><name pos:line="536" pos:column="32">connection_id<pos:position pos:line="536" pos:column="45"/></name></name></expr></argument>,
              <argument><expr><name><name pos:line="537" pos:column="15">data<pos:position pos:line="537" pos:column="19"/></name><operator pos:line="537" pos:column="19">-&gt;<pos:position pos:line="537" pos:column="24"/></operator><name pos:line="537" pos:column="21">easy_conn<pos:position pos:line="537" pos:column="30"/></name><operator pos:line="537" pos:column="30">-&gt;<pos:position pos:line="537" pos:column="35"/></operator><name pos:line="537" pos:column="32">recv_pipe<pos:position pos:line="537" pos:column="41"/></name><operator pos:line="537" pos:column="41">-&gt;<pos:position pos:line="537" pos:column="46"/></operator><name pos:line="537" pos:column="43">size<pos:position pos:line="537" pos:column="47"/></name></name></expr></argument>,
              <argument><expr><ternary><condition><expr><name><name pos:line="538" pos:column="15">data<pos:position pos:line="538" pos:column="19"/></name><operator pos:line="538" pos:column="19">-&gt;<pos:position pos:line="538" pos:column="24"/></operator><name pos:line="538" pos:column="21">easy_conn<pos:position pos:line="538" pos:column="30"/></name><operator pos:line="538" pos:column="30">-&gt;<pos:position pos:line="538" pos:column="35"/></operator><name pos:line="538" pos:column="32">readchannel_inuse<pos:position pos:line="538" pos:column="49"/></name></name></expr>?<pos:position pos:line="538" pos:column="50"/></condition><then><expr><literal type="string" pos:line="538" pos:column="50">"TRUE"<pos:position pos:line="538" pos:column="56"/></literal></expr></then><else pos:line="538" pos:column="56">:<expr><literal type="string" pos:line="538" pos:column="57">"FALSE"<pos:position pos:line="538" pos:column="64"/></literal></expr></else></ternary></expr></argument>,
              <argument><expr><ternary><condition><expr><call><name pos:line="539" pos:column="15">isHandleAtHead<pos:position pos:line="539" pos:column="29"/></name><argument_list pos:line="539" pos:column="29">(<argument><expr><name pos:line="539" pos:column="30">data<pos:position pos:line="539" pos:column="34"/></name></expr></argument>,
                             <argument><expr><name><name pos:line="540" pos:column="30">data<pos:position pos:line="540" pos:column="34"/></name><operator pos:line="540" pos:column="34">-&gt;<pos:position pos:line="540" pos:column="39"/></operator><name pos:line="540" pos:column="36">easy_conn<pos:position pos:line="540" pos:column="45"/></name><operator pos:line="540" pos:column="45">-&gt;<pos:position pos:line="540" pos:column="50"/></operator><name pos:line="540" pos:column="47">recv_pipe<pos:position pos:line="540" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="540" pos:column="57"/></argument_list></call></expr>?<pos:position pos:line="540" pos:column="58"/></condition><then><expr><literal type="string" pos:line="540" pos:column="58">"TRUE"<pos:position pos:line="540" pos:column="64"/></literal></expr></then><else pos:line="540" pos:column="64">:<expr><literal type="string" pos:line="540" pos:column="65">"FALSE"<pos:position pos:line="540" pos:column="72"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="540" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="540" pos:column="74"/></expr_stmt>
      }<pos:position pos:line="541" pos:column="8"/></block></else></if>
<cpp:endif pos:line="542" pos:column="1">#<cpp:directive pos:line="542" pos:column="2">endif<pos:position pos:line="542" pos:column="7"/></cpp:directive></cpp:endif>
      <break pos:line="543" pos:column="7">break;<pos:position pos:line="543" pos:column="13"/></break>

    <case pos:line="545" pos:column="5">case <expr><name pos:line="545" pos:column="10">CURLM_STATE_TOOFAST<pos:position pos:line="545" pos:column="29"/></name></expr>:<pos:position pos:line="545" pos:column="30"/></case> <comment type="block" pos:line="545" pos:column="31">/* limit-rate exceeded in either direction */</comment>
      <comment type="block" pos:line="546" pos:column="7">/* if both rates are within spec, resume transfer */</comment>
      <if pos:line="547" pos:column="7">if<condition pos:line="547" pos:column="9">(<expr><call><name pos:line="547" pos:column="10">Curl_pgrsUpdate<pos:position pos:line="547" pos:column="25"/></name><argument_list pos:line="547" pos:column="25">(<argument><expr><name><name pos:line="547" pos:column="26">data<pos:position pos:line="547" pos:column="30"/></name><operator pos:line="547" pos:column="30">-&gt;<pos:position pos:line="547" pos:column="35"/></operator><name pos:line="547" pos:column="32">easy_conn<pos:position pos:line="547" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="547" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="547" pos:column="43"/></condition><then pos:line="547" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><name pos:line="548" pos:column="9">result<pos:position pos:line="548" pos:column="15"/></name> <operator pos:line="548" pos:column="16">=<pos:position pos:line="548" pos:column="17"/></operator> <name pos:line="548" pos:column="18">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="548" pos:column="43"/></name></expr>;<pos:position pos:line="548" pos:column="44"/></expr_stmt></block></then>
      <else pos:line="549" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="550" pos:column="9">result<pos:position pos:line="550" pos:column="15"/></name> <operator pos:line="550" pos:column="16">=<pos:position pos:line="550" pos:column="17"/></operator> <call><name pos:line="550" pos:column="18">Curl_speedcheck<pos:position pos:line="550" pos:column="33"/></name><argument_list pos:line="550" pos:column="33">(<argument><expr><name pos:line="550" pos:column="34">data<pos:position pos:line="550" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="550" pos:column="40">now<pos:position pos:line="550" pos:column="43"/></name></expr></argument>)<pos:position pos:line="550" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="550" pos:column="45"/></expr_stmt></block></else></if>

      <if pos:line="552" pos:column="7">if<condition pos:line="552" pos:column="9">(<expr><operator pos:line="552" pos:column="10">(<pos:position pos:line="552" pos:column="11"/></operator> <operator pos:line="552" pos:column="12">(<pos:position pos:line="552" pos:column="13"/></operator><name><name pos:line="552" pos:column="13">data<pos:position pos:line="552" pos:column="17"/></name><operator pos:line="552" pos:column="17">-&gt;<pos:position pos:line="552" pos:column="22"/></operator><name pos:line="552" pos:column="19">set<pos:position pos:line="552" pos:column="22"/></name><operator pos:line="552" pos:column="22">.<pos:position pos:line="552" pos:column="23"/></operator><name pos:line="552" pos:column="23">max_send_speed<pos:position pos:line="552" pos:column="37"/></name></name> <operator pos:line="552" pos:column="38">==<pos:position pos:line="552" pos:column="40"/></operator> <literal type="number" pos:line="552" pos:column="41">0<pos:position pos:line="552" pos:column="42"/></literal><operator pos:line="552" pos:column="42">)<pos:position pos:line="552" pos:column="43"/></operator> <operator pos:line="552" pos:column="44">||<pos:position pos:line="552" pos:column="46"/></operator>
           <operator pos:line="553" pos:column="12">(<pos:position pos:line="553" pos:column="13"/></operator><name><name pos:line="553" pos:column="13">data<pos:position pos:line="553" pos:column="17"/></name><operator pos:line="553" pos:column="17">-&gt;<pos:position pos:line="553" pos:column="22"/></operator><name pos:line="553" pos:column="19">progress<pos:position pos:line="553" pos:column="27"/></name><operator pos:line="553" pos:column="27">.<pos:position pos:line="553" pos:column="28"/></operator><name pos:line="553" pos:column="28">ulspeed<pos:position pos:line="553" pos:column="35"/></name></name> <operator pos:line="553" pos:column="36">&lt;<pos:position pos:line="553" pos:column="40"/></operator> <name><name pos:line="553" pos:column="38">data<pos:position pos:line="553" pos:column="42"/></name><operator pos:line="553" pos:column="42">-&gt;<pos:position pos:line="553" pos:column="47"/></operator><name pos:line="553" pos:column="44">set<pos:position pos:line="553" pos:column="47"/></name><operator pos:line="553" pos:column="47">.<pos:position pos:line="553" pos:column="48"/></operator><name pos:line="553" pos:column="48">max_send_speed<pos:position pos:line="553" pos:column="62"/></name></name> <operator pos:line="553" pos:column="63">)<pos:position pos:line="553" pos:column="64"/></operator><operator pos:line="553" pos:column="64">)<pos:position pos:line="553" pos:column="65"/></operator>  <operator pos:line="553" pos:column="67">&amp;&amp;<pos:position pos:line="553" pos:column="77"/></operator>
         <operator pos:line="554" pos:column="10">(<pos:position pos:line="554" pos:column="11"/></operator> <operator pos:line="554" pos:column="12">(<pos:position pos:line="554" pos:column="13"/></operator><name><name pos:line="554" pos:column="13">data<pos:position pos:line="554" pos:column="17"/></name><operator pos:line="554" pos:column="17">-&gt;<pos:position pos:line="554" pos:column="22"/></operator><name pos:line="554" pos:column="19">set<pos:position pos:line="554" pos:column="22"/></name><operator pos:line="554" pos:column="22">.<pos:position pos:line="554" pos:column="23"/></operator><name pos:line="554" pos:column="23">max_recv_speed<pos:position pos:line="554" pos:column="37"/></name></name> <operator pos:line="554" pos:column="38">==<pos:position pos:line="554" pos:column="40"/></operator> <literal type="number" pos:line="554" pos:column="41">0<pos:position pos:line="554" pos:column="42"/></literal><operator pos:line="554" pos:column="42">)<pos:position pos:line="554" pos:column="43"/></operator> <operator pos:line="554" pos:column="44">||<pos:position pos:line="554" pos:column="46"/></operator>
           <operator pos:line="555" pos:column="12">(<pos:position pos:line="555" pos:column="13"/></operator><name><name pos:line="555" pos:column="13">data<pos:position pos:line="555" pos:column="17"/></name><operator pos:line="555" pos:column="17">-&gt;<pos:position pos:line="555" pos:column="22"/></operator><name pos:line="555" pos:column="19">progress<pos:position pos:line="555" pos:column="27"/></name><operator pos:line="555" pos:column="27">.<pos:position pos:line="555" pos:column="28"/></operator><name pos:line="555" pos:column="28">dlspeed<pos:position pos:line="555" pos:column="35"/></name></name> <operator pos:line="555" pos:column="36">&lt;<pos:position pos:line="555" pos:column="40"/></operator> <name><name pos:line="555" pos:column="38">data<pos:position pos:line="555" pos:column="42"/></name><operator pos:line="555" pos:column="42">-&gt;<pos:position pos:line="555" pos:column="47"/></operator><name pos:line="555" pos:column="44">set<pos:position pos:line="555" pos:column="47"/></name><operator pos:line="555" pos:column="47">.<pos:position pos:line="555" pos:column="48"/></operator><name pos:line="555" pos:column="48">max_recv_speed<pos:position pos:line="555" pos:column="62"/></name></name><operator pos:line="555" pos:column="62">)<pos:position pos:line="555" pos:column="63"/></operator><operator pos:line="555" pos:column="63">)<pos:position pos:line="555" pos:column="64"/></operator></expr>)<pos:position pos:line="555" pos:column="65"/></condition><then pos:line="555" pos:column="65">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="556" pos:column="9">multistate<pos:position pos:line="556" pos:column="19"/></name><argument_list pos:line="556" pos:column="19">(<argument><expr><name pos:line="556" pos:column="20">data<pos:position pos:line="556" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="556" pos:column="26">CURLM_STATE_PERFORM<pos:position pos:line="556" pos:column="45"/></name></expr></argument>)<pos:position pos:line="556" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="556" pos:column="47"/></expr_stmt></block></then></if>
      <break pos:line="557" pos:column="7">break;<pos:position pos:line="557" pos:column="13"/></break>

    <case pos:line="559" pos:column="5">case <expr><name pos:line="559" pos:column="10">CURLM_STATE_PERFORM<pos:position pos:line="559" pos:column="29"/></name></expr>:<pos:position pos:line="559" pos:column="30"/></case>
    <block pos:line="560" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="561" pos:column="7">char<pos:position pos:line="561" pos:column="11"/></name> <modifier pos:line="561" pos:column="12">*<pos:position pos:line="561" pos:column="13"/></modifier></type><name pos:line="561" pos:column="13">newurl<pos:position pos:line="561" pos:column="19"/></name> <init pos:line="561" pos:column="20">= <expr><name pos:line="561" pos:column="22">NULL<pos:position pos:line="561" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="561" pos:column="27"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="562" pos:column="7">bool<pos:position pos:line="562" pos:column="11"/></name></type> <name pos:line="562" pos:column="12">retry<pos:position pos:line="562" pos:column="17"/></name> <init pos:line="562" pos:column="18">= <expr><name pos:line="562" pos:column="20">FALSE<pos:position pos:line="562" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="562" pos:column="26"/></decl_stmt>

      <comment type="block" pos:line="564" pos:column="7">/* check if over send speed */</comment>
      <if pos:line="565" pos:column="7">if<condition pos:line="565" pos:column="9">(<expr><operator pos:line="565" pos:column="10">(<pos:position pos:line="565" pos:column="11"/></operator><name><name pos:line="565" pos:column="11">data<pos:position pos:line="565" pos:column="15"/></name><operator pos:line="565" pos:column="15">-&gt;<pos:position pos:line="565" pos:column="20"/></operator><name pos:line="565" pos:column="17">set<pos:position pos:line="565" pos:column="20"/></name><operator pos:line="565" pos:column="20">.<pos:position pos:line="565" pos:column="21"/></operator><name pos:line="565" pos:column="21">max_send_speed<pos:position pos:line="565" pos:column="35"/></name></name> <operator pos:line="565" pos:column="36">&gt;<pos:position pos:line="565" pos:column="40"/></operator> <literal type="number" pos:line="565" pos:column="38">0<pos:position pos:line="565" pos:column="39"/></literal><operator pos:line="565" pos:column="39">)<pos:position pos:line="565" pos:column="40"/></operator> <operator pos:line="565" pos:column="41">&amp;&amp;<pos:position pos:line="565" pos:column="51"/></operator>
         <operator pos:line="566" pos:column="10">(<pos:position pos:line="566" pos:column="11"/></operator><name><name pos:line="566" pos:column="11">data<pos:position pos:line="566" pos:column="15"/></name><operator pos:line="566" pos:column="15">-&gt;<pos:position pos:line="566" pos:column="20"/></operator><name pos:line="566" pos:column="17">progress<pos:position pos:line="566" pos:column="25"/></name><operator pos:line="566" pos:column="25">.<pos:position pos:line="566" pos:column="26"/></operator><name pos:line="566" pos:column="26">ulspeed<pos:position pos:line="566" pos:column="33"/></name></name> <operator pos:line="566" pos:column="34">&gt;<pos:position pos:line="566" pos:column="38"/></operator> <name><name pos:line="566" pos:column="36">data<pos:position pos:line="566" pos:column="40"/></name><operator pos:line="566" pos:column="40">-&gt;<pos:position pos:line="566" pos:column="45"/></operator><name pos:line="566" pos:column="42">set<pos:position pos:line="566" pos:column="45"/></name><operator pos:line="566" pos:column="45">.<pos:position pos:line="566" pos:column="46"/></operator><name pos:line="566" pos:column="46">max_send_speed<pos:position pos:line="566" pos:column="60"/></name></name><operator pos:line="566" pos:column="60">)<pos:position pos:line="566" pos:column="61"/></operator></expr>)<pos:position pos:line="566" pos:column="62"/></condition><then pos:line="566" pos:column="62"> <block pos:line="566" pos:column="63">{
        <decl_stmt><decl><type><name pos:line="567" pos:column="9">int<pos:position pos:line="567" pos:column="12"/></name></type> <name pos:line="567" pos:column="13">buffersize<pos:position pos:line="567" pos:column="23"/></name></decl>;<pos:position pos:line="567" pos:column="24"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="569" pos:column="9">multistate<pos:position pos:line="569" pos:column="19"/></name><argument_list pos:line="569" pos:column="19">(<argument><expr><name pos:line="569" pos:column="20">data<pos:position pos:line="569" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="569" pos:column="26">CURLM_STATE_TOOFAST<pos:position pos:line="569" pos:column="45"/></name></expr></argument>)<pos:position pos:line="569" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="569" pos:column="47"/></expr_stmt>

        <comment type="block" pos:line="571" pos:column="9">/* calculate upload rate-limitation timeout. */</comment>
        <expr_stmt><expr><name pos:line="572" pos:column="9">buffersize<pos:position pos:line="572" pos:column="19"/></name> <operator pos:line="572" pos:column="20">=<pos:position pos:line="572" pos:column="21"/></operator> <call pos:line="572" pos:column="22">(<name pos:line="572" pos:column="23">int<pos:position pos:line="572" pos:column="26"/></name>)<argument_list pos:line="572" pos:column="27">(<argument><expr><ternary><condition><expr><name><name pos:line="572" pos:column="28">data<pos:position pos:line="572" pos:column="32"/></name><operator pos:line="572" pos:column="32">-&gt;<pos:position pos:line="572" pos:column="37"/></operator><name pos:line="572" pos:column="34">set<pos:position pos:line="572" pos:column="37"/></name><operator pos:line="572" pos:column="37">.<pos:position pos:line="572" pos:column="38"/></operator><name pos:line="572" pos:column="38">buffer_size<pos:position pos:line="572" pos:column="49"/></name></name></expr> ?<pos:position pos:line="572" pos:column="51"/></condition><then pos:line="572" pos:column="51">
                           <expr><name><name pos:line="573" pos:column="28">data<pos:position pos:line="573" pos:column="32"/></name><operator pos:line="573" pos:column="32">-&gt;<pos:position pos:line="573" pos:column="37"/></operator><name pos:line="573" pos:column="34">set<pos:position pos:line="573" pos:column="37"/></name><operator pos:line="573" pos:column="37">.<pos:position pos:line="573" pos:column="38"/></operator><name pos:line="573" pos:column="38">buffer_size<pos:position pos:line="573" pos:column="49"/></name></name></expr> <pos:position pos:line="573" pos:column="50"/></then><else pos:line="573" pos:column="50">: <expr><name pos:line="573" pos:column="52">BUFSIZE<pos:position pos:line="573" pos:column="59"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="573" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="573" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="574" pos:column="9">timeout_ms<pos:position pos:line="574" pos:column="19"/></name> <operator pos:line="574" pos:column="20">=<pos:position pos:line="574" pos:column="21"/></operator> <call><name pos:line="574" pos:column="22">Curl_sleep_time<pos:position pos:line="574" pos:column="37"/></name><argument_list pos:line="574" pos:column="37">(<argument><expr><name><name pos:line="574" pos:column="38">data<pos:position pos:line="574" pos:column="42"/></name><operator pos:line="574" pos:column="42">-&gt;<pos:position pos:line="574" pos:column="47"/></operator><name pos:line="574" pos:column="44">set<pos:position pos:line="574" pos:column="47"/></name><operator pos:line="574" pos:column="47">.<pos:position pos:line="574" pos:column="48"/></operator><name pos:line="574" pos:column="48">max_send_speed<pos:position pos:line="574" pos:column="62"/></name></name></expr></argument>,
                                     <argument><expr><name><name pos:line="575" pos:column="38">data<pos:position pos:line="575" pos:column="42"/></name><operator pos:line="575" pos:column="42">-&gt;<pos:position pos:line="575" pos:column="47"/></operator><name pos:line="575" pos:column="44">progress<pos:position pos:line="575" pos:column="52"/></name><operator pos:line="575" pos:column="52">.<pos:position pos:line="575" pos:column="53"/></operator><name pos:line="575" pos:column="53">ulspeed<pos:position pos:line="575" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="575" pos:column="62">buffersize<pos:position pos:line="575" pos:column="72"/></name></expr></argument>)<pos:position pos:line="575" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="575" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="576" pos:column="9">Curl_expire_latest<pos:position pos:line="576" pos:column="27"/></name><argument_list pos:line="576" pos:column="27">(<argument><expr><name pos:line="576" pos:column="28">data<pos:position pos:line="576" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="576" pos:column="34">timeout_ms<pos:position pos:line="576" pos:column="44"/></name></expr></argument>)<pos:position pos:line="576" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="576" pos:column="46"/></expr_stmt>
        <break pos:line="577" pos:column="9">break;<pos:position pos:line="577" pos:column="15"/></break>
      }<pos:position pos:line="578" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="580" pos:column="7">/* check if over recv speed */</comment>
      <if pos:line="581" pos:column="7">if<condition pos:line="581" pos:column="9">(<expr><operator pos:line="581" pos:column="10">(<pos:position pos:line="581" pos:column="11"/></operator><name><name pos:line="581" pos:column="11">data<pos:position pos:line="581" pos:column="15"/></name><operator pos:line="581" pos:column="15">-&gt;<pos:position pos:line="581" pos:column="20"/></operator><name pos:line="581" pos:column="17">set<pos:position pos:line="581" pos:column="20"/></name><operator pos:line="581" pos:column="20">.<pos:position pos:line="581" pos:column="21"/></operator><name pos:line="581" pos:column="21">max_recv_speed<pos:position pos:line="581" pos:column="35"/></name></name> <operator pos:line="581" pos:column="36">&gt;<pos:position pos:line="581" pos:column="40"/></operator> <literal type="number" pos:line="581" pos:column="38">0<pos:position pos:line="581" pos:column="39"/></literal><operator pos:line="581" pos:column="39">)<pos:position pos:line="581" pos:column="40"/></operator> <operator pos:line="581" pos:column="41">&amp;&amp;<pos:position pos:line="581" pos:column="51"/></operator>
         <operator pos:line="582" pos:column="10">(<pos:position pos:line="582" pos:column="11"/></operator><name><name pos:line="582" pos:column="11">data<pos:position pos:line="582" pos:column="15"/></name><operator pos:line="582" pos:column="15">-&gt;<pos:position pos:line="582" pos:column="20"/></operator><name pos:line="582" pos:column="17">progress<pos:position pos:line="582" pos:column="25"/></name><operator pos:line="582" pos:column="25">.<pos:position pos:line="582" pos:column="26"/></operator><name pos:line="582" pos:column="26">dlspeed<pos:position pos:line="582" pos:column="33"/></name></name> <operator pos:line="582" pos:column="34">&gt;<pos:position pos:line="582" pos:column="38"/></operator> <name><name pos:line="582" pos:column="36">data<pos:position pos:line="582" pos:column="40"/></name><operator pos:line="582" pos:column="40">-&gt;<pos:position pos:line="582" pos:column="45"/></operator><name pos:line="582" pos:column="42">set<pos:position pos:line="582" pos:column="45"/></name><operator pos:line="582" pos:column="45">.<pos:position pos:line="582" pos:column="46"/></operator><name pos:line="582" pos:column="46">max_recv_speed<pos:position pos:line="582" pos:column="60"/></name></name><operator pos:line="582" pos:column="60">)<pos:position pos:line="582" pos:column="61"/></operator></expr>)<pos:position pos:line="582" pos:column="62"/></condition><then pos:line="582" pos:column="62"> <block pos:line="582" pos:column="63">{
        <decl_stmt><decl><type><name pos:line="583" pos:column="9">int<pos:position pos:line="583" pos:column="12"/></name></type> <name pos:line="583" pos:column="13">buffersize<pos:position pos:line="583" pos:column="23"/></name></decl>;<pos:position pos:line="583" pos:column="24"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="585" pos:column="9">multistate<pos:position pos:line="585" pos:column="19"/></name><argument_list pos:line="585" pos:column="19">(<argument><expr><name pos:line="585" pos:column="20">data<pos:position pos:line="585" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="585" pos:column="26">CURLM_STATE_TOOFAST<pos:position pos:line="585" pos:column="45"/></name></expr></argument>)<pos:position pos:line="585" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="585" pos:column="47"/></expr_stmt>

        <comment type="block" pos:line="587" pos:column="9">/* Calculate download rate-limitation timeout. */</comment>
        <expr_stmt><expr><name pos:line="588" pos:column="9">buffersize<pos:position pos:line="588" pos:column="19"/></name> <operator pos:line="588" pos:column="20">=<pos:position pos:line="588" pos:column="21"/></operator> <call pos:line="588" pos:column="22">(<name pos:line="588" pos:column="23">int<pos:position pos:line="588" pos:column="26"/></name>)<argument_list pos:line="588" pos:column="27">(<argument><expr><ternary><condition><expr><name><name pos:line="588" pos:column="28">data<pos:position pos:line="588" pos:column="32"/></name><operator pos:line="588" pos:column="32">-&gt;<pos:position pos:line="588" pos:column="37"/></operator><name pos:line="588" pos:column="34">set<pos:position pos:line="588" pos:column="37"/></name><operator pos:line="588" pos:column="37">.<pos:position pos:line="588" pos:column="38"/></operator><name pos:line="588" pos:column="38">buffer_size<pos:position pos:line="588" pos:column="49"/></name></name></expr> ?<pos:position pos:line="588" pos:column="51"/></condition><then pos:line="588" pos:column="51">
                           <expr><name><name pos:line="589" pos:column="28">data<pos:position pos:line="589" pos:column="32"/></name><operator pos:line="589" pos:column="32">-&gt;<pos:position pos:line="589" pos:column="37"/></operator><name pos:line="589" pos:column="34">set<pos:position pos:line="589" pos:column="37"/></name><operator pos:line="589" pos:column="37">.<pos:position pos:line="589" pos:column="38"/></operator><name pos:line="589" pos:column="38">buffer_size<pos:position pos:line="589" pos:column="49"/></name></name></expr> <pos:position pos:line="589" pos:column="50"/></then><else pos:line="589" pos:column="50">: <expr><name pos:line="589" pos:column="52">BUFSIZE<pos:position pos:line="589" pos:column="59"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="589" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="589" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="590" pos:column="9">timeout_ms<pos:position pos:line="590" pos:column="19"/></name> <operator pos:line="590" pos:column="20">=<pos:position pos:line="590" pos:column="21"/></operator> <call><name pos:line="590" pos:column="22">Curl_sleep_time<pos:position pos:line="590" pos:column="37"/></name><argument_list pos:line="590" pos:column="37">(<argument><expr><name><name pos:line="590" pos:column="38">data<pos:position pos:line="590" pos:column="42"/></name><operator pos:line="590" pos:column="42">-&gt;<pos:position pos:line="590" pos:column="47"/></operator><name pos:line="590" pos:column="44">set<pos:position pos:line="590" pos:column="47"/></name><operator pos:line="590" pos:column="47">.<pos:position pos:line="590" pos:column="48"/></operator><name pos:line="590" pos:column="48">max_recv_speed<pos:position pos:line="590" pos:column="62"/></name></name></expr></argument>,
                                     <argument><expr><name><name pos:line="591" pos:column="38">data<pos:position pos:line="591" pos:column="42"/></name><operator pos:line="591" pos:column="42">-&gt;<pos:position pos:line="591" pos:column="47"/></operator><name pos:line="591" pos:column="44">progress<pos:position pos:line="591" pos:column="52"/></name><operator pos:line="591" pos:column="52">.<pos:position pos:line="591" pos:column="53"/></operator><name pos:line="591" pos:column="53">dlspeed<pos:position pos:line="591" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="591" pos:column="62">buffersize<pos:position pos:line="591" pos:column="72"/></name></expr></argument>)<pos:position pos:line="591" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="591" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="592" pos:column="9">Curl_expire_latest<pos:position pos:line="592" pos:column="27"/></name><argument_list pos:line="592" pos:column="27">(<argument><expr><name pos:line="592" pos:column="28">data<pos:position pos:line="592" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="592" pos:column="34">timeout_ms<pos:position pos:line="592" pos:column="44"/></name></expr></argument>)<pos:position pos:line="592" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="592" pos:column="46"/></expr_stmt>
        <break pos:line="593" pos:column="9">break;<pos:position pos:line="593" pos:column="15"/></break>
      }<pos:position pos:line="594" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="596" pos:column="7">/* read/write data if it is ready to do so */</comment>
      <expr_stmt><expr><name pos:line="597" pos:column="7">result<pos:position pos:line="597" pos:column="13"/></name> <operator pos:line="597" pos:column="14">=<pos:position pos:line="597" pos:column="15"/></operator> <call><name pos:line="597" pos:column="16">Curl_readwrite<pos:position pos:line="597" pos:column="30"/></name><argument_list pos:line="597" pos:column="30">(<argument><expr><name><name pos:line="597" pos:column="31">data<pos:position pos:line="597" pos:column="35"/></name><operator pos:line="597" pos:column="35">-&gt;<pos:position pos:line="597" pos:column="40"/></operator><name pos:line="597" pos:column="37">easy_conn<pos:position pos:line="597" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="597" pos:column="48">&amp;<pos:position pos:line="597" pos:column="53"/></operator><name pos:line="597" pos:column="49">done<pos:position pos:line="597" pos:column="53"/></name></expr></argument>)<pos:position pos:line="597" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="597" pos:column="55"/></expr_stmt>

      <expr_stmt><expr><name pos:line="599" pos:column="7">k<pos:position pos:line="599" pos:column="8"/></name> <operator pos:line="599" pos:column="9">=<pos:position pos:line="599" pos:column="10"/></operator> <operator pos:line="599" pos:column="11">&amp;<pos:position pos:line="599" pos:column="16"/></operator><name><name pos:line="599" pos:column="12">data<pos:position pos:line="599" pos:column="16"/></name><operator pos:line="599" pos:column="16">-&gt;<pos:position pos:line="599" pos:column="21"/></operator><name pos:line="599" pos:column="18">req<pos:position pos:line="599" pos:column="21"/></name></name></expr>;<pos:position pos:line="599" pos:column="22"/></expr_stmt>

      <if pos:line="601" pos:column="7">if<condition pos:line="601" pos:column="9">(<expr><operator pos:line="601" pos:column="10">!<pos:position pos:line="601" pos:column="11"/></operator><operator pos:line="601" pos:column="11">(<pos:position pos:line="601" pos:column="12"/></operator><name><name pos:line="601" pos:column="12">k<pos:position pos:line="601" pos:column="13"/></name><operator pos:line="601" pos:column="13">-&gt;<pos:position pos:line="601" pos:column="18"/></operator><name pos:line="601" pos:column="15">keepon<pos:position pos:line="601" pos:column="21"/></name></name> <operator pos:line="601" pos:column="22">&amp;<pos:position pos:line="601" pos:column="27"/></operator> <name pos:line="601" pos:column="24">KEEP_RECV<pos:position pos:line="601" pos:column="33"/></name><operator pos:line="601" pos:column="33">)<pos:position pos:line="601" pos:column="34"/></operator></expr>)<pos:position pos:line="601" pos:column="35"/></condition><then pos:line="601" pos:column="35"> <block pos:line="601" pos:column="36">{
        <comment type="block" pos:line="602" pos:column="9">/* We're done receiving */</comment>
        <expr_stmt><expr><name><name pos:line="603" pos:column="9">data<pos:position pos:line="603" pos:column="13"/></name><operator pos:line="603" pos:column="13">-&gt;<pos:position pos:line="603" pos:column="18"/></operator><name pos:line="603" pos:column="15">easy_conn<pos:position pos:line="603" pos:column="24"/></name><operator pos:line="603" pos:column="24">-&gt;<pos:position pos:line="603" pos:column="29"/></operator><name pos:line="603" pos:column="26">readchannel_inuse<pos:position pos:line="603" pos:column="43"/></name></name> <operator pos:line="603" pos:column="44">=<pos:position pos:line="603" pos:column="45"/></operator> <name pos:line="603" pos:column="46">FALSE<pos:position pos:line="603" pos:column="51"/></name></expr>;<pos:position pos:line="603" pos:column="52"/></expr_stmt>
      }<pos:position pos:line="604" pos:column="8"/></block></then></if>

      <if pos:line="606" pos:column="7">if<condition pos:line="606" pos:column="9">(<expr><operator pos:line="606" pos:column="10">!<pos:position pos:line="606" pos:column="11"/></operator><operator pos:line="606" pos:column="11">(<pos:position pos:line="606" pos:column="12"/></operator><name><name pos:line="606" pos:column="12">k<pos:position pos:line="606" pos:column="13"/></name><operator pos:line="606" pos:column="13">-&gt;<pos:position pos:line="606" pos:column="18"/></operator><name pos:line="606" pos:column="15">keepon<pos:position pos:line="606" pos:column="21"/></name></name> <operator pos:line="606" pos:column="22">&amp;<pos:position pos:line="606" pos:column="27"/></operator> <name pos:line="606" pos:column="24">KEEP_SEND<pos:position pos:line="606" pos:column="33"/></name><operator pos:line="606" pos:column="33">)<pos:position pos:line="606" pos:column="34"/></operator></expr>)<pos:position pos:line="606" pos:column="35"/></condition><then pos:line="606" pos:column="35"> <block pos:line="606" pos:column="36">{
        <comment type="block" pos:line="607" pos:column="9">/* We're done sending */</comment>
        <expr_stmt><expr><name><name pos:line="608" pos:column="9">data<pos:position pos:line="608" pos:column="13"/></name><operator pos:line="608" pos:column="13">-&gt;<pos:position pos:line="608" pos:column="18"/></operator><name pos:line="608" pos:column="15">easy_conn<pos:position pos:line="608" pos:column="24"/></name><operator pos:line="608" pos:column="24">-&gt;<pos:position pos:line="608" pos:column="29"/></operator><name pos:line="608" pos:column="26">writechannel_inuse<pos:position pos:line="608" pos:column="44"/></name></name> <operator pos:line="608" pos:column="45">=<pos:position pos:line="608" pos:column="46"/></operator> <name pos:line="608" pos:column="47">FALSE<pos:position pos:line="608" pos:column="52"/></name></expr>;<pos:position pos:line="608" pos:column="53"/></expr_stmt>
      }<pos:position pos:line="609" pos:column="8"/></block></then></if>

      <if pos:line="611" pos:column="7">if<condition pos:line="611" pos:column="9">(<expr><name pos:line="611" pos:column="10">done<pos:position pos:line="611" pos:column="14"/></name> <operator pos:line="611" pos:column="15">||<pos:position pos:line="611" pos:column="17"/></operator> <operator pos:line="611" pos:column="18">(<pos:position pos:line="611" pos:column="19"/></operator><name pos:line="611" pos:column="19">result<pos:position pos:line="611" pos:column="25"/></name> <operator pos:line="611" pos:column="26">==<pos:position pos:line="611" pos:column="28"/></operator> <name pos:line="611" pos:column="29">CURLE_RECV_ERROR<pos:position pos:line="611" pos:column="45"/></name><operator pos:line="611" pos:column="45">)<pos:position pos:line="611" pos:column="46"/></operator></expr>)<pos:position pos:line="611" pos:column="47"/></condition><then pos:line="611" pos:column="47"> <block pos:line="611" pos:column="48">{
        <comment type="block" pos:line="612" pos:column="9">/* If CURLE_RECV_ERROR happens early enough, we assume it was a race
         * condition and the server closed the re-used connection exactly when
         * we wanted to use it, so figure out if that is indeed the case.
         */</comment>
        <decl_stmt><decl><type><name pos:line="616" pos:column="9">CURLcode<pos:position pos:line="616" pos:column="17"/></name></type> <name pos:line="616" pos:column="18">ret<pos:position pos:line="616" pos:column="21"/></name> <init pos:line="616" pos:column="22">= <expr><call><name pos:line="616" pos:column="24">Curl_retry_request<pos:position pos:line="616" pos:column="42"/></name><argument_list pos:line="616" pos:column="42">(<argument><expr><name><name pos:line="616" pos:column="43">data<pos:position pos:line="616" pos:column="47"/></name><operator pos:line="616" pos:column="47">-&gt;<pos:position pos:line="616" pos:column="52"/></operator><name pos:line="616" pos:column="49">easy_conn<pos:position pos:line="616" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="616" pos:column="60">&amp;<pos:position pos:line="616" pos:column="65"/></operator><name pos:line="616" pos:column="61">newurl<pos:position pos:line="616" pos:column="67"/></name></expr></argument>)<pos:position pos:line="616" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="616" pos:column="69"/></decl_stmt>
        <if pos:line="617" pos:column="9">if<condition pos:line="617" pos:column="11">(<expr><operator pos:line="617" pos:column="12">!<pos:position pos:line="617" pos:column="13"/></operator><name pos:line="617" pos:column="13">ret<pos:position pos:line="617" pos:column="16"/></name></expr>)<pos:position pos:line="617" pos:column="17"/></condition><then pos:line="617" pos:column="17">
          <block type="pseudo"><expr_stmt><expr><name pos:line="618" pos:column="11">retry<pos:position pos:line="618" pos:column="16"/></name> <operator pos:line="618" pos:column="17">=<pos:position pos:line="618" pos:column="18"/></operator> <ternary><condition><expr><operator pos:line="618" pos:column="19">(<pos:position pos:line="618" pos:column="20"/></operator><name pos:line="618" pos:column="20">newurl<pos:position pos:line="618" pos:column="26"/></name><operator pos:line="618" pos:column="26">)<pos:position pos:line="618" pos:column="27"/></operator></expr>?<pos:position pos:line="618" pos:column="28"/></condition><then><expr><name pos:line="618" pos:column="28">TRUE<pos:position pos:line="618" pos:column="32"/></name></expr></then><else pos:line="618" pos:column="32">:<expr><name pos:line="618" pos:column="33">FALSE<pos:position pos:line="618" pos:column="38"/></name></expr></else></ternary></expr>;<pos:position pos:line="618" pos:column="39"/></expr_stmt></block></then></if>

        <if pos:line="620" pos:column="9">if<condition pos:line="620" pos:column="11">(<expr><name pos:line="620" pos:column="12">retry<pos:position pos:line="620" pos:column="17"/></name></expr>)<pos:position pos:line="620" pos:column="18"/></condition><then pos:line="620" pos:column="18"> <block pos:line="620" pos:column="19">{
          <comment type="block" pos:line="621" pos:column="11">/* if we are to retry, set the result to OK and consider the
             request as done */</comment>
          <expr_stmt><expr><name pos:line="623" pos:column="11">result<pos:position pos:line="623" pos:column="17"/></name> <operator pos:line="623" pos:column="18">=<pos:position pos:line="623" pos:column="19"/></operator> <name pos:line="623" pos:column="20">CURLE_OK<pos:position pos:line="623" pos:column="28"/></name></expr>;<pos:position pos:line="623" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><name pos:line="624" pos:column="11">done<pos:position pos:line="624" pos:column="15"/></name> <operator pos:line="624" pos:column="16">=<pos:position pos:line="624" pos:column="17"/></operator> <name pos:line="624" pos:column="18">TRUE<pos:position pos:line="624" pos:column="22"/></name></expr>;<pos:position pos:line="624" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="625" pos:column="10"/></block></then></if>
      }<pos:position pos:line="626" pos:column="8"/></block></then></if>

      <if pos:line="628" pos:column="7">if<condition pos:line="628" pos:column="9">(<expr><name pos:line="628" pos:column="10">result<pos:position pos:line="628" pos:column="16"/></name></expr>)<pos:position pos:line="628" pos:column="17"/></condition><then pos:line="628" pos:column="17"> <block pos:line="628" pos:column="18">{
        <comment type="block" pos:line="629" pos:column="9">/*
         * The transfer phase returned error, we mark the connection to get
         * closed to prevent being re-used. This is because we can't possibly
         * know if the connection is in a good shape or not now.  Unless it is
         * a protocol which uses two "channels" like FTP, as then the error
         * happened in the data connection.
         */</comment>

        <if pos:line="637" pos:column="9">if<condition pos:line="637" pos:column="11">(<expr><operator pos:line="637" pos:column="12">!<pos:position pos:line="637" pos:column="13"/></operator><operator pos:line="637" pos:column="13">(<pos:position pos:line="637" pos:column="14"/></operator><name><name pos:line="637" pos:column="14">data<pos:position pos:line="637" pos:column="18"/></name><operator pos:line="637" pos:column="18">-&gt;<pos:position pos:line="637" pos:column="23"/></operator><name pos:line="637" pos:column="20">easy_conn<pos:position pos:line="637" pos:column="29"/></name><operator pos:line="637" pos:column="29">-&gt;<pos:position pos:line="637" pos:column="34"/></operator><name pos:line="637" pos:column="31">handler<pos:position pos:line="637" pos:column="38"/></name><operator pos:line="637" pos:column="38">-&gt;<pos:position pos:line="637" pos:column="43"/></operator><name pos:line="637" pos:column="40">flags<pos:position pos:line="637" pos:column="45"/></name></name> <operator pos:line="637" pos:column="46">&amp;<pos:position pos:line="637" pos:column="51"/></operator> <name pos:line="637" pos:column="48">PROTOPT_DUAL<pos:position pos:line="637" pos:column="60"/></name><operator pos:line="637" pos:column="60">)<pos:position pos:line="637" pos:column="61"/></operator></expr>)<pos:position pos:line="637" pos:column="62"/></condition><then pos:line="637" pos:column="62">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="638" pos:column="11">connclose<pos:position pos:line="638" pos:column="20"/></name><argument_list pos:line="638" pos:column="20">(<argument><expr><name><name pos:line="638" pos:column="21">data<pos:position pos:line="638" pos:column="25"/></name><operator pos:line="638" pos:column="25">-&gt;<pos:position pos:line="638" pos:column="30"/></operator><name pos:line="638" pos:column="27">easy_conn<pos:position pos:line="638" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="638" pos:column="38">"Transfer returned error"<pos:position pos:line="638" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="638" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="638" pos:column="65"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="640" pos:column="9">Curl_posttransfer<pos:position pos:line="640" pos:column="26"/></name><argument_list pos:line="640" pos:column="26">(<argument><expr><name pos:line="640" pos:column="27">data<pos:position pos:line="640" pos:column="31"/></name></expr></argument>)<pos:position pos:line="640" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="640" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="641" pos:column="9">Curl_done<pos:position pos:line="641" pos:column="18"/></name><argument_list pos:line="641" pos:column="18">(<argument><expr><operator pos:line="641" pos:column="19">&amp;<pos:position pos:line="641" pos:column="24"/></operator><name><name pos:line="641" pos:column="20">data<pos:position pos:line="641" pos:column="24"/></name><operator pos:line="641" pos:column="24">-&gt;<pos:position pos:line="641" pos:column="29"/></operator><name pos:line="641" pos:column="26">easy_conn<pos:position pos:line="641" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="641" pos:column="37">result<pos:position pos:line="641" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="641" pos:column="45">FALSE<pos:position pos:line="641" pos:column="50"/></name></expr></argument>)<pos:position pos:line="641" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="641" pos:column="52"/></expr_stmt>
      }<pos:position pos:line="642" pos:column="8"/></block></then>
      <elseif pos:line="643" pos:column="7">else <if pos:line="643" pos:column="12">if<condition pos:line="643" pos:column="14">(<expr><name pos:line="643" pos:column="15">done<pos:position pos:line="643" pos:column="19"/></name></expr>)<pos:position pos:line="643" pos:column="20"/></condition><then pos:line="643" pos:column="20"> <block pos:line="643" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="644" pos:column="9">followtype<pos:position pos:line="644" pos:column="19"/></name></type> <name pos:line="644" pos:column="20">follow<pos:position pos:line="644" pos:column="26"/></name><init pos:line="644" pos:column="26">=<expr><name pos:line="644" pos:column="27">FOLLOW_NONE<pos:position pos:line="644" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="644" pos:column="39"/></decl_stmt>

        <comment type="block" pos:line="646" pos:column="9">/* call this even if the readwrite function returned error */</comment>
        <expr_stmt><expr><call><name pos:line="647" pos:column="9">Curl_posttransfer<pos:position pos:line="647" pos:column="26"/></name><argument_list pos:line="647" pos:column="26">(<argument><expr><name pos:line="647" pos:column="27">data<pos:position pos:line="647" pos:column="31"/></name></expr></argument>)<pos:position pos:line="647" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="647" pos:column="33"/></expr_stmt>

        <comment type="block" pos:line="649" pos:column="9">/* we're no longer receiving */</comment>
        <expr_stmt><expr><call><name pos:line="650" pos:column="9">Curl_removeHandleFromPipeline<pos:position pos:line="650" pos:column="38"/></name><argument_list pos:line="650" pos:column="38">(<argument><expr><name pos:line="650" pos:column="39">data<pos:position pos:line="650" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="650" pos:column="45">data<pos:position pos:line="650" pos:column="49"/></name><operator pos:line="650" pos:column="49">-&gt;<pos:position pos:line="650" pos:column="54"/></operator><name pos:line="650" pos:column="51">easy_conn<pos:position pos:line="650" pos:column="60"/></name><operator pos:line="650" pos:column="60">-&gt;<pos:position pos:line="650" pos:column="65"/></operator><name pos:line="650" pos:column="62">recv_pipe<pos:position pos:line="650" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="650" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="650" pos:column="73"/></expr_stmt>

        <comment type="block" pos:line="652" pos:column="9">/* expire the new receiving pipeline head */</comment>
        <if pos:line="653" pos:column="9">if<condition pos:line="653" pos:column="11">(<expr><name><name pos:line="653" pos:column="12">data<pos:position pos:line="653" pos:column="16"/></name><operator pos:line="653" pos:column="16">-&gt;<pos:position pos:line="653" pos:column="21"/></operator><name pos:line="653" pos:column="18">easy_conn<pos:position pos:line="653" pos:column="27"/></name><operator pos:line="653" pos:column="27">-&gt;<pos:position pos:line="653" pos:column="32"/></operator><name pos:line="653" pos:column="29">recv_pipe<pos:position pos:line="653" pos:column="38"/></name><operator pos:line="653" pos:column="38">-&gt;<pos:position pos:line="653" pos:column="43"/></operator><name pos:line="653" pos:column="40">head<pos:position pos:line="653" pos:column="44"/></name></name></expr>)<pos:position pos:line="653" pos:column="45"/></condition><then pos:line="653" pos:column="45">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="654" pos:column="11">Curl_expire_latest<pos:position pos:line="654" pos:column="29"/></name><argument_list pos:line="654" pos:column="29">(<argument><expr><name><name pos:line="654" pos:column="30">data<pos:position pos:line="654" pos:column="34"/></name><operator pos:line="654" pos:column="34">-&gt;<pos:position pos:line="654" pos:column="39"/></operator><name pos:line="654" pos:column="36">easy_conn<pos:position pos:line="654" pos:column="45"/></name><operator pos:line="654" pos:column="45">-&gt;<pos:position pos:line="654" pos:column="50"/></operator><name pos:line="654" pos:column="47">recv_pipe<pos:position pos:line="654" pos:column="56"/></name><operator pos:line="654" pos:column="56">-&gt;<pos:position pos:line="654" pos:column="61"/></operator><name pos:line="654" pos:column="58">head<pos:position pos:line="654" pos:column="62"/></name><operator pos:line="654" pos:column="62">-&gt;<pos:position pos:line="654" pos:column="67"/></operator><name pos:line="654" pos:column="64">ptr<pos:position pos:line="654" pos:column="67"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="654" pos:column="69">1<pos:position pos:line="654" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="654" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="654" pos:column="72"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="656" pos:column="9">/* Check if we can move pending requests to send pipe */</comment>
        <expr_stmt><expr><call><name pos:line="657" pos:column="9">Curl_multi_process_pending_handles<pos:position pos:line="657" pos:column="43"/></name><argument_list pos:line="657" pos:column="43">(<argument><expr><name pos:line="657" pos:column="44">multi<pos:position pos:line="657" pos:column="49"/></name></expr></argument>)<pos:position pos:line="657" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="657" pos:column="51"/></expr_stmt>

        <comment type="block" pos:line="659" pos:column="9">/* When we follow redirects or is set to retry the connection, we must
           to go back to the CONNECT state */</comment>
        <if pos:line="661" pos:column="9">if<condition pos:line="661" pos:column="11">(<expr><name><name pos:line="661" pos:column="12">data<pos:position pos:line="661" pos:column="16"/></name><operator pos:line="661" pos:column="16">-&gt;<pos:position pos:line="661" pos:column="21"/></operator><name pos:line="661" pos:column="18">req<pos:position pos:line="661" pos:column="21"/></name><operator pos:line="661" pos:column="21">.<pos:position pos:line="661" pos:column="22"/></operator><name pos:line="661" pos:column="22">newurl<pos:position pos:line="661" pos:column="28"/></name></name> <operator pos:line="661" pos:column="29">||<pos:position pos:line="661" pos:column="31"/></operator> <name pos:line="661" pos:column="32">retry<pos:position pos:line="661" pos:column="37"/></name></expr>)<pos:position pos:line="661" pos:column="38"/></condition><then pos:line="661" pos:column="38"> <block pos:line="661" pos:column="39">{
          <if pos:line="662" pos:column="11">if<condition pos:line="662" pos:column="13">(<expr><operator pos:line="662" pos:column="14">!<pos:position pos:line="662" pos:column="15"/></operator><name pos:line="662" pos:column="15">retry<pos:position pos:line="662" pos:column="20"/></name></expr>)<pos:position pos:line="662" pos:column="21"/></condition><then pos:line="662" pos:column="21"> <block pos:line="662" pos:column="22">{
            <comment type="block" pos:line="663" pos:column="13">/* if the URL is a follow-location and not just a retried request
               then figure out the URL here */</comment>
            <if pos:line="665" pos:column="13">if<condition pos:line="665" pos:column="15">(<expr><name pos:line="665" pos:column="16">newurl<pos:position pos:line="665" pos:column="22"/></name></expr>)<pos:position pos:line="665" pos:column="23"/></condition><then pos:line="665" pos:column="23">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="666" pos:column="15">free<pos:position pos:line="666" pos:column="19"/></name><argument_list pos:line="666" pos:column="19">(<argument><expr><name pos:line="666" pos:column="20">newurl<pos:position pos:line="666" pos:column="26"/></name></expr></argument>)<pos:position pos:line="666" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="666" pos:column="28"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="667" pos:column="13">newurl<pos:position pos:line="667" pos:column="19"/></name> <operator pos:line="667" pos:column="20">=<pos:position pos:line="667" pos:column="21"/></operator> <name><name pos:line="667" pos:column="22">data<pos:position pos:line="667" pos:column="26"/></name><operator pos:line="667" pos:column="26">-&gt;<pos:position pos:line="667" pos:column="31"/></operator><name pos:line="667" pos:column="28">req<pos:position pos:line="667" pos:column="31"/></name><operator pos:line="667" pos:column="31">.<pos:position pos:line="667" pos:column="32"/></operator><name pos:line="667" pos:column="32">newurl<pos:position pos:line="667" pos:column="38"/></name></name></expr>;<pos:position pos:line="667" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="668" pos:column="13">data<pos:position pos:line="668" pos:column="17"/></name><operator pos:line="668" pos:column="17">-&gt;<pos:position pos:line="668" pos:column="22"/></operator><name pos:line="668" pos:column="19">req<pos:position pos:line="668" pos:column="22"/></name><operator pos:line="668" pos:column="22">.<pos:position pos:line="668" pos:column="23"/></operator><name pos:line="668" pos:column="23">newurl<pos:position pos:line="668" pos:column="29"/></name></name> <operator pos:line="668" pos:column="30">=<pos:position pos:line="668" pos:column="31"/></operator> <name pos:line="668" pos:column="32">NULL<pos:position pos:line="668" pos:column="36"/></name></expr>;<pos:position pos:line="668" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name pos:line="669" pos:column="13">follow<pos:position pos:line="669" pos:column="19"/></name> <operator pos:line="669" pos:column="20">=<pos:position pos:line="669" pos:column="21"/></operator> <name pos:line="669" pos:column="22">FOLLOW_REDIR<pos:position pos:line="669" pos:column="34"/></name></expr>;<pos:position pos:line="669" pos:column="35"/></expr_stmt>
          }<pos:position pos:line="670" pos:column="12"/></block></then>
          <else pos:line="671" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="672" pos:column="13">follow<pos:position pos:line="672" pos:column="19"/></name> <operator pos:line="672" pos:column="20">=<pos:position pos:line="672" pos:column="21"/></operator> <name pos:line="672" pos:column="22">FOLLOW_RETRY<pos:position pos:line="672" pos:column="34"/></name></expr>;<pos:position pos:line="672" pos:column="35"/></expr_stmt></block></else></if>
          <expr_stmt><expr><name pos:line="673" pos:column="11">result<pos:position pos:line="673" pos:column="17"/></name> <operator pos:line="673" pos:column="18">=<pos:position pos:line="673" pos:column="19"/></operator> <call><name pos:line="673" pos:column="20">Curl_done<pos:position pos:line="673" pos:column="29"/></name><argument_list pos:line="673" pos:column="29">(<argument><expr><operator pos:line="673" pos:column="30">&amp;<pos:position pos:line="673" pos:column="35"/></operator><name><name pos:line="673" pos:column="31">data<pos:position pos:line="673" pos:column="35"/></name><operator pos:line="673" pos:column="35">-&gt;<pos:position pos:line="673" pos:column="40"/></operator><name pos:line="673" pos:column="37">easy_conn<pos:position pos:line="673" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="673" pos:column="48">CURLE_OK<pos:position pos:line="673" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="673" pos:column="58">FALSE<pos:position pos:line="673" pos:column="63"/></name></expr></argument>)<pos:position pos:line="673" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="673" pos:column="65"/></expr_stmt>
          <if pos:line="674" pos:column="11">if<condition pos:line="674" pos:column="13">(<expr><operator pos:line="674" pos:column="14">!<pos:position pos:line="674" pos:column="15"/></operator><name pos:line="674" pos:column="15">result<pos:position pos:line="674" pos:column="21"/></name></expr>)<pos:position pos:line="674" pos:column="22"/></condition><then pos:line="674" pos:column="22"> <block pos:line="674" pos:column="23">{
            <expr_stmt><expr><name pos:line="675" pos:column="13">result<pos:position pos:line="675" pos:column="19"/></name> <operator pos:line="675" pos:column="20">=<pos:position pos:line="675" pos:column="21"/></operator> <call><name pos:line="675" pos:column="22">Curl_follow<pos:position pos:line="675" pos:column="33"/></name><argument_list pos:line="675" pos:column="33">(<argument><expr><name pos:line="675" pos:column="34">data<pos:position pos:line="675" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="675" pos:column="40">newurl<pos:position pos:line="675" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="675" pos:column="48">follow<pos:position pos:line="675" pos:column="54"/></name></expr></argument>)<pos:position pos:line="675" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="675" pos:column="56"/></expr_stmt>
            <if pos:line="676" pos:column="13">if<condition pos:line="676" pos:column="15">(<expr><operator pos:line="676" pos:column="16">!<pos:position pos:line="676" pos:column="17"/></operator><name pos:line="676" pos:column="17">result<pos:position pos:line="676" pos:column="23"/></name></expr>)<pos:position pos:line="676" pos:column="24"/></condition><then pos:line="676" pos:column="24"> <block pos:line="676" pos:column="25">{
              <expr_stmt><expr><call><name pos:line="677" pos:column="15">multistate<pos:position pos:line="677" pos:column="25"/></name><argument_list pos:line="677" pos:column="25">(<argument><expr><name pos:line="677" pos:column="26">data<pos:position pos:line="677" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="677" pos:column="32">CURLM_STATE_CONNECT<pos:position pos:line="677" pos:column="51"/></name></expr></argument>)<pos:position pos:line="677" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="677" pos:column="53"/></expr_stmt>
              <expr_stmt><expr><name pos:line="678" pos:column="15">rc<pos:position pos:line="678" pos:column="17"/></name> <operator pos:line="678" pos:column="18">=<pos:position pos:line="678" pos:column="19"/></operator> <name pos:line="678" pos:column="20">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="678" pos:column="44"/></name></expr>;<pos:position pos:line="678" pos:column="45"/></expr_stmt>
              <expr_stmt><expr><name pos:line="679" pos:column="15">newurl<pos:position pos:line="679" pos:column="21"/></name> <operator pos:line="679" pos:column="22">=<pos:position pos:line="679" pos:column="23"/></operator> <name pos:line="679" pos:column="24">NULL<pos:position pos:line="679" pos:column="28"/></name></expr>;<pos:position pos:line="679" pos:column="29"/></expr_stmt> <comment type="block" pos:line="679" pos:column="30">/* handed over the memory ownership to
                                Curl_follow(), make sure we don't free() it
                                here */</comment>
            }<pos:position pos:line="682" pos:column="14"/></block></then></if>
          }<pos:position pos:line="683" pos:column="12"/></block></then></if>
        }<pos:position pos:line="684" pos:column="10"/></block></then>
        <else pos:line="685" pos:column="9">else <block pos:line="685" pos:column="14">{
          <comment type="block" pos:line="686" pos:column="11">/* after the transfer is done, go DONE */</comment>

          <comment type="block" pos:line="688" pos:column="11">/* but first check to see if we got a location info even though we're
             not following redirects */</comment>
          <if pos:line="690" pos:column="11">if<condition pos:line="690" pos:column="13">(<expr><name><name pos:line="690" pos:column="14">data<pos:position pos:line="690" pos:column="18"/></name><operator pos:line="690" pos:column="18">-&gt;<pos:position pos:line="690" pos:column="23"/></operator><name pos:line="690" pos:column="20">req<pos:position pos:line="690" pos:column="23"/></name><operator pos:line="690" pos:column="23">.<pos:position pos:line="690" pos:column="24"/></operator><name pos:line="690" pos:column="24">location<pos:position pos:line="690" pos:column="32"/></name></name></expr>)<pos:position pos:line="690" pos:column="33"/></condition><then pos:line="690" pos:column="33"> <block pos:line="690" pos:column="34">{
            <if pos:line="691" pos:column="13">if<condition pos:line="691" pos:column="15">(<expr><name pos:line="691" pos:column="16">newurl<pos:position pos:line="691" pos:column="22"/></name></expr>)<pos:position pos:line="691" pos:column="23"/></condition><then pos:line="691" pos:column="23">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="692" pos:column="15">free<pos:position pos:line="692" pos:column="19"/></name><argument_list pos:line="692" pos:column="19">(<argument><expr><name pos:line="692" pos:column="20">newurl<pos:position pos:line="692" pos:column="26"/></name></expr></argument>)<pos:position pos:line="692" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="692" pos:column="28"/></expr_stmt></block></then></if>
            <expr_stmt><expr><name pos:line="693" pos:column="13">newurl<pos:position pos:line="693" pos:column="19"/></name> <operator pos:line="693" pos:column="20">=<pos:position pos:line="693" pos:column="21"/></operator> <name><name pos:line="693" pos:column="22">data<pos:position pos:line="693" pos:column="26"/></name><operator pos:line="693" pos:column="26">-&gt;<pos:position pos:line="693" pos:column="31"/></operator><name pos:line="693" pos:column="28">req<pos:position pos:line="693" pos:column="31"/></name><operator pos:line="693" pos:column="31">.<pos:position pos:line="693" pos:column="32"/></operator><name pos:line="693" pos:column="32">location<pos:position pos:line="693" pos:column="40"/></name></name></expr>;<pos:position pos:line="693" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="694" pos:column="13">data<pos:position pos:line="694" pos:column="17"/></name><operator pos:line="694" pos:column="17">-&gt;<pos:position pos:line="694" pos:column="22"/></operator><name pos:line="694" pos:column="19">req<pos:position pos:line="694" pos:column="22"/></name><operator pos:line="694" pos:column="22">.<pos:position pos:line="694" pos:column="23"/></operator><name pos:line="694" pos:column="23">location<pos:position pos:line="694" pos:column="31"/></name></name> <operator pos:line="694" pos:column="32">=<pos:position pos:line="694" pos:column="33"/></operator> <name pos:line="694" pos:column="34">NULL<pos:position pos:line="694" pos:column="38"/></name></expr>;<pos:position pos:line="694" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="695" pos:column="13">result<pos:position pos:line="695" pos:column="19"/></name> <operator pos:line="695" pos:column="20">=<pos:position pos:line="695" pos:column="21"/></operator> <call><name pos:line="695" pos:column="22">Curl_follow<pos:position pos:line="695" pos:column="33"/></name><argument_list pos:line="695" pos:column="33">(<argument><expr><name pos:line="695" pos:column="34">data<pos:position pos:line="695" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="695" pos:column="40">newurl<pos:position pos:line="695" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="695" pos:column="48">FOLLOW_FAKE<pos:position pos:line="695" pos:column="59"/></name></expr></argument>)<pos:position pos:line="695" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="695" pos:column="61"/></expr_stmt>
            <if pos:line="696" pos:column="13">if<condition pos:line="696" pos:column="15">(<expr><operator pos:line="696" pos:column="16">!<pos:position pos:line="696" pos:column="17"/></operator><name pos:line="696" pos:column="17">result<pos:position pos:line="696" pos:column="23"/></name></expr>)<pos:position pos:line="696" pos:column="24"/></condition><then pos:line="696" pos:column="24">
              <block type="pseudo"><expr_stmt><expr><name pos:line="697" pos:column="15">newurl<pos:position pos:line="697" pos:column="21"/></name> <operator pos:line="697" pos:column="22">=<pos:position pos:line="697" pos:column="23"/></operator> <name pos:line="697" pos:column="24">NULL<pos:position pos:line="697" pos:column="28"/></name></expr>;<pos:position pos:line="697" pos:column="29"/></expr_stmt></block></then> <comment type="block" pos:line="697" pos:column="30">/* allocation was handed over Curl_follow() */</comment>
            <else pos:line="698" pos:column="13">else
              <block type="pseudo"><expr_stmt><expr><name pos:line="699" pos:column="15">disconnect_conn<pos:position pos:line="699" pos:column="30"/></name> <operator pos:line="699" pos:column="31">=<pos:position pos:line="699" pos:column="32"/></operator> <name pos:line="699" pos:column="33">TRUE<pos:position pos:line="699" pos:column="37"/></name></expr>;<pos:position pos:line="699" pos:column="38"/></expr_stmt></block></else></if>
          }<pos:position pos:line="700" pos:column="12"/></block></then></if>

          <macro><name pos:line="702" pos:column="11">multistate<pos:position pos:line="702" pos:column="21"/></name><argument_list pos:line="702" pos:column="21">(<argument pos:line="702" pos:column="22">data<pos:position pos:line="702" pos:column="26"/></argument>, <argument pos:line="702" pos:column="28">CURLM_ST<pos:position pos:line="702" pos:column="36"/></argument></argument_list></macro></block></else></if></block></then></if></elseif></if></block></block></switch></block></do></block></function></unit>
