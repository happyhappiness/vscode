<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1748_curl-7.41.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_GetFTPResponse<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">ssize_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">nreadp<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="47">/* return number of bytes read */</comment>
                             <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">connectdata<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">conn<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">ftpcode<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="43"/></parameter_list> <comment type="block" pos:line="3" pos:column="44">/* return the ftp-code */</comment>
<block pos:line="4" pos:column="1">{
  <comment type="block" pos:line="5" pos:column="3">/*
   * We cannot read just one byte per read() and then go back to select() as
   * the OpenSSL read() doesn't grok that properly.
   *
   * Alas, read as much as possible, split up into lines, use the ending
   * line in a response or continue reading.  */</comment>

  <decl_stmt><decl><type><name pos:line="12" pos:column="3">curl_socket_t<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">sockfd<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name><name pos:line="12" pos:column="26">conn<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">-&gt;<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="32">sock<pos:position pos:line="12" pos:column="36"/></name><index pos:line="12" pos:column="36">[<expr><name pos:line="12" pos:column="37">FIRSTSOCKET<pos:position pos:line="12" pos:column="48"/></name></expr>]<pos:position pos:line="12" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">long<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">timeout<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>              <comment type="block" pos:line="13" pos:column="30">/* timeout in milliseconds */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">long<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">interval_ms<pos:position pos:line="14" pos:column="19"/></name></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">SessionHandle<pos:position pos:line="15" pos:column="23"/></name></name> <modifier pos:line="15" pos:column="24">*<pos:position pos:line="15" pos:column="25"/></modifier></type><name pos:line="15" pos:column="25">data<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><name><name pos:line="15" pos:column="32">conn<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">data<pos:position pos:line="15" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="15" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">CURLcode<pos:position pos:line="16" pos:column="11"/></name></type> <name pos:line="16" pos:column="12">result<pos:position pos:line="16" pos:column="18"/></name> <init pos:line="16" pos:column="19">= <expr><name pos:line="16" pos:column="21">CURLE_OK<pos:position pos:line="16" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">ftp_conn<pos:position pos:line="17" pos:column="18"/></name></name> <modifier pos:line="17" pos:column="19">*<pos:position pos:line="17" pos:column="20"/></modifier></type><name pos:line="17" pos:column="20">ftpc<pos:position pos:line="17" pos:column="24"/></name> <init pos:line="17" pos:column="25">= <expr><operator pos:line="17" pos:column="27">&amp;<pos:position pos:line="17" pos:column="32"/></operator><name><name pos:line="17" pos:column="28">conn<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">-&gt;<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="34">proto<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">.<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">ftpc<pos:position pos:line="17" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="18" pos:column="3">struct<pos:position pos:line="18" pos:column="9"/></name> <name pos:line="18" pos:column="10">pingpong<pos:position pos:line="18" pos:column="18"/></name></name> <modifier pos:line="18" pos:column="19">*<pos:position pos:line="18" pos:column="20"/></modifier></type><name pos:line="18" pos:column="20">pp<pos:position pos:line="18" pos:column="22"/></name> <init pos:line="18" pos:column="23">= <expr><operator pos:line="18" pos:column="25">&amp;<pos:position pos:line="18" pos:column="30"/></operator><name><name pos:line="18" pos:column="26">ftpc<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">pp<pos:position pos:line="18" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">size_t<pos:position pos:line="19" pos:column="9"/></name></type> <name pos:line="19" pos:column="10">nread<pos:position pos:line="19" pos:column="15"/></name></decl>;<pos:position pos:line="19" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">cache_skip<pos:position pos:line="20" pos:column="17"/></name><init pos:line="20" pos:column="17">=<expr><literal type="number" pos:line="20" pos:column="18">0<pos:position pos:line="20" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">value_to_be_ignored<pos:position pos:line="21" pos:column="26"/></name><init pos:line="21" pos:column="26">=<expr><literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="29"/></decl_stmt>

  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">ftpcode<pos:position pos:line="23" pos:column="13"/></name></expr>)<pos:position pos:line="23" pos:column="14"/></condition><then pos:line="23" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="5">*<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">ftpcode<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt></block></then> <comment type="block" pos:line="24" pos:column="19">/* 0 for errors */</comment>
  <else pos:line="25" pos:column="3">else
    <comment type="block" pos:line="26" pos:column="5">/* make the pointer point to something for the rest of this function */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="5">ftpcode<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <operator pos:line="27" pos:column="15">&amp;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="16">value_to_be_ignored<pos:position pos:line="27" pos:column="35"/></name></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt></block></else></if>

  <expr_stmt><expr><operator pos:line="29" pos:column="3">*<pos:position pos:line="29" pos:column="4"/></operator><name pos:line="29" pos:column="4">nreadp<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator><literal type="number" pos:line="29" pos:column="11">0<pos:position pos:line="29" pos:column="12"/></literal></expr>;<pos:position pos:line="29" pos:column="13"/></expr_stmt>

  <while pos:line="31" pos:column="3">while<condition pos:line="31" pos:column="8">(<expr><operator pos:line="31" pos:column="9">!<pos:position pos:line="31" pos:column="10"/></operator><operator pos:line="31" pos:column="10">*<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">ftpcode<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">&amp;&amp;<pos:position pos:line="31" pos:column="29"/></operator> <operator pos:line="31" pos:column="22">!<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">result<pos:position pos:line="31" pos:column="29"/></name></expr>)<pos:position pos:line="31" pos:column="30"/></condition> <block pos:line="31" pos:column="31">{
    <comment type="block" pos:line="32" pos:column="5">/* check and reset timeout value every lap */</comment>
    <expr_stmt><expr><name pos:line="33" pos:column="5">timeout<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <call><name pos:line="33" pos:column="15">Curl_pp_state_timeout<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">pp<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>

    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name pos:line="35" pos:column="8">timeout<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">&lt;=<pos:position pos:line="35" pos:column="21"/></operator><literal type="number" pos:line="35" pos:column="18">0<pos:position pos:line="35" pos:column="19"/></literal></expr> )<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <block pos:line="35" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">failf<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">data<pos:position pos:line="36" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="19">"FTP response timeout"<pos:position pos:line="36" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="43"/></expr_stmt>
      <return pos:line="37" pos:column="7">return <expr><name pos:line="37" pos:column="14">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="37" pos:column="38"/></name></expr>;<pos:position pos:line="37" pos:column="39"/></return> <comment type="block" pos:line="37" pos:column="40">/* already too little time */</comment>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="40" pos:column="5">interval_ms<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <literal type="number" pos:line="40" pos:column="19">1000<pos:position pos:line="40" pos:column="23"/></literal></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt>  <comment type="block" pos:line="40" pos:column="26">/* use 1 second timeout intervals */</comment>
    <if pos:line="41" pos:column="5">if<condition pos:line="41" pos:column="7">(<expr><name pos:line="41" pos:column="8">timeout<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">&lt;<pos:position pos:line="41" pos:column="20"/></operator> <name pos:line="41" pos:column="18">interval_ms<pos:position pos:line="41" pos:column="29"/></name></expr>)<pos:position pos:line="41" pos:column="30"/></condition><then pos:line="41" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="7">interval_ms<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">timeout<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="44" pos:column="5">/*
     * Since this function is blocking, we need to wait here for input on the
     * connection and only then we call the response reading function. We do
     * timeout at least every second to make the timeout check run.
     *
     * A caution here is that the ftp_readresp() function has a cache that may
     * contain pieces of a response from the previous invoke and we need to
     * make sure we don't just wait for input while there is unhandled data in
     * that cache. But also, if the cache is there, we call ftp_readresp() and
     * the cache wasn't good enough to continue we must not just busy-loop
     * around this function.
     *
     */</comment>

    <if pos:line="58" pos:column="5">if<condition pos:line="58" pos:column="7">(<expr><name><name pos:line="58" pos:column="8">pp<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">cache<pos:position pos:line="58" pos:column="17"/></name></name> <operator pos:line="58" pos:column="18">&amp;&amp;<pos:position pos:line="58" pos:column="28"/></operator> <operator pos:line="58" pos:column="21">(<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">cache_skip<pos:position pos:line="58" pos:column="32"/></name> <operator pos:line="58" pos:column="33">&lt;<pos:position pos:line="58" pos:column="37"/></operator> <literal type="number" pos:line="58" pos:column="35">2<pos:position pos:line="58" pos:column="36"/></literal><operator pos:line="58" pos:column="36">)<pos:position pos:line="58" pos:column="37"/></operator></expr>)<pos:position pos:line="58" pos:column="38"/></condition><then pos:line="58" pos:column="38"> <block pos:line="58" pos:column="39">{
      <comment type="block" pos:line="59" pos:column="7">/*
       * There's a cache left since before. We then skipping the wait for
       * socket action, unless this is the same cache like the previous round
       * as then the cache was deemed not enough to act on and we then need to
       * wait for more data anyway.
       */</comment>
    }<pos:position pos:line="65" pos:column="6"/></block></then>
    <else pos:line="66" pos:column="5">else <block pos:line="66" pos:column="10">{
      <switch pos:line="67" pos:column="7">switch <condition pos:line="67" pos:column="14">(<expr><call><name pos:line="67" pos:column="15">Curl_socket_ready<pos:position pos:line="67" pos:column="32"/></name><argument_list pos:line="67" pos:column="32">(<argument><expr><name pos:line="67" pos:column="33">sockfd<pos:position pos:line="67" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="41">CURL_SOCKET_BAD<pos:position pos:line="67" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="58">interval_ms<pos:position pos:line="67" pos:column="69"/></name></expr></argument>)<pos:position pos:line="67" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="71"/></condition> <block pos:line="67" pos:column="72">{
      <case pos:line="68" pos:column="7">case <expr><operator pos:line="68" pos:column="12">-<pos:position pos:line="68" pos:column="13"/></operator><literal type="number" pos:line="68" pos:column="13">1<pos:position pos:line="68" pos:column="14"/></literal></expr>:<pos:position pos:line="68" pos:column="15"/></case> <comment type="block" pos:line="68" pos:column="16">/* select() error, stop reading */</comment>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">failf<pos:position pos:line="69" pos:column="14"/></name><argument_list pos:line="69" pos:column="14">(<argument><expr><name pos:line="69" pos:column="15">data<pos:position pos:line="69" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="21">"FTP response aborted due to select/poll error: %d"<pos:position pos:line="69" pos:column="72"/></literal></expr></argument>,
              <argument><expr><name pos:line="70" pos:column="15">SOCKERRNO<pos:position pos:line="70" pos:column="24"/></name></expr></argument>)<pos:position pos:line="70" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="26"/></expr_stmt>
        <return pos:line="71" pos:column="9">return <expr><name pos:line="71" pos:column="16">CURLE_RECV_ERROR<pos:position pos:line="71" pos:column="32"/></name></expr>;<pos:position pos:line="71" pos:column="33"/></return>

      <case pos:line="73" pos:column="7">case <expr><literal type="number" pos:line="73" pos:column="12">0<pos:position pos:line="73" pos:column="13"/></literal></expr>:<pos:position pos:line="73" pos:column="14"/></case> <comment type="block" pos:line="73" pos:column="15">/* timeout */</comment>
        <if pos:line="74" pos:column="9">if<condition pos:line="74" pos:column="11">(<expr><call><name pos:line="74" pos:column="12">Curl_pgrsUpdate<pos:position pos:line="74" pos:column="27"/></name><argument_list pos:line="74" pos:column="27">(<argument><expr><name pos:line="74" pos:column="28">conn<pos:position pos:line="74" pos:column="32"/></name></expr></argument>)<pos:position pos:line="74" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="34"/></condition><then pos:line="74" pos:column="34">
          <block type="pseudo"><return pos:line="75" pos:column="11">return <expr><name pos:line="75" pos:column="18">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="75" pos:column="43"/></name></expr>;<pos:position pos:line="75" pos:column="44"/></return></block></then></if>
        <continue pos:line="76" pos:column="9">continue;<pos:position pos:line="76" pos:column="18"/></continue> <comment type="block" pos:line="76" pos:column="19">/* just continue in our loop for the timeout duration */</comment>

      <default pos:line="78" pos:column="7">default:<pos:position pos:line="78" pos:column="15"/></default> <comment type="block" pos:line="78" pos:column="16">/* for clarity */</comment>
        <break pos:line="79" pos:column="9">break;<pos:position pos:line="79" pos:column="15"/></break>
      }<pos:position pos:line="80" pos:column="8"/></block></switch>
    }<pos:position pos:line="81" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="82" pos:column="5">result<pos:position pos:line="82" pos:column="11"/></name> <operator pos:line="82" pos:column="12">=<pos:position pos:line="82" pos:column="13"/></operator> <call><name pos:line="82" pos:column="14">ftp_readresp<pos:position pos:line="82" pos:column="26"/></name><argument_list pos:line="82" pos:column="26">(<argument><expr><name pos:line="82" pos:column="27">sockfd<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="35">pp<pos:position pos:line="82" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="39">ftpcode<pos:position pos:line="82" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="48">&amp;<pos:position pos:line="82" pos:column="53"/></operator><name pos:line="82" pos:column="49">nread<pos:position pos:line="82" pos:column="54"/></name></expr></argument>)<pos:position pos:line="82" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="56"/></expr_stmt>
    <if pos:line="83" pos:column="5">if<condition pos:line="83" pos:column="7">(<expr><name pos:line="83" pos:column="8">result<pos:position pos:line="83" pos:column="14"/></name></expr>)<pos:position pos:line="83" pos:column="15"/></condition><then pos:line="83" pos:column="15">
      <block type="pseudo"><break pos:line="84" pos:column="7">break;<pos:position pos:line="84" pos:column="13"/></break></block></then></if>

    <if pos:line="86" pos:column="5">if<condition pos:line="86" pos:column="7">(<expr><operator pos:line="86" pos:column="8">!<pos:position pos:line="86" pos:column="9"/></operator><name pos:line="86" pos:column="9">nread<pos:position pos:line="86" pos:column="14"/></name> <operator pos:line="86" pos:column="15">&amp;&amp;<pos:position pos:line="86" pos:column="25"/></operator> <name><name pos:line="86" pos:column="18">pp<pos:position pos:line="86" pos:column="20"/></name><operator pos:line="86" pos:column="20">-&gt;<pos:position pos:line="86" pos:column="25"/></operator><name pos:line="86" pos:column="22">cache<pos:position pos:line="86" pos:column="27"/></name></name></expr>)<pos:position pos:line="86" pos:column="28"/></condition><then pos:line="86" pos:column="28">
      <comment type="block" pos:line="87" pos:column="7">/* bump cache skip counter as on repeated skips we must wait for more
         data */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="7">cache_skip<pos:position pos:line="89" pos:column="17"/></name><operator pos:line="89" pos:column="17">++<pos:position pos:line="89" pos:column="19"/></operator></expr>;<pos:position pos:line="89" pos:column="20"/></expr_stmt></block></then>
    <else pos:line="90" pos:column="5">else
      <comment type="block" pos:line="91" pos:column="7">/* when we got data or there is no cache left, we reset the cache skip
         counter */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="7">cache_skip<pos:position pos:line="93" pos:column="17"/></name><operator pos:line="93" pos:column="17">=<pos:position pos:line="93" pos:column="18"/></operator><literal type="number" pos:line="93" pos:column="18">0<pos:position pos:line="93" pos:column="19"/></literal></expr>;<pos:position pos:line="93" pos:column="20"/></expr_stmt></block></else></if>

    <expr_stmt><expr><operator pos:line="95" pos:column="5">*<pos:position pos:line="95" pos:column="6"/></operator><name pos:line="95" pos:column="6">nreadp<pos:position pos:line="95" pos:column="12"/></name> <operator pos:line="95" pos:column="13">+=<pos:position pos:line="95" pos:column="15"/></operator> <name pos:line="95" pos:column="16">nread<pos:position pos:line="95" pos:column="21"/></name></expr>;<pos:position pos:line="95" pos:column="22"/></expr_stmt>

  }<pos:position pos:line="97" pos:column="4"/></block></while> <comment type="block" pos:line="97" pos:column="5">/* while there's buffer left and loop is requested */</comment>

  <expr_stmt><expr><name><name pos:line="99" pos:column="3">pp<pos:position pos:line="99" pos:column="5"/></name><operator pos:line="99" pos:column="5">-&gt;<pos:position pos:line="99" pos:column="10"/></operator><name pos:line="99" pos:column="7">pending_resp<pos:position pos:line="99" pos:column="19"/></name></name> <operator pos:line="99" pos:column="20">=<pos:position pos:line="99" pos:column="21"/></operator> <name pos:line="99" pos:column="22">FALSE<pos:position pos:line="99" pos:column="27"/></name></expr>;<pos:position pos:line="99" pos:column="28"/></expr_stmt>

  <return pos:line="101" pos:column="3">return <expr><name pos:line="101" pos:column="10">result<pos:position pos:line="101" pos:column="16"/></name></expr>;<pos:position pos:line="101" pos:column="17"/></return>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
