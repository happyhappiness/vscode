<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2045_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">NETDB_DEFINE_CONTEXT<pos:position pos:line="1" pos:column="21"/></name>
<comment type="block" pos:line="2" pos:column="1">/* Make the CLIB Inet stuff link */</comment>
<cpp:include pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">include<pos:position pos:line="3" pos:column="9"/></cpp:directive> <cpp:file pos:line="3" pos:column="10">&lt;netinet/in.h&gt;<pos:position pos:line="3" pos:column="27"/></cpp:file></cpp:include>
<cpp:include pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">include<pos:position pos:line="4" pos:column="9"/></cpp:directive> <cpp:file pos:line="4" pos:column="10">&lt;arpa/inet.h&gt;<pos:position pos:line="4" pos:column="26"/></cpp:file></cpp:include>
<name pos:line="5" pos:column="1">NETINET_DEFINE_CONTEXT<pos:position pos:line="5" pos:column="23"/></name>

<name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">netware_init<pos:position pos:line="7" pos:column="17"/></name><parameter_list pos:line="7" pos:column="17">(<parameter><decl><type><name pos:line="7" pos:column="18">void<pos:position pos:line="7" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="7" pos:column="23"/></parameter_list>
<block pos:line="8" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">rc<pos:position pos:line="9" pos:column="9"/></name> <init pos:line="9" pos:column="10">= <expr><literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">int<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">myHandle<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><call><name pos:line="10" pos:column="27">GetNLMHandle<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">()<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="42"/></decl_stmt>
  <comment type="block" pos:line="11" pos:column="3">/* import UnAugmentAsterisk dynamically for NW4.x compatibility */</comment>
  <function_decl><type><name pos:line="12" pos:column="3">void<pos:position pos:line="12" pos:column="7"/></name></type> (<modifier pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></modifier><name pos:line="12" pos:column="10">pUnAugmentAsterisk<pos:position pos:line="12" pos:column="28"/></name>)<parameter_list pos:line="12" pos:column="29">(<parameter><decl><type><name pos:line="12" pos:column="30">int<pos:position pos:line="12" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="12" pos:column="34"/></parameter_list> <init pos:line="12" pos:column="35">= <expr><operator pos:line="12" pos:column="37">(<pos:position pos:line="12" pos:column="38"/></operator><call><call><name pos:line="12" pos:column="38">void<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">(<argument><expr><operator pos:line="12" pos:column="43">*<pos:position pos:line="12" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call><operator pos:line="12" pos:column="45">(<pos:position pos:line="12" pos:column="46"/></operator><name pos:line="12" pos:column="46">int<pos:position pos:line="12" pos:column="49"/></name><operator pos:line="12" pos:column="49">)<pos:position pos:line="12" pos:column="50"/></operator></call><operator pos:line="12" pos:column="50">)<pos:position pos:line="12" pos:column="51"/></operator>
          <call><name pos:line="13" pos:column="11">ImportSymbol<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">myHandle<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <literal type="string" pos:line="13" pos:column="34">"UnAugmentAsterisk"<pos:position pos:line="13" pos:column="53"/></literal>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></init>;<pos:position pos:line="13" pos:column="55"/></function_decl>
  <comment type="block" pos:line="14" pos:column="3">/* import UseAccurateCaseForPaths dynamically for NW3.x compatibility */</comment>
  <function_decl><type><name pos:line="15" pos:column="3">void<pos:position pos:line="15" pos:column="7"/></name></type> (<modifier pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></modifier><name pos:line="15" pos:column="10">pUseAccurateCaseForPaths<pos:position pos:line="15" pos:column="34"/></name>)<parameter_list pos:line="15" pos:column="35">(<parameter><decl><type><name pos:line="15" pos:column="36">int<pos:position pos:line="15" pos:column="39"/></name></type></decl></parameter>)<pos:position pos:line="15" pos:column="40"/></parameter_list> <init pos:line="15" pos:column="41">= <expr><operator pos:line="15" pos:column="43">(<pos:position pos:line="15" pos:column="44"/></operator><call><call><name pos:line="15" pos:column="44">void<pos:position pos:line="15" pos:column="48"/></name><argument_list pos:line="15" pos:column="48">(<argument><expr><operator pos:line="15" pos:column="49">*<pos:position pos:line="15" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call><operator pos:line="15" pos:column="51">(<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">int<pos:position pos:line="15" pos:column="55"/></name><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator></call><operator pos:line="15" pos:column="56">)<pos:position pos:line="15" pos:column="57"/></operator>
          <call><name pos:line="16" pos:column="11">ImportSymbol<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">myHandle<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <literal type="string" pos:line="16" pos:column="34">"UseAccurateCaseForPaths"<pos:position pos:line="16" pos:column="59"/></literal>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr></init>;<pos:position pos:line="16" pos:column="61"/></function_decl>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name pos:line="17" pos:column="6">pUnAugmentAsterisk<pos:position pos:line="17" pos:column="24"/></name></expr>)<pos:position pos:line="17" pos:column="25"/></condition><then pos:line="17" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="5">pUnAugmentAsterisk<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt></block></then></if>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">pUseAccurateCaseForPaths<pos:position pos:line="19" pos:column="30"/></name></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="5">pUseAccurateCaseForPaths<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><literal type="number" pos:line="20" pos:column="30">1<pos:position pos:line="20" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">UnimportSymbol<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">myHandle<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="28">"UnAugmentAsterisk"<pos:position pos:line="21" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">UnimportSymbol<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">myHandle<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="28">"UseAccurateCaseForPaths"<pos:position pos:line="22" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt>
  <comment type="block" pos:line="23" pos:column="3">/* set long name space */</comment>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><operator pos:line="24" pos:column="6">(<pos:position pos:line="24" pos:column="7"/></operator><call><name pos:line="24" pos:column="7">SetCurrentNameSpace<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><literal type="number" pos:line="24" pos:column="27">4<pos:position pos:line="24" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call> <operator pos:line="24" pos:column="30">==<pos:position pos:line="24" pos:column="32"/></operator> <literal type="number" pos:line="24" pos:column="33">255<pos:position pos:line="24" pos:column="36"/></literal><operator pos:line="24" pos:column="36">)<pos:position pos:line="24" pos:column="37"/></operator></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38"> <block pos:line="24" pos:column="39">{
    <expr_stmt><expr><name pos:line="25" pos:column="5">rc<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <literal type="number" pos:line="25" pos:column="10">1<pos:position pos:line="25" pos:column="11"/></literal></expr>;<pos:position pos:line="25" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><operator pos:line="27" pos:column="6">(<pos:position pos:line="27" pos:column="7"/></operator><call><name pos:line="27" pos:column="7">SetTargetNameSpace<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="number" pos:line="27" pos:column="26">4<pos:position pos:line="27" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call> <operator pos:line="27" pos:column="29">==<pos:position pos:line="27" pos:column="31"/></operator> <literal type="number" pos:line="27" pos:column="32">255<pos:position pos:line="27" pos:column="35"/></literal><operator pos:line="27" pos:column="35">)<pos:position pos:line="27" pos:column="36"/></operator></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37"> <block pos:line="27" pos:column="38">{
    <expr_stmt><expr><name pos:line="28" pos:column="5">rc<pos:position pos:line="28" pos:column="7"/></name> <operator pos:line="28" pos:column="8">=<pos:position pos:line="28" pos:column="9"/></operator> <name pos:line="28" pos:column="10">rc<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">+<pos:position pos:line="28" pos:column="14"/></operator> <literal type="number" pos:line="28" pos:column="15">2<pos:position pos:line="28" pos:column="16"/></literal></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>
  <return pos:line="30" pos:column="3">return <expr><name pos:line="30" pos:column="10">rc<pos:position pos:line="30" pos:column="12"/></name></expr>;<pos:position pos:line="30" pos:column="13"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
