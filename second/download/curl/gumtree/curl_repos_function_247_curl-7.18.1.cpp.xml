<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_247_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">test<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">char<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">URL<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">c<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">ret<pos:position pos:line="4" pos:column="10"/></name><init pos:line="4" pos:column="10">=<expr><literal type="number" pos:line="4" pos:column="11">0<pos:position pos:line="4" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLM<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">m<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">fd_set<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">rd<pos:position pos:line="6" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="14">wr<pos:position pos:line="6" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="18">exc<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLMcode<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">res<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">done<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name pos:line="8" pos:column="15">FALSE<pos:position pos:line="8" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">running<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">max_fd<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">rc<pos:position pos:line="11" pos:column="9"/></name></decl>;<pos:position pos:line="11" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="12" pos:column="3">struct<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">timeval<pos:position pos:line="12" pos:column="17"/></name></name></type> <name pos:line="12" pos:column="18">ml_start<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">timeval<pos:position pos:line="13" pos:column="17"/></name></name></type> <name pos:line="13" pos:column="18">mp_start<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">char<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">ml_timedout<pos:position pos:line="14" pos:column="19"/></name> <init pos:line="14" pos:column="20">= <expr><name pos:line="14" pos:column="22">FALSE<pos:position pos:line="14" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name></type> <name pos:line="15" pos:column="8">mp_timedout<pos:position pos:line="15" pos:column="19"/></name> <init pos:line="15" pos:column="20">= <expr><name pos:line="15" pos:column="22">FALSE<pos:position pos:line="15" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">curl_global_init<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">CURL_GLOBAL_ALL<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call> <operator pos:line="17" pos:column="41">!=<pos:position pos:line="17" pos:column="43"/></operator> <name pos:line="17" pos:column="44">CURLE_OK<pos:position pos:line="17" pos:column="52"/></name></expr>)<pos:position pos:line="17" pos:column="53"/></condition><then pos:line="17" pos:column="53"> <block pos:line="17" pos:column="54">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">fprintf<pos:position pos:line="18" pos:column="12"/></name><argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">stderr<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="21">"curl_global_init() failed\n"<pos:position pos:line="18" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><operator pos:line="22" pos:column="7">(<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">c<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <call><name pos:line="22" pos:column="12">curl_easy_init<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">()<pos:position pos:line="22" pos:column="28"/></argument_list></call><operator pos:line="22" pos:column="28">)<pos:position pos:line="22" pos:column="29"/></operator> <operator pos:line="22" pos:column="30">==<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">NULL<pos:position pos:line="22" pos:column="37"/></name></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38"> <block pos:line="22" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">fprintf<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">stderr<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="21">"curl_easy_init() failed\n"<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">curl_global_cleanup<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">()<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="25" pos:column="30"/></name></expr>;<pos:position pos:line="25" pos:column="31"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/* the point here being that there must not run anything on the given
     proxy port */</comment>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">curl_easy_setopt<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">c<pos:position pos:line="30" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="23">CURLOPT_PROXY<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">libtest_arg2<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">curl_easy_setopt<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">c<pos:position pos:line="31" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">CURLOPT_URL<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">URL<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">curl_easy_setopt<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">c<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="23">CURLOPT_VERBOSE<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="40">1<pos:position pos:line="32" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>

  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><operator pos:line="34" pos:column="7">(<pos:position pos:line="34" pos:column="8"/></operator><name pos:line="34" pos:column="8">m<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">curl_multi_init<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">()<pos:position pos:line="34" pos:column="29"/></argument_list></call><operator pos:line="34" pos:column="29">)<pos:position pos:line="34" pos:column="30"/></operator> <operator pos:line="34" pos:column="31">==<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="34">NULL<pos:position pos:line="34" pos:column="38"/></name></expr>)<pos:position pos:line="34" pos:column="39"/></condition><then pos:line="34" pos:column="39"> <block pos:line="34" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">fprintf<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">stderr<pos:position pos:line="35" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="21">"curl_multi_init() failed\n"<pos:position pos:line="35" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">curl_easy_cleanup<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">c<pos:position pos:line="36" pos:column="24"/></name></expr></argument>)<pos:position pos:line="36" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">curl_global_cleanup<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">()<pos:position pos:line="37" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="38" pos:column="30"/></name></expr>;<pos:position pos:line="38" pos:column="31"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><operator pos:line="41" pos:column="7">(<pos:position pos:line="41" pos:column="8"/></operator><name pos:line="41" pos:column="8">res<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <call><name pos:line="41" pos:column="14">curl_multi_add_handle<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">m<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="39">c<pos:position pos:line="41" pos:column="40"/></name></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call><operator pos:line="41" pos:column="41">)<pos:position pos:line="41" pos:column="42"/></operator> <operator pos:line="41" pos:column="43">!=<pos:position pos:line="41" pos:column="45"/></operator> <name pos:line="41" pos:column="46">CURLM_OK<pos:position pos:line="41" pos:column="54"/></name></expr>)<pos:position pos:line="41" pos:column="55"/></condition><then pos:line="41" pos:column="55"> <block pos:line="41" pos:column="56">{
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">fprintf<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">stderr<pos:position pos:line="42" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="21">"curl_multi_add_handle() failed, "<pos:position pos:line="42" pos:column="55"/></literal>
            <literal type="string" pos:line="43" pos:column="13">"with code %d\n"<pos:position pos:line="43" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">res<pos:position pos:line="43" pos:column="34"/></name></expr></argument>)<pos:position pos:line="43" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">curl_multi_cleanup<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">m<pos:position pos:line="44" pos:column="25"/></name></expr></argument>)<pos:position pos:line="44" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">curl_easy_cleanup<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">c<pos:position pos:line="45" pos:column="24"/></name></expr></argument>)<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">curl_global_cleanup<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">()<pos:position pos:line="46" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="27"/></expr_stmt>
    <return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="47" pos:column="30"/></name></expr>;<pos:position pos:line="47" pos:column="31"/></return>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="50" pos:column="3">ml_timedout<pos:position pos:line="50" pos:column="14"/></name> <operator pos:line="50" pos:column="15">=<pos:position pos:line="50" pos:column="16"/></operator> <name pos:line="50" pos:column="17">FALSE<pos:position pos:line="50" pos:column="22"/></name></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="51" pos:column="3">ml_start<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator> <call><name pos:line="51" pos:column="14">tutil_tvnow<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">()<pos:position pos:line="51" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="28"/></expr_stmt>

  <while pos:line="53" pos:column="3">while <condition pos:line="53" pos:column="9">(<expr><operator pos:line="53" pos:column="10">!<pos:position pos:line="53" pos:column="11"/></operator><name pos:line="53" pos:column="11">done<pos:position pos:line="53" pos:column="15"/></name></expr>)<pos:position pos:line="53" pos:column="16"/></condition> <block pos:line="53" pos:column="17">{
    <decl_stmt><decl><type><name><name pos:line="54" pos:column="5">struct<pos:position pos:line="54" pos:column="11"/></name> <name pos:line="54" pos:column="12">timeval<pos:position pos:line="54" pos:column="19"/></name></name></type> <name pos:line="54" pos:column="20">interval<pos:position pos:line="54" pos:column="28"/></name></decl>;<pos:position pos:line="54" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="56" pos:column="5">interval<pos:position pos:line="56" pos:column="13"/></name><operator pos:line="56" pos:column="13">.<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">tv_sec<pos:position pos:line="56" pos:column="20"/></name></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <literal type="number" pos:line="56" pos:column="23">1<pos:position pos:line="56" pos:column="24"/></literal></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">interval<pos:position pos:line="57" pos:column="13"/></name><operator pos:line="57" pos:column="13">.<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">tv_usec<pos:position pos:line="57" pos:column="21"/></name></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <literal type="number" pos:line="57" pos:column="24">0<pos:position pos:line="57" pos:column="25"/></literal></expr>;<pos:position pos:line="57" pos:column="26"/></expr_stmt>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><call><name pos:line="59" pos:column="9">tutil_tvdiff<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">(<argument><expr><call><name pos:line="59" pos:column="22">tutil_tvnow<pos:position pos:line="59" pos:column="33"/></name><argument_list pos:line="59" pos:column="33">()<pos:position pos:line="59" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="59" pos:column="37">ml_start<pos:position pos:line="59" pos:column="45"/></name></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call> <operator pos:line="59" pos:column="47">&gt;<pos:position pos:line="59" pos:column="51"/></operator>
        <name pos:line="60" pos:column="9">MAIN_LOOP_HANG_TIMEOUT<pos:position pos:line="60" pos:column="31"/></name></expr>)<pos:position pos:line="60" pos:column="32"/></condition><then pos:line="60" pos:column="32"> <block pos:line="60" pos:column="33">{
      <expr_stmt><expr><name pos:line="61" pos:column="7">ml_timedout<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <name pos:line="61" pos:column="21">TRUE<pos:position pos:line="61" pos:column="25"/></name></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>
      <break pos:line="62" pos:column="7">break;<pos:position pos:line="62" pos:column="13"/></break>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="64" pos:column="5">mp_timedout<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">=<pos:position pos:line="64" pos:column="18"/></operator> <name pos:line="64" pos:column="19">FALSE<pos:position pos:line="64" pos:column="24"/></name></expr>;<pos:position pos:line="64" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="65" pos:column="5">mp_start<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">=<pos:position pos:line="65" pos:column="15"/></operator> <call><name pos:line="65" pos:column="16">tutil_tvnow<pos:position pos:line="65" pos:column="27"/></name><argument_list pos:line="65" pos:column="27">()<pos:position pos:line="65" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="67" pos:column="5">fprintf<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><name pos:line="67" pos:column="13">stderr<pos:position pos:line="67" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="21">"curl_multi_perform()\n"<pos:position pos:line="67" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><name pos:line="69" pos:column="5">res<pos:position pos:line="69" pos:column="8"/></name> <operator pos:line="69" pos:column="9">=<pos:position pos:line="69" pos:column="10"/></operator> <name pos:line="69" pos:column="11">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="69" pos:column="35"/></name></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>

    <while pos:line="71" pos:column="5">while <condition pos:line="71" pos:column="11">(<expr><name pos:line="71" pos:column="12">res<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">==<pos:position pos:line="71" pos:column="18"/></operator> <name pos:line="71" pos:column="19">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="71" pos:column="43"/></name></expr>)<pos:position pos:line="71" pos:column="44"/></condition> <block pos:line="71" pos:column="45">{
      <expr_stmt><expr><name pos:line="72" pos:column="7">res<pos:position pos:line="72" pos:column="10"/></name> <operator pos:line="72" pos:column="11">=<pos:position pos:line="72" pos:column="12"/></operator> <call><name pos:line="72" pos:column="13">curl_multi_perform<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">(<argument><expr><name pos:line="72" pos:column="32">m<pos:position pos:line="72" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="35">&amp;<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="36">running<pos:position pos:line="72" pos:column="43"/></name></expr></argument>)<pos:position pos:line="72" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="45"/></expr_stmt>
      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><call><name pos:line="73" pos:column="11">tutil_tvdiff<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><call><name pos:line="73" pos:column="24">tutil_tvnow<pos:position pos:line="73" pos:column="35"/></name><argument_list pos:line="73" pos:column="35">()<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="73" pos:column="39">mp_start<pos:position pos:line="73" pos:column="47"/></name></expr></argument>)<pos:position pos:line="73" pos:column="48"/></argument_list></call> <operator pos:line="73" pos:column="49">&gt;<pos:position pos:line="73" pos:column="53"/></operator>
          <name pos:line="74" pos:column="11">MULTI_PERFORM_HANG_TIMEOUT<pos:position pos:line="74" pos:column="37"/></name></expr>)<pos:position pos:line="74" pos:column="38"/></condition><then pos:line="74" pos:column="38"> <block pos:line="74" pos:column="39">{
        <expr_stmt><expr><name pos:line="75" pos:column="9">mp_timedout<pos:position pos:line="75" pos:column="20"/></name> <operator pos:line="75" pos:column="21">=<pos:position pos:line="75" pos:column="22"/></operator> <name pos:line="75" pos:column="23">TRUE<pos:position pos:line="75" pos:column="27"/></name></expr>;<pos:position pos:line="75" pos:column="28"/></expr_stmt>
        <break pos:line="76" pos:column="9">break;<pos:position pos:line="76" pos:column="15"/></break>
      }<pos:position pos:line="77" pos:column="8"/></block></then></if>
    }<pos:position pos:line="78" pos:column="6"/></block></while>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">mp_timedout<pos:position pos:line="79" pos:column="20"/></name></expr>)<pos:position pos:line="79" pos:column="21"/></condition><then pos:line="79" pos:column="21">
      <block type="pseudo"><break pos:line="80" pos:column="7">break;<pos:position pos:line="80" pos:column="13"/></break></block></then></if>

    <if pos:line="82" pos:column="5">if<condition pos:line="82" pos:column="7">(<expr><operator pos:line="82" pos:column="8">!<pos:position pos:line="82" pos:column="9"/></operator><name pos:line="82" pos:column="9">running<pos:position pos:line="82" pos:column="16"/></name></expr>)<pos:position pos:line="82" pos:column="17"/></condition><then pos:line="82" pos:column="17"> <block pos:line="82" pos:column="18">{
      <comment type="block" pos:line="83" pos:column="7">/* This is where this code is expected to reach */</comment>
      <decl_stmt><decl><type><name pos:line="84" pos:column="7">int<pos:position pos:line="84" pos:column="10"/></name></type> <name pos:line="84" pos:column="11">numleft<pos:position pos:line="84" pos:column="18"/></name></decl>;<pos:position pos:line="84" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="85" pos:column="7">CURLMsg<pos:position pos:line="85" pos:column="14"/></name> <modifier pos:line="85" pos:column="15">*<pos:position pos:line="85" pos:column="16"/></modifier></type><name pos:line="85" pos:column="16">msg<pos:position pos:line="85" pos:column="19"/></name> <init pos:line="85" pos:column="20">= <expr><call><name pos:line="85" pos:column="22">curl_multi_info_read<pos:position pos:line="85" pos:column="42"/></name><argument_list pos:line="85" pos:column="42">(<argument><expr><name pos:line="85" pos:column="43">m<pos:position pos:line="85" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="46">&amp;<pos:position pos:line="85" pos:column="51"/></operator><name pos:line="85" pos:column="47">numleft<pos:position pos:line="85" pos:column="54"/></name></expr></argument>)<pos:position pos:line="85" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="85" pos:column="56"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">fprintf<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><name pos:line="86" pos:column="15">stderr<pos:position pos:line="86" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="23">"Expected: not running\n"<pos:position pos:line="86" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="50"/></expr_stmt>
      <if pos:line="87" pos:column="7">if<condition pos:line="87" pos:column="9">(<expr><name pos:line="87" pos:column="10">msg<pos:position pos:line="87" pos:column="13"/></name> <operator pos:line="87" pos:column="14">&amp;&amp;<pos:position pos:line="87" pos:column="24"/></operator> <operator pos:line="87" pos:column="17">!<pos:position pos:line="87" pos:column="18"/></operator><name pos:line="87" pos:column="18">numleft<pos:position pos:line="87" pos:column="25"/></name></expr>)<pos:position pos:line="87" pos:column="26"/></condition><then pos:line="87" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="88" pos:column="9">ret<pos:position pos:line="88" pos:column="12"/></name> <operator pos:line="88" pos:column="13">=<pos:position pos:line="88" pos:column="14"/></operator> <literal type="number" pos:line="88" pos:column="15">100<pos:position pos:line="88" pos:column="18"/></literal></expr>;<pos:position pos:line="88" pos:column="19"/></expr_stmt></block></then> <comment type="block" pos:line="88" pos:column="20">/* this is where we should be */</comment>
      <else pos:line="89" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="9">ret<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <literal type="number" pos:line="90" pos:column="15">99<pos:position pos:line="90" pos:column="17"/></literal></expr>;<pos:position pos:line="90" pos:column="18"/></expr_stmt></block></else></if> <comment type="block" pos:line="90" pos:column="19">/* not correct */</comment>
      <break pos:line="91" pos:column="7">break;<pos:position pos:line="91" pos:column="13"/></break>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">fprintf<pos:position pos:line="93" pos:column="12"/></name><argument_list pos:line="93" pos:column="12">(<argument><expr><name pos:line="93" pos:column="13">stderr<pos:position pos:line="93" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="21">"running == %d, res == %d\n"<pos:position pos:line="93" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="51">running<pos:position pos:line="93" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="60">res<pos:position pos:line="93" pos:column="63"/></name></expr></argument>)<pos:position pos:line="93" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="65"/></expr_stmt>

    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><name pos:line="95" pos:column="9">res<pos:position pos:line="95" pos:column="12"/></name> <operator pos:line="95" pos:column="13">!=<pos:position pos:line="95" pos:column="15"/></operator> <name pos:line="95" pos:column="16">CURLM_OK<pos:position pos:line="95" pos:column="24"/></name></expr>)<pos:position pos:line="95" pos:column="25"/></condition><then pos:line="95" pos:column="25"> <block pos:line="95" pos:column="26">{
      <expr_stmt><expr><name pos:line="96" pos:column="7">ret<pos:position pos:line="96" pos:column="10"/></name> <operator pos:line="96" pos:column="11">=<pos:position pos:line="96" pos:column="12"/></operator> <literal type="number" pos:line="96" pos:column="13">2<pos:position pos:line="96" pos:column="14"/></literal></expr>;<pos:position pos:line="96" pos:column="15"/></expr_stmt>
      <break pos:line="97" pos:column="7">break;<pos:position pos:line="97" pos:column="13"/></break>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="100" pos:column="5">FD_ZERO<pos:position pos:line="100" pos:column="12"/></name><argument_list pos:line="100" pos:column="12">(<argument><expr><operator pos:line="100" pos:column="13">&amp;<pos:position pos:line="100" pos:column="18"/></operator><name pos:line="100" pos:column="14">rd<pos:position pos:line="100" pos:column="16"/></name></expr></argument>)<pos:position pos:line="100" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">FD_ZERO<pos:position pos:line="101" pos:column="12"/></name><argument_list pos:line="101" pos:column="12">(<argument><expr><operator pos:line="101" pos:column="13">&amp;<pos:position pos:line="101" pos:column="18"/></operator><name pos:line="101" pos:column="14">wr<pos:position pos:line="101" pos:column="16"/></name></expr></argument>)<pos:position pos:line="101" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">FD_ZERO<pos:position pos:line="102" pos:column="12"/></name><argument_list pos:line="102" pos:column="12">(<argument><expr><operator pos:line="102" pos:column="13">&amp;<pos:position pos:line="102" pos:column="18"/></operator><name pos:line="102" pos:column="14">exc<pos:position pos:line="102" pos:column="17"/></name></expr></argument>)<pos:position pos:line="102" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="103" pos:column="5">max_fd<pos:position pos:line="103" pos:column="11"/></name> <operator pos:line="103" pos:column="12">=<pos:position pos:line="103" pos:column="13"/></operator> <literal type="number" pos:line="103" pos:column="14">0<pos:position pos:line="103" pos:column="15"/></literal></expr>;<pos:position pos:line="103" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="105" pos:column="5">fprintf<pos:position pos:line="105" pos:column="12"/></name><argument_list pos:line="105" pos:column="12">(<argument><expr><name pos:line="105" pos:column="13">stderr<pos:position pos:line="105" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="21">"curl_multi_fdset()\n"<pos:position pos:line="105" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="45"/></expr_stmt>
    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">(<expr><call><name pos:line="106" pos:column="9">curl_multi_fdset<pos:position pos:line="106" pos:column="25"/></name><argument_list pos:line="106" pos:column="25">(<argument><expr><name pos:line="106" pos:column="26">m<pos:position pos:line="106" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="29">&amp;<pos:position pos:line="106" pos:column="34"/></operator><name pos:line="106" pos:column="30">rd<pos:position pos:line="106" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="34">&amp;<pos:position pos:line="106" pos:column="39"/></operator><name pos:line="106" pos:column="35">wr<pos:position pos:line="106" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="39">&amp;<pos:position pos:line="106" pos:column="44"/></operator><name pos:line="106" pos:column="40">exc<pos:position pos:line="106" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="45">&amp;<pos:position pos:line="106" pos:column="50"/></operator><name pos:line="106" pos:column="46">max_fd<pos:position pos:line="106" pos:column="52"/></name></expr></argument>)<pos:position pos:line="106" pos:column="53"/></argument_list></call> <operator pos:line="106" pos:column="54">!=<pos:position pos:line="106" pos:column="56"/></operator> <name pos:line="106" pos:column="57">CURLM_OK<pos:position pos:line="106" pos:column="65"/></name></expr>)<pos:position pos:line="106" pos:column="66"/></condition><then pos:line="106" pos:column="66"> <block pos:line="106" pos:column="67">{
      <expr_stmt><expr><call><name pos:line="107" pos:column="7">fprintf<pos:position pos:line="107" pos:column="14"/></name><argument_list pos:line="107" pos:column="14">(<argument><expr><name pos:line="107" pos:column="15">stderr<pos:position pos:line="107" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="23">"unexpected failured of fdset.\n"<pos:position pos:line="107" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><name pos:line="108" pos:column="7">ret<pos:position pos:line="108" pos:column="10"/></name> <operator pos:line="108" pos:column="11">=<pos:position pos:line="108" pos:column="12"/></operator> <literal type="number" pos:line="108" pos:column="13">3<pos:position pos:line="108" pos:column="14"/></literal></expr>;<pos:position pos:line="108" pos:column="15"/></expr_stmt>
      <break pos:line="109" pos:column="7">break;<pos:position pos:line="109" pos:column="13"/></break>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="111" pos:column="5">rc<pos:position pos:line="111" pos:column="7"/></name> <operator pos:line="111" pos:column="8">=<pos:position pos:line="111" pos:column="9"/></operator> <call><name pos:line="111" pos:column="10">select_test<pos:position pos:line="111" pos:column="21"/></name><argument_list pos:line="111" pos:column="21">(<argument><expr><name pos:line="111" pos:column="22">max_fd<pos:position pos:line="111" pos:column="28"/></name><operator pos:line="111" pos:column="28">+<pos:position pos:line="111" pos:column="29"/></operator><literal type="number" pos:line="111" pos:column="29">1<pos:position pos:line="111" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="111" pos:column="32">&amp;<pos:position pos:line="111" pos:column="37"/></operator><name pos:line="111" pos:column="33">rd<pos:position pos:line="111" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="37">&amp;<pos:position pos:line="111" pos:column="42"/></operator><name pos:line="111" pos:column="38">wr<pos:position pos:line="111" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="42">&amp;<pos:position pos:line="111" pos:column="47"/></operator><name pos:line="111" pos:column="43">exc<pos:position pos:line="111" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="48">&amp;<pos:position pos:line="111" pos:column="53"/></operator><name pos:line="111" pos:column="49">interval<pos:position pos:line="111" pos:column="57"/></name></expr></argument>)<pos:position pos:line="111" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">fprintf<pos:position pos:line="112" pos:column="12"/></name><argument_list pos:line="112" pos:column="12">(<argument><expr><name pos:line="112" pos:column="13">stderr<pos:position pos:line="112" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="21">"select returned %d\n"<pos:position pos:line="112" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="45">rc<pos:position pos:line="112" pos:column="47"/></name></expr></argument>)<pos:position pos:line="112" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="113" pos:column="4"/></block></while>

  <if pos:line="115" pos:column="3">if <condition pos:line="115" pos:column="6">(<expr><name pos:line="115" pos:column="7">ml_timedout<pos:position pos:line="115" pos:column="18"/></name> <operator pos:line="115" pos:column="19">||<pos:position pos:line="115" pos:column="21"/></operator> <name pos:line="115" pos:column="22">mp_timedout<pos:position pos:line="115" pos:column="33"/></name></expr>)<pos:position pos:line="115" pos:column="34"/></condition><then pos:line="115" pos:column="34"> <block pos:line="115" pos:column="35">{
    <if pos:line="116" pos:column="5">if <condition pos:line="116" pos:column="8">(<expr><name pos:line="116" pos:column="9">ml_timedout<pos:position pos:line="116" pos:column="20"/></name></expr>)<pos:position pos:line="116" pos:column="21"/></condition><then pos:line="116" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="116" pos:column="22">fprintf<pos:position pos:line="116" pos:column="29"/></name><argument_list pos:line="116" pos:column="29">(<argument><expr><name pos:line="116" pos:column="30">stderr<pos:position pos:line="116" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="38">"ml_timedout\n"<pos:position pos:line="116" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="55"/></expr_stmt></block></then></if>
    <if pos:line="117" pos:column="5">if <condition pos:line="117" pos:column="8">(<expr><name pos:line="117" pos:column="9">mp_timedout<pos:position pos:line="117" pos:column="20"/></name></expr>)<pos:position pos:line="117" pos:column="21"/></condition><then pos:line="117" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="117" pos:column="22">fprintf<pos:position pos:line="117" pos:column="29"/></name><argument_list pos:line="117" pos:column="29">(<argument><expr><name pos:line="117" pos:column="30">stderr<pos:position pos:line="117" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="38">"mp_timedout\n"<pos:position pos:line="117" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="55"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="118" pos:column="5">fprintf<pos:position pos:line="118" pos:column="12"/></name><argument_list pos:line="118" pos:column="12">(<argument><expr><name pos:line="118" pos:column="13">stderr<pos:position pos:line="118" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="21">"ABORTING TEST, since it seems "<pos:position pos:line="118" pos:column="53"/></literal>
            <literal type="string" pos:line="119" pos:column="13">"that it would have run forever.\n"<pos:position pos:line="119" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="120" pos:column="5">ret<pos:position pos:line="120" pos:column="8"/></name> <operator pos:line="120" pos:column="9">=<pos:position pos:line="120" pos:column="10"/></operator> <name pos:line="120" pos:column="11">TEST_ERR_RUNS_FOREVER<pos:position pos:line="120" pos:column="32"/></name></expr>;<pos:position pos:line="120" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="121" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="123" pos:column="3">curl_multi_remove_handle<pos:position pos:line="123" pos:column="27"/></name><argument_list pos:line="123" pos:column="27">(<argument><expr><name pos:line="123" pos:column="28">m<pos:position pos:line="123" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="31">c<pos:position pos:line="123" pos:column="32"/></name></expr></argument>)<pos:position pos:line="123" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="124" pos:column="3">curl_easy_cleanup<pos:position pos:line="124" pos:column="20"/></name><argument_list pos:line="124" pos:column="20">(<argument><expr><name pos:line="124" pos:column="21">c<pos:position pos:line="124" pos:column="22"/></name></expr></argument>)<pos:position pos:line="124" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="125" pos:column="3">curl_multi_cleanup<pos:position pos:line="125" pos:column="21"/></name><argument_list pos:line="125" pos:column="21">(<argument><expr><name pos:line="125" pos:column="22">m<pos:position pos:line="125" pos:column="23"/></name></expr></argument>)<pos:position pos:line="125" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="126" pos:column="3">curl_global_cleanup<pos:position pos:line="126" pos:column="22"/></name><argument_list pos:line="126" pos:column="22">()<pos:position pos:line="126" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="25"/></expr_stmt>

  <return pos:line="128" pos:column="3">return <expr><name pos:line="128" pos:column="10">ret<pos:position pos:line="128" pos:column="13"/></name></expr>;<pos:position pos:line="128" pos:column="14"/></return>
}<pos:position pos:line="129" pos:column="2"/></block></function></unit>
