<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1760_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_resolv_timeout<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">connectdata<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conn<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                        <parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">hostname<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="3" pos:column="25">int<pos:position pos:line="3" pos:column="28"/></name></type> <name pos:line="3" pos:column="29">port<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>,
                        <parameter><decl><type><name><name pos:line="4" pos:column="25">struct<pos:position pos:line="4" pos:column="31"/></name> <name pos:line="4" pos:column="32">Curl_dns_entry<pos:position pos:line="4" pos:column="46"/></name></name> <modifier pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></modifier><modifier pos:line="4" pos:column="48">*<pos:position pos:line="4" pos:column="49"/></modifier></type><name pos:line="4" pos:column="49">entry<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="5" pos:column="25">time_t<pos:position pos:line="5" pos:column="31"/></name></type> <name pos:line="5" pos:column="32">timeoutms<pos:position pos:line="5" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="42"/></parameter_list>
<block pos:line="6" pos:column="1">{
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">USE_ALARM_TIMEOUT<pos:position pos:line="7" pos:column="25"/></name></cpp:ifdef>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">HAVE_SIGACTION<pos:position pos:line="8" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">sigaction<pos:position pos:line="9" pos:column="19"/></name></name></type> <name pos:line="9" pos:column="20">keep_sigact<pos:position pos:line="9" pos:column="31"/></name></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>   <comment type="block" pos:line="9" pos:column="35">/* store the old struct here */</comment>
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">volatile<pos:position pos:line="10" pos:column="11"/></specifier> <name pos:line="10" pos:column="12">bool<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">keep_copysig<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><name pos:line="10" pos:column="32">FALSE<pos:position pos:line="10" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="38"/></decl_stmt> <comment type="block" pos:line="10" pos:column="39">/* whether old sigact has been saved */</comment>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">sigaction<pos:position pos:line="11" pos:column="19"/></name></name></type> <name pos:line="11" pos:column="20">sigact<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">HAVE_SIGNAL<pos:position pos:line="13" pos:column="19"/></name></cpp:ifdef>
  <function_decl><type><name pos:line="14" pos:column="3">void<pos:position pos:line="14" pos:column="7"/></name></type> (<modifier pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></modifier><name pos:line="14" pos:column="10">keep_sigact<pos:position pos:line="14" pos:column="21"/></name>)<parameter_list pos:line="14" pos:column="22">(<parameter><decl><type><name pos:line="14" pos:column="23">int<pos:position pos:line="14" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="14" pos:column="27"/></parameter_list>;<pos:position pos:line="14" pos:column="28"/></function_decl>       <comment type="block" pos:line="14" pos:column="35">/* store the old handler here */</comment>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="15" pos:column="8">/* HAVE_SIGNAL */</comment>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="16" pos:column="8">/* HAVE_SIGACTION */</comment>
  <decl_stmt><decl><type><specifier pos:line="17" pos:column="3">volatile<pos:position pos:line="17" pos:column="11"/></specifier> <name pos:line="17" pos:column="12">long<pos:position pos:line="17" pos:column="16"/></name></type> <name pos:line="17" pos:column="17">timeout<pos:position pos:line="17" pos:column="24"/></name></decl>;<pos:position pos:line="17" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="18" pos:column="3">volatile<pos:position pos:line="18" pos:column="11"/></specifier> <name pos:line="18" pos:column="12">unsigned<pos:position pos:line="18" pos:column="20"/></name> <name pos:line="18" pos:column="21">int<pos:position pos:line="18" pos:column="24"/></name></type> <name pos:line="18" pos:column="25">prev_alarm<pos:position pos:line="18" pos:column="35"/></name> <init pos:line="18" pos:column="36">= <expr><literal type="number" pos:line="18" pos:column="38">0<pos:position pos:line="18" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">Curl_easy<pos:position pos:line="19" pos:column="19"/></name></name> <modifier pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></modifier></type><name pos:line="19" pos:column="21">data<pos:position pos:line="19" pos:column="25"/></name> <init pos:line="19" pos:column="26">= <expr><name><name pos:line="19" pos:column="28">conn<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">-&gt;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="34">data<pos:position pos:line="19" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="39"/></decl_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="20" pos:column="8">/* USE_ALARM_TIMEOUT */</comment>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">rc<pos:position pos:line="21" pos:column="9"/></name></decl>;<pos:position pos:line="21" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="23" pos:column="3">*<pos:position pos:line="23" pos:column="4"/></operator><name pos:line="23" pos:column="4">entry<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <name pos:line="23" pos:column="12">NULL<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></expr_stmt>

  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">timeoutms<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">&lt;<pos:position pos:line="25" pos:column="20"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>)<pos:position pos:line="25" pos:column="20"/></condition><then pos:line="25" pos:column="20">
    <comment type="block" pos:line="26" pos:column="5">/* got an already expired timeout */</comment>
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">CURLRESOLV_TIMEDOUT<pos:position pos:line="27" pos:column="31"/></name></expr>;<pos:position pos:line="27" pos:column="32"/></return></block></then></if>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef<pos:position pos:line="29" pos:column="7"/></cpp:directive> <name pos:line="29" pos:column="8">USE_ALARM_TIMEOUT<pos:position pos:line="29" pos:column="25"/></name></cpp:ifdef>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name><name pos:line="30" pos:column="6">data<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">set<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">.<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">no_signal<pos:position pos:line="30" pos:column="25"/></name></name></expr>)<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26">
    <comment type="block" pos:line="31" pos:column="5">/* Ignore the timeout when signals are disabled */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="5">timeout<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <literal type="number" pos:line="32" pos:column="15">0<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt></block></then>
  <else pos:line="33" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="5">timeout<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="34" pos:column="15">(<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">timeoutms<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">&gt;<pos:position pos:line="34" pos:column="30"/></operator> <name pos:line="34" pos:column="28">LONG_MAX<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">)<pos:position pos:line="34" pos:column="37"/></operator></expr> ?<pos:position pos:line="34" pos:column="39"/></condition><then pos:line="34" pos:column="39"> <expr><name pos:line="34" pos:column="40">LONG_MAX<pos:position pos:line="34" pos:column="48"/></name></expr> <pos:position pos:line="34" pos:column="49"/></then><else pos:line="34" pos:column="49">: <expr><operator pos:line="34" pos:column="51">(<pos:position pos:line="34" pos:column="52"/></operator><name pos:line="34" pos:column="52">long<pos:position pos:line="34" pos:column="56"/></name><operator pos:line="34" pos:column="56">)<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="57">timeoutms<pos:position pos:line="34" pos:column="66"/></name></expr></else></ternary></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt></block></else></if>

  <if pos:line="36" pos:column="3">if<condition pos:line="36" pos:column="5">(<expr><operator pos:line="36" pos:column="6">!<pos:position pos:line="36" pos:column="7"/></operator><name pos:line="36" pos:column="7">timeout<pos:position pos:line="36" pos:column="14"/></name></expr>)<pos:position pos:line="36" pos:column="15"/></condition><then pos:line="36" pos:column="15">
    <comment type="block" pos:line="37" pos:column="5">/* USE_ALARM_TIMEOUT defined, but no timeout actually requested */</comment>
    <block type="pseudo"><return pos:line="38" pos:column="5">return <expr><call><name pos:line="38" pos:column="12">Curl_resolv<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">conn<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="30">hostname<pos:position pos:line="38" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="40">port<pos:position pos:line="38" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="46">entry<pos:position pos:line="38" pos:column="51"/></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="53"/></return></block></then></if>

  <if pos:line="40" pos:column="3">if<condition pos:line="40" pos:column="5">(<expr><name pos:line="40" pos:column="6">timeout<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">&lt;<pos:position pos:line="40" pos:column="18"/></operator> <literal type="number" pos:line="40" pos:column="16">1000<pos:position pos:line="40" pos:column="20"/></literal></expr>)<pos:position pos:line="40" pos:column="21"/></condition><then pos:line="40" pos:column="21"> <block pos:line="40" pos:column="22">{
    <comment type="block" pos:line="41" pos:column="5">/* The alarm() function only provides integer second resolution, so if
       we want to wait less than one second we must bail out already now. */</comment>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">failf<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><name pos:line="43" pos:column="11">data<pos:position pos:line="43" pos:column="15"/></name></expr></argument>,
        <argument><expr><literal type="string" pos:line="44" pos:column="9">"remaining timeout of %ld too small to resolve via SIGALRM method"<pos:position pos:line="44" pos:column="75"/></literal></expr></argument>,
        <argument><expr><name pos:line="45" pos:column="9">timeout<pos:position pos:line="45" pos:column="16"/></name></expr></argument>)<pos:position pos:line="45" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><name pos:line="46" pos:column="12">CURLRESOLV_TIMEDOUT<pos:position pos:line="46" pos:column="31"/></name></expr>;<pos:position pos:line="46" pos:column="32"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="48" pos:column="3">/* This allows us to time-out from the name resolver, as the timeout
     will generate a signal and we will siglongjmp() from that here.
     This technique has problems (see alarmfunc).
     This should be the last thing we do before calling Curl_resolv(),
     as otherwise we'd have to worry about variables that get modified
     before we invoke Curl_resolv() (and thus use "volatile"). */</comment>
  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">(<expr><call><name pos:line="54" pos:column="6">sigsetjmp<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><name pos:line="54" pos:column="16">curl_jmpenv<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="29">1<pos:position pos:line="54" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="32"/></condition><then pos:line="54" pos:column="32"> <block pos:line="54" pos:column="33">{
    <comment type="block" pos:line="55" pos:column="5">/* this is coming from a siglongjmp() after an alarm signal */</comment>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">failf<pos:position pos:line="56" pos:column="10"/></name><argument_list pos:line="56" pos:column="10">(<argument><expr><name pos:line="56" pos:column="11">data<pos:position pos:line="56" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="17">"name lookup timed out"<pos:position pos:line="56" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="57" pos:column="5">rc<pos:position pos:line="57" pos:column="7"/></name> <operator pos:line="57" pos:column="8">=<pos:position pos:line="57" pos:column="9"/></operator> <name pos:line="57" pos:column="10">CURLRESOLV_ERROR<pos:position pos:line="57" pos:column="26"/></name></expr>;<pos:position pos:line="57" pos:column="27"/></expr_stmt>
    <goto pos:line="58" pos:column="5">goto <name pos:line="58" pos:column="10">clean_up<pos:position pos:line="58" pos:column="18"/></name>;<pos:position pos:line="58" pos:column="19"/></goto>
  }<pos:position pos:line="59" pos:column="4"/></block></then>
  <else pos:line="60" pos:column="3">else <block pos:line="60" pos:column="8">{
    <comment type="block" format="doxygen" pos:line="61" pos:column="5">/*************************************************************
     * Set signal handler to catch SIGALRM
     * Store the old value to be able to set it back later!
     *************************************************************/</comment>
<cpp:ifdef pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">ifdef<pos:position pos:line="65" pos:column="7"/></cpp:directive> <name pos:line="65" pos:column="8">HAVE_SIGACTION<pos:position pos:line="65" pos:column="22"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">sigaction<pos:position pos:line="66" pos:column="14"/></name><argument_list pos:line="66" pos:column="14">(<argument><expr><name pos:line="66" pos:column="15">SIGALRM<pos:position pos:line="66" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="24">NULL<pos:position pos:line="66" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="30">&amp;<pos:position pos:line="66" pos:column="35"/></operator><name pos:line="66" pos:column="31">sigact<pos:position pos:line="66" pos:column="37"/></name></expr></argument>)<pos:position pos:line="66" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="67" pos:column="5">keep_sigact<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">=<pos:position pos:line="67" pos:column="18"/></operator> <name pos:line="67" pos:column="19">sigact<pos:position pos:line="67" pos:column="25"/></name></expr>;<pos:position pos:line="67" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="68" pos:column="5">keep_copysig<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">=<pos:position pos:line="68" pos:column="19"/></operator> <name pos:line="68" pos:column="20">TRUE<pos:position pos:line="68" pos:column="24"/></name></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt> <comment type="block" pos:line="68" pos:column="26">/* yes, we have a copy */</comment>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">sigact<pos:position pos:line="69" pos:column="11"/></name><operator pos:line="69" pos:column="11">.<pos:position pos:line="69" pos:column="12"/></operator><name pos:line="69" pos:column="12">sa_handler<pos:position pos:line="69" pos:column="22"/></name></name> <operator pos:line="69" pos:column="23">=<pos:position pos:line="69" pos:column="24"/></operator> <name pos:line="69" pos:column="25">alarmfunc<pos:position pos:line="69" pos:column="34"/></name></expr>;<pos:position pos:line="69" pos:column="35"/></expr_stmt>
<cpp:ifdef pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">ifdef<pos:position pos:line="70" pos:column="7"/></cpp:directive> <name pos:line="70" pos:column="8">SA_RESTART<pos:position pos:line="70" pos:column="18"/></name></cpp:ifdef>
    <comment type="block" pos:line="71" pos:column="5">/* HPUX doesn't have SA_RESTART but defaults to that behaviour! */</comment>
    <expr_stmt><expr><name><name pos:line="72" pos:column="5">sigact<pos:position pos:line="72" pos:column="11"/></name><operator pos:line="72" pos:column="11">.<pos:position pos:line="72" pos:column="12"/></operator><name pos:line="72" pos:column="12">sa_flags<pos:position pos:line="72" pos:column="20"/></name></name> <operator pos:line="72" pos:column="21">&amp;=<pos:position pos:line="72" pos:column="27"/></operator> <operator pos:line="72" pos:column="24">~<pos:position pos:line="72" pos:column="25"/></operator><name pos:line="72" pos:column="25">SA_RESTART<pos:position pos:line="72" pos:column="35"/></name></expr>;<pos:position pos:line="72" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="74" pos:column="5">/* now set the new struct */</comment>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">sigaction<pos:position pos:line="75" pos:column="14"/></name><argument_list pos:line="75" pos:column="14">(<argument><expr><name pos:line="75" pos:column="15">SIGALRM<pos:position pos:line="75" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="24">&amp;<pos:position pos:line="75" pos:column="29"/></operator><name pos:line="75" pos:column="25">sigact<pos:position pos:line="75" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="33">NULL<pos:position pos:line="75" pos:column="37"/></name></expr></argument>)<pos:position pos:line="75" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="39"/></expr_stmt>
<cpp:else pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">else<pos:position pos:line="76" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="76" pos:column="7">/* HAVE_SIGACTION */</comment>
    <comment type="block" pos:line="77" pos:column="5">/* no sigaction(), revert to the much lamer signal() */</comment>
<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef<pos:position pos:line="78" pos:column="7"/></cpp:directive> <name pos:line="78" pos:column="8">HAVE_SIGNAL<pos:position pos:line="78" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="79" pos:column="5">keep_sigact<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">=<pos:position pos:line="79" pos:column="18"/></operator> <call><name pos:line="79" pos:column="19">signal<pos:position pos:line="79" pos:column="25"/></name><argument_list pos:line="79" pos:column="25">(<argument><expr><name pos:line="79" pos:column="26">SIGALRM<pos:position pos:line="79" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="35">alarmfunc<pos:position pos:line="79" pos:column="44"/></name></expr></argument>)<pos:position pos:line="79" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="81" pos:column="8">/* HAVE_SIGACTION */</comment>

    <comment type="block" pos:line="83" pos:column="5">/* alarm() makes a signal get sent when the timeout fires off, and that
       will abort system calls */</comment>
    <expr_stmt><expr><name pos:line="85" pos:column="5">prev_alarm<pos:position pos:line="85" pos:column="15"/></name> <operator pos:line="85" pos:column="16">=<pos:position pos:line="85" pos:column="17"/></operator> <call><name pos:line="85" pos:column="18">alarm<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><call><name pos:line="85" pos:column="24">curlx_sltoui<pos:position pos:line="85" pos:column="36"/></name><argument_list pos:line="85" pos:column="36">(<argument><expr><name pos:line="85" pos:column="37">timeout<pos:position pos:line="85" pos:column="44"/></name><operator pos:line="85" pos:column="44">/<pos:position pos:line="85" pos:column="45"/></operator><literal type="number" pos:line="85" pos:column="45">1000L<pos:position pos:line="85" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="86" pos:column="4"/></block></else></if>

<cpp:else pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">else<pos:position pos:line="88" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifndef pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">ifndef<pos:position pos:line="89" pos:column="8"/></cpp:directive> <name pos:line="89" pos:column="9">CURLRES_ASYNCH<pos:position pos:line="89" pos:column="23"/></name></cpp:ifndef>
  <if pos:line="90" pos:column="3">if<condition pos:line="90" pos:column="5">(<expr><name pos:line="90" pos:column="6">timeoutms<pos:position pos:line="90" pos:column="15"/></name></expr>)<pos:position pos:line="90" pos:column="16"/></condition><then pos:line="90" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="5">infof<pos:position pos:line="91" pos:column="10"/></name><argument_list pos:line="91" pos:column="10">(<argument><expr><name><name pos:line="91" pos:column="11">conn<pos:position pos:line="91" pos:column="15"/></name><operator pos:line="91" pos:column="15">-&gt;<pos:position pos:line="91" pos:column="20"/></operator><name pos:line="91" pos:column="17">data<pos:position pos:line="91" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="23">"timeout on name lookup is not supported\n"<pos:position pos:line="91" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="68"/></expr_stmt></block></then></if>
<cpp:else pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">else<pos:position pos:line="92" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="93" pos:column="3">(<pos:position pos:line="93" pos:column="4"/></operator><name pos:line="93" pos:column="4">void<pos:position pos:line="93" pos:column="8"/></name><operator pos:line="93" pos:column="8">)<pos:position pos:line="93" pos:column="9"/></operator><name pos:line="93" pos:column="9">timeoutms<pos:position pos:line="93" pos:column="18"/></name></expr>;<pos:position pos:line="93" pos:column="19"/></expr_stmt> <comment type="block" pos:line="93" pos:column="20">/* timeoutms not used with an async resolver */</comment>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="95" pos:column="8">/* USE_ALARM_TIMEOUT */</comment>

  <comment type="block" pos:line="97" pos:column="3">/* Perform the actual name resolution. This might be interrupted by an
   * alarm if it takes too long.
   */</comment>
  <expr_stmt><expr><name pos:line="100" pos:column="3">rc<pos:position pos:line="100" pos:column="5"/></name> <operator pos:line="100" pos:column="6">=<pos:position pos:line="100" pos:column="7"/></operator> <call><name pos:line="100" pos:column="8">Curl_resolv<pos:position pos:line="100" pos:column="19"/></name><argument_list pos:line="100" pos:column="19">(<argument><expr><name pos:line="100" pos:column="20">conn<pos:position pos:line="100" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="26">hostname<pos:position pos:line="100" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="36">port<pos:position pos:line="100" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="42">entry<pos:position pos:line="100" pos:column="47"/></name></expr></argument>)<pos:position pos:line="100" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="49"/></expr_stmt>

<cpp:ifdef pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">ifdef<pos:position pos:line="102" pos:column="7"/></cpp:directive> <name pos:line="102" pos:column="8">USE_ALARM_TIMEOUT<pos:position pos:line="102" pos:column="25"/></name></cpp:ifdef>
<label><name pos:line="103" pos:column="1">clean_up<pos:position pos:line="103" pos:column="9"/></name>:<pos:position pos:line="103" pos:column="10"/></label>

  <if pos:line="105" pos:column="3">if<condition pos:line="105" pos:column="5">(<expr><operator pos:line="105" pos:column="6">!<pos:position pos:line="105" pos:column="7"/></operator><name pos:line="105" pos:column="7">prev_alarm<pos:position pos:line="105" pos:column="17"/></name></expr>)<pos:position pos:line="105" pos:column="18"/></condition><then pos:line="105" pos:column="18">
    <comment type="block" pos:line="106" pos:column="5">/* deactivate a possibly active alarm before uninstalling the handler */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="107" pos:column="5">alarm<pos:position pos:line="107" pos:column="10"/></name><argument_list pos:line="107" pos:column="10">(<argument><expr><literal type="number" pos:line="107" pos:column="11">0<pos:position pos:line="107" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="14"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">ifdef<pos:position pos:line="109" pos:column="7"/></cpp:directive> <name pos:line="109" pos:column="8">HAVE_SIGACTION<pos:position pos:line="109" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="110" pos:column="3">if<condition pos:line="110" pos:column="5">(<expr><name pos:line="110" pos:column="6">keep_copysig<pos:position pos:line="110" pos:column="18"/></name></expr>)<pos:position pos:line="110" pos:column="19"/></condition><then pos:line="110" pos:column="19"> <block pos:line="110" pos:column="20">{
    <comment type="block" pos:line="111" pos:column="5">/* we got a struct as it looked before, now put that one back nice
       and clean */</comment>
    <expr_stmt><expr><call><name pos:line="113" pos:column="5">sigaction<pos:position pos:line="113" pos:column="14"/></name><argument_list pos:line="113" pos:column="14">(<argument><expr><name pos:line="113" pos:column="15">SIGALRM<pos:position pos:line="113" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="24">&amp;<pos:position pos:line="113" pos:column="29"/></operator><name pos:line="113" pos:column="25">keep_sigact<pos:position pos:line="113" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="38">NULL<pos:position pos:line="113" pos:column="42"/></name></expr></argument>)<pos:position pos:line="113" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="44"/></expr_stmt> <comment type="block" pos:line="113" pos:column="45">/* put it back */</comment>
  }<pos:position pos:line="114" pos:column="4"/></block></then></if>
<cpp:else pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">else<pos:position pos:line="115" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">ifdef<pos:position pos:line="116" pos:column="7"/></cpp:directive> <name pos:line="116" pos:column="8">HAVE_SIGNAL<pos:position pos:line="116" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" pos:line="117" pos:column="3">/* restore the previous SIGALRM handler */</comment>
  <expr_stmt><expr><call><name pos:line="118" pos:column="3">signal<pos:position pos:line="118" pos:column="9"/></name><argument_list pos:line="118" pos:column="9">(<argument><expr><name pos:line="118" pos:column="10">SIGALRM<pos:position pos:line="118" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="19">keep_sigact<pos:position pos:line="118" pos:column="30"/></name></expr></argument>)<pos:position pos:line="118" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">endif<pos:position pos:line="119" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">endif<pos:position pos:line="120" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="120" pos:column="8">/* HAVE_SIGACTION */</comment>

  <comment type="block" pos:line="122" pos:column="3">/* switch back the alarm() to either zero or to what it was before minus
     the time we spent until now! */</comment>
  <if pos:line="124" pos:column="3">if<condition pos:line="124" pos:column="5">(<expr><name pos:line="124" pos:column="6">prev_alarm<pos:position pos:line="124" pos:column="16"/></name></expr>)<pos:position pos:line="124" pos:column="17"/></condition><then pos:line="124" pos:column="17"> <block pos:line="124" pos:column="18">{
    <comment type="block" pos:line="125" pos:column="5">/* there was an alarm() set before us, now put it back */</comment>
    <decl_stmt><decl><type><name pos:line="126" pos:column="5">unsigned<pos:position pos:line="126" pos:column="13"/></name> <name pos:line="126" pos:column="14">long<pos:position pos:line="126" pos:column="18"/></name></type> <name pos:line="126" pos:column="19">elapsed_secs<pos:position pos:line="126" pos:column="31"/></name> <init pos:line="126" pos:column="32">= <expr><call pos:line="126" pos:column="34">(<name pos:line="126" pos:column="35">unsigned<pos:position pos:line="126" pos:column="43"/></name> <name pos:line="126" pos:column="44">long<pos:position pos:line="126" pos:column="48"/></name>) <argument_list pos:line="126" pos:column="50">(<argument><expr><call><name pos:line="126" pos:column="51">Curl_tvdiff<pos:position pos:line="126" pos:column="62"/></name><argument_list pos:line="126" pos:column="62">(<argument><expr><call><name pos:line="126" pos:column="63">Curl_tvnow<pos:position pos:line="126" pos:column="73"/></name><argument_list pos:line="126" pos:column="73">()<pos:position pos:line="126" pos:column="75"/></argument_list></call></expr></argument>,
                                   <argument><expr><name><name pos:line="127" pos:column="36">conn<pos:position pos:line="127" pos:column="40"/></name><operator pos:line="127" pos:column="40">-&gt;<pos:position pos:line="127" pos:column="45"/></operator><name pos:line="127" pos:column="42">created<pos:position pos:line="127" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="50"/></argument_list></call> <operator pos:line="127" pos:column="51">/<pos:position pos:line="127" pos:column="52"/></operator> <literal type="number" pos:line="127" pos:column="53">1000<pos:position pos:line="127" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="127" pos:column="59"/></decl_stmt>

    <comment type="block" pos:line="129" pos:column="5">/* the alarm period is counted in even number of seconds */</comment>
    <decl_stmt><decl><type><name pos:line="130" pos:column="5">unsigned<pos:position pos:line="130" pos:column="13"/></name> <name pos:line="130" pos:column="14">long<pos:position pos:line="130" pos:column="18"/></name></type> <name pos:line="130" pos:column="19">alarm_set<pos:position pos:line="130" pos:column="28"/></name> <init pos:line="130" pos:column="29">= <expr><name pos:line="130" pos:column="31">prev_alarm<pos:position pos:line="130" pos:column="41"/></name> <operator pos:line="130" pos:column="42">-<pos:position pos:line="130" pos:column="43"/></operator> <name pos:line="130" pos:column="44">elapsed_secs<pos:position pos:line="130" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="130" pos:column="57"/></decl_stmt>

    <if pos:line="132" pos:column="5">if<condition pos:line="132" pos:column="7">(<expr><operator pos:line="132" pos:column="8">!<pos:position pos:line="132" pos:column="9"/></operator><name pos:line="132" pos:column="9">alarm_set<pos:position pos:line="132" pos:column="18"/></name> <operator pos:line="132" pos:column="19">||<pos:position pos:line="132" pos:column="21"/></operator>
       <operator pos:line="133" pos:column="8">(<pos:position pos:line="133" pos:column="9"/></operator><operator pos:line="133" pos:column="9">(<pos:position pos:line="133" pos:column="10"/></operator><name pos:line="133" pos:column="10">alarm_set<pos:position pos:line="133" pos:column="19"/></name> <operator pos:line="133" pos:column="20">&gt;=<pos:position pos:line="133" pos:column="25"/></operator> <literal type="number" pos:line="133" pos:column="23">0x80000000<pos:position pos:line="133" pos:column="33"/></literal><operator pos:line="133" pos:column="33">)<pos:position pos:line="133" pos:column="34"/></operator> <operator pos:line="133" pos:column="35">&amp;&amp;<pos:position pos:line="133" pos:column="45"/></operator> <operator pos:line="133" pos:column="38">(<pos:position pos:line="133" pos:column="39"/></operator><name pos:line="133" pos:column="39">prev_alarm<pos:position pos:line="133" pos:column="49"/></name> <operator pos:line="133" pos:column="50">&lt;<pos:position pos:line="133" pos:column="54"/></operator> <literal type="number" pos:line="133" pos:column="52">0x80000000<pos:position pos:line="133" pos:column="62"/></literal><operator pos:line="133" pos:column="62">)<pos:position pos:line="133" pos:column="63"/></operator><operator pos:line="133" pos:column="63">)<pos:position pos:line="133" pos:column="64"/></operator></expr> )<pos:position pos:line="133" pos:column="66"/></condition><then pos:line="133" pos:column="66"> <block pos:line="133" pos:column="67">{
      <comment type="block" pos:line="134" pos:column="7">/* if the alarm time-left reached zero or turned "negative" (counted
         with unsigned values), we should fire off a SIGALRM here, but we
         won't, and zero would be to switch it off so we never set it to
         less than 1! */</comment>
      <expr_stmt><expr><call><name pos:line="138" pos:column="7">alarm<pos:position pos:line="138" pos:column="12"/></name><argument_list pos:line="138" pos:column="12">(<argument><expr><literal type="number" pos:line="138" pos:column="13">1<pos:position pos:line="138" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="139" pos:column="7">rc<pos:position pos:line="139" pos:column="9"/></name> <operator pos:line="139" pos:column="10">=<pos:position pos:line="139" pos:column="11"/></operator> <name pos:line="139" pos:column="12">CURLRESOLV_TIMEDOUT<pos:position pos:line="139" pos:column="31"/></name></expr>;<pos:position pos:line="139" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="140" pos:column="7">failf<pos:position pos:line="140" pos:column="12"/></name><argument_list pos:line="140" pos:column="12">(<argument><expr><name pos:line="140" pos:column="13">data<pos:position pos:line="140" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="19">"Previous alarm fired off!"<pos:position pos:line="140" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="141" pos:column="6"/></block></then>
    <else pos:line="142" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="7">alarm<pos:position pos:line="143" pos:column="12"/></name><argument_list pos:line="143" pos:column="12">(<argument><expr><operator pos:line="143" pos:column="13">(<pos:position pos:line="143" pos:column="14"/></operator><name pos:line="143" pos:column="14">unsigned<pos:position pos:line="143" pos:column="22"/></name> <name pos:line="143" pos:column="23">int<pos:position pos:line="143" pos:column="26"/></name><operator pos:line="143" pos:column="26">)<pos:position pos:line="143" pos:column="27"/></operator><name pos:line="143" pos:column="27">alarm_set<pos:position pos:line="143" pos:column="36"/></name></expr></argument>)<pos:position pos:line="143" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="38"/></expr_stmt></block></else></if>
  }<pos:position pos:line="144" pos:column="4"/></block></then></if>
<cpp:endif pos:line="145" pos:column="1">#<cpp:directive pos:line="145" pos:column="2">endif<pos:position pos:line="145" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="145" pos:column="8">/* USE_ALARM_TIMEOUT */</comment>

  <return pos:line="147" pos:column="3">return <expr><name pos:line="147" pos:column="10">rc<pos:position pos:line="147" pos:column="12"/></name></expr>;<pos:position pos:line="147" pos:column="13"/></return>
}<pos:position pos:line="148" pos:column="2"/></block></function></unit>
