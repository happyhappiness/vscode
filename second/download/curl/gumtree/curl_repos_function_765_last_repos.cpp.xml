<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_765_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">curl_socket_t<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">sockdaemon<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">curl_socket_t<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">sock<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">unsigned<pos:position pos:line="2" pos:column="41"/></name> <name pos:line="2" pos:column="42">short<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">listenport<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <comment type="block" pos:line="4" pos:column="3">/* passive daemon style */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">srvr_sockaddr_union_t<pos:position pos:line="5" pos:column="24"/></name></type> <name pos:line="5" pos:column="25">listener<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">flag<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">rc<pos:position pos:line="7" pos:column="9"/></name></decl>;<pos:position pos:line="7" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">totdelay<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">maxretr<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><literal type="number" pos:line="9" pos:column="17">10<pos:position pos:line="9" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">delay<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><literal type="number" pos:line="10" pos:column="15">20<pos:position pos:line="10" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">attempt<pos:position pos:line="11" pos:column="14"/></name> <init pos:line="11" pos:column="15">= <expr><literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">error<pos:position pos:line="12" pos:column="12"/></name> <init pos:line="12" pos:column="13">= <expr><literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>

  <do pos:line="14" pos:column="3">do <block pos:line="14" pos:column="6">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">attempt<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">++<pos:position pos:line="15" pos:column="14"/></operator></expr>;<pos:position pos:line="15" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">flag<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <literal type="number" pos:line="16" pos:column="12">1<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">rc<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">setsockopt<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">sock<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="27">SOL_SOCKET<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">SO_REUSEADDR<pos:position pos:line="17" pos:column="51"/></name></expr></argument>,
         <argument><expr><operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">void<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></operator><operator pos:line="18" pos:column="17">)<pos:position pos:line="18" pos:column="18"/></operator><operator pos:line="18" pos:column="18">&amp;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="19">flag<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="25">sizeof<argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">flag<pos:position pos:line="18" pos:column="36"/></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><name pos:line="19" pos:column="8">rc<pos:position pos:line="19" pos:column="10"/></name></expr>)<pos:position pos:line="19" pos:column="11"/></condition><then pos:line="19" pos:column="11"> <block pos:line="19" pos:column="12">{
      <expr_stmt><expr><name pos:line="20" pos:column="7">error<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name pos:line="20" pos:column="15">SOCKERRNO<pos:position pos:line="20" pos:column="24"/></name></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">logmsg<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><literal type="string" pos:line="21" pos:column="14">"setsockopt(SO_REUSEADDR) failed with error: (%d) %s"<pos:position pos:line="21" pos:column="67"/></literal></expr></argument>,
             <argument><expr><name pos:line="22" pos:column="14">error<pos:position pos:line="22" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="21">strerror<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">error<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><name pos:line="23" pos:column="10">maxretr<pos:position pos:line="23" pos:column="17"/></name></expr>)<pos:position pos:line="23" pos:column="18"/></condition><then pos:line="23" pos:column="18"> <block pos:line="23" pos:column="19">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">rc<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">wait_ms<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">delay<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
        <if pos:line="25" pos:column="9">if<condition pos:line="25" pos:column="11">(<expr><name pos:line="25" pos:column="12">rc<pos:position pos:line="25" pos:column="14"/></name></expr>)<pos:position pos:line="25" pos:column="15"/></condition><then pos:line="25" pos:column="15"> <block pos:line="25" pos:column="16">{
          <comment type="block" pos:line="26" pos:column="11">/* should not happen */</comment>
          <expr_stmt><expr><name pos:line="27" pos:column="11">error<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">errno<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="28" pos:column="11">logmsg<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><literal type="string" pos:line="28" pos:column="18">"wait_ms() failed with error: (%d) %s"<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>,
                 <argument><expr><name pos:line="29" pos:column="18">error<pos:position pos:line="29" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="25">strerror<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name pos:line="29" pos:column="34">error<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="30" pos:column="11">sclose<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">sock<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
          <return pos:line="31" pos:column="11">return <expr><name pos:line="31" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="31" pos:column="33"/></name></expr>;<pos:position pos:line="31" pos:column="34"/></return>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>
        <if pos:line="33" pos:column="9">if<condition pos:line="33" pos:column="11">(<expr><name pos:line="33" pos:column="12">got_exit_signal<pos:position pos:line="33" pos:column="27"/></name></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28"> <block pos:line="33" pos:column="29">{
          <expr_stmt><expr><call><name pos:line="34" pos:column="11">logmsg<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><literal type="string" pos:line="34" pos:column="18">"signalled to die, exiting..."<pos:position pos:line="34" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="35" pos:column="11">sclose<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">sock<pos:position pos:line="35" pos:column="22"/></name></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
          <return pos:line="36" pos:column="11">return <expr><name pos:line="36" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="36" pos:column="33"/></name></expr>;<pos:position pos:line="36" pos:column="34"/></return>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="38" pos:column="9">totdelay<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">+=<pos:position pos:line="38" pos:column="20"/></operator> <name pos:line="38" pos:column="21">delay<pos:position pos:line="38" pos:column="26"/></name></expr>;<pos:position pos:line="38" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">delay<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">*=<pos:position pos:line="39" pos:column="17"/></operator> <literal type="number" pos:line="39" pos:column="18">2<pos:position pos:line="39" pos:column="19"/></literal></expr>;<pos:position pos:line="39" pos:column="20"/></expr_stmt> <comment type="block" pos:line="39" pos:column="21">/* double the sleep for next attempt */</comment>
      }<pos:position pos:line="40" pos:column="8"/></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
  }<pos:position pos:line="42" pos:column="4"/></block> while<condition pos:line="42" pos:column="10">(<expr><name pos:line="42" pos:column="11">rc<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">&amp;&amp;<pos:position pos:line="42" pos:column="24"/></operator> <name pos:line="42" pos:column="17">maxretr<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">--<pos:position pos:line="42" pos:column="26"/></operator></expr>)<pos:position pos:line="42" pos:column="27"/></condition>;<pos:position pos:line="42" pos:column="28"/></do>

  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><name pos:line="44" pos:column="6">rc<pos:position pos:line="44" pos:column="8"/></name></expr>)<pos:position pos:line="44" pos:column="9"/></condition><then pos:line="44" pos:column="9"> <block pos:line="44" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">logmsg<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><literal type="string" pos:line="45" pos:column="12">"setsockopt(SO_REUSEADDR) failed %d times in %d ms. Error: (%d) %s"<pos:position pos:line="45" pos:column="79"/></literal></expr></argument>,
           <argument><expr><name pos:line="46" pos:column="12">attempt<pos:position pos:line="46" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="21">totdelay<pos:position pos:line="46" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="31">error<pos:position pos:line="46" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="38">strerror<pos:position pos:line="46" pos:column="46"/></name><argument_list pos:line="46" pos:column="46">(<argument><expr><name pos:line="46" pos:column="47">error<pos:position pos:line="46" pos:column="52"/></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">logmsg<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><literal type="string" pos:line="47" pos:column="12">"Continuing anyway..."<pos:position pos:line="47" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="50" pos:column="3">/* When the specified listener port is zero, it is actually a
     request to let the system choose a non-zero available port. */</comment>

<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef<pos:position pos:line="53" pos:column="7"/></cpp:directive> <name pos:line="53" pos:column="8">ENABLE_IPV6<pos:position pos:line="53" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">(<expr><operator pos:line="54" pos:column="6">!<pos:position pos:line="54" pos:column="7"/></operator><name pos:line="54" pos:column="7">use_ipv6<pos:position pos:line="54" pos:column="15"/></name></expr>)<pos:position pos:line="54" pos:column="16"/></condition><then pos:line="54" pos:column="16"> <block pos:line="54" pos:column="17">{
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">memset<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><operator pos:line="56" pos:column="12">&amp;<pos:position pos:line="56" pos:column="17"/></operator><name><name pos:line="56" pos:column="13">listener<pos:position pos:line="56" pos:column="21"/></name><operator pos:line="56" pos:column="21">.<pos:position pos:line="56" pos:column="22"/></operator><name pos:line="56" pos:column="22">sa4<pos:position pos:line="56" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="27">0<pos:position pos:line="56" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="30">sizeof<argument_list pos:line="56" pos:column="36">(<argument><expr><name><name pos:line="56" pos:column="37">listener<pos:position pos:line="56" pos:column="45"/></name><operator pos:line="56" pos:column="45">.<pos:position pos:line="56" pos:column="46"/></operator><name pos:line="56" pos:column="46">sa4<pos:position pos:line="56" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">listener<pos:position pos:line="57" pos:column="13"/></name><operator pos:line="57" pos:column="13">.<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">sa4<pos:position pos:line="57" pos:column="17"/></name><operator pos:line="57" pos:column="17">.<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="18">sin_family<pos:position pos:line="57" pos:column="28"/></name></name> <operator pos:line="57" pos:column="29">=<pos:position pos:line="57" pos:column="30"/></operator> <name pos:line="57" pos:column="31">AF_INET<pos:position pos:line="57" pos:column="38"/></name></expr>;<pos:position pos:line="57" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">listener<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">.<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="14">sa4<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">.<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="18">sin_addr<pos:position pos:line="58" pos:column="26"/></name><operator pos:line="58" pos:column="26">.<pos:position pos:line="58" pos:column="27"/></operator><name pos:line="58" pos:column="27">s_addr<pos:position pos:line="58" pos:column="33"/></name></name> <operator pos:line="58" pos:column="34">=<pos:position pos:line="58" pos:column="35"/></operator> <name pos:line="58" pos:column="36">INADDR_ANY<pos:position pos:line="58" pos:column="46"/></name></expr>;<pos:position pos:line="58" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="59" pos:column="5">listener<pos:position pos:line="59" pos:column="13"/></name><operator pos:line="59" pos:column="13">.<pos:position pos:line="59" pos:column="14"/></operator><name pos:line="59" pos:column="14">sa4<pos:position pos:line="59" pos:column="17"/></name><operator pos:line="59" pos:column="17">.<pos:position pos:line="59" pos:column="18"/></operator><name pos:line="59" pos:column="18">sin_port<pos:position pos:line="59" pos:column="26"/></name></name> <operator pos:line="59" pos:column="27">=<pos:position pos:line="59" pos:column="28"/></operator> <call><name pos:line="59" pos:column="29">htons<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><operator pos:line="59" pos:column="35">*<pos:position pos:line="59" pos:column="36"/></operator><name pos:line="59" pos:column="36">listenport<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">rc<pos:position pos:line="60" pos:column="7"/></name> <operator pos:line="60" pos:column="8">=<pos:position pos:line="60" pos:column="9"/></operator> <call><name pos:line="60" pos:column="10">bind<pos:position pos:line="60" pos:column="14"/></name><argument_list pos:line="60" pos:column="14">(<argument><expr><name pos:line="60" pos:column="15">sock<pos:position pos:line="60" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="21">&amp;<pos:position pos:line="60" pos:column="26"/></operator><name><name pos:line="60" pos:column="22">listener<pos:position pos:line="60" pos:column="30"/></name><operator pos:line="60" pos:column="30">.<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="31">sa<pos:position pos:line="60" pos:column="33"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="35">sizeof<argument_list pos:line="60" pos:column="41">(<argument><expr><name><name pos:line="60" pos:column="42">listener<pos:position pos:line="60" pos:column="50"/></name><operator pos:line="60" pos:column="50">.<pos:position pos:line="60" pos:column="51"/></operator><name pos:line="60" pos:column="51">sa4<pos:position pos:line="60" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt>
<cpp:ifdef pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">ifdef<pos:position pos:line="61" pos:column="7"/></cpp:directive> <name pos:line="61" pos:column="8">ENABLE_IPV6<pos:position pos:line="61" pos:column="19"/></name></cpp:ifdef>
  }<pos:position pos:line="62" pos:column="4"/></block></then>
  <else pos:line="63" pos:column="3">else <block pos:line="63" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">memset<pos:position pos:line="64" pos:column="11"/></name><argument_list pos:line="64" pos:column="11">(<argument><expr><operator pos:line="64" pos:column="12">&amp;<pos:position pos:line="64" pos:column="17"/></operator><name><name pos:line="64" pos:column="13">listener<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">.<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="22">sa6<pos:position pos:line="64" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="27">0<pos:position pos:line="64" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="30">sizeof<argument_list pos:line="64" pos:column="36">(<argument><expr><name><name pos:line="64" pos:column="37">listener<pos:position pos:line="64" pos:column="45"/></name><operator pos:line="64" pos:column="45">.<pos:position pos:line="64" pos:column="46"/></operator><name pos:line="64" pos:column="46">sa6<pos:position pos:line="64" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="65" pos:column="5">listener<pos:position pos:line="65" pos:column="13"/></name><operator pos:line="65" pos:column="13">.<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">sa6<pos:position pos:line="65" pos:column="17"/></name><operator pos:line="65" pos:column="17">.<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="18">sin6_family<pos:position pos:line="65" pos:column="29"/></name></name> <operator pos:line="65" pos:column="30">=<pos:position pos:line="65" pos:column="31"/></operator> <name pos:line="65" pos:column="32">AF_INET6<pos:position pos:line="65" pos:column="40"/></name></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">listener<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">.<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">sa6<pos:position pos:line="66" pos:column="17"/></name><operator pos:line="66" pos:column="17">.<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="18">sin6_addr<pos:position pos:line="66" pos:column="27"/></name></name> <operator pos:line="66" pos:column="28">=<pos:position pos:line="66" pos:column="29"/></operator> <name pos:line="66" pos:column="30">in6addr_any<pos:position pos:line="66" pos:column="41"/></name></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="67" pos:column="5">listener<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">.<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">sa6<pos:position pos:line="67" pos:column="17"/></name><operator pos:line="67" pos:column="17">.<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="18">sin6_port<pos:position pos:line="67" pos:column="27"/></name></name> <operator pos:line="67" pos:column="28">=<pos:position pos:line="67" pos:column="29"/></operator> <call><name pos:line="67" pos:column="30">htons<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">(<argument><expr><operator pos:line="67" pos:column="36">*<pos:position pos:line="67" pos:column="37"/></operator><name pos:line="67" pos:column="37">listenport<pos:position pos:line="67" pos:column="47"/></name></expr></argument>)<pos:position pos:line="67" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="68" pos:column="5">rc<pos:position pos:line="68" pos:column="7"/></name> <operator pos:line="68" pos:column="8">=<pos:position pos:line="68" pos:column="9"/></operator> <call><name pos:line="68" pos:column="10">bind<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">(<argument><expr><name pos:line="68" pos:column="15">sock<pos:position pos:line="68" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="21">&amp;<pos:position pos:line="68" pos:column="26"/></operator><name><name pos:line="68" pos:column="22">listener<pos:position pos:line="68" pos:column="30"/></name><operator pos:line="68" pos:column="30">.<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="31">sa<pos:position pos:line="68" pos:column="33"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="35">sizeof<argument_list pos:line="68" pos:column="41">(<argument><expr><name><name pos:line="68" pos:column="42">listener<pos:position pos:line="68" pos:column="50"/></name><operator pos:line="68" pos:column="50">.<pos:position pos:line="68" pos:column="51"/></operator><name pos:line="68" pos:column="51">sa6<pos:position pos:line="68" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="69" pos:column="4"/></block></else></if>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="70" pos:column="8">/* ENABLE_IPV6 */</comment>
  <if pos:line="71" pos:column="3">if<condition pos:line="71" pos:column="5">(<expr><name pos:line="71" pos:column="6">rc<pos:position pos:line="71" pos:column="8"/></name></expr>)<pos:position pos:line="71" pos:column="9"/></condition><then pos:line="71" pos:column="9"> <block pos:line="71" pos:column="10">{
    <expr_stmt><expr><name pos:line="72" pos:column="5">error<pos:position pos:line="72" pos:column="10"/></name> <operator pos:line="72" pos:column="11">=<pos:position pos:line="72" pos:column="12"/></operator> <name pos:line="72" pos:column="13">SOCKERRNO<pos:position pos:line="72" pos:column="22"/></name></expr>;<pos:position pos:line="72" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">logmsg<pos:position pos:line="73" pos:column="11"/></name><argument_list pos:line="73" pos:column="11">(<argument><expr><literal type="string" pos:line="73" pos:column="12">"Error binding socket on port %hu: (%d) %s"<pos:position pos:line="73" pos:column="55"/></literal></expr></argument>,
           <argument><expr><operator pos:line="74" pos:column="12">*<pos:position pos:line="74" pos:column="13"/></operator><name pos:line="74" pos:column="13">listenport<pos:position pos:line="74" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="25">error<pos:position pos:line="74" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="32">strerror<pos:position pos:line="74" pos:column="40"/></name><argument_list pos:line="74" pos:column="40">(<argument><expr><name pos:line="74" pos:column="41">error<pos:position pos:line="74" pos:column="46"/></name></expr></argument>)<pos:position pos:line="74" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">sclose<pos:position pos:line="75" pos:column="11"/></name><argument_list pos:line="75" pos:column="11">(<argument><expr><name pos:line="75" pos:column="12">sock<pos:position pos:line="75" pos:column="16"/></name></expr></argument>)<pos:position pos:line="75" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="18"/></expr_stmt>
    <return pos:line="76" pos:column="5">return <expr><name pos:line="76" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="76" pos:column="27"/></name></expr>;<pos:position pos:line="76" pos:column="28"/></return>
  }<pos:position pos:line="77" pos:column="4"/></block></then></if>

  <if pos:line="79" pos:column="3">if<condition pos:line="79" pos:column="5">(<expr><operator pos:line="79" pos:column="6">!<pos:position pos:line="79" pos:column="7"/></operator><operator pos:line="79" pos:column="7">*<pos:position pos:line="79" pos:column="8"/></operator><name pos:line="79" pos:column="8">listenport<pos:position pos:line="79" pos:column="18"/></name></expr>)<pos:position pos:line="79" pos:column="19"/></condition><then pos:line="79" pos:column="19"> <block pos:line="79" pos:column="20">{
    <comment type="block" pos:line="80" pos:column="5">/* The system was supposed to choose a port number, figure out which
       port we actually got and update the listener port value with it. */</comment>
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">curl_socklen_t<pos:position pos:line="82" pos:column="19"/></name></type> <name pos:line="82" pos:column="20">la_size<pos:position pos:line="82" pos:column="27"/></name></decl>;<pos:position pos:line="82" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="83" pos:column="5">srvr_sockaddr_union_t<pos:position pos:line="83" pos:column="26"/></name></type> <name pos:line="83" pos:column="27">localaddr<pos:position pos:line="83" pos:column="36"/></name></decl>;<pos:position pos:line="83" pos:column="37"/></decl_stmt>
<cpp:ifdef pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">ifdef<pos:position pos:line="84" pos:column="7"/></cpp:directive> <name pos:line="84" pos:column="8">ENABLE_IPV6<pos:position pos:line="84" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="85" pos:column="5">if<condition pos:line="85" pos:column="7">(<expr><operator pos:line="85" pos:column="8">!<pos:position pos:line="85" pos:column="9"/></operator><name pos:line="85" pos:column="9">use_ipv6<pos:position pos:line="85" pos:column="17"/></name></expr>)<pos:position pos:line="85" pos:column="18"/></condition><then pos:line="85" pos:column="18">
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>
      <block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="7">la_size<pos:position pos:line="87" pos:column="14"/></name> <operator pos:line="87" pos:column="15">=<pos:position pos:line="87" pos:column="16"/></operator> <sizeof pos:line="87" pos:column="17">sizeof<argument_list pos:line="87" pos:column="23">(<argument><expr><name><name pos:line="87" pos:column="24">localaddr<pos:position pos:line="87" pos:column="33"/></name><operator pos:line="87" pos:column="33">.<pos:position pos:line="87" pos:column="34"/></operator><name pos:line="87" pos:column="34">sa4<pos:position pos:line="87" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="87" pos:column="39"/></expr_stmt></block></then>
<cpp:ifdef pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">ifdef<pos:position pos:line="88" pos:column="7"/></cpp:directive> <name pos:line="88" pos:column="8">ENABLE_IPV6<pos:position pos:line="88" pos:column="19"/></name></cpp:ifdef>
    <else pos:line="89" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="7">la_size<pos:position pos:line="90" pos:column="14"/></name> <operator pos:line="90" pos:column="15">=<pos:position pos:line="90" pos:column="16"/></operator> <sizeof pos:line="90" pos:column="17">sizeof<argument_list pos:line="90" pos:column="23">(<argument><expr><name><name pos:line="90" pos:column="24">localaddr<pos:position pos:line="90" pos:column="33"/></name><operator pos:line="90" pos:column="33">.<pos:position pos:line="90" pos:column="34"/></operator><name pos:line="90" pos:column="34">sa6<pos:position pos:line="90" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="90" pos:column="39"/></expr_stmt></block></else></if>
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">memset<pos:position pos:line="92" pos:column="11"/></name><argument_list pos:line="92" pos:column="11">(<argument><expr><operator pos:line="92" pos:column="12">&amp;<pos:position pos:line="92" pos:column="17"/></operator><name><name pos:line="92" pos:column="13">localaddr<pos:position pos:line="92" pos:column="22"/></name><operator pos:line="92" pos:column="22">.<pos:position pos:line="92" pos:column="23"/></operator><name pos:line="92" pos:column="23">sa<pos:position pos:line="92" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="27">0<pos:position pos:line="92" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="92" pos:column="30">(<pos:position pos:line="92" pos:column="31"/></operator><name pos:line="92" pos:column="31">size_t<pos:position pos:line="92" pos:column="37"/></name><operator pos:line="92" pos:column="37">)<pos:position pos:line="92" pos:column="38"/></operator><name pos:line="92" pos:column="38">la_size<pos:position pos:line="92" pos:column="45"/></name></expr></argument>)<pos:position pos:line="92" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="47"/></expr_stmt>
    <if pos:line="93" pos:column="5">if<condition pos:line="93" pos:column="7">(<expr><call><name pos:line="93" pos:column="8">getsockname<pos:position pos:line="93" pos:column="19"/></name><argument_list pos:line="93" pos:column="19">(<argument><expr><name pos:line="93" pos:column="20">sock<pos:position pos:line="93" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="26">&amp;<pos:position pos:line="93" pos:column="31"/></operator><name><name pos:line="93" pos:column="27">localaddr<pos:position pos:line="93" pos:column="36"/></name><operator pos:line="93" pos:column="36">.<pos:position pos:line="93" pos:column="37"/></operator><name pos:line="93" pos:column="37">sa<pos:position pos:line="93" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="41">&amp;<pos:position pos:line="93" pos:column="46"/></operator><name pos:line="93" pos:column="42">la_size<pos:position pos:line="93" pos:column="49"/></name></expr></argument>)<pos:position pos:line="93" pos:column="50"/></argument_list></call> <operator pos:line="93" pos:column="51">&lt;<pos:position pos:line="93" pos:column="55"/></operator> <literal type="number" pos:line="93" pos:column="53">0<pos:position pos:line="93" pos:column="54"/></literal></expr>)<pos:position pos:line="93" pos:column="55"/></condition><then pos:line="93" pos:column="55"> <block pos:line="93" pos:column="56">{
      <expr_stmt><expr><name pos:line="94" pos:column="7">error<pos:position pos:line="94" pos:column="12"/></name> <operator pos:line="94" pos:column="13">=<pos:position pos:line="94" pos:column="14"/></operator> <name pos:line="94" pos:column="15">SOCKERRNO<pos:position pos:line="94" pos:column="24"/></name></expr>;<pos:position pos:line="94" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="95" pos:column="7">logmsg<pos:position pos:line="95" pos:column="13"/></name><argument_list pos:line="95" pos:column="13">(<argument><expr><literal type="string" pos:line="95" pos:column="14">"getsockname() failed with error: (%d) %s"<pos:position pos:line="95" pos:column="56"/></literal></expr></argument>,
             <argument><expr><name pos:line="96" pos:column="14">error<pos:position pos:line="96" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="96" pos:column="21">strerror<pos:position pos:line="96" pos:column="29"/></name><argument_list pos:line="96" pos:column="29">(<argument><expr><name pos:line="96" pos:column="30">error<pos:position pos:line="96" pos:column="35"/></name></expr></argument>)<pos:position pos:line="96" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="96" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">sclose<pos:position pos:line="97" pos:column="13"/></name><argument_list pos:line="97" pos:column="13">(<argument><expr><name pos:line="97" pos:column="14">sock<pos:position pos:line="97" pos:column="18"/></name></expr></argument>)<pos:position pos:line="97" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="20"/></expr_stmt>
      <return pos:line="98" pos:column="7">return <expr><name pos:line="98" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="98" pos:column="29"/></name></expr>;<pos:position pos:line="98" pos:column="30"/></return>
    }<pos:position pos:line="99" pos:column="6"/></block></then></if>
    <switch pos:line="100" pos:column="5">switch<condition pos:line="100" pos:column="11">(<expr><name><name pos:line="100" pos:column="12">localaddr<pos:position pos:line="100" pos:column="21"/></name><operator pos:line="100" pos:column="21">.<pos:position pos:line="100" pos:column="22"/></operator><name pos:line="100" pos:column="22">sa<pos:position pos:line="100" pos:column="24"/></name><operator pos:line="100" pos:column="24">.<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="25">sa_family<pos:position pos:line="100" pos:column="34"/></name></name></expr>)<pos:position pos:line="100" pos:column="35"/></condition> <block pos:line="100" pos:column="36">{
    <case pos:line="101" pos:column="5">case <expr><name pos:line="101" pos:column="10">AF_INET<pos:position pos:line="101" pos:column="17"/></name></expr>:<pos:position pos:line="101" pos:column="18"/></case>
      <expr_stmt><expr><operator pos:line="102" pos:column="7">*<pos:position pos:line="102" pos:column="8"/></operator><name pos:line="102" pos:column="8">listenport<pos:position pos:line="102" pos:column="18"/></name> <operator pos:line="102" pos:column="19">=<pos:position pos:line="102" pos:column="20"/></operator> <call><name pos:line="102" pos:column="21">ntohs<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">(<argument><expr><name><name pos:line="102" pos:column="27">localaddr<pos:position pos:line="102" pos:column="36"/></name><operator pos:line="102" pos:column="36">.<pos:position pos:line="102" pos:column="37"/></operator><name pos:line="102" pos:column="37">sa4<pos:position pos:line="102" pos:column="40"/></name><operator pos:line="102" pos:column="40">.<pos:position pos:line="102" pos:column="41"/></operator><name pos:line="102" pos:column="41">sin_port<pos:position pos:line="102" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="51"/></expr_stmt>
      <break pos:line="103" pos:column="7">break;<pos:position pos:line="103" pos:column="13"/></break>
<cpp:ifdef pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">ifdef<pos:position pos:line="104" pos:column="7"/></cpp:directive> <name pos:line="104" pos:column="8">ENABLE_IPV6<pos:position pos:line="104" pos:column="19"/></name></cpp:ifdef>
    <case pos:line="105" pos:column="5">case <expr><name pos:line="105" pos:column="10">AF_INET6<pos:position pos:line="105" pos:column="18"/></name></expr>:<pos:position pos:line="105" pos:column="19"/></case>
      <expr_stmt><expr><operator pos:line="106" pos:column="7">*<pos:position pos:line="106" pos:column="8"/></operator><name pos:line="106" pos:column="8">listenport<pos:position pos:line="106" pos:column="18"/></name> <operator pos:line="106" pos:column="19">=<pos:position pos:line="106" pos:column="20"/></operator> <call><name pos:line="106" pos:column="21">ntohs<pos:position pos:line="106" pos:column="26"/></name><argument_list pos:line="106" pos:column="26">(<argument><expr><name><name pos:line="106" pos:column="27">localaddr<pos:position pos:line="106" pos:column="36"/></name><operator pos:line="106" pos:column="36">.<pos:position pos:line="106" pos:column="37"/></operator><name pos:line="106" pos:column="37">sa6<pos:position pos:line="106" pos:column="40"/></name><operator pos:line="106" pos:column="40">.<pos:position pos:line="106" pos:column="41"/></operator><name pos:line="106" pos:column="41">sin6_port<pos:position pos:line="106" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="52"/></expr_stmt>
      <break pos:line="107" pos:column="7">break;<pos:position pos:line="107" pos:column="13"/></break>
<cpp:endif pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">endif<pos:position pos:line="108" pos:column="7"/></cpp:directive></cpp:endif>
    <default pos:line="109" pos:column="5">default:<pos:position pos:line="109" pos:column="13"/></default>
      <break pos:line="110" pos:column="7">break;<pos:position pos:line="110" pos:column="13"/></break>
    }<pos:position pos:line="111" pos:column="6"/></block></switch>
    <if pos:line="112" pos:column="5">if<condition pos:line="112" pos:column="7">(<expr><operator pos:line="112" pos:column="8">!<pos:position pos:line="112" pos:column="9"/></operator><operator pos:line="112" pos:column="9">*<pos:position pos:line="112" pos:column="10"/></operator><name pos:line="112" pos:column="10">listenport<pos:position pos:line="112" pos:column="20"/></name></expr>)<pos:position pos:line="112" pos:column="21"/></condition><then pos:line="112" pos:column="21"> <block pos:line="112" pos:column="22">{
      <comment type="block" pos:line="113" pos:column="7">/* Real failure, listener port shall not be zero beyond this point. */</comment>
      <expr_stmt><expr><call><name pos:line="114" pos:column="7">logmsg<pos:position pos:line="114" pos:column="13"/></name><argument_list pos:line="114" pos:column="13">(<argument><expr><literal type="string" pos:line="114" pos:column="14">"Apparently getsockname() succeeded, with listener port zero."<pos:position pos:line="114" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="115" pos:column="7">logmsg<pos:position pos:line="115" pos:column="13"/></name><argument_list pos:line="115" pos:column="13">(<argument><expr><literal type="string" pos:line="115" pos:column="14">"A valid reason for this failure is a binary built without"<pos:position pos:line="115" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="75"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="116" pos:column="7">logmsg<pos:position pos:line="116" pos:column="13"/></name><argument_list pos:line="116" pos:column="13">(<argument><expr><literal type="string" pos:line="116" pos:column="14">"proper network library linkage. This might not be the only"<pos:position pos:line="116" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="76"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">logmsg<pos:position pos:line="117" pos:column="13"/></name><argument_list pos:line="117" pos:column="13">(<argument><expr><literal type="string" pos:line="117" pos:column="14">"reason, but double check it before anything else."<pos:position pos:line="117" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="118" pos:column="7">sclose<pos:position pos:line="118" pos:column="13"/></name><argument_list pos:line="118" pos:column="13">(<argument><expr><name pos:line="118" pos:column="14">sock<pos:position pos:line="118" pos:column="18"/></name></expr></argument>)<pos:position pos:line="118" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="20"/></expr_stmt>
      <return pos:line="119" pos:column="7">return <expr><name pos:line="119" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="119" pos:column="29"/></name></expr>;<pos:position pos:line="119" pos:column="30"/></return>
    }<pos:position pos:line="120" pos:column="6"/></block></then></if>
  }<pos:position pos:line="121" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="123" pos:column="3">/* bindonly option forces no listening */</comment>
  <if pos:line="124" pos:column="3">if<condition pos:line="124" pos:column="5">(<expr><name pos:line="124" pos:column="6">bind_only<pos:position pos:line="124" pos:column="15"/></name></expr>)<pos:position pos:line="124" pos:column="16"/></condition><then pos:line="124" pos:column="16"> <block pos:line="124" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="125" pos:column="5">logmsg<pos:position pos:line="125" pos:column="11"/></name><argument_list pos:line="125" pos:column="11">(<argument><expr><literal type="string" pos:line="125" pos:column="12">"instructed to bind port without listening"<pos:position pos:line="125" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="57"/></expr_stmt>
    <return pos:line="126" pos:column="5">return <expr><name pos:line="126" pos:column="12">sock<pos:position pos:line="126" pos:column="16"/></name></expr>;<pos:position pos:line="126" pos:column="17"/></return>
  }<pos:position pos:line="127" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="129" pos:column="3">/* start accepting connections */</comment>
  <expr_stmt><expr><name pos:line="130" pos:column="3">rc<pos:position pos:line="130" pos:column="5"/></name> <operator pos:line="130" pos:column="6">=<pos:position pos:line="130" pos:column="7"/></operator> <call><name pos:line="130" pos:column="8">listen<pos:position pos:line="130" pos:column="14"/></name><argument_list pos:line="130" pos:column="14">(<argument><expr><name pos:line="130" pos:column="15">sock<pos:position pos:line="130" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="21">5<pos:position pos:line="130" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="24"/></expr_stmt>
  <if pos:line="131" pos:column="3">if<condition pos:line="131" pos:column="5">(<expr><literal type="number" pos:line="131" pos:column="6">0<pos:position pos:line="131" pos:column="7"/></literal> <operator pos:line="131" pos:column="8">!=<pos:position pos:line="131" pos:column="10"/></operator> <name pos:line="131" pos:column="11">rc<pos:position pos:line="131" pos:column="13"/></name></expr>)<pos:position pos:line="131" pos:column="14"/></condition><then pos:line="131" pos:column="14"> <block pos:line="131" pos:column="15">{
    <expr_stmt><expr><name pos:line="132" pos:column="5">error<pos:position pos:line="132" pos:column="10"/></name> <operator pos:line="132" pos:column="11">=<pos:position pos:line="132" pos:column="12"/></operator> <name pos:line="132" pos:column="13">SOCKERRNO<pos:position pos:line="132" pos:column="22"/></name></expr>;<pos:position pos:line="132" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">logmsg<pos:position pos:line="133" pos:column="11"/></name><argument_list pos:line="133" pos:column="11">(<argument><expr><literal type="string" pos:line="133" pos:column="12">"listen(%d, 5) failed with error: (%d) %s"<pos:position pos:line="133" pos:column="54"/></literal></expr></argument>,
           <argument><expr><name pos:line="134" pos:column="12">sock<pos:position pos:line="134" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="18">error<pos:position pos:line="134" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="134" pos:column="25">strerror<pos:position pos:line="134" pos:column="33"/></name><argument_list pos:line="134" pos:column="33">(<argument><expr><name pos:line="134" pos:column="34">error<pos:position pos:line="134" pos:column="39"/></name></expr></argument>)<pos:position pos:line="134" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="134" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">sclose<pos:position pos:line="135" pos:column="11"/></name><argument_list pos:line="135" pos:column="11">(<argument><expr><name pos:line="135" pos:column="12">sock<pos:position pos:line="135" pos:column="16"/></name></expr></argument>)<pos:position pos:line="135" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="18"/></expr_stmt>
    <return pos:line="136" pos:column="5">return <expr><name pos:line="136" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="136" pos:column="27"/></name></expr>;<pos:position pos:line="136" pos:column="28"/></return>
  }<pos:position pos:line="137" pos:column="4"/></block></then></if>

  <return pos:line="139" pos:column="3">return <expr><name pos:line="139" pos:column="10">sock<pos:position pos:line="139" pos:column="14"/></name></expr>;<pos:position pos:line="139" pos:column="15"/></return>
}<pos:position pos:line="140" pos:column="2"/></block></function></unit>
