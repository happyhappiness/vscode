<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_2513.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">dumpeasycode<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">Configurable<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">config<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">curl_slist<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">ptr<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">easycode<pos:position pos:line="3" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">o<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><name><name pos:line="4" pos:column="13">config<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">-&gt;<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="21">libcurl<pos:position pos:line="4" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><name pos:line="6" pos:column="6">o<pos:position pos:line="6" pos:column="7"/></name></expr>)<pos:position pos:line="6" pos:column="8"/></condition><then pos:line="6" pos:column="8"> <block pos:line="6" pos:column="9">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">FILE<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">out<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">bool<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">fopened<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><name pos:line="8" pos:column="20">FALSE<pos:position pos:line="8" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <if pos:line="9" pos:column="5">if<condition pos:line="9" pos:column="7">(<expr><call><name pos:line="9" pos:column="8">strcmp<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">o<pos:position pos:line="9" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="18">"-"<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
      <expr_stmt><expr><name pos:line="10" pos:column="7">out<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <call><name pos:line="10" pos:column="13">fopen<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">o<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="22">"wt"<pos:position pos:line="10" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="11" pos:column="7">fopened<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">TRUE<pos:position pos:line="11" pos:column="21"/></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then>
    <else pos:line="13" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="7">out<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <name pos:line="14" pos:column="12">stdout<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt></block></else></if>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><operator pos:line="15" pos:column="8">!<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">out<pos:position pos:line="15" pos:column="12"/></name></expr>)<pos:position pos:line="15" pos:column="13"/></condition><then pos:line="15" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="7">warnf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">config<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"Failed to open %s to write libcurl code!\n"<pos:position pos:line="16" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="67">o<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt></block></then>
    <else pos:line="17" pos:column="5">else <block pos:line="17" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="18" pos:column="7">int<pos:position pos:line="18" pos:column="10"/></name></type> <name pos:line="18" pos:column="11">i<pos:position pos:line="18" pos:column="12"/></name></decl>;<pos:position pos:line="18" pos:column="13"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="19" pos:column="7">const<pos:position pos:line="19" pos:column="12"/></specifier> <name pos:line="19" pos:column="13">char<pos:position pos:line="19" pos:column="17"/></name> <modifier pos:line="19" pos:column="18">*<pos:position pos:line="19" pos:column="19"/></modifier></type><name pos:line="19" pos:column="19">c<pos:position pos:line="19" pos:column="20"/></name></decl>;<pos:position pos:line="19" pos:column="21"/></decl_stmt>

      <for pos:line="21" pos:column="7">for<control pos:line="21" pos:column="10">(<init><expr><name pos:line="21" pos:column="11">i<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">0<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></init> <condition><expr><operator pos:line="21" pos:column="16">(<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">c<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <name><name pos:line="21" pos:column="21">srchead<pos:position pos:line="21" pos:column="28"/></name><index pos:line="21" pos:column="28">[<expr><name pos:line="21" pos:column="29">i<pos:position pos:line="21" pos:column="30"/></name></expr>]<pos:position pos:line="21" pos:column="31"/></index></name><operator pos:line="21" pos:column="31">)<pos:position pos:line="21" pos:column="32"/></operator></expr>;<pos:position pos:line="21" pos:column="33"/></condition> <incr><expr><name pos:line="21" pos:column="34">i<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">++<pos:position pos:line="21" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="38"/></control> <block pos:line="21" pos:column="39">{
        <if pos:line="22" pos:column="9">if<condition pos:line="22" pos:column="11">(<expr><operator pos:line="22" pos:column="12">!<pos:position pos:line="22" pos:column="13"/></operator><call><name pos:line="22" pos:column="13">memcmp<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><operator pos:line="22" pos:column="20">(<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">char<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">*<pos:position pos:line="22" pos:column="27"/></operator><operator pos:line="22" pos:column="27">)<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">c<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="31">"[m]"<pos:position pos:line="22" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="38">3<pos:position pos:line="22" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41"> <block pos:line="22" pos:column="42">{
<cpp:if pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">if<pos:position pos:line="23" pos:column="4"/></cpp:directive> <expr><call><name pos:line="23" pos:column="5">defined<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">_FILE_OFFSET_BITS<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call> <operator pos:line="23" pos:column="32">&amp;&amp;<pos:position pos:line="23" pos:column="42"/></operator> <operator pos:line="23" pos:column="35">(<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="36">_FILE_OFFSET_BITS<pos:position pos:line="23" pos:column="53"/></name> <operator pos:line="23" pos:column="54">&gt;<pos:position pos:line="23" pos:column="58"/></operator> <literal type="number" pos:line="23" pos:column="56">32<pos:position pos:line="23" pos:column="58"/></literal><operator pos:line="23" pos:column="58">)<pos:position pos:line="23" pos:column="59"/></operator></expr></cpp:if>
          <expr_stmt><expr><call><name pos:line="24" pos:column="11">fprintf<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">out<pos:position pos:line="24" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="24">"#define _FILE_OFFSET_BITS %d "<pos:position pos:line="24" pos:column="55"/></literal>
                  <literal type="string" pos:line="25" pos:column="19">"/* for curl_off_t magic */\n"<pos:position pos:line="25" pos:column="49"/></literal></expr></argument>,
                  <argument><expr><name pos:line="26" pos:column="19">_FILE_OFFSET_BITS<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="28" pos:column="10"/></block></then>
        <else pos:line="29" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="11">fprintf<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">out<pos:position pos:line="30" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="24">"%s\n"<pos:position pos:line="30" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="32">c<pos:position pos:line="30" pos:column="33"/></name></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt></block></else></if>
      }<pos:position pos:line="31" pos:column="8"/></block></for>

      <while pos:line="33" pos:column="7">while<condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">ptr<pos:position pos:line="33" pos:column="16"/></name></expr>)<pos:position pos:line="33" pos:column="17"/></condition> <block pos:line="33" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">fprintf<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">out<pos:position pos:line="34" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="22">"  %s\n"<pos:position pos:line="34" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="32">ptr<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">-&gt;<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="37">data<pos:position pos:line="34" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">ptr<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <name><name pos:line="35" pos:column="15">ptr<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">-&gt;<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="20">next<pos:position pos:line="35" pos:column="24"/></name></name></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="36" pos:column="8"/></block></while>
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">fprintf<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">out<pos:position pos:line="37" pos:column="18"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="38" pos:column="15">"}\n"<pos:position pos:line="38" pos:column="20"/></literal>
              <literal type="string" pos:line="39" pos:column="15">"/* */\n"<pos:position pos:line="39" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="26"/></expr_stmt>
      <if pos:line="40" pos:column="7">if<condition pos:line="40" pos:column="9">(<expr><name pos:line="40" pos:column="10">fopened<pos:position pos:line="40" pos:column="17"/></name></expr>)<pos:position pos:line="40" pos:column="18"/></condition><then pos:line="40" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="9">fclose<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">out<pos:position pos:line="41" pos:column="19"/></name></expr></argument>)<pos:position pos:line="41" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="21"/></expr_stmt></block></then></if>
    }<pos:position pos:line="42" pos:column="6"/></block></else></if>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="44" pos:column="3">curl_slist_free_all<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><name pos:line="44" pos:column="23">easycode<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
