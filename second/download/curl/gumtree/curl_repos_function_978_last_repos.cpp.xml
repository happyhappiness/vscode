<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_978_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">fwrite_xattr<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">CURL<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">curl<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">fd<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name> <init pos:line="3" pos:column="9">= <expr><literal type="number" pos:line="3" pos:column="11">0<pos:position pos:line="3" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">err<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* loop through all xattr-curlinfo pairs and abort on a set error */</comment>
  <while pos:line="7" pos:column="3">while<condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">err<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">==<pos:position pos:line="7" pos:column="15"/></operator> <literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal> <operator pos:line="7" pos:column="18">&amp;&amp;<pos:position pos:line="7" pos:column="28"/></operator> <name><name pos:line="7" pos:column="21">mappings<pos:position pos:line="7" pos:column="29"/></name><index pos:line="7" pos:column="29">[<expr><name pos:line="7" pos:column="30">i<pos:position pos:line="7" pos:column="31"/></name></expr>]<pos:position pos:line="7" pos:column="32"/></index></name><operator pos:line="7" pos:column="32">.<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">attr<pos:position pos:line="7" pos:column="37"/></name> <operator pos:line="7" pos:column="38">!=<pos:position pos:line="7" pos:column="40"/></operator> <name pos:line="7" pos:column="41">NULL<pos:position pos:line="7" pos:column="45"/></name></expr>)<pos:position pos:line="7" pos:column="46"/></condition> <block pos:line="7" pos:column="47">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">value<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name pos:line="8" pos:column="19">NULL<pos:position pos:line="8" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">CURLcode<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">result<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><call><name pos:line="9" pos:column="23">curl_easy_getinfo<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><name pos:line="9" pos:column="41">curl<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="47">mappings<pos:position pos:line="9" pos:column="55"/></name><index pos:line="9" pos:column="55">[<expr><name pos:line="9" pos:column="56">i<pos:position pos:line="9" pos:column="57"/></name></expr>]<pos:position pos:line="9" pos:column="58"/></index></name><operator pos:line="9" pos:column="58">.<pos:position pos:line="9" pos:column="59"/></operator><name pos:line="9" pos:column="59">info<pos:position pos:line="9" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="65">&amp;<pos:position pos:line="9" pos:column="70"/></operator><name pos:line="9" pos:column="66">value<pos:position pos:line="9" pos:column="71"/></name></expr></argument>)<pos:position pos:line="9" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="73"/></decl_stmt>
    <if pos:line="10" pos:column="5">if<condition pos:line="10" pos:column="7">(<expr><operator pos:line="10" pos:column="8">!<pos:position pos:line="10" pos:column="9"/></operator><name pos:line="10" pos:column="9">result<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">&amp;&amp;<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="19">value<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25"> <block pos:line="10" pos:column="26">{
<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">HAVE_FSETXATTR_6<pos:position pos:line="11" pos:column="24"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="12" pos:column="7">err<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">fsetxattr<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">fd<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="27">mappings<pos:position pos:line="12" pos:column="35"/></name><index pos:line="12" pos:column="35">[<expr><name pos:line="12" pos:column="36">i<pos:position pos:line="12" pos:column="37"/></name></expr>]<pos:position pos:line="12" pos:column="38"/></index></name><operator pos:line="12" pos:column="38">.<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="39">attr<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">value<pos:position pos:line="12" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="52">strlen<pos:position pos:line="12" pos:column="58"/></name><argument_list pos:line="12" pos:column="58">(<argument><expr><name pos:line="12" pos:column="59">value<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="67">0<pos:position pos:line="12" pos:column="68"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="70">0<pos:position pos:line="12" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="73"/></expr_stmt>
<cpp:elif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">elif<pos:position pos:line="13" pos:column="6"/></cpp:directive> <expr><call><name pos:line="13" pos:column="7">defined<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">HAVE_FSETXATTR_5<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name pos:line="14" pos:column="7">err<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">fsetxattr<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">fd<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="27">mappings<pos:position pos:line="14" pos:column="35"/></name><index pos:line="14" pos:column="35">[<expr><name pos:line="14" pos:column="36">i<pos:position pos:line="14" pos:column="37"/></name></expr>]<pos:position pos:line="14" pos:column="38"/></index></name><operator pos:line="14" pos:column="38">.<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">attr<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="45">value<pos:position pos:line="14" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="52">strlen<pos:position pos:line="14" pos:column="58"/></name><argument_list pos:line="14" pos:column="58">(<argument><expr><name pos:line="14" pos:column="59">value<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="67">0<pos:position pos:line="14" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>
<cpp:elif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">elif<pos:position pos:line="15" pos:column="6"/></cpp:directive> <expr><call><name pos:line="15" pos:column="7">defined<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">__FreeBSD_version<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name pos:line="16" pos:column="7">err<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <call><name pos:line="16" pos:column="13">extattr_set_fd<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">fd<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">EXTATTR_NAMESPACE_USER<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="56">mappings<pos:position pos:line="16" pos:column="64"/></name><index pos:line="16" pos:column="64">[<expr><name pos:line="16" pos:column="65">i<pos:position pos:line="16" pos:column="66"/></name></expr>]<pos:position pos:line="16" pos:column="67"/></index></name><operator pos:line="16" pos:column="67">.<pos:position pos:line="16" pos:column="68"/></operator><name pos:line="16" pos:column="68">attr<pos:position pos:line="16" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="74">value<pos:position pos:line="16" pos:column="79"/></name></expr></argument>,
                           <argument><expr><call><name pos:line="17" pos:column="28">strlen<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">value<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
      <comment type="block" pos:line="18" pos:column="7">/* FreeBSD's extattr_set_fd returns the length of the extended attribute
       */</comment>
      <expr_stmt><expr><name pos:line="20" pos:column="7">err<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <ternary><condition><expr><name pos:line="20" pos:column="13">err<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">&lt;<pos:position pos:line="20" pos:column="21"/></operator> <literal type="number" pos:line="20" pos:column="19">0<pos:position pos:line="20" pos:column="20"/></literal></expr> ?<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <expr><name pos:line="20" pos:column="23">err<pos:position pos:line="20" pos:column="26"/></name></expr> <pos:position pos:line="20" pos:column="27"/></then><else pos:line="20" pos:column="27">: <expr><literal type="number" pos:line="20" pos:column="29">0<pos:position pos:line="20" pos:column="30"/></literal></expr></else></ternary></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="23" pos:column="5">i<pos:position pos:line="23" pos:column="6"/></name><operator pos:line="23" pos:column="6">++<pos:position pos:line="23" pos:column="8"/></operator></expr>;<pos:position pos:line="23" pos:column="9"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></while>

  <return pos:line="26" pos:column="3">return <expr><name pos:line="26" pos:column="10">err<pos:position pos:line="26" pos:column="13"/></name></expr>;<pos:position pos:line="26" pos:column="14"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
