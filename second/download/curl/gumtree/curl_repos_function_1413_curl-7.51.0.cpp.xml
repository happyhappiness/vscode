<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1413_curl-7.51.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">parse_proxy<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">Curl_easy<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">data<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                            <parameter><decl><type><name><name pos:line="2" pos:column="29">struct<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">connectdata<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">conn<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">proxy<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">prox_portno<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">endofprot<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* We use 'proxyptr' to point to the proxy name from now on... */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">proxyptr<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">portptr<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">atsign<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* We do the proxy host string parsing here. We want the host name and the
   * port name. Accept a protocol:// prefix
   */</comment>

  <comment type="block" pos:line="16" pos:column="3">/* Parse the protocol part if present */</comment>
  <expr_stmt><expr><name pos:line="17" pos:column="3">endofprot<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">strstr<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">proxy<pos:position pos:line="17" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="29">"://"<pos:position pos:line="17" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">endofprot<pos:position pos:line="18" pos:column="15"/></name></expr>)<pos:position pos:line="18" pos:column="16"/></condition><then pos:line="18" pos:column="16"> <block pos:line="18" pos:column="17">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">proxyptr<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">endofprot<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">+<pos:position pos:line="19" pos:column="26"/></operator><literal type="number" pos:line="19" pos:column="26">3<pos:position pos:line="19" pos:column="27"/></literal></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><call><name pos:line="20" pos:column="8">checkprefix<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="string" pos:line="20" pos:column="20">"socks5h"<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">proxy<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="7">conn<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">-&gt;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="13">proxytype<pos:position pos:line="21" pos:column="22"/></name></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">CURLPROXY_SOCKS5_HOSTNAME<pos:position pos:line="21" pos:column="50"/></name></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt></block></then>
    <elseif pos:line="22" pos:column="5">else <if pos:line="22" pos:column="10">if<condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">checkprefix<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><literal type="string" pos:line="22" pos:column="25">"socks5"<pos:position pos:line="22" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="35">proxy<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="7">conn<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">proxytype<pos:position pos:line="23" pos:column="22"/></name></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">CURLPROXY_SOCKS5<pos:position pos:line="23" pos:column="41"/></name></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if<condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">checkprefix<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><literal type="string" pos:line="24" pos:column="25">"socks4a"<pos:position pos:line="24" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="36">proxy<pos:position pos:line="24" pos:column="41"/></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="43"/></condition><then pos:line="24" pos:column="43">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="7">conn<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">proxytype<pos:position pos:line="25" pos:column="22"/></name></name> <operator pos:line="25" pos:column="23">=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">CURLPROXY_SOCKS4A<pos:position pos:line="25" pos:column="42"/></name></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if<condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">checkprefix<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><literal type="string" pos:line="26" pos:column="25">"socks4"<pos:position pos:line="26" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">proxy<pos:position pos:line="26" pos:column="40"/></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call> <operator pos:line="26" pos:column="42">||<pos:position pos:line="26" pos:column="44"/></operator> <call><name pos:line="26" pos:column="45">checkprefix<pos:position pos:line="26" pos:column="56"/></name><argument_list pos:line="26" pos:column="56">(<argument><expr><literal type="string" pos:line="26" pos:column="57">"socks"<pos:position pos:line="26" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="66">proxy<pos:position pos:line="26" pos:column="71"/></name></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="73"/></condition><then pos:line="26" pos:column="73">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="7">conn<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">proxytype<pos:position pos:line="27" pos:column="22"/></name></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">CURLPROXY_SOCKS4<pos:position pos:line="27" pos:column="41"/></name></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="28" pos:column="5">else <if pos:line="28" pos:column="10">if<condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">checkprefix<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><literal type="string" pos:line="28" pos:column="25">"http:"<pos:position pos:line="28" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="34">proxy<pos:position pos:line="28" pos:column="39"/></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="41"/></condition><then pos:line="28" pos:column="41">
      <block type="pseudo"><empty_stmt pos:line="29" pos:column="7">;<pos:position pos:line="29" pos:column="8"/></empty_stmt></block></then></if></elseif> <comment type="block" pos:line="29" pos:column="9">/* leave it as HTTP or HTTP/1.0 */</comment>
    <else pos:line="30" pos:column="5">else <block pos:line="30" pos:column="10">{
      <comment type="block" pos:line="31" pos:column="7">/* Any other xxx:// reject! */</comment>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">failf<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">data<pos:position pos:line="32" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="19">"Unsupported proxy scheme for \'%s\'"<pos:position pos:line="32" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="58">proxy<pos:position pos:line="32" pos:column="63"/></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>
      <return pos:line="33" pos:column="7">return <expr><name pos:line="33" pos:column="14">CURLE_COULDNT_CONNECT<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>
  }<pos:position pos:line="35" pos:column="4"/></block></then>
  <else pos:line="36" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="5">proxyptr<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">proxy<pos:position pos:line="37" pos:column="21"/></name></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt></block></else></if> <comment type="block" pos:line="37" pos:column="23">/* No xxx:// head: It's a HTTP proxy */</comment>

  <comment type="block" pos:line="39" pos:column="3">/* Is there a username and password given in this proxy url? */</comment>
  <expr_stmt><expr><name pos:line="40" pos:column="3">atsign<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <call><name pos:line="40" pos:column="12">strchr<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name pos:line="40" pos:column="19">proxyptr<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="40" pos:column="29">'@'<pos:position pos:line="40" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><name pos:line="41" pos:column="6">atsign<pos:position pos:line="41" pos:column="12"/></name></expr>)<pos:position pos:line="41" pos:column="13"/></condition><then pos:line="41" pos:column="13"> <block pos:line="41" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">char<pos:position pos:line="42" pos:column="9"/></name> <modifier pos:line="42" pos:column="10">*<pos:position pos:line="42" pos:column="11"/></modifier></type><name pos:line="42" pos:column="11">proxyuser<pos:position pos:line="42" pos:column="20"/></name> <init pos:line="42" pos:column="21">= <expr><name pos:line="42" pos:column="23">NULL<pos:position pos:line="42" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">char<pos:position pos:line="43" pos:column="9"/></name> <modifier pos:line="43" pos:column="10">*<pos:position pos:line="43" pos:column="11"/></modifier></type><name pos:line="43" pos:column="11">proxypasswd<pos:position pos:line="43" pos:column="22"/></name> <init pos:line="43" pos:column="23">= <expr><name pos:line="43" pos:column="25">NULL<pos:position pos:line="43" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="43" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">CURLcode<pos:position pos:line="44" pos:column="13"/></name></type> <name pos:line="44" pos:column="14">result<pos:position pos:line="44" pos:column="20"/></name> <init pos:line="44" pos:column="21">=
      <expr><call><name pos:line="45" pos:column="7">parse_login_details<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">proxyptr<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="37">atsign<pos:position pos:line="45" pos:column="43"/></name> <operator pos:line="45" pos:column="44">-<pos:position pos:line="45" pos:column="45"/></operator> <name pos:line="45" pos:column="46">proxyptr<pos:position pos:line="45" pos:column="54"/></name></expr></argument>,
                          <argument><expr><operator pos:line="46" pos:column="27">&amp;<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="28">proxyuser<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="39">&amp;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="40">proxypasswd<pos:position pos:line="46" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="53">NULL<pos:position pos:line="46" pos:column="57"/></name></expr></argument>)<pos:position pos:line="46" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="59"/></decl_stmt>
    <if pos:line="47" pos:column="5">if<condition pos:line="47" pos:column="7">(<expr><operator pos:line="47" pos:column="8">!<pos:position pos:line="47" pos:column="9"/></operator><name pos:line="47" pos:column="9">result<pos:position pos:line="47" pos:column="15"/></name></expr>)<pos:position pos:line="47" pos:column="16"/></condition><then pos:line="47" pos:column="16"> <block pos:line="47" pos:column="17">{
      <comment type="block" pos:line="48" pos:column="7">/* found user and password, rip them out.  note that we are
         unescaping them, as there is otherwise no way to have a
         username or password with reserved characters like ':' in
         them. */</comment>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">Curl_safefree<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name><name pos:line="52" pos:column="21">conn<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">-&gt;<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="27">proxyuser<pos:position pos:line="52" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt>
      <if pos:line="53" pos:column="7">if<condition pos:line="53" pos:column="9">(<expr><name pos:line="53" pos:column="10">proxyuser<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">&amp;&amp;<pos:position pos:line="53" pos:column="30"/></operator> <call><name pos:line="53" pos:column="23">strlen<pos:position pos:line="53" pos:column="29"/></name><argument_list pos:line="53" pos:column="29">(<argument><expr><name pos:line="53" pos:column="30">proxyuser<pos:position pos:line="53" pos:column="39"/></name></expr></argument>)<pos:position pos:line="53" pos:column="40"/></argument_list></call> <operator pos:line="53" pos:column="41">&lt;<pos:position pos:line="53" pos:column="45"/></operator> <name pos:line="53" pos:column="43">MAX_CURL_USER_LENGTH<pos:position pos:line="53" pos:column="63"/></name></expr>)<pos:position pos:line="53" pos:column="64"/></condition><then pos:line="53" pos:column="64">
        <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="9">result<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <call><name pos:line="54" pos:column="18">Curl_urldecode<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">data<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="39">proxyuser<pos:position pos:line="54" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="50">0<pos:position pos:line="54" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="54" pos:column="53">&amp;<pos:position pos:line="54" pos:column="58"/></operator><name><name pos:line="54" pos:column="54">conn<pos:position pos:line="54" pos:column="58"/></name><operator pos:line="54" pos:column="58">-&gt;<pos:position pos:line="54" pos:column="63"/></operator><name pos:line="54" pos:column="60">proxyuser<pos:position pos:line="54" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="71">NULL<pos:position pos:line="54" pos:column="75"/></name></expr></argument>,
                                <argument><expr><name pos:line="55" pos:column="33">FALSE<pos:position pos:line="55" pos:column="38"/></name></expr></argument>)<pos:position pos:line="55" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt></block></then>
      <else pos:line="56" pos:column="7">else <block pos:line="56" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">conn<pos:position pos:line="57" pos:column="13"/></name><operator pos:line="57" pos:column="13">-&gt;<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="15">proxyuser<pos:position pos:line="57" pos:column="24"/></name></name> <operator pos:line="57" pos:column="25">=<pos:position pos:line="57" pos:column="26"/></operator> <call><name pos:line="57" pos:column="27">strdup<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><literal type="string" pos:line="57" pos:column="34">""<pos:position pos:line="57" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="38"/></expr_stmt>
        <if pos:line="58" pos:column="9">if<condition pos:line="58" pos:column="11">(<expr><operator pos:line="58" pos:column="12">!<pos:position pos:line="58" pos:column="13"/></operator><name><name pos:line="58" pos:column="13">conn<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">-&gt;<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="19">proxyuser<pos:position pos:line="58" pos:column="28"/></name></name></expr>)<pos:position pos:line="58" pos:column="29"/></condition><then pos:line="58" pos:column="29">
          <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="11">result<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">=<pos:position pos:line="59" pos:column="19"/></operator> <name pos:line="59" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="59" pos:column="39"/></name></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt></block></then></if>
      }<pos:position pos:line="60" pos:column="8"/></block></else></if>

      <if pos:line="62" pos:column="7">if<condition pos:line="62" pos:column="9">(<expr><operator pos:line="62" pos:column="10">!<pos:position pos:line="62" pos:column="11"/></operator><name pos:line="62" pos:column="11">result<pos:position pos:line="62" pos:column="17"/></name></expr>)<pos:position pos:line="62" pos:column="18"/></condition><then pos:line="62" pos:column="18"> <block pos:line="62" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">Curl_safefree<pos:position pos:line="63" pos:column="22"/></name><argument_list pos:line="63" pos:column="22">(<argument><expr><name><name pos:line="63" pos:column="23">conn<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">-&gt;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="29">proxypasswd<pos:position pos:line="63" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
        <if pos:line="64" pos:column="9">if<condition pos:line="64" pos:column="11">(<expr><name pos:line="64" pos:column="12">proxypasswd<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">&amp;&amp;<pos:position pos:line="64" pos:column="34"/></operator> <call><name pos:line="64" pos:column="27">strlen<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><name pos:line="64" pos:column="34">proxypasswd<pos:position pos:line="64" pos:column="45"/></name></expr></argument>)<pos:position pos:line="64" pos:column="46"/></argument_list></call> <operator pos:line="64" pos:column="47">&lt;<pos:position pos:line="64" pos:column="51"/></operator> <name pos:line="64" pos:column="49">MAX_CURL_PASSWORD_LENGTH<pos:position pos:line="64" pos:column="73"/></name></expr>)<pos:position pos:line="64" pos:column="74"/></condition><then pos:line="64" pos:column="74">
          <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="11">result<pos:position pos:line="65" pos:column="17"/></name> <operator pos:line="65" pos:column="18">=<pos:position pos:line="65" pos:column="19"/></operator> <call><name pos:line="65" pos:column="20">Curl_urldecode<pos:position pos:line="65" pos:column="34"/></name><argument_list pos:line="65" pos:column="34">(<argument><expr><name pos:line="65" pos:column="35">data<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">proxypasswd<pos:position pos:line="65" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="54">0<pos:position pos:line="65" pos:column="55"/></literal></expr></argument>,
                                  <argument><expr><operator pos:line="66" pos:column="35">&amp;<pos:position pos:line="66" pos:column="40"/></operator><name><name pos:line="66" pos:column="36">conn<pos:position pos:line="66" pos:column="40"/></name><operator pos:line="66" pos:column="40">-&gt;<pos:position pos:line="66" pos:column="45"/></operator><name pos:line="66" pos:column="42">proxypasswd<pos:position pos:line="66" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="55">NULL<pos:position pos:line="66" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="61">FALSE<pos:position pos:line="66" pos:column="66"/></name></expr></argument>)<pos:position pos:line="66" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="68"/></expr_stmt></block></then>
        <else pos:line="67" pos:column="9">else <block pos:line="67" pos:column="14">{
          <expr_stmt><expr><name><name pos:line="68" pos:column="11">conn<pos:position pos:line="68" pos:column="15"/></name><operator pos:line="68" pos:column="15">-&gt;<pos:position pos:line="68" pos:column="20"/></operator><name pos:line="68" pos:column="17">proxypasswd<pos:position pos:line="68" pos:column="28"/></name></name> <operator pos:line="68" pos:column="29">=<pos:position pos:line="68" pos:column="30"/></operator> <call><name pos:line="68" pos:column="31">strdup<pos:position pos:line="68" pos:column="37"/></name><argument_list pos:line="68" pos:column="37">(<argument><expr><literal type="string" pos:line="68" pos:column="38">""<pos:position pos:line="68" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="42"/></expr_stmt>
          <if pos:line="69" pos:column="11">if<condition pos:line="69" pos:column="13">(<expr><operator pos:line="69" pos:column="14">!<pos:position pos:line="69" pos:column="15"/></operator><name><name pos:line="69" pos:column="15">conn<pos:position pos:line="69" pos:column="19"/></name><operator pos:line="69" pos:column="19">-&gt;<pos:position pos:line="69" pos:column="24"/></operator><name pos:line="69" pos:column="21">proxypasswd<pos:position pos:line="69" pos:column="32"/></name></name></expr>)<pos:position pos:line="69" pos:column="33"/></condition><then pos:line="69" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="13">result<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">=<pos:position pos:line="70" pos:column="21"/></operator> <name pos:line="70" pos:column="22">CURLE_OUT_OF_MEMORY<pos:position pos:line="70" pos:column="41"/></name></expr>;<pos:position pos:line="70" pos:column="42"/></expr_stmt></block></then></if>
        }<pos:position pos:line="71" pos:column="10"/></block></else></if>
      }<pos:position pos:line="72" pos:column="8"/></block></then></if>

      <if pos:line="74" pos:column="7">if<condition pos:line="74" pos:column="9">(<expr><operator pos:line="74" pos:column="10">!<pos:position pos:line="74" pos:column="11"/></operator><name pos:line="74" pos:column="11">result<pos:position pos:line="74" pos:column="17"/></name></expr>)<pos:position pos:line="74" pos:column="18"/></condition><then pos:line="74" pos:column="18"> <block pos:line="74" pos:column="19">{
        <expr_stmt><expr><name><name pos:line="75" pos:column="9">conn<pos:position pos:line="75" pos:column="13"/></name><operator pos:line="75" pos:column="13">-&gt;<pos:position pos:line="75" pos:column="18"/></operator><name pos:line="75" pos:column="15">bits<pos:position pos:line="75" pos:column="19"/></name><operator pos:line="75" pos:column="19">.<pos:position pos:line="75" pos:column="20"/></operator><name pos:line="75" pos:column="20">proxy_user_passwd<pos:position pos:line="75" pos:column="37"/></name></name> <operator pos:line="75" pos:column="38">=<pos:position pos:line="75" pos:column="39"/></operator> <name pos:line="75" pos:column="40">TRUE<pos:position pos:line="75" pos:column="44"/></name></expr>;<pos:position pos:line="75" pos:column="45"/></expr_stmt> <comment type="block" pos:line="75" pos:column="46">/* enable it */</comment>
        <expr_stmt><expr><name pos:line="76" pos:column="9">atsign<pos:position pos:line="76" pos:column="15"/></name><operator pos:line="76" pos:column="15">++<pos:position pos:line="76" pos:column="17"/></operator></expr>;<pos:position pos:line="76" pos:column="18"/></expr_stmt> <comment type="block" pos:line="76" pos:column="19">/* the right side of the @-letter */</comment>

        <expr_stmt><expr><name pos:line="78" pos:column="9">proxyptr<pos:position pos:line="78" pos:column="17"/></name> <operator pos:line="78" pos:column="18">=<pos:position pos:line="78" pos:column="19"/></operator> <name pos:line="78" pos:column="20">atsign<pos:position pos:line="78" pos:column="26"/></name></expr>;<pos:position pos:line="78" pos:column="27"/></expr_stmt> <comment type="block" pos:line="78" pos:column="28">/* now use this instead */</comment>
      }<pos:position pos:line="79" pos:column="8"/></block></then></if>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">free<pos:position pos:line="82" pos:column="9"/></name><argument_list pos:line="82" pos:column="9">(<argument><expr><name pos:line="82" pos:column="10">proxyuser<pos:position pos:line="82" pos:column="19"/></name></expr></argument>)<pos:position pos:line="82" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">free<pos:position pos:line="83" pos:column="9"/></name><argument_list pos:line="83" pos:column="9">(<argument><expr><name pos:line="83" pos:column="10">proxypasswd<pos:position pos:line="83" pos:column="21"/></name></expr></argument>)<pos:position pos:line="83" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="23"/></expr_stmt>

    <if pos:line="85" pos:column="5">if<condition pos:line="85" pos:column="7">(<expr><name pos:line="85" pos:column="8">result<pos:position pos:line="85" pos:column="14"/></name></expr>)<pos:position pos:line="85" pos:column="15"/></condition><then pos:line="85" pos:column="15">
      <block type="pseudo"><return pos:line="86" pos:column="7">return <expr><name pos:line="86" pos:column="14">result<pos:position pos:line="86" pos:column="20"/></name></expr>;<pos:position pos:line="86" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="87" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="89" pos:column="3">/* start scanning for port number at this point */</comment>
  <expr_stmt><expr><name pos:line="90" pos:column="3">portptr<pos:position pos:line="90" pos:column="10"/></name> <operator pos:line="90" pos:column="11">=<pos:position pos:line="90" pos:column="12"/></operator> <name pos:line="90" pos:column="13">proxyptr<pos:position pos:line="90" pos:column="21"/></name></expr>;<pos:position pos:line="90" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="92" pos:column="3">/* detect and extract RFC6874-style IPv6-addresses */</comment>
  <if pos:line="93" pos:column="3">if<condition pos:line="93" pos:column="5">(<expr><operator pos:line="93" pos:column="6">*<pos:position pos:line="93" pos:column="7"/></operator><name pos:line="93" pos:column="7">proxyptr<pos:position pos:line="93" pos:column="15"/></name> <operator pos:line="93" pos:column="16">==<pos:position pos:line="93" pos:column="18"/></operator> <literal type="char" pos:line="93" pos:column="19">'['<pos:position pos:line="93" pos:column="22"/></literal></expr>)<pos:position pos:line="93" pos:column="23"/></condition><then pos:line="93" pos:column="23"> <block pos:line="93" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="94" pos:column="5">char<pos:position pos:line="94" pos:column="9"/></name> <modifier pos:line="94" pos:column="10">*<pos:position pos:line="94" pos:column="11"/></modifier></type><name pos:line="94" pos:column="11">ptr<pos:position pos:line="94" pos:column="14"/></name> <init pos:line="94" pos:column="15">= <expr><operator pos:line="94" pos:column="17">++<pos:position pos:line="94" pos:column="19"/></operator><name pos:line="94" pos:column="19">proxyptr<pos:position pos:line="94" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="94" pos:column="28"/></decl_stmt> <comment type="block" pos:line="94" pos:column="29">/* advance beyond the initial bracket */</comment>
    <while pos:line="95" pos:column="5">while<condition pos:line="95" pos:column="10">(<expr><operator pos:line="95" pos:column="11">*<pos:position pos:line="95" pos:column="12"/></operator><name pos:line="95" pos:column="12">ptr<pos:position pos:line="95" pos:column="15"/></name> <operator pos:line="95" pos:column="16">&amp;&amp;<pos:position pos:line="95" pos:column="26"/></operator> <operator pos:line="95" pos:column="19">(<pos:position pos:line="95" pos:column="20"/></operator><call><name pos:line="95" pos:column="20">ISXDIGIT<pos:position pos:line="95" pos:column="28"/></name><argument_list pos:line="95" pos:column="28">(<argument><expr><operator pos:line="95" pos:column="29">*<pos:position pos:line="95" pos:column="30"/></operator><name pos:line="95" pos:column="30">ptr<pos:position pos:line="95" pos:column="33"/></name></expr></argument>)<pos:position pos:line="95" pos:column="34"/></argument_list></call> <operator pos:line="95" pos:column="35">||<pos:position pos:line="95" pos:column="37"/></operator> <operator pos:line="95" pos:column="38">(<pos:position pos:line="95" pos:column="39"/></operator><operator pos:line="95" pos:column="39">*<pos:position pos:line="95" pos:column="40"/></operator><name pos:line="95" pos:column="40">ptr<pos:position pos:line="95" pos:column="43"/></name> <operator pos:line="95" pos:column="44">==<pos:position pos:line="95" pos:column="46"/></operator> <literal type="char" pos:line="95" pos:column="47">':'<pos:position pos:line="95" pos:column="50"/></literal><operator pos:line="95" pos:column="50">)<pos:position pos:line="95" pos:column="51"/></operator> <operator pos:line="95" pos:column="52">||<pos:position pos:line="95" pos:column="54"/></operator> <operator pos:line="95" pos:column="55">(<pos:position pos:line="95" pos:column="56"/></operator><operator pos:line="95" pos:column="56">*<pos:position pos:line="95" pos:column="57"/></operator><name pos:line="95" pos:column="57">ptr<pos:position pos:line="95" pos:column="60"/></name> <operator pos:line="95" pos:column="61">==<pos:position pos:line="95" pos:column="63"/></operator> <literal type="char" pos:line="95" pos:column="64">'.'<pos:position pos:line="95" pos:column="67"/></literal><operator pos:line="95" pos:column="67">)<pos:position pos:line="95" pos:column="68"/></operator><operator pos:line="95" pos:column="68">)<pos:position pos:line="95" pos:column="69"/></operator></expr>)<pos:position pos:line="95" pos:column="70"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="7">ptr<pos:position pos:line="96" pos:column="10"/></name><operator pos:line="96" pos:column="10">++<pos:position pos:line="96" pos:column="12"/></operator></expr>;<pos:position pos:line="96" pos:column="13"/></expr_stmt></block></while>
    <if pos:line="97" pos:column="5">if<condition pos:line="97" pos:column="7">(<expr><operator pos:line="97" pos:column="8">*<pos:position pos:line="97" pos:column="9"/></operator><name pos:line="97" pos:column="9">ptr<pos:position pos:line="97" pos:column="12"/></name> <operator pos:line="97" pos:column="13">==<pos:position pos:line="97" pos:column="15"/></operator> <literal type="char" pos:line="97" pos:column="16">'%'<pos:position pos:line="97" pos:column="19"/></literal></expr>)<pos:position pos:line="97" pos:column="20"/></condition><then pos:line="97" pos:column="20"> <block pos:line="97" pos:column="21">{
      <comment type="block" pos:line="98" pos:column="7">/* There might be a zone identifier */</comment>
      <if pos:line="99" pos:column="7">if<condition pos:line="99" pos:column="9">(<expr><call><name pos:line="99" pos:column="10">strncmp<pos:position pos:line="99" pos:column="17"/></name><argument_list pos:line="99" pos:column="17">(<argument><expr><literal type="string" pos:line="99" pos:column="18">"%25"<pos:position pos:line="99" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="25">ptr<pos:position pos:line="99" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="30">3<pos:position pos:line="99" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="33"/></condition><then pos:line="99" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="9">infof<pos:position pos:line="100" pos:column="14"/></name><argument_list pos:line="100" pos:column="14">(<argument><expr><name pos:line="100" pos:column="15">data<pos:position pos:line="100" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="21">"Please URL encode %% as %%25, see RFC 6874.\n"<pos:position pos:line="100" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="70"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="101" pos:column="7">ptr<pos:position pos:line="101" pos:column="10"/></name><operator pos:line="101" pos:column="10">++<pos:position pos:line="101" pos:column="12"/></operator></expr>;<pos:position pos:line="101" pos:column="13"/></expr_stmt>
      <comment type="block" pos:line="102" pos:column="7">/* Allow unreserved characters as defined in RFC 3986 */</comment>
      <while pos:line="103" pos:column="7">while<condition pos:line="103" pos:column="12">(<expr><operator pos:line="103" pos:column="13">*<pos:position pos:line="103" pos:column="14"/></operator><name pos:line="103" pos:column="14">ptr<pos:position pos:line="103" pos:column="17"/></name> <operator pos:line="103" pos:column="18">&amp;&amp;<pos:position pos:line="103" pos:column="28"/></operator> <operator pos:line="103" pos:column="21">(<pos:position pos:line="103" pos:column="22"/></operator><call><name pos:line="103" pos:column="22">ISALPHA<pos:position pos:line="103" pos:column="29"/></name><argument_list pos:line="103" pos:column="29">(<argument><expr><operator pos:line="103" pos:column="30">*<pos:position pos:line="103" pos:column="31"/></operator><name pos:line="103" pos:column="31">ptr<pos:position pos:line="103" pos:column="34"/></name></expr></argument>)<pos:position pos:line="103" pos:column="35"/></argument_list></call> <operator pos:line="103" pos:column="36">||<pos:position pos:line="103" pos:column="38"/></operator> <call><name pos:line="103" pos:column="39">ISXDIGIT<pos:position pos:line="103" pos:column="47"/></name><argument_list pos:line="103" pos:column="47">(<argument><expr><operator pos:line="103" pos:column="48">*<pos:position pos:line="103" pos:column="49"/></operator><name pos:line="103" pos:column="49">ptr<pos:position pos:line="103" pos:column="52"/></name></expr></argument>)<pos:position pos:line="103" pos:column="53"/></argument_list></call> <operator pos:line="103" pos:column="54">||<pos:position pos:line="103" pos:column="56"/></operator> <operator pos:line="103" pos:column="57">(<pos:position pos:line="103" pos:column="58"/></operator><operator pos:line="103" pos:column="58">*<pos:position pos:line="103" pos:column="59"/></operator><name pos:line="103" pos:column="59">ptr<pos:position pos:line="103" pos:column="62"/></name> <operator pos:line="103" pos:column="63">==<pos:position pos:line="103" pos:column="65"/></operator> <literal type="char" pos:line="103" pos:column="66">'-'<pos:position pos:line="103" pos:column="69"/></literal><operator pos:line="103" pos:column="69">)<pos:position pos:line="103" pos:column="70"/></operator> <operator pos:line="103" pos:column="71">||<pos:position pos:line="103" pos:column="73"/></operator>
                     <operator pos:line="104" pos:column="22">(<pos:position pos:line="104" pos:column="23"/></operator><operator pos:line="104" pos:column="23">*<pos:position pos:line="104" pos:column="24"/></operator><name pos:line="104" pos:column="24">ptr<pos:position pos:line="104" pos:column="27"/></name> <operator pos:line="104" pos:column="28">==<pos:position pos:line="104" pos:column="30"/></operator> <literal type="char" pos:line="104" pos:column="31">'.'<pos:position pos:line="104" pos:column="34"/></literal><operator pos:line="104" pos:column="34">)<pos:position pos:line="104" pos:column="35"/></operator> <operator pos:line="104" pos:column="36">||<pos:position pos:line="104" pos:column="38"/></operator> <operator pos:line="104" pos:column="39">(<pos:position pos:line="104" pos:column="40"/></operator><operator pos:line="104" pos:column="40">*<pos:position pos:line="104" pos:column="41"/></operator><name pos:line="104" pos:column="41">ptr<pos:position pos:line="104" pos:column="44"/></name> <operator pos:line="104" pos:column="45">==<pos:position pos:line="104" pos:column="47"/></operator> <literal type="char" pos:line="104" pos:column="48">'_'<pos:position pos:line="104" pos:column="51"/></literal><operator pos:line="104" pos:column="51">)<pos:position pos:line="104" pos:column="52"/></operator> <operator pos:line="104" pos:column="53">||<pos:position pos:line="104" pos:column="55"/></operator> <operator pos:line="104" pos:column="56">(<pos:position pos:line="104" pos:column="57"/></operator><operator pos:line="104" pos:column="57">*<pos:position pos:line="104" pos:column="58"/></operator><name pos:line="104" pos:column="58">ptr<pos:position pos:line="104" pos:column="61"/></name> <operator pos:line="104" pos:column="62">==<pos:position pos:line="104" pos:column="64"/></operator> <literal type="char" pos:line="104" pos:column="65">'~'<pos:position pos:line="104" pos:column="68"/></literal><operator pos:line="104" pos:column="68">)<pos:position pos:line="104" pos:column="69"/></operator><operator pos:line="104" pos:column="69">)<pos:position pos:line="104" pos:column="70"/></operator></expr>)<pos:position pos:line="104" pos:column="71"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="9">ptr<pos:position pos:line="105" pos:column="12"/></name><operator pos:line="105" pos:column="12">++<pos:position pos:line="105" pos:column="14"/></operator></expr>;<pos:position pos:line="105" pos:column="15"/></expr_stmt></block></while>
    }<pos:position pos:line="106" pos:column="6"/></block></then></if>
    <if pos:line="107" pos:column="5">if<condition pos:line="107" pos:column="7">(<expr><operator pos:line="107" pos:column="8">*<pos:position pos:line="107" pos:column="9"/></operator><name pos:line="107" pos:column="9">ptr<pos:position pos:line="107" pos:column="12"/></name> <operator pos:line="107" pos:column="13">==<pos:position pos:line="107" pos:column="15"/></operator> <literal type="char" pos:line="107" pos:column="16">']'<pos:position pos:line="107" pos:column="19"/></literal></expr>)<pos:position pos:line="107" pos:column="20"/></condition><then pos:line="107" pos:column="20">
      <comment type="block" pos:line="108" pos:column="7">/* yeps, it ended nicely with a bracket as well */</comment>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="109" pos:column="7">*<pos:position pos:line="109" pos:column="8"/></operator><name pos:line="109" pos:column="8">ptr<pos:position pos:line="109" pos:column="11"/></name><operator pos:line="109" pos:column="11">++<pos:position pos:line="109" pos:column="13"/></operator> <operator pos:line="109" pos:column="14">=<pos:position pos:line="109" pos:column="15"/></operator> <literal type="number" pos:line="109" pos:column="16">0<pos:position pos:line="109" pos:column="17"/></literal></expr>;<pos:position pos:line="109" pos:column="18"/></expr_stmt></block></then>
    <else pos:line="110" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="7">infof<pos:position pos:line="111" pos:column="12"/></name><argument_list pos:line="111" pos:column="12">(<argument><expr><name pos:line="111" pos:column="13">data<pos:position pos:line="111" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="19">"Invalid IPv6 address format\n"<pos:position pos:line="111" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="52"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="112" pos:column="5">portptr<pos:position pos:line="112" pos:column="12"/></name> <operator pos:line="112" pos:column="13">=<pos:position pos:line="112" pos:column="14"/></operator> <name pos:line="112" pos:column="15">ptr<pos:position pos:line="112" pos:column="18"/></name></expr>;<pos:position pos:line="112" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="113" pos:column="5">/* Note that if this didn't end with a bracket, we still advanced the
     * proxyptr first, but I can't see anything wrong with that as no host
     * name nor a numeric can legally start with a bracket.
     */</comment>
  }<pos:position pos:line="117" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="119" pos:column="3">/* Get port number off proxy.server.com:1080 */</comment>
  <expr_stmt><expr><name pos:line="120" pos:column="3">prox_portno<pos:position pos:line="120" pos:column="14"/></name> <operator pos:line="120" pos:column="15">=<pos:position pos:line="120" pos:column="16"/></operator> <call><name pos:line="120" pos:column="17">strchr<pos:position pos:line="120" pos:column="23"/></name><argument_list pos:line="120" pos:column="23">(<argument><expr><name pos:line="120" pos:column="24">portptr<pos:position pos:line="120" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="120" pos:column="33">':'<pos:position pos:line="120" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="38"/></expr_stmt>
  <if pos:line="121" pos:column="3">if<condition pos:line="121" pos:column="5">(<expr><name pos:line="121" pos:column="6">prox_portno<pos:position pos:line="121" pos:column="17"/></name></expr>)<pos:position pos:line="121" pos:column="18"/></condition><then pos:line="121" pos:column="18"> <block pos:line="121" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="122" pos:column="5">char<pos:position pos:line="122" pos:column="9"/></name> <modifier pos:line="122" pos:column="10">*<pos:position pos:line="122" pos:column="11"/></modifier></type><name pos:line="122" pos:column="11">endp<pos:position pos:line="122" pos:column="15"/></name> <init pos:line="122" pos:column="16">= <expr><name pos:line="122" pos:column="18">NULL<pos:position pos:line="122" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="122" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="123" pos:column="5">long<pos:position pos:line="123" pos:column="9"/></name></type> <name pos:line="123" pos:column="10">port<pos:position pos:line="123" pos:column="14"/></name> <init pos:line="123" pos:column="15">= <expr><literal type="number" pos:line="123" pos:column="17">0<pos:position pos:line="123" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="123" pos:column="19"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="124" pos:column="5">*<pos:position pos:line="124" pos:column="6"/></operator><name pos:line="124" pos:column="6">prox_portno<pos:position pos:line="124" pos:column="17"/></name> <operator pos:line="124" pos:column="18">=<pos:position pos:line="124" pos:column="19"/></operator> <literal type="number" pos:line="124" pos:column="20">0x0<pos:position pos:line="124" pos:column="23"/></literal></expr>;<pos:position pos:line="124" pos:column="24"/></expr_stmt> <comment type="block" pos:line="124" pos:column="25">/* cut off number from host name */</comment>
    <expr_stmt><expr><name pos:line="125" pos:column="5">prox_portno<pos:position pos:line="125" pos:column="16"/></name> <operator pos:line="125" pos:column="17">++<pos:position pos:line="125" pos:column="19"/></operator></expr>;<pos:position pos:line="125" pos:column="20"/></expr_stmt>
    <comment type="block" pos:line="126" pos:column="5">/* now set the local port number */</comment>
    <expr_stmt><expr><name pos:line="127" pos:column="5">port<pos:position pos:line="127" pos:column="9"/></name> <operator pos:line="127" pos:column="10">=<pos:position pos:line="127" pos:column="11"/></operator> <call><name pos:line="127" pos:column="12">strtol<pos:position pos:line="127" pos:column="18"/></name><argument_list pos:line="127" pos:column="18">(<argument><expr><name pos:line="127" pos:column="19">prox_portno<pos:position pos:line="127" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="32">&amp;<pos:position pos:line="127" pos:column="37"/></operator><name pos:line="127" pos:column="33">endp<pos:position pos:line="127" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="39">10<pos:position pos:line="127" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="43"/></expr_stmt>
    <if pos:line="128" pos:column="5">if<condition pos:line="128" pos:column="7">(<expr><operator pos:line="128" pos:column="8">(<pos:position pos:line="128" pos:column="9"/></operator><name pos:line="128" pos:column="9">endp<pos:position pos:line="128" pos:column="13"/></name> <operator pos:line="128" pos:column="14">&amp;&amp;<pos:position pos:line="128" pos:column="24"/></operator> <operator pos:line="128" pos:column="17">*<pos:position pos:line="128" pos:column="18"/></operator><name pos:line="128" pos:column="18">endp<pos:position pos:line="128" pos:column="22"/></name> <operator pos:line="128" pos:column="23">&amp;&amp;<pos:position pos:line="128" pos:column="33"/></operator> <operator pos:line="128" pos:column="26">(<pos:position pos:line="128" pos:column="27"/></operator><operator pos:line="128" pos:column="27">*<pos:position pos:line="128" pos:column="28"/></operator><name pos:line="128" pos:column="28">endp<pos:position pos:line="128" pos:column="32"/></name> <operator pos:line="128" pos:column="33">!=<pos:position pos:line="128" pos:column="35"/></operator> <literal type="char" pos:line="128" pos:column="36">'/'<pos:position pos:line="128" pos:column="39"/></literal><operator pos:line="128" pos:column="39">)<pos:position pos:line="128" pos:column="40"/></operator> <operator pos:line="128" pos:column="41">&amp;&amp;<pos:position pos:line="128" pos:column="51"/></operator> <operator pos:line="128" pos:column="44">(<pos:position pos:line="128" pos:column="45"/></operator><operator pos:line="128" pos:column="45">*<pos:position pos:line="128" pos:column="46"/></operator><name pos:line="128" pos:column="46">endp<pos:position pos:line="128" pos:column="50"/></name> <operator pos:line="128" pos:column="51">!=<pos:position pos:line="128" pos:column="53"/></operator> <literal type="char" pos:line="128" pos:column="54">' '<pos:position pos:line="128" pos:column="57"/></literal><operator pos:line="128" pos:column="57">)<pos:position pos:line="128" pos:column="58"/></operator><operator pos:line="128" pos:column="58">)<pos:position pos:line="128" pos:column="59"/></operator> <operator pos:line="128" pos:column="60">||<pos:position pos:line="128" pos:column="62"/></operator>
       <operator pos:line="129" pos:column="8">(<pos:position pos:line="129" pos:column="9"/></operator><name pos:line="129" pos:column="9">port<pos:position pos:line="129" pos:column="13"/></name> <operator pos:line="129" pos:column="14">&lt;<pos:position pos:line="129" pos:column="18"/></operator> <literal type="number" pos:line="129" pos:column="16">0<pos:position pos:line="129" pos:column="17"/></literal><operator pos:line="129" pos:column="17">)<pos:position pos:line="129" pos:column="18"/></operator> <operator pos:line="129" pos:column="19">||<pos:position pos:line="129" pos:column="21"/></operator> <operator pos:line="129" pos:column="22">(<pos:position pos:line="129" pos:column="23"/></operator><name pos:line="129" pos:column="23">port<pos:position pos:line="129" pos:column="27"/></name> <operator pos:line="129" pos:column="28">&gt;<pos:position pos:line="129" pos:column="32"/></operator> <literal type="number" pos:line="129" pos:column="30">65535<pos:position pos:line="129" pos:column="35"/></literal><operator pos:line="129" pos:column="35">)<pos:position pos:line="129" pos:column="36"/></operator></expr>)<pos:position pos:line="129" pos:column="37"/></condition><then pos:line="129" pos:column="37"> <block pos:line="129" pos:column="38">{
      <comment type="block" pos:line="130" pos:column="7">/* meant to detect for example invalid IPv6 numerical addresses without
         brackets: "2a00:fac0:a000::7:13". Accept a trailing slash only
         because we then allow "URL style" with the number followed by a
         slash, used in curl test cases already. Space is also an acceptable
         terminating symbol. */</comment>
      <expr_stmt><expr><call><name pos:line="135" pos:column="7">infof<pos:position pos:line="135" pos:column="12"/></name><argument_list pos:line="135" pos:column="12">(<argument><expr><name pos:line="135" pos:column="13">data<pos:position pos:line="135" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="19">"No valid port number in proxy string (%s)\n"<pos:position pos:line="135" pos:column="64"/></literal></expr></argument>,
            <argument><expr><name pos:line="136" pos:column="13">prox_portno<pos:position pos:line="136" pos:column="24"/></name></expr></argument>)<pos:position pos:line="136" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="137" pos:column="6"/></block></then>
    <else pos:line="138" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="139" pos:column="7">conn<pos:position pos:line="139" pos:column="11"/></name><operator pos:line="139" pos:column="11">-&gt;<pos:position pos:line="139" pos:column="16"/></operator><name pos:line="139" pos:column="13">port<pos:position pos:line="139" pos:column="17"/></name></name> <operator pos:line="139" pos:column="18">=<pos:position pos:line="139" pos:column="19"/></operator> <name pos:line="139" pos:column="20">port<pos:position pos:line="139" pos:column="24"/></name></expr>;<pos:position pos:line="139" pos:column="25"/></expr_stmt></block></else></if>
  }<pos:position pos:line="140" pos:column="4"/></block></then>
  <else pos:line="141" pos:column="3">else <block pos:line="141" pos:column="8">{
    <if pos:line="142" pos:column="5">if<condition pos:line="142" pos:column="7">(<expr><name><name pos:line="142" pos:column="8">proxyptr<pos:position pos:line="142" pos:column="16"/></name><index pos:line="142" pos:column="16">[<expr><literal type="number" pos:line="142" pos:column="17">0<pos:position pos:line="142" pos:column="18"/></literal></expr>]<pos:position pos:line="142" pos:column="19"/></index></name><operator pos:line="142" pos:column="19">==<pos:position pos:line="142" pos:column="21"/></operator><literal type="char" pos:line="142" pos:column="21">'/'<pos:position pos:line="142" pos:column="24"/></literal></expr>)<pos:position pos:line="142" pos:column="25"/></condition><then pos:line="142" pos:column="25">
      <comment type="block" pos:line="143" pos:column="7">/* If the first character in the proxy string is a slash, fail
         immediately. The following code will otherwise clear the string which
         will lead to code running as if no proxy was set! */</comment>
      <block type="pseudo"><return pos:line="146" pos:column="7">return <expr><name pos:line="146" pos:column="14">CURLE_COULDNT_RESOLVE_PROXY<pos:position pos:line="146" pos:column="41"/></name></expr>;<pos:position pos:line="146" pos:column="42"/></return></block></then></if>

    <comment type="block" pos:line="148" pos:column="5">/* without a port number after the host name, some people seem to use
       a slash so we strip everything from the first slash */</comment>
    <expr_stmt><expr><name pos:line="150" pos:column="5">atsign<pos:position pos:line="150" pos:column="11"/></name> <operator pos:line="150" pos:column="12">=<pos:position pos:line="150" pos:column="13"/></operator> <call><name pos:line="150" pos:column="14">strchr<pos:position pos:line="150" pos:column="20"/></name><argument_list pos:line="150" pos:column="20">(<argument><expr><name pos:line="150" pos:column="21">proxyptr<pos:position pos:line="150" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="150" pos:column="31">'/'<pos:position pos:line="150" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="36"/></expr_stmt>
    <if pos:line="151" pos:column="5">if<condition pos:line="151" pos:column="7">(<expr><name pos:line="151" pos:column="8">atsign<pos:position pos:line="151" pos:column="14"/></name></expr>)<pos:position pos:line="151" pos:column="15"/></condition><then pos:line="151" pos:column="15">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="152" pos:column="7">*<pos:position pos:line="152" pos:column="8"/></operator><name pos:line="152" pos:column="8">atsign<pos:position pos:line="152" pos:column="14"/></name> <operator pos:line="152" pos:column="15">=<pos:position pos:line="152" pos:column="16"/></operator> <literal type="char" pos:line="152" pos:column="17">'\0'<pos:position pos:line="152" pos:column="21"/></literal></expr>;<pos:position pos:line="152" pos:column="22"/></expr_stmt></block></then></if> <comment type="block" pos:line="152" pos:column="23">/* cut off path part from host name */</comment>

    <if pos:line="154" pos:column="5">if<condition pos:line="154" pos:column="7">(<expr><name><name pos:line="154" pos:column="8">data<pos:position pos:line="154" pos:column="12"/></name><operator pos:line="154" pos:column="12">-&gt;<pos:position pos:line="154" pos:column="17"/></operator><name pos:line="154" pos:column="14">set<pos:position pos:line="154" pos:column="17"/></name><operator pos:line="154" pos:column="17">.<pos:position pos:line="154" pos:column="18"/></operator><name pos:line="154" pos:column="18">proxyport<pos:position pos:line="154" pos:column="27"/></name></name></expr>)<pos:position pos:line="154" pos:column="28"/></condition><then pos:line="154" pos:column="28">
      <comment type="block" pos:line="155" pos:column="7">/* None given in the proxy string, then get the default one if it is
         given */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="157" pos:column="7">conn<pos:position pos:line="157" pos:column="11"/></name><operator pos:line="157" pos:column="11">-&gt;<pos:position pos:line="157" pos:column="16"/></operator><name pos:line="157" pos:column="13">port<pos:position pos:line="157" pos:column="17"/></name></name> <operator pos:line="157" pos:column="18">=<pos:position pos:line="157" pos:column="19"/></operator> <name><name pos:line="157" pos:column="20">data<pos:position pos:line="157" pos:column="24"/></name><operator pos:line="157" pos:column="24">-&gt;<pos:position pos:line="157" pos:column="29"/></operator><name pos:line="157" pos:column="26">set<pos:position pos:line="157" pos:column="29"/></name><operator pos:line="157" pos:column="29">.<pos:position pos:line="157" pos:column="30"/></operator><name pos:line="157" pos:column="30">proxyport<pos:position pos:line="157" pos:column="39"/></name></name></expr>;<pos:position pos:line="157" pos:column="40"/></expr_stmt></block></then></if>
  }<pos:position pos:line="158" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="160" pos:column="3">/* now, clone the cleaned proxy host name */</comment>
  <expr_stmt><expr><name><name pos:line="161" pos:column="3">conn<pos:position pos:line="161" pos:column="7"/></name><operator pos:line="161" pos:column="7">-&gt;<pos:position pos:line="161" pos:column="12"/></operator><name pos:line="161" pos:column="9">proxy<pos:position pos:line="161" pos:column="14"/></name><operator pos:line="161" pos:column="14">.<pos:position pos:line="161" pos:column="15"/></operator><name pos:line="161" pos:column="15">rawalloc<pos:position pos:line="161" pos:column="23"/></name></name> <operator pos:line="161" pos:column="24">=<pos:position pos:line="161" pos:column="25"/></operator> <call><name pos:line="161" pos:column="26">strdup<pos:position pos:line="161" pos:column="32"/></name><argument_list pos:line="161" pos:column="32">(<argument><expr><name pos:line="161" pos:column="33">proxyptr<pos:position pos:line="161" pos:column="41"/></name></expr></argument>)<pos:position pos:line="161" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="162" pos:column="3">conn<pos:position pos:line="162" pos:column="7"/></name><operator pos:line="162" pos:column="7">-&gt;<pos:position pos:line="162" pos:column="12"/></operator><name pos:line="162" pos:column="9">proxy<pos:position pos:line="162" pos:column="14"/></name><operator pos:line="162" pos:column="14">.<pos:position pos:line="162" pos:column="15"/></operator><name pos:line="162" pos:column="15">name<pos:position pos:line="162" pos:column="19"/></name></name> <operator pos:line="162" pos:column="20">=<pos:position pos:line="162" pos:column="21"/></operator> <name><name pos:line="162" pos:column="22">conn<pos:position pos:line="162" pos:column="26"/></name><operator pos:line="162" pos:column="26">-&gt;<pos:position pos:line="162" pos:column="31"/></operator><name pos:line="162" pos:column="28">proxy<pos:position pos:line="162" pos:column="33"/></name><operator pos:line="162" pos:column="33">.<pos:position pos:line="162" pos:column="34"/></operator><name pos:line="162" pos:column="34">rawalloc<pos:position pos:line="162" pos:column="42"/></name></name></expr>;<pos:position pos:line="162" pos:column="43"/></expr_stmt>

  <if pos:line="164" pos:column="3">if<condition pos:line="164" pos:column="5">(<expr><operator pos:line="164" pos:column="6">!<pos:position pos:line="164" pos:column="7"/></operator><name><name pos:line="164" pos:column="7">conn<pos:position pos:line="164" pos:column="11"/></name><operator pos:line="164" pos:column="11">-&gt;<pos:position pos:line="164" pos:column="16"/></operator><name pos:line="164" pos:column="13">proxy<pos:position pos:line="164" pos:column="18"/></name><operator pos:line="164" pos:column="18">.<pos:position pos:line="164" pos:column="19"/></operator><name pos:line="164" pos:column="19">rawalloc<pos:position pos:line="164" pos:column="27"/></name></name></expr>)<pos:position pos:line="164" pos:column="28"/></condition><then pos:line="164" pos:column="28">
    <block type="pseudo"><return pos:line="165" pos:column="5">return <expr><name pos:line="165" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="165" pos:column="31"/></name></expr>;<pos:position pos:line="165" pos:column="32"/></return></block></then></if>

  <return pos:line="167" pos:column="3">return <expr><name pos:line="167" pos:column="10">CURLE_OK<pos:position pos:line="167" pos:column="18"/></name></expr>;<pos:position pos:line="167" pos:column="19"/></return>
}<pos:position pos:line="168" pos:column="2"/></block></function></unit>
