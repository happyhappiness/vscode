<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_377_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_file_connect<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">actual_path<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">curl_unescape<pos:position pos:line="3" pos:column="36"/></name><argument_list pos:line="3" pos:column="36">(<argument><expr><name><name pos:line="3" pos:column="37">conn<pos:position pos:line="3" pos:column="41"/></name><operator pos:line="3" pos:column="41">-&gt;<pos:position pos:line="3" pos:column="46"/></operator><name pos:line="3" pos:column="43">path<pos:position pos:line="3" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="49">0<pos:position pos:line="3" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">FILE<pos:position pos:line="4" pos:column="14"/></name></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">file<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">fd<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><call><name pos:line="6" pos:column="5">defined<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">WIN32<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call> <operator pos:line="6" pos:column="20">||<pos:position pos:line="6" pos:column="22"/></operator> <call><name pos:line="6" pos:column="23">defined<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">__EMX__<pos:position pos:line="6" pos:column="38"/></name></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="10" pos:column="3">file<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <operator pos:line="10" pos:column="10">(<pos:position pos:line="10" pos:column="11"/></operator>struct <name pos:line="10" pos:column="18">FILE<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></operator><operator pos:line="10" pos:column="24">)<pos:position pos:line="10" pos:column="25"/></operator><call><name pos:line="10" pos:column="25">malloc<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><sizeof pos:line="10" pos:column="32">sizeof<argument_list pos:line="10" pos:column="38">(<argument><expr pos:line="10" pos:column="39">struct <name pos:line="10" pos:column="46">FILE<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><operator pos:line="11" pos:column="6">!<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">file<pos:position pos:line="11" pos:column="11"/></name></expr>)<pos:position pos:line="11" pos:column="12"/></condition><then pos:line="11" pos:column="12">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memset<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">file<pos:position pos:line="14" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="19">sizeof<argument_list pos:line="14" pos:column="25">(<argument><expr pos:line="14" pos:column="26">struct <name pos:line="14" pos:column="33">FILE<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">conn<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">proto<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">.<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">file<pos:position pos:line="15" pos:column="19"/></name></name> <operator pos:line="15" pos:column="20">=<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">file<pos:position pos:line="15" pos:column="26"/></name></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>

<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><call><name pos:line="17" pos:column="5">defined<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">WIN32<pos:position pos:line="17" pos:column="18"/></name></expr></argument>)<pos:position pos:line="17" pos:column="19"/></argument_list></call> <operator pos:line="17" pos:column="20">||<pos:position pos:line="17" pos:column="22"/></operator> <call><name pos:line="17" pos:column="23">defined<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><name pos:line="17" pos:column="31">__EMX__<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="18" pos:column="3">/* change path separators from '/' to '\\' for Windows and OS/2 */</comment>
  <for pos:line="19" pos:column="3">for <control pos:line="19" pos:column="7">(<init><expr><name pos:line="19" pos:column="8">i<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator><literal type="number" pos:line="19" pos:column="10">0<pos:position pos:line="19" pos:column="11"/></literal></expr>;<pos:position pos:line="19" pos:column="12"/></init> <condition><expr><name><name pos:line="19" pos:column="13">actual_path<pos:position pos:line="19" pos:column="24"/></name><index pos:line="19" pos:column="24">[<expr><name pos:line="19" pos:column="25">i<pos:position pos:line="19" pos:column="26"/></name></expr>]<pos:position pos:line="19" pos:column="27"/></index></name> <operator pos:line="19" pos:column="28">!=<pos:position pos:line="19" pos:column="30"/></operator> <literal type="char" pos:line="19" pos:column="31">'\0'<pos:position pos:line="19" pos:column="35"/></literal></expr>;<pos:position pos:line="19" pos:column="36"/></condition> <incr><expr><operator pos:line="19" pos:column="37">++<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="39">i<pos:position pos:line="19" pos:column="40"/></name></expr></incr>)<pos:position pos:line="19" pos:column="41"/></control>
    <block type="pseudo"><if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">actual_path<pos:position pos:line="20" pos:column="20"/></name><index pos:line="20" pos:column="20">[<expr><name pos:line="20" pos:column="21">i<pos:position pos:line="20" pos:column="22"/></name></expr>]<pos:position pos:line="20" pos:column="23"/></index></name> <operator pos:line="20" pos:column="24">==<pos:position pos:line="20" pos:column="26"/></operator> <literal type="char" pos:line="20" pos:column="27">'/'<pos:position pos:line="20" pos:column="30"/></literal></expr>)<pos:position pos:line="20" pos:column="31"/></condition><then pos:line="20" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="7">actual_path<pos:position pos:line="21" pos:column="18"/></name><index pos:line="21" pos:column="18">[<expr><name pos:line="21" pos:column="19">i<pos:position pos:line="21" pos:column="20"/></name></expr>]<pos:position pos:line="21" pos:column="21"/></index></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <literal type="char" pos:line="21" pos:column="24">'\\'<pos:position pos:line="21" pos:column="28"/></literal></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt></block></then></if></block></for>

  <expr_stmt><expr><name pos:line="23" pos:column="3">fd<pos:position pos:line="23" pos:column="5"/></name> <operator pos:line="23" pos:column="6">=<pos:position pos:line="23" pos:column="7"/></operator> <call><name pos:line="23" pos:column="8">open<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">actual_path<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="26">O_RDONLY<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">|<pos:position pos:line="23" pos:column="36"/></operator> <name pos:line="23" pos:column="37">O_BINARY<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>	<comment type="block" pos:line="23" pos:column="49">/* no CR/LF translation! */</comment>
<cpp:else pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">else<pos:position pos:line="24" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="25" pos:column="3">fd<pos:position pos:line="25" pos:column="5"/></name> <operator pos:line="25" pos:column="6">=<pos:position pos:line="25" pos:column="7"/></operator> <call><name pos:line="25" pos:column="8">open<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">actual_path<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="26">O_RDONLY<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">free<pos:position pos:line="27" pos:column="7"/></name><argument_list pos:line="27" pos:column="7">(<argument><expr><name pos:line="27" pos:column="8">actual_path<pos:position pos:line="27" pos:column="19"/></name></expr></argument>)<pos:position pos:line="27" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="21"/></expr_stmt>

  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><name pos:line="29" pos:column="6">fd<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">==<pos:position pos:line="29" pos:column="11"/></operator> <operator pos:line="29" pos:column="12">-<pos:position pos:line="29" pos:column="13"/></operator><literal type="number" pos:line="29" pos:column="13">1<pos:position pos:line="29" pos:column="14"/></literal></expr>)<pos:position pos:line="29" pos:column="15"/></condition><then pos:line="29" pos:column="15"> <block pos:line="29" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">failf<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><name><name pos:line="30" pos:column="11">conn<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">-&gt;<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="17">data<pos:position pos:line="30" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"Couldn't open file %s"<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="48">conn<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">-&gt;<pos:position pos:line="30" pos:column="57"/></operator><name pos:line="30" pos:column="54">path<pos:position pos:line="30" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">CURLE_FILE_COULDNT_READ_FILE<pos:position pos:line="31" pos:column="40"/></name></expr>;<pos:position pos:line="31" pos:column="41"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="33" pos:column="3">file<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">-&gt;<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="9">fd<pos:position pos:line="33" pos:column="11"/></name></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <name pos:line="33" pos:column="14">fd<pos:position pos:line="33" pos:column="16"/></name></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>

  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">CURLE_OK<pos:position pos:line="35" pos:column="18"/></name></expr>;<pos:position pos:line="35" pos:column="19"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
