<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_45_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ProcessRequest<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">request<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">line<pos:position pos:line="3" pos:column="13"/></name><init pos:line="3" pos:column="13">=<expr><name pos:line="3" pos:column="14">request<pos:position pos:line="3" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">long<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">contentlength<pos:position pos:line="4" pos:column="30"/></name><init pos:line="4" pos:column="30">=<expr><literal type="number" pos:line="4" pos:column="31">0<pos:position pos:line="4" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">chunked<pos:position pos:line="5" pos:column="15"/></name><init pos:line="5" pos:column="15">=<expr><name pos:line="5" pos:column="16">FALSE<pos:position pos:line="5" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

<cpp:define pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">define<pos:position pos:line="7" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="7" pos:column="9">END_OF_HEADERS<pos:position pos:line="7" pos:column="23"/></name></cpp:macro> <cpp:value pos:line="7" pos:column="24">"\r\n\r\n"<pos:position pos:line="7" pos:column="34"/></cpp:value></cpp:define>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">end<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">end<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">strstr<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">request<pos:position pos:line="10" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="25">END_OF_HEADERS<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">end<pos:position pos:line="12" pos:column="10"/></name></expr>)<pos:position pos:line="12" pos:column="11"/></condition><then pos:line="12" pos:column="11">
    <comment type="block" pos:line="13" pos:column="5">/* we don't have a complete request yet! */</comment>
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>;<pos:position pos:line="14" pos:column="14"/></return></block></then></if>

  <comment type="block" pos:line="16" pos:column="3">/* **** Persistancy ****
   *
   * If the request is a HTTP/1.0 one, we close the connection unconditionally
   * when we're done.
   *
   * If the request is a HTTP/1.1 one, we MUST check for a "Connection:"
   * header that might say "close". If it does, we close a connection when
   * this request is processed. Otherwise, we keep the connection alive for X
   * seconds.
   */</comment>

  <do pos:line="27" pos:column="3">do <block pos:line="27" pos:column="6">{
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><operator pos:line="28" pos:column="8">!<pos:position pos:line="28" pos:column="9"/></operator><call><name pos:line="28" pos:column="9">strncasecmp<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><literal type="string" pos:line="28" pos:column="21">"Content-Length:"<pos:position pos:line="28" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">line<pos:position pos:line="28" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="46">15<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="50"/></condition><then pos:line="28" pos:column="50"> <block pos:line="28" pos:column="51">{
      <expr_stmt><expr><name pos:line="29" pos:column="7">contentlength<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <call><name pos:line="29" pos:column="23">strtol<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">line<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">+<pos:position pos:line="29" pos:column="35"/></operator><literal type="number" pos:line="29" pos:column="35">15<pos:position pos:line="29" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="29" pos:column="39">&amp;<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="40">line<pos:position pos:line="29" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="46">10<pos:position pos:line="29" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
      <break pos:line="30" pos:column="7">break;<pos:position pos:line="30" pos:column="13"/></break>
    }<pos:position pos:line="31" pos:column="6"/></block></then>
    <elseif pos:line="32" pos:column="5">else <if pos:line="32" pos:column="10">if<condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><call><name pos:line="32" pos:column="14">strncasecmp<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><literal type="string" pos:line="32" pos:column="26">"Transfer-Encoding: chunked"<pos:position pos:line="32" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="56">line<pos:position pos:line="32" pos:column="60"/></name></expr></argument>,
                         <argument><expr><call><name pos:line="33" pos:column="26">strlen<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><literal type="string" pos:line="33" pos:column="33">"Transfer-Encoding: chunked"<pos:position pos:line="33" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="64"/></condition><then pos:line="33" pos:column="64"> <block pos:line="33" pos:column="65">{
      <comment type="block" pos:line="34" pos:column="7">/* chunked data coming in */</comment>
      <expr_stmt><expr><name pos:line="35" pos:column="7">chunked<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">TRUE<pos:position pos:line="35" pos:column="21"/></name></expr>;<pos:position pos:line="35" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">chunked<pos:position pos:line="38" pos:column="15"/></name></expr>)<pos:position pos:line="38" pos:column="16"/></condition><then pos:line="38" pos:column="16"> <block pos:line="38" pos:column="17">{
      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">(<expr><call><name pos:line="39" pos:column="10">strstr<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">request<pos:position pos:line="39" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="26">"\r\n0\r\n"<pos:position pos:line="39" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39">
        <comment type="block" pos:line="40" pos:column="9">/* end of chunks reached */</comment>
        <block type="pseudo"><return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return></block></then> <comment type="block" pos:line="41" pos:column="19">/* done */</comment>
      <else pos:line="42" pos:column="7">else
        <block type="pseudo"><return pos:line="43" pos:column="9">return <expr><literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></return></block></else></if> <comment type="block" pos:line="43" pos:column="19">/* not done */</comment>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="46" pos:column="5">line<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <call><name pos:line="46" pos:column="12">strchr<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">line<pos:position pos:line="46" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="25">'\n'<pos:position pos:line="46" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt>
    <if pos:line="47" pos:column="5">if<condition pos:line="47" pos:column="7">(<expr><name pos:line="47" pos:column="8">line<pos:position pos:line="47" pos:column="12"/></name></expr>)<pos:position pos:line="47" pos:column="13"/></condition><then pos:line="47" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="7">line<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">++<pos:position pos:line="48" pos:column="13"/></operator></expr>;<pos:position pos:line="48" pos:column="14"/></expr_stmt></block></then></if>
  }<pos:position pos:line="49" pos:column="4"/></block> while<condition pos:line="49" pos:column="10">(<expr><name pos:line="49" pos:column="11">line<pos:position pos:line="49" pos:column="15"/></name></expr>)<pos:position pos:line="49" pos:column="16"/></condition>;<pos:position pos:line="49" pos:column="17"/></do>

  <if pos:line="51" pos:column="3">if<condition pos:line="51" pos:column="5">(<expr><name pos:line="51" pos:column="6">contentlength<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">&gt;<pos:position pos:line="51" pos:column="24"/></operator> <literal type="number" pos:line="51" pos:column="22">0<pos:position pos:line="51" pos:column="23"/></literal></expr> )<pos:position pos:line="51" pos:column="25"/></condition><then pos:line="51" pos:column="25"> <block pos:line="51" pos:column="26">{
    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name pos:line="52" pos:column="8">contentlength<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">&lt;=<pos:position pos:line="52" pos:column="27"/></operator> <call><name pos:line="52" pos:column="25">strlen<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><name pos:line="52" pos:column="32">end<pos:position pos:line="52" pos:column="35"/></name><operator pos:line="52" pos:column="35">+<pos:position pos:line="52" pos:column="36"/></operator><call><name pos:line="52" pos:column="36">strlen<pos:position pos:line="52" pos:column="42"/></name><argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">END_OF_HEADERS<pos:position pos:line="52" pos:column="57"/></name></expr></argument>)<pos:position pos:line="52" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="60"/></condition><then pos:line="52" pos:column="60">
      <block type="pseudo"><return pos:line="53" pos:column="7">return <expr><literal type="number" pos:line="53" pos:column="14">1<pos:position pos:line="53" pos:column="15"/></literal></expr>;<pos:position pos:line="53" pos:column="16"/></return></block></then> <comment type="block" pos:line="53" pos:column="17">/* done */</comment>
    <else pos:line="54" pos:column="5">else
      <block type="pseudo"><return pos:line="55" pos:column="7">return <expr><literal type="number" pos:line="55" pos:column="14">0<pos:position pos:line="55" pos:column="15"/></literal></expr>;<pos:position pos:line="55" pos:column="16"/></return></block></else></if> <comment type="block" pos:line="55" pos:column="17">/* not complete yet */</comment>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>
  <return pos:line="57" pos:column="3">return <expr><literal type="number" pos:line="57" pos:column="10">1<pos:position pos:line="57" pos:column="11"/></literal></expr>;<pos:position pos:line="57" pos:column="12"/></return> <comment type="block" pos:line="57" pos:column="13">/* done */</comment>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
