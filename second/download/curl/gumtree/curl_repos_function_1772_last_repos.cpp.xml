<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1772_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_ipv4_resolve_r<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">hostname<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">port<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><operator pos:line="4" pos:column="5">!<pos:position pos:line="4" pos:column="6"/></operator><call><name pos:line="4" pos:column="6">defined<pos:position pos:line="4" pos:column="13"/></name><argument_list pos:line="4" pos:column="13">(<argument><expr><name pos:line="4" pos:column="14">HAVE_GETADDRINFO_THREADSAFE<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call> <operator pos:line="4" pos:column="43">&amp;&amp;<pos:position pos:line="4" pos:column="53"/></operator> <call><name pos:line="4" pos:column="46">defined<pos:position pos:line="4" pos:column="53"/></name><argument_list pos:line="4" pos:column="53">(<argument><expr><name pos:line="4" pos:column="54">HAVE_GETHOSTBYNAME_R_3<pos:position pos:line="4" pos:column="76"/></name></expr></argument>)<pos:position pos:line="4" pos:column="77"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">res<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">Curl_addrinfo<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">ai<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">NULL<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">hostent<pos:position pos:line="8" pos:column="17"/></name></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">h<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name pos:line="8" pos:column="23">NULL<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">in_addr<pos:position pos:line="9" pos:column="17"/></name></name></type> <name pos:line="9" pos:column="18">in<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">hostent<pos:position pos:line="10" pos:column="17"/></name></name> <modifier pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></modifier></type><name pos:line="10" pos:column="19">buf<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><name pos:line="10" pos:column="25">NULL<pos:position pos:line="10" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><call><name pos:line="12" pos:column="6">Curl_inet_pton<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">AF_INET<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="30">hostname<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="40">&amp;<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="41">in<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call> <operator pos:line="12" pos:column="45">&gt;<pos:position pos:line="12" pos:column="49"/></operator> <literal type="number" pos:line="12" pos:column="47">0<pos:position pos:line="12" pos:column="48"/></literal></expr>)<pos:position pos:line="12" pos:column="49"/></condition><then pos:line="12" pos:column="49">
    <comment type="block" pos:line="13" pos:column="5">/* This is a dotted IP address 123.123.123.123-style */</comment>
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><call><name pos:line="14" pos:column="12">Curl_ip2addr<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">AF_INET<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="34">&amp;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="35">in<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="39">hostname<pos:position pos:line="14" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">port<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></return></block></then>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><call><name pos:line="16" pos:column="5">defined<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">HAVE_GETADDRINFO_THREADSAFE<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr></cpp:if>
  <else pos:line="17" pos:column="3">else <block pos:line="17" pos:column="8">{
    <decl_stmt><decl><type><name><name pos:line="18" pos:column="5">struct<pos:position pos:line="18" pos:column="11"/></name> <name pos:line="18" pos:column="12">addrinfo<pos:position pos:line="18" pos:column="20"/></name></name></type> <name pos:line="18" pos:column="21">hints<pos:position pos:line="18" pos:column="26"/></name></decl>;<pos:position pos:line="18" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name></type> <name><name pos:line="19" pos:column="10">sbuf<pos:position pos:line="19" pos:column="14"/></name><index pos:line="19" pos:column="14">[<expr><literal type="number" pos:line="19" pos:column="15">12<pos:position pos:line="19" pos:column="17"/></literal></expr>]<pos:position pos:line="19" pos:column="18"/></index></name></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name> <modifier pos:line="20" pos:column="10">*<pos:position pos:line="20" pos:column="11"/></modifier></type><name pos:line="20" pos:column="11">sbufptr<pos:position pos:line="20" pos:column="18"/></name> <init pos:line="20" pos:column="19">= <expr><name pos:line="20" pos:column="21">NULL<pos:position pos:line="20" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">memset<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><operator pos:line="22" pos:column="12">&amp;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="13">hints<pos:position pos:line="22" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="20">0<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="23">sizeof<argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">hints<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">hints<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">.<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">ai_family<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">PF_INET<pos:position pos:line="23" pos:column="30"/></name></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">hints<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">.<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">ai_socktype<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">SOCK_STREAM<pos:position pos:line="24" pos:column="36"/></name></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">port<pos:position pos:line="25" pos:column="12"/></name></expr>)<pos:position pos:line="25" pos:column="13"/></condition><then pos:line="25" pos:column="13"> <block pos:line="25" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">snprintf<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">sbuf<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="22">sizeof<argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">sbuf<pos:position pos:line="26" pos:column="33"/></name></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="36">"%d"<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="42">port<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="27" pos:column="7">sbufptr<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">sbuf<pos:position pos:line="27" pos:column="21"/></name></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="30" pos:column="5">(<pos:position pos:line="30" pos:column="6"/></operator><name pos:line="30" pos:column="6">void<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">)<pos:position pos:line="30" pos:column="11"/></operator><call><name pos:line="30" pos:column="11">Curl_getaddrinfo_ex<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">hostname<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">sbufptr<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="50">&amp;<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="51">hints<pos:position pos:line="30" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="58">&amp;<pos:position pos:line="30" pos:column="63"/></operator><name pos:line="30" pos:column="59">ai<pos:position pos:line="30" pos:column="61"/></name></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="63"/></expr_stmt>

<cpp:elif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">elif<pos:position pos:line="32" pos:column="6"/></cpp:directive> <expr><call><name pos:line="32" pos:column="7">defined<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">HAVE_GETHOSTBYNAME_R<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr></cpp:elif>
  <comment type="block" pos:line="33" pos:column="3">/*
   * gethostbyname_r() is the preferred resolve function for many platforms.
   * Since there are three different versions of it, the following code is
   * somewhat #ifdef-ridden.
   */</comment>
  <else pos:line="38" pos:column="3">else <block pos:line="38" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">int<pos:position pos:line="39" pos:column="8"/></name></type> <name pos:line="39" pos:column="9">h_errnop<pos:position pos:line="39" pos:column="17"/></name></decl>;<pos:position pos:line="39" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><name pos:line="41" pos:column="5">buf<pos:position pos:line="41" pos:column="8"/></name> <operator pos:line="41" pos:column="9">=<pos:position pos:line="41" pos:column="10"/></operator> <call><name pos:line="41" pos:column="11">calloc<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><literal type="number" pos:line="41" pos:column="18">1<pos:position pos:line="41" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="21">CURL_HOSTENT_SIZE<pos:position pos:line="41" pos:column="38"/></name></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
    <if pos:line="42" pos:column="5">if<condition pos:line="42" pos:column="7">(<expr><operator pos:line="42" pos:column="8">!<pos:position pos:line="42" pos:column="9"/></operator><name pos:line="42" pos:column="9">buf<pos:position pos:line="42" pos:column="12"/></name></expr>)<pos:position pos:line="42" pos:column="13"/></condition><then pos:line="42" pos:column="13">
      <block type="pseudo"><return pos:line="43" pos:column="7">return <expr><name pos:line="43" pos:column="14">NULL<pos:position pos:line="43" pos:column="18"/></name></expr>;<pos:position pos:line="43" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="43" pos:column="20">/* major failure */</comment>
    <comment type="block" pos:line="44" pos:column="5">/*
     * The clearing of the buffer is a workaround for a gethostbyname_r bug in
     * qnx nto and it is also _required_ for some of these functions on some
     * platforms.
     */</comment>

<cpp:if pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">if<pos:position pos:line="50" pos:column="4"/></cpp:directive> <expr><call><name pos:line="50" pos:column="5">defined<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><name pos:line="50" pos:column="13">HAVE_GETHOSTBYNAME_R_5<pos:position pos:line="50" pos:column="35"/></name></expr></argument>)<pos:position pos:line="50" pos:column="36"/></argument_list></call></expr></cpp:if>
    <comment type="block" pos:line="51" pos:column="5">/* Solaris, IRIX and more */</comment>
    <expr_stmt><expr><name pos:line="52" pos:column="5">h<pos:position pos:line="52" pos:column="6"/></name> <operator pos:line="52" pos:column="7">=<pos:position pos:line="52" pos:column="8"/></operator> <call><name pos:line="52" pos:column="9">gethostbyname_r<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">hostname<pos:position pos:line="52" pos:column="33"/></name></expr></argument>,
                        <argument><expr><operator pos:line="53" pos:column="25">(<pos:position pos:line="53" pos:column="26"/></operator>struct <name pos:line="53" pos:column="33">hostent<pos:position pos:line="53" pos:column="40"/></name> <operator pos:line="53" pos:column="41">*<pos:position pos:line="53" pos:column="42"/></operator><operator pos:line="53" pos:column="42">)<pos:position pos:line="53" pos:column="43"/></operator><name pos:line="53" pos:column="43">buf<pos:position pos:line="53" pos:column="46"/></name></expr></argument>,
                        <argument><expr><operator pos:line="54" pos:column="25">(<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">char<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">*<pos:position pos:line="54" pos:column="32"/></operator><operator pos:line="54" pos:column="32">)<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="33">buf<pos:position pos:line="54" pos:column="36"/></name> <operator pos:line="54" pos:column="37">+<pos:position pos:line="54" pos:column="38"/></operator> <sizeof pos:line="54" pos:column="39">sizeof<argument_list pos:line="54" pos:column="45">(<argument><expr pos:line="54" pos:column="46">struct <name pos:line="54" pos:column="53">hostent<pos:position pos:line="54" pos:column="60"/></name></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><name pos:line="55" pos:column="25">CURL_HOSTENT_SIZE<pos:position pos:line="55" pos:column="42"/></name> <operator pos:line="55" pos:column="43">-<pos:position pos:line="55" pos:column="44"/></operator> <sizeof pos:line="55" pos:column="45">sizeof<argument_list pos:line="55" pos:column="51">(<argument><expr pos:line="55" pos:column="52">struct <name pos:line="55" pos:column="59">hostent<pos:position pos:line="55" pos:column="66"/></name></expr></argument>)<pos:position pos:line="55" pos:column="67"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><operator pos:line="56" pos:column="25">&amp;<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="26">h_errnop<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="58" pos:column="5">/* If the buffer is too small, it returns NULL and sets errno to
     * ERANGE. The errno is thread safe if this is compiled with
     * -D_REENTRANT as then the 'errno' variable is a macro defined to get
     * used properly for threads.
     */</comment>

    <if pos:line="64" pos:column="5">if<condition pos:line="64" pos:column="7">(<expr><name pos:line="64" pos:column="8">h<pos:position pos:line="64" pos:column="9"/></name></expr>)<pos:position pos:line="64" pos:column="10"/></condition><then pos:line="64" pos:column="10"> <block pos:line="64" pos:column="11">{
      <empty_stmt pos:line="65" pos:column="7">;<pos:position pos:line="65" pos:column="8"/></empty_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></then>
    <else pos:line="67" pos:column="5">else
<cpp:elif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">elif<pos:position pos:line="68" pos:column="6"/></cpp:directive> <expr><call><name pos:line="68" pos:column="7">defined<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">(<argument><expr><name pos:line="68" pos:column="15">HAVE_GETHOSTBYNAME_R_6<pos:position pos:line="68" pos:column="37"/></name></expr></argument>)<pos:position pos:line="68" pos:column="38"/></argument_list></call></expr></cpp:elif>
    <comment type="block" pos:line="69" pos:column="5">/* Linux */</comment>

    <block type="pseudo"><expr_stmt><expr><operator pos:line="71" pos:column="5">(<pos:position pos:line="71" pos:column="6"/></operator><name pos:line="71" pos:column="6">void<pos:position pos:line="71" pos:column="10"/></name><operator pos:line="71" pos:column="10">)<pos:position pos:line="71" pos:column="11"/></operator><call><name pos:line="71" pos:column="11">gethostbyname_r<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">(<argument><expr><name pos:line="71" pos:column="27">hostname<pos:position pos:line="71" pos:column="35"/></name></expr></argument>,
                        <argument><expr><operator pos:line="72" pos:column="25">(<pos:position pos:line="72" pos:column="26"/></operator>struct <name pos:line="72" pos:column="33">hostent<pos:position pos:line="72" pos:column="40"/></name> <operator pos:line="72" pos:column="41">*<pos:position pos:line="72" pos:column="42"/></operator><operator pos:line="72" pos:column="42">)<pos:position pos:line="72" pos:column="43"/></operator><name pos:line="72" pos:column="43">buf<pos:position pos:line="72" pos:column="46"/></name></expr></argument>,
                        <argument><expr><operator pos:line="73" pos:column="25">(<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="26">char<pos:position pos:line="73" pos:column="30"/></name> <operator pos:line="73" pos:column="31">*<pos:position pos:line="73" pos:column="32"/></operator><operator pos:line="73" pos:column="32">)<pos:position pos:line="73" pos:column="33"/></operator><name pos:line="73" pos:column="33">buf<pos:position pos:line="73" pos:column="36"/></name> <operator pos:line="73" pos:column="37">+<pos:position pos:line="73" pos:column="38"/></operator> <sizeof pos:line="73" pos:column="39">sizeof<argument_list pos:line="73" pos:column="45">(<argument><expr pos:line="73" pos:column="46">struct <name pos:line="73" pos:column="53">hostent<pos:position pos:line="73" pos:column="60"/></name></expr></argument>)<pos:position pos:line="73" pos:column="61"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><name pos:line="74" pos:column="25">CURL_HOSTENT_SIZE<pos:position pos:line="74" pos:column="42"/></name> <operator pos:line="74" pos:column="43">-<pos:position pos:line="74" pos:column="44"/></operator> <sizeof pos:line="74" pos:column="45">sizeof<argument_list pos:line="74" pos:column="51">(<argument><expr pos:line="74" pos:column="52">struct <name pos:line="74" pos:column="59">hostent<pos:position pos:line="74" pos:column="66"/></name></expr></argument>)<pos:position pos:line="74" pos:column="67"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><operator pos:line="75" pos:column="25">&amp;<pos:position pos:line="75" pos:column="30"/></operator><name pos:line="75" pos:column="26">h<pos:position pos:line="75" pos:column="27"/></name></expr></argument>, <comment type="block" pos:line="75" pos:column="29">/* DIFFERENCE */</comment>
                        <argument><expr><operator pos:line="76" pos:column="25">&amp;<pos:position pos:line="76" pos:column="30"/></operator><name pos:line="76" pos:column="26">h_errnop<pos:position pos:line="76" pos:column="34"/></name></expr></argument>)<pos:position pos:line="76" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="36"/></expr_stmt></block></else></if>
    <comment type="block" pos:line="77" pos:column="5">/* Redhat 8, using glibc 2.2.93 changed the behavior. Now all of a
     * sudden this function returns EAGAIN if the given buffer size is too
     * small. Previous versions are known to return ERANGE for the same
     * problem.
     *
     * This wouldn't be such a big problem if older versions wouldn't
     * sometimes return EAGAIN on a common failure case. Alas, we can't
     * assume that EAGAIN *or* ERANGE means ERANGE for any given version of
     * glibc.
     *
     * For now, we do that and thus we may call the function repeatedly and
     * fail for older glibc versions that return EAGAIN, until we run out of
     * buffer size (step_size grows beyond CURL_HOSTENT_SIZE).
     *
     * If anyone has a better fix, please tell us!
     *
     * -------------------------------------------------------------------
     *
     * On October 23rd 2003, Dan C dug up more details on the mysteries of
     * gethostbyname_r() in glibc:
     *
     * In glibc 2.2.5 the interface is different (this has also been
     * discovered in glibc 2.1.1-6 as shipped by Redhat 6). What I can't
     * explain, is that tests performed on glibc 2.2.4-34 and 2.2.4-32
     * (shipped/upgraded by Redhat 7.2) don't show this behavior!
     *
     * In this "buggy" version, the return code is -1 on error and 'errno'
     * is set to the ERANGE or EAGAIN code. Note that 'errno' is not a
     * thread-safe variable.
     */</comment>

    <if pos:line="108" pos:column="5">if<condition pos:line="108" pos:column="7">(<expr><operator pos:line="108" pos:column="8">!<pos:position pos:line="108" pos:column="9"/></operator><name pos:line="108" pos:column="9">h<pos:position pos:line="108" pos:column="10"/></name></expr>)<pos:position pos:line="108" pos:column="11"/></condition><then pos:line="108" pos:column="11"> <comment type="block" pos:line="108" pos:column="12">/* failure */</comment>
<cpp:elif pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">elif<pos:position pos:line="109" pos:column="6"/></cpp:directive> <expr><call><name pos:line="109" pos:column="7">defined<pos:position pos:line="109" pos:column="14"/></name><argument_list pos:line="109" pos:column="14">(<argument><expr><name pos:line="109" pos:column="15">HAVE_GETHOSTBYNAME_R_3<pos:position pos:line="109" pos:column="37"/></name></expr></argument>)<pos:position pos:line="109" pos:column="38"/></argument_list></call></expr></cpp:elif>
    <comment type="block" pos:line="110" pos:column="5">/* AIX, Digital Unix/Tru64, HPUX 10, more? */</comment>

    <comment type="block" pos:line="112" pos:column="5">/* For AIX 4.3 or later, we don't use gethostbyname_r() at all, because of
     * the plain fact that it does not return unique full buffers on each
     * call, but instead several of the pointers in the hostent structs will
     * point to the same actual data! This have the unfortunate down-side that
     * our caching system breaks down horribly. Luckily for us though, AIX 4.3
     * and more recent versions have a "completely thread-safe"[*] libc where
     * all the data is stored in thread-specific memory areas making calls to
     * the plain old gethostbyname() work fine even for multi-threaded
     * programs.
     *
     * This AIX 4.3 or later detection is all made in the configure script.
     *
     * Troels Walsted Hansen helped us work this out on March 3rd, 2003.
     *
     * [*] = much later we've found out that it isn't at all "completely
     * thread-safe", but at least the gethostbyname() function is.
     */</comment>

    <block type="pseudo"><if pos:line="130" pos:column="5">if<condition pos:line="130" pos:column="7">(<expr><name pos:line="130" pos:column="8">CURL_HOSTENT_SIZE<pos:position pos:line="130" pos:column="25"/></name> <operator pos:line="130" pos:column="26">&gt;=<pos:position pos:line="130" pos:column="31"/></operator>
       <operator pos:line="131" pos:column="8">(<pos:position pos:line="131" pos:column="9"/></operator><sizeof pos:line="131" pos:column="9">sizeof<argument_list pos:line="131" pos:column="15">(<argument><expr pos:line="131" pos:column="16">struct <name pos:line="131" pos:column="23">hostent<pos:position pos:line="131" pos:column="30"/></name></expr></argument>)<pos:position pos:line="131" pos:column="31"/></argument_list></sizeof> <operator pos:line="131" pos:column="32">+<pos:position pos:line="131" pos:column="33"/></operator> <sizeof pos:line="131" pos:column="34">sizeof<argument_list pos:line="131" pos:column="40">(<argument><expr pos:line="131" pos:column="41">struct <name pos:line="131" pos:column="48">hostent_data<pos:position pos:line="131" pos:column="60"/></name></expr></argument>)<pos:position pos:line="131" pos:column="61"/></argument_list></sizeof><operator pos:line="131" pos:column="61">)<pos:position pos:line="131" pos:column="62"/></operator></expr>)<pos:position pos:line="131" pos:column="63"/></condition><then pos:line="131" pos:column="63"> <block pos:line="131" pos:column="64">{

      <comment type="block" pos:line="133" pos:column="7">/* August 22nd, 2000: Albert Chin-A-Young brought an updated version
       * that should work! September 20: Richard Prescott worked on the buffer
       * size dilemma.
       */</comment>

      <expr_stmt><expr><name pos:line="138" pos:column="7">res<pos:position pos:line="138" pos:column="10"/></name> <operator pos:line="138" pos:column="11">=<pos:position pos:line="138" pos:column="12"/></operator> <call><name pos:line="138" pos:column="13">gethostbyname_r<pos:position pos:line="138" pos:column="28"/></name><argument_list pos:line="138" pos:column="28">(<argument><expr><name pos:line="138" pos:column="29">hostname<pos:position pos:line="138" pos:column="37"/></name></expr></argument>,
                            <argument><expr><operator pos:line="139" pos:column="29">(<pos:position pos:line="139" pos:column="30"/></operator>struct <name pos:line="139" pos:column="37">hostent<pos:position pos:line="139" pos:column="44"/></name> <operator pos:line="139" pos:column="45">*<pos:position pos:line="139" pos:column="46"/></operator><operator pos:line="139" pos:column="46">)<pos:position pos:line="139" pos:column="47"/></operator><name pos:line="139" pos:column="47">buf<pos:position pos:line="139" pos:column="50"/></name></expr></argument>,
                            <argument><expr><operator pos:line="140" pos:column="29">(<pos:position pos:line="140" pos:column="30"/></operator>struct <name pos:line="140" pos:column="37">hostent_data<pos:position pos:line="140" pos:column="49"/></name> <operator pos:line="140" pos:column="50">*<pos:position pos:line="140" pos:column="51"/></operator><operator pos:line="140" pos:column="51">)<pos:position pos:line="140" pos:column="52"/></operator><operator pos:line="140" pos:column="52">(<pos:position pos:line="140" pos:column="53"/></operator><operator pos:line="140" pos:column="53">(<pos:position pos:line="140" pos:column="54"/></operator><name pos:line="140" pos:column="54">char<pos:position pos:line="140" pos:column="58"/></name> <operator pos:line="140" pos:column="59">*<pos:position pos:line="140" pos:column="60"/></operator><operator pos:line="140" pos:column="60">)<pos:position pos:line="140" pos:column="61"/></operator><name pos:line="140" pos:column="61">buf<pos:position pos:line="140" pos:column="64"/></name> <operator pos:line="140" pos:column="65">+<pos:position pos:line="140" pos:column="66"/></operator>
                                                    <sizeof pos:line="141" pos:column="53">sizeof<argument_list pos:line="141" pos:column="59">(<argument><expr pos:line="141" pos:column="60">struct <name pos:line="141" pos:column="67">hostent<pos:position pos:line="141" pos:column="74"/></name></expr></argument>)<pos:position pos:line="141" pos:column="75"/></argument_list></sizeof><operator pos:line="141" pos:column="75">)<pos:position pos:line="141" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="141" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><name pos:line="142" pos:column="7">h_errnop<pos:position pos:line="142" pos:column="15"/></name> <operator pos:line="142" pos:column="16">=<pos:position pos:line="142" pos:column="17"/></operator> <name pos:line="142" pos:column="18">SOCKERRNO<pos:position pos:line="142" pos:column="27"/></name></expr>;<pos:position pos:line="142" pos:column="28"/></expr_stmt> <comment type="block" pos:line="142" pos:column="29">/* we don't deal with this, but set it anyway */</comment>
    }<pos:position pos:line="143" pos:column="6"/></block></then>
    <else pos:line="144" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="145" pos:column="7">res<pos:position pos:line="145" pos:column="10"/></name> <operator pos:line="145" pos:column="11">=<pos:position pos:line="145" pos:column="12"/></operator> <operator pos:line="145" pos:column="13">-<pos:position pos:line="145" pos:column="14"/></operator><literal type="number" pos:line="145" pos:column="14">1<pos:position pos:line="145" pos:column="15"/></literal></expr>;<pos:position pos:line="145" pos:column="16"/></expr_stmt></block></else></if></block></then></if> <comment type="block" pos:line="145" pos:column="17">/* failure, too smallish buffer size */</comment>

    <if pos:line="147" pos:column="5">if<condition pos:line="147" pos:column="7">(<expr><operator pos:line="147" pos:column="8">!<pos:position pos:line="147" pos:column="9"/></operator><name pos:line="147" pos:column="9">res<pos:position pos:line="147" pos:column="12"/></name></expr>)<pos:position pos:line="147" pos:column="13"/></condition><then pos:line="147" pos:column="13"> <block pos:line="147" pos:column="14">{ <comment type="block" pos:line="147" pos:column="16">/* success */</comment>

      <expr_stmt><expr><name pos:line="149" pos:column="7">h<pos:position pos:line="149" pos:column="8"/></name> <operator pos:line="149" pos:column="9">=<pos:position pos:line="149" pos:column="10"/></operator> <name pos:line="149" pos:column="11">buf<pos:position pos:line="149" pos:column="14"/></name></expr>;<pos:position pos:line="149" pos:column="15"/></expr_stmt> <comment type="block" pos:line="149" pos:column="16">/* result expected in h */</comment>

      <comment type="block" pos:line="151" pos:column="7">/* This is the worst kind of the different gethostbyname_r() interfaces.
       * Since we don't know how big buffer this particular lookup required,
       * we can't realloc down the huge alloc without doing closer analysis of
       * the returned data. Thus, we always use CURL_HOSTENT_SIZE for every
       * name lookup. Fixing this would require an extra malloc() and then
       * calling Curl_addrinfo_copy() that subsequent realloc()s down the new
       * memory area to the actually used amount.
       */</comment>
    }<pos:position pos:line="159" pos:column="6"/></block></then>
    <else pos:line="160" pos:column="5">else
<cpp:endif pos:line="161" pos:column="1">#<cpp:directive pos:line="161" pos:column="2">endif<pos:position pos:line="161" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="161" pos:column="8">/* HAVE_...BYNAME_R_5 || HAVE_...BYNAME_R_6 || HAVE_...BYNAME_R_3 */</comment>
    <block pos:line="162" pos:column="5">{
      <expr_stmt><expr><name pos:line="163" pos:column="7">h<pos:position pos:line="163" pos:column="8"/></name> <operator pos:line="163" pos:column="9">=<pos:position pos:line="163" pos:column="10"/></operator> <name pos:line="163" pos:column="11">NULL<pos:position pos:line="163" pos:column="15"/></name></expr>;<pos:position pos:line="163" pos:column="16"/></expr_stmt> <comment type="block" pos:line="163" pos:column="17">/* set return code to NULL */</comment>
      <expr_stmt><expr><call><name pos:line="164" pos:column="7">free<pos:position pos:line="164" pos:column="11"/></name><argument_list pos:line="164" pos:column="11">(<argument><expr><name pos:line="164" pos:column="12">buf<pos:position pos:line="164" pos:column="15"/></name></expr></argument>)<pos:position pos:line="164" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="165" pos:column="6"/></block></else></if>
<cpp:else pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">else<pos:position pos:line="166" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="166" pos:column="7">/* HAVE_GETADDRINFO_THREADSAFE || HAVE_GETHOSTBYNAME_R */</comment>
    <comment type="block" pos:line="167" pos:column="5">/*
     * Here is code for platforms that don't have a thread safe
     * getaddrinfo() nor gethostbyname_r() function or for which
     * gethostbyname() is the preferred one.
     */</comment>
  <else pos:line="172" pos:column="3">else <block pos:line="172" pos:column="8">{
    <expr_stmt><expr><name pos:line="173" pos:column="5">h<pos:position pos:line="173" pos:column="6"/></name> <operator pos:line="173" pos:column="7">=<pos:position pos:line="173" pos:column="8"/></operator> <call><name pos:line="173" pos:column="9">gethostbyname<pos:position pos:line="173" pos:column="22"/></name><argument_list pos:line="173" pos:column="22">(<argument><expr><operator pos:line="173" pos:column="23">(<pos:position pos:line="173" pos:column="24"/></operator><name pos:line="173" pos:column="24">void<pos:position pos:line="173" pos:column="28"/></name> <operator pos:line="173" pos:column="29">*<pos:position pos:line="173" pos:column="30"/></operator><operator pos:line="173" pos:column="30">)<pos:position pos:line="173" pos:column="31"/></operator><name pos:line="173" pos:column="31">hostname<pos:position pos:line="173" pos:column="39"/></name></expr></argument>)<pos:position pos:line="173" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="174" pos:column="1">#<cpp:directive pos:line="174" pos:column="2">endif<pos:position pos:line="174" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="174" pos:column="8">/* HAVE_GETADDRINFO_THREADSAFE || HAVE_GETHOSTBYNAME_R */</comment>
  }<pos:position pos:line="175" pos:column="4"/></block></else>

  <if pos:line="177" pos:column="3">if<condition pos:line="177" pos:column="5">(<expr><name pos:line="177" pos:column="6">h<pos:position pos:line="177" pos:column="7"/></name></expr>)<pos:position pos:line="177" pos:column="8"/></condition><then pos:line="177" pos:column="8"> <block pos:line="177" pos:column="9">{
    <expr_stmt><expr><name pos:line="178" pos:column="5">ai<pos:position pos:line="178" pos:column="7"/></name> <operator pos:line="178" pos:column="8">=<pos:position pos:line="178" pos:column="9"/></operator> <call><name pos:line="178" pos:column="10">Curl_he2ai<pos:position pos:line="178" pos:column="20"/></name><argument_list pos:line="178" pos:column="20">(<argument><expr><name pos:line="178" pos:column="21">h<pos:position pos:line="178" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="24">port<pos:position pos:line="178" pos:column="28"/></name></expr></argument>)<pos:position pos:line="178" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="30"/></expr_stmt>

    <if pos:line="180" pos:column="5">if<condition pos:line="180" pos:column="7">(<expr><name pos:line="180" pos:column="8">buf<pos:position pos:line="180" pos:column="11"/></name></expr>)<pos:position pos:line="180" pos:column="12"/></condition><then pos:line="180" pos:column="12"> <comment type="block" pos:line="180" pos:column="13">/* used a *_r() function */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="181" pos:column="7">free<pos:position pos:line="181" pos:column="11"/></name><argument_list pos:line="181" pos:column="11">(<argument><expr><name pos:line="181" pos:column="12">buf<pos:position pos:line="181" pos:column="15"/></name></expr></argument>)<pos:position pos:line="181" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="17"/></expr_stmt></block></then></if>
  }<pos:position pos:line="182" pos:column="4"/></block></then></if>

  <return pos:line="184" pos:column="3">return <expr><name pos:line="184" pos:column="10">ai<pos:position pos:line="184" pos:column="12"/></name></expr>;<pos:position pos:line="184" pos:column="13"/></return>
}<pos:position pos:line="185" pos:column="2"/></block></else></block></else></if></block></function></unit>
