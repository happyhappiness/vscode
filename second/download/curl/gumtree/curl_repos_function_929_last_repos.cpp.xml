<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_929_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">libcurl_generate_mime<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">curl_mime<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">mime<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">mimeno<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">ret<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">CURLE_OK<pos:position pos:line="3" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">i<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_off_t<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">size<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">curl_mimepart<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">part<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">filename<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">escaped<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name pos:line="8" pos:column="19">NULL<pos:position pos:line="8" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">cp<pos:position pos:line="9" pos:column="11"/></name></decl>;<pos:position pos:line="9" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">data<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* May need several mime variables, so invent name */</comment>
  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">mimeno<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <operator pos:line="13" pos:column="13">++<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">easysrc_mime_count<pos:position pos:line="13" pos:column="33"/></name></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">DECL1<pos:position pos:line="15" pos:column="8"/></name><argument_list pos:line="15" pos:column="8">(<argument><expr><literal type="string" pos:line="15" pos:column="9">"curl_mime *mime%d;"<pos:position pos:line="15" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="31">*<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">mimeno<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">DATA1<pos:position pos:line="16" pos:column="8"/></name><argument_list pos:line="16" pos:column="8">(<argument><expr><literal type="string" pos:line="16" pos:column="9">"mime%d = NULL;"<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="27">*<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="28">mimeno<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">CODE1<pos:position pos:line="17" pos:column="8"/></name><argument_list pos:line="17" pos:column="8">(<argument><expr><literal type="string" pos:line="17" pos:column="9">"mime%d = curl_mime_init(hnd);"<pos:position pos:line="17" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="42">*<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="43">mimeno<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">CLEAN1<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><literal type="string" pos:line="18" pos:column="10">"curl_mime_free(mime%d);"<pos:position pos:line="18" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="37">*<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="38">mimeno<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">CLEAN1<pos:position pos:line="19" pos:column="9"/></name><argument_list pos:line="19" pos:column="9">(<argument><expr><literal type="string" pos:line="19" pos:column="10">"mime%d = NULL;"<pos:position pos:line="19" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="28">*<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="29">mimeno<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name><name pos:line="20" pos:column="6">mime<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">firstpart<pos:position pos:line="20" pos:column="21"/></name></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">DECL1<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><literal type="string" pos:line="21" pos:column="11">"curl_mimepart *part%d;"<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="37">*<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">mimeno<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
    <for pos:line="22" pos:column="5">for<control pos:line="22" pos:column="8">(<init><expr><name pos:line="22" pos:column="9">part<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <name><name pos:line="22" pos:column="16">mime<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">firstpart<pos:position pos:line="22" pos:column="31"/></name></name></expr>;<pos:position pos:line="22" pos:column="32"/></init> <condition><expr><name pos:line="22" pos:column="33">part<pos:position pos:line="22" pos:column="37"/></name></expr>;<pos:position pos:line="22" pos:column="38"/></condition> <incr><expr><name pos:line="22" pos:column="39">part<pos:position pos:line="22" pos:column="43"/></name> <operator pos:line="22" pos:column="44">=<pos:position pos:line="22" pos:column="45"/></operator> <name><name pos:line="22" pos:column="46">part<pos:position pos:line="22" pos:column="50"/></name><operator pos:line="22" pos:column="50">-&gt;<pos:position pos:line="22" pos:column="55"/></operator><name pos:line="22" pos:column="52">nextpart<pos:position pos:line="22" pos:column="60"/></name></name></expr></incr>)<pos:position pos:line="22" pos:column="61"/></control> <block pos:line="22" pos:column="62">{
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">CODE2<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><literal type="string" pos:line="23" pos:column="13">"part%d = curl_mime_addpart(mime%d);"<pos:position pos:line="23" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="52">*<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="53">mimeno<pos:position pos:line="23" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="61">*<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="62">mimeno<pos:position pos:line="23" pos:column="68"/></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="24" pos:column="7">filename<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <name><name pos:line="24" pos:column="18">part<pos:position pos:line="24" pos:column="22"/></name><operator pos:line="24" pos:column="22">-&gt;<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="24">filename<pos:position pos:line="24" pos:column="32"/></name></name></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
      <switch pos:line="25" pos:column="7">switch<condition pos:line="25" pos:column="13">(<expr><name><name pos:line="25" pos:column="14">part<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">-&gt;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="20">kind<pos:position pos:line="25" pos:column="24"/></name></name></expr>)<pos:position pos:line="25" pos:column="25"/></condition> <block pos:line="25" pos:column="26">{
      <case pos:line="26" pos:column="7">case <expr><name pos:line="26" pos:column="12">MIMEKIND_FILE<pos:position pos:line="26" pos:column="25"/></name></expr>:<pos:position pos:line="26" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">Curl_safefree<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">escaped<pos:position pos:line="27" pos:column="30"/></name></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">escaped<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <call><name pos:line="28" pos:column="19">c_escape<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name><name pos:line="28" pos:column="28">part<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">-&gt;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="34">data<pos:position pos:line="28" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">CURL_ZERO_TERMINATED<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
        <if pos:line="29" pos:column="9">if<condition pos:line="29" pos:column="11">(<expr><operator pos:line="29" pos:column="12">!<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">escaped<pos:position pos:line="29" pos:column="20"/></name></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21">
          <block type="pseudo"><return pos:line="30" pos:column="11">return <expr><name pos:line="30" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="30" pos:column="37"/></name></expr>;<pos:position pos:line="30" pos:column="38"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">CODE2<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><literal type="string" pos:line="31" pos:column="15">"curl_mime_filedata(part%d, \"%s\");"<pos:position pos:line="31" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="31" pos:column="54">*<pos:position pos:line="31" pos:column="55"/></operator><name pos:line="31" pos:column="55">mimeno<pos:position pos:line="31" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">escaped<pos:position pos:line="31" pos:column="70"/></name></expr></argument>)<pos:position pos:line="31" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="72"/></expr_stmt>
        <if pos:line="32" pos:column="9">if<condition pos:line="32" pos:column="11">(<expr><operator pos:line="32" pos:column="12">!<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">filename<pos:position pos:line="32" pos:column="21"/></name></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="11">CODE1<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><literal type="string" pos:line="33" pos:column="17">"curl_mime_filename(part%d, NULL);"<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="33" pos:column="54">*<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="55">mimeno<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt></block></then>
        <else pos:line="34" pos:column="9">else <block pos:line="34" pos:column="14">{
          <comment type="block" pos:line="35" pos:column="11">/* Fast check to see if remote file name is base name. */</comment>
          <expr_stmt><expr><name pos:line="36" pos:column="11">filename<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <name><name pos:line="36" pos:column="22">part<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">data<pos:position pos:line="36" pos:column="32"/></name></name></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
          <for pos:line="37" pos:column="11">for<control pos:line="37" pos:column="14">(<init><expr><name pos:line="37" pos:column="15">cp<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="20">filename<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></init> <condition><expr><operator pos:line="37" pos:column="30">*<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="31">cp<pos:position pos:line="37" pos:column="33"/></name></expr>;<pos:position pos:line="37" pos:column="34"/></condition> <incr><expr><name pos:line="37" pos:column="35">cp<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">++<pos:position pos:line="37" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="37" pos:column="40"/></control>
            <block type="pseudo"><if pos:line="38" pos:column="13">if<condition pos:line="38" pos:column="15">(<expr><operator pos:line="38" pos:column="16">*<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">cp<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">==<pos:position pos:line="38" pos:column="22"/></operator> <literal type="char" pos:line="38" pos:column="23">'/'<pos:position pos:line="38" pos:column="26"/></literal> <operator pos:line="38" pos:column="27">||<pos:position pos:line="38" pos:column="29"/></operator> <operator pos:line="38" pos:column="30">*<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="31">cp<pos:position pos:line="38" pos:column="33"/></name> <operator pos:line="38" pos:column="34">==<pos:position pos:line="38" pos:column="36"/></operator> <literal type="char" pos:line="38" pos:column="37">'\\'<pos:position pos:line="38" pos:column="41"/></literal></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42">
              <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="15">filename<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <name pos:line="39" pos:column="26">cp<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">+<pos:position pos:line="39" pos:column="30"/></operator> <literal type="number" pos:line="39" pos:column="31">1<pos:position pos:line="39" pos:column="32"/></literal></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt></block></then></if></block></for>
          <if pos:line="40" pos:column="11">if<condition pos:line="40" pos:column="13">(<expr><operator pos:line="40" pos:column="14">!<pos:position pos:line="40" pos:column="15"/></operator><name><name pos:line="40" pos:column="15">part<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">filename<pos:position pos:line="40" pos:column="29"/></name></name> <operator pos:line="40" pos:column="30">||<pos:position pos:line="40" pos:column="32"/></operator> <operator pos:line="40" pos:column="33">!<pos:position pos:line="40" pos:column="34"/></operator><call><name pos:line="40" pos:column="34">strcmp<pos:position pos:line="40" pos:column="40"/></name><argument_list pos:line="40" pos:column="40">(<argument><expr><name pos:line="40" pos:column="41">filename<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="51">part<pos:position pos:line="40" pos:column="55"/></name><operator pos:line="40" pos:column="55">-&gt;<pos:position pos:line="40" pos:column="60"/></operator><name pos:line="40" pos:column="57">filename<pos:position pos:line="40" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="67"/></condition><then pos:line="40" pos:column="67">
            <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="13">filename<pos:position pos:line="41" pos:column="21"/></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <name pos:line="41" pos:column="24">NULL<pos:position pos:line="41" pos:column="28"/></name></expr>;<pos:position pos:line="41" pos:column="29"/></expr_stmt></block></then>
          <else pos:line="42" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="13">filename<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <name><name pos:line="43" pos:column="24">part<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">-&gt;<pos:position pos:line="43" pos:column="33"/></operator><name pos:line="43" pos:column="30">filename<pos:position pos:line="43" pos:column="38"/></name></name></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt></block></else></if>
        }<pos:position pos:line="44" pos:column="10"/></block></else></if>
        <break pos:line="45" pos:column="9">break;<pos:position pos:line="45" pos:column="15"/></break>
      <case pos:line="46" pos:column="7">case <expr><name pos:line="46" pos:column="12">MIMEKIND_CALLBACK<pos:position pos:line="46" pos:column="29"/></name></expr>:<pos:position pos:line="46" pos:column="30"/></case>
        <comment type="block" pos:line="47" pos:column="9">/* Can only be reading stdin in the current context. */</comment>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">CODE1<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><literal type="string" pos:line="48" pos:column="15">"curl_mime_data_cb(part%d, -1, (curl_read_callback) fread, \\"<pos:position pos:line="48" pos:column="77"/></literal></expr></argument>,
              <argument><expr><operator pos:line="49" pos:column="15">*<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="16">mimeno<pos:position pos:line="49" pos:column="22"/></name></expr></argument>)<pos:position pos:line="49" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">CODE0<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><literal type="string" pos:line="50" pos:column="15">"                  (curl_seek_callback) fseek, NULL, stdin);"<pos:position pos:line="50" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="78"/></expr_stmt>
        <break pos:line="51" pos:column="9">break;<pos:position pos:line="51" pos:column="15"/></break>
      <case pos:line="52" pos:column="7">case <expr><name pos:line="52" pos:column="12">MIMEKIND_DATA<pos:position pos:line="52" pos:column="25"/></name></expr>:<pos:position pos:line="52" pos:column="26"/></case>
<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef<pos:position pos:line="53" pos:column="7"/></cpp:directive> <name pos:line="53" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="53" pos:column="29"/></name></cpp:ifdef>
          <comment type="block" pos:line="54" pos:column="11">/* Data is stored in ASCII and we want in in the host character
             code. Convert it back for output. */</comment>
          <expr_stmt><expr><name pos:line="56" pos:column="11">data<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <call><name pos:line="56" pos:column="18">malloc<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">(<argument><expr><name><name pos:line="56" pos:column="25">part<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">datasize<pos:position pos:line="56" pos:column="39"/></name></name> <operator pos:line="56" pos:column="40">+<pos:position pos:line="56" pos:column="41"/></operator> <literal type="number" pos:line="56" pos:column="42">1<pos:position pos:line="56" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="45"/></expr_stmt>
          <if pos:line="57" pos:column="11">if<condition pos:line="57" pos:column="13">(<expr><operator pos:line="57" pos:column="14">!<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="15">data<pos:position pos:line="57" pos:column="19"/></name></expr>)<pos:position pos:line="57" pos:column="20"/></condition><then pos:line="57" pos:column="20"> <block pos:line="57" pos:column="21">{
            <expr_stmt><expr><name pos:line="58" pos:column="13">ret<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <name pos:line="58" pos:column="19">CURLE_OUT_OF_MEMORY<pos:position pos:line="58" pos:column="38"/></name></expr>;<pos:position pos:line="58" pos:column="39"/></expr_stmt>
            <goto pos:line="59" pos:column="13">goto <name pos:line="59" pos:column="18">nomem<pos:position pos:line="59" pos:column="23"/></name>;<pos:position pos:line="59" pos:column="24"/></goto>
          }<pos:position pos:line="60" pos:column="12"/></block></then></if>
          <expr_stmt><expr><call><name pos:line="61" pos:column="11">memcpy<pos:position pos:line="61" pos:column="17"/></name><argument_list pos:line="61" pos:column="17">(<argument><expr><name pos:line="61" pos:column="18">data<pos:position pos:line="61" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="24">part<pos:position pos:line="61" pos:column="28"/></name><operator pos:line="61" pos:column="28">-&gt;<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="30">data<pos:position pos:line="61" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="36">part<pos:position pos:line="61" pos:column="40"/></name><operator pos:line="61" pos:column="40">-&gt;<pos:position pos:line="61" pos:column="45"/></operator><name pos:line="61" pos:column="42">datasize<pos:position pos:line="61" pos:column="50"/></name></name> <operator pos:line="61" pos:column="51">+<pos:position pos:line="61" pos:column="52"/></operator> <literal type="number" pos:line="61" pos:column="53">1<pos:position pos:line="61" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="56"/></expr_stmt>
          <expr_stmt><expr><name pos:line="62" pos:column="11">ret<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">=<pos:position pos:line="62" pos:column="16"/></operator> <call><name pos:line="62" pos:column="17">convert_from_network<pos:position pos:line="62" pos:column="37"/></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">data<pos:position pos:line="62" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="44">strlen<pos:position pos:line="62" pos:column="50"/></name><argument_list pos:line="62" pos:column="50">(<argument><expr><name pos:line="62" pos:column="51">data<pos:position pos:line="62" pos:column="55"/></name></expr></argument>)<pos:position pos:line="62" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="58"/></expr_stmt>
          <if pos:line="63" pos:column="11">if<condition pos:line="63" pos:column="13">(<expr><name pos:line="63" pos:column="14">ret<pos:position pos:line="63" pos:column="17"/></name></expr>)<pos:position pos:line="63" pos:column="18"/></condition><then pos:line="63" pos:column="18"> <block pos:line="63" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="64" pos:column="13">Curl_safefree<pos:position pos:line="64" pos:column="26"/></name><argument_list pos:line="64" pos:column="26">(<argument><expr><name pos:line="64" pos:column="27">data<pos:position pos:line="64" pos:column="31"/></name></expr></argument>)<pos:position pos:line="64" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="33"/></expr_stmt>
            <goto pos:line="65" pos:column="13">goto <name pos:line="65" pos:column="18">nomem<pos:position pos:line="65" pos:column="23"/></name>;<pos:position pos:line="65" pos:column="24"/></goto>
          }<pos:position pos:line="66" pos:column="12"/></block></then></if>
<cpp:else pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">else<pos:position pos:line="67" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="68" pos:column="9">data<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">=<pos:position pos:line="68" pos:column="15"/></operator> <name><name pos:line="68" pos:column="16">part<pos:position pos:line="68" pos:column="20"/></name><operator pos:line="68" pos:column="20">-&gt;<pos:position pos:line="68" pos:column="25"/></operator><name pos:line="68" pos:column="22">data<pos:position pos:line="68" pos:column="26"/></name></name></expr>;<pos:position pos:line="68" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>

        <comment type="block" pos:line="71" pos:column="9">/* Are there any nul byte in data? */</comment>
        <for pos:line="72" pos:column="9">for<control pos:line="72" pos:column="12">(<init><expr><name pos:line="72" pos:column="13">cp<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">=<pos:position pos:line="72" pos:column="17"/></operator> <name pos:line="72" pos:column="18">data<pos:position pos:line="72" pos:column="22"/></name></expr>;<pos:position pos:line="72" pos:column="23"/></init> <condition><expr><operator pos:line="72" pos:column="24">*<pos:position pos:line="72" pos:column="25"/></operator><name pos:line="72" pos:column="25">cp<pos:position pos:line="72" pos:column="27"/></name></expr>;<pos:position pos:line="72" pos:column="28"/></condition> <incr><expr><name pos:line="72" pos:column="29">cp<pos:position pos:line="72" pos:column="31"/></name><operator pos:line="72" pos:column="31">++<pos:position pos:line="72" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="72" pos:column="34"/></control>
          <block type="pseudo"><empty_stmt pos:line="73" pos:column="11">;<pos:position pos:line="73" pos:column="12"/></empty_stmt></block></for>
        <expr_stmt><expr><name pos:line="74" pos:column="9">size<pos:position pos:line="74" pos:column="13"/></name> <operator pos:line="74" pos:column="14">=<pos:position pos:line="74" pos:column="15"/></operator> <ternary><condition><expr><operator pos:line="74" pos:column="16">(<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="17">cp<pos:position pos:line="74" pos:column="19"/></name> <operator pos:line="74" pos:column="20">==<pos:position pos:line="74" pos:column="22"/></operator> <name pos:line="74" pos:column="23">data<pos:position pos:line="74" pos:column="27"/></name> <operator pos:line="74" pos:column="28">+<pos:position pos:line="74" pos:column="29"/></operator> <name><name pos:line="74" pos:column="30">part<pos:position pos:line="74" pos:column="34"/></name><operator pos:line="74" pos:column="34">-&gt;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="36">datasize<pos:position pos:line="74" pos:column="44"/></name></name><operator pos:line="74" pos:column="44">)<pos:position pos:line="74" pos:column="45"/></operator></expr>?<pos:position pos:line="74" pos:column="46"/></condition><then pos:line="74" pos:column="46"> <expr><operator pos:line="74" pos:column="47">(<pos:position pos:line="74" pos:column="48"/></operator><name pos:line="74" pos:column="48">curl_off_t<pos:position pos:line="74" pos:column="58"/></name><operator pos:line="74" pos:column="58">)<pos:position pos:line="74" pos:column="59"/></operator> <operator pos:line="74" pos:column="60">-<pos:position pos:line="74" pos:column="61"/></operator><literal type="number" pos:line="74" pos:column="61">1<pos:position pos:line="74" pos:column="62"/></literal></expr></then><else pos:line="74" pos:column="62">: <expr><name><name pos:line="74" pos:column="64">part<pos:position pos:line="74" pos:column="68"/></name><operator pos:line="74" pos:column="68">-&gt;<pos:position pos:line="74" pos:column="73"/></operator><name pos:line="74" pos:column="70">datasize<pos:position pos:line="74" pos:column="78"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="74" pos:column="79"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">Curl_safefree<pos:position pos:line="75" pos:column="22"/></name><argument_list pos:line="75" pos:column="22">(<argument><expr><name pos:line="75" pos:column="23">escaped<pos:position pos:line="75" pos:column="30"/></name></expr></argument>)<pos:position pos:line="75" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="76" pos:column="9">escaped<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <call><name pos:line="76" pos:column="19">c_escape<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name pos:line="76" pos:column="28">data<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="34">(<pos:position pos:line="76" pos:column="35"/></operator><name pos:line="76" pos:column="35">size_t<pos:position pos:line="76" pos:column="41"/></name><operator pos:line="76" pos:column="41">)<pos:position pos:line="76" pos:column="42"/></operator> <name><name pos:line="76" pos:column="43">part<pos:position pos:line="76" pos:column="47"/></name><operator pos:line="76" pos:column="47">-&gt;<pos:position pos:line="76" pos:column="52"/></operator><name pos:line="76" pos:column="49">datasize<pos:position pos:line="76" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="59"/></expr_stmt>
<cpp:ifdef pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">ifdef<pos:position pos:line="77" pos:column="7"/></cpp:directive> <name pos:line="77" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="77" pos:column="29"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">Curl_safefree<pos:position pos:line="78" pos:column="22"/></name><argument_list pos:line="78" pos:column="22">(<argument><expr><name pos:line="78" pos:column="23">data<pos:position pos:line="78" pos:column="27"/></name></expr></argument>)<pos:position pos:line="78" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif<pos:position pos:line="79" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="80" pos:column="9">if<condition pos:line="80" pos:column="11">(<expr><operator pos:line="80" pos:column="12">!<pos:position pos:line="80" pos:column="13"/></operator><name pos:line="80" pos:column="13">escaped<pos:position pos:line="80" pos:column="20"/></name></expr>)<pos:position pos:line="80" pos:column="21"/></condition><then pos:line="80" pos:column="21">
          <block type="pseudo"><return pos:line="81" pos:column="11">return <expr><name pos:line="81" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="81" pos:column="37"/></name></expr>;<pos:position pos:line="81" pos:column="38"/></return></block></then></if>
        <if pos:line="82" pos:column="9">if<condition pos:line="82" pos:column="11">(<expr><name pos:line="82" pos:column="12">size<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">&gt;=<pos:position pos:line="82" pos:column="22"/></operator> <literal type="number" pos:line="82" pos:column="20">0<pos:position pos:line="82" pos:column="21"/></literal></expr>)<pos:position pos:line="82" pos:column="22"/></condition><then pos:line="82" pos:column="22">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="11">CODE3<pos:position pos:line="83" pos:column="16"/></name><argument_list pos:line="83" pos:column="16">(<argument><expr><literal type="string" pos:line="83" pos:column="17">"curl_mime_data(part%d, \"%s\", %"<pos:position pos:line="83" pos:column="51"/></literal> <name pos:line="83" pos:column="52">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="83" pos:column="74"/></name> <literal type="string" pos:line="83" pos:column="75">");"<pos:position pos:line="83" pos:column="79"/></literal></expr></argument>,
                                <argument><expr><operator pos:line="84" pos:column="33">*<pos:position pos:line="84" pos:column="34"/></operator><name pos:line="84" pos:column="34">mimeno<pos:position pos:line="84" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="42">escaped<pos:position pos:line="84" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="51">size<pos:position pos:line="84" pos:column="55"/></name></expr></argument>)<pos:position pos:line="84" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="57"/></expr_stmt></block></then>
        <else pos:line="85" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="11">CODE2<pos:position pos:line="86" pos:column="16"/></name><argument_list pos:line="86" pos:column="16">(<argument><expr><literal type="string" pos:line="86" pos:column="17">"curl_mime_data(part%d, \"%s\", CURL_ZERO_TERMINATED);"<pos:position pos:line="86" pos:column="72"/></literal></expr></argument>,
                                <argument><expr><operator pos:line="87" pos:column="33">*<pos:position pos:line="87" pos:column="34"/></operator><name pos:line="87" pos:column="34">mimeno<pos:position pos:line="87" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="42">escaped<pos:position pos:line="87" pos:column="49"/></name></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="51"/></expr_stmt></block></else></if>
        <break pos:line="88" pos:column="9">break;<pos:position pos:line="88" pos:column="15"/></break>
      <case pos:line="89" pos:column="7">case <expr><name pos:line="89" pos:column="12">MIMEKIND_MULTIPART<pos:position pos:line="89" pos:column="30"/></name></expr>:<pos:position pos:line="89" pos:column="31"/></case>
        <expr_stmt><expr><name pos:line="90" pos:column="9">ret<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <call><name pos:line="90" pos:column="15">libcurl_generate_mime<pos:position pos:line="90" pos:column="36"/></name><argument_list pos:line="90" pos:column="36">(<argument><expr><name><name pos:line="90" pos:column="37">part<pos:position pos:line="90" pos:column="41"/></name><operator pos:line="90" pos:column="41">-&gt;<pos:position pos:line="90" pos:column="46"/></operator><name pos:line="90" pos:column="43">arg<pos:position pos:line="90" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="48">&amp;<pos:position pos:line="90" pos:column="53"/></operator><name pos:line="90" pos:column="49">i<pos:position pos:line="90" pos:column="50"/></name></expr></argument>)<pos:position pos:line="90" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="52"/></expr_stmt>
        <if pos:line="91" pos:column="9">if<condition pos:line="91" pos:column="11">(<expr><name pos:line="91" pos:column="12">ret<pos:position pos:line="91" pos:column="15"/></name></expr>)<pos:position pos:line="91" pos:column="16"/></condition><then pos:line="91" pos:column="16">
          <block type="pseudo"><goto pos:line="92" pos:column="11">goto <name pos:line="92" pos:column="16">nomem<pos:position pos:line="92" pos:column="21"/></name>;<pos:position pos:line="92" pos:column="22"/></goto></block></then></if>
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">CODE2<pos:position pos:line="93" pos:column="14"/></name><argument_list pos:line="93" pos:column="14">(<argument><expr><literal type="string" pos:line="93" pos:column="15">"curl_mime_subparts(part%d, mime%d);"<pos:position pos:line="93" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="93" pos:column="54">*<pos:position pos:line="93" pos:column="55"/></operator><name pos:line="93" pos:column="55">mimeno<pos:position pos:line="93" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="63">i<pos:position pos:line="93" pos:column="64"/></name></expr></argument>)<pos:position pos:line="93" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="94" pos:column="9">CODE1<pos:position pos:line="94" pos:column="14"/></name><argument_list pos:line="94" pos:column="14">(<argument><expr><literal type="string" pos:line="94" pos:column="15">"mime%d = NULL;"<pos:position pos:line="94" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="33">i<pos:position pos:line="94" pos:column="34"/></name></expr></argument>)<pos:position pos:line="94" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="36"/></expr_stmt>   <comment type="block" pos:line="94" pos:column="39">/* Avoid freeing in CLEAN sequence. */</comment>
        <break pos:line="95" pos:column="9">break;<pos:position pos:line="95" pos:column="15"/></break>
      <default pos:line="96" pos:column="7">default:<pos:position pos:line="96" pos:column="15"/></default>
        <comment type="block" pos:line="97" pos:column="9">/* Other cases not possible in this context. */</comment>
        <break pos:line="98" pos:column="9">break;<pos:position pos:line="98" pos:column="15"/></break>
      }<pos:position pos:line="99" pos:column="8"/></block></switch>

      <if pos:line="101" pos:column="7">if<condition pos:line="101" pos:column="9">(<expr><name><name pos:line="101" pos:column="10">part<pos:position pos:line="101" pos:column="14"/></name><operator pos:line="101" pos:column="14">-&gt;<pos:position pos:line="101" pos:column="19"/></operator><name pos:line="101" pos:column="16">encoder<pos:position pos:line="101" pos:column="23"/></name></name></expr>)<pos:position pos:line="101" pos:column="24"/></condition><then pos:line="101" pos:column="24"> <block pos:line="101" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">Curl_safefree<pos:position pos:line="102" pos:column="22"/></name><argument_list pos:line="102" pos:column="22">(<argument><expr><name pos:line="102" pos:column="23">escaped<pos:position pos:line="102" pos:column="30"/></name></expr></argument>)<pos:position pos:line="102" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="103" pos:column="9">escaped<pos:position pos:line="103" pos:column="16"/></name> <operator pos:line="103" pos:column="17">=<pos:position pos:line="103" pos:column="18"/></operator> <call><name pos:line="103" pos:column="19">c_escape<pos:position pos:line="103" pos:column="27"/></name><argument_list pos:line="103" pos:column="27">(<argument><expr><name><name pos:line="103" pos:column="28">part<pos:position pos:line="103" pos:column="32"/></name><operator pos:line="103" pos:column="32">-&gt;<pos:position pos:line="103" pos:column="37"/></operator><name pos:line="103" pos:column="34">encoder<pos:position pos:line="103" pos:column="41"/></name><operator pos:line="103" pos:column="41">-&gt;<pos:position pos:line="103" pos:column="46"/></operator><name pos:line="103" pos:column="43">name<pos:position pos:line="103" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="49">CURL_ZERO_TERMINATED<pos:position pos:line="103" pos:column="69"/></name></expr></argument>)<pos:position pos:line="103" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="71"/></expr_stmt>
        <if pos:line="104" pos:column="9">if<condition pos:line="104" pos:column="11">(<expr><operator pos:line="104" pos:column="12">!<pos:position pos:line="104" pos:column="13"/></operator><name pos:line="104" pos:column="13">escaped<pos:position pos:line="104" pos:column="20"/></name></expr>)<pos:position pos:line="104" pos:column="21"/></condition><then pos:line="104" pos:column="21">
          <block type="pseudo"><return pos:line="105" pos:column="11">return <expr><name pos:line="105" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="105" pos:column="37"/></name></expr>;<pos:position pos:line="105" pos:column="38"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="106" pos:column="9">CODE2<pos:position pos:line="106" pos:column="14"/></name><argument_list pos:line="106" pos:column="14">(<argument><expr><literal type="string" pos:line="106" pos:column="15">"curl_mime_encoder(part%d, \"%s\");"<pos:position pos:line="106" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="106" pos:column="53">*<pos:position pos:line="106" pos:column="54"/></operator><name pos:line="106" pos:column="54">mimeno<pos:position pos:line="106" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="62">escaped<pos:position pos:line="106" pos:column="69"/></name></expr></argument>)<pos:position pos:line="106" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="71"/></expr_stmt>
      }<pos:position pos:line="107" pos:column="8"/></block></then></if>

      <if pos:line="109" pos:column="7">if<condition pos:line="109" pos:column="9">(<expr><name pos:line="109" pos:column="10">filename<pos:position pos:line="109" pos:column="18"/></name></expr>)<pos:position pos:line="109" pos:column="19"/></condition><then pos:line="109" pos:column="19"> <block pos:line="109" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="110" pos:column="9">Curl_safefree<pos:position pos:line="110" pos:column="22"/></name><argument_list pos:line="110" pos:column="22">(<argument><expr><name pos:line="110" pos:column="23">escaped<pos:position pos:line="110" pos:column="30"/></name></expr></argument>)<pos:position pos:line="110" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="111" pos:column="9">escaped<pos:position pos:line="111" pos:column="16"/></name> <operator pos:line="111" pos:column="17">=<pos:position pos:line="111" pos:column="18"/></operator> <call><name pos:line="111" pos:column="19">c_escape<pos:position pos:line="111" pos:column="27"/></name><argument_list pos:line="111" pos:column="27">(<argument><expr><name pos:line="111" pos:column="28">filename<pos:position pos:line="111" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="38">CURL_ZERO_TERMINATED<pos:position pos:line="111" pos:column="58"/></name></expr></argument>)<pos:position pos:line="111" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="60"/></expr_stmt>
        <if pos:line="112" pos:column="9">if<condition pos:line="112" pos:column="11">(<expr><operator pos:line="112" pos:column="12">!<pos:position pos:line="112" pos:column="13"/></operator><name pos:line="112" pos:column="13">escaped<pos:position pos:line="112" pos:column="20"/></name></expr>)<pos:position pos:line="112" pos:column="21"/></condition><then pos:line="112" pos:column="21">
          <block type="pseudo"><return pos:line="113" pos:column="11">return <expr><name pos:line="113" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="113" pos:column="37"/></name></expr>;<pos:position pos:line="113" pos:column="38"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="114" pos:column="9">CODE2<pos:position pos:line="114" pos:column="14"/></name><argument_list pos:line="114" pos:column="14">(<argument><expr><literal type="string" pos:line="114" pos:column="15">"curl_mime_filename(part%d, \"%s\");"<pos:position pos:line="114" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="114" pos:column="54">*<pos:position pos:line="114" pos:column="55"/></operator><name pos:line="114" pos:column="55">mimeno<pos:position pos:line="114" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="63">escaped<pos:position pos:line="114" pos:column="70"/></name></expr></argument>)<pos:position pos:line="114" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="72"/></expr_stmt>
      }<pos:position pos:line="115" pos:column="8"/></block></then></if>

      <if pos:line="117" pos:column="7">if<condition pos:line="117" pos:column="9">(<expr><name><name pos:line="117" pos:column="10">part<pos:position pos:line="117" pos:column="14"/></name><operator pos:line="117" pos:column="14">-&gt;<pos:position pos:line="117" pos:column="19"/></operator><name pos:line="117" pos:column="16">name<pos:position pos:line="117" pos:column="20"/></name></name></expr>)<pos:position pos:line="117" pos:column="21"/></condition><then pos:line="117" pos:column="21"> <block pos:line="117" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">Curl_safefree<pos:position pos:line="118" pos:column="22"/></name><argument_list pos:line="118" pos:column="22">(<argument><expr><name pos:line="118" pos:column="23">escaped<pos:position pos:line="118" pos:column="30"/></name></expr></argument>)<pos:position pos:line="118" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="119" pos:column="9">escaped<pos:position pos:line="119" pos:column="16"/></name> <operator pos:line="119" pos:column="17">=<pos:position pos:line="119" pos:column="18"/></operator> <call><name pos:line="119" pos:column="19">c_escape<pos:position pos:line="119" pos:column="27"/></name><argument_list pos:line="119" pos:column="27">(<argument><expr><name><name pos:line="119" pos:column="28">part<pos:position pos:line="119" pos:column="32"/></name><operator pos:line="119" pos:column="32">-&gt;<pos:position pos:line="119" pos:column="37"/></operator><name pos:line="119" pos:column="34">name<pos:position pos:line="119" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="40">CURL_ZERO_TERMINATED<pos:position pos:line="119" pos:column="60"/></name></expr></argument>)<pos:position pos:line="119" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="62"/></expr_stmt>
        <if pos:line="120" pos:column="9">if<condition pos:line="120" pos:column="11">(<expr><operator pos:line="120" pos:column="12">!<pos:position pos:line="120" pos:column="13"/></operator><name pos:line="120" pos:column="13">escaped<pos:position pos:line="120" pos:column="20"/></name></expr>)<pos:position pos:line="120" pos:column="21"/></condition><then pos:line="120" pos:column="21">
          <block type="pseudo"><return pos:line="121" pos:column="11">return <expr><name pos:line="121" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="121" pos:column="37"/></name></expr>;<pos:position pos:line="121" pos:column="38"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">CODE2<pos:position pos:line="122" pos:column="14"/></name><argument_list pos:line="122" pos:column="14">(<argument><expr><literal type="string" pos:line="122" pos:column="15">"curl_mime_name(part%d, \"%s\");"<pos:position pos:line="122" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="122" pos:column="50">*<pos:position pos:line="122" pos:column="51"/></operator><name pos:line="122" pos:column="51">mimeno<pos:position pos:line="122" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="59">escaped<pos:position pos:line="122" pos:column="66"/></name></expr></argument>)<pos:position pos:line="122" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="68"/></expr_stmt>
      }<pos:position pos:line="123" pos:column="8"/></block></then></if>

      <if pos:line="125" pos:column="7">if<condition pos:line="125" pos:column="9">(<expr><name><name pos:line="125" pos:column="10">part<pos:position pos:line="125" pos:column="14"/></name><operator pos:line="125" pos:column="14">-&gt;<pos:position pos:line="125" pos:column="19"/></operator><name pos:line="125" pos:column="16">mimetype<pos:position pos:line="125" pos:column="24"/></name></name></expr>)<pos:position pos:line="125" pos:column="25"/></condition><then pos:line="125" pos:column="25"> <block pos:line="125" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">Curl_safefree<pos:position pos:line="126" pos:column="22"/></name><argument_list pos:line="126" pos:column="22">(<argument><expr><name pos:line="126" pos:column="23">escaped<pos:position pos:line="126" pos:column="30"/></name></expr></argument>)<pos:position pos:line="126" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="127" pos:column="9">escaped<pos:position pos:line="127" pos:column="16"/></name> <operator pos:line="127" pos:column="17">=<pos:position pos:line="127" pos:column="18"/></operator> <call><name pos:line="127" pos:column="19">c_escape<pos:position pos:line="127" pos:column="27"/></name><argument_list pos:line="127" pos:column="27">(<argument><expr><name><name pos:line="127" pos:column="28">part<pos:position pos:line="127" pos:column="32"/></name><operator pos:line="127" pos:column="32">-&gt;<pos:position pos:line="127" pos:column="37"/></operator><name pos:line="127" pos:column="34">mimetype<pos:position pos:line="127" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="44">CURL_ZERO_TERMINATED<pos:position pos:line="127" pos:column="64"/></name></expr></argument>)<pos:position pos:line="127" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="66"/></expr_stmt>
        <if pos:line="128" pos:column="9">if<condition pos:line="128" pos:column="11">(<expr><operator pos:line="128" pos:column="12">!<pos:position pos:line="128" pos:column="13"/></operator><name pos:line="128" pos:column="13">escaped<pos:position pos:line="128" pos:column="20"/></name></expr>)<pos:position pos:line="128" pos:column="21"/></condition><then pos:line="128" pos:column="21">
          <block type="pseudo"><return pos:line="129" pos:column="11">return <expr><name pos:line="129" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="129" pos:column="37"/></name></expr>;<pos:position pos:line="129" pos:column="38"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">CODE2<pos:position pos:line="130" pos:column="14"/></name><argument_list pos:line="130" pos:column="14">(<argument><expr><literal type="string" pos:line="130" pos:column="15">"curl_mime_type(part%d, \"%s\");"<pos:position pos:line="130" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="130" pos:column="50">*<pos:position pos:line="130" pos:column="51"/></operator><name pos:line="130" pos:column="51">mimeno<pos:position pos:line="130" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="59">escaped<pos:position pos:line="130" pos:column="66"/></name></expr></argument>)<pos:position pos:line="130" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="68"/></expr_stmt>
      }<pos:position pos:line="131" pos:column="8"/></block></then></if>

      <if pos:line="133" pos:column="7">if<condition pos:line="133" pos:column="9">(<expr><name><name pos:line="133" pos:column="10">part<pos:position pos:line="133" pos:column="14"/></name><operator pos:line="133" pos:column="14">-&gt;<pos:position pos:line="133" pos:column="19"/></operator><name pos:line="133" pos:column="16">userheaders<pos:position pos:line="133" pos:column="27"/></name></name></expr>)<pos:position pos:line="133" pos:column="28"/></condition><then pos:line="133" pos:column="28"> <block pos:line="133" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="134" pos:column="9">int<pos:position pos:line="134" pos:column="12"/></name></type> <name pos:line="134" pos:column="13">ownership<pos:position pos:line="134" pos:column="22"/></name> <init pos:line="134" pos:column="23">= <expr><ternary><condition><expr><name><name pos:line="134" pos:column="25">part<pos:position pos:line="134" pos:column="29"/></name><operator pos:line="134" pos:column="29">-&gt;<pos:position pos:line="134" pos:column="34"/></operator><name pos:line="134" pos:column="31">flags<pos:position pos:line="134" pos:column="36"/></name></name> <operator pos:line="134" pos:column="37">&amp;<pos:position pos:line="134" pos:column="42"/></operator> <name pos:line="134" pos:column="39">MIME_USERHEADERS_OWNER<pos:position pos:line="134" pos:column="61"/></name></expr>?<pos:position pos:line="134" pos:column="62"/></condition><then pos:line="134" pos:column="62"> <expr><literal type="number" pos:line="134" pos:column="63">1<pos:position pos:line="134" pos:column="64"/></literal></expr></then><else pos:line="134" pos:column="64">: <expr><literal type="number" pos:line="134" pos:column="66">0<pos:position pos:line="134" pos:column="67"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="134" pos:column="68"/></decl_stmt>

        <expr_stmt><expr><name pos:line="136" pos:column="9">ret<pos:position pos:line="136" pos:column="12"/></name> <operator pos:line="136" pos:column="13">=<pos:position pos:line="136" pos:column="14"/></operator> <call><name pos:line="136" pos:column="15">libcurl_generate_slist<pos:position pos:line="136" pos:column="37"/></name><argument_list pos:line="136" pos:column="37">(<argument><expr><name><name pos:line="136" pos:column="38">part<pos:position pos:line="136" pos:column="42"/></name><operator pos:line="136" pos:column="42">-&gt;<pos:position pos:line="136" pos:column="47"/></operator><name pos:line="136" pos:column="44">userheaders<pos:position pos:line="136" pos:column="55"/></name></name></expr></argument>, <argument><expr><operator pos:line="136" pos:column="57">&amp;<pos:position pos:line="136" pos:column="62"/></operator><name pos:line="136" pos:column="58">i<pos:position pos:line="136" pos:column="59"/></name></expr></argument>)<pos:position pos:line="136" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="61"/></expr_stmt>
        <if pos:line="137" pos:column="9">if<condition pos:line="137" pos:column="11">(<expr><name pos:line="137" pos:column="12">ret<pos:position pos:line="137" pos:column="15"/></name></expr>)<pos:position pos:line="137" pos:column="16"/></condition><then pos:line="137" pos:column="16">
          <block type="pseudo"><goto pos:line="138" pos:column="11">goto <name pos:line="138" pos:column="16">nomem<pos:position pos:line="138" pos:column="21"/></name>;<pos:position pos:line="138" pos:column="22"/></goto></block></then></if>
        <expr_stmt><expr><call><name pos:line="139" pos:column="9">CODE3<pos:position pos:line="139" pos:column="14"/></name><argument_list pos:line="139" pos:column="14">(<argument><expr><literal type="string" pos:line="139" pos:column="15">"curl_mime_headers(part%d, slist%d, %d);"<pos:position pos:line="139" pos:column="56"/></literal></expr></argument>,
              <argument><expr><operator pos:line="140" pos:column="15">*<pos:position pos:line="140" pos:column="16"/></operator><name pos:line="140" pos:column="16">mimeno<pos:position pos:line="140" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="24">i<pos:position pos:line="140" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="27">ownership<pos:position pos:line="140" pos:column="36"/></name></expr></argument>)<pos:position pos:line="140" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="38"/></expr_stmt>
        <if pos:line="141" pos:column="9">if<condition pos:line="141" pos:column="11">(<expr><name pos:line="141" pos:column="12">ownership<pos:position pos:line="141" pos:column="21"/></name></expr>)<pos:position pos:line="141" pos:column="22"/></condition><then pos:line="141" pos:column="22">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="142" pos:column="11">CODE1<pos:position pos:line="142" pos:column="16"/></name><argument_list pos:line="142" pos:column="16">(<argument><expr><literal type="string" pos:line="142" pos:column="17">"slist%d = NULL;"<pos:position pos:line="142" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="142" pos:column="36">i<pos:position pos:line="142" pos:column="37"/></name></expr></argument>)<pos:position pos:line="142" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="39"/></expr_stmt></block></then></if> <comment type="block" pos:line="142" pos:column="40">/* Prevent freeing in CLEAN sequence. */</comment>
      }<pos:position pos:line="143" pos:column="8"/></block></then></if>
    }<pos:position pos:line="144" pos:column="6"/></block></for>
  }<pos:position pos:line="145" pos:column="4"/></block></then></if>

<label><name pos:line="147" pos:column="1">nomem<pos:position pos:line="147" pos:column="6"/></name>:<pos:position pos:line="147" pos:column="7"/></label>
  <expr_stmt><expr><call><name pos:line="148" pos:column="3">Curl_safefree<pos:position pos:line="148" pos:column="16"/></name><argument_list pos:line="148" pos:column="16">(<argument><expr><name pos:line="148" pos:column="17">escaped<pos:position pos:line="148" pos:column="24"/></name></expr></argument>)<pos:position pos:line="148" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="26"/></expr_stmt>
  <return pos:line="149" pos:column="3">return <expr><name pos:line="149" pos:column="10">ret<pos:position pos:line="149" pos:column="13"/></name></expr>;<pos:position pos:line="149" pos:column="14"/></return>
}<pos:position pos:line="150" pos:column="2"/></block></function></unit>
