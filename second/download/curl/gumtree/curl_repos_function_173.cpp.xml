<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_173.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">getpass<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><specifier pos:line="1" pos:column="15">const<pos:position pos:line="1" pos:column="20"/></specifier> <name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">prompt<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">FILE<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">infp<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">FILE<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">outfp<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">char<pos:position pos:line="5" pos:column="14"/></name></type> <name><name pos:line="5" pos:column="15">buf<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><name pos:line="5" pos:column="19">INPUT_BUFFER<pos:position pos:line="5" pos:column="31"/></name></expr>]<pos:position pos:line="5" pos:column="32"/></index></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <function_decl><type><name pos:line="6" pos:column="3">RETSIGTYPE<pos:position pos:line="6" pos:column="13"/></name></type> (<modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier><name pos:line="6" pos:column="16">sigint<pos:position pos:line="6" pos:column="22"/></name>)<parameter_list pos:line="6" pos:column="23">()<pos:position pos:line="6" pos:column="25"/></parameter_list>;<pos:position pos:line="6" pos:column="26"/></function_decl>
<cpp:ifndef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifndef<pos:position pos:line="7" pos:column="8"/></cpp:directive> <name pos:line="7" pos:column="9">__EMX__<pos:position pos:line="7" pos:column="16"/></name></cpp:ifndef>
  <function_decl><type><name pos:line="8" pos:column="3">RETSIGTYPE<pos:position pos:line="8" pos:column="13"/></name></type> (<modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier><name pos:line="8" pos:column="16">sigtstp<pos:position pos:line="8" pos:column="23"/></name>)<parameter_list pos:line="8" pos:column="24">()<pos:position pos:line="8" pos:column="26"/></parameter_list>;<pos:position pos:line="8" pos:column="27"/></function_decl>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">bytes_read<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">infd<pos:position pos:line="11" pos:column="11"/></name></decl>;<pos:position pos:line="11" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">outfd<pos:position pos:line="12" pos:column="12"/></name></decl>;<pos:position pos:line="12" pos:column="13"/></decl_stmt>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">HAVE_TERMIOS_H<pos:position pos:line="13" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">termios<pos:position pos:line="14" pos:column="17"/></name></name></type> <name pos:line="14" pos:column="18">orig<pos:position pos:line="14" pos:column="22"/></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">termios<pos:position pos:line="15" pos:column="17"/></name></name></type> <name pos:line="15" pos:column="18">noecho<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="17" pos:column="1">#  <cpp:directive pos:line="17" pos:column="4">ifdef<pos:position pos:line="17" pos:column="9"/></cpp:directive> <name pos:line="17" pos:column="10">HAVE_TERMIO_H<pos:position pos:line="17" pos:column="23"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="18" pos:column="3">struct<pos:position pos:line="18" pos:column="9"/></name> <name pos:line="18" pos:column="10">termio<pos:position pos:line="18" pos:column="16"/></name></name></type> <name pos:line="18" pos:column="17">orig<pos:position pos:line="18" pos:column="21"/></name></decl>;<pos:position pos:line="18" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">termio<pos:position pos:line="19" pos:column="16"/></name></name></type> <name pos:line="19" pos:column="17">noecho<pos:position pos:line="19" pos:column="23"/></name></decl>;<pos:position pos:line="19" pos:column="24"/></decl_stmt>  
<cpp:else pos:line="20" pos:column="1">#  <cpp:directive pos:line="20" pos:column="4">else<pos:position pos:line="20" pos:column="8"/></cpp:directive></cpp:else>
<cpp:endif pos:line="21" pos:column="1">#  <cpp:directive pos:line="21" pos:column="4">endif<pos:position pos:line="21" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="24" pos:column="3">sigint<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">signal<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">SIGINT<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="27">SIG_IGN<pos:position pos:line="24" pos:column="34"/></name></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
  <comment type="block" pos:line="25" pos:column="3">/* 20000318 mgs
   * this is needed by the emx system, SIGTSTP is not a supported signal */</comment>
<cpp:ifndef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifndef<pos:position pos:line="27" pos:column="8"/></cpp:directive> <name pos:line="27" pos:column="9">__EMX__<pos:position pos:line="27" pos:column="16"/></name></cpp:ifndef>
  <expr_stmt><expr><name pos:line="28" pos:column="3">sigtstp<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name pos:line="28" pos:column="13">signal<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">SIGTSTP<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">SIG_IGN<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">( <expr><operator pos:line="31" pos:column="7">(<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">infp<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator><call><name pos:line="31" pos:column="13">fopen<pos:position pos:line="31" pos:column="18"/></name><argument_list pos:line="31" pos:column="18">(<argument><expr><literal type="string" pos:line="31" pos:column="19">"/dev/tty"<pos:position pos:line="31" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="31">"r"<pos:position pos:line="31" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call><operator pos:line="31" pos:column="35">)<pos:position pos:line="31" pos:column="36"/></operator> <operator pos:line="31" pos:column="37">==<pos:position pos:line="31" pos:column="39"/></operator> <name pos:line="31" pos:column="40">NULL<pos:position pos:line="31" pos:column="44"/></name></expr> )<pos:position pos:line="31" pos:column="46"/></condition><then pos:line="31" pos:column="46">
  <block pos:line="32" pos:column="3">{
    <expr_stmt><expr><name pos:line="33" pos:column="5">infp<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <name pos:line="33" pos:column="12">stdin<pos:position pos:line="33" pos:column="17"/></name></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">( <expr><operator pos:line="35" pos:column="7">(<pos:position pos:line="35" pos:column="8"/></operator><name pos:line="35" pos:column="8">outfp<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator><call><name pos:line="35" pos:column="14">fopen<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><literal type="string" pos:line="35" pos:column="20">"/dev/tty"<pos:position pos:line="35" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="32">"w"<pos:position pos:line="35" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call><operator pos:line="35" pos:column="36">)<pos:position pos:line="35" pos:column="37"/></operator> <operator pos:line="35" pos:column="38">==<pos:position pos:line="35" pos:column="40"/></operator> <name pos:line="35" pos:column="41">NULL<pos:position pos:line="35" pos:column="45"/></name></expr> )<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47">
  <block pos:line="36" pos:column="3">{
    <expr_stmt><expr><name pos:line="37" pos:column="5">outfp<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <name pos:line="37" pos:column="13">stderr<pos:position pos:line="37" pos:column="19"/></name></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="39" pos:column="3">infd<pos:position pos:line="39" pos:column="7"/></name> <operator pos:line="39" pos:column="8">=<pos:position pos:line="39" pos:column="9"/></operator> <call><name pos:line="39" pos:column="10">fileno<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">infp<pos:position pos:line="39" pos:column="21"/></name></expr></argument>)<pos:position pos:line="39" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="40" pos:column="3">outfd<pos:position pos:line="40" pos:column="8"/></name> <operator pos:line="40" pos:column="9">=<pos:position pos:line="40" pos:column="10"/></operator> <call><name pos:line="40" pos:column="11">fileno<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><name pos:line="40" pos:column="18">outfp<pos:position pos:line="40" pos:column="23"/></name></expr></argument>)<pos:position pos:line="40" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>

  <comment type="block" pos:line="42" pos:column="3">/* dissable echo */</comment>
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">HAVE_TERMIOS_H<pos:position pos:line="43" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><call><name pos:line="44" pos:column="6">tcgetattr<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">outfd<pos:position pos:line="44" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="23">&amp;<pos:position pos:line="44" pos:column="28"/></operator><name pos:line="44" pos:column="24">orig<pos:position pos:line="44" pos:column="28"/></name></expr></argument>)<pos:position pos:line="44" pos:column="29"/></argument_list></call> <operator pos:line="44" pos:column="30">!=<pos:position pos:line="44" pos:column="32"/></operator> <literal type="number" pos:line="44" pos:column="33">0<pos:position pos:line="44" pos:column="34"/></literal></expr>)<pos:position pos:line="44" pos:column="35"/></condition><then pos:line="44" pos:column="35">
  <block pos:line="45" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">perror<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="string" pos:line="46" pos:column="12">"tcgetattr"<pos:position pos:line="46" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="48" pos:column="3">noecho<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <name pos:line="48" pos:column="12">orig<pos:position pos:line="48" pos:column="16"/></name></expr>;<pos:position pos:line="48" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">noecho<pos:position pos:line="49" pos:column="9"/></name><operator pos:line="49" pos:column="9">.<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">c_lflag<pos:position pos:line="49" pos:column="17"/></name></name> <operator pos:line="49" pos:column="18">&amp;=<pos:position pos:line="49" pos:column="24"/></operator> <operator pos:line="49" pos:column="21">~<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">ECHO<pos:position pos:line="49" pos:column="26"/></name></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>
  <if pos:line="50" pos:column="3">if<condition pos:line="50" pos:column="5">(<expr><call><name pos:line="50" pos:column="6">tcsetattr<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><name pos:line="50" pos:column="16">outfd<pos:position pos:line="50" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="23">TCSANOW<pos:position pos:line="50" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="32">&amp;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="33">noecho<pos:position pos:line="50" pos:column="39"/></name></expr></argument>)<pos:position pos:line="50" pos:column="40"/></argument_list></call> <operator pos:line="50" pos:column="41">!=<pos:position pos:line="50" pos:column="43"/></operator> <literal type="number" pos:line="50" pos:column="44">0<pos:position pos:line="50" pos:column="45"/></literal></expr>)<pos:position pos:line="50" pos:column="46"/></condition><then pos:line="50" pos:column="46">
  <block pos:line="51" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">perror<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><literal type="string" pos:line="52" pos:column="12">"tcgetattr"<pos:position pos:line="52" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>
<cpp:else pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">else<pos:position pos:line="54" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="55" pos:column="1">#  <cpp:directive pos:line="55" pos:column="4">ifdef<pos:position pos:line="55" pos:column="9"/></cpp:directive> <name pos:line="55" pos:column="10">HAVE_TERMIO_H<pos:position pos:line="55" pos:column="23"/></name></cpp:ifdef>
  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><call><name pos:line="56" pos:column="6">ioctl<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name pos:line="56" pos:column="12">outfd<pos:position pos:line="56" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="19">TCGETA<pos:position pos:line="56" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="27">&amp;<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="28">orig<pos:position pos:line="56" pos:column="32"/></name></expr></argument>)<pos:position pos:line="56" pos:column="33"/></argument_list></call> <operator pos:line="56" pos:column="34">!=<pos:position pos:line="56" pos:column="36"/></operator> <literal type="number" pos:line="56" pos:column="37">0<pos:position pos:line="56" pos:column="38"/></literal></expr>)<pos:position pos:line="56" pos:column="39"/></condition><then pos:line="56" pos:column="39">
  <block pos:line="57" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">perror<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><literal type="string" pos:line="58" pos:column="12">"ioctl"<pos:position pos:line="58" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="59" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="60" pos:column="3">noecho<pos:position pos:line="60" pos:column="9"/></name> <operator pos:line="60" pos:column="10">=<pos:position pos:line="60" pos:column="11"/></operator> <name pos:line="60" pos:column="12">orig<pos:position pos:line="60" pos:column="16"/></name></expr>;<pos:position pos:line="60" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="61" pos:column="3">noecho<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">.<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">c_lflag<pos:position pos:line="61" pos:column="17"/></name></name> <operator pos:line="61" pos:column="18">&amp;=<pos:position pos:line="61" pos:column="24"/></operator> <operator pos:line="61" pos:column="21">~<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="22">ECHO<pos:position pos:line="61" pos:column="26"/></name></expr>;<pos:position pos:line="61" pos:column="27"/></expr_stmt>
  <if pos:line="62" pos:column="3">if<condition pos:line="62" pos:column="5">(<expr><call><name pos:line="62" pos:column="6">ioctl<pos:position pos:line="62" pos:column="11"/></name><argument_list pos:line="62" pos:column="11">(<argument><expr><name pos:line="62" pos:column="12">outfd<pos:position pos:line="62" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="19">TCSETA<pos:position pos:line="62" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="27">&amp;<pos:position pos:line="62" pos:column="32"/></operator><name pos:line="62" pos:column="28">noecho<pos:position pos:line="62" pos:column="34"/></name></expr></argument>)<pos:position pos:line="62" pos:column="35"/></argument_list></call> <operator pos:line="62" pos:column="36">!=<pos:position pos:line="62" pos:column="38"/></operator> <literal type="number" pos:line="62" pos:column="39">0<pos:position pos:line="62" pos:column="40"/></literal></expr>)<pos:position pos:line="62" pos:column="41"/></condition><then pos:line="62" pos:column="41">
  <block pos:line="63" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">perror<pos:position pos:line="64" pos:column="11"/></name><argument_list pos:line="64" pos:column="11">(<argument><expr><literal type="string" pos:line="64" pos:column="12">"ioctl"<pos:position pos:line="64" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if>
<cpp:else pos:line="66" pos:column="1">#  <cpp:directive pos:line="66" pos:column="4">else<pos:position pos:line="66" pos:column="8"/></cpp:directive></cpp:else>
<cpp:endif pos:line="67" pos:column="1">#  <cpp:directive pos:line="67" pos:column="4">endif<pos:position pos:line="67" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="70" pos:column="3">fputs<pos:position pos:line="70" pos:column="8"/></name><argument_list pos:line="70" pos:column="8">(<argument><expr><name pos:line="70" pos:column="9">prompt<pos:position pos:line="70" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="17">outfp<pos:position pos:line="70" pos:column="22"/></name></expr></argument>)<pos:position pos:line="70" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="71" pos:column="3">fflush<pos:position pos:line="71" pos:column="9"/></name><argument_list pos:line="71" pos:column="9">(<argument><expr><name pos:line="71" pos:column="10">outfp<pos:position pos:line="71" pos:column="15"/></name></expr></argument>)<pos:position pos:line="71" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="73" pos:column="3">bytes_read<pos:position pos:line="73" pos:column="13"/></name><operator pos:line="73" pos:column="13">=<pos:position pos:line="73" pos:column="14"/></operator><call><name pos:line="73" pos:column="14">read<pos:position pos:line="73" pos:column="18"/></name><argument_list pos:line="73" pos:column="18">(<argument><expr><name pos:line="73" pos:column="19">infd<pos:position pos:line="73" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="25">buf<pos:position pos:line="73" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="30">INPUT_BUFFER<pos:position pos:line="73" pos:column="42"/></name></expr></argument>)<pos:position pos:line="73" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="74" pos:column="3">buf<pos:position pos:line="74" pos:column="6"/></name><index pos:line="74" pos:column="6">[<expr><ternary><condition><expr><name pos:line="74" pos:column="7">bytes_read<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">&gt;<pos:position pos:line="74" pos:column="22"/></operator> <literal type="number" pos:line="74" pos:column="20">0<pos:position pos:line="74" pos:column="21"/></literal></expr> ?<pos:position pos:line="74" pos:column="23"/></condition><then pos:line="74" pos:column="23"> <expr><operator pos:line="74" pos:column="24">(<pos:position pos:line="74" pos:column="25"/></operator><name pos:line="74" pos:column="25">bytes_read<pos:position pos:line="74" pos:column="35"/></name> <operator pos:line="74" pos:column="36">-<pos:position pos:line="74" pos:column="37"/></operator><literal type="number" pos:line="74" pos:column="37">1<pos:position pos:line="74" pos:column="38"/></literal><operator pos:line="74" pos:column="38">)<pos:position pos:line="74" pos:column="39"/></operator></expr> <pos:position pos:line="74" pos:column="40"/></then><else pos:line="74" pos:column="40">: <expr><literal type="number" pos:line="74" pos:column="42">0<pos:position pos:line="74" pos:column="43"/></literal></expr></else></ternary></expr>]<pos:position pos:line="74" pos:column="44"/></index></name> <operator pos:line="74" pos:column="45">=<pos:position pos:line="74" pos:column="46"/></operator> <literal type="char" pos:line="74" pos:column="47">'\0'<pos:position pos:line="74" pos:column="51"/></literal></expr>;<pos:position pos:line="74" pos:column="52"/></expr_stmt>

  <comment type="block" pos:line="76" pos:column="3">/* print a new line if needed */</comment>
<cpp:ifdef pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">ifdef<pos:position pos:line="77" pos:column="7"/></cpp:directive> <name pos:line="77" pos:column="8">HAVE_TERMIOS_H<pos:position pos:line="77" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="78" pos:column="3">fputs<pos:position pos:line="78" pos:column="8"/></name><argument_list pos:line="78" pos:column="8">(<argument><expr><literal type="string" pos:line="78" pos:column="9">"\n"<pos:position pos:line="78" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="15">outfp<pos:position pos:line="78" pos:column="20"/></name></expr></argument>)<pos:position pos:line="78" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="22"/></expr_stmt>
<cpp:else pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">else<pos:position pos:line="79" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="80" pos:column="1">#  <cpp:directive pos:line="80" pos:column="4">ifdef<pos:position pos:line="80" pos:column="9"/></cpp:directive> <name pos:line="80" pos:column="10">HAVE_TERMIO_H<pos:position pos:line="80" pos:column="23"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="81" pos:column="3">fputs<pos:position pos:line="81" pos:column="8"/></name><argument_list pos:line="81" pos:column="8">(<argument><expr><literal type="string" pos:line="81" pos:column="9">"\n"<pos:position pos:line="81" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="15">outfp<pos:position pos:line="81" pos:column="20"/></name></expr></argument>)<pos:position pos:line="81" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="22"/></expr_stmt>
<cpp:else pos:line="82" pos:column="1">#  <cpp:directive pos:line="82" pos:column="4">else<pos:position pos:line="82" pos:column="8"/></cpp:directive></cpp:else>
<cpp:endif pos:line="83" pos:column="1">#  <cpp:directive pos:line="83" pos:column="4">endif<pos:position pos:line="83" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="86" pos:column="3">/*
   * reset term charectaristics, use TCSAFLUSH incase the
   * user types more than INPUT_BUFFER
   */</comment>
<cpp:ifdef pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">ifdef<pos:position pos:line="90" pos:column="7"/></cpp:directive> <name pos:line="90" pos:column="8">HAVE_TERMIOS_H<pos:position pos:line="90" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="91" pos:column="3">if<condition pos:line="91" pos:column="5">(<expr><call><name pos:line="91" pos:column="6">tcsetattr<pos:position pos:line="91" pos:column="15"/></name><argument_list pos:line="91" pos:column="15">(<argument><expr><name pos:line="91" pos:column="16">outfd<pos:position pos:line="91" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="23">TCSAFLUSH<pos:position pos:line="91" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="34">&amp;<pos:position pos:line="91" pos:column="39"/></operator><name pos:line="91" pos:column="35">orig<pos:position pos:line="91" pos:column="39"/></name></expr></argument>)<pos:position pos:line="91" pos:column="40"/></argument_list></call> <operator pos:line="91" pos:column="41">!=<pos:position pos:line="91" pos:column="43"/></operator> <literal type="number" pos:line="91" pos:column="44">0<pos:position pos:line="91" pos:column="45"/></literal></expr>)<pos:position pos:line="91" pos:column="46"/></condition><then pos:line="91" pos:column="46">
  <block pos:line="92" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">perror<pos:position pos:line="93" pos:column="11"/></name><argument_list pos:line="93" pos:column="11">(<argument><expr><literal type="string" pos:line="93" pos:column="12">"tcgetattr"<pos:position pos:line="93" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="94" pos:column="4"/></block></then></if>
<cpp:else pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">else<pos:position pos:line="95" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="96" pos:column="1">#  <cpp:directive pos:line="96" pos:column="4">ifdef<pos:position pos:line="96" pos:column="9"/></cpp:directive> <name pos:line="96" pos:column="10">HAVE_TERMIO_H<pos:position pos:line="96" pos:column="23"/></name></cpp:ifdef>
  <if pos:line="97" pos:column="3">if<condition pos:line="97" pos:column="5">(<expr><call><name pos:line="97" pos:column="6">ioctl<pos:position pos:line="97" pos:column="11"/></name><argument_list pos:line="97" pos:column="11">(<argument><expr><name pos:line="97" pos:column="12">outfd<pos:position pos:line="97" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="19">TCSETA<pos:position pos:line="97" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="27">&amp;<pos:position pos:line="97" pos:column="32"/></operator><name pos:line="97" pos:column="28">orig<pos:position pos:line="97" pos:column="32"/></name></expr></argument>)<pos:position pos:line="97" pos:column="33"/></argument_list></call> <operator pos:line="97" pos:column="34">!=<pos:position pos:line="97" pos:column="36"/></operator> <literal type="number" pos:line="97" pos:column="37">0<pos:position pos:line="97" pos:column="38"/></literal></expr>)<pos:position pos:line="97" pos:column="39"/></condition><then pos:line="97" pos:column="39">
  <block pos:line="98" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">perror<pos:position pos:line="99" pos:column="11"/></name><argument_list pos:line="99" pos:column="11">(<argument><expr><literal type="string" pos:line="99" pos:column="12">"ioctl"<pos:position pos:line="99" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if>
<cpp:else pos:line="101" pos:column="1">#  <cpp:directive pos:line="101" pos:column="4">else<pos:position pos:line="101" pos:column="8"/></cpp:directive></cpp:else>
<cpp:endif pos:line="102" pos:column="1">#  <cpp:directive pos:line="102" pos:column="4">endif<pos:position pos:line="102" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif<pos:position pos:line="103" pos:column="7"/></cpp:directive></cpp:endif>
  
  <expr_stmt><expr><call><name pos:line="105" pos:column="3">signal<pos:position pos:line="105" pos:column="9"/></name><argument_list pos:line="105" pos:column="9">(<argument><expr><name pos:line="105" pos:column="10">SIGINT<pos:position pos:line="105" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="18">sigint<pos:position pos:line="105" pos:column="24"/></name></expr></argument>)<pos:position pos:line="105" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="26"/></expr_stmt>
<cpp:ifndef pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">ifndef<pos:position pos:line="106" pos:column="8"/></cpp:directive> <name pos:line="106" pos:column="9">__EMX__<pos:position pos:line="106" pos:column="16"/></name></cpp:ifndef>
  <expr_stmt><expr><call><name pos:line="107" pos:column="3">signal<pos:position pos:line="107" pos:column="9"/></name><argument_list pos:line="107" pos:column="9">(<argument><expr><name pos:line="107" pos:column="10">SIGTSTP<pos:position pos:line="107" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="19">sigtstp<pos:position pos:line="107" pos:column="26"/></name></expr></argument>)<pos:position pos:line="107" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">endif<pos:position pos:line="108" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="110" pos:column="3">return<expr><operator pos:line="110" pos:column="9">(<pos:position pos:line="110" pos:column="10"/></operator><name pos:line="110" pos:column="10">buf<pos:position pos:line="110" pos:column="13"/></name><operator pos:line="110" pos:column="13">)<pos:position pos:line="110" pos:column="14"/></operator></expr>;<pos:position pos:line="110" pos:column="15"/></return>
}<pos:position pos:line="111" pos:column="2"/></block></function></unit>
