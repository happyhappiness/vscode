<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_945.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type>
<name pos:line="2" pos:column="1">Curl_reconnect_request<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">connectdata<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier><modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">connp<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">connectdata<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">conn<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><operator pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">connp<pos:position pos:line="5" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">conn<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* This was a re-use of a connection and we got a write error in the
   * DO-phase. Then we DISCONNECT this connection and have another attempt to
   * CONNECT and then DO again! The retry cannot possibly find another
   * connection to re-use, since we only keep one possible connection for
   * each.  */</comment>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">infof<pos:position pos:line="14" pos:column="8"/></name><argument_list pos:line="14" pos:column="8">(<argument><expr><name pos:line="14" pos:column="9">data<pos:position pos:line="14" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="15">"Re-used connection seems dead, get a new one\n"<pos:position pos:line="14" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">connclose<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">conn<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="19">"Reconnect dead connection"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt> <comment type="block" pos:line="16" pos:column="49">/* enforce close */</comment>
  <expr_stmt><expr><name pos:line="17" pos:column="3">result<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">Curl_done<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><operator pos:line="17" pos:column="22">&amp;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="23">conn<pos:position pos:line="17" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="29">result<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="37">FALSE<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt> <comment type="block" pos:line="17" pos:column="45">/* we are so done with this */</comment>

  <comment type="block" pos:line="19" pos:column="3">/* conn may no longer be a good pointer, clear it to avoid mistakes by
     parent functions */</comment>
  <expr_stmt><expr><operator pos:line="21" pos:column="3">*<pos:position pos:line="21" pos:column="4"/></operator><name pos:line="21" pos:column="4">connp<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <name pos:line="21" pos:column="12">NULL<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/*
   * According to bug report #1330310. We need to check for CURLE_SEND_ERROR
   * here as well. I figure this could happen when the request failed on a FTP
   * connection and thus Curl_done() itself tried to use the connection
   * (again). Slight Lack of feedback in the report, but I don't think this
   * extra check can do much harm.
   */</comment>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><operator pos:line="30" pos:column="6">!<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">result<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">||<pos:position pos:line="30" pos:column="16"/></operator> <operator pos:line="30" pos:column="17">(<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">CURLE_SEND_ERROR<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">==<pos:position pos:line="30" pos:column="37"/></operator> <name pos:line="30" pos:column="38">result<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">)<pos:position pos:line="30" pos:column="45"/></operator></expr>)<pos:position pos:line="30" pos:column="46"/></condition><then pos:line="30" pos:column="46"> <block pos:line="30" pos:column="47">{
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">bool<pos:position pos:line="31" pos:column="9"/></name></type> <name pos:line="31" pos:column="10">async<pos:position pos:line="31" pos:column="15"/></name></decl>;<pos:position pos:line="31" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">bool<pos:position pos:line="32" pos:column="9"/></name></type> <name pos:line="32" pos:column="10">protocol_done<pos:position pos:line="32" pos:column="23"/></name> <init pos:line="32" pos:column="24">= <expr><name pos:line="32" pos:column="26">TRUE<pos:position pos:line="32" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="31"/></decl_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* Now, redo the connect and get a new connection */</comment>
    <expr_stmt><expr><name pos:line="35" pos:column="5">result<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name pos:line="35" pos:column="14">Curl_connect<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">data<pos:position pos:line="35" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="33">connp<pos:position pos:line="35" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="40">&amp;<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="41">async<pos:position pos:line="35" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="48">&amp;<pos:position pos:line="35" pos:column="53"/></operator><name pos:line="35" pos:column="49">protocol_done<pos:position pos:line="35" pos:column="62"/></name></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><operator pos:line="36" pos:column="8">!<pos:position pos:line="36" pos:column="9"/></operator><name pos:line="36" pos:column="9">result<pos:position pos:line="36" pos:column="15"/></name></expr>)<pos:position pos:line="36" pos:column="16"/></condition><then pos:line="36" pos:column="16"> <block pos:line="36" pos:column="17">{
      <comment type="block" pos:line="37" pos:column="7">/* We have connected or sent away a name resolve query fine */</comment>

      <expr_stmt><expr><name pos:line="39" pos:column="7">conn<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <operator pos:line="39" pos:column="14">*<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">connp<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt> <comment type="block" pos:line="39" pos:column="22">/* setup conn to again point to something nice */</comment>
      <if pos:line="40" pos:column="7">if<condition pos:line="40" pos:column="9">(<expr><name pos:line="40" pos:column="10">async<pos:position pos:line="40" pos:column="15"/></name></expr>)<pos:position pos:line="40" pos:column="16"/></condition><then pos:line="40" pos:column="16"> <block pos:line="40" pos:column="17">{
        <comment type="block" pos:line="41" pos:column="9">/* Now, if async is TRUE here, we need to wait for the name
           to resolve */</comment>
        <expr_stmt><expr><name pos:line="43" pos:column="9">result<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <call><name pos:line="43" pos:column="18">Curl_resolver_wait_resolv<pos:position pos:line="43" pos:column="43"/></name><argument_list pos:line="43" pos:column="43">(<argument><expr><name pos:line="43" pos:column="44">conn<pos:position pos:line="43" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">NULL<pos:position pos:line="43" pos:column="54"/></name></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt>
        <if pos:line="44" pos:column="9">if<condition pos:line="44" pos:column="11">(<expr><name pos:line="44" pos:column="12">result<pos:position pos:line="44" pos:column="18"/></name></expr>)<pos:position pos:line="44" pos:column="19"/></condition><then pos:line="44" pos:column="19">
          <block type="pseudo"><return pos:line="45" pos:column="11">return <expr><name pos:line="45" pos:column="18">result<pos:position pos:line="45" pos:column="24"/></name></expr>;<pos:position pos:line="45" pos:column="25"/></return></block></then></if>

        <comment type="block" pos:line="47" pos:column="9">/* Resolved, continue with the connection */</comment>
        <expr_stmt><expr><name pos:line="48" pos:column="9">result<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <call><name pos:line="48" pos:column="18">Curl_async_resolved<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">conn<pos:position pos:line="48" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="44">&amp;<pos:position pos:line="48" pos:column="49"/></operator><name pos:line="48" pos:column="45">protocol_done<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt>
        <if pos:line="49" pos:column="9">if<condition pos:line="49" pos:column="11">(<expr><name pos:line="49" pos:column="12">result<pos:position pos:line="49" pos:column="18"/></name></expr>)<pos:position pos:line="49" pos:column="19"/></condition><then pos:line="49" pos:column="19">
          <block type="pseudo"><return pos:line="50" pos:column="11">return <expr><name pos:line="50" pos:column="18">result<pos:position pos:line="50" pos:column="24"/></name></expr>;<pos:position pos:line="50" pos:column="25"/></return></block></then></if>
      }<pos:position pos:line="51" pos:column="8"/></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <return pos:line="55" pos:column="3">return <expr><name pos:line="55" pos:column="10">result<pos:position pos:line="55" pos:column="16"/></name></expr>;<pos:position pos:line="55" pos:column="17"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
