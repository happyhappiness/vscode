<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_859_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ftp_readresp<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">curl_socket_t<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">sockfd<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                             <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">connectdata<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">conn<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">ftpcode<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>, <comment type="block" pos:line="3" pos:column="44">/* return the ftp-code if done */</comment>
                             <parameter><decl><type><name pos:line="4" pos:column="30">size_t<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">size<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="43"/></parameter_list> <comment type="block" pos:line="4" pos:column="44">/* size of the response */</comment>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">ssize_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">perline<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt> <comment type="block" pos:line="6" pos:column="20">/* count bytes per line */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">keepon<pos:position pos:line="7" pos:column="14"/></name><init pos:line="7" pos:column="14">=<expr><name pos:line="7" pos:column="15">TRUE<pos:position pos:line="7" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">ssize_t<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">gotbytes<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">ptr<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">SessionHandle<pos:position pos:line="10" pos:column="23"/></name></name> <modifier pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></modifier></type><name pos:line="10" pos:column="25">data<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><name><name pos:line="10" pos:column="32">conn<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">data<pos:position pos:line="10" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">buf<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><name><name pos:line="11" pos:column="15">data<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">state<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">.<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">buffer<pos:position pos:line="11" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">CURLcode<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">result<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><name pos:line="12" pos:column="21">CURLE_OK<pos:position pos:line="12" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">ftp_conn<pos:position pos:line="13" pos:column="18"/></name></name> <modifier pos:line="13" pos:column="19">*<pos:position pos:line="13" pos:column="20"/></modifier></type><name pos:line="13" pos:column="20">ftpc<pos:position pos:line="13" pos:column="24"/></name> <init pos:line="13" pos:column="25">= <expr><operator pos:line="13" pos:column="27">&amp;<pos:position pos:line="13" pos:column="32"/></operator><name><name pos:line="13" pos:column="28">conn<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">-&gt;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="34">proto<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">.<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="40">ftpc<pos:position pos:line="13" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">code<pos:position pos:line="14" pos:column="11"/></name> <init pos:line="14" pos:column="12">= <expr><literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="16" pos:column="3">*<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">ftpcode<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal></expr>;<pos:position pos:line="16" pos:column="16"/></expr_stmt> <comment type="block" pos:line="16" pos:column="17">/* 0 for errors or not done */</comment>
  <expr_stmt><expr><operator pos:line="17" pos:column="3">*<pos:position pos:line="17" pos:column="4"/></operator><name pos:line="17" pos:column="4">size<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <literal type="number" pos:line="17" pos:column="11">0<pos:position pos:line="17" pos:column="12"/></literal></expr>;<pos:position pos:line="17" pos:column="13"/></expr_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">ptr<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">=<pos:position pos:line="19" pos:column="7"/></operator><name pos:line="19" pos:column="7">buf<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">+<pos:position pos:line="19" pos:column="12"/></operator> <name><name pos:line="19" pos:column="13">ftpc<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">nread_resp<pos:position pos:line="19" pos:column="29"/></name></name></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* number of bytes in the current line, so far */</comment>
  <expr_stmt><expr><name pos:line="22" pos:column="3">perline<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <call pos:line="22" pos:column="13">(<name pos:line="22" pos:column="14">ssize_t<pos:position pos:line="22" pos:column="21"/></name>)<argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">ptr<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-<pos:position pos:line="22" pos:column="27"/></operator><name><name pos:line="22" pos:column="27">ftpc<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">-&gt;<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="33">linestart_resp<pos:position pos:line="22" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">keepon<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">TRUE<pos:position pos:line="24" pos:column="14"/></name></expr>;<pos:position pos:line="24" pos:column="15"/></expr_stmt>

  <while pos:line="26" pos:column="3">while<condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">(<pos:position pos:line="26" pos:column="10"/></operator><name><name pos:line="26" pos:column="10">ftpc<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">nread_resp<pos:position pos:line="26" pos:column="26"/></name></name><operator pos:line="26" pos:column="26">&lt;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="27">BUFSIZE<pos:position pos:line="26" pos:column="34"/></name><operator pos:line="26" pos:column="34">)<pos:position pos:line="26" pos:column="35"/></operator> <operator pos:line="26" pos:column="36">&amp;&amp;<pos:position pos:line="26" pos:column="46"/></operator> <operator pos:line="26" pos:column="39">(<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">keepon<pos:position pos:line="26" pos:column="46"/></name> <operator pos:line="26" pos:column="47">&amp;&amp;<pos:position pos:line="26" pos:column="57"/></operator> <operator pos:line="26" pos:column="50">!<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="51">result<pos:position pos:line="26" pos:column="57"/></name><operator pos:line="26" pos:column="57">)<pos:position pos:line="26" pos:column="58"/></operator></expr>)<pos:position pos:line="26" pos:column="59"/></condition> <block pos:line="26" pos:column="60">{

    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><name><name pos:line="28" pos:column="8">ftpc<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">cache<pos:position pos:line="28" pos:column="19"/></name></name></expr>)<pos:position pos:line="28" pos:column="20"/></condition><then pos:line="28" pos:column="20"> <block pos:line="28" pos:column="21">{
      <comment type="block" pos:line="29" pos:column="7">/* we had data in the "cache", copy that instead of doing an actual
       * read
       *
       * ftp-&gt;cache_size is cast to int here.  This should be safe,
       * because it would have been populated with something of size
       * int to begin with, even though its datatype may be larger
       * than an int.
       */</comment>
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">memcpy<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><name pos:line="37" pos:column="14">ptr<pos:position pos:line="37" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="19">ftpc<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">-&gt;<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="25">cache<pos:position pos:line="37" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="32">(<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">int<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">)<pos:position pos:line="37" pos:column="37"/></operator><name><name pos:line="37" pos:column="37">ftpc<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">-&gt;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="43">cache_size<pos:position pos:line="37" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><name pos:line="38" pos:column="7">gotbytes<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <operator pos:line="38" pos:column="18">(<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">int<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">)<pos:position pos:line="38" pos:column="23"/></operator><name><name pos:line="38" pos:column="23">ftpc<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">-&gt;<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="29">cache_size<pos:position pos:line="38" pos:column="39"/></name></name></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">free<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><name><name pos:line="39" pos:column="12">ftpc<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">cache<pos:position pos:line="39" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>    <comment type="block" pos:line="39" pos:column="29">/* free the cache */</comment>
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">ftpc<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">-&gt;<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="13">cache<pos:position pos:line="40" pos:column="18"/></name></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <name pos:line="40" pos:column="21">NULL<pos:position pos:line="40" pos:column="25"/></name></expr>;<pos:position pos:line="40" pos:column="26"/></expr_stmt>   <comment type="block" pos:line="40" pos:column="29">/* clear the pointer */</comment>
      <expr_stmt><expr><name><name pos:line="41" pos:column="7">ftpc<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">-&gt;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="13">cache_size<pos:position pos:line="41" pos:column="23"/></name></name> <operator pos:line="41" pos:column="24">=<pos:position pos:line="41" pos:column="25"/></operator> <literal type="number" pos:line="41" pos:column="26">0<pos:position pos:line="41" pos:column="27"/></literal></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt> <comment type="block" pos:line="41" pos:column="29">/* zero the size just in case */</comment>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
    <else pos:line="43" pos:column="5">else <block pos:line="43" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="44" pos:column="7">int<pos:position pos:line="44" pos:column="10"/></name></type> <name pos:line="44" pos:column="11">res<pos:position pos:line="44" pos:column="14"/></name></decl>;<pos:position pos:line="44" pos:column="15"/></decl_stmt>
<cpp:if pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">if<pos:position pos:line="45" pos:column="4"/></cpp:directive> <expr><call><name pos:line="45" pos:column="5">defined<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><name pos:line="45" pos:column="13">HAVE_KRB4<pos:position pos:line="45" pos:column="22"/></name></expr></argument>)<pos:position pos:line="45" pos:column="23"/></argument_list></call> <operator pos:line="45" pos:column="24">||<pos:position pos:line="45" pos:column="26"/></operator> <call><name pos:line="45" pos:column="27">defined<pos:position pos:line="45" pos:column="34"/></name><argument_list pos:line="45" pos:column="34">(<argument><expr><name pos:line="45" pos:column="35">HAVE_GSSAPI<pos:position pos:line="45" pos:column="46"/></name></expr></argument>)<pos:position pos:line="45" pos:column="47"/></argument_list></call></expr></cpp:if>
      <decl_stmt><decl><type><name><name pos:line="46" pos:column="7">enum<pos:position pos:line="46" pos:column="11"/></name> <name pos:line="46" pos:column="12">protection_level<pos:position pos:line="46" pos:column="28"/></name></name></type> <name pos:line="46" pos:column="29">prot<pos:position pos:line="46" pos:column="33"/></name> <init pos:line="46" pos:column="34">= <expr><name><name pos:line="46" pos:column="36">conn<pos:position pos:line="46" pos:column="40"/></name><operator pos:line="46" pos:column="40">-&gt;<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="42">data_prot<pos:position pos:line="46" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="46" pos:column="52"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="48" pos:column="7">conn<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">-&gt;<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="13">data_prot<pos:position pos:line="48" pos:column="22"/></name></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <literal type="number" pos:line="48" pos:column="25">0<pos:position pos:line="48" pos:column="26"/></literal></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="50" pos:column="7">res<pos:position pos:line="50" pos:column="10"/></name> <operator pos:line="50" pos:column="11">=<pos:position pos:line="50" pos:column="12"/></operator> <call><name pos:line="50" pos:column="13">Curl_read<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><name pos:line="50" pos:column="23">conn<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="29">sockfd<pos:position pos:line="50" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="37">ptr<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">BUFSIZE<pos:position pos:line="50" pos:column="49"/></name><operator pos:line="50" pos:column="49">-<pos:position pos:line="50" pos:column="50"/></operator><name><name pos:line="50" pos:column="50">ftpc<pos:position pos:line="50" pos:column="54"/></name><operator pos:line="50" pos:column="54">-&gt;<pos:position pos:line="50" pos:column="59"/></operator><name pos:line="50" pos:column="56">nread_resp<pos:position pos:line="50" pos:column="66"/></name></name></expr></argument>,
                      <argument><expr><operator pos:line="51" pos:column="23">&amp;<pos:position pos:line="51" pos:column="28"/></operator><name pos:line="51" pos:column="24">gotbytes<pos:position pos:line="51" pos:column="32"/></name></expr></argument>)<pos:position pos:line="51" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt>
<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><call><name pos:line="52" pos:column="5">defined<pos:position pos:line="52" pos:column="12"/></name><argument_list pos:line="52" pos:column="12">(<argument><expr><name pos:line="52" pos:column="13">HAVE_KRB4<pos:position pos:line="52" pos:column="22"/></name></expr></argument>)<pos:position pos:line="52" pos:column="23"/></argument_list></call> <operator pos:line="52" pos:column="24">||<pos:position pos:line="52" pos:column="26"/></operator> <call><name pos:line="52" pos:column="27">defined<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">HAVE_GSSAPI<pos:position pos:line="52" pos:column="46"/></name></expr></argument>)<pos:position pos:line="52" pos:column="47"/></argument_list></call></expr></cpp:if>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">conn<pos:position pos:line="53" pos:column="11"/></name><operator pos:line="53" pos:column="11">-&gt;<pos:position pos:line="53" pos:column="16"/></operator><name pos:line="53" pos:column="13">data_prot<pos:position pos:line="53" pos:column="22"/></name></name> <operator pos:line="53" pos:column="23">=<pos:position pos:line="53" pos:column="24"/></operator> <name pos:line="53" pos:column="25">prot<pos:position pos:line="53" pos:column="29"/></name></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>
      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">(<expr><name pos:line="55" pos:column="10">res<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">&lt;<pos:position pos:line="55" pos:column="18"/></operator> <literal type="number" pos:line="55" pos:column="16">0<pos:position pos:line="55" pos:column="17"/></literal></expr>)<pos:position pos:line="55" pos:column="18"/></condition><then pos:line="55" pos:column="18">
        <comment type="block" pos:line="56" pos:column="9">/* EWOULDBLOCK */</comment>
        <block type="pseudo"><return pos:line="57" pos:column="9">return <expr><name pos:line="57" pos:column="16">CURLE_OK<pos:position pos:line="57" pos:column="24"/></name></expr>;<pos:position pos:line="57" pos:column="25"/></return></block></then></if> <comment type="block" pos:line="57" pos:column="26">/* return */</comment>

<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="59" pos:column="29"/></name></cpp:ifdef>
      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><operator pos:line="60" pos:column="10">(<pos:position pos:line="60" pos:column="11"/></operator><name pos:line="60" pos:column="11">res<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">==<pos:position pos:line="60" pos:column="17"/></operator> <name pos:line="60" pos:column="18">CURLE_OK<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">)<pos:position pos:line="60" pos:column="27"/></operator> <operator pos:line="60" pos:column="28">&amp;&amp;<pos:position pos:line="60" pos:column="38"/></operator> <operator pos:line="60" pos:column="31">(<pos:position pos:line="60" pos:column="32"/></operator><name pos:line="60" pos:column="32">gotbytes<pos:position pos:line="60" pos:column="40"/></name> <operator pos:line="60" pos:column="41">&gt;<pos:position pos:line="60" pos:column="45"/></operator> <literal type="number" pos:line="60" pos:column="43">0<pos:position pos:line="60" pos:column="44"/></literal><operator pos:line="60" pos:column="44">)<pos:position pos:line="60" pos:column="45"/></operator></expr>)<pos:position pos:line="60" pos:column="46"/></condition><then pos:line="60" pos:column="46"> <block pos:line="60" pos:column="47">{
        <comment type="block" pos:line="61" pos:column="9">/* convert from the network encoding */</comment>
        <expr_stmt><expr><name pos:line="62" pos:column="9">result<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <name pos:line="62" pos:column="18">res<pos:position pos:line="62" pos:column="21"/></name> <operator pos:line="62" pos:column="22">=<pos:position pos:line="62" pos:column="23"/></operator> <call><name pos:line="62" pos:column="24">Curl_convert_from_network<pos:position pos:line="62" pos:column="49"/></name><argument_list pos:line="62" pos:column="49">(<argument><expr><name pos:line="62" pos:column="50">data<pos:position pos:line="62" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="56">ptr<pos:position pos:line="62" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="61">gotbytes<pos:position pos:line="62" pos:column="69"/></name></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="71"/></expr_stmt>
        <comment type="block" pos:line="63" pos:column="9">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
      }<pos:position pos:line="64" pos:column="8"/></block></then></if>
<cpp:endif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">endif<pos:position pos:line="65" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="65" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

      <if pos:line="67" pos:column="7">if<condition pos:line="67" pos:column="9">(<expr><name pos:line="67" pos:column="10">CURLE_OK<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">!=<pos:position pos:line="67" pos:column="21"/></operator> <name pos:line="67" pos:column="22">res<pos:position pos:line="67" pos:column="25"/></name></expr>)<pos:position pos:line="67" pos:column="26"/></condition><then pos:line="67" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="9">keepon<pos:position pos:line="68" pos:column="15"/></name> <operator pos:line="68" pos:column="16">=<pos:position pos:line="68" pos:column="17"/></operator> <name pos:line="68" pos:column="18">FALSE<pos:position pos:line="68" pos:column="23"/></name></expr>;<pos:position pos:line="68" pos:column="24"/></expr_stmt></block></then></if>
    }<pos:position pos:line="69" pos:column="6"/></block></else></if>

    <if pos:line="71" pos:column="5">if<condition pos:line="71" pos:column="7">(<expr><operator pos:line="71" pos:column="8">!<pos:position pos:line="71" pos:column="9"/></operator><name pos:line="71" pos:column="9">keepon<pos:position pos:line="71" pos:column="15"/></name></expr>)<pos:position pos:line="71" pos:column="16"/></condition><then pos:line="71" pos:column="16">
      <block type="pseudo"><empty_stmt pos:line="72" pos:column="7">;<pos:position pos:line="72" pos:column="8"/></empty_stmt></block></then>
    <elseif pos:line="73" pos:column="5">else <if pos:line="73" pos:column="10">if<condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">gotbytes<pos:position pos:line="73" pos:column="21"/></name> <operator pos:line="73" pos:column="22">&lt;=<pos:position pos:line="73" pos:column="27"/></operator> <literal type="number" pos:line="73" pos:column="25">0<pos:position pos:line="73" pos:column="26"/></literal></expr>)<pos:position pos:line="73" pos:column="27"/></condition><then pos:line="73" pos:column="27"> <block pos:line="73" pos:column="28">{
      <expr_stmt><expr><name pos:line="74" pos:column="7">keepon<pos:position pos:line="74" pos:column="13"/></name> <operator pos:line="74" pos:column="14">=<pos:position pos:line="74" pos:column="15"/></operator> <name pos:line="74" pos:column="16">FALSE<pos:position pos:line="74" pos:column="21"/></name></expr>;<pos:position pos:line="74" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="75" pos:column="7">result<pos:position pos:line="75" pos:column="13"/></name> <operator pos:line="75" pos:column="14">=<pos:position pos:line="75" pos:column="15"/></operator> <name pos:line="75" pos:column="16">CURLE_RECV_ERROR<pos:position pos:line="75" pos:column="32"/></name></expr>;<pos:position pos:line="75" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="76" pos:column="7">failf<pos:position pos:line="76" pos:column="12"/></name><argument_list pos:line="76" pos:column="12">(<argument><expr><name pos:line="76" pos:column="13">data<pos:position pos:line="76" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="19">"FTP response reading failed"<pos:position pos:line="76" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if></elseif>
    <else pos:line="78" pos:column="5">else <block pos:line="78" pos:column="10">{
      <comment type="block" pos:line="79" pos:column="7">/* we got a whole chunk of data, which can be anything from one
       * byte to a set of lines and possible just a piece of the last
       * line */</comment>
      <decl_stmt><decl><type><name pos:line="82" pos:column="7">ssize_t<pos:position pos:line="82" pos:column="14"/></name></type> <name pos:line="82" pos:column="15">i<pos:position pos:line="82" pos:column="16"/></name></decl>;<pos:position pos:line="82" pos:column="17"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="83" pos:column="7">ssize_t<pos:position pos:line="83" pos:column="14"/></name></type> <name pos:line="83" pos:column="15">clipamount<pos:position pos:line="83" pos:column="25"/></name> <init pos:line="83" pos:column="26">= <expr><literal type="number" pos:line="83" pos:column="28">0<pos:position pos:line="83" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="83" pos:column="30"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="84" pos:column="7">bool<pos:position pos:line="84" pos:column="11"/></name></type> <name pos:line="84" pos:column="12">restart<pos:position pos:line="84" pos:column="19"/></name> <init pos:line="84" pos:column="20">= <expr><name pos:line="84" pos:column="22">FALSE<pos:position pos:line="84" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="84" pos:column="28"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="86" pos:column="7">data<pos:position pos:line="86" pos:column="11"/></name><operator pos:line="86" pos:column="11">-&gt;<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="13">req<pos:position pos:line="86" pos:column="16"/></name><operator pos:line="86" pos:column="16">.<pos:position pos:line="86" pos:column="17"/></operator><name pos:line="86" pos:column="17">headerbytecount<pos:position pos:line="86" pos:column="32"/></name></name> <operator pos:line="86" pos:column="33">+=<pos:position pos:line="86" pos:column="35"/></operator> <name pos:line="86" pos:column="36">gotbytes<pos:position pos:line="86" pos:column="44"/></name></expr>;<pos:position pos:line="86" pos:column="45"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="88" pos:column="7">ftpc<pos:position pos:line="88" pos:column="11"/></name><operator pos:line="88" pos:column="11">-&gt;<pos:position pos:line="88" pos:column="16"/></operator><name pos:line="88" pos:column="13">nread_resp<pos:position pos:line="88" pos:column="23"/></name></name> <operator pos:line="88" pos:column="24">+=<pos:position pos:line="88" pos:column="26"/></operator> <name pos:line="88" pos:column="27">gotbytes<pos:position pos:line="88" pos:column="35"/></name></expr>;<pos:position pos:line="88" pos:column="36"/></expr_stmt>
      <for pos:line="89" pos:column="7">for<control pos:line="89" pos:column="10">(<init><expr><name pos:line="89" pos:column="11">i<pos:position pos:line="89" pos:column="12"/></name> <operator pos:line="89" pos:column="13">=<pos:position pos:line="89" pos:column="14"/></operator> <literal type="number" pos:line="89" pos:column="15">0<pos:position pos:line="89" pos:column="16"/></literal></expr>;<pos:position pos:line="89" pos:column="17"/></init> <condition><expr><name pos:line="89" pos:column="18">i<pos:position pos:line="89" pos:column="19"/></name> <operator pos:line="89" pos:column="20">&lt;<pos:position pos:line="89" pos:column="24"/></operator> <name pos:line="89" pos:column="22">gotbytes<pos:position pos:line="89" pos:column="30"/></name></expr>;<pos:position pos:line="89" pos:column="31"/></condition> <incr><expr><name pos:line="89" pos:column="32">ptr<pos:position pos:line="89" pos:column="35"/></name><operator pos:line="89" pos:column="35">++<pos:position pos:line="89" pos:column="37"/></operator></expr><operator pos:line="89" pos:column="37">,<pos:position pos:line="89" pos:column="38"/></operator> <expr><name pos:line="89" pos:column="39">i<pos:position pos:line="89" pos:column="40"/></name><operator pos:line="89" pos:column="40">++<pos:position pos:line="89" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="89" pos:column="43"/></control> <block pos:line="89" pos:column="44">{
        <expr_stmt><expr><name pos:line="90" pos:column="9">perline<pos:position pos:line="90" pos:column="16"/></name><operator pos:line="90" pos:column="16">++<pos:position pos:line="90" pos:column="18"/></operator></expr>;<pos:position pos:line="90" pos:column="19"/></expr_stmt>
        <if pos:line="91" pos:column="9">if<condition pos:line="91" pos:column="11">(<expr><operator pos:line="91" pos:column="12">*<pos:position pos:line="91" pos:column="13"/></operator><name pos:line="91" pos:column="13">ptr<pos:position pos:line="91" pos:column="16"/></name><operator pos:line="91" pos:column="16">==<pos:position pos:line="91" pos:column="18"/></operator><literal type="char" pos:line="91" pos:column="18">'\n'<pos:position pos:line="91" pos:column="22"/></literal></expr>)<pos:position pos:line="91" pos:column="23"/></condition><then pos:line="91" pos:column="23"> <block pos:line="91" pos:column="24">{
          <comment type="block" pos:line="92" pos:column="11">/* a newline is CRLF in ftp-talk, so the CR is ignored as
             the line isn't really terminated until the LF comes */</comment>

          <comment type="block" pos:line="95" pos:column="11">/* output debug output if that is requested */</comment>
<cpp:if pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">if<pos:position pos:line="96" pos:column="4"/></cpp:directive> <expr><call><name pos:line="96" pos:column="5">defined<pos:position pos:line="96" pos:column="12"/></name><argument_list pos:line="96" pos:column="12">(<argument><expr><name pos:line="96" pos:column="13">HAVE_KRB4<pos:position pos:line="96" pos:column="22"/></name></expr></argument>)<pos:position pos:line="96" pos:column="23"/></argument_list></call> <operator pos:line="96" pos:column="24">||<pos:position pos:line="96" pos:column="26"/></operator> <call><name pos:line="96" pos:column="27">defined<pos:position pos:line="96" pos:column="34"/></name><argument_list pos:line="96" pos:column="34">(<argument><expr><name pos:line="96" pos:column="35">HAVE_GSSAPI<pos:position pos:line="96" pos:column="46"/></name></expr></argument>)<pos:position pos:line="96" pos:column="47"/></argument_list></call></expr></cpp:if>
          <if pos:line="97" pos:column="11">if<condition pos:line="97" pos:column="13">(<expr><operator pos:line="97" pos:column="14">!<pos:position pos:line="97" pos:column="15"/></operator><name><name pos:line="97" pos:column="15">conn<pos:position pos:line="97" pos:column="19"/></name><operator pos:line="97" pos:column="19">-&gt;<pos:position pos:line="97" pos:column="24"/></operator><name pos:line="97" pos:column="21">sec_complete<pos:position pos:line="97" pos:column="33"/></name></name></expr>)<pos:position pos:line="97" pos:column="34"/></condition><then pos:line="97" pos:column="34">
<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif<pos:position pos:line="98" pos:column="7"/></cpp:directive></cpp:endif>
          <block type="pseudo"><if pos:line="99" pos:column="11">if<condition pos:line="99" pos:column="13">(<expr><name><name pos:line="99" pos:column="14">data<pos:position pos:line="99" pos:column="18"/></name><operator pos:line="99" pos:column="18">-&gt;<pos:position pos:line="99" pos:column="23"/></operator><name pos:line="99" pos:column="20">set<pos:position pos:line="99" pos:column="23"/></name><operator pos:line="99" pos:column="23">.<pos:position pos:line="99" pos:column="24"/></operator><name pos:line="99" pos:column="24">verbose<pos:position pos:line="99" pos:column="31"/></name></name></expr>)<pos:position pos:line="99" pos:column="32"/></condition><then pos:line="99" pos:column="32">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="13">Curl_debug<pos:position pos:line="100" pos:column="23"/></name><argument_list pos:line="100" pos:column="23">(<argument><expr><name pos:line="100" pos:column="24">data<pos:position pos:line="100" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="30">CURLINFO_HEADER_IN<pos:position pos:line="100" pos:column="48"/></name></expr></argument>,
                       <argument><expr><name><name pos:line="101" pos:column="24">ftpc<pos:position pos:line="101" pos:column="28"/></name><operator pos:line="101" pos:column="28">-&gt;<pos:position pos:line="101" pos:column="33"/></operator><name pos:line="101" pos:column="30">linestart_resp<pos:position pos:line="101" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="46">(<pos:position pos:line="101" pos:column="47"/></operator><name pos:line="101" pos:column="47">size_t<pos:position pos:line="101" pos:column="53"/></name><operator pos:line="101" pos:column="53">)<pos:position pos:line="101" pos:column="54"/></operator><name pos:line="101" pos:column="54">perline<pos:position pos:line="101" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="63">conn<pos:position pos:line="101" pos:column="67"/></name></expr></argument>)<pos:position pos:line="101" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="69"/></expr_stmt></block></then></if></block></then></if>

          <comment type="block" pos:line="103" pos:column="11">/*
           * We pass all response-lines to the callback function registered
           * for "headers". The response lines can be seen as a kind of
           * headers.
           */</comment>
          <expr_stmt><expr><name pos:line="108" pos:column="11">result<pos:position pos:line="108" pos:column="17"/></name> <operator pos:line="108" pos:column="18">=<pos:position pos:line="108" pos:column="19"/></operator> <call><name pos:line="108" pos:column="20">Curl_client_write<pos:position pos:line="108" pos:column="37"/></name><argument_list pos:line="108" pos:column="37">(<argument><expr><name pos:line="108" pos:column="38">conn<pos:position pos:line="108" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="44">CLIENTWRITE_HEADER<pos:position pos:line="108" pos:column="62"/></name></expr></argument>,
                                     <argument><expr><name><name pos:line="109" pos:column="38">ftpc<pos:position pos:line="109" pos:column="42"/></name><operator pos:line="109" pos:column="42">-&gt;<pos:position pos:line="109" pos:column="47"/></operator><name pos:line="109" pos:column="44">linestart_resp<pos:position pos:line="109" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="60">perline<pos:position pos:line="109" pos:column="67"/></name></expr></argument>)<pos:position pos:line="109" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="69"/></expr_stmt>
          <if pos:line="110" pos:column="11">if<condition pos:line="110" pos:column="13">(<expr><name pos:line="110" pos:column="14">result<pos:position pos:line="110" pos:column="20"/></name></expr>)<pos:position pos:line="110" pos:column="21"/></condition><then pos:line="110" pos:column="21">
            <block type="pseudo"><return pos:line="111" pos:column="13">return <expr><name pos:line="111" pos:column="20">result<pos:position pos:line="111" pos:column="26"/></name></expr>;<pos:position pos:line="111" pos:column="27"/></return></block></then></if>

          <if pos:line="113" pos:column="11">if<condition pos:line="113" pos:column="13">(<expr><name pos:line="113" pos:column="14">perline<pos:position pos:line="113" pos:column="21"/></name><operator pos:line="113" pos:column="21">&gt;<pos:position pos:line="113" pos:column="25"/></operator><literal type="number" pos:line="113" pos:column="22">3<pos:position pos:line="113" pos:column="23"/></literal> <operator pos:line="113" pos:column="24">&amp;&amp;<pos:position pos:line="113" pos:column="34"/></operator> <call><name pos:line="113" pos:column="27">LASTLINE<pos:position pos:line="113" pos:column="35"/></name><argument_list pos:line="113" pos:column="35">(<argument><expr><name><name pos:line="113" pos:column="36">ftpc<pos:position pos:line="113" pos:column="40"/></name><operator pos:line="113" pos:column="40">-&gt;<pos:position pos:line="113" pos:column="45"/></operator><name pos:line="113" pos:column="42">linestart_resp<pos:position pos:line="113" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="113" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="58"/></condition><then pos:line="113" pos:column="58"> <block pos:line="113" pos:column="59">{
            <comment type="block" pos:line="114" pos:column="13">/* This is the end of the last line, copy the last line to the
               start of the buffer and zero terminate, for old times sake (and
               krb4)! */</comment>
            <decl_stmt><decl><type><name pos:line="117" pos:column="13">char<pos:position pos:line="117" pos:column="17"/></name> <modifier pos:line="117" pos:column="18">*<pos:position pos:line="117" pos:column="19"/></modifier></type><name pos:line="117" pos:column="19">meow<pos:position pos:line="117" pos:column="23"/></name></decl>;<pos:position pos:line="117" pos:column="24"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">int<pos:position pos:line="118" pos:column="16"/></name></type> <name pos:line="118" pos:column="17">n<pos:position pos:line="118" pos:column="18"/></name></decl>;<pos:position pos:line="118" pos:column="19"/></decl_stmt>
            <for pos:line="119" pos:column="13">for<control pos:line="119" pos:column="16">(<init><expr><name pos:line="119" pos:column="17">meow<pos:position pos:line="119" pos:column="21"/></name><operator pos:line="119" pos:column="21">=<pos:position pos:line="119" pos:column="22"/></operator><name><name pos:line="119" pos:column="22">ftpc<pos:position pos:line="119" pos:column="26"/></name><operator pos:line="119" pos:column="26">-&gt;<pos:position pos:line="119" pos:column="31"/></operator><name pos:line="119" pos:column="28">linestart_resp<pos:position pos:line="119" pos:column="42"/></name></name></expr><operator pos:line="119" pos:column="42">,<pos:position pos:line="119" pos:column="43"/></operator> <expr><name pos:line="119" pos:column="44">n<pos:position pos:line="119" pos:column="45"/></name><operator pos:line="119" pos:column="45">=<pos:position pos:line="119" pos:column="46"/></operator><literal type="number" pos:line="119" pos:column="46">0<pos:position pos:line="119" pos:column="47"/></literal></expr>;<pos:position pos:line="119" pos:column="48"/></init> <condition><expr><name pos:line="119" pos:column="49">meow<pos:position pos:line="119" pos:column="53"/></name><operator pos:line="119" pos:column="53">&lt;<pos:position pos:line="119" pos:column="57"/></operator><name pos:line="119" pos:column="54">ptr<pos:position pos:line="119" pos:column="57"/></name></expr>;<pos:position pos:line="119" pos:column="58"/></condition> <incr><expr><name pos:line="119" pos:column="59">meow<pos:position pos:line="119" pos:column="63"/></name><operator pos:line="119" pos:column="63">++<pos:position pos:line="119" pos:column="65"/></operator></expr><operator pos:line="119" pos:column="65">,<pos:position pos:line="119" pos:column="66"/></operator> <expr><name pos:line="119" pos:column="67">n<pos:position pos:line="119" pos:column="68"/></name><operator pos:line="119" pos:column="68">++<pos:position pos:line="119" pos:column="70"/></operator></expr></incr>)<pos:position pos:line="119" pos:column="71"/></control>
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="120" pos:column="15">buf<pos:position pos:line="120" pos:column="18"/></name><index pos:line="120" pos:column="18">[<expr><name pos:line="120" pos:column="19">n<pos:position pos:line="120" pos:column="20"/></name></expr>]<pos:position pos:line="120" pos:column="21"/></index></name> <operator pos:line="120" pos:column="22">=<pos:position pos:line="120" pos:column="23"/></operator> <operator pos:line="120" pos:column="24">*<pos:position pos:line="120" pos:column="25"/></operator><name pos:line="120" pos:column="25">meow<pos:position pos:line="120" pos:column="29"/></name></expr>;<pos:position pos:line="120" pos:column="30"/></expr_stmt></block></for>
            <expr_stmt><expr><operator pos:line="121" pos:column="13">*<pos:position pos:line="121" pos:column="14"/></operator><name pos:line="121" pos:column="14">meow<pos:position pos:line="121" pos:column="18"/></name><operator pos:line="121" pos:column="18">=<pos:position pos:line="121" pos:column="19"/></operator><literal type="number" pos:line="121" pos:column="19">0<pos:position pos:line="121" pos:column="20"/></literal></expr>;<pos:position pos:line="121" pos:column="21"/></expr_stmt> <comment type="block" pos:line="121" pos:column="22">/* zero terminate */</comment>
            <expr_stmt><expr><name pos:line="122" pos:column="13">keepon<pos:position pos:line="122" pos:column="19"/></name><operator pos:line="122" pos:column="19">=<pos:position pos:line="122" pos:column="20"/></operator><name pos:line="122" pos:column="20">FALSE<pos:position pos:line="122" pos:column="25"/></name></expr>;<pos:position pos:line="122" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="123" pos:column="13">ftpc<pos:position pos:line="123" pos:column="17"/></name><operator pos:line="123" pos:column="17">-&gt;<pos:position pos:line="123" pos:column="22"/></operator><name pos:line="123" pos:column="19">linestart_resp<pos:position pos:line="123" pos:column="33"/></name></name> <operator pos:line="123" pos:column="34">=<pos:position pos:line="123" pos:column="35"/></operator> <name pos:line="123" pos:column="36">ptr<pos:position pos:line="123" pos:column="39"/></name><operator pos:line="123" pos:column="39">+<pos:position pos:line="123" pos:column="40"/></operator><literal type="number" pos:line="123" pos:column="40">1<pos:position pos:line="123" pos:column="41"/></literal></expr>;<pos:position pos:line="123" pos:column="42"/></expr_stmt> <comment type="block" pos:line="123" pos:column="43">/* advance pointer */</comment>
            <expr_stmt><expr><name pos:line="124" pos:column="13">i<pos:position pos:line="124" pos:column="14"/></name><operator pos:line="124" pos:column="14">++<pos:position pos:line="124" pos:column="16"/></operator></expr>;<pos:position pos:line="124" pos:column="17"/></expr_stmt> <comment type="block" pos:line="124" pos:column="18">/* skip this before getting out */</comment>

            <expr_stmt><expr><operator pos:line="126" pos:column="13">*<pos:position pos:line="126" pos:column="14"/></operator><name pos:line="126" pos:column="14">size<pos:position pos:line="126" pos:column="18"/></name> <operator pos:line="126" pos:column="19">=<pos:position pos:line="126" pos:column="20"/></operator> <name><name pos:line="126" pos:column="21">ftpc<pos:position pos:line="126" pos:column="25"/></name><operator pos:line="126" pos:column="25">-&gt;<pos:position pos:line="126" pos:column="30"/></operator><name pos:line="126" pos:column="27">nread_resp<pos:position pos:line="126" pos:column="37"/></name></name></expr>;<pos:position pos:line="126" pos:column="38"/></expr_stmt> <comment type="block" pos:line="126" pos:column="39">/* size of the response */</comment>
            <expr_stmt><expr><name><name pos:line="127" pos:column="13">ftpc<pos:position pos:line="127" pos:column="17"/></name><operator pos:line="127" pos:column="17">-&gt;<pos:position pos:line="127" pos:column="22"/></operator><name pos:line="127" pos:column="19">nread_resp<pos:position pos:line="127" pos:column="29"/></name></name> <operator pos:line="127" pos:column="30">=<pos:position pos:line="127" pos:column="31"/></operator> <literal type="number" pos:line="127" pos:column="32">0<pos:position pos:line="127" pos:column="33"/></literal></expr>;<pos:position pos:line="127" pos:column="34"/></expr_stmt> <comment type="block" pos:line="127" pos:column="35">/* restart */</comment>
            <break pos:line="128" pos:column="13">break;<pos:position pos:line="128" pos:column="19"/></break>
          }<pos:position pos:line="129" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name pos:line="130" pos:column="11">perline<pos:position pos:line="130" pos:column="18"/></name><operator pos:line="130" pos:column="18">=<pos:position pos:line="130" pos:column="19"/></operator><literal type="number" pos:line="130" pos:column="19">0<pos:position pos:line="130" pos:column="20"/></literal></expr>;<pos:position pos:line="130" pos:column="21"/></expr_stmt> <comment type="block" pos:line="130" pos:column="22">/* line starts over here */</comment>
          <expr_stmt><expr><name><name pos:line="131" pos:column="11">ftpc<pos:position pos:line="131" pos:column="15"/></name><operator pos:line="131" pos:column="15">-&gt;<pos:position pos:line="131" pos:column="20"/></operator><name pos:line="131" pos:column="17">linestart_resp<pos:position pos:line="131" pos:column="31"/></name></name> <operator pos:line="131" pos:column="32">=<pos:position pos:line="131" pos:column="33"/></operator> <name pos:line="131" pos:column="34">ptr<pos:position pos:line="131" pos:column="37"/></name><operator pos:line="131" pos:column="37">+<pos:position pos:line="131" pos:column="38"/></operator><literal type="number" pos:line="131" pos:column="38">1<pos:position pos:line="131" pos:column="39"/></literal></expr>;<pos:position pos:line="131" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="132" pos:column="10"/></block></then></if>
      }<pos:position pos:line="133" pos:column="8"/></block></for>

      <if pos:line="135" pos:column="7">if<condition pos:line="135" pos:column="9">(<expr><operator pos:line="135" pos:column="10">!<pos:position pos:line="135" pos:column="11"/></operator><name pos:line="135" pos:column="11">keepon<pos:position pos:line="135" pos:column="17"/></name> <operator pos:line="135" pos:column="18">&amp;&amp;<pos:position pos:line="135" pos:column="28"/></operator> <operator pos:line="135" pos:column="21">(<pos:position pos:line="135" pos:column="22"/></operator><name pos:line="135" pos:column="22">i<pos:position pos:line="135" pos:column="23"/></name> <operator pos:line="135" pos:column="24">!=<pos:position pos:line="135" pos:column="26"/></operator> <name pos:line="135" pos:column="27">gotbytes<pos:position pos:line="135" pos:column="35"/></name><operator pos:line="135" pos:column="35">)<pos:position pos:line="135" pos:column="36"/></operator></expr>)<pos:position pos:line="135" pos:column="37"/></condition><then pos:line="135" pos:column="37"> <block pos:line="135" pos:column="38">{
        <comment type="block" pos:line="136" pos:column="9">/* We found the end of the response lines, but we didn't parse the
           full chunk of data we have read from the server. We therefore need
           to store the rest of the data to be checked on the next invoke as
           it may actually contain another end of response already! */</comment>
        <expr_stmt><expr><name pos:line="140" pos:column="9">clipamount<pos:position pos:line="140" pos:column="19"/></name> <operator pos:line="140" pos:column="20">=<pos:position pos:line="140" pos:column="21"/></operator> <name pos:line="140" pos:column="22">gotbytes<pos:position pos:line="140" pos:column="30"/></name> <operator pos:line="140" pos:column="31">-<pos:position pos:line="140" pos:column="32"/></operator> <name pos:line="140" pos:column="33">i<pos:position pos:line="140" pos:column="34"/></name></expr>;<pos:position pos:line="140" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="141" pos:column="9">restart<pos:position pos:line="141" pos:column="16"/></name> <operator pos:line="141" pos:column="17">=<pos:position pos:line="141" pos:column="18"/></operator> <name pos:line="141" pos:column="19">TRUE<pos:position pos:line="141" pos:column="23"/></name></expr>;<pos:position pos:line="141" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="142" pos:column="8"/></block></then>
      <elseif pos:line="143" pos:column="7">else <if pos:line="143" pos:column="12">if<condition pos:line="143" pos:column="14">(<expr><name pos:line="143" pos:column="15">keepon<pos:position pos:line="143" pos:column="21"/></name></expr>)<pos:position pos:line="143" pos:column="22"/></condition><then pos:line="143" pos:column="22"> <block pos:line="143" pos:column="23">{

        <if pos:line="145" pos:column="9">if<condition pos:line="145" pos:column="11">(<expr><operator pos:line="145" pos:column="12">(<pos:position pos:line="145" pos:column="13"/></operator><name pos:line="145" pos:column="13">perline<pos:position pos:line="145" pos:column="20"/></name> <operator pos:line="145" pos:column="21">==<pos:position pos:line="145" pos:column="23"/></operator> <name pos:line="145" pos:column="24">gotbytes<pos:position pos:line="145" pos:column="32"/></name><operator pos:line="145" pos:column="32">)<pos:position pos:line="145" pos:column="33"/></operator> <operator pos:line="145" pos:column="34">&amp;&amp;<pos:position pos:line="145" pos:column="44"/></operator> <operator pos:line="145" pos:column="37">(<pos:position pos:line="145" pos:column="38"/></operator><name pos:line="145" pos:column="38">gotbytes<pos:position pos:line="145" pos:column="46"/></name> <operator pos:line="145" pos:column="47">&gt;<pos:position pos:line="145" pos:column="51"/></operator> <name pos:line="145" pos:column="49">BUFSIZE<pos:position pos:line="145" pos:column="56"/></name><operator pos:line="145" pos:column="56">/<pos:position pos:line="145" pos:column="57"/></operator><literal type="number" pos:line="145" pos:column="57">2<pos:position pos:line="145" pos:column="58"/></literal><operator pos:line="145" pos:column="58">)<pos:position pos:line="145" pos:column="59"/></operator></expr>)<pos:position pos:line="145" pos:column="60"/></condition><then pos:line="145" pos:column="60"> <block pos:line="145" pos:column="61">{
          <comment type="block" pos:line="146" pos:column="11">/* We got an excessive line without newlines and we need to deal
             with it. First, check if it seems to start with a valid status
             code and then we keep just that in the line cache. Then throw
             away the rest. */</comment>
          <expr_stmt><expr><call><name pos:line="150" pos:column="11">infof<pos:position pos:line="150" pos:column="16"/></name><argument_list pos:line="150" pos:column="16">(<argument><expr><name pos:line="150" pos:column="17">data<pos:position pos:line="150" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="23">"Excessive FTP response line length received, %zd bytes."<pos:position pos:line="150" pos:column="80"/></literal>
                <literal type="string" pos:line="151" pos:column="17">" Stripping\n"<pos:position pos:line="151" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="151" pos:column="33">gotbytes<pos:position pos:line="151" pos:column="41"/></name></expr></argument>)<pos:position pos:line="151" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><name pos:line="152" pos:column="11">restart<pos:position pos:line="152" pos:column="18"/></name> <operator pos:line="152" pos:column="19">=<pos:position pos:line="152" pos:column="20"/></operator> <name pos:line="152" pos:column="21">TRUE<pos:position pos:line="152" pos:column="25"/></name></expr>;<pos:position pos:line="152" pos:column="26"/></expr_stmt>
          <if pos:line="153" pos:column="11">if<condition pos:line="153" pos:column="13">(<expr><call><name pos:line="153" pos:column="14">STATUSCODE<pos:position pos:line="153" pos:column="24"/></name><argument_list pos:line="153" pos:column="24">(<argument><expr><name><name pos:line="153" pos:column="25">ftpc<pos:position pos:line="153" pos:column="29"/></name><operator pos:line="153" pos:column="29">-&gt;<pos:position pos:line="153" pos:column="34"/></operator><name pos:line="153" pos:column="31">linestart_resp<pos:position pos:line="153" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="153" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="153" pos:column="47"/></condition><then pos:line="153" pos:column="47">
            <comment type="block" pos:line="154" pos:column="13">/* we copy 4 bytes since after the three-digit number there is a
               dash or a space and it is significant */</comment>
            <block type="pseudo"><expr_stmt><expr><name pos:line="156" pos:column="13">clipamount<pos:position pos:line="156" pos:column="23"/></name> <operator pos:line="156" pos:column="24">=<pos:position pos:line="156" pos:column="25"/></operator> <literal type="number" pos:line="156" pos:column="26">4<pos:position pos:line="156" pos:column="27"/></literal></expr>;<pos:position pos:line="156" pos:column="28"/></expr_stmt></block></then></if>
        }<pos:position pos:line="157" pos:column="10"/></block></then>
        <elseif pos:line="158" pos:column="9">else <if pos:line="158" pos:column="14">if<condition pos:line="158" pos:column="16">(<expr><name pos:line="158" pos:column="17">perline<pos:position pos:line="158" pos:column="24"/></name> <operator pos:line="158" pos:column="25">&amp;&amp;<pos:position pos:line="158" pos:column="35"/></operator> <operator pos:line="158" pos:column="28">(<pos:position pos:line="158" pos:column="29"/></operator><name><name pos:line="158" pos:column="29">ftpc<pos:position pos:line="158" pos:column="33"/></name><operator pos:line="158" pos:column="33">-&gt;<pos:position pos:line="158" pos:column="38"/></operator><name pos:line="158" pos:column="35">nread_resp<pos:position pos:line="158" pos:column="45"/></name></name> <operator pos:line="158" pos:column="46">&gt;<pos:position pos:line="158" pos:column="50"/></operator> <name pos:line="158" pos:column="48">BUFSIZE<pos:position pos:line="158" pos:column="55"/></name><operator pos:line="158" pos:column="55">/<pos:position pos:line="158" pos:column="56"/></operator><literal type="number" pos:line="158" pos:column="56">2<pos:position pos:line="158" pos:column="57"/></literal><operator pos:line="158" pos:column="57">)<pos:position pos:line="158" pos:column="58"/></operator></expr>)<pos:position pos:line="158" pos:column="59"/></condition><then pos:line="158" pos:column="59"> <block pos:line="158" pos:column="60">{
          <comment type="block" pos:line="159" pos:column="11">/* We got a large chunk of data and there's still trailing data to
             take care of, so we put that part in the "cache" and restart */</comment>
          <expr_stmt><expr><name pos:line="161" pos:column="11">clipamount<pos:position pos:line="161" pos:column="21"/></name> <operator pos:line="161" pos:column="22">=<pos:position pos:line="161" pos:column="23"/></operator> <name pos:line="161" pos:column="24">perline<pos:position pos:line="161" pos:column="31"/></name></expr>;<pos:position pos:line="161" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><name pos:line="162" pos:column="11">restart<pos:position pos:line="162" pos:column="18"/></name> <operator pos:line="162" pos:column="19">=<pos:position pos:line="162" pos:column="20"/></operator> <name pos:line="162" pos:column="21">TRUE<pos:position pos:line="162" pos:column="25"/></name></expr>;<pos:position pos:line="162" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="163" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="164" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="165" pos:column="7">else <if pos:line="165" pos:column="12">if<condition pos:line="165" pos:column="14">(<expr><name pos:line="165" pos:column="15">i<pos:position pos:line="165" pos:column="16"/></name> <operator pos:line="165" pos:column="17">==<pos:position pos:line="165" pos:column="19"/></operator> <name pos:line="165" pos:column="20">gotbytes<pos:position pos:line="165" pos:column="28"/></name></expr>)<pos:position pos:line="165" pos:column="29"/></condition><then pos:line="165" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><name pos:line="166" pos:column="9">restart<pos:position pos:line="166" pos:column="16"/></name> <operator pos:line="166" pos:column="17">=<pos:position pos:line="166" pos:column="18"/></operator> <name pos:line="166" pos:column="19">TRUE<pos:position pos:line="166" pos:column="23"/></name></expr>;<pos:position pos:line="166" pos:column="24"/></expr_stmt></block></then></if></elseif></if>

      <if pos:line="168" pos:column="7">if<condition pos:line="168" pos:column="9">(<expr><name pos:line="168" pos:column="10">clipamount<pos:position pos:line="168" pos:column="20"/></name></expr>)<pos:position pos:line="168" pos:column="21"/></condition><then pos:line="168" pos:column="21"> <block pos:line="168" pos:column="22">{
        <expr_stmt><expr><name><name pos:line="169" pos:column="9">ftpc<pos:position pos:line="169" pos:column="13"/></name><operator pos:line="169" pos:column="13">-&gt;<pos:position pos:line="169" pos:column="18"/></operator><name pos:line="169" pos:column="15">cache_size<pos:position pos:line="169" pos:column="25"/></name></name> <operator pos:line="169" pos:column="26">=<pos:position pos:line="169" pos:column="27"/></operator> <name pos:line="169" pos:column="28">clipamount<pos:position pos:line="169" pos:column="38"/></name></expr>;<pos:position pos:line="169" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="170" pos:column="9">ftpc<pos:position pos:line="170" pos:column="13"/></name><operator pos:line="170" pos:column="13">-&gt;<pos:position pos:line="170" pos:column="18"/></operator><name pos:line="170" pos:column="15">cache<pos:position pos:line="170" pos:column="20"/></name></name> <operator pos:line="170" pos:column="21">=<pos:position pos:line="170" pos:column="22"/></operator> <operator pos:line="170" pos:column="23">(<pos:position pos:line="170" pos:column="24"/></operator><name pos:line="170" pos:column="24">char<pos:position pos:line="170" pos:column="28"/></name> <operator pos:line="170" pos:column="29">*<pos:position pos:line="170" pos:column="30"/></operator><operator pos:line="170" pos:column="30">)<pos:position pos:line="170" pos:column="31"/></operator><call><name pos:line="170" pos:column="31">malloc<pos:position pos:line="170" pos:column="37"/></name><argument_list pos:line="170" pos:column="37">(<argument><expr><operator pos:line="170" pos:column="38">(<pos:position pos:line="170" pos:column="39"/></operator><name pos:line="170" pos:column="39">int<pos:position pos:line="170" pos:column="42"/></name><operator pos:line="170" pos:column="42">)<pos:position pos:line="170" pos:column="43"/></operator><name><name pos:line="170" pos:column="43">ftpc<pos:position pos:line="170" pos:column="47"/></name><operator pos:line="170" pos:column="47">-&gt;<pos:position pos:line="170" pos:column="52"/></operator><name pos:line="170" pos:column="49">cache_size<pos:position pos:line="170" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="170" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="61"/></expr_stmt>
        <if pos:line="171" pos:column="9">if<condition pos:line="171" pos:column="11">(<expr><name><name pos:line="171" pos:column="12">ftpc<pos:position pos:line="171" pos:column="16"/></name><operator pos:line="171" pos:column="16">-&gt;<pos:position pos:line="171" pos:column="21"/></operator><name pos:line="171" pos:column="18">cache<pos:position pos:line="171" pos:column="23"/></name></name></expr>)<pos:position pos:line="171" pos:column="24"/></condition><then pos:line="171" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="172" pos:column="11">memcpy<pos:position pos:line="172" pos:column="17"/></name><argument_list pos:line="172" pos:column="17">(<argument><expr><name><name pos:line="172" pos:column="18">ftpc<pos:position pos:line="172" pos:column="22"/></name><operator pos:line="172" pos:column="22">-&gt;<pos:position pos:line="172" pos:column="27"/></operator><name pos:line="172" pos:column="24">cache<pos:position pos:line="172" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="172" pos:column="31">ftpc<pos:position pos:line="172" pos:column="35"/></name><operator pos:line="172" pos:column="35">-&gt;<pos:position pos:line="172" pos:column="40"/></operator><name pos:line="172" pos:column="37">linestart_resp<pos:position pos:line="172" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="172" pos:column="53">(<pos:position pos:line="172" pos:column="54"/></operator><name pos:line="172" pos:column="54">int<pos:position pos:line="172" pos:column="57"/></name><operator pos:line="172" pos:column="57">)<pos:position pos:line="172" pos:column="58"/></operator><name><name pos:line="172" pos:column="58">ftpc<pos:position pos:line="172" pos:column="62"/></name><operator pos:line="172" pos:column="62">-&gt;<pos:position pos:line="172" pos:column="67"/></operator><name pos:line="172" pos:column="64">cache_size<pos:position pos:line="172" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="172" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="76"/></expr_stmt></block></then>
        <else pos:line="173" pos:column="9">else
          <block type="pseudo"><return pos:line="174" pos:column="11">return <expr><name pos:line="174" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="174" pos:column="37"/></name></expr>;<pos:position pos:line="174" pos:column="38"/></return></block></else></if>
      }<pos:position pos:line="175" pos:column="8"/></block></then></if>
      <if pos:line="176" pos:column="7">if<condition pos:line="176" pos:column="9">(<expr><name pos:line="176" pos:column="10">restart<pos:position pos:line="176" pos:column="17"/></name></expr>)<pos:position pos:line="176" pos:column="18"/></condition><then pos:line="176" pos:column="18"> <block pos:line="176" pos:column="19">{
        <comment type="block" pos:line="177" pos:column="9">/* now reset a few variables to start over nicely from the start of
           the big buffer */</comment>
        <expr_stmt><expr><name><name pos:line="179" pos:column="9">ftpc<pos:position pos:line="179" pos:column="13"/></name><operator pos:line="179" pos:column="13">-&gt;<pos:position pos:line="179" pos:column="18"/></operator><name pos:line="179" pos:column="15">nread_resp<pos:position pos:line="179" pos:column="25"/></name></name> <operator pos:line="179" pos:column="26">=<pos:position pos:line="179" pos:column="27"/></operator> <literal type="number" pos:line="179" pos:column="28">0<pos:position pos:line="179" pos:column="29"/></literal></expr>;<pos:position pos:line="179" pos:column="30"/></expr_stmt> <comment type="block" pos:line="179" pos:column="31">/* start over from scratch in the buffer */</comment>
        <expr_stmt><expr><name pos:line="180" pos:column="9">ptr<pos:position pos:line="180" pos:column="12"/></name> <operator pos:line="180" pos:column="13">=<pos:position pos:line="180" pos:column="14"/></operator> <name><name pos:line="180" pos:column="15">ftpc<pos:position pos:line="180" pos:column="19"/></name><operator pos:line="180" pos:column="19">-&gt;<pos:position pos:line="180" pos:column="24"/></operator><name pos:line="180" pos:column="21">linestart_resp<pos:position pos:line="180" pos:column="35"/></name></name> <operator pos:line="180" pos:column="36">=<pos:position pos:line="180" pos:column="37"/></operator> <name pos:line="180" pos:column="38">buf<pos:position pos:line="180" pos:column="41"/></name></expr>;<pos:position pos:line="180" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="181" pos:column="9">perline<pos:position pos:line="181" pos:column="16"/></name> <operator pos:line="181" pos:column="17">=<pos:position pos:line="181" pos:column="18"/></operator> <literal type="number" pos:line="181" pos:column="19">0<pos:position pos:line="181" pos:column="20"/></literal></expr>;<pos:position pos:line="181" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="182" pos:column="8"/></block></then></if>

    }<pos:position pos:line="184" pos:column="6"/></block></else></if> <comment type="block" pos:line="184" pos:column="7">/* there was data */</comment>

  }<pos:position pos:line="186" pos:column="4"/></block></while> <comment type="block" pos:line="186" pos:column="5">/* while there's buffer left and loop is requested */</comment>

  <if pos:line="188" pos:column="3">if<condition pos:line="188" pos:column="5">(<expr><operator pos:line="188" pos:column="6">!<pos:position pos:line="188" pos:column="7"/></operator><name pos:line="188" pos:column="7">result<pos:position pos:line="188" pos:column="13"/></name></expr>)<pos:position pos:line="188" pos:column="14"/></condition><then pos:line="188" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><name pos:line="189" pos:column="5">code<pos:position pos:line="189" pos:column="9"/></name> <operator pos:line="189" pos:column="10">=<pos:position pos:line="189" pos:column="11"/></operator> <call><name pos:line="189" pos:column="12">atoi<pos:position pos:line="189" pos:column="16"/></name><argument_list pos:line="189" pos:column="16">(<argument><expr><name pos:line="189" pos:column="17">buf<pos:position pos:line="189" pos:column="20"/></name></expr></argument>)<pos:position pos:line="189" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="22"/></expr_stmt></block></then></if>

<cpp:if pos:line="191" pos:column="1">#<cpp:directive pos:line="191" pos:column="2">if<pos:position pos:line="191" pos:column="4"/></cpp:directive> <expr><call><name pos:line="191" pos:column="5">defined<pos:position pos:line="191" pos:column="12"/></name><argument_list pos:line="191" pos:column="12">(<argument><expr><name pos:line="191" pos:column="13">HAVE_KRB4<pos:position pos:line="191" pos:column="22"/></name></expr></argument>)<pos:position pos:line="191" pos:column="23"/></argument_list></call> <operator pos:line="191" pos:column="24">||<pos:position pos:line="191" pos:column="26"/></operator> <call><name pos:line="191" pos:column="27">defined<pos:position pos:line="191" pos:column="34"/></name><argument_list pos:line="191" pos:column="34">(<argument><expr><name pos:line="191" pos:column="35">HAVE_GSSAPI<pos:position pos:line="191" pos:column="46"/></name></expr></argument>)<pos:position pos:line="191" pos:column="47"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="192" pos:column="3">/* handle the security-oriented responses 6xx ***/</comment>
  <comment type="block" pos:line="193" pos:column="3">/* FIXME: some errorchecking perhaps... ***/</comment>
  <switch pos:line="194" pos:column="3">switch<condition pos:line="194" pos:column="9">(<expr><name pos:line="194" pos:column="10">code<pos:position pos:line="194" pos:column="14"/></name></expr>)<pos:position pos:line="194" pos:column="15"/></condition> <block pos:line="194" pos:column="16">{
  <case pos:line="195" pos:column="3">case <expr><literal type="number" pos:line="195" pos:column="8">631<pos:position pos:line="195" pos:column="11"/></literal></expr>:<pos:position pos:line="195" pos:column="12"/></case>
    <expr_stmt><expr><name pos:line="196" pos:column="5">code<pos:position pos:line="196" pos:column="9"/></name> <operator pos:line="196" pos:column="10">=<pos:position pos:line="196" pos:column="11"/></operator> <call><name pos:line="196" pos:column="12">Curl_sec_read_msg<pos:position pos:line="196" pos:column="29"/></name><argument_list pos:line="196" pos:column="29">(<argument><expr><name pos:line="196" pos:column="30">conn<pos:position pos:line="196" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="36">buf<pos:position pos:line="196" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="41">prot_safe<pos:position pos:line="196" pos:column="50"/></name></expr></argument>)<pos:position pos:line="196" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="52"/></expr_stmt>
    <break pos:line="197" pos:column="5">break;<pos:position pos:line="197" pos:column="11"/></break>
  <case pos:line="198" pos:column="3">case <expr><literal type="number" pos:line="198" pos:column="8">632<pos:position pos:line="198" pos:column="11"/></literal></expr>:<pos:position pos:line="198" pos:column="12"/></case>
    <expr_stmt><expr><name pos:line="199" pos:column="5">code<pos:position pos:line="199" pos:column="9"/></name> <operator pos:line="199" pos:column="10">=<pos:position pos:line="199" pos:column="11"/></operator> <call><name pos:line="199" pos:column="12">Curl_sec_read_msg<pos:position pos:line="199" pos:column="29"/></name><argument_list pos:line="199" pos:column="29">(<argument><expr><name pos:line="199" pos:column="30">conn<pos:position pos:line="199" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="36">buf<pos:position pos:line="199" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="41">prot_private<pos:position pos:line="199" pos:column="53"/></name></expr></argument>)<pos:position pos:line="199" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="55"/></expr_stmt>
    <break pos:line="200" pos:column="5">break;<pos:position pos:line="200" pos:column="11"/></break>
  <case pos:line="201" pos:column="3">case <expr><literal type="number" pos:line="201" pos:column="8">633<pos:position pos:line="201" pos:column="11"/></literal></expr>:<pos:position pos:line="201" pos:column="12"/></case>
    <expr_stmt><expr><name pos:line="202" pos:column="5">code<pos:position pos:line="202" pos:column="9"/></name> <operator pos:line="202" pos:column="10">=<pos:position pos:line="202" pos:column="11"/></operator> <call><name pos:line="202" pos:column="12">Curl_sec_read_msg<pos:position pos:line="202" pos:column="29"/></name><argument_list pos:line="202" pos:column="29">(<argument><expr><name pos:line="202" pos:column="30">conn<pos:position pos:line="202" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="36">buf<pos:position pos:line="202" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="41">prot_confidential<pos:position pos:line="202" pos:column="58"/></name></expr></argument>)<pos:position pos:line="202" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="60"/></expr_stmt>
    <break pos:line="203" pos:column="5">break;<pos:position pos:line="203" pos:column="11"/></break>
  <default pos:line="204" pos:column="3">default:<pos:position pos:line="204" pos:column="11"/></default>
    <comment type="block" pos:line="205" pos:column="5">/* normal ftp stuff we pass through! */</comment>
    <break pos:line="206" pos:column="5">break;<pos:position pos:line="206" pos:column="11"/></break>
  }<pos:position pos:line="207" pos:column="4"/></block></switch>
<cpp:endif pos:line="208" pos:column="1">#<cpp:directive pos:line="208" pos:column="2">endif<pos:position pos:line="208" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><operator pos:line="210" pos:column="3">*<pos:position pos:line="210" pos:column="4"/></operator><name pos:line="210" pos:column="4">ftpcode<pos:position pos:line="210" pos:column="11"/></name><operator pos:line="210" pos:column="11">=<pos:position pos:line="210" pos:column="12"/></operator><name pos:line="210" pos:column="12">code<pos:position pos:line="210" pos:column="16"/></name></expr>;<pos:position pos:line="210" pos:column="17"/></expr_stmt> <comment type="block" pos:line="210" pos:column="18">/* return the initial number like this */</comment>

  <comment type="block" pos:line="212" pos:column="3">/* store the latest code for later retrieval */</comment>
  <expr_stmt><expr><name><name pos:line="213" pos:column="3">conn<pos:position pos:line="213" pos:column="7"/></name><operator pos:line="213" pos:column="7">-&gt;<pos:position pos:line="213" pos:column="12"/></operator><name pos:line="213" pos:column="9">data<pos:position pos:line="213" pos:column="13"/></name><operator pos:line="213" pos:column="13">-&gt;<pos:position pos:line="213" pos:column="18"/></operator><name pos:line="213" pos:column="15">info<pos:position pos:line="213" pos:column="19"/></name><operator pos:line="213" pos:column="19">.<pos:position pos:line="213" pos:column="20"/></operator><name pos:line="213" pos:column="20">httpcode<pos:position pos:line="213" pos:column="28"/></name></name><operator pos:line="213" pos:column="28">=<pos:position pos:line="213" pos:column="29"/></operator><name pos:line="213" pos:column="29">code<pos:position pos:line="213" pos:column="33"/></name></expr>;<pos:position pos:line="213" pos:column="34"/></expr_stmt>

  <return pos:line="215" pos:column="3">return <expr><name pos:line="215" pos:column="10">result<pos:position pos:line="215" pos:column="16"/></name></expr>;<pos:position pos:line="215" pos:column="17"/></return>
}<pos:position pos:line="216" pos:column="2"/></block></function></unit>
