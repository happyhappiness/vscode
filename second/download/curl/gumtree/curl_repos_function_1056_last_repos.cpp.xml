<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1056_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">readwrite_data<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">Curl_easy<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">data<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                               <parameter><decl><type><name><name pos:line="2" pos:column="32">struct<pos:position pos:line="2" pos:column="38"/></name> <name pos:line="2" pos:column="39">connectdata<pos:position pos:line="2" pos:column="50"/></name></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">conn<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
                               <parameter><decl><type><name><name pos:line="3" pos:column="32">struct<pos:position pos:line="3" pos:column="38"/></name> <name pos:line="3" pos:column="39">SingleRequest<pos:position pos:line="3" pos:column="52"/></name></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">k<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="4" pos:column="32">int<pos:position pos:line="4" pos:column="35"/></name> <modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier></type><name pos:line="4" pos:column="37">didwhat<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="46">bool<pos:position pos:line="4" pos:column="50"/></name> <modifier pos:line="4" pos:column="51">*<pos:position pos:line="4" pos:column="52"/></modifier></type><name pos:line="4" pos:column="52">done<pos:position pos:line="4" pos:column="56"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="5" pos:column="32">bool<pos:position pos:line="5" pos:column="36"/></name> <modifier pos:line="5" pos:column="37">*<pos:position pos:line="5" pos:column="38"/></modifier></type><name pos:line="5" pos:column="38">comeback<pos:position pos:line="5" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="47"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLcode<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">result<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><name pos:line="7" pos:column="21">CURLE_OK<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">ssize_t<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">nread<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt> <comment type="block" pos:line="8" pos:column="18">/* number of bytes read */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">excess<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt> <comment type="block" pos:line="9" pos:column="22">/* excess bytes read */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">is_empty_data<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><name pos:line="10" pos:column="24">FALSE<pos:position pos:line="10" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">bool<pos:position pos:line="11" pos:column="7"/></name></type> <name pos:line="11" pos:column="8">readmore<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><name pos:line="11" pos:column="19">FALSE<pos:position pos:line="11" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt> <comment type="block" pos:line="11" pos:column="26">/* used by RTP to signal for more data */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">maxloops<pos:position pos:line="12" pos:column="15"/></name> <init pos:line="12" pos:column="16">= <expr><literal type="number" pos:line="12" pos:column="18">100<pos:position pos:line="12" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="14" pos:column="3">*<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">done<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <name pos:line="14" pos:column="11">FALSE<pos:position pos:line="14" pos:column="16"/></name></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="15" pos:column="3">*<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">comeback<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">FALSE<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* This is where we loop until we have read everything there is to
     read or we get a CURLE_AGAIN */</comment>
  <do pos:line="19" pos:column="3">do <block pos:line="19" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">size_t<pos:position pos:line="20" pos:column="11"/></name></type> <name pos:line="20" pos:column="12">buffersize<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><name><name pos:line="20" pos:column="25">data<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">-&gt;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="31">set<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">.<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">buffer_size<pos:position pos:line="20" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="20" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">size_t<pos:position pos:line="21" pos:column="11"/></name></type> <name pos:line="21" pos:column="12">bytestoread<pos:position pos:line="21" pos:column="23"/></name> <init pos:line="21" pos:column="24">= <expr><name pos:line="21" pos:column="26">buffersize<pos:position pos:line="21" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="37"/></decl_stmt>

    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(
<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><call><name pos:line="24" pos:column="5">defined<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">USE_NGHTTP2<pos:position pos:line="24" pos:column="24"/></name></expr></argument>)<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr></cpp:if>
       <comment type="block" pos:line="25" pos:column="8">/* For HTTP/2, read data without caring about the content
          length. This is safe because body in HTTP/2 is always
          segmented thanks to its framing layer. Meanwhile, we have to
          call Curl_read to ensure that http2_handle_stream_close is
          called when we read all incoming bytes for a particular
          stream. */</comment>
       <expr><operator pos:line="31" pos:column="8">!<pos:position pos:line="31" pos:column="9"/></operator><operator pos:line="31" pos:column="9">(<pos:position pos:line="31" pos:column="10"/></operator><operator pos:line="31" pos:column="10">(<pos:position pos:line="31" pos:column="11"/></operator><name><name pos:line="31" pos:column="11">conn<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">-&gt;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="17">handler<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">-&gt;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="26">protocol<pos:position pos:line="31" pos:column="34"/></name></name> <operator pos:line="31" pos:column="35">&amp;<pos:position pos:line="31" pos:column="40"/></operator> <name pos:line="31" pos:column="37">PROTO_FAMILY_HTTP<pos:position pos:line="31" pos:column="54"/></name><operator pos:line="31" pos:column="54">)<pos:position pos:line="31" pos:column="55"/></operator> <operator pos:line="31" pos:column="56">&amp;&amp;<pos:position pos:line="31" pos:column="66"/></operator>
         <name><name pos:line="32" pos:column="10">conn<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">httpversion<pos:position pos:line="32" pos:column="27"/></name></name> <operator pos:line="32" pos:column="28">==<pos:position pos:line="32" pos:column="30"/></operator> <literal type="number" pos:line="32" pos:column="31">20<pos:position pos:line="32" pos:column="33"/></literal><operator pos:line="32" pos:column="33">)<pos:position pos:line="32" pos:column="34"/></operator> <operator pos:line="32" pos:column="35">&amp;&amp;<pos:position pos:line="32" pos:column="45"/></operator>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
       <name><name pos:line="34" pos:column="8">k<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">size<pos:position pos:line="34" pos:column="15"/></name></name> <operator pos:line="34" pos:column="16">!=<pos:position pos:line="34" pos:column="18"/></operator> <operator pos:line="34" pos:column="19">-<pos:position pos:line="34" pos:column="20"/></operator><literal type="number" pos:line="34" pos:column="20">1<pos:position pos:line="34" pos:column="21"/></literal> <operator pos:line="34" pos:column="22">&amp;&amp;<pos:position pos:line="34" pos:column="32"/></operator> <operator pos:line="34" pos:column="25">!<pos:position pos:line="34" pos:column="26"/></operator><name><name pos:line="34" pos:column="26">k<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">header<pos:position pos:line="34" pos:column="35"/></name></name></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36"> <block pos:line="34" pos:column="37">{
      <comment type="block" pos:line="35" pos:column="7">/* make sure we don't read "too much" if we can help it since we
         might be pipelining and then someone else might want to read what
         follows! */</comment>
      <decl_stmt><decl><type><name pos:line="38" pos:column="7">curl_off_t<pos:position pos:line="38" pos:column="17"/></name></type> <name pos:line="38" pos:column="18">totalleft<pos:position pos:line="38" pos:column="27"/></name> <init pos:line="38" pos:column="28">= <expr><name><name pos:line="38" pos:column="30">k<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">-&gt;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="33">size<pos:position pos:line="38" pos:column="37"/></name></name> <operator pos:line="38" pos:column="38">-<pos:position pos:line="38" pos:column="39"/></operator> <name><name pos:line="38" pos:column="40">k<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">-&gt;<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="43">bytecount<pos:position pos:line="38" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="38" pos:column="53"/></decl_stmt>
      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">(<expr><name pos:line="39" pos:column="10">totalleft<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">&lt;<pos:position pos:line="39" pos:column="24"/></operator> <operator pos:line="39" pos:column="22">(<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="23">curl_off_t<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">)<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="34">bytestoread<pos:position pos:line="39" pos:column="45"/></name></expr>)<pos:position pos:line="39" pos:column="46"/></condition><then pos:line="39" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="9">bytestoread<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <operator pos:line="40" pos:column="23">(<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">size_t<pos:position pos:line="40" pos:column="30"/></name><operator pos:line="40" pos:column="30">)<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="31">totalleft<pos:position pos:line="40" pos:column="40"/></name></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><name pos:line="43" pos:column="8">bytestoread<pos:position pos:line="43" pos:column="19"/></name></expr>)<pos:position pos:line="43" pos:column="20"/></condition><then pos:line="43" pos:column="20"> <block pos:line="43" pos:column="21">{
      <comment type="block" pos:line="44" pos:column="7">/* receive data from the network! */</comment>
      <expr_stmt><expr><name pos:line="45" pos:column="7">result<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <call><name pos:line="45" pos:column="16">Curl_read<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">conn<pos:position pos:line="45" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="32">conn<pos:position pos:line="45" pos:column="36"/></name><operator pos:line="45" pos:column="36">-&gt;<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="38">sockfd<pos:position pos:line="45" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="46">k<pos:position pos:line="45" pos:column="47"/></name><operator pos:line="45" pos:column="47">-&gt;<pos:position pos:line="45" pos:column="52"/></operator><name pos:line="45" pos:column="49">buf<pos:position pos:line="45" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="54">bytestoread<pos:position pos:line="45" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="67">&amp;<pos:position pos:line="45" pos:column="72"/></operator><name pos:line="45" pos:column="68">nread<pos:position pos:line="45" pos:column="73"/></name></expr></argument>)<pos:position pos:line="45" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="75"/></expr_stmt>

      <comment type="block" pos:line="47" pos:column="7">/* read would've blocked */</comment>
      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><name pos:line="48" pos:column="10">CURLE_AGAIN<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">==<pos:position pos:line="48" pos:column="24"/></operator> <name pos:line="48" pos:column="25">result<pos:position pos:line="48" pos:column="31"/></name></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32">
        <block type="pseudo"><break pos:line="49" pos:column="9">break;<pos:position pos:line="49" pos:column="15"/></break></block></then></if> <comment type="block" pos:line="49" pos:column="16">/* get out of loop */</comment>

      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><name pos:line="51" pos:column="10">result<pos:position pos:line="51" pos:column="16"/></name><operator pos:line="51" pos:column="16">&gt;<pos:position pos:line="51" pos:column="20"/></operator><literal type="number" pos:line="51" pos:column="17">0<pos:position pos:line="51" pos:column="18"/></literal></expr>)<pos:position pos:line="51" pos:column="19"/></condition><then pos:line="51" pos:column="19">
        <block type="pseudo"><return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">result<pos:position pos:line="52" pos:column="22"/></name></expr>;<pos:position pos:line="52" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="53" pos:column="6"/></block></then>
    <else pos:line="54" pos:column="5">else <block pos:line="54" pos:column="10">{
      <comment type="block" pos:line="55" pos:column="7">/* read nothing but since we wanted nothing we consider this an OK
         situation to proceed from */</comment>
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">DEBUGF<pos:position pos:line="57" pos:column="13"/></name><argument_list pos:line="57" pos:column="13">(<argument><expr><call><name pos:line="57" pos:column="14">infof<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><name pos:line="57" pos:column="20">data<pos:position pos:line="57" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="26">"readwrite_data: we're done!\n"<pos:position pos:line="57" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><name pos:line="58" pos:column="7">nread<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <literal type="number" pos:line="58" pos:column="15">0<pos:position pos:line="58" pos:column="16"/></literal></expr>;<pos:position pos:line="58" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></else></if>

    <if pos:line="61" pos:column="5">if<condition pos:line="61" pos:column="7">(<expr><operator pos:line="61" pos:column="8">(<pos:position pos:line="61" pos:column="9"/></operator><name><name pos:line="61" pos:column="9">k<pos:position pos:line="61" pos:column="10"/></name><operator pos:line="61" pos:column="10">-&gt;<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="12">bytecount<pos:position pos:line="61" pos:column="21"/></name></name> <operator pos:line="61" pos:column="22">==<pos:position pos:line="61" pos:column="24"/></operator> <literal type="number" pos:line="61" pos:column="25">0<pos:position pos:line="61" pos:column="26"/></literal><operator pos:line="61" pos:column="26">)<pos:position pos:line="61" pos:column="27"/></operator> <operator pos:line="61" pos:column="28">&amp;&amp;<pos:position pos:line="61" pos:column="38"/></operator> <operator pos:line="61" pos:column="31">(<pos:position pos:line="61" pos:column="32"/></operator><name><name pos:line="61" pos:column="32">k<pos:position pos:line="61" pos:column="33"/></name><operator pos:line="61" pos:column="33">-&gt;<pos:position pos:line="61" pos:column="38"/></operator><name pos:line="61" pos:column="35">writebytecount<pos:position pos:line="61" pos:column="49"/></name></name> <operator pos:line="61" pos:column="50">==<pos:position pos:line="61" pos:column="52"/></operator> <literal type="number" pos:line="61" pos:column="53">0<pos:position pos:line="61" pos:column="54"/></literal><operator pos:line="61" pos:column="54">)<pos:position pos:line="61" pos:column="55"/></operator></expr>)<pos:position pos:line="61" pos:column="56"/></condition><then pos:line="61" pos:column="56"> <block pos:line="61" pos:column="57">{
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">Curl_pgrsTime<pos:position pos:line="62" pos:column="20"/></name><argument_list pos:line="62" pos:column="20">(<argument><expr><name pos:line="62" pos:column="21">data<pos:position pos:line="62" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="27">TIMER_STARTTRANSFER<pos:position pos:line="62" pos:column="46"/></name></expr></argument>)<pos:position pos:line="62" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="48"/></expr_stmt>
      <if pos:line="63" pos:column="7">if<condition pos:line="63" pos:column="9">(<expr><name><name pos:line="63" pos:column="10">k<pos:position pos:line="63" pos:column="11"/></name><operator pos:line="63" pos:column="11">-&gt;<pos:position pos:line="63" pos:column="16"/></operator><name pos:line="63" pos:column="13">exp100<pos:position pos:line="63" pos:column="19"/></name></name> <operator pos:line="63" pos:column="20">&gt;<pos:position pos:line="63" pos:column="24"/></operator> <name pos:line="63" pos:column="22">EXP100_SEND_DATA<pos:position pos:line="63" pos:column="38"/></name></expr>)<pos:position pos:line="63" pos:column="39"/></condition><then pos:line="63" pos:column="39">
        <comment type="block" pos:line="64" pos:column="9">/* set time stamp to compare with when waiting for the 100 */</comment>
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="65" pos:column="9">k<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">start100<pos:position pos:line="65" pos:column="20"/></name></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <call><name pos:line="65" pos:column="23">Curl_tvnow<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">()<pos:position pos:line="65" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="68" pos:column="5">*<pos:position pos:line="68" pos:column="6"/></operator><name pos:line="68" pos:column="6">didwhat<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">|=<pos:position pos:line="68" pos:column="16"/></operator> <name pos:line="68" pos:column="17">KEEP_RECV<pos:position pos:line="68" pos:column="26"/></name></expr>;<pos:position pos:line="68" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="69" pos:column="5">/* indicates data of zero size, i.e. empty file */</comment>
    <expr_stmt><expr><name pos:line="70" pos:column="5">is_empty_data<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <ternary><condition><expr><operator pos:line="70" pos:column="21">(<pos:position pos:line="70" pos:column="22"/></operator><operator pos:line="70" pos:column="22">(<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="23">nread<pos:position pos:line="70" pos:column="28"/></name> <operator pos:line="70" pos:column="29">==<pos:position pos:line="70" pos:column="31"/></operator> <literal type="number" pos:line="70" pos:column="32">0<pos:position pos:line="70" pos:column="33"/></literal><operator pos:line="70" pos:column="33">)<pos:position pos:line="70" pos:column="34"/></operator> <operator pos:line="70" pos:column="35">&amp;&amp;<pos:position pos:line="70" pos:column="45"/></operator> <operator pos:line="70" pos:column="38">(<pos:position pos:line="70" pos:column="39"/></operator><name><name pos:line="70" pos:column="39">k<pos:position pos:line="70" pos:column="40"/></name><operator pos:line="70" pos:column="40">-&gt;<pos:position pos:line="70" pos:column="45"/></operator><name pos:line="70" pos:column="42">bodywrites<pos:position pos:line="70" pos:column="52"/></name></name> <operator pos:line="70" pos:column="53">==<pos:position pos:line="70" pos:column="55"/></operator> <literal type="number" pos:line="70" pos:column="56">0<pos:position pos:line="70" pos:column="57"/></literal><operator pos:line="70" pos:column="57">)<pos:position pos:line="70" pos:column="58"/></operator><operator pos:line="70" pos:column="58">)<pos:position pos:line="70" pos:column="59"/></operator></expr> ?<pos:position pos:line="70" pos:column="61"/></condition><then pos:line="70" pos:column="61"> <expr><name pos:line="70" pos:column="62">TRUE<pos:position pos:line="70" pos:column="66"/></name></expr> <pos:position pos:line="70" pos:column="67"/></then><else pos:line="70" pos:column="67">: <expr><name pos:line="70" pos:column="69">FALSE<pos:position pos:line="70" pos:column="74"/></name></expr></else></ternary></expr>;<pos:position pos:line="70" pos:column="75"/></expr_stmt>

    <comment type="block" pos:line="72" pos:column="5">/* NUL terminate, allowing string ops to be used */</comment>
    <if pos:line="73" pos:column="5">if<condition pos:line="73" pos:column="7">(<expr><literal type="number" pos:line="73" pos:column="8">0<pos:position pos:line="73" pos:column="9"/></literal> <operator pos:line="73" pos:column="10">&lt;<pos:position pos:line="73" pos:column="14"/></operator> <name pos:line="73" pos:column="12">nread<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">||<pos:position pos:line="73" pos:column="20"/></operator> <name pos:line="73" pos:column="21">is_empty_data<pos:position pos:line="73" pos:column="34"/></name></expr>)<pos:position pos:line="73" pos:column="35"/></condition><then pos:line="73" pos:column="35"> <block pos:line="73" pos:column="36">{
      <expr_stmt><expr><name><name pos:line="74" pos:column="7">k<pos:position pos:line="74" pos:column="8"/></name><operator pos:line="74" pos:column="8">-&gt;<pos:position pos:line="74" pos:column="13"/></operator><name pos:line="74" pos:column="10">buf<pos:position pos:line="74" pos:column="13"/></name><index pos:line="74" pos:column="13">[<expr><name pos:line="74" pos:column="14">nread<pos:position pos:line="74" pos:column="19"/></name></expr>]<pos:position pos:line="74" pos:column="20"/></index></name> <operator pos:line="74" pos:column="21">=<pos:position pos:line="74" pos:column="22"/></operator> <literal type="number" pos:line="74" pos:column="23">0<pos:position pos:line="74" pos:column="24"/></literal></expr>;<pos:position pos:line="74" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="75" pos:column="6"/></block></then>
    <elseif pos:line="76" pos:column="5">else <if pos:line="76" pos:column="10">if<condition pos:line="76" pos:column="12">(<expr><literal type="number" pos:line="76" pos:column="13">0<pos:position pos:line="76" pos:column="14"/></literal> <operator pos:line="76" pos:column="15">&gt;=<pos:position pos:line="76" pos:column="20"/></operator> <name pos:line="76" pos:column="18">nread<pos:position pos:line="76" pos:column="23"/></name></expr>)<pos:position pos:line="76" pos:column="24"/></condition><then pos:line="76" pos:column="24"> <block pos:line="76" pos:column="25">{
      <comment type="block" pos:line="77" pos:column="7">/* if we receive 0 or less here, the server closed the connection
         and we bail out from this! */</comment>
      <expr_stmt><expr><call><name pos:line="79" pos:column="7">DEBUGF<pos:position pos:line="79" pos:column="13"/></name><argument_list pos:line="79" pos:column="13">(<argument><expr><call><name pos:line="79" pos:column="14">infof<pos:position pos:line="79" pos:column="19"/></name><argument_list pos:line="79" pos:column="19">(<argument><expr><name pos:line="79" pos:column="20">data<pos:position pos:line="79" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="26">"nread &lt;= 0, server closed connection, bailing\n"<pos:position pos:line="79" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="80" pos:column="7">k<pos:position pos:line="80" pos:column="8"/></name><operator pos:line="80" pos:column="8">-&gt;<pos:position pos:line="80" pos:column="13"/></operator><name pos:line="80" pos:column="10">keepon<pos:position pos:line="80" pos:column="16"/></name></name> <operator pos:line="80" pos:column="17">&amp;=<pos:position pos:line="80" pos:column="23"/></operator> <operator pos:line="80" pos:column="20">~<pos:position pos:line="80" pos:column="21"/></operator><name pos:line="80" pos:column="21">KEEP_RECV<pos:position pos:line="80" pos:column="30"/></name></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>
      <break pos:line="81" pos:column="7">break;<pos:position pos:line="81" pos:column="13"/></break>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="84" pos:column="5">/* Default buffer to use when we write the buffer, it may be changed
       in the flow below before the actual storing is done. */</comment>
    <expr_stmt><expr><name><name pos:line="86" pos:column="5">k<pos:position pos:line="86" pos:column="6"/></name><operator pos:line="86" pos:column="6">-&gt;<pos:position pos:line="86" pos:column="11"/></operator><name pos:line="86" pos:column="8">str<pos:position pos:line="86" pos:column="11"/></name></name> <operator pos:line="86" pos:column="12">=<pos:position pos:line="86" pos:column="13"/></operator> <name><name pos:line="86" pos:column="14">k<pos:position pos:line="86" pos:column="15"/></name><operator pos:line="86" pos:column="15">-&gt;<pos:position pos:line="86" pos:column="20"/></operator><name pos:line="86" pos:column="17">buf<pos:position pos:line="86" pos:column="20"/></name></name></expr>;<pos:position pos:line="86" pos:column="21"/></expr_stmt>

    <if pos:line="88" pos:column="5">if<condition pos:line="88" pos:column="7">(<expr><name><name pos:line="88" pos:column="8">conn<pos:position pos:line="88" pos:column="12"/></name><operator pos:line="88" pos:column="12">-&gt;<pos:position pos:line="88" pos:column="17"/></operator><name pos:line="88" pos:column="14">handler<pos:position pos:line="88" pos:column="21"/></name><operator pos:line="88" pos:column="21">-&gt;<pos:position pos:line="88" pos:column="26"/></operator><name pos:line="88" pos:column="23">readwrite<pos:position pos:line="88" pos:column="32"/></name></name></expr>)<pos:position pos:line="88" pos:column="33"/></condition><then pos:line="88" pos:column="33"> <block pos:line="88" pos:column="34">{
      <expr_stmt><expr><name pos:line="89" pos:column="7">result<pos:position pos:line="89" pos:column="13"/></name> <operator pos:line="89" pos:column="14">=<pos:position pos:line="89" pos:column="15"/></operator> <call><name><name pos:line="89" pos:column="16">conn<pos:position pos:line="89" pos:column="20"/></name><operator pos:line="89" pos:column="20">-&gt;<pos:position pos:line="89" pos:column="25"/></operator><name pos:line="89" pos:column="22">handler<pos:position pos:line="89" pos:column="29"/></name><operator pos:line="89" pos:column="29">-&gt;<pos:position pos:line="89" pos:column="34"/></operator><name pos:line="89" pos:column="31">readwrite<pos:position pos:line="89" pos:column="40"/></name></name><argument_list pos:line="89" pos:column="40">(<argument><expr><name pos:line="89" pos:column="41">data<pos:position pos:line="89" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="47">conn<pos:position pos:line="89" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="53">&amp;<pos:position pos:line="89" pos:column="58"/></operator><name pos:line="89" pos:column="54">nread<pos:position pos:line="89" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="61">&amp;<pos:position pos:line="89" pos:column="66"/></operator><name pos:line="89" pos:column="62">readmore<pos:position pos:line="89" pos:column="70"/></name></expr></argument>)<pos:position pos:line="89" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="72"/></expr_stmt>
      <if pos:line="90" pos:column="7">if<condition pos:line="90" pos:column="9">(<expr><name pos:line="90" pos:column="10">result<pos:position pos:line="90" pos:column="16"/></name></expr>)<pos:position pos:line="90" pos:column="17"/></condition><then pos:line="90" pos:column="17">
        <block type="pseudo"><return pos:line="91" pos:column="9">return <expr><name pos:line="91" pos:column="16">result<pos:position pos:line="91" pos:column="22"/></name></expr>;<pos:position pos:line="91" pos:column="23"/></return></block></then></if>
      <if pos:line="92" pos:column="7">if<condition pos:line="92" pos:column="9">(<expr><name pos:line="92" pos:column="10">readmore<pos:position pos:line="92" pos:column="18"/></name></expr>)<pos:position pos:line="92" pos:column="19"/></condition><then pos:line="92" pos:column="19">
        <block type="pseudo"><break pos:line="93" pos:column="9">break;<pos:position pos:line="93" pos:column="15"/></break></block></then></if>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>

<cpp:ifndef pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">ifndef<pos:position pos:line="96" pos:column="8"/></cpp:directive> <name pos:line="96" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="96" pos:column="26"/></name></cpp:ifndef>
    <comment type="block" pos:line="97" pos:column="5">/* Since this is a two-state thing, we check if we are parsing
       headers at the moment or not. */</comment>
    <if pos:line="99" pos:column="5">if<condition pos:line="99" pos:column="7">(<expr><name><name pos:line="99" pos:column="8">k<pos:position pos:line="99" pos:column="9"/></name><operator pos:line="99" pos:column="9">-&gt;<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="11">header<pos:position pos:line="99" pos:column="17"/></name></name></expr>)<pos:position pos:line="99" pos:column="18"/></condition><then pos:line="99" pos:column="18"> <block pos:line="99" pos:column="19">{
      <comment type="block" pos:line="100" pos:column="7">/* we are in parse-the-header-mode */</comment>
      <decl_stmt><decl><type><name pos:line="101" pos:column="7">bool<pos:position pos:line="101" pos:column="11"/></name></type> <name pos:line="101" pos:column="12">stop_reading<pos:position pos:line="101" pos:column="24"/></name> <init pos:line="101" pos:column="25">= <expr><name pos:line="101" pos:column="27">FALSE<pos:position pos:line="101" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="101" pos:column="33"/></decl_stmt>
      <expr_stmt><expr><name pos:line="102" pos:column="7">result<pos:position pos:line="102" pos:column="13"/></name> <operator pos:line="102" pos:column="14">=<pos:position pos:line="102" pos:column="15"/></operator> <call><name pos:line="102" pos:column="16">Curl_http_readwrite_headers<pos:position pos:line="102" pos:column="43"/></name><argument_list pos:line="102" pos:column="43">(<argument><expr><name pos:line="102" pos:column="44">data<pos:position pos:line="102" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="50">conn<pos:position pos:line="102" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="56">&amp;<pos:position pos:line="102" pos:column="61"/></operator><name pos:line="102" pos:column="57">nread<pos:position pos:line="102" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="64">&amp;<pos:position pos:line="102" pos:column="69"/></operator><name pos:line="102" pos:column="65">stop_reading<pos:position pos:line="102" pos:column="77"/></name></expr></argument>)<pos:position pos:line="102" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="79"/></expr_stmt>
      <if pos:line="103" pos:column="7">if<condition pos:line="103" pos:column="9">(<expr><name pos:line="103" pos:column="10">result<pos:position pos:line="103" pos:column="16"/></name></expr>)<pos:position pos:line="103" pos:column="17"/></condition><then pos:line="103" pos:column="17">
        <block type="pseudo"><return pos:line="104" pos:column="9">return <expr><name pos:line="104" pos:column="16">result<pos:position pos:line="104" pos:column="22"/></name></expr>;<pos:position pos:line="104" pos:column="23"/></return></block></then></if>

      <if pos:line="106" pos:column="7">if<condition pos:line="106" pos:column="9">(<expr><name><name pos:line="106" pos:column="10">conn<pos:position pos:line="106" pos:column="14"/></name><operator pos:line="106" pos:column="14">-&gt;<pos:position pos:line="106" pos:column="19"/></operator><name pos:line="106" pos:column="16">handler<pos:position pos:line="106" pos:column="23"/></name><operator pos:line="106" pos:column="23">-&gt;<pos:position pos:line="106" pos:column="28"/></operator><name pos:line="106" pos:column="25">readwrite<pos:position pos:line="106" pos:column="34"/></name></name> <operator pos:line="106" pos:column="35">&amp;&amp;<pos:position pos:line="106" pos:column="45"/></operator>
         <operator pos:line="107" pos:column="10">(<pos:position pos:line="107" pos:column="11"/></operator><name><name pos:line="107" pos:column="11">k<pos:position pos:line="107" pos:column="12"/></name><operator pos:line="107" pos:column="12">-&gt;<pos:position pos:line="107" pos:column="17"/></operator><name pos:line="107" pos:column="14">maxdownload<pos:position pos:line="107" pos:column="25"/></name></name> <operator pos:line="107" pos:column="26">&lt;=<pos:position pos:line="107" pos:column="31"/></operator> <literal type="number" pos:line="107" pos:column="29">0<pos:position pos:line="107" pos:column="30"/></literal> <operator pos:line="107" pos:column="31">&amp;&amp;<pos:position pos:line="107" pos:column="41"/></operator> <name pos:line="107" pos:column="34">nread<pos:position pos:line="107" pos:column="39"/></name> <operator pos:line="107" pos:column="40">&gt;<pos:position pos:line="107" pos:column="44"/></operator> <literal type="number" pos:line="107" pos:column="42">0<pos:position pos:line="107" pos:column="43"/></literal><operator pos:line="107" pos:column="43">)<pos:position pos:line="107" pos:column="44"/></operator></expr>)<pos:position pos:line="107" pos:column="45"/></condition><then pos:line="107" pos:column="45"> <block pos:line="107" pos:column="46">{
        <expr_stmt><expr><name pos:line="108" pos:column="9">result<pos:position pos:line="108" pos:column="15"/></name> <operator pos:line="108" pos:column="16">=<pos:position pos:line="108" pos:column="17"/></operator> <call><name><name pos:line="108" pos:column="18">conn<pos:position pos:line="108" pos:column="22"/></name><operator pos:line="108" pos:column="22">-&gt;<pos:position pos:line="108" pos:column="27"/></operator><name pos:line="108" pos:column="24">handler<pos:position pos:line="108" pos:column="31"/></name><operator pos:line="108" pos:column="31">-&gt;<pos:position pos:line="108" pos:column="36"/></operator><name pos:line="108" pos:column="33">readwrite<pos:position pos:line="108" pos:column="42"/></name></name><argument_list pos:line="108" pos:column="42">(<argument><expr><name pos:line="108" pos:column="43">data<pos:position pos:line="108" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="49">conn<pos:position pos:line="108" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="55">&amp;<pos:position pos:line="108" pos:column="60"/></operator><name pos:line="108" pos:column="56">nread<pos:position pos:line="108" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="63">&amp;<pos:position pos:line="108" pos:column="68"/></operator><name pos:line="108" pos:column="64">readmore<pos:position pos:line="108" pos:column="72"/></name></expr></argument>)<pos:position pos:line="108" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="74"/></expr_stmt>
        <if pos:line="109" pos:column="9">if<condition pos:line="109" pos:column="11">(<expr><name pos:line="109" pos:column="12">result<pos:position pos:line="109" pos:column="18"/></name></expr>)<pos:position pos:line="109" pos:column="19"/></condition><then pos:line="109" pos:column="19">
          <block type="pseudo"><return pos:line="110" pos:column="11">return <expr><name pos:line="110" pos:column="18">result<pos:position pos:line="110" pos:column="24"/></name></expr>;<pos:position pos:line="110" pos:column="25"/></return></block></then></if>
        <if pos:line="111" pos:column="9">if<condition pos:line="111" pos:column="11">(<expr><name pos:line="111" pos:column="12">readmore<pos:position pos:line="111" pos:column="20"/></name></expr>)<pos:position pos:line="111" pos:column="21"/></condition><then pos:line="111" pos:column="21">
          <block type="pseudo"><break pos:line="112" pos:column="11">break;<pos:position pos:line="112" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="113" pos:column="8"/></block></then></if>

      <if pos:line="115" pos:column="7">if<condition pos:line="115" pos:column="9">(<expr><name pos:line="115" pos:column="10">stop_reading<pos:position pos:line="115" pos:column="22"/></name></expr>)<pos:position pos:line="115" pos:column="23"/></condition><then pos:line="115" pos:column="23"> <block pos:line="115" pos:column="24">{
        <comment type="block" pos:line="116" pos:column="9">/* We've stopped dealing with input, get out of the do-while loop */</comment>

        <if pos:line="118" pos:column="9">if<condition pos:line="118" pos:column="11">(<expr><name pos:line="118" pos:column="12">nread<pos:position pos:line="118" pos:column="17"/></name> <operator pos:line="118" pos:column="18">&gt;<pos:position pos:line="118" pos:column="22"/></operator> <literal type="number" pos:line="118" pos:column="20">0<pos:position pos:line="118" pos:column="21"/></literal></expr>)<pos:position pos:line="118" pos:column="22"/></condition><then pos:line="118" pos:column="22"> <block pos:line="118" pos:column="23">{
          <if pos:line="119" pos:column="11">if<condition pos:line="119" pos:column="13">(<expr><call><name pos:line="119" pos:column="14">Curl_pipeline_wanted<pos:position pos:line="119" pos:column="34"/></name><argument_list pos:line="119" pos:column="34">(<argument><expr><name><name pos:line="119" pos:column="35">conn<pos:position pos:line="119" pos:column="39"/></name><operator pos:line="119" pos:column="39">-&gt;<pos:position pos:line="119" pos:column="44"/></operator><name pos:line="119" pos:column="41">data<pos:position pos:line="119" pos:column="45"/></name><operator pos:line="119" pos:column="45">-&gt;<pos:position pos:line="119" pos:column="50"/></operator><name pos:line="119" pos:column="47">multi<pos:position pos:line="119" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="54">CURLPIPE_HTTP1<pos:position pos:line="119" pos:column="68"/></name></expr></argument>)<pos:position pos:line="119" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="119" pos:column="70"/></condition><then pos:line="119" pos:column="70"> <block pos:line="119" pos:column="71">{
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">infof<pos:position pos:line="120" pos:column="18"/></name><argument_list pos:line="120" pos:column="18">(<argument><expr><name pos:line="120" pos:column="19">data<pos:position pos:line="120" pos:column="23"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="121" pos:column="19">"Rewinding stream by : %zd"<pos:position pos:line="121" pos:column="46"/></literal>
                  <literal type="string" pos:line="122" pos:column="19">" bytes on url %s (zero-length body)\n"<pos:position pos:line="122" pos:column="58"/></literal></expr></argument>,
                  <argument><expr><name pos:line="123" pos:column="19">nread<pos:position pos:line="123" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="26">data<pos:position pos:line="123" pos:column="30"/></name><operator pos:line="123" pos:column="30">-&gt;<pos:position pos:line="123" pos:column="35"/></operator><name pos:line="123" pos:column="32">state<pos:position pos:line="123" pos:column="37"/></name><operator pos:line="123" pos:column="37">.<pos:position pos:line="123" pos:column="38"/></operator><name pos:line="123" pos:column="38">path<pos:position pos:line="123" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="124" pos:column="13">read_rewind<pos:position pos:line="124" pos:column="24"/></name><argument_list pos:line="124" pos:column="24">(<argument><expr><name pos:line="124" pos:column="25">conn<pos:position pos:line="124" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="31">(<pos:position pos:line="124" pos:column="32"/></operator><name pos:line="124" pos:column="32">size_t<pos:position pos:line="124" pos:column="38"/></name><operator pos:line="124" pos:column="38">)<pos:position pos:line="124" pos:column="39"/></operator><name pos:line="124" pos:column="39">nread<pos:position pos:line="124" pos:column="44"/></name></expr></argument>)<pos:position pos:line="124" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="46"/></expr_stmt>
          }<pos:position pos:line="125" pos:column="12"/></block></then>
          <else pos:line="126" pos:column="11">else <block pos:line="126" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">infof<pos:position pos:line="127" pos:column="18"/></name><argument_list pos:line="127" pos:column="18">(<argument><expr><name pos:line="127" pos:column="19">data<pos:position pos:line="127" pos:column="23"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="128" pos:column="19">"Excess found in a non pipelined read:"<pos:position pos:line="128" pos:column="58"/></literal>
                  <literal type="string" pos:line="129" pos:column="19">" excess = %zd"<pos:position pos:line="129" pos:column="34"/></literal>
                  <literal type="string" pos:line="130" pos:column="19">" url = %s (zero-length body)\n"<pos:position pos:line="130" pos:column="51"/></literal></expr></argument>,
                  <argument><expr><name pos:line="131" pos:column="19">nread<pos:position pos:line="131" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="26">data<pos:position pos:line="131" pos:column="30"/></name><operator pos:line="131" pos:column="30">-&gt;<pos:position pos:line="131" pos:column="35"/></operator><name pos:line="131" pos:column="32">state<pos:position pos:line="131" pos:column="37"/></name><operator pos:line="131" pos:column="37">.<pos:position pos:line="131" pos:column="38"/></operator><name pos:line="131" pos:column="38">path<pos:position pos:line="131" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="44"/></expr_stmt>
          }<pos:position pos:line="132" pos:column="12"/></block></else></if>
        }<pos:position pos:line="133" pos:column="10"/></block></then></if>

        <break pos:line="135" pos:column="9">break;<pos:position pos:line="135" pos:column="15"/></break>
      }<pos:position pos:line="136" pos:column="8"/></block></then></if>
    }<pos:position pos:line="137" pos:column="6"/></block></then></if>
<cpp:endif pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">endif<pos:position pos:line="138" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="138" pos:column="8">/* CURL_DISABLE_HTTP */</comment>


    <comment type="block" pos:line="141" pos:column="5">/* This is not an 'else if' since it may be a rest from the header
       parsing, where the beginning of the buffer is headers and the end
       is non-headers. */</comment>
    <if pos:line="144" pos:column="5">if<condition pos:line="144" pos:column="7">(<expr><name><name pos:line="144" pos:column="8">k<pos:position pos:line="144" pos:column="9"/></name><operator pos:line="144" pos:column="9">-&gt;<pos:position pos:line="144" pos:column="14"/></operator><name pos:line="144" pos:column="11">str<pos:position pos:line="144" pos:column="14"/></name></name> <operator pos:line="144" pos:column="15">&amp;&amp;<pos:position pos:line="144" pos:column="25"/></operator> <operator pos:line="144" pos:column="18">!<pos:position pos:line="144" pos:column="19"/></operator><name><name pos:line="144" pos:column="19">k<pos:position pos:line="144" pos:column="20"/></name><operator pos:line="144" pos:column="20">-&gt;<pos:position pos:line="144" pos:column="25"/></operator><name pos:line="144" pos:column="22">header<pos:position pos:line="144" pos:column="28"/></name></name> <operator pos:line="144" pos:column="29">&amp;&amp;<pos:position pos:line="144" pos:column="39"/></operator> <operator pos:line="144" pos:column="32">(<pos:position pos:line="144" pos:column="33"/></operator><name pos:line="144" pos:column="33">nread<pos:position pos:line="144" pos:column="38"/></name> <operator pos:line="144" pos:column="39">&gt;<pos:position pos:line="144" pos:column="43"/></operator> <literal type="number" pos:line="144" pos:column="41">0<pos:position pos:line="144" pos:column="42"/></literal> <operator pos:line="144" pos:column="43">||<pos:position pos:line="144" pos:column="45"/></operator> <name pos:line="144" pos:column="46">is_empty_data<pos:position pos:line="144" pos:column="59"/></name><operator pos:line="144" pos:column="59">)<pos:position pos:line="144" pos:column="60"/></operator></expr>)<pos:position pos:line="144" pos:column="61"/></condition><then pos:line="144" pos:column="61"> <block pos:line="144" pos:column="62">{

      <if pos:line="146" pos:column="7">if<condition pos:line="146" pos:column="9">(<expr><name><name pos:line="146" pos:column="10">data<pos:position pos:line="146" pos:column="14"/></name><operator pos:line="146" pos:column="14">-&gt;<pos:position pos:line="146" pos:column="19"/></operator><name pos:line="146" pos:column="16">set<pos:position pos:line="146" pos:column="19"/></name><operator pos:line="146" pos:column="19">.<pos:position pos:line="146" pos:column="20"/></operator><name pos:line="146" pos:column="20">opt_no_body<pos:position pos:line="146" pos:column="31"/></name></name></expr>)<pos:position pos:line="146" pos:column="32"/></condition><then pos:line="146" pos:column="32"> <block pos:line="146" pos:column="33">{
        <comment type="block" pos:line="147" pos:column="9">/* data arrives although we want none, bail out */</comment>
        <expr_stmt><expr><call><name pos:line="148" pos:column="9">streamclose<pos:position pos:line="148" pos:column="20"/></name><argument_list pos:line="148" pos:column="20">(<argument><expr><name pos:line="148" pos:column="21">conn<pos:position pos:line="148" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="27">"ignoring body"<pos:position pos:line="148" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="149" pos:column="9">*<pos:position pos:line="149" pos:column="10"/></operator><name pos:line="149" pos:column="10">done<pos:position pos:line="149" pos:column="14"/></name> <operator pos:line="149" pos:column="15">=<pos:position pos:line="149" pos:column="16"/></operator> <name pos:line="149" pos:column="17">TRUE<pos:position pos:line="149" pos:column="21"/></name></expr>;<pos:position pos:line="149" pos:column="22"/></expr_stmt>
        <return pos:line="150" pos:column="9">return <expr><name pos:line="150" pos:column="16">CURLE_WEIRD_SERVER_REPLY<pos:position pos:line="150" pos:column="40"/></name></expr>;<pos:position pos:line="150" pos:column="41"/></return>
      }<pos:position pos:line="151" pos:column="8"/></block></then></if>

<cpp:ifndef pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">ifndef<pos:position pos:line="153" pos:column="8"/></cpp:directive> <name pos:line="153" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="153" pos:column="26"/></name></cpp:ifndef>
      <if pos:line="154" pos:column="7">if<condition pos:line="154" pos:column="9">(<expr><literal type="number" pos:line="154" pos:column="10">0<pos:position pos:line="154" pos:column="11"/></literal> <operator pos:line="154" pos:column="12">==<pos:position pos:line="154" pos:column="14"/></operator> <name><name pos:line="154" pos:column="15">k<pos:position pos:line="154" pos:column="16"/></name><operator pos:line="154" pos:column="16">-&gt;<pos:position pos:line="154" pos:column="21"/></operator><name pos:line="154" pos:column="18">bodywrites<pos:position pos:line="154" pos:column="28"/></name></name> <operator pos:line="154" pos:column="29">&amp;&amp;<pos:position pos:line="154" pos:column="39"/></operator> <operator pos:line="154" pos:column="32">!<pos:position pos:line="154" pos:column="33"/></operator><name pos:line="154" pos:column="33">is_empty_data<pos:position pos:line="154" pos:column="46"/></name></expr>)<pos:position pos:line="154" pos:column="47"/></condition><then pos:line="154" pos:column="47"> <block pos:line="154" pos:column="48">{
        <comment type="block" pos:line="155" pos:column="9">/* These checks are only made the first time we are about to
           write a piece of the body */</comment>
        <if pos:line="157" pos:column="9">if<condition pos:line="157" pos:column="11">(<expr><name><name pos:line="157" pos:column="12">conn<pos:position pos:line="157" pos:column="16"/></name><operator pos:line="157" pos:column="16">-&gt;<pos:position pos:line="157" pos:column="21"/></operator><name pos:line="157" pos:column="18">handler<pos:position pos:line="157" pos:column="25"/></name><operator pos:line="157" pos:column="25">-&gt;<pos:position pos:line="157" pos:column="30"/></operator><name pos:line="157" pos:column="27">protocol<pos:position pos:line="157" pos:column="35"/></name></name><operator pos:line="157" pos:column="35">&amp;<pos:position pos:line="157" pos:column="40"/></operator><operator pos:line="157" pos:column="36">(<pos:position pos:line="157" pos:column="37"/></operator><name pos:line="157" pos:column="37">PROTO_FAMILY_HTTP<pos:position pos:line="157" pos:column="54"/></name><operator pos:line="157" pos:column="54">|<pos:position pos:line="157" pos:column="55"/></operator><name pos:line="157" pos:column="55">CURLPROTO_RTSP<pos:position pos:line="157" pos:column="69"/></name><operator pos:line="157" pos:column="69">)<pos:position pos:line="157" pos:column="70"/></operator></expr>)<pos:position pos:line="157" pos:column="71"/></condition><then pos:line="157" pos:column="71"> <block pos:line="157" pos:column="72">{
          <comment type="block" pos:line="158" pos:column="11">/* HTTP-only checks */</comment>

          <if pos:line="160" pos:column="11">if<condition pos:line="160" pos:column="13">(<expr><name><name pos:line="160" pos:column="14">data<pos:position pos:line="160" pos:column="18"/></name><operator pos:line="160" pos:column="18">-&gt;<pos:position pos:line="160" pos:column="23"/></operator><name pos:line="160" pos:column="20">req<pos:position pos:line="160" pos:column="23"/></name><operator pos:line="160" pos:column="23">.<pos:position pos:line="160" pos:column="24"/></operator><name pos:line="160" pos:column="24">newurl<pos:position pos:line="160" pos:column="30"/></name></name></expr>)<pos:position pos:line="160" pos:column="31"/></condition><then pos:line="160" pos:column="31"> <block pos:line="160" pos:column="32">{
            <if pos:line="161" pos:column="13">if<condition pos:line="161" pos:column="15">(<expr><name><name pos:line="161" pos:column="16">conn<pos:position pos:line="161" pos:column="20"/></name><operator pos:line="161" pos:column="20">-&gt;<pos:position pos:line="161" pos:column="25"/></operator><name pos:line="161" pos:column="22">bits<pos:position pos:line="161" pos:column="26"/></name><operator pos:line="161" pos:column="26">.<pos:position pos:line="161" pos:column="27"/></operator><name pos:line="161" pos:column="27">close<pos:position pos:line="161" pos:column="32"/></name></name></expr>)<pos:position pos:line="161" pos:column="33"/></condition><then pos:line="161" pos:column="33"> <block pos:line="161" pos:column="34">{
              <comment type="block" pos:line="162" pos:column="15">/* Abort after the headers if "follow Location" is set
                 and we're set to close anyway. */</comment>
              <expr_stmt><expr><name><name pos:line="164" pos:column="15">k<pos:position pos:line="164" pos:column="16"/></name><operator pos:line="164" pos:column="16">-&gt;<pos:position pos:line="164" pos:column="21"/></operator><name pos:line="164" pos:column="18">keepon<pos:position pos:line="164" pos:column="24"/></name></name> <operator pos:line="164" pos:column="25">&amp;=<pos:position pos:line="164" pos:column="31"/></operator> <operator pos:line="164" pos:column="28">~<pos:position pos:line="164" pos:column="29"/></operator><name pos:line="164" pos:column="29">KEEP_RECV<pos:position pos:line="164" pos:column="38"/></name></expr>;<pos:position pos:line="164" pos:column="39"/></expr_stmt>
              <expr_stmt><expr><operator pos:line="165" pos:column="15">*<pos:position pos:line="165" pos:column="16"/></operator><name pos:line="165" pos:column="16">done<pos:position pos:line="165" pos:column="20"/></name> <operator pos:line="165" pos:column="21">=<pos:position pos:line="165" pos:column="22"/></operator> <name pos:line="165" pos:column="23">TRUE<pos:position pos:line="165" pos:column="27"/></name></expr>;<pos:position pos:line="165" pos:column="28"/></expr_stmt>
              <return pos:line="166" pos:column="15">return <expr><name pos:line="166" pos:column="22">CURLE_OK<pos:position pos:line="166" pos:column="30"/></name></expr>;<pos:position pos:line="166" pos:column="31"/></return>
            }<pos:position pos:line="167" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="168" pos:column="13">/* We have a new url to load, but since we want to be able
               to re-use this connection properly, we read the full
               response in "ignore more" */</comment>
            <expr_stmt><expr><name><name pos:line="171" pos:column="13">k<pos:position pos:line="171" pos:column="14"/></name><operator pos:line="171" pos:column="14">-&gt;<pos:position pos:line="171" pos:column="19"/></operator><name pos:line="171" pos:column="16">ignorebody<pos:position pos:line="171" pos:column="26"/></name></name> <operator pos:line="171" pos:column="27">=<pos:position pos:line="171" pos:column="28"/></operator> <name pos:line="171" pos:column="29">TRUE<pos:position pos:line="171" pos:column="33"/></name></expr>;<pos:position pos:line="171" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="172" pos:column="13">infof<pos:position pos:line="172" pos:column="18"/></name><argument_list pos:line="172" pos:column="18">(<argument><expr><name pos:line="172" pos:column="19">data<pos:position pos:line="172" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="25">"Ignoring the response-body\n"<pos:position pos:line="172" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="57"/></expr_stmt>
          }<pos:position pos:line="173" pos:column="12"/></block></then></if>
          <if pos:line="174" pos:column="11">if<condition pos:line="174" pos:column="13">(<expr><name><name pos:line="174" pos:column="14">data<pos:position pos:line="174" pos:column="18"/></name><operator pos:line="174" pos:column="18">-&gt;<pos:position pos:line="174" pos:column="23"/></operator><name pos:line="174" pos:column="20">state<pos:position pos:line="174" pos:column="25"/></name><operator pos:line="174" pos:column="25">.<pos:position pos:line="174" pos:column="26"/></operator><name pos:line="174" pos:column="26">resume_from<pos:position pos:line="174" pos:column="37"/></name></name> <operator pos:line="174" pos:column="38">&amp;&amp;<pos:position pos:line="174" pos:column="48"/></operator> <operator pos:line="174" pos:column="41">!<pos:position pos:line="174" pos:column="42"/></operator><name><name pos:line="174" pos:column="42">k<pos:position pos:line="174" pos:column="43"/></name><operator pos:line="174" pos:column="43">-&gt;<pos:position pos:line="174" pos:column="48"/></operator><name pos:line="174" pos:column="45">content_range<pos:position pos:line="174" pos:column="58"/></name></name> <operator pos:line="174" pos:column="59">&amp;&amp;<pos:position pos:line="174" pos:column="69"/></operator>
             <operator pos:line="175" pos:column="14">(<pos:position pos:line="175" pos:column="15"/></operator><name><name pos:line="175" pos:column="15">data<pos:position pos:line="175" pos:column="19"/></name><operator pos:line="175" pos:column="19">-&gt;<pos:position pos:line="175" pos:column="24"/></operator><name pos:line="175" pos:column="21">set<pos:position pos:line="175" pos:column="24"/></name><operator pos:line="175" pos:column="24">.<pos:position pos:line="175" pos:column="25"/></operator><name pos:line="175" pos:column="25">httpreq<pos:position pos:line="175" pos:column="32"/></name></name> <operator pos:line="175" pos:column="33">==<pos:position pos:line="175" pos:column="35"/></operator> <name pos:line="175" pos:column="36">HTTPREQ_GET<pos:position pos:line="175" pos:column="47"/></name><operator pos:line="175" pos:column="47">)<pos:position pos:line="175" pos:column="48"/></operator> <operator pos:line="175" pos:column="49">&amp;&amp;<pos:position pos:line="175" pos:column="59"/></operator>
             <operator pos:line="176" pos:column="14">!<pos:position pos:line="176" pos:column="15"/></operator><name><name pos:line="176" pos:column="15">k<pos:position pos:line="176" pos:column="16"/></name><operator pos:line="176" pos:column="16">-&gt;<pos:position pos:line="176" pos:column="21"/></operator><name pos:line="176" pos:column="18">ignorebody<pos:position pos:line="176" pos:column="28"/></name></name></expr>)<pos:position pos:line="176" pos:column="29"/></condition><then pos:line="176" pos:column="29"> <block pos:line="176" pos:column="30">{

            <if pos:line="178" pos:column="13">if<condition pos:line="178" pos:column="15">(<expr><name><name pos:line="178" pos:column="16">k<pos:position pos:line="178" pos:column="17"/></name><operator pos:line="178" pos:column="17">-&gt;<pos:position pos:line="178" pos:column="22"/></operator><name pos:line="178" pos:column="19">size<pos:position pos:line="178" pos:column="23"/></name></name> <operator pos:line="178" pos:column="24">==<pos:position pos:line="178" pos:column="26"/></operator> <name><name pos:line="178" pos:column="27">data<pos:position pos:line="178" pos:column="31"/></name><operator pos:line="178" pos:column="31">-&gt;<pos:position pos:line="178" pos:column="36"/></operator><name pos:line="178" pos:column="33">state<pos:position pos:line="178" pos:column="38"/></name><operator pos:line="178" pos:column="38">.<pos:position pos:line="178" pos:column="39"/></operator><name pos:line="178" pos:column="39">resume_from<pos:position pos:line="178" pos:column="50"/></name></name></expr>)<pos:position pos:line="178" pos:column="51"/></condition><then pos:line="178" pos:column="51"> <block pos:line="178" pos:column="52">{
              <comment type="block" pos:line="179" pos:column="15">/* The resume point is at the end of file, consider this fine
                 even if it doesn't allow resume from here. */</comment>
              <expr_stmt><expr><call><name pos:line="181" pos:column="15">infof<pos:position pos:line="181" pos:column="20"/></name><argument_list pos:line="181" pos:column="20">(<argument><expr><name pos:line="181" pos:column="21">data<pos:position pos:line="181" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="181" pos:column="27">"The entire document is already downloaded"<pos:position pos:line="181" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="72"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="182" pos:column="15">connclose<pos:position pos:line="182" pos:column="24"/></name><argument_list pos:line="182" pos:column="24">(<argument><expr><name pos:line="182" pos:column="25">conn<pos:position pos:line="182" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="182" pos:column="31">"already downloaded"<pos:position pos:line="182" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="182" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="53"/></expr_stmt>
              <comment type="block" pos:line="183" pos:column="15">/* Abort download */</comment>
              <expr_stmt><expr><name><name pos:line="184" pos:column="15">k<pos:position pos:line="184" pos:column="16"/></name><operator pos:line="184" pos:column="16">-&gt;<pos:position pos:line="184" pos:column="21"/></operator><name pos:line="184" pos:column="18">keepon<pos:position pos:line="184" pos:column="24"/></name></name> <operator pos:line="184" pos:column="25">&amp;=<pos:position pos:line="184" pos:column="31"/></operator> <operator pos:line="184" pos:column="28">~<pos:position pos:line="184" pos:column="29"/></operator><name pos:line="184" pos:column="29">KEEP_RECV<pos:position pos:line="184" pos:column="38"/></name></expr>;<pos:position pos:line="184" pos:column="39"/></expr_stmt>
              <expr_stmt><expr><operator pos:line="185" pos:column="15">*<pos:position pos:line="185" pos:column="16"/></operator><name pos:line="185" pos:column="16">done<pos:position pos:line="185" pos:column="20"/></name> <operator pos:line="185" pos:column="21">=<pos:position pos:line="185" pos:column="22"/></operator> <name pos:line="185" pos:column="23">TRUE<pos:position pos:line="185" pos:column="27"/></name></expr>;<pos:position pos:line="185" pos:column="28"/></expr_stmt>
              <return pos:line="186" pos:column="15">return <expr><name pos:line="186" pos:column="22">CURLE_OK<pos:position pos:line="186" pos:column="30"/></name></expr>;<pos:position pos:line="186" pos:column="31"/></return>
            }<pos:position pos:line="187" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="189" pos:column="13">/* we wanted to resume a download, although the server doesn't
             * seem to support this and we did this with a GET (if it
             * wasn't a GET we did a POST or PUT resume) */</comment>
            <expr_stmt><expr><call><name pos:line="192" pos:column="13">failf<pos:position pos:line="192" pos:column="18"/></name><argument_list pos:line="192" pos:column="18">(<argument><expr><name pos:line="192" pos:column="19">data<pos:position pos:line="192" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="192" pos:column="25">"HTTP server doesn't seem to support "<pos:position pos:line="192" pos:column="63"/></literal>
                  <literal type="string" pos:line="193" pos:column="19">"byte ranges. Cannot resume."<pos:position pos:line="193" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="50"/></expr_stmt>
            <return pos:line="194" pos:column="13">return <expr><name pos:line="194" pos:column="20">CURLE_RANGE_ERROR<pos:position pos:line="194" pos:column="37"/></name></expr>;<pos:position pos:line="194" pos:column="38"/></return>
          }<pos:position pos:line="195" pos:column="12"/></block></then></if>

          <if pos:line="197" pos:column="11">if<condition pos:line="197" pos:column="13">(<expr><name><name pos:line="197" pos:column="14">data<pos:position pos:line="197" pos:column="18"/></name><operator pos:line="197" pos:column="18">-&gt;<pos:position pos:line="197" pos:column="23"/></operator><name pos:line="197" pos:column="20">set<pos:position pos:line="197" pos:column="23"/></name><operator pos:line="197" pos:column="23">.<pos:position pos:line="197" pos:column="24"/></operator><name pos:line="197" pos:column="24">timecondition<pos:position pos:line="197" pos:column="37"/></name></name> <operator pos:line="197" pos:column="38">&amp;&amp;<pos:position pos:line="197" pos:column="48"/></operator> <operator pos:line="197" pos:column="41">!<pos:position pos:line="197" pos:column="42"/></operator><name><name pos:line="197" pos:column="42">data<pos:position pos:line="197" pos:column="46"/></name><operator pos:line="197" pos:column="46">-&gt;<pos:position pos:line="197" pos:column="51"/></operator><name pos:line="197" pos:column="48">state<pos:position pos:line="197" pos:column="53"/></name><operator pos:line="197" pos:column="53">.<pos:position pos:line="197" pos:column="54"/></operator><name pos:line="197" pos:column="54">range<pos:position pos:line="197" pos:column="59"/></name></name></expr>)<pos:position pos:line="197" pos:column="60"/></condition><then pos:line="197" pos:column="60"> <block pos:line="197" pos:column="61">{
            <comment type="block" pos:line="198" pos:column="13">/* A time condition has been set AND no ranges have been
               requested. This seems to be what chapter 13.3.4 of
               RFC 2616 defines to be the correct action for a
               HTTP/1.1 client */</comment>

            <if pos:line="203" pos:column="13">if<condition pos:line="203" pos:column="15">(<expr><operator pos:line="203" pos:column="16">!<pos:position pos:line="203" pos:column="17"/></operator><call><name pos:line="203" pos:column="17">Curl_meets_timecondition<pos:position pos:line="203" pos:column="41"/></name><argument_list pos:line="203" pos:column="41">(<argument><expr><name pos:line="203" pos:column="42">data<pos:position pos:line="203" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="48">k<pos:position pos:line="203" pos:column="49"/></name><operator pos:line="203" pos:column="49">-&gt;<pos:position pos:line="203" pos:column="54"/></operator><name pos:line="203" pos:column="51">timeofdoc<pos:position pos:line="203" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="203" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="203" pos:column="62"/></condition><then pos:line="203" pos:column="62"> <block pos:line="203" pos:column="63">{
              <expr_stmt><expr><operator pos:line="204" pos:column="15">*<pos:position pos:line="204" pos:column="16"/></operator><name pos:line="204" pos:column="16">done<pos:position pos:line="204" pos:column="20"/></name> <operator pos:line="204" pos:column="21">=<pos:position pos:line="204" pos:column="22"/></operator> <name pos:line="204" pos:column="23">TRUE<pos:position pos:line="204" pos:column="27"/></name></expr>;<pos:position pos:line="204" pos:column="28"/></expr_stmt>
              <comment type="block" pos:line="205" pos:column="15">/* We're simulating a http 304 from server so we return
                 what should have been returned from the server */</comment>
              <expr_stmt><expr><name><name pos:line="207" pos:column="15">data<pos:position pos:line="207" pos:column="19"/></name><operator pos:line="207" pos:column="19">-&gt;<pos:position pos:line="207" pos:column="24"/></operator><name pos:line="207" pos:column="21">info<pos:position pos:line="207" pos:column="25"/></name><operator pos:line="207" pos:column="25">.<pos:position pos:line="207" pos:column="26"/></operator><name pos:line="207" pos:column="26">httpcode<pos:position pos:line="207" pos:column="34"/></name></name> <operator pos:line="207" pos:column="35">=<pos:position pos:line="207" pos:column="36"/></operator> <literal type="number" pos:line="207" pos:column="37">304<pos:position pos:line="207" pos:column="40"/></literal></expr>;<pos:position pos:line="207" pos:column="41"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="208" pos:column="15">infof<pos:position pos:line="208" pos:column="20"/></name><argument_list pos:line="208" pos:column="20">(<argument><expr><name pos:line="208" pos:column="21">data<pos:position pos:line="208" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="208" pos:column="27">"Simulate a HTTP 304 response!\n"<pos:position pos:line="208" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="62"/></expr_stmt>
              <comment type="block" pos:line="209" pos:column="15">/* we abort the transfer before it is completed == we ruin the
                 re-use ability. Close the connection */</comment>
              <expr_stmt><expr><call><name pos:line="211" pos:column="15">connclose<pos:position pos:line="211" pos:column="24"/></name><argument_list pos:line="211" pos:column="24">(<argument><expr><name pos:line="211" pos:column="25">conn<pos:position pos:line="211" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="211" pos:column="31">"Simulated 304 handling"<pos:position pos:line="211" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="211" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="57"/></expr_stmt>
              <return pos:line="212" pos:column="15">return <expr><name pos:line="212" pos:column="22">CURLE_OK<pos:position pos:line="212" pos:column="30"/></name></expr>;<pos:position pos:line="212" pos:column="31"/></return>
            }<pos:position pos:line="213" pos:column="14"/></block></then></if>
          }<pos:position pos:line="214" pos:column="12"/></block></then></if> <comment type="block" pos:line="214" pos:column="13">/* we have a time condition */</comment>

        }<pos:position pos:line="216" pos:column="10"/></block></then></if> <comment type="block" pos:line="216" pos:column="11">/* this is HTTP or RTSP */</comment>
      }<pos:position pos:line="217" pos:column="8"/></block></then></if> <comment type="block" pos:line="217" pos:column="9">/* this is the first time we write a body part */</comment>
<cpp:endif pos:line="218" pos:column="1">#<cpp:directive pos:line="218" pos:column="2">endif<pos:position pos:line="218" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="218" pos:column="8">/* CURL_DISABLE_HTTP */</comment>

      <expr_stmt><expr><name><name pos:line="220" pos:column="7">k<pos:position pos:line="220" pos:column="8"/></name><operator pos:line="220" pos:column="8">-&gt;<pos:position pos:line="220" pos:column="13"/></operator><name pos:line="220" pos:column="10">bodywrites<pos:position pos:line="220" pos:column="20"/></name></name><operator pos:line="220" pos:column="20">++<pos:position pos:line="220" pos:column="22"/></operator></expr>;<pos:position pos:line="220" pos:column="23"/></expr_stmt>

      <comment type="block" pos:line="222" pos:column="7">/* pass data to the debug function before it gets "dechunked" */</comment>
      <if pos:line="223" pos:column="7">if<condition pos:line="223" pos:column="9">(<expr><name><name pos:line="223" pos:column="10">data<pos:position pos:line="223" pos:column="14"/></name><operator pos:line="223" pos:column="14">-&gt;<pos:position pos:line="223" pos:column="19"/></operator><name pos:line="223" pos:column="16">set<pos:position pos:line="223" pos:column="19"/></name><operator pos:line="223" pos:column="19">.<pos:position pos:line="223" pos:column="20"/></operator><name pos:line="223" pos:column="20">verbose<pos:position pos:line="223" pos:column="27"/></name></name></expr>)<pos:position pos:line="223" pos:column="28"/></condition><then pos:line="223" pos:column="28"> <block pos:line="223" pos:column="29">{
        <if pos:line="224" pos:column="9">if<condition pos:line="224" pos:column="11">(<expr><name><name pos:line="224" pos:column="12">k<pos:position pos:line="224" pos:column="13"/></name><operator pos:line="224" pos:column="13">-&gt;<pos:position pos:line="224" pos:column="18"/></operator><name pos:line="224" pos:column="15">badheader<pos:position pos:line="224" pos:column="24"/></name></name></expr>)<pos:position pos:line="224" pos:column="25"/></condition><then pos:line="224" pos:column="25"> <block pos:line="224" pos:column="26">{
          <expr_stmt><expr><call><name pos:line="225" pos:column="11">Curl_debug<pos:position pos:line="225" pos:column="21"/></name><argument_list pos:line="225" pos:column="21">(<argument><expr><name pos:line="225" pos:column="22">data<pos:position pos:line="225" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="28">CURLINFO_DATA_IN<pos:position pos:line="225" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="225" pos:column="46">data<pos:position pos:line="225" pos:column="50"/></name><operator pos:line="225" pos:column="50">-&gt;<pos:position pos:line="225" pos:column="55"/></operator><name pos:line="225" pos:column="52">state<pos:position pos:line="225" pos:column="57"/></name><operator pos:line="225" pos:column="57">.<pos:position pos:line="225" pos:column="58"/></operator><name pos:line="225" pos:column="58">headerbuff<pos:position pos:line="225" pos:column="68"/></name></name></expr></argument>,
                     <argument><expr><operator pos:line="226" pos:column="22">(<pos:position pos:line="226" pos:column="23"/></operator><name pos:line="226" pos:column="23">size_t<pos:position pos:line="226" pos:column="29"/></name><operator pos:line="226" pos:column="29">)<pos:position pos:line="226" pos:column="30"/></operator><name><name pos:line="226" pos:column="30">k<pos:position pos:line="226" pos:column="31"/></name><operator pos:line="226" pos:column="31">-&gt;<pos:position pos:line="226" pos:column="36"/></operator><name pos:line="226" pos:column="33">hbuflen<pos:position pos:line="226" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="42">conn<pos:position pos:line="226" pos:column="46"/></name></expr></argument>)<pos:position pos:line="226" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="48"/></expr_stmt>
          <if pos:line="227" pos:column="11">if<condition pos:line="227" pos:column="13">(<expr><name><name pos:line="227" pos:column="14">k<pos:position pos:line="227" pos:column="15"/></name><operator pos:line="227" pos:column="15">-&gt;<pos:position pos:line="227" pos:column="20"/></operator><name pos:line="227" pos:column="17">badheader<pos:position pos:line="227" pos:column="26"/></name></name> <operator pos:line="227" pos:column="27">==<pos:position pos:line="227" pos:column="29"/></operator> <name pos:line="227" pos:column="30">HEADER_PARTHEADER<pos:position pos:line="227" pos:column="47"/></name></expr>)<pos:position pos:line="227" pos:column="48"/></condition><then pos:line="227" pos:column="48">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="228" pos:column="13">Curl_debug<pos:position pos:line="228" pos:column="23"/></name><argument_list pos:line="228" pos:column="23">(<argument><expr><name pos:line="228" pos:column="24">data<pos:position pos:line="228" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="228" pos:column="30">CURLINFO_DATA_IN<pos:position pos:line="228" pos:column="46"/></name></expr></argument>,
                       <argument><expr><name><name pos:line="229" pos:column="24">k<pos:position pos:line="229" pos:column="25"/></name><operator pos:line="229" pos:column="25">-&gt;<pos:position pos:line="229" pos:column="30"/></operator><name pos:line="229" pos:column="27">str<pos:position pos:line="229" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="229" pos:column="32">(<pos:position pos:line="229" pos:column="33"/></operator><name pos:line="229" pos:column="33">size_t<pos:position pos:line="229" pos:column="39"/></name><operator pos:line="229" pos:column="39">)<pos:position pos:line="229" pos:column="40"/></operator><name pos:line="229" pos:column="40">nread<pos:position pos:line="229" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="47">conn<pos:position pos:line="229" pos:column="51"/></name></expr></argument>)<pos:position pos:line="229" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="53"/></expr_stmt></block></then></if>
        }<pos:position pos:line="230" pos:column="10"/></block></then>
        <else pos:line="231" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="232" pos:column="11">Curl_debug<pos:position pos:line="232" pos:column="21"/></name><argument_list pos:line="232" pos:column="21">(<argument><expr><name pos:line="232" pos:column="22">data<pos:position pos:line="232" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="232" pos:column="28">CURLINFO_DATA_IN<pos:position pos:line="232" pos:column="44"/></name></expr></argument>,
                     <argument><expr><name><name pos:line="233" pos:column="22">k<pos:position pos:line="233" pos:column="23"/></name><operator pos:line="233" pos:column="23">-&gt;<pos:position pos:line="233" pos:column="28"/></operator><name pos:line="233" pos:column="25">str<pos:position pos:line="233" pos:column="28"/></name></name></expr></argument>, <argument><expr><operator pos:line="233" pos:column="30">(<pos:position pos:line="233" pos:column="31"/></operator><name pos:line="233" pos:column="31">size_t<pos:position pos:line="233" pos:column="37"/></name><operator pos:line="233" pos:column="37">)<pos:position pos:line="233" pos:column="38"/></operator><name pos:line="233" pos:column="38">nread<pos:position pos:line="233" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="233" pos:column="45">conn<pos:position pos:line="233" pos:column="49"/></name></expr></argument>)<pos:position pos:line="233" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="51"/></expr_stmt></block></else></if>
      }<pos:position pos:line="234" pos:column="8"/></block></then></if>

<cpp:ifndef pos:line="236" pos:column="1">#<cpp:directive pos:line="236" pos:column="2">ifndef<pos:position pos:line="236" pos:column="8"/></cpp:directive> <name pos:line="236" pos:column="9">CURL_DISABLE_HTTP<pos:position pos:line="236" pos:column="26"/></name></cpp:ifndef>
      <if pos:line="237" pos:column="7">if<condition pos:line="237" pos:column="9">(<expr><name><name pos:line="237" pos:column="10">k<pos:position pos:line="237" pos:column="11"/></name><operator pos:line="237" pos:column="11">-&gt;<pos:position pos:line="237" pos:column="16"/></operator><name pos:line="237" pos:column="13">chunk<pos:position pos:line="237" pos:column="18"/></name></name></expr>)<pos:position pos:line="237" pos:column="19"/></condition><then pos:line="237" pos:column="19"> <block pos:line="237" pos:column="20">{
        <comment type="block" pos:line="238" pos:column="9">/*
         * Here comes a chunked transfer flying and we need to decode this
         * properly.  While the name says read, this function both reads
         * and writes away the data. The returned 'nread' holds the number
         * of actual data it wrote to the client.
         */</comment>

        <decl_stmt><decl><type><name pos:line="245" pos:column="9">CHUNKcode<pos:position pos:line="245" pos:column="18"/></name></type> <name pos:line="245" pos:column="19">res<pos:position pos:line="245" pos:column="22"/></name> <init pos:line="245" pos:column="23">=
          <expr><call><name pos:line="246" pos:column="11">Curl_httpchunk_read<pos:position pos:line="246" pos:column="30"/></name><argument_list pos:line="246" pos:column="30">(<argument><expr><name pos:line="246" pos:column="31">conn<pos:position pos:line="246" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="246" pos:column="37">k<pos:position pos:line="246" pos:column="38"/></name><operator pos:line="246" pos:column="38">-&gt;<pos:position pos:line="246" pos:column="43"/></operator><name pos:line="246" pos:column="40">str<pos:position pos:line="246" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="246" pos:column="45">nread<pos:position pos:line="246" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="246" pos:column="52">&amp;<pos:position pos:line="246" pos:column="57"/></operator><name pos:line="246" pos:column="53">nread<pos:position pos:line="246" pos:column="58"/></name></expr></argument>)<pos:position pos:line="246" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="246" pos:column="60"/></decl_stmt>

        <if pos:line="248" pos:column="9">if<condition pos:line="248" pos:column="11">(<expr><name pos:line="248" pos:column="12">CHUNKE_OK<pos:position pos:line="248" pos:column="21"/></name> <operator pos:line="248" pos:column="22">&lt;<pos:position pos:line="248" pos:column="26"/></operator> <name pos:line="248" pos:column="24">res<pos:position pos:line="248" pos:column="27"/></name></expr>)<pos:position pos:line="248" pos:column="28"/></condition><then pos:line="248" pos:column="28"> <block pos:line="248" pos:column="29">{
          <if pos:line="249" pos:column="11">if<condition pos:line="249" pos:column="13">(<expr><name pos:line="249" pos:column="14">CHUNKE_WRITE_ERROR<pos:position pos:line="249" pos:column="32"/></name> <operator pos:line="249" pos:column="33">==<pos:position pos:line="249" pos:column="35"/></operator> <name pos:line="249" pos:column="36">res<pos:position pos:line="249" pos:column="39"/></name></expr>)<pos:position pos:line="249" pos:column="40"/></condition><then pos:line="249" pos:column="40"> <block pos:line="249" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="250" pos:column="13">failf<pos:position pos:line="250" pos:column="18"/></name><argument_list pos:line="250" pos:column="18">(<argument><expr><name pos:line="250" pos:column="19">data<pos:position pos:line="250" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="250" pos:column="25">"Failed writing data"<pos:position pos:line="250" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="250" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="48"/></expr_stmt>
            <return pos:line="251" pos:column="13">return <expr><name pos:line="251" pos:column="20">CURLE_WRITE_ERROR<pos:position pos:line="251" pos:column="37"/></name></expr>;<pos:position pos:line="251" pos:column="38"/></return>
          }<pos:position pos:line="252" pos:column="12"/></block></then></if>
          <expr_stmt><expr><call><name pos:line="253" pos:column="11">failf<pos:position pos:line="253" pos:column="16"/></name><argument_list pos:line="253" pos:column="16">(<argument><expr><name pos:line="253" pos:column="17">data<pos:position pos:line="253" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="253" pos:column="23">"%s in chunked-encoding"<pos:position pos:line="253" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="253" pos:column="49">Curl_chunked_strerror<pos:position pos:line="253" pos:column="70"/></name><argument_list pos:line="253" pos:column="70">(<argument><expr><name pos:line="253" pos:column="71">res<pos:position pos:line="253" pos:column="74"/></name></expr></argument>)<pos:position pos:line="253" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="253" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="77"/></expr_stmt>
          <return pos:line="254" pos:column="11">return <expr><name pos:line="254" pos:column="18">CURLE_RECV_ERROR<pos:position pos:line="254" pos:column="34"/></name></expr>;<pos:position pos:line="254" pos:column="35"/></return>
        }<pos:position pos:line="255" pos:column="10"/></block></then></if>
        <if pos:line="256" pos:column="9">if<condition pos:line="256" pos:column="11">(<expr><name pos:line="256" pos:column="12">CHUNKE_STOP<pos:position pos:line="256" pos:column="23"/></name> <operator pos:line="256" pos:column="24">==<pos:position pos:line="256" pos:column="26"/></operator> <name pos:line="256" pos:column="27">res<pos:position pos:line="256" pos:column="30"/></name></expr>)<pos:position pos:line="256" pos:column="31"/></condition><then pos:line="256" pos:column="31"> <block pos:line="256" pos:column="32">{
          <decl_stmt><decl><type><name pos:line="257" pos:column="11">size_t<pos:position pos:line="257" pos:column="17"/></name></type> <name pos:line="257" pos:column="18">dataleft<pos:position pos:line="257" pos:column="26"/></name></decl>;<pos:position pos:line="257" pos:column="27"/></decl_stmt>
          <comment type="block" pos:line="258" pos:column="11">/* we're done reading chunks! */</comment>
          <expr_stmt><expr><name><name pos:line="259" pos:column="11">k<pos:position pos:line="259" pos:column="12"/></name><operator pos:line="259" pos:column="12">-&gt;<pos:position pos:line="259" pos:column="17"/></operator><name pos:line="259" pos:column="14">keepon<pos:position pos:line="259" pos:column="20"/></name></name> <operator pos:line="259" pos:column="21">&amp;=<pos:position pos:line="259" pos:column="27"/></operator> <operator pos:line="259" pos:column="24">~<pos:position pos:line="259" pos:column="25"/></operator><name pos:line="259" pos:column="25">KEEP_RECV<pos:position pos:line="259" pos:column="34"/></name></expr>;<pos:position pos:line="259" pos:column="35"/></expr_stmt> <comment type="block" pos:line="259" pos:column="36">/* read no more */</comment>

          <comment type="block" pos:line="261" pos:column="11">/* There are now possibly N number of bytes at the end of the
             str buffer that weren't written to the client.

             We DO care about this data if we are pipelining.
             Push it back to be read on the next pass. */</comment>

          <expr_stmt><expr><name pos:line="267" pos:column="11">dataleft<pos:position pos:line="267" pos:column="19"/></name> <operator pos:line="267" pos:column="20">=<pos:position pos:line="267" pos:column="21"/></operator> <name><name pos:line="267" pos:column="22">conn<pos:position pos:line="267" pos:column="26"/></name><operator pos:line="267" pos:column="26">-&gt;<pos:position pos:line="267" pos:column="31"/></operator><name pos:line="267" pos:column="28">chunk<pos:position pos:line="267" pos:column="33"/></name><operator pos:line="267" pos:column="33">.<pos:position pos:line="267" pos:column="34"/></operator><name pos:line="267" pos:column="34">dataleft<pos:position pos:line="267" pos:column="42"/></name></name></expr>;<pos:position pos:line="267" pos:column="43"/></expr_stmt>
          <if pos:line="268" pos:column="11">if<condition pos:line="268" pos:column="13">(<expr><name pos:line="268" pos:column="14">dataleft<pos:position pos:line="268" pos:column="22"/></name> <operator pos:line="268" pos:column="23">!=<pos:position pos:line="268" pos:column="25"/></operator> <literal type="number" pos:line="268" pos:column="26">0<pos:position pos:line="268" pos:column="27"/></literal></expr>)<pos:position pos:line="268" pos:column="28"/></condition><then pos:line="268" pos:column="28"> <block pos:line="268" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="269" pos:column="13">infof<pos:position pos:line="269" pos:column="18"/></name><argument_list pos:line="269" pos:column="18">(<argument><expr><name><name pos:line="269" pos:column="19">conn<pos:position pos:line="269" pos:column="23"/></name><operator pos:line="269" pos:column="23">-&gt;<pos:position pos:line="269" pos:column="28"/></operator><name pos:line="269" pos:column="25">data<pos:position pos:line="269" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="269" pos:column="31">"Leftovers after chunking: %zu bytes\n"<pos:position pos:line="269" pos:column="70"/></literal></expr></argument>,
                  <argument><expr><name pos:line="270" pos:column="19">dataleft<pos:position pos:line="270" pos:column="27"/></name></expr></argument>)<pos:position pos:line="270" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="29"/></expr_stmt>
            <if pos:line="271" pos:column="13">if<condition pos:line="271" pos:column="15">(<expr><call><name pos:line="271" pos:column="16">Curl_pipeline_wanted<pos:position pos:line="271" pos:column="36"/></name><argument_list pos:line="271" pos:column="36">(<argument><expr><name><name pos:line="271" pos:column="37">conn<pos:position pos:line="271" pos:column="41"/></name><operator pos:line="271" pos:column="41">-&gt;<pos:position pos:line="271" pos:column="46"/></operator><name pos:line="271" pos:column="43">data<pos:position pos:line="271" pos:column="47"/></name><operator pos:line="271" pos:column="47">-&gt;<pos:position pos:line="271" pos:column="52"/></operator><name pos:line="271" pos:column="49">multi<pos:position pos:line="271" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="271" pos:column="56">CURLPIPE_HTTP1<pos:position pos:line="271" pos:column="70"/></name></expr></argument>)<pos:position pos:line="271" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="271" pos:column="72"/></condition><then pos:line="271" pos:column="72"> <block pos:line="271" pos:column="73">{
              <comment type="block" pos:line="272" pos:column="15">/* only attempt the rewind if we truly are pipelining */</comment>
              <expr_stmt><expr><call><name pos:line="273" pos:column="15">infof<pos:position pos:line="273" pos:column="20"/></name><argument_list pos:line="273" pos:column="20">(<argument><expr><name><name pos:line="273" pos:column="21">conn<pos:position pos:line="273" pos:column="25"/></name><operator pos:line="273" pos:column="25">-&gt;<pos:position pos:line="273" pos:column="30"/></operator><name pos:line="273" pos:column="27">data<pos:position pos:line="273" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="273" pos:column="33">"Rewinding %zu bytes\n"<pos:position pos:line="273" pos:column="56"/></literal></expr></argument>,<argument><expr><name pos:line="273" pos:column="57">dataleft<pos:position pos:line="273" pos:column="65"/></name></expr></argument>)<pos:position pos:line="273" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="67"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="274" pos:column="15">read_rewind<pos:position pos:line="274" pos:column="26"/></name><argument_list pos:line="274" pos:column="26">(<argument><expr><name pos:line="274" pos:column="27">conn<pos:position pos:line="274" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="274" pos:column="33">dataleft<pos:position pos:line="274" pos:column="41"/></name></expr></argument>)<pos:position pos:line="274" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="274" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="275" pos:column="14"/></block></then></if>
          }<pos:position pos:line="276" pos:column="12"/></block></then></if>
        }<pos:position pos:line="277" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="278" pos:column="9">/* If it returned OK, we just keep going */</comment>
      }<pos:position pos:line="279" pos:column="8"/></block></then></if>
<cpp:endif pos:line="280" pos:column="1">#<cpp:directive pos:line="280" pos:column="2">endif<pos:position pos:line="280" pos:column="7"/></cpp:directive></cpp:endif>   <comment type="block" pos:line="280" pos:column="10">/* CURL_DISABLE_HTTP */</comment>

      <comment type="block" pos:line="282" pos:column="7">/* Account for body content stored in the header buffer */</comment>
      <if pos:line="283" pos:column="7">if<condition pos:line="283" pos:column="9">(<expr><name><name pos:line="283" pos:column="10">k<pos:position pos:line="283" pos:column="11"/></name><operator pos:line="283" pos:column="11">-&gt;<pos:position pos:line="283" pos:column="16"/></operator><name pos:line="283" pos:column="13">badheader<pos:position pos:line="283" pos:column="22"/></name></name> <operator pos:line="283" pos:column="23">&amp;&amp;<pos:position pos:line="283" pos:column="33"/></operator> <operator pos:line="283" pos:column="26">!<pos:position pos:line="283" pos:column="27"/></operator><name><name pos:line="283" pos:column="27">k<pos:position pos:line="283" pos:column="28"/></name><operator pos:line="283" pos:column="28">-&gt;<pos:position pos:line="283" pos:column="33"/></operator><name pos:line="283" pos:column="30">ignorebody<pos:position pos:line="283" pos:column="40"/></name></name></expr>)<pos:position pos:line="283" pos:column="41"/></condition><then pos:line="283" pos:column="41"> <block pos:line="283" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="284" pos:column="9">DEBUGF<pos:position pos:line="284" pos:column="15"/></name><argument_list pos:line="284" pos:column="15">(<argument><expr><call><name pos:line="284" pos:column="16">infof<pos:position pos:line="284" pos:column="21"/></name><argument_list pos:line="284" pos:column="21">(<argument><expr><name pos:line="284" pos:column="22">data<pos:position pos:line="284" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="284" pos:column="28">"Increasing bytecount by %zu from hbuflen\n"<pos:position pos:line="284" pos:column="72"/></literal></expr></argument>,
                     <argument><expr><name><name pos:line="285" pos:column="22">k<pos:position pos:line="285" pos:column="23"/></name><operator pos:line="285" pos:column="23">-&gt;<pos:position pos:line="285" pos:column="28"/></operator><name pos:line="285" pos:column="25">hbuflen<pos:position pos:line="285" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="285" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="285" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="285" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="286" pos:column="9">k<pos:position pos:line="286" pos:column="10"/></name><operator pos:line="286" pos:column="10">-&gt;<pos:position pos:line="286" pos:column="15"/></operator><name pos:line="286" pos:column="12">bytecount<pos:position pos:line="286" pos:column="21"/></name></name> <operator pos:line="286" pos:column="22">+=<pos:position pos:line="286" pos:column="24"/></operator> <name><name pos:line="286" pos:column="25">k<pos:position pos:line="286" pos:column="26"/></name><operator pos:line="286" pos:column="26">-&gt;<pos:position pos:line="286" pos:column="31"/></operator><name pos:line="286" pos:column="28">hbuflen<pos:position pos:line="286" pos:column="35"/></name></name></expr>;<pos:position pos:line="286" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="287" pos:column="8"/></block></then></if>

      <if pos:line="289" pos:column="7">if<condition pos:line="289" pos:column="9">(<expr><operator pos:line="289" pos:column="10">(<pos:position pos:line="289" pos:column="11"/></operator><operator pos:line="289" pos:column="11">-<pos:position pos:line="289" pos:column="12"/></operator><literal type="number" pos:line="289" pos:column="12">1<pos:position pos:line="289" pos:column="13"/></literal> <operator pos:line="289" pos:column="14">!=<pos:position pos:line="289" pos:column="16"/></operator> <name><name pos:line="289" pos:column="17">k<pos:position pos:line="289" pos:column="18"/></name><operator pos:line="289" pos:column="18">-&gt;<pos:position pos:line="289" pos:column="23"/></operator><name pos:line="289" pos:column="20">maxdownload<pos:position pos:line="289" pos:column="31"/></name></name><operator pos:line="289" pos:column="31">)<pos:position pos:line="289" pos:column="32"/></operator> <operator pos:line="289" pos:column="33">&amp;&amp;<pos:position pos:line="289" pos:column="43"/></operator>
         <operator pos:line="290" pos:column="10">(<pos:position pos:line="290" pos:column="11"/></operator><name><name pos:line="290" pos:column="11">k<pos:position pos:line="290" pos:column="12"/></name><operator pos:line="290" pos:column="12">-&gt;<pos:position pos:line="290" pos:column="17"/></operator><name pos:line="290" pos:column="14">bytecount<pos:position pos:line="290" pos:column="23"/></name></name> <operator pos:line="290" pos:column="24">+<pos:position pos:line="290" pos:column="25"/></operator> <name pos:line="290" pos:column="26">nread<pos:position pos:line="290" pos:column="31"/></name> <operator pos:line="290" pos:column="32">&gt;=<pos:position pos:line="290" pos:column="37"/></operator> <name><name pos:line="290" pos:column="35">k<pos:position pos:line="290" pos:column="36"/></name><operator pos:line="290" pos:column="36">-&gt;<pos:position pos:line="290" pos:column="41"/></operator><name pos:line="290" pos:column="38">maxdownload<pos:position pos:line="290" pos:column="49"/></name></name><operator pos:line="290" pos:column="49">)<pos:position pos:line="290" pos:column="50"/></operator></expr>)<pos:position pos:line="290" pos:column="51"/></condition><then pos:line="290" pos:column="51"> <block pos:line="290" pos:column="52">{

        <expr_stmt><expr><name pos:line="292" pos:column="9">excess<pos:position pos:line="292" pos:column="15"/></name> <operator pos:line="292" pos:column="16">=<pos:position pos:line="292" pos:column="17"/></operator> <call pos:line="292" pos:column="18">(<name pos:line="292" pos:column="19">size_t<pos:position pos:line="292" pos:column="25"/></name>)<argument_list pos:line="292" pos:column="26">(<argument><expr><name><name pos:line="292" pos:column="27">k<pos:position pos:line="292" pos:column="28"/></name><operator pos:line="292" pos:column="28">-&gt;<pos:position pos:line="292" pos:column="33"/></operator><name pos:line="292" pos:column="30">bytecount<pos:position pos:line="292" pos:column="39"/></name></name> <operator pos:line="292" pos:column="40">+<pos:position pos:line="292" pos:column="41"/></operator> <name pos:line="292" pos:column="42">nread<pos:position pos:line="292" pos:column="47"/></name> <operator pos:line="292" pos:column="48">-<pos:position pos:line="292" pos:column="49"/></operator> <name><name pos:line="292" pos:column="50">k<pos:position pos:line="292" pos:column="51"/></name><operator pos:line="292" pos:column="51">-&gt;<pos:position pos:line="292" pos:column="56"/></operator><name pos:line="292" pos:column="53">maxdownload<pos:position pos:line="292" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="292" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="66"/></expr_stmt>
        <if pos:line="293" pos:column="9">if<condition pos:line="293" pos:column="11">(<expr><name pos:line="293" pos:column="12">excess<pos:position pos:line="293" pos:column="18"/></name> <operator pos:line="293" pos:column="19">&gt;<pos:position pos:line="293" pos:column="23"/></operator> <literal type="number" pos:line="293" pos:column="21">0<pos:position pos:line="293" pos:column="22"/></literal> <operator pos:line="293" pos:column="23">&amp;&amp;<pos:position pos:line="293" pos:column="33"/></operator> <operator pos:line="293" pos:column="26">!<pos:position pos:line="293" pos:column="27"/></operator><name><name pos:line="293" pos:column="27">k<pos:position pos:line="293" pos:column="28"/></name><operator pos:line="293" pos:column="28">-&gt;<pos:position pos:line="293" pos:column="33"/></operator><name pos:line="293" pos:column="30">ignorebody<pos:position pos:line="293" pos:column="40"/></name></name></expr>)<pos:position pos:line="293" pos:column="41"/></condition><then pos:line="293" pos:column="41"> <block pos:line="293" pos:column="42">{
          <if pos:line="294" pos:column="11">if<condition pos:line="294" pos:column="13">(<expr><call><name pos:line="294" pos:column="14">Curl_pipeline_wanted<pos:position pos:line="294" pos:column="34"/></name><argument_list pos:line="294" pos:column="34">(<argument><expr><name><name pos:line="294" pos:column="35">conn<pos:position pos:line="294" pos:column="39"/></name><operator pos:line="294" pos:column="39">-&gt;<pos:position pos:line="294" pos:column="44"/></operator><name pos:line="294" pos:column="41">data<pos:position pos:line="294" pos:column="45"/></name><operator pos:line="294" pos:column="45">-&gt;<pos:position pos:line="294" pos:column="50"/></operator><name pos:line="294" pos:column="47">multi<pos:position pos:line="294" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="294" pos:column="54">CURLPIPE_HTTP1<pos:position pos:line="294" pos:column="68"/></name></expr></argument>)<pos:position pos:line="294" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="294" pos:column="70"/></condition><then pos:line="294" pos:column="70"> <block pos:line="294" pos:column="71">{
            <expr_stmt><expr><call><name pos:line="295" pos:column="13">infof<pos:position pos:line="295" pos:column="18"/></name><argument_list pos:line="295" pos:column="18">(<argument><expr><name pos:line="295" pos:column="19">data<pos:position pos:line="295" pos:column="23"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="296" pos:column="19">"Rewinding stream by : %zu"<pos:position pos:line="296" pos:column="46"/></literal>
                  <literal type="string" pos:line="297" pos:column="19">" bytes on url %s (size = %"<pos:position pos:line="297" pos:column="47"/></literal> <name pos:line="297" pos:column="48">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="297" pos:column="70"/></name>
                  <literal type="string" pos:line="298" pos:column="19">", maxdownload = %"<pos:position pos:line="298" pos:column="38"/></literal> <name pos:line="298" pos:column="39">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="298" pos:column="61"/></name>
                  <literal type="string" pos:line="299" pos:column="19">", bytecount = %"<pos:position pos:line="299" pos:column="36"/></literal> <name pos:line="299" pos:column="37">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="299" pos:column="59"/></name> <literal type="string" pos:line="299" pos:column="60">", nread = %zd)\n"<pos:position pos:line="299" pos:column="78"/></literal></expr></argument>,
                  <argument><expr><name pos:line="300" pos:column="19">excess<pos:position pos:line="300" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="300" pos:column="27">data<pos:position pos:line="300" pos:column="31"/></name><operator pos:line="300" pos:column="31">-&gt;<pos:position pos:line="300" pos:column="36"/></operator><name pos:line="300" pos:column="33">state<pos:position pos:line="300" pos:column="38"/></name><operator pos:line="300" pos:column="38">.<pos:position pos:line="300" pos:column="39"/></operator><name pos:line="300" pos:column="39">path<pos:position pos:line="300" pos:column="43"/></name></name></expr></argument>,
                  <argument><expr><name><name pos:line="301" pos:column="19">k<pos:position pos:line="301" pos:column="20"/></name><operator pos:line="301" pos:column="20">-&gt;<pos:position pos:line="301" pos:column="25"/></operator><name pos:line="301" pos:column="22">size<pos:position pos:line="301" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="301" pos:column="28">k<pos:position pos:line="301" pos:column="29"/></name><operator pos:line="301" pos:column="29">-&gt;<pos:position pos:line="301" pos:column="34"/></operator><name pos:line="301" pos:column="31">maxdownload<pos:position pos:line="301" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="301" pos:column="44">k<pos:position pos:line="301" pos:column="45"/></name><operator pos:line="301" pos:column="45">-&gt;<pos:position pos:line="301" pos:column="50"/></operator><name pos:line="301" pos:column="47">bytecount<pos:position pos:line="301" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="301" pos:column="58">nread<pos:position pos:line="301" pos:column="63"/></name></expr></argument>)<pos:position pos:line="301" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="301" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="302" pos:column="13">read_rewind<pos:position pos:line="302" pos:column="24"/></name><argument_list pos:line="302" pos:column="24">(<argument><expr><name pos:line="302" pos:column="25">conn<pos:position pos:line="302" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="302" pos:column="31">excess<pos:position pos:line="302" pos:column="37"/></name></expr></argument>)<pos:position pos:line="302" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="39"/></expr_stmt>
          }<pos:position pos:line="303" pos:column="12"/></block></then>
          <else pos:line="304" pos:column="11">else <block pos:line="304" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="305" pos:column="13">infof<pos:position pos:line="305" pos:column="18"/></name><argument_list pos:line="305" pos:column="18">(<argument><expr><name pos:line="305" pos:column="19">data<pos:position pos:line="305" pos:column="23"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="306" pos:column="19">"Excess found in a non pipelined read:"<pos:position pos:line="306" pos:column="58"/></literal>
                  <literal type="string" pos:line="307" pos:column="19">" excess = %zu"<pos:position pos:line="307" pos:column="34"/></literal>
                  <literal type="string" pos:line="308" pos:column="19">", size = %"<pos:position pos:line="308" pos:column="31"/></literal> <name pos:line="308" pos:column="32">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="308" pos:column="54"/></name>
                  <literal type="string" pos:line="309" pos:column="19">", maxdownload = %"<pos:position pos:line="309" pos:column="38"/></literal> <name pos:line="309" pos:column="39">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="309" pos:column="61"/></name>
                  <literal type="string" pos:line="310" pos:column="19">", bytecount = %"<pos:position pos:line="310" pos:column="36"/></literal> <name pos:line="310" pos:column="37">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="310" pos:column="59"/></name> <literal type="string" pos:line="310" pos:column="60">"\n"<pos:position pos:line="310" pos:column="64"/></literal></expr></argument>,
                  <argument><expr><name pos:line="311" pos:column="19">excess<pos:position pos:line="311" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="311" pos:column="27">k<pos:position pos:line="311" pos:column="28"/></name><operator pos:line="311" pos:column="28">-&gt;<pos:position pos:line="311" pos:column="33"/></operator><name pos:line="311" pos:column="30">size<pos:position pos:line="311" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="311" pos:column="36">k<pos:position pos:line="311" pos:column="37"/></name><operator pos:line="311" pos:column="37">-&gt;<pos:position pos:line="311" pos:column="42"/></operator><name pos:line="311" pos:column="39">maxdownload<pos:position pos:line="311" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="311" pos:column="52">k<pos:position pos:line="311" pos:column="53"/></name><operator pos:line="311" pos:column="53">-&gt;<pos:position pos:line="311" pos:column="58"/></operator><name pos:line="311" pos:column="55">bytecount<pos:position pos:line="311" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="311" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="66"/></expr_stmt>
          }<pos:position pos:line="312" pos:column="12"/></block></else></if>
        }<pos:position pos:line="313" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="315" pos:column="9">nread<pos:position pos:line="315" pos:column="14"/></name> <operator pos:line="315" pos:column="15">=<pos:position pos:line="315" pos:column="16"/></operator> <call pos:line="315" pos:column="17">(<name pos:line="315" pos:column="18">ssize_t<pos:position pos:line="315" pos:column="25"/></name>) <argument_list pos:line="315" pos:column="27">(<argument><expr><name><name pos:line="315" pos:column="28">k<pos:position pos:line="315" pos:column="29"/></name><operator pos:line="315" pos:column="29">-&gt;<pos:position pos:line="315" pos:column="34"/></operator><name pos:line="315" pos:column="31">maxdownload<pos:position pos:line="315" pos:column="42"/></name></name> <operator pos:line="315" pos:column="43">-<pos:position pos:line="315" pos:column="44"/></operator> <name><name pos:line="315" pos:column="45">k<pos:position pos:line="315" pos:column="46"/></name><operator pos:line="315" pos:column="46">-&gt;<pos:position pos:line="315" pos:column="51"/></operator><name pos:line="315" pos:column="48">bytecount<pos:position pos:line="315" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="315" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="59"/></expr_stmt>
        <if pos:line="316" pos:column="9">if<condition pos:line="316" pos:column="11">(<expr><name pos:line="316" pos:column="12">nread<pos:position pos:line="316" pos:column="17"/></name> <operator pos:line="316" pos:column="18">&lt;<pos:position pos:line="316" pos:column="22"/></operator> <literal type="number" pos:line="316" pos:column="20">0<pos:position pos:line="316" pos:column="21"/></literal></expr>)<pos:position pos:line="316" pos:column="22"/></condition><then pos:line="316" pos:column="22"> <comment type="block" pos:line="316" pos:column="23">/* this should be unusual */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="317" pos:column="11">nread<pos:position pos:line="317" pos:column="16"/></name> <operator pos:line="317" pos:column="17">=<pos:position pos:line="317" pos:column="18"/></operator> <literal type="number" pos:line="317" pos:column="19">0<pos:position pos:line="317" pos:column="20"/></literal></expr>;<pos:position pos:line="317" pos:column="21"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name><name pos:line="319" pos:column="9">k<pos:position pos:line="319" pos:column="10"/></name><operator pos:line="319" pos:column="10">-&gt;<pos:position pos:line="319" pos:column="15"/></operator><name pos:line="319" pos:column="12">keepon<pos:position pos:line="319" pos:column="18"/></name></name> <operator pos:line="319" pos:column="19">&amp;=<pos:position pos:line="319" pos:column="25"/></operator> <operator pos:line="319" pos:column="22">~<pos:position pos:line="319" pos:column="23"/></operator><name pos:line="319" pos:column="23">KEEP_RECV<pos:position pos:line="319" pos:column="32"/></name></expr>;<pos:position pos:line="319" pos:column="33"/></expr_stmt> <comment type="block" pos:line="319" pos:column="34">/* we're done reading */</comment>
      }<pos:position pos:line="320" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="322" pos:column="7">k<pos:position pos:line="322" pos:column="8"/></name><operator pos:line="322" pos:column="8">-&gt;<pos:position pos:line="322" pos:column="13"/></operator><name pos:line="322" pos:column="10">bytecount<pos:position pos:line="322" pos:column="19"/></name></name> <operator pos:line="322" pos:column="20">+=<pos:position pos:line="322" pos:column="22"/></operator> <name pos:line="322" pos:column="23">nread<pos:position pos:line="322" pos:column="28"/></name></expr>;<pos:position pos:line="322" pos:column="29"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="324" pos:column="7">Curl_pgrsSetDownloadCounter<pos:position pos:line="324" pos:column="34"/></name><argument_list pos:line="324" pos:column="34">(<argument><expr><name pos:line="324" pos:column="35">data<pos:position pos:line="324" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="324" pos:column="41">k<pos:position pos:line="324" pos:column="42"/></name><operator pos:line="324" pos:column="42">-&gt;<pos:position pos:line="324" pos:column="47"/></operator><name pos:line="324" pos:column="44">bytecount<pos:position pos:line="324" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="324" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="55"/></expr_stmt>

      <if pos:line="326" pos:column="7">if<condition pos:line="326" pos:column="9">(<expr><operator pos:line="326" pos:column="10">!<pos:position pos:line="326" pos:column="11"/></operator><name><name pos:line="326" pos:column="11">k<pos:position pos:line="326" pos:column="12"/></name><operator pos:line="326" pos:column="12">-&gt;<pos:position pos:line="326" pos:column="17"/></operator><name pos:line="326" pos:column="14">chunk<pos:position pos:line="326" pos:column="19"/></name></name> <operator pos:line="326" pos:column="20">&amp;&amp;<pos:position pos:line="326" pos:column="30"/></operator> <operator pos:line="326" pos:column="23">(<pos:position pos:line="326" pos:column="24"/></operator><name pos:line="326" pos:column="24">nread<pos:position pos:line="326" pos:column="29"/></name> <operator pos:line="326" pos:column="30">||<pos:position pos:line="326" pos:column="32"/></operator> <name><name pos:line="326" pos:column="33">k<pos:position pos:line="326" pos:column="34"/></name><operator pos:line="326" pos:column="34">-&gt;<pos:position pos:line="326" pos:column="39"/></operator><name pos:line="326" pos:column="36">badheader<pos:position pos:line="326" pos:column="45"/></name></name> <operator pos:line="326" pos:column="46">||<pos:position pos:line="326" pos:column="48"/></operator> <name pos:line="326" pos:column="49">is_empty_data<pos:position pos:line="326" pos:column="62"/></name><operator pos:line="326" pos:column="62">)<pos:position pos:line="326" pos:column="63"/></operator></expr>)<pos:position pos:line="326" pos:column="64"/></condition><then pos:line="326" pos:column="64"> <block pos:line="326" pos:column="65">{
        <comment type="block" pos:line="327" pos:column="9">/* If this is chunky transfer, it was already written */</comment>

        <if pos:line="329" pos:column="9">if<condition pos:line="329" pos:column="11">(<expr><name><name pos:line="329" pos:column="12">k<pos:position pos:line="329" pos:column="13"/></name><operator pos:line="329" pos:column="13">-&gt;<pos:position pos:line="329" pos:column="18"/></operator><name pos:line="329" pos:column="15">badheader<pos:position pos:line="329" pos:column="24"/></name></name> <operator pos:line="329" pos:column="25">&amp;&amp;<pos:position pos:line="329" pos:column="35"/></operator> <operator pos:line="329" pos:column="28">!<pos:position pos:line="329" pos:column="29"/></operator><name><name pos:line="329" pos:column="29">k<pos:position pos:line="329" pos:column="30"/></name><operator pos:line="329" pos:column="30">-&gt;<pos:position pos:line="329" pos:column="35"/></operator><name pos:line="329" pos:column="32">ignorebody<pos:position pos:line="329" pos:column="42"/></name></name></expr>)<pos:position pos:line="329" pos:column="43"/></condition><then pos:line="329" pos:column="43"> <block pos:line="329" pos:column="44">{
          <comment type="block" pos:line="330" pos:column="11">/* we parsed a piece of data wrongly assuming it was a header
             and now we output it as body instead */</comment>

          <comment type="block" pos:line="333" pos:column="11">/* Don't let excess data pollute body writes */</comment>
          <if pos:line="334" pos:column="11">if<condition pos:line="334" pos:column="13">(<expr><name><name pos:line="334" pos:column="14">k<pos:position pos:line="334" pos:column="15"/></name><operator pos:line="334" pos:column="15">-&gt;<pos:position pos:line="334" pos:column="20"/></operator><name pos:line="334" pos:column="17">maxdownload<pos:position pos:line="334" pos:column="28"/></name></name> <operator pos:line="334" pos:column="29">==<pos:position pos:line="334" pos:column="31"/></operator> <operator pos:line="334" pos:column="32">-<pos:position pos:line="334" pos:column="33"/></operator><literal type="number" pos:line="334" pos:column="33">1<pos:position pos:line="334" pos:column="34"/></literal> <operator pos:line="334" pos:column="35">||<pos:position pos:line="334" pos:column="37"/></operator> <operator pos:line="334" pos:column="38">(<pos:position pos:line="334" pos:column="39"/></operator><name pos:line="334" pos:column="39">curl_off_t<pos:position pos:line="334" pos:column="49"/></name><operator pos:line="334" pos:column="49">)<pos:position pos:line="334" pos:column="50"/></operator><name><name pos:line="334" pos:column="50">k<pos:position pos:line="334" pos:column="51"/></name><operator pos:line="334" pos:column="51">-&gt;<pos:position pos:line="334" pos:column="56"/></operator><name pos:line="334" pos:column="53">hbuflen<pos:position pos:line="334" pos:column="60"/></name></name> <operator pos:line="334" pos:column="61">&lt;=<pos:position pos:line="334" pos:column="66"/></operator> <name><name pos:line="334" pos:column="64">k<pos:position pos:line="334" pos:column="65"/></name><operator pos:line="334" pos:column="65">-&gt;<pos:position pos:line="334" pos:column="70"/></operator><name pos:line="334" pos:column="67">maxdownload<pos:position pos:line="334" pos:column="78"/></name></name></expr>)<pos:position pos:line="334" pos:column="79"/></condition><then pos:line="334" pos:column="79">
            <block type="pseudo"><expr_stmt><expr><name pos:line="335" pos:column="13">result<pos:position pos:line="335" pos:column="19"/></name> <operator pos:line="335" pos:column="20">=<pos:position pos:line="335" pos:column="21"/></operator> <call><name pos:line="335" pos:column="22">Curl_client_write<pos:position pos:line="335" pos:column="39"/></name><argument_list pos:line="335" pos:column="39">(<argument><expr><name pos:line="335" pos:column="40">conn<pos:position pos:line="335" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="335" pos:column="46">CLIENTWRITE_BODY<pos:position pos:line="335" pos:column="62"/></name></expr></argument>,
                                       <argument><expr><name><name pos:line="336" pos:column="40">data<pos:position pos:line="336" pos:column="44"/></name><operator pos:line="336" pos:column="44">-&gt;<pos:position pos:line="336" pos:column="49"/></operator><name pos:line="336" pos:column="46">state<pos:position pos:line="336" pos:column="51"/></name><operator pos:line="336" pos:column="51">.<pos:position pos:line="336" pos:column="52"/></operator><name pos:line="336" pos:column="52">headerbuff<pos:position pos:line="336" pos:column="62"/></name></name></expr></argument>,
                                       <argument><expr><name><name pos:line="337" pos:column="40">k<pos:position pos:line="337" pos:column="41"/></name><operator pos:line="337" pos:column="41">-&gt;<pos:position pos:line="337" pos:column="46"/></operator><name pos:line="337" pos:column="43">hbuflen<pos:position pos:line="337" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="337" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="52"/></expr_stmt></block></then>
          <else pos:line="338" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="339" pos:column="13">result<pos:position pos:line="339" pos:column="19"/></name> <operator pos:line="339" pos:column="20">=<pos:position pos:line="339" pos:column="21"/></operator> <call><name pos:line="339" pos:column="22">Curl_client_write<pos:position pos:line="339" pos:column="39"/></name><argument_list pos:line="339" pos:column="39">(<argument><expr><name pos:line="339" pos:column="40">conn<pos:position pos:line="339" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="339" pos:column="46">CLIENTWRITE_BODY<pos:position pos:line="339" pos:column="62"/></name></expr></argument>,
                                       <argument><expr><name><name pos:line="340" pos:column="40">data<pos:position pos:line="340" pos:column="44"/></name><operator pos:line="340" pos:column="44">-&gt;<pos:position pos:line="340" pos:column="49"/></operator><name pos:line="340" pos:column="46">state<pos:position pos:line="340" pos:column="51"/></name><operator pos:line="340" pos:column="51">.<pos:position pos:line="340" pos:column="52"/></operator><name pos:line="340" pos:column="52">headerbuff<pos:position pos:line="340" pos:column="62"/></name></name></expr></argument>,
                                       <argument><expr><operator pos:line="341" pos:column="40">(<pos:position pos:line="341" pos:column="41"/></operator><name pos:line="341" pos:column="41">size_t<pos:position pos:line="341" pos:column="47"/></name><operator pos:line="341" pos:column="47">)<pos:position pos:line="341" pos:column="48"/></operator><name><name pos:line="341" pos:column="48">k<pos:position pos:line="341" pos:column="49"/></name><operator pos:line="341" pos:column="49">-&gt;<pos:position pos:line="341" pos:column="54"/></operator><name pos:line="341" pos:column="51">maxdownload<pos:position pos:line="341" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="341" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="64"/></expr_stmt></block></else></if>

          <if pos:line="343" pos:column="11">if<condition pos:line="343" pos:column="13">(<expr><name pos:line="343" pos:column="14">result<pos:position pos:line="343" pos:column="20"/></name></expr>)<pos:position pos:line="343" pos:column="21"/></condition><then pos:line="343" pos:column="21">
            <block type="pseudo"><return pos:line="344" pos:column="13">return <expr><name pos:line="344" pos:column="20">result<pos:position pos:line="344" pos:column="26"/></name></expr>;<pos:position pos:line="344" pos:column="27"/></return></block></then></if>
        }<pos:position pos:line="345" pos:column="10"/></block></then></if>
        <if pos:line="346" pos:column="9">if<condition pos:line="346" pos:column="11">(<expr><name><name pos:line="346" pos:column="12">k<pos:position pos:line="346" pos:column="13"/></name><operator pos:line="346" pos:column="13">-&gt;<pos:position pos:line="346" pos:column="18"/></operator><name pos:line="346" pos:column="15">badheader<pos:position pos:line="346" pos:column="24"/></name></name> <operator pos:line="346" pos:column="25">&lt;<pos:position pos:line="346" pos:column="29"/></operator> <name pos:line="346" pos:column="27">HEADER_ALLBAD<pos:position pos:line="346" pos:column="40"/></name></expr>)<pos:position pos:line="346" pos:column="41"/></condition><then pos:line="346" pos:column="41"> <block pos:line="346" pos:column="42">{
          <comment type="block" pos:line="347" pos:column="11">/* This switch handles various content encodings. If there's an
             error here, be sure to check over the almost identical code
             in http_chunks.c.
             Make sure that ALL_CONTENT_ENCODINGS contains all the
             encodings handled here. */</comment>
<cpp:ifdef pos:line="352" pos:column="1">#<cpp:directive pos:line="352" pos:column="2">ifdef<pos:position pos:line="352" pos:column="7"/></cpp:directive> <name pos:line="352" pos:column="8">HAVE_LIBZ<pos:position pos:line="352" pos:column="17"/></name></cpp:ifdef>
          <switch pos:line="353" pos:column="11">switch<condition pos:line="353" pos:column="17">(<expr><ternary><condition><expr><name><name pos:line="353" pos:column="18">conn<pos:position pos:line="353" pos:column="22"/></name><operator pos:line="353" pos:column="22">-&gt;<pos:position pos:line="353" pos:column="27"/></operator><name pos:line="353" pos:column="24">data<pos:position pos:line="353" pos:column="28"/></name><operator pos:line="353" pos:column="28">-&gt;<pos:position pos:line="353" pos:column="33"/></operator><name pos:line="353" pos:column="30">set<pos:position pos:line="353" pos:column="33"/></name><operator pos:line="353" pos:column="33">.<pos:position pos:line="353" pos:column="34"/></operator><name pos:line="353" pos:column="34">http_ce_skip<pos:position pos:line="353" pos:column="46"/></name></name></expr> ?<pos:position pos:line="353" pos:column="48"/></condition><then pos:line="353" pos:column="48">
                 <expr><name pos:line="354" pos:column="18">IDENTITY<pos:position pos:line="354" pos:column="26"/></name></expr> <pos:position pos:line="354" pos:column="27"/></then><else pos:line="354" pos:column="27">: <expr><name><name pos:line="354" pos:column="29">k<pos:position pos:line="354" pos:column="30"/></name><operator pos:line="354" pos:column="30">-&gt;<pos:position pos:line="354" pos:column="35"/></operator><name pos:line="354" pos:column="32">auto_decoding<pos:position pos:line="354" pos:column="45"/></name></name></expr></else></ternary></expr>)<pos:position pos:line="354" pos:column="46"/></condition> <block pos:line="354" pos:column="47">{
          <case pos:line="355" pos:column="11">case <expr><name pos:line="355" pos:column="16">IDENTITY<pos:position pos:line="355" pos:column="24"/></name></expr>:<pos:position pos:line="355" pos:column="25"/></case>
<cpp:endif pos:line="356" pos:column="1">#<cpp:directive pos:line="356" pos:column="2">endif<pos:position pos:line="356" pos:column="7"/></cpp:directive></cpp:endif>
            <comment type="block" pos:line="357" pos:column="13">/* This is the default when the server sends no
               Content-Encoding header. See Curl_readwrite_init; the
               memset() call initializes k-&gt;auto_decoding to zero. */</comment>
            <if pos:line="360" pos:column="13">if<condition pos:line="360" pos:column="15">(<expr><operator pos:line="360" pos:column="16">!<pos:position pos:line="360" pos:column="17"/></operator><name><name pos:line="360" pos:column="17">k<pos:position pos:line="360" pos:column="18"/></name><operator pos:line="360" pos:column="18">-&gt;<pos:position pos:line="360" pos:column="23"/></operator><name pos:line="360" pos:column="20">ignorebody<pos:position pos:line="360" pos:column="30"/></name></name></expr>)<pos:position pos:line="360" pos:column="31"/></condition><then pos:line="360" pos:column="31"> <block pos:line="360" pos:column="32">{

<cpp:ifndef pos:line="362" pos:column="1">#<cpp:directive pos:line="362" pos:column="2">ifndef<pos:position pos:line="362" pos:column="8"/></cpp:directive> <name pos:line="362" pos:column="9">CURL_DISABLE_POP3<pos:position pos:line="362" pos:column="26"/></name></cpp:ifndef>
              <if pos:line="363" pos:column="15">if<condition pos:line="363" pos:column="17">(<expr><name><name pos:line="363" pos:column="18">conn<pos:position pos:line="363" pos:column="22"/></name><operator pos:line="363" pos:column="22">-&gt;<pos:position pos:line="363" pos:column="27"/></operator><name pos:line="363" pos:column="24">handler<pos:position pos:line="363" pos:column="31"/></name><operator pos:line="363" pos:column="31">-&gt;<pos:position pos:line="363" pos:column="36"/></operator><name pos:line="363" pos:column="33">protocol<pos:position pos:line="363" pos:column="41"/></name></name><operator pos:line="363" pos:column="41">&amp;<pos:position pos:line="363" pos:column="46"/></operator><name pos:line="363" pos:column="42">PROTO_FAMILY_POP3<pos:position pos:line="363" pos:column="59"/></name></expr>)<pos:position pos:line="363" pos:column="60"/></condition><then pos:line="363" pos:column="60">
                <block type="pseudo"><expr_stmt><expr><name pos:line="364" pos:column="17">result<pos:position pos:line="364" pos:column="23"/></name> <operator pos:line="364" pos:column="24">=<pos:position pos:line="364" pos:column="25"/></operator> <call><name pos:line="364" pos:column="26">Curl_pop3_write<pos:position pos:line="364" pos:column="41"/></name><argument_list pos:line="364" pos:column="41">(<argument><expr><name pos:line="364" pos:column="42">conn<pos:position pos:line="364" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="364" pos:column="48">k<pos:position pos:line="364" pos:column="49"/></name><operator pos:line="364" pos:column="49">-&gt;<pos:position pos:line="364" pos:column="54"/></operator><name pos:line="364" pos:column="51">str<pos:position pos:line="364" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="364" pos:column="56">nread<pos:position pos:line="364" pos:column="61"/></name></expr></argument>)<pos:position pos:line="364" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="364" pos:column="63"/></expr_stmt></block></then>
              <else pos:line="365" pos:column="15">else
<cpp:endif pos:line="366" pos:column="1">#<cpp:directive pos:line="366" pos:column="2">endif<pos:position pos:line="366" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="366" pos:column="8">/* CURL_DISABLE_POP3 */</comment>

                <block type="pseudo"><expr_stmt><expr><name pos:line="368" pos:column="17">result<pos:position pos:line="368" pos:column="23"/></name> <operator pos:line="368" pos:column="24">=<pos:position pos:line="368" pos:column="25"/></operator> <call><name pos:line="368" pos:column="26">Curl_client_write<pos:position pos:line="368" pos:column="43"/></name><argument_list pos:line="368" pos:column="43">(<argument><expr><name pos:line="368" pos:column="44">conn<pos:position pos:line="368" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="368" pos:column="50">CLIENTWRITE_BODY<pos:position pos:line="368" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="368" pos:column="68">k<pos:position pos:line="368" pos:column="69"/></name><operator pos:line="368" pos:column="69">-&gt;<pos:position pos:line="368" pos:column="74"/></operator><name pos:line="368" pos:column="71">str<pos:position pos:line="368" pos:column="74"/></name></name></expr></argument>,
                                           <argument><expr><name pos:line="369" pos:column="44">nread<pos:position pos:line="369" pos:column="49"/></name></expr></argument>)<pos:position pos:line="369" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="369" pos:column="51"/></expr_stmt></block></else></if>
            }<pos:position pos:line="370" pos:column="14"/></block></then></if>
<cpp:ifdef pos:line="371" pos:column="1">#<cpp:directive pos:line="371" pos:column="2">ifdef<pos:position pos:line="371" pos:column="7"/></cpp:directive> <name pos:line="371" pos:column="8">HAVE_LIBZ<pos:position pos:line="371" pos:column="17"/></name></cpp:ifdef>
            <break pos:line="372" pos:column="13">break;<pos:position pos:line="372" pos:column="19"/></break>

          <case pos:line="374" pos:column="11">case <expr><name pos:line="374" pos:column="16">DEFLATE<pos:position pos:line="374" pos:column="23"/></name></expr>:<pos:position pos:line="374" pos:column="24"/></case>
            <comment type="block" pos:line="375" pos:column="13">/* Assume CLIENTWRITE_BODY; headers are not encoded. */</comment>
            <if pos:line="376" pos:column="13">if<condition pos:line="376" pos:column="15">(<expr><operator pos:line="376" pos:column="16">!<pos:position pos:line="376" pos:column="17"/></operator><name><name pos:line="376" pos:column="17">k<pos:position pos:line="376" pos:column="18"/></name><operator pos:line="376" pos:column="18">-&gt;<pos:position pos:line="376" pos:column="23"/></operator><name pos:line="376" pos:column="20">ignorebody<pos:position pos:line="376" pos:column="30"/></name></name></expr>)<pos:position pos:line="376" pos:column="31"/></condition><then pos:line="376" pos:column="31">
              <block type="pseudo"><expr_stmt><expr><name pos:line="377" pos:column="15">result<pos:position pos:line="377" pos:column="21"/></name> <operator pos:line="377" pos:column="22">=<pos:position pos:line="377" pos:column="23"/></operator> <call><name pos:line="377" pos:column="24">Curl_unencode_deflate_write<pos:position pos:line="377" pos:column="51"/></name><argument_list pos:line="377" pos:column="51">(<argument><expr><name pos:line="377" pos:column="52">conn<pos:position pos:line="377" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="377" pos:column="58">k<pos:position pos:line="377" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="377" pos:column="61">nread<pos:position pos:line="377" pos:column="66"/></name></expr></argument>)<pos:position pos:line="377" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="377" pos:column="68"/></expr_stmt></block></then></if>
            <break pos:line="378" pos:column="13">break;<pos:position pos:line="378" pos:column="19"/></break>

          <case pos:line="380" pos:column="11">case <expr><name pos:line="380" pos:column="16">GZIP<pos:position pos:line="380" pos:column="20"/></name></expr>:<pos:position pos:line="380" pos:column="21"/></case>
            <comment type="block" pos:line="381" pos:column="13">/* Assume CLIENTWRITE_BODY; headers are not encoded. */</comment>
            <if pos:line="382" pos:column="13">if<condition pos:line="382" pos:column="15">(<expr><operator pos:line="382" pos:column="16">!<pos:position pos:line="382" pos:column="17"/></operator><name><name pos:line="382" pos:column="17">k<pos:position pos:line="382" pos:column="18"/></name><operator pos:line="382" pos:column="18">-&gt;<pos:position pos:line="382" pos:column="23"/></operator><name pos:line="382" pos:column="20">ignorebody<pos:position pos:line="382" pos:column="30"/></name></name></expr>)<pos:position pos:line="382" pos:column="31"/></condition><then pos:line="382" pos:column="31">
              <block type="pseudo"><expr_stmt><expr><name pos:line="383" pos:column="15">result<pos:position pos:line="383" pos:column="21"/></name> <operator pos:line="383" pos:column="22">=<pos:position pos:line="383" pos:column="23"/></operator> <call><name pos:line="383" pos:column="24">Curl_unencode_gzip_write<pos:position pos:line="383" pos:column="48"/></name><argument_list pos:line="383" pos:column="48">(<argument><expr><name pos:line="383" pos:column="49">conn<pos:position pos:line="383" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="383" pos:column="55">k<pos:position pos:line="383" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="383" pos:column="58">nread<pos:position pos:line="383" pos:column="63"/></name></expr></argument>)<pos:position pos:line="383" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="383" pos:column="65"/></expr_stmt></block></then></if>
            <break pos:line="384" pos:column="13">break;<pos:position pos:line="384" pos:column="19"/></break>

          <default pos:line="386" pos:column="11">default:<pos:position pos:line="386" pos:column="19"/></default>
            <expr_stmt><expr><call><name pos:line="387" pos:column="13">failf<pos:position pos:line="387" pos:column="18"/></name><argument_list pos:line="387" pos:column="18">(<argument><expr><name pos:line="387" pos:column="19">data<pos:position pos:line="387" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="387" pos:column="25">"Unrecognized content encoding type. "<pos:position pos:line="387" pos:column="63"/></literal>
                  <literal type="string" pos:line="388" pos:column="19">"libcurl understands `identity', `deflate' and `gzip' "<pos:position pos:line="388" pos:column="74"/></literal>
                  <literal type="string" pos:line="389" pos:column="19">"content encodings."<pos:position pos:line="389" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="389" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="390" pos:column="13">result<pos:position pos:line="390" pos:column="19"/></name> <operator pos:line="390" pos:column="20">=<pos:position pos:line="390" pos:column="21"/></operator> <name pos:line="390" pos:column="22">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="390" pos:column="48"/></name></expr>;<pos:position pos:line="390" pos:column="49"/></expr_stmt>
            <break pos:line="391" pos:column="13">break;<pos:position pos:line="391" pos:column="19"/></break>
          }<pos:position pos:line="392" pos:column="12"/></block></switch>
<cpp:endif pos:line="393" pos:column="1">#<cpp:directive pos:line="393" pos:column="2">endif<pos:position pos:line="393" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="394" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="395" pos:column="9">k<pos:position pos:line="395" pos:column="10"/></name><operator pos:line="395" pos:column="10">-&gt;<pos:position pos:line="395" pos:column="15"/></operator><name pos:line="395" pos:column="12">badheader<pos:position pos:line="395" pos:column="21"/></name></name> <operator pos:line="395" pos:column="22">=<pos:position pos:line="395" pos:column="23"/></operator> <name pos:line="395" pos:column="24">HEADER_NORMAL<pos:position pos:line="395" pos:column="37"/></name></expr>;<pos:position pos:line="395" pos:column="38"/></expr_stmt> <comment type="block" pos:line="395" pos:column="39">/* taken care of now */</comment>

        <if pos:line="397" pos:column="9">if<condition pos:line="397" pos:column="11">(<expr><name pos:line="397" pos:column="12">result<pos:position pos:line="397" pos:column="18"/></name></expr>)<pos:position pos:line="397" pos:column="19"/></condition><then pos:line="397" pos:column="19">
          <block type="pseudo"><return pos:line="398" pos:column="11">return <expr><name pos:line="398" pos:column="18">result<pos:position pos:line="398" pos:column="24"/></name></expr>;<pos:position pos:line="398" pos:column="25"/></return></block></then></if>
      }<pos:position pos:line="399" pos:column="8"/></block></then></if>

    }<pos:position pos:line="401" pos:column="6"/></block></then></if> <comment type="block" pos:line="401" pos:column="7">/* if(!header and data to read) */</comment>

    <if pos:line="403" pos:column="5">if<condition pos:line="403" pos:column="7">(<expr><name><name pos:line="403" pos:column="8">conn<pos:position pos:line="403" pos:column="12"/></name><operator pos:line="403" pos:column="12">-&gt;<pos:position pos:line="403" pos:column="17"/></operator><name pos:line="403" pos:column="14">handler<pos:position pos:line="403" pos:column="21"/></name><operator pos:line="403" pos:column="21">-&gt;<pos:position pos:line="403" pos:column="26"/></operator><name pos:line="403" pos:column="23">readwrite<pos:position pos:line="403" pos:column="32"/></name></name> <operator pos:line="403" pos:column="33">&amp;&amp;<pos:position pos:line="403" pos:column="43"/></operator>
       <operator pos:line="404" pos:column="8">(<pos:position pos:line="404" pos:column="9"/></operator><name pos:line="404" pos:column="9">excess<pos:position pos:line="404" pos:column="15"/></name> <operator pos:line="404" pos:column="16">&gt;<pos:position pos:line="404" pos:column="20"/></operator> <literal type="number" pos:line="404" pos:column="18">0<pos:position pos:line="404" pos:column="19"/></literal> <operator pos:line="404" pos:column="20">&amp;&amp;<pos:position pos:line="404" pos:column="30"/></operator> <operator pos:line="404" pos:column="23">!<pos:position pos:line="404" pos:column="24"/></operator><name><name pos:line="404" pos:column="24">conn<pos:position pos:line="404" pos:column="28"/></name><operator pos:line="404" pos:column="28">-&gt;<pos:position pos:line="404" pos:column="33"/></operator><name pos:line="404" pos:column="30">bits<pos:position pos:line="404" pos:column="34"/></name><operator pos:line="404" pos:column="34">.<pos:position pos:line="404" pos:column="35"/></operator><name pos:line="404" pos:column="35">stream_was_rewound<pos:position pos:line="404" pos:column="53"/></name></name><operator pos:line="404" pos:column="53">)<pos:position pos:line="404" pos:column="54"/></operator></expr>)<pos:position pos:line="404" pos:column="55"/></condition><then pos:line="404" pos:column="55"> <block pos:line="404" pos:column="56">{
      <comment type="block" pos:line="405" pos:column="7">/* Parse the excess data */</comment>
      <expr_stmt><expr><name><name pos:line="406" pos:column="7">k<pos:position pos:line="406" pos:column="8"/></name><operator pos:line="406" pos:column="8">-&gt;<pos:position pos:line="406" pos:column="13"/></operator><name pos:line="406" pos:column="10">str<pos:position pos:line="406" pos:column="13"/></name></name> <operator pos:line="406" pos:column="14">+=<pos:position pos:line="406" pos:column="16"/></operator> <name pos:line="406" pos:column="17">nread<pos:position pos:line="406" pos:column="22"/></name></expr>;<pos:position pos:line="406" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name pos:line="407" pos:column="7">nread<pos:position pos:line="407" pos:column="12"/></name> <operator pos:line="407" pos:column="13">=<pos:position pos:line="407" pos:column="14"/></operator> <operator pos:line="407" pos:column="15">(<pos:position pos:line="407" pos:column="16"/></operator><name pos:line="407" pos:column="16">ssize_t<pos:position pos:line="407" pos:column="23"/></name><operator pos:line="407" pos:column="23">)<pos:position pos:line="407" pos:column="24"/></operator><name pos:line="407" pos:column="24">excess<pos:position pos:line="407" pos:column="30"/></name></expr>;<pos:position pos:line="407" pos:column="31"/></expr_stmt>

      <expr_stmt><expr><name pos:line="409" pos:column="7">result<pos:position pos:line="409" pos:column="13"/></name> <operator pos:line="409" pos:column="14">=<pos:position pos:line="409" pos:column="15"/></operator> <call><name><name pos:line="409" pos:column="16">conn<pos:position pos:line="409" pos:column="20"/></name><operator pos:line="409" pos:column="20">-&gt;<pos:position pos:line="409" pos:column="25"/></operator><name pos:line="409" pos:column="22">handler<pos:position pos:line="409" pos:column="29"/></name><operator pos:line="409" pos:column="29">-&gt;<pos:position pos:line="409" pos:column="34"/></operator><name pos:line="409" pos:column="31">readwrite<pos:position pos:line="409" pos:column="40"/></name></name><argument_list pos:line="409" pos:column="40">(<argument><expr><name pos:line="409" pos:column="41">data<pos:position pos:line="409" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="409" pos:column="47">conn<pos:position pos:line="409" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="409" pos:column="53">&amp;<pos:position pos:line="409" pos:column="58"/></operator><name pos:line="409" pos:column="54">nread<pos:position pos:line="409" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="409" pos:column="61">&amp;<pos:position pos:line="409" pos:column="66"/></operator><name pos:line="409" pos:column="62">readmore<pos:position pos:line="409" pos:column="70"/></name></expr></argument>)<pos:position pos:line="409" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="409" pos:column="72"/></expr_stmt>
      <if pos:line="410" pos:column="7">if<condition pos:line="410" pos:column="9">(<expr><name pos:line="410" pos:column="10">result<pos:position pos:line="410" pos:column="16"/></name></expr>)<pos:position pos:line="410" pos:column="17"/></condition><then pos:line="410" pos:column="17">
        <block type="pseudo"><return pos:line="411" pos:column="9">return <expr><name pos:line="411" pos:column="16">result<pos:position pos:line="411" pos:column="22"/></name></expr>;<pos:position pos:line="411" pos:column="23"/></return></block></then></if>

      <if pos:line="413" pos:column="7">if<condition pos:line="413" pos:column="9">(<expr><name pos:line="413" pos:column="10">readmore<pos:position pos:line="413" pos:column="18"/></name></expr>)<pos:position pos:line="413" pos:column="19"/></condition><then pos:line="413" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="414" pos:column="9">k<pos:position pos:line="414" pos:column="10"/></name><operator pos:line="414" pos:column="10">-&gt;<pos:position pos:line="414" pos:column="15"/></operator><name pos:line="414" pos:column="12">keepon<pos:position pos:line="414" pos:column="18"/></name></name> <operator pos:line="414" pos:column="19">|=<pos:position pos:line="414" pos:column="21"/></operator> <name pos:line="414" pos:column="22">KEEP_RECV<pos:position pos:line="414" pos:column="31"/></name></expr>;<pos:position pos:line="414" pos:column="32"/></expr_stmt></block></then></if> <comment type="block" pos:line="414" pos:column="33">/* we're not done reading */</comment>
      <break pos:line="415" pos:column="7">break;<pos:position pos:line="415" pos:column="13"/></break>
    }<pos:position pos:line="416" pos:column="6"/></block></then></if>

    <if pos:line="418" pos:column="5">if<condition pos:line="418" pos:column="7">(<expr><name pos:line="418" pos:column="8">is_empty_data<pos:position pos:line="418" pos:column="21"/></name></expr>)<pos:position pos:line="418" pos:column="22"/></condition><then pos:line="418" pos:column="22"> <block pos:line="418" pos:column="23">{
      <comment type="block" pos:line="419" pos:column="7">/* if we received nothing, the server closed the connection and we
         are done */</comment>
      <expr_stmt><expr><name><name pos:line="421" pos:column="7">k<pos:position pos:line="421" pos:column="8"/></name><operator pos:line="421" pos:column="8">-&gt;<pos:position pos:line="421" pos:column="13"/></operator><name pos:line="421" pos:column="10">keepon<pos:position pos:line="421" pos:column="16"/></name></name> <operator pos:line="421" pos:column="17">&amp;=<pos:position pos:line="421" pos:column="23"/></operator> <operator pos:line="421" pos:column="20">~<pos:position pos:line="421" pos:column="21"/></operator><name pos:line="421" pos:column="21">KEEP_RECV<pos:position pos:line="421" pos:column="30"/></name></expr>;<pos:position pos:line="421" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="422" pos:column="6"/></block></then></if>

  }<pos:position pos:line="424" pos:column="4"/></block> while<condition pos:line="424" pos:column="10">(<expr><call><name pos:line="424" pos:column="11">data_pending<pos:position pos:line="424" pos:column="23"/></name><argument_list pos:line="424" pos:column="23">(<argument><expr><name pos:line="424" pos:column="24">conn<pos:position pos:line="424" pos:column="28"/></name></expr></argument>)<pos:position pos:line="424" pos:column="29"/></argument_list></call> <operator pos:line="424" pos:column="30">&amp;&amp;<pos:position pos:line="424" pos:column="40"/></operator> <name pos:line="424" pos:column="33">maxloops<pos:position pos:line="424" pos:column="41"/></name><operator pos:line="424" pos:column="41">--<pos:position pos:line="424" pos:column="43"/></operator></expr>)<pos:position pos:line="424" pos:column="44"/></condition>;<pos:position pos:line="424" pos:column="45"/></do>

  <if pos:line="426" pos:column="3">if<condition pos:line="426" pos:column="5">(<expr><name pos:line="426" pos:column="6">maxloops<pos:position pos:line="426" pos:column="14"/></name> <operator pos:line="426" pos:column="15">&lt;=<pos:position pos:line="426" pos:column="20"/></operator> <literal type="number" pos:line="426" pos:column="18">0<pos:position pos:line="426" pos:column="19"/></literal></expr>)<pos:position pos:line="426" pos:column="20"/></condition><then pos:line="426" pos:column="20"> <block pos:line="426" pos:column="21">{
    <comment type="block" pos:line="427" pos:column="5">/* we mark it as read-again-please */</comment>
    <expr_stmt><expr><name><name pos:line="428" pos:column="5">conn<pos:position pos:line="428" pos:column="9"/></name><operator pos:line="428" pos:column="9">-&gt;<pos:position pos:line="428" pos:column="14"/></operator><name pos:line="428" pos:column="11">cselect_bits<pos:position pos:line="428" pos:column="23"/></name></name> <operator pos:line="428" pos:column="24">=<pos:position pos:line="428" pos:column="25"/></operator> <name pos:line="428" pos:column="26">CURL_CSELECT_IN<pos:position pos:line="428" pos:column="41"/></name></expr>;<pos:position pos:line="428" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="429" pos:column="5">*<pos:position pos:line="429" pos:column="6"/></operator><name pos:line="429" pos:column="6">comeback<pos:position pos:line="429" pos:column="14"/></name> <operator pos:line="429" pos:column="15">=<pos:position pos:line="429" pos:column="16"/></operator> <name pos:line="429" pos:column="17">TRUE<pos:position pos:line="429" pos:column="21"/></name></expr>;<pos:position pos:line="429" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="430" pos:column="4"/></block></then></if>

  <if pos:line="432" pos:column="3">if<condition pos:line="432" pos:column="5">(<expr><operator pos:line="432" pos:column="6">(<pos:position pos:line="432" pos:column="7"/></operator><operator pos:line="432" pos:column="7">(<pos:position pos:line="432" pos:column="8"/></operator><name><name pos:line="432" pos:column="8">k<pos:position pos:line="432" pos:column="9"/></name><operator pos:line="432" pos:column="9">-&gt;<pos:position pos:line="432" pos:column="14"/></operator><name pos:line="432" pos:column="11">keepon<pos:position pos:line="432" pos:column="17"/></name></name> <operator pos:line="432" pos:column="18">&amp;<pos:position pos:line="432" pos:column="23"/></operator> <operator pos:line="432" pos:column="20">(<pos:position pos:line="432" pos:column="21"/></operator><name pos:line="432" pos:column="21">KEEP_RECV<pos:position pos:line="432" pos:column="30"/></name><operator pos:line="432" pos:column="30">|<pos:position pos:line="432" pos:column="31"/></operator><name pos:line="432" pos:column="31">KEEP_SEND<pos:position pos:line="432" pos:column="40"/></name><operator pos:line="432" pos:column="40">)<pos:position pos:line="432" pos:column="41"/></operator><operator pos:line="432" pos:column="41">)<pos:position pos:line="432" pos:column="42"/></operator> <operator pos:line="432" pos:column="43">==<pos:position pos:line="432" pos:column="45"/></operator> <name pos:line="432" pos:column="46">KEEP_SEND<pos:position pos:line="432" pos:column="55"/></name><operator pos:line="432" pos:column="55">)<pos:position pos:line="432" pos:column="56"/></operator> <operator pos:line="432" pos:column="57">&amp;&amp;<pos:position pos:line="432" pos:column="67"/></operator>
     <name><name pos:line="433" pos:column="6">conn<pos:position pos:line="433" pos:column="10"/></name><operator pos:line="433" pos:column="10">-&gt;<pos:position pos:line="433" pos:column="15"/></operator><name pos:line="433" pos:column="12">bits<pos:position pos:line="433" pos:column="16"/></name><operator pos:line="433" pos:column="16">.<pos:position pos:line="433" pos:column="17"/></operator><name pos:line="433" pos:column="17">close<pos:position pos:line="433" pos:column="22"/></name></name></expr>)<pos:position pos:line="433" pos:column="23"/></condition><then pos:line="433" pos:column="23"> <block pos:line="433" pos:column="24">{
    <comment type="block" pos:line="434" pos:column="5">/* When we've read the entire thing and the close bit is set, the server
       may now close the connection. If there's now any kind of sending going
       on from our side, we need to stop that immediately. */</comment>
    <expr_stmt><expr><call><name pos:line="437" pos:column="5">infof<pos:position pos:line="437" pos:column="10"/></name><argument_list pos:line="437" pos:column="10">(<argument><expr><name pos:line="437" pos:column="11">data<pos:position pos:line="437" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="437" pos:column="17">"we are done reading and this is set to close, stop send\n"<pos:position pos:line="437" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="437" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="437" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="438" pos:column="5">k<pos:position pos:line="438" pos:column="6"/></name><operator pos:line="438" pos:column="6">-&gt;<pos:position pos:line="438" pos:column="11"/></operator><name pos:line="438" pos:column="8">keepon<pos:position pos:line="438" pos:column="14"/></name></name> <operator pos:line="438" pos:column="15">&amp;=<pos:position pos:line="438" pos:column="21"/></operator> <operator pos:line="438" pos:column="18">~<pos:position pos:line="438" pos:column="19"/></operator><name pos:line="438" pos:column="19">KEEP_SEND<pos:position pos:line="438" pos:column="28"/></name></expr>;<pos:position pos:line="438" pos:column="29"/></expr_stmt> <comment type="block" pos:line="438" pos:column="30">/* no writing anymore either */</comment>
  }<pos:position pos:line="439" pos:column="4"/></block></then></if>

  <return pos:line="441" pos:column="3">return <expr><name pos:line="441" pos:column="10">CURLE_OK<pos:position pos:line="441" pos:column="18"/></name></expr>;<pos:position pos:line="441" pos:column="19"/></return>
}<pos:position pos:line="442" pos:column="2"/></block></function></unit>
