<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1482_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">detect_proxy<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">proxy<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><name pos:line="3" pos:column="17">NULL<pos:position pos:line="3" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

  <comment type="block" pos:line="5" pos:column="3">/* If proxy was not specified, we check for default proxy environment
   * variables, to enable i.e Lynx compliance:
   *
   * http_proxy=http://some.server.dom:port/
   * https_proxy=http://some.server.dom:port/
   * ftp_proxy=http://some.server.dom:port/
   * no_proxy=domain1.dom,host.domain2.dom
   *   (a comma-separated list of hosts which should
   *   not be proxied, or an asterisk to override
   *   all proxy variables)
   * all_proxy=http://some.server.dom:port/
   *   (seems to exist for the CERN www lib. Probably
   *   the first to check for.)
   *
   * For compatibility, the all-uppercase versions of these variables are
   * checked if the lowercase versions don't exist.
   */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">char<pos:position pos:line="22" pos:column="7"/></name></type> <name><name pos:line="22" pos:column="8">proxy_env<pos:position pos:line="22" pos:column="17"/></name><index pos:line="22" pos:column="17">[<expr><literal type="number" pos:line="22" pos:column="18">128<pos:position pos:line="22" pos:column="21"/></literal></expr>]<pos:position pos:line="22" pos:column="22"/></index></name></decl>;<pos:position pos:line="22" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="23" pos:column="3">const<pos:position pos:line="23" pos:column="8"/></specifier> <name pos:line="23" pos:column="9">char<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">protop<pos:position pos:line="23" pos:column="21"/></name> <init pos:line="23" pos:column="22">= <expr><name><name pos:line="23" pos:column="24">conn<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">-&gt;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="30">handler<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">-&gt;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="39">scheme<pos:position pos:line="23" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="23" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">char<pos:position pos:line="24" pos:column="7"/></name> <modifier pos:line="24" pos:column="8">*<pos:position pos:line="24" pos:column="9"/></modifier></type><name pos:line="24" pos:column="9">envp<pos:position pos:line="24" pos:column="13"/></name> <init pos:line="24" pos:column="14">= <expr><name pos:line="24" pos:column="16">proxy_env<pos:position pos:line="24" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">char<pos:position pos:line="25" pos:column="7"/></name> <modifier pos:line="25" pos:column="8">*<pos:position pos:line="25" pos:column="9"/></modifier></type><name pos:line="25" pos:column="9">prox<pos:position pos:line="25" pos:column="13"/></name></decl>;<pos:position pos:line="25" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* Now, build &lt;protocol&gt;_proxy and check for such a one to use */</comment>
  <while pos:line="28" pos:column="3">while<condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">protop<pos:position pos:line="28" pos:column="16"/></name></expr>)<pos:position pos:line="28" pos:column="17"/></condition>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="29" pos:column="5">*<pos:position pos:line="29" pos:column="6"/></operator><name pos:line="29" pos:column="6">envp<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">++<pos:position pos:line="29" pos:column="12"/></operator> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <operator pos:line="29" pos:column="15">(<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">char<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">)<pos:position pos:line="29" pos:column="21"/></operator><call><name pos:line="29" pos:column="21">tolower<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><operator pos:line="29" pos:column="29">(<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="30">int<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">)<pos:position pos:line="29" pos:column="34"/></operator><operator pos:line="29" pos:column="34">*<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="35">protop<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">++<pos:position pos:line="29" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt></block></while>

  <comment type="block" pos:line="31" pos:column="3">/* append _proxy */</comment>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">strcpy<pos:position pos:line="32" pos:column="9"/></name><argument_list pos:line="32" pos:column="9">(<argument><expr><name pos:line="32" pos:column="10">envp<pos:position pos:line="32" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="16">"_proxy"<pos:position pos:line="32" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="34" pos:column="3">/* read the protocol proxy: */</comment>
  <expr_stmt><expr><name pos:line="35" pos:column="3">prox<pos:position pos:line="35" pos:column="7"/></name> <operator pos:line="35" pos:column="8">=<pos:position pos:line="35" pos:column="9"/></operator> <call><name pos:line="35" pos:column="10">curl_getenv<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">proxy_env<pos:position pos:line="35" pos:column="31"/></name></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="37" pos:column="3">/*
   * We don't try the uppercase version of HTTP_PROXY because of
   * security reasons:
   *
   * When curl is used in a webserver application
   * environment (cgi or php), this environment variable can
   * be controlled by the web server user by setting the
   * http header 'Proxy:' to some value.
   *
   * This can cause 'internal' http/ftp requests to be
   * arbitrarily redirected by any external attacker.
   */</comment>
  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><operator pos:line="49" pos:column="6">!<pos:position pos:line="49" pos:column="7"/></operator><name pos:line="49" pos:column="7">prox<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">&amp;&amp;<pos:position pos:line="49" pos:column="22"/></operator> <operator pos:line="49" pos:column="15">!<pos:position pos:line="49" pos:column="16"/></operator><call><name pos:line="49" pos:column="16">strcasecompare<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><literal type="string" pos:line="49" pos:column="31">"http_proxy"<pos:position pos:line="49" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="45">proxy_env<pos:position pos:line="49" pos:column="54"/></name></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="56"/></condition><then pos:line="49" pos:column="56"> <block pos:line="49" pos:column="57">{
    <comment type="block" pos:line="50" pos:column="5">/* There was no lowercase variable, try the uppercase version: */</comment>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">Curl_strntoupper<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><name pos:line="51" pos:column="22">proxy_env<pos:position pos:line="51" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="33">proxy_env<pos:position pos:line="51" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="44">sizeof<argument_list pos:line="51" pos:column="50">(<argument><expr><name pos:line="51" pos:column="51">proxy_env<pos:position pos:line="51" pos:column="60"/></name></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name pos:line="52" pos:column="5">prox<pos:position pos:line="52" pos:column="9"/></name> <operator pos:line="52" pos:column="10">=<pos:position pos:line="52" pos:column="11"/></operator> <call><name pos:line="52" pos:column="12">curl_getenv<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">proxy_env<pos:position pos:line="52" pos:column="33"/></name></expr></argument>)<pos:position pos:line="52" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <if pos:line="55" pos:column="3">if<condition pos:line="55" pos:column="5">(<expr><name pos:line="55" pos:column="6">prox<pos:position pos:line="55" pos:column="10"/></name></expr>)<pos:position pos:line="55" pos:column="11"/></condition><then pos:line="55" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="5">proxy<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <name pos:line="56" pos:column="13">prox<pos:position pos:line="56" pos:column="17"/></name></expr>;<pos:position pos:line="56" pos:column="18"/></expr_stmt></block></then> <comment type="block" pos:line="56" pos:column="19">/* use this */</comment>
  <else pos:line="57" pos:column="3">else <block pos:line="57" pos:column="8">{
    <expr_stmt><expr><name pos:line="58" pos:column="5">proxy<pos:position pos:line="58" pos:column="10"/></name> <operator pos:line="58" pos:column="11">=<pos:position pos:line="58" pos:column="12"/></operator> <call><name pos:line="58" pos:column="13">curl_getenv<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">(<argument><expr><literal type="string" pos:line="58" pos:column="25">"all_proxy"<pos:position pos:line="58" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt> <comment type="block" pos:line="58" pos:column="39">/* default proxy to use */</comment>
    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">(<expr><operator pos:line="59" pos:column="8">!<pos:position pos:line="59" pos:column="9"/></operator><name pos:line="59" pos:column="9">proxy<pos:position pos:line="59" pos:column="14"/></name></expr>)<pos:position pos:line="59" pos:column="15"/></condition><then pos:line="59" pos:column="15">
      <block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="7">proxy<pos:position pos:line="60" pos:column="12"/></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <call><name pos:line="60" pos:column="15">curl_getenv<pos:position pos:line="60" pos:column="26"/></name><argument_list pos:line="60" pos:column="26">(<argument><expr><literal type="string" pos:line="60" pos:column="27">"ALL_PROXY"<pos:position pos:line="60" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="40"/></expr_stmt></block></then></if>
  }<pos:position pos:line="61" pos:column="4"/></block></else></if>

  <return pos:line="63" pos:column="3">return <expr><name pos:line="63" pos:column="10">proxy<pos:position pos:line="63" pos:column="15"/></name></expr>;<pos:position pos:line="63" pos:column="16"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
